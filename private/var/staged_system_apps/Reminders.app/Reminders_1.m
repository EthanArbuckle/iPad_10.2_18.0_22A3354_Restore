uint64_t sub_10008EE24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 304);

  swift_release(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 352));
}

uint64_t sub_10008EE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  v5 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 272);
  result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result, v7);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v9 + 8))(v2, &off_1005EE0C8, a1, a2, (*(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 288)) & 1) == 0, ObjectType, v9);
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

void sub_10008EF10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  if (qword_10063D340 != -1)
    swift_once(&qword_10063D340, sub_10008D5D4);
  v3 = type metadata accessor for Logger(0);
  sub_100012DC4(v3, (uint64_t)qword_100641A70);
  v4 = sub_10002D32C((uint64_t)_swiftEmptyArrayStorage);
  sub_1000143B4((uint64_t)"Learn More open help", 20, 2, v4);
  swift_bridgeObjectRelease(v4);
  sub_10001413C((_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 296)), *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 296) + 24));
  sub_1002189F8(a1);
}

uint64_t sub_10008EFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 272);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType(result, v3);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v5 + 16))(v0, &off_1005EE0C8, ObjectType, v5);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

void sub_10008F040()
{
  _swift_stdlib_reportUnimplementedInitializer("Reminders.TTRIListDetailPresenter", 33, "init(interactor:viewModelSource:undoManager:)", 45, 0);
  __break(1u);
}

uint64_t sub_10008F06C()
{
  uint64_t v0;

  sub_1000381C8(v0 + *(_QWORD *)(*(_QWORD *)v0 + 264));
  sub_1000381C8(v0 + *(_QWORD *)(*(_QWORD *)v0 + 272));
  sub_1000381C8(v0 + *(_QWORD *)(*(_QWORD *)v0 + 280));
  sub_100027F10((_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 296)));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 304)));
  return swift_unknownObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 312)));
}

char *sub_10008F0D8()
{
  char *v0;

  v0 = TTRListDetailPresenter.deinit();
  sub_1000381C8((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 264)]);
  sub_1000381C8((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 272)]);
  sub_1000381C8((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 280)]);
  sub_100027F10(&v0[*(_QWORD *)(*(_QWORD *)v0 + 296)]);
  swift_unknownObjectRelease(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 304)]);
  swift_unknownObjectRelease(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 312)]);
  return v0;
}

uint64_t sub_10008F15C()
{
  char *v0;

  v0 = sub_10008F0D8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for TTRIListDetailPresenter(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for TTRIListDetailPresenter);
}

uint64_t sub_10008F188()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 288));
}

uint64_t sub_10008F1A0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100641B14);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10004A08C;
  return sub_10008E260();
}

uint64_t sub_10008F1EC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = swift_unknownObjectWeakLoadStrong(v0 + *(_QWORD *)(*(_QWORD *)v0 + 264));
  if (result)
  {
    v2 = result;
    sub_10021CC34();
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void sub_10008F234(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Strong;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + *(_QWORD *)(*(_QWORD *)v1 + 264));
  v4 = 0uLL;
  if (Strong)
  {
    v5 = Strong;
    v6 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC9Reminders28TTRIListDetailViewController_cancelBarButtonItem);
    if (v6)
    {
      v7 = (void *)v6;
      static TTRIPopoverAnchor.barButtonItem(_:permittedArrowDirections:)(v15, v6, 0, 1);
      v13 = v15[1];
      v14 = v15[0];
      v8 = v16;
      v9 = v17;
      v10 = v18;
      v11 = v19;
      swift_unknownObjectRelease(v5);

      v12 = v13;
      v4 = v14;
    }
    else
    {
      swift_unknownObjectRelease(v5);
      v8 = 0;
      v10 = 0;
      v11 = 0;
      v9 = 254;
      v12 = 0uLL;
      v4 = 0uLL;
    }
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v11 = 0;
    v9 = 254;
    v12 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
}

uint64_t sub_10008F330(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 280);
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10008F368@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[64];

  sub_10008F234((uint64_t)v3);
  return sub_10000F614((uint64_t)v3, a1, &qword_100642D10);
}

void sub_10008F3B0(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10009086C(a3);
}

id sub_10008F3C0(uint64_t a1, _BYTE *a2)
{
  objc_class *ObjectType;
  _QWORD *v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(a2, a2);
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController_tableDataController] = 0;
  a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController_ttrAccessibilityShouldAnnounceOptionChanges] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___dateSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___dateGroup] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___locationSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___locationGroup] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___flaggedSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___flaggedGroup] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___prioritySection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___priorityGroup] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___listsSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___listsGroup] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___hashtagsSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___hashtagsGroup] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___disabledFiltersSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___disabledFiltersGroup] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___documentationSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___filterOperatorSection] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___enabledFilters] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___dateOptionsCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___compactDateDetailCell1] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___compactDatePickerCell1] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___relativeRangeCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___compactDateDetailCell2] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___compactDatePickerCell2] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___regularWidthDatePickerCell1] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___regularWidthDatePickerCell2] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___includePastDueRemindersCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___timeOptionsCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___priorityOptionsCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___flaggedOptionsCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___locationOptionsCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___locationQuickPicksCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___locationDetailCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___hashtagOptionsCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___hashtagCollectionCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___hashtagToggleShowMoreCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___listsOptionsCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___listCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___listPopoverCell] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController____lazy_storage___filterOperatorCell] = 0;
  v5 = &a2[OBJC_IVAR____TtC9Reminders39TTRISmartListFilterEditorViewController_presenter];
  *v5 = a1;
  v5[1] = &off_1005FECF0;
  v7.receiver = a2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "initWithNibName:bundle:", 0, 0);
}

id sub_10008F610(void *a1, char a2, char *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v9;
  NSString v10;
  id v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  id v56;
  id v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[24];
  __int128 v64;
  uint64_t v65;
  _UNKNOWN **v66;

  v60 = a7;
  v61 = a6;
  v62 = a5;
  v55 = a3;
  LODWORD(v57) = a2 & 1;
  v9 = objc_allocWithZone((Class)TTRUndoManager);
  swift_retain();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "initWithDebugIdentifier:", v10);

  type metadata accessor for TTRGeoLocationService(0);
  v13 = (void *)static TTRGeoLocationService.newService()(v12);
  v14 = type metadata accessor for TTRSmartListFilterEditorInteractor(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = a1;
  v16 = a4;
  v17 = v11;
  v18 = TTRSmartListFilterEditorInteractor.init(filter:store:undoManager:)(a1, v16, v17);
  v54 = sub_100416F68(v16, v13);
  v19 = type metadata accessor for TTRISmartListFilterEditorRouter();
  v20 = (char *)swift_allocObject(v19, 24, 7);
  v58 = v20 + 16;
  swift_unknownObjectWeakInit(v20 + 16, 0);
  sub_100005ED8(0, (unint64_t *)&qword_10063F290, UNUserNotificationCenter_ptr);
  v21 = swift_retain();
  v22 = static UNUserNotificationCenter.ttr_unUserNotificationCenter.getter(v21);
  v23 = (void *)objc_opt_self(REMUserDefaults);
  v59 = v13;
  v24 = objc_msgSend(v23, "daemonUserDefaults");
  v25 = type metadata accessor for TTRIPrivacyChecker(0);
  swift_allocObject(v25, 112, 7);
  v53 = TTRIPrivacyChecker.init(delegate:unUserNotificationCenter:geoService:notificationsService:userDefaults:)(v20, &off_1005EF7A8, v22, v13, 0, 0, v24, &protocol witness table for REMDaemonUserDefaults, &protocol witness table for REMDaemonUserDefaults);
  v26 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v65 = sub_100005ED8(0, &qword_100641B40, REMAppleAccountUtilities_ptr);
  v66 = &off_10060A2C8;
  *(_QWORD *)&v64 = v26;
  v27 = type metadata accessor for TTRListDetailDeviceInfoProvider();
  v28 = swift_allocObject(v27, 170, 15);
  v56 = v26;
  v29 = v55;
  swift_defaultActor_initialize(v28);
  *(_QWORD *)(v28 + 160) = 0;
  *(_WORD *)(v28 + 168) = 0;
  sub_10002E37C(&v64, v28 + 112);
  *(_QWORD *)(v28 + 152) = v29;
  v65 = v27;
  v66 = &off_10060A360;
  *(_QWORD *)&v64 = v28;
  v30 = type metadata accessor for TTRISmartListFilterEditorPresenter(0);
  v55 = (char *)swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = sub_100028D48((uint64_t)&v64, v27);
  __chkstk_darwin(v31);
  v33 = (uint64_t *)((char *)&v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  v35 = *v33;
  v36 = v62;
  swift_retain();
  v37 = v16;
  v38 = v17;
  swift_retain();
  v39 = v29;
  v40 = (uint64_t)v18;
  swift_retain();
  v41 = v54;
  swift_retain();
  v42 = v53;
  swift_retain();
  swift_retain();
  v43 = sub_10008FB80((char)v57, v39, v40, v41, (uint64_t)v20, v42, v35, v36, v37, v38, (uint64_t)v55);

  swift_release();
  v55 = v20;
  swift_release();
  swift_release();

  v57 = v38;
  sub_100027F10(&v64);
  v44 = objc_allocWithZone((Class)type metadata accessor for TTRISmartListFilterEditorViewController());
  v45 = swift_retain();
  v46 = sub_10008F3C0(v45, v44);
  swift_beginAccess(v40 + 16, &v64, 1, 0);
  *(_QWORD *)(v40 + 24) = &off_1005FECE0;
  swift_unknownObjectWeakAssign(v40 + 16, v43);
  swift_beginAccess(v41 + 16, v63, 1, 0);
  *(_QWORD *)(v41 + 24) = &off_1005FECA0;
  swift_unknownObjectWeakAssign(v41 + 16, v43);
  *(_QWORD *)(v43 + 24) = &off_1005F5A60;
  swift_unknownObjectWeakAssign(v43 + 16, v46);
  v47 = v61;
  *(_QWORD *)(v43 + 40) = v60;
  swift_unknownObjectWeakAssign(v43 + 32, v47);
  swift_unknownObjectWeakAssign(v58, v46);
  v48 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v46);
  v49 = objc_msgSend(v48, "presentationController");
  if (v49)
  {
    v50 = v49;
    v51 = v46;
    objc_msgSend(v50, "setDelegate:", v51);

    swift_release();
    swift_release();
    swift_release();

  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();

  swift_release();
  return v48;
}

uint64_t sub_10008FB80(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  __n128 v40;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _BYTE v49[24];
  char v50[24];
  char v51[24];
  _QWORD v52[5];
  _QWORD v53[5];
  _QWORD v54[6];

  v43 = a6;
  v42 = a5;
  v45 = a10;
  v44 = a9;
  v16 = a1 & 1;
  v48 = type metadata accessor for TTRISmartListFilterEditorHashtagsViewModel(0);
  __chkstk_darwin(v48);
  v47 = (uint64_t *)((char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v46 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v42 - v22;
  v54[3] = type metadata accessor for TTRSmartListVersionWarningInteractor();
  v54[4] = &protocol witness table for TTRSmartListVersionWarningInteractor;
  v54[0] = a8;
  v53[3] = type metadata accessor for TTRSmartListFilterEditorInteractor(0);
  v53[4] = &protocol witness table for TTRSmartListFilterEditorInteractor;
  v53[0] = a3;
  v52[3] = type metadata accessor for TTRListDetailDeviceInfoProvider();
  v52[4] = &off_10060A360;
  v52[0] = a7;
  *(_QWORD *)(a11 + 24) = 0;
  swift_unknownObjectWeakInit(a11 + 16, 0);
  *(_QWORD *)(a11 + 40) = 0;
  swift_unknownObjectWeakInit(a11 + 32, 0);
  *(_QWORD *)(a11 + 56) = 0;
  *(_BYTE *)(a11 + 64) = 0;
  *(_QWORD *)(a11 + 280) = 0;
  *(_BYTE *)(a11 + 288) = 0;
  *(_QWORD *)(a11 + 296) = 0;
  *(_QWORD *)(a11 + 304) = 0;
  *(_WORD *)(a11 + 312) = 1;
  *(_BYTE *)(a11 + 65) = v16;
  *(_QWORD *)(a11 + 72) = a2;
  sub_100010634((uint64_t)v53, a11 + 80);
  *(_QWORD *)(a11 + 264) = a4;
  *(_QWORD *)(a11 + 272) = &protocol witness table for TTRLocationQuickPicksInteractor;
  *(_QWORD *)(a11 + 144) = type metadata accessor for TTRISmartListFilterEditorRouter();
  *(_QWORD *)(a11 + 152) = &off_1005EF7B8;
  *(_QWORD *)(a11 + 120) = v42;
  *(_QWORD *)(a11 + 160) = v43;
  sub_100010634((uint64_t)v52, a11 + 168);
  sub_100010634((uint64_t)v54, a11 + 224);
  v24 = v44;
  *(_QWORD *)(a11 + 208) = v44;
  v25 = v45;
  *(_QWORD *)(a11 + 48) = v45;
  v26 = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  v27 = v24;
  static REMHashtagLabelSpecifier.empty.getter(v25);
  v28 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(a11 + OBJC_IVAR____TtC9Reminders34TTRISmartListFilterEditorPresenter_hashtagLabelSelectionCache, v23, v18);
  v29 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  v30 = static OS_dispatch_queue.main.getter(v29);
  v31 = type metadata accessor for TTRDeferredAction(0);
  swift_allocObject(v31, 56, 7);
  v32 = TTRDeferredAction.init(queue:)(v30);
  *(_QWORD *)(a11 + 216) = v32;
  swift_beginAccess(v32 + 16, v51, 1, 0);
  *(_QWORD *)(v32 + 24) = &off_1005FECB0;
  swift_unknownObjectWeakAssign(v32 + 16, a11);
  v33 = v47;
  sub_1002DF04C(v47);
  v34 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v34(v21, (char *)v33 + *(int *)(v48 + 20), v18);
  sub_1000907E8((uint64_t)v33);
  v35 = v28;
  v36 = a11 + OBJC_IVAR____TtC9Reminders34TTRISmartListFilterEditorPresenter_hashtagLabelSelectionCache;
  v37 = swift_beginAccess(a11 + OBJC_IVAR____TtC9Reminders34TTRISmartListFilterEditorPresenter_hashtagLabelSelectionCache, v50, 0, 0);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v34)(v23, v36, v18, v37);
  v38 = sub_100090824();
  LOBYTE(v34) = dispatch thunk of static Equatable.== infix(_:_:)(v21, v23, v18, v38);
  v39 = *(void (**)(char *, uint64_t))(v35 + 8);
  v39(v23, v18);
  if ((v34 & 1) == 0)
  {
    v40 = swift_beginAccess(v36, v49, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v35 + 24))(v36, v21, v18, v40);
    swift_endAccess(v49);
  }
  v39(v21, v18);
  sub_1002DF5E0();
  sub_100027F10(v54);
  sub_100027F10(v52);
  sub_100027F10(v53);
  return a11;
}

void sub_10008FF78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t AssociatedConformanceWitness;
  void *v33;
  id v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *Strong;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, __n128);
  id v51[3];

  v1 = (uint64_t)v0;
  v2 = *(_QWORD *)(*v0 + 248);
  v3 = *(_QWORD *)(*v0 + 232);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v3, &protocol requirements base descriptor for TTRListDetailInteractorType, &associated type descriptor for TTRListDetailInteractorType.ListDetailChangeItemType);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v48 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v48 - v12;
  v14 = v0[2];
  v15 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
  v15(v3, v2);
  v16 = sub_100005ED8(0, &qword_100641B38, REMSmartListChangeItem_ptr);
  if (swift_dynamicCast(v51, v13, AssociatedTypeWitness, v16, 6))
  {
    v49 = v14;
    v50 = (void (*)(uint64_t, uint64_t, __n128))v15;
    v48 = v5;
    v17 = v51[0];
    v18 = objc_msgSend(v51[0], "customContext");
    if (v18)
    {
      v19 = v18;
      v20 = (void *)REMSmartListCustomContextChangeItem.filter.getter();

    }
    else
    {
      v20 = 0;
    }
    v25 = (char *)objc_msgSend(v17, "accountID");

    v5 = v48;
    goto LABEL_13;
  }
  v15(v3, v2);
  v21 = type metadata accessor for TTRListDetailCreationChangeItem();
  if ((swift_dynamicCast(v51, v11, AssociatedTypeWitness, v21, 6) & 1) != 0)
  {
    v49 = v14;
    v50 = (void (*)(uint64_t, uint64_t, __n128))v15;
    v22 = v51[0];
    swift_beginAccess((char *)v51[0] + 72, v51, 0, 0);
    v20 = (void *)v22[9];
    v23 = (void *)v22[3];
    v24 = v20;
    v25 = (char *)objc_msgSend(v23, "objectID");
    v26 = swift_release();
LABEL_13:
    v50(v3, v2, v26);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &protocol requirements base descriptor for TTRListDetailInteractorType, &associated conformance descriptor for TTRListDetailInteractorType.TTRListDetailInteractorType.ListDetailChangeItemType: TTRListDetailChangeItemType);
    v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
    v34 = objc_msgSend(v33, "store");

    v35 = sub_10001413C((_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 296)), *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 296) + 24));
    v36 = *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 288));
    v37 = *v35;
    v38 = *(_QWORD *)(*v35 + 24);
    swift_retain();
    v39 = sub_10008F610(v20, v36, v25, v34, v38, v1, (uint64_t)&off_1005EE070);
    v41 = v40;
    v43 = v42;
    swift_release();
    Strong = (char *)swift_unknownObjectWeakLoadStrong(v37 + 16);
    if (Strong)
    {
      v45 = Strong;
      objc_msgSend(Strong, "presentViewController:animated:completion:", v39, 1, 0);

      v25 = v45;
    }

    v46 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 312));
    v47 = *v46;
    *v46 = v41;
    v46[1] = v43;
    swift_unknownObjectRelease(v47);
    return;
  }
  if (qword_10063D340 != -1)
    swift_once(&qword_10063D340, sub_10008D5D4);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100012DC4(v27, (uint64_t)qword_100641A70);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.fault.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to request filter editor", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

}

uint64_t sub_100090370()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  unint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[80];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v2 + 248);
  v8 = *(_QWORD *)(v2 + 232);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, v8, &protocol requirements base descriptor for TTRListDetailInteractorType, &associated type descriptor for TTRListDetailInteractorType.ListDetailChangeItemType);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v21 - v10;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v8, v7);
  if (qword_10063D340 != -1)
    swift_once(&qword_10063D340, sub_10008D5D4);
  v12 = sub_100012DC4(v3, (uint64_t)qword_100641A70);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v12, v3);
  v13 = sub_10002A750((uint64_t *)&unk_100640F20);
  inited = swift_initStackObject(v13, v23);
  *(_OWORD *)(inited + 16) = xmmword_100520250;
  *(_QWORD *)(inited + 32) = 0x44497463656A626FLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, AssociatedTypeWitness, &protocol requirements base descriptor for TTRListDetailInteractorType, &associated conformance descriptor for TTRListDetailInteractorType.TTRListDetailInteractorType.ListDetailChangeItemType: TTRListDetailChangeItemType);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  *(_QWORD *)(inited + 72) = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  *(_QWORD *)(inited + 48) = v16;
  v17 = sub_10002D32C(inited);
  sub_1000143B4((uint64_t)"List Detail And Appearance Cancel {objectID: %@}", 48, 2, v17);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  Strong = swift_unknownObjectWeakLoadStrong((char *)v1 + *(_QWORD *)(*v1 + 280));
  if (Strong)
  {
    v19 = Strong;
    sub_1003F36D8();
    swift_unknownObjectRelease(v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, AssociatedTypeWitness);
}

_QWORD *sub_1000905B8(_QWORD *a1)
{
  swift_unknownObjectRetain(*a1);
  return a1;
}

uint64_t sub_1000905E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v12;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  v10 = *(void **)(a1 + 88);
  v13 = *(_BYTE *)(a1 + 104);
  v14 = *(id *)(a1 + 96);
  v15 = *(void **)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 136);
  v17 = *(void **)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 160);
  v18 = *(_QWORD *)(a1 + 176);
  v19 = *(_QWORD *)(a1 + 192);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(v2);
  sub_10002B328(v3, v4, v5, v6, v7, v8, v9);
  sub_10002B318(v10, v14, v13);
  swift_bridgeObjectRelease(v12);

  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v18);
  swift_unknownObjectRelease(v19);
  return a1;
}

_QWORD *sub_1000906E0(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  return a1;
}

uint64_t sub_100090708(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2 >= 4)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_10009073C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090760()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100090794(uint64_t a1)
{
  uint64_t v1;

  sub_10008DE34(a1, *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000907A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000907DC()
{
  uint64_t v0;

  return sub_10008E144(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000907E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRISmartListFilterEditorHashtagsViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100090824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100640E30;
  if (!qword_100640E30)
  {
    v1 = type metadata accessor for REMHashtagLabelSpecifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMHashtagLabelSpecifier, v1);
    atomic_store(result, (unint64_t *)&qword_100640E30);
  }
  return result;
}

void sub_10009086C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  void *Strong;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  void *object;
  void *v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[3];
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;
  _BYTE v38[80];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10063D340 != -1)
    swift_once(&qword_10063D340, sub_10008D5D4);
  v8 = sub_100012DC4(v4, (uint64_t)qword_100641A70);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = sub_10002A750((uint64_t *)&unk_100640F20);
  inited = swift_initStackObject(v9, v38);
  *(_OWORD *)(inited + 16) = xmmword_100520250;
  *(_QWORD *)(inited + 32) = 28532;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  aBlock[0] = a1;
  v11 = sub_10002A750(&qword_100641B48);
  v12 = Optional.descriptionOrNil.getter(v11);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v12;
  *(_QWORD *)(inited + 56) = v13;
  v14 = sub_10002D32C(inited);
  sub_1000143B4((uint64_t)"Change List Filter {to: %@}", 27, 2, v14);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a1)
  {
    v15 = a1;
    REMCustomSmartListFilterDescriptor.postFilterAnalytics()();

  }
  v16 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 312));
  v17 = *v16;
  *v16 = 0;
  v16[1] = 0;
  swift_unknownObjectRelease(v17);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + *(_QWORD *)(*(_QWORD *)v2 + 264));
  if (Strong)
  {
    v19 = Strong;
    v20 = objc_msgSend(Strong, "view");
    if (!v20)
      goto LABEL_10;
    v21 = v20;
    v22 = objc_opt_self(UITableView);
    v23 = swift_dynamicCastObjCClassUnconditional(v21, v22, 0, 0, 0);
    v35 = (void *)sub_100005ED8(0, (unint64_t *)&qword_100646410, UITableView_ptr);
    v36 = (uint64_t (*)())&protocol witness table for UITableView;
    aBlock[0] = v23;
    UIViewController.deselectRowsAlongsideTransition(for:animated:)(aBlock, 1);
    sub_100027F10(aBlock);
    swift_unknownObjectRelease(v19);
  }
  v24._object = (void *)0x8000000100562860;
  v25._countAndFlagsBits = 0x462065676E616843;
  v25._object = (void *)0xED00007265746C69;
  v24._countAndFlagsBits = 0xD000000000000030;
  object = TTRLocalizedString(_:comment:)(v25, v24)._object;
  v27 = (void *)objc_opt_self(TTRUndoManager);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v29 = swift_allocObject(&unk_1005EE210, 32, 7);
  *(_QWORD *)(v29 + 16) = v2;
  *(_QWORD *)(v29 + 24) = a1;
  v30 = swift_allocObject(&unk_1005EE238, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_100090E08;
  *(_QWORD *)(v30 + 24) = v29;
  v36 = sub_10001B278;
  v37 = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B258;
  v35 = &unk_1005EE250;
  v31 = _Block_copy(aBlock);
  v32 = a1;
  swift_retain();
  swift_retain();
  objc_msgSend(v27, "withActionName:block:", v28, v31, swift_release().n128_f64[0]);

  _Block_release(v31);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v30, "", 108, 276, 51, 1);
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return;
  __break(1u);
LABEL_10:
  __break(1u);
}

id sub_100090C08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  id result;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 312));
  v2 = *v1;
  *v1 = 0;
  v1[1] = 0;
  swift_unknownObjectRelease(v2);
  result = (id)swift_unknownObjectWeakLoadStrong(v0 + *(_QWORD *)(*(_QWORD *)v0 + 264));
  if (result)
  {
    v4 = result;
    result = objc_msgSend(result, "view");
    if (result)
    {
      v5 = result;
      v6 = objc_opt_self(UITableView);
      v7 = swift_dynamicCastObjCClassUnconditional(v5, v6, 0, 0, 0);
      v8[3] = sub_100005ED8(0, (unint64_t *)&qword_100646410, UITableView_ptr);
      v8[4] = &protocol witness table for UITableView;
      v8[0] = v7;
      UIViewController.deselectRowsAlongsideTransition(for:animated:)(v8, 1);
      sub_100027F10(v8);
      return (id)swift_unknownObjectRelease(v4);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100090CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v2, &protocol requirements base descriptor for TTRListDetailInteractorType, &associated type descriptor for TTRListDetailInteractorType.ListDetailChangeItemType);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v10 - v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 24))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &protocol requirements base descriptor for TTRListDetailInteractorType, &associated conformance descriptor for TTRListDetailInteractorType.TTRListDetailInteractorType.ListDetailChangeItemType: TTRListDetailChangeItemType);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  return v8;
}

uint64_t sub_100090DDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100090E08()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(**(_QWORD **)(v0 + 16) + 248) + 80))(*(_QWORD *)(v0 + 24), *(_QWORD *)(**(_QWORD **)(v0 + 16) + 232));
}

uint64_t sub_100090E3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for TTRIDefaultPresentationTreeMaker()
{
  return objc_opt_self(_TtC9Reminders32TTRIDefaultPresentationTreeMaker);
}

uint64_t type metadata accessor for TTRIEditableSectionsPresentationTreeMaker()
{
  return objc_opt_self(_TtC9Reminders41TTRIEditableSectionsPresentationTreeMaker);
}

uint64_t sub_100090E9C()
{
  return sub_100023FEC(&qword_100641C80, &qword_100641C88, (uint64_t)&protocol conformance descriptor for TTRAnyTreeStorageChainedTreeDeriving<A>);
}

uint64_t sub_100090EC8(uint64_t a1)
{
  uint64_t result;

  result = sub_100090F6C(&qword_100641CC0, type metadata accessor for TTRIEditableSectionsPresentationTreeMaker, (uint64_t)&unk_100521DBC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100090F04()
{
  return sub_100023FEC(&qword_100641CC8, &qword_100641CD0, (uint64_t)&protocol conformance descriptor for TTRTreeStorageDerivedUntouchedTree<A>);
}

uint64_t sub_100090F30(uint64_t a1)
{
  uint64_t result;

  result = sub_100090F6C(&qword_100641D08, type metadata accessor for TTRIDefaultPresentationTreeMaker, (uint64_t)&unk_100521E04);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100090F6C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TTRIRemindersListCompletedCell()
{
  return objc_opt_self(_TtC9Reminders30TTRIRemindersListCompletedCell);
}

void sub_10009118C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  id v16;

  v2 = v1;
  v4 = type metadata accessor for AppEntityID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_groupObjectID;
  v9 = *(void **)(v2 + OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_groupObjectID);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_groupObjectID) = a1;
  v16 = a1;
  if (a1)
  {
    if (!v9)
      goto LABEL_8;
    sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
    v10 = v9;
    v15 = v16;
    v11 = static NSObject.== infix(_:_:)(v15, v10);

    if ((v11 & 1) != 0)
    {

      return;
    }
    a1 = *(void **)(v2 + v8);
    if (a1)
    {
LABEL_8:
      v12 = type metadata accessor for GroupEntity(0);
      v13 = a1;
      AppEntityID.init(objectID:)(v13);
      v14 = sub_100092428();
      UIView.setAssociatedAppEntity<A>(entityType:identifier:)(v12, v7, v12, v14);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

      return;
    }
  }
  else if (!v9)
  {
    goto LABEL_10;
  }
  UIView.removeAssociatedAppEntity()();

LABEL_10:
}

char *sub_100091314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  char *v7;
  NSString v8;
  id v9;
  id v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  NSString v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  Class isa;
  objc_super v28;

  ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v7 = &v3[OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_ttriAccessibilityGroupListCount];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_groupObjectID] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_collapseTapGestureRecognizer] = 0;
  if (a3)
  {
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v8 = 0;
  }
  v28.receiver = v3;
  v28.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v28, "initWithStyle:reuseIdentifier:", a1, v8);

  v10 = objc_allocWithZone((Class)UITapGestureRecognizer);
  v11 = (char *)v9;
  v12 = objc_msgSend(v10, "initWithTarget:action:", v11, "treeCellViewToggleExpandState");
  v13 = *(void **)&v11[OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_collapseTapGestureRecognizer];
  *(_QWORD *)&v11[OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_collapseTapGestureRecognizer] = v12;
  v14 = v12;

  objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_customAccessoryView], "addGestureRecognizer:", v14);
  objc_msgSend(v11, "setEditingAccessoryType:", 4);
  v15 = *(void **)&v11[OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_titleLabel];
  sub_100005ED8(0, (unint64_t *)&qword_10064ACC0, UIFont_ptr);
  v16 = v15;
  v17 = (void *)static UIFont.preferredRoundedFont(forTextStyle:customWeight:compatibleWith:)(UIFontTextStyleHeadline, 0, 1, 0);
  objc_msgSend(v16, "setFont:", v17);

  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v18);

  v20 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v19);
  objc_msgSend(v20, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v20, "setContentMode:", 4);
  v21 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v20, "setTintColor:", v21);

  v22 = *(void **)&v11[OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_iconContainerView];
  objc_msgSend(v22, "addSubview:", v20);
  v23 = (void *)objc_opt_self(NSLayoutConstraint);
  v24 = v22;
  v25 = UIView.constraintsEqualTo(_:edges:)();

  sub_100005ED8(0, (unint64_t *)&qword_10064BB60, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v23, "activateConstraints:", isa);

  return v11;
}

void sub_1000917B0(char a1, uint64_t a2)
{
  char *v2;
  char v3;
  uint64_t v5;
  char **v6;
  id v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v19[6];
  objc_super v20;

  v3 = a2;
  v20.receiver = v2;
  v20.super_class = (Class)swift_getObjectType(v2, a2);
  v5 = a1 & 1;
  if ((a1 & 1) != 0)
    v6 = &selRef_labelColor;
  else
    v6 = &selRef_tintColor;
  objc_msgSendSuper2(&v20, "setSelected:animated:", v5, v3 & 1);
  v7 = objc_msgSend((id)objc_opt_self(UIColor), *v6);
  v8 = v7;
  if ((v3 & 1) != 0)
  {
    v9 = (void *)objc_opt_self(UIView);
    objc_msgSend(v2, "selectionFadeDuration");
    v11 = v10;
    v12 = swift_allocObject(&unk_1005EE388, 32, 7);
    *(_QWORD *)(v12 + 16) = v2;
    *(_QWORD *)(v12 + 24) = v8;
    v19[4] = sub_100092420;
    v19[5] = v12;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    v19[2] = sub_100006378;
    v19[3] = &unk_1005EE3A0;
    v13 = _Block_copy(v19);
    v14 = v2;
    v15 = v8;
    swift_release();
    objc_msgSend(v9, "animateWithDuration:animations:", v13, v11);

    _Block_release(v13);
  }
  else
  {
    v16 = *(void **)&v2[OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_customAccessoryView];
    v17 = v7;
    v18 = v16;
    sub_100009A80(v8);

  }
}

void sub_100091940(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = *(id *)(a1 + OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_customAccessoryView);
  v4 = a2;
  sub_100009A80(a2);

}

uint64_t sub_1000919DC()
{
  uint64_t *v0;
  uint64_t v1;

  v0 = (uint64_t *)TTRAccesibility.AccountsList.Format.GroupName_ItemCount.unsafeMutableAddressor();
  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100091A18(uint64_t a1, uint64_t a2)
{
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  objc_super v30;

  v30.receiver = v2;
  v30.super_class = (Class)swift_getObjectType(v2, a2);
  v3 = objc_msgSendSuper2(&v30, "accessibilityLabel");
  if (!v3)
    return 0;
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;

  v8 = sub_10002A750((uint64_t *)&unk_100654F80);
  v9 = (_QWORD *)swift_allocObject(v8, 48, 7);
  v10 = v9;
  *((_OWORD *)v9 + 1) = xmmword_100520250;
  v9[4] = v5;
  v9[5] = v7;
  if ((v2[OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_ttriAccessibilityGroupListCount + 8] & 1) == 0)
  {
    v11 = *(_QWORD *)&v2[OBJC_IVAR____TtC9Reminders29TTRIAccountListsViewGroupCell_ttriAccessibilityGroupListCount];
    v12 = (uint64_t *)TTRAccesibility.AccountsList.Format.ItemCount.unsafeMutableAddressor();
    v13 = *v12;
    v14 = v12[1];
    v15 = sub_10002A750((uint64_t *)&unk_100640FD0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100520250;
    *(_QWORD *)(v16 + 56) = &type metadata for Int;
    *(_QWORD *)(v16 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v16 + 32) = v11;
    swift_bridgeObjectRetain(v14);
    v17 = String.init(format:_:)(v13, v14, v16);
    v19 = v18;
    v9 = (_QWORD *)swift_bridgeObjectRelease(v14);
    v21 = v10[2];
    v20 = v10[3];
    if (v21 >= v20 >> 1)
    {
      v9 = sub_10001D840((_QWORD *)(v20 > 1), v21 + 1, 1, v10);
      v10 = v9;
    }
    v10[2] = v21 + 1;
    v22 = &v10[2 * v21];
    v22[4] = v17;
    v22[5] = v19;
  }
  v23 = (uint64_t *)TTRAccesibility.General.Label.Separator.unsafeMutableAddressor(v9);
  v24 = *v23;
  v25 = v23[1];
  swift_bridgeObjectRetain(v25);
  v26 = sub_10002A750(&qword_1006466D0);
  v27 = sub_1000923A8();
  v28 = BidirectionalCollection<>.joined(separator:)(v24, v25, v26, v27);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v25);
  return v28;
}

uint64_t sub_100091BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;
  _OWORD v10[3];
  uint64_t v11;

  v1 = v0 + OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_treeCellViewModel;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_treeCellViewModel, &v6, 0, 0);
  v2 = sub_1000922C0(v1, (uint64_t)v7);
  if (!*((_QWORD *)&v8 + 1))
  {
    sub_100092308((uint64_t)v7);
    return 0;
  }
  v10[0] = v7[0];
  v10[1] = v7[1];
  v10[2] = v8;
  v11 = v9;
  if (!BYTE8(v7[0]))
  {
    sub_100092348((uint64_t)v10);
    return 0;
  }
  if (BYTE8(v7[0]) == 1)
    v3 = (uint64_t *)TTRAccesibility.AccountsList.Attributes.Collapsed.unsafeMutableAddressor(v2);
  else
    v3 = (uint64_t *)TTRAccesibility.AccountsList.Attributes.Expanded.unsafeMutableAddressor(v2);
  v4 = *v3;
  swift_bridgeObjectRetain(v3[1]);
  sub_100092348((uint64_t)v10);
  return v4;
}

uint64_t sub_100091CCC()
{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (objc_msgSend(v0, "isEditing"))
    v1 = (uint64_t *)TTRAccesibility.AccountsList.Hint.GroupEditing.unsafeMutableAddressor();
  else
    v1 = (uint64_t *)TTRAccesibility.AccountsList.Hint.Group.unsafeMutableAddressor();
  v3 = *v1;
  v2 = v1[1];
  swift_bridgeObjectRetain(v2);
  v4 = sub_10002A750((uint64_t *)&unk_100654F80);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1005201E0;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v2;
  v6 = (uint64_t *)TTRAccesibility.AccountsList.Hint.DragAndDrop.unsafeMutableAddressor();
  v8 = *v6;
  v7 = v6[1];
  *(_QWORD *)(v5 + 48) = v8;
  *(_QWORD *)(v5 + 56) = v7;
  v9 = swift_bridgeObjectRetain(v7);
  v10 = (uint64_t *)TTRAccesibility.General.Label.SentenceEnd.unsafeMutableAddressor(v9);
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_10002A750(&qword_1006466D0);
  v14 = sub_1000923A8();
  v15 = BidirectionalCollection<>.joined(separator:)(v11, v12, v13, v14);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v12);
  return v15;
}

_QWORD *sub_100091E34(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  void *v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26[24];
  __int128 aBlock;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[3];
  uint64_t v32;

  v3 = v2;
  ObjectType = swift_getObjectType(v2, a2);
  v5 = (uint64_t)&v3[OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_treeCellViewModel];
  swift_beginAccess(&v3[OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_treeCellViewModel], v26, 0, 0);
  v6 = sub_1000922C0(v5, (uint64_t)&aBlock);
  if (*((_QWORD *)&v29 + 1))
  {
    v31[0] = aBlock;
    v31[1] = v28;
    v31[2] = v29;
    v32 = v30;
    if (BYTE8(aBlock))
    {
      if (BYTE8(aBlock) == 1)
        v7 = (uint64_t *)TTRAccesibility.AccountsList.Action.Expand.unsafeMutableAddressor(v6);
      else
        v7 = (uint64_t *)TTRAccesibility.AccountsList.Action.Collapse.unsafeMutableAddressor(v6);
      v10 = *v7;
      v9 = v7[1];
      swift_bridgeObjectRetain(v9);
      sub_100005ED8(0, (unint64_t *)&unk_1006466C0, UIAccessibilityCustomAction_ptr);
      *((_QWORD *)&v28 + 1) = ObjectType;
      *(_QWORD *)&aBlock = v3;
      v11 = v3;
      v12 = sub_10025EA68(v10, v9, &aBlock, (uint64_t)"treeCellViewToggleExpandState");
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v14 >= v13 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized Array._endMutation()(v15);

    }
    if (objc_msgSend(v3, "isEditing"))
    {
      v16 = *(_QWORD *)(TTRAccesibility.AccountsList.Action.GroupInfo.unsafeMutableAddressor() + 8);
      v17 = swift_allocObject(&unk_1005EE338, 24, 7);
      swift_unknownObjectWeakInit(v17 + 16, v3);
      v18 = objc_allocWithZone((Class)UIAccessibilityCustomAction);
      swift_bridgeObjectRetain(v16);
      swift_retain();
      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)&v29 = sub_1000923A0;
      *((_QWORD *)&v29 + 1) = v17;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v28 = sub_100341638;
      *((_QWORD *)&v28 + 1) = &unk_1005EE350;
      v20 = _Block_copy(&aBlock);
      v21 = objc_msgSend(v18, "initWithName:actionHandler:", v19, v20);

      _Block_release(v20);
      swift_release();
      swift_release();
      v22 = v21;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v24 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v23 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
      specialized Array._endMutation()(v25);

    }
    sub_100092348((uint64_t)v31);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100092308((uint64_t)&aBlock);
    return 0;
  }
}

BOOL sub_100092114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  v4 = (void *)Strong;
  if (Strong)
  {
    v5 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC9Reminders25TTRIAccountsListsBaseCell_delegate);
    if (v5)
    {
      v6 = v5;
      sub_100068DD0(v4);

      swift_unknownObjectRelease(v6);
    }
    else
    {

    }
  }
  return v4 != 0;
}

void sub_10009225C()
{
  uint64_t v0;

}

uint64_t sub_1000922C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750((uint64_t *)&unk_10065BDF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100092308(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10002A750((uint64_t *)&unk_10065BDF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100092348(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for TTRITreeViewCellModel - 1) + 8))();
  return a1;
}

uint64_t sub_10009237C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

BOOL sub_1000923A0(uint64_t a1)
{
  uint64_t v1;

  return sub_100092114(a1, v1);
}

unint64_t sub_1000923A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064C980;
  if (!qword_10064C980)
  {
    v1 = sub_10002CA5C(&qword_1006466D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10064C980);
  }
  return result;
}

uint64_t sub_1000923F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100092420()
{
  uint64_t v0;

  sub_100091940(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_100092428()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006539F0;
  if (!qword_1006539F0)
  {
    v1 = type metadata accessor for GroupEntity(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for GroupEntity, v1);
    atomic_store(result, (unint64_t *)&qword_1006539F0);
  }
  return result;
}

id TTRIShowSiriFoundInAppsAssembly.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id TTRIWelcomeNavigationAssembly.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIWelcomeNavigationAssembly();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for TTRIWelcomeNavigationAssembly()
{
  return objc_opt_self(_TtC9Reminders29TTRIWelcomeNavigationAssembly);
}

id TTRIWelcomeNavigationAssembly.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIWelcomeNavigationAssembly();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall REMCustomSmartListFilterDescriptor.postFilterAnalytics()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::Int v17;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Class v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  Class v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  char v36;
  void *v37;
  uint64_t v38;
  Swift::Int v39;
  Class v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  Class v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Class v52;
  char v53;
  void *v54;
  uint64_t v55;
  void *v56;

  v0 = sub_10002A750(&qword_100642078);
  __chkstk_darwin(v0);
  v2 = (char *)&v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10002A750(&qword_100642080);
  __chkstk_darwin(v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002A750(&qword_100642088);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750(&qword_100642090);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10002A750(&qword_100642098);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMCustomSmartListFilterDescriptor.hashtags.getter(v13);
  v16 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags(0);
  v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16) != 1;
  sub_1000073A0((uint64_t)v15, &qword_100642098);
  sub_100005ED8(0, (unint64_t *)&qword_100650740, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(v17).super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v56 = &_swiftEmptyDictionarySingleton;
  sub_10009805C((uint64_t)isa, 0x687361685F736168, 0xEC00000073676174, isUniquelyReferenced_nonNull_native);
  v20 = v56;
  v21 = swift_bridgeObjectRelease(0x8000000000000000);
  REMCustomSmartListFilterDescriptor.date.getter(v21);
  v22 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate(0);
  v23 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v11, 1, v22) != 1;
  sub_1000073A0((uint64_t)v11, &qword_100642090);
  v24 = NSNumber.init(integerLiteral:)(v23).super.super.isa;
  v25 = swift_isUniquelyReferenced_nonNull_native(v20);
  v56 = v20;
  sub_10009805C((uint64_t)v24, 0x646575645F736168, 0xEB00000000657461, v25);
  v26 = v56;
  v27 = swift_bridgeObjectRelease(0x8000000000000000);
  REMCustomSmartListFilterDescriptor.time.getter(v27);
  v28 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterTime(0);
  v29 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v8, 1, v28) != 1;
  sub_1000073A0((uint64_t)v8, &qword_100642088);
  v30 = NSNumber.init(integerLiteral:)(v29).super.super.isa;
  v31 = swift_isUniquelyReferenced_nonNull_native(v26);
  v56 = v26;
  sub_10009805C((uint64_t)v30, 0x746575645F736168, 0xEB00000000656D69, v31);
  v32 = v56;
  v33 = swift_bridgeObjectRelease(0x8000000000000000);
  v34 = REMCustomSmartListFilterDescriptor.priorities.getter(v33);
  swift_bridgeObjectRelease(v34);
  v35 = NSNumber.init(integerLiteral:)(v34 != 0).super.super.isa;
  v36 = swift_isUniquelyReferenced_nonNull_native(v32);
  v56 = v32;
  sub_10009805C((uint64_t)v35, 0x6F6972705F736168, 0xEE00736569746972, v36);
  v37 = v56;
  v38 = swift_bridgeObjectRelease(0x8000000000000000);
  v39 = REMCustomSmartListFilterDescriptor.flagged.getter(v38) != 2;
  v40 = NSNumber.init(integerLiteral:)(v39).super.super.isa;
  v41 = swift_isUniquelyReferenced_nonNull_native(v37);
  v56 = v37;
  sub_10009805C((uint64_t)v40, 0x67616C665F736168, 0xEB00000000646567, v41);
  v42 = v56;
  v43 = swift_bridgeObjectRelease(0x8000000000000000);
  REMCustomSmartListFilterDescriptor.location.getter(v43);
  v44 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLocation(0);
  v45 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v5, 1, v44) != 1;
  sub_1000073A0((uint64_t)v5, &qword_100642080);
  v46 = NSNumber.init(integerLiteral:)(v45).super.super.isa;
  v47 = swift_isUniquelyReferenced_nonNull_native(v42);
  v56 = v42;
  sub_10009805C((uint64_t)v46, 0x61636F6C5F736168, 0xEC0000006E6F6974, v47);
  v48 = v56;
  v49 = swift_bridgeObjectRelease(0x8000000000000000);
  REMCustomSmartListFilterDescriptor.lists.getter(v49);
  v50 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLists(0);
  v51 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v2, 1, v50) != 1;
  sub_1000073A0((uint64_t)v2, &qword_100642078);
  v52 = NSNumber.init(integerLiteral:)(v51).super.super.isa;
  v53 = swift_isUniquelyReferenced_nonNull_native(v48);
  v56 = v48;
  sub_10009805C((uint64_t)v52, 0x7473696C5F736168, 0xE900000000000073, v53);
  v54 = v56;
  swift_bridgeObjectRelease(0x8000000000000000);
  type metadata accessor for Analytics(0);
  static Analytics.postEvent(_:payload:duration:)(0xD00000000000001DLL, 0x8000000100562B70, v54, 0, 1);
  swift_bridgeObjectRelease(v54);
}

uint64_t sub_100092AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100642060);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100642060);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t TTRSmartListFilterEditorInteractor.__allocating_init(filter:store:undoManager:)(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  TTRSmartListFilterEditorInteractor.init(filter:store:undoManager:)(a1, a2, a3);
  return v7;
}

_QWORD *TTRSmartListFilterEditorInteractor.init(filter:store:undoManager:)(void *a1, void *a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v4 = v3;
  v8 = *v3;
  v3[3] = 0;
  swift_unknownObjectWeakInit(v3 + 2, 0);
  v9 = (char *)v3
     + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels;
  v10 = type metadata accessor for REMHashtagLabelCollection(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_undoObservationToken) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_listFetchOperationManager) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_store) = a2;
  if (a1)
  {
    v11 = a2;
    v12 = a1;
  }
  else
  {
    type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v12 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init()(a2);
  }
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_initialFilter) = v12;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter) = v12;
  sub_10002A750(&qword_1006420D0);
  sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  v13 = a1;
  v14 = static OS_dispatch_queue.main.getter(v12);
  type metadata accessor for RDIDispatchQueue(0);
  v15 = static RDIDispatchQueue.utilityQueue.getter();
  v16 = swift_allocObject(&unk_1005EE3F0, 24, 7);
  *(_QWORD *)(v16 + 16) = a2;
  v17 = a2;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_listFetchOperationManager) = REMAsyncOperationManager.__allocating_init(queue:backgroundQueue:syncPerformOperationFunc:operationDidFinish:)(v14, v15, sub_1000981AC, v16, 0, 0);
  swift_release();
  v18 = NSUndoManager.observeChanges<A>(target:handler:)(v4, sub_100092E70, 0, v8);

  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_undoObservationToken) = v18;
  swift_release();
  return v4;
}

id sub_100092DA0@<X0>(id a1@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  id v5;
  id v6;
  id result;
  uint64_t v8;
  id v9;
  id v10;

  v4 = *a2;
  v10 = 0;
  v5 = objc_msgSend(a1, "fetchListWithObjectID:error:", v4, &v10);
  v6 = v10;
  if (v5)
  {
    result = v10;
    v8 = (uint64_t)v5;
  }
  else
  {
    v9 = v10;
    v8 = _convertNSErrorToError(_:)(v6);

    result = (id)swift_willThrow();
  }
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 8) = v5 == 0;
  return result;
}

uint64_t sub_100092E70(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _BYTE v8[24];

  v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType(result, v4);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

void TTRSmartListFilterEditorInteractor.deinit()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_undoObservationToken))
  {
    sub_100005ED8(0, (unint64_t *)&qword_10065C600, NSUndoManager_ptr);
    v1 = swift_retain();
    static NSUndoManager.removeObserver(with:)(v1);
    swift_release();
    sub_1000381C8(v0 + 16);
    sub_1000073A0(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels, &qword_1006420D8);

    swift_release();
    swift_release();

  }
  else
  {
    __break(1u);
  }
}

void TTRSmartListFilterEditorInteractor.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_undoObservationToken))
  {
    sub_100005ED8(0, (unint64_t *)&qword_10065C600, NSUndoManager_ptr);
    v1 = swift_retain();
    static NSUndoManager.removeObserver(with:)(v1);
    swift_release();
    sub_1000381C8(v0 + 16);
    sub_1000073A0(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels, &qword_1006420D8);

    swift_release();
    swift_release();

    swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
  }
  else
  {
    __break(1u);
  }
}

void *TTRSmartListFilterEditorInteractor.filter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  char v4;
  void *v5;
  id v6;

  v1 = v0;
  v2 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v3 = *(id *)(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  v4 = REMCustomSmartListFilterDescriptor.isEmpty.getter();

  if ((v4 & 1) != 0)
    return 0;
  v5 = *(void **)(v1 + v2);
  v6 = v5;
  return v5;
}

uint64_t TTRSmartListFilterEditorInteractor.selectableHashtagLabels.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[24];

  v3 = sub_10002A750(&qword_1006420D8);
  v4 = __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels, v14, 0, 0);
  sub_10000735C(v9, (uint64_t)v8, &qword_1006420D8);
  v10 = type metadata accessor for REMHashtagLabelCollection(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_1000073A0((uint64_t)v8, &qword_1006420D8);
  sub_100093260(v1, a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v13, 33, 0);
  sub_1000981B4((uint64_t)v6, v9);
  return swift_endAccess(v13);
}

uint64_t sub_100093260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t Style;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD v73[3];
  char v74[8];
  uint64_t v75[3];

  v67 = a2;
  Style = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle(0);
  v66 = *(_QWORD *)(Style - 8);
  __chkstk_darwin(Style);
  v65 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for REMHashtagLabelCollection(0);
  v62 = *(_QWORD *)(v64 - 8);
  v4 = __chkstk_darwin(v64);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v60 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v60 - v10;
  v12 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for REMHashtagLabelDataView(0);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_store);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.alphabetical(_:), v12);
  v18 = static REMHashtagLabelDataView.fetchAllHashtagLabels(store:sortingStyle:includeDetails:)(v17, v15, 0);
  v68 = 0;
  v19 = v18;
  v69 = v17;
  v70 = v16;
  v60 = v9;
  v61 = v11;
  v71 = v6;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v59 = v19;
    else
      v59 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = v61;
  v22 = v65;
  v23 = v66;
  v24 = v71;
  v25 = v69;
  if (v20)
  {
    v75[0] = (uint64_t)_swiftEmptyArrayStorage;
    result = sub_1003D7FFC(0, v20 & ~(v20 >> 63), 0);
    if (v20 < 0)
    {
      __break(1u);
      return result;
    }
    v27 = 0;
    v28 = (_QWORD *)v75[0];
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v19);
      else
        v29 = *(id *)(v19 + 8 * v27 + 32);
      v30 = v29;
      v31 = objc_msgSend(v29, "name");
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

      v75[0] = (uint64_t)v28;
      v36 = v28[2];
      v35 = v28[3];
      if (v36 >= v35 >> 1)
      {
        sub_1003D7FFC(v35 > 1, v36 + 1, 1);
        v28 = (_QWORD *)v75[0];
      }
      ++v27;
      v28[2] = v36 + 1;
      v37 = &v28[2 * v36];
      v37[4] = v32;
      v37[5] = v34;
      v24 = v71;
      v25 = v69;
    }
    while (v20 != v27);
    swift_bridgeObjectRelease(v19);
    v21 = v61;
    v22 = v65;
    v23 = v66;
  }
  else
  {
    swift_bridgeObjectRelease(v19);
    v28 = _swiftEmptyArrayStorage;
  }
  v38 = Style;
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v22, enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.store(_:), Style);
  v39 = v25;
  v40 = v68;
  v41 = static REMHashtagLabelDataView.fetchSmartListHashtagLabels(store:fetchStyle:)(v39, v22);
  v42 = v22;
  v43 = v64;
  v44 = v62;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v38);
    swift_bridgeObjectRelease(v28);
    if (qword_10063D348 != -1)
      swift_once(&qword_10063D348, sub_100092AD4);
    v45 = type metadata accessor for Logger(0);
    sub_100012DC4(v45, (uint64_t)qword_100642060);
    swift_errorRetain(v40);
    v46 = swift_errorRetain(v40);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = (_QWORD *)swift_slowAlloc(32, -1);
      v75[0] = (uint64_t)v50;
      *(_DWORD *)v49 = 136315138;
      swift_getErrorValue(v40, v74, v73);
      v51 = Error.rem_errorDescription.getter(v73[1], v73[2]);
      v53 = v52;
      v72 = sub_100027E40(v51, v52, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v53);
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to fetch selectableHashtagLabels {error: %s}", v49, 0xCu);
      swift_arrayDestroy(v50, 1, &type metadata for Any[8]);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      swift_errorRelease(v40);
      swift_errorRelease(v40);
    }

    REMHashtagLabelCollection.init(labels:)(_swiftEmptyArrayStorage);
    return swift_errorRelease(v40);
  }
  else
  {
    v54 = v41;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v42, v38);
    v55 = v60;
    REMHashtagLabelCollection.init(labels:)(v28);
    REMHashtagLabelCollection.init(labels:)(v54);
    REMHashtagLabelCollection.union(_:)(v24);
    v56 = *(void (**)(char *, uint64_t))(v44 + 8);
    v56(v24, v43);
    v57 = ((uint64_t (*)(char *, uint64_t))v56)(v55, v43);
    v58 = REMHashtagLabelCollection.labels.getter(v57);
    REMHashtagLabelCollection.init(labels:)(v58);
    return ((uint64_t (*)(char *, uint64_t))v56)(v21, v43);
  }
}

uint64_t TTRSmartListFilterEditorInteractor.selectableHashtagLabels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v11[24];

  v3 = sub_10002A750(&qword_1006420D8);
  __chkstk_darwin(v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for REMHashtagLabelCollection(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 32))(v5, a1, v6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v8 = v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels, v11, 33, 0);
  sub_1000981B4((uint64_t)v5, v8);
  return swift_endAccess(v11);
}

void (*TTRSmartListFilterEditorInteractor.selectableHashtagLabels.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = sub_10002A750(&qword_1006420D8);
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for REMHashtagLabelCollection(0);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = malloc(v7);
  v8 = malloc(v7);
  v3[11] = v8;
  TTRSmartListFilterEditorInteractor.selectableHashtagLabels.getter((uint64_t)v8);
  return sub_100093948;
}

void sub_100093948(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    v6 = v2[9];
    v8 = v2[6];
    v7 = (void *)v2[7];
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v6 + 16))(v2[10], v2[11], v5);
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v7, v4, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    v9 = v8 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels;
    swift_beginAccess(v9, v2, 33, 0);
    sub_1000981B4((uint64_t)v7, v9);
    swift_endAccess(v2);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    v10 = v2[8];
    v11 = v2[9];
    v12 = v2[6];
    v7 = (void *)v2[7];
    (*(void (**)(void *, _QWORD, uint64_t))(v11 + 32))(v7, v2[11], v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    v13 = v12 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels;
    swift_beginAccess(v12 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels, v2 + 3, 33, 0);
    sub_1000981B4((uint64_t)v7, v13);
    swift_endAccess(v2 + 3);
  }
  free(v3);
  free(v4);
  free(v7);
  free(v2);
}

BOOL TTRSmartListFilterEditorInteractor.hasUnsavedChanges.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  char v5;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_initialFilter);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  v3 = v1;
  v4 = v2;
  v5 = static NSObject.== infix(_:_:)(v3, v4);

  return (v5 & 1) == 0;
}

uint64_t TTRSmartListFilterEditorInteractor.filterUpgradedToSydneyRomeKincaid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  char v6;

  v1 = v0;
  v2 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v3 = *(id *)(v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  v4 = REMCustomSmartListFilterDescriptor.minimumSupportedVersion.getter();

  if (REMCustomSmartListFilterDescriptor.minimumSupportedVersion.getter() >= v4)
    return 0;
  v5 = *(id *)(v1 + v2);
  v6 = REMCustomSmartListFilterDescriptor.requiresSydneyRomeKincaid.getter();

  return v6 & 1;
}

uint64_t TTRSmartListFilterEditorInteractor.list(with:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_listFetchOperationManager);
  if (v2)
  {
    v3 = (void *)result;
    v5 = result;
    swift_retain(v2);
    v4 = v3;
    REMAsyncOperationManager.operationStateStartingIfNeeded(for:)(&v5);

    return swift_release(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall TTRSmartListFilterEditorInteractor.addHashtagLabel(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t);
  uint64_t v21;
  _BYTE v23[24];

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = sub_10002A750(&qword_1006420D8);
  __chkstk_darwin(v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for REMHashtagLabelCollection(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = __chkstk_darwin(v10);
  v15 = &v23[-v14 - 8];
  __chkstk_darwin(v13);
  v17 = &v23[-v16 - 8];
  TTRSmartListFilterEditorInteractor.selectableHashtagLabels.getter((uint64_t)v15);
  v18 = sub_10002A750((uint64_t *)&unk_100654F80);
  v19 = swift_allocObject(v18, 48, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100520250;
  *(_QWORD *)(v19 + 32) = countAndFlagsBits;
  *(_QWORD *)(v19 + 40) = object;
  swift_bridgeObjectRetain(object);
  REMHashtagLabelCollection.init(labels:)(v19);
  REMHashtagLabelCollection.union(_:)(v12);
  v20 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v20(v15, v8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v7, v17, v8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v21 = v2 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor____lazy_storage___selectableHashtagLabels;
  swift_beginAccess(v21, v23, 33, 0);
  sub_1000981B4((uint64_t)v7, v21);
  swift_endAccess(v23);
}

void TTRSmartListFilterEditorInteractor.update(operation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  _BYTE v22[24];

  v2 = v1;
  v4 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v9 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  REMCustomSmartListFilterDescriptor.operation.getter();
  v10 = sub_1000175C8(&qword_1006420E0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.Operation, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.Operation);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)(v7, a1, v4, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v11 & 1) != 0)
  {

  }
  else
  {
    type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v12 = v9;
    v13 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:operation:)();
    v14 = *(void **)(v2 + v8);
    *(_QWORD *)(v2 + v8) = v13;
    v15 = v13;

    swift_beginAccess(v2 + 16, v22, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
    if (Strong)
    {
      v18 = Strong;
      v19 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType(Strong, v17);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(ObjectType, v19);

      swift_unknownObjectRelease(v18);
    }
    else
    {

    }
  }
}

void TTRSmartListFilterEditorInteractor.update(hashtags:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _BYTE v38[24];

  v3 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_1006420E8);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750(&qword_100642098);
  v11 = __chkstk_darwin(v10);
  v35 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v33 - v16;
  v36 = v1;
  v34 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v37 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  REMCustomSmartListFilterDescriptor.hashtags.getter(v37);
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v9, &qword_100642098);
  sub_10000735C(a1, v18, &qword_100642098);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642098);
    if (v19(v18, 1, v3) == 1)
    {
      sub_1000073A0((uint64_t)v9, &qword_100642098);
LABEL_8:

      return;
    }
    goto LABEL_6;
  }
  sub_10000735C((uint64_t)v9, (uint64_t)v15, &qword_100642098);
  if (v19(v18, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642098);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
LABEL_6:
    sub_1000073A0((uint64_t)v9, &qword_1006420E8);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
  v20 = sub_1000175C8(&qword_1006420F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterHashtags);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v6, v3, v20);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  sub_1000073A0((uint64_t)v17, &qword_100642098);
  v22(v15, v3);
  sub_1000073A0((uint64_t)v9, &qword_100642098);
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(a1, v35, &qword_100642098);
  v23 = v37;
  v24 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:hashtags:)();
  v25 = v36;
  v26 = *(void **)(v36 + v34);
  *(_QWORD *)(v36 + v34) = v24;
  v27 = v24;

  swift_beginAccess(v25 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v25 + 16);
  if (Strong)
  {
    v30 = Strong;
    v31 = *(_QWORD *)(v25 + 24);
    ObjectType = swift_getObjectType(Strong, v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(ObjectType, v31);

    swift_unknownObjectRelease(v30);
  }
  else
  {

  }
}

void TTRSmartListFilterEditorInteractor.update(date:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _BYTE v38[24];

  v3 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_1006420F8);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750(&qword_100642090);
  v11 = __chkstk_darwin(v10);
  v35 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v33 - v16;
  v36 = v1;
  v34 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v37 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  REMCustomSmartListFilterDescriptor.date.getter(v37);
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v9, &qword_100642090);
  sub_10000735C(a1, v18, &qword_100642090);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642090);
    if (v19(v18, 1, v3) == 1)
    {
      sub_1000073A0((uint64_t)v9, &qword_100642090);
LABEL_8:

      return;
    }
    goto LABEL_6;
  }
  sub_10000735C((uint64_t)v9, (uint64_t)v15, &qword_100642090);
  if (v19(v18, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642090);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
LABEL_6:
    sub_1000073A0((uint64_t)v9, &qword_1006420F8);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
  v20 = sub_1000175C8(&qword_100642100, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterDate);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v6, v3, v20);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  sub_1000073A0((uint64_t)v17, &qword_100642090);
  v22(v15, v3);
  sub_1000073A0((uint64_t)v9, &qword_100642090);
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(a1, v35, &qword_100642090);
  v23 = v37;
  v24 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:date:)();
  v25 = v36;
  v26 = *(void **)(v36 + v34);
  *(_QWORD *)(v36 + v34) = v24;
  v27 = v24;

  swift_beginAccess(v25 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v25 + 16);
  if (Strong)
  {
    v30 = Strong;
    v31 = *(_QWORD *)(v25 + 24);
    ObjectType = swift_getObjectType(Strong, v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(ObjectType, v31);

    swift_unknownObjectRelease(v30);
  }
  else
  {

  }
}

void TTRSmartListFilterEditorInteractor.update(time:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _BYTE v38[24];

  v3 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterTime(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100642108);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750(&qword_100642088);
  v11 = __chkstk_darwin(v10);
  v35 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v33 - v16;
  v36 = v1;
  v34 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v37 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  REMCustomSmartListFilterDescriptor.time.getter(v37);
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v9, &qword_100642088);
  sub_10000735C(a1, v18, &qword_100642088);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642088);
    if (v19(v18, 1, v3) == 1)
    {
      sub_1000073A0((uint64_t)v9, &qword_100642088);
LABEL_8:

      return;
    }
    goto LABEL_6;
  }
  sub_10000735C((uint64_t)v9, (uint64_t)v15, &qword_100642088);
  if (v19(v18, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642088);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
LABEL_6:
    sub_1000073A0((uint64_t)v9, &qword_100642108);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
  v20 = sub_1000175C8(&qword_100642110, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterTime, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterTime);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v6, v3, v20);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  sub_1000073A0((uint64_t)v17, &qword_100642088);
  v22(v15, v3);
  sub_1000073A0((uint64_t)v9, &qword_100642088);
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(a1, v35, &qword_100642088);
  v23 = v37;
  v24 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:time:)();
  v25 = v36;
  v26 = *(void **)(v36 + v34);
  *(_QWORD *)(v36 + v34) = v24;
  v27 = v24;

  swift_beginAccess(v25 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v25 + 16);
  if (Strong)
  {
    v30 = Strong;
    v31 = *(_QWORD *)(v25 + 24);
    ObjectType = swift_getObjectType(Strong, v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(ObjectType, v31);

    swift_unknownObjectRelease(v30);
  }
  else
  {

  }
}

Swift::Void __swiftcall TTRSmartListFilterEditorInteractor.update(priorities:)(Swift::OpaquePointer_optional priorities)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *rawValue;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  id v17;
  _BYTE v18[24];

  v2 = v1;
  rawValue = priorities.value._rawValue;
  v4 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v17 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  v5 = (_QWORD *)REMCustomSmartListFilterDescriptor.priorities.getter(v17);
  if (!v5)
  {
    if (rawValue)
      goto LABEL_8;
    goto LABEL_6;
  }
  v6 = v5;
  if (!rawValue)
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_8;
  }
  v7 = sub_100096C38(v5, rawValue);
  swift_bridgeObjectRelease(v6);
  if (v7)
  {
LABEL_6:

    return;
  }
LABEL_8:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  swift_bridgeObjectRetain(rawValue);
  v8 = v17;
  v9 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:priorities:)();
  v10 = *(void **)(v2 + v4);
  *(_QWORD *)(v2 + v4) = v9;
  v11 = v9;

  swift_beginAccess(v2 + 16, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v14 = Strong;
    v15 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong, v13);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(ObjectType, v15);

    swift_unknownObjectRelease(v14);
  }
  else
  {

  }
}

Swift::Void __swiftcall TTRSmartListFilterEditorInteractor.update(flagged:)(Swift::Bool_optional flagged)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  id v15;
  _BYTE v16[24];

  v2 = v1;
  v4 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v15 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  v5 = REMCustomSmartListFilterDescriptor.flagged.getter();
  if (v5 != 2)
  {
    if (flagged.value == 2 || ((!flagged.value ^ v5) & 1) == 0)
      goto LABEL_7;
LABEL_6:

    return;
  }
  if (flagged.value == 2)
    goto LABEL_6;
LABEL_7:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  v6 = v15;
  v7 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:flagged:)();
  v8 = *(void **)(v1 + v4);
  *(_QWORD *)(v2 + v4) = v7;
  v9 = v7;

  swift_beginAccess(v2 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v12 = Strong;
    v13 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong, v11);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(ObjectType, v13);

    swift_unknownObjectRelease(v12);
  }
  else
  {

  }
}

void TTRSmartListFilterEditorInteractor.update(location:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _BYTE v38[24];

  v3 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLocation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100642118);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750(&qword_100642080);
  v11 = __chkstk_darwin(v10);
  v35 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v33 - v16;
  v36 = v1;
  v34 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v37 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  REMCustomSmartListFilterDescriptor.location.getter(v37);
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v9, &qword_100642080);
  sub_10000735C(a1, v18, &qword_100642080);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642080);
    if (v19(v18, 1, v3) == 1)
    {
      sub_1000073A0((uint64_t)v9, &qword_100642080);
LABEL_8:

      return;
    }
    goto LABEL_6;
  }
  sub_10000735C((uint64_t)v9, (uint64_t)v15, &qword_100642080);
  if (v19(v18, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642080);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
LABEL_6:
    sub_1000073A0((uint64_t)v9, &qword_100642118);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
  v20 = sub_1000175C8(&qword_100642120, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLocation, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterLocation);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v6, v3, v20);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  sub_1000073A0((uint64_t)v17, &qword_100642080);
  v22(v15, v3);
  sub_1000073A0((uint64_t)v9, &qword_100642080);
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(a1, v35, &qword_100642080);
  v23 = v37;
  v24 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:location:)();
  v25 = v36;
  v26 = *(void **)(v36 + v34);
  *(_QWORD *)(v36 + v34) = v24;
  v27 = v24;

  swift_beginAccess(v25 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v25 + 16);
  if (Strong)
  {
    v30 = Strong;
    v31 = *(_QWORD *)(v25 + 24);
    ObjectType = swift_getObjectType(Strong, v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(ObjectType, v31);

    swift_unknownObjectRelease(v30);
  }
  else
  {

  }
}

void TTRSmartListFilterEditorInteractor.update(lists:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _BYTE v38[24];

  v3 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLists(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100642128);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750(&qword_100642078);
  v11 = __chkstk_darwin(v10);
  v35 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v33 - v16;
  v36 = v1;
  v34 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v37 = *(id *)(v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  REMCustomSmartListFilterDescriptor.lists.getter(v37);
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v9, &qword_100642078);
  sub_10000735C(a1, v18, &qword_100642078);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642078);
    if (v19(v18, 1, v3) == 1)
    {
      sub_1000073A0((uint64_t)v9, &qword_100642078);
LABEL_8:

      return;
    }
    goto LABEL_6;
  }
  sub_10000735C((uint64_t)v9, (uint64_t)v15, &qword_100642078);
  if (v19(v18, 1, v3) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642078);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
LABEL_6:
    sub_1000073A0((uint64_t)v9, &qword_100642128);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v18, v3);
  v20 = sub_1000175C8(&qword_100642130, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLists, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterLists);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v6, v3, v20);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  sub_1000073A0((uint64_t)v17, &qword_100642078);
  v22(v15, v3);
  sub_1000073A0((uint64_t)v9, &qword_100642078);
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(a1, v35, &qword_100642078);
  v23 = v37;
  v24 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:lists:)();
  v25 = v36;
  v26 = *(void **)(v36 + v34);
  *(_QWORD *)(v36 + v34) = v24;
  v27 = v24;

  swift_beginAccess(v25 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v25 + 16);
  if (Strong)
  {
    v30 = Strong;
    v31 = *(_QWORD *)(v25 + 24);
    ObjectType = swift_getObjectType(Strong, v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(ObjectType, v31);

    swift_unknownObjectRelease(v30);
  }
  else
  {

  }
}

id sub_10009533C@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

void *sub_100095348()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  char v4;
  void *v5;
  id v6;

  v1 = *v0;
  v2 = OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter;
  v3 = *(id *)(*v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  v4 = REMCustomSmartListFilterDescriptor.isEmpty.getter();

  if ((v4 & 1) != 0)
    return 0;
  v5 = *(void **)(v1 + v2);
  v6 = v5;
  return v5;
}

uint64_t sub_1000953A4@<X0>(uint64_t a1@<X8>)
{
  return TTRSmartListFilterEditorInteractor.selectableHashtagLabels.getter(a1);
}

BOOL sub_1000953C4()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  char v5;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_initialFilter);
  v2 = *(void **)(*v0 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_currentFilter);
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  v3 = v1;
  v4 = v2;
  v5 = static NSObject.== infix(_:_:)(v3, v4);

  return (v5 & 1) == 0;
}

uint64_t sub_10009543C()
{
  return TTRSmartListFilterEditorInteractor.filterUpgradedToSydneyRomeKincaid.getter() & 1;
}

uint64_t sub_100095460(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC9Reminders34TTRSmartListFilterEditorInteractor_listFetchOperationManager);
  if (v2)
  {
    v3 = (void *)result;
    v5 = result;
    swift_retain(v2);
    v4 = v3;
    REMAsyncOperationManager.operationStateStartingIfNeeded(for:)(&v5);

    return swift_release(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000954D4(uint64_t a1, uint64_t a2)
{
  TTRSmartListFilterEditorInteractor.addHashtagLabel(_:)(*(Swift::String *)&a1);
}

void sub_1000954F4(uint64_t a1)
{
  TTRSmartListFilterEditorInteractor.update(operation:)(a1);
}

void sub_100095514(uint64_t a1)
{
  TTRSmartListFilterEditorInteractor.update(hashtags:)(a1);
}

void sub_100095534(uint64_t a1)
{
  TTRSmartListFilterEditorInteractor.update(date:)(a1);
}

void sub_100095554(uint64_t a1)
{
  TTRSmartListFilterEditorInteractor.update(time:)(a1);
}

void sub_100095574(Swift::OpaquePointer_optional a1)
{
  TTRSmartListFilterEditorInteractor.update(priorities:)(a1);
}

void sub_100095594(Swift::Bool_optional a1)
{
  TTRSmartListFilterEditorInteractor.update(flagged:)(a1);
}

void sub_1000955B4(uint64_t a1)
{
  TTRSmartListFilterEditorInteractor.update(location:)(a1);
}

void sub_1000955D4(uint64_t a1)
{
  TTRSmartListFilterEditorInteractor.update(lists:)(a1);
}

uint64_t sub_1000955F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unsigned __int8 *)(a1 + 42);
    v4 = (unsigned __int8 *)(a2 + 42);
    do
    {
      v5 = *(_QWORD *)(v3 - 10);
      if (*(v3 - 2))
      {
        if (*(v3 - 2) != 1)
          return ((uint64_t (*)(void))((char *)&loc_1000956A0 + 4 * byte_100521F00[v5]))();
        if (*(v4 - 2) != 1)
          return 0;
        result = 0;
      }
      else
      {
        result = 0;
        if (*(v4 - 2))
          return result;
      }
      if (v5 != *(_QWORD *)(v4 - 10) || ((*(v3 - 1) ^ *(v4 - 1)) & 1) != 0 || ((*v3 ^ *v4) & 1) != 0)
        return result;
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_100095750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = 0;
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
    && ((*(unsigned __int8 *)(a1 + 33) ^ *(unsigned __int8 *)(a2 + 33)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 34) ^ *(unsigned __int8 *)(a2 + 34)) & 1) == 0)
  {
    v5 = (unsigned __int8 *)(a2 + 37);
    v6 = (unsigned __int8 *)(a1 + 37);
    do
    {
      result = --v2 == 0;
      if (!v2)
        break;
      if (*(v6 - 2) != *(v5 - 2))
        break;
      if (((*(v6 - 1) ^ *(v5 - 1)) & 1) != 0)
        break;
      v8 = *v5;
      v5 += 3;
      v7 = v8;
      v9 = *v6;
      v6 += 3;
    }
    while (((v9 ^ v7) & 1) == 0);
  }
  return result;
}

uint64_t sub_1000957FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[6];

  v4 = type metadata accessor for TTRSharedWithYouHighlight(0);
  __chkstk_darwin(v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_1006415D8);
  __chkstk_darwin(v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TTRIRemindersListNavigationBarViewModel.TrailingItem(0);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v26 - v13;
  __chkstk_darwin(v12);
  v18 = (char *)v26 - v16;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v19)
  {
    if (a1 != a2)
    {
      v26[1] = v6;
      v26[2] = v17;
      v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v21 = *(_QWORD *)(v15 + 72);
      v26[4] = a2;
      v26[5] = a1;
      v26[3] = v7;
      v26[0] = v21;
      sub_10002B1E8(a1 + v20, (uint64_t)v26 - v16, type metadata accessor for TTRIRemindersListNavigationBarViewModel.TrailingItem);
      sub_10002B1E8(a2 + v20, (uint64_t)v14, type metadata accessor for TTRIRemindersListNavigationBarViewModel.TrailingItem);
      v22 = (uint64_t)&v9[*(int *)(v7 + 48)];
      sub_10002B1E8((uint64_t)v18, (uint64_t)v9, type metadata accessor for TTRIRemindersListNavigationBarViewModel.TrailingItem);
      sub_10002B1E8((uint64_t)v14, v22, type metadata accessor for TTRIRemindersListNavigationBarViewModel.TrailingItem);
      v23 = sub_10002A750(&qword_10063F578);
      v24 = (char *)&loc_100095948
          + 4
          * a7tBi[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v9, 5, v23)];
      __asm { BR              X9 }
    }
  }
  return 1;
}

uint64_t sub_100095B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 40);
    v4 = (uint64_t *)(a2 + 40);
    do
    {
      v5 = *v3;
      v6 = *v4;
      if (*v3 == 1)
      {
        if (v6 != 1)
          return 0;
      }
      else
      {
        if (v6 == 1)
          return 0;
        v7 = *(v3 - 1);
        if (v5)
        {
          if (!v6)
            return 0;
          v8 = *(v4 - 1);
          if ((v7 != v8 || v5 != v6) && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v5, v8, v6, 0) & 1) == 0)
            return 0;
        }
        else if (v6)
        {
          sub_10004E038(v7, 0);
          return 0;
        }
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_100095C48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 *v3;
  __int16 *v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (__int16 *)(a1 + 32);
    v4 = (__int16 *)(a2 + 32);
    do
    {
      v6 = *v3++;
      v5 = v6;
      v8 = *v4++;
      v7 = v8;
      v9 = v8;
      if (v5 == 2)
      {
        if (v9 != 2)
          return 0;
      }
      else
      {
        if (v9 == 2)
          return 0;
        v10 = v7 & 1;
        v11 = ((v5 & 0x100) == 0) ^ ((unsigned __int16)(v7 & 0x100) >> 8);
        if (((v5 & 1) == 0) == v10 || v11 == 0)
          return 0;
      }
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_100095CD8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4] || a1[5] != a2[5])
    return 0;
  v3 = a2 + 7;
  v4 = a1 + 7;
  do
  {
    result = --v2 == 0;
    if (!v2)
      break;
    if (*(v4 - 1) != *(v3 - 1))
      break;
    v7 = *v3;
    v3 += 2;
    v6 = v7;
    v8 = *v4;
    v4 += 2;
  }
  while (v8 == v6);
  return result;
}

int32x2_t sub_100095D5C(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2;
  int64x2_t *v4;
  int64x2_t *v5;
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int32x2_t result;

  v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0] && v2 && a1 != a2 && a1[2].i64[0] == a2[2].i64[0] && a1[2].i64[1] == a2[2].i64[1])
  {
    v4 = a1 + 3;
    v5 = a2 + 3;
    v6 = v2 - 1;
    do
    {
      if (!v6)
        break;
      v7 = *v4++;
      v8 = v7;
      v9 = *v5++;
      result = vmovn_s64(vceqq_s64(v8, v9));
      --v6;
    }
    while ((result.i32[0] & result.i32[1] & 1) != 0);
  }
  return result;
}

BOOL sub_100095DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;

  v22 = sub_10002A750(qword_100642230);
  v4 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v11 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v12 = type metadata accessor for IndexPath(0);
    v21 = *(_QWORD *)(v4 + 72);
    v13 = v10 - 1;
    while (1)
    {
      sub_10000735C(a1 + v11, (uint64_t)v9, qword_100642230);
      sub_10000735C(a2 + v11, (uint64_t)v6, qword_100642230);
      v14 = sub_1000175C8((unint64_t *)&qword_10063F648, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v12, v14) & 1) == 0)
        break;
      v15 = *(int *)(v22 + 36);
      v16 = *(_QWORD *)&v9[v15];
      v17 = *(_QWORD *)&v6[v15];
      sub_1000073A0((uint64_t)v6, qword_100642230);
      sub_1000073A0((uint64_t)v9, qword_100642230);
      v19 = v13-- != 0;
      result = v16 == v17;
      if (v16 == v17)
      {
        v11 += v21;
        if (v19)
          continue;
      }
      return result;
    }
    sub_1000073A0((uint64_t)v6, qword_100642230);
    sub_1000073A0((uint64_t)v9, qword_100642230);
  }
  return 0;
}

uint64_t sub_100095F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;

  v4 = sub_10002A750(&qword_10063F658);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v16 = 0;
    return v16 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v13 = type metadata accessor for IndexPath(0);
    v21 = *(_QWORD *)(v5 + 72);
    v14 = v11 - 1;
    while (1)
    {
      sub_10000735C(a1 + v12, (uint64_t)v10, &qword_10063F658);
      sub_10000735C(a2 + v12, (uint64_t)v7, &qword_10063F658);
      v15 = sub_1000175C8((unint64_t *)&qword_10063F648, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v13, v15) & 1) == 0)
        break;
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(&v10[*(int *)(v4 + 36)], &v7[*(int *)(v4 + 36)], v13, v15);
      sub_1000073A0((uint64_t)v7, &qword_10063F658);
      sub_1000073A0((uint64_t)v10, &qword_10063F658);
      v18 = v14-- != 0;
      if ((v16 & 1) != 0)
      {
        v12 += v21;
        if (v18)
          continue;
      }
      return v16 & 1;
    }
    sub_1000073A0((uint64_t)v7, &qword_10063F658);
    sub_1000073A0((uint64_t)v10, &qword_10063F658);
    goto LABEL_14;
  }
  v16 = 1;
  return v16 & 1;
}

BOOL sub_100096150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  _BOOL8 result;
  _QWORD v11[6];
  _BYTE v12[40];
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1 + 32;
    v4 = a2 + 32;
    v5 = v2 - 1;
    while (1)
    {
      sub_10000735C(v3, (uint64_t)v12, &qword_10063F668);
      sub_10000735C(v4, (uint64_t)v11, &qword_10063F668);
      if ((static AnyHashable.== infix(_:_:)(v12, v11) & 1) == 0)
        break;
      v6 = v13;
      v7 = v11[5];
      sub_1000073A0((uint64_t)v11, &qword_10063F668);
      sub_1000073A0((uint64_t)v12, &qword_10063F668);
      v9 = v5-- != 0;
      result = v6 == v7;
      if (v6 == v7)
      {
        v3 += 48;
        v4 += 48;
        if (v9)
          continue;
      }
      return result;
    }
    sub_1000073A0((uint64_t)v11, &qword_10063F668);
    sub_1000073A0((uint64_t)v12, &qword_10063F668);
  }
  return 0;
}

BOOL sub_100096250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  BOOL v13;
  BOOL v15;
  _OWORD v17[5];
  _OWORD v18[2];
  _OWORD v19[5];
  _BYTE v20[25];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v3 = (_OWORD *)(a1 + 32);
      v4 = (_OWORD *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v6 = v3[5];
        v17[4] = v3[4];
        v18[0] = v6;
        *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v3 + 89);
        v7 = v3[1];
        v17[0] = *v3;
        v17[1] = v7;
        v8 = v3[3];
        v17[2] = v3[2];
        v17[3] = v8;
        v9 = v4[1];
        v19[0] = *v4;
        v19[1] = v9;
        v10 = v4[2];
        v11 = v4[3];
        *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v4 + 89);
        v12 = v4[5];
        v19[4] = v4[4];
        *(_OWORD *)v20 = v12;
        v19[2] = v10;
        v19[3] = v11;
        sub_100079688((uint64_t)v17);
        sub_100079688((uint64_t)v19);
        v13 = sub_1002DD414((uint64_t)v17, (uint64_t)v19);
        sub_10007970C((uint64_t)v19);
        sub_10007970C((uint64_t)v17);
        v15 = v5-- != 0;
        if (!v13)
          break;
        v4 += 7;
        v3 += 7;
      }
      while (v15);
    }
  }
  else
  {
    return 0;
  }
  return v13;
}

uint64_t sub_100096344(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  char v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5 = (void *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
LABEL_38:
    if (a2 < 0)
      v24 = a2;
    else
      v24 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(a2);
    if (v6 == v25)
      goto LABEL_4;
    return 0;
  }
  if (a1 < 0)
    v23 = a1;
  else
    v23 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(a1);
  v7 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
    goto LABEL_38;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v8 = a1;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v26 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_47:
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_49;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v5 = (void *)result;
  v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_49:
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_21:
    v14 = v13;
    sub_100005ED8(0, &qword_100649C20, REMReminder_ptr);
    v15 = static NSObject.== infix(_:_:)(v5, v14);

    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v21 = i - 4;
        if (v26)
        {
          v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
          if (v2)
            goto LABEL_23;
        }
        else
        {
          if (v21 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          v22 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_23:
            v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v21 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        v18 = *(id *)(a2 + 8 * i);
LABEL_24:
        v19 = v18;
        v20 = static NSObject.== infix(_:_:)(v22, v18);

        if ((v20 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

id sub_1000965CC(uint64_t a1, unint64_t a2)
{
  return sub_10001F620(a1, a2, &qword_100640E70, UIBarButtonItem_ptr);
}

id sub_1000965E0(uint64_t a1, unint64_t a2)
{
  return sub_10001F620(a1, a2, (unint64_t *)&unk_1006415B0, UIBarButtonItemGroup_ptr);
}

uint64_t sub_1000965F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 40);
    v4 = (_BYTE *)(a2 + 40);
    do
    {
      v6 = *((_QWORD *)v3 - 1);
      v7 = *((_QWORD *)v4 - 1);
      if (*v3)
      {
        if (*v3 != 1)
          return ((uint64_t (*)(void))((char *)&loc_10009667C + 4 * byte_100521F0E[v6]))();
        if (*v4 != 1 || v6 != v7)
          return 0;
      }
      else
      {
        if (*v4)
          v5 = 0;
        else
          v5 = v6 == v7;
        if (!v5)
          return 0;
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

id sub_100096708(uint64_t a1, unint64_t a2)
{
  return sub_10001F620(a1, a2, (unint64_t *)&qword_1006406F0, UIView_ptr);
}

uint64_t sub_10009671C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  char v16;
  BOOL v18;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v16 = 1;
    }
    else
    {
      v3 = (_QWORD *)(a2 + 64);
      v4 = (_QWORD *)(a1 + 64);
      v5 = v2 - 1;
      do
      {
        v6 = *v4;
        v7 = *((_OWORD *)v4 - 1);
        v20[0] = *((_OWORD *)v4 - 2);
        v20[1] = v7;
        v21 = v6;
        v8 = *v3;
        v9 = *((_OWORD *)v3 - 1);
        v10 = *(void **)&v20[0];
        v22[0] = *((_OWORD *)v3 - 2);
        v22[1] = v9;
        v11 = v7;
        v12 = *(void **)&v22[0];
        v13 = v9;
        v23 = v8;
        swift_bridgeObjectRetain(v8);
        v14 = v10;
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v6);
        v15 = v12;
        swift_bridgeObjectRetain(v13);
        v16 = static TTRSectionLite.__derived_struct_equals(_:_:)(v20, v22);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v11);

        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v13);

        v18 = v5-- != 0;
        if ((v16 & 1) == 0)
          break;
        v3 += 5;
        v4 += 5;
      }
      while (v18);
    }
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_100096848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v16 = (char *)&v27 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      v23 = 1;
    }
    else
    {
      v27 = a1;
      v28 = a2;
      v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v19 = *(_QWORD *)(v14 + 72);
      v20 = v17 - 1;
      do
      {
        sub_10002B1E8(v27 + v18, (uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v21 = sub_10002B1E8(v28 + v18, (uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v22 = TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v21);
        TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v22);
        v23 = static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:)(v9, v7);
        sub_10001F544((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
        sub_10001F544((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
        sub_10001F544((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        sub_10001F544((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v25 = v20-- != 0;
        if ((v23 & 1) == 0)
          break;
        v18 += v19;
      }
      while (v25);
    }
  }
  else
  {
    v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_100096A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  BOOL v15;
  __int128 v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v13 = 1;
    }
    else
    {
      v5 = sub_1000771DC();
      v6 = v2 - 1;
      v7 = (_WORD *)(a1 + 56);
      v8 = (_WORD *)(a2 + 56);
      do
      {
        v9 = *v7;
        v10 = *((_QWORD *)v7 - 1);
        v11 = *((_QWORD *)v8 - 1);
        v12 = *v8;
        v20 = *(_OWORD *)(v7 - 12);
        v21 = v10;
        v22 = v9;
        v17 = *(_OWORD *)(v8 - 12);
        v18 = v11;
        v19 = v12;
        v13 = static TTRValueBasedMenuElement.__derived_enum_equals(_:_:)(&v20, &v17, &type metadata for TTRAccountsListsViewModel.HashtagFilterOperation.Option, v5);
        v15 = v6-- != 0;
        if ((v13 & 1) == 0)
          break;
        v7 += 16;
        v8 += 16;
      }
      while (v15);
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

id sub_100096AFC(uint64_t a1, unint64_t a2)
{
  return sub_10001F620(a1, a2, (unint64_t *)&qword_1006415E8, UIViewController_ptr);
}

uint64_t sub_100096B10(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v17;

  v2 = a1[2];
  if (v2 != a2[2])
    goto LABEL_7;
  if (!v2 || a1 == a2)
    goto LABEL_6;
  v5 = a1[4];
  v6 = a2[4];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v7 = sub_10001F620(v5, v6, (unint64_t *)&qword_1006406F0, UIView_ptr);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  if ((v7 & 1) == 0)
  {
LABEL_7:
    v8 = 0;
    return v8 & 1;
  }
  if (v2 == 1)
  {
LABEL_6:
    v8 = 1;
    return v8 & 1;
  }
  v10 = v2 - 2;
  v11 = a1 + 5;
  v12 = a2 + 5;
  do
  {
    v14 = *v11++;
    v13 = v14;
    v15 = *v12++;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    v8 = sub_10001F620(v13, v15, (unint64_t *)&qword_1006406F0, UIView_ptr);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
    v17 = v10-- != 0;
  }
  while ((v8 & 1) != 0 && v17);
  return v8 & 1;
}

BOOL sub_100096C38(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

id sub_100096CAC(uint64_t a1, unint64_t a2)
{
  return sub_10001F620(a1, a2, qword_100646430, REMObjectID_ptr);
}

uint64_t sub_100096CC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

id sub_100096D84(uint64_t a1, unint64_t a2)
{
  return sub_10001F620(a1, a2, &qword_100642220, REMSharee_ptr);
}

void sub_100096D98(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1002AA39C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v20 = v19[7];
        v21 = *(_QWORD *)(v20 + 8 * v13);
        *(_QWORD *)(v20 + 8 * v13) = a1;
        swift_bridgeObjectRelease(v21);
        return;
      }
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1002AE58C();
      goto LABEL_7;
    }
    sub_1004578F4(v16, a3 & 1);
    v22 = sub_1002AA39C(a2);
    if ((v17 & 1) == (v23 & 1))
    {
      v13 = v22;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10002B1E8(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
      sub_10045DF34(v13, (uint64_t)v10, a1, v19);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
}

void sub_100096F0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1002AA398(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        v20 = *v19;
        *v19 = a1;
        v19[1] = a2;
        swift_bridgeObjectRelease(v20);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002AE7AC();
      goto LABEL_7;
    }
    sub_100457C50(v15, a4 & 1);
    v21 = sub_1002AA398(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045DF40(v12, a3, a1, a2, v18);
      swift_retain();
      return;
    }
  }
  v23 = sub_10002A750(&qword_1006463D0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
  __break(1u);
}

uint64_t sub_100097030(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1002AA3B8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return sub_10045DF44(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)sub_1002AE948();
      goto LABEL_7;
    }
    sub_100457F24(result, a3 & 1);
    result = sub_1002AA3B8(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10045DF44(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for TTRITreeViewUpdate);
  __break(1u);
  return result;
}

void sub_100097138(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1002AA364((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];

        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1002AEABC();
      goto LABEL_7;
    }
    sub_1004581D0(v12, a3 & 1);
    v17 = sub_1002AA364((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045DF88(v9, (uint64_t)a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  v20 = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

void *sub_100097264(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  void *result;
  char v16;
  uint64_t v17;
  char v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1002AA398(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = (void *)(v13 + v14);
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= (uint64_t)result && (a4 & 1) != 0)
    goto LABEL_9;
  if (v17 >= (uint64_t)result && (a4 & 1) == 0)
  {
    result = sub_1002AEAC8();
    goto LABEL_9;
  }
  sub_1004581DC((uint64_t)result, a4 & 1);
  result = (void *)sub_1002AA398(a3);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_13:
    v22 = sub_10002A750(&qword_1006463D0);
    result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
    __break(1u);
    return result;
  }
  v12 = (unint64_t)result;
LABEL_9:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = v20[7] + 16 * v12;
    *(_QWORD *)v21 = a1;
    *(_BYTE *)(v21 + 8) = v19 != 0;
  }
  else
  {
    sub_10045DFD0(v12, a3, a1, v19, v20);
    return (void *)swift_retain();
  }
  return result;
}

void sub_10009738C(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1002AA364((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8 * v9));
        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1002AEAF0();
      goto LABEL_7;
    }
    sub_10045820C(v12, a3 & 1);
    v17 = sub_1002AA364((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045DFD4(v9, (uint64_t)a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  v20 = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

void sub_1000974B8(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  char v20;
  id v21;
  uint64_t v22;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = sub_1002AA364((uint64_t)a3);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= v14 && (a4 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = (uint64_t *)(v17[7] + 16 * v11);
        swift_bridgeObjectRelease(v18[1]);
        *v18 = a1;
        v18[1] = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      sub_1002AEAFC();
      goto LABEL_7;
    }
    sub_100458218(v14, a4 & 1);
    v19 = sub_1002AA364((uint64_t)a3);
    if ((v15 & 1) == (v20 & 1))
    {
      v11 = v19;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045DFD8(v11, (uint64_t)a3, a1, a2, v17);
      v21 = a3;
      return;
    }
  }
  v22 = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
}

void sub_1000975F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100005CF4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002AECB0();
      goto LABEL_7;
    }
    sub_1004584FC(v15, a4 & 1);
    v20 = sub_100005CF4(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045E020(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100097724(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1002AA6DC(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8 * v13));
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1002AF6FC();
    goto LABEL_7;
  }
  sub_100459584(v16, a3 & 1);
  v22 = sub_1002AA6DC(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10002B1E8(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
  return sub_10045E068(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_100097880(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1002AA398(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_bridgeObjectRelease(*v19);
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002AF934();
      goto LABEL_7;
    }
    sub_100459900(v15, a4 & 1);
    v21 = sub_1002AA398(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045DF40(v12, a3, a1, a2, v18);
      return swift_retain(a3);
    }
  }
  v23 = sub_10002A750((uint64_t *)&unk_100640E20);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
  __break(1u);
  return result;
}

uint64_t sub_1000979A8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1002AA6DC(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      v21 = type metadata accessor for TTRAccountsListsViewModel.PinnedList(0);
      return sub_100098A28(a1, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.PinnedList);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1002AFDB4();
    goto LABEL_7;
  }
  sub_100459FD8(v16, a3 & 1);
  v23 = sub_1002AA6DC(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v13 = v23;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10002B1E8(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
  return sub_10045E10C(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_100097B18(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1002AA6DC(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v20 = v19[7];
        v21 = type metadata accessor for REMHashtagLabelSpecifier(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, a1, v21);
      }
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1002AFAE8();
      goto LABEL_7;
    }
    sub_100459BEC(v16, a3 & 1);
    v23 = sub_1002AA6DC(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10002B1E8(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
      return sub_10045E120(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void *sub_100097CA0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  void *result;
  char v16;
  uint64_t v17;
  char v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1002AA398(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = (void *)(v13 + v14);
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= (uint64_t)result && (a4 & 1) != 0)
    goto LABEL_9;
  if (v17 >= (uint64_t)result && (a4 & 1) == 0)
  {
    result = sub_1002B0258();
    goto LABEL_9;
  }
  sub_10045A73C((uint64_t)result, a4 & 1);
  result = (void *)sub_1002AA398(a3);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_13:
    v22 = sub_10002A750((uint64_t *)&unk_100640E20);
    result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
    __break(1u);
    return result;
  }
  v12 = (unint64_t)result;
LABEL_9:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v16 & 1) != 0)
  {
    v21 = v20[7] + 16 * v12;
    *(_QWORD *)v21 = a1;
    *(_BYTE *)(v21 + 8) = v19 != 0;
  }
  else
  {
    sub_10045DFD0(v12, a3, a1, v19, v20);
    return (void *)swift_retain(a3);
  }
  return result;
}

id sub_100097DC8(char a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  id result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1002AA364((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= (uint64_t)result && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v15[7] + v9) = a1 & 1;
        return result;
      }
      goto LABEL_11;
    }
    if (v14 >= (uint64_t)result && (a3 & 1) == 0)
    {
      result = sub_1002B0410();
      goto LABEL_7;
    }
    sub_10045AA2C((uint64_t)result, a3 & 1);
    result = (id)sub_1002AA364((uint64_t)a2);
    if ((v13 & 1) == (v16 & 1))
    {
      v9 = (unint64_t)result;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045E28C(v9, (uint64_t)a2, a1 & 1, v15);
      return a2;
    }
  }
  v17 = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v17);
  __break(1u);
  return result;
}

uint64_t sub_100097EEC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1002AA778(a2);
  v16 = v12[2];
  v17 = (v13 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v13;
  v20 = v12[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      v23 = type metadata accessor for TTRUserDefaults.SmartListVersionWarning(0, v15);
      return sub_100098A28(a1, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUserDefaults.SmartListVersionWarning);
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1002B041C(v15);
    goto LABEL_7;
  }
  sub_10045AA38(v18, a3 & 1, v15);
  v25 = sub_1002AA778(a2);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v25;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10045E2D0(v14, (uint64_t)v11, a1, v21);
}

void sub_10009805C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100005CF4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002B06E4();
      goto LABEL_7;
    }
    sub_10045AE54(v15, a4 & 1);
    v20 = sub_100005CF4(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045E020(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100098188()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000981AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100092DA0(*(id *)(v2 + 16), a1, a2);
}

uint64_t sub_1000981B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_1006420D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000981FC()
{
  return type metadata accessor for TTRSmartListFilterEditorInteractor(0);
}

uint64_t type metadata accessor for TTRSmartListFilterEditorInteractor(uint64_t a1)
{
  uint64_t result;

  result = qword_100642160;
  if (!qword_100642160)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTRSmartListFilterEditorInteractor);
  return result;
}

void sub_100098240(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100521FC8;
  sub_1000982D4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_100521FE0;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_100521FE0;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

void sub_1000982D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100642170)
  {
    v2 = type metadata accessor for REMHashtagLabelCollection(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100642170);
  }
}

ValueMetadata *type metadata accessor for TTRSmartListFilterEditorInteractor.ListFetchOperationParams()
{
  return &type metadata for TTRSmartListFilterEditorInteractor.ListFetchOperationParams;
}

uint64_t sub_100098338(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10059081C, 1);
}

uint64_t sub_100098348(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1002AA39C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
        return sub_1000989EC(a1, v19[7] + 32 * v13);
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1002B0A38();
      goto LABEL_7;
    }
    sub_10045B42C(v16, a3 & 1);
    v21 = sub_1002AA39C(a2);
    if ((v17 & 1) == (v22 & 1))
    {
      v13 = v21;
      v19 = *v4;
      if ((v17 & 1) != 0)
        return sub_1000989EC(a1, v19[7] + 32 * v13);
LABEL_11:
      sub_10002B1E8(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
      return sub_10045E388(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_1000984B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_100005CF4(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        swift_bridgeObjectRelease(v21[1]);
        *v21 = a1;
        v21[1] = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_1002B1378();
      goto LABEL_7;
    }
    sub_10045C2E4(v17, a5 & 1);
    v22 = sub_100005CF4(a3, a4);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045E428(v14, a3, a4, a1, a2, v20);
      swift_bridgeObjectRetain(a4);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000985F8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for AnyListEntityID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1002AA8A0(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      v21 = type metadata accessor for AnyListEntity(0);
      return sub_100098A28(a1, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, type metadata accessor for AnyListEntity);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1002B1890();
    goto LABEL_7;
  }
  sub_10045CBFC(v16, a3 & 1);
  v23 = sub_1002AA8A0(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v13 = v23;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10002B1E8(a2, (uint64_t)v10, type metadata accessor for AnyListEntityID);
  return sub_10045E478(v13, (uint64_t)v10, a1, v19);
}

void sub_100098768(uint64_t a1, char a2, char a3, double a4, double a5, double a6, double a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  double *v25;
  unint64_t v26;
  char v27;

  v8 = (_QWORD **)v7;
  v16 = (_QWORD *)*v7;
  v18 = sub_1002AA950(a1, a2 & 1, a6, a7);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = v16[3];
    if (v23 >= v21 && (a3 & 1) != 0)
    {
LABEL_7:
      v24 = *v8;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = (double *)(v24[7] + 16 * v18);
        *v25 = a4;
        v25[1] = a5;
        return;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      sub_1002B1A54();
      goto LABEL_7;
    }
    sub_10045D7C0(v21, a3 & 1);
    v26 = sub_1002AA950(a1, a2 & 1, a6, a7);
    if ((v22 & 1) == (v27 & 1))
    {
      v18 = v26;
      v24 = *v8;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045E54C(v18, a1, a2 & 1, v24, a6, a7, a4, a5);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HorizontalStackView.CacheKey);
  __break(1u);
}

_OWORD *sub_1000988CC(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1002AA394(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_100027F10(v16);
        return sub_100028D38(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1002B1BFC();
      goto LABEL_7;
    }
    sub_10045D998(v12, a3 & 1);
    v18 = sub_1002AA394(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10045E5A4(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for OpenURLOptionsKey(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_1000989EC(uint64_t a1, uint64_t a2)
{
  assignWithTake for TTRIRemindersBoardChromelessBarsController.ColumnState(a2, a1);
  return a2;
}

uint64_t sub_100098A28(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

_QWORD *sub_100098A70()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  swift_release(v0[15]);
  swift_release(v0[17]);
  swift_release(v0[19]);
  swift_release(v0[21]);
  swift_release(v0[23]);
  swift_release(v0[25]);
  swift_release(v0[27]);
  swift_release(v0[29]);
  swift_release(v0[31]);
  swift_release(v0[33]);
  swift_release(v0[35]);
  swift_release(v0[37]);
  swift_release(v0[39]);
  swift_release(v0[41]);
  swift_release(v0[43]);
  swift_release(v0[45]);
  swift_release(v0[47]);
  swift_release(v0[49]);
  swift_release(v0[51]);
  swift_release(v0[53]);
  swift_release(v0[55]);
  swift_release(v0[57]);
  swift_release(v0[59]);
  swift_release(v0[61]);
  swift_release(v0[63]);
  swift_release(v0[65]);
  swift_release(v0[67]);
  swift_release(v0[69]);
  swift_release(v0[71]);
  swift_release(v0[73]);
  swift_release(v0[74]);
  swift_release(v0[75]);
  swift_release(v0[76]);
  return v0;
}

uint64_t sub_100098BBC()
{
  uint64_t v0;

  sub_100098A70();
  return swift_deallocClassInstance(v0, 616, 7);
}

uint64_t sub_100098BDC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_100098BFC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))() & 1;
}

uint64_t sub_100098C20()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_100098C40()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t sub_100098C60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t sub_100098C80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t sub_100098CA0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t sub_100098CC0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t sub_100098CE0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t sub_100098D00()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t sub_100098D20()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t sub_100098D40()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t sub_100098D60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))() & 1;
}

uint64_t sub_100098D84()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t sub_100098DA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t sub_100098DC4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 368))(a1, a2, a3 & 1);
}

uint64_t sub_100098DE8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 384))() & 1;
}

uint64_t sub_100098E0C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 400))() & 1;
}

uint64_t sub_100098E30()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 416))();
}

uint64_t sub_100098E50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 432))() & 1;
}

uint64_t sub_100098E74()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t sub_100098E94()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 464))();
}

uint64_t sub_100098EB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 480))();
}

uint64_t sub_100098ED4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t sub_100098EF4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t sub_100098F18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 528))();
}

uint64_t sub_100098F3C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 544))();
}

uint64_t sub_100098F60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 560))();
}

uint64_t sub_100098F84()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 576))() & 1;
}

_QWORD *sub_100098FAC()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return v0;
}

uint64_t sub_100098FE0()
{
  uint64_t v0;

  sub_100098FAC();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_100099000()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for TTRIAnyTreeViewCellSeparatorCustomizing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002B51C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTRIAnyTreeViewCellSeparatorCustomizing);
}

uint64_t sub_100099038(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_100522410, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100099064(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_10009906C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_100522448, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100099098(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_100522480, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000990C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t static TTRLocalizableStrings.ListDetail.newTab.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._countAndFlagsBits = 0xD00000000000001ELL;
  v1._object = (void *)0x8000000100563210;
  v0._object = (void *)0x8000000100563230;
  v1._countAndFlagsBits = 0xD000000000000013;
  v2._countAndFlagsBits = 0x7473694C2077654ELL;
  v2._object = (void *)0xE800000000000000;
  return TTRLocalizedString(_:value:comment:)(v1, v2, v0)._countAndFlagsBits;
}

uint64_t static TTRLocalizableStrings.ListDetail.Filters.flag.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._object = (void *)0x8000000100563250;
  v0._countAndFlagsBits = 0xD000000000000017;
  v1._countAndFlagsBits = 1734437958;
  v1._object = (void *)0xE400000000000000;
  v2._countAndFlagsBits = 0x6E207265746C6946;
  v2._object = (void *)0xEB00000000656D61;
  return TTRLocalizedString(_:value:comment:)(v0, v1, v2)._countAndFlagsBits;
}

uint64_t static TTRLocalizableStrings.ListDetail.Filters.other.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._countAndFlagsBits = 0xD00000000000001FLL;
  v0._object = (void *)0x8000000100563270;
  v1._object = (void *)0x8000000100563290;
  v2._countAndFlagsBits = 0x694620726568744FLL;
  v2._object = (void *)0xED0000737265746CLL;
  v1._countAndFlagsBits = 0xD000000000000019;
  return TTRLocalizedString(_:value:comment:)(v0, v2, v1)._countAndFlagsBits;
}

uint64_t static TTRLocalizableStrings.ListDetail.Filters.documentation.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._countAndFlagsBits = 0xD000000000000022;
  v1._countAndFlagsBits = 0xD000000000000068;
  v2._object = (void *)0x80000001005632B0;
  v1._object = (void *)0x80000001005632E0;
  v0._object = (void *)0x8000000100563350;
  v2._countAndFlagsBits = 0xD000000000000020;
  return TTRLocalizedString(_:value:comment:)(v2, v1, v0)._countAndFlagsBits;
}

uint64_t static TTRLocalizableStrings.ListDetail.Filters.disabledFiltersSectionTitle.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  v0._countAndFlagsBits = 0xD00000000000002CLL;
  v1._object = (void *)0x8000000100563380;
  v0._object = (void *)0x80000001005633B0;
  v1._countAndFlagsBits = 0xD00000000000002ALL;
  v2._countAndFlagsBits = 0x46207463656C6553;
  v2._object = (void *)0xEE00737265746C69;
  return TTRLocalizedString(_:value:comment:)(v1, v2, v0)._countAndFlagsBits;
}

uint64_t sub_100099280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100642900);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100642900);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100099310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  char *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v1 = v0;
  v2 = sub_10002A750(&qword_100641980);
  __chkstk_darwin(v2);
  v99 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_10002A750(&qword_100642A08);
  v98 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v97 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10002A750(&qword_100642A10);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  __chkstk_darwin(v5);
  v101 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100642A18);
  v105 = *(_QWORD *)(v7 - 8);
  v106 = v7;
  __chkstk_darwin(v7);
  v104 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_10002A750(&qword_100642A20);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_10002A750(&qword_100642A28);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10002A750(&qword_100642A30);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v88 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_10002A750(&qword_100642A38);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v91 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10002A750(&qword_100642A40);
  v95 = *(_QWORD *)(v13 - 8);
  v96 = v13;
  __chkstk_darwin(v13);
  v92 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(char **)(v0 + 32);
  if ((unint64_t)(v15 - 1) >= 3)
    v16 = v15;
  else
    v15 = 0;
  if (qword_10063D350 != -1)
    swift_once(&qword_10063D350, sub_100099280);
  v17 = type metadata accessor for Logger(0);
  sub_100012DC4(v17, (uint64_t)qword_100642900);
  v18 = v15;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v107 = (uint64_t)v15;
    *(_QWORD *)&v108 = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_10002A750(&qword_100642AC0);
    v24 = Optional.descriptionOrNil.getter(v23);
    v26 = v25;
    v107 = sub_100027E40(v24, v25, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v21 + 4, v21 + 12);

    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "upgradeInfoPublisher: kicks in {preferredCalDAVAccountID: %{public}s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, &type metadata for Any[8]);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
  v80 = *(void **)(v1 + 104);
  v27 = swift_allocObject(&unk_1005EE990, 24, 7);
  *(_QWORD *)(v27 + 16) = 0;
  v28 = swift_allocObject(&unk_1005EE9B8, 40, 7);
  v81 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(v28 + 16) = v81;
  *(_QWORD *)(v28 + 32) = v1;
  v29 = sub_10002A750(&qword_100642A48);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  swift_retain_n(v1, 2);
  swift_unknownObjectRetain(v81);
  *(_QWORD *)&v108 = Future.init(_:)(sub_10009D730, v28);
  v30 = swift_allocObject(&unk_1005EE9E0, 32, 7);
  *(_QWORD *)(v30 + 16) = v27;
  *(_QWORD *)(v30 + 24) = v15;
  v31 = sub_100023FEC(&qword_100642A50, &qword_100642A48, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  *(_QWORD *)&v81 = v18;
  swift_retain();
  v32 = v82;
  Publisher.compactMap<A>(_:)(sub_10009D768, v30, v29, &type metadata for TTRWelcomeInteractor.EligibleAccountResult, v31);
  swift_release();
  swift_release();
  v33 = swift_allocObject(&unk_1005EEA08, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_10009D6F0;
  *(_QWORD *)(v33 + 24) = v1;
  v34 = swift_retain();
  v35 = static Subscribers.Demand.unlimited.getter(v34);
  v36 = sub_10002A750(&qword_100642A58);
  v37 = sub_100023FEC(&qword_100642A60, &qword_100642A20, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v38 = sub_100023FEC(&qword_100642A68, &qword_100642A58, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v39 = v85;
  v40 = v84;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v35, sub_10009D770, v33, v84, v36, v37, v38);
  v41 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v83 + 8))(v32, v40, v41);
  v42 = swift_allocObject(&unk_1005EEA30, 32, 7);
  v43 = v80;
  *(_QWORD *)(v42 + 16) = v80;
  *(_QWORD *)(v42 + 24) = v27;
  v44 = sub_100023FEC(&qword_100642A70, &qword_100642A28, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  swift_retain();
  v45 = v43;
  v46 = v88;
  v47 = v87;
  Publisher.tryMap<A>(_:)(sub_10009D7A4, v42, v87, &type metadata for TTRWelcomeUpgradeInfo, v44);
  v48 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v86 + 8))(v39, v47, v48);
  v49 = sub_100023FEC(&qword_100642A78, &qword_100642A30, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0;
  v50 = v91;
  v51 = v90;
  Publisher.replaceError(with:)(&v108, v90, v49);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v46, v51);
  v52 = sub_100023FEC(&qword_100642A80, &qword_100642A38, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0;
  v53 = v92;
  v54 = v94;
  Publisher.replaceEmpty(with:)(&v108, v94, v52);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v50, v54);
  v55 = sub_100023FEC(&qword_100642A88, &qword_100642A40, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceEmpty<A>);
  v56 = v96;
  v57 = Publisher.eraseToAnyPublisher()(v96, v55);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v53, v56);
  v58 = v1 + OBJC_IVAR____TtC9Reminders20TTRWelcomeInteractor_getUpgradeInfoTimeout;
  *(_QWORD *)&v108 = v57;
  v59 = sub_10002A750(&qword_100642A90);
  v60 = sub_100023FEC(&qword_100642A98, &qword_100642A90, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v61 = sub_10009D7BC();
  v62 = v97;
  Publisher<>.setFailureType<A>(to:)(&type metadata for TTRWelcomeInteractor.GetUpgradeInfoError, v59, &type metadata for TTRWelcomeInteractor.GetUpgradeInfoError, v60, v61);
  v63 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  *(_QWORD *)&v108 = static OS_dispatch_queue.main.getter(v63);
  v64 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v65 = (uint64_t)v99;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v99, 1, 1, v64);
  v66 = sub_100023FEC(&qword_100642AA8, &qword_100642A08, (uint64_t)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
  v78 = sub_10008A95C();
  v67 = v101;
  v68 = v58;
  v69 = v100;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v68, &v108, v65, sub_10009B454, 0, v100, v63, v66, v78);
  sub_1000073A0(v65, &qword_100641980);

  (*(void (**)(char *, uint64_t))(v98 + 8))(v62, v69);
  v70 = sub_100023FEC(&qword_100642AB0, &qword_100642A10, (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0;
  v72 = v103;
  v71 = v104;
  Publisher.replaceError(with:)(&v108, v103, v70);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v67, v72);
  v73 = sub_100023FEC(&qword_100642AB8, &qword_100642A18, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v74 = v106;
  v75 = Publisher.eraseToAnyPublisher()(v106, v73);

  swift_release();
  v76 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v105 + 8))(v71, v74, v76);
  swift_release();
  return v75;
}

uint64_t sub_100099D40(void *a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v23;
  id v24;
  uint64_t v25;

  v4 = v3;
  if (qword_10063D350 != -1)
    swift_once(&qword_10063D350, sub_100099280);
  v8 = type metadata accessor for Logger(0);
  sub_100012DC4(v8, (uint64_t)qword_100642900);
  v9 = a1;
  v10 = a2;
  v11 = v9;
  v12 = v10;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = v12;
    *(_DWORD *)v15 = 138543362;
    v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 4, v15 + 12);
    *v23 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "migrationDeviceInfosFuture: Will return a future to fetch ICDeviceListRequest for {calDAVAccountID: %{public}@}", v15, 0xCu);
    v17 = sub_10002A750(&qword_100642D60);
    swift_arrayDestroy(v23, 1, v17);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  v18 = swift_allocObject(&unk_1005EEAA8, 48, 7);
  *(_QWORD *)(v18 + 16) = v11;
  *(_QWORD *)(v18 + 24) = v12;
  *(_BYTE *)(v18 + 32) = a3 & 1;
  *(_QWORD *)(v18 + 40) = v4;
  v19 = sub_10002A750(&qword_100642AC8);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = v11;
  v21 = v12;
  swift_retain();
  return Future.init(_:)(sub_10009DCC0, v18);
}

double sub_100099F8C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char *v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  char v20;
  id v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  void *v28;
  id v29;
  char *v30;
  id v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  double result;
  uint64_t v48;
  char v50[24];
  char v51[24];
  uint64_t v52;
  __int128 v53;
  char v54;
  __int128 v55;
  char v56;
  char v57[24];

  v6 = *a1;
  v7 = a2 + 16;
  v8 = *(_QWORD *)(*a1 + 16);
  swift_beginAccess(a2 + 16, v57, 1, 0);
  *(_QWORD *)(a2 + 16) = v8;
  v9 = &unk_10063D000;
  if (v8 >= 2)
  {
    v10 = v6;
    if (qword_10063D350 != -1)
      swift_once(&qword_10063D350, sub_100099280);
    v11 = type metadata accessor for Logger(0);
    sub_100012DC4(v11, (uint64_t)qword_100642900);
    v12 = swift_retain();
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134217984;
      swift_beginAccess(v7, v50, 0, 0);
      *(_QWORD *)&v53 = *(_QWORD *)(a2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 8, v15 + 4, v15 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "upgradeInfoPublisher: Got more than 1 eligible accounts for upgrade, currently we handle only 1 at a time {count: %ld}", v15, 0xCu);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_release();
    }
    v6 = v10;
  }
  v16 = *(char **)(v6 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain(v6);
    v48 = v6;
    v17 = (_BYTE *)(v6 + 48);
    do
    {
      if (a3)
      {
        v19 = (void *)*((_QWORD *)v17 - 2);
        v18 = (void *)*((_QWORD *)v17 - 1);
        v20 = *v17;
        sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
        v21 = v18;
        v22 = v19;
        v23 = a3;
        v24 = static NSObject.== infix(_:_:)(v21, v23);

        if ((v24 & 1) != 0)
        {
          swift_bridgeObjectRelease(v48);
          *(_QWORD *)&v55 = v22;
          v9 = (_QWORD *)&unk_10063D000;
          goto LABEL_28;
        }

      }
      v17 += 24;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease(v48);
    v16 = *(char **)(v48 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain(v48);
      v25 = 0;
      v26 = (_BYTE *)(v48 + 48);
      do
      {
        v27 = (char *)(v25 + 1);
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        v28 = (void *)*((_QWORD *)v26 - 1);
        v20 = *v26;
        v29 = *((id *)v26 - 2);
        v21 = v28;
        if (objc_msgSend(v29, "rem_isPrimaryAppleAccount"))
        {
          swift_bridgeObjectRelease(v48);
          *(_QWORD *)&v55 = v29;
          v9 = (_QWORD *)&unk_10063D000;
          goto LABEL_28;
        }

        ++v25;
        v26 += 24;
      }
      while (v27 != v16);
      swift_bridgeObjectRelease(v48);
      if (*(_QWORD *)(v48 + 16))
      {
        v16 = *(char **)(v48 + 32);
        v21 = *(id *)(v48 + 40);
        v20 = *(_BYTE *)(v48 + 48);
        v30 = v16;
        v31 = v21;
        goto LABEL_26;
      }
      v16 = 0;
    }
    v21 = 0;
    v20 = 0;
LABEL_26:
    v9 = &unk_10063D000;
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  *(_QWORD *)&v55 = v16;
LABEL_28:
  *((_QWORD *)&v55 + 1) = v21;
  v56 = v20;
  if (v9[106] != -1)
LABEL_34:
    swift_once(&qword_10063D350, sub_100099280);
  v32 = type metadata accessor for Logger(0);
  sub_100012DC4(v32, (uint64_t)qword_100642900);
  v33 = a3;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v52 = v37;
    *(_QWORD *)&v53 = a3;
    *(_DWORD *)v36 = 136446466;
    v38 = sub_10002A750(&qword_100642AC0);
    v39 = Optional.descriptionOrNil.getter(v38);
    v41 = v40;
    *(_QWORD *)&v53 = sub_100027E40(v39, v40, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 8, v36 + 4, v36 + 12);

    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v36 + 12) = 2082;
    swift_beginAccess(&v55, v51, 0, 0);
    v53 = v55;
    v54 = v56;
    sub_10009DBC0((id)v55, *((void **)&v55 + 1));
    v42 = sub_10002A750(&qword_100642AD8);
    v43 = String.init<A>(describing:)(&v53, v42);
    v45 = v44;
    *(_QWORD *)&v53 = sub_100027E40(v43, v44, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 8, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "upgradeInfoPublisher: Selected eligible account for upgrade {preferred: %{public}s, selected: %{public}s}", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 2, &type metadata for Any[8]);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

  }
  swift_beginAccess(&v55, &v53, 0, 0);
  v46 = v56;
  result = *(double *)&v55;
  *(_OWORD *)a4 = v55;
  *(_BYTE *)(a4 + 16) = v46;
  return result;
}

void sub_10009A4A4(uint64_t a1@<X0>, void (*a2)(_QWORD, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  v4 = sub_10002A750(&qword_100642AC8);
  v5 = sub_100023FEC(&qword_100642AD0, &qword_100642AC8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v6 = Publisher.eraseToAnyPublisher()(v4, v5);
  swift_release();
  *a3 = v6;
}

void sub_10009A53C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v6;
  int v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t k;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t m;
  void *v86;
  id v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id *v96;
  _QWORD *v97;
  id v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  NSString v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  NSString v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  id v123;
  NSObject *v124;
  os_log_type_t v125;
  BOOL v126;
  uint8_t *v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  os_log_type_t type;
  NSObject *log;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  int v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  void *v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD v153[2];
  BOOL v154;
  char v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[24];
  uint64_t v161;

  v6 = *(void **)(a1 + 8);
  v7 = *(unsigned __int8 *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(id *)a1;
  v10 = v6;
  LODWORD(v143) = objc_msgSend(v9, "rem_isPrimaryAppleAccount");
  v11 = objc_msgSend(v9, "aa_primaryEmail");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v151 = v14;

  }
  else
  {
    v151 = 0xE300000000000000;
    v13 = 7104878;
  }
  v141 = v7;
  v148 = v13;
  if (qword_10063D350 != -1)
    swift_once(&qword_10063D350, sub_100099280);
  v15 = type metadata accessor for Logger(0);
  sub_100012DC4(v15, (uint64_t)qword_100642900);
  v16 = v9;
  v17 = v10;
  swift_bridgeObjectRetain_n(v151, 2);
  v18 = v16;
  v19 = v17;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v149 = v18;
  v150 = v19;
  v137 = a4;
  v138 = a3;
  if (os_log_type_enabled(v20, v21))
  {
    log = v20;
    v22 = swift_slowAlloc(32, -1);
    v23 = (_QWORD *)swift_slowAlloc(8, -1);
    v142 = (_QWORD *)swift_slowAlloc(64, -1);
    *(_DWORD *)v22 = 138543874;
    type = v21;
    v159 = (uint64_t)v19;
    v152 = (uint64_t)v142;
    v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v160, v22 + 4, v22 + 12);
    *v23 = v19;

    *(_WORD *)(v22 + 12) = 2082;
    v25 = Bool.yesno.getter(v143);
    v27 = v26;
    v159 = sub_100027E40(v25, v26, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v160, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 22) = 2082;
    swift_bridgeObjectRetain(v151);
    v159 = sub_100027E40(v148, v151, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v160, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(v151, 3);
    v18 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "upgradeInfoPublisher: Now getting the upgrade info for {calDAVAccountID: %{public}@, isPrimary: %{public}s, accountDesc: %{public}s}", (uint8_t *)v22, 0x20u);
    v28 = sub_10002A750(&qword_100642D60);
    swift_arrayDestroy(v23, 1, v28);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v142, 2, &type metadata for Any[8]);
    swift_slowDealloc(v142, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n(v151, 2);
  }

  v152 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v37 = v8;
    else
      v37 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v29 = _CocoaArrayWrapper.endIndex.getter(v37);
    if (v29)
      goto LABEL_11;
LABEL_25:
    swift_bridgeObjectRelease(v8);
    v36 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v29 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v8);
  if (!v29)
    goto LABEL_25;
LABEL_11:
  if (v29 < 1)
  {
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  for (i = 0; i != v29; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0)
      v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
    else
      v33 = *(id *)(v8 + 8 * i + 32);
    v34 = v33;
    v35 = objc_msgSend(v33, "upgradedTo2019OSes");
    if ((v35 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      v31 = *(_QWORD *)(v152 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
      v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v34);
      specialized ContiguousArray._endMutation()(v32);
    }
  }
  swift_bridgeObjectRelease(v8);
  v36 = v152;
LABEL_26:
  v152 = (uint64_t)_swiftEmptyArrayStorage;
  if ((v36 & 0x8000000000000000) == 0 && (v36 & 0x4000000000000000) == 0)
  {
    v38 = *(_QWORD *)(v36 + 16);
    swift_retain();
    v39 = &selRef_supportsAttachments;
    if (v38)
      goto LABEL_29;
LABEL_41:
    swift_release();
    v29 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_56;
    goto LABEL_42;
  }
  v46 = swift_retain();
  v38 = _CocoaArrayWrapper.endIndex.getter(v46);
  v39 = &selRef_supportsAttachments;
  if (!v38)
    goto LABEL_41;
LABEL_29:
  if (v38 < 1)
    goto LABEL_102;
  for (j = 0; j != v38; ++j)
  {
    if ((v36 & 0xC000000000000001) != 0)
      v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v36);
    else
      v43 = *(id *)(v36 + 8 * j + 32);
    v44 = v43;
    v45 = objc_msgSend(v43, v39[284]);
    if ((_DWORD)v45)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
      v41 = *(_QWORD *)(v152 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
      v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v44);
      specialized ContiguousArray._endMutation()(v42);
    }
    else
    {

    }
  }
  swift_release();
  v29 = v152;
  if ((v152 & 0x8000000000000000) == 0)
  {
LABEL_42:
    if ((v29 & 0x4000000000000000) != 0)
      goto LABEL_56;
    v47 = *(_QWORD *)(v29 + 16);
    if (v47)
      goto LABEL_44;
    goto LABEL_57;
  }
LABEL_56:
  while (1)
  {
    swift_bridgeObjectRetain(v29);
    v47 = _CocoaArrayWrapper.endIndex.getter(v61);
    swift_release();
    if (!v47)
      break;
LABEL_44:
    v152 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1003D7FFC(0, v47 & ~(v47 >> 63), 0);
    if (v47 < 0)
      goto LABEL_103;
    v142 = (_QWORD *)v38;
    v143 = (_QWORD *)v36;
    v48 = 0;
    v49 = v152;
    v39 = (char **)(v29 & 0xC000000000000001);
    while (v47 != v48)
    {
      v50 = v49;
      if (v39)
        v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v29);
      else
        v51 = *(id *)(v29 + 8 * v48 + 32);
      v52 = v51;
      v53 = objc_msgSend(v51, "name");
      if (!v53)
        goto LABEL_136;
      v54 = v53;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v36 = v56;

      v49 = v50;
      v152 = v50;
      v38 = *(_QWORD *)(v50 + 16);
      v57 = *(_QWORD *)(v49 + 24);
      if (v38 >= v57 >> 1)
      {
        sub_1003D7FFC(v57 > 1, v38 + 1, 1);
        v49 = v152;
      }
      ++v48;
      *(_QWORD *)(v49 + 16) = v38 + 1;
      v58 = v49 + 16 * v38;
      *(_QWORD *)(v58 + 32) = v55;
      *(_QWORD *)(v58 + 40) = v36;
      if (v47 == v48)
      {
        v59 = (_QWORD *)v49;
        swift_release();
        v60 = v59;
        v38 = (uint64_t)v142;
        v36 = (uint64_t)v143;
        v39 = &selRef_supportsAttachments;
        goto LABEL_58;
      }
    }
    __break(1u);
  }
LABEL_57:
  swift_release();
  v60 = _swiftEmptyArrayStorage;
LABEL_58:
  v152 = (uint64_t)_swiftEmptyArrayStorage;
  v143 = v60;
  if (!v38)
  {
    swift_release();
    v29 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_85;
    goto LABEL_71;
  }
  if (v38 < 1)
  {
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  for (k = 0; k != v38; ++k)
  {
    if ((v36 & 0xC000000000000001) != 0)
      v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v36);
    else
      v65 = *(id *)(v36 + 8 * k + 32);
    v66 = v65;
    v67 = objc_msgSend(v65, v39[284]);
    if ((v67 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v67);
      v63 = *(_QWORD *)(v152 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v63);
      v64 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v66);
      specialized ContiguousArray._endMutation()(v64);
    }
  }
  swift_release();
  v29 = v152;
  if ((v152 & 0x8000000000000000) == 0)
  {
LABEL_71:
    if ((v29 & 0x4000000000000000) != 0)
      goto LABEL_85;
    v68 = *(_QWORD *)(v29 + 16);
    if (v68)
      goto LABEL_73;
    goto LABEL_86;
  }
LABEL_85:
  while (1)
  {
    swift_bridgeObjectRetain(v29);
    v68 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_release();
    if (!v68)
      break;
LABEL_73:
    v152 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1003D7FFC(0, v68 & ~(v68 >> 63), 0);
    if (v68 < 0)
      goto LABEL_105;
    v69 = 0;
    v70 = v152;
    while (v68 != v69)
    {
      v71 = v70;
      if ((v29 & 0xC000000000000001) != 0)
        v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v69, v29);
      else
        v72 = *(id *)(v29 + 8 * v69 + 32);
      v73 = v72;
      v74 = objc_msgSend(v72, "name");
      if (!v74)
        goto LABEL_137;
      v75 = v74;
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v78 = v77;

      v70 = v71;
      v152 = v71;
      v79 = *(_QWORD *)(v71 + 16);
      v80 = *(_QWORD *)(v70 + 24);
      if (v79 >= v80 >> 1)
      {
        sub_1003D7FFC(v80 > 1, v79 + 1, 1);
        v70 = v152;
      }
      ++v69;
      *(_QWORD *)(v70 + 16) = v79 + 1;
      v81 = v70 + 16 * v79;
      *(_QWORD *)(v81 + 32) = v76;
      *(_QWORD *)(v81 + 40) = v78;
      if (v68 == v69)
      {
        v142 = (_QWORD *)v70;
        swift_release();
        goto LABEL_87;
      }
    }
    __break(1u);
  }
LABEL_86:
  swift_release();
  v142 = _swiftEmptyArrayStorage;
LABEL_87:
  v83 = sub_10009D800(v150, a2);
  if (v145)
  {

    swift_bridgeObjectRelease(v151);
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRelease(v142);
    return;
  }
  v29 = v83;
  v152 = (uint64_t)_swiftEmptyArrayStorage;
  if (v83 >> 62)
  {
LABEL_106:
    if (v29 < 0)
      v94 = v29;
    else
      v94 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v84 = _CocoaArrayWrapper.endIndex.getter(v94);
    if (v84)
      goto LABEL_91;
LABEL_110:
    swift_bridgeObjectRelease_n(v29, 2);
    v93 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_111;
  }
  v84 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v83);
  if (!v84)
    goto LABEL_110;
LABEL_91:
  if (v84 < 1)
  {
    __break(1u);
    goto LABEL_135;
  }
  for (m = 0; m != v84; ++m)
  {
    if ((v29 & 0xC000000000000001) != 0)
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(m, v29);
    else
      v91 = *(id *)(v29 + 8 * m + 32);
    v90 = v91;
    v92 = objc_msgSend(v91, "shareeContext");
    if (v92)
    {
      v86 = v92;
      v87 = objc_msgSend(v92, "sharees");

      v88 = sub_100005ED8(0, &qword_100642220, REMSharee_ptr);
      v89 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v87, v88);

      v90 = v87;
    }
    else
    {
      v89 = _swiftEmptyArrayStorage;
    }

    sub_100450B7C((uint64_t)v89);
  }
  swift_bridgeObjectRelease_n(v29, 2);
  v93 = v152;
LABEL_111:
  v146 = v93;
  if (!((unint64_t)v93 >> 62))
  {
    v95 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v93);
    if (v95)
      goto LABEL_113;
LABEL_127:
    v97 = _swiftEmptyArrayStorage;
LABEL_128:
    swift_bridgeObjectRelease_n(v146, 2);
    v152 = (uint64_t)v97;
    v116 = sub_10002A750(&qword_1006466D0);
    v117 = sub_100023FEC((unint64_t *)&qword_100654F90, &qword_1006466D0, (uint64_t)&protocol conformance descriptor for [A]);
    v118 = Sequence<>.unique()(v116, v117, &protocol witness table for String);
    swift_bridgeObjectRelease(v97);
    swift_beginAccess(v138 + 16, &v159, 0, 0);
    v119 = *(_QWORD *)(v138 + 16);
    v120 = 256;
    if (!v141)
      v120 = 0;
    v147 = v120 | (v119 > 1);
    v121 = v150;
    swift_bridgeObjectRetain_n(v151, 3);
    swift_bridgeObjectRetain_n(v143, 3);
    swift_bridgeObjectRetain_n(v142, 3);
    v122 = v118;
    swift_bridgeObjectRetain_n(v118, 3);
    v123 = v121;
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v124, v125))
    {
      v140 = v124;
      v126 = v119 > 1;
      v127 = (uint8_t *)swift_slowAlloc(12, -1);
      v139 = swift_slowAlloc(32, -1);
      v161 = v139;
      *(_DWORD *)v127 = 136315138;
      v152 = (uint64_t)v123;
      v153[0] = v148;
      v153[1] = v151;
      v154 = v126;
      v155 = v141;
      v156 = v143;
      v157 = v142;
      v128 = v122;
      v158 = v122;
      v129 = v123;
      swift_bridgeObjectRetain(v151);
      swift_bridgeObjectRetain(v143);
      swift_bridgeObjectRetain(v142);
      swift_bridgeObjectRetain(v128);
      v130 = String.init<A>(describing:)(&v152, &type metadata for TTRWelcomeUpgradeInfo.EligibleAccountInfo);
      v132 = v131;
      v152 = sub_100027E40(v130, v131, &v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v127 + 4, v127 + 12);
      swift_bridgeObjectRelease_n(v128, 2);
      swift_bridgeObjectRelease_n(v142, 2);
      swift_bridgeObjectRelease_n(v143, 2);
      swift_bridgeObjectRelease_n(v151, 2);

      swift_bridgeObjectRelease(v132);
      _os_log_impl((void *)&_mh_execute_header, v140, v125, "upgradeInfoPublisher: Returns proper TTRWelcomeUpgradeInfo {eligibleAccountInfo: %s}", v127, 0xCu);
      swift_arrayDestroy(v139, 1, &type metadata for Any[8]);
      swift_slowDealloc(v139, -1, -1);
      swift_slowDealloc(v127, -1, -1);

      swift_bridgeObjectRelease(v128);
      swift_bridgeObjectRelease(v142);
      swift_bridgeObjectRelease(v143);
      swift_bridgeObjectRelease(v151);

      v133 = v148;
      v134 = v137;
    }
    else
    {

      v128 = v122;
      swift_bridgeObjectRelease_n(v122, 3);
      swift_bridgeObjectRelease_n(v142, 3);
      swift_bridgeObjectRelease_n(v143, 3);
      swift_bridgeObjectRelease_n(v151, 3);

      v134 = v137;
      v133 = v148;
    }
    *v134 = v150;
    v134[1] = v133;
    v134[2] = v151;
    v134[3] = v147;
    v134[4] = v143;
    v134[5] = v142;
    v134[6] = v128;
    return;
  }
  if (v93 < 0)
    v115 = v93;
  else
    v115 = v93 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v93);
  v95 = _CocoaArrayWrapper.endIndex.getter(v115);
  if (!v95)
    goto LABEL_127;
LABEL_113:
  if (v95 >= 1)
  {
    v96 = (id *)(v146 + 32);
    v97 = _swiftEmptyArrayStorage;
    do
    {
      v98 = *v96;
      v99 = objc_msgSend(v98, "address");
      if (v99)
      {
        v100 = v99;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
        v102 = v101;

        v103 = String._bridgeToObjectiveC()();
        v104 = objc_msgSend(v103, "rem_removingMailto", swift_bridgeObjectRelease(v102).n128_f64[0]);

        static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v106 = v105;

        v107 = String._bridgeToObjectiveC()();
        v108 = objc_msgSend(v107, "rem_removingTel", swift_bridgeObjectRelease(v106).n128_f64[0]);

        v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
        v111 = v110;

        if ((swift_isUniquelyReferenced_nonNull_native(v97) & 1) == 0)
          v97 = sub_10001D840(0, v97[2] + 1, 1, v97);
        v113 = v97[2];
        v112 = v97[3];
        if (v113 >= v112 >> 1)
          v97 = sub_10001D840((_QWORD *)(v112 > 1), v113 + 1, 1, v97);
        v97[2] = v113 + 1;
        v114 = &v97[2 * v113];
        v114[4] = v109;
        v114[5] = v111;
      }
      else
      {

      }
      ++v96;
      --v95;
    }
    while (v95);
    goto LABEL_128;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
}

void sub_10009B454(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_10063D350 != -1)
    swift_once(&qword_10063D350, sub_100099280);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100012DC4(v2, (uint64_t)qword_100642900);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "upgradeInfoPublisher: Timed out getting upgrade info", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  *a1 = 1;
}

double sub_10009B53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  void (*v18)(double (*)(), _QWORD *, __n128);
  __n128 v19;
  double result;

  v10 = swift_allocObject(&unk_1005EEA58, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = qword_10063D350;
  swift_retain();
  if (v11 != -1)
    swift_once(&qword_10063D350, sub_100099280);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100012DC4(v12, (uint64_t)qword_100642900);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "eligibleAccountsFuture: fetching accountsEligibleForMigration", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = (_QWORD *)swift_allocObject(&unk_1005EEA80, 56, 7);
  v17[2] = a5;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = sub_10009DC10;
  v17[6] = v10;
  v18 = *(void (**)(double (*)(), _QWORD *, __n128))(*(_QWORD *)a3 + 168);
  swift_retain();
  v19 = swift_unknownObjectRetain(a3);
  v18(sub_10009DC7C, v17, v19);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_10009B6AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, __n128), uint64_t a5)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  void *v43;
  int v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  BOOL v48;
  id v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  id v66;
  id v67;
  char v68;
  uint64_t v69;
  id v70;
  id v71;
  uint8_t *v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint8_t *v78;
  uint8_t *v79;
  id v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  NSObject **v93;
  NSObject *v94;
  uint64_t v95;
  _QWORD *v96;
  uint8_t *v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  NSObject *v102;
  id v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  id v107;
  uint64_t v108;
  id v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  __n128 v118;
  _QWORD *v119;
  double result;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(_QWORD *, _QWORD, __n128);
  char *v124;
  __int128 v125;
  uint8_t *v126;
  uint8_t *v127;
  uint64_t v128;
  id *v129;
  __int128 v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint8_t *v135;
  unint64_t v136;
  int64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint8_t *v143;
  char v144;
  uint64_t v145;
  _QWORD *v146;

  v122 = a5;
  v123 = a4;
  v7 = type metadata accessor for UUID(0);
  v139 = *(_QWORD *)(v7 - 8);
  v140 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = _swiftEmptyArrayStorage;
  v11 = objc_msgSend(*(id *)(a1 + 56), "unsafeUntilSystemReady_allICloudACAccounts", v8);
  v12 = sub_100005ED8(0, (unint64_t *)&qword_100642AE0, ACAccount_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  v142 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v24 = v13;
    else
      v24 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v14)
      goto LABEL_3;
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v13);
    if (v14)
    {
LABEL_3:
      if (v14 < 1)
      {
        __break(1u);
        JUMPOUT(0x10009C2D4);
      }
      for (i = 0; i != v14; ++i)
      {
        if ((v13 & 0xC000000000000001) != 0)
          v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
        else
          v17 = *(id *)(v13 + 8 * i + 32);
        v18 = v17;
        v19 = objc_msgSend(v17, "displayAccount");

        if (v19)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
          v22 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v21 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v22 >= v21 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
          specialized Array._endMutation()(v16);
        }
      }
      swift_bridgeObjectRelease(v13);
      v23 = v142;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease(v13);
  v23 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_19:
  v25 = swift_bridgeObjectRelease(v13);
  v26 = (*(uint64_t (**)(__n128))(*(_QWORD *)a2 + 160))(v25);
  v28 = 0;
  v29 = *(_QWORD *)(v26 + 64);
  v131 = v26 + 64;
  v30 = 1 << *(_BYTE *)(v26 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v132 = (unint64_t)(v30 + 63) >> 6;
  v33 = v23 & 0xFFFFFFFFFFFFFF8;
  v133 = v23 & 0xFFFFFFFFFFFFFF8;
  v134 = v26;
  if (v23 < 0)
    v33 = v23;
  v121 = v33;
  v141 = v23 & 0xC000000000000001;
  v129 = (id *)&v143;
  *(_QWORD *)&v27 = 138543362;
  v130 = v27;
  *(_QWORD *)&v27 = 136446210;
  v125 = v27;
  v124 = &type metadata for Any[8];
  v138 = v23;
  while (v32)
  {
    v37 = __clz(__rbit64(v32));
    v38 = (v32 - 1) & v32;
    v39 = v37 | (v28 << 6);
LABEL_42:
    v43 = *(void **)(*(_QWORD *)(v134 + 48) + 8 * v39);
    v44 = *(unsigned __int8 *)(*(_QWORD *)(v134 + 56) + v39);
    v136 = v38;
    v137 = v28;
    LODWORD(v135) = v44;
    if ((unint64_t)v23 >> 62)
    {
      v107 = v43;
      swift_bridgeObjectRetain(v23);
      v45 = _CocoaArrayWrapper.endIndex.getter(v121);
      if (!v45)
      {
LABEL_86:
        swift_bridgeObjectRelease(v23);
        if (qword_10063D350 != -1)
          swift_once(&qword_10063D350, sub_100099280);
        v108 = type metadata accessor for Logger(0);
        sub_100012DC4(v108, (uint64_t)qword_100642900);
        v109 = v43;
        v110 = Logger.logObject.getter(v109);
        v111 = static os_log_type_t.error.getter(v110);
        if (os_log_type_enabled(v110, v111))
        {
          v34 = swift_slowAlloc(12, -1);
          v35 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v34 = v130;
          *(_QWORD *)(v34 + 4) = v109;
          *v35 = v109;
          _os_log_impl((void *)&_mh_execute_header, v110, v111, "eligibleAccountsFuture: cannot match a display iCloud ACAccount with the given eligible CalDAV account {calDAVAccountID: %{public}@}", (uint8_t *)v34, 0xCu);
          v36 = sub_10002A750(&qword_100642D60);
          swift_arrayDestroy(v35, 1, v36);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v34, -1, -1);

        }
        else
        {

        }
        goto LABEL_25;
      }
    }
    else
    {
      v45 = *(_QWORD *)(v133 + 16);
      v46 = v43;
      swift_bridgeObjectRetain(v23);
      if (!v45)
        goto LABEL_86;
    }
    v47 = 4;
    while (1)
    {
      if (v141)
        v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47 - 4, v23);
      else
        v49 = *(id *)(v23 + 8 * v47);
      v50 = v49;
      v51 = v47 - 3;
      if (__OFADD__(v47 - 4, 1))
      {
        __break(1u);
        goto LABEL_96;
      }
      v52 = (void *)ACAccount.rem_childCalDAVAccountEnabledForReminders.getter();
      if (v52
        && (v53 = v52, v54 = objc_msgSend(v52, "identifier"), v53, v54))
      {
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v57 = v56;

      }
      else
      {
        v55 = 0;
        v57 = 0;
      }
      v58 = objc_msgSend(v43, "uuid", v121, v122);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v58);

      v60 = UUID.uuidString.getter(v59);
      v62 = v61;
      (*(void (**)(char *, uint64_t))(v139 + 8))(v10, v140);
      if (v57)
        break;

      swift_bridgeObjectRelease(v62);
LABEL_46:
      ++v47;
      v48 = v51 == v45;
      v23 = v138;
      if (v48)
        goto LABEL_86;
    }
    if (v55 == v60 && v57 == v62)
    {
      v23 = v138;
      swift_bridgeObjectRelease(v138);
      swift_bridgeObjectRelease(v57);
      goto LABEL_62;
    }
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v60, v62, 0);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v62);
    if ((v63 & 1) == 0)
    {

      goto LABEL_46;
    }
    v23 = v138;
    v62 = v138;
LABEL_62:
    swift_bridgeObjectRelease(v62);
    v64 = (char)v135;
    switch((int)v135)
    {
      case 2:
      case 3:
      case 5:

        break;
      case 4:
        if (qword_10063D350 != -1)
          swift_once(&qword_10063D350, sub_100099280);
        v88 = type metadata accessor for Logger(0);
        sub_100012DC4(v88, (uint64_t)qword_100642900);
        v89 = v43;
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.default.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          v92 = (uint8_t *)swift_slowAlloc(12, -1);
          v93 = (NSObject **)swift_slowAlloc(8, -1);
          *(_DWORD *)v92 = v130;
          v135 = v92 + 4;
          v142 = (uint64_t)v89;
          v94 = v89;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v129, v135, v92 + 12);
          *v93 = v89;

          _os_log_impl((void *)&_mh_execute_header, v90, v91, "eligibleAccountsFuture: found eligible account in .error {calDAVAccountID: %{public}@}", v92, 0xCu);
          v95 = sub_10002A750(&qword_100642D60);
          swift_arrayDestroy(v93, 1, v95);
          swift_slowDealloc(v93, -1, -1);
          swift_slowDealloc(v92, -1, -1);
        }
        else
        {

          v90 = v89;
        }

        v96 = v146;
        v102 = v89;
        v103 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
          v96 = sub_1004568D4(0, v96[2] + 1, 1, v96);
        v105 = v96[2];
        v104 = v96[3];
        if (v105 >= v104 >> 1)
          v96 = sub_1004568D4((_QWORD *)(v104 > 1), v105 + 1, 1, v96);
        v96[2] = v105 + 1;
        v106 = &v96[3 * v105];
        v106[4] = v103;
        v106[5] = v102;
        *((_BYTE *)v106 + 48) = 0;

        goto LABEL_84;
      default:
        v65 = qword_10063D350;
        v66 = v43;
        v67 = v50;
        if (v65 != -1)
          swift_once(&qword_10063D350, sub_100099280);
        v68 = v64 & 1;
        v69 = type metadata accessor for Logger(0);
        sub_100012DC4(v69, (uint64_t)qword_100642900);
        v70 = v66;
        v71 = v67;
        v72 = (uint8_t *)v70;
        v73 = v71;
        v74 = Logger.logObject.getter(v73);
        v75 = static os_log_type_t.default.getter(v74);
        if (os_log_type_enabled(v74, v75))
        {
          v76 = (uint8_t *)swift_slowAlloc(12, -1);
          v77 = swift_slowAlloc(32, -1);
          v128 = v77;
          v127 = v76;
          *(_DWORD *)v76 = v125;
          v78 = v76 + 12;
          v145 = v77;
          v126 = v76 + 4;
          v142 = (uint64_t)v73;
          v143 = v72;
          v144 = v68;
          v79 = v72;
          v80 = v73;
          v135 = v72;
          v81 = v80;
          v82 = String.init<A>(describing:)(&v142, &type metadata for TTRWelcomeInteractor.EligibleAccountResult);
          LOBYTE(v76) = v68;
          v84 = v83;
          v142 = sub_100027E40(v82, v83, &v145);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v129, v126, v78);

          v72 = v135;
          v85 = v84;
          v68 = (char)v76;
          swift_bridgeObjectRelease(v85);
          v86 = v127;
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "eligibleAccountsFuture: found eligible account in .notStarted {eligibleAccountResult: %{public}s}", v127, 0xCu);
          v87 = v128;
          swift_arrayDestroy(v128, 1, v124);
          swift_slowDealloc(v87, -1, -1);
          swift_slowDealloc(v86, -1, -1);

        }
        else
        {

        }
        v96 = v146;
        v97 = v72;
        v98 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
          v96 = sub_1004568D4(0, v96[2] + 1, 1, v96);
        v100 = v96[2];
        v99 = v96[3];
        if (v100 >= v99 >> 1)
          v96 = sub_1004568D4((_QWORD *)(v99 > 1), v100 + 1, 1, v96);
        v96[2] = v100 + 1;
        v101 = &v96[3 * v100];
        v101[4] = v98;
        v101[5] = v97;
        *((_BYTE *)v101 + 48) = v68;

LABEL_84:
        v146 = v96;
        break;
    }
LABEL_25:
    v32 = v136;
    v28 = v137;
  }
  v40 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  if (v40 >= v132)
    goto LABEL_90;
  v41 = *(_QWORD *)(v131 + 8 * v40);
  ++v28;
  if (v41)
    goto LABEL_41;
  v28 = v40 + 1;
  if (v40 + 1 >= v132)
    goto LABEL_90;
  v41 = *(_QWORD *)(v131 + 8 * v28);
  if (v41)
    goto LABEL_41;
  v28 = v40 + 2;
  if (v40 + 2 >= v132)
    goto LABEL_90;
  v41 = *(_QWORD *)(v131 + 8 * v28);
  if (v41)
  {
LABEL_41:
    v38 = (v41 - 1) & v41;
    v39 = __clz(__rbit64(v41)) + (v28 << 6);
    goto LABEL_42;
  }
  v42 = v40 + 3;
  if (v42 < v132)
  {
    v41 = *(_QWORD *)(v131 + 8 * v42);
    if (!v41)
    {
      while (1)
      {
        v28 = v42 + 1;
        if (__OFADD__(v42, 1))
          goto LABEL_97;
        if (v28 >= v132)
          goto LABEL_90;
        v41 = *(_QWORD *)(v131 + 8 * v28);
        ++v42;
        if (v41)
          goto LABEL_41;
      }
    }
    v28 = v42;
    goto LABEL_41;
  }
LABEL_90:
  swift_bridgeObjectRelease(v23);
  swift_release();
  if (qword_10063D350 == -1)
    goto LABEL_91;
LABEL_98:
  swift_once(&qword_10063D350, sub_100099280);
LABEL_91:
  v112 = type metadata accessor for Logger(0);
  sub_100012DC4(v112, (uint64_t)qword_100642900);
  v113 = v146;
  swift_bridgeObjectRetain(v146);
  v115 = Logger.logObject.getter(v114);
  v116 = static os_log_type_t.default.getter(v115);
  if (os_log_type_enabled(v115, v116))
  {
    v117 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v117 = 134217984;
    v142 = v113[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v117 + 4, v117 + 12);
    swift_bridgeObjectRelease(v113);
    _os_log_impl((void *)&_mh_execute_header, v115, v116, "eligibleAccountsFuture: number of eligible accounts found: %ld", v117, 0xCu);
    swift_slowDealloc(v117, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v113);
  }
  v118 = swift_beginAccess(&v146, &v142, 0, 0);
  v119 = v146;
  v123(v146, 0, v118);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v119).n128_u64[0];
  return result;
}

void sub_10009C2E4(void (*a1)(void ***), uint64_t a2, void *a3, void *a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void **v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void **v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  uint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  void *v43;
  void **v44;
  id v45;
  id v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  NSString v52;
  void **v53;
  void ***v54;
  id v55;
  void (*v56)(void ***);
  void **aBlock;
  unint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  void (*v62)();
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v9 = swift_allocObject(&unk_1005EEAD0, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = qword_10063D350;
  swift_retain();
  v11 = a4;
  if (v10 != -1)
    swift_once(&qword_10063D350, sub_100099280);
  v12 = type metadata accessor for Logger(0);
  sub_100012DC4(v12, (uint64_t)qword_100642900);
  v13 = (void **)v11;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  v56 = a1;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v16 = 138543362;
    aBlock = v13;
    v17 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v59, v16 + 4, v16 + 12);
    *v54 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "migrationDeviceInfosFuture: Fetching ICDeviceListRequest for {calDAVAccountID: %{public}@}", v16, 0xCu);
    v18 = sub_10002A750(&qword_100642D60);
    swift_arrayDestroy(v54, 1, v18);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
  v19 = a3;
  v20 = objc_msgSend(v19, "identifier");
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    v25 = objc_msgSend(objc_allocWithZone((Class)ICDeviceListRequest), "initWithAccount:", v19);
    if (v25)
    {
      v26 = v25;
      v27 = swift_bridgeObjectRetain_n(v24, 2);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = v19;
        v31 = v22;
        v32 = (void **)swift_slowAlloc(32, -1);
        aBlock = v32;
        *(_DWORD *)v30 = 136446210;
        swift_bridgeObjectRetain(v24);
        v64 = sub_100027E40(v31, (unint64_t)v24, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease_n(v24, 3);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "migrationDeviceInfosFuture: Firing ICDeviceListRequest for {appleAccount: %{public}s}", v30, 0xCu);
        swift_arrayDestroy(v32, 1, &type metadata for Any[8]);
        v33 = v32;
        v22 = v31;
        v19 = v55;
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v30, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v24, 2);
      }
      v42 = swift_allocObject(&unk_1005EEAF8, 73, 7);
      *(_QWORD *)(v42 + 16) = v26;
      *(_QWORD *)(v42 + 24) = v22;
      *(_QWORD *)(v42 + 32) = v24;
      *(_QWORD *)(v42 + 40) = sub_10009DCD0;
      *(_QWORD *)(v42 + 48) = v9;
      *(_QWORD *)(v42 + 56) = v19;
      *(_QWORD *)(v42 + 64) = v13;
      *(_BYTE *)(v42 + 72) = a5 & 1;
      v62 = sub_10009DD48;
      v63 = v42;
      aBlock = _NSConcreteStackBlock;
      v59 = 1107296256;
      v60 = sub_100006378;
      v61 = &unk_1005EEB10;
      v43 = _Block_copy(&aBlock);
      v44 = v13;
      v45 = v19;
      v46 = v26;
      objc_msgSend(v46, "fetchWithCompletionBlock:", v43, swift_release().n128_f64[0]);
      _Block_release(v43);

    }
    else
    {
      swift_release();
      v34 = swift_bridgeObjectRetain_n(v24, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = v19;
        v39 = v22;
        v40 = (void **)swift_slowAlloc(32, -1);
        aBlock = v40;
        *(_DWORD *)v37 = 136446210;
        swift_bridgeObjectRetain(v24);
        v64 = sub_100027E40(v39, (unint64_t)v24, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease_n(v24, 3);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "migrationDeviceInfosFuture: Error creating ICDeviceListRequest for {appleAccount: %{public}s}", v37, 0xCu);
        swift_arrayDestroy(v40, 1, &type metadata for Any[8]);
        v41 = v40;
        v22 = v39;
        v19 = v38;
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v37, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v24, 2);
      }
      v47 = (void *)objc_opt_self(REMError);
      aBlock = 0;
      v59 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v48._object = (void *)0x80000001005634C0;
      v48._countAndFlagsBits = 0xD000000000000034;
      String.append(_:)(v48);
      v49._countAndFlagsBits = v22;
      v49._object = v24;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v24);
      v50._countAndFlagsBits = 46;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51 = v59;
      v52 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v51);
      v53 = (void **)objc_msgSend(v47, "internalErrorWithDebugDescription:", v52);

      aBlock = v53;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      LOBYTE(v62) = 1;
      v56(&aBlock);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10009C930(void *a1, uint64_t a2, void *a3, void (*a4)(_QWORD), uint64_t a5, void *a6, void *a7, char a8)
{
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  unint64_t v39;
  NSString v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  void (*v49)(_QWORD);
  os_log_type_t type[8];
  os_log_type_t typea;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v15 = objc_msgSend(a1, "devices");
  if (v15)
  {
    v16 = v15;
    v52 = a8;
    v17 = a2;
    v18 = sub_100005ED8(0, (unint64_t *)&qword_100642AE8, &off_1005E8FC0);
    *(_QWORD *)type = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v18);

    if (qword_10063D350 != -1)
      swift_once(&qword_10063D350, sub_100099280);
    v19 = type metadata accessor for Logger(0);
    sub_100012DC4(v19, (uint64_t)qword_100642900);
    swift_bridgeObjectRetain_n(a3, 2);
    v20 = a1;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v46 = a6;
      v47 = a7;
      v49 = a4;
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v55 = v24;
      *(_DWORD *)v23 = 136446466;
      swift_bridgeObjectRetain(a3);
      v54 = sub_100027E40(v17, (unint64_t)a3, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v23 + 12) = 2080;
      v25 = objc_msgSend(v20, "devices");
      if (v25)
      {
        v26 = v25;
        v27 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v18);

      }
      else
      {
        v27 = _swiftEmptyArrayStorage;
      }
      v42 = Array.description.getter(v27, v18);
      v44 = v43;
      swift_bridgeObjectRelease(v27);
      v54 = sub_100027E40(v42, v44, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v23 + 14, v23 + 22);

      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "migrationDeviceInfosFuture: Got devices {appleAccount: %{public}s, devices: %s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, &type metadata for Any[8]);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      a4 = v49;
      a6 = v46;
      a7 = v47;
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v55 = (uint64_t)a6;
    v56 = (unint64_t)a7;
    v57 = v52 & 1;
    v58 = *(_QWORD *)type;
    v59 = 0;
    v41 = a6;
    v45 = a7;
    a4(&v55);
    swift_bridgeObjectRelease(*(_QWORD *)type);

  }
  else
  {
    if (qword_10063D350 != -1)
      swift_once(&qword_10063D350, sub_100099280);
    v28 = type metadata accessor for Logger(0);
    sub_100012DC4(v28, (uint64_t)qword_100642900);
    swift_bridgeObjectRetain_n(a3, 2);
    v29 = a1;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      typea = v31;
      v32 = swift_slowAlloc(22, -1);
      v48 = (_QWORD *)swift_slowAlloc(8, -1);
      v53 = swift_slowAlloc(32, -1);
      v55 = v53;
      *(_DWORD *)v32 = 136446466;
      swift_bridgeObjectRetain(a3);
      v54 = sub_100027E40(a2, (unint64_t)a3, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v32 + 12) = 2112;
      v54 = (uint64_t)v29;
      v33 = a2;
      v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v32 + 14, v32 + 22);
      *v48 = v29;

      a2 = v33;
      _os_log_impl((void *)&_mh_execute_header, v30, typea, "migrationDeviceInfosFuture: Unable to get devices from iCloud. {appleAccount: %{public}s, request: %@}", (uint8_t *)v32, 0x16u);
      v35 = sub_10002A750(&qword_100642D60);
      swift_arrayDestroy(v48, 1, v35);
      swift_slowDealloc(v48, -1, -1);
      swift_arrayDestroy(v53, 1, &type metadata for Any[8]);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v36 = (void *)objc_opt_self(REMError);
    v55 = 0;
    v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v56);
    v55 = 0xD000000000000028;
    v56 = 0x8000000100563500;
    v37._countAndFlagsBits = a2;
    v37._object = a3;
    String.append(_:)(v37);
    v38._countAndFlagsBits = 46;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    v39 = v56;
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    v41 = objc_msgSend(v36, "internalErrorWithDebugDescription:", v40);

    v55 = (uint64_t)v41;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 1;
    a4(&v55);
  }

}

uint64_t sub_10009CF0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000381C8(v0 + 16);
  sub_10009DDA8(*(id *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));

  sub_100027F10((_QWORD *)(v0 + 64));
  v1 = v0 + OBJC_IVAR____TtC9Reminders20TTRWelcomeInteractor_getUpgradeInfoTimeout;
  v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10009CF8C()
{
  return type metadata accessor for TTRWelcomeInteractor(0);
}

uint64_t type metadata accessor for TTRWelcomeInteractor(uint64_t a1)
{
  uint64_t result;

  result = qword_100642948;
  if (!qword_100642948)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTRWelcomeInteractor);
  return result;
}

uint64_t sub_10009CFD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1005225E8;
  v4[1] = &unk_100522600;
  v4[2] = &unk_100522618;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = &unk_100522630;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id *destroy for TTRWelcomeUpgradeInfo(id *result)
{
  id *v1;

  if (*result)
  {
    v1 = result;

    swift_bridgeObjectRelease(v1[2]);
    swift_bridgeObjectRelease(v1[4]);
    swift_bridgeObjectRelease(v1[5]);
    return (id *)swift_bridgeObjectRelease(v1[6]);
  }
  return result;
}

uint64_t initializeWithCopy for TTRWelcomeUpgradeInfo(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  __int128 v10;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    v9 = v3;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for TTRWelcomeUpgradeInfo(uint64_t a1, __int128 *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      v6 = v5;

      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
      v9 = *((_QWORD *)a2 + 4);
      v10 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v10);
      v11 = *((_QWORD *)a2 + 5);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
      v13 = *((_QWORD *)a2 + 6);
      v14 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      sub_1000073A0(a1, &qword_100642A00);
      v21 = a2[1];
      v20 = a2[2];
      v22 = *a2;
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 16) = v21;
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)a1 = v22;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 16) = v15;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
    v16 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v16;
    v17 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 40) = v17;
    v18 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 48) = v18;
    v19 = v5;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v23 = *a2;
    v24 = a2[1];
    v25 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v24;
    *(_OWORD *)(a1 + 32) = v25;
    *(_OWORD *)a1 = v23;
  }
  return a1;
}

uint64_t assignWithTake for TTRWelcomeUpgradeInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(void **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    sub_1000073A0(a1, &qword_100642A00);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRWelcomeUpgradeInfo(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRWelcomeUpgradeInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRWelcomeUpgradeInfo()
{
  return &type metadata for TTRWelcomeUpgradeInfo;
}

uint64_t destroy for TTRWelcomeUpgradeInfo.EligibleAccountInfo(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for TTRWelcomeUpgradeInfo.EligibleAccountInfo(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = v3;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for TTRWelcomeUpgradeInfo.EligibleAccountInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t assignWithTake for TTRWelcomeUpgradeInfo.EligibleAccountInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRWelcomeUpgradeInfo.EligibleAccountInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRWelcomeUpgradeInfo.EligibleAccountInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRWelcomeUpgradeInfo.EligibleAccountInfo()
{
  return &type metadata for TTRWelcomeUpgradeInfo.EligibleAccountInfo;
}

uint64_t sub_10009D6F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009D704()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_10009D730(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10009B53C(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10009D73C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

double sub_10009D768@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100099F8C(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a2);
}

void sub_10009D770(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_10009A4A4(a1, *(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

uint64_t sub_10009D778()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10009D7A4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_10009A53C(a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_10009D7BC()
{
  unint64_t result;

  result = qword_100642AA0;
  if (!qword_100642AA0)
  {
    result = swift_getWitnessTable(&unk_100522774, &type metadata for TTRWelcomeInteractor.GetUpgradeInfoError);
    atomic_store(result, (unint64_t *)&qword_100642AA0);
  }
  return result;
}

uint64_t sub_10009D800(void *a1, void *a2)
{
  uint64_t v2;
  uint8_t *v3;
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  Class isa;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;

  v30 = 0;
  v5 = a1;
  v6 = objc_msgSend(a2, "fetchAccountWithObjectID:error:", v5, &v30);
  v7 = v30;
  if (v6)
  {
    v8 = v6;
    v30 = 0;
    v9 = v7;
    v10 = objc_msgSend(v8, "fetchListsWithError:", &v30);
    v11 = v30;
    if (v10)
    {
      v12 = v10;
      v13 = sub_100005ED8(0, (unint64_t *)&qword_100640498, REMList_ptr);
      v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
      v14 = v11;

      v30 = _swiftEmptyArrayStorage;
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0)
          v24 = v2;
        else
          v24 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v2);
        v15 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease(v2);
        if (v15)
          goto LABEL_5;
      }
      else
      {
        v15 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v15)
        {
LABEL_5:
          if (v15 < 1)
          {
            __break(1u);
            goto LABEL_35;
          }
          for (i = 0; i != v15; ++i)
          {
            if ((v2 & 0xC000000000000001) != 0)
              v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
            else
              v17 = *(id *)(v2 + 8 * i + 32);
            v18 = v17;
            if (objc_msgSend(v17, "isShared") && objc_msgSend(v18, "sharingStatus") == (id)1)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(1);
              isa = v30[2].isa;
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(isa);
              v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(isa, v18);
              specialized ContiguousArray._endMutation()(v20);
            }
            else
            {

            }
          }
          swift_bridgeObjectRelease(v2);
          v2 = (uint64_t)v30;
LABEL_24:
          if (qword_10063D350 != -1)
            swift_once(&qword_10063D350, sub_100099280);
          v25 = type metadata accessor for Logger(0);
          sub_100012DC4(v25, (uint64_t)qword_100642900);
          v26 = swift_retain_n(v2, 2);
          v11 = Logger.logObject.getter(v26);
          LOBYTE(v15) = static os_log_type_t.default.getter(v11);
          if (!os_log_type_enabled(v11, (os_log_type_t)v15))
          {

            swift_release_n(v2, 2);
            goto LABEL_32;
          }
          v3 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v3 = 134217984;
          if ((v2 & 0x8000000000000000) == 0 && (v2 & 0x4000000000000000) == 0)
          {
            v27 = *(NSObject **)(v2 + 16);
LABEL_30:
            swift_release();
            v30 = v27;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v3 + 4, v3 + 12);
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v15, "fetchSharedFromMeLists: Got %ld lists.", v3, 0xCu);
            swift_slowDealloc(v3, -1, -1);

LABEL_32:
            return v2;
          }
LABEL_35:
          swift_bridgeObjectRetain(v2);
          v27 = _CocoaArrayWrapper.endIndex.getter(v29);
          swift_release();
          goto LABEL_30;
        }
      }
      swift_bridgeObjectRelease(v2);
      v2 = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_24;
    }
    v2 = v30;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v23);
    v5 = v8;
  }
  else
  {
    v21 = v30;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v22);
  }

  return v2;
}

id sub_10009DBC0(id result, void *a2)
{
  id v2;

  if (result)
  {
    v2 = result;
    return a2;
  }
  return result;
}

uint64_t sub_10009DBEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009DC10(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10009DC48()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

double sub_10009DC7C()
{
  uint64_t v0;

  return sub_10009B6AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(_QWORD *, _QWORD, __n128))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10009DC8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10009DCC0(void (*a1)(void ***), uint64_t a2)
{
  uint64_t v2;

  sub_10009C2E4(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(_BYTE *)(v2 + 32));
}

uint64_t sub_10009DCD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  _BYTE v4[40];

  v2 = *(uint64_t (**)(_BYTE *))(v1 + 16);
  sub_10009DD60(a1, (uint64_t)v4);
  return v2(v4);
}

uint64_t sub_10009DD04()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 73, 7);
}

void sub_10009DD48()
{
  uint64_t v0;

  sub_10009C930(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void (**)(_QWORD))(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void **)(v0 + 64), *(_BYTE *)(v0 + 72));
}

uint64_t sub_10009DD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100642AF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10009DDA8(id a1)
{
  if ((char *)a1 - 1 >= (char *)3)

}

uint64_t initializeBufferWithCopyOfBuffer for TTRWelcomeInteractor.EligibleAccountResult(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for TTRIBoardColumnDraggingAnimationCellBackgroundView.Fill(id *a1)
{

}

uint64_t assignWithCopy for TTRWelcomeInteractor.EligibleAccountResult(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for TTRWelcomeInteractor.EligibleAccountResult(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRWelcomeInteractor.EligibleAccountResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRWelcomeInteractor.EligibleAccountResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRWelcomeInteractor.EligibleAccountResult()
{
  return &type metadata for TTRWelcomeInteractor.EligibleAccountResult;
}

uint64_t storeEnumTagSinglePayload for TTRWelcomeInteractor.GetUpgradeInfoError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10009DFA0 + 4 * byte_1005224E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009DFD4 + 4 * byte_1005224E0[v4]))();
}

uint64_t sub_10009DFD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009DFDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009DFE4);
  return result;
}

uint64_t sub_10009DFF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009DFF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10009DFFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009E004(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTRWelcomeInteractor.GetUpgradeInfoError()
{
  return &type metadata for TTRWelcomeInteractor.GetUpgradeInfoError;
}

ValueMetadata *type metadata accessor for TTRWelcomeInteractor.DefaultDeviceListRequestFactory()
{
  return &type metadata for TTRWelcomeInteractor.DefaultDeviceListRequestFactory;
}

id *destroy for TTRWelcomeUpgradeInfo.Eligibility(id *result)
{
  id *v1;

  if ((unint64_t)*result >= 0xFFFFFFFF)
  {
    v1 = result;

    swift_bridgeObjectRelease(v1[2]);
    swift_bridgeObjectRelease(v1[4]);
    swift_bridgeObjectRelease(v1[5]);
    return (id *)swift_bridgeObjectRelease(v1[6]);
  }
  return result;
}

uint64_t initializeWithCopy for TTRWelcomeUpgradeInfo.Eligibility(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  __int128 v10;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    v9 = v3;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
  }
  return a1;
}

uint64_t assignWithCopy for TTRWelcomeUpgradeInfo.Eligibility(uint64_t a1, __int128 *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      v15 = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 16) = v15;
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
      v16 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v16;
      v17 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 40) = v17;
      v18 = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 48) = v18;
      v19 = v5;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      return a1;
    }
LABEL_7:
    v20 = *a2;
    v21 = a2[1];
    v22 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v21;
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)a1 = v20;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  v9 = *((_QWORD *)a2 + 4);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *((_QWORD *)a2 + 5);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = *((_QWORD *)a2 + 6);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t assignWithTake for TTRWelcomeUpgradeInfo.Eligibility(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRWelcomeUpgradeInfo.Eligibility(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TTRWelcomeUpgradeInfo.Eligibility(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_10009E438(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    v2 = a2 ^ 0x80000000;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TTRWelcomeUpgradeInfo.Eligibility()
{
  return &type metadata for TTRWelcomeUpgradeInfo.Eligibility;
}

unint64_t sub_10009E478()
{
  unint64_t result;

  result = qword_100642AF8;
  if (!qword_100642AF8)
  {
    result = swift_getWitnessTable(&unk_10052274C, &type metadata for TTRWelcomeInteractor.GetUpgradeInfoError);
    atomic_store(result, (unint64_t *)&qword_100642AF8);
  }
  return result;
}

id TTRIAccountsListsAssembly.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIAccountsListsAssembly();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for TTRIAccountsListsAssembly()
{
  return objc_opt_self(_TtC9Reminders25TTRIAccountsListsAssembly);
}

id TTRIAccountsListsAssembly.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIAccountsListsAssembly();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10009E584(uint64_t a1, char *a2)
{
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  objc_super v18;

  ObjectType = (objc_class *)swift_getObjectType(a2, a2);
  v5 = &a2[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_searchSelection];
  v6 = type metadata accessor for TTRIAccountsListsSelection(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v8 = OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_viewModel;
  v9 = type metadata accessor for TTRAccountsListsViewModel(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = a2;
  *(_QWORD *)&a2[v8] = TTRAccountsListsViewModel.init()();
  v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_currentEditModeTransition] = 2;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_searchController] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_searchResultContainerViewController] = 0;
  v11 = &v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_pendingSearchTerm];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController____lazy_storage___addListButton] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController____lazy_storage___addReminderButton] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController____lazy_storage___addGroupButton] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController____lazy_storage___editButton] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController____lazy_storage___actionMenuButton] = 0;
  v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_needsWorkaround51600172] = 1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_accountSpinnerVisibleByAccountID] = &_swiftEmptyDictionarySingleton;
  *(_WORD *)&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_currentBarButtonItemConfiguration] = -258;
  v12 = OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_dropExceedsMaximumNumberOfPinnedListsTracker;
  v13 = type metadata accessor for TTRIAccountsListsDropExceedsMaximumNumberOfPinnedListsTracker();
  v14 = swift_allocObject(v13, 17, 7);
  *(_BYTE *)(v14 + 16) = 0;
  *(_QWORD *)&v10[v12] = v14;
  v7(&v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_lastAppliedSelection], 1, 1, v6);
  v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_isInExpandedSplitViewSnapshot] = 2;
  v15 = &v10[OBJC_IVAR____TtC9Reminders31TTRIAccountsListsViewController_presenter];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = &off_100601180;
  swift_unknownObjectRetain(a1);

  v18.receiver = v10;
  v18.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v18, "initWithNibName:bundle:", 0, 0);
  sub_10000ED98();

  swift_release(a1);
  return v16;
}

_QWORD *sub_10009E78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30[24];
  __int128 v31;
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[5];

  v34[3] = type metadata accessor for REMContactsProvider(0);
  v34[4] = &protocol witness table for REMContactsProvider;
  v34[0] = a2;
  v32 = type metadata accessor for TTRIAccountsListsRouter();
  v33 = &off_1005F6610;
  *(_QWORD *)&v31 = a6;
  a11[3] = 0;
  swift_unknownObjectWeakInit(a11 + 2, 0);
  a11[5] = 0;
  swift_unknownObjectWeakInit(a11 + 4, 0);
  v19 = type metadata accessor for TTRModuleState(0);
  swift_allocObject(v19, 80, 7);
  a11[6] = TTRModuleState.init(name:)(0x73746E756F636341, 0xED0000737473694CLL);
  a11[19] = 0;
  v20 = sub_10002A750(&qword_100642B28);
  a11[21] = swift_allocObject(v20, 16, 7);
  v21 = type metadata accessor for TTRAccountsListsViewModel(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  a11[23] = TTRAccountsListsViewModel.init()();
  v22 = (char *)a11 + OBJC_IVAR____TtC9Reminders26TTRIAccountsListsPresenter_dataViewModel;
  v23 = type metadata accessor for REMAccountsListDataView.Model(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *((_BYTE *)a11 + OBJC_IVAR____TtC9Reminders26TTRIAccountsListsPresenter_isEditing) = 0;
  v24 = (char *)a11 + OBJC_IVAR____TtC9Reminders26TTRIAccountsListsPresenter_postModelUpdateAction;
  *(_QWORD *)v24 = 0;
  v24[8] = 2;
  v25 = (char *)a11 + OBJC_IVAR____TtC9Reminders26TTRIAccountsListsPresenter_permissionRequest;
  *((_QWORD *)v25 + 10) = 0;
  *((_OWORD *)v25 + 3) = 0u;
  *((_OWORD *)v25 + 4) = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *((_OWORD *)v25 + 2) = 0u;
  *(_OWORD *)v25 = 0u;
  v26 = OBJC_IVAR____TtC9Reminders26TTRIAccountsListsPresenter_menuSystemNotifier;
  *(_QWORD *)((char *)a11 + v26) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TTRIMenuSystemNotifier()), "init");
  a11[8] = a1;
  a11[9] = &protocol witness table for TTRAccountsListsInteractor;
  a11[10] = a3;
  a11[11] = a4;
  a11[12] = a5;
  a11[13] = &protocol witness table for TTRListToCustomSmartListConverter;
  sub_10002E37C(&v31, (uint64_t)(a11 + 14));
  a11[22] = a7;
  a11[7] = a8;
  v27 = type metadata accessor for TTRAccountsListsPresenterCapability(0);
  swift_allocObject(v27, 80, 7);
  v28 = TTRAccountsListsPresenterCapability.init(contactsProvider:)(v34);
  a11[20] = v28;
  *((_BYTE *)a11 + OBJC_IVAR____TtC9Reminders26TTRIAccountsListsPresenter_tipKitProvider) = a9 & 1;
  *(_QWORD *)((char *)a11 + OBJC_IVAR____TtC9Reminders26TTRIAccountsListsPresenter_privacyChecker) = a10;
  swift_beginAccess(v28 + 16, v30, 1, 0);
  *(_QWORD *)(v28 + 24) = &off_100601158;
  swift_unknownObjectWeakAssign(v28 + 16, a11);
  return a11;
}

uint64_t sub_10009EA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100642B30);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100642B30);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_10009EAA0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  swift_unknownObjectWeakInit(v2 + 2, 0);
  v2[4] = 0;
  swift_unknownObjectWeakInit(v2 + 3, 0);
  swift_unknownObjectWeakInit(v2 + 7, 0);
  swift_unknownObjectWeakInit(v2 + 8, 0);
  v2[9] = 0;
  v5 = type metadata accessor for TTRIActivityAlertRouterCapability();
  v6 = swift_allocObject(v5, 24, 7);
  *(_QWORD *)(v6 + 16) = 0;
  v2[10] = v6;
  v2[5] = a1;
  v2[6] = a2;
  return v2;
}

uint64_t sub_10009EB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[10];

  v8[2] = a7;
  v8[3] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v8[7] = a4;
  v8[8] = a5;
  return firstly<A>(closure:)(sub_1000A298C, v8, a7);
}

id sub_10009EB60(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[4];
  id v34[10];
  __int16 v35;
  uint64_t v36;
  uint64_t *v37;
  _OWORD *v38;
  uint64_t v39;
  __int16 v40;

  v11 = objc_msgSend(a1, "store");
  v12 = objc_msgSend(a1, "objectID");
  v13 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "fetchOptionsIncludingDueDateDeltaAlerts");
  v34[0] = 0;
  v14 = objc_msgSend(v11, "fetchReminderWithObjectID:fetchOptions:error:", v12, v13, v34);

  v15 = v34[0];
  if (v14)
  {
    v16 = v34[0];
    v17 = objc_msgSend(v14, "store");
    v18 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v17);

    v19 = objc_msgSend(v18, "updateReminder:", v14);
    v20 = (void *)TTRReminderDetailSubject.init(reminderChangeItem:)(v19);
    v22 = v21;
    v30 = 1;
    v31 = 0u;
    v32 = 0u;
    memset(v33, 0, sizeof(v33));
    v23 = v19;
    v34[2] = a7;
    v34[3] = v20;
    v34[4] = v22;
    v34[5] = a2;
    v34[6] = a3;
    v34[7] = a4;
    v34[8] = a5;
    v34[9] = 0;
    v35 = 258;
    v36 = 1;
    v37 = &v30;
    v38 = v33;
    v39 = a6;
    v40 = 256;
    v24 = (id)firstly<A>(closure:)(sub_1000A26F8, v34, a7);

    swift_release();
  }
  else
  {
    v24 = v34[0];
    _convertNSErrorToError(_:)(v15);

    swift_willThrow(v25);
  }
  return v24;
}

uint64_t sub_10009EDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor, v6);
  v4[7] = v7;
  v4[8] = v8;
  return swift_task_switch(sub_10009EE18, v7, v8);
}

uint64_t sub_10009EE18()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  void *v4;
  NSString v5;
  uint64_t v6;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 16);
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to UIViewController.presentAlert<A>(with:animated:)[1]);
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = sub_10009EF0C;
    return UIViewController.presentAlert<A>(with:animated:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 1, *(_QWORD *)(v0 + 32));
  }
  else
  {
    swift_release();
    v4 = (void *)objc_opt_self(REMError);
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "internalErrorWithDebugDescription:", v5);

    swift_willThrow(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009EF0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10009EFAC;
  else
    v4 = sub_10009EF6C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_10009EF6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009EFAC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 48));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10009F094(void *a1, uint64_t a2, char a3)
{
  return objc_msgSend(a1, "presentViewController:animated:completion:", a2, a3 & 1, 0);
}

void sub_10009F0B0(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  double v13;
  void *v14;
  _QWORD v15[6];

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + 56);
  if (Strong)
  {
    v6 = Strong;
    v7 = objc_msgSend(Strong, "presentingViewController");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "presentedViewController");
      if (v9)
      {
        v10 = v9;
        sub_100005ED8(0, (unint64_t *)&qword_1006415E8, UIViewController_ptr);
        v11 = v6;
        v12 = v10;
        LOBYTE(v10) = static NSObject.== infix(_:_:)(v12, v11);

        if ((v10 & 1) != 0)
        {
          if (a1)
          {
            v15[4] = a1;
            v15[5] = a2;
            v15[0] = _NSConcreteStackBlock;
            v15[1] = 1107296256;
            v15[2] = sub_100006378;
            v15[3] = &unk_1005EEFC8;
            v14 = _Block_copy(v15);
            swift_retain();
            *(_QWORD *)&v13 = swift_release().n128_u64[0];
          }
          else
          {
            v14 = 0;
          }
          objc_msgSend(v8, "dismissViewControllerAnimated:completion:", 1, v14, v13);
          _Block_release(v14);

          return;
        }
      }

    }
    else
    {
      v8 = v6;
    }

  }
  if (a1)
    a1();
}

void sub_10009F228(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  _BYTE v7[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  if (swift_weakLoadStrong(v5))
  {
    v6 = objc_msgSend((id)objc_opt_self(UIPrintInteractionController), "sharedPrintController");
    objc_msgSend(v6, "dismissAnimated:", 0);

    sub_10009F2DC(a2, a3);
    swift_release();
  }
  else if (a2)
  {
    ((void (*)(void))a2)();
  }
}

void sub_10009F2DC(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v6;
  id v7;
  id v8;
  double v9;
  _QWORD v10[6];

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong
    && (v6 = Strong,
        v7 = objc_msgSend(Strong, "navigationController"),
        v6,
        v7)
    || (v7 = (id)swift_unknownObjectWeakLoadStrong(v2 + 16)) != 0)
  {
    v8 = objc_msgSend(v7, "presentedViewController");

    if (v8)
    {
      if (a1)
      {
        v10[4] = a1;
        v10[5] = a2;
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 1107296256;
        v10[2] = sub_100006378;
        v10[3] = &unk_1005EEFF0;
        a1 = _Block_copy(v10);
        swift_retain();
        *(_QWORD *)&v9 = swift_release().n128_u64[0];
      }
      objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 1, a1, v9);
      _Block_release(a1);

      return;
    }

  }
  if (a1)
    ((void (*)(void))a1)();
}

void sub_10009F408(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *Strong;
  void *v17;
  id v18;
  unsigned int *v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  void (*v30)(void (*)(void *, void *, char), uint64_t, uint64_t, uint64_t);
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[8];
  _OWORD v43[2];
  _OWORD v44[2];
  _OWORD v45[2];
  _OWORD v46[2];
  _BYTE v47[72];

  v40 = a6;
  v41 = a7;
  v38 = a1;
  v39 = a4;
  sub_1000A25CC(a5, (uint64_t)v42);
  v36 = v42[1];
  v37 = (id)v42[0];
  v34 = v42[3];
  v35 = v42[2];
  v32 = v42[5];
  v33 = v42[4];
  v11 = type metadata accessor for REMListPickerDataView.PickerMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v7 + 16;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v15);
  if (Strong
    && (v17 = Strong,
        v18 = objc_msgSend(Strong, "navigationController"),
        v17,
        v18)
    || (v18 = (id)swift_unknownObjectWeakLoadStrong(v15)) != 0)
  {
    v19 = (unsigned int *)&enum case for REMListPickerDataView.PickerMode.cloudKitOnlyAccounts(_:);
    if ((a2 & 1) == 0)
      v19 = (unsigned int *)&enum case for REMListPickerDataView.PickerMode.allAccounts(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *v19, v11);
    sub_1000A25CC(a5, (uint64_t)v47);
    v20 = ~v47[40];
    type metadata accessor for TTRIReminderListPickerAssembly(0);
    if ((v20 & 0xFE) != 0)
      v21 = 2;
    else
      v21 = 1;
    v22 = (void *)static TTRIReminderListPickerAssembly.createViewController(mode:action:store:selectedListID:showingInstructionsForMovingReminders:modalPresentationStyle:)(v14, a3 & 1, 1, v39, 0, v38, v21);
    v24 = v23;
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    ObjectType = swift_getObjectType(v24, v27);
    v29 = swift_allocObject(&unk_1005EEEE8, 32, 7);
    *(_QWORD *)(v29 + 16) = v40;
    *(_QWORD *)(v29 + 24) = v41;
    v30 = *(void (**)(void (*)(void *, void *, char), uint64_t, uint64_t, uint64_t))(v26 + 16);
    swift_retain();
    v30(sub_1000A2638, v29, ObjectType, v26);
    sub_1000A25CC(a5, (uint64_t)v43);
    if ((~BYTE8(v44[0]) & 0xFE) != 0)
    {
      v45[0] = v43[0];
      v45[1] = v43[1];
      v46[0] = v44[0];
      *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)v44 + 9);
      sub_1000A2644(v37, v36, v35, v34, v33, v32);
      if ((UIViewController.canPresentDCIDrillinPopover(withAnchor:)(a5) & 1) != 0)
      {
        UIViewController.setupForAdaptivePopoverPresentation(anchoredAt:)(v45);
        objc_msgSend(v18, "presentViewController:animated:completion:", v22, 1, 0);
        swift_unknownObjectRelease(v24);

        sub_1000A2668(a5);
        return;
      }
      sub_1000A2668(a5);
    }
    v31 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v22);
    objc_msgSend(v18, "presentViewController:animated:completion:", v31, 1, 0);

    swift_unknownObjectRelease(v24);
  }
}

void sub_10009F6E0(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v13[6];

  v10 = swift_allocObject(&unk_1005EEF10, 41, 7);
  *(_QWORD *)(v10 + 16) = a4;
  *(_QWORD *)(v10 + 24) = a5;
  *(_QWORD *)(v10 + 32) = a2;
  *(_BYTE *)(v10 + 40) = a3 & 1;
  v13[4] = sub_1000A26CC;
  v13[5] = v10;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100006378;
  v13[3] = &unk_1005EEF28;
  v11 = _Block_copy(v13);
  v12 = a2;
  swift_retain();
  objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, v11, swift_release().n128_f64[0]);
  _Block_release(v11);
}

void sub_10009F7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *Strong;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Class isa;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  objc_super v35;
  _QWORD *v36;

  v5 = type metadata accessor for TTRIRemindersListRouterShareSheetItem(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = v2 + 16;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v12);
  if (Strong
    && (v14 = Strong,
        v15 = objc_msgSend(Strong, "navigationController"),
        v14,
        v15)
    || (v15 = (id)swift_unknownObjectWeakLoadStrong(v12)) != 0)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = _swiftEmptyArrayStorage;
    if (v16)
    {
      v33 = v15;
      v34 = a2;
      v36 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v16);
      v18 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v19 = *(_QWORD *)(v6 + 72);
      do
      {
        sub_1000A2A24(v18, (uint64_t)v11);
        sub_1000A2A24((uint64_t)v11, (uint64_t)v9);
        v20 = (objc_class *)type metadata accessor for TTRIRemindersListRouter.ActivityItemSource(0);
        v21 = objc_allocWithZone(v20);
        sub_1000A2A24((uint64_t)v9, (uint64_t)v21+ OBJC_IVAR____TtCC9Reminders23TTRIRemindersListRouterP33_6FFDCD23D13881F9EFBB4406934282BE18ActivityItemSource_item);
        v35.receiver = v21;
        v35.super_class = v20;
        v22 = objc_msgSendSuper2(&v35, "init");
        sub_1000A2378((uint64_t)v9);
        v23 = sub_1000A2378((uint64_t)v11);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        v24 = v36[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
        v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
        specialized ContiguousArray._endMutation()(v25);
        v18 += v19;
        --v16;
      }
      while (v16);
      v17 = v36;
      v15 = v33;
      a2 = v34;
    }
    v26 = sub_1002DEA38((uint64_t)v17);
    swift_bridgeObjectRelease(v17);
    v27 = objc_allocWithZone((Class)UIActivityViewController);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v29 = objc_msgSend(v27, "initWithActivityItems:applicationActivities:", isa, 0, swift_bridgeObjectRelease(v26).n128_f64[0]);

    v30 = objc_msgSend(v29, "presentationController");
    if (v30)
    {
      v31 = v30;
      objc_msgSend(v30, "setSourceView:", a2);

    }
    objc_msgSend(v15, "presentViewController:animated:completion:", v29, 1, 0);

  }
}

void sub_10009FA38(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *Strong;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  Class isa;
  char v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  unsigned __int8 v30;
  _QWORD aBlock[6];
  _BYTE v32[24];
  _QWORD v33[5];
  uint64_t v34;
  _QWORD v35[5];
  int v36;
  _QWORD v37[5];
  char v38;

  sub_1000A25CC(a2, (uint64_t)v33);
  v5 = (void *)v33[0];
  v6 = v33[1];
  v8 = v33[2];
  v7 = v33[3];
  v9 = v33[4];
  v30 = v34;
  if (objc_msgSend(a1, "canBeShared"))
  {
    if ((v10 = v2 + 16, (Strong = (void *)swift_unknownObjectWeakLoadStrong(v10)) != 0)
      && (v12 = Strong,
          v13 = objc_msgSend(Strong, "navigationController"),
          v12,
          v13)
      || (v13 = (id)swift_unknownObjectWeakLoadStrong(v10)) != 0)
    {
      v29 = v13;
      _s9Reminders23TTRListSharingUtilitiesC26addCKShareObserverIfNeeded3forySo7REMListC_tFZ_0(a1);
      v28 = _s9Reminders23TTRListSharingUtilitiesC26activityItemsConfiguration3forSo010UIActivityfG0CSo7REMListC_tFZ_0(a1);
      v14 = objc_msgSend(objc_allocWithZone((Class)UIActivityViewController), "initWithActivityItemsConfiguration:", v28);
      if (qword_10063D380 != -1)
        swift_once(&qword_10063D380, sub_1000C0750);
      swift_beginAccess(&static TTRListSharingUtilities.excludedShareActivityTypes, v32, 0, 0);
      v15 = static TTRListSharingUtilities.excludedShareActivityTypes;
      type metadata accessor for ActivityType(0);
      swift_bridgeObjectRetain(v15);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, "setExcludedActivityTypes:", isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

      sub_1000A25CC(a2, (uint64_t)v35);
      v17 = v36;
      if ((~(_BYTE)v36 & 0xFE) != 0)
      {
        v26 = v35[1];
        v27 = v35[0];
        v24 = v35[3];
        v25 = v35[2];
        v23 = v35[4];
        sub_1000A2644(v5, v6, v8, v7, v9, v30);
        v18 = objc_msgSend(v14, "popoverPresentationController");
        if (v18)
        {
          v19 = v18;
          v37[0] = v27;
          v37[1] = v26;
          v37[2] = v25;
          v37[3] = v24;
          v37[4] = v23;
          v38 = v17;
          sub_1000A2644(v5, v6, v8, v7, v9, v30);
          UIPopoverPresentationController.setPopoverAnchorSource(_:)(v37);

          sub_1000A2668(a2);
          sub_1000A2668(a2);

        }
        else
        {

          sub_1000A2668(a2);
        }
      }
      else
      {

      }
      v20 = swift_allocObject(&unk_1005EF028, 24, 7);
      *(_QWORD *)(v20 + 16) = a1;
      aBlock[4] = sub_1000A2A1C;
      aBlock[5] = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001E4A24;
      aBlock[3] = &unk_1005EF040;
      v21 = _Block_copy(aBlock);
      v22 = a1;
      objc_msgSend(v14, "setCompletionWithItemsHandler:", v21, swift_release().n128_f64[0]);
      _Block_release(v21);
      objc_msgSend(v29, "presentViewController:animated:completion:", v14, 1, 0);

    }
  }
}

void sub_10009FD74(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  id v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *oslog;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  if ((a2 & 1) == 0)
  {
    _s9Reminders23TTRListSharingUtilitiesC11cancelShare3forySo7REMListC_tFZ_0(a5);
    if (a4)
    {
      swift_errorRetain(a4);
      if (qword_10063D358 != -1)
        swift_once(&qword_10063D358, sub_10009EA10);
      v7 = type metadata accessor for Logger(0);
      sub_100012DC4(v7, (uint64_t)qword_100642B30);
      swift_errorRetain(a4);
      swift_errorRetain(a4);
      v8 = a5;
      oslog = Logger.logObject.getter(v8);
      v9 = static os_log_type_t.error.getter(oslog);
      if (os_log_type_enabled(oslog, v9))
      {
        v10 = swift_slowAlloc(22, -1);
        v11 = (_QWORD *)swift_slowAlloc(8, -1);
        v12 = swift_slowAlloc(32, -1);
        v22 = v12;
        *(_DWORD *)v10 = 138412546;
        v13 = objc_msgSend(v8, "objectID");
        v21 = (uint64_t)v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 4, v10 + 12);
        *v11 = v13;

        *(_WORD *)(v10 + 12) = 2080;
        swift_getErrorValue(a4, v20, v19);
        v14 = Error.rem_errorDescription.getter(v19[1], v19[2]);
        v16 = v15;
        v21 = sub_100027E40(v14, v15, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 14, v10 + 22);
        swift_bridgeObjectRelease(v16);
        swift_errorRelease(a4);
        swift_errorRelease(a4);
        _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Share sheet failed, canceling the share request. {list.objectID: %@, error: %s}", (uint8_t *)v10, 0x16u);
        v17 = sub_10002A750(&qword_100642D60);
        swift_arrayDestroy(v11, 1, v17);
        swift_slowDealloc(v11, -1, -1);
        swift_arrayDestroy(v12, 1, &type metadata for Any[8]);
        swift_slowDealloc(v12, -1, -1);
        swift_slowDealloc(v10, -1, -1);

        swift_errorRelease(a4);
      }
      else
      {
        swift_errorRelease(a4);

        swift_errorRelease(a4);
        swift_errorRelease(a4);

      }
    }
  }
}

void sub_1000A0014(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *Strong;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (Strong
    && (v8 = Strong,
        v9 = objc_msgSend(Strong, "navigationController"),
        v8,
        v9)
    || (v9 = (id)swift_unknownObjectWeakLoadStrong(v3 + 16)) != 0)
  {
    v10 = sub_1004037E4(1, a1, a2, a3);
    v12 = v11;
    v13 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v10);
    objc_msgSend(v13, "setModalPresentationStyle:", 2);
    swift_unknownObjectRelease(v12);

    objc_msgSend(v9, "presentViewController:animated:completion:", v13, 1, 0);
  }
}

double sub_1000A0140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  id v26[2];

  v2 = v1;
  v4 = sub_10002A750(&qword_1006547E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100642D80);
  v25 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100119A54(a1);
  v12 = v11;
  v26[1] = (id)sub_1001FABF0();
  v26[0] = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v13 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
  v14 = sub_10002A750(&qword_100642D88);
  v15 = sub_100005ED8(0, (unint64_t *)&qword_100642D90, NSRunLoop_ptr);
  v16 = sub_100023FEC(&qword_100642D98, &qword_100642D88, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v17 = sub_1000A2B9C();
  Publisher.receive<A>(on:options:)(v26, v6, v14, v15, v16, v17);
  sub_1000A2BF4((uint64_t)v6);

  swift_release();
  v18 = swift_allocObject(&unk_1005EF078, 24, 7);
  swift_weakInit(v18 + 16, v2);
  v19 = swift_allocObject(&unk_1005EF0A0, 32, 7);
  *(_QWORD *)(v19 + 16) = v10;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = sub_100023FEC(&qword_100642DA8, &qword_100642D80, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v21 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1000A03BC, 0, sub_1000A2C84, v19, v7, v20);
  swift_release();
  swift_unknownObjectRelease(v12);
  v22 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v25 + 8))(v9, v7, v22);
  *(_QWORD *)(v2 + 72) = v21;
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000A03BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  _QWORD v12[3];
  _BYTE v13[8];
  uint64_t v14;

  v1 = *a1;
  if (*a1)
  {
    swift_errorRetain(*a1);
    if (qword_10063D358 != -1)
      swift_once(&qword_10063D358, sub_10009EA10);
    v2 = type metadata accessor for Logger(0);
    sub_100012DC4(v2, (uint64_t)qword_100642B30);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v14 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_getErrorValue(v1, v13, v12);
      v7 = Error.rem_errorDescription.getter(v12[1], v12[2]);
      v9 = v8;
      v11 = sub_100027E40(v7, v8, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease(v9);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to show print panel: %s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, &type metadata for Any[8]);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(v1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
  }
}

uint64_t sub_1000A05B0(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t Strong;
  char *v6;
  void *v7;
  id v8;
  id v9;
  double v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  __int128 v17[2];
  char v18[24];
  void **aBlock;
  __int128 v20;
  void *v21;
  uint64_t (*v22)(uint64_t, char, uint64_t);
  uint64_t v23;
  _QWORD v24[5];

  v3 = a3 + 16;
  v4 = *a1;
  sub_100010634((uint64_t)(a1 + 1), (uint64_t)&v20);
  sub_10002E37C(&v20, (uint64_t)v24);
  swift_beginAccess(v3, v18, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  v6 = (char *)Strong;
  if (Strong)
  {
    v7 = (void *)swift_unknownObjectWeakLoadStrong(Strong + 16);
    v8 = v4;
    if (v7 && (v9 = objc_msgSend(v7, "navigationController"), v7, v9))
    {
      *(_QWORD *)&v10 = swift_release().n128_u64[0];
    }
    else
    {
      v9 = (id)swift_unknownObjectWeakLoadStrong(v6 + 16);
      *(_QWORD *)&v10 = swift_release().n128_u64[0];
      if (!v9)
      {
        v6 = 0;
        goto LABEL_9;
      }
    }
    v12 = objc_msgSend(v9, "viewIfLoaded", v10);

    v13 = objc_msgSend(v12, "window");
    v6 = (char *)objc_msgSend(v13, "windowScene");

  }
  else
  {
    v11 = v4;
  }
LABEL_9:
  sub_100010634((uint64_t)v24, (uint64_t)v17);
  v14 = swift_allocObject(&unk_1005EF0C8, 56, 7);
  sub_10002E37C(v17, v14 + 16);
  v22 = sub_1000A2CB0;
  v23 = v14;
  aBlock = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 1107296256;
  *((_QWORD *)&v20 + 1) = sub_1000A0A08;
  v21 = &unk_1005EF0E0;
  v15 = _Block_copy(&aBlock);
  objc_msgSend(v4, "presentAnimated:hostingScene:completionHandler:", 1, v6, v15, swift_release().n128_f64[0]);
  _Block_release(v15);

  return sub_100027F10(v24);
}

uint64_t sub_1000A07A8(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;

  if (qword_10063D358 != -1)
    swift_once(&qword_10063D358, sub_10009EA10);
  v7 = type metadata accessor for Logger(0);
  sub_100012DC4(v7, (uint64_t)qword_100642B30);
  swift_errorRetain(a3);
  v8 = swift_errorRetain(a3);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v24 = v12;
    *(_DWORD *)v11 = 136315394;
    if ((a2 & 1) != 0)
      v13 = 1702195828;
    else
      v13 = 0x65736C6166;
    if ((a2 & 1) != 0)
      v14 = 0xE400000000000000;
    else
      v14 = 0xE500000000000000;
    v23 = sub_100027E40(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v11 + 12) = 2080;
    if (a3)
    {
      swift_getErrorValue(a3, v22, v21);
      v15 = Error.rem_errorDescription.getter(v21[1], v21[2]);
      v17 = v16;
    }
    else
    {
      v17 = 0xE300000000000000;
      v15 = 7104878;
    }
    v23 = sub_100027E40(v15, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "printInteractionController completion {isCompleted: %s, error: %s}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, &type metadata for Any[8]);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }

  v18 = a4[3];
  v19 = a4[4];
  sub_10001413C(a4, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
}

void sub_1000A0A08(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, uint64_t, void *);
  id v9;
  id v10;

  v8 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v10 = a2;
  v9 = a4;
  v8(v10, a3, a4);
  swift_release(v7);

}

uint64_t sub_1000A0A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 48) = v10;
  *(_BYTE *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  return swift_task_switch(sub_1000A0AB0, 0, 0);
}

uint64_t sub_1000A0AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  int *v7;
  _QWORD *v8;
  int *v10;

  v3 = *(_BYTE *)(v2 + 64);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 + 48);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 40), a2);
  v7 = *(int **)(v5 + 16);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v2 + 56) = v8;
  *v8 = v2;
  v8[1] = sub_1000A0B40;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v10)(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v3 & 1, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), ObjectType, v5);
}

uint64_t sub_1000A0B40()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1000A0B88(void *a1, char a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  void *Strong;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;

  v13 = v6 + 16;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v13);
  if (Strong
    && (v15 = Strong,
        v16 = objc_msgSend(Strong, "navigationController"),
        v15,
        v16)
    || (v16 = (id)swift_unknownObjectWeakLoadStrong(v13)) != 0)
  {
    v17 = objc_msgSend(a1, "sectionContext");

    if (v17)
    {
      v18 = sub_100469D50(a1, a2 & 1, a3, a4, a5, a6);
      v21 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v18);
      objc_msgSend(v21, "setModalPresentationStyle:", 2);
      swift_release();

      v19 = swift_unknownObjectWeakLoadStrong(v13);
      if (v19)
      {
        v20 = (void *)v19;
        UIViewController.endFirstResponderEditing()();

      }
      objc_msgSend(v16, "presentViewController:animated:completion:", v21, 1, 0);

    }
    else
    {

    }
  }
}

void sub_1000A0D18(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  void *Strong;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;

  v7 = v3 + 16;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v7);
  if (Strong
    && (v9 = Strong,
        v10 = objc_msgSend(Strong, "navigationController"),
        v9,
        v10)
    || (v10 = (id)swift_unknownObjectWeakLoadStrong(v7)) != 0)
  {
    v11 = swift_unknownObjectWeakLoadStrong(v7);
    if (v11)
    {
      v12 = (void *)v11;
      UIViewController.endFirstResponderEditing()();

    }
    v13 = sub_1002A1370(a1, a2, a3);
    objc_msgSend(v10, "presentViewController:animated:completion:", v13, 1, 0);

  }
}

uint64_t sub_1000A0E00(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *Strong;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  UIPopoverArrowDirection v47;
  char *v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  Swift::String v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  NSString v91;
  uint64_t v92;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120[10];
  _QWORD v121[8];
  _QWORD v122[8];
  _OWORD v123[2];
  _BYTE v124[25];
  __int128 v125;
  __int128 v126;
  _OWORD v127[3];
  id v128;

  LODWORD(v109) = a8;
  v107 = a6;
  v108 = a7;
  v105 = a2;
  v106 = a5;
  v114 = a4;
  v19 = type metadata accessor for REMNavigationSpecifier.ReminderPathSpecifier.DetailSection(0);
  v111 = *(_QWORD *)(v19 - 8);
  v112 = v19;
  __chkstk_darwin(v19);
  v95 = v20;
  v96 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10002A750(&qword_100642D18);
  v104 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v103 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for REMNavigationSpecifier(0);
  v116 = *(_QWORD *)(v27 - 8);
  v117 = v27;
  __chkstk_darwin(v27);
  v115 = (char *)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = a3;
  v29 = a3 + 16;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v29);
  v128 = a1;
  if (Strong
    && (v31 = objc_msgSend(Strong, "navigationController"), Strong,
                                                                                                v31)
    || (v31 = (id)swift_unknownObjectWeakLoadStrong(v29)) != 0)
  {
    v101 = v21;
    v102 = v16;
    v113 = v31;
    v98 = a12;
    v99 = a11;
    v100 = a10;
    v97 = a9;
    v32 = sub_10002A750((uint64_t *)&unk_100642D20);
    v33 = v115;
    v34 = &v115[*(int *)(v32 + 48)];
    v35 = v128;
    *(_QWORD *)v33 = objc_msgSend(v128, "objectID");
    v94 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
    v94(v34, v114, v112);
    v36 = enum case for REMNavigationSpecifier.ReminderPathSpecifier.showDetail(_:);
    v37 = type metadata accessor for REMNavigationSpecifier.ReminderPathSpecifier(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v34, v36, v37);
    (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v33, enum case for REMNavigationSpecifier.reminder(_:), v117);
    if (qword_10063D358 != -1)
      swift_once(&qword_10063D358, sub_10009EA10);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_100012DC4(v38, (uint64_t)qword_100642B30);
    REMNavigationSpecifier.url.getter(v39);
    sub_1002EB730(0x7265646E696D6552, 0xEE007473694C2073, 0x7265646E696D6552, 0xEF6C696174654420, (uint64_t)v26);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    type metadata accessor for TTRIReminderDetailAssembly(0);
    TTRReminderDetailPendingMoveInteractorCapability.PendingMoveContext.init(persistLastSelectedListID:customSmartListToMatch:)(v120, 0, 0, 0);
    v40 = (void *)static TTRIReminderDetailAssembly.createViewController(subject:delegate:style:savesOnCommit:itemCount:pendingMoveContext:ttrSectionLite:manualOrdering:)(v35, v105, v106, v107, v108, v109, v97 & 1, v100, v120, v99, v98);
    v42 = v41;
    v44 = v43;
    sub_1000A2754(v120);
    v45 = objc_allocWithZone((Class)UINavigationController);
    v109 = v40;
    v46 = (char *)objc_msgSend(v45, "initWithRootViewController:", v40);
    sub_10001413C(a13, a13[3]);
    sub_1003E3A18(v121);
    sub_1000A25CC((uint64_t)v121, (uint64_t)v123);
    if ((~v124[8] & 0xFE) != 0)
    {
      v125 = v123[0];
      v126 = v123[1];
      v127[0] = *(_OWORD *)v124;
      *(_OWORD *)((char *)v127 + 9) = *(_OWORD *)&v124[9];
      v47 = UIPopoverArrowDirection.addingRTLFallback()();
      TTRIPopoverAnchor.withPermittedArrowDirectionsIfNil(_:)(v122, v47);
      UIViewController.setupForAdaptivePopoverPresentation(anchoredAt:)(v122);
      sub_1000A2958((uint64_t)v122);
    }
    v48 = v110;
    swift_unknownObjectWeakAssign(v110 + 56, v46);
    *((_QWORD *)v48 + 4) = v44;
    swift_unknownObjectWeakAssign(v48 + 24, v42);
    v49 = objc_msgSend(v46, "presentationController");
    if (v49)
    {
      v51 = v49;
      ObjectType = swift_getObjectType(v42, v50);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 88))(v51, a14 & 1, ObjectType, v44);

    }
    v108 = v42;
    if ((a15 & 1) != 0)
    {
      v118 = UIViewController.futureForPresenting(_:animated:)(v46, 1);
      v53 = sub_10002A750((uint64_t *)&unk_100649C60);
      v54 = sub_10002A750((uint64_t *)&unk_100642D30);
      v55 = sub_100023FEC((unint64_t *)&unk_100649C70, (uint64_t *)&unk_100642D30, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      v56 = v103;
      Publisher<>.setFailureType<A>(to:)(v53, v54, v53, v55, &protocol self-conformance witness table for Error);
      swift_release();
      v57 = sub_100023FEC((unint64_t *)&unk_100642D40, &qword_100642D18, (uint64_t)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
      v58 = v101;
      v107 = Publisher<>.legacyPromise()(v101, v57);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v56, v58);
      v110 = v46;
      v59 = v96;
      v60 = v112;
      v94(v96, v114, v112);
      v61 = v111;
      v62 = *(unsigned __int8 *)(v111 + 80);
      v63 = (v62 + 40) & ~v62;
      v64 = (char *)swift_allocObject(&unk_1005EEF88, v63 + v95, v62 | 7);
      v65 = v108;
      *((_QWORD *)v64 + 2) = a16;
      *((_QWORD *)v64 + 3) = v65;
      *((_QWORD *)v64 + 4) = v44;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(&v64[v63], v59, v60);
      v66 = (_QWORD *)swift_allocObject(&unk_1005EEFB0, 40, 7);
      v66[2] = a16;
      v66[3] = sub_1000A28C4;
      v66[4] = v64;
      swift_unknownObjectRetain(v65);
      v68 = (void *)zalgo.getter(v67);
      v69 = dispatch thunk of Promise.then<A>(on:closure:)(v68, sub_1000A2CD4, v66, a16);
      swift_release();
      swift_release();

      sub_1000A2668((uint64_t)v121);
      swift_unknownObjectRelease(v65);
    }
    else
    {
      v70 = swift_getObjectType(v42, v50);
      v71 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 96))(v114, 0, a16, a16, v70, v44);
      v118 = UIViewController.futureForPresenting(_:animated:)(v46, 1);
      v72 = sub_10002A750((uint64_t *)&unk_100649C60);
      v73 = sub_10002A750((uint64_t *)&unk_100642D30);
      v74 = sub_100023FEC((unint64_t *)&unk_100649C70, (uint64_t *)&unk_100642D30, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      v75 = v103;
      Publisher<>.setFailureType<A>(to:)(v72, v73, v72, v74, &protocol self-conformance witness table for Error);
      swift_release();
      v76 = sub_100023FEC((unint64_t *)&unk_100642D40, &qword_100642D18, (uint64_t)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
      v77 = v101;
      Publisher<>.legacyPromise()(v101, v76);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v75, v77);
      v78 = (_QWORD *)swift_allocObject(&unk_1005EEF60, 40, 7);
      v78[2] = a16;
      v78[3] = sub_1000A2810;
      v78[4] = v71;
      v79 = swift_retain();
      v80 = (void *)zalgo.getter(v79);
      v69 = dispatch thunk of Promise.then<A>(on:closure:)(v80, sub_1000A2828, v78, a16);

      sub_1000A2668((uint64_t)v121);
      swift_unknownObjectRelease(v108);
      swift_release();
      swift_release();
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v117);
  }
  else
  {
    v81 = (void *)objc_opt_self(REMError);
    v118 = 0;
    v119 = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v82._object = (void *)0x8000000100563700;
    v82._countAndFlagsBits = 0xD00000000000004BLL;
    String.append(_:)(v82);
    v83 = v128;
    v84 = objc_msgSend(v128, "objectID");
    v85 = objc_msgSend(v84, "description");
    v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    v88 = v87;

    v89._countAndFlagsBits = v86;
    v89._object = v88;
    String.append(_:)(v89);

    swift_bridgeObjectRelease(v88);
    v90._countAndFlagsBits = 32041;
    v90._object = (void *)0xE200000000000000;
    String.append(_:)(v90);
    v69 = v119;
    v91 = String._bridgeToObjectiveC()();
    objc_msgSend(v81, "internalErrorWithDebugDescription:", v91, swift_bridgeObjectRelease(v69).n128_f64[0]);

    swift_willThrow(v92);
  }
  return v69;
}

uint64_t sub_1000A171C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  sub_1000381C8(v0 + 24);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_unknownObjectWeakDestroy(v0 + 56);
  swift_unknownObjectWeakDestroy(v0 + 64);
  swift_release();
  swift_release();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for TTRIRemindersListRouter()
{
  return objc_opt_self(_TtC9Reminders23TTRIRemindersListRouter);
}

void sub_1000A1790()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v4 = sub_100350BFC((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_1000A29B0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "openURL:options:completionHandler:", v3, isa, 0, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

uint64_t sub_1000A1858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_100642D5C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10004A08C;
  return sub_10009EDA8(a1, a2, a3);
}

uint64_t sub_1000A18C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v3 = type metadata accessor for TTRIRemindersListRouterShareSheetItem(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2A24(v1+ OBJC_IVAR____TtCC9Reminders23TTRIRemindersListRouterP33_6FFDCD23D13881F9EFBB4406934282BE18ActivityItemSource_item, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload(v5, v3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    a1[3] = v6;
    v7 = sub_100028D70(a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v7, v5, v6);
  }
  else
  {
    v9 = sub_10002A750(&qword_100642C58);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[*(int *)(v9 + 48) + 8]);

    v10 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    a1[3] = sub_100005ED8(0, (unint64_t *)&unk_100642D70, UIImage_ptr);
    *a1 = v10;
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v5, v11);
  }
}

uint64_t sub_1000A1A74@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  Class isa;
  id v30;
  _BYTE v31[16];

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for TTRIRemindersListRouterShareSheetItem(0);
  __chkstk_darwin(v9);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000A2A24(v2+ OBJC_IVAR____TtCC9Reminders23TTRIRemindersListRouterP33_6FFDCD23D13881F9EFBB4406934282BE18ActivityItemSource_item, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    *(_QWORD *)(a2 + 24) = v5;
    v12 = sub_100028D70((_QWORD *)a2);
    return (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(v6 + 32))(v12, v11, v5);
  }
  v14 = sub_10002A750(&qword_100642C58);
  swift_bridgeObjectRelease(*(_QWORD *)&v11[*(int *)(v14 + 48) + 8]);

  v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32);
  v15(v8, v11, v5);
  if (!a1)
    goto LABEL_9;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v18 = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIActivityTypeMail);
  if (v16 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease_n(v18, 2);
    goto LABEL_12;
  }
  v22 = v20;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) != 0)
  {
LABEL_12:
    *(_QWORD *)(a2 + 24) = v5;
    v24 = sub_100028D70((_QWORD *)a2);
    return ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v15)(v24, v8, v5);
  }
LABEL_9:
  URL.startAccessingSecurityScopedResource()();
  v25 = Data.init(contentsOf:options:)(v8, 0);
  v27 = v26;
  v28 = objc_allocWithZone((Class)UIImage);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v30 = objc_msgSend(v28, "initWithData:", isa);
  sub_1000A2B58(v25, v27);

  URL.stopAccessingSecurityScopedResource()();
  if (v30)
  {
    *(_QWORD *)(a2 + 24) = sub_100005ED8(0, (unint64_t *)&unk_100642D70, UIImage_ptr);
    *(_QWORD *)a2 = v30;
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000A1FEC()
{
  return type metadata accessor for TTRIRemindersListRouter.ActivityItemSource(0);
}

uint64_t type metadata accessor for TTRIRemindersListRouter.ActivityItemSource(uint64_t a1)
{
  return sub_100007328(a1, (uint64_t *)&unk_100642C48, (uint64_t)&nominal type descriptor for TTRIRemindersListRouter.ActivityItemSource);
}

uint64_t sub_1000A2008(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for TTRIRemindersListRouterShareSheetItem(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for TTRIRemindersListRouterShareSheetItem(uint64_t a1)
{
  return sub_100007328(a1, qword_100642CD0, (uint64_t)&nominal type descriptor for TTRIRemindersListRouterShareSheetItem);
}

uint64_t *sub_1000A2088(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v13 = sub_10002A750(&qword_100642C58);
      v14 = *(int *)(v13 + 48);
      v15 = (uint64_t *)((char *)a1 + v14);
      v16 = (uint64_t *)((char *)a2 + v14);
      v18 = *v16;
      v17 = v16[1];
      *v15 = v18;
      v15[1] = v17;
      v19 = *(int *)(v13 + 64);
      v20 = *(void **)((char *)a2 + v19);
      *(uint64_t *)((char *)a1 + v19) = (uint64_t)v20;
      swift_bridgeObjectRetain(v17);
      v21 = v20;
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

void sub_1000A2174(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  if (EnumCaseMultiPayload != 1)
  {
    v5 = sub_10002A750(&qword_100642C58);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 48) + 8));

  }
}

uint64_t sub_1000A21F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = 1;
  }
  else
  {
    v9 = sub_10002A750(&qword_100642C58);
    v10 = *(int *)(v9 + 48);
    v11 = (_QWORD *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    v14 = *v12;
    v13 = v12[1];
    *v11 = v14;
    v11[1] = v13;
    v15 = *(int *)(v9 + 64);
    v16 = *(void **)(a2 + v15);
    *(_QWORD *)(a1 + v15) = v16;
    swift_bridgeObjectRetain(v13);
    v17 = v16;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_1000A22A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  if (a1 != a2)
  {
    sub_1000A2378(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = 1;
    }
    else
    {
      v9 = sub_10002A750(&qword_100642C58);
      v10 = *(int *)(v9 + 48);
      v11 = (_QWORD *)(a1 + v10);
      v12 = (_QWORD *)(a2 + v10);
      *v11 = *v12;
      v13 = v12[1];
      v11[1] = v13;
      v14 = *(int *)(v9 + 64);
      v15 = *(void **)(a2 + v14);
      *(_QWORD *)(a1 + v14) = v15;
      swift_bridgeObjectRetain(v13);
      v16 = v15;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }
  return a1;
}

uint64_t sub_1000A2378(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRIRemindersListRouterShareSheetItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A23B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = 1;
  }
  else
  {
    v9 = sub_10002A750(&qword_100642C58);
    v8 = 0;
    *(_OWORD *)(a1 + *(int *)(v9 + 48)) = *(_OWORD *)(a2 + *(int *)(v9 + 48));
    *(_QWORD *)(a1 + *(int *)(v9 + 64)) = *(_QWORD *)(a2 + *(int *)(v9 + 64));
  }
  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_1000A2458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_1000A2378(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = 1;
    }
    else
    {
      v9 = sub_10002A750(&qword_100642C58);
      v8 = 0;
      *(_OWORD *)(a1 + *(int *)(v9 + 48)) = *(_OWORD *)(a2 + *(int *)(v9 + 48));
      *(_QWORD *)(a1 + *(int *)(v9 + 64)) = *(_QWORD *)(a2 + *(int *)(v9 + 64));
    }
    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRSmartListFilterEditorViewModel.DateOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for TTRSmartListFilterEditorViewModel.DateOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000A2528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000A2538(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _QWORD v6[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3(v5, v4, &unk_100522948, &unk_100522960);
    v6[0] = v5;
    v6[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v6);
    return 0;
  }
  return result;
}

uint64_t sub_1000A25C4()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_1000A25CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100642D10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A2614()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A2638(void *a1, void *a2, char a3)
{
  uint64_t v3;

  sub_10009F6E0(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

id sub_1000A2644(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned int v6;

  v6 = a6 >> 6;
  if (v6 == 2)
    return (id)swift_unknownObjectRetain(result);
  if (v6 <= 1)
    return result;
  return result;
}

uint64_t sub_1000A2668(uint64_t a1)
{
  sub_1000866B0(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_1000A26A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000A26CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_1000A26F8()
{
  uint64_t v0;

  return sub_1000A0E00(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(char **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(unsigned __int8 *)(v0 + 80), *(_BYTE *)(v0 + 81), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD **)(v0 + 112), *(_BYTE *)(v0 + 120), *(_BYTE *)(v0 + 121), *(_QWORD *)(v0 + 16));
}

uint64_t *sub_1000A2754(uint64_t *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[2];
  v3 = (void *)a1[3];
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = (void *)a1[8];
  v8 = (void *)a1[9];
  sub_1000381B8(*a1, a1[1]);

  sub_1000A27D4(v3, v4, v5, v6);
  return a1;
}

double sub_1000A27D4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  double result;

  if (a4 != 1)
  {
    sub_10004E08C(a1);
    sub_10004E08C(a2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000A2810()
{
  Swift::OpaquePointer v0;
  Reminders::TTRReminderIDsWithMatchingHashtagsProvider v1;

  v1.reminders._rawValue = TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:)(v0).reminders._rawValue;
  return swift_retain(v1.reminders._rawValue);
}

uint64_t sub_1000A2828()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1000A2850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for REMNavigationSpecifier.ReminderPathSpecifier.DetailSection(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000A28C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t ObjectType;

  v1 = v0[2];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for REMNavigationSpecifier.ReminderPathSpecifier.DetailSection(0)
                                      - 8)
                          + 80);
  v3 = v0[3];
  v4 = v0[4];
  v5 = (char *)v0 + ((v2 + 40) & ~v2);
  ObjectType = swift_getObjectType(v3, v6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 96))(v5, 1, v1, v1, ObjectType, v4);
}

uint64_t sub_1000A2934()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A2958(uint64_t a1)
{
  sub_1000866C4(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return a1;
}

id sub_1000A298C()
{
  uint64_t v0;

  return sub_10009EB60(*(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 16));
}

unint64_t sub_1000A29B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100642D50;
  if (!qword_100642D50)
  {
    type metadata accessor for OpenExternalURLOptionsKey(255);
    result = swift_getWitnessTable(&unk_10051FEC4, v1);
    atomic_store(result, &qword_100642D50);
  }
  return result;
}

uint64_t sub_1000A29F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A2A1C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10009FD74(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_1000A2A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRIRemindersListRouterShareSheetItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A2A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for TTRIRemindersListRouterShareSheetItem(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A2A24(v0+ OBJC_IVAR____TtCC9Reminders23TTRIRemindersListRouterP33_6FFDCD23D13881F9EFBB4406934282BE18ActivityItemSource_item, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload(v3, v1) == 1)
  {
    sub_1000A2378((uint64_t)v3);
    return 0;
  }
  else
  {
    v5 = sub_10002A750(&qword_100642C58);
    v6 = &v3[*(int *)(v5 + 48)];
    v4 = *(_QWORD *)v6;
    v7 = *((_QWORD *)v6 + 1);

    if (!v7)
      v4 = 0;
    v8 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v3, v8);
  }
  return v4;
}

uint64_t sub_1000A2B58(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000A2B9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100642DA0;
  if (!qword_100642DA0)
  {
    v1 = sub_100005ED8(255, (unint64_t *)&qword_100642D90, NSRunLoop_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_100642DA0);
  }
  return result;
}

uint64_t sub_1000A2BF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10002A750(&qword_1006547E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A2C34()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A2C58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2C84(void **a1)
{
  uint64_t v1;

  return sub_1000A05B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000A2C8C()
{
  uint64_t v0;

  sub_100027F10((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A2CB0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000A07A8(a1, a2, a3, (_QWORD *)(v3 + 16));
}

uint64_t sub_1000A2CD4()
{
  return sub_1000A2828();
}

uint64_t sub_1000A2CE8(uint64_t a1)
{
  return sub_1000A2D00(a1, (uint64_t (*)(uint64_t))&TTRRemindersBoardPresentationTreesManagementPresenterCapability.DeferredUpdateFlags.collapsedStateChange.unsafeMutableAddressor);
}

uint64_t sub_1000A2CF4(uint64_t a1)
{
  return sub_1000A2D00(a1, (uint64_t (*)(uint64_t))&TTRRemindersBoardPresentationTreesManagementPresenterCapability.DeferredUpdateFlags.cellPresentationStateChange.unsafeMutableAddressor);
}

uint64_t sub_1000A2D00(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v9[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 72);
    swift_retain(v6);
    v7 = swift_release(v5);
    v8 = (_QWORD *)a2(v7);
    TTRRemindersBoardPresentationTreesManagementPresenterCapability.scheduleUpdate(for:)(*v8);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1000A2D80()
{
  uint64_t v0;

  sub_1000381C8(v0 + 16);
  sub_1000381C8(v0 + 32);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance(v0, 97, 7);
}

uint64_t type metadata accessor for TTRIRemindersBoardPresenter()
{
  return objc_opt_self(_TtC9Reminders27TTRIRemindersBoardPresenter);
}

uint64_t sub_1000A2DEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  _BYTE v40[24];

  v2 = v1;
  v38 = a1;
  v3 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersBoardCellPresentationStates(0);
  v7 = __chkstk_darwin(v6);
  v37 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - v9;
  v12 = *(_QWORD *)(v1 + 48);
  v11 = *(_QWORD *)(v1 + 56);
  ObjectType = swift_getObjectType(v12, v13);
  v39[0] = v12;
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  v16 = v15(ObjectType, v11);
  v18 = v17;
  v19 = swift_getObjectType(v16, v17);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 192))(v19, v18);
  swift_unknownObjectRelease(v16);
  v21 = *(_QWORD *)(v20 + 24);
  v36 = *(_QWORD *)(v20 + 32);
  swift_unknownObjectRetain(v21);
  swift_unknownObjectRelease(v20);
  v22 = *(_QWORD *)(v2 + 88)
      + direct field offset for TTRRemindersBoardCellPresentationStatesPresenterCapability.cellPresentationStates;
  swift_beginAccess(v22, v40, 0, 0);
  sub_10002B1E8(v22, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardCellPresentationStates);
  v39[0] = v12;
  v23 = v15(ObjectType, v11);
  v25 = v24;
  v26 = swift_getObjectType(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 136))(v26, v25);
  swift_unknownObjectRelease(v23);
  v27 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v5, 1, v27) == 1)
  {
    sub_1000073A0((uint64_t)v5, &qword_100649CA0);
    v29 = 1;
  }
  else
  {
    v30 = v5[*(int *)(v27 + 112)];
    sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    v29 = v30 ^ 1;
  }
  v39[3] = swift_getObjectType(v21, v28);
  v31 = v37;
  v39[4] = *(_QWORD *)(v36 + 8);
  v39[0] = v21;
  v32 = *(unsigned __int8 *)(v2 + 96);
  sub_10002B1E8((uint64_t)v10, v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardCellPresentationStates);
  v33 = swift_unknownObjectRetain(v21);
  TTRRemindersBoardPresentationTrees.init(baseTree:isCollapsed:shouldhideEmptySectionless:placeholderRemindersAreHidden:cellPresentationStates:)(v39, sub_1000A6084, v2, v29 & 1, v32, v31, v33);
  swift_unknownObjectRelease(v21);
  return sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardCellPresentationStates);
}

uint64_t sub_1000A3074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *(_QWORD *)(v1 + 88)
     + direct field offset for TTRRemindersBoardCellPresentationStatesPresenterCapability.cellPresentationStates;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10002B1E8(v3, a1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardCellPresentationStates);
}

uint64_t sub_1000A30D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD v6[5];

  v0 = type metadata accessor for TTRRemindersBoardPresentationTrees(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v6[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersBoardPresentationTreesManagementPresenterCapability.presentationTree.getter(v1);
  sub_100010634((uint64_t)v3, (uint64_t)v6);
  sub_10001F544((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTrees);
  TTRRemindersBoardCollapsedStatesPresenterCapability.pruneNonExistentItemIDs(with:)(v6);
  return sub_100027F10(v6);
}

char *sub_1000A3174(uint64_t a1, uint64_t a2)
{
  return sub_1000A5FE8(a2);
}

uint64_t sub_1000A317C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v2 + 16, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1000A31AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v12;

  v2 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - v4;
  v6 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B1E8(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
  if (!swift_getEnumCaseMultiPayload(v5, v2))
  {
    v9 = sub_10001F580((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    TTRRemindersListViewModel.SectionID.editableSectionCasesOnly.getter(v9);
    __asm { BR              X10 }
  }
  sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
  return 0;
}

uint64_t sub_1000A35D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v5 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRRemindersBoardPresentationTrees(0);
  __chkstk_darwin(v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v24, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v16 = result;
    TTRRemindersBoardPresentationTreesManagementPresenterCapability.presentationTree.getter(result);
    sub_100010634((uint64_t)v10, (uint64_t)v21);
    sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTrees);
    v17 = v22;
    v18 = v23;
    sub_10001413C(v21, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40))(a3, v17, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) == 1)
    {
      swift_release();
      sub_1000073A0((uint64_t)v7, (uint64_t *)&unk_100640EB0);
      return sub_100027F10(v21);
    }
    else
    {
      sub_10001F580((uint64_t)v7, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      sub_100027F10(v21);
      Strong = swift_unknownObjectWeakLoadStrong(v16 + 32);
      if (Strong)
      {
        v20 = Strong;
        sub_1003642A8((uint64_t)v14, 0);
        swift_release();
        swift_unknownObjectRelease(v20);
      }
      else
      {
        swift_release();
      }
      return sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    }
  }
  return result;
}

uint64_t sub_1000A37E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  void (*v23)(char *, Reminders::TTRReminderIDsWithMatchingHashtagsProvider (__swiftcall *)(Swift::OpaquePointer), _QWORD, uint64_t, uint64_t, __n128);
  __n128 v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];

  v5 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRRemindersBoardPresentationTrees(0);
  __chkstk_darwin(v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v16 = result;
    TTRRemindersBoardPresentationTreesManagementPresenterCapability.presentationTree.getter(result);
    sub_100010634((uint64_t)v10, (uint64_t)v25);
    sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTrees);
    v17 = v26;
    v18 = v27;
    sub_10001413C(v25, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40))(a3, v17, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) == 1)
    {
      swift_release();
      sub_1000073A0((uint64_t)v7, (uint64_t *)&unk_100640EB0);
      return sub_100027F10(v25);
    }
    else
    {
      sub_10001F580((uint64_t)v7, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      sub_100027F10(v25);
      v19 = *(_QWORD *)(v16 + 48);
      v20 = *(_QWORD *)(v16 + 64);
      ObjectType = swift_getObjectType(v19, v21);
      v23 = *(void (**)(char *, Reminders::TTRReminderIDsWithMatchingHashtagsProvider (__swiftcall *)(Swift::OpaquePointer), _QWORD, uint64_t, uint64_t, __n128))(v20 + 80);
      v24 = swift_unknownObjectRetain(v19);
      v23(v14, TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:), 0, ObjectType, v20, v24);
      swift_release();
      swift_unknownObjectRelease(v19);
      return sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    }
  }
  return result;
}

uint64_t sub_1000A3A00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for TTRRemindersBoardPresentationTrees(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersBoardPresentationTreesManagementPresenterCapability.presentationTree.getter(v5);
  v6 = TTRRemindersBoardPresentationTrees.isCollapsible(_:)(a1);
  sub_10001F544((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTrees);
  if ((v6 & 1) == 0)
    return 0;
  swift_retain();
  v7 = TTRRemindersBoardCollapsedStatesPresenterCapability.isCollapsed(_:)(a1);
  swift_release();
  if ((v7 & 1) != 0)
    return 0;
  v9 = sub_10002A750(&qword_100642EB0);
  v10 = *(_QWORD *)(type metadata accessor for TTRRemindersListViewModel.ItemID(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v9, v13 + v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100520250;
  sub_10002B1E8(a1, v14 + v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
  v18 = v14;
  swift_retain();
  v15 = sub_10002A750((uint64_t *)&unk_100646F50);
  v16 = sub_1000A67F4();
  TTRRemindersBoardCollapsedStatesPresenterCapability.collapse<A>(_:)(&v18, v15, v16);
  swift_bridgeObjectRelease(v14);
  swift_release();
  TTRRemindersBoardPresentationTreesManagementPresenterCapability.performPendingUpdatesImmediately()();
  return 1;
}

uint64_t sub_1000A3B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v40 = a2;
  v38 = type metadata accessor for TTRRemindersListViewModel.Item.BoardViewCasesInItem(0);
  __chkstk_darwin(v38);
  v39 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - v13;
  v15 = type metadata accessor for TTRRemindersBoardPresentationTrees(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersBoardPresentationTreesManagementPresenterCapability.presentationTree.getter(v18);
  sub_100010634((uint64_t)v17, (uint64_t)v41);
  sub_10001F544((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTrees);
  v19 = v42;
  v20 = v43;
  sub_10001413C(v41, v42);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(a1, v19, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1000073A0((uint64_t)v9, (uint64_t *)&unk_100640EB0);
    v21 = sub_10002A750(&qword_10063F188);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v23 = v40;
    v36 = 1;
  }
  else
  {
    sub_10001F580((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v24 = v42;
    v25 = v43;
    sub_10001413C(v41, v42);
    sub_10002B1E8((uint64_t)v14, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    v26(v6, 0, 1, v10);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 24))(v6, v24, v25);
    sub_1000073A0((uint64_t)v6, (uint64_t *)&unk_100640EB0);
    v28 = v27 - 1;
    if (v27 >= 1)
    {
      v29 = v42;
      v30 = v43;
      sub_10001413C(v41, v42);
      sub_10002B1E8((uint64_t)v14, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v26(v6, 0, 1, v10);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v30 + 32))(v28, v6, v29, v30);
      v31 = sub_1000073A0((uint64_t)v6, (uint64_t *)&unk_100640EB0);
      v32 = v39;
      TTRRemindersListViewModel.Item.boardViewCasesOnly.getter(v31);
      v33 = (char *)&loc_1000A3E90 + 4 * byte_1005229C0[swift_getEnumCaseMultiPayload(v32, v38)];
      __asm { BR              X10 }
    }
    sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v34 = sub_10002A750(&qword_10063F188);
    v35 = v40;
    swift_storeEnumTagMultiPayload(v40, v34, 3);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
    v23 = v35;
    v36 = 0;
    v21 = v34;
  }
  v22(v23, v36, 1, v21);
  return sub_100027F10(v41);
}

void sub_1000A3FEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TTRRemindersListViewModel.Item.treeItemIdentifier.getter(a1);
  sub_10001F544(v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  v5 = sub_10002A750(&qword_10063F188);
  swift_storeEnumTagMultiPayload(v1, v5, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 0, 1, v5);
  sub_10001F544(v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item.BoardViewCasesInItem);
  JUMPOUT(0x1000A3FC4);
}

uint64_t sub_1000A4068(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 80);
  swift_retain(v3);
  LOBYTE(a1) = TTRRemindersBoardCollapsedStatesPresenterCapability.isCollapsed(_:)(a1);
  swift_release(v3);
  return a1 & 1;
}

uint64_t sub_1000A40A8()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_currentTextInputModeObserver);
    if (v3)
    {
      v4 = swift_retain(*(_QWORD *)(Strong
                                  + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_currentTextInputModeObserver));
      v5 = TTRICurrentTextInputModeObserver.currentTextInputMode.getter(v4);
      swift_unknownObjectRelease(v2);
      swift_release(v3);
      return v5;
    }
    swift_unknownObjectRelease(Strong);
  }
  return 0;
}

uint64_t sub_1000A411C()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  id v8;
  void *v9;
  uint64_t v10;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!Strong)
    return 0;
  v3 = Strong;
  v4 = *(void **)(Strong + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_contentViewController);
  v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_contentViewController + 8);
  ObjectType = swift_getObjectType(v4, v2);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  v8 = v4;
  v9 = (void *)v7(ObjectType, v5);

  if (v9)
  {
    v10 = UIView.firstResponderDescendant.getter();

  }
  else
  {
    v10 = 0;
  }
  swift_unknownObjectRelease(v3);
  return v10;
}

uint64_t sub_1000A41C0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v7[24];

  result = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_columnReorderingController);
    if (v3)
    {
      v4 = (_QWORD *)(v3
                    + OBJC_IVAR____TtC9Reminders44TTRIRemindersBoardColumnReorderingController_activeReorderingContext);
      result = swift_beginAccess(v3 + OBJC_IVAR____TtC9Reminders44TTRIRemindersBoardColumnReorderingController_activeReorderingContext, v7, 0, 0);
      if (*v4)
      {
        swift_unknownObjectRelease(v2);
        return 1;
      }
      v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_dragAndDropCoordinator);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v5
                                   + OBJC_IVAR____TtC9Reminders40TTRIRemindersBoardDragAndDropCoordinator_activityTracker)
                       + 16);
        swift_unknownObjectRelease(v2);
        if ((v6 & 1) == 0)
          return (v6 >> 1) & 1;
        return 1;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

id sub_1000A4274(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t updated;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *Strong;
  uint64_t v52;
  char *v53;
  id result;
  uint64_t v55;
  uint64_t v56;
  uint64_t ObjectType;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  uint64_t v73;
  char v74;
  void *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  void *v80;
  id v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;

  v2 = v1;
  v4 = sub_10002A750(&qword_100642EA0);
  __chkstk_darwin(v4);
  v94 = (uint64_t)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  v98 = *(_QWORD *)(v102 - 8);
  v6 = __chkstk_darwin(v102);
  v96 = (uint64_t)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v105 = (char *)&v92 - v9;
  __chkstk_darwin(v8);
  v92 = (uint64_t)&v92 - v10;
  v11 = sub_10002A750(&qword_100649CA0);
  v12 = __chkstk_darwin(v11);
  v97 = (uint64_t)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v103 = (char *)&v92 - v14;
  updated = type metadata accessor for TTRRemindersListTreeViewModelUpdateContext.ViewUpdateType(0);
  v16 = __chkstk_darwin(updated);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v92 - v19;
  v21 = type metadata accessor for TTRRemindersBoardPresentationTreeUpdates(0);
  __chkstk_darwin(v21);
  v106 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10002A750((uint64_t *)&unk_100649CE0);
  v27 = __chkstk_darwin(v26);
  v104 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v30 = (char *)&v92 - v29;
  v31 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v32 = __chkstk_darwin(v31);
  v93 = (uint64_t)&v92 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v92 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v92 - v37;
  v100 = a1 + OBJC_IVAR____TtC9Reminders42TTRRemindersListTreeViewModelUpdateContext_itemToStartEditing;
  sub_10000735C(a1 + OBJC_IVAR____TtC9Reminders42TTRRemindersListTreeViewModelUpdateContext_itemToStartEditing, (uint64_t)v30, (uint64_t *)&unk_100649CE0);
  v39 = sub_10002A750((uint64_t *)&unk_100649CF0);
  v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48);
  v40 = v99(v30, 1, v39);
  v95 = v4;
  v101 = v39;
  if (v40 == 1)
  {
    sub_1000073A0((uint64_t)v30, (uint64_t *)&unk_100649CE0);
  }
  else
  {
    sub_10001F580((uint64_t)v30, (uint64_t)v36, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v41 = sub_10001F580((uint64_t)v36, (uint64_t)v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v41);
    TTRRemindersBoardCellPresentationStatesPresenterCapability.prepareToInsertAndEdit(_:)(v25);
    sub_10001F544((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    sub_10001F544((uint64_t)v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  v42 = a1 + OBJC_IVAR____TtC9Reminders42TTRRemindersListTreeViewModelUpdateContext_viewUpdateType;
  sub_10002B1E8(a1 + OBJC_IVAR____TtC9Reminders42TTRRemindersListTreeViewModelUpdateContext_viewUpdateType, (uint64_t)v20, type metadata accessor for TTRRemindersListTreeViewModelUpdateContext.ViewUpdateType);
  v43 = sub_10002A750(&qword_100642EA8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48);
  v45 = v44(v20, 1, v43);
  if (v45 != 1)
    sub_10001F544((uint64_t)v20, type metadata accessor for TTRRemindersListTreeViewModelUpdateContext.TreeDiffGenerationParameters);
  v46 = sub_100371920();
  sub_10002B1E8(v42, (uint64_t)v18, type metadata accessor for TTRRemindersListTreeViewModelUpdateContext.ViewUpdateType);
  if (v44(v18, 1, v43) == 1)
  {
    v47 = 0;
  }
  else
  {
    v47 = v18[*(int *)(v43 + 48)];
    sub_10001F544((uint64_t)v18, type metadata accessor for TTRRemindersListTreeViewModelUpdateContext.TreeDiffGenerationParameters);
  }
  v48 = (uint64_t)v105;
  v49 = (uint64_t)v106;
  TTRRemindersBoardPresentationTreesManagementPresenterCapability.makeUpdatesForDataModelUpdate(shouldReload:itemIDsToForceUpdate:animated:)(v45 == 1, v46, v47);
  swift_bridgeObjectRelease(v46);
  v50 = v2 + 32;
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v2 + 32);
  if (Strong)
  {
    v53 = Strong;
    result = objc_msgSend(Strong, "isViewLoaded");
    if ((_DWORD)result)
    {
      if (!*(_QWORD *)&v53[OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_presentationTreesCapability])
      {
        __break(1u);
        return result;
      }
      swift_retain();
      TTRRemindersBoardPresentationTreesManagementViewCapability.applyPresentationTrees(with:)(v49);
      swift_unknownObjectRelease(v53);
      swift_release();
    }
    else
    {
      swift_unknownObjectRelease(v53);
    }
  }
  v55 = *(_QWORD *)(v2 + 48);
  v56 = *(_QWORD *)(v2 + 56);
  ObjectType = swift_getObjectType(v55, v52);
  v107 = v55;
  v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 16))(ObjectType, v56);
  v60 = v59;
  v61 = swift_getObjectType(v58, v59);
  v62 = (uint64_t)v103;
  (*(void (**)(uint64_t, uint64_t))(v60 + 136))(v61, v60);
  swift_unknownObjectRelease(v58);
  v63 = v97;
  sub_10000735C(v62, v97, &qword_100649CA0);
  v64 = (int *)v102;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v63, 1, v102) != 1)
  {
    v70 = v92;
    sub_10001F580(v63, v92, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    v71 = *(_BYTE *)(v70 + v64[12]);
    sub_10002B1E8(v70, v48, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    v68 = (uint64_t)v104;
    v69 = v100;
    if ((v71 & 1) != 0)
    {
      v72 = *(unsigned __int8 *)(v48 + v64[18]);
      sub_10001F544(v48, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
      v73 = v96;
      sub_10002B1E8(v70, v96, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
      if (v72 == 1)
      {
        v74 = *(_BYTE *)(v73 + v64[14]);
        sub_10001F544(v73, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
        if ((v74 & 1) != 0)
        {
          v65 = TTRRemindersListViewModel.ListInfo.completedRemindersState(completedRowHasShowHide:)(0);
          v67 = v75;
          v66 = v76 & 0x10101;
LABEL_23:
          sub_10001F544(v70, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
          goto LABEL_24;
        }
LABEL_22:
        v65 = 0;
        v66 = 0;
        v67 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      sub_10001F544(v48, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
      v73 = v96;
      sub_10002B1E8(v70, v96, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    }
    sub_10001F544(v73, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    goto LABEL_22;
  }
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = (uint64_t)v104;
  v69 = v100;
LABEL_24:
  sub_1000073A0(v62, &qword_100649CA0);
  v77 = swift_unknownObjectWeakLoadStrong(v50);
  if (v77)
  {
    v78 = v77;
    v79 = (uint64_t *)(v77 + OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_completedRemindersState);
    v80 = *(void **)(v77 + OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_completedRemindersState + 16);
    *v79 = v65;
    v79[1] = v66;
    v79[2] = (uint64_t)v67;
    v81 = v67;

    sub_100361984();
    swift_unknownObjectRelease(v78);

  }
  sub_10000735C(v69, v68, (uint64_t *)&unk_100649CE0);
  v82 = v101;
  if (v99((char *)v68, 1, v101) == 1)
  {
    sub_1000073A0(v68, (uint64_t *)&unk_100649CE0);

  }
  else
  {
    v83 = *(_BYTE *)(v68 + *(int *)(v82 + 48));
    v84 = v95;
    v85 = *(int *)(v95 + 48);
    v86 = v68;
    v87 = v94;
    sub_10001F580(v86, v94, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    *(_BYTE *)(v87 + v85) = v83;
    v88 = *(_BYTE *)(v87 + *(int *)(v84 + 48));
    v89 = v93;
    sub_10001F580(v87, v93, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v90 = swift_unknownObjectWeakLoadStrong(v50);
    if (v90)
    {
      v91 = v90;
      sub_1003642A8(v89, v88);
      swift_unknownObjectRelease(v91);
    }

    sub_10001F544(v89, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  return (id)sub_10001F544(v49, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTreeUpdates);
}

uint64_t sub_1000A4A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v3 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  v4 = __chkstk_darwin(v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v12[-v7];
  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v10 = result;
    sub_10002B1E8(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    v11 = v10 + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_listInfo;
    swift_beginAccess(v10 + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_listInfo, v13, 0, 0);
    sub_10002B1E8(v11, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    swift_beginAccess(v11, v12, 33, 0);
    sub_1000A65CC((uint64_t)v8, v11);
    swift_endAccess(v12);
    sub_100296554((uint64_t)v6);
    sub_10001F544((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    return swift_unknownObjectRelease(v10);
  }
  return result;
}

void sub_1000A4B7C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *Strong;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;

  v5 = type metadata accessor for REMFeatureFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v10 = Strong;
    if (objc_msgSend(Strong, "isViewLoaded")
      && (v11 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for REMFeatureFlags.viewAnnotation(_:), v5), v12 = REMFeatureFlags.isEnabled.getter(v11), (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5), (v12 & 1) != 0))
    {
      v13 = a2 & 1;
      v14 = (void *)TTRListOrCustomSmartList.objectID.getter(a1, v13);
      v15 = TTRListOrCustomSmartList.isGroup.getter(a1, v13);
      sub_100298B04(v14, v15 & 1);
      swift_unknownObjectRelease(v10);

    }
    else
    {
      swift_unknownObjectRelease(v10);
    }
  }
}

id sub_1000A4CB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *Strong;
  char *v7;
  id result;
  uint64_t v9;

  v3 = type metadata accessor for TTRRemindersBoardPresentationTreeUpdates(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersBoardPresentationTreesManagementPresenterCapability.makeUpdatesForUpdatedItems(_:)(a1);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (!Strong)
    return (id)sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTreeUpdates);
  v7 = Strong;
  result = objc_msgSend(Strong, "isViewLoaded");
  if (!(_DWORD)result)
  {
    swift_unknownObjectRelease(v7);
    return (id)sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTreeUpdates);
  }
  if (*(_QWORD *)&v7[OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_presentationTreesCapability])
  {
    swift_retain();
    TTRRemindersBoardPresentationTreesManagementViewCapability.applyPresentationTrees(with:)(v5);
    swift_unknownObjectRelease(v7);
    swift_release();
    return (id)sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTreeUpdates);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A4D94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  objc_super v22;

  v2 = v1;
  v4 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001413C(a1, v10);
  TTRRemindersListEditingState.editingItem.getter(v10, v11);
  v12 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v6, 1, v12);
  if ((_DWORD)v13 == 1)
  {
    sub_1000073A0((uint64_t)v6, (uint64_t *)&unk_100640EB0);
    v14 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  }
  else
  {
    TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v13);
    sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v15 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 0, 1, v15);
  }
  TTRRemindersBoardCellPresentationStatesPresenterCapability.editingItemID.setter(v9);
  result = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (result)
  {
    v17 = (char *)result;
    v18 = a1[3];
    v19 = a1[4];
    sub_10001413C(a1, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19) & 1;
    sub_10028F4A0();
    if ((_DWORD)v20 != objc_msgSend(v17, "isEditing"))
    {
      UIViewController.endFirstResponderEditing()();
      v21 = (objc_class *)type metadata accessor for TTRIShowRemindersViewController(0);
      v22.receiver = v17;
      v22.super_class = v21;
      objc_msgSendSuper2(&v22, "setEditing:animated:", v20, 1);
      objc_msgSend(*(id *)&v17[OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_contentViewController], "setEditing:animated:", v20, 1);
      sub_1002908A0(1, 1);
      sub_100291CAC();
    }
    return swift_unknownObjectRelease(v17);
  }
  return result;
}

uint64_t sub_1000A4FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  char v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v3 = type metadata accessor for TTRSharedWithYouHighlight(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10002A750(&qword_100653A10);
  __chkstk_darwin(v7);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10002A750(&qword_100642E98);
  __chkstk_darwin(v10);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v14 = result;
    v15 = result + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_swHighlightToShowInNavBar;
    swift_beginAccess(result + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_swHighlightToShowInNavBar, v20, 0, 0);
    v16 = (uint64_t)&v12[*(int *)(v10 + 48)];
    sub_10000735C(v15, (uint64_t)v12, &qword_100653A10);
    sub_10000735C(a1, v16, &qword_100653A10);
    v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v17((uint64_t)v12, 1, v3) == 1)
    {
      if (v17(v16, 1, v3) == 1)
      {
        sub_1000073A0((uint64_t)v12, &qword_100653A10);
        return swift_unknownObjectRelease(v14);
      }
    }
    else
    {
      sub_10000735C((uint64_t)v12, (uint64_t)v9, &qword_100653A10);
      if (v17(v16, 1, v3) != 1)
      {
        sub_10001F580(v16, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRSharedWithYouHighlight);
        v18 = static TTRSharedWithYouHighlight.__derived_struct_equals(_:_:)(v9, v6);
        sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRSharedWithYouHighlight);
        sub_10001F544((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRSharedWithYouHighlight);
        sub_1000073A0((uint64_t)v12, &qword_100653A10);
        if ((v18 & 1) != 0)
          return swift_unknownObjectRelease(v14);
LABEL_9:
        swift_beginAccess(v15, v19, 33, 0);
        sub_1000A6584(a1, v15);
        swift_endAccess(v19);
        sub_10028F4A0();
        return swift_unknownObjectRelease(v14);
      }
      sub_10001F544((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRSharedWithYouHighlight);
    }
    sub_1000073A0((uint64_t)v12, &qword_100642E98);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1000A5240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a1, (uint64_t)v4, (uint64_t *)&unk_100640EB0);
  v8 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8);
  if ((_DWORD)v9 == 1)
  {
    sub_1000073A0((uint64_t)v4, (uint64_t *)&unk_100640EB0);
    v10 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  }
  else
  {
    TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v9);
    sub_10001F544((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v11 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);
  }
  return TTRRemindersBoardCellPresentationStatesPresenterCapability.itemIDWithAnchoredPopover.setter(v7);
}

uint64_t sub_1000A539C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t Strong;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[12];
  int v34;

  v7 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10002A750(&qword_100649BA0);
  __chkstk_darwin(v11);
  v13 = &v33[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 32);
  if (Strong)
  {
    v15 = (void *)Strong;
    v34 = a3;
    if ((unint64_t)(a2 - 1) > 2)
      v16 = 0;
    else
      v16 = qword_100522B20[a2 - 1];
    sub_10002A750(&qword_100642E88);
    v23 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 1, 1, v23);
    sub_10002B1E8(a1, (uint64_t)&v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    type metadata accessor for MainActor(0);
    v24 = v15;
    v25 = static MainActor.shared.getter(v24);
    v26 = *(unsigned __int8 *)(v8 + 80);
    v27 = (v26 + 40) & ~v26;
    v28 = (v9 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = (_QWORD *)swift_allocObject(&unk_1005EF6F0, v28 + 9, v26 | 7);
    v29[2] = v25;
    v29[3] = &protocol witness table for MainActor;
    v29[4] = v24;
    sub_10001F580((uint64_t)v10, (uint64_t)v29 + v27, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v30 = (char *)v29 + v28;
    *(_QWORD *)v30 = v16;
    v30[8] = v34 & 1;
    v31 = sub_1001B9D38((uint64_t)v13, (uint64_t)&unk_100642E90, (uint64_t)v29);
    v32 = Promise.__allocating_init(task:)(v31);
    swift_unknownObjectRelease(v24);
    return v32;
  }
  else
  {
    v17 = type metadata accessor for PromiseError(0);
    v18 = sub_1000A60A8();
    v19 = swift_allocError(v17, v18, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v20, enum case for PromiseError.cancelled(_:), v17);
    v21 = sub_10002A750(&qword_100642E88);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    return Promise.init(error:)(v19);
  }
}

uint64_t sub_1000A55F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (Strong)
  {
    v4 = Strong;
    v5 = TTRRemindersListItemStateTracker.makePromise(tracking:of:cancelsExistingPromise:)(0, a1, 1);
    swift_unknownObjectRelease(v4);
    return v5;
  }
  else
  {
    v7 = type metadata accessor for PromiseError(0);
    v8 = sub_1000A60A8();
    v9 = swift_allocError(v7, v8, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v10, enum case for PromiseError.cancelled(_:), v7);
    v11 = sub_10002A750(&qword_100642E88);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    return Promise.init(error:)(v9);
  }
}

double sub_1000A56C0(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v11;

  Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v11 = Strong;
    *(_QWORD *)(sub_100297290() + 32) = *(_QWORD *)(Strong
                                                  + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_keyboardHeight);
    swift_release();
    sub_100297290();
    sub_1000D3A68(a1, a2, a3, a4 & 1);
    swift_unknownObjectRelease(v11);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000A5764()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  void *v4;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    v3 = objc_msgSend(Strong, "view");
    if (v3)
    {
      v4 = v3;
      UIView.ttr_displayScale.getter();
      swift_unknownObjectRelease(v2);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1000A57D4()
{
  uint64_t v0;
  id result;
  id v2;
  void *v3;
  uint64_t v4;

  result = (id)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (result)
  {
    v2 = result;
    result = objc_msgSend(result, "view");
    if (result)
    {
      v3 = result;
      v4 = UIView.ttr_userInterfaceLayoutDirection.getter();
      swift_unknownObjectRelease(v2);

      return (id)v4;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000A5844()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!Strong)
    return 0;
  v2 = Strong;
  sub_10029A020();
  v4 = v3;
  swift_unknownObjectRelease(v2);
  return v4;
}

void *sub_1000A589C()
{
  uint64_t v0;
  void *result;
  void *v2;
  unsigned int v3;

  result = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, "_appearState");
    swift_unknownObjectRelease(v2);
    return (void *)(v3 == 0);
  }
  return result;
}

uint64_t sub_1000A58E8()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_1000A5910@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for TTRDerivedUntouchedPresentationTreeMaker();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100606988;
  *a1 = result;
  return result;
}

uint64_t sub_1000A5954(void *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v4 = result;
    sub_100298518(a1);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_1000A5998(char a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (result)
  {
    v6 = result;
    sub_10029865C(a1 & 1, a2 & 1);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_1000A59FC(char a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v4 = result;
    *(_BYTE *)(result + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_emptyListMessaging) = a1;
    sub_10028FAB0();
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

void sub_1000A5A58(uint64_t a1, char a2)
{
  sub_1000A4B7C(a1, a2 & 1);
}

uint64_t sub_1000A5A60(char a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v4 = result;
    sub_100298CCC(a1);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

double sub_1000A5AA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  double result;

  Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (Strong)
  {
    v9 = Strong;
    ObjectType = swift_getObjectType(Strong, v8);
    if ((sub_100291F8C(a1, a2) & 1) != 0)
    {
      *(_QWORD *)(a3 + 24) = ObjectType;
      *(_QWORD *)a3 = v9;
      return result;
    }
    swift_unknownObjectRelease(v9);
  }
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t sub_1000A5B1C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = swift_unknownObjectWeakLoadStrong(v2 + 32);
  if (result)
  {
    v6 = result;
    sub_1003642A8(a1, a2 & 1);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_1000A5B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 64);
  ObjectType = swift_getObjectType(v4, a2);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 184);
  swift_unknownObjectRetain(v4);
  v7(a1, ObjectType, v5);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_1000A5BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (result)
  {
    v4 = result;
    sub_100366F14(a1);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_1000A5C1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[3];
  uint64_t v14;
  char v15;

  result = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (result)
  {
    v4 = result;
    sub_10036749C((uint64_t)v13);
    v11 = v13[1];
    v12 = v13[0];
    v10 = v13[2];
    v5 = v14;
    v6 = v15;
    result = swift_unknownObjectRelease(v4);
    v8 = v11;
    v7 = v12;
    v9 = v10;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v9 = xmmword_1005229B0;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v6;
  return result;
}

uint64_t sub_1000A5CC0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 32);
  if (Strong)
  {
    v6 = Strong;
    v7 = sub_100367684(a1, a2 & 1);
    swift_unknownObjectRelease(v6);
    return v7;
  }
  else
  {
    v9 = type metadata accessor for PromiseError(0);
    v10 = sub_1000A60A8();
    v11 = swift_allocError(v9, v10, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v12, enum case for PromiseError.cancelled(_:), v9);
    v13 = sub_10002A750(&qword_100657300);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    return Promise.init(error:)(v11);
  }
}

uint64_t sub_1000A5D8C(char a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v5 = result;
    sub_100291064(a1 & 1, v4);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t sub_1000A5DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

double sub_1000A5E0C(void *a1, void *a2, uint64_t a3, char a4)
{
  return sub_1000A56C0(a1, a2, a3, a4 & 1);
}

double sub_1000A5E14()
{
  uint64_t v0;
  uint64_t Strong;
  double result;
  uint64_t v3;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v3 = Strong;
    sub_100297290();
    sub_1000D48D4();
    swift_unknownObjectRelease(v3);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000A5E64()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  UIAccessibilityNotifications v3;
  NSString v4;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    v3 = UIAccessibilityAnnouncementNotification;
    v4 = String._bridgeToObjectiveC()();
    UIAccessibilityPostNotification(v3, v4);
    swift_unknownObjectRelease(v2);

  }
}

uint64_t sub_1000A5EEC()
{
  uint64_t v0;
  uint64_t result;

  result = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (result)
    return swift_unknownObjectRelease(result);
  return result;
}

id sub_1000A5F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *Strong;
  char *v6;
  id result;
  uint64_t v8;

  v1 = type metadata accessor for TTRRemindersBoardPresentationTreeUpdates(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersBoardPresentationTreesManagementPresenterCapability.makeUpdatesForMoves()(v2);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (!Strong)
    return (id)sub_10001F544((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTreeUpdates);
  v6 = Strong;
  result = objc_msgSend(Strong, "isViewLoaded");
  if (!(_DWORD)result)
  {
    swift_unknownObjectRelease(v6);
    return (id)sub_10001F544((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTreeUpdates);
  }
  if (*(_QWORD *)&v6[OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_presentationTreesCapability])
  {
    swift_retain();
    TTRRemindersBoardPresentationTreesManagementViewCapability.applyPresentationTrees(with:)(v4);
    swift_unknownObjectRelease(v6);
    swift_release();
    return (id)sub_10001F544((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersBoardPresentationTreeUpdates);
  }
  __break(1u);
  return result;
}

char *sub_1000A5FE8(uint64_t a1)
{
  uint64_t v1;
  char *result;
  char *v4;
  uint64_t v5;

  result = (char *)swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (result)
  {
    v4 = result;
    result = (char *)objc_msgSend(result, "isViewLoaded");
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)&v4[OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_presentationTreesCapability];
      if (v5)
      {
        swift_retain(*(_QWORD *)&v4[OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_presentationTreesCapability]);
        TTRRemindersBoardPresentationTreesManagementViewCapability.applyPresentationTrees(with:)(a1);
        swift_unknownObjectRelease(v4);
        return (char *)swift_release(v5);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      return (char *)swift_unknownObjectRelease(v4);
    }
  }
  return result;
}

uint64_t sub_1000A6084(uint64_t a1)
{
  return TTRRemindersBoardCollapsedStatesPresenterCapability.isCollapsed(_:)(a1) & 1;
}

unint64_t sub_1000A60A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100642E80;
  if (!qword_100642E80)
  {
    v1 = type metadata accessor for PromiseError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PromiseError, v1);
    atomic_store(result, (unint64_t *)&qword_100642E80);
  }
  return result;
}

uint64_t sub_1000A60F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;

  v1 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v6 = (_QWORD *)(v0 + v4);
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v1))
  {
    case 0u:
      v7 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v0 + v4, v7))
      {
        case 1u:
        case 8u:
        case 9u:
          goto LABEL_21;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          goto LABEL_4;
        default:
          goto LABEL_22;
      }
      goto LABEL_22;
    case 1u:
      v8 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v0 + v4, v8))
      {
        case 1u:
        case 8u:
        case 9u:
LABEL_21:

          break;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
LABEL_4:
          v9 = type metadata accessor for Date(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
          break;
        default:
          break;
      }
LABEL_22:
      v20 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
      v21 = (char *)v6 + *(int *)(v20 + 20);
      v22 = *((_QWORD *)v21 + 1);
      if (v22)
      {
        swift_bridgeObjectRelease(v22);
        sub_10003E2EC(*((void **)v21 + 2), *((_QWORD *)v21 + 3), *((_QWORD *)v21 + 4), *((_QWORD *)v21 + 5), *((_QWORD *)v21 + 6), *((_QWORD *)v21 + 7), v21[64]);
        v23 = v21[120];
        if (v23 != 255)
          sub_10002B328(*((void **)v21 + 9), *((_QWORD *)v21 + 10), *((_QWORD *)v21 + 11), *((_QWORD *)v21 + 12), *((_QWORD *)v21 + 13), *((_QWORD *)v21 + 14), v23 & 1);
      }
      v13 = *(id *)((char *)v6 + *(int *)(v20 + 44));
      goto LABEL_26;
    case 2u:

      v6 = (_QWORD *)((char *)v6 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v10 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v6, 1, v10))
      {
        switch(swift_getEnumCaseMultiPayload(v6, v10))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_11;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            goto LABEL_18;
          default:
            return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
        }
      }
      return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
    case 3u:

      v6 = (_QWORD *)((char *)v6 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v11 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11))
      {
        switch(swift_getEnumCaseMultiPayload(v6, v11))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_11;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            goto LABEL_18;
          default:
            return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
        }
      }
      return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
    case 4u:

      v6 = (_QWORD *)((char *)v6 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v12 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v6, 1, v12))
      {
        switch(swift_getEnumCaseMultiPayload(v6, v12))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_11;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            goto LABEL_18;
          default:
            return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
        }
      }
      return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
    case 5u:
      goto LABEL_16;
    case 6u:
LABEL_11:
      v13 = (id)*v6;
      goto LABEL_26;
    case 7u:
      v14 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v0 + v4, 1, v14))
      {
        swift_bridgeObjectRelease(*v6);
        v15 = (char *)v6 + *(int *)(v14 + 20);
        v16 = type metadata accessor for REMHashtagLabelSpecifier(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      }
      v6 = (_QWORD *)((char *)v6 + *(int *)(type metadata accessor for TTRRemindersListViewModel.HashtagsState(0) + 20));
      v17 = v6[1];
      if (!v17)
        return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
      swift_bridgeObjectRelease(v17);
LABEL_16:
      v13 = (id)v6[2];
LABEL_26:

      break;
    case 8u:
      v18 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v0 + v4, 1, v18))
        return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
LABEL_18:
      v19 = type metadata accessor for Date(0);
LABEL_20:
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v6, v19);
      break;
    case 9u:
      v6 = (_QWORD *)((char *)v6 + *(int *)(type metadata accessor for TTRRemindersListTips(0) + 20));
      v19 = type metadata accessor for AnyTip(0);
      goto LABEL_20;
    default:
      return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
  }
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
}

uint64_t sub_1000A64C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for TTRRemindersListViewModel.Item(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_QWORD *)v10;
  v12 = v10[8];
  v13 = (_QWORD *)swift_task_alloc(dword_1006572E4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10004A08C;
  return sub_100368200(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000A6584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100653A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A65CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A6610()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A6638(uint64_t a1)
{
  return sub_1000A67A4(a1, sub_1000A35D4);
}

uint64_t sub_1000A6648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = (id *)(v0 + v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
LABEL_8:

      break;
    case 1:

      v6 = (id *)((char *)v6 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v9 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9))
      {
        switch(swift_getEnumCaseMultiPayload(v6, v9))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_8;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
LABEL_7:
            v10 = type metadata accessor for Date(0);
            (*(void (**)(id *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v6, v10);
            break;
          default:
            return swift_deallocObject(v0, v4 + v5, v3 | 7);
        }
      }
      break;
    case 0:
      v8 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v0 + v4, v8))
      {
        case 1u:
        case 8u:
        case 9u:
          goto LABEL_8;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          goto LABEL_7;
        default:
          return swift_deallocObject(v0, v4 + v5, v3 | 7);
      }
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000A6798(uint64_t a1)
{
  return sub_1000A67A4(a1, sub_1000A37E0);
}

uint64_t sub_1000A67A4(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TTRRemindersListViewModel.ItemID(0) - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

unint64_t sub_1000A67F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100642EB8;
  if (!qword_100642EB8)
  {
    v1 = sub_10002CA5C((uint64_t *)&unk_100646F50);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100642EB8);
  }
  return result;
}

uint64_t sub_1000A6840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100642EC0);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100642EC0);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000A68D0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v14;
  uint64_t v15;
  void *Strong;
  void *v17;
  id v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  _QWORD *v34;
  void (*v35)(uint64_t (*)(uint64_t, uint64_t, char), _QWORD *, uint64_t, uint64_t);
  double v36;
  void *v37;
  void *v38;
  int v39;
  id v40;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD v54[5];
  unsigned __int8 v55;
  uint64_t v56;
  char v57;

  v8 = v7;
  sub_1000A25CC(a4, (uint64_t)v50);
  v43 = (void *)v50[0];
  v44 = v50[1];
  v45 = v50[2];
  v46 = v50[3];
  v14 = v51;
  v47 = v50[4];
  v48 = v52;
  v15 = v7 + 16;
  v49 = v53;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v7 + 16);
  if (Strong)
  {
    v17 = Strong;
    v18 = objc_msgSend(Strong, "navigationController");

    if (v18)
    {
      v40 = v18;
      v19 = swift_unknownObjectWeakLoadStrong(v15);
      if (v19)
      {
        v20 = UIViewController.canPresentDCIDrillinPopover(withAnchor:)(a4);

        if ((v20 & 1) != 0)
        {
          sub_1000A6FE8(a4);
          v19 = 2;
          v39 = 1;
LABEL_13:
          if (a1 == 1)
            v26 = 1;
          else
            v26 = 2;
          type metadata accessor for TTRIReminderListPickerAssembly(0);
          v23 = static TTRIReminderListPickerAssembly.createViewController(mode:action:store:selectedListID:showingInstructionsForMovingReminders:modalPresentationStyle:)(a2, v26, 2, a5, a3, _swiftEmptyArrayStorage, v19);
          v28 = v27;
          v30 = v29;
          sub_1000A6F78((id)v26, 2);
          ObjectType = swift_getObjectType(v28, v31);
          v33 = swift_allocObject(&unk_1005EF800, 24, 7);
          swift_weakInit(v33 + 16, v8);
          v34 = (_QWORD *)swift_allocObject(&unk_1005EF828, 40, 7);
          v34[2] = v33;
          v34[3] = a6;
          v34[4] = a7;
          v35 = *(void (**)(uint64_t (*)(uint64_t, uint64_t, char), _QWORD *, uint64_t, uint64_t))(v30 + 16);
          swift_retain();
          swift_retain();
          v35(sub_1000A6FD8, v34, ObjectType, v30);
          *(_QWORD *)&v36 = swift_release().n128_u64[0];
          if (!v39 || (v14 & 0xFE) == 0xFELL)
          {
            objc_msgSend(v40, "pushViewController:animated:", v23, 1, v36);
            sub_1000866B0(v43, v44, v45, v46, v47, v14);
            swift_unknownObjectRelease(v28);

          }
          else
          {
            v54[0] = v43;
            v54[1] = v44;
            v54[2] = v45;
            v54[3] = v46;
            v54[4] = v47;
            v55 = v14;
            v56 = v48;
            v57 = v49 & 1;
            sub_1000A2644(v43, v44, v45, v46, v47, v14);
            UIViewController.setupForAdaptivePopoverPresentation(anchoredAt:)(v54);
            v37 = (void *)swift_unknownObjectWeakLoadStrong(v15);
            if (v37)
            {
              v38 = v37;
              objc_msgSend(v37, "presentViewController:animated:completion:", v23, 1, 0);
              sub_1000866B0(v43, v44, v45, v46, v47, v14);
              sub_1000866B0(v43, v44, v45, v46, v47, v14);

            }
            else
            {
              sub_1000866B0(v43, v44, v45, v46, v47, v14);
              sub_1000866B0(v43, v44, v45, v46, v47, v14);
            }
            swift_unknownObjectRelease(v28);

          }
          goto LABEL_23;
        }
        v39 = 0;
        v49 = 0;
        v47 = 0;
        v48 = 0;
        v45 = 0;
        v46 = 0;
        v43 = 0;
        v44 = 0;
        v19 = 0;
      }
      else
      {
        v39 = 0;
        v49 = 0;
        v47 = 0;
        v48 = 0;
        v45 = 0;
        v46 = 0;
        v43 = 0;
        v44 = 0;
      }
      v14 = -2;
      goto LABEL_13;
    }
  }
  if (qword_10063D360 != -1)
    swift_once(&qword_10063D360, sub_1000A6840);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100012DC4(v21, (uint64_t)qword_100642EC0);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.fault.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to get navigation controller -- Failed to show list picker", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }
LABEL_23:

}

uint64_t sub_1000A6D40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _BYTE v16[24];

  v7 = a3 & 1;
  v8 = a4 + 16;
  swift_beginAccess(a4 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  if (!Strong)
    return a5(a2, v7);
  v10 = Strong;
  v11 = (void *)swift_unknownObjectWeakLoadStrong(Strong + 16);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "navigationController");

    if (v13)
    {
      v14 = objc_msgSend(v13, "popViewControllerAnimated:", 1);

    }
  }
  a5(a2, v7);
  return swift_release(v10);
}

void sub_1000A6E2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_100059924();
    v5 = static HLPHelpViewController.viewController(forShowing:)(a1);
    if (v5)
    {
      oslog = v5;
      objc_msgSend(v4, "presentViewController:animated:completion:");

      goto LABEL_9;
    }

  }
  if (qword_10063D360 != -1)
    swift_once(&qword_10063D360, sub_1000A6840);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100012DC4(v6, (uint64_t)qword_100642EC0);
  oslog = Logger.logObject.getter(v7);
  v8 = static os_log_type_t.fault.getter(oslog);
  if (os_log_type_enabled(oslog, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Attempted to open help with an empty view controller or HLPHelpViewController", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
LABEL_9:

}

uint64_t type metadata accessor for TTRISmartListFilterEditorRouter()
{
  return objc_opt_self(_TtC9Reminders31TTRISmartListFilterEditorRouter);
}

void sub_1000A6F78(id a1, char a2)
{
  if (!a2)

}

uint64_t sub_1000A6F88()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A6FAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A6FD8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1000A6D40(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24));
}

uint64_t sub_1000A6FE8(uint64_t a1)
{
  sub_1000A7020(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

id sub_1000A7020(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if ((~a6 & 0xFE) != 0)
    return sub_1000A2644(result, a2, a3, a4, a5, a6);
  return result;
}

uint64_t sub_1000A7034@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v36;
  char v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[12];
  _BOOL4 v53;
  _BOOL4 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  _QWORD v62[5];

  v2 = v1;
  v4 = sub_10002A750((uint64_t *)&unk_100653A00);
  __chkstk_darwin(v4);
  v6 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10002A750((uint64_t *)&unk_100665210);
  __chkstk_darwin(v7);
  v9 = &v52[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10002A750((uint64_t *)&unk_100665590);
  __chkstk_darwin(v10);
  v12 = &v52[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(void **)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group);
  if (v13)
  {
    v59 = v6;
    v60 = v9;
    v61 = a1;
    v14 = v13;
    *v12 = objc_msgSend(v14, "objectID");
    v15 = type metadata accessor for TTRListType(0);
    swift_storeEnumTagMultiPayload(v12, v15, 0);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 0, 1, v15);
    v16 = v14;
    v17 = objc_msgSend(v14, "name");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v57 = v19;
    v58 = v18;

    v56 = static TTRListColors.SmartList.all.getter();
    v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource), v21);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    v24 = v23(ObjectType, v20);
    v25 = v24;
    if (v24)
      swift_unknownObjectRelease(v24);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(ObjectType, v20);
    v27 = v26;
    if (v26)
      swift_unknownObjectRelease(v26);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 56))(v62, ObjectType, v20);
    v28 = v62[3];
    sub_1000073A0((uint64_t)v62, &qword_100649FC0);
    v29 = v23(ObjectType, v20);
    if (v29)
    {
      v31 = v29;
      v32 = v30;
      v33 = swift_getObjectType(v29, v30);
      v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v33, v32);
      swift_unknownObjectRelease(v31);
    }
    else
    {
      v55 = 0;
    }
    v36 = v28 != 0;
    v53 = v25 != 0;
    v54 = v27 != 0;
    v37 = *(_BYTE *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_hasDefaultNewReminderButton);
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_completedRemindersCount + 8))
      v38 = 0;
    else
      v38 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_completedRemindersCount);
    v39 = v16;
    v40 = objc_msgSend(v16, "name");
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v44 = type metadata accessor for TTRRemindersListViewModel.HashtagsState(0);
    v45 = v60;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v60, 1, 1, v44);
    v46 = type metadata accessor for TTRTemplatePublicLinkData(0);
    v47 = v59;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v59, 1, 1, v46);
    BYTE6(v51) = 0;
    WORD2(v51) = 1;
    LODWORD(v51) = 0;
    HIBYTE(v50) = v55 & 1;
    BYTE6(v50) = v36;
    WORD2(v50) = 512;
    BYTE3(v50) = v54;
    *(_WORD *)((char *)&v50 + 1) = v53;
    LOBYTE(v50) = 1;
    v48 = v61;
    TTRRemindersListViewModel.ListInfo.init(listType:name:color:reminderCount:sharingInfo:canCreateNewReminder:canToggleCompletedReminderVisbility:canAddSection:canClearCompletedReminders:canSaveAsTemplate:supportsEditableSections:canBePrinted:completedRemindersShown:hasDefaultNewReminderButton:completedRemindersCount:canBeDeleted:collapsedStatesAutosaveName:canCreateCustomSmartListForHashtagsState:hashtagsStateToShow:templateStatus:isOriginOfExistingTemplate:isPublicTemplatePreview:shouldCategorizeGroceryItems:isRecentlyDeletedList:iOS:macOS:)(v12, v58, v57, v56, 0, 1, 0, 3, v50, v37, v38, 1, v41, v43, 0, v45, v47, v51);

    v49 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
  }
  else
  {
    v34 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a1, 1, 1, v34);
  }
}

uint64_t sub_1000A743C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance));
}

uint64_t (*sub_1000A7478())(uint64_t a1)
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(&unk_1005EF9A0, 24, 7);
  swift_weakInit(v1 + 16, v0);
  return sub_1000AE834;
}

uint64_t sub_1000A74C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  if (swift_weakLoadStrong(v3))
  {
    sub_1000A7534(a1);
    v5 = v4;
    swift_release();
    v6 = v5 ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void sub_1000A7534(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD v10[6];

  v2 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v10[5] = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v7 = (char *)v10 - v6;
  v8 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v8);
  sub_10002B1E8(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  v9 = (char *)&loc_1000A7690 + dword_1000A79FC[swift_getEnumCaseMultiPayload(v7, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1000A76A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  char v7;
  char v8;

  sub_10001F544(v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(v0);
  swift_release();
  v6 = swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v5 - 88) + 48))(v1, 1, v3, v6) == 1)
  {
    sub_1000073A0(v1, (uint64_t *)&unk_100640EB0);
    v8 = 0;
  }
  else
  {
    sub_10001F580(v1, v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    sub_1000A7534(v2);
    v8 = v7;
    sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  return v8 & 1;
}

void sub_1000A7850()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *v1;
  *(_QWORD *)(v2 - 112) = *v1;
  v4 = objc_msgSend(v3, "entityName");
  *(_QWORD *)(v2 - 104) = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v7 = sub_100005ED8(0, &qword_1006436D8, REMListSection_ptr);
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "cdEntityName");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = *(_QWORD *)(v2 - 104);
  if (v9 == v12 && v11 == v6)
  {
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, *(_QWORD *)(v2 - 104), v6, 0);
    swift_bridgeObjectRelease(v11);
    if ((v14 & 1) == 0)
    {
      v15 = sub_100005ED8(0, &qword_1006436E0, REMSmartListSection_ptr);
      v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "cdEntityName");
      *(_QWORD *)(v2 - 120) = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v18 = v17;

      v19 = *(_QWORD *)(v2 - 120);
      v20 = v18;
      if (v19 == v12 && v18 == v6)
      {
        swift_bridgeObjectRelease_n(v6, 2);

      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, v12, v6, 0);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v20);

        if ((v21 & 1) == 0)
        {
          sub_10001F544(v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
          JUMPOUT(0x1000A782CLL);
        }
      }
      JUMPOUT(0x1000A76ACLL);
    }
  }
  sub_10001F544(v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);

  swift_bridgeObjectRelease(v6);
  JUMPOUT(0x1000A76B0);
}

_UNKNOWN **sub_1000A7A58()
{
  return &off_1005EA918;
}

uint64_t sub_1000A7A64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t (*v28)(void *, uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  int64x2_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  uint64_t (*v35)@<X0>(uint64_t@<X8>);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;

  v2 = v1;
  *(_QWORD *)&v42 = a1;
  v3 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v3);
  v5 = (void **)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - v13;
  swift_retain();
  sub_10037C4A0((uint64_t)v8);
  swift_release();
  v15 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v8, 1, v15) == 1)
  {
    result = sub_1000073A0((uint64_t)v8, (uint64_t *)&unk_100640EB0);
LABEL_17:
    v32 = 0;
    v33 = 0;
    v34 = 0uLL;
    v35 = sub_10047904C;
    v22 = v42;
    goto LABEL_18;
  }
  v40 = v10;
  v41 = v14;
  v39 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload(v8, v15) != 1)
  {
    v21 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item;
LABEL_16:
    result = sub_10001F544((uint64_t)v8, v21);
    goto LABEL_17;
  }
  v17 = (uint64_t)v8;
  v8 = v41;
  sub_10001F580(v17, (uint64_t)v41, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8((uint64_t)v8);
    v19 = v18;
    swift_release();
    if (!v19)
      goto LABEL_15;
  }
  else
  {
    sub_10002B1E8((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v5, v3) != 1)
    {
      sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
LABEL_15:
      v21 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader;
      goto LABEL_16;
    }
    v19 = *v5;
  }
  v22 = v42;
  if (v8[*(int *)(v9 + 40)] == 1)
  {

    v42 = xmmword_100522BB0;
    v24 = (uint64_t)v39;
    v23 = v40;
  }
  else
  {
    v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
    v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8);
    ObjectType = swift_getObjectType(v25, v20);
    v28 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v26 + 32);
    v29 = swift_unknownObjectRetain(v25);
    v30 = v28(v19, ObjectType, v26, v29);
    swift_unknownObjectRelease(v25);
    if (v30)
    {

      v31 = vdupq_n_s64(1uLL);
      v31.i64[0] = v30;
    }
    else
    {
      v31 = (int64x2_t)(unint64_t)v19;
    }
    v42 = (__int128)v31;
    v24 = (uint64_t)v39;
    v23 = v40;
    v8 = v41;
  }
  sub_10001F580((uint64_t)v8, v24, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  v36 = *(unsigned __int8 *)(v23 + 80);
  v37 = (v36 + 16) & ~v36;
  v33 = swift_allocObject(&unk_1005EF978, v37 + v11, v36 | 7);
  result = sub_10001F580(v24, v33 + v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  v35 = sub_1000AE7A8;
  v32 = 1;
  v34 = v42;
LABEL_18:
  *(_OWORD *)v22 = v34;
  *(_BYTE *)(v22 + 16) = v32;
  *(_QWORD *)(v22 + 24) = v35;
  *(_QWORD *)(v22 + 32) = v33;
  return result;
}

uint64_t sub_1000A7DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[4];

  v14[0] = a1;
  v1 = type metadata accessor for TTRRemindersListViewModel.ReminderID(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v7 = (char *)v14 - v6;
  v8 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(v14[0]);
  swift_release();
  swift_release();
  v11 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11) != 1)
  {
    v14[0] = v7;
    v12 = (char *)&loc_1000A7F94 + 4 * byte_100522BC0[swift_getEnumCaseMultiPayload(v10, v11)];
    __asm { BR              X10 }
  }
  return 0;
}

void sub_1000A7FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 - 112);
  sub_10001F580(v3, v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8(v5);
    v7 = v6;
    swift_release();
    sub_10001F544(v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    if (!v7)
      JUMPOUT(0x1000A7FA8);
  }
  else
  {
    sub_10002B1E8(v5, v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v2, v1) != 1)
    {
      sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
      JUMPOUT(0x1000A7FA0);
    }
    sub_10001F544(v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  }
  JUMPOUT(0x1000A7FACLL);
}

double sub_1000A81F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  _QWORD *v11;
  double result;
  uint64_t v13;

  v4 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A7534(a1);
  if ((v7 & 1) != 0)
  {
    v8 = sub_1000A8344();
    sub_10002B1E8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
    sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    if (EnumCaseMultiPayload == 2)
    {
      v10 = type metadata accessor for TTRSmartListDragAndDropPresenterCapability.MoveReminderSubjectForItem(0);
      *(_QWORD *)(a2 + 24) = v10;
      *(_QWORD *)(a2 + 32) = &off_1005F2998;
      v11 = sub_100028D70((_QWORD *)a2);
      sub_10002B1E8(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      *(_QWORD *)((char *)v11 + *(int *)(v10 + 20)) = v8;
      *((_BYTE *)v11 + *(int *)(v10 + 24)) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  else
  {
    sub_1000A840C();
    sub_1003E8E6C(a1, a2);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1000A8344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropCapability;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropCapability))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropCapability);
  }
  else
  {
    v3 = type metadata accessor for DragAndDropPresenterCapability();
    v2 = swift_allocObject(v3, 56, 7);
    v4 = swift_weakInit(v2 + 48, 0);
    swift_weakAssign(v4, v0);
    v5 = (void *)REMSmartListTypeCustom;
    *(_QWORD *)(v2 + 24) = 0;
    swift_unknownObjectWeakInit(v2 + 16, 0);
    *(_BYTE *)(v2 + 40) = 1;
    *(_QWORD *)(v2 + 24) = &off_1005EF850;
    *(_QWORD *)(v2 + 32) = v5;
    swift_unknownObjectWeakAssign(v6, v0);
    *(_QWORD *)(v0 + v1) = v2;
    v7 = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000A840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropUtils;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropUtils))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropUtils);
  }
  else
  {
    v3 = type metadata accessor for TTRShowRemindersInListDragAndDropPresenterCapability();
    v2 = swift_allocObject(v3, 32, 7);
    *(_QWORD *)(v2 + 24) = 0;
    swift_unknownObjectWeakInit(v2 + 16, 0);
    *(_QWORD *)(v2 + 24) = &off_1005EF888;
    swift_unknownObjectWeakAssign(v4, v0);
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000A84A0(void *a1)
{
  sub_1000A840C();
  LOBYTE(a1) = sub_1003E92E4(a1);
  swift_release();
  return a1 & 1;
}

double sub_1000A84DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  double result;
  uint64_t v18;

  v6 = sub_10002A750((uint64_t *)&unk_100640EB0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - v10;
  v12 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a1, (uint64_t)v11, (uint64_t *)&unk_100640EB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1000073A0((uint64_t)v11, (uint64_t *)&unk_100640EB0);
  }
  else
  {
    sub_10001F580((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    sub_1000A7534((uint64_t)v15);
    if ((v16 & 1) != 0)
    {
      sub_1000A8344();
      sub_10002B1E8((uint64_t)v15, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      sub_100125824((uint64_t)v9, a2, a3);
      swift_release();
      sub_1000073A0((uint64_t)v9, (uint64_t *)&unk_100640EB0);
      sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      return result;
    }
    sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  sub_1000A840C();
  sub_1003E94EC(a1, a2, a3);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1000A86B4@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  double result;

  sub_1000A7534(a1);
  if ((v4 & 1) != 0)
  {
    sub_1000A8344();
    sub_100125984(a1, a2);
  }
  else
  {
    sub_1000A840C();
    sub_1003E9680(a1, a2);
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000A8714(char *a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t, __n128);
  uint64_t v26;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  char *v36;
  uint64_t v37;
  void **v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  int EnumCaseMultiPayload;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ObjectType;
  uint64_t (*v49)(char *, uint64_t, uint64_t, __n128);
  __n128 v50;
  char *v51;
  id v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t inited;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t (*v71)(char *, uint64_t, uint64_t, __n128);
  __n128 v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[2];
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  void **v98;
  uint64_t v99;
  char *v100;
  char v101[40];
  char *v102;
  uint64_t v103;
  char v104[48];

  v95 = a2;
  v100 = a1;
  v92 = type metadata accessor for Date(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = (char *)type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  v4 = __chkstk_darwin(v96);
  v93 = (void **)((char *)v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v98 = (void **)((char *)v89 - v6);
  v94 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v7 = __chkstk_darwin(v94);
  v97 = (char *)v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v99 = (uint64_t)v89 - v9;
  v10 = sub_10002A750((uint64_t *)&unk_100640EB0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v89 - v14;
  v16 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)v89 - v21;
  v23 = OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_tree;
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(v100);
  swift_release();
  v24 = swift_release();
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48);
  if (v25(v15, 1, v16, v24) == 1)
  {
    v26 = (uint64_t)v15;
    return sub_1000073A0(v26, (uint64_t *)&unk_100640EB0);
  }
  v89[1] = v23;
  v29 = (uint64_t)v97;
  v28 = v98;
  v100 = v2;
  v30 = v99;
  sub_10001F580((uint64_t)v15, (uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  sub_10002B1E8((uint64_t)v22, (uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  if (swift_getEnumCaseMultiPayload(v20, v16) == 1)
  {
    sub_10001F580((uint64_t)v20, v30, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10002B1E8(v30, (uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v28, v96) != 1)
    {
      sub_10001F544(v30, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      sub_10001F544((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v35 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID;
      v34 = (uint64_t)v28;
      return sub_10001F544(v34, v35);
    }
    v31 = (char *)*v28;
    v32 = v100;
    swift_retain();
    swift_retain();
    TTRMutableTreeStorage.parent(of:)(v22);
    swift_release();
    v33 = swift_release();
    if (v25(v13, 1, v16, v33) == 1)
    {

      sub_10001F544(v99, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      sub_10001F544((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v26 = (uint64_t)v13;
      return sub_1000073A0(v26, (uint64_t *)&unk_100640EB0);
    }
    v36 = v22;
    if (swift_getEnumCaseMultiPayload(v13, v16))
    {

      sub_10001F544(v99, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      sub_10001F544((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v34 = (uint64_t)v13;
      goto LABEL_9;
    }
    v37 = v29;
    sub_10001F580((uint64_t)v13, v29, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    if (*(_QWORD *)&v32[OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance])
    {
      v38 = (void **)v31;
      swift_retain();
      sub_1000AADC8(v29);
      v40 = v39;
      swift_release();
      v42 = v95;
      if (v40)
      {
        v98 = v38;
        goto LABEL_20;
      }
    }
    else
    {
      v43 = v93;
      sub_10002B1E8(v29, (uint64_t)v93, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v43, v96);
      v42 = v95;
      if (EnumCaseMultiPayload == 1)
      {
        v98 = (void **)v31;
        v40 = (char *)*v43;
LABEL_20:
        v45 = *(unsigned __int8 *)(v37 + *(int *)(v94 + 40));
        v47 = *(_QWORD *)&v100[OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource];
        v46 = *(_QWORD *)&v100[OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8];
        ObjectType = swift_getObjectType(v47, v41);
        if (v45 == 1)
        {
          v49 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v46 + 40);
          v50 = swift_unknownObjectRetain(v47);
          v51 = (char *)v49(v40, ObjectType, v46, v50);
          swift_unknownObjectRelease(v47);
          if (v51)
          {
            v52 = objc_msgSend(v51, "customContext");
            v53 = (char *)v98;
            if (!v52)
              goto LABEL_28;
            v54 = v52;
            v55 = (void *)REMSmartListCustomContext.filter.getter();

            if (!v55)
              goto LABEL_28;
            v100 = v40;
            v57 = v90;
            Date.init()(v56);
            TTRReminderEditor.edit(toMatch:now:)(v55, v57);
            (*(void (**)(char *, uint64_t))(v91 + 8))(v57, v92);
            v58 = sub_10002A750((uint64_t *)&unk_1006415A0);
            inited = swift_initStackObject(v58, v101);
            *(_OWORD *)(inited + 16) = xmmword_100521140;
            v60 = v42;
            v61 = *(void **)(v42 + 16);
            v62 = objc_msgSend(v61, "objectID");
            *(_QWORD *)(inited + 32) = v62;
            v103 = inited;
            specialized Array._endMutation()(v62);
            v63 = v103;
            v64 = sub_100017684(v103);
            swift_bridgeObjectRelease(v63);
            v65 = type metadata accessor for TTRSmartListEditor(0);
            v102 = v51;
            v96 = v51;
            v66 = objc_msgSend(v61, "saveRequest");
            v103 = v60;
            v67 = type metadata accessor for TTRReminderEditor(0);
            v68 = sub_1000AE644();
            v69 = TTRUndoableEditing.undoManager.getter(v67, v68);
            TTROneshotEditing.init(item:saveRequest:undoManager:)(&v103, &v102, v66, v69, v65, &protocol witness table for TTRSmartListEditor);
            v70 = v53;
            TTRSmartListEditor.updateMembershipsOfReminders(withReminderIDs:destinationSectionID:initialSectionIDByReminderID:)(v64, v53, 0);

            swift_bridgeObjectRelease(v64);
            v53 = v70;
LABEL_27:
            swift_release();
            v51 = v53;
            v40 = v100;
LABEL_28:

LABEL_30:
            v87 = v99;

            sub_10001F544(v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
            v88 = v87;
LABEL_33:
            sub_10001F544(v88, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
            v35 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item;
            v34 = (uint64_t)v36;
            return sub_10001F544(v34, v35);
          }
        }
        else
        {
          v71 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v46 + 32);
          v72 = swift_unknownObjectRetain(v47);
          v73 = (char *)v71(v40, ObjectType, v46, v72);
          swift_unknownObjectRelease(v47);
          if (v73)
          {
            v100 = v40;
            v74 = sub_10002A750((uint64_t *)&unk_1006415A0);
            v75 = swift_initStackObject(v74, v104);
            *(_OWORD *)(v75 + 16) = xmmword_100521140;
            v76 = *(void **)(v42 + 16);
            v77 = objc_msgSend(v76, "objectID");
            *(_QWORD *)(v75 + 32) = v77;
            v103 = v75;
            specialized Array._endMutation()(v77);
            v78 = v103;
            v79 = sub_100017684(v103);
            swift_bridgeObjectRelease(v78);
            v80 = type metadata accessor for TTRListEditor(0);
            v102 = v73;
            v81 = v73;
            v82 = objc_msgSend(v76, "saveRequest");
            v103 = v42;
            v83 = type metadata accessor for TTRReminderEditor(0);
            v84 = sub_1000AE644();
            v85 = TTRUndoableEditing.undoManager.getter(v83, v84);
            TTROneshotEditing.init(item:saveRequest:undoManager:)(&v103, &v102, v82, v85, v80, &protocol witness table for TTRListEditor);
            v86 = v98;
            v53 = v98;
            TTRListEditor.updateMembershipsOfReminders(withReminderIDs:destinationSectionID:initialSectionIDByReminderID:)(v79, v86, 0);

            swift_bridgeObjectRelease(v79);
            goto LABEL_27;
          }
        }
        v51 = (char *)v98;
        goto LABEL_30;
      }
      v38 = (void **)v31;
      sub_10001F544((uint64_t)v43, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    }

    sub_10001F544(v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    v88 = v99;
    goto LABEL_33;
  }
  sub_10001F544((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  v34 = (uint64_t)v20;
LABEL_9:
  v35 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item;
  return sub_10001F544(v34, v35);
}

uint64_t sub_1000A8F7C(uint64_t a1)
{
  return sub_1000A8F94(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100395390);
}

uint64_t sub_1000A8F88(uint64_t a1)
{
  return sub_1000A8F94(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100397FDC);
}

uint64_t sub_1000A8F94(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v4 = sub_1000A840C();
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(v4 + 24);
    ObjectType = swift_getObjectType(Strong, v6);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v4, ObjectType, v8);
    swift_unknownObjectRelease(v7);
    swift_retain();
    v11 = a2(a1, 1, v10, v4);
    swift_release();
    swift_release_n(v4, 2);
  }
  else
  {
    if (qword_10063D748 != -1)
      swift_once(&qword_10063D748, sub_1003E9A78);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100012DC4(v12, (uint64_t)qword_100659C50);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Missing TTRShowRemindersInListDragAndDropPresenterCapabilityDelegate", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    swift_release();

    return 0;
  }
  return v11;
}

uint64_t sub_1000A9110(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  unsigned int (*v33)(__int128 *, uint64_t, uint64_t, __n128);
  uint64_t *v34;
  __int128 *v35;
  uint64_t v36;
  __n128 v37;
  int EnumCaseMultiPayload;
  BOOL v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void *, uint64_t, uint64_t, __n128);
  __n128 v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t Predicate;
  char *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void *, uint64_t, uint64_t, __n128);
  __n128 v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  ValueMetadata *v77;
  unint64_t v78;
  void *v79;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  _QWORD v96[3];
  ValueMetadata *v97;
  unint64_t v98;

  v5 = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder(0);
  v85 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v84 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v86);
  v87 = (void **)((char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v89);
  v90 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750((uint64_t *)&unk_100640EB0);
  v10 = __chkstk_darwin(v9);
  v88 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v81 - v13;
  __chkstk_darwin(v12);
  v16 = (__int128 *)((char *)&v81 - v15);
  v17 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v91 = (uint64_t)&v81 - v22;
  v92 = v2;
  v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource), v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(ObjectType, v23);
  if (v26)
  {
    v28 = v26;
    v29 = v27;
    v30 = swift_getObjectType(v26, v27);
    LOBYTE(v29) = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v29 + 56))(a1, v30, v29);
    swift_unknownObjectRelease(v28);
    if ((v29 & 1) == 0)
      goto LABEL_34;
  }
  v83 = a1;
  v82 = v5;
  v31 = v92;
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(a2);
  swift_release();
  v32 = swift_release();
  v33 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t, __n128))(v18 + 48);
  if (v33(v16, 1, v17, v32) == 1)
  {
    v34 = (uint64_t *)&unk_100640EB0;
    v35 = v16;
LABEL_5:
    sub_1000073A0((uint64_t)v35, v34);
LABEL_34:
    v67 = 0;
    return v67 & 1;
  }
  v36 = v91;
  sub_10001F580((uint64_t)v16, v91, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(a2);
  v37 = swift_release();
  if (v33((__int128 *)v14, 1, v17, v37) == 1)
  {
    sub_1000073A0((uint64_t)v14, (uint64_t *)&unk_100640EB0);
    swift_release();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v17);
    sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    swift_release();
    v39 = EnumCaseMultiPayload == 2;
    v31 = v92;
    if (v39)
    {
      swift_retain();
      swift_retain();
      v40 = (uint64_t)v88;
      TTRMutableTreeStorage.parent(of:)(v36);
      swift_release();
      v41 = swift_release();
      if (v33((__int128 *)v40, 1, v17, v41) == 1)
      {
        sub_1000073A0(v40, (uint64_t *)&unk_100640EB0);
      }
      else
      {
        sub_10001F544(v36, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        sub_10001F580(v40, v36, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      }
      v31 = v92;
    }
  }
  sub_10002B1E8(v36, (uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  if (swift_getEnumCaseMultiPayload(v21, v17) != 1)
  {
    sub_10001F544(v36, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v46 = (uint64_t)v21;
LABEL_33:
    sub_10001F544(v46, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    goto LABEL_34;
  }
  v42 = v90;
  sub_10001F580((uint64_t)v21, v90, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  if (*(_QWORD *)(v31 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8(v42);
    v44 = v43;
    swift_release();
    if (!v44)
      goto LABEL_32;
  }
  else
  {
    v47 = v87;
    sub_10002B1E8(v42, (uint64_t)v87, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v47, v86) != 1)
    {
      sub_10001F544((uint64_t)v47, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
LABEL_32:
      sub_10001F544(v42, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      v46 = v91;
      goto LABEL_33;
    }
    v44 = *v47;
  }
  v48 = v83;
  if (*(_BYTE *)(v42 + *(int *)(v89 + 40)) == 1)
  {
    v50 = *(_QWORD *)(v92 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
    v49 = *(_QWORD *)(v92 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8);
    v51 = swift_getObjectType(v50, v45);
    v52 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v49 + 40);
    v53 = swift_unknownObjectRetain(v50);
    v54 = (void *)v52(v44, v51, v49, v53);
    swift_unknownObjectRelease(v50);
    if (v54)
    {
      v55 = objc_msgSend(v54, "customContext");
      if (v55)
      {
        v56 = v55;
        v57 = (void *)REMSmartListCustomContext.filter.getter();

        if (v57)
        {
          v58 = sub_10002A750(&qword_100643708);
          v59 = swift_allocObject(v58, 72, 7);
          *(_OWORD *)(v59 + 16) = xmmword_100520250;
          v60 = sub_100010634((uint64_t)v48, v59 + 32);
          v61 = static Set<>.typesSupportedByCustomSmartList.getter(v60);
          v97 = &type metadata for TTRReminderIDsWithMatchingHashtagsProvider;
          v98 = sub_1000AE5B4();
          v96[0] = v59;
          v62 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)(v61, v96);
          swift_bridgeObjectRelease(v61);
          sub_100027F10(v96);
          *(_QWORD *)&v94 = v62;
          sub_100010634((uint64_t)v48, (uint64_t)v96);
          v93 = v62;
          v63 = sub_10002A750(&qword_100643718);
          v64 = sub_1000AE5F8();
          Predicate = Sequence<>.postFetchPredicateTypes.getter(v63, v64);
          v66 = v84;
          REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(reminder:forEvaluatingAgainst:)(v96, Predicate);
          v67 = Sequence<>.evaluate(with:)(v66, v63, v64);

          (*(void (**)(char *, uint64_t))(v85 + 8))(v66, v82);
          sub_10001F544(v42, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
          sub_10001F544(v91, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
          swift_bridgeObjectRelease(v62);
          return v67 & 1;
        }
      }

    }
  }
  v69 = *(_QWORD *)(v92 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
  v68 = *(_QWORD *)(v92 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8);
  v70 = swift_getObjectType(v69, v45);
  v71 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v68 + 32);
  v72 = swift_unknownObjectRetain(v69);
  v73 = (void *)v71(v44, v70, v68, v72);
  swift_unknownObjectRelease(v69);
  if (!v73)
  {

    goto LABEL_32;
  }
  v74 = v48[3];
  v75 = v48[4];
  sub_10001413C(v48, v74);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v75 + 176))(&v94, v74, v75);
  if (!v95)
  {

    sub_10001F544(v42, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10001F544(v91, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v34 = &qword_100649C80;
    v35 = &v94;
    goto LABEL_5;
  }
  sub_10002E37C(&v94, (uint64_t)v96);
  sub_100005ED8(0, (unint64_t *)&qword_100649E10, NSObject_ptr);
  v76 = objc_msgSend(v73, "objectID");
  v77 = v97;
  v78 = v98;
  sub_10001413C(v96, (uint64_t)v97);
  v79 = (void *)(*(uint64_t (**)(ValueMetadata *, unint64_t))(v78 + 8))(v77, v78);
  v67 = static NSObject.== infix(_:_:)(v76, v79);

  sub_10001F544(v42, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  sub_10001F544(v91, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  sub_100027F10(v96);
  return v67 & 1;
}

id sub_1000A9924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t, __n128);
  uint64_t v17;
  __n128 v18;
  id v19;
  uint64_t v21;
  void *v22;
  id *v23;
  uint64_t v24;
  id *v25;
  uint64_t v26;
  uint64_t v27;

  v24 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v24);
  v25 = (id *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v26);
  v27 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10002A750((uint64_t *)&unk_100640EB0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(a1);
  swift_release();
  v15 = swift_release();
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
  if (v16(v10, 1, v11, v15) == 1)
  {
    v17 = (uint64_t)v10;
LABEL_5:
    sub_1000073A0(v17, (uint64_t *)&unk_100640EB0);
    return 0;
  }
  sub_10001F580((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(v14);
  swift_release();
  v18 = swift_release();
  if (v16(v8, 1, v11, v18) == 1)
  {
    sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v17 = (uint64_t)v8;
    goto LABEL_5;
  }
  if (swift_getEnumCaseMultiPayload(v8, v11))
  {
    sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    sub_10001F544((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  else
  {
    v21 = v27;
    sub_10001F580((uint64_t)v8, v27, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    if (*(_BYTE *)(v21 + *(int *)(v26 + 40)) == 1)
    {
      v19 = sub_1000A9CE8(v21);
      sub_10001F544(v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      return v19;
    }
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
    {
      swift_retain();
      sub_1000AADC8(v21);
      v19 = v22;
      swift_release();
      sub_10001F544(v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      return v19;
    }
    v23 = v25;
    sub_10002B1E8(v21, (uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v19 = *v23;
      sub_10001F544(v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      return v19;
    }
    sub_10001F544((uint64_t)v23, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    sub_10001F544(v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10001F544((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  return 0;
}

id sub_1000A9CE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(void *, uint64_t, uint64_t, __n128);
  __n128 v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v27;
  id v28;
  _BYTE v29[16];

  v2 = v1;
  v4 = sub_10002A750(&qword_100642078);
  __chkstk_darwin(v4);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLists(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v11);
  v13 = (void **)&v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8(a1);
    v15 = v14;
    swift_release();
    if (!v15)
      return 0;
  }
  else
  {
    sub_10002B1E8(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v13, v11) != 1)
    {
      sub_10001F544((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
      return 0;
    }
    v15 = *v13;
  }
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8);
  ObjectType = swift_getObjectType(v17, v16);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v18 + 40);
  v21 = swift_unknownObjectRetain(v17);
  v22 = (void *)v20(v15, ObjectType, v18, v21);
  swift_unknownObjectRelease(v17);
  if (!v22)
  {
LABEL_14:

    return 0;
  }
  v23 = objc_msgSend(v22, "customContext");
  if (v23)
  {
    v24 = (void *)REMSmartListCustomContext.filter.getter();

    if (v24)
    {
      REMCustomSmartListFilterDescriptor.lists.getter(v25);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
        v27 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
        v28 = objc_msgSend(v27, "preferredDefaultListID");

        v23 = (id)REMCustomSmartListFilterDescriptor.FilterLists.alternateTargetList(for:defaultListID:)(v22, v28);
        (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);

        return v23;
      }

      sub_1000073A0((uint64_t)v6, &qword_100642078);
      return 0;
    }

    goto LABEL_14;
  }

  return v23;
}

void *sub_1000AA004()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group);
  if (v1)
  {
    sub_100005ED8(0, (unint64_t *)&qword_100649BD0, NSUserActivity_ptr);
    v2 = v1;
    v1 = (void *)static NSUserActivity.forStoringListPayload(for:)();

  }
  return v1;
}

uint64_t sub_1000AA068()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  uint64_t result;
  _QWORD v6[5];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group);
  if (v1)
  {
    v6[3] = type metadata accessor for TTRUserActivityListPayload(0);
    v6[4] = &protocol witness table for TTRUserActivityListPayload;
    v2 = sub_100028D70(v6);
    *v2 = v1;
    v3 = type metadata accessor for TTRUserActivityListPayload.State(0);
    swift_storeEnumTagMultiPayload(v2, v3, 0);
    v4 = v1;
    NSUserActivity.setPayload(_:)(v6);

    return sub_100027F10(v6);
  }
  return result;
}

void *sub_1000AA104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v27[5];

  v1 = type metadata accessor for TTRUserActivityWindowSceneRestorationPayload(0);
  __chkstk_darwin(v1);
  v3 = (_QWORD *)((char *)&v27[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group);
  if (v10)
  {
    sub_100005ED8(0, (unint64_t *)&qword_100649BD0, NSUserActivity_ptr);
    v11 = v10;
    v10 = (void *)static NSUserActivity.forStoringWindowSceneRestorationPayload()();
    v12 = v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate);
    if (Strong)
    {
      v15 = Strong;
      v16 = *(_QWORD *)(v12 + 8);
      ObjectType = swift_getObjectType(Strong, v14);
      sub_10046B304(ObjectType, v16);
      swift_unknownObjectRelease(v15);
      v18 = type metadata accessor for TTRRemindersListViewModel.Item(0);
      v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v6, 1, v18);
      if ((_DWORD)v19 != 1)
      {
        TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v19);
        sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v21 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v9, 0, 1, v21);
        goto LABEL_7;
      }
      sub_1000073A0((uint64_t)v6, (uint64_t *)&unk_100640EB0);
    }
    v20 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
LABEL_7:
    v22 = (uint64_t)v3 + *(int *)(sub_10002A750(&qword_100643700) + 48);
    *v3 = objc_msgSend(v11, "objectID");
    sub_10000735C((uint64_t)v9, v22, (uint64_t *)&unk_1006463C0);
    v23 = type metadata accessor for TTRUserActivityWindowSceneRestorationPayload.State(0);
    swift_storeEnumTagMultiPayload(v3, v23, 0);
    v27[3] = v1;
    v27[4] = &protocol witness table for TTRUserActivityWindowSceneRestorationPayload;
    v24 = sub_100028D70(v27);
    sub_10002B1E8((uint64_t)v3, (uint64_t)v24, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUserActivityWindowSceneRestorationPayload);
    NSUserActivity.setPayload(_:)(v27);

    sub_10001F544((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUserActivityWindowSceneRestorationPayload);
    sub_1000073A0((uint64_t)v9, (uint64_t *)&unk_1006463C0);
    sub_100027F10(v27);
  }
  return v10;
}

uint64_t sub_1000AA3B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  int EnumCaseMultiPayload;
  BOOL v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t (*v48)(void *, uint64_t, uint64_t, __n128);
  __n128 v49;
  void *v50;
  id v51;
  void *v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;

  v68 = a2;
  v69 = a1;
  v63 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v63);
  v64 = (void **)((char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v65);
  v66 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10002A750((uint64_t *)&unk_100640EB0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v62 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v62 - v12;
  v14 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v62 - v19;
  v67 = v2;
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(v69);
  swift_release();
  v21 = swift_release();
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v15 + 48);
  if (v22(v13, 1, v14, v21) == 1)
  {
    sub_1000073A0((uint64_t)v13, (uint64_t *)&unk_100640EB0);
    v23 = type metadata accessor for TTRAutoCompleteReminderListScope(0);
    v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
    v25 = v68;
    return v24(v25, 1, 1, v23);
  }
  v62 = v8;
  v26 = v18;
  v27 = v68;
  sub_10001F580((uint64_t)v13, (uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  v28 = v67;
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(v69);
  v29 = v14;
  v30 = swift_release();
  if (v22(v11, 1, v14, v30) == 1)
  {
    sub_1000073A0((uint64_t)v11, (uint64_t *)&unk_100640EB0);
    swift_release();
    v31 = (uint64_t)v26;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v14);
    sub_10001F544((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    swift_release();
    v33 = EnumCaseMultiPayload == 2;
    v29 = v14;
    v31 = (uint64_t)v26;
    if (v33)
    {
      swift_retain();
      swift_retain();
      v34 = (uint64_t)v62;
      TTRMutableTreeStorage.parent(of:)(v20);
      swift_release();
      v29 = v14;
      v35 = swift_release();
      if (v22((char *)v34, 1, v14, v35) == 1)
      {
        sub_1000073A0(v34, (uint64_t *)&unk_100640EB0);
      }
      else
      {
        sub_10001F544((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v29 = v14;
        sub_10001F580(v34, (uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      }
    }
  }
  sub_10002B1E8((uint64_t)v20, v31, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  if (swift_getEnumCaseMultiPayload(v31, v29) != 1)
  {
    sub_10001F544((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v43 = v31;
    v42 = v27;
LABEL_25:
    sub_10001F544(v43, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v23 = type metadata accessor for TTRAutoCompleteReminderListScope(0);
    v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
    v25 = v42;
    return v24(v25, 1, 1, v23);
  }
  v36 = v31;
  v37 = v66;
  sub_10001F580(v36, v66, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  if (*(_QWORD *)(v28 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    v38 = (uint64_t)v20;
    swift_retain();
    sub_1000AADC8(v37);
    v40 = v39;
    swift_release();
    v42 = v27;
    if (!v40)
      goto LABEL_24;
  }
  else
  {
    v38 = (uint64_t)v20;
    v44 = v64;
    sub_10002B1E8(v37, (uint64_t)v64, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    v42 = v27;
    if (swift_getEnumCaseMultiPayload(v44, v63) != 1)
    {
      sub_10001F544((uint64_t)v44, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
LABEL_24:
      sub_10001F544(v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      v43 = v38;
      goto LABEL_25;
    }
    v40 = *v44;
  }
  if (*(_BYTE *)(v37 + *(int *)(v65 + 40)) == 1)
  {
    v45 = *(_QWORD *)(v28 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
    v46 = *(_QWORD *)(v28 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8);
    ObjectType = swift_getObjectType(v45, v41);
    v48 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v46 + 40);
    v49 = swift_unknownObjectRetain(v45);
    v50 = (void *)v48(v40, ObjectType, v46, v49);
    swift_unknownObjectRelease(v45);
    if (v50)
    {
      v51 = objc_msgSend(v50, "customContext");
      if (v51)
      {
        v52 = v51;
        v53 = (char *)v42 + *(int *)(sub_10002A750(&qword_1006436F8) + 48);
        *v42 = objc_msgSend(v50, "accountID");
        v54 = REMSmartListCustomContext.filter.getter();
        if (v54)
        {
          v55 = (void *)v54;
          REMCustomSmartListFilterDescriptor.lists.getter(v54);

          sub_10001F544(v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
          sub_10001F544(v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        }
        else
        {

          sub_10001F544(v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
          sub_10001F544(v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
          v61 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLists(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v53, 1, 1, v61);
        }
        v56 = type metadata accessor for TTRAutoCompleteReminderListScope(0);
        v57 = v42;
        v58 = v56;
        v59 = 1;
        goto LABEL_31;
      }

    }
    sub_10001F544(v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    v43 = v38;
    goto LABEL_25;
  }
  sub_10001F544(v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  sub_10001F544(v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  *v42 = v40;
  v56 = type metadata accessor for TTRAutoCompleteReminderListScope(0);
  v57 = v42;
  v58 = v56;
  v59 = 0;
LABEL_31:
  swift_storeEnumTagMultiPayload(v57, v58, v59);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v42, 0, 1, v56);
}

uint64_t sub_1000AAA2C(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t (*v34)(void *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a1;
  v41 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v41);
  v2 = (void **)((char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersListViewModel.Item.SectionsContainersAndSectionCasesItem(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(v43, (uint64_t)v11, (uint64_t *)&unk_100640EB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1000073A0((uint64_t)v11, (uint64_t *)&unk_100640EB0);
    return 0;
  }
  v17 = v41;
  v16 = v42;
  v18 = v3;
  v19 = sub_10001F580((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  TTRRemindersListViewModel.Item.sectionsContainerAndSectionCasesOnly.getter(v19);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  v21 = (uint64_t)v15;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v22 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item.SectionsContainersAndSectionCasesItem;
      v23 = (uint64_t)v8;
LABEL_18:
      sub_10001F544(v23, v22);
      return 0;
    }
LABEL_17:
    v22 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item;
    v23 = (uint64_t)v15;
    goto LABEL_18;
  }
  v24 = (uint64_t)v8;
  v25 = (uint64_t)v5;
  sub_10001F580(v24, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  if (*(_QWORD *)(v16 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8((uint64_t)v5);
    v27 = v26;
    swift_release();
    if (!v27)
      goto LABEL_16;
  }
  else
  {
    sub_10002B1E8((uint64_t)v5, (uint64_t)v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v2, v17) != 1)
    {
      sub_10001F544((uint64_t)v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
LABEL_16:
      sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
      goto LABEL_17;
    }
    v27 = *v2;
  }
  v29 = v5[*(int *)(v18 + 40)];
  v30 = v16 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource;
  v31 = *(_QWORD *)(v16 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
  v32 = *(_QWORD *)(v30 + 8);
  ObjectType = swift_getObjectType(v31, v28);
  if (v29 == 1)
  {
    v34 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v32 + 40);
    v35 = swift_unknownObjectRetain(v31);
    v36 = v34(v27, ObjectType, v32, v35);

    swift_unknownObjectRelease(v31);
  }
  else
  {
    v37 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v32 + 32);
    v38 = swift_unknownObjectRetain(v31);
    v36 = v37(v27, ObjectType, v32, v38);
    swift_unknownObjectRelease(v31);

  }
  sub_10001F544(v25, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  sub_10001F544(v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  return v36;
}

void sub_1000AADC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v2 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B1E8(a1, (uint64_t)v4, v5);
  v6 = (char *)&loc_1000AAE4C + *((int *)qword_1000AB288 + swift_getEnumCaseMultiPayload(v4, v2));
  __asm { BR              X10 }
}

uint64_t sub_1000AAE5C()
{
  uint64_t v0;

  sub_10001F544(v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
  return 0;
}

uint64_t sub_1000AB2B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(void *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v4);
  v6 = (void **)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8(a1);
    v8 = v7;
    swift_release();
    if (!v8)
      return 0;
  }
  else
  {
    sub_10002B1E8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v6, v4) != 1)
    {
      sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
      return 0;
    }
    v8 = *v6;
  }
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8);
  ObjectType = swift_getObjectType(v11, v9);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v10 + 40);
  v14 = swift_unknownObjectRetain(v11);
  v15 = v13(v8, ObjectType, v10, v14);

  swift_unknownObjectRelease(v11);
  return v15;
}

void sub_1000AB3E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropUtils));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource____lazy_storage___dragAndDropCapability));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance));

}

uint64_t sub_1000AB440()
{
  uint64_t v0;

  v0 = sub_10046B320();
  swift_release();
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource));
  swift_release();

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000AB4C0()
{
  return type metadata accessor for TTRShowGroupViewModelSource(0);
}

uint64_t type metadata accessor for TTRShowGroupViewModelSource(uint64_t a1)
{
  uint64_t result;

  result = qword_100642FD8;
  if (!qword_100642FD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTRShowGroupViewModelSource);
  return result;
}

uint64_t sub_1000AB504(uint64_t a1)
{
  _QWORD v2[7];

  v2[0] = &unk_100522C10;
  v2[1] = &unk_100522C28;
  v2[2] = &unk_100522C28;
  v2[3] = &unk_100522C40;
  v2[4] = &unk_100522C58;
  v2[5] = &unk_100522C28;
  v2[6] = &unk_100522C28;
  return swift_updateClassMetadata2(a1, 256, 7, v2, a1 + 1336);
}

uint64_t sub_1000AB568(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  char v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  id v25;
  uint64_t v27;

  v2 = v1;
  v4 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "objectID");
  v8 = OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group;
  v9 = *(void **)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group);
  if (!v9)
  {
    if (v7)
      goto LABEL_9;
    v16 = 0;
LABEL_13:
    *(_QWORD *)(v2 + v8) = a1;

    v25 = a1;
    sub_1000A7034((uint64_t)v6);
    sub_10046ADD4((uint64_t)v6);
    return sub_1000073A0((uint64_t)v6, &qword_100649CA0);
  }
  v10 = objc_msgSend(v9, "objectID");
  v11 = v10;
  if (!v7)
  {
    v7 = v10;
    if (v10)
      goto LABEL_9;
    v16 = *(void **)(v2 + v8);
    goto LABEL_13;
  }
  if (v10)
  {
    sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
    v12 = v7;
    v13 = static NSObject.== infix(_:_:)(v12, v11);

    v14 = *(void **)(v2 + v8);
    *(_QWORD *)(v2 + v8) = a1;

    v15 = a1;
    sub_1000A7034((uint64_t)v6);
    sub_10046ADD4((uint64_t)v6);
    if ((v13 & 1) != 0)
      return sub_1000073A0((uint64_t)v6, &qword_100649CA0);
    goto LABEL_10;
  }
LABEL_9:

  v17 = *(void **)(v2 + v8);
  *(_QWORD *)(v2 + v8) = a1;

  v18 = a1;
  sub_1000A7034((uint64_t)v6);
  sub_10046ADD4((uint64_t)v6);
LABEL_10:
  v19 = v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v19);
  if (Strong)
  {
    v22 = Strong;
    v23 = *(_QWORD *)(v19 + 8);
    ObjectType = swift_getObjectType(Strong, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 88))(1, ObjectType, v23);
    swift_unknownObjectRelease(v22);
  }
  return sub_1000073A0((uint64_t)v6, &qword_100649CA0);
}

void sub_1000AB748(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t Strong;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67[2];
  _QWORD v68[7];

  v4 = v3;
  v60 = a3;
  v7 = type metadata accessor for TTRRemindersListTreeViewModel.Section(0);
  v65 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v66 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v9);
  v59 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10002A750(&qword_1006436C0);
  v12 = __chkstk_darwin(v11);
  v64 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (unint64_t *)((char *)&v59 - v15);
  __chkstk_darwin(v14);
  v18 = (char *)&v59 - v17;
  v19 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v19);
  v62 = (uint64_t)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for REMRemindersListDataView.ListsModel(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v26 = *(void **)(v3 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group);
    *(_QWORD *)(v4 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group) = a1;
    v27 = a1;

  }
  v28 = REMRemindersListDataView.GroupModel.listsModel.getter(v23);
  v29 = REMRemindersListDataView.ListsModel.completedRemindersCount.getter(v28);
  v63 = a2;
  v31 = v30;
  v32 = v4;
  v33 = *(void (**)(char *, uint64_t))(v22 + 8);
  v33(v25, v21);
  v34 = v32 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_completedRemindersCount;
  *(_QWORD *)v34 = v29;
  *(_BYTE *)(v34 + 8) = v31 & 1;
  v61 = v32;
  v35 = sub_1000A7034(v62);
  v36 = REMRemindersListDataView.GroupModel.listsModel.getter(v35);
  v37 = REMRemindersListDataView.ListsModel.groups.getter(v36);
  v33(v25, v21);
  v68[0] = _swiftEmptyArrayStorage;
  sub_1003D83CC(0, 0, 0);
  v38 = v68[0];
  v39 = *(_QWORD *)(v37 + 16);
  swift_bridgeObjectRetain(v37);
  v63 = v39;
  if (v39)
  {
    v40 = 0;
    while (v40 < *(_QWORD *)(v37 + 16))
    {
      v41 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
      v42 = *(_QWORD *)(v41 - 8);
      v43 = &v64[*(int *)(v11 + 48)];
      (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v43, v37+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v40, v41);
      v44 = (char *)v16 + *(int *)(v11 + 48);
      *v16 = v40;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v44, v43, v41);
      sub_10000F614((uint64_t)v16, (uint64_t)v18, &qword_1006436C0);
      sub_1000ABC84(v18, v66);
      sub_1000073A0((uint64_t)v18, &qword_1006436C0);
      v38 = v68[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v68[0]) & 1) == 0)
      {
        sub_1003D83CC(0, *(_QWORD *)(v38 + 16) + 1, 1);
        v38 = v68[0];
      }
      v46 = *(_QWORD *)(v38 + 16);
      v45 = *(_QWORD *)(v38 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_1003D83CC(v45 > 1, v46 + 1, 1);
        v38 = v68[0];
      }
      ++v40;
      *(_QWORD *)(v38 + 16) = v46 + 1;
      sub_10001F580(v66, v38+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(_QWORD *)(v65 + 72) * v46, type metadata accessor for TTRRemindersListTreeViewModel.Section);
      if (v63 == v40)
        goto LABEL_11;
    }
    __break(1u);
    swift_bridgeObjectRelease(v37);
    swift_release();
    __break(1u);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease_n(v37, 2);
    v47 = type metadata accessor for TTRRemindersListObjectIDAndSectionIDCombinedReminderIDProvider();
    v48 = swift_allocObject(v47, 16, 7);
    v49 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    v50 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v59, 1, 1, v49);
    v68[3] = v47;
    v68[4] = &off_100604200;
    v68[0] = v48;
    sub_100010634((uint64_t)v68, (uint64_t)v67);
    v51 = swift_allocObject(&unk_1005EF928, 72, 7);
    *(_QWORD *)(v51 + 16) = v38;
    sub_10002E37C(v67, v51 + 24);
    v52 = v61;
    *(_QWORD *)(v51 + 64) = v61;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10047C8F8(1, v62, (uint64_t (*)(uint64_t))sub_10003E360, v51, v60, 0, v50);
    swift_release();
    sub_100027F10(v68);
    swift_release();
    sub_1000073A0(v50, (uint64_t *)&unk_100640EB0);
    swift_release();
    v53 = v52 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v52 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate);
    if (Strong)
    {
      v56 = Strong;
      v57 = *(_QWORD *)(v53 + 8);
      ObjectType = swift_getObjectType(Strong, v55);
      (*(void (**)(uint64_t, uint64_t))(v57 + 120))(ObjectType, v57);
      swift_unknownObjectRelease(v56);
    }
    sub_1000073A0(v62, &qword_100649CA0);
  }
}

uint64_t sub_1000ABC84@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[4];
  _OWORD v48[6];
  _OWORD v49[2];
  _OWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[144];

  v42 = a2;
  v39 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v39);
  v38 = (uint64_t *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_1006436C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(v7 + 48);
  v15 = &v9[v14];
  v16 = *(_QWORD *)a1;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, &a1[v14], v10);
  v40 = v11;
  v41 = v10;
  v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v15, v10);
  v18 = (void *)REMRemindersListDataView.ListsModel.Sublist.listColor.getter(v17);
  type metadata accessor for TTRListColors(0);
  static TTRListColors.color(for:)(v50, v18);
  v36 = v50[1];
  v37 = v50[0];
  v20 = v51;
  v19 = v52;
  v21 = v53;

  *(_QWORD *)&v43 = REMRemindersListDataView.ListsModel.Sublist.listName.getter();
  *((_QWORD *)&v43 + 1) = v22;
  if (v16)
    v23 = 3;
  else
    v23 = 2;
  v44 = v37;
  v45 = v36;
  *(_QWORD *)&v46 = v20;
  *((_QWORD *)&v46 + 1) = v19;
  LOBYTE(v47[0]) = v21;
  *(_WORD *)((char *)v47 + 1) = 258;
  BYTE3(v47[0]) = 0;
  BYTE4(v47[0]) = v23;
  *(_OWORD *)((char *)v47 + 8) = 0u;
  *(_OWORD *)((char *)&v47[1] + 8) = 0u;
  *(_OWORD *)((char *)&v47[2] + 8) = 0u;
  WORD4(v47[3]) = 255;
  v24 = sub_1000AD9D0((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B764);
  v25 = REMRemindersListDataView.ListsModel.Sublist.listID.getter(v24);
  v27 = v38;
  v26 = v39;
  *v38 = v25;
  swift_storeEnumTagMultiPayload(v27, v26, 1);
  v48[4] = v47[0];
  v48[5] = v47[1];
  v49[0] = v47[2];
  *(_OWORD *)((char *)v49 + 10) = *(_OWORD *)((char *)&v47[2] + 10);
  v48[0] = v43;
  v48[1] = v44;
  v48[2] = v45;
  v48[3] = v46;
  TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:)((Swift::OpaquePointer)v48);
  sub_10000F614((uint64_t)v48, (uint64_t)v54, &qword_100649B60);
  v28 = sub_10003E134((uint64_t)&v43);
  v29 = REMRemindersListDataView.ListsModel.Sublist.isCustomSmartList.getter(v28);
  v30 = TTRRemindersListViewModel.SectionHeader.init(id:title:isVisible:isTappable:isTitleEditable:isCollapsable:isCustomSmartList:listObjectID:)(v27, v54, 1, 0, 0, 0, v29 & 1, 0);
  LOBYTE(v27) = REMRemindersListDataView.ListsModel.Sublist.isCustomSmartList.getter(v30);
  v31 = REMRemindersListDataView.ListsModel.Sublist.reminders.getter();
  v32 = v31;
  if ((v27 & 1) != 0)
  {
    v33 = Array<A>.replacingSubtasksWithNil()(v31);
    swift_bridgeObjectRelease(v32);
    v32 = v33;
  }
  sub_10003E230((uint64_t)&v43);
  sub_1000AD9D0((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B328);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
  v34 = v42;
  sub_10001F580((uint64_t)v6, v42, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  result = type metadata accessor for TTRRemindersListTreeViewModel.Section(0);
  *(_QWORD *)(v34 + *(int *)(result + 20)) = v32;
  *(_BYTE *)(v34 + *(int *)(result + 24)) = 0;
  return result;
}

uint64_t sub_1000ABFB0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  swift_retain();
  v3 = sub_10003D3E4(a1);
  swift_release();
  v4 = v1 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate);
  if (!Strong)
    return swift_bridgeObjectRelease(v3);
  v7 = Strong;
  v8 = *(_QWORD *)(v4 + 8);
  ObjectType = swift_getObjectType(Strong, v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v3, ObjectType, v8);
  swift_bridgeObjectRelease(v3);
  return swift_unknownObjectRelease(v7);
}

uint64_t sub_1000AC06C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t Strong;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  void (*v56)(void *, _QWORD, uint64_t, uint64_t);
  char *v57;
  id v58;
  uint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66[2];
  _QWORD v67[5];

  v4 = v3;
  v64 = a3;
  v7 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10002A750(&qword_100649CA0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v60 - v19;
  if (a1)
  {
    v21 = *(void **)(v4 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group);
    *(_QWORD *)(v4 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_group) = a1;
    v22 = a1;

  }
  v65 = a2;
  v23 = REMRemindersListDataView.ListsSectionsModel.completedRemindersCount.getter(v18);
  v24 = v4 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_completedRemindersCount;
  *(_QWORD *)v24 = v23;
  *(_BYTE *)(v24 + 8) = v25 & 1;
  sub_1000A7034((uint64_t)v20);
  sub_10000735C((uint64_t)v20, (uint64_t)v17, &qword_100649CA0);
  v26 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v17, 1, v26) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100649CA0);
  }
  else
  {
    v27 = v17[*(int *)(v26 + 64)];
    v28 = sub_10001F544((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    if (v27 == 2)
    {
      v63 = v9;
      v29 = REMRemindersListDataView.ListsSectionsModel.lists.getter(v28);
      v67[0] = _swiftEmptyArrayStorage;
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v61 = v20;
        v62 = a1;
        v31 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        v60 = v29;
        v32 = v29 + v31;
        v33 = *(_QWORD *)(v11 + 72);
        v34 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v11 + 16);
        do
        {
          v35 = v34(v13, v32, v10);
          v36 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter(v35);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
          sub_100450B88(v36);
          v32 += v33;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease(v60);
        v37 = (_QWORD *)v67[0];
        v20 = v61;
        a1 = v62;
      }
      else
      {
        swift_bridgeObjectRelease(v29);
        v37 = _swiftEmptyArrayStorage;
      }
      v38 = type metadata accessor for TTRRemindersListViewModelSourceSectionsContext();
      v39 = swift_allocObject(v38, 160, 7);
      v40 = swift_retain();
      *(_QWORD *)(v4 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance) = sub_1000ADA10(v40, (uint64_t)v37, 0, 0, 1, (uint64_t)&_swiftEmptySetSingleton, v39);
      v9 = v63;
      goto LABEL_13;
    }
  }
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance) = 0;
LABEL_13:
  v41 = v64;
  swift_release();
  v43 = REMRemindersListDataView.ListsSectionsModel.lists.getter(v42);
  swift_retain();
  v44 = sub_1000AE28C(v43, v4);
  swift_bridgeObjectRelease(v43);
  swift_release();
  v45 = type metadata accessor for TTRRemindersListObjectIDAndSectionIDCombinedReminderIDProvider();
  v46 = swift_allocObject(v45, 16, 7);
  v47 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v9, 1, 1, v47);
  v67[3] = v45;
  v67[4] = &off_100604200;
  v67[0] = v46;
  sub_100010634((uint64_t)v67, (uint64_t)v66);
  v48 = (uint64_t)v9;
  v49 = swift_allocObject(&unk_1005EF950, 72, 7);
  *(_QWORD *)(v49 + 16) = v44;
  sub_10002E37C(v66, v49 + 24);
  *(_QWORD *)(v49 + 64) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v44);
  sub_10047C8F8(1, (uint64_t)v20, (uint64_t (*)(uint64_t))sub_1000AE55C, v49, v41, 0, v48);
  swift_release();
  sub_100027F10(v67);
  swift_bridgeObjectRelease(v44);
  sub_1000073A0(v48, (uint64_t *)&unk_100640EB0);
  swift_release();
  if (a1)
  {
    v50 = v4 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate);
    if (Strong)
    {
      v53 = Strong;
      v54 = *(_QWORD *)(v50 + 8);
      ObjectType = swift_getObjectType(Strong, v52);
      v56 = *(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 96);
      v57 = v20;
      v58 = a1;
      v56(a1, 0, ObjectType, v54);

      v20 = v57;
      swift_unknownObjectRelease(v53);
    }
  }
  return sub_1000073A0((uint64_t)v20, &qword_100649CA0);
}

uint64_t sub_1000AC4FC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t result;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD v58[6];
  _OWORD v59[2];
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[4];
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  char v69;
  _BYTE v70[144];
  uint64_t v71;

  v56 = a2;
  v71 = a3;
  v52 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v52);
  v53 = (uint64_t *)((char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v5);
  v57 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType(0);
  v8 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  v51 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10002A750(&qword_1006436C8);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(int *)(v11 + 48);
  v19 = &v13[v18];
  v20 = *(_QWORD *)a1;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, &a1[v18], v14);
  v54 = v15;
  v55 = v14;
  v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v19, v14);
  v22 = (void *)REMRemindersListDataView.ListsSectionsModel.List.listColor.getter(v21);
  type metadata accessor for TTRListColors(0);
  static TTRListColors.color(for:)(v66, v22);
  v48 = v66[1];
  v49 = v66[0];
  v24 = v67;
  v23 = v68;
  v25 = v69;

  *(_QWORD *)&v61 = REMRemindersListDataView.ListsSectionsModel.List.listName.getter();
  *((_QWORD *)&v61 + 1) = v26;
  if (v20)
    v27 = 3;
  else
    v27 = 2;
  v62 = v49;
  v63 = v48;
  *(_QWORD *)&v64 = v24;
  *((_QWORD *)&v64 + 1) = v23;
  LOBYTE(v65[0]) = v25;
  *(_WORD *)((char *)v65 + 1) = 0;
  BYTE3(v65[0]) = 0;
  BYTE4(v65[0]) = v27;
  *(_OWORD *)((char *)v65 + 8) = 0u;
  *(_OWORD *)((char *)&v65[1] + 8) = 0u;
  *(_OWORD *)((char *)&v65[2] + 8) = 0u;
  WORD4(v65[3]) = 255;
  v60 = 0;
  v28 = sub_1000AD9D0((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B764);
  v29 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter(v28);
  REMRemindersListDataView.ListsSectionsModel.List.listType.getter();
  v30 = v50;
  v31 = (*(uint64_t (**)(char *, uint64_t))(v51 + 88))(v10, v50);
  if ((_DWORD)v31 == enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:))
  {
    v32 = 0;
LABEL_8:
    v33 = v56;
LABEL_14:
    v40 = REMRemindersListDataView.ListsSectionsModel.List.listID.getter(v31);
    v41 = v52;
    v42 = v53;
    *v53 = v40;
    swift_storeEnumTagMultiPayload(v42, v41, 1);
    v58[4] = v65[0];
    v58[5] = v65[1];
    v59[0] = v65[2];
    *(_OWORD *)((char *)v59 + 10) = *(_OWORD *)((char *)&v65[2] + 10);
    v58[0] = v61;
    v58[1] = v62;
    v58[2] = v63;
    v58[3] = v64;
    TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:)((Swift::OpaquePointer)v58);
    sub_10000F614((uint64_t)v58, (uint64_t)v70, &qword_100649B60);
    v43 = (uint64_t)v57;
    v44 = TTRRemindersListViewModel.SectionHeader.init(id:title:isVisible:isTappable:isTitleEditable:isCollapsable:isCustomSmartList:listObjectID:)(v42, v70, 1, 0, 0, 0, v32, 0);
    __chkstk_darwin(v44);
    *((_QWORD *)&v48 - 4) = v17;
    *((_QWORD *)&v48 - 3) = v66;
    *((_QWORD *)&v48 - 2) = v33;
    *((_QWORD *)&v48 - 1) = &v60;
    sub_10003E134((uint64_t)&v61);
    v45 = sub_1000ADFE4(v29, (void (*)(_QWORD, char *))sub_1000AE56C, (uint64_t)(&v48 - 3));
    sub_10003E230((uint64_t)&v61);
    swift_bridgeObjectRelease(v29);
    sub_1000AD9D0((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B328);
    v46 = v71;
    sub_10001F580(v43, v71, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    *(_QWORD *)(v46 + *(int *)(type metadata accessor for TTRRemindersListTreeViewModel.SectionsContainer(0) + 20)) = v45;
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v17, v55);
  }
  if ((_DWORD)v31 == enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.customSmartList(_:))
  {
    v32 = 1;
    v60 = 1;
    goto LABEL_8;
  }
  v33 = v56;
  if ((_DWORD)v31 == enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.grocery(_:))
  {
    v34 = *(id *)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor(v31);
    v35 = (void *)REMRemindersListDataView.ListsSectionsModel.List.listID.getter(v34);
    v36 = TTRUserDefaults.shouldHideEmptySectionsInGroceryList(with:)();

    if ((v36 & 1) != 0)
    {
      v37 = *(_QWORD *)(v33 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance);
      if (v37)
      {
        swift_retain();
        v38 = swift_bridgeObjectRelease(v29);
        v39 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter(v38);
        v29 = sub_1000ADB74(v39, v37);
        swift_bridgeObjectRelease(v39);
        swift_release();
      }
    }
    v32 = 0;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v29);
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v30, v30);
  __break(1u);
  return result;
}

uint64_t sub_1000AC9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  __int16 v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  _QWORD v81[6];
  unsigned __int8 v82;
  _QWORD v83[6];
  unsigned __int8 v84;
  _BYTE v85[136];

  v57 = a5;
  v58 = a6;
  v59 = a2;
  v41 = a1;
  v56 = a4;
  sub_1000AE578(a4, (uint64_t)v83);
  v43 = v83[0];
  v44 = v83[1];
  v51 = v83[2];
  v52 = v83[3];
  v53 = v83[4];
  v54 = v83[5];
  v55 = v84;
  v7 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v15 = __chkstk_darwin(v14);
  v46 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a3;
  v17 = (void *)REMRemindersListDataView.ListsSectionsModel.List.listColor.getter(v15);
  type metadata accessor for TTRListColors(0);
  static TTRListColors.color(for:)(v81, v17);
  v18 = v81[0];
  v45 = v81[1];
  v47 = v81[2];
  v48 = v81[3];
  v19 = v81[5];
  v49 = v81[4];
  v50 = v82;

  REMRemindersListDataView.SectionLite.type.getter(v20);
  v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v13, v10);
  if (v21 == enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
    v22 = *v13;
    v23 = v13[1];
    v24 = v13[2];
    swift_bridgeObjectRelease(v13[4]);
    if (v41)
      v25 = 3;
    else
      v25 = 2;
    *v9 = v22;
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v62 = v23;
    v63 = v24;
    v64 = v43;
    v65 = v44;
    v66 = v51;
    v67 = v52;
    v68 = v53;
    v69 = v54;
    v70 = v55;
    LOWORD(v71) = 258;
    BYTE2(v71) = 0;
    HIBYTE(v71) = v25;
    v72 = v60;
    v73 = v61;
    v74 = v18;
    v75 = v45;
    v76 = v47;
    v77 = v48;
    v78 = v49;
    v79 = v19;
    v80 = v50;
    TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:)((Swift::OpaquePointer)&v62);
    sub_10000F614((uint64_t)&v62, (uint64_t)v85, &qword_100649B60);
    v26 = (uint64_t)v46;
    TTRRemindersListViewModel.SectionHeader.init(id:title:isVisible:isTappable:isTitleEditable:isCollapsable:isCustomSmartList:listObjectID:)(v9, v85, 1, 0, 1, 1, 0, 0);
    sub_1000AD9D0((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B764);
    v27 = sub_1000AD9D0(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B764);
  }
  else
  {
    v40 = v18;
    v41 = v19;
    v28 = v43;
    v29 = v44;
    v30 = v56;
    v26 = (uint64_t)v46;
    if (v21 != enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v10, v10);
      __break(1u);
      return result;
    }
    v31 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter();
    v32 = *(_QWORD *)(v31 + 16);
    swift_bridgeObjectRelease(v31);
    sub_1000AD9D0((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B764);
    v33 = sub_1000AD9D0(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B764);
    *v9 = REMRemindersListDataView.ListsSectionsModel.List.listID.getter(v33);
    swift_storeEnumTagMultiPayload(v9, v7, 8);
    v62 = 0;
    v63 = 0xE000000000000000;
    v64 = v28;
    v65 = v29;
    v66 = v51;
    v67 = v52;
    v68 = v53;
    v69 = v54;
    v70 = v55;
    v71 = 50331906;
    v72 = v60;
    v73 = v61;
    v74 = v40;
    v75 = v45;
    v76 = v47;
    v77 = v48;
    v78 = v49;
    v79 = v41;
    v80 = v50;
    TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:)((Swift::OpaquePointer)&v62);
    sub_10000F614((uint64_t)&v62, (uint64_t)v85, &qword_100649B60);
    v27 = TTRRemindersListViewModel.SectionHeader.init(id:title:isVisible:isTappable:isTitleEditable:isCollapsable:isCustomSmartList:listObjectID:)(v9, v85, v32 > 1, 0, 0, v32 > 1, 0, 0);
  }
  v34 = *v57;
  v35 = REMRemindersListDataView.SectionLite.reminders.getter(v27);
  v36 = v35;
  if (v34 == 1)
  {
    v37 = Array<A>.replacingSubtasksWithNil()(v35);
    sub_1000AD9D0((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B328);
    swift_bridgeObjectRelease(v36);
    v36 = v37;
  }
  else
  {
    sub_1000AD9D0((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B328);
  }
  v38 = v58;
  sub_10001F580(v26, v58, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  result = type metadata accessor for TTRRemindersListTreeViewModel.Section(0);
  *(_QWORD *)(v38 + *(int *)(result + 20)) = v36;
  *(_BYTE *)(v38 + *(int *)(result + 24)) = 0;
  return result;
}

double sub_1000ACEA4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t (*v16)(void *, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  v3 = v2;
  v6 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v6);
  v8 = (void **)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8(a1);
    v10 = v9;
    swift_release();
    if (!v10)
      goto LABEL_10;
  }
  else
  {
    sub_10002B1E8(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v8, v6) != 1)
    {
      sub_10001F544((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
      goto LABEL_10;
    }
    v10 = *v8;
  }
  v12 = v3 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource;
  v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
  v14 = *(_QWORD *)(v12 + 8);
  ObjectType = swift_getObjectType(v13, v11);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v14 + 32);
  v17 = swift_unknownObjectRetain(v13);
  v18 = v16(v10, ObjectType, v14, v17);
  swift_unknownObjectRelease(v13);
  if (v18)
  {
    *(_QWORD *)(a2 + 24) = &type metadata for TTRShowRemindersInListDragAndDropREMListTarget;
    *(_QWORD *)(a2 + 32) = &off_1005EC910;

    *(_QWORD *)a2 = v18;
    return result;
  }

LABEL_10:
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_1000AD010()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_tree));
}

void sub_1000AD024()
{
  sub_1000ADE78();
}

void *sub_1000AD03C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  void *v7;
  _BYTE v9[24];

  v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_remReminderByObjectID);
  swift_beginAccess(v4, v9, 0, 0);
  v5 = *v4;
  v6 = a2;
  swift_bridgeObjectRetain(v5);
  v7 = sub_1004781F8(v6, v5);

  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t sub_1000AD0C0(uint64_t a1, void *a2)
{
  return sub_1000ADAC4(a2);
}

uint64_t sub_1000AD0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance);
  if (!v3)
    return 0;
  swift_retain();
  v5 = (_QWORD *)sub_1003504B4((uint64_t)_swiftEmptyArrayStorage);
  swift_retain();
  v6 = sub_1001BB050(v5, a2);
  swift_release_n(v3, 2);
  return v6;
}

void *sub_1000AD154()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

uint64_t sub_1000AD184(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v14;

  v4 = sub_10002A750(&qword_1006436F0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001413C(a1, v9);
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);

  if (v11)
  {
    sub_10002B1E8(a2, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v12 = (char *)&loc_1000AD2C0 + 4 * byte_100522BCC[swift_getEnumCaseMultiPayload(v8, v6)];
    __asm { BR              X10 }
  }
  return 0;
}

void sub_1000AD2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  sub_10001F580(v3, v1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v1, ObjectType, v7);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    if (qword_10063D3F0 != -1)
      swift_once(&qword_10063D3F0, sub_100125F50);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100012DC4(v9, (uint64_t)qword_1006476C0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing TTRSmartListDragAndDropPresenterCapabilityDelegate", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v0, 1, 1, v14);
  }
  sub_10001F544(v1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  v15 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v0, 1, v15);
  sub_1000073A0(v0, &qword_1006436F0);
  JUMPOUT(0x1000AD2D4);
}

id sub_1000AD468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;

  v36 = a5;
  v34 = a4;
  v32 = a2;
  v33 = a3;
  v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10002A750((uint64_t *)&unk_100649B50);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a1, (uint64_t)v12, (uint64_t *)&unk_100640EB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_1000073A0((uint64_t)v12, (uint64_t *)&unk_100640EB0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
LABEL_7:
    sub_1000073A0((uint64_t)v15, (uint64_t *)&unk_100649B50);
    goto LABEL_8;
  }
  v31 = v19;
  v20 = v35;
  v22 = v32;
  v21 = v33;
  v23 = v34;
  sub_10002B1E8((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  if (swift_getEnumCaseMultiPayload(v9, v6) == 1)
  {
    sub_10001F580((uint64_t)v9, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    v24 = 0;
  }
  else
  {
    sub_10001F544((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v24 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v24, 1, v16);
  sub_10001F544((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    goto LABEL_7;
  v27 = (uint64_t)v31;
  sub_10001F580((uint64_t)v15, (uint64_t)v31, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  if (!swift_weakLoadStrong(v20 + 48))
  {
    sub_10001F544(v27, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    goto LABEL_8;
  }
  v28 = sub_1000AB2B0(v27);
  swift_release();
  sub_10001F544(v27, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  if (!v28)
  {
LABEL_8:
    v25 = type metadata accessor for TTRRemindersListMovingRemindersParams(0);
    return (id)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v36, 1, 1, v25);
  }
  v29 = v36;
  *v36 = v22;
  v29[1] = v28;
  v29[2] = v21;
  *((_BYTE *)v29 + 24) = v23;
  v30 = type metadata accessor for TTRRemindersListMovingRemindersParams(0);
  swift_storeEnumTagMultiPayload(v29, v30, 3);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
  swift_bridgeObjectRetain(v22);
  return sub_1000898F4(v21, v23);
}

uint64_t sub_1000AD798()
{
  uint64_t v0;

  return swift_weakDestroy(v0 + 48);
}

uint64_t sub_1000AD7A0()
{
  uint64_t v0;

  sub_1000381C8(v0 + 16);

  swift_weakDestroy(v0 + 48);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for DragAndDropPresenterCapability()
{
  return objc_opt_self(_TtC9RemindersP33_2F75381A207B48355FCF601EE15C651930DragAndDropPresenterCapability);
}

uint64_t sub_1000AD7F4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t (*v15)(void *, uint64_t, uint64_t, __n128);
  __n128 v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v6);
  v8 = (void **)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance))
  {
    swift_retain();
    sub_1000AADC8(a1);
    v10 = v9;
    swift_release();
    if (!v10)
      goto LABEL_13;
  }
  else
  {
    sub_10002B1E8(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    if (swift_getEnumCaseMultiPayload(v8, v6) != 1)
    {
      sub_10001F544((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
      goto LABEL_13;
    }
    v10 = *v8;
  }
  v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource);
  v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_groupDataModelSource + 8);
  ObjectType = swift_getObjectType(v12, v11);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(v13 + 40);
  v16 = swift_unknownObjectRetain(v12);
  v17 = (void *)v15(v10, ObjectType, v13, v16);
  swift_unknownObjectRelease(v12);
  if (!v17)
  {
LABEL_12:

    goto LABEL_13;
  }
  v18 = objc_msgSend(v17, "customContext");
  if (!v18)
  {

    goto LABEL_12;
  }
  v19 = v18;
  v20 = REMSmartListCustomContext.filter.getter();

  if (v20)
  {
    *a2 = v20;
    v21 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
    swift_storeEnumTagMultiPayload(a2, v21, 2);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a2, 0, 1, v21);
  }
LABEL_13:
  v23 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
}

uint64_t sub_1000AD9D0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_1000ADA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  *(_QWORD *)(a7 + 64) = 0;
  *(_QWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  v14 = swift_unknownObjectWeakInit(a7 + 56, 0);
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 144) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_QWORD *)(a7 + 64) = &off_1006090A0;
  swift_unknownObjectWeakAssign(v14, a1);
  swift_release(a1);
  *(_QWORD *)(a7 + 72) = a2;
  *(_QWORD *)(a7 + 88) = a3;
  if (a4)
    a2 = a4;
  else
    swift_bridgeObjectRetain(a2);
  *(_QWORD *)(a7 + 80) = a2;
  *(_QWORD *)(a7 + 40) = a6;
  *(_QWORD *)(a7 + 48) = a5;
  return a7;
}

uint64_t sub_1000ADAC4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders27TTRShowGroupViewModelSource_sectionsContextInstance);
  if (!v2)
    return 0;
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 56);
  v6 = Strong;
  if (Strong)
  {
    v7 = *(_QWORD *)(v2 + 64);
    ObjectType = swift_getObjectType(Strong, v5);
    v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    swift_retain(v2);
    v10 = v9(ObjectType, v7);
    swift_unknownObjectRelease(v6);
    v6 = TTRSection.init(with:store:)(a1, v10);
    swift_release(v2);
  }
  return v6;
}

uint64_t sub_1000ADB74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t (*v41)(char *, unint64_t, uint64_t, __n128);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _BYTE v46[24];
  char *v47;

  v39 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v44 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.SectionLite(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v45 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - v11;
  v13 = _swiftEmptyArrayStorage;
  v47 = (char *)_swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(a1 + 16);
  v36 = (uint64_t *)(a2 + 40);
  v15 = swift_beginAccess(a2 + 40, v46, 0, 0);
  if (!v14)
    return (uint64_t)v13;
  v35 = v2;
  v16 = *(_QWORD *)(v8 + 72);
  v17 = v8;
  v38 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = a1 + v38;
  v43 = v17;
  v41 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v17 + 16);
  v40 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:);
  v37 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:);
  v19 = v39;
  v42 = v16;
  for (i = v41(v12, a1 + v38, v7, v15); ; i = v41(v12, v18, v7, v21))
  {
    REMRemindersListDataView.SectionLite.type.getter(i);
    v23 = v44;
    v24 = (*(uint64_t (**)(char *, uint64_t))(v44 + 88))(v6, v19);
    if (v24 == v40)
    {
      (*(void (**)(char *, uint64_t))(v23 + 96))(v6, v19);
      v25 = *(void **)v6;
      v26 = *((_QWORD *)v6 + 4);
      swift_bridgeObjectRelease(*((_QWORD *)v6 + 2));
      v27 = swift_bridgeObjectRelease(v26);
      if ((REMRemindersListDataView.SectionLite.isEmpty.getter(v27) & 1) != 0)
      {
        v28 = *v36;
        swift_bridgeObjectRetain(*v36);
        v29 = sub_10037B2EC(v25, v28);

        swift_bridgeObjectRelease(v28);
        if ((v29 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v7);
          v22 = v42;
          goto LABEL_4;
        }
      }
      else
      {

      }
    }
    else if (v24 != v37)
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v19, v19);
      __break(1u);
      return result;
    }
    v30 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v30(v45, v12, v7);
    v31 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    {
      sub_1003D7ED8(0, *((_QWORD *)v31 + 2) + 1, 1);
      v31 = v47;
    }
    v33 = *((_QWORD *)v31 + 2);
    v32 = *((_QWORD *)v31 + 3);
    if (v33 >= v32 >> 1)
    {
      sub_1003D7ED8(v32 > 1, v33 + 1, 1);
      v31 = v47;
    }
    *((_QWORD *)v31 + 2) = v33 + 1;
    v22 = v42;
    v30(&v31[v38 + v33 * v42], v45, v7);
    v47 = v31;
    v19 = v39;
LABEL_4:
    v18 += v22;
    if (!--v14)
      break;
  }
  return (uint64_t)v47;
}

void sub_1000ADE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v0 = type metadata accessor for TTRRemindersListViewModel.ReminderID(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for TTRRemindersListViewModel.Item.ReminderCasesInItem(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersListViewModel.Item.reminderCasesOnly.getter(v2);
  v5 = (char *)sub_1000ADF38 + 4 * byte_100522BD8[swift_getEnumCaseMultiPayload(v4, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1000ADF38()
{
  uint64_t v0;

  sub_10001F544(v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item.ReminderCasesInItem);
  return 0;
}

_QWORD *sub_1000ADFE4(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(_QWORD, char *);
  uint64_t v36;
  _QWORD *v37;

  v35 = a2;
  v36 = a3;
  v4 = type metadata accessor for TTRRemindersListTreeViewModel.Section(0);
  v34 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_1006436D0);
  v8 = __chkstk_darwin(v7);
  v33 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v26 - v11);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  v37 = _swiftEmptyArrayStorage;
  sub_1003D83CC(0, 0, 0);
  v15 = v37;
  v16 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v32 = v16;
  v27 = a1;
  if (v16)
  {
    v17 = type metadata accessor for REMRemindersListDataView.SectionLite(0);
    v18 = 0;
    v19 = *(_QWORD *)(v17 - 8);
    v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v29 = *(_QWORD *)(v19 + 72);
    v30 = v19;
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v31 = v6;
    do
    {
      v21 = &v33[*(int *)(v7 + 48)];
      v28(v21, v20, v17);
      v22 = (char *)v12 + *(int *)(v7 + 48);
      *v12 = v18;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v22, v21, v17);
      sub_10000F614((uint64_t)v12, (uint64_t)v14, &qword_1006436D0);
      v35(*(_QWORD *)v14, &v14[*(int *)(v7 + 48)]);
      sub_1000073A0((uint64_t)v14, &qword_1006436D0);
      v15 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_1003D83CC(0, v15[2] + 1, 1);
        v15 = v37;
      }
      v24 = v15[2];
      v23 = v15[3];
      if (v24 >= v23 >> 1)
      {
        sub_1003D83CC(v23 > 1, v24 + 1, 1);
        v15 = v37;
      }
      ++v18;
      v15[2] = v24 + 1;
      sub_10001F580((uint64_t)v31, (uint64_t)v15+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v24, type metadata accessor for TTRRemindersListTreeViewModel.Section);
      v20 += v29;
    }
    while (v32 != v18);
  }
  swift_bridgeObjectRelease(v27);
  return v15;
}

_QWORD *sub_1000AE28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v3 = v2;
  v41 = a2;
  v5 = type metadata accessor for TTRRemindersListTreeViewModel.SectionsContainer(0);
  v37 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10002A750(&qword_1006436C8);
  v8 = __chkstk_darwin(v40);
  v39 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v38 = (uint64_t *)((char *)&v30 - v11);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - v12;
  v42 = _swiftEmptyArrayStorage;
  sub_1003D83F8(0, 0, 0);
  v14 = v42;
  v15 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v36 = v15;
  v30 = a1;
  if (v15)
  {
    v16 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0);
    v17 = 0;
    v18 = *(_QWORD *)(v16 - 8);
    v19 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v31 = *(_QWORD *)(v18 + 72);
    v32 = v7;
    v34 = v18;
    v35 = v16;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v20 = v16;
    while (1)
    {
      v21 = v40;
      v22 = &v39[*(int *)(v40 + 48)];
      v33(v22, v19, v20);
      v23 = *(int *)(v21 + 48);
      v24 = (uint64_t)v38;
      v25 = (char *)v38 + v23;
      *v38 = v17;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v25, v22, v20);
      sub_10000F614(v24, (uint64_t)v13, &qword_1006436C8);
      sub_1000AC4FC(v13, v41, (uint64_t)v7);
      sub_1000073A0((uint64_t)v13, &qword_1006436C8);
      if (v3)
        break;
      v14 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
      {
        sub_1003D83F8(0, v14[2] + 1, 1);
        v14 = v42;
      }
      v27 = v14[2];
      v26 = v14[3];
      if (v27 >= v26 >> 1)
      {
        sub_1003D83F8(v26 > 1, v27 + 1, 1);
        v14 = v42;
      }
      ++v17;
      v14[2] = v27 + 1;
      v28 = (uint64_t)v14
          + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))
          + *(_QWORD *)(v37 + 72) * v27;
      v7 = v32;
      sub_10001F580((uint64_t)v32, v28, type metadata accessor for TTRRemindersListTreeViewModel.SectionsContainer);
      v19 += v31;
      if (v36 == v17)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease(v30);
    swift_release();
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(v30);
  }
  return v14;
}

uint64_t sub_1000AE55C()
{
  uint64_t v0;

  return sub_10047D844(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 64));
}

uint64_t sub_1000AE56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1000AC9F0(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(unsigned __int8 **)(v3 + 40), a3);
}

uint64_t sub_1000AE578(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for TTRListColors.Color - 1) + 32))(a2, a1);
  return a2;
}

unint64_t sub_1000AE5B4()
{
  unint64_t result;

  result = qword_100643710;
  if (!qword_100643710)
  {
    result = swift_getWitnessTable("9 \r", &type metadata for TTRReminderIDsWithMatchingHashtagsProvider);
    atomic_store(result, (unint64_t *)&qword_100643710);
  }
  return result;
}

unint64_t sub_1000AE5F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100643720;
  if (!qword_100643720)
  {
    v1 = sub_10002CA5C(&qword_100643718);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100643720);
  }
  return result;
}

unint64_t sub_1000AE644()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100643728;
  if (!qword_100643728)
  {
    v1 = type metadata accessor for TTRReminderEditor(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TTRReminderEditor, v1);
    atomic_store(result, (unint64_t *)&qword_100643728);
  }
  return result;
}

uint64_t sub_1000AE68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;

  v1 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (id *)(v0 + v4);
  v7 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v7))
  {
    case 1u:
    case 8u:
    case 9u:

      break;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      v8 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
      break;
    default:
      break;
  }
  v9 = (char *)v6 + *(int *)(v1 + 20);
  v10 = *((_QWORD *)v9 + 1);
  if (v10)
  {
    swift_bridgeObjectRelease(v10);
    sub_10003E2EC(*((void **)v9 + 2), *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4), *((_QWORD *)v9 + 5), *((_QWORD *)v9 + 6), *((_QWORD *)v9 + 7), v9[64]);
    v11 = v9[120];
    if (v11 != 255)
      sub_10002B328(*((void **)v9 + 9), *((_QWORD *)v9 + 10), *((_QWORD *)v9 + 11), *((_QWORD *)v9 + 12), *((_QWORD *)v9 + 13), *((_QWORD *)v9 + 14), v11 & 1);
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000AE7A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TTRRemindersListViewModel.SectionHeader(0) - 8)
                          + 80);
  sub_10002B1E8(v1 + ((v3 + 16) & ~v3), a1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
  v4 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
}

uint64_t sub_1000AE810()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AE834(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A74C4(a1, v1);
}

ValueMetadata *type metadata accessor for TTRITipKitProvider()
{
  return &type metadata for TTRITipKitProvider;
}

uint64_t _s9Reminders18TTRITipKitProviderV13TipKitContextOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000AE8A4 + 4 * byte_100522CF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000AE8D8 + 4 * byte_100522CF0[v4]))();
}

uint64_t sub_1000AE8D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AE8E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AE8E8);
  return result;
}

uint64_t sub_1000AE8F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AE8FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000AE900(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AE908(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTRITipKitProvider.TipKitContext()
{
  return &type metadata for TTRITipKitProvider.TipKitContext;
}

uint64_t sub_1000AE924(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7265646E696D6552;
  else
    v3 = 0x73746E756F636341;
  if (v2)
    v4 = 0xEC0000007473694CLL;
  else
    v4 = 0xED00007473694C73;
  if ((a2 & 1) != 0)
    v5 = 0x7265646E696D6552;
  else
    v5 = 0x73746E756F636341;
  if ((a2 & 1) != 0)
    v6 = 0xED00007473694C73;
  else
    v6 = 0xEC0000007473694CLL;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000AE9DC(char *a1, char *a2)
{
  return sub_1000AE924(*a1, *a2);
}

Swift::Int sub_1000AE9E8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x7265646E696D6552;
  else
    v2 = 0x73746E756F636341;
  if (v1)
    v3 = 0xED00007473694C73;
  else
    v3 = 0xEC0000007473694CLL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000AEA7C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7265646E696D6552;
  else
    v2 = 0x73746E756F636341;
  if (*v1)
    v3 = 0xED00007473694C73;
  else
    v3 = 0xEC0000007473694CLL;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000AEAEC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x7265646E696D6552;
  else
    v3 = 0x73746E756F636341;
  if (v2)
    v4 = 0xED00007473694C73;
  else
    v4 = 0xEC0000007473694CLL;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000AEB7C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005EA9B8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000AEBD8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x73746E756F636341;
  if (*v1)
    v2 = 0x7265646E696D6552;
  v3 = 0xEC0000007473694CLL;
  if (*v1)
    v3 = 0xED00007473694C73;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1000AEC30()
{
  unint64_t result;

  result = qword_100643730;
  if (!qword_100643730)
  {
    result = swift_getWitnessTable(&unk_100522D9C, &type metadata for TTRITipKitProvider.TipKitContext);
    atomic_store(result, (unint64_t *)&qword_100643730);
  }
  return result;
}

__n128 TTRListDetailListViewModelSource.viewModel(for:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[13];

  sub_1002F2DB4(a1, (uint64_t)v9);
  v3 = v9[11];
  *(_OWORD *)(a2 + 160) = v9[10];
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v9[12];
  v4 = v9[7];
  *(_OWORD *)(a2 + 96) = v9[6];
  *(_OWORD *)(a2 + 112) = v4;
  v5 = v9[9];
  *(_OWORD *)(a2 + 128) = v9[8];
  *(_OWORD *)(a2 + 144) = v5;
  v6 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v6;
  v7 = v9[5];
  *(_OWORD *)(a2 + 64) = v9[4];
  *(_OWORD *)(a2 + 80) = v7;
  result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TTRListDetailListViewModelSource.availableSymbolicColors(for:)(void *a1)
{
  return sub_1000AEE44(a1, &qword_100641B30, REMListChangeItem_ptr, (uint64_t)&protocol witness table for REMListChangeItem);
}

uint64_t TTRListDetailListViewModelSource.remColor(for:changeItem:)(uint64_t a1, void *a2)
{
  return sub_1000AEEE4(a1, a2, &qword_100641B30, REMListChangeItem_ptr, (uint64_t)&protocol witness table for REMListChangeItem);
}

uint64_t TTRListDetailCustomSmartListViewModelSource.deinit()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1000AED1C@<Q0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[13];

  sub_1002F2DB4(*a1, (uint64_t)v9);
  v3 = v9[11];
  *(_OWORD *)(a2 + 160) = v9[10];
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v9[12];
  v4 = v9[7];
  *(_OWORD *)(a2 + 96) = v9[6];
  *(_OWORD *)(a2 + 112) = v4;
  v5 = v9[9];
  *(_OWORD *)(a2 + 128) = v9[8];
  *(_OWORD *)(a2 + 144) = v5;
  v6 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v6;
  v7 = v9[5];
  *(_OWORD *)(a2 + 64) = v9[4];
  *(_OWORD *)(a2 + 80) = v7;
  result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000AED88(void **a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AEFF8(a1, a2, a3, &qword_100641B30, REMListChangeItem_ptr, (uint64_t)&protocol witness table for REMListChangeItem);
}

uint64_t sub_1000AEDA4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF098(a1, a2, a3, a4, &qword_100641B30, REMListChangeItem_ptr, (uint64_t)&protocol witness table for REMListChangeItem);
}

__n128 TTRListDetailCustomSmartListViewModelSource.viewModel(for:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[13];

  sub_1002F371C(a1, (uint64_t)v9);
  v3 = v9[11];
  *(_OWORD *)(a2 + 160) = v9[10];
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v9[12];
  v4 = v9[7];
  *(_OWORD *)(a2 + 96) = v9[6];
  *(_OWORD *)(a2 + 112) = v4;
  v5 = v9[9];
  *(_OWORD *)(a2 + 128) = v9[8];
  *(_OWORD *)(a2 + 144) = v5;
  v6 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v6;
  v7 = v9[5];
  *(_OWORD *)(a2 + 64) = v9[4];
  *(_OWORD *)(a2 + 80) = v7;
  result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TTRListDetailCustomSmartListViewModelSource.availableSymbolicColors(for:)(void *a1)
{
  return sub_1000AEE44(a1, &qword_100641B38, REMSmartListChangeItem_ptr, (uint64_t)&protocol witness table for REMSmartListChangeItem);
}

uint64_t sub_1000AEE44(void *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  _QWORD v11[5];

  type metadata accessor for TTRListColors(0);
  v11[3] = sub_100005ED8(0, a2, a3);
  v11[4] = a4;
  v11[0] = a1;
  v8 = a1;
  v9 = static TTRListColors.availableColors(for:)(v11);
  sub_100027F10(v11);
  return v9;
}

uint64_t TTRListDetailCustomSmartListViewModelSource.remColor(for:changeItem:)(uint64_t a1, void *a2)
{
  return sub_1000AEEE4(a1, a2, &qword_100641B38, REMSmartListChangeItem_ptr, (uint64_t)&protocol witness table for REMSmartListChangeItem);
}

uint64_t sub_1000AEEE4(uint64_t a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t a5)
{
  id v10;
  uint64_t v11;
  _QWORD v13[5];

  type metadata accessor for TTRListColors(0);
  v13[3] = sub_100005ED8(0, a3, a4);
  v13[4] = a5;
  v13[0] = a2;
  v10 = a2;
  v11 = static TTRListColors.remColor(for:list:)(a1, v13);
  sub_100027F10(v13);
  return v11;
}

__n128 sub_1000AEF70@<Q0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[13];

  sub_1002F371C(*a1, (uint64_t)v9);
  v3 = v9[11];
  *(_OWORD *)(a2 + 160) = v9[10];
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v9[12];
  v4 = v9[7];
  *(_OWORD *)(a2 + 96) = v9[6];
  *(_OWORD *)(a2 + 112) = v4;
  v5 = v9[9];
  *(_OWORD *)(a2 + 128) = v9[8];
  *(_OWORD *)(a2 + 144) = v5;
  v6 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v6;
  v7 = v9[5];
  *(_OWORD *)(a2 + 64) = v9[4];
  *(_OWORD *)(a2 + 80) = v7;
  result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000AEFDC(void **a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AEFF8(a1, a2, a3, &qword_100641B38, REMSmartListChangeItem_ptr, (uint64_t)&protocol witness table for REMSmartListChangeItem);
}

uint64_t sub_1000AEFF8(void **a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5, uint64_t a6)
{
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v13[5];

  v9 = *a1;
  type metadata accessor for TTRListColors(0);
  v13[3] = sub_100005ED8(0, a4, a5);
  v13[4] = a6;
  v13[0] = v9;
  v10 = v9;
  v11 = static TTRListColors.availableColors(for:)(v13);
  sub_100027F10(v13);
  return v11;
}

uint64_t sub_1000AF07C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF098(a1, a2, a3, a4, &qword_100641B38, REMSmartListChangeItem_ptr, (uint64_t)&protocol witness table for REMSmartListChangeItem);
}

uint64_t sub_1000AF098(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6, uint64_t a7)
{
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v15[5];

  v11 = *a2;
  type metadata accessor for TTRListColors(0);
  v15[3] = sub_100005ED8(0, a5, a6);
  v15[4] = a7;
  v15[0] = v11;
  v12 = v11;
  v13 = static TTRListColors.remColor(for:list:)(a1, v15);
  sub_100027F10(v15);
  return v13;
}

__n128 TTRListDetailCreationViewModelSource.viewModel(for:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[13];

  v2 = swift_retain();
  sub_1002F2678(v2, (uint64_t)v9);
  swift_release();
  v3 = v9[11];
  *(_OWORD *)(a1 + 160) = v9[10];
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = v9[12];
  v4 = v9[7];
  *(_OWORD *)(a1 + 96) = v9[6];
  *(_OWORD *)(a1 + 112) = v4;
  v5 = v9[9];
  *(_OWORD *)(a1 + 128) = v9[8];
  *(_OWORD *)(a1 + 144) = v5;
  v6 = v9[3];
  *(_OWORD *)(a1 + 32) = v9[2];
  *(_OWORD *)(a1 + 48) = v6;
  v7 = v9[5];
  *(_OWORD *)(a1 + 64) = v9[4];
  *(_OWORD *)(a1 + 80) = v7;
  result = (__n128)v9[1];
  *(_OWORD *)a1 = v9[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t TTRListDetailCreationViewModelSource.availableSymbolicColors(for:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  type metadata accessor for TTRListColors(0);
  v4[3] = type metadata accessor for TTRListDetailCreationChangeItem();
  v4[4] = &protocol witness table for TTRListDetailCreationChangeItem;
  v4[0] = a1;
  swift_retain();
  v2 = static TTRListColors.availableColors(for:)(v4);
  sub_100027F10(v4);
  return v2;
}

uint64_t TTRListDetailCreationViewModelSource.remColor(for:changeItem:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];

  type metadata accessor for TTRListColors(0);
  v6[3] = type metadata accessor for TTRListDetailCreationChangeItem();
  v6[4] = &protocol witness table for TTRListDetailCreationChangeItem;
  v6[0] = a2;
  swift_retain();
  v4 = static TTRListColors.remColor(for:list:)(a1, v6);
  sub_100027F10(v6);
  return v4;
}

__n128 sub_1000AF27C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[13];

  v2 = swift_retain();
  sub_1002F2678(v2, (uint64_t)v9);
  swift_release();
  v3 = v9[11];
  *(_OWORD *)(a1 + 160) = v9[10];
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = v9[12];
  v4 = v9[7];
  *(_OWORD *)(a1 + 96) = v9[6];
  *(_OWORD *)(a1 + 112) = v4;
  v5 = v9[9];
  *(_OWORD *)(a1 + 128) = v9[8];
  *(_OWORD *)(a1 + 144) = v5;
  v6 = v9[3];
  *(_OWORD *)(a1 + 32) = v9[2];
  *(_OWORD *)(a1 + 48) = v6;
  v7 = v9[5];
  *(_OWORD *)(a1 + 64) = v9[4];
  *(_OWORD *)(a1 + 80) = v7;
  result = (__n128)v9[1];
  *(_OWORD *)a1 = v9[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AF2F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  v1 = *a1;
  type metadata accessor for TTRListColors(0);
  v4[3] = type metadata accessor for TTRListDetailCreationChangeItem();
  v4[4] = &protocol witness table for TTRListDetailCreationChangeItem;
  v4[0] = v1;
  swift_retain();
  v2 = static TTRListColors.availableColors(for:)(v4);
  sub_100027F10(v4);
  return v2;
}

uint64_t sub_1000AF35C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v3 = *a2;
  type metadata accessor for TTRListColors(0);
  v6[3] = type metadata accessor for TTRListDetailCreationChangeItem();
  v6[4] = &protocol witness table for TTRListDetailCreationChangeItem;
  v6[0] = v3;
  swift_retain();
  v4 = static TTRListColors.remColor(for:list:)(a1, v6);
  sub_100027F10(v6);
  return v4;
}

__n128 TTRListDetailTemplateViewModelSource.viewModel(for:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  _OWORD v10[13];

  v3 = a1;
  sub_1002F34E4(v3, (uint64_t)v10);

  v4 = v10[11];
  *(_OWORD *)(a2 + 160) = v10[10];
  *(_OWORD *)(a2 + 176) = v4;
  *(_OWORD *)(a2 + 192) = v10[12];
  v5 = v10[7];
  *(_OWORD *)(a2 + 96) = v10[6];
  *(_OWORD *)(a2 + 112) = v5;
  v6 = v10[9];
  *(_OWORD *)(a2 + 128) = v10[8];
  *(_OWORD *)(a2 + 144) = v6;
  v7 = v10[3];
  *(_OWORD *)(a2 + 32) = v10[2];
  *(_OWORD *)(a2 + 48) = v7;
  v8 = v10[5];
  *(_OWORD *)(a2 + 64) = v10[4];
  *(_OWORD *)(a2 + 80) = v8;
  result = (__n128)v10[1];
  *(_OWORD *)a2 = v10[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TTRListDetailTemplateViewModelSource.availableSymbolicColors(for:)(void *a1)
{
  return sub_1000AEE44(a1, &qword_100643738, REMTemplateChangeItem_ptr, (uint64_t)&protocol witness table for REMTemplateChangeItem);
}

uint64_t TTRListDetailTemplateViewModelSource.remColor(for:changeItem:)(uint64_t a1, void *a2)
{
  return sub_1000AEEE4(a1, a2, &qword_100643738, REMTemplateChangeItem_ptr, (uint64_t)&protocol witness table for REMTemplateChangeItem);
}

__n128 sub_1000AF480@<Q0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  _OWORD v10[13];

  v3 = *a1;
  sub_1002F34E4(v3, (uint64_t)v10);

  v4 = v10[11];
  *(_OWORD *)(a2 + 160) = v10[10];
  *(_OWORD *)(a2 + 176) = v4;
  *(_OWORD *)(a2 + 192) = v10[12];
  v5 = v10[7];
  *(_OWORD *)(a2 + 96) = v10[6];
  *(_OWORD *)(a2 + 112) = v5;
  v6 = v10[9];
  *(_OWORD *)(a2 + 128) = v10[8];
  *(_OWORD *)(a2 + 144) = v6;
  v7 = v10[3];
  *(_OWORD *)(a2 + 32) = v10[2];
  *(_OWORD *)(a2 + 48) = v7;
  v8 = v10[5];
  *(_OWORD *)(a2 + 64) = v10[4];
  *(_OWORD *)(a2 + 80) = v8;
  result = (__n128)v10[1];
  *(_OWORD *)a2 = v10[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000AF4F4(void **a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AEFF8(a1, a2, a3, &qword_100643738, REMTemplateChangeItem_ptr, (uint64_t)&protocol witness table for REMTemplateChangeItem);
}

uint64_t sub_1000AF510(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF098(a1, a2, a3, a4, &qword_100643738, REMTemplateChangeItem_ptr, (uint64_t)&protocol witness table for REMTemplateChangeItem);
}

uint64_t type metadata accessor for TTRListDetailListViewModelSource()
{
  return objc_opt_self(_TtC9Reminders32TTRListDetailListViewModelSource);
}

uint64_t type metadata accessor for TTRListDetailCustomSmartListViewModelSource()
{
  return objc_opt_self(_TtC9Reminders43TTRListDetailCustomSmartListViewModelSource);
}

uint64_t type metadata accessor for TTRListDetailCreationViewModelSource()
{
  return objc_opt_self(_TtC9Reminders36TTRListDetailCreationViewModelSource);
}

uint64_t type metadata accessor for TTRListDetailTemplateViewModelSource()
{
  return objc_opt_self(_TtC9Reminders36TTRListDetailTemplateViewModelSource);
}

uint64_t sub_1000AF5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100643A40);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100643A40);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000AF63C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = (void *)v0[13];
  v2 = v0[14];
  v3 = v0[15];
  v4 = v0[16];
  v6 = v0[17];
  v5 = v0[18];
  v7 = v0[19];
  if (!v1)
  {
    v8 = 0;
    goto LABEL_12;
  }
  if (v1 != (void *)1)
  {
    if ((v4 & 0x100) != 0)
      return 0;
    v12 = v0[17];
    sub_1000B0388(v1, v2, v3, v4, v6, v5, v7);
    sub_1000B0388(v1, v2, v3, v4, v6, v5, v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v5);
    sub_1004507EC(v9);
    v8 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease(v12);
    if (v8)
    {
      sub_1000B0360(v1, v2, v3, v4, v6, v5, v7);
      v8 = 0;
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 16);
      sub_1000B0360(v1, v2, v3, v4, v6, v5, v7);
      if (!v10 && (v4 & 1) != 0)
      {
        swift_bridgeObjectRetain(v3);
        v8 = v2;
      }
    }
LABEL_12:
    sub_1000B0360(v1, v2, v3, v4, v6, v5, v7);
    return v8;
  }
  return 0;
}

double sub_1000AF7C8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  id v23[2];

  v1 = v0;
  v2 = *v0;
  v3 = sub_10002A750(&qword_100641980);
  __chkstk_darwin(v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002A750(&qword_100643B20);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10063D368 != -1)
    swift_once(&qword_10063D368, sub_1000AF5AC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100012DC4(v10, (uint64_t)qword_100643A40);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "requestLoadUpgradeInfo: called", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v23[1] = (id)sub_100099310();
  v15 = sub_10002CDD8();
  v23[0] = (id)static OS_dispatch_queue.main.getter(v15);
  v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v5, 1, 1, v16);
  v17 = sub_10002A750(&qword_100642A90);
  v18 = sub_100023FEC(&qword_100642A98, &qword_100642A90, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v19 = sub_10008A95C();
  Publisher.receive<A>(on:options:)(v23, v5, v17, v15, v18, v19);
  sub_10008A9A4((uint64_t)v5);

  swift_release();
  v20 = sub_100023FEC(&qword_100643B28, &qword_100643B20, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v21 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v1, sub_1000AFA54, 0, sub_1000AFE0C, 0, v6, v2, v20);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v1[20] = v21;
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void *sub_1000AFA54(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint8_t *buf;
  os_log_type_t type;
  uint64_t typea;
  uint64_t v33;
  uint64_t v34;
  NSObject *log;
  uint64_t v36;
  _QWORD v37[6];
  uint64_t v38;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  if (qword_10063D368 != -1)
    swift_once(&qword_10063D368, sub_1000AF5AC);
  v10 = type metadata accessor for Logger(0);
  sub_100012DC4(v10, (uint64_t)qword_100643A40);
  sub_1000B02B0(v3, v4, v5, v6, v7, v8, v9);
  v11 = sub_1000B02B0(v3, v4, v5, v6, v7, v8, v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    log = v12;
    type = v13;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v38 = v33;
    *(_DWORD *)v14 = 136315138;
    v36 = (uint64_t)v3;
    v37[0] = v4;
    v37[1] = v5;
    v37[2] = v6;
    v37[3] = v7;
    v37[4] = v8;
    v37[5] = v9;
    sub_1000B02B0(v3, v4, v5, v6, v7, v8, v9);
    v15 = String.init<A>(describing:)(&v36, &type metadata for TTRWelcomeUpgradeInfo);
    v17 = v16;
    v36 = sub_100027E40(v15, v16, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v17);
    sub_1000B0308(v3, v4, v5, v6, v7, v8, v9);
    sub_1000B0308(v3, v4, v5, v6, v7, v8, v9);
    _os_log_impl((void *)&_mh_execute_header, log, type, "requestLoadUpgradeInfo: upgradeInfoPublisher received upgradeInfo: %s", v14, 0xCu);
    swift_arrayDestroy(v33, 1, &type metadata for Any[8]);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    sub_1000B0308(v3, v4, v5, v6, v7, v8, v9);
    sub_1000B0308(v3, v4, v5, v6, v7, v8, v9);

  }
  v18 = (void *)a1[13];
  v19 = a1[15];
  typea = a1[17];
  v34 = a1[16];
  buf = (uint8_t *)a1[18];
  v28 = a1[14];
  v29 = a1[19];
  a1[13] = v3;
  a1[14] = v4;
  a1[15] = v5;
  a1[16] = v6;
  a1[17] = v7;
  a1[18] = v8;
  a1[19] = v9;
  sub_1000B02B0(v3, v4, v5, v6, v7, v8, v9);
  sub_1000B02B0(v3, v4, v5, v6, v7, v8, v9);
  sub_1000B0360(v18, v28, v19, v34, typea, (uint64_t)buf, v29);
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 2);
  if (Strong)
  {
    v21 = Strong;
    v22 = sub_1000AF63C();
    v23 = (uint64_t *)(v21 + OBJC_IVAR____TtC9Reminders25TTRIWelcomeViewController_viewModel);
    v24 = *(_QWORD *)(v21 + OBJC_IVAR____TtC9Reminders25TTRIWelcomeViewController_viewModel);
    v25 = *(_QWORD *)(v21 + OBJC_IVAR____TtC9Reminders25TTRIWelcomeViewController_viewModel + 8);
    *v23 = v22;
    v23[1] = v26;
    sub_1000B0370(v24, v25);
    sub_1003558EC();
    swift_unknownObjectRelease(v21);
  }
  return sub_1000B0308(v3, v4, v5, v6, v7, v8, v9);
}

void sub_1000AFE0C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_10063D368 != -1)
    swift_once(&qword_10063D368, sub_1000AF5AC);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100643A40);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "requestLoadUpgradeInfo: upgradeInfoPublisher completed", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

void sub_1000AFED8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *oslog;
  _QWORD v13[7];

  v1 = (void *)v0[13];
  if (v1 == (void *)1)
  {
    if (qword_10063D368 != -1)
      swift_once(&qword_10063D368, sub_1000AF5AC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100012DC4(v2, (uint64_t)qword_100643A40);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Need non-nil upgradeInfo in order to proceed", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

  }
  else
  {
    v7 = v0[18];
    v6 = v0[19];
    v9 = v0[16];
    v8 = v0[17];
    v11 = v0[14];
    v10 = v0[15];
    v13[0] = v0[13];
    v13[1] = v11;
    v13[2] = v10;
    v13[3] = v9;
    v13[4] = v8;
    v13[5] = v7;
    v13[6] = v6;
    sub_10001413C(v0 + 8, v0[11]);
    sub_1000B02B0(v1, v11, v10, v9, v8, v7, v6);
    sub_1001E6AEC((uint64_t)v13);
    sub_1000B0360(v1, v11, v10, v9, v8, v7, v6);
  }
}

void *sub_1000B0054()
{
  return sub_1000B006C("WelcomePresenter has nil upgradeInfo when requestContinueToUpgradeAutomatically");
}

void *sub_1000B0060()
{
  return sub_1000B006C("WelcomePresenter has nil upgradeInfo when requestUpgradeNow");
}

void *sub_1000B006C(const char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[7];

  v2 = v1;
  v3 = (void *)v1[13];
  if (v3 == (void *)1)
  {
    if (qword_10063D368 != -1)
      swift_once(&qword_10063D368, sub_1000AF5AC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100012DC4(v5, (uint64_t)qword_100643A40);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.fault.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    result = (void *)swift_unknownObjectWeakLoadStrong(v2 + 4);
    if (result)
    {
      v11 = result;
      sub_100356D80((uint64_t)result);
      return (void *)swift_unknownObjectRelease(v11);
    }
  }
  else
  {
    v12 = v1[14];
    v13 = v1[15];
    v14 = v1[16];
    v15 = v1[17];
    v16 = v1[18];
    v17 = v1[19];
    v19[0] = v1[13];
    v19[1] = v12;
    v19[2] = v13;
    v19[3] = v14;
    v19[4] = v15;
    v19[5] = v16;
    v19[6] = v17;
    result = (void *)swift_unknownObjectWeakLoadStrong(v1 + 4);
    if (result)
    {
      v18 = result;
      sub_1000B02B0(v3, v12, v13, v14, v15, v16, v17);
      sub_10035E4CC((uint64_t)v19);
      swift_unknownObjectRelease(v18);
      return sub_1000B0360(v3, v12, v13, v14, v15, v16, v17);
    }
  }
  return result;
}

uint64_t sub_1000B0238()
{
  uint64_t v0;

  sub_1000381C8(v0 + 16);
  sub_1000381C8(v0 + 32);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  sub_100027F10((_QWORD *)(v0 + 64));
  sub_1000B0360(*(void **)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_release();
  return swift_deallocClassInstance(v0, 168, 7);
}

uint64_t type metadata accessor for TTRIWelcomePresenter()
{
  return objc_opt_self(_TtC9Reminders20TTRIWelcomePresenter);
}

void *sub_1000B02B0(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v11;

  if (result)
  {
    v11 = result;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    return (void *)swift_bridgeObjectRetain(a7);
  }
  return result;
}

void *sub_1000B0308(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    return (void *)swift_bridgeObjectRelease(a7);
  }
  return result;
}

void *sub_1000B0360(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result != (void *)1)
    return sub_1000B0308(result, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_1000B0370(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 4)
    return swift_bridgeObjectRelease(a2);
  return result;
}

void *sub_1000B0388(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result != (void *)1)
    return sub_1000B02B0(result, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_1000B0398(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  NSString v49;
  objc_class *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::OpaquePointer v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  UIMenuElementSize v62;
  UIImage_optional v63;

  v8 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B08E4(a1, (uint64_t)v10);
  v11 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11) == 1)
  {
    if ((a2 & 1) != 0)
    {
      v12 = static TTRLocalizableStrings.Templates.shareTemplate.getter();
      v14 = v13;
      v15 = String._bridgeToObjectiveC()();
      v16 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v15);

      v17 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TTRTemplatePublicLinkData(0) + 20));
      v18 = (*(_QWORD *)TTRTemplatePublicLinkData.Capabilities.createLink.unsafeMutableAddressor() & ~v17) != 0;
      sub_100005ED8(0, (unint64_t *)&qword_1006415C0, UIAction_ptr);
      v19 = swift_allocObject(&unk_1005EFD38, 32, 7);
      *(_QWORD *)(v19 + 16) = a3;
      *(_QWORD *)(v19 + 24) = a4;
      swift_retain();
      return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v12, v14, 0, 0, v16, 0, 0, 0, 0, v18, 0, sub_1000B09F4, v19);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v21 = static TTRLocalizableStrings.Templates.updateLink.getter();
    v22 = a3;
    v60 = v23;
    v24 = String._bridgeToObjectiveC()();
    v61 = (id)objc_opt_self(UIImage);
    v25 = objc_msgSend(v61, "_systemImageNamed:", v24);

    v59 = *(int *)(type metadata accessor for TTRTemplatePublicLinkData(0) + 20);
    v26 = *(_QWORD *)(a1 + v59);
    v27 = (*(_QWORD *)TTRTemplatePublicLinkData.Capabilities.updateLink.unsafeMutableAddressor() & ~v26) == 0;
    v58 = a1;
    v28 = !v27;
    sub_100005ED8(0, (unint64_t *)&qword_1006415C0, UIAction_ptr);
    v29 = swift_allocObject(&unk_1005EFCC0, 32, 7);
    *(_QWORD *)(v29 + 16) = a3;
    *(_QWORD *)(v29 + 24) = a4;
    swift_retain();
    v60 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v21, v60, 0, 0, v25, 0, 0, 0, 0, v28, 0, sub_1000B094C, v29);
    v30 = static TTRLocalizableStrings.Templates.sendLink.getter();
    v32 = v31;
    v33 = String._bridgeToObjectiveC()();
    v34 = v61;
    v35 = objc_msgSend(v61, "_systemImageNamed:", v33);

    v36 = swift_allocObject(&unk_1005EFCE8, 32, 7);
    *(_QWORD *)(v36 + 16) = v22;
    *(_QWORD *)(v36 + 24) = a4;
    swift_retain();
    v57 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v30, v32, 0, 0, v35, 0, 0, 0, 0, 0, 0, sub_1000B0970, v36);
    v37 = static TTRLocalizableStrings.Templates.stopSharing.getter();
    v39 = v38;
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v34, "_systemImageNamed:", v40);

    v42 = *(_QWORD *)(v58 + v59);
    v43 = ((*(_QWORD *)TTRTemplatePublicLinkData.Capabilities.stopSharing.unsafeMutableAddressor() & ~v42) != 0) | 2;
    v44 = swift_allocObject(&unk_1005EFD10, 32, 7);
    *(_QWORD *)(v44 + 16) = v22;
    *(_QWORD *)(v44 + 24) = a4;
    swift_retain();
    v45 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v37, v39, 0, 0, v41, 0, 0, 0, 0, v43, 0, sub_1000B0994, v44);
    sub_100005ED8(0, &qword_1006415D0, UIMenu_ptr);
    v46 = static TTRLocalizableStrings.Templates.manageLink.getter();
    v48 = v47;
    v49 = String._bridgeToObjectiveC()();
    v50 = (objc_class *)objc_msgSend(v61, "_systemImageNamed:", v49);

    v51 = sub_10002A750((uint64_t *)&unk_1006415A0);
    v52 = swift_allocObject(v51, 56, 7);
    *(_OWORD *)(v52 + 16) = xmmword_100521130;
    v53 = v57;
    *(_QWORD *)(v52 + 32) = v60;
    *(_QWORD *)(v52 + 40) = v53;
    *(_QWORD *)(v52 + 48) = v45;
    v62 = v52;
    specialized Array._endMutation()(v52);
    v54._countAndFlagsBits = v46;
    v54._object = v48;
    v63.value.super.isa = v50;
    v63.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v54, (Swift::String_optional)0, v63, 0, 0xFFFFFFFFFFFFFFFFLL, v62, v56).super.super.isa;
    sub_1000B09B8((uint64_t)v10);
  }
  return (uint64_t)isa;
}

uint64_t sub_1000B08E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B0928()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B094C()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_1000B0970()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(2);
}

uint64_t sub_1000B0994()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(3);
}

uint64_t sub_1000B09B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B09F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_1000B0A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100643B30);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100643B30);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000B0AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(id *)(*(_QWORD *)(v1 + 64) + 16);
  v4 = swift_bridgeObjectRetain(v2);
  sub_1000B1844(v4, v3);
  v6 = v5;
  swift_bridgeObjectRelease(v2);
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease(v6);
  if (v7)
    static TTRLocalizableStrings.GroupDetail.includedListsCountText(withCount:)(v7);
  v8 = objc_msgSend(v3, "name");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

void sub_1000B0B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  id v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSString v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];
  _BYTE v28[80];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = qword_10063D370;
  v11 = *(id *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 64) + 16);
  if (v10 != -1)
    swift_once(&qword_10063D370, sub_1000B0A24);
  v12 = sub_100012DC4(v6, (uint64_t)qword_100643B30);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
  v13 = sub_10002A750((uint64_t *)&unk_100640F20);
  inited = swift_initStackObject(v13, v28);
  *(_OWORD *)(inited + 16) = xmmword_100520250;
  *(_QWORD *)(inited + 32) = 0x44497463656A626FLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v15 = objc_msgSend(v11, "objectID");
  *(_QWORD *)(inited + 72) = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  *(_QWORD *)(inited + 48) = v15;
  v16 = sub_10002D32C(inited);
  sub_1000143B4((uint64_t)"Change Group Name {objectID: %@}", 32, 2, v16);
  v17 = swift_bridgeObjectRelease(v16);
  v18 = (*(uint64_t (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v17);
  static TTRLocalizableStrings.UndoAction.renameGroup.getter(v18);
  v20 = v19;
  v21 = (void *)objc_opt_self(TTRUndoManager);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v23 = (_QWORD *)swift_allocObject(&unk_1005EFDD8, 40, 7);
  v23[2] = v3;
  v23[3] = a1;
  v23[4] = a2;
  v24 = swift_allocObject(&unk_1005EFE00, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_1000B1A84;
  *(_QWORD *)(v24 + 24) = v23;
  aBlock[4] = sub_10001B278;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B258;
  aBlock[3] = &unk_1005EFE18;
  v25 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_retain();
  objc_msgSend(v21, "withActionName:block:", v22, v25, swift_release().n128_f64[0]);

  _Block_release(v25);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v24, "", 110, 82, 51, 1);
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_1000B0E60()
{
  unsigned __int128 v0;
  uint64_t v1;

  v0 = (unsigned __int128)String.validatedListName()();
  v1 = *((_QWORD *)&v0 + 1);
  TTRListEditor.edit(name:)((Swift::String)v0);
  return swift_bridgeObjectRelease(v1);
}

void sub_1000B0E98()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  id v12;
  unint64_t v13;
  __n128 v14;
  _QWORD *v15;
  void *Strong;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD aBlock[6];
  _BYTE v24[80];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[6];
  v7 = qword_10063D370;
  v8 = *(id *)(*(_QWORD *)(v6 + 64) + 16);
  if (v7 != -1)
    swift_once(&qword_10063D370, sub_1000B0A24);
  v9 = sub_100012DC4(v2, (uint64_t)qword_100643B30);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  v10 = sub_10002A750((uint64_t *)&unk_100640F20);
  inited = swift_initStackObject(v10, v24);
  *(_OWORD *)(inited + 16) = xmmword_100520250;
  *(_QWORD *)(inited + 32) = 0x44497463656A626FLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v12 = objc_msgSend(v8, "objectID");
  *(_QWORD *)(inited + 72) = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  *(_QWORD *)(inited + 48) = v12;
  v13 = sub_10002D32C(inited);
  sub_1000143B4((uint64_t)"Group Detail Create {objectID: %@}", 34, 2, v13);
  v14 = swift_bridgeObjectRelease(v13);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v14);
  v15 = sub_10001413C(v1 + 8, v1[11]);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(*v15 + 16);
  if (Strong)
  {
    v17 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
  v18 = objc_msgSend(*(id *)(*(_QWORD *)(v6 + 64) + 16), "saveRequest");
  v19 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  aBlock[4] = sub_1002184EC;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100009944;
  aBlock[3] = &unk_1005EFDA0;
  v21 = _Block_copy(aBlock);
  objc_msgSend(v18, "saveWithQueue:completion:", v20, v21);
  _Block_release(v21);

  v22 = swift_unknownObjectWeakLoadStrong(v1 + 4);
  if (v22)
    swift_unknownObjectRelease(v22);

}

void sub_1000B111C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  unint64_t v12;
  __n128 v13;
  _QWORD *v14;
  void *Strong;
  void *v16;
  uint64_t v17;
  _BYTE v18[80];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = qword_10063D370;
  v7 = *(id *)(*(_QWORD *)(v1[6] + 64) + 16);
  if (v6 != -1)
    swift_once(&qword_10063D370, sub_1000B0A24);
  v8 = sub_100012DC4(v2, (uint64_t)qword_100643B30);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
  v9 = sub_10002A750((uint64_t *)&unk_100640F20);
  inited = swift_initStackObject(v9, v18);
  *(_OWORD *)(inited + 16) = xmmword_100520250;
  *(_QWORD *)(inited + 32) = 0x44497463656A626FLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v11 = objc_msgSend(v7, "objectID");
  *(_QWORD *)(inited + 72) = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  *(_QWORD *)(inited + 48) = v11;
  v12 = sub_10002D32C(inited);
  sub_1000143B4((uint64_t)"Group Detail Cancel {objectID: %@}", 34, 2, v12);
  v13 = swift_bridgeObjectRelease(v12);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v3 + 8))(v5, v2, v13);
  v14 = sub_10001413C(v1 + 8, v1[11]);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(*v14 + 16);
  if (Strong)
  {
    v16 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
  v17 = swift_unknownObjectWeakLoadStrong(v1 + 4);
  if (v17)
    swift_unknownObjectRelease(v17);

}

void sub_1000B12F0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  id v12;
  unint64_t v13;
  __n128 v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *Strong;
  void *v26;
  _BYTE v27[80];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (_QWORD *)v1[6];
  v7 = qword_10063D370;
  v8 = *(id *)(v6[8] + 16);
  if (v7 != -1)
    swift_once(&qword_10063D370, sub_1000B0A24);
  v9 = sub_100012DC4(v2, (uint64_t)qword_100643B30);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  v10 = sub_10002A750((uint64_t *)&unk_100640F20);
  inited = swift_initStackObject(v10, v27);
  *(_OWORD *)(inited + 16) = xmmword_100520250;
  *(_QWORD *)(inited + 32) = 0x44497463656A626FLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v12 = objc_msgSend(v8, "objectID");
  *(_QWORD *)(inited + 72) = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  *(_QWORD *)(inited + 48) = v12;
  v13 = sub_10002D32C(inited);
  sub_1000143B4((uint64_t)"Edit Group Membership {objectID: %@}", 36, 2, v13);
  v14 = swift_bridgeObjectRelease(v13);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v3 + 8))(v5, v2, v14);
  v15 = sub_10001413C(v1 + 8, v1[11]);
  v16 = *(void **)(v6[8] + 16);
  v17 = (void *)v6[4];
  v18 = (void *)v6[5];
  v19 = v6[6];
  v20 = *v15;
  v21 = v17;
  v22 = v16;
  v23 = v18;
  swift_bridgeObjectRetain(v19);
  v24 = (void *)sub_1000B158C(v21, v22, v23, v19, (uint64_t)v1);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v20 + 16);
  if (Strong)
  {
    v26 = Strong;
    objc_msgSend(Strong, "pushViewController:animated:", v24, 1);

    swift_bridgeObjectRelease(v19);
  }
  else
  {

    swift_bridgeObjectRelease(v19);
  }

}

uint64_t sub_1000B1528()
{
  uint64_t v0;

  sub_1000381C8(v0 + 16);
  sub_1000381C8(v0 + 32);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  sub_100027F10((_QWORD *)(v0 + 64));

  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for TTRIGroupDetailPresenter()
{
  return objc_opt_self(_TtC9Reminders24TTRIGroupDetailPresenter);
}

uint64_t sub_1000B158C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD v33[5];

  v10 = objc_allocWithZone((Class)TTRUndoManager);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithDebugIdentifier:", v11);

  v13 = type metadata accessor for TTRIGroupMembershipInteractor();
  swift_allocObject(v13, 80, 7);
  v14 = a1;
  v15 = a2;
  v16 = a3;
  swift_bridgeObjectRetain(a4);
  v17 = v12;
  v18 = sub_1004323A4(v14, v15, v16, a4, v17);
  v19 = type metadata accessor for TTRIGroupMembershipRouter();
  v20 = swift_allocObject(v19, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, 0);
  v33[3] = v19;
  v33[4] = &off_1005FF7B8;
  v33[0] = v20;
  v21 = type metadata accessor for TTRIGroupMembershipPresenter();
  v22 = (_QWORD *)swift_allocObject(v21, 112, 7);
  v23 = sub_100028D48((uint64_t)v33, v19);
  v24 = __chkstk_darwin(v23);
  v26 = (_QWORD *)((char *)&v33[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, double))(v27 + 16))(v26, v24);
  v28 = *v26;
  v22[12] = v19;
  v22[13] = &off_1005FF7B8;
  v22[9] = v28;
  v22[3] = 0;
  swift_unknownObjectWeakInit(v22 + 2, 0);
  v22[5] = 0;
  swift_unknownObjectWeakInit(v22 + 4, 0);
  v22[7] = v18;
  v22[8] = &off_100607370;
  v22[6] = v17;
  v29 = v17;
  swift_retain();
  swift_retain();
  sub_100027F10(v33);
  type metadata accessor for TTRIGroupMembershipViewController();
  v33[0] = v22;
  v33[1] = &off_100605750;
  v33[2] = v29;
  static TTRTypedController<>.instantiateFromStoryboard(with:)(&v32, v33);

  v30 = v32;
  v18[3] = (uint64_t)&off_100605740;
  swift_unknownObjectWeakAssign(v18 + 2, v22);
  swift_release();
  v22[3] = &off_1005EC760;
  swift_unknownObjectWeakAssign(v22 + 2, v30);
  v22[5] = &off_1005EFD50;
  swift_unknownObjectWeakAssign(v22 + 4, a5);
  swift_release();
  swift_unknownObjectWeakAssign(v20 + 16, v30);
  swift_release();
  return v30;
}

void sub_1000B1844(uint64_t a1, void *a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char **v8;
  unint64_t v9;
  unsigned __int8 *i;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v4 = 0;
  v5 = a1 + 40;
  v6 = _swiftEmptyArrayStorage;
  v7 = -(uint64_t)v2;
  v8 = &selRef_supportsAttachments;
  v22 = a1 + 40;
  v23 = *(_QWORD *)(a1 + 16);
  v25 = -(uint64_t)v2;
  do
  {
    v24 = v6;
    if (v4 <= v2)
      v9 = v2;
    else
      v9 = v4;
    v27 = -(uint64_t)v9;
    for (i = (unsigned __int8 *)(v5 + 16 * v4++); ; i += 16)
    {
      if (v27 + v4 == 1)
      {
        __break(1u);
        return;
      }
      v12 = (void *)*((_QWORD *)i - 1);
      v13 = *i;
      v11 = v12;
      v26 = v13;
      v14 = (void *)TTRListOrCustomSmartListChangeItem.parentListID.getter(v12, v13);
      v15 = objc_msgSend(a2, v8[41]);
      v16 = v15;
      if (!v14)
        break;
      if (v15)
      {
        sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
        v17 = v14;
        v18 = static NSObject.== infix(_:_:)(v17, v16);

        v7 = v25;
        v8 = &selRef_supportsAttachments;

        if ((v18 & 1) != 0)
          goto LABEL_16;
      }
      else
      {

        v11 = v14;
      }
LABEL_8:

      ++v4;
      if (v7 + v4 == 1)
        return;
    }
    if (v15)
    {

      v11 = v16;
      goto LABEL_8;
    }
LABEL_16:
    v6 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
    {
      sub_1003D81E4(0, v24[2] + 1, 1);
      v6 = v24;
    }
    v20 = v6[2];
    v19 = v6[3];
    if (v20 >= v19 >> 1)
    {
      sub_1003D81E4(v19 > 1, v20 + 1, 1);
      v6 = v24;
    }
    v6[2] = v20 + 1;
    v21 = &v6[2 * v20];
    v21[4] = v12;
    *((_BYTE *)v21 + 40) = v26;
    v5 = v22;
    v2 = v23;
  }
  while (v7 + v4);
}

uint64_t sub_1000B1A58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B1A84()
{
  return sub_1000B0E60();
}

uint64_t sub_1000B1A90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B1AA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD v46[5];

  v45 = a1;
  v2 = sub_10002A750((uint64_t *)&unk_100653A00);
  __chkstk_darwin(v2);
  v44 = &v39[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_10002A750((uint64_t *)&unk_100665210);
  __chkstk_darwin(v4);
  v43 = &v39[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10002A750((uint64_t *)&unk_100665590);
  __chkstk_darwin(v6);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v8 = 4;
  v9 = type metadata accessor for TTRListType(0);
  swift_storeEnumTagMultiPayload(v8, v9, 2);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
  v41 = REMSmartListType.longTitle.getter(REMSmartListTypeAssigned);
  v11 = v10;
  v42 = static TTRListColors.SmartList.assigned.getter();
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource), v13);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  v16 = v15(ObjectType, v12);
  v17 = v16;
  if (v16)
    swift_unknownObjectRelease(v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(ObjectType, v12);
  v19 = v18;
  if (v18)
    swift_unknownObjectRelease(v18);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 56))(v46, ObjectType, v12);
  v20 = v46[3];
  sub_1000073A0((uint64_t)v46, &qword_100649FC0);
  v21 = v15(ObjectType, v12);
  if (v21)
  {
    v23 = v21;
    v24 = v22;
    v25 = swift_getObjectType(v21, v22);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v24);
    swift_unknownObjectRelease(v23);
  }
  else
  {
    v40 = 0;
  }
  v26 = v19 != 0;
  v27 = v17 != 0;
  if (v11)
  {
    v28 = v41;
  }
  else
  {
    v11 = 0xE000000000000000;
    v28 = 0;
  }
  v29 = v20 != 0;
  v30 = *(_BYTE *)(v1 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_hasDefaultNewReminderButton);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_completedRemindersCount + 8))
    v31 = 0;
  else
    v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_completedRemindersCount);
  v32 = type metadata accessor for TTRRemindersListViewModel.HashtagsState(0);
  v33 = v43;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v43, 1, 1, v32);
  v34 = type metadata accessor for TTRTemplatePublicLinkData(0);
  v35 = v44;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v44, 1, 1, v34);
  BYTE6(v38) = 0;
  WORD2(v38) = 1;
  LODWORD(v38) = 0;
  HIBYTE(v37) = v40 & 1;
  BYTE6(v37) = v29;
  WORD2(v37) = 0;
  BYTE3(v37) = v26;
  *(_WORD *)((char *)&v37 + 1) = v27;
  LOBYTE(v37) = 0;
  return TTRRemindersListViewModel.ListInfo.init(listType:name:color:reminderCount:sharingInfo:canCreateNewReminder:canToggleCompletedReminderVisbility:canAddSection:canClearCompletedReminders:canSaveAsTemplate:supportsEditableSections:canBePrinted:completedRemindersShown:hasDefaultNewReminderButton:completedRemindersCount:canBeDeleted:collapsedStatesAutosaveName:canCreateCustomSmartListForHashtagsState:hashtagsStateToShow:templateStatus:isOriginOfExistingTemplate:isPublicTemplatePreview:shouldCategorizeGroceryItems:isRecentlyDeletedList:iOS:macOS:)(v8, v28, v11, v42, 0, 1, 0, 3, v37, v30, v31, 0, 7105633, 0xE300000000000000, 0, v33, v35, v38);
}

uint64_t sub_1000B1DEC()
{
  return *(_QWORD *)TTRRemindersListViewModel.AssignmentData.VisibleElements.originatorString.unsafeMutableAddressor();
}

uint64_t sub_1000B1E04()
{
  id v0;
  char v1;

  v0 = *(id *)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor();
  v1 = TTRUserDefaults.showingLargeAttachments(forType:)(4);

  return v1 & 1;
}

void sub_1000B1E40(uint64_t a1)
{
  id v2;

  v2 = *(id *)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor();
  TTRUserDefaults.setShowingLargeAttachments(value:forType:)(a1, 4);

}

uint64_t sub_1000B1E8C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_hasCompletedReminders) & 1;
}

uint64_t sub_1000B1EA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_allocObject(&unk_1005EFEE8, 40, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v3;
  *(_OWORD *)a3 = xmmword_100522BB0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = sub_1000B4274;
  *(_QWORD *)(a3 + 32) = v7;
  swift_retain();
  return swift_retain();
}

uint64_t sub_1000B1F14@<X0>(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void *)a1();
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "objectID");

    *a2 = v5;
    v6 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    swift_storeEnumTagMultiPayload(a2, v6, 1);
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a2;
    v9 = 0;
    v10 = v6;
  }
  else
  {
    v10 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v8 = a2;
    v9 = 1;
  }
  return v7(v8, v9, 1, v10);
}

uint64_t sub_1000B1FBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v3);
  v4 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(a1);
  swift_release();
  swift_release();
  v7 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1)
  {
    v8 = (char *)&loc_1000B2118 + 4 * byte_100523090[swift_getEnumCaseMultiPayload(v6, v7)];
    __asm { BR              X10 }
  }
  return 0;
}

void sub_1000B2154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10001F580(v3, v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  sub_10002B1E8(v2, v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
  if (swift_getEnumCaseMultiPayload(v0, v1) == 1)
  {
    sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    JUMPOUT(0x1000B2130);
  }
  sub_10001F544(v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
  JUMPOUT(0x1000B2124);
}

double sub_1000B21E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;
  uint64_t v11;

  v4 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000B22F4();
  sub_10002B1E8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  LODWORD(v4) = swift_getEnumCaseMultiPayload(v6, v4);
  sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  if ((_DWORD)v4 == 2)
  {
    v8 = type metadata accessor for TTRSmartListDragAndDropPresenterCapability.MoveReminderSubjectForItem(0);
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = &off_1005F2998;
    v9 = sub_100028D70((_QWORD *)a2);
    sub_10002B1E8(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    *(_QWORD *)((char *)v9 + *(int *)(v8 + 20)) = v7;
    *((_BYTE *)v9 + *(int *)(v8 + 24)) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1000B22F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v1 = OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource____lazy_storage___dragAndDropCapability;
  if (*(_QWORD *)(v0
                 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource____lazy_storage___dragAndDropCapability))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource____lazy_storage___dragAndDropCapability);
  }
  else
  {
    v3 = _s9Reminders30DragAndDropPresenterCapabilityCMa_0();
    v2 = swift_allocObject(v3, 41, 7);
    v4 = (void *)REMSmartListTypeAssigned;
    *(_QWORD *)(v2 + 24) = 0;
    swift_unknownObjectWeakInit(v2 + 16, 0);
    *(_BYTE *)(v2 + 40) = 2;
    *(_QWORD *)(v2 + 24) = &off_1005EFE58;
    *(_QWORD *)(v2 + 32) = v4;
    swift_unknownObjectWeakAssign(v5, v0);
    *(_QWORD *)(v0 + v1) = v2;
    v6 = v4;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000B23A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000B22F4();
  sub_10000735C(a1, (uint64_t)v8, (uint64_t *)&unk_100640EB0);
  v10 = type metadata accessor for TTRSmartListDragAndDropPresenterCapability.AttributeMatchingRequest(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  result = sub_10000F614((uint64_t)v8, v11+ OBJC_IVAR____TtCC9Reminders42TTRSmartListDragAndDropPresenterCapabilityP33_EB37CBC97CD33B7B0DA5877F68F3A24924AttributeMatchingRequest_parent, (uint64_t *)&unk_100640EB0);
  *(_QWORD *)(v11
            + OBJC_IVAR____TtCC9Reminders42TTRSmartListDragAndDropPresenterCapabilityP33_EB37CBC97CD33B7B0DA5877F68F3A24924AttributeMatchingRequest_childIndex) = a2;
  *(_QWORD *)(v11
            + OBJC_IVAR____TtCC9Reminders42TTRSmartListDragAndDropPresenterCapabilityP33_EB37CBC97CD33B7B0DA5877F68F3A24924AttributeMatchingRequest_dragAndDropCapability) = v9;
  a3[3] = v10;
  a3[4] = (uint64_t)&off_1005F2830;
  *a3 = v11;
  return result;
}

void sub_1000B2498()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  REMReminderChangeItem.ttrAssignmentContext.getter(v9);
  v0 = v10;
  if (v10)
  {
    v1 = v11;
    sub_10001413C(v9, v10);
    v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
    v3 = sub_100027F10(v9);
    if (v2)
    {

      return;
    }
  }
  else
  {
    v3 = sub_1000073A0((uint64_t)v9, (uint64_t *)&unk_100649E00);
  }
  REMReminderChangeItem.ttrList.getter(v9, v3);
  v4 = v10;
  if (v10)
  {
    v5 = v11;
    sub_10001413C(v9, v10);
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 72))(v4, v5);
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, "objectID");

      sub_100027F10(v9);
      if (v8)
      {
        TTRReminderEditor.addAssignment(assigneeID:originatorID:)(v8, 0);

      }
    }
    else
    {
      sub_100027F10(v9);
    }
  }
  else
  {
    sub_1000073A0((uint64_t)v9, &qword_100649C80);
  }
}

uint64_t sub_1000B25CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  uint64_t *v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource), a2);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
  if (v6)
  {
    v8 = v6;
    v9 = v7;
    v10 = swift_getObjectType(v6, v7);
    LOBYTE(v9) = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v9 + 56))(a1, v10, v9);
    swift_unknownObjectRelease(v8);
    if ((v9 & 1) == 0)
      goto LABEL_11;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_10001413C(a1, v11);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 200))(v26, v11, v12);
  v13 = v27;
  if (!v27)
  {
    v24 = (uint64_t *)&unk_100649E00;
LABEL_10:
    sub_1000073A0((uint64_t)v26, v24);
    goto LABEL_11;
  }
  v14 = v28;
  sub_10001413C(v26, v27);
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  sub_100027F10(v26);
  if (!v15)
  {
LABEL_11:
    v23 = 0;
    return v23 & 1;
  }
  v16 = a1[3];
  v17 = a1[4];
  sub_10001413C(a1, v16);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 176))(v26, v16, v17);
  v18 = v27;
  if (!v27)
  {

    v24 = &qword_100649C80;
    goto LABEL_10;
  }
  v19 = v28;
  sub_10001413C(v26, v27);
  v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 72))(v18, v19);
  sub_100027F10(v26);
  if (!v20)
  {

    goto LABEL_11;
  }
  sub_100005ED8(0, (unint64_t *)&qword_100649E10, NSObject_ptr);
  v21 = objc_msgSend(v20, "objectID");
  v22 = objc_msgSend(v15, "assigneeID");
  v23 = static NSObject.== infix(_:_:)(v21, v22);

  return v23 & 1;
}

double sub_1000B27C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result;

  sub_1000B22F4();
  sub_100125824(a1, a2, a3);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000B2810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  TTRMutableTreeStorage.parent(of:)(a1);
  swift_release();
  swift_release();
  v11 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v7, 1, v11) == 1)
  {
    sub_1000073A0((uint64_t)v7, (uint64_t *)&unk_100640EB0);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload(v7, v11) != 1)
  {
    v13 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item;
    v14 = (uint64_t)v7;
LABEL_8:
    sub_10001F544(v14, v13);
    return 0;
  }
  sub_10001F580((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  sub_10002B1E8((uint64_t)v10, (uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
  if (swift_getEnumCaseMultiPayload(v4, v2) != 1)
  {
    sub_10001F544((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    v13 = (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader;
    v14 = (uint64_t)v10;
    goto LABEL_8;
  }
  v12 = *v4;
  sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  return v12;
}

uint64_t sub_1000B2A14()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[5];

  v3[3] = type metadata accessor for TTRUserActivityListPayload(0);
  v3[4] = &protocol witness table for TTRUserActivityListPayload;
  v0 = sub_100028D70(v3);
  *(_BYTE *)v0 = 4;
  v1 = type metadata accessor for TTRUserActivityListPayload.State(0);
  swift_storeEnumTagMultiPayload(v0, v1, 2);
  NSUserActivity.setPayload(_:)(v3);
  return sub_100027F10(v3);
}

uint64_t sub_1000B2A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v26[5];

  v1 = type metadata accessor for TTRUserActivityWindowSceneRestorationPayload(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v26[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005ED8(0, (unint64_t *)&qword_100649BD0, NSUserActivity_ptr);
  v10 = static NSUserActivity.forStoringWindowSceneRestorationPayload()();
  v11 = v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate);
  if (Strong)
  {
    v14 = Strong;
    v15 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType(Strong, v13);
    sub_10046B304(ObjectType, v15);
    swift_unknownObjectRelease(v14);
    v17 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v6, 1, v17);
    if ((_DWORD)v18 != 1)
    {
      TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v18);
      sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v20 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 0, 1, v20);
      goto LABEL_6;
    }
    sub_1000073A0((uint64_t)v6, (uint64_t *)&unk_100640EB0);
  }
  v19 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
LABEL_6:
  v21 = (uint64_t)&v3[*(int *)(sub_10002A750(&qword_10063F038) + 48)];
  *v3 = 4;
  sub_10000735C((uint64_t)v9, v21, (uint64_t *)&unk_1006463C0);
  v22 = type metadata accessor for TTRUserActivityWindowSceneRestorationPayload.State(0);
  swift_storeEnumTagMultiPayload(v3, v22, 2);
  v26[3] = v1;
  v26[4] = &protocol witness table for TTRUserActivityWindowSceneRestorationPayload;
  v23 = sub_100028D70(v26);
  sub_10002B1E8((uint64_t)v3, (uint64_t)v23, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUserActivityWindowSceneRestorationPayload);
  NSUserActivity.setPayload(_:)(v26);
  sub_10001F544((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUserActivityWindowSceneRestorationPayload);
  sub_1000073A0((uint64_t)v9, (uint64_t *)&unk_1006463C0);
  sub_100027F10(v26);
  return v10;
}

void *sub_1000B2D08()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_smartList);
  v2 = v1;
  return v1;
}

uint64_t sub_1000B2D40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRAutoCompleteReminderListScope(0);
  swift_storeEnumTagMultiPayload(a1, v2, 3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_1000B2D90()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_assignedDataModelSource));
  return swift_release(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource____lazy_storage___dragAndDropCapability));
}

uint64_t sub_1000B2DCC()
{
  uint64_t v0;

  v0 = sub_10046B320();

  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_assignedDataModelSource));
  swift_release();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B2E2C()
{
  return type metadata accessor for TTRShowAssignedViewModelSource(0);
}

uint64_t type metadata accessor for TTRShowAssignedViewModelSource(uint64_t a1)
{
  uint64_t result;

  result = qword_100643C60;
  if (!qword_100643C60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTRShowAssignedViewModelSource);
  return result;
}

uint64_t sub_1000B2E70(uint64_t a1)
{
  _QWORD v2[6];

  v2[0] = "\b";
  v2[1] = &unk_1005230D8;
  v2[2] = &unk_1005230F0;
  v2[3] = &unk_100523108;
  v2[4] = &unk_100523120;
  v2[5] = "\b";
  return swift_updateClassMetadata2(a1, 256, 6, v2, a1 + 1336);
}

void sub_1000B2ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  BOOL v61;
  BOOL *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  void (*v88)(char *, unint64_t, uint64_t, __n128);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  _WORD *v116;
  _WORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  void *v126;
  id v127;
  char *v128;
  _WORD *v129;
  uint64_t v130;
  char *v131;
  _WORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t Strong;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t ObjectType;
  uint64_t v147;
  BOOL *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  _WORD *v159;
  _WORD *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  __int128 v180[2];
  __int16 v181;
  char v182;
  _QWORD v183[2];
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  __int16 v189;
  char v190;
  char v191;
  _BYTE v192[3];
  _WORD v193[28];
  uint64_t v194;
  _OWORD v195[2];
  uint64_t v196;
  uint64_t v197;
  char v198;
  _BYTE v199[136];

  v3 = v2;
  v155 = a2;
  v174 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v174);
  v173 = (uint64_t *)((char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v6 = __chkstk_darwin(v5);
  v172 = (uint64_t)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v171 = (char *)&v147 - v8;
  v170 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v179 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v169 = (char *)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TTRRemindersListTreeViewModel.Section(0);
  v167 = *(_QWORD *)(v10 - 8);
  v168 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v13);
  v15 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v16);
  v18 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_10002A750(&qword_1006436C0);
  v19 = __chkstk_darwin(v166);
  v165 = (char *)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v164 = (uint64_t *)((char *)&v147 - v22);
  __chkstk_darwin(v21);
  v178 = (uint64_t *)((char *)&v147 - v23);
  v24 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v157 = (uint64_t)&v147 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v159 = *(_WORD **)(v27 - 8);
  v160 = (_WORD *)v27;
  v28 = __chkstk_darwin(v27);
  v150 = (char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v156 = (char *)&v147 - v30;
  v163 = type metadata accessor for REMRemindersListDataView.ListsModel(0);
  *(_QWORD *)&v176 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v177 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v175 = type metadata accessor for TTRListType.SortingCapability(0);
  v32 = __chkstk_darwin(v175);
  v33 = __chkstk_darwin(v32);
  v148 = (BOOL *)&v147 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v147 - v35;
  v37 = OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_smartList;
  v38 = *(void **)(v3 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_smartList);
  v158 = v3;
  v153 = v18;
  v154 = v15;
  v151 = v25;
  v152 = v24;
  v149 = v39;
  if (v38)
  {
    v40 = objc_msgSend(v38, "sortingStyle");
    v42 = REMRemindersListDataView.AssignedModel.assignedSmartList.getter(v41);
    if (!v42)
    {
      if (!v40)
      {
        v52 = 1;
        LODWORD(v161) = 1;
        goto LABEL_20;
      }
LABEL_12:

      LODWORD(v161) = 0;
LABEL_20:
      v3 = v158;
      goto LABEL_21;
    }
    v43 = v42;
  }
  else
  {
    v44 = REMRemindersListDataView.AssignedModel.assignedSmartList.getter(&selRef_supportsAttachments);
    if (!v44)
    {
      v52 = 1;
      LODWORD(v161) = 1;
LABEL_21:
      v53 = v163;
      goto LABEL_22;
    }
    v43 = v44;
    v40 = 0;
  }
  v45 = objc_msgSend(v43, "sortingStyle");

  if (!v40)
  {
    v53 = v163;
    if (v45)
    {

      LODWORD(v161) = 0;
    }
    else
    {
      v52 = 1;
      LODWORD(v161) = 1;
    }
    v3 = v158;
    goto LABEL_22;
  }
  if (!v45)
    goto LABEL_12;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v48 = v47;
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v51 = v49;
  if (v46 == v50 && v48 == v49)
    LODWORD(v161) = 1;
  else
    LODWORD(v161) = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v50, v49, 0);
  v53 = v163;

  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v51);
  v3 = v158;
LABEL_22:
  v54 = *(_QWORD *)(v3 + v37);
  v55 = REMRemindersListDataView.AssignedModel.assignedSmartList.getter((_QWORD *)v52);

  v56 = v3 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_sortingCapability;
  swift_beginAccess(v3 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_sortingCapability, &v194, 0, 0);
  sub_10002B1E8(v56, (uint64_t)v36, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  v57 = v175;
  if (swift_getEnumCaseMultiPayload(v36, v175) == 1)
  {
    v58 = (_QWORD *)((v54 == 0) ^ (v55 != 0));
    if ((v54 == 0) == (v55 != 0))
    {
      v59 = REMRemindersListDataView.AssignedModel.assignedSmartList.getter(v58);
      v60 = v59;
      if (v59)

      v61 = v60 != 0;
      v62 = v148;
      *v148 = v61;
      swift_storeEnumTagMultiPayload(v62, v57, 1);
      v63 = (uint64_t)v62;
      v64 = v149;
      sub_10001F580(v63, v149, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
      swift_beginAccess(v56, v199, 33, 0);
      sub_1000B4098(v64, v56);
      swift_endAccess(v199);
    }
  }
  else
  {
    sub_10001F544((uint64_t)v36, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  }
  v65 = REMRemindersListDataView.AssignedModel.assignedSmartList.getter(v58);
  v66 = v158;
  v67 = *(void **)(v158 + v37);
  *(_QWORD *)(v158 + v37) = v65;

  v68 = v177;
  v69 = ((uint64_t (*)(void))REMRemindersListDataView.AssignedModel.listsModel.getter)();
  v70 = REMRemindersListDataView.ListsModel.completedRemindersCount.getter(v69);
  v72 = v71;
  v73 = *(uint64_t (**)(char *, uint64_t))(v176 + 8);
  v74 = v73(v68, v53);
  v75 = v66 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_completedRemindersCount;
  *(_QWORD *)v75 = v70;
  *(_BYTE *)(v75 + 8) = v72 & 1;
  v76 = REMRemindersListDataView.AssignedModel.listsModel.getter(v74);
  LOBYTE(v70) = REMRemindersListDataView.ListsModel.hasCompletedReminders.getter(v76);
  v73(v68, v53);
  *(_BYTE *)(v66 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_hasCompletedReminders) = v70;
  if ((v161 & 1) == 0)
  {
    v126 = *(void **)(v66 + v37);
    if (v126)
    {
      v127 = objc_msgSend(v126, "sortingStyle");
      v128 = v150;
      REMSortingStyle.dataViewSortingStyle.getter();

      v129 = v159;
      v130 = (uint64_t)v156;
      v131 = v128;
      v132 = v160;
      (*((void (**)(char *, char *, _WORD *))v159 + 4))(v156, v131, v160);
    }
    else
    {
      v130 = (uint64_t)v156;
      TTRListType.PredefinedSmartListType.fallbackSortingStyle.getter(4);
      v129 = v159;
      v132 = v160;
    }
    sub_100474118(v130, 1);
    (*((void (**)(uint64_t, _WORD *))v129 + 1))(v130, v132);
    goto LABEL_46;
  }
  v77 = sub_1000B1AA8(v157);
  v78 = REMRemindersListDataView.AssignedModel.listsModel.getter(v77);
  v79 = REMRemindersListDataView.ListsModel.groups.getter(v78);
  v73(v68, v53);
  *(_QWORD *)&v180[0] = _swiftEmptyArrayStorage;
  sub_1003D83CC(0, 0, 0);
  v80 = *(_QWORD *)&v180[0];
  v81 = *(_QWORD *)(v79 + 16);
  v82 = swift_bridgeObjectRetain(v79);
  v163 = v81;
  if (!v81)
  {
LABEL_43:
    swift_bridgeObjectRelease_n(v79, 2);
    v133 = v157;
    v134 = (uint64_t)v153;
    sub_10002B1E8(v157, (uint64_t)v153, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v151 + 56))(v134, 0, 1, v152);
    v135 = type metadata accessor for TTRRemindersListObjectIDOnlyReminderIDProvider();
    v136 = swift_allocObject(v135, 16, 7);
    v137 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    v138 = (uint64_t)v154;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v154, 1, 1, v137);
    *((_QWORD *)&v184 + 1) = v135;
    *(_QWORD *)&v185 = &off_100604210;
    v183[0] = v136;
    sub_100010634((uint64_t)v183, (uint64_t)v180);
    v139 = swift_allocObject(&unk_1005EFEC0, 72, 7);
    *(_QWORD *)(v139 + 16) = v80;
    sub_10002E37C(v180, v139 + 24);
    v140 = v158;
    *(_QWORD *)(v139 + 64) = v158;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10047C8F8(1, v134, (uint64_t (*)(uint64_t))sub_10003E360, v139, v155, 0, v138);
    swift_release();
    sub_100027F10(v183);
    v66 = v140;
    swift_release();
    sub_1000073A0(v138, (uint64_t *)&unk_100640EB0);
    sub_1000073A0(v134, &qword_100649CA0);
    sub_10001F544(v133, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    swift_release();
LABEL_46:
    v141 = v66 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v66 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate);
    if (Strong)
    {
      v144 = Strong;
      v145 = *(_QWORD *)(v141 + 8);
      ObjectType = swift_getObjectType(Strong, v143);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 104))(4, ObjectType, v145);
      swift_unknownObjectRelease(v144);
    }
    return;
  }
  v83 = 0;
  v159 = v193;
  v160 = v192;
  v161 = v79;
  v162 = v12;
  while ((unint64_t)v83 < *(_QWORD *)(v79 + 16))
  {
    v84 = v79
        + ((*(unsigned __int8 *)(v179 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v179 + 80))
        + *(_QWORD *)(v179 + 72) * (_QWORD)v83;
    v86 = v165;
    v85 = v166;
    v87 = &v165[*(int *)(v166 + 48)];
    v88 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v179 + 16);
    v89 = v179;
    v90 = v83;
    v91 = v170;
    v88(v87, v84, v170, v82);
    v92 = v164;
    v93 = (char *)v164 + *(int *)(v85 + 48);
    v177 = v90;
    *v164 = v90;
    v94 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
    v94(v93, v87, v91);
    v95 = (uint64_t)v92;
    v96 = v178;
    sub_10000F614(v95, (uint64_t)v178, &qword_1006436C0);
    v97 = *(int *)(v85 + 48);
    v98 = &v86[v97];
    v99 = (char *)v96 + v97;
    v100 = *v96;
    ((void (*)(char *, char *, uint64_t))v88)(&v86[v97], v99, v91);
    v101 = v169;
    v102 = ((uint64_t (*)(char *, char *, uint64_t))v94)(v169, v98, v91);
    v103 = (void *)REMRemindersListDataView.ListsModel.Sublist.listColor.getter(v102);
    type metadata accessor for TTRListColors(0);
    static TTRListColors.color(for:)(v195, v103);
    v175 = v195[1];
    v176 = v195[0];
    v104 = v196;
    v105 = v197;
    v106 = v198;

    v107 = REMRemindersListDataView.ListsModel.Sublist.listName.getter();
    v109 = v108;
    if (v100)
      v110 = 3;
    else
      v110 = 2;
    v111 = sub_1000AD9D0((uint64_t)v195, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B764);
    v112 = REMRemindersListDataView.ListsModel.Sublist.listID.getter(v111);
    v114 = v173;
    v113 = v174;
    *v173 = v112;
    swift_storeEnumTagMultiPayload(v114, v113, 1);
    v183[0] = v107;
    v183[1] = v109;
    v184 = v176;
    v185 = v175;
    v186 = v104;
    v187 = v105;
    v188 = v106;
    v115 = (uint64_t)v162;
    v189 = 0;
    v190 = 0;
    v191 = v110;
    v116 = v160;
    *v160 = v181;
    *((_BYTE *)v116 + 2) = v182;
    v117 = v159;
    *(_OWORD *)v159 = 0u;
    *((_OWORD *)v117 + 1) = 0u;
    *((_OWORD *)v117 + 2) = 0u;
    v193[24] = 255;
    TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:)((Swift::OpaquePointer)v183);
    sub_10000F614((uint64_t)v183, (uint64_t)v199, &qword_100649B60);
    v118 = (uint64_t)v171;
    TTRRemindersListViewModel.SectionHeader.init(id:title:isVisible:isTappable:isTitleEditable:isCollapsable:isCustomSmartList:listObjectID:)(v114, v199, 1, 0, 0, 0, 0, 0);
    v119 = v172;
    v120 = sub_10002B1E8(v118, v172, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    v121 = REMRemindersListDataView.ListsModel.Sublist.reminders.getter(v120);
    sub_1000AD9D0((uint64_t)v195, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B328);
    sub_10001F544(v118, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v101, v91);
    sub_10001F580(v119, v115, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    v122 = v168;
    *(_QWORD *)(v115 + *(int *)(v168 + 20)) = v121;
    *(_BYTE *)(v115 + *(int *)(v122 + 24)) = 0;
    sub_1000073A0((uint64_t)v178, &qword_1006436C0);
    v80 = *(_QWORD *)&v180[0];
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v180[0]) & 1) == 0)
    {
      sub_1003D83CC(0, *(_QWORD *)(v80 + 16) + 1, 1);
      v80 = *(_QWORD *)&v180[0];
    }
    v124 = *(_QWORD *)(v80 + 16);
    v123 = *(_QWORD *)(v80 + 24);
    v79 = v161;
    v125 = v177;
    if (v124 >= v123 >> 1)
    {
      sub_1003D83CC(v123 > 1, v124 + 1, 1);
      v80 = *(_QWORD *)&v180[0];
    }
    v83 = v125 + 1;
    *(_QWORD *)(v80 + 16) = v124 + 1;
    sub_10001F580(v115, v80+ ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80))+ *(_QWORD *)(v167 + 72) * v124, type metadata accessor for TTRRemindersListTreeViewModel.Section);
    if ((char *)v163 == v83)
      goto LABEL_43;
  }
  __break(1u);
}

uint64_t sub_1000B3B48(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v4 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001413C(a1, v9);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10))
  {
    sub_10002B1E8(a2, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v11 = (char *)&loc_1000B3C68 + dword_1000B3D54[swift_getEnumCaseMultiPayload(v8, v6)];
    __asm { BR              X10 }
  }
  return 0;
}

void sub_1000B3CB4()
{
  void *v0;

  JUMPOUT(0x1000B3C8CLL);
}

void sub_1000B3CBC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  sub_10001F580(v4, v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  v5 = objc_msgSend(v1, "list");
  v6 = objc_msgSend(v5, "remObjectID");

  *v0 = v6;
  swift_storeEnumTagMultiPayload(v0, v2, 1);
  static TTRRemindersListViewModel.SectionID.__derived_enum_equals(_:_:)(v3, v0);

  sub_10001F544((uint64_t)v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
  sub_10001F544(v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
  JUMPOUT(0x1000B3C90);
}

uint64_t sub_1000B3D84()
{
  uint64_t v0;

  sub_1000381C8(v0 + 16);

  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t _s9Reminders30DragAndDropPresenterCapabilityCMa_0()
{
  return objc_opt_self(_TtC9RemindersP33_5A5EC557B80912A038943751DE08019530DragAndDropPresenterCapability);
}

uint64_t sub_1000B3DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t);
  _BYTE v16[24];

  v1 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v3);
  v7 = &v16[-v6 - 8];
  v8 = type metadata accessor for TTRListType.SortingCapability(0);
  __chkstk_darwin(v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_sortingCapability;
  swift_beginAccess(v11, v16, 0, 0);
  sub_10002B1E8(v11, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v12 = *v10;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v10, v1);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for REMRemindersListDataView.SortingStyle.manual(_:), v1);
    v12 = static REMRemindersListDataView.SortingStyle.== infix(_:_:)(v7, v5);
    v13 = *(void (**)(char *, uint64_t))(v2 + 8);
    v13(v5, v1);
    v13(v7, v1);
  }
  return v12 & 1;
}

uint64_t sub_1000B3F4C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v4);
  v6 = (id *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002B1E8(a1, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {

    v8 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
    swift_storeEnumTagMultiPayload(a2, v8, 4);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
  }
  else
  {
    sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    v10 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
}

void sub_1000B404C()
{
  sub_1000B40DC();
}

uint64_t sub_1000B4054()
{
  return 0;
}

uint64_t sub_1000B4064()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100027F10((_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000B4098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRListType.SortingCapability(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000B40DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v0 = type metadata accessor for TTRRemindersListViewModel.ReminderID(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for TTRRemindersListViewModel.Item.ReminderCasesInItem(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersListViewModel.Item.reminderCasesOnly.getter(v2);
  v5 = (char *)sub_1000B419C + 4 * byte_10052309C[swift_getEnumCaseMultiPayload(v4, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1000B419C()
{
  uint64_t v0;

  sub_10001F544(v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item.ReminderCasesInItem);
  return 0;
}

uint64_t sub_1000B4248()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B4274@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B1F14(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1000B4280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100644338);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100644338);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000B4310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a1, (uint64_t)v9, (uint64_t *)&unk_100640EB0);
  v10 = type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.SectionsInsertionRequest(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v12 = v11
      + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___creationTarget;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = -2;
  *(_BYTE *)(v11
           + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___hasValidInsertionLocation) = 2;
  sub_10000F614((uint64_t)v9, v11+ OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_parent, (uint64_t *)&unk_100640EB0);
  *(_QWORD *)(v11
            + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_childIndex) = a2;
  *(_QWORD *)(v11
            + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_dragAndDropCapability) = v3;
  a3[3] = v10;
  a3[4] = (uint64_t)&off_1005F0020;
  *a3 = v11;
  return swift_retain();
}

uint64_t sub_1000B4428()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!Strong)
  {
    if (qword_10063D378 != -1)
      swift_once(&qword_10063D378, sub_1000B4280);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100012DC4(v9, (uint64_t)qword_100644338);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing TTRRemindersListDragAndDropSectionsPresenterCapabilityDelegate", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return 0;
  }
  v2 = Strong;
  v3 = swift_unknownObjectWeakLoadStrong(Strong + 56);
  if (!v3)
  {
    swift_unknownObjectRelease(v2);
    return 0;
  }
  v5 = v3;
  v6 = *(_QWORD *)(v2 + 64);
  ObjectType = swift_getObjectType(v3, v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
  swift_unknownObjectRelease(v2);
  swift_unknownObjectRelease(v5);
  return v8;
}

uint64_t sub_1000B4554(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (!Strong)
  {
    if (qword_10063D378 != -1)
      swift_once(&qword_10063D378, sub_1000B4280);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100012DC4(v11, (uint64_t)qword_100644338);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing TTRRemindersListDragAndDropSectionsPresenterCapabilityDelegate", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    return 0;
  }
  v4 = Strong;
  v5 = swift_unknownObjectWeakLoadStrong(Strong + 56);
  if (!v5)
  {
    swift_unknownObjectRelease(v4);
    return 0;
  }
  v7 = v5;
  v8 = *(_QWORD *)(v4 + 64);
  ObjectType = swift_getObjectType(v5, v6);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, ObjectType, v8);
  swift_unknownObjectRelease(v4);
  swift_unknownObjectRelease(v7);
  return v10;
}

uint64_t sub_1000B46A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;

  v1 = OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___hasValidInsertionLocation;
  v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___hasValidInsertionLocation);
  if (v2 == 2)
  {
    v3 = sub_1000B479C(v0);
    *(_BYTE *)(v0 + v1) = v3 & 1;
  }
  else
  {
    v3 = v2 & 1;
  }
  return v3 & 1;
}

void *sub_1000B46EC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;
  char v6;
  char v7;

  v1 = v0
     + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___creationTarget;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___creationTarget);
  v3 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___creationTarget
                          + 8);
  v4 = v2;
  if (v3 == 254)
  {
    v4 = (void *)sub_1000B4554(v0+ OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_parent);
    v5 = *(void **)v1;
    *(_QWORD *)v1 = v4;
    v6 = *(_BYTE *)(v1 + 8);
    *(_BYTE *)(v1 + 8) = v7;
    sub_1000B5EC0(v4, v7);
    sub_1000B5ED4(v5, v6);
  }
  sub_1000B5EE8(v2, v3);
  return v4;
}

uint64_t sub_1000B479C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, _QWORD, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersListViewModel.Item.SectionCasesItem(0);
  __chkstk_darwin(v6);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v9);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000B46EC();
  v14 = ~v13;
  sub_1000760F4(v12, v13);
  if (v14)
  {
    v15 = *(_QWORD *)(a1
                    + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_dragAndDropCapability);
    result = sub_1000B4428();
    if (!result)
      return result;
    v37[1] = v15;
    v38 = v5;
    v39 = v11;
    v40 = result;
    v19 = *(_QWORD *)(result + 24);
    v18 = *(_QWORD *)(result + 32);
    ObjectType = swift_getObjectType(v19, v17);
    v41 = v19;
    v21 = a1
        + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_parent;
    v22 = *(_QWORD *)(v18 + 8);
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v22 + 24);
    v24 = swift_unknownObjectRetain(v19);
    v25 = v23(v21, ObjectType, v22, v24);
    swift_unknownObjectRelease(v19);
    v27 = *(_QWORD *)(a1
                    + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_childIndex);
    if (v27 < v25)
    {
      v28 = *(_QWORD *)(v40 + 24);
      v29 = *(_QWORD *)(v40 + 32);
      v37[0] = swift_getObjectType(v28, v26);
      v41 = v28;
      v30 = *(_QWORD *)(v29 + 8);
      v31 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, __n128))(v30 + 32);
      v32 = swift_unknownObjectRetain(v28);
      v33 = (uint64_t)v39;
      v31(v27, v21, v37[0], v30, v32);
      v34 = swift_unknownObjectRelease(v28);
      TTRRemindersListViewModel.Item.sectionCasesOnly.getter(v34);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
      {
        v35 = sub_10001F580((uint64_t)v8, (uint64_t)v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
        TTRRemindersListViewModel.SectionID.editableSectionCasesOnly.getter(v35);
        __asm { BR              X10 }
      }
      sub_10001F544(v33, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    }
    swift_release();
  }
  return 0;
}

void sub_1000B49F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v5 = Strong;
    v6 = (void *)sub_100220B04();
    v8 = v7;
    v9 = ~v7;
    swift_release();
    swift_unknownObjectRelease(v5);
    sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10001F544(v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    if (v9)
    {
      sub_1000760F4(v6, v8);
      JUMPOUT(0x1000B4990);
    }
  }
  else
  {
    if (qword_10063D378 != -1)
      swift_once(&qword_10063D378, sub_1000B4280);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100012DC4(v10, (uint64_t)qword_100644338);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing TTRRemindersListDragAndDropSectionsPresenterCapabilityDelegate", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
    swift_release();

    sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10001F544(v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  JUMPOUT(0x1000B498CLL);
}

uint64_t sub_1000B4B88()
{
  uint64_t v0;

  sub_1000073A0(v0+ OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_parent, (uint64_t *)&unk_100640EB0);
  swift_release();
  sub_1000B5ED4(*(id *)(v0+ OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___creationTarget), *(_BYTE *)(v0+ OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest____lazy_storage___creationTarget+ 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void *sub_1000B4BE8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 32);
  v2 = *(unsigned __int16 *)(v0 + 40);
  v3 = v1;
  if ((v2 & 0xFF00) == 0xFE00)
  {
    v3 = (void *)sub_1000B4C7C(v0);
    v4 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 32) = v3;
    v5 = *(unsigned __int16 *)(v0 + 40);
    *(_WORD *)(v0 + 40) = v6;
    sub_1000B5F3C(v3, v6);
    sub_1000B5EFC(v4, v5);
  }
  sub_1000B5F64(v1, v2);
  return v3;
}

uint64_t sub_1000B4C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;

  v2 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersListViewModel.Item.SectionCasesItem(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_dragAndDropCapability;
  swift_retain();
  v14 = sub_1000B4428();
  swift_release();
  if (v14)
  {
    v39 = v13;
    v40 = v3;
    v41 = v2;
    v42 = v11;
    v17 = *(_QWORD *)(v14 + 24);
    v16 = *(_QWORD *)(v14 + 32);
    ObjectType = swift_getObjectType(v17, v15);
    v43 = v17;
    v19 = v12
        + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_parent;
    v20 = *(_QWORD *)(v16 + 8);
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 24);
    v22 = swift_unknownObjectRetain(v17);
    v23 = v21(v19, ObjectType, v20, v22);
    swift_unknownObjectRelease(v17);
    v25 = *(_QWORD *)(v12
                    + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_childIndex);
    if (v25 < v23)
    {
      v38 = v5;
      v27 = *(_QWORD *)(v14 + 24);
      v26 = *(_QWORD *)(v14 + 32);
      v37 = swift_getObjectType(v27, v24);
      v43 = v27;
      v28 = *(_QWORD *)(v26 + 8);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v28 + 32);
      v30 = swift_unknownObjectRetain(v27);
      v31 = (uint64_t)v42;
      v29(v25, v19, v37, v28, v30);
      v32 = swift_unknownObjectRelease(v27);
      TTRRemindersListViewModel.Item.sectionCasesOnly.getter(v32);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v8, 1, v41) != 1)
      {
        v34 = sub_10001F580((uint64_t)v8, (uint64_t)v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
        TTRRemindersListViewModel.SectionID.editableSectionCasesOnly.getter(v34);
        __asm { BR              X10 }
      }
      sub_10001F544(v31, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    }
    swift_release();
  }
  return 0;
}

void sub_1000B4ED0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v1 + *(_QWORD *)(v3 - 120)) + 16);
  if (Strong)
  {
    v5 = Strong;
    swift_retain();
    sub_100220B04();
    v7 = ~v6;
    swift_release();
    swift_release();
    swift_unknownObjectRelease(v5);

    sub_10001F544(*(_QWORD *)(v3 - 128), (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    if (v7)
      JUMPOUT(0x1000B4E70);
  }
  else
  {
    v8 = qword_10063D378;
    swift_retain();
    if (v8 != -1)
      swift_once(&qword_10063D378, sub_1000B4280);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100012DC4(v9, (uint64_t)qword_100644338);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing TTRRemindersListDragAndDropSectionsPresenterCapabilityDelegate", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    swift_release();

    swift_release();
    sub_10001F544(*(_QWORD *)(v3 - 128), (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10001F544(v2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  }
  JUMPOUT(0x1000B4E68);
}

double sub_1000B5084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40[3];
  __int128 v41;
  uint64_t v42;
  _UNKNOWN **v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[5];
  unsigned __int8 v48;

  v2 = v1;
  if ((sub_1000B46A4() & 1) != 0)
  {
    v4 = swift_allocObject(&unk_1005F0058, 24, 7);
    swift_weakInit(v4 + 16, v2);
    v5 = swift_allocObject(&unk_1005F0080, 32, 7);
    *(_QWORD *)(v5 + 16) = sub_1000B5D48;
    *(_QWORD *)(v5 + 24) = v4;
    swift_retain();
    v6 = sub_100455C50(0, 1, 1, _swiftEmptyArrayStorage);
    v8 = v6[2];
    v7 = v6[3];
    if (v8 >= v7 >> 1)
      v6 = sub_100455C50((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
    v6[2] = v8 + 1;
    v9 = &v6[2 * v8];
    v9[4] = sub_1000B5D74;
    v9[5] = v5;
    swift_release();
    v10 = *(_QWORD *)(a1 + 16) == 0;
  }
  else
  {
    v6 = _swiftEmptyArrayStorage;
    v10 = 1;
  }
  type metadata accessor for TTRProcessMoveSubjects(0);
  v47[0] = a1;
  swift_bridgeObjectRetain(v6);
  v11 = sub_10002A750(&qword_1006445B0);
  v39 = sub_100023FEC(&qword_1006445B8, &qword_1006445B0, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = static TTRProcessMoveSubjects.process<A>(moveSubjects:disallowOverride:moveFilters:)(v47, v10, v6, v11, v39);
  v14 = v13;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(v2 + 24) = v12 & 1;
  v15 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(v2 + 16);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v36 = v11;
    v37 = v6;
    v38 = v2;
    v18 = v16 + 32;
    v35 = v16;
    swift_bridgeObjectRetain(v16);
    v19 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000735C(v18, (uint64_t)v47, &qword_1006445C0);
      sub_100010634((uint64_t)v47, (uint64_t)v40);
      v20 = v48;
      sub_10002E37C(v40, (uint64_t)&v41);
      if (v20 == 1)
      {
        sub_10002E37C(&v41, (uint64_t)&v44);
      }
      else
      {
        sub_100027F10(&v41);
        v46 = 0;
        v44 = 0u;
        v45 = 0u;
      }
      sub_1000073A0((uint64_t)v47, &qword_1006445C0);
      if (*((_QWORD *)&v45 + 1))
      {
        sub_10002E37C(&v44, (uint64_t)v40);
        sub_10002E37C(v40, (uint64_t)&v44);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
          v19 = sub_100455B10(0, v19[2] + 1, 1, v19);
        v22 = v19[2];
        v21 = v19[3];
        if (v22 >= v21 >> 1)
          v19 = sub_100455B10((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
        v23 = sub_100028D48((uint64_t)&v44, *((uint64_t *)&v45 + 1));
        __chkstk_darwin(v23);
        v25 = (char *)&v34 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v26 + 16))(v25);
        v42 = type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem(0);
        v43 = &off_1005F0098;
        v27 = sub_100028D70(&v41);
        sub_10001F580((uint64_t)v25, (uint64_t)v27, type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem);
        v19[2] = v22 + 1;
        sub_10002E37C(&v41, (uint64_t)&v19[5 * v22 + 4]);
        sub_100027F10(&v44);
      }
      else
      {
        sub_1000073A0((uint64_t)&v44, &qword_1006445C8);
      }
      v18 += 48;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease(v35);
    v2 = v38;
    v6 = v37;
    v11 = v36;
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  v28 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = v19;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(v2 + 56);
  if (v29)
  {
    v47[0] = *(_QWORD *)(v2 + 56);
    v30 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    swift_bridgeObjectRetain(v29);
    v31 = Sequence.completeCompactMap<A>(_:)(sub_1000B59D8, 0, v11, v30, v39);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v31 = 0;
  }
  v32 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v31;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v32).n128_u64[0];
  return result;
}

uint64_t sub_1000B54D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v1 = sub_10002A750(&qword_100654860);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)v25 - v5;
  v7 = sub_1000B4BE8();
  v9 = BYTE1(v8);
  sub_1000B5F14(v7, v8);
  v10 = 0;
  if (v9 == 255)
    return v10;
  v11 = *(_QWORD *)(v0 + 64);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v0 + 48);
  swift_retain();
  swift_bridgeObjectRetain(v11);
  v13 = sub_1000B4428();
  swift_release();
  if (!v13)
  {
    swift_bridgeObjectRelease(v11);
    return 0;
  }
  v14 = v12
      + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_parent;
  v15 = *(_QWORD *)(v12
                  + OBJC_IVAR____TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B24SectionsInsertionRequest_childIndex);
  v16 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
  sub_1000B5F7C(v14, (uint64_t)v4);
  *(_QWORD *)&v4[*(int *)(v1 + 36)] = v15;
  sub_10000F614((uint64_t)v4, (uint64_t)v6, &qword_100654860);
  v25[1] = v11;
  v17 = sub_10002A750(&qword_100649DF0);
  v18 = sub_10002A750(&qword_1006445E0);
  v19 = sub_100023FEC((unint64_t *)&qword_100649EE0, &qword_100649DF0, (uint64_t)&protocol conformance descriptor for [A]);
  v20 = Sequence.completeCompactMap<A>(_:)(sub_1000B5FC4, v13, v17, v18, v19);
  if (v20)
  {
    v21 = v20;
    sub_10002A750(&qword_1006445E8);
    v22 = sub_100023FEC(&qword_1006445F0, &qword_100654860, (uint64_t)&protocol conformance descriptor for TTRDerivedTreeLocation<A>);
    v23 = sub_100023FEC(&qword_1006445F8, &qword_100654860, (uint64_t)&protocol conformance descriptor for TTRDerivedTreeLocation<A>);
    v10 = static TTRMutableTreeStorage.steps<A>(forMoving:to:)(v21, v6, v1, v22, v23);
    swift_bridgeObjectRelease(v11);
    swift_release();
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    swift_release();
    v10 = 0;
  }
  sub_1000073A0((uint64_t)v6, &qword_100654860);
  return v10;
}

_QWORD *sub_1000B574C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  id v11;
  char v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  char v19;
  _QWORD v20[5];

  v1 = *(_QWORD *)(v0 + 56);
  if (!v1)
    return 0;
  swift_bridgeObjectRetain(v1);
  v2 = sub_1000B46EC();
  if (v3 != -1)
  {
    v4 = v2;
    v5 = v3;
    v6 = *(_QWORD *)(v1 + 16);
    if (v6)
    {
      v19 = v3;
      v7 = v1 + 32;
      swift_bridgeObjectRetain(v1);
      v8 = _swiftEmptyArrayStorage;
      do
      {
        sub_100010634(v7, (uint64_t)v20);
        v9 = sub_10001413C(v20, v20[3]);
        v10 = (char *)v9
            + *(int *)(type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem(0)
                     + 20);
        v11 = *(id *)v10;
        v12 = v10[8];
        v13 = *(id *)v10;
        sub_100027F10(v20);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          v8 = sub_100455C8C(0, v8[2] + 1, 1, v8);
        v15 = v8[2];
        v14 = v8[3];
        if (v15 >= v14 >> 1)
          v8 = sub_100455C8C((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
        v8[2] = v15 + 1;
        v16 = &v8[2 * v15];
        v16[4] = v11;
        *((_BYTE *)v16 + 40) = v12;
        v7 += 40;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease_n(v1, 2);
      v5 = v19;
      if (!v8[2])
        goto LABEL_15;
    }
    else
    {
      swift_bridgeObjectRelease(v1);
      v8 = _swiftEmptyArrayStorage;
      if (!_swiftEmptyArrayStorage[2])
      {
LABEL_15:
        swift_bridgeObjectRelease(v8);
        sub_1000760F4(v4, v5);
        return 0;
      }
    }
    sub_1000B4BE8();
    if (v17 != 255)
      return v8;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease(v1);
  return 0;
}

uint64_t sub_1000B593C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = (uint64_t)sub_10001413C(a1, a1[3]);
    swift_retain();
    LOBYTE(v5) = sub_1000B5D9C(v5);
    swift_release();
    swift_release();
    if ((v5 & 1) != 0)
      return 0;
    else
      return 2;
  }
  return result;
}

uint64_t sub_1000B59D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  _BYTE v18[40];

  v4 = sub_10002A750(&qword_1006445D0);
  __chkstk_darwin(v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100010634(a1, (uint64_t)v18);
  v11 = sub_10002A750(&qword_1006445D8);
  v12 = swift_dynamicCast(v6, v18, v11, v7, 6);
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if ((v12 & 1) != 0)
  {
    v13(v6, 0, 1, v7);
    sub_10001F580((uint64_t)v6, (uint64_t)v10, type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem);
    sub_10002B1E8((uint64_t)v10, a2, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    sub_10001F544((uint64_t)v10, type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem);
    v14 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 0, 1, v14);
  }
  else
  {
    v13(v6, 1, 1, v7);
    sub_1000073A0((uint64_t)v6, &qword_1006445D0);
    v16 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_1000B5B7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_1000B5EFC(*(void **)(v0 + 32), *(unsigned __int16 *)(v0 + 40));
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability()
{
  return objc_opt_self(_TtC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapability);
}

uint64_t sub_1000B5BE4()
{
  return type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.SectionsInsertionRequest(0);
}

uint64_t type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.SectionsInsertionRequest(uint64_t a1)
{
  return sub_100007328(a1, qword_100644440, (uint64_t)&nominal type descriptor for TTRRemindersListDragAndDropSectionsPresenterCapability.SectionsInsertionRequest);
}

void sub_1000B5C00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_1000B5C9C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = "\t";
    v4[4] = &unk_100523508;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1000B5C9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1006539D0)
  {
    v2 = type metadata accessor for TTRRemindersListViewModel.Item(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1006539D0);
  }
}

uint64_t type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.SectionsInsertionPlan()
{
  return objc_opt_self(_TtCC9Reminders54TTRRemindersListDragAndDropSectionsPresenterCapabilityP33_D785A6EAE5278EEAAA813EF6D537F28B21SectionsInsertionPlan);
}

uint64_t type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem(uint64_t a1)
{
  return sub_100007328(a1, qword_100644660, (uint64_t)&nominal type descriptor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem);
}

uint64_t sub_1000B5D24()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B5D48(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000B593C(a1, v1);
}

uint64_t sub_1000B5D50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B5D74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1000B5D9C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  char v14;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;

  v2 = type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem(0);
  v17 = v2;
  v18 = &off_1005F0098;
  v3 = sub_100028D70(v16);
  sub_10002B1E8(a1, (uint64_t)v3, type metadata accessor for TTRRemindersListDragAndDropSectionsPresenterCapability.MoveSectionSubjectForItem);
  if ((sub_1000B46A4() & 1) == 0 || (v4 = sub_1000B46EC(), (_BYTE)v5 == 0xFF))
  {
    v14 = 0;
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_10005789C();
    v8 = (void *)TTRRemindersListInteractorSectionsCapabilityTarget.objectID.getter(v6, v7);
    v9 = (char *)sub_10001413C(v16, v17) + *(int *)(v2 + 20);
    v10 = *(id *)v9;
    v11 = v9[8];
    v12 = *(id *)v9;
    v13 = (void *)TTRSection.parentID.getter(v10, v11);

    v14 = static NSObject.== infix(_:_:)(v8, v13);
    sub_1000760F4(v6, v7);
  }
  sub_100027F10(v16);
  return v14 & 1;
}

id sub_1000B5EC0(id result, char a2)
{
  if (a2 != -1)
    return result;
  return result;
}

void sub_1000B5ED4(id a1, char a2)
{
  if (a2 != 254)
    sub_1000760F4(a1, a2);
}

id sub_1000B5EE8(id result, char a2)
{
  if (a2 != 254)
    return sub_1000B5EC0(result, a2);
  return result;
}

void sub_1000B5EFC(void *a1, uint64_t a2)
{
  if ((a2 & 0xFF00) != 0xFE00)
    sub_1000B5F14(a1, a2);
}

void sub_1000B5F14(void *a1, uint64_t a2)
{
  if (BYTE1(a2) != 255)
    sub_1000B5F28(a1, a2, BYTE1(a2));
}

void sub_1000B5F28(id a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u)

}

id sub_1000B5F3C(id result, uint64_t a2)
{
  if (BYTE1(a2) != 255)
    return sub_1000B5F50(result, a2, BYTE1(a2));
  return result;
}

id sub_1000B5F50(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u)
    return result;
  return result;
}

id sub_1000B5F64(id result, uint64_t a2)
{
  if ((a2 & 0xFF00) != 0xFE00)
    return sub_1000B5F3C(result, a2);
  return result;
}

uint64_t sub_1000B5F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750((uint64_t *)&unk_100640EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B5FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003812C8(a1, a2);
}

void **sub_1000B5FDC(void **a1, void **a2, uint64_t a3)
{
  void **v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(void **, uint64_t, uint64_t);
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(void **, uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void **v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(void **, uint64_t, uint64_t);
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t, __n128);
  __n128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  void *v135;
  id v136;
  int *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  id v169;
  void *v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  id v177;
  void *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  id v186;
  void *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  void *v193;
  id v194;
  unsigned __int8 v196;
  void *v197;
  unsigned __int8 v198;
  char v199;
  char *v200;
  uint64_t v201;
  char v202;
  void **v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;

  v3 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = (char *)*a2;
    *a1 = *a2;
    a1 = (void **)&v14[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    switch(swift_getEnumCaseMultiPayload(v3, v7))
    {
      case 0u:
        v8 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v204 = v7;
        v206 = v6;
        switch(swift_getEnumCaseMultiPayload(v3, v8))
        {
          case 1u:
            v9 = *v3;
            *a1 = *v3;
            v10 = v9;
            v11 = a1;
            v12 = v8;
            v13 = 1;
            goto LABEL_43;
          case 2u:
            v95 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(a1, v3, v95);
            v11 = a1;
            v12 = v8;
            v13 = 2;
            goto LABEL_43;
          case 3u:
            v96 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(a1, v3, v96);
            v11 = a1;
            v12 = v8;
            v13 = 3;
            goto LABEL_43;
          case 4u:
            v97 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(a1, v3, v97);
            v11 = a1;
            v12 = v8;
            v13 = 4;
            goto LABEL_43;
          case 5u:
            v98 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(a1, v3, v98);
            v11 = a1;
            v12 = v8;
            v13 = 5;
            goto LABEL_43;
          case 6u:
            v99 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(a1, v3, v99);
            v11 = a1;
            v12 = v8;
            v13 = 6;
            goto LABEL_43;
          case 8u:
            v100 = *v3;
            *a1 = *v3;
            v101 = v100;
            v11 = a1;
            v12 = v8;
            v13 = 8;
            goto LABEL_43;
          case 9u:
            v102 = *v3;
            *a1 = *v3;
            v103 = v102;
            v11 = a1;
            v12 = v8;
            v13 = 9;
LABEL_43:
            swift_storeEnumTagMultiPayload(v11, v12, v13);
            break;
          default:
            memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
            break;
        }
        v104 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
        v105 = v104[5];
        v106 = (char *)a1 + v105;
        v107 = (char *)v3 + v105;
        v108 = *(uint64_t *)((char *)v3 + v105 + 8);
        if (v108)
        {
          *(_QWORD *)v106 = *(_QWORD *)v107;
          *((_QWORD *)v106 + 1) = v108;
          v109 = (void *)*((_QWORD *)v107 + 2);
          v110 = *((_QWORD *)v107 + 3);
          v111 = *((_QWORD *)v107 + 4);
          v112 = *((_QWORD *)v107 + 5);
          v113 = *((_QWORD *)v107 + 6);
          v201 = *((_QWORD *)v107 + 7);
          v196 = v107[64];
          swift_bridgeObjectRetain(v108);
          sub_10003E1F0(v109, v110, v111, v112, v113, v201, v196);
          *((_QWORD *)v106 + 2) = v109;
          *((_QWORD *)v106 + 3) = v110;
          *((_QWORD *)v106 + 4) = v111;
          *((_QWORD *)v106 + 5) = v112;
          *((_QWORD *)v106 + 6) = v113;
          *((_QWORD *)v106 + 7) = v201;
          v106[64] = v196;
          *(_DWORD *)(v106 + 65) = *(_DWORD *)(v107 + 65);
          v114 = v107[120];
          if (v114 == 255)
          {
            v115 = *(_OWORD *)(v107 + 88);
            *(_OWORD *)(v106 + 72) = *(_OWORD *)(v107 + 72);
            *(_OWORD *)(v106 + 88) = v115;
            *(_OWORD *)(v106 + 104) = *(_OWORD *)(v107 + 104);
            v106[120] = v107[120];
          }
          else
          {
            v202 = v114 & 1;
            v120 = *((_QWORD *)v107 + 10);
            v197 = (void *)*((_QWORD *)v107 + 9);
            v121 = *((_QWORD *)v107 + 11);
            v122 = *((_QWORD *)v107 + 12);
            v123 = *((_QWORD *)v107 + 13);
            v124 = *((_QWORD *)v107 + 14);
            sub_10002B764(v197, v120, v121, v122, v123, v124, v114 & 1);
            *((_QWORD *)v106 + 9) = v197;
            *((_QWORD *)v106 + 10) = v120;
            *((_QWORD *)v106 + 11) = v121;
            *((_QWORD *)v106 + 12) = v122;
            *((_QWORD *)v106 + 13) = v123;
            *((_QWORD *)v106 + 14) = v124;
            v106[120] = v202;
          }
          v119 = v204;
          v6 = v206;
          v106[121] = v107[121];
        }
        else
        {
          v116 = *((_OWORD *)v107 + 5);
          *((_OWORD *)v106 + 4) = *((_OWORD *)v107 + 4);
          *((_OWORD *)v106 + 5) = v116;
          *((_OWORD *)v106 + 6) = *((_OWORD *)v107 + 6);
          *(_OWORD *)(v106 + 106) = *(_OWORD *)(v107 + 106);
          v117 = *((_OWORD *)v107 + 1);
          *(_OWORD *)v106 = *(_OWORD *)v107;
          *((_OWORD *)v106 + 1) = v117;
          v118 = *((_OWORD *)v107 + 3);
          *((_OWORD *)v106 + 2) = *((_OWORD *)v107 + 2);
          *((_OWORD *)v106 + 3) = v118;
          v119 = v7;
        }
        *((_BYTE *)a1 + v104[6]) = *((_BYTE *)v3 + v104[6]);
        *((_BYTE *)a1 + v104[7]) = *((_BYTE *)v3 + v104[7]);
        *((_BYTE *)a1 + v104[8]) = *((_BYTE *)v3 + v104[8]);
        *((_BYTE *)a1 + v104[9]) = *((_BYTE *)v3 + v104[9]);
        *((_BYTE *)a1 + v104[10]) = *((_BYTE *)v3 + v104[10]);
        v125 = v104[11];
        v126 = *(void **)((char *)v3 + v125);
        *(void **)((char *)a1 + v125) = v126;
        v127 = v126;
        v50 = a1;
        v51 = v119;
        v52 = 0;
        goto LABEL_100;
      case 1u:
        v15 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v205 = v7;
        v207 = v6;
        switch(swift_getEnumCaseMultiPayload(v3, v15))
        {
          case 1u:
            v16 = *v3;
            *a1 = *v3;
            v17 = v16;
            v18 = a1;
            v19 = v15;
            v20 = 1;
            goto LABEL_59;
          case 2u:
            v128 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(a1, v3, v128);
            v18 = a1;
            v19 = v15;
            v20 = 2;
            goto LABEL_59;
          case 3u:
            v129 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(a1, v3, v129);
            v18 = a1;
            v19 = v15;
            v20 = 3;
            goto LABEL_59;
          case 4u:
            v130 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(a1, v3, v130);
            v18 = a1;
            v19 = v15;
            v20 = 4;
            goto LABEL_59;
          case 5u:
            v131 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(a1, v3, v131);
            v18 = a1;
            v19 = v15;
            v20 = 5;
            goto LABEL_59;
          case 6u:
            v132 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(a1, v3, v132);
            v18 = a1;
            v19 = v15;
            v20 = 6;
            goto LABEL_59;
          case 8u:
            v133 = *v3;
            *a1 = *v3;
            v134 = v133;
            v18 = a1;
            v19 = v15;
            v20 = 8;
            goto LABEL_59;
          case 9u:
            v135 = *v3;
            *a1 = *v3;
            v136 = v135;
            v18 = a1;
            v19 = v15;
            v20 = 9;
LABEL_59:
            swift_storeEnumTagMultiPayload(v18, v19, v20);
            break;
          default:
            memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
            break;
        }
        v137 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
        v138 = v137[5];
        v139 = (char *)a1 + v138;
        v140 = (char *)v3 + v138;
        v141 = *(uint64_t *)((char *)v3 + v138 + 8);
        if (v141)
        {
          v203 = v3;
          *(_QWORD *)v139 = *(_QWORD *)v140;
          *((_QWORD *)v139 + 1) = v141;
          v142 = (void *)*((_QWORD *)v140 + 2);
          v143 = *((_QWORD *)v140 + 3);
          v144 = *((_QWORD *)v140 + 4);
          v145 = *((_QWORD *)v140 + 5);
          v147 = *((_QWORD *)v140 + 6);
          v146 = *((_QWORD *)v140 + 7);
          v198 = v140[64];
          swift_bridgeObjectRetain(v141);
          sub_10003E1F0(v142, v143, v144, v145, v147, v146, v198);
          *((_QWORD *)v139 + 2) = v142;
          *((_QWORD *)v139 + 3) = v143;
          *((_QWORD *)v139 + 4) = v144;
          *((_QWORD *)v139 + 5) = v145;
          *((_QWORD *)v139 + 6) = v147;
          *((_QWORD *)v139 + 7) = v146;
          v139[64] = v198;
          *(_DWORD *)(v139 + 65) = *(_DWORD *)(v140 + 65);
          v148 = v140[120];
          if (v148 == 255)
          {
            v149 = *(_OWORD *)(v140 + 88);
            *(_OWORD *)(v139 + 72) = *(_OWORD *)(v140 + 72);
            *(_OWORD *)(v139 + 88) = v149;
            *(_OWORD *)(v139 + 104) = *(_OWORD *)(v140 + 104);
            v139[120] = v140[120];
          }
          else
          {
            v199 = v148 & 1;
            v155 = (void *)*((_QWORD *)v140 + 9);
            v154 = *((_QWORD *)v140 + 10);
            v156 = *((_QWORD *)v140 + 11);
            v157 = *((_QWORD *)v140 + 12);
            v158 = *((_QWORD *)v140 + 13);
            v159 = *((_QWORD *)v140 + 14);
            sub_10002B764(v155, v154, v156, v157, v158, v159, v148 & 1);
            *((_QWORD *)v139 + 9) = v155;
            *((_QWORD *)v139 + 10) = v154;
            *((_QWORD *)v139 + 11) = v156;
            *((_QWORD *)v139 + 12) = v157;
            *((_QWORD *)v139 + 13) = v158;
            *((_QWORD *)v139 + 14) = v159;
            v139[120] = v199;
          }
          v153 = v205;
          v6 = v207;
          v139[121] = v140[121];
          v3 = v203;
        }
        else
        {
          v150 = *((_OWORD *)v140 + 5);
          *((_OWORD *)v139 + 4) = *((_OWORD *)v140 + 4);
          *((_OWORD *)v139 + 5) = v150;
          *((_OWORD *)v139 + 6) = *((_OWORD *)v140 + 6);
          *(_OWORD *)(v139 + 106) = *(_OWORD *)(v140 + 106);
          v151 = *((_OWORD *)v140 + 1);
          *(_OWORD *)v139 = *(_OWORD *)v140;
          *((_OWORD *)v139 + 1) = v151;
          v152 = *((_OWORD *)v140 + 3);
          *((_OWORD *)v139 + 2) = *((_OWORD *)v140 + 2);
          *((_OWORD *)v139 + 3) = v152;
          v153 = v7;
        }
        *((_BYTE *)a1 + v137[6]) = *((_BYTE *)v3 + v137[6]);
        *((_BYTE *)a1 + v137[7]) = *((_BYTE *)v3 + v137[7]);
        *((_BYTE *)a1 + v137[8]) = *((_BYTE *)v3 + v137[8]);
        *((_BYTE *)a1 + v137[9]) = *((_BYTE *)v3 + v137[9]);
        *((_BYTE *)a1 + v137[10]) = *((_BYTE *)v3 + v137[10]);
        v160 = v137[11];
        v161 = *(void **)((char *)v3 + v160);
        *(void **)((char *)a1 + v160) = v161;
        v162 = v161;
        v50 = a1;
        v51 = v153;
        v52 = 1;
        goto LABEL_100;
      case 2u:
        v21 = *v3;
        *a1 = *v3;
        v22 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v23 = (void **)((char *)a1 + v22);
        v24 = (void **)((char *)v3 + v22);
        v25 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v26 = *(_QWORD *)(v25 - 8);
        v27 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v26 + 48);
        v28 = v21;
        if (v27(v24, 1, v25))
        {
          v29 = sub_10002A750(&qword_100644980);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v24, v25))
          {
            case 1u:
              v65 = *v24;
              *v23 = *v24;
              v66 = v65;
              v67 = v23;
              v68 = v25;
              v69 = 1;
              goto LABEL_75;
            case 2u:
              v163 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v23, v24, v163);
              v67 = v23;
              v68 = v25;
              v69 = 2;
              goto LABEL_75;
            case 3u:
              v164 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v23, v24, v164);
              v67 = v23;
              v68 = v25;
              v69 = 3;
              goto LABEL_75;
            case 4u:
              v165 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v165 - 8) + 16))(v23, v24, v165);
              v67 = v23;
              v68 = v25;
              v69 = 4;
              goto LABEL_75;
            case 5u:
              v166 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v23, v24, v166);
              v67 = v23;
              v68 = v25;
              v69 = 5;
              goto LABEL_75;
            case 6u:
              v167 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(v23, v24, v167);
              v67 = v23;
              v68 = v25;
              v69 = 6;
              goto LABEL_75;
            case 8u:
              v168 = *v24;
              *v23 = *v24;
              v169 = v168;
              v67 = v23;
              v68 = v25;
              v69 = 8;
              goto LABEL_75;
            case 9u:
              v170 = *v24;
              *v23 = *v24;
              v171 = v170;
              v67 = v23;
              v68 = v25;
              v69 = 9;
LABEL_75:
              swift_storeEnumTagMultiPayload(v67, v68, v69);
              break;
            default:
              memcpy(v23, v24, *(_QWORD *)(v26 + 64));
              break;
          }
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
        v50 = a1;
        v51 = v7;
        v52 = 2;
        goto LABEL_100;
      case 3u:
        v30 = *v3;
        *a1 = *v3;
        v31 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v32 = (void **)((char *)a1 + v31);
        v33 = (void **)((char *)v3 + v31);
        v34 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v35 = *(_QWORD *)(v34 - 8);
        v36 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v35 + 48);
        v37 = v30;
        if (v36(v33, 1, v34))
        {
          v38 = sub_10002A750(&qword_100644980);
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v33, v34))
          {
            case 1u:
              v70 = *v33;
              *v32 = *v33;
              v71 = v70;
              v72 = v32;
              v73 = v34;
              v74 = 1;
              goto LABEL_97;
            case 2u:
              v172 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v172 - 8) + 16))(v32, v33, v172);
              v72 = v32;
              v73 = v34;
              v74 = 2;
              goto LABEL_97;
            case 3u:
              v173 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(v32, v33, v173);
              v72 = v32;
              v73 = v34;
              v74 = 3;
              goto LABEL_97;
            case 4u:
              v174 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v174 - 8) + 16))(v32, v33, v174);
              v72 = v32;
              v73 = v34;
              v74 = 4;
              goto LABEL_97;
            case 5u:
              v189 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v189 - 8) + 16))(v32, v33, v189);
              v72 = v32;
              v73 = v34;
              v74 = 5;
              goto LABEL_97;
            case 6u:
              v175 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v32, v33, v175);
              v72 = v32;
              v73 = v34;
              v74 = 6;
              goto LABEL_97;
            case 8u:
              v176 = *v33;
              *v32 = *v33;
              v177 = v176;
              v72 = v32;
              v73 = v34;
              v74 = 8;
              goto LABEL_97;
            case 9u:
              v178 = *v33;
              *v32 = *v33;
              v179 = v178;
              v72 = v32;
              v73 = v34;
              v74 = 9;
LABEL_97:
              swift_storeEnumTagMultiPayload(v72, v73, v74);
              break;
            default:
              memcpy(v32, v33, *(_QWORD *)(v35 + 64));
              break;
          }
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        }
        v50 = a1;
        v51 = v7;
        v52 = 3;
        goto LABEL_100;
      case 4u:
        v39 = *v3;
        *a1 = *v3;
        v40 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v41 = (void **)((char *)a1 + v40);
        v42 = (void **)((char *)v3 + v40);
        v43 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v44 = *(_QWORD *)(v43 - 8);
        v45 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v44 + 48);
        v46 = v39;
        if (v45(v42, 1, v43))
        {
          v47 = sub_10002A750(&qword_100644980);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v42, v43))
          {
            case 1u:
              v75 = *v42;
              *v41 = *v42;
              v76 = v75;
              v77 = v41;
              v78 = v43;
              v79 = 1;
              goto LABEL_93;
            case 2u:
              v180 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v180 - 8) + 16))(v41, v42, v180);
              v77 = v41;
              v78 = v43;
              v79 = 2;
              goto LABEL_93;
            case 3u:
              v181 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v41, v42, v181);
              v77 = v41;
              v78 = v43;
              v79 = 3;
              goto LABEL_93;
            case 4u:
              v182 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v41, v42, v182);
              v77 = v41;
              v78 = v43;
              v79 = 4;
              goto LABEL_93;
            case 5u:
              v183 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v41, v42, v183);
              v77 = v41;
              v78 = v43;
              v79 = 5;
              goto LABEL_93;
            case 6u:
              v184 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v41, v42, v184);
              v77 = v41;
              v78 = v43;
              v79 = 6;
              goto LABEL_93;
            case 8u:
              v185 = *v42;
              *v41 = *v42;
              v186 = v185;
              v77 = v41;
              v78 = v43;
              v79 = 8;
              goto LABEL_93;
            case 9u:
              v187 = *v42;
              *v41 = *v42;
              v188 = v187;
              v77 = v41;
              v78 = v43;
              v79 = 9;
LABEL_93:
              swift_storeEnumTagMultiPayload(v77, v78, v79);
              break;
            default:
              memcpy(v41, v42, *(_QWORD *)(v44 + 64));
              break;
          }
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
        v50 = a1;
        v51 = v7;
        v52 = 4;
        goto LABEL_100;
      case 5u:
        *a1 = *v3;
        *((_BYTE *)a1 + 8) = *((_BYTE *)v3 + 8);
        *(_WORD *)((char *)a1 + 9) = *(_WORD *)((char *)v3 + 9);
        v48 = v3[2];
        a1[2] = v48;
        v49 = v48;
        v50 = a1;
        v51 = v7;
        v52 = 5;
        goto LABEL_100;
      case 6u:
        v60 = *v3;
        *a1 = *v3;
        v61 = v60;
        v50 = a1;
        v51 = v7;
        v52 = 6;
        goto LABEL_100;
      case 7u:
        v53 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
        v54 = *(_QWORD *)(v53 - 8);
        if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v54 + 48))(v3, 1, v53))
        {
          v55 = sub_10002A750(&qword_100644600);
          memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          v80 = *v3;
          *a1 = *v3;
          v81 = *(int *)(v53 + 20);
          v200 = (char *)a1 + v81;
          v82 = (char *)v3 + v81;
          v83 = type metadata accessor for REMHashtagLabelSpecifier(0);
          v84 = v7;
          v85 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v83 - 8) + 16);
          v86 = swift_bridgeObjectRetain(v80);
          v85(v200, v82, v83, v86);
          v7 = v84;
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v54 + 56))(a1, 0, 1, v53);
        }
        v87 = *(int *)(type metadata accessor for TTRRemindersListViewModel.HashtagsState(0) + 20);
        v88 = (void **)((char *)a1 + v87);
        v89 = (void **)((char *)v3 + v87);
        v90 = v89[1];
        if (v90)
        {
          *v88 = *v89;
          v88[1] = v90;
          v91 = (void *)v89[2];
          v88[2] = v91;
          swift_bridgeObjectRetain(v90);
          v92 = v91;
        }
        else
        {
          *(_OWORD *)v88 = *(_OWORD *)v89;
          v88[2] = v89[2];
        }
        v50 = a1;
        v51 = v7;
        v52 = 7;
        goto LABEL_100;
      case 8u:
        v62 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
        v63 = *(_QWORD *)(v62 - 8);
        if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v63 + 48))(v3, 1, v62))
        {
          v64 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
          memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          v93 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(a1, v3, v93);
          *((_BYTE *)a1 + *(int *)(v62 + 20)) = *((_BYTE *)v3 + *(int *)(v62 + 20));
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v63 + 56))(a1, 0, 1, v62);
        }
        v94 = type metadata accessor for TTRTemplatePublicLinkData(0);
        *(void **)((char *)a1 + *(int *)(v94 + 20)) = *(void **)((char *)v3 + *(int *)(v94 + 20));
        v50 = a1;
        v51 = v7;
        v52 = 8;
        goto LABEL_100;
      case 9u:
        *(_BYTE *)a1 = *(_BYTE *)v3;
        v56 = *(int *)(type metadata accessor for TTRRemindersListTips(0) + 20);
        v57 = (char *)a1 + v56;
        v58 = (char *)v3 + v56;
        v59 = type metadata accessor for AnyTip(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
        v50 = a1;
        v51 = v7;
        v52 = 9;
LABEL_100:
        swift_storeEnumTagMultiPayload(v50, v51, v52);
        break;
      default:
        memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v190 = *(int *)(v6 + 20);
    v191 = (char *)a1 + v190;
    v192 = (char *)v3 + v190;
    v193 = *(void **)v192;
    LOBYTE(v192) = v192[8];
    *(_QWORD *)v191 = v193;
    v191[8] = (char)v192;
    v194 = v193;
  }
  return a1;
}

void sub_1000B6FE0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;

  v4 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
      v5 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(a1, v5))
      {
        case 1u:
        case 8u:
        case 9u:
          goto LABEL_23;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          goto LABEL_4;
        default:
          goto LABEL_24;
      }
      goto LABEL_24;
    case 1u:
      v6 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(a1, v6))
      {
        case 1u:
        case 8u:
        case 9u:
LABEL_23:

          break;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
LABEL_4:
          v7 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
          break;
        default:
          break;
      }
LABEL_24:
      v21 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
      v22 = (char *)a1 + *(int *)(v21 + 20);
      v23 = *((_QWORD *)v22 + 1);
      if (v23)
      {
        swift_bridgeObjectRelease(v23);
        sub_10003E2EC(*((void **)v22 + 2), *((_QWORD *)v22 + 3), *((_QWORD *)v22 + 4), *((_QWORD *)v22 + 5), *((_QWORD *)v22 + 6), *((_QWORD *)v22 + 7), v22[64]);
        v24 = v22[120];
        if (v24 != 255)
          sub_10002B328(*((void **)v22 + 9), *((_QWORD *)v22 + 10), *((_QWORD *)v22 + 11), *((_QWORD *)v22 + 12), *((_QWORD *)v22 + 13), *((_QWORD *)v22 + 14), v24 & 1);
      }
      v13 = *(id *)((char *)a1 + *(int *)(v21 + 44));
      goto LABEL_28;
    case 2u:

      v8 = (id *)((char *)a1 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v9 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
      {
        switch(swift_getEnumCaseMultiPayload(v8, v9))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_30;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            goto LABEL_11;
          default:
            goto LABEL_29;
        }
      }
      goto LABEL_29;
    case 3u:

      v8 = (id *)((char *)a1 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v10 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10))
      {
        switch(swift_getEnumCaseMultiPayload(v8, v10))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_30;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            goto LABEL_11;
          default:
            goto LABEL_29;
        }
      }
      goto LABEL_29;
    case 4u:

      v8 = (id *)((char *)a1 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v11 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11))
      {
        switch(swift_getEnumCaseMultiPayload(v8, v11))
        {
          case 1u:
          case 8u:
          case 9u:
LABEL_30:
            v13 = *v8;
            goto LABEL_28;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
LABEL_11:
            v12 = type metadata accessor for Date(0);
            goto LABEL_21;
          default:
            goto LABEL_29;
        }
      }
      goto LABEL_29;
    case 5u:
      v13 = (id)a1[2];
      goto LABEL_28;
    case 6u:
      v13 = (id)*a1;
      goto LABEL_28;
    case 7u:
      v14 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(a1, 1, v14))
      {
        swift_bridgeObjectRelease(*a1);
        v15 = (char *)a1 + *(int *)(v14 + 20);
        v16 = type metadata accessor for REMHashtagLabelSpecifier(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      }
      v17 = (char *)a1 + *(int *)(type metadata accessor for TTRRemindersListViewModel.HashtagsState(0) + 20);
      v18 = *((_QWORD *)v17 + 1);
      if (!v18)
        goto LABEL_29;
      swift_bridgeObjectRelease(v18);
      v13 = (id)*((_QWORD *)v17 + 2);
LABEL_28:

LABEL_29:
      return;
    case 8u:
      v19 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(a1, 1, v19))
      {
        v20 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
      }
      goto LABEL_29;
    case 9u:
      v8 = (id *)((char *)a1 + *(int *)(type metadata accessor for TTRRemindersListTips(0) + 20));
      v12 = type metadata accessor for AnyTip(0);
LABEL_21:
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v8, v12);
      goto LABEL_29;
    default:
      goto LABEL_29;
  }
}

void **sub_1000B739C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(void **, uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(void **, uint64_t, uint64_t);
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(void **, uint64_t, uint64_t);
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t, __n128);
  __n128 v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  void *v100;
  id v101;
  int *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  void *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  void *v137;
  id v138;
  int *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  void *v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  id v173;
  void *v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  id v181;
  void *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  id v190;
  void *v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  void *v197;
  id v198;
  void **v200;
  void **v201;
  char *v202;
  void **v203;
  void **v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;

  v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v205 = v6;
      v207 = a3;
      switch(swift_getEnumCaseMultiPayload(a2, v7))
      {
        case 1u:
          v8 = *a2;
          *a1 = *a2;
          v9 = v8;
          v10 = a1;
          v11 = v7;
          v12 = 1;
          goto LABEL_41;
        case 2u:
          v93 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(a1, a2, v93);
          v10 = a1;
          v11 = v7;
          v12 = 2;
          goto LABEL_41;
        case 3u:
          v94 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(a1, a2, v94);
          v10 = a1;
          v11 = v7;
          v12 = 3;
          goto LABEL_41;
        case 4u:
          v95 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(a1, a2, v95);
          v10 = a1;
          v11 = v7;
          v12 = 4;
          goto LABEL_41;
        case 5u:
          v96 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(a1, a2, v96);
          v10 = a1;
          v11 = v7;
          v12 = 5;
          goto LABEL_41;
        case 6u:
          v97 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(a1, a2, v97);
          v10 = a1;
          v11 = v7;
          v12 = 6;
          goto LABEL_41;
        case 8u:
          v98 = *a2;
          *a1 = *a2;
          v99 = v98;
          v10 = a1;
          v11 = v7;
          v12 = 8;
          goto LABEL_41;
        case 9u:
          v100 = *a2;
          *a1 = *a2;
          v101 = v100;
          v10 = a1;
          v11 = v7;
          v12 = 9;
LABEL_41:
          swift_storeEnumTagMultiPayload(v10, v11, v12);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      v102 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
      v103 = v102[5];
      v104 = (char *)a1 + v103;
      v105 = (char *)a2 + v103;
      v106 = *(uint64_t *)((char *)a2 + v103 + 8);
      if (v106)
      {
        v200 = a1;
        v203 = a2;
        *(_QWORD *)v104 = *(_QWORD *)v105;
        *((_QWORD *)v104 + 1) = v106;
        v107 = (void *)*((_QWORD *)v105 + 2);
        v108 = *((_QWORD *)v105 + 3);
        v109 = *((_QWORD *)v105 + 4);
        v110 = *((_QWORD *)v105 + 5);
        v111 = *((_QWORD *)v105 + 6);
        v112 = *((_QWORD *)v105 + 7);
        v113 = v105[64];
        swift_bridgeObjectRetain(v106);
        sub_10003E1F0(v107, v108, v109, v110, v111, v112, v113);
        *((_QWORD *)v104 + 2) = v107;
        *((_QWORD *)v104 + 3) = v108;
        *((_QWORD *)v104 + 4) = v109;
        *((_QWORD *)v104 + 5) = v110;
        *((_QWORD *)v104 + 6) = v111;
        *((_QWORD *)v104 + 7) = v112;
        v104[64] = v113;
        *(_DWORD *)(v104 + 65) = *(_DWORD *)(v105 + 65);
        v114 = v105[120];
        if (v114 == 255)
        {
          v115 = *(_OWORD *)(v105 + 88);
          *(_OWORD *)(v104 + 72) = *(_OWORD *)(v105 + 72);
          *(_OWORD *)(v104 + 88) = v115;
          *(_OWORD *)(v104 + 104) = *(_OWORD *)(v105 + 104);
          v104[120] = v105[120];
        }
        else
        {
          v120 = (void *)*((_QWORD *)v105 + 9);
          v121 = *((_QWORD *)v105 + 10);
          v122 = *((_QWORD *)v105 + 11);
          v123 = *((_QWORD *)v105 + 12);
          v124 = *((_QWORD *)v105 + 13);
          v125 = *((_QWORD *)v105 + 14);
          v126 = v114 & 1;
          sub_10002B764(v120, v121, v122, v123, v124, v125, v114 & 1);
          *((_QWORD *)v104 + 9) = v120;
          *((_QWORD *)v104 + 10) = v121;
          *((_QWORD *)v104 + 11) = v122;
          *((_QWORD *)v104 + 12) = v123;
          *((_QWORD *)v104 + 13) = v124;
          *((_QWORD *)v104 + 14) = v125;
          v104[120] = v126;
        }
        v119 = v205;
        a3 = v207;
        v104[121] = v105[121];
        a1 = v200;
        a2 = v203;
      }
      else
      {
        v116 = *((_OWORD *)v105 + 5);
        *((_OWORD *)v104 + 4) = *((_OWORD *)v105 + 4);
        *((_OWORD *)v104 + 5) = v116;
        *((_OWORD *)v104 + 6) = *((_OWORD *)v105 + 6);
        *(_OWORD *)(v104 + 106) = *(_OWORD *)(v105 + 106);
        v117 = *((_OWORD *)v105 + 1);
        *(_OWORD *)v104 = *(_OWORD *)v105;
        *((_OWORD *)v104 + 1) = v117;
        v118 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
        *((_OWORD *)v104 + 3) = v118;
        v119 = v6;
      }
      *((_BYTE *)a1 + v102[6]) = *((_BYTE *)a2 + v102[6]);
      *((_BYTE *)a1 + v102[7]) = *((_BYTE *)a2 + v102[7]);
      *((_BYTE *)a1 + v102[8]) = *((_BYTE *)a2 + v102[8]);
      *((_BYTE *)a1 + v102[9]) = *((_BYTE *)a2 + v102[9]);
      *((_BYTE *)a1 + v102[10]) = *((_BYTE *)a2 + v102[10]);
      v127 = v102[11];
      v128 = *(void **)((char *)a2 + v127);
      *(void **)((char *)a1 + v127) = v128;
      v129 = v128;
      v48 = a1;
      v49 = v119;
      v50 = 0;
      goto LABEL_98;
    case 1u:
      v13 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v206 = v6;
      v208 = a3;
      switch(swift_getEnumCaseMultiPayload(a2, v13))
      {
        case 1u:
          v14 = *a2;
          *a1 = *a2;
          v15 = v14;
          v16 = a1;
          v17 = v13;
          v18 = 1;
          goto LABEL_57;
        case 2u:
          v130 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(a1, a2, v130);
          v16 = a1;
          v17 = v13;
          v18 = 2;
          goto LABEL_57;
        case 3u:
          v131 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(a1, a2, v131);
          v16 = a1;
          v17 = v13;
          v18 = 3;
          goto LABEL_57;
        case 4u:
          v132 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(a1, a2, v132);
          v16 = a1;
          v17 = v13;
          v18 = 4;
          goto LABEL_57;
        case 5u:
          v133 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(a1, a2, v133);
          v16 = a1;
          v17 = v13;
          v18 = 5;
          goto LABEL_57;
        case 6u:
          v134 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(a1, a2, v134);
          v16 = a1;
          v17 = v13;
          v18 = 6;
          goto LABEL_57;
        case 8u:
          v135 = *a2;
          *a1 = *a2;
          v136 = v135;
          v16 = a1;
          v17 = v13;
          v18 = 8;
          goto LABEL_57;
        case 9u:
          v137 = *a2;
          *a1 = *a2;
          v138 = v137;
          v16 = a1;
          v17 = v13;
          v18 = 9;
LABEL_57:
          swift_storeEnumTagMultiPayload(v16, v17, v18);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
          break;
      }
      v139 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
      v140 = v139[5];
      v141 = (char *)a1 + v140;
      v142 = (char *)a2 + v140;
      v143 = *(uint64_t *)((char *)a2 + v140 + 8);
      if (v143)
      {
        v201 = a1;
        v204 = a2;
        *(_QWORD *)v141 = *(_QWORD *)v142;
        *((_QWORD *)v141 + 1) = v143;
        v144 = (void *)*((_QWORD *)v142 + 2);
        v145 = *((_QWORD *)v142 + 3);
        v146 = *((_QWORD *)v142 + 4);
        v147 = *((_QWORD *)v142 + 5);
        v148 = *((_QWORD *)v142 + 6);
        v149 = *((_QWORD *)v142 + 7);
        v150 = v142[64];
        swift_bridgeObjectRetain(v143);
        sub_10003E1F0(v144, v145, v146, v147, v148, v149, v150);
        *((_QWORD *)v141 + 2) = v144;
        *((_QWORD *)v141 + 3) = v145;
        *((_QWORD *)v141 + 4) = v146;
        *((_QWORD *)v141 + 5) = v147;
        *((_QWORD *)v141 + 6) = v148;
        *((_QWORD *)v141 + 7) = v149;
        v141[64] = v150;
        *(_DWORD *)(v141 + 65) = *(_DWORD *)(v142 + 65);
        v151 = v142[120];
        if (v151 == 255)
        {
          v152 = *(_OWORD *)(v142 + 88);
          *(_OWORD *)(v141 + 72) = *(_OWORD *)(v142 + 72);
          *(_OWORD *)(v141 + 88) = v152;
          *(_OWORD *)(v141 + 104) = *(_OWORD *)(v142 + 104);
          v141[120] = v142[120];
        }
        else
        {
          v157 = (void *)*((_QWORD *)v142 + 9);
          v158 = *((_QWORD *)v142 + 10);
          v159 = *((_QWORD *)v142 + 11);
          v160 = *((_QWORD *)v142 + 12);
          v161 = *((_QWORD *)v142 + 13);
          v162 = *((_QWORD *)v142 + 14);
          v163 = v151 & 1;
          sub_10002B764(v157, v158, v159, v160, v161, v162, v151 & 1);
          *((_QWORD *)v141 + 9) = v157;
          *((_QWORD *)v141 + 10) = v158;
          *((_QWORD *)v141 + 11) = v159;
          *((_QWORD *)v141 + 12) = v160;
          *((_QWORD *)v141 + 13) = v161;
          *((_QWORD *)v141 + 14) = v162;
          v141[120] = v163;
        }
        v156 = v206;
        a3 = v208;
        v141[121] = v142[121];
        a1 = v201;
        a2 = v204;
      }
      else
      {
        v153 = *((_OWORD *)v142 + 5);
        *((_OWORD *)v141 + 4) = *((_OWORD *)v142 + 4);
        *((_OWORD *)v141 + 5) = v153;
        *((_OWORD *)v141 + 6) = *((_OWORD *)v142 + 6);
        *(_OWORD *)(v141 + 106) = *(_OWORD *)(v142 + 106);
        v154 = *((_OWORD *)v142 + 1);
        *(_OWORD *)v141 = *(_OWORD *)v142;
        *((_OWORD *)v141 + 1) = v154;
        v155 = *((_OWORD *)v142 + 3);
        *((_OWORD *)v141 + 2) = *((_OWORD *)v142 + 2);
        *((_OWORD *)v141 + 3) = v155;
        v156 = v6;
      }
      *((_BYTE *)a1 + v139[6]) = *((_BYTE *)a2 + v139[6]);
      *((_BYTE *)a1 + v139[7]) = *((_BYTE *)a2 + v139[7]);
      *((_BYTE *)a1 + v139[8]) = *((_BYTE *)a2 + v139[8]);
      *((_BYTE *)a1 + v139[9]) = *((_BYTE *)a2 + v139[9]);
      *((_BYTE *)a1 + v139[10]) = *((_BYTE *)a2 + v139[10]);
      v164 = v139[11];
      v165 = *(void **)((char *)a2 + v164);
      *(void **)((char *)a1 + v164) = v165;
      v166 = v165;
      v48 = a1;
      v49 = v156;
      v50 = 1;
      goto LABEL_98;
    case 2u:
      v19 = *a2;
      *a1 = *a2;
      v20 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v21 = (void **)((char *)a1 + v20);
      v22 = (void **)((char *)a2 + v20);
      v23 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v24 + 48);
      v26 = v19;
      if (v25(v22, 1, v23))
      {
        v27 = sub_10002A750(&qword_100644980);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v22, v23))
        {
          case 1u:
            v63 = *v22;
            *v21 = *v22;
            v64 = v63;
            v65 = v21;
            v66 = v23;
            v67 = 1;
            goto LABEL_73;
          case 2u:
            v167 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(v21, v22, v167);
            v65 = v21;
            v66 = v23;
            v67 = 2;
            goto LABEL_73;
          case 3u:
            v168 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v168 - 8) + 16))(v21, v22, v168);
            v65 = v21;
            v66 = v23;
            v67 = 3;
            goto LABEL_73;
          case 4u:
            v169 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v169 - 8) + 16))(v21, v22, v169);
            v65 = v21;
            v66 = v23;
            v67 = 4;
            goto LABEL_73;
          case 5u:
            v170 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v170 - 8) + 16))(v21, v22, v170);
            v65 = v21;
            v66 = v23;
            v67 = 5;
            goto LABEL_73;
          case 6u:
            v171 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v21, v22, v171);
            v65 = v21;
            v66 = v23;
            v67 = 6;
            goto LABEL_73;
          case 8u:
            v172 = *v22;
            *v21 = *v22;
            v173 = v172;
            v65 = v21;
            v66 = v23;
            v67 = 8;
            goto LABEL_73;
          case 9u:
            v174 = *v22;
            *v21 = *v22;
            v175 = v174;
            v65 = v21;
            v66 = v23;
            v67 = 9;
LABEL_73:
            swift_storeEnumTagMultiPayload(v65, v66, v67);
            break;
          default:
            memcpy(v21, v22, *(_QWORD *)(v24 + 64));
            break;
        }
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v48 = a1;
      v49 = v6;
      v50 = 2;
      goto LABEL_98;
    case 3u:
      v28 = *a2;
      *a1 = *a2;
      v29 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v30 = (void **)((char *)a1 + v29);
      v31 = (void **)((char *)a2 + v29);
      v32 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v33 + 48);
      v35 = v28;
      if (v34(v31, 1, v32))
      {
        v36 = sub_10002A750(&qword_100644980);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v31, v32))
        {
          case 1u:
            v68 = *v31;
            *v30 = *v31;
            v69 = v68;
            v70 = v30;
            v71 = v32;
            v72 = 1;
            goto LABEL_95;
          case 2u:
            v176 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v30, v31, v176);
            v70 = v30;
            v71 = v32;
            v72 = 2;
            goto LABEL_95;
          case 3u:
            v177 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v30, v31, v177);
            v70 = v30;
            v71 = v32;
            v72 = 3;
            goto LABEL_95;
          case 4u:
            v178 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(v30, v31, v178);
            v70 = v30;
            v71 = v32;
            v72 = 4;
            goto LABEL_95;
          case 5u:
            v193 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v193 - 8) + 16))(v30, v31, v193);
            v70 = v30;
            v71 = v32;
            v72 = 5;
            goto LABEL_95;
          case 6u:
            v179 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v30, v31, v179);
            v70 = v30;
            v71 = v32;
            v72 = 6;
            goto LABEL_95;
          case 8u:
            v180 = *v31;
            *v30 = *v31;
            v181 = v180;
            v70 = v30;
            v71 = v32;
            v72 = 8;
            goto LABEL_95;
          case 9u:
            v182 = *v31;
            *v30 = *v31;
            v183 = v182;
            v70 = v30;
            v71 = v32;
            v72 = 9;
LABEL_95:
            swift_storeEnumTagMultiPayload(v70, v71, v72);
            break;
          default:
            memcpy(v30, v31, *(_QWORD *)(v33 + 64));
            break;
        }
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v48 = a1;
      v49 = v6;
      v50 = 3;
      goto LABEL_98;
    case 4u:
      v37 = *a2;
      *a1 = *a2;
      v38 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v39 = (void **)((char *)a1 + v38);
      v40 = (void **)((char *)a2 + v38);
      v41 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v42 = *(_QWORD *)(v41 - 8);
      v43 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v42 + 48);
      v44 = v37;
      if (v43(v40, 1, v41))
      {
        v45 = sub_10002A750(&qword_100644980);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v40, v41))
        {
          case 1u:
            v73 = *v40;
            *v39 = *v40;
            v74 = v73;
            v75 = v39;
            v76 = v41;
            v77 = 1;
            goto LABEL_91;
          case 2u:
            v184 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v39, v40, v184);
            v75 = v39;
            v76 = v41;
            v77 = 2;
            goto LABEL_91;
          case 3u:
            v185 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v39, v40, v185);
            v75 = v39;
            v76 = v41;
            v77 = 3;
            goto LABEL_91;
          case 4u:
            v186 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v186 - 8) + 16))(v39, v40, v186);
            v75 = v39;
            v76 = v41;
            v77 = 4;
            goto LABEL_91;
          case 5u:
            v187 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v187 - 8) + 16))(v39, v40, v187);
            v75 = v39;
            v76 = v41;
            v77 = 5;
            goto LABEL_91;
          case 6u:
            v188 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v188 - 8) + 16))(v39, v40, v188);
            v75 = v39;
            v76 = v41;
            v77 = 6;
            goto LABEL_91;
          case 8u:
            v189 = *v40;
            *v39 = *v40;
            v190 = v189;
            v75 = v39;
            v76 = v41;
            v77 = 8;
            goto LABEL_91;
          case 9u:
            v191 = *v40;
            *v39 = *v40;
            v192 = v191;
            v75 = v39;
            v76 = v41;
            v77 = 9;
LABEL_91:
            swift_storeEnumTagMultiPayload(v75, v76, v77);
            break;
          default:
            memcpy(v39, v40, *(_QWORD *)(v42 + 64));
            break;
        }
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      v48 = a1;
      v49 = v6;
      v50 = 4;
      goto LABEL_98;
    case 5u:
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      *(_WORD *)((char *)a1 + 9) = *(_WORD *)((char *)a2 + 9);
      v46 = a2[2];
      a1[2] = v46;
      v47 = v46;
      v48 = a1;
      v49 = v6;
      v50 = 5;
      goto LABEL_98;
    case 6u:
      v58 = *a2;
      *a1 = *a2;
      v59 = v58;
      v48 = a1;
      v49 = v6;
      v50 = 6;
      goto LABEL_98;
    case 7u:
      v51 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v52 + 48))(a2, 1, v51))
      {
        v53 = sub_10002A750(&qword_100644600);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        v78 = *a2;
        *a1 = *a2;
        v79 = *(int *)(v51 + 20);
        v202 = (char *)a1 + v79;
        v80 = (char *)a2 + v79;
        v81 = type metadata accessor for REMHashtagLabelSpecifier(0);
        v82 = v6;
        v83 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v81 - 8) + 16);
        v84 = swift_bridgeObjectRetain(v78);
        v83(v202, v80, v81, v84);
        v6 = v82;
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v52 + 56))(a1, 0, 1, v51);
      }
      v85 = *(int *)(type metadata accessor for TTRRemindersListViewModel.HashtagsState(0) + 20);
      v86 = (void **)((char *)a1 + v85);
      v87 = (void **)((char *)a2 + v85);
      v88 = v87[1];
      if (v88)
      {
        *v86 = *v87;
        v86[1] = v88;
        v89 = (void *)v87[2];
        v86[2] = v89;
        swift_bridgeObjectRetain(v88);
        v90 = v89;
      }
      else
      {
        *(_OWORD *)v86 = *(_OWORD *)v87;
        v86[2] = v87[2];
      }
      v48 = a1;
      v49 = v6;
      v50 = 7;
      goto LABEL_98;
    case 8u:
      v60 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v61 + 48))(a2, 1, v60))
      {
        v62 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v91 = type metadata accessor for Date(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(a1, a2, v91);
        *((_BYTE *)a1 + *(int *)(v60 + 20)) = *((_BYTE *)a2 + *(int *)(v60 + 20));
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v61 + 56))(a1, 0, 1, v60);
      }
      v92 = type metadata accessor for TTRTemplatePublicLinkData(0);
      *(void **)((char *)a1 + *(int *)(v92 + 20)) = *(void **)((char *)a2 + *(int *)(v92 + 20));
      v48 = a1;
      v49 = v6;
      v50 = 8;
      goto LABEL_98;
    case 9u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v54 = *(int *)(type metadata accessor for TTRRemindersListTips(0) + 20);
      v55 = (char *)a1 + v54;
      v56 = (char *)a2 + v54;
      v57 = type metadata accessor for AnyTip(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
      v48 = a1;
      v49 = v6;
      v50 = 9;
LABEL_98:
      swift_storeEnumTagMultiPayload(v48, v49, v50);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v194 = *(int *)(a3 + 20);
  v195 = (char *)a1 + v194;
  v196 = (char *)a2 + v194;
  v197 = *(void **)v196;
  LOBYTE(v196) = v196[8];
  *(_QWORD *)v195 = v197;
  v195[8] = (char)v196;
  v198 = v197;
  return a1;
}

void **sub_1000B8348(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(void **, uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(void **, uint64_t, uint64_t);
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(void **, uint64_t, uint64_t);
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t, __n128);
  __n128 v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  id v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  void *v139;
  id v140;
  int *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  id v178;
  void *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  id v187;
  void *v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  id v196;
  void *v197;
  id v198;
  uint64_t v199;
  char *v200;
  char *v201;
  void *v202;
  void *v203;
  id v204;
  unsigned __int8 v206;
  void *v207;
  uint64_t v208;
  char v209;
  char *v210;
  uint64_t v211;
  char v212;
  int *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;

  if (a1 != a2)
  {
    sub_10001F544((uint64_t)a1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v214 = v6;
        v216 = a3;
        switch(swift_getEnumCaseMultiPayload(a2, v7))
        {
          case 1u:
            v8 = *a2;
            *a1 = *a2;
            v9 = v8;
            v10 = a1;
            v11 = v7;
            v12 = 1;
            goto LABEL_42;
          case 2u:
            v94 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(a1, a2, v94);
            v10 = a1;
            v11 = v7;
            v12 = 2;
            goto LABEL_42;
          case 3u:
            v95 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(a1, a2, v95);
            v10 = a1;
            v11 = v7;
            v12 = 3;
            goto LABEL_42;
          case 4u:
            v96 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(a1, a2, v96);
            v10 = a1;
            v11 = v7;
            v12 = 4;
            goto LABEL_42;
          case 5u:
            v97 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(a1, a2, v97);
            v10 = a1;
            v11 = v7;
            v12 = 5;
            goto LABEL_42;
          case 6u:
            v98 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(a1, a2, v98);
            v10 = a1;
            v11 = v7;
            v12 = 6;
            goto LABEL_42;
          case 8u:
            v99 = *a2;
            *a1 = *a2;
            v100 = v99;
            v10 = a1;
            v11 = v7;
            v12 = 8;
            goto LABEL_42;
          case 9u:
            v101 = *a2;
            *a1 = *a2;
            v102 = v101;
            v10 = a1;
            v11 = v7;
            v12 = 9;
LABEL_42:
            swift_storeEnumTagMultiPayload(v10, v11, v12);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
            break;
        }
        v103 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
        v104 = v103[5];
        v105 = (char *)a1 + v104;
        v106 = (char *)a2 + v104;
        if (*(void **)((char *)a2 + v104 + 8))
        {
          *(_QWORD *)v105 = *(_QWORD *)v106;
          v107 = *((_QWORD *)v106 + 1);
          *((_QWORD *)v105 + 1) = v107;
          v108 = (void *)*((_QWORD *)v106 + 2);
          v109 = *((_QWORD *)v106 + 3);
          v110 = *((_QWORD *)v106 + 4);
          v111 = *((_QWORD *)v106 + 5);
          v112 = *((_QWORD *)v106 + 6);
          v211 = *((_QWORD *)v106 + 7);
          v206 = v106[64];
          swift_bridgeObjectRetain(v107);
          sub_10003E1F0(v108, v109, v110, v111, v112, v211, v206);
          *((_QWORD *)v105 + 2) = v108;
          *((_QWORD *)v105 + 3) = v109;
          *((_QWORD *)v105 + 4) = v110;
          *((_QWORD *)v105 + 5) = v111;
          *((_QWORD *)v105 + 6) = v112;
          *((_QWORD *)v105 + 7) = v211;
          v105[64] = v206;
          v105[65] = v106[65];
          v105[66] = v106[66];
          v105[67] = v106[67];
          v105[68] = v106[68];
          v113 = v106[120];
          if (v113 == 255)
          {
            v114 = *(_OWORD *)(v106 + 72);
            v115 = *(_OWORD *)(v106 + 88);
            v116 = *(_OWORD *)(v106 + 104);
            v105[120] = v106[120];
            *(_OWORD *)(v105 + 88) = v115;
            *(_OWORD *)(v105 + 104) = v116;
            *(_OWORD *)(v105 + 72) = v114;
          }
          else
          {
            v212 = v113 & 1;
            v124 = *((_QWORD *)v106 + 10);
            v207 = (void *)*((_QWORD *)v106 + 9);
            v125 = *((_QWORD *)v106 + 11);
            v126 = *((_QWORD *)v106 + 12);
            v127 = *((_QWORD *)v106 + 13);
            v128 = *((_QWORD *)v106 + 14);
            sub_10002B764(v207, v124, v125, v126, v127, v128, v113 & 1);
            *((_QWORD *)v105 + 9) = v207;
            *((_QWORD *)v105 + 10) = v124;
            *((_QWORD *)v105 + 11) = v125;
            *((_QWORD *)v105 + 12) = v126;
            *((_QWORD *)v105 + 13) = v127;
            *((_QWORD *)v105 + 14) = v128;
            v105[120] = v212;
          }
          v123 = v214;
          a3 = v216;
          v105[121] = v106[121];
        }
        else
        {
          v117 = *(_OWORD *)v106;
          v118 = *((_OWORD *)v106 + 1);
          v119 = *((_OWORD *)v106 + 3);
          *((_OWORD *)v105 + 2) = *((_OWORD *)v106 + 2);
          *((_OWORD *)v105 + 3) = v119;
          *(_OWORD *)v105 = v117;
          *((_OWORD *)v105 + 1) = v118;
          v120 = *((_OWORD *)v106 + 4);
          v121 = *((_OWORD *)v106 + 5);
          v122 = *((_OWORD *)v106 + 6);
          *(_OWORD *)(v105 + 106) = *(_OWORD *)(v106 + 106);
          *((_OWORD *)v105 + 5) = v121;
          *((_OWORD *)v105 + 6) = v122;
          *((_OWORD *)v105 + 4) = v120;
          v123 = v6;
        }
        *((_BYTE *)a1 + v103[6]) = *((_BYTE *)a2 + v103[6]);
        *((_BYTE *)a1 + v103[7]) = *((_BYTE *)a2 + v103[7]);
        *((_BYTE *)a1 + v103[8]) = *((_BYTE *)a2 + v103[8]);
        *((_BYTE *)a1 + v103[9]) = *((_BYTE *)a2 + v103[9]);
        *((_BYTE *)a1 + v103[10]) = *((_BYTE *)a2 + v103[10]);
        v129 = v103[11];
        v130 = *(void **)((char *)a2 + v129);
        *(void **)((char *)a1 + v129) = v130;
        v131 = v130;
        v48 = a1;
        v49 = v123;
        v50 = 0;
        goto LABEL_99;
      case 1u:
        v13 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v215 = v6;
        v217 = a3;
        switch(swift_getEnumCaseMultiPayload(a2, v13))
        {
          case 1u:
            v14 = *a2;
            *a1 = *a2;
            v15 = v14;
            v16 = a1;
            v17 = v13;
            v18 = 1;
            goto LABEL_58;
          case 2u:
            v132 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(a1, a2, v132);
            v16 = a1;
            v17 = v13;
            v18 = 2;
            goto LABEL_58;
          case 3u:
            v133 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(a1, a2, v133);
            v16 = a1;
            v17 = v13;
            v18 = 3;
            goto LABEL_58;
          case 4u:
            v134 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(a1, a2, v134);
            v16 = a1;
            v17 = v13;
            v18 = 4;
            goto LABEL_58;
          case 5u:
            v135 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(a1, a2, v135);
            v16 = a1;
            v17 = v13;
            v18 = 5;
            goto LABEL_58;
          case 6u:
            v136 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v136 - 8) + 16))(a1, a2, v136);
            v16 = a1;
            v17 = v13;
            v18 = 6;
            goto LABEL_58;
          case 8u:
            v137 = *a2;
            *a1 = *a2;
            v138 = v137;
            v16 = a1;
            v17 = v13;
            v18 = 8;
            goto LABEL_58;
          case 9u:
            v139 = *a2;
            *a1 = *a2;
            v140 = v139;
            v16 = a1;
            v17 = v13;
            v18 = 9;
LABEL_58:
            swift_storeEnumTagMultiPayload(v16, v17, v18);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
            break;
        }
        v141 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
        v142 = v141[5];
        v143 = (char *)a1 + v142;
        v144 = (char *)a2 + v142;
        if (*(void **)((char *)a2 + v142 + 8))
        {
          v213 = v141;
          *(_QWORD *)v143 = *(_QWORD *)v144;
          v145 = *((_QWORD *)v144 + 1);
          *((_QWORD *)v143 + 1) = v145;
          v146 = (void *)*((_QWORD *)v144 + 2);
          v147 = *((_QWORD *)v144 + 3);
          v148 = *((_QWORD *)v144 + 4);
          v149 = *((_QWORD *)v144 + 5);
          v150 = *((_QWORD *)v144 + 6);
          v208 = *((_QWORD *)v144 + 7);
          v151 = v144[64];
          swift_bridgeObjectRetain(v145);
          sub_10003E1F0(v146, v147, v148, v149, v150, v208, v151);
          *((_QWORD *)v143 + 2) = v146;
          *((_QWORD *)v143 + 3) = v147;
          *((_QWORD *)v143 + 4) = v148;
          *((_QWORD *)v143 + 5) = v149;
          *((_QWORD *)v143 + 6) = v150;
          *((_QWORD *)v143 + 7) = v208;
          v143[64] = v151;
          v143[65] = v144[65];
          v143[66] = v144[66];
          v143[67] = v144[67];
          v143[68] = v144[68];
          v152 = v144[120];
          if (v152 == 255)
          {
            v153 = *(_OWORD *)(v144 + 72);
            v154 = *(_OWORD *)(v144 + 88);
            v155 = *(_OWORD *)(v144 + 104);
            v143[120] = v144[120];
            *(_OWORD *)(v143 + 88) = v154;
            *(_OWORD *)(v143 + 104) = v155;
            *(_OWORD *)(v143 + 72) = v153;
          }
          else
          {
            v209 = v152 & 1;
            v164 = (void *)*((_QWORD *)v144 + 9);
            v163 = *((_QWORD *)v144 + 10);
            v165 = *((_QWORD *)v144 + 11);
            v166 = *((_QWORD *)v144 + 12);
            v167 = *((_QWORD *)v144 + 13);
            v168 = *((_QWORD *)v144 + 14);
            sub_10002B764(v164, v163, v165, v166, v167, v168, v152 & 1);
            *((_QWORD *)v143 + 9) = v164;
            *((_QWORD *)v143 + 10) = v163;
            *((_QWORD *)v143 + 11) = v165;
            *((_QWORD *)v143 + 12) = v166;
            *((_QWORD *)v143 + 13) = v167;
            *((_QWORD *)v143 + 14) = v168;
            v143[120] = v209;
          }
          v162 = v215;
          a3 = v217;
          v143[121] = v144[121];
          v141 = v213;
        }
        else
        {
          v156 = *(_OWORD *)v144;
          v157 = *((_OWORD *)v144 + 1);
          v158 = *((_OWORD *)v144 + 3);
          *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
          *((_OWORD *)v143 + 3) = v158;
          *(_OWORD *)v143 = v156;
          *((_OWORD *)v143 + 1) = v157;
          v159 = *((_OWORD *)v144 + 4);
          v160 = *((_OWORD *)v144 + 5);
          v161 = *((_OWORD *)v144 + 6);
          *(_OWORD *)(v143 + 106) = *(_OWORD *)(v144 + 106);
          *((_OWORD *)v143 + 5) = v160;
          *((_OWORD *)v143 + 6) = v161;
          *((_OWORD *)v143 + 4) = v159;
          v162 = v6;
        }
        *((_BYTE *)a1 + v141[6]) = *((_BYTE *)a2 + v141[6]);
        *((_BYTE *)a1 + v141[7]) = *((_BYTE *)a2 + v141[7]);
        *((_BYTE *)a1 + v141[8]) = *((_BYTE *)a2 + v141[8]);
        *((_BYTE *)a1 + v141[9]) = *((_BYTE *)a2 + v141[9]);
        *((_BYTE *)a1 + v141[10]) = *((_BYTE *)a2 + v141[10]);
        v169 = v141[11];
        v170 = *(void **)((char *)a2 + v169);
        *(void **)((char *)a1 + v169) = v170;
        v171 = v170;
        v48 = a1;
        v49 = v162;
        v50 = 1;
        goto LABEL_99;
      case 2u:
        v19 = *a2;
        *a1 = *a2;
        v20 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v21 = (void **)((char *)a1 + v20);
        v22 = (void **)((char *)a2 + v20);
        v23 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v24 = *(_QWORD *)(v23 - 8);
        v25 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v24 + 48);
        v26 = v19;
        if (v25(v22, 1, v23))
        {
          v27 = sub_10002A750(&qword_100644980);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v22, v23))
          {
            case 1u:
              v63 = *v22;
              *v21 = *v22;
              v64 = v63;
              v65 = v21;
              v66 = v23;
              v67 = 1;
              goto LABEL_74;
            case 2u:
              v172 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v172 - 8) + 16))(v21, v22, v172);
              v65 = v21;
              v66 = v23;
              v67 = 2;
              goto LABEL_74;
            case 3u:
              v173 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v173 - 8) + 16))(v21, v22, v173);
              v65 = v21;
              v66 = v23;
              v67 = 3;
              goto LABEL_74;
            case 4u:
              v174 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v174 - 8) + 16))(v21, v22, v174);
              v65 = v21;
              v66 = v23;
              v67 = 4;
              goto LABEL_74;
            case 5u:
              v175 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v21, v22, v175);
              v65 = v21;
              v66 = v23;
              v67 = 5;
              goto LABEL_74;
            case 6u:
              v176 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v21, v22, v176);
              v65 = v21;
              v66 = v23;
              v67 = 6;
              goto LABEL_74;
            case 8u:
              v177 = *v22;
              *v21 = *v22;
              v178 = v177;
              v65 = v21;
              v66 = v23;
              v67 = 8;
              goto LABEL_74;
            case 9u:
              v179 = *v22;
              *v21 = *v22;
              v180 = v179;
              v65 = v21;
              v66 = v23;
              v67 = 9;
LABEL_74:
              swift_storeEnumTagMultiPayload(v65, v66, v67);
              break;
            default:
              memcpy(v21, v22, *(_QWORD *)(v24 + 64));
              break;
          }
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v48 = a1;
        v49 = v6;
        v50 = 2;
        goto LABEL_99;
      case 3u:
        v28 = *a2;
        *a1 = *a2;
        v29 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v30 = (void **)((char *)a1 + v29);
        v31 = (void **)((char *)a2 + v29);
        v32 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v33 = *(_QWORD *)(v32 - 8);
        v34 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v33 + 48);
        v35 = v28;
        if (v34(v31, 1, v32))
        {
          v36 = sub_10002A750(&qword_100644980);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v31, v32))
          {
            case 1u:
              v68 = *v31;
              *v30 = *v31;
              v69 = v68;
              v70 = v30;
              v71 = v32;
              v72 = 1;
              goto LABEL_85;
            case 2u:
              v181 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v30, v31, v181);
              v70 = v30;
              v71 = v32;
              v72 = 2;
              goto LABEL_85;
            case 3u:
              v182 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v30, v31, v182);
              v70 = v30;
              v71 = v32;
              v72 = 3;
              goto LABEL_85;
            case 4u:
              v183 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v183 - 8) + 16))(v30, v31, v183);
              v70 = v30;
              v71 = v32;
              v72 = 4;
              goto LABEL_85;
            case 5u:
              v184 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v30, v31, v184);
              v70 = v30;
              v71 = v32;
              v72 = 5;
              goto LABEL_85;
            case 6u:
              v185 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v185 - 8) + 16))(v30, v31, v185);
              v70 = v30;
              v71 = v32;
              v72 = 6;
              goto LABEL_85;
            case 8u:
              v186 = *v31;
              *v30 = *v31;
              v187 = v186;
              v70 = v30;
              v71 = v32;
              v72 = 8;
              goto LABEL_85;
            case 9u:
              v188 = *v31;
              *v30 = *v31;
              v189 = v188;
              v70 = v30;
              v71 = v32;
              v72 = 9;
LABEL_85:
              swift_storeEnumTagMultiPayload(v70, v71, v72);
              break;
            default:
              memcpy(v30, v31, *(_QWORD *)(v33 + 64));
              break;
          }
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        }
        v48 = a1;
        v49 = v6;
        v50 = 3;
        goto LABEL_99;
      case 4u:
        v37 = *a2;
        *a1 = *a2;
        v38 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v39 = (void **)((char *)a1 + v38);
        v40 = (void **)((char *)a2 + v38);
        v41 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v42 = *(_QWORD *)(v41 - 8);
        v43 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v42 + 48);
        v44 = v37;
        if (v43(v40, 1, v41))
        {
          v45 = sub_10002A750(&qword_100644980);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v40, v41))
          {
            case 1u:
              v73 = *v40;
              *v39 = *v40;
              v74 = v73;
              v75 = v39;
              v76 = v41;
              v77 = 1;
              goto LABEL_96;
            case 2u:
              v190 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v190 - 8) + 16))(v39, v40, v190);
              v75 = v39;
              v76 = v41;
              v77 = 2;
              goto LABEL_96;
            case 3u:
              v191 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v191 - 8) + 16))(v39, v40, v191);
              v75 = v39;
              v76 = v41;
              v77 = 3;
              goto LABEL_96;
            case 4u:
              v192 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v192 - 8) + 16))(v39, v40, v192);
              v75 = v39;
              v76 = v41;
              v77 = 4;
              goto LABEL_96;
            case 5u:
              v193 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v193 - 8) + 16))(v39, v40, v193);
              v75 = v39;
              v76 = v41;
              v77 = 5;
              goto LABEL_96;
            case 6u:
              v194 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v194 - 8) + 16))(v39, v40, v194);
              v75 = v39;
              v76 = v41;
              v77 = 6;
              goto LABEL_96;
            case 8u:
              v195 = *v40;
              *v39 = *v40;
              v196 = v195;
              v75 = v39;
              v76 = v41;
              v77 = 8;
              goto LABEL_96;
            case 9u:
              v197 = *v40;
              *v39 = *v40;
              v198 = v197;
              v75 = v39;
              v76 = v41;
              v77 = 9;
LABEL_96:
              swift_storeEnumTagMultiPayload(v75, v76, v77);
              break;
            default:
              memcpy(v39, v40, *(_QWORD *)(v42 + 64));
              break;
          }
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        }
        v48 = a1;
        v49 = v6;
        v50 = 4;
        goto LABEL_99;
      case 5u:
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
        *((_BYTE *)a1 + 10) = *((_BYTE *)a2 + 10);
        v46 = a2[2];
        a1[2] = v46;
        v47 = v46;
        v48 = a1;
        v49 = v6;
        v50 = 5;
        goto LABEL_99;
      case 6u:
        v58 = *a2;
        *a1 = *a2;
        v59 = v58;
        v48 = a1;
        v49 = v6;
        v50 = 6;
        goto LABEL_99;
      case 7u:
        v51 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
        v52 = *(_QWORD *)(v51 - 8);
        if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v52 + 48))(a2, 1, v51))
        {
          v53 = sub_10002A750(&qword_100644600);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          v78 = *a2;
          *a1 = *a2;
          v79 = *(int *)(v51 + 20);
          v210 = (char *)a1 + v79;
          v80 = (char *)a2 + v79;
          v81 = type metadata accessor for REMHashtagLabelSpecifier(0);
          v82 = v6;
          v83 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v81 - 8) + 16);
          v84 = swift_bridgeObjectRetain(v78);
          v83(v210, v80, v81, v84);
          v6 = v82;
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v52 + 56))(a1, 0, 1, v51);
        }
        v85 = *(int *)(type metadata accessor for TTRRemindersListViewModel.HashtagsState(0) + 20);
        v86 = (void **)((char *)a1 + v85);
        v87 = (void **)((char *)a2 + v85);
        if (v87[1])
        {
          *v86 = *v87;
          v88 = v87[1];
          v86[1] = v88;
          v89 = (void *)v87[2];
          v86[2] = v89;
          swift_bridgeObjectRetain(v88);
          v90 = v89;
        }
        else
        {
          v91 = *(_OWORD *)v87;
          v86[2] = v87[2];
          *(_OWORD *)v86 = v91;
        }
        v48 = a1;
        v49 = v6;
        v50 = 7;
        goto LABEL_99;
      case 8u:
        v60 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v61 + 48))(a2, 1, v60))
        {
          v62 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          v92 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(a1, a2, v92);
          *((_BYTE *)a1 + *(int *)(v60 + 20)) = *((_BYTE *)a2 + *(int *)(v60 + 20));
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v61 + 56))(a1, 0, 1, v60);
        }
        v93 = type metadata accessor for TTRTemplatePublicLinkData(0);
        *(void **)((char *)a1 + *(int *)(v93 + 20)) = *(void **)((char *)a2 + *(int *)(v93 + 20));
        v48 = a1;
        v49 = v6;
        v50 = 8;
        goto LABEL_99;
      case 9u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v54 = *(int *)(type metadata accessor for TTRRemindersListTips(0) + 20);
        v55 = (char *)a1 + v54;
        v56 = (char *)a2 + v54;
        v57 = type metadata accessor for AnyTip(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
        v48 = a1;
        v49 = v6;
        v50 = 9;
LABEL_99:
        swift_storeEnumTagMultiPayload(v48, v49, v50);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v199 = *(int *)(a3 + 20);
  v200 = (char *)a1 + v199;
  v201 = (char *)a2 + v199;
  v202 = *(void **)v201;
  LOBYTE(v201) = v201[8];
  v203 = *(void **)v200;
  *(_QWORD *)v200 = v202;
  v200[8] = (char)v201;
  v204 = v202;

  return a1;
}

_QWORD *sub_1000B9388(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;

  v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(a2, v7))
      {
        case 2u:
          v8 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
          v9 = a1;
          v10 = v7;
          v11 = 2;
          goto LABEL_33;
        case 3u:
          v69 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(a1, a2, v69);
          v9 = a1;
          v10 = v7;
          v11 = 3;
          goto LABEL_33;
        case 4u:
          v70 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(a1, a2, v70);
          v9 = a1;
          v10 = v7;
          v11 = 4;
          goto LABEL_33;
        case 5u:
          v71 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(a1, a2, v71);
          v9 = a1;
          v10 = v7;
          v11 = 5;
          goto LABEL_33;
        case 6u:
          v72 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(a1, a2, v72);
          v9 = a1;
          v10 = v7;
          v11 = 6;
LABEL_33:
          swift_storeEnumTagMultiPayload(v9, v10, v11);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      v73 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
      v74 = v73[5];
      v75 = (_OWORD *)((char *)a1 + v74);
      v76 = (_OWORD *)((char *)a2 + v74);
      v77 = v76[3];
      v75[2] = v76[2];
      v75[3] = v77;
      v78 = v76[1];
      *v75 = *v76;
      v75[1] = v78;
      *(_OWORD *)((char *)v75 + 106) = *(_OWORD *)((char *)v76 + 106);
      v79 = v76[6];
      v80 = v76[4];
      v75[5] = v76[5];
      v75[6] = v79;
      v75[4] = v80;
      *((_BYTE *)a1 + v73[6]) = *((_BYTE *)a2 + v73[6]);
      *((_BYTE *)a1 + v73[7]) = *((_BYTE *)a2 + v73[7]);
      *((_BYTE *)a1 + v73[8]) = *((_BYTE *)a2 + v73[8]);
      *((_BYTE *)a1 + v73[9]) = *((_BYTE *)a2 + v73[9]);
      *((_BYTE *)a1 + v73[10]) = *((_BYTE *)a2 + v73[10]);
      *(_QWORD *)((char *)a1 + v73[11]) = *(_QWORD *)((char *)a2 + v73[11]);
      v45 = a1;
      v46 = v6;
      v47 = 0;
      goto LABEL_66;
    case 1u:
      v12 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(a2, v12))
      {
        case 2u:
          v13 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
          v14 = a1;
          v15 = v12;
          v16 = 2;
          goto LABEL_40;
        case 3u:
          v81 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(a1, a2, v81);
          v14 = a1;
          v15 = v12;
          v16 = 3;
          goto LABEL_40;
        case 4u:
          v82 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(a1, a2, v82);
          v14 = a1;
          v15 = v12;
          v16 = 4;
          goto LABEL_40;
        case 5u:
          v83 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(a1, a2, v83);
          v14 = a1;
          v15 = v12;
          v16 = 5;
          goto LABEL_40;
        case 6u:
          v84 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(a1, a2, v84);
          v14 = a1;
          v15 = v12;
          v16 = 6;
LABEL_40:
          swift_storeEnumTagMultiPayload(v14, v15, v16);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
          break;
      }
      v85 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
      v86 = v85[5];
      v87 = (_OWORD *)((char *)a1 + v86);
      v88 = (_OWORD *)((char *)a2 + v86);
      v89 = v88[3];
      v87[2] = v88[2];
      v87[3] = v89;
      v90 = v88[1];
      *v87 = *v88;
      v87[1] = v90;
      *(_OWORD *)((char *)v87 + 106) = *(_OWORD *)((char *)v88 + 106);
      v91 = v88[6];
      v92 = v88[4];
      v87[5] = v88[5];
      v87[6] = v91;
      v87[4] = v92;
      *((_BYTE *)a1 + v85[6]) = *((_BYTE *)a2 + v85[6]);
      *((_BYTE *)a1 + v85[7]) = *((_BYTE *)a2 + v85[7]);
      *((_BYTE *)a1 + v85[8]) = *((_BYTE *)a2 + v85[8]);
      *((_BYTE *)a1 + v85[9]) = *((_BYTE *)a2 + v85[9]);
      *((_BYTE *)a1 + v85[10]) = *((_BYTE *)a2 + v85[10]);
      *(_QWORD *)((char *)a1 + v85[11]) = *(_QWORD *)((char *)a2 + v85[11]);
      v45 = a1;
      v46 = v6;
      v47 = 1;
      goto LABEL_66;
    case 2u:
      *a1 = *a2;
      v17 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = sub_10002A750(&qword_100644980);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v19, v20))
        {
          case 2u:
            v48 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v18, v19, v48);
            v49 = v18;
            v50 = v20;
            v51 = 2;
            goto LABEL_47;
          case 3u:
            v93 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v18, v19, v93);
            v49 = v18;
            v50 = v20;
            v51 = 3;
            goto LABEL_47;
          case 4u:
            v94 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v18, v19, v94);
            v49 = v18;
            v50 = v20;
            v51 = 4;
            goto LABEL_47;
          case 5u:
            v95 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v18, v19, v95);
            v49 = v18;
            v50 = v20;
            v51 = 5;
            goto LABEL_47;
          case 6u:
            v96 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v18, v19, v96);
            v49 = v18;
            v50 = v20;
            v51 = 6;
LABEL_47:
            swift_storeEnumTagMultiPayload(v49, v50, v51);
            break;
          default:
            memcpy(v18, v19, *(_QWORD *)(v21 + 64));
            break;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v45 = a1;
      v46 = v6;
      v47 = 2;
      goto LABEL_66;
    case 3u:
      *a1 = *a2;
      v23 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = sub_10002A750(&qword_100644980);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v25, v26))
        {
          case 2u:
            v52 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v24, v25, v52);
            v53 = v24;
            v54 = v26;
            v55 = 2;
            goto LABEL_55;
          case 3u:
            v97 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v24, v25, v97);
            v53 = v24;
            v54 = v26;
            v55 = 3;
            goto LABEL_55;
          case 4u:
            v98 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(v24, v25, v98);
            v53 = v24;
            v54 = v26;
            v55 = 4;
            goto LABEL_55;
          case 5u:
            v99 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v24, v25, v99);
            v53 = v24;
            v54 = v26;
            v55 = 5;
            goto LABEL_55;
          case 6u:
            v100 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v24, v25, v100);
            v53 = v24;
            v54 = v26;
            v55 = 6;
LABEL_55:
            swift_storeEnumTagMultiPayload(v53, v54, v55);
            break;
          default:
            memcpy(v24, v25, *(_QWORD *)(v27 + 64));
            break;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v45 = a1;
      v46 = v6;
      v47 = 3;
      goto LABEL_66;
    case 4u:
      *a1 = *a2;
      v29 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = sub_10002A750(&qword_100644980);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v31, v32))
        {
          case 2u:
            v56 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v30, v31, v56);
            v57 = v30;
            v58 = v32;
            v59 = 2;
            goto LABEL_63;
          case 3u:
            v101 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v30, v31, v101);
            v57 = v30;
            v58 = v32;
            v59 = 3;
            goto LABEL_63;
          case 4u:
            v102 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v30, v31, v102);
            v57 = v30;
            v58 = v32;
            v59 = 4;
            goto LABEL_63;
          case 5u:
            v103 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v30, v31, v103);
            v57 = v30;
            v58 = v32;
            v59 = 5;
            goto LABEL_63;
          case 6u:
            v104 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v30, v31, v104);
            v57 = v30;
            v58 = v32;
            v59 = 6;
LABEL_63:
            swift_storeEnumTagMultiPayload(v57, v58, v59);
            break;
          default:
            memcpy(v30, v31, *(_QWORD *)(v33 + 64));
            break;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v45 = a1;
      v46 = v6;
      v47 = 4;
      goto LABEL_66;
    case 7u:
      v35 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(a2, 1, v35))
      {
        v37 = sub_10002A750(&qword_100644600);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        v60 = *(int *)(v35 + 20);
        v61 = (char *)a1 + v60;
        v62 = (char *)a2 + v60;
        v63 = type metadata accessor for REMHashtagLabelSpecifier(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v35);
      }
      v64 = *(int *)(type metadata accessor for TTRRemindersListViewModel.HashtagsState(0) + 20);
      v65 = (char *)a1 + v64;
      v66 = (char *)a2 + v64;
      *(_OWORD *)v65 = *(_OWORD *)v66;
      *((_QWORD *)v65 + 2) = *((_QWORD *)v66 + 2);
      v45 = a1;
      v46 = v6;
      v47 = 7;
      goto LABEL_66;
    case 8u:
      v38 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48))(a2, 1, v38))
      {
        v40 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v67 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(a1, a2, v67);
        *((_BYTE *)a1 + *(int *)(v38 + 20)) = *((_BYTE *)a2 + *(int *)(v38 + 20));
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(a1, 0, 1, v38);
      }
      v68 = type metadata accessor for TTRTemplatePublicLinkData(0);
      *(_QWORD *)((char *)a1 + *(int *)(v68 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v68 + 20));
      v45 = a1;
      v46 = v6;
      v47 = 8;
      goto LABEL_66;
    case 9u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v41 = *(int *)(type metadata accessor for TTRRemindersListTips(0) + 20);
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      v44 = type metadata accessor for AnyTip(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      v45 = a1;
      v46 = v6;
      v47 = 9;
LABEL_66:
      swift_storeEnumTagMultiPayload(v45, v46, v47);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v105 = *(int *)(a3 + 20);
  v106 = (char *)a1 + v105;
  v107 = (char *)a2 + v105;
  *(_QWORD *)v106 = *(_QWORD *)v107;
  v106[8] = v107[8];
  return a1;
}

_QWORD *sub_1000B9EFC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void *v109;

  if (a1 != a2)
  {
    sub_10001F544((uint64_t)a1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(a2, v7))
        {
          case 2u:
            v8 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
            v9 = a1;
            v10 = v7;
            v11 = 2;
            goto LABEL_34;
          case 3u:
            v69 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(a1, a2, v69);
            v9 = a1;
            v10 = v7;
            v11 = 3;
            goto LABEL_34;
          case 4u:
            v70 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(a1, a2, v70);
            v9 = a1;
            v10 = v7;
            v11 = 4;
            goto LABEL_34;
          case 5u:
            v71 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(a1, a2, v71);
            v9 = a1;
            v10 = v7;
            v11 = 5;
            goto LABEL_34;
          case 6u:
            v72 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(a1, a2, v72);
            v9 = a1;
            v10 = v7;
            v11 = 6;
LABEL_34:
            swift_storeEnumTagMultiPayload(v9, v10, v11);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
            break;
        }
        v73 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
        v74 = v73[5];
        v75 = (_OWORD *)((char *)a1 + v74);
        v76 = (_OWORD *)((char *)a2 + v74);
        v77 = v76[3];
        v75[2] = v76[2];
        v75[3] = v77;
        v78 = v76[1];
        *v75 = *v76;
        v75[1] = v78;
        *(_OWORD *)((char *)v75 + 106) = *(_OWORD *)((char *)v76 + 106);
        v79 = v76[6];
        v80 = v76[4];
        v75[5] = v76[5];
        v75[6] = v79;
        v75[4] = v80;
        *((_BYTE *)a1 + v73[6]) = *((_BYTE *)a2 + v73[6]);
        *((_BYTE *)a1 + v73[7]) = *((_BYTE *)a2 + v73[7]);
        *((_BYTE *)a1 + v73[8]) = *((_BYTE *)a2 + v73[8]);
        *((_BYTE *)a1 + v73[9]) = *((_BYTE *)a2 + v73[9]);
        *((_BYTE *)a1 + v73[10]) = *((_BYTE *)a2 + v73[10]);
        *(_QWORD *)((char *)a1 + v73[11]) = *(_QWORD *)((char *)a2 + v73[11]);
        v45 = a1;
        v46 = v6;
        v47 = 0;
        goto LABEL_67;
      case 1u:
        v12 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(a2, v12))
        {
          case 2u:
            v13 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
            v14 = a1;
            v15 = v12;
            v16 = 2;
            goto LABEL_41;
          case 3u:
            v81 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(a1, a2, v81);
            v14 = a1;
            v15 = v12;
            v16 = 3;
            goto LABEL_41;
          case 4u:
            v82 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(a1, a2, v82);
            v14 = a1;
            v15 = v12;
            v16 = 4;
            goto LABEL_41;
          case 5u:
            v83 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(a1, a2, v83);
            v14 = a1;
            v15 = v12;
            v16 = 5;
            goto LABEL_41;
          case 6u:
            v84 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(a1, a2, v84);
            v14 = a1;
            v15 = v12;
            v16 = 6;
LABEL_41:
            swift_storeEnumTagMultiPayload(v14, v15, v16);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
            break;
        }
        v85 = (int *)type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
        v86 = v85[5];
        v87 = (_OWORD *)((char *)a1 + v86);
        v88 = (_OWORD *)((char *)a2 + v86);
        v89 = v88[3];
        v87[2] = v88[2];
        v87[3] = v89;
        v90 = v88[1];
        *v87 = *v88;
        v87[1] = v90;
        *(_OWORD *)((char *)v87 + 106) = *(_OWORD *)((char *)v88 + 106);
        v91 = v88[6];
        v92 = v88[4];
        v87[5] = v88[5];
        v87[6] = v91;
        v87[4] = v92;
        *((_BYTE *)a1 + v85[6]) = *((_BYTE *)a2 + v85[6]);
        *((_BYTE *)a1 + v85[7]) = *((_BYTE *)a2 + v85[7]);
        *((_BYTE *)a1 + v85[8]) = *((_BYTE *)a2 + v85[8]);
        *((_BYTE *)a1 + v85[9]) = *((_BYTE *)a2 + v85[9]);
        *((_BYTE *)a1 + v85[10]) = *((_BYTE *)a2 + v85[10]);
        *(_QWORD *)((char *)a1 + v85[11]) = *(_QWORD *)((char *)a2 + v85[11]);
        v45 = a1;
        v46 = v6;
        v47 = 1;
        goto LABEL_67;
      case 2u:
        *a1 = *a2;
        v17 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v21 = *(_QWORD *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          v22 = sub_10002A750(&qword_100644980);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v19, v20))
          {
            case 2u:
              v48 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v18, v19, v48);
              v49 = v18;
              v50 = v20;
              v51 = 2;
              goto LABEL_48;
            case 3u:
              v93 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v18, v19, v93);
              v49 = v18;
              v50 = v20;
              v51 = 3;
              goto LABEL_48;
            case 4u:
              v94 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v18, v19, v94);
              v49 = v18;
              v50 = v20;
              v51 = 4;
              goto LABEL_48;
            case 5u:
              v95 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v18, v19, v95);
              v49 = v18;
              v50 = v20;
              v51 = 5;
              goto LABEL_48;
            case 6u:
              v96 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v18, v19, v96);
              v49 = v18;
              v50 = v20;
              v51 = 6;
LABEL_48:
              swift_storeEnumTagMultiPayload(v49, v50, v51);
              break;
            default:
              memcpy(v18, v19, *(_QWORD *)(v21 + 64));
              break;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        v45 = a1;
        v46 = v6;
        v47 = 2;
        goto LABEL_67;
      case 3u:
        *a1 = *a2;
        v23 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = sub_10002A750(&qword_100644980);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v25, v26))
          {
            case 2u:
              v52 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v24, v25, v52);
              v53 = v24;
              v54 = v26;
              v55 = 2;
              goto LABEL_56;
            case 3u:
              v97 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v24, v25, v97);
              v53 = v24;
              v54 = v26;
              v55 = 3;
              goto LABEL_56;
            case 4u:
              v98 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 32))(v24, v25, v98);
              v53 = v24;
              v54 = v26;
              v55 = 4;
              goto LABEL_56;
            case 5u:
              v99 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32))(v24, v25, v99);
              v53 = v24;
              v54 = v26;
              v55 = 5;
              goto LABEL_56;
            case 6u:
              v100 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v24, v25, v100);
              v53 = v24;
              v54 = v26;
              v55 = 6;
LABEL_56:
              swift_storeEnumTagMultiPayload(v53, v54, v55);
              break;
            default:
              memcpy(v24, v25, *(_QWORD *)(v27 + 64));
              break;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        v45 = a1;
        v46 = v6;
        v47 = 3;
        goto LABEL_67;
      case 4u:
        *a1 = *a2;
        v29 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        v32 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = sub_10002A750(&qword_100644980);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v31, v32))
          {
            case 2u:
              v56 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v30, v31, v56);
              v57 = v30;
              v58 = v32;
              v59 = 2;
              goto LABEL_64;
            case 3u:
              v101 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v30, v31, v101);
              v57 = v30;
              v58 = v32;
              v59 = 3;
              goto LABEL_64;
            case 4u:
              v102 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v102 - 8) + 32))(v30, v31, v102);
              v57 = v30;
              v58 = v32;
              v59 = 4;
              goto LABEL_64;
            case 5u:
              v103 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v30, v31, v103);
              v57 = v30;
              v58 = v32;
              v59 = 5;
              goto LABEL_64;
            case 6u:
              v104 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v104 - 8) + 32))(v30, v31, v104);
              v57 = v30;
              v58 = v32;
              v59 = 6;
LABEL_64:
              swift_storeEnumTagMultiPayload(v57, v58, v59);
              break;
            default:
              memcpy(v30, v31, *(_QWORD *)(v33 + 64));
              break;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        }
        v45 = a1;
        v46 = v6;
        v47 = 4;
        goto LABEL_67;
      case 7u:
        v35 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
        v36 = *(_QWORD *)(v35 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(a2, 1, v35))
        {
          v37 = sub_10002A750(&qword_100644600);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          *a1 = *a2;
          v60 = *(int *)(v35 + 20);
          v61 = (char *)a1 + v60;
          v62 = (char *)a2 + v60;
          v63 = type metadata accessor for REMHashtagLabelSpecifier(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v61, v62, v63);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v35);
        }
        v64 = *(int *)(type metadata accessor for TTRRemindersListViewModel.HashtagsState(0) + 20);
        v65 = (char *)a1 + v64;
        v66 = (char *)a2 + v64;
        *(_OWORD *)v65 = *(_OWORD *)v66;
        *((_QWORD *)v65 + 2) = *((_QWORD *)v66 + 2);
        v45 = a1;
        v46 = v6;
        v47 = 7;
        goto LABEL_67;
      case 8u:
        v38 = type metadata accessor for TTRTemplatePublicLinkData.CreatedStateDescription(0);
        v39 = *(_QWORD *)(v38 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48))(a2, 1, v38))
        {
          v40 = type metadata accessor for TTRTemplatePublicLinkData.StateToDisplay(0);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        else
        {
          v67 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(a1, a2, v67);
          *((_BYTE *)a1 + *(int *)(v38 + 20)) = *((_BYTE *)a2 + *(int *)(v38 + 20));
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(a1, 0, 1, v38);
        }
        v68 = type metadata accessor for TTRTemplatePublicLinkData(0);
        *(_QWORD *)((char *)a1 + *(int *)(v68 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v68 + 20));
        v45 = a1;
        v46 = v6;
        v47 = 8;
        goto LABEL_67;
      case 9u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v41 = *(int *)(type metadata accessor for TTRRemindersListTips(0) + 20);
        v42 = (char *)a1 + v41;
        v43 = (char *)a2 + v41;
        v44 = type metadata accessor for AnyTip(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
        v45 = a1;
        v46 = v6;
        v47 = 9;
LABEL_67:
        swift_storeEnumTagMultiPayload(v45, v46, v47);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v105 = *(int *)(a3 + 20);
  v106 = (char *)a1 + v105;
  v107 = (char *)a2 + v105;
  v108 = *(_QWORD *)v107;
  LOBYTE(v107) = v107[8];
  v109 = *(void **)v106;
  *(_QWORD *)v106 = v108;
  v106[8] = (char)v107;

  return a1;
}

uint64_t sub_1000BAA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BAA9C);
}

uint64_t sub_1000BAA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 2)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_1000BAB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BAB24);
}

uint64_t sub_1000BAB24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t sub_1000BABA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for TTRRemindersListViewModel.Item(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

double sub_1000BAC10(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  NSString *v8;
  id v9;
  NSString *v10;
  id v11;
  unint64_t v12;
  double result;
  uint64_t v14;

  v5 = sub_10002A750(&qword_10064BB40);
  inited = swift_initStackObject(v5, &v14);
  *(_OWORD *)(inited + 16) = xmmword_1005201E0;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v7 = sub_100005ED8(0, (unint64_t *)&qword_10064ACC0, UIFont_ptr);
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 104) = sub_100005ED8(0, (unint64_t *)&qword_1006466A0, UIColor_ptr);
  *(_QWORD *)(inited + 80) = a3;
  v8 = NSFontAttributeName;
  v9 = a2;
  v10 = NSForegroundColorAttributeName;
  v11 = a3;
  v12 = sub_100350498(inited);
  NSMutableAttributedString.formatHashtags(with:)((Swift::OpaquePointer)v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

void sub_1000BACF4(int a1, Swift::String placeholder, UIImage with)
{
  NSMutableAttributedString.replace(placeholder:with:)(placeholder, with);
}

id sub_1000BAD20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v8;
  NSString v9;
  NSString v10;
  id result;
  void *v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;

  v8 = objc_msgSend(a1, "mutableString");
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "replaceOccurrencesOfString:withString:", v9, v10);

  result = objc_msgSend(a1, "string");
  if (result)
  {
    v12 = result;
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v12, "rangeOfString:", v13);
    v16 = v15;

    result = (id)NSNotFound.getter();
    if (v14 != result)
    {
      v17 = String._bridgeToObjectiveC()();
      objc_msgSend(a1, "addAttribute:value:range:", NSLinkAttributeName, v17, v14, v16);

      return objc_msgSend(a1, "addAttribute:value:range:", NSForegroundColorAttributeName, a6, v14, v16);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t destroy for TextViewAction(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for TextViewAction(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = v3;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for TextViewAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for TTRRemindersListReminderActionTarget(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TextViewAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextViewAction(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextViewAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextViewAction()
{
  return &type metadata for TextViewAction;
}

uint64_t getEnumTagSinglePayload for TTRRemindersListEditingSessionState.SaveState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceholderType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000BB14C + 4 * byte_1005235F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000BB180 + 4 * byte_1005235F0[v4]))();
}

uint64_t sub_1000BB180(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BB190);
  return result;
}

uint64_t sub_1000BB19C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BB1A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000BB1A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB1B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceholderType()
{
  return &type metadata for PlaceholderType;
}

unint64_t sub_1000BB1D0()
{
  unint64_t result;

  result = qword_100644698[0];
  if (!qword_100644698[0])
  {
    result = swift_getWitnessTable(&unk_10052367C, &type metadata for PlaceholderType);
    atomic_store(result, qword_100644698);
  }
  return result;
}

uint64_t sub_1000BB214(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  void *v83;
  void *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t WitnessTable;
  __n128 v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char v96;
  char v97;
  void *v98;
  uint64_t v99;
  int EnumCaseMultiPayload;
  uint64_t v101;
  void *v102;
  void *v103;
  char v104;
  char *v105;
  void (*v106)(uint64_t, char *, uint64_t);
  void (**v107)(char *, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  char *v122;
  void *v123;
  void (*v124)(uint64_t, char *, uint64_t);
  char v125;
  char v126;
  void (*v127)(uint64_t, uint64_t);
  char *v128;
  uint64_t v129;
  char *v130;
  void (*v131)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  char *v148;
  unsigned int (*v149)(char *, uint64_t, uint64_t);
  void (*v150)(char *, uint64_t);
  char *v151;
  char *v152;
  void (*v153)(uint64_t);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int (*v160)(char *, uint64_t, uint64_t);
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  unsigned int v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t AssociatedConformanceWitness;
  uint64_t v177;
  char v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  uint64_t (*v181)(char *, uint64_t);
  char *v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  void (*v193)(char *, uint64_t);
  double v194;
  uint64_t (*v195)(char *, uint64_t);
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  void (*v208)(uint64_t, char *, uint64_t);
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  void (*v224)(char *, uint64_t);
  uint64_t v225;
  char *v226;
  uint64_t v227;
  void (*v228)(char *, uint64_t);
  char *v229;
  uint64_t (*v230)(void *, char *);
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);
  int v238;
  char *v239;
  uint64_t (*v240)(void *, char *);
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int (*v248)(uint64_t, uint64_t, uint64_t);
  uint64_t v249;
  uint64_t v250;
  int v251;
  char *v252;
  void (*v253)(char *, uint64_t);
  char v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t (*v257)(void *, char *);
  void *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  void (*v264)(char *, char *, uint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  void (*v291)(uint64_t, char *, uint64_t);
  uint64_t v292;
  char *v293;
  void (*v294)(uint64_t, uint64_t);
  uint64_t updated;
  char *v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t TupleTypeMetadata2;
  char *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  char v315[8];

  v272 = a2;
  v4 = swift_isaMask & *v2;
  v5 = type metadata accessor for TTRITreeViewDropProposal.Intent(0);
  __chkstk_darwin(v5);
  v267 = (uint64_t)&v263 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v269 = (uint64_t)&v263 - v8;
  __chkstk_darwin(v9);
  v268 = (uint64_t)&v263 - v10;
  __chkstk_darwin(v11);
  v270 = (uint64_t)&v263 - v12;
  v13 = *(_QWORD *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14, v13, &unk_1005987EC, &unk_1005987FC);
  v305 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v277 = (char *)&v263 - v16;
  v300 = v17;
  v18 = type metadata accessor for Optional(255, v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v18, v18, 0, 0);
  v285 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  v289 = (char *)&v263 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v298 = (char *)&v263 - v21;
  v302 = v18;
  v297 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v22);
  v275 = (char *)&v263 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v288 = (char *)&v263 - v25;
  __chkstk_darwin(v26);
  v286 = (char *)&v263 - v27;
  __chkstk_darwin(v28);
  v278 = (char *)&v263 - v29;
  __chkstk_darwin(v30);
  v296 = (char *)&v263 - v31;
  __chkstk_darwin(v32);
  v304 = (char *)&v263 - v33;
  updated = type metadata accessor for TTRITreeViewDropUpdateCoordinator.Hit(0, v13, v14, v34);
  v294 = *(void (**)(uint64_t, uint64_t))(updated - 8);
  __chkstk_darwin(updated);
  v293 = (char *)&v263 - v35;
  v291 = (void (*)(uint64_t, char *, uint64_t))swift_getTupleTypeMetadata2(255, v13, &type metadata for Int, "parent index ", 0);
  v284 = type metadata accessor for Optional(0, v291);
  v283 = *(_QWORD *)(v284 - 8);
  __chkstk_darwin(v284);
  v290 = (char *)&v263 - v36;
  v282 = swift_getTupleTypeMetadata2(0, v13, &type metadata for Int, 0, 0);
  __chkstk_darwin(v282);
  v281 = (char *)&v263 - v37;
  v38 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v38);
  v292 = (uint64_t)&v263 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Optional(0, v13);
  v310 = *(_QWORD *)(v40 - 8);
  v311 = v40;
  __chkstk_darwin(v40);
  v273 = (char *)&v263 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v276 = (char *)&v263 - v43;
  __chkstk_darwin(v44);
  v287 = (char *)&v263 - v45;
  __chkstk_darwin(v46);
  v301 = (char *)&v263 - v47;
  __chkstk_darwin(v48);
  v306 = (char *)&v263 - v49;
  __chkstk_darwin(v50);
  v307 = (char *)&v263 - v51;
  __chkstk_darwin(v52);
  v54 = (char *)&v263 - v53;
  v312 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v55);
  v271 = (char *)&v263 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v274 = (char *)&v263 - v58;
  __chkstk_darwin(v59);
  v279 = (char *)&v263 - v60;
  __chkstk_darwin(v61);
  v280 = (char *)&v263 - v62;
  __chkstk_darwin(v63);
  v308 = (char *)&v263 - v64;
  v313 = v13;
  v299 = v14;
  v66 = type metadata accessor for TTRITreeViewDropUpdateCoordinator.HitTestResult(255, v13, v14, v65);
  v67 = type metadata accessor for Optional(0, v66);
  v68 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v70 = (char *)&v263 - v69;
  v71 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v72);
  v74 = (char *)&v263 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v75);
  v77 = (char *)&v263 - v76;
  v78 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 120);
  v79 = swift_beginAccess(v78, v315, 0, 0);
  v80 = v78;
  v81 = v66;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v68 + 16))(v70, v80, v67, v79);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v70, 1, v66) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v70, v67);
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v77, v70, v66);
  v83 = sub_1001078D4();
  v84 = v83;
  v85 = (uint64_t)v77;
  if ((v86 & 1) != 0)
  {
    swift_bridgeObjectRelease(v83);
    return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v77, v81);
  }
  v265 = v71;
  v266 = v81;
  v314 = v83;
  v87 = v313;
  v88 = type metadata accessor for Array(0, v313);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v88);
  Collection.first.getter(v54, v88, WitnessTable);
  v90 = swift_bridgeObjectRelease(v84);
  v91 = v312;
  v92 = *(void (**)(uint64_t, uint64_t))(v312 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v92)(v54, 1, v87, v90) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v85, v266);
    return (*(uint64_t (**)(char *, uint64_t))(v310 + 8))(v54, v311);
  }
  v93 = (uint64_t)v308;
  v264 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
  v264(v308, v54, v87);
  v94 = v309;
  v95 = (void *)sub_1000BCCF4();
  v263 = (char *)sub_10043C204(v93);
  v97 = v96;

  if ((v97 & 1) != 0)
    goto LABEL_14;
  v98 = (void *)sub_1000BCCF4();
  sub_10043C1A0(v93, (uint64_t)v307);

  v99 = v266;
  (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v74, v85, v266);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v74, v99);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
LABEL_13:
      (*(void (**)(char *, uint64_t))(v310 + 8))(v307, v311);
LABEL_14:
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v93, v87);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v265 + 8))(v85, v266);
    }
    v294 = v92;
    v101 = v292;
    sub_1000BD6A8((uint64_t)v74, v292);
    result = swift_unknownObjectWeakLoadStrong(v94 + qword_100653D08);
    if (!result)
      goto LABEL_108;
    v102 = (void *)result;
    v103 = sub_1001078D4();
    v105 = v290;
    sub_1000E2DE0((uint64_t)v103, v104 & 1, v101, v290);

    swift_bridgeObjectRelease(v103);
    sub_100052544(v101);
    v106 = v291;
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(*((_QWORD *)v291 - 1) + 48))(v105, 1, v291) == 1)
    {
      (*(void (**)(char *, uint64_t))(v283 + 8))(v105, v284);
      goto LABEL_13;
    }
    v292 = v85;
    v116 = v91;
    v117 = *(_QWORD *)&v105[*((int *)v106 + 12)];
    v118 = v282;
    v119 = *(int *)(v282 + 48);
    v120 = v281;
    v121 = v264;
    v264(v281, v105, v87);
    *(_QWORD *)&v120[v119] = v117;
    v115 = *(char **)&v120[*(int *)(v118 + 48)];
    v122 = v280;
    v121(v280, v120, v87);
    v114 = v306;
    v121(v306, v122, v87);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v114, 0, 1, v87);
    LODWORD(updated) = 0;
    v112 = v310;
    v113 = v311;
    v110 = (uint64_t)v301;
    v92 = v294;
  }
  else
  {
    v292 = v85;
    v107 = (void (**)(char *, uint64_t))v294;
    v108 = v293;
    v109 = updated;
    (*((void (**)(char *, char *, uint64_t))v294 + 4))(v293, v74, updated);
    v110 = (uint64_t)v301;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v301, &v108[*(int *)(v109 + 36)], v87);
    v107[1](v108, v109);
    v111 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56);
    LODWORD(updated) = 1;
    v111(v110, 0, 1, v87);
    v112 = v310;
    v113 = v311;
    v114 = v306;
    (*(void (**)(char *, uint64_t, uint64_t))(v310 + 32))(v306, v110, v311);
    v115 = 0;
  }
  v123 = (void *)sub_1000BCCF4();
  v124 = *(void (**)(uint64_t, char *, uint64_t))(v112 + 16);
  v124(v110, v114, v113);
  v310 = sub_10043C27C(v110);
  v126 = v125;

  v127 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
  v127(v110, v113);
  if ((v126 & 1) != 0)
  {
    v127((uint64_t)v307, v113);
    (*(void (**)(uint64_t, uint64_t))(v312 + 8))(v93, v313);
    (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v292, v266);
    v133 = v114;
    return ((uint64_t (*)(char *, uint64_t))v127)(v133, v113);
  }
  v290 = v115;
  v128 = v287;
  v291 = v124;
  v124((uint64_t)v287, v307, v113);
  v129 = v313;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v92)(v128, 1, v313) == 1)
  {
    v127((uint64_t)v128, v113);
    v130 = v304;
    v131 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v305 + 56);
    v132 = 1;
  }
  else
  {
    v134 = v304;
    (*(void (**)(uint64_t))(v299 + 24))(v129);
    (*(void (**)(char *, uint64_t))(v312 + 8))(v128, v129);
    v131 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v305 + 56);
    v130 = v134;
    v132 = 0;
  }
  v135 = v300;
  v131(v130, v132, 1, v300);
  v136 = v297;
  v294 = v127;
  v137 = 1;
  v138 = ((uint64_t (*)(char *, uint64_t, uint64_t))v92)(v114, 1, v129);
  v139 = v296;
  if (!v138)
  {
    v141 = v312;
    v140 = v313;
    v142 = v279;
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v279, v114, v313);
    (*(void (**)(uint64_t))(v299 + 24))(v140);
    v135 = v300;
    (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v140);
    v137 = 0;
  }
  v293 = (char *)v131;
  v131(v139, v137, 1, v135);
  v143 = v304;
  v144 = v298;
  v145 = &v298[*(int *)(TupleTypeMetadata2 + 48)];
  v146 = *(void (**)(char *, char *, uint64_t))(v136 + 16);
  v147 = v302;
  v146(v298, v304, v302);
  v146(v145, v139, v147);
  v148 = v139;
  v149 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v305 + 48);
  if (v149(v144, 1, v135) == 1)
  {
    v150 = *(void (**)(char *, uint64_t))(v136 + 8);
    v150(v148, v147);
    v150(v143, v147);
    if (v149(v145, 1, v135) == 1)
    {
      result = ((uint64_t (*)(char *, uint64_t))v150)(v298, v147);
      goto LABEL_39;
    }
    goto LABEL_29;
  }
  v151 = v278;
  v146(v278, v144, v147);
  if (v149(v145, 1, v135) == 1)
  {
    v150 = *(void (**)(char *, uint64_t))(v297 + 8);
    v150(v296, v147);
    v150(v304, v147);
    (*(void (**)(char *, uint64_t))(v305 + 8))(v151, v135);
LABEL_29:
    v152 = v293;
    (*(void (**)(char *, uint64_t))(v285 + 8))(v298, TupleTypeMetadata2);
    goto LABEL_30;
  }
  v173 = v144;
  v174 = v305;
  v175 = v277;
  (*(void (**)(char *, char *, uint64_t))(v305 + 32))(v277, v145, v135);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v299, v313, v135, &unk_1005987EC, &unk_1005987F4);
  v177 = v135;
  v178 = dispatch thunk of static Equatable.== infix(_:_:)(v151, v175, v135, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v179 = *(void (**)(char *, uint64_t))(v174 + 8);
  v179(v175, v177);
  v150 = *(void (**)(char *, uint64_t))(v297 + 8);
  v150(v296, v302);
  v150(v304, v302);
  v179(v151, v177);
  result = ((uint64_t (*)(char *, uint64_t))v150)(v173, v302);
  v152 = v293;
  if ((v178 & 1) != 0)
  {
LABEL_39:
    if ((updated & 1) != 0)
    {
      v180 = v311;
      v181 = (uint64_t (*)(char *, uint64_t))v294;
      v294((uint64_t)v307, v311);
      (*(void (**)(char *, uint64_t))(v312 + 8))(v308, v313);
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v292, v266);
      return v181(v306, v180);
    }
    v182 = v306;
    v183 = v266;
    v184 = v292;
    v127 = v294;
    v113 = v311;
    if (v263 == v290)
    {
      v185 = sub_1000BCD3C(0, 0, 0xFFu);
      ((void (*)(char *, uint64_t, double))v127)(v307, v113, v185);
      (*(void (**)(char *, uint64_t))(v312 + 8))(v308, v313);
LABEL_103:
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v184, v183);
      v133 = v182;
      return ((uint64_t (*)(char *, uint64_t))v127)(v133, v113);
    }
    v205 = v290 - 1;
    if (!__OFSUB__(v290, 1))
    {
      v206 = v290;
      v207 = (uint64_t)v301;
      v208 = v291;
      v291((uint64_t)v301, v306, v311);
      sub_1000BCEAC((uint64_t)v205, v207);
      v210 = v209;
      v212 = v211;
      v127(v207, v113);
      if (v212)
        v213 = v210;
      else
        v213 = 0;
      v310 = v213;
      if (v212)
        v214 = v212;
      else
        v214 = 0xE000000000000000;
      v208(v207, v182, v113);
      sub_1000BCEAC((uint64_t)v206, v207);
      v216 = v215;
      v218 = v217;
      v127(v207, v113);
      if (v218)
        v219 = v216;
      else
        v219 = 0;
      if (v218)
        v220 = v218;
      else
        v220 = 0xE000000000000000;
      if ((uint64_t)v206 >= (uint64_t)v263 && ((v221 = v310) != 0 || v214 != 0xE000000000000000))
      {
        v254 = _stringCompareWithSmolCheck(_:_:expecting:)(v310, v214, 0, 0xE000000000000000, 0);
        v222 = 0;
        v223 = v220;
        v127 = v294;
        if ((v254 & 1) == 0)
        {
          v222 = 1;
          v219 = v221;
          v223 = v214;
        }
      }
      else
      {
        v222 = 0;
        v223 = v220;
        v127 = v294;
      }
      sub_1000BD6A0(v219, v223);
      swift_bridgeObjectRelease(v220);
      swift_bridgeObjectRelease(v214);
      sub_1000BCD3C(v219, v223, v222);
      sub_1000BD618(v219, v223);
      v127((uint64_t)v307, v113);
      v224 = *(void (**)(char *, uint64_t))(v312 + 8);
      goto LABEL_102;
    }
    goto LABEL_107;
  }
LABEL_30:
  v153 = *(void (**)(uint64_t))(v299 + 24);
  v154 = v286;
  v155 = v313;
  v153(v313);
  v156 = 1;
  v157 = v300;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v152)(v154, 0, 1, v300);
  if (!((unsigned int (*)(char *, uint64_t, uint64_t))v92)(v306, 1, v155))
  {
    v159 = v312;
    v158 = v313;
    v160 = v149;
    v161 = v279;
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v279, v306, v313);
    ((void (*)(uint64_t, uint64_t))v153)(v158, v299);
    v157 = v300;
    v162 = v161;
    v149 = v160;
    v152 = v293;
    (*(void (**)(char *, uint64_t))(v159 + 8))(v162, v158);
    v156 = 0;
  }
  v163 = v288;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v152)(v288, v156, 1, v157);
  v164 = v302;
  v165 = v289;
  v166 = &v289[*(int *)(TupleTypeMetadata2 + 48)];
  v146(v289, v154, v302);
  v146(v166, v163, v164);
  if (v149(v165, 1, v157) == 1)
  {
    v150(v163, v164);
    v150(v154, v164);
    v167 = v149(v166, 1, v157);
    v113 = v311;
    v168 = v306;
    v169 = v308;
    v170 = v266;
    if (v167 == 1)
    {
      v150(v289, v164);
LABEL_44:
      v194 = sub_1000BCD3C(0, 0, 0xFFu);
      v195 = (uint64_t (*)(char *, uint64_t))v294;
      ((void (*)(char *, uint64_t, double))v294)(v307, v113, v194);
      (*(void (**)(char *, uint64_t))(v312 + 8))(v169, v313);
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v292, v170);
      return v195(v168, v113);
    }
    goto LABEL_37;
  }
  v171 = v275;
  v146(v275, v165, v164);
  if (v149(v166, 1, v157) == 1)
  {
    v150(v288, v164);
    v150(v286, v164);
    (*(void (**)(char *, uint64_t))(v305 + 8))(v171, v157);
    v168 = v306;
    v113 = v311;
LABEL_37:
    (*(void (**)(char *, uint64_t))(v285 + 8))(v289, TupleTypeMetadata2);
    v172 = v290;
    goto LABEL_45;
  }
  v186 = v305;
  v187 = v171;
  v188 = v277;
  (*(void (**)(char *, char *, uint64_t))(v305 + 32))(v277, v166, v157);
  v189 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v299, v313, v157, &unk_1005987EC, &unk_1005987F4) + 8);
  v190 = v187;
  v191 = v187;
  v192 = v157;
  LODWORD(v304) = dispatch thunk of static Equatable.== infix(_:_:)(v190, v188, v157, v189);
  v193 = *(void (**)(char *, uint64_t))(v186 + 8);
  v170 = v266;
  v193(v188, v192);
  v150(v288, v164);
  v150(v286, v164);
  v193(v191, v192);
  v150(v289, v164);
  v168 = v306;
  v169 = v308;
  v172 = v290;
  v113 = v311;
  if ((v304 & 1) != 0)
    goto LABEL_44;
LABEL_45:
  if ((updated & 1) != 0)
  {
    v196 = 0;
    v197 = 0;
    v198 = 255;
    v199 = v312;
    v200 = v276;
    v201 = v310;
    goto LABEL_69;
  }
  v202 = (uint64_t)v301;
  v291((uint64_t)v301, v168, v113);
  sub_1000BCEAC((uint64_t)v172, v202);
  v196 = v203;
  v197 = v204;
  result = ((uint64_t (*)(uint64_t, uint64_t))v294)(v202, v113);
  v201 = v310;
  if (!v197)
  {
    v196 = 0;
    v198 = 255;
    v199 = v312;
    v200 = v276;
LABEL_69:
    if (v201 >= 1)
    {
      v291((uint64_t)v200, v168, v113);
      v225 = v313;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v92)(v200, 1, v313) == 1)
      {
        v127 = v294;
        v294((uint64_t)v200, v113);
LABEL_81:
        v182 = v306;
        if (v198 != 255)
          sub_1000BCD3C(v196, v197, v198);
        sub_1000BD600(v196, v197, v198);
        v127((uint64_t)v307, v113);
        v224 = *(void (**)(char *, uint64_t))(v199 + 8);
        goto LABEL_102;
      }
      v229 = v274;
      v264(v274, v200, v225);
      v230 = *(uint64_t (**)(void *, char *))(v309 + qword_100653D58);
      v231 = (void *)sub_1000BCCF4();
      v310 = v230(v231, v229);
      v233 = v232;

      if (!v233)
      {
        v199 = v312;
        (*(void (**)(char *, uint64_t))(v312 + 8))(v229, v225);
        v127 = v294;
        goto LABEL_81;
      }
      v234 = v272 + *(int *)(type metadata accessor for TTRITreeViewDropProposal(0) + 20);
      v235 = v270;
      sub_1000BD620(v234, v270);
      v236 = sub_10002A750(&qword_100653E50);
      v237 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v236 - 8) + 48);
      v238 = v237(v235, 4, v236);
      sub_1000BD664(v235);
      if (v238 == 3)
      {
        sub_1000BD070(v310, v233, v196, v197, v198, 0, 0);
        swift_bridgeObjectRelease(v233);
        sub_1000BD600(v196, v197, v198);
        v182 = v306;
      }
      else
      {
        v250 = v268;
        sub_1000BD620(v234, v268);
        v251 = v237(v250, 4, v236);
        sub_1000BD664(v250);
        v182 = v306;
        if (v251 != 4)
        {
          v127 = v294;
          v252 = v274;
          if (v198 == 255)
          {
            swift_bridgeObjectRelease(v233);
          }
          else
          {
            sub_1000BD070(v310, v233, v196, v197, v198, 0, 0);
            swift_bridgeObjectRelease(v233);
            sub_1000BD600(v196, v197, v198);
          }
          goto LABEL_87;
        }
        sub_1000BD070(v310, v233, v196, v197, v198, 0, 0);
        swift_bridgeObjectRelease(v233);
        sub_1000BD600(v196, v197, v198);
      }
      v127 = v294;
      v252 = v274;
LABEL_87:
      v224 = *(void (**)(char *, uint64_t))(v312 + 8);
      v224(v252, v313);
LABEL_101:
      v127((uint64_t)v307, v113);
LABEL_102:
      v183 = v266;
      v184 = v292;
      v224(v308, v313);
      goto LABEL_103;
    }
    v226 = v273;
    v291((uint64_t)v273, v168, v113);
    v227 = v313;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v92)(v226, 1, v313) == 1)
    {
      sub_1000BD600(v196, v197, v198);
      v228 = (void (*)(char *, uint64_t))v294;
      v294((uint64_t)v307, v113);
      (*(void (**)(char *, uint64_t))(v199 + 8))(v308, v227);
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v292, v266);
      v228(v226, v113);
      return ((uint64_t (*)(char *, uint64_t))v228)(v306, v113);
    }
    v239 = v271;
    v264(v271, v226, v227);
    v240 = *(uint64_t (**)(void *, char *))(v309 + qword_100653D58);
    v241 = (void *)sub_1000BCCF4();
    v242 = v240(v241, v239);
    v244 = v243;

    if (!v244)
    {
      v253 = *(void (**)(char *, uint64_t))(v312 + 8);
      v253(v239, v227);
      sub_1000BD600(v196, v197, v198);
      v228 = (void (*)(char *, uint64_t))v294;
      v294((uint64_t)v307, v113);
      v253(v308, v227);
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v292, v266);
      return ((uint64_t (*)(char *, uint64_t))v228)(v306, v113);
    }
    v245 = v272 + *(int *)(type metadata accessor for TTRITreeViewDropProposal(0) + 20);
    v246 = v269;
    sub_1000BD620(v245, v269);
    v247 = sub_10002A750(&qword_100653E50);
    v248 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v247 - 8) + 48);
    if (v248(v246, 4, v247) == 3)
    {
      sub_1000BD600(v196, v197, v198);
      v249 = v246;
    }
    else
    {
      sub_1000BD664(v246);
      v255 = v245;
      v256 = v267;
      sub_1000BD620(v255, v267);
      if (v248(v256, 4, v247) != 4)
      {
        swift_bridgeObjectRelease(v244);
        sub_1000BD664(v256);
        v182 = v306;
        v259 = v271;
        if (v198 != 255)
          sub_1000BCD3C(v196, v197, v198);
        sub_1000BD600(v196, v197, v198);
        goto LABEL_100;
      }
      sub_1000BD600(v196, v197, v198);
      v249 = v256;
    }
    sub_1000BD664(v249);
    v257 = *(uint64_t (**)(void *, char *))(v309 + qword_100653D60);
    v258 = (void *)sub_1000BCCF4();
    v259 = v271;
    v260 = v257(v258, v271);
    v262 = v261;

    sub_1000BD070(v242, v244, 0, 0, 0xFFu, v260, v262);
    swift_bridgeObjectRelease(v244);
    swift_bridgeObjectRelease(v262);
    v182 = v306;
LABEL_100:
    v127 = v294;
    v224 = *(void (**)(char *, uint64_t))(v312 + 8);
    v224(v259, v313);
    goto LABEL_101;
  }
  v200 = v276;
  if (!__OFSUB__(v310, 1))
  {
    v198 = v310 - 1 <= (uint64_t)v172;
    sub_1000BD6A0(v196, v197);
    swift_bridgeObjectRelease(v197);
    v199 = v312;
    goto LABEL_69;
  }
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
  return result;
}

uint64_t sub_1000BCCF4()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  uint64_t v3;

  result = swift_unknownObjectWeakLoadStrong(v0 + qword_100653D08);
  if (result)
  {
    v2 = (void *)result;
    v3 = sub_1000E32B0();

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1000BCD3C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double result;

  if (a3 == 255)
  {
    v3._countAndFlagsBits = 0xD00000000000004DLL;
    v4._object = (void *)0x80000001005640C0;
    v3._object = (void *)0x80000001005640E0;
    v4._countAndFlagsBits = 0xD000000000000013;
    v5 = TTRLocalizedString(_:comment:)(v4, v3);
    countAndFlagsBits = v5._countAndFlagsBits;
    object = v5._object;
  }
  else
  {
    if ((a3 & 1) != 0)
    {
      sub_1000BD6A0(a1, a2);
      v10 = 0xD00000000000003ALL;
      v11 = 0x8000000100564130;
      v12 = 0x6C65622065766F4DLL;
      v13 = 30575;
    }
    else
    {
      sub_1000BD6A0(a1, a2);
      v10 = 0xD00000000000003BLL;
      v11 = 0x8000000100564170;
      v12 = 0x6F62612065766F4DLL;
      v13 = 25974;
    }
    v14 = v13 | 0xED00004025200000;
    v15 = TTRLocalizedString(_:comment:)(*(Swift::String *)&v12, *(Swift::String *)&v10);
    v16 = sub_10002A750((uint64_t *)&unk_100640FD0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100520250;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_1000770A4();
    *(_QWORD *)(v17 + 32) = a1;
    *(_QWORD *)(v17 + 40) = a2;
    countAndFlagsBits = String.init(format:_:)(v15._countAndFlagsBits, v15._object, v17);
    object = v18;
    swift_bridgeObjectRelease(v15._object);
  }
  sub_1000BD33C(countAndFlagsBits, (uint64_t)object);
  *(_QWORD *)&result = swift_bridgeObjectRelease(object).n128_u64[0];
  return result;
}

void sub_1000BCEAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void (*v20)(void *, char *);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v25 = a1;
  v5 = *(_QWORD *)((swift_isaMask & *v2) + 0x50);
  v6 = type metadata accessor for Optional(0, v5);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - v7;
  v9 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - v11;
  v13 = (void *)sub_1000BCCF4();
  v14 = sub_10043C27C(a2);
  v16 = v15;

  if ((v16 & 1) == 0)
  {
    v17 = v14 - 1;
    if (__OFSUB__(v14, 1))
    {
      __break(1u);
    }
    else
    {
      if (v17 >= v25)
        v17 = v25;
      v18 = v17 & ~(v17 >> 63);
      v19 = (void *)sub_1000BCCF4();
      sub_10043C210(v18, a2, (uint64_t)v8);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v5) == 1)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, v5);
        v20 = *(void (**)(void *, char *))((char *)v3 + qword_100653D58);
        v21 = (void *)sub_1000BCCF4();
        v20(v21, v12);

        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v5);
      }
    }
  }
}

double sub_1000BD070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  void *object;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double result;

  v8 = a6;
  if (a5 == 255)
  {
    v11._countAndFlagsBits = 0xD00000000000003DLL;
    v11._object = (void *)0x80000001005641B0;
    v12._countAndFlagsBits = 0x736E692065766F4DLL;
    v12._object = (void *)0xEE00402520656469;
    v13 = TTRLocalizedString(_:comment:)(v12, v11);
    object = v13._object;
    v15 = sub_10002A750((uint64_t *)&unk_100640FD0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100520250;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000770A4();
    *(_QWORD *)(v16 + 32) = a1;
    *(_QWORD *)(v16 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    v17 = String.init(format:_:)(v13._countAndFlagsBits, v13._object, v16);
    v19 = v18;
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      sub_1000BD6A0(a3, a4);
      v22 = 0xD00000000000004CLL;
      v23 = 0x80000001005641F0;
      v24 = "Accessibility announcement for moving an item inside a parent, below another";
    }
    else
    {
      sub_1000BD6A0(a3, a4);
      v22 = 0xD00000000000004CLL;
      v23 = 0x8000000100564260;
      v24 = "Accessibility announcement for moving an item inside a parent, above another";
    }
    v25 = (unint64_t)(v24 - 32) | 0x8000000000000000;
    v26 = 0xD000000000000018;
    v27 = TTRLocalizedString(_:comment:)(*(Swift::String *)(&v23 - 1), *(Swift::String *)&v22);
    object = v27._object;
    v28 = sub_10002A750((uint64_t *)&unk_100640FD0);
    v29 = swift_allocObject(v28, 112, 7);
    *(_OWORD *)(v29 + 16) = xmmword_1005201E0;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    v30 = sub_1000770A4();
    *(_QWORD *)(v29 + 32) = a1;
    *(_QWORD *)(v29 + 40) = a2;
    *(_QWORD *)(v29 + 96) = &type metadata for String;
    *(_QWORD *)(v29 + 104) = v30;
    *(_QWORD *)(v29 + 64) = v30;
    *(_QWORD *)(v29 + 72) = a3;
    *(_QWORD *)(v29 + 80) = a4;
    swift_bridgeObjectRetain(a2);
    v17 = String.init(format:_:)(v27._countAndFlagsBits, v27._object, v29);
    v19 = v31;
    v8 = a6;
  }
  swift_bridgeObjectRelease(object);
  if (a7)
  {
    v32 = sub_10002A750((uint64_t *)&unk_100654F80);
    v33 = swift_allocObject(v32, 64, 7);
    *(_OWORD *)(v33 + 16) = xmmword_1005201E0;
    *(_QWORD *)(v33 + 32) = v17;
    *(_QWORD *)(v33 + 40) = v19;
    *(_QWORD *)(v33 + 48) = v8;
    *(_QWORD *)(v33 + 56) = a7;
    v34 = swift_bridgeObjectRetain(a7);
    v35 = (uint64_t *)TTRAccesibility.General.Label.SentenceEnd.unsafeMutableAddressor(v34);
    v36 = *v35;
    v37 = v35[1];
    swift_bridgeObjectRetain(v37);
    v38 = sub_10002A750(&qword_1006466D0);
    v39 = sub_100023FEC((unint64_t *)&qword_10064C980, &qword_1006466D0, (uint64_t)&protocol conformance descriptor for [A]);
    v17 = BidirectionalCollection<>.joined(separator:)(v36, v37, v38, v39);
    v19 = v40;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v37);
  }
  sub_1000BD33C(v17, v19);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v19).n128_u64[0];
  return result;
}

uint64_t sub_1000BD33C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10002CDD8();
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = (_QWORD *)swift_allocObject(&unk_1005F0208, 40, 7);
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1000BD71C;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006378;
  aBlock[3] = &unk_1005F0220;
  v15 = _Block_copy(aBlock);
  v16 = v2;
  swift_bridgeObjectRetain(a2);
  swift_release();
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100005E90();
  v19 = sub_10002A750((uint64_t *)&unk_100640F40);
  v20 = sub_100023FEC((unint64_t *)&qword_1006447E0, (uint64_t *)&unk_100640F40, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_1000BD538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  UIAccessibilityNotifications v9;
  NSString v10;

  v5 = (_QWORD *)(a1 + qword_100653D68);
  v6 = *(_QWORD *)(a1 + qword_100653D68 + 8);
  if (!v6)
  {
    v8 = 0;
LABEL_10:
    *v5 = a2;
    v5[1] = a3;
    swift_bridgeObjectRelease(v8);
    v9 = UIAccessibilityAnnouncementNotification;
    swift_bridgeObjectRetain(a3);
    v10 = String._bridgeToObjectiveC()();
    UIAccessibilityPostNotification(v9, v10);

    return;
  }
  v7 = *v5 == a2 && v6 == a3;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v5, v6, a2, a3, 0) & 1) == 0)
  {
    v8 = v5[1];
    goto LABEL_10;
  }
}

uint64_t sub_1000BD600(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1000BD618(a1, a2);
  return a1;
}

uint64_t sub_1000BD618(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000BD620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRITreeViewDropProposal.Intent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BD664(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRITreeViewDropProposal.Intent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BD6A0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000BD6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100646950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BD6F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000BD71C()
{
  uint64_t *v0;

  sub_1000BD538(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000BD728(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t sub_1000BD758(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_1000BD7AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t sub_1000BD828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_1000BD87C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Array(0, a2);
  return a1;
}

uint64_t sub_1000BD8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  return a1;
}

uint64_t sub_1000BD8F4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  _QWORD *v10;
  uint64_t v11;

  v6 = *a1;
  v10 = a1;
  v7 = type metadata accessor for TTRITreeViewNode(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), a4);
  swift_retain(a1);
  WitnessTable = swift_getWitnessTable(&unk_1005276C0, v7);
  Dictionary.subscript.getter(&v11, &v10, a4, v7, &type metadata for Int, WitnessTable);
  swift_release(a1);
  return v11;
}

uint64_t sub_1000BD984@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_1000BF050(a1, a4, a2, a3, a5);
}

uint64_t sub_1000BD99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v6, &unk_1005987EC, &unk_1005987FC);
  v9 = type metadata accessor for TTRITreeViewNode(255, v6, v5, v8);
  WitnessTable = swift_getWitnessTable(&unk_1005276C0, v9);
  v11 = type metadata accessor for Set(0, v9, WitnessTable);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
  v13 = type metadata accessor for Dictionary.Values(0, AssociatedTypeWitness, v11, AssociatedConformanceWitness);
  swift_bridgeObjectRetain(a3);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v13);
  LOBYTE(v4) = Sequence.contains(where:)(sub_1000BFF68, v4, v13, v14);
  swift_bridgeObjectRelease(a3);
  return v4 & 1;
}

uint64_t sub_1000BDAC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = *a1;
  v6 = sub_1000BD8F4(a1, a2, a3, a4);
  if ((v8 & 1) != 0)
    return 0;
  v9 = v6;
  v10 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v7);
  Array.subscript.getter(v13, v9, a2, v10);
  v11 = v13[0];
  swift_bridgeObjectRelease(v13[1]);
  return v11;
}

uint64_t sub_1000BDB38(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  Swift::Int v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v50 = a8;
  v51 = a5;
  v9 = v8;
  v63 = a4;
  v64 = a1;
  v65 = a2;
  v49 = *(_QWORD *)(a5 - 8);
  v11 = __chkstk_darwin(a1);
  v62 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (char *)&v46 - v13;
  v55 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14, v15, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v48 = (char *)&v46 - v19;
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v52 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  v21 = __chkstk_darwin(v20);
  v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v46 - v24;
  v26 = __chkstk_darwin(v23);
  v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v46 - v29;
  v58 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v28);
  v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = swift_getAssociatedTypeWitness(0, a6, v16, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  v54 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v56 = (char *)&v46 - v32;
  v33 = v16;
  v34 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  v35 = v63;
  v67 = ContiguousArray.init()(v63);
  v63 = type metadata accessor for ContiguousArray(0, v35);
  ContiguousArray.reserveCapacity(_:)(v34);
  (*(void (**)(char *, _QWORD, _QWORD *))(v58 + 16))(v57, v60, v16);
  v36 = v56;
  v60 = v33;
  v37 = v33;
  v38 = v55;
  result = dispatch thunk of Sequence.makeIterator()(v37);
  if (v34 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v34)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v64(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
        swift_release(v67);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v62, v51);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v63);
      if (!--v34)
      {
        v41 = v59;
        v42 = v66;
        goto LABEL_9;
      }
    }
  }
  v42 = v66;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v41 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v42, AssociatedConformanceWitness);
  v62 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v41, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
    return v67;
  }
  else
  {
    v60 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v47;
    v45 = v48;
    v43 = v59;
    while (1)
    {
      v60(v45, v43, AssociatedTypeWitness);
      v64(v45, v61);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v44, v63);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    swift_release(v67);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v61, v51);
  }
}

uint64_t sub_1000BE044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(255, v6, v7, a4);
  v9 = type metadata accessor for Array(0, v8);
  Array.remove(at:)(v23, a1, v9);
  v10 = v23[0];
  v11 = v23[1];
  v12 = sub_10002A750((uint64_t *)&unk_1006415A0);
  v13 = swift_allocObject(v12, 40, 7);
  v14 = static Array._adoptStorage(_:count:)(v13, 1);
  *v15 = v10;
  v17 = type metadata accessor for TTRITreeViewNode(0, v6, v7, v16);
  v18 = type metadata accessor for Array(0, v17);
  v23[0] = v14;
  swift_retain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v18);
  sub_1000BE1A4((uint64_t)v23, a2, v18, WitnessTable);
  swift_bridgeObjectRelease(v14);
  v23[0] = v11;
  sub_1000BE1A4((uint64_t)v23, a2, v18, WitnessTable);
  v23[0] = a1;
  v20 = sub_10002A750(&qword_100644720);
  v21 = sub_100023FEC(&qword_100644728, &qword_100644720, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
  sub_10002408C((uint64_t)v23, -1, a2, v20, v21);
  return v10;
}

uint64_t sub_1000BE1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = a1;
  v7 = *(_QWORD *)(a2 + 24);
  v29 = *(_QWORD *)(a2 + 16);
  v30 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, v29, &unk_1005987EC, &unk_1005987FC);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v27 - v11;
  v13 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  v28 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v27, a3);
  dispatch thunk of Sequence.makeIterator()(a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, v16, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v20 = dispatch thunk of IteratorProtocol.next()(v16, AssociatedConformanceWitness);
  for (i = v32; v32; i = v32)
  {
    sub_100029148(v20);
    sub_1000BEB24((uint64_t)v12, i, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
    v31 = i;
    v23 = type metadata accessor for TTRITreeViewNode(255, v29, v30, v22);
    WitnessTable = swift_getWitnessTable(&unk_1005276C0, v23);
    v25 = type metadata accessor for Dictionary(0, v23, &type metadata for Int, WitnessTable);
    Dictionary.removeValue(forKey:)(&v32, &v31, v25);
    swift_release();
    v20 = dispatch thunk of IteratorProtocol.next()(v16, AssociatedConformanceWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v18, v16);
}

uint64_t sub_1000BE3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t WitnessTable;
  uint64_t v30;
  uint64_t v31;

  if (a1 == a2)
  {
    v7 = *v4;
    v8 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    Array.subscript.getter(&v30, a1, v7, v8);
    return v30;
  }
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(255, v11, v12, a4);
  v14 = type metadata accessor for Array(0, v13);
  Array.remove(at:)(&v30, a1, v14);
  v9 = v30;
  v15 = v31;
  swift_retain();
  swift_bridgeObjectRetain(v15);
  result = Array.insert(_:at:)(&v30, a2, v14);
  if (a1 < a2)
  {
    v17 = a1 + 1;
    v18 = -1;
    v19 = a2;
LABEL_8:
    v30 = v17;
    v31 = v19;
    v20 = sub_10002A750(&qword_100644738);
    v21 = sub_100023FEC(qword_100644740, &qword_100644738, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    sub_10002408C((uint64_t)&v30, v18, a3, v20, v21);
    v22 = sub_10002A750((uint64_t *)&unk_1006415A0);
    v23 = swift_allocObject(v22, 40, 7);
    v24 = static Array._adoptStorage(_:count:)(v23, 1);
    *v25 = v9;
    v27 = type metadata accessor for TTRITreeViewNode(0, v11, v12, v26);
    v28 = type metadata accessor for Array(0, v27);
    v30 = v24;
    swift_retain();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v28);
    sub_100028F08((uint64_t)&v30, a2, a3, v28, WitnessTable);
    swift_bridgeObjectRelease(v24);
    v30 = v15;
    sub_100028F08((uint64_t)&v30, a2, a3, v28, WitnessTable);
    return v9;
  }
  v19 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else if (v19 >= a2)
  {
    v18 = 1;
    v17 = a2;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BE5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v6 = IndexPath.section.getter(a1);
  v22 = a1;
  swift_bridgeObjectRetain(a1);
  v21 = IndexPath.row.getter(v7);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v11 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(255, v8, v9, v10);
  type metadata accessor for Array(0, v11);
  Array._makeMutableAndUnique()();
  sub_1000BFC10(v6, *v3, v11);
  v13 = type metadata accessor for TTRITreeViewNode(255, v8, v9, v12);
  v14 = type metadata accessor for Array(0, v13);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  v17 = RangeReplaceableCollection.insert<A>(contentsOf:at:)(&v22, &v21, v14, v14, WitnessTable, v16);
  v22 = a1;
  v18 = IndexPath.section.getter(v17);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  return sub_100028F08((uint64_t)&v22, v18, a3, v14, v19);
}

uint64_t sub_1000BE748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  v7 = IndexPath.row.getter(a1);
  result = IndexPath.row.getter(v7);
  v9 = __OFADD__(result, a2);
  v10 = result + a2;
  if (v9)
  {
    __break(1u);
  }
  else if (v10 >= v7)
  {
    v11 = IndexPath.section.getter(result);
    v12 = *v3;
    v13 = a3;
    v32 = a3;
    v14 = *(_QWORD *)(a3 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    v17 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, v14, v15, v16);
    Array.subscript.getter(&v33, v11, v12, v17);
    v18 = v34;
    v20 = type metadata accessor for TTRITreeViewNode(0, v14, v15, v19);
    v21 = Array.subscript.getter(v7, v10, v18, v20);
    v23 = v22;
    v30 = v25;
    v31 = v24;
    swift_bridgeObjectRelease(v18);
    swift_release();
    v33 = v7;
    v34 = v10;
    type metadata accessor for Array(0, v17);
    Array._makeMutableAndUnique()();
    sub_1000BFC10(v11, *v4, v17);
    v26 = type metadata accessor for Array(0, v20);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v26);
    RangeReplaceableCollection.removeSubrange(_:)(&v33, v26, WitnessTable);
    v33 = v21;
    v34 = v23;
    v35 = v31;
    v36 = v30;
    v28 = type metadata accessor for ArraySlice(0, v20);
    v29 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v28);
    sub_1000BE1A4((uint64_t)&v33, v32, v28, v29);
    return v21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BE900(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v7 = v6;
  v11 = *v7;
  v12 = *(_QWORD *)(a6 + 16);
  v13 = *(_QWORD *)(a6 + 24);
  v14 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, v12, v13, a4);
  Array.subscript.getter(&v36, a3, v11, v14);
  v15 = v37;
  v17 = type metadata accessor for TTRITreeViewNode(0, v12, v13, v16);
  v31 = Array.subscript.getter(a1, a2, v15, v17);
  v32 = v18;
  v20 = v19;
  v22 = v21;
  v30 = v21;
  swift_bridgeObjectRelease(v15);
  swift_release();
  v36 = a1;
  v37 = a2;
  type metadata accessor for Array(0, v14);
  Array._makeMutableAndUnique()();
  sub_1000BFC10(a3, *v7, v14);
  v23 = type metadata accessor for Array(0, v17);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
  RangeReplaceableCollection.removeSubrange(_:)(&v36, v23, WitnessTable);
  v36 = v31;
  v37 = v20;
  v38 = v32;
  v39 = v22;
  v35 = a5;
  swift_unknownObjectRetain(v31);
  Array._makeMutableAndUnique()();
  sub_1000BFC10(a4, *v7, v14);
  v25 = type metadata accessor for ArraySlice(0, v17);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v25);
  RangeReplaceableCollection.insert<A>(contentsOf:at:)(&v36, &v35, v23, v25, WitnessTable, v26);
  if (a3 != a4)
  {
    v36 = v31;
    v37 = v20;
    v38 = v32;
    v39 = v30;
    v27 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v25);
    sub_100028F08((uint64_t)&v36, a4, a6, v25, v27);
  }
  return v31;
}

uint64_t sub_1000BEB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v30)(_QWORD *, _QWORD, __n128);
  __n128 v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  uint64_t v38;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v7, &unk_1005987EC, &unk_1005987FC);
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = __chkstk_darwin(AssociatedTypeWitness);
  v34 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v33 = (char *)&v33 - v11;
  v12 = *(_QWORD *)(v3 + 8);
  v36 = v3 + 8;
  v14 = type metadata accessor for TTRITreeViewNode(255, v7, v6, v13);
  WitnessTable = swift_getWitnessTable(&unk_1005276C0, v14);
  v16 = type metadata accessor for Set(0, v14, WitnessTable);
  v17 = v7;
  v18 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v17, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
  Dictionary.subscript.getter(v37, a1, v12, AssociatedTypeWitness, v16, AssociatedConformanceWitness);
  v20 = v37[0];
  if (!v37[0])
    return 0;
  v37[0] = a2;
  if ((Set.contains(_:)(v37, v20, v14, WitnessTable) & 1) == 0)
  {
    swift_bridgeObjectRelease(v20);
    return 0;
  }
  v21 = Set.count.getter(v20, v14, WitnessTable);
  swift_bridgeObjectRelease(v20);
  if (v21 == 1)
  {
    v22 = type metadata accessor for Dictionary(0, AssociatedTypeWitness, v16, AssociatedConformanceWitness);
    Dictionary.removeValue(forKey:)(v37, v18, v22);
    swift_bridgeObjectRelease(v37[0]);
    return 1;
  }
  else
  {
    v24 = v35;
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
    v26 = v33;
    v25(v33, v18, AssociatedTypeWitness);
    v38 = a2;
    v27 = v34;
    v25(v34, (uint64_t)v26, AssociatedTypeWitness);
    v28 = type metadata accessor for Dictionary._Variant(0, AssociatedTypeWitness, v16, AssociatedConformanceWitness);
    result = Dictionary._Variant.subscript.modify(v37, v27, v28);
    if (*v29)
    {
      v30 = (void (*)(_QWORD *, _QWORD, __n128))result;
      Set.remove(_:)(&v38, v16);
      v31 = swift_release();
      v30(v37, 0, v31);
      v32 = *(void (**)(char *, uint64_t))(v24 + 8);
      v32(v27, AssociatedTypeWitness);
      v32(v26, AssociatedTypeWitness);
      return 1;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000BEDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a6, &unk_1005987EC, &unk_1005987FC);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)v22 - v12;
  (*(void (**)(uint64_t, uint64_t))(a7 + 24))(a6, a7);
  v15 = type metadata accessor for TTRITreeViewNode(255, a6, a7, v14);
  WitnessTable = swift_getWitnessTable(&unk_1005276C0, v15);
  v17 = type metadata accessor for Set(0, v15, WitnessTable);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a6, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
  Dictionary.subscript.getter(&v24, v13, a3, AssociatedTypeWitness, v17, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  v19 = v24;
  if (!v24)
    return 0;
  v22[1] = v24;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v17);
  Collection.first.getter(&v23, v17, v20);
  swift_bridgeObjectRelease(v19);
  return v23;
}

uint64_t sub_1000BEF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a6, &unk_1005987EC, &unk_1005987FC);
  v13 = type metadata accessor for TTRITreeViewNode(255, a6, a7, v12);
  WitnessTable = swift_getWitnessTable(&unk_1005276C0, v13);
  v15 = type metadata accessor for Set(0, v13, WitnessTable);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a6, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
  Dictionary.subscript.getter(&v21, a1, a3, AssociatedTypeWitness, v15, AssociatedConformanceWitness);
  v17 = v21;
  if (!v21)
    return 0;
  v18 = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v15);
  Collection.first.getter(&v20, v15, v18);
  swift_bridgeObjectRelease(v17);
  return v20;
}

uint64_t sub_1000BF050@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  char v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  char v32;

  v6 = a2;
  v9 = *a1;
  v10 = sub_1000BD8F4(a1, a2, a3, a4);
  if ((v12 & 1) != 0)
  {
LABEL_6:
    v19 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a5, 1, 1, v19);
  }
  v13 = v10;
  if ((v6 & 1) != 0)
  {
    sub_10019C8D4();
    v15 = v14;
    swift_release(v16);
    result = v15 - 1;
    if (__OFSUB__(v15, 1))
    {
      __break(1u);
      return result;
    }
    if ((result & 0x8000000000000000) == 0)
    {
      IndexPath.init(row:section:)(result, v13);
      v18 = type metadata accessor for IndexPath(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a5, 0, 1, v18);
    }
    goto LABEL_6;
  }
  v20 = *(_QWORD *)(v9 + 80);
  v21 = *(_QWORD *)(v9 + 88);
  v22 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, v20, v21, v11);
  Array.subscript.getter(v30, v13, a3, v22);
  swift_release(v30[0]);
  v29 = v30[1];
  v24 = type metadata accessor for TTRITreeViewNode(255, v20, v21, v23);
  v25 = type metadata accessor for Array(0, v24);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v25);
  Collection.firstIndex(where:)(&v31, sub_1000BFC00, a1, v25, WitnessTable);
  swift_bridgeObjectRelease(v29);
  if ((v32 & 1) != 0)
  {
    v27 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a5, 1, 1, v27);
  }
  else
  {
    IndexPath.init(row:section:)(v31, v13);
    v28 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a5, 0, 1, v28);
  }
}

void sub_1000BF224(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v12;
  uint64_t v13;

  v12 = (uint64_t *)sub_1000BEDB4(a1, a2, a3, a4, 0, a6, a7);
  if (v12)
  {
    sub_1000BF050(v12, a5 & 1, a2, a4, a8);
    swift_release();
  }
  else
  {
    v13 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a8, 1, 1, v13);
  }
}

uint64_t sub_1000BF2C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t *v6;

  result = sub_1000BDAC4(a1, a2, a3, a4);
  if (result)
  {
    v6 = (uint64_t *)result;
    swift_release();
    return v6 == a1;
  }
  return result;
}

void (*sub_1000BF2F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char a4@<W4>, _BYTE *a5@<X8>))(_BYTE *, _QWORD)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*result)(_BYTE *, _QWORD);
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  _QWORD *v24;
  _BYTE v25[32];

  v10 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for IndexPath(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((sub_1000BF2C0(a1, a2, v17, a3) & 1) != 0)
  {
    v20 = sub_1000BD8F4(a1, v18, v19, a3);
    if ((v21 & 1) != 0)
    {
      return (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(a5, 1, 1, v13);
    }
    else
    {
      IndexPath.init(row:section:)(0, v20);
      return (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a5, 0, 1, v13);
    }
  }
  else
  {
    sub_1000BF050(a1, a4 & 1, a2, a3, (uint64_t)v12);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_100052544((uint64_t)v12);
      return (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(a5, 1, 1, v13);
    }
    else
    {
      v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32);
      v23(v16, v12, v13);
      result = (void (*)(_BYTE *, _QWORD))IndexPath.row.modify(v25);
      if (__OFADD__(*v24, 1))
      {
        __break(1u);
      }
      else
      {
        ++*v24;
        result(v25, 0);
        v23(a5, v16, v13);
        return (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a5, 0, 1, v13);
      }
    }
  }
  return result;
}

uint64_t sub_1000BF500(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::String v23;
  void *object;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76[3];
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;

  v75 = *(_QWORD *)(a5 - 8);
  v9 = __chkstk_darwin(a1);
  v74 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = _swiftEmptyArrayStorage;
  v80 = (_QWORD *)v9;
  v14 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(255, v12, v13, v11);
  v15 = type metadata accessor for Array(0, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  Sequence.enumerated()(v78, v15, WitnessTable);
  v76[0] = v78[0];
  v17 = type metadata accessor for EnumeratedSequence(0, v15, WitnessTable);
  EnumeratedSequence.makeIterator()(&v80, v17);
  v73 = type metadata accessor for EnumeratedSequence.Iterator(0, v15, WitnessTable);
  EnumeratedSequence.Iterator.next()(v78);
  v18 = v78[1];
  if (v78[1])
  {
    v19 = v78[0];
    v20 = v79;
    if ((a4 & 1) != 0)
      v21 = 1702195828;
    else
      v21 = 0x65736C6166;
    v22 = 0xE500000000000000;
    if ((a4 & 1) != 0)
      v22 = 0xE400000000000000;
    v71 = (void *)v22;
    v72 = v21;
    v69 = 0x80000001005642F0;
    v70 = 0x80000001005642D0;
    do
    {
      v77 = v19;
      strcpy((char *)v78, "Section ");
      BYTE1(v78[1]) = 0;
      WORD1(v78[1]) = 0;
      HIDWORD(v78[1]) = -402653184;
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v23._object;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(object);
      v25 = v78[0];
      v26 = v78[1];
      v27 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
        v27 = sub_10001D840(0, v27[2] + 1, 1, v27);
      v29 = v27[2];
      v28 = v27[3];
      if (v29 >= v28 >> 1)
        v27 = sub_10001D840((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
      v27[2] = v29 + 1;
      v30 = &v27[2 * v29];
      v30[4] = v25;
      v30[5] = v26;
      v78[0] = 0;
      v78[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(v78[1]);
      v31 = v71;
      v78[0] = 0xD000000000000013;
      v78[1] = v70;
      v32._countAndFlagsBits = v72;
      v32._object = v71;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(v31);
      v33 = v78[0];
      v34 = v78[1];
      v36 = v27[2];
      v35 = v27[3];
      if (v36 >= v35 >> 1)
        v27 = sub_10001D840((_QWORD *)(v35 > 1), v36 + 1, 1, v27);
      v27[2] = v36 + 1;
      v37 = &v27[2 * v36];
      v37[4] = v33;
      v37[5] = v34;
      v81 = v27;
      strcpy((char *)v78, "\tRoot node: ");
      BYTE5(v78[1]) = 0;
      HIWORD(v78[1]) = -5120;
      v38 = v18 + *(_QWORD *)(*(_QWORD *)v18 + 144);
      v39 = swift_beginAccess(v38, v76, 0, 0);
      v41 = v74;
      v40 = v75;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v75 + 16))(v74, v38, a5, v39);
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a5, a6);
      v44 = v43;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, a5);
      v45._countAndFlagsBits = v42;
      v45._object = v44;
      String.append(_:)(v45);
      swift_bridgeObjectRelease(v44);
      v46 = v78[0];
      v47 = v78[1];
      v48 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
        v48 = sub_10001D840(0, v48[2] + 1, 1, v48);
      v51 = v48[2];
      v50 = v48[3];
      v52 = v50 >> 1;
      v53 = v51 + 1;
      if (v50 >> 1 <= v51)
      {
        v48 = sub_10001D840((_QWORD *)(v50 > 1), v51 + 1, 1, v48);
        v50 = v48[3];
        v52 = v50 >> 1;
      }
      v48[2] = v53;
      v54 = &v48[2 * v51];
      v54[4] = v46;
      v54[5] = v47;
      if (v52 < (uint64_t)(v51 + 2))
        v48 = sub_10001D840((_QWORD *)(v50 > 1), v51 + 2, 1, v48);
      v48[2] = v51 + 2;
      v55 = &v48[2 * v53];
      v55[4] = 0xD000000000000011;
      v55[5] = v69;
      v81 = v48;
      v77 = v20;
      v56 = type metadata accessor for TTRITreeViewNode(255, a5, a6, v49);
      v57 = type metadata accessor for Array(0, v56);
      v58 = swift_getWitnessTable(&protocol conformance descriptor for [A], v57);
      v59 = Sequence.enumerated()(v78, v57, v58);
      v77 = v78[0];
      __chkstk_darwin(v59);
      *(&v69 - 4) = a5;
      *(&v69 - 3) = a6;
      *(&v69 - 2) = (unint64_t)sub_1000BFFC4;
      *(&v69 - 1) = 0;
      v60 = type metadata accessor for EnumeratedSequence(0, v57, v58);
      v61 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v60);
      v63 = sub_1000BDB38((void (*)(char *, char *))sub_1000BFFC8, (uint64_t)(&v69 - 6), v60, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v61, (uint64_t)&protocol witness table for Never, v62);
      swift_bridgeObjectRelease(v77);
      sub_1004507EC(v63);
      swift_bridgeObjectRelease(v20);
      swift_release();
      EnumeratedSequence.Iterator.next()(v78);
      v19 = v78[0];
      v18 = v78[1];
      v20 = v79;
    }
    while (v78[1]);
  }
  swift_bridgeObjectRelease(v80);
  v64 = v81;
  v80 = v81;
  v65 = sub_10002A750(&qword_1006466D0);
  v66 = sub_100023FEC((unint64_t *)&qword_10064C980, &qword_1006466D0, (uint64_t)&protocol conformance descriptor for [A]);
  v67 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v65, v66);
  swift_bridgeObjectRelease(v64);
  return v67;
}

uint64_t sub_1000BFAB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v19[3];
  uint64_t v20;
  unint64_t v21;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 2313;
  v21 = 0xE200000000000000;
  v19[0] = v6;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 8238;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12 = (uint64_t)a2 + *(_QWORD *)(*a2 + 144);
  swift_beginAccess(v12, v19, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v12, v4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 88) + 32))(v4);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  return v20;
}

uint64_t sub_1000BFBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000BF500(*(_QWORD *)v3, a2, a3, *(_BYTE *)(v3 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

BOOL sub_1000BFC00(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == v1;
}

uint64_t sub_1000BFC10(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v6 = a2;
  if (*(_QWORD *)(v6 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1000BFC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  Swift::Bool IsNativeType;
  void (*v21)(char *, unint64_t, uint64_t);
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  Swift::Int v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1;
  v49 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v48 = (char *)&v41 - v10;
  v41 = v11;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v41 - v13;
  v16 = Array.count.getter(v12, v15);
  if (v16)
  {
    v17 = v16;
    type metadata accessor for _SetStorage(0, a2, a3);
    v18 = (_QWORD *)static _SetStorage.allocate(capacity:)(v17);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v44 = Array._getCount()();
  if (!v44)
    return (uint64_t)v18;
  v19 = 0;
  v47 = (char *)(v18 + 7);
  v42 = v14;
  v43 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v19, IsNativeType, v5, a2);
    if (IsNativeType)
    {
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
      v21(v14, v5+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v19, a2);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)(v19, v5, a2);
      if (v41 != 8)
        goto LABEL_23;
      v40 = result;
      v50 = result;
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
      v21(v14, (unint64_t)&v50, a2);
      swift_unknownObjectRelease(v40);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v18;
      }
    }
    v24 = v49;
    v45 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v46 = v23;
    v45(v48, v14, a2);
    v25 = dispatch thunk of Hashable._rawHashValue(seed:)(v18[5], a2, a3);
    v26 = -1 << *((_BYTE *)v18 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    v29 = *(_QWORD *)&v47[8 * (v27 >> 6)];
    v30 = 1 << v27;
    v31 = *(_QWORD *)(v24 + 72);
    if (((1 << v27) & v29) != 0)
    {
      v32 = ~v26;
      do
      {
        v21(v8, v18[6] + v31 * v27, a2);
        v33 = a3;
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v48, a2, *(_QWORD *)(a3 + 8));
        v35 = *(void (**)(char *, uint64_t))(v49 + 8);
        v35(v8, a2);
        if ((v34 & 1) != 0)
        {
          v35(v48, a2);
          a3 = v33;
          v14 = v42;
          v5 = v43;
          goto LABEL_7;
        }
        v27 = (v27 + 1) & v32;
        v28 = v27 >> 6;
        v29 = *(_QWORD *)&v47[8 * (v27 >> 6)];
        v30 = 1 << v27;
        a3 = v33;
      }
      while ((v29 & (1 << v27)) != 0);
      v14 = v42;
      v5 = v43;
    }
    v36 = v48;
    *(_QWORD *)&v47[8 * v28] = v30 | v29;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v18[6] + v31 * v27, v36, a2);
    v38 = v18[2];
    v22 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v22)
      break;
    v18[2] = v39;
LABEL_7:
    v19 = v46;
    if (v46 == v44)
      return (uint64_t)v18;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000BFF68(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;

  v2 = *v1;
  v3 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_1005276C0, *v1);
  return Set.contains(_:)(&v6, v3, v2, WitnessTable) & 1;
}

uint64_t sub_1000BFFC8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 32))(*a1, a1[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t *sub_1000C0008(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_1000C0064(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *TTRListSharingUtilities.excludedShareActivityTypes.unsafeMutableAddressor()
{
  if (qword_10063D380 != -1)
    swift_once(&qword_10063D380, sub_1000C0750);
  return &static TTRListSharingUtilities.excludedShareActivityTypes;
}

id sub_1000C00EC@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  id result;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    swift_bridgeObjectRelease(v7);
    result = (id)swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
  }
  *(_QWORD *)(a3 + 24) = sub_100005ED8(0, (unint64_t *)&unk_1006447F0, LPLinkMetadata_ptr);
  *(_QWORD *)a3 = a2;
  return a2;
}

id sub_1000C01CC(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(_QWORD *__return_ptr, uint64_t, id);
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;

  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, id))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(v14, a2, v6);
  swift_release();

  v7 = v15;
  if (!v15)
    return 0;
  v8 = sub_10001413C(v14, v15);
  v9 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v11, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
  sub_100027F10(v14);
  return v12;
}

id sub_1000C02C8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  id result;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    swift_bridgeObjectRelease(v7);
    result = (id)swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
  }
  *(_QWORD *)(a3 + 24) = sub_100005ED8(0, (unint64_t *)&unk_1006447F0, LPLinkMetadata_ptr);
  *(_QWORD *)a3 = a2;
  return a2;
}

id sub_1000C03A8(uint64_t a1, void *a2)
{
  void (*v3)(_QWORD *__return_ptr);
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD v12[3];
  uint64_t v13;

  v3 = *(void (**)(_QWORD *__return_ptr))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(v12);
  swift_release();

  v5 = v13;
  if (!v13)
    return 0;
  v6 = sub_10001413C(v12, v13);
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v9, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  sub_100027F10(v12);
  return v10;
}

uint64_t sub_1000C0498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_1005F0370, 32, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  aBlock[4] = sub_1000C10E4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006378;
  aBlock[3] = &unk_1005F0388;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100005E90();
  v18 = sub_10002A750((uint64_t *)&unk_100640F40);
  v19 = sub_10002D190();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return 0;
}

id sub_1000C067C(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(_QWORD, uint64_t);
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject(&unk_1005F0348, 24, 7);
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v5 = (void *)v2(sub_1000C10B8, v4);
  swift_release();
  swift_release();
  return v5;
}

void sub_1000C06F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

NSString sub_1000C0750()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString *v3;
  id v4;
  NSString *v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  NSString *v9;
  NSString result;

  v0 = sub_10002A750(&qword_1006447E8);
  v1 = swift_allocObject(v0, 96, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100523750;
  v2 = (void *)UIActivityTypeCreateReminder;
  *(_QWORD *)(v1 + 32) = UIActivityTypeAirDrop;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = UIActivityTypeAddToReadingList;
  *(_QWORD *)(v1 + 56) = UIActivityTypePostToFlickr;
  *(_QWORD *)(v1 + 64) = UIActivityTypePostToVimeo;
  *(_QWORD *)(v1 + 72) = UIActivityTypeCopyToPasteboard;
  *(_QWORD *)(v1 + 80) = UIActivityTypePrint;
  v3 = UIActivityTypeAirDrop;
  v4 = v2;
  v5 = UIActivityTypeAddToReadingList;
  v6 = UIActivityTypePostToFlickr;
  v7 = UIActivityTypePostToVimeo;
  v8 = UIActivityTypeCopyToPasteboard;
  v9 = UIActivityTypePrint;
  result = String._bridgeToObjectiveC()();
  *(_QWORD *)(v1 + 88) = result;
  static TTRListSharingUtilities.excludedShareActivityTypes = v1;
  return result;
}

double static TTRListSharingUtilities.excludedShareActivityTypes.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_10063D380 != -1)
    swift_once(&qword_10063D380, sub_1000C0750);
  swift_beginAccess(&static TTRListSharingUtilities.excludedShareActivityTypes, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static TTRListSharingUtilities.excludedShareActivityTypes).n128_u64[0];
  return result;
}

uint64_t static TTRListSharingUtilities.excludedShareActivityTypes.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_10063D380 != -1)
    swift_once(&qword_10063D380, sub_1000C0750);
  swift_beginAccess(&static TTRListSharingUtilities.excludedShareActivityTypes, v4, 1, 0);
  v2 = static TTRListSharingUtilities.excludedShareActivityTypes;
  static TTRListSharingUtilities.excludedShareActivityTypes = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static TTRListSharingUtilities.excludedShareActivityTypes.modify(uint64_t a1))(_QWORD)
{
  if (qword_10063D380 != -1)
    swift_once(&qword_10063D380, sub_1000C0750);
  swift_beginAccess(&static TTRListSharingUtilities.excludedShareActivityTypes, a1, 33, 0);
  return j__swift_endAccess;
}

id _s9Reminders23TTRListSharingUtilitiesC20imageForLinkMetadataSo7LPImageCvgZ_0()
{
  id v0;
  uint64_t v1;
  uint64_t ObjCClassFromMetadata;
  void *v3;
  id v4;
  id v5;
  _QWORD v7[6];

  v0 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  v1 = sub_100005ED8(0, (unint64_t *)&unk_100642D70, UIImage_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v1);
  v7[4] = sub_1000C0498;
  v7[5] = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000C067C;
  v7[3] = &unk_1005F0310;
  v3 = _Block_copy(v7);
  objc_msgSend(v0, "registerObjectOfClass:visibility:loadHandler:", ObjCClassFromMetadata, 0, v3);
  _Block_release(v3);
  v4 = objc_msgSend(objc_allocWithZone((Class)LPImageProperties), "init");
  objc_msgSend(v4, "setType:", 1);
  v5 = objc_msgSend(objc_allocWithZone((Class)LPImage), "initWithItemProvider:properties:placeholderImage:", v0, v4, 0);

  return v5;
}

id _s9Reminders23TTRListSharingUtilitiesC26activityItemsConfiguration3forSo010UIActivityfG0CSo7REMListC_tFZ_0(void *a1)
{
  id v2;
  id v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  Class isa;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void **v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v2 = _s9Reminders23TTRListSharingUtilitiesC17shareItemProvider3forSo06NSItemG0CSo7REMListC_tFZ_0(a1);
  v3 = objc_msgSend(objc_allocWithZone((Class)LPLinkMetadata), "init");
  v4 = objc_msgSend(a1, "displayName");
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v6 = v5;
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  objc_msgSend(v3, "setTitle:", v4);

  static TTRLocalizableStrings.Sharing.sharedListSummaryForShareSheet.getter();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v3, "setSummary:", v9);

  v10 = _s9Reminders23TTRListSharingUtilitiesC20imageForLinkMetadataSo7LPImageCvgZ_0();
  objc_msgSend(v3, "setImage:", v10);

  v11 = sub_10002A750((uint64_t *)&unk_1006415A0);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100521140;
  *(_QWORD *)(v12 + 32) = v2;
  v24 = (void **)v12;
  specialized Array._endMutation()(v12);
  v13 = objc_allocWithZone((Class)UIActivityItemsConfiguration);
  sub_100005ED8(0, &qword_100649EC0, NSItemProvider_ptr);
  v14 = v2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  v16 = objc_msgSend(v13, "initWithItemProviders:", isa);

  v17 = swift_allocObject(&unk_1005F03C0, 24, 7);
  *(_QWORD *)(v17 + 16) = v3;
  v28 = sub_1000C111C;
  v29 = v17;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_1000C01CC;
  v27 = &unk_1005F03D8;
  v18 = _Block_copy(&v24);
  v19 = v3;
  objc_msgSend(v16, "setPerItemMetadataProvider:", v18, swift_release().n128_f64[0]);
  _Block_release(v18);
  v20 = swift_allocObject(&unk_1005F0410, 24, 7);
  *(_QWORD *)(v20 + 16) = v19;
  v28 = sub_1000C1148;
  v29 = v20;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_1000C03A8;
  v27 = &unk_1005F0428;
  v21 = _Block_copy(&v24);
  v22 = v19;
  objc_msgSend(v16, "setMetadataProvider:", v21, swift_release().n128_f64[0]);
  _Block_release(v21);

  return v16;
}

id _s9Reminders23TTRListSharingUtilitiesC32shareSheetActivityViewController3for13popoverAnchorSo010UIActivityhI0CSo7REMListC_0A6UICore011TTRIPopoverL0VSgtFZ_0(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  Class isa;
  char v13;
  id v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _BYTE v23[24];
  _QWORD v24[5];
  uint64_t v25;
  _QWORD v26[5];
  int v27;
  _QWORD v28[5];
  char v29;

  sub_1000A25CC(a2, (uint64_t)v24);
  v4 = (void *)v24[0];
  v5 = v24[1];
  v6 = v24[2];
  v7 = v24[3];
  v9 = v24[4];
  v8 = v25;
  v22 = _s9Reminders23TTRListSharingUtilitiesC26activityItemsConfiguration3forSo010UIActivityfG0CSo7REMListC_tFZ_0(a1);
  v10 = objc_msgSend(objc_allocWithZone((Class)UIActivityViewController), "initWithActivityItemsConfiguration:", v22);
  if (qword_10063D380 != -1)
    swift_once(&qword_10063D380, sub_1000C0750);
  swift_beginAccess(&static TTRListSharingUtilities.excludedShareActivityTypes, v23, 0, 0);
  v11 = static TTRListSharingUtilities.excludedShareActivityTypes;
  type metadata accessor for ActivityType(0);
  swift_bridgeObjectRetain(v11);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v10, "setExcludedActivityTypes:", isa);

  sub_1000A25CC(a2, (uint64_t)v26);
  v13 = v27;
  if ((~(_BYTE)v27 & 0xFE) != 0)
  {
    v20 = v26[1];
    v21 = v26[0];
    v18 = v26[3];
    v19 = v26[2];
    v17 = v26[4];
    sub_1000A2644(v4, v5, v6, v7, v9, v8);
    v14 = objc_msgSend(v10, "popoverPresentationController");
    if (v14)
    {
      v15 = v14;
      v28[0] = v21;
      v28[1] = v20;
      v28[2] = v19;
      v28[3] = v18;
      v28[4] = v17;
      v29 = v13;
      sub_1000A2644(v4, v5, v6, v7, v9, v8);
      UIPopoverPresentationController.setPopoverAnchorSource(_:)(v28);

      sub_1000A2668(a2);
      sub_1000A2668(a2);

    }
    else
    {

      sub_1000A2668(a2);
    }
  }
  else
  {

  }
  return v10;
}

id _s9Reminders23TTRListSharingUtilitiesC8appImageSo7UIImageCSgvgZ_0()
{
  id v0;
  void *v1;
  id result;
  void *v3;
  double v4;
  id v5;
  void *v6;
  uint64_t v7;

  v0 = _s9Reminders23TTRListSharingUtilitiesC17remindersAppImageSo7IFImageCSgvgZ_0();
  if (v0)
  {
    v1 = v0;
    result = objc_msgSend(v0, "CGImage");
    if (result)
    {
      v3 = result;
      objc_msgSend(v1, "scale");
      v5 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v3, 0, v4);

      return v5;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_100005ED8(0, (unint64_t *)&unk_100642D70, UIImage_ptr);
    type metadata accessor for RemindersUICoreBundleLookupObject(0);
    v6 = (void *)static RemindersUICoreBundleLookupObject.bundle.getter();
    v7 = static UIImage.ttr_image(named:in:)(0xD000000000000017, 0x8000000100564310, v6);

    return (id)v7;
  }
  return result;
}

uint64_t sub_1000C1094()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C10B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000C06F8(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000C10C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C10E4()
{
  uint64_t v0;
  void (*v1)(id, _QWORD);
  id v2;

  v1 = *(void (**)(id, _QWORD))(v0 + 16);
  v2 = _s9Reminders23TTRListSharingUtilitiesC8appImageSo7UIImageCSgvgZ_0();
  v1(v2, 0);

}

id sub_1000C111C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000C00EC(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1000C1124()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000C1148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000C02C8(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1000C1164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100644800);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100644800);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000C11F4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t, double);
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD v33[2];
  _QWORD v34[5];

  v31 = a2;
  v32 = a3;
  v4 = type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10002A750((uint64_t *)&unk_100654F20);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v30 - v12);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v30 - v16;
  v18 = *a1;
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56);
  v19((char *)&v30 - v16, 1, 1, v4, v15);
  v20 = objc_msgSend(v18, "dragItem");
  v33[0] = 0xD000000000000022;
  v33[1] = 0x800000010055F610;
  AnyHashable.init<A>(_:)(v34, v33, &type metadata for String, &protocol witness table for String);
  UIDragItem.localObject<A>(ofType:forKey:)(v13, v4, v34, v4);

  sub_100041DDC((uint64_t)v34);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    sub_1000073A0((uint64_t)v13, (uint64_t *)&unk_100654F20);
  }
  else
  {
    sub_10001F580((uint64_t)v13, (uint64_t)v7, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
    if ((static UUID.== infix(_:_:)(v7, v31 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dragAndDropCoordinatorID) & 1) != 0)
    {
      sub_1000073A0((uint64_t)v17, (uint64_t *)&unk_100654F20);
      sub_10001F580((uint64_t)v7, (uint64_t)v17, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v19)(v17, 0, 1, v4);
    }
    else
    {
      sub_10001F544((uint64_t)v7, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
    }
  }
  v21 = objc_msgSend(v18, "dragItem");
  sub_10000735C((uint64_t)v17, (uint64_t)v10, (uint64_t *)&unk_100654F20);
  objc_msgSend(v18, "previewSize");
  v23 = v22;
  v25 = v24;
  sub_1000073A0((uint64_t)v17, (uint64_t *)&unk_100654F20);
  v26 = v32;
  *v32 = v21;
  v27 = type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.DropItem(0);
  result = sub_10000F614((uint64_t)v10, (uint64_t)v26 + *(int *)(v27 + 20), (uint64_t *)&unk_100654F20);
  v29 = (_QWORD *)((char *)v26 + *(int *)(v27 + 24));
  *v29 = v23;
  v29[1] = v25;
  return result;
}

_QWORD *sub_1000C14BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  void **v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = sub_10002A750((uint64_t *)&unk_100654F20);
  __chkstk_darwin(v1);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v36 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002A750((uint64_t *)&unk_100644920);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.LocalDropItem(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v40 = (uint64_t)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v35 = (uint64_t)&v33 - v13;
  v39 = type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.DropItem(0);
  v14 = *(_QWORD *)(v39 - 8);
  v15 = __chkstk_darwin(v39);
  v17 = (void **)((char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dropCoordinator), "items", v15);
  v19 = sub_10002A750((uint64_t *)&unk_100657420);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  swift_retain();
  v21 = sub_10036AD74(v20, v0);
  swift_bridgeObjectRelease(v20);
  swift_release();
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v23 = v21 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v38 = *(_QWORD *)(v14 + 72);
    v34 = v21;
    swift_bridgeObjectRetain(v21);
    v24 = _swiftEmptyArrayStorage;
    do
    {
      sub_10002B1E8(v23, (uint64_t)v17, type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.DropItem);
      sub_10000735C((uint64_t)v17 + *(int *)(v39 + 20), (uint64_t)v3, (uint64_t *)&unk_100654F20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v3, 1, v42) == 1)
      {
        sub_1000073A0((uint64_t)v3, (uint64_t *)&unk_100654F20);
        v25 = 1;
      }
      else
      {
        v26 = v36;
        v37 = v24;
        sub_10001F580((uint64_t)v3, v36, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
        v27 = *v17;
        sub_10002B1E8(v26, (uint64_t)v8 + *(int *)(v9 + 20), type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
        *v8 = v27;
        v28 = v27;
        v24 = v37;
        sub_10001F544(v26, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
        v25 = 0;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v25, 1, v9);
      sub_10001F544((uint64_t)v17, type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.DropItem);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_1000073A0((uint64_t)v8, (uint64_t *)&unk_100644920);
      }
      else
      {
        v29 = v35;
        sub_10001F580((uint64_t)v8, v35, type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.LocalDropItem);
        sub_10001F580(v29, v40, type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.LocalDropItem);
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v24 = (_QWORD *)sub_100455C78(0, v24[2] + 1, 1, (unint64_t)v24);
        v31 = v24[2];
        v30 = v24[3];
        if (v31 >= v30 >> 1)
          v24 = (_QWORD *)sub_100455C78(v30 > 1, v31 + 1, 1, (unint64_t)v24);
        v24[2] = v31 + 1;
        sub_10001F580(v40, (uint64_t)v24+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v31, type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.LocalDropItem);
      }
      v23 += v38;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v21);
    return _swiftEmptyArrayStorage;
  }
  return v24;
}

uint64_t sub_1000C1914@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int EnumCaseMultiPayload;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  os_log_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  void *v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t);
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  __n128 v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  os_log_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169[24];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v2 = v1;
  v168 = a1;
  v3 = sub_10002A750((uint64_t *)&unk_100644930);
  __chkstk_darwin(v3);
  v153 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_10002A750(&qword_10063F1A0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v147 = (uint64_t)&v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for Logger(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v146 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v7);
  v148 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v160 = (char *)&v142 - v10;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  v165 = v11;
  v166 = v12;
  __chkstk_darwin(v11);
  v144 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v157 = (char *)&v142 - v15;
  __chkstk_darwin(v16);
  v155 = (char *)&v142 - v17;
  v18 = sub_10002A750((uint64_t *)&unk_100644940);
  __chkstk_darwin(v18);
  v143 = (char *)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v161 = (uint64_t)&v142 - v21;
  v22 = sub_10002A750(&qword_10063F1A8);
  v162 = *(os_log_t *)(v22 - 8);
  v163 = v22;
  __chkstk_darwin(v22);
  v142 = (uint64_t)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v156 = (uint64_t)&v142 - v25;
  v26 = type metadata accessor for TTRICollectionViewInsertAtIndexPathOption(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v142 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for TTRUnadjustedIndexPath(0);
  __chkstk_darwin(v29);
  v154 = (char *)&v142 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v145 = (uint64_t)&v142 - v32;
  __chkstk_darwin(v33);
  v164 = (uint64_t)&v142 - v34;
  __chkstk_darwin(v35);
  v159 = (uint64_t)&v142 - v36;
  v37 = type metadata accessor for TTRAdjustedIndexPath(0);
  __chkstk_darwin(v37);
  v158 = (uint64_t)&v142 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for TTRICollectionViewDropIntent(0);
  __chkstk_darwin(v39);
  v41 = (char *)&v142 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_10002A750((uint64_t *)&unk_100644950);
  __chkstk_darwin(v42);
  v44 = (char *)&v142 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for TTRIRemindersBoardDropProposal(0);
  v46 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v48 = (uint64_t *)((char *)&v142 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  v167 = v2;
  sub_10000735C(v2 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_lastDropProposal, (uint64_t)v44, (uint64_t *)&unk_100644950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) == 1)
  {
    v49 = (uint64_t *)&unk_100644950;
    v50 = (uint64_t)v44;
LABEL_3:
    sub_1000073A0(v50, v49);
LABEL_4:
    v51 = sub_10002A750(&qword_100657410);
    v52 = v168;
LABEL_5:
    v53 = 3;
    return swift_storeEnumTagMultiPayload(v52, v51, v53);
  }
  sub_10001F580((uint64_t)v44, (uint64_t)v48, type metadata accessor for TTRIRemindersBoardDropProposal);
  sub_10002B1E8((uint64_t)v48 + *(int *)(v45 + 24), (uint64_t)v41, type metadata accessor for TTRICollectionViewDropIntent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v41, v39);
  v56 = (uint64_t)v48;
  if (!EnumCaseMultiPayload)
  {
    v89 = v158;
    sub_10001F580((uint64_t)v41, v158, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAdjustedIndexPath);
    v90 = (uint64_t)v48;
    v91 = *v48;
    v92 = v48[1];
    v93 = v48[2];
    v94 = v48[3];
    sub_10002B1E8(v89, (uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAdjustedIndexPath);
    swift_storeEnumTagMultiPayload(v28, v26, 0);
    swift_unknownObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v94);
    v95 = v159;
    sub_1004CCC64((uint64_t)v28, v92, v159);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v92);
    swift_unknownObjectRelease(v91);
    sub_10001F544((uint64_t)v28, type metadata accessor for TTRICollectionViewInsertAtIndexPathOption);
    v96 = *(_QWORD *)(v90 + 16);
    v172 = *(_QWORD *)(v90 + 8);
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRetain(v96);
    sub_10045050C(v96);
    v97 = v172;
    v98 = sub_10002A750((uint64_t *)&unk_100644960);
    v99 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    v100 = sub_100041E98();
    v101 = sub_1000175C8((unint64_t *)&qword_100644970, (uint64_t (*)(uint64_t))&type metadata accessor for TTRRemindersListViewModel.ItemID, (uint64_t)&protocol conformance descriptor for TTRRemindersListViewModel.ItemID);
    v102 = Sequence.mapToSet<A>(_:)(sub_1000410F0, 0, v98, v99, v100, v101);
    swift_bridgeObjectRelease(v97);
    v103 = v161;
    TTRBoardColumnDiffableDataSource.itemLocation(forInsertingAt:localItemIDsToBeMoved:)(v95, v102);
    swift_bridgeObjectRelease(v102);
    sub_10001F544(v95, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
    sub_10001F544(v89, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAdjustedIndexPath);
    sub_10001F544(v90, type metadata accessor for TTRIRemindersBoardDropProposal);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v162[6].isa)(v103, 1, v163) != 1)
    {
      v130 = v156;
      sub_10000F614(v103, v156, &qword_10063F1A8);
      v131 = v168;
      sub_10000F614(v130, v168, &qword_10063F1A8);
      v51 = sub_10002A750(&qword_100657410);
      v52 = v131;
      v53 = 0;
      return swift_storeEnumTagMultiPayload(v52, v51, v53);
    }
    v49 = (uint64_t *)&unk_100644940;
    v50 = v103;
    goto LABEL_3;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v104 = v167;
    v105 = *(void **)(v167 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dropCoordinator);
    v106 = objc_msgSend(v105, "proposal");
    v107 = objc_msgSend(v106, "operation");

    v108 = v166;
    if ((unint64_t)v107 < 2 || v107 == (id)3)
    {
      sub_10001F544((uint64_t)v48, type metadata accessor for TTRIRemindersBoardDropProposal);
      goto LABEL_4;
    }
    v109 = v168;
    v110 = v165;
    if (v107 != (id)2)
    {
      sub_10001F544((uint64_t)v48, type metadata accessor for TTRIRemindersBoardDropProposal);
LABEL_39:
      v51 = sub_10002A750(&qword_100657410);
      v52 = v109;
      goto LABEL_5;
    }
    v111 = objc_msgSend(v105, "destinationIndexPath");
    v112 = (uint64_t)v48;
    if (v111)
    {
      v113 = v111;
      v114 = v157;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v111);

      v115 = *(void (**)(char *, char *, uint64_t))(v108 + 32);
      v116 = v148;
      v115(v148, v114, v110);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v116, 0, 1, v110);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v116, 1, v110) != 1)
      {
        v117 = v144;
        v115(v144, v116, v110);
        v167 = *(_QWORD *)(v104 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_column);
        (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v114, v117, v110);
        v118 = (uint64_t)v154;
        TTRUnadjustedIndexPath.init(_:)(v114);
        v119 = *(_QWORD *)(v112 + 16);
        v172 = *(_QWORD *)(v112 + 8);
        swift_bridgeObjectRetain(v172);
        swift_bridgeObjectRetain(v119);
        v161 = v112;
        sub_10045050C(v120);
        v121 = v172;
        v122 = sub_10002A750((uint64_t *)&unk_100644960);
        v123 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
        v124 = sub_100041E98();
        v125 = sub_1000175C8((unint64_t *)&qword_100644970, (uint64_t (*)(uint64_t))&type metadata accessor for TTRRemindersListViewModel.ItemID, (uint64_t)&protocol conformance descriptor for TTRRemindersListViewModel.ItemID);
        v126 = Sequence.mapToSet<A>(_:)(sub_1000410F0, 0, v122, v123, v124, v125);
        swift_bridgeObjectRelease(v121);
        v127 = (uint64_t)v143;
        TTRBoardColumnDiffableDataSource.itemLocation(forInsertingAt:localItemIDsToBeMoved:)(v118, v126);
        swift_bridgeObjectRelease(v126);
        sub_10001F544(v118, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
        (*(void (**)(char *, uint64_t))(v108 + 8))(v117, v110);
        sub_10001F544(v161, type metadata accessor for TTRIRemindersBoardDropProposal);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v162[6].isa)(v127, 1, v163) != 1)
        {
          v141 = v142;
          sub_10000F614(v127, v142, &qword_10063F1A8);
          sub_10000F614(v141, v109, &qword_10063F1A8);
          v51 = sub_10002A750(&qword_100657410);
          v52 = v109;
          v53 = 2;
          return swift_storeEnumTagMultiPayload(v52, v51, v53);
        }
        v128 = (uint64_t *)&unk_100644940;
        v129 = v127;
        goto LABEL_38;
      }
    }
    else
    {
      v116 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v148, 1, 1, v110);
    }
    sub_10001F544(v112, type metadata accessor for TTRIRemindersBoardDropProposal);
    v128 = &qword_100646950;
    v129 = (uint64_t)v116;
LABEL_38:
    sub_1000073A0(v129, v128);
    goto LABEL_39;
  }
  v57 = v164;
  sub_10001F580((uint64_t)v41, v164, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
  v58 = objc_msgSend(*(id *)(v167 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dropCoordinator), "destinationIndexPath");
  v59 = v166;
  if (!v58)
  {
    v63 = (uint64_t)v160;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v166 + 56))(v160, 1, 1, v165);
    v66 = v168;
    goto LABEL_28;
  }
  v60 = v58;
  v61 = v157;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v58);

  v62 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  v63 = (uint64_t)v160;
  v64 = v165;
  v62(v160, v61, v165);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v63, 0, 1, v64);
  v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v63, 1, v64);
  v66 = v168;
  if (v65 == 1)
  {
LABEL_28:
    sub_10001F544(v57, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
    sub_10001F544(v56, type metadata accessor for TTRIRemindersBoardDropProposal);
    sub_1000073A0(v63, &qword_100646950);
    v51 = sub_10002A750(&qword_100657410);
    v52 = v66;
    goto LABEL_5;
  }
  v161 = v56;
  v67 = v63;
  v68 = v155;
  v62(v155, (char *)v67, v64);
  v69 = sub_1000175C8((unint64_t *)&qword_10063F648, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v68, v57, v64, v69) & 1) == 0)
  {
    if (qword_10063D388 != -1)
      swift_once(&qword_10063D388, sub_1000C1164);
    v70 = v150;
    v71 = sub_100012DC4(v150, (uint64_t)qword_100644800);
    v72 = v149;
    v73 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v146, v71, v70);
    v74 = v145;
    v75 = sub_10002B1E8(v164, v145, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter();
    LODWORD(v163) = v77;
    if (os_log_type_enabled(v76, v77))
    {
      v78 = swift_slowAlloc(22, -1);
      v79 = swift_slowAlloc(64, -1);
      v172 = v79;
      *(_DWORD *)v78 = 136315394;
      swift_beginAccess(v68, v169, 0, 0);
      v80 = sub_1000175C8((unint64_t *)&qword_100644910, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v162 = v76;
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v165, v80);
      v83 = v82;
      v170 = sub_100027E40(v81, v82, &v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease(v83);
      *(_WORD *)(v78 + 12) = 2080;
      v84 = dispatch thunk of CustomStringConvertible.description.getter(v165, v80);
      v86 = v85;
      v170 = sub_100027E40(v84, v85, &v172);
      v68 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &v171, v78 + 14, v78 + 22);
      swift_bridgeObjectRelease(v86);
      sub_10001F544(v74, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
      v87 = v162;
      _os_log_impl((void *)&_mh_execute_header, v162, (os_log_type_t)v163, "TTRIRemindersBoardDropCommitCoordinator: unexpected dropCoordinator.destinationIndexPath {given: %s, expected: %s}", (uint8_t *)v78, 0x16u);
      swift_arrayDestroy(v79, 2, &type metadata for Any[8]);
      swift_slowDealloc(v79, -1, -1);
      v88 = v78;
      v64 = v165;
      swift_slowDealloc(v88, -1, -1);

      (*(void (**)(char *, uint64_t))(v149 + 8))(v73, v150);
    }
    else
    {
      sub_10001F544(v74, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v70);
    }
    v61 = v157;
    v132 = swift_beginAccess(v68, &v172, 1, 0);
    v57 = v164;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v59 + 24))(v68, v164, v64, v132);
  }
  v133 = swift_beginAccess(v68, &v170, 0, 0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v59 + 16))(v61, v68, v64, v133);
  v134 = v61;
  v135 = (uint64_t)v154;
  TTRUnadjustedIndexPath.init(_:)(v134);
  v136 = (uint64_t)v153;
  TTRBoardColumnDiffableDataSource.itemLocation(forItemAt:)(v135);
  sub_10001F544(v135, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
  sub_10001F544(v57, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUnadjustedIndexPath);
  sub_10001F544(v161, type metadata accessor for TTRIRemindersBoardDropProposal);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v136, 1, v152) == 1)
  {
    sub_1000073A0(v136, (uint64_t *)&unk_100644930);
    v137 = sub_10002A750(&qword_100657410);
    v138 = v66;
    v139 = 3;
  }
  else
  {
    v140 = v147;
    sub_10000F614(v136, v147, &qword_10063F1A0);
    sub_10000F614(v140, v66, &qword_10063F1A0);
    v137 = sub_10002A750(&qword_100657410);
    v138 = v66;
    v139 = 1;
  }
  swift_storeEnumTagMultiPayload(v138, v137, v139);
  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v68, v64);
}

void sub_1000C2908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;

  v5 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000073A0((uint64_t)v10, &qword_100646950);
    if (qword_10063D388 != -1)
      swift_once(&qword_10063D388, sub_1000C1164);
    v15 = type metadata accessor for Logger(0);
    sub_100012DC4(v15, (uint64_t)qword_100644800);
    v16 = sub_10002B1E8(a2, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v27 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = TTRRemindersListViewModel.ItemID.description.getter(v20);
      v23 = v22;
      v26 = sub_100027E40(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      sub_10001F544((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "TTRIRemindersBoardDropCommitCoordinator: row for the given item doesn't exist. {itemID: %s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, &type metadata for Any[8]);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_10001F544((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v24 = *(void **)(v2 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dropCoordinator);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    swift_unknownObjectRelease(objc_msgSend(v24, "dropItem:toItemAtIndexPath:", a1, isa));

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

void sub_1000C2C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  Class isa;
  id v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  Class v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(*(_QWORD *)(v3 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_column)
                 + OBJC_IVAR____TtC9Reminders36TTRIBoardColumnDragAndDropController_collectionView);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(v10, "layoutAttributesForItemAtIndexPath:", isa);

  if (v12)
  {
    objc_msgSend(v12, "bounds");
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    v21 = *(void **)(v3 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dropCoordinator);
    v39 = IndexPath._bridgeToObjectiveC()().super.isa;
    v22.n128_u64[0] = v14;
    v23.n128_u64[0] = v16;
    v24.n128_u64[0] = v18;
    v25.n128_u64[0] = v20;
    v26 = CGRect.center.getter(v39, v22, v23, v24, v25);
    swift_unknownObjectRelease(objc_msgSend(v21, "dropItem:intoItemAtIndexPath:rect:", a1, v39, v26));

  }
  else
  {
    if (qword_10063D388 != -1)
      swift_once(&qword_10063D388, sub_1000C1164);
    v27 = type metadata accessor for Logger(0);
    sub_100012DC4(v27, (uint64_t)qword_100644800);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v41 = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = sub_1000175C8((unint64_t *)&qword_100644910, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v6, v33);
      v36 = v35;
      v40 = sub_100027E40(v34, v35, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v31 + 4, v31 + 12);
      v37 = swift_bridgeObjectRelease(v36);
      (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v37);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "TTRIRemindersBoardDropCommitCoordinator: layout attributes for the item doesn't exist. {indexPath: %s}", v31, 0xCu);
      swift_arrayDestroy(v32, 1, &type metadata for Any[8]);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

  }
}

void sub_1000C2F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  Class isa;
  uint64_t v34;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a3;
  v39 = a1;
  v5 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v5);
  v37 = (uint64_t)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v7);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)v35 - v11;
  v13 = type metadata accessor for IndexPath(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v36 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)v35 - v17;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(a2);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v19(v12, 1, v13) == 1)
  {
    v35[1] = v3;
    v20 = v39;
    sub_1000073A0((uint64_t)v12, &qword_100646950);
    v21 = v38;
    dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(v38);
    if (v19(v9, 1, v13) == 1)
    {
      sub_1000073A0((uint64_t)v9, &qword_100646950);
      if (qword_10063D388 != -1)
        swift_once(&qword_10063D388, sub_1000C1164);
      v22 = type metadata accessor for Logger(0);
      sub_100012DC4(v22, (uint64_t)qword_100644800);
      v23 = v37;
      v24 = sub_10002B1E8(v21, v37, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v41 = v28;
        *(_DWORD *)v27 = 136315138;
        v29 = TTRRemindersListViewModel.ItemID.description.getter(v28);
        v31 = v30;
        v40 = sub_100027E40(v29, v30, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease(v31);
        sub_10001F544(v23, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "TTRIRemindersBoardDropCommitCoordinator: row for the fallbackItemID doesn't exist. {itemID: %s}", v27, 0xCu);
        swift_arrayDestroy(v28, 1, &type metadata for Any[8]);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);
      }
      else
      {
        sub_10001F544(v23, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
      }

    }
    else
    {
      v34 = (uint64_t)v36;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v36, v9, v13);
      sub_1000C2C1C(v20, v34);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v34, v13);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
    v32 = *(void **)(v3 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dropCoordinator);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    swift_unknownObjectRelease(objc_msgSend(v32, "dropItem:toItemAtIndexPath:", v39, isa));

    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
}

uint64_t sub_1000C3300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dragAndDropCoordinatorID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_dropCoordinator));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_column));
  sub_1000073A0(v0 + OBJC_IVAR____TtC9Reminders39TTRIRemindersBoardDropCommitCoordinator_lastDropProposal, (uint64_t *)&unk_100644950);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000C3388()
{
  return type metadata accessor for TTRIRemindersBoardDropCommitCoordinator(0);
}

uint64_t type metadata accessor for TTRIRemindersBoardDropCommitCoordinator(uint64_t a1)
{
  return sub_100007328(a1, (uint64_t *)&unk_100644860, (uint64_t)&nominal type descriptor for TTRIRemindersBoardDropCommitCoordinator);
}

void sub_1000C33A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v6[2] = &unk_100523980;
    sub_100005494(319, (unint64_t *)&unk_100644870, type metadata accessor for TTRIRemindersBoardDropProposal);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.LocalDropItem(uint64_t a1)
{
  return sub_100007328(a1, qword_1006449E0, (uint64_t)&nominal type descriptor for TTRIRemindersBoardDropCommitCoordinator.LocalDropItem);
}

uint64_t type metadata accessor for TTRIRemindersBoardDropCommitCoordinator.DropItem(uint64_t a1)
{
  return sub_100007328(a1, (uint64_t *)&unk_100644A70, (uint64_t)&nominal type descriptor for TTRIRemindersBoardDropCommitCoordinator.DropItem);
}

void **sub_1000C3478(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  char *v11;
  int *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  void *v19;
  id v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(void **, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  void **v68;
  int v69;
  uint64_t v70;
  void *v71;
  id v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void **v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(void **, uint64_t, uint64_t);
  id v88;
  uint64_t v89;
  void *v90;
  id v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  void *v112;
  id v113;
  char *v115;
  char *v116;
  int *v117;
  uint64_t v118;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v4;
    v10(v7, v8, v9);
    v12 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
    v13 = v12[5];
    v14 = (void **)&v7[v13];
    v15 = (void **)&v8[v13];
    v16 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
    if (EnumCaseMultiPayload == 2)
    {
      v24 = *v15;
      *v14 = *v15;
      v25 = v24;
      v26 = v14;
      v27 = v16;
      v28 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v115 = v7;
      v117 = v12;
      v29 = *v15;
      *v14 = *v15;
      v30 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v31 = (void **)((char *)v14 + v30);
      v32 = (void **)((char *)v15 + v30);
      v33 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v34 + 48);
      v36 = v29;
      if (v35(v32, 1, v33))
      {
        v37 = sub_10002A750(&qword_100644980);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        v7 = v115;
        v12 = v117;
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v32, v33))
        {
          case 1u:
            v38 = *v32;
            *v31 = *v32;
            v39 = v38;
            v40 = v31;
            v41 = v33;
            v42 = 1;
            goto LABEL_32;
          case 2u:
            v52 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v31, v32, v52);
            v40 = v31;
            v41 = v33;
            v42 = 2;
            goto LABEL_32;
          case 3u:
            v53 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v31, v32, v53);
            v40 = v31;
            v41 = v33;
            v42 = 3;
            goto LABEL_32;
          case 4u:
            v54 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v31, v32, v54);
            v40 = v31;
            v41 = v33;
            v42 = 4;
            goto LABEL_32;
          case 5u:
            v55 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v31, v32, v55);
            v40 = v31;
            v41 = v33;
            v42 = 5;
            goto LABEL_32;
          case 6u:
            v56 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v31, v32, v56);
            v40 = v31;
            v41 = v33;
            v42 = 6;
            goto LABEL_32;
          case 8u:
            v58 = *v32;
            *v31 = *v32;
            v59 = v58;
            v40 = v31;
            v41 = v33;
            v42 = 8;
            goto LABEL_32;
          case 9u:
            v60 = *v32;
            *v31 = *v32;
            v61 = v60;
            v40 = v31;
            v41 = v33;
            v42 = 9;
LABEL_32:
            swift_storeEnumTagMultiPayload(v40, v41, v42);
            v57 = v34;
            break;
          default:
            v57 = v34;
            memcpy(v31, v32, *(_QWORD *)(v34 + 64));
            break;
        }
        v7 = v115;
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v57 + 56))(v31, 0, 1, v33);
        v12 = v117;
      }
      v26 = v14;
      v27 = v16;
      v28 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        goto LABEL_36;
      }
      v18 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v15, v18))
      {
        case 1u:
          v19 = *v15;
          *v14 = *v15;
          v20 = v19;
          v21 = v14;
          v22 = v18;
          v23 = 1;
          goto LABEL_22;
        case 2u:
          v43 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v14, v15, v43);
          v21 = v14;
          v22 = v18;
          v23 = 2;
          goto LABEL_22;
        case 3u:
          v44 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v14, v15, v44);
          v21 = v14;
          v22 = v18;
          v23 = 3;
          goto LABEL_22;
        case 4u:
          v45 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v14, v15, v45);
          v21 = v14;
          v22 = v18;
          v23 = 4;
          goto LABEL_22;
        case 5u:
          v46 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v14, v15, v46);
          v21 = v14;
          v22 = v18;
          v23 = 5;
          goto LABEL_22;
        case 6u:
          v47 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v14, v15, v47);
          v21 = v14;
          v22 = v18;
          v23 = 6;
          goto LABEL_22;
        case 8u:
          v48 = *v15;
          *v14 = *v15;
          v49 = v48;
          v21 = v14;
          v22 = v18;
          v23 = 8;
          goto LABEL_22;
        case 9u:
          v50 = *v15;
          *v14 = *v15;
          v51 = v50;
          v21 = v14;
          v22 = v18;
          v23 = 9;
LABEL_22:
          swift_storeEnumTagMultiPayload(v21, v22, v23);
          break;
        default:
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          break;
      }
      v26 = v14;
      v27 = v16;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
LABEL_36:
    v62 = v12[6];
    v63 = &v7[v62];
    v64 = &v8[v62];
    v65 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
    v66 = v12[7];
    v67 = (void **)&v7[v66];
    v68 = (void **)&v8[v66];
    v69 = swift_getEnumCaseMultiPayload(&v8[v66], v16);
    if (v69 == 2)
    {
      v76 = *v68;
      *v67 = *v68;
      v77 = v76;
      v78 = v67;
      v79 = v16;
      v80 = 2;
    }
    else if (v69 == 1)
    {
      v116 = v8;
      v118 = v16;
      v81 = *v68;
      *v67 = *v68;
      v82 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v83 = (void **)((char *)v67 + v82);
      v84 = (void **)((char *)v68 + v82);
      v85 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v86 = *(_QWORD *)(v85 - 8);
      v87 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v86 + 48);
      v88 = v81;
      if (v87(v84, 1, v85))
      {
        v89 = sub_10002A750(&qword_100644980);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        v8 = v116;
        v79 = v118;
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v84, v85))
        {
          case 1u:
            v90 = *v84;
            *v83 = *v84;
            v91 = v90;
            v92 = v83;
            v93 = v85;
            v94 = 1;
            goto LABEL_65;
          case 2u:
            v104 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v83, v84, v104);
            v92 = v83;
            v93 = v85;
            v94 = 2;
            goto LABEL_65;
          case 3u:
            v105 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v83, v84, v105);
            v92 = v83;
            v93 = v85;
            v94 = 3;
            goto LABEL_65;
          case 4u:
            v106 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v83, v84, v106);
            v92 = v83;
            v93 = v85;
            v94 = 4;
            goto LABEL_65;
          case 5u:
            v107 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v83, v84, v107);
            v92 = v83;
            v93 = v85;
            v94 = 5;
            goto LABEL_65;
          case 6u:
            v108 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v83, v84, v108);
            v92 = v83;
            v93 = v85;
            v94 = 6;
            goto LABEL_65;
          case 8u:
            v110 = *v84;
            *v83 = *v84;
            v111 = v110;
            v92 = v83;
            v93 = v85;
            v94 = 8;
            goto LABEL_65;
          case 9u:
            v112 = *v84;
            *v83 = *v84;
            v113 = v112;
            v92 = v83;
            v93 = v85;
            v94 = 9;
LABEL_65:
            swift_storeEnumTagMultiPayload(v92, v93, v94);
            v109 = v86;
            break;
          default:
            v109 = v86;
            memcpy(v83, v84, *(_QWORD *)(v86 + 64));
            break;
        }
        v8 = v116;
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v109 + 56))(v83, 0, 1, v85);
        v79 = v118;
      }
      v78 = v67;
      v80 = 1;
    }
    else
    {
      if (v69)
      {
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
LABEL_69:
        v7[v12[8]] = v8[v12[8]];
        return v5;
      }
      v70 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v68, v70))
      {
        case 1u:
          v71 = *v68;
          *v67 = *v68;
          v72 = v71;
          v73 = v67;
          v74 = v70;
          v75 = 1;
          goto LABEL_55;
        case 2u:
          v95 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v67, v68, v95);
          v73 = v67;
          v74 = v70;
          v75 = 2;
          goto LABEL_55;
        case 3u:
          v96 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v67, v68, v96);
          v73 = v67;
          v74 = v70;
          v75 = 3;
          goto LABEL_55;
        case 4u:
          v97 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v67, v68, v97);
          v73 = v67;
          v74 = v70;
          v75 = 4;
          goto LABEL_55;
        case 5u:
          v98 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v67, v68, v98);
          v73 = v67;
          v74 = v70;
          v75 = 5;
          goto LABEL_55;
        case 6u:
          v99 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v67, v68, v99);
          v73 = v67;
          v74 = v70;
          v75 = 6;
          goto LABEL_55;
        case 8u:
          v100 = *v68;
          *v67 = *v68;
          v101 = v100;
          v73 = v67;
          v74 = v70;
          v75 = 8;
          goto LABEL_55;
        case 9u:
          v102 = *v68;
          *v67 = *v68;
          v103 = v102;
          v73 = v67;
          v74 = v70;
          v75 = 9;
LABEL_55:
          swift_storeEnumTagMultiPayload(v73, v74, v75);
          break;
        default:
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          break;
      }
      v78 = v67;
      v79 = v16;
      v80 = 0;
    }
    swift_storeEnumTagMultiPayload(v78, v79, v80);
    goto LABEL_69;
  }
  v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  swift_retain();
  return v5;
}

void sub_1000C3DE8(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int *v6;
  id *v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v7 = (id *)&v4[v6[5]];
  v8 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v8);
  switch(EnumCaseMultiPayload)
  {
    case 2:
LABEL_8:

      break;
    case 1:

      v7 = (id *)((char *)v7 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v11 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v7, 1, v11))
      {
        switch(swift_getEnumCaseMultiPayload(v7, v11))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_8;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
LABEL_7:
            v12 = type metadata accessor for Date(0);
            (*(void (**)(id *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v7, v12);
            break;
          default:
            goto LABEL_9;
        }
      }
      break;
    case 0:
      v10 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v7, v10))
      {
        case 1u:
        case 8u:
        case 9u:
          goto LABEL_8;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          goto LABEL_7;
        default:
          goto LABEL_9;
      }
  }
LABEL_9:
  v13 = &v4[v6[6]];
  v14 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = (id *)&v4[v6[7]];
  v16 = swift_getEnumCaseMultiPayload(v15, v8);
  switch(v16)
  {
    case 2:
LABEL_17:

      break;
    case 1:

      v15 = (id *)((char *)v15 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
      v18 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v15, 1, v18))
      {
        switch(swift_getEnumCaseMultiPayload(v15, v18))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_17;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
LABEL_16:
            v19 = type metadata accessor for Date(0);
            (*(void (**)(id *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v15, v19);
            break;
          default:
            return;
        }
      }
      break;
    case 0:
      v17 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v15, v17))
      {
        case 1u:
        case 8u:
        case 9u:
          goto LABEL_17;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          goto LABEL_16;
        default:
          return;
      }
  }
}

void **sub_1000C408C(void **a1, void **a2, uint64_t a3)
{
  void **v3;
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  id v10;
  int *v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  void *v18;
  id v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(void **, uint64_t, uint64_t);
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  void **v67;
  int v68;
  uint64_t v69;
  void *v70;
  id v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void **v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(void **, uint64_t, uint64_t);
  id v87;
  uint64_t v88;
  void *v89;
  id v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v114;
  int *v115;
  void **v116;
  void **v117;

  v3 = a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  v11 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v12 = v11[5];
  v13 = (void **)&v6[v12];
  v14 = (void **)&v7[v12];
  v15 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
  if (EnumCaseMultiPayload == 2)
  {
    v23 = *v14;
    *v13 = *v14;
    v24 = v23;
    v25 = v13;
    v26 = v15;
    v27 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v114 = v15;
    v116 = v3;
    v28 = *v14;
    *v13 = *v14;
    v29 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
    v30 = (void **)((char *)v13 + v29);
    v31 = (void **)((char *)v14 + v29);
    v32 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v33 + 48);
    v35 = v28;
    if (v34(v31, 1, v32))
    {
      v36 = sub_10002A750(&qword_100644980);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v15 = v114;
      v3 = v116;
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload(v31, v32))
      {
        case 1u:
          v37 = *v31;
          *v30 = *v31;
          v38 = v37;
          v39 = v30;
          v40 = v32;
          v41 = 1;
          goto LABEL_30;
        case 2u:
          v51 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v30, v31, v51);
          v39 = v30;
          v40 = v32;
          v41 = 2;
          goto LABEL_30;
        case 3u:
          v52 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v30, v31, v52);
          v39 = v30;
          v40 = v32;
          v41 = 3;
          goto LABEL_30;
        case 4u:
          v53 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v30, v31, v53);
          v39 = v30;
          v40 = v32;
          v41 = 4;
          goto LABEL_30;
        case 5u:
          v54 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v30, v31, v54);
          v39 = v30;
          v40 = v32;
          v41 = 5;
          goto LABEL_30;
        case 6u:
          v55 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v30, v31, v55);
          v39 = v30;
          v40 = v32;
          v41 = 6;
          goto LABEL_30;
        case 8u:
          v57 = *v31;
          *v30 = *v31;
          v58 = v57;
          v39 = v30;
          v40 = v32;
          v41 = 8;
          goto LABEL_30;
        case 9u:
          v59 = *v31;
          *v30 = *v31;
          v60 = v59;
          v39 = v30;
          v40 = v32;
          v41 = 9;
LABEL_30:
          swift_storeEnumTagMultiPayload(v39, v40, v41);
          v56 = v33;
          break;
        default:
          v56 = v33;
          memcpy(v30, v31, *(_QWORD *)(v33 + 64));
          break;
      }
      v15 = v114;
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v56 + 56))(v30, 0, 1, v32);
      v3 = v116;
    }
    v25 = v13;
    v26 = v15;
    v27 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_34;
    }
    v17 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    switch(swift_getEnumCaseMultiPayload(v14, v17))
    {
      case 1u:
        v18 = *v14;
        *v13 = *v14;
        v19 = v18;
        v20 = v13;
        v21 = v17;
        v22 = 1;
        goto LABEL_20;
      case 2u:
        v42 = type metadata accessor for Date(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v13, v14, v42);
        v20 = v13;
        v21 = v17;
        v22 = 2;
        goto LABEL_20;
      case 3u:
        v43 = type metadata accessor for Date(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v13, v14, v43);
        v20 = v13;
        v21 = v17;
        v22 = 3;
        goto LABEL_20;
      case 4u:
        v44 = type metadata accessor for Date(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v13, v14, v44);
        v20 = v13;
        v21 = v17;
        v22 = 4;
        goto LABEL_20;
      case 5u:
        v45 = type metadata accessor for Date(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v13, v14, v45);
        v20 = v13;
        v21 = v17;
        v22 = 5;
        goto LABEL_20;
      case 6u:
        v46 = type metadata accessor for Date(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v13, v14, v46);
        v20 = v13;
        v21 = v17;
        v22 = 6;
        goto LABEL_20;
      case 8u:
        v47 = *v14;
        *v13 = *v14;
        v48 = v47;
        v20 = v13;
        v21 = v17;
        v22 = 8;
        goto LABEL_20;
      case 9u:
        v49 = *v14;
        *v13 = *v14;
        v50 = v49;
        v20 = v13;
        v21 = v17;
        v22 = 9;
LABEL_20:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        break;
      default:
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        break;
    }
    v25 = v13;
    v26 = v15;
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v25, v26, v27);
LABEL_34:
  v61 = v11[6];
  v62 = &v6[v61];
  v63 = &v7[v61];
  v64 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
  v65 = v11[7];
  v66 = (void **)&v6[v65];
  v67 = (void **)&v7[v65];
  v68 = swift_getEnumCaseMultiPayload(&v7[v65], v15);
  switch(v68)
  {
    case 2:
      v75 = *v67;
      *v66 = *v67;
      v76 = v75;
      v77 = v66;
      v78 = v15;
      v79 = 2;
LABEL_66:
      swift_storeEnumTagMultiPayload(v77, v78, v79);
      goto LABEL_67;
    case 1:
      v115 = v11;
      v117 = v3;
      v80 = *v67;
      *v66 = *v67;
      v81 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v82 = (void **)((char *)v66 + v81);
      v83 = (void **)((char *)v67 + v81);
      v84 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v85 = *(_QWORD *)(v84 - 8);
      v86 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v85 + 48);
      v87 = v80;
      if (v86(v83, 1, v84))
      {
        v88 = sub_10002A750(&qword_100644980);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        v11 = v115;
        v3 = v117;
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v83, v84))
        {
          case 1u:
            v89 = *v83;
            *v82 = *v83;
            v90 = v89;
            v91 = v82;
            v92 = v84;
            v93 = 1;
            goto LABEL_63;
          case 2u:
            v103 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v82, v83, v103);
            v91 = v82;
            v92 = v84;
            v93 = 2;
            goto LABEL_63;
          case 3u:
            v104 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v82, v83, v104);
            v91 = v82;
            v92 = v84;
            v93 = 3;
            goto LABEL_63;
          case 4u:
            v105 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v82, v83, v105);
            v91 = v82;
            v92 = v84;
            v93 = 4;
            goto LABEL_63;
          case 5u:
            v106 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v82, v83, v106);
            v91 = v82;
            v92 = v84;
            v93 = 5;
            goto LABEL_63;
          case 6u:
            v107 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v82, v83, v107);
            v91 = v82;
            v92 = v84;
            v93 = 6;
            goto LABEL_63;
          case 8u:
            v109 = *v83;
            *v82 = *v83;
            v110 = v109;
            v91 = v82;
            v92 = v84;
            v93 = 8;
            goto LABEL_63;
          case 9u:
            v111 = *v83;
            *v82 = *v83;
            v112 = v111;
            v91 = v82;
            v92 = v84;
            v93 = 9;
LABEL_63:
            swift_storeEnumTagMultiPayload(v91, v92, v93);
            v108 = v85;
            break;
          default:
            v108 = v85;
            memcpy(v82, v83, *(_QWORD *)(v85 + 64));
            break;
        }
        v3 = v117;
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v108 + 56))(v82, 0, 1, v84);
        v11 = v115;
      }
      v77 = v66;
      v78 = v15;
      v79 = 1;
      goto LABEL_66;
    case 0:
      v69 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v67, v69))
      {
        case 1u:
          v70 = *v67;
          *v66 = *v67;
          v71 = v70;
          v72 = v66;
          v73 = v69;
          v74 = 1;
          goto LABEL_53;
        case 2u:
          v94 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v66, v67, v94);
          v72 = v66;
          v73 = v69;
          v74 = 2;
          goto LABEL_53;
        case 3u:
          v95 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v66, v67, v95);
          v72 = v66;
          v73 = v69;
          v74 = 3;
          goto LABEL_53;
        case 4u:
          v96 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v66, v67, v96);
          v72 = v66;
          v73 = v69;
          v74 = 4;
          goto LABEL_53;
        case 5u:
          v97 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v66, v67, v97);
          v72 = v66;
          v73 = v69;
          v74 = 5;
          goto LABEL_53;
        case 6u:
          v98 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v66, v67, v98);
          v72 = v66;
          v73 = v69;
          v74 = 6;
          goto LABEL_53;
        case 8u:
          v99 = *v67;
          *v66 = *v67;
          v100 = v99;
          v72 = v66;
          v73 = v69;
          v74 = 8;
          goto LABEL_53;
        case 9u:
          v101 = *v67;
          *v66 = *v67;
          v102 = v101;
          v72 = v66;
          v73 = v69;
          v74 = 9;
LABEL_53:
          swift_storeEnumTagMultiPayload(v72, v73, v74);
          break;
        default:
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          break;
      }
      v77 = v66;
      v78 = v15;
      v79 = 0;
      goto LABEL_66;
  }
  memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_67:
  v6[v11[8]] = v7[v11[8]];
  return v3;
}

void **sub_1000C49D8(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  void *v21;
  id v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(void **, uint64_t, uint64_t);
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void **v42;
  id v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  void **v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  void *v75;
  id v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void **v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(void **, uint64_t, uint64_t);
  id v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void **v96;
  id v97;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  void *v117;
  id v118;
  char *v120;
  int *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v14 = (int *)v13;
  if (a1 != a2)
  {
    v15 = *(int *)(v13 + 20);
    v16 = (void **)&v10[v15];
    v17 = (void **)&v11[v15];
    sub_10001F544((uint64_t)&v10[v15], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v18 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v18);
    if (EnumCaseMultiPayload == 2)
    {
      v26 = *v17;
      *v16 = *v17;
      v27 = v26;
      v28 = v16;
      v29 = v18;
      v30 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v120 = v10;
      v121 = v14;
      v123 = v18;
      v31 = *v17;
      *v16 = *v17;
      v32 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v33 = (void **)((char *)v16 + v32);
      v34 = (void **)((char *)v17 + v32);
      v35 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v36 + 48);
      v38 = v31;
      if (v37(v34, 1, v35))
      {
        v39 = sub_10002A750(&qword_100644980);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        v14 = v121;
        v40 = v123;
        v10 = v120;
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v34, v35))
        {
          case 1u:
            v41 = *v34;
            v42 = v33;
            *v33 = *v34;
            v43 = v41;
            v44 = v33;
            v45 = v35;
            v46 = 1;
            goto LABEL_31;
          case 2u:
            v56 = type metadata accessor for Date(0);
            v42 = v33;
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v33, v34, v56);
            v44 = v33;
            v45 = v35;
            v46 = 2;
            goto LABEL_31;
          case 3u:
            v57 = type metadata accessor for Date(0);
            v42 = v33;
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v33, v34, v57);
            v44 = v33;
            v45 = v35;
            v46 = 3;
            goto LABEL_31;
          case 4u:
            v58 = type metadata accessor for Date(0);
            v42 = v33;
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v33, v34, v58);
            v44 = v33;
            v45 = v35;
            v46 = 4;
            goto LABEL_31;
          case 5u:
            v59 = type metadata accessor for Date(0);
            v42 = v33;
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v33, v34, v59);
            v44 = v33;
            v45 = v35;
            v46 = 5;
            goto LABEL_31;
          case 6u:
            v60 = type metadata accessor for Date(0);
            v42 = v33;
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v33, v34, v60);
            v44 = v33;
            v45 = v35;
            v46 = 6;
            goto LABEL_31;
          case 8u:
            v61 = *v34;
            v42 = v33;
            *v33 = *v34;
            v62 = v61;
            v44 = v33;
            v45 = v35;
            v46 = 8;
            goto LABEL_31;
          case 9u:
            v63 = *v34;
            v42 = v33;
            *v33 = *v34;
            v64 = v63;
            v44 = v33;
            v45 = v35;
            v46 = 9;
LABEL_31:
            swift_storeEnumTagMultiPayload(v44, v45, v46);
            break;
          default:
            v42 = v33;
            memcpy(v33, v34, *(_QWORD *)(v36 + 64));
            break;
        }
        v14 = v121;
        v40 = v123;
        v10 = v120;
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v36 + 56))(v42, 0, 1, v35);
      }
      v28 = v16;
      v29 = v40;
      v30 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        goto LABEL_35;
      }
      v20 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v17, v20))
      {
        case 1u:
          v21 = *v17;
          *v16 = *v17;
          v22 = v21;
          v23 = v16;
          v24 = v20;
          v25 = 1;
          goto LABEL_21;
        case 2u:
          v47 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v16, v17, v47);
          v23 = v16;
          v24 = v20;
          v25 = 2;
          goto LABEL_21;
        case 3u:
          v48 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v16, v17, v48);
          v23 = v16;
          v24 = v20;
          v25 = 3;
          goto LABEL_21;
        case 4u:
          v49 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v16, v17, v49);
          v23 = v16;
          v24 = v20;
          v25 = 4;
          goto LABEL_21;
        case 5u:
          v50 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v16, v17, v50);
          v23 = v16;
          v24 = v20;
          v25 = 5;
          goto LABEL_21;
        case 6u:
          v51 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v16, v17, v51);
          v23 = v16;
          v24 = v20;
          v25 = 6;
          goto LABEL_21;
        case 8u:
          v52 = *v17;
          *v16 = *v17;
          v53 = v52;
          v23 = v16;
          v24 = v20;
          v25 = 8;
          goto LABEL_21;
        case 9u:
          v54 = *v17;
          *v16 = *v17;
          v55 = v54;
          v23 = v16;
          v24 = v20;
          v25 = 9;
LABEL_21:
          swift_storeEnumTagMultiPayload(v23, v24, v25);
          break;
        default:
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
          break;
      }
      v28 = v16;
      v29 = v18;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
  }
LABEL_35:
  v65 = v14[6];
  v66 = &v10[v65];
  v67 = &v11[v65];
  v68 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
  if (a1 != a2)
  {
    v69 = v14[7];
    v70 = (void **)&v10[v69];
    v71 = (void **)&v11[v69];
    sub_10001F544((uint64_t)&v10[v69], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v72 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    v73 = swift_getEnumCaseMultiPayload(v71, v72);
    switch(v73)
    {
      case 2:
        v80 = *v71;
        *v70 = *v71;
        v81 = v80;
        v82 = v70;
        v83 = v72;
        v84 = 2;
LABEL_68:
        swift_storeEnumTagMultiPayload(v82, v83, v84);
        goto LABEL_69;
      case 1:
        v122 = v11;
        v124 = v72;
        v85 = *v71;
        *v70 = *v71;
        v86 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v87 = (void **)((char *)v70 + v86);
        v88 = (void **)((char *)v71 + v86);
        v89 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v90 = *(_QWORD *)(v89 - 8);
        v91 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v90 + 48);
        v92 = v85;
        if (v91(v88, 1, v89))
        {
          v93 = sub_10002A750(&qword_100644980);
          memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          v11 = v122;
          v94 = v124;
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v88, v89))
          {
            case 1u:
              v95 = *v88;
              v96 = v87;
              *v87 = *v88;
              v97 = v95;
              v98 = v87;
              v99 = v89;
              v100 = 1;
              goto LABEL_65;
            case 2u:
              v110 = type metadata accessor for Date(0);
              v96 = v87;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v87, v88, v110);
              v98 = v87;
              v99 = v89;
              v100 = 2;
              goto LABEL_65;
            case 3u:
              v111 = type metadata accessor for Date(0);
              v96 = v87;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v87, v88, v111);
              v98 = v87;
              v99 = v89;
              v100 = 3;
              goto LABEL_65;
            case 4u:
              v112 = type metadata accessor for Date(0);
              v96 = v87;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(v87, v88, v112);
              v98 = v87;
              v99 = v89;
              v100 = 4;
              goto LABEL_65;
            case 5u:
              v113 = type metadata accessor for Date(0);
              v96 = v87;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v87, v88, v113);
              v98 = v87;
              v99 = v89;
              v100 = 5;
              goto LABEL_65;
            case 6u:
              v114 = type metadata accessor for Date(0);
              v96 = v87;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v87, v88, v114);
              v98 = v87;
              v99 = v89;
              v100 = 6;
              goto LABEL_65;
            case 8u:
              v115 = *v88;
              v96 = v87;
              *v87 = *v88;
              v116 = v115;
              v98 = v87;
              v99 = v89;
              v100 = 8;
              goto LABEL_65;
            case 9u:
              v117 = *v88;
              v96 = v87;
              *v87 = *v88;
              v118 = v117;
              v98 = v87;
              v99 = v89;
              v100 = 9;
LABEL_65:
              swift_storeEnumTagMultiPayload(v98, v99, v100);
              break;
            default:
              v96 = v87;
              memcpy(v87, v88, *(_QWORD *)(v90 + 64));
              break;
          }
          v11 = v122;
          v94 = v124;
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v90 + 56))(v96, 0, 1, v89);
        }
        v82 = v70;
        v83 = v94;
        v84 = 1;
        goto LABEL_68;
      case 0:
        v74 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v71, v74))
        {
          case 1u:
            v75 = *v71;
            *v70 = *v71;
            v76 = v75;
            v77 = v70;
            v78 = v74;
            v79 = 1;
            goto LABEL_55;
          case 2u:
            v101 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v70, v71, v101);
            v77 = v70;
            v78 = v74;
            v79 = 2;
            goto LABEL_55;
          case 3u:
            v102 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v70, v71, v102);
            v77 = v70;
            v78 = v74;
            v79 = 3;
            goto LABEL_55;
          case 4u:
            v103 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v70, v71, v103);
            v77 = v70;
            v78 = v74;
            v79 = 4;
            goto LABEL_55;
          case 5u:
            v104 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v70, v71, v104);
            v77 = v70;
            v78 = v74;
            v79 = 5;
            goto LABEL_55;
          case 6u:
            v105 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v70, v71, v105);
            v77 = v70;
            v78 = v74;
            v79 = 6;
            goto LABEL_55;
          case 8u:
            v106 = *v71;
            *v70 = *v71;
            v107 = v106;
            v77 = v70;
            v78 = v74;
            v79 = 8;
            goto LABEL_55;
          case 9u:
            v108 = *v71;
            *v70 = *v71;
            v109 = v108;
            v77 = v70;
            v78 = v74;
            v79 = 9;
LABEL_55:
            swift_storeEnumTagMultiPayload(v77, v78, v79);
            break;
          default:
            memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
            break;
        }
        v82 = v70;
        v83 = v72;
        v84 = 0;
        goto LABEL_68;
    }
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
LABEL_69:
  v10[v14[8]] = v11[v14[8]];
  return a1;
}

_QWORD *sub_1000C53A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v9 = v8[5];
  v10 = &v5[v9];
  v11 = &v6[v9];
  v12 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v19 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
    v20 = &v10[v19];
    v21 = &v11[v19];
    v22 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_10002A750(&qword_100644980);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload(v21, v22))
      {
        case 2u:
          v25 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v20, v21, v25);
          v26 = v20;
          v27 = v22;
          v28 = 2;
          goto LABEL_22;
        case 3u:
          v36 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v20, v21, v36);
          v26 = v20;
          v27 = v22;
          v28 = 3;
          goto LABEL_22;
        case 4u:
          v37 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v20, v21, v37);
          v26 = v20;
          v27 = v22;
          v28 = 4;
          goto LABEL_22;
        case 5u:
          v38 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v20, v21, v38);
          v26 = v20;
          v27 = v22;
          v28 = 5;
          goto LABEL_22;
        case 6u:
          v39 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v20, v21, v39);
          v26 = v20;
          v27 = v22;
          v28 = 6;
LABEL_22:
          swift_storeEnumTagMultiPayload(v26, v27, v28);
          break;
        default:
          memcpy(v20, v21, *(_QWORD *)(v23 + 64));
          break;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v33 = v10;
    v34 = v12;
    v35 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      goto LABEL_26;
    }
    v14 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    switch(swift_getEnumCaseMultiPayload(v11, v14))
    {
      case 2u:
        v15 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
        v16 = v10;
        v17 = v14;
        v18 = 2;
        goto LABEL_15;
      case 3u:
        v29 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v10, v11, v29);
        v16 = v10;
        v17 = v14;
        v18 = 3;
        goto LABEL_15;
      case 4u:
        v30 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v10, v11, v30);
        v16 = v10;
        v17 = v14;
        v18 = 4;
        goto LABEL_15;
      case 5u:
        v31 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v10, v11, v31);
        v16 = v10;
        v17 = v14;
        v18 = 5;
        goto LABEL_15;
      case 6u:
        v32 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v10, v11, v32);
        v16 = v10;
        v17 = v14;
        v18 = 6;
LABEL_15:
        swift_storeEnumTagMultiPayload(v16, v17, v18);
        break;
      default:
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        break;
    }
    v33 = v10;
    v34 = v12;
    v35 = 0;
  }
  swift_storeEnumTagMultiPayload(v33, v34, v35);
LABEL_26:
  v40 = v8[6];
  v41 = &v5[v40];
  v42 = &v6[v40];
  v43 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  v44 = v8[7];
  v45 = &v5[v44];
  v46 = &v6[v44];
  v47 = swift_getEnumCaseMultiPayload(&v6[v44], v12);
  if (v47 == 1)
  {
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v53 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
    v54 = &v45[v53];
    v55 = &v46[v53];
    v56 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      v58 = sub_10002A750(&qword_100644980);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload(v55, v56))
      {
        case 2u:
          v59 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v54, v55, v59);
          v60 = v54;
          v61 = v56;
          v62 = 2;
          goto LABEL_47;
        case 3u:
          v70 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v54, v55, v70);
          v60 = v54;
          v61 = v56;
          v62 = 3;
          goto LABEL_47;
        case 4u:
          v71 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v54, v55, v71);
          v60 = v54;
          v61 = v56;
          v62 = 4;
          goto LABEL_47;
        case 5u:
          v72 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v54, v55, v72);
          v60 = v54;
          v61 = v56;
          v62 = 5;
          goto LABEL_47;
        case 6u:
          v73 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v54, v55, v73);
          v60 = v54;
          v61 = v56;
          v62 = 6;
LABEL_47:
          swift_storeEnumTagMultiPayload(v60, v61, v62);
          break;
        default:
          memcpy(v54, v55, *(_QWORD *)(v57 + 64));
          break;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    v67 = v45;
    v68 = v12;
    v69 = 1;
    goto LABEL_50;
  }
  if (!v47)
  {
    v48 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
    switch(swift_getEnumCaseMultiPayload(v46, v48))
    {
      case 2u:
        v49 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v45, v46, v49);
        v50 = v45;
        v51 = v48;
        v52 = 2;
        goto LABEL_40;
      case 3u:
        v63 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v45, v46, v63);
        v50 = v45;
        v51 = v48;
        v52 = 3;
        goto LABEL_40;
      case 4u:
        v64 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v45, v46, v64);
        v50 = v45;
        v51 = v48;
        v52 = 4;
        goto LABEL_40;
      case 5u:
        v65 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v45, v46, v65);
        v50 = v45;
        v51 = v48;
        v52 = 5;
        goto LABEL_40;
      case 6u:
        v66 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v45, v46, v66);
        v50 = v45;
        v51 = v48;
        v52 = 6;
LABEL_40:
        swift_storeEnumTagMultiPayload(v50, v51, v52);
        break;
      default:
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        break;
    }
    v67 = v45;
    v68 = v12;
    v69 = 0;
LABEL_50:
    swift_storeEnumTagMultiPayload(v67, v68, v69);
    goto LABEL_51;
  }
  memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_51:
  v5[v8[8]] = v6[v8[8]];
  return a1;
}

void **sub_1000C5B14(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v12 = (int *)v11;
  if (a1 != a2)
  {
    v13 = *(int *)(v11 + 20);
    v14 = &v8[v13];
    v15 = &v9[v13];
    sub_10001F544((uint64_t)&v8[v13], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v16 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
    if (EnumCaseMultiPayload == 1)
    {
      v82 = v16;
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v23 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v24 = &v14[v23];
      v25 = &v15[v23];
      v26 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = sub_10002A750(&qword_100644980);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        v29 = v82;
      }
      else
      {
        v81 = v27;
        v29 = v82;
        switch(swift_getEnumCaseMultiPayload(v25, v26))
        {
          case 2u:
            v30 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v24, v25, v30);
            v31 = v24;
            v32 = v26;
            v33 = 2;
            goto LABEL_23;
          case 3u:
            v41 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v24, v25, v41);
            v31 = v24;
            v32 = v26;
            v33 = 3;
            goto LABEL_23;
          case 4u:
            v42 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v24, v25, v42);
            v31 = v24;
            v32 = v26;
            v33 = 4;
            goto LABEL_23;
          case 5u:
            v43 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v24, v25, v43);
            v31 = v24;
            v32 = v26;
            v33 = 5;
            goto LABEL_23;
          case 6u:
            v44 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v24, v25, v44);
            v31 = v24;
            v32 = v26;
            v33 = 6;
LABEL_23:
            swift_storeEnumTagMultiPayload(v31, v32, v33);
            break;
          default:
            memcpy(v24, v25, *(_QWORD *)(v81 + 64));
            v29 = v82;
            break;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v24, 0, 1, v26);
      }
      v38 = v14;
      v39 = v29;
      v40 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        goto LABEL_27;
      }
      v18 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v15, v18))
      {
        case 2u:
          v19 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v14, v15, v19);
          v20 = v14;
          v21 = v18;
          v22 = 2;
          goto LABEL_16;
        case 3u:
          v34 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v14, v15, v34);
          v20 = v14;
          v21 = v18;
          v22 = 3;
          goto LABEL_16;
        case 4u:
          v35 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v14, v15, v35);
          v20 = v14;
          v21 = v18;
          v22 = 4;
          goto LABEL_16;
        case 5u:
          v36 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v14, v15, v36);
          v20 = v14;
          v21 = v18;
          v22 = 5;
          goto LABEL_16;
        case 6u:
          v37 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v14, v15, v37);
          v20 = v14;
          v21 = v18;
          v22 = 6;
LABEL_16:
          swift_storeEnumTagMultiPayload(v20, v21, v22);
          break;
        default:
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          break;
      }
      v38 = v14;
      v39 = v16;
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v39, v40);
  }
LABEL_27:
  v45 = v12[6];
  v46 = &v8[v45];
  v47 = &v9[v45];
  v48 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  if (a1 != a2)
  {
    v49 = v12[7];
    v50 = &v8[v49];
    v51 = &v9[v49];
    sub_10001F544((uint64_t)&v8[v49], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v52 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    v53 = swift_getEnumCaseMultiPayload(v51, v52);
    if (v53 == 1)
    {
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v59 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v60 = &v50[v59];
      v61 = &v51[v59];
      v62 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
      {
        v64 = sub_10002A750(&qword_100644980);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v61, v62))
        {
          case 2u:
            v65 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v60, v61, v65);
            v66 = v60;
            v67 = v62;
            v68 = 2;
            goto LABEL_49;
          case 3u:
            v76 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v60, v61, v76);
            v66 = v60;
            v67 = v62;
            v68 = 3;
            goto LABEL_49;
          case 4u:
            v77 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v60, v61, v77);
            v66 = v60;
            v67 = v62;
            v68 = 4;
            goto LABEL_49;
          case 5u:
            v78 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v60, v61, v78);
            v66 = v60;
            v67 = v62;
            v68 = 5;
            goto LABEL_49;
          case 6u:
            v79 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v60, v61, v79);
            v66 = v60;
            v67 = v62;
            v68 = 6;
LABEL_49:
            swift_storeEnumTagMultiPayload(v66, v67, v68);
            break;
          default:
            memcpy(v60, v61, *(_QWORD *)(v63 + 64));
            break;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      }
      v73 = v50;
      v74 = v52;
      v75 = 1;
      goto LABEL_52;
    }
    if (!v53)
    {
      v54 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v51, v54))
      {
        case 2u:
          v55 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v50, v51, v55);
          v56 = v50;
          v57 = v54;
          v58 = 2;
          goto LABEL_42;
        case 3u:
          v69 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v50, v51, v69);
          v56 = v50;
          v57 = v54;
          v58 = 3;
          goto LABEL_42;
        case 4u:
          v70 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v50, v51, v70);
          v56 = v50;
          v57 = v54;
          v58 = 4;
          goto LABEL_42;
        case 5u:
          v71 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v50, v51, v71);
          v56 = v50;
          v57 = v54;
          v58 = 5;
          goto LABEL_42;
        case 6u:
          v72 = type metadata accessor for Date(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v50, v51, v72);
          v56 = v50;
          v57 = v54;
          v58 = 6;
LABEL_42:
          swift_storeEnumTagMultiPayload(v56, v57, v58);
          break;
        default:
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
          break;
      }
      v73 = v50;
      v74 = v52;
      v75 = 0;
LABEL_52:
      swift_storeEnumTagMultiPayload(v73, v74, v75);
      goto LABEL_53;
    }
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
LABEL_53:
  v8[v12[8]] = v9[v12[8]];
  return a1;
}

uint64_t sub_1000C62F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C62FC);
}

uint64_t sub_1000C62FC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1000C6378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6384);
}

char *sub_1000C6384(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C63F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for TTRIRemindersBoardDragItemUserInfo(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void **sub_1000C6470(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  void *v23;
  id v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(void **, uint64_t, uint64_t);
  id v39;
  uint64_t v40;
  void **v41;
  void *v42;
  id v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  void **v73;
  int v74;
  uint64_t v75;
  void *v76;
  id v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(void **, uint64_t, uint64_t);
  id v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  void *v93;
  id v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  void **v126;
  void **v127;
  void **__dst;
  void **__dsta;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    v14 = v4;
    if (v13(v10, 1, v11))
    {
      v15 = sub_10002A750((uint64_t *)&unk_100654F20);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_73:
      *(_OWORD *)((char *)v7 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
      return v7;
    }
    v132 = v12;
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v10, v16);
    v17 = v11[5];
    v18 = (void **)&v9[v17];
    v19 = (void **)&v10[v17];
    v20 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v20);
    if (EnumCaseMultiPayload == 2)
    {
      v28 = *v19;
      *v18 = *v19;
      v29 = v28;
      v30 = v18;
      v31 = v20;
      v32 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v124 = v9;
      v130 = v20;
      v33 = *v19;
      *v18 = *v19;
      v34 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v126 = v18;
      __dst = (void **)((char *)v18 + v34);
      v35 = (void **)((char *)v19 + v34);
      v36 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v37 + 48);
      v39 = v33;
      if (v38(v35, 1, v36))
      {
        v40 = sub_10002A750(&qword_100644980);
        memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v20 = v130;
        v9 = v124;
        v41 = v126;
      }
      else
      {
        v122 = v37;
        v20 = v130;
        switch(swift_getEnumCaseMultiPayload(v35, v36))
        {
          case 1u:
            v42 = *v35;
            *__dst = *v35;
            v43 = v42;
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 1;
            goto LABEL_34;
          case 2u:
            v57 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(__dst, v35, v57);
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 2;
            goto LABEL_34;
          case 3u:
            v58 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(__dst, v35, v58);
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 3;
            goto LABEL_34;
          case 4u:
            v59 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(__dst, v35, v59);
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 4;
            goto LABEL_34;
          case 5u:
            v66 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(__dst, v35, v66);
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 5;
            goto LABEL_34;
          case 6u:
            v60 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(__dst, v35, v60);
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 6;
            goto LABEL_34;
          case 8u:
            v62 = *v35;
            *__dst = *v35;
            v63 = v62;
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 8;
            goto LABEL_34;
          case 9u:
            v64 = *v35;
            *__dst = *v35;
            v65 = v64;
            v44 = __dst;
            v45 = v36;
            v46 = v36;
            v47 = 9;
LABEL_34:
            swift_storeEnumTagMultiPayload(v44, v46, v47);
            v41 = v126;
            v61 = v122;
            break;
          default:
            memcpy(__dst, v35, *(_QWORD *)(v37 + 64));
            v61 = v37;
            v45 = v36;
            v41 = v126;
            break;
        }
        v9 = v124;
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v45);
      }
      v30 = v41;
      v31 = v20;
      v32 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        goto LABEL_38;
      }
      v22 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v19, v22))
      {
        case 1u:
          v23 = *v19;
          *v18 = *v19;
          v24 = v23;
          v25 = v18;
          v26 = v22;
          v27 = 1;
          goto LABEL_24;
        case 2u:
          v48 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v18, v19, v48);
          v25 = v18;
          v26 = v22;
          v27 = 2;
          goto LABEL_24;
        case 3u:
          v49 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v18, v19, v49);
          v25 = v18;
          v26 = v22;
          v27 = 3;
          goto LABEL_24;
        case 4u:
          v50 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v18, v19, v50);
          v25 = v18;
          v26 = v22;
          v27 = 4;
          goto LABEL_24;
        case 5u:
          v51 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v18, v19, v51);
          v25 = v18;
          v26 = v22;
          v27 = 5;
          goto LABEL_24;
        case 6u:
          v52 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v18, v19, v52);
          v25 = v18;
          v26 = v22;
          v27 = 6;
          goto LABEL_24;
        case 8u:
          v53 = *v19;
          *v18 = *v19;
          v54 = v53;
          v25 = v18;
          v26 = v22;
          v27 = 8;
          goto LABEL_24;
        case 9u:
          v55 = *v19;
          *v18 = *v19;
          v56 = v55;
          v25 = v18;
          v26 = v22;
          v27 = 9;
LABEL_24:
          swift_storeEnumTagMultiPayload(v25, v26, v27);
          break;
        default:
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
          break;
      }
      v30 = v18;
      v31 = v20;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
LABEL_38:
    v67 = v11[6];
    v68 = &v9[v67];
    v69 = &v10[v67];
    v70 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
    v71 = v11[7];
    v72 = (void **)&v9[v71];
    v73 = (void **)&v10[v71];
    v74 = swift_getEnumCaseMultiPayload(&v10[v71], v20);
    switch(v74)
    {
      case 2:
        v81 = *v73;
        *v72 = *v73;
        v82 = v81;
        swift_storeEnumTagMultiPayload(v72, v20, 2);
        break;
      case 1:
        v125 = v10;
        v131 = v20;
        v83 = *v73;
        *v72 = *v73;
        v84 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v127 = v72;
        __dsta = (void **)((char *)v72 + v84);
        v85 = (void **)((char *)v73 + v84);
        v86 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v87 = *(_QWORD *)(v86 - 8);
        v88 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v87 + 48);
        v89 = v83;
        if (v88(v85, 1, v86))
        {
          v90 = sub_10002A750(&qword_100644980);
          memcpy(__dsta, v85, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
          v91 = v132;
          v10 = v125;
          v92 = v127;
        }
        else
        {
          v123 = v87;
          v91 = v132;
          switch(swift_getEnumCaseMultiPayload(v85, v86))
          {
            case 1u:
              v93 = *v85;
              *__dsta = *v85;
              v94 = v93;
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 1;
              goto LABEL_68;
            case 2u:
              v111 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(__dsta, v85, v111);
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 2;
              goto LABEL_68;
            case 3u:
              v112 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(__dsta, v85, v112);
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 3;
              goto LABEL_68;
            case 4u:
              v113 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(__dsta, v85, v113);
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 4;
              goto LABEL_68;
            case 5u:
              v120 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(__dsta, v85, v120);
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 5;
              goto LABEL_68;
            case 6u:
              v114 = type metadata accessor for Date(0);
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(__dsta, v85, v114);
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 6;
              goto LABEL_68;
            case 8u:
              v116 = *v85;
              *__dsta = *v85;
              v117 = v116;
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 8;
              goto LABEL_68;
            case 9u:
              v118 = *v85;
              *__dsta = *v85;
              v119 = v118;
              v95 = __dsta;
              v96 = v86;
              v97 = v86;
              v98 = 9;
LABEL_68:
              swift_storeEnumTagMultiPayload(v95, v97, v98);
              v92 = v127;
              v115 = v123;
              break;
            default:
              memcpy(__dsta, v85, *(_QWORD *)(v87 + 64));
              v115 = v87;
              v96 = v86;
              v92 = v127;
              break;
          }
          v10 = v125;
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v115 + 56))(__dsta, 0, 1, v96);
        }
        v109 = v92;
        v108 = v131;
        v110 = 1;
        goto LABEL_71;
      case 0:
        v75 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v73, v75))
        {
          case 1u:
            v76 = *v73;
            *v72 = *v73;
            v77 = v76;
            v78 = v72;
            v79 = v75;
            v80 = 1;
            goto LABEL_58;
          case 2u:
            v99 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v72, v73, v99);
            v78 = v72;
            v79 = v75;
            v80 = 2;
            goto LABEL_58;
          case 3u:
            v100 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v72, v73, v100);
            v78 = v72;
            v79 = v75;
            v80 = 3;
            goto LABEL_58;
          case 4u:
            v101 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v72, v73, v101);
            v78 = v72;
            v79 = v75;
            v80 = 4;
            goto LABEL_58;
          case 5u:
            v102 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(v72, v73, v102);
            v78 = v72;
            v79 = v75;
            v80 = 5;
            goto LABEL_58;
          case 6u:
            v103 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v72, v73, v103);
            v78 = v72;
            v79 = v75;
            v80 = 6;
            goto LABEL_58;
          case 8u:
            v104 = *v73;
            *v72 = *v73;
            v105 = v104;
            v78 = v72;
            v79 = v75;
            v80 = 8;
            goto LABEL_58;
          case 9u:
            v106 = *v73;
            *v72 = *v73;
            v107 = v106;
            v78 = v72;
            v79 = v75;
            v80 = 9;
LABEL_58:
            swift_storeEnumTagMultiPayload(v78, v79, v80);
            break;
          default:
            memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
            break;
        }
        v108 = v20;
        v91 = v132;
        v109 = v72;
        v110 = 0;
LABEL_71:
        swift_storeEnumTagMultiPayload(v109, v108, v110);
        goto LABEL_72;
      default:
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        break;
    }
    v91 = v132;
LABEL_72:
    v9[v11[8]] = v10[v11[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v91 + 56))(v9, 0, 1, v11);
    goto LABEL_73;
  }
  v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  swift_retain();
  return v7;
}

void sub_1000C6EFC(id *a1, uint64_t a2)
{
  char *v4;
  int *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = (id *)&v4[v5[5]];
    v8 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v8);
    switch(EnumCaseMultiPayload)
    {
      case 2:
LABEL_10:

        break;
      case 1:

        v7 = (id *)((char *)v7 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
        v11 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v7, 1, v11))
        {
          switch(swift_getEnumCaseMultiPayload(v7, v11))
          {
            case 1u:
            case 8u:
            case 9u:
              goto LABEL_10;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
LABEL_9:
              v12 = type metadata accessor for Date(0);
              (*(void (**)(id *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v7, v12);
              break;
            default:
              goto LABEL_11;
          }
        }
        break;
      case 0:
        v10 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v7, v10))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_10;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            goto LABEL_9;
          default:
            goto LABEL_11;
        }
    }
LABEL_11:
    v13 = &v4[v5[6]];
    v14 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    v15 = (id *)&v4[v5[7]];
    v16 = swift_getEnumCaseMultiPayload(v15, v8);
    switch(v16)
    {
      case 2:
LABEL_18:

        break;
      case 1:

        v15 = (id *)((char *)v15 + *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20));
        v18 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v15, 1, v18))
        {
          switch(swift_getEnumCaseMultiPayload(v15, v18))
          {
            case 1u:
            case 8u:
            case 9u:
              goto LABEL_18;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
LABEL_17:
              v19 = type metadata accessor for Date(0);
              (*(void (**)(id *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v15, v19);
              break;
            default:
              return;
          }
        }
        break;
      case 0:
        v17 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v15, v17))
        {
          case 1u:
          case 8u:
          case 9u:
            goto LABEL_18;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            goto LABEL_17;
          default:
            return;
        }
    }
  }
}

void **sub_1000C71BC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_BYTE *, uint64_t, int *);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(void **, uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  void *v41;
  void **v42;
  id v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  void **v75;
  int v76;
  uint64_t v77;
  void *v78;
  id v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(void **, uint64_t, uint64_t);
  id v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  void *v98;
  id v99;
  void **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  void *v121;
  id v122;
  uint64_t v123;
  uint64_t v125;
  _BYTE *v126;
  void **v127;
  void **__dst;
  void **__dsta;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v3 = a3;
  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  v13 = v6;
  if (!v12(v9, 1, v10))
  {
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
    v16 = v10[5];
    v17 = (void **)&v8[v16];
    v18 = (void **)&v9[v16];
    v19 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
    v134 = v3;
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v28 = *v18;
        *v17 = *v18;
        v29 = v28;
        swift_storeEnumTagMultiPayload(v17, v19, 2);
        break;
      case 1:
        v126 = v8;
        v130 = v19;
        v132 = v11;
        v30 = *v18;
        *v17 = *v18;
        v31 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        __dst = v17;
        v32 = (void **)((char *)v17 + v31);
        v33 = (void **)((char *)v18 + v31);
        v34 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v35 = *(_QWORD *)(v34 - 8);
        v36 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v35 + 48);
        v37 = v30;
        if (v36(v33, 1, v34))
        {
          v38 = sub_10002A750(&qword_100644980);
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
          v21 = v130;
          v11 = v132;
          v8 = v126;
          v39 = __dst;
        }
        else
        {
          v40 = v35;
          switch(swift_getEnumCaseMultiPayload(v33, v34))
          {
            case 1u:
              v41 = *v33;
              v42 = v32;
              *v32 = *v33;
              v43 = v41;
              v44 = v32;
              v45 = v34;
              v46 = 1;
              goto LABEL_33;
            case 2u:
              v59 = type metadata accessor for Date(0);
              v42 = v32;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v32, v33, v59);
              v44 = v32;
              v45 = v34;
              v46 = 2;
              goto LABEL_33;
            case 3u:
              v60 = type metadata accessor for Date(0);
              v42 = v32;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v32, v33, v60);
              v44 = v32;
              v45 = v34;
              v46 = 3;
              goto LABEL_33;
            case 4u:
              v61 = type metadata accessor for Date(0);
              v42 = v32;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v32, v33, v61);
              v44 = v32;
              v45 = v34;
              v46 = 4;
              goto LABEL_33;
            case 5u:
              v67 = type metadata accessor for Date(0);
              v42 = v32;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v32, v33, v67);
              v44 = v32;
              v45 = v34;
              v46 = 5;
              goto LABEL_33;
            case 6u:
              v62 = type metadata accessor for Date(0);
              v42 = v32;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v32, v33, v62);
              v44 = v32;
              v45 = v34;
              v46 = 6;
              goto LABEL_33;
            case 8u:
              v63 = *v33;
              v42 = v32;
              *v32 = *v33;
              v64 = v63;
              v44 = v32;
              v45 = v34;
              v46 = 8;
              goto LABEL_33;
            case 9u:
              v65 = *v33;
              v42 = v32;
              *v32 = *v33;
              v66 = v65;
              v44 = v32;
              v45 = v34;
              v46 = 9;
LABEL_33:
              swift_storeEnumTagMultiPayload(v44, v45, v46);
              break;
            default:
              v42 = v32;
              memcpy(v32, v33, *(_QWORD *)(v35 + 64));
              break;
          }
          v68 = v34;
          v21 = v130;
          v11 = v132;
          v8 = v126;
          v39 = __dst;
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v68);
        }
        v56 = v39;
        v57 = v21;
        v58 = 1;
        goto LABEL_36;
      case 0:
        v21 = v19;
        v22 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v18, v22))
        {
          case 1u:
            v23 = *v18;
            *v17 = *v18;
            v24 = v23;
            v25 = v17;
            v26 = v22;
            v27 = 1;
            goto LABEL_23;
          case 2u:
            v47 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v17, v18, v47);
            v25 = v17;
            v26 = v22;
            v27 = 2;
            goto LABEL_23;
          case 3u:
            v48 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v17, v18, v48);
            v25 = v17;
            v26 = v22;
            v27 = 3;
            goto LABEL_23;
          case 4u:
            v49 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v17, v18, v49);
            v25 = v17;
            v26 = v22;
            v27 = 4;
            goto LABEL_23;
          case 5u:
            v50 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v17, v18, v50);
            v25 = v17;
            v26 = v22;
            v27 = 5;
            goto LABEL_23;
          case 6u:
            v51 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v17, v18, v51);
            v25 = v17;
            v26 = v22;
            v27 = 6;
            goto LABEL_23;
          case 8u:
            v52 = *v18;
            *v17 = *v18;
            v53 = v52;
            v25 = v17;
            v26 = v22;
            v27 = 8;
            goto LABEL_23;
          case 9u:
            v54 = *v18;
            *v17 = *v18;
            v55 = v54;
            v25 = v17;
            v26 = v22;
            v27 = 9;
LABEL_23:
            swift_storeEnumTagMultiPayload(v25, v26, v27);
            break;
          default:
            memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
            break;
        }
        v56 = v17;
        v57 = v21;
        v58 = 0;
LABEL_36:
        swift_storeEnumTagMultiPayload(v56, v57, v58);
LABEL_37:
        v69 = v10[6];
        v70 = &v8[v69];
        v71 = &v9[v69];
        v72 = type metadata accessor for IndexPath(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
        v73 = v10[7];
        v74 = (void **)&v8[v73];
        v75 = (void **)&v9[v73];
        v76 = swift_getEnumCaseMultiPayload(&v9[v73], v21);
        switch(v76)
        {
          case 2:
            v83 = *v75;
            *v74 = *v75;
            v84 = v83;
            v85 = v74;
            v86 = v21;
            v87 = 2;
            break;
          case 1:
            v131 = v21;
            v133 = v11;
            v88 = *v75;
            *v74 = *v75;
            v89 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
            v127 = v74;
            __dsta = (void **)((char *)v74 + v89);
            v90 = (void **)((char *)v75 + v89);
            v91 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
            v92 = *(_QWORD *)(v91 - 8);
            v93 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v92 + 48);
            v94 = v88;
            if (v93(v90, 1, v91))
            {
              v95 = sub_10002A750(&qword_100644980);
              memcpy(__dsta, v90, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
              v96 = v131;
              v11 = v133;
              v97 = v127;
            }
            else
            {
              v125 = v91;
              v11 = v133;
              switch(swift_getEnumCaseMultiPayload(v90, v91))
              {
                case 1u:
                  v98 = *v90;
                  *__dsta = *v90;
                  v99 = v98;
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 1;
                  goto LABEL_66;
                case 2u:
                  v114 = type metadata accessor for Date(0);
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(__dsta, v90, v114);
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 2;
                  goto LABEL_66;
                case 3u:
                  v115 = type metadata accessor for Date(0);
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(__dsta, v90, v115);
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 3;
                  goto LABEL_66;
                case 4u:
                  v116 = type metadata accessor for Date(0);
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(__dsta, v90, v116);
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 4;
                  goto LABEL_66;
                case 5u:
                  v123 = type metadata accessor for Date(0);
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(__dsta, v90, v123);
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 5;
                  goto LABEL_66;
                case 6u:
                  v117 = type metadata accessor for Date(0);
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v117 - 8) + 16))(__dsta, v90, v117);
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 6;
                  goto LABEL_66;
                case 8u:
                  v119 = *v90;
                  *__dsta = *v90;
                  v120 = v119;
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 8;
                  goto LABEL_66;
                case 9u:
                  v121 = *v90;
                  *__dsta = *v90;
                  v122 = v121;
                  v100 = __dsta;
                  v101 = v91;
                  v102 = v91;
                  v103 = 9;
LABEL_66:
                  swift_storeEnumTagMultiPayload(v100, v102, v103);
                  v96 = v131;
                  v118 = v92;
                  break;
                default:
                  memcpy(__dsta, v90, *(_QWORD *)(v92 + 64));
                  v118 = v92;
                  v96 = v131;
                  v101 = v125;
                  break;
              }
              v97 = v127;
              (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v118 + 56))(__dsta, 0, 1, v101);
            }
            v85 = v97;
            v86 = v96;
            v87 = 1;
            break;
          case 0:
            v77 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
            switch(swift_getEnumCaseMultiPayload(v75, v77))
            {
              case 1u:
                v78 = *v75;
                *v74 = *v75;
                v79 = v78;
                v80 = v74;
                v81 = v77;
                v82 = 1;
                goto LABEL_56;
              case 2u:
                v104 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v74, v75, v104);
                v80 = v74;
                v81 = v77;
                v82 = 2;
                goto LABEL_56;
              case 3u:
                v105 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v74, v75, v105);
                v80 = v74;
                v81 = v77;
                v82 = 3;
                goto LABEL_56;
              case 4u:
                v106 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v74, v75, v106);
                v80 = v74;
                v81 = v77;
                v82 = 4;
                goto LABEL_56;
              case 5u:
                v107 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v74, v75, v107);
                v80 = v74;
                v81 = v77;
                v82 = 5;
                goto LABEL_56;
              case 6u:
                v108 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v74, v75, v108);
                v80 = v74;
                v81 = v77;
                v82 = 6;
                goto LABEL_56;
              case 8u:
                v109 = *v75;
                *v74 = *v75;
                v110 = v109;
                v80 = v74;
                v81 = v77;
                v82 = 8;
                goto LABEL_56;
              case 9u:
                v111 = *v75;
                *v74 = *v75;
                v112 = v111;
                v80 = v74;
                v81 = v77;
                v82 = 9;
LABEL_56:
                swift_storeEnumTagMultiPayload(v80, v81, v82);
                break;
              default:
                memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
                break;
            }
            v113 = v21;
            v3 = v134;
            swift_storeEnumTagMultiPayload(v74, v113, 0);
            goto LABEL_71;
          default:
            memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_70:
            v3 = v134;
LABEL_71:
            v8[v10[8]] = v9[v10[8]];
            (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
            goto LABEL_72;
        }
        swift_storeEnumTagMultiPayload(v85, v86, v87);
        goto LABEL_70;
      default:
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        break;
    }
    v21 = v19;
    goto LABEL_37;
  }
  v14 = sub_10002A750((uint64_t *)&unk_100654F20);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_72:
  *(_OWORD *)((char *)a1 + *(int *)(v3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v3 + 24));
  return a1;
}

void **sub_1000C7BFC(void **a1, void **a2, uint64_t a3)
{
  void **v4;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  id v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void *v37;
  id v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(void **, uint64_t, uint64_t);
  id v53;
  uint64_t v54;
  void **v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(void **, uint64_t, uint64_t);
  id v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  void *v68;
  id v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void **v75;
  id v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  id v96;
  void *v97;
  id v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  void *v110;
  id v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  void **v118;
  int v119;
  uint64_t v120;
  void *v121;
  id v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  void **v128;
  void *v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int (*v134)(void **, uint64_t, uint64_t);
  id v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  int v139;
  void *v140;
  _QWORD *v141;
  id v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  id v153;
  void *v154;
  id v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  void **v162;
  uint64_t v163;
  void **v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  void **v168;
  _QWORD *v169;
  uint64_t v170;
  void *v171;
  id v172;
  void *v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  id v181;
  void *v182;
  id v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  void **v189;
  void **v190;
  uint64_t v191;
  int EnumCaseMultiPayload;
  uint64_t v193;
  void *v194;
  id v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  id v200;
  void *v201;
  uint64_t v202;
  void **v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int (*v206)(void **, uint64_t, uint64_t);
  id v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  void *v211;
  void **v212;
  id v213;
  void **v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  id v224;
  void *v225;
  id v226;
  void **v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  id v236;
  void *v237;
  id v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void **v247;
  uint64_t v248;
  _BYTE *v249;
  uint64_t v250;
  void **v251;
  void **v252;
  void **v253;
  void **v254;
  void **__dst;
  void *__dsta;
  _QWORD *__dstb;
  void *__dstc;
  uint64_t v259;
  void **v260;
  uint64_t v261;
  void **v262;
  uint64_t v263;
  uint64_t v264;

  v4 = a2;
  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)v4 + v9;
  v12 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_10001F544((uint64_t)v10, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
      goto LABEL_10;
    }
    v30 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v10, v11, v30);
    v264 = a3;
    if (a1 == v4)
    {
LABEL_109:
      v184 = v12[6];
      v185 = &v10[v184];
      v186 = &v11[v184];
      v187 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v187 - 8) + 24))(v185, v186, v187);
      if (a1 != v4)
      {
        v188 = v12[7];
        v189 = (void **)&v10[v188];
        v190 = (void **)&v11[v188];
        sub_10001F544((uint64_t)&v10[v188], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
        v191 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v190, v191);
        switch(EnumCaseMultiPayload)
        {
          case 2:
            v199 = *v190;
            *v189 = *v190;
            v200 = v199;
            swift_storeEnumTagMultiPayload(v189, v191, 2);
            break;
          case 1:
            __dstc = (void *)v191;
            v201 = *v190;
            *v189 = *v190;
            v202 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
            v262 = v189;
            v254 = (void **)((char *)v189 + v202);
            v203 = (void **)((char *)v190 + v202);
            v204 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
            v205 = *(_QWORD *)(v204 - 8);
            v206 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v205 + 48);
            v207 = v201;
            if (v206(v203, 1, v204))
            {
              v208 = sub_10002A750(&qword_100644980);
              memcpy(v254, v203, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
              v209 = v262;
              a3 = v264;
              v210 = (uint64_t)__dstc;
            }
            else
            {
              v246 = v204;
              v250 = v205;
              a3 = v264;
              v210 = (uint64_t)__dstc;
              switch(swift_getEnumCaseMultiPayload(v203, v204))
              {
                case 1u:
                  v211 = *v203;
                  v212 = v254;
                  *v254 = *v203;
                  v213 = v211;
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 1;
                  goto LABEL_140;
                case 2u:
                  v230 = type metadata accessor for Date(0);
                  v212 = v254;
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v230 - 8) + 16))(v254, v203, v230);
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 2;
                  goto LABEL_140;
                case 3u:
                  v231 = type metadata accessor for Date(0);
                  v212 = v254;
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v231 - 8) + 16))(v254, v203, v231);
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 3;
                  goto LABEL_140;
                case 4u:
                  v232 = type metadata accessor for Date(0);
                  v212 = v254;
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(v254, v203, v232);
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 4;
                  goto LABEL_140;
                case 5u:
                  v233 = type metadata accessor for Date(0);
                  v212 = v254;
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v233 - 8) + 16))(v254, v203, v233);
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 5;
                  goto LABEL_140;
                case 6u:
                  v234 = type metadata accessor for Date(0);
                  v212 = v254;
                  (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v234 - 8) + 16))(v254, v203, v234);
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 6;
                  goto LABEL_140;
                case 8u:
                  v235 = *v203;
                  v212 = v254;
                  *v254 = *v203;
                  v236 = v235;
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 8;
                  goto LABEL_140;
                case 9u:
                  v237 = *v203;
                  v212 = v254;
                  *v254 = *v203;
                  v238 = v237;
                  v214 = v254;
                  v215 = v246;
                  v216 = v246;
                  v217 = 9;
LABEL_140:
                  swift_storeEnumTagMultiPayload(v214, v216, v217);
                  break;
                default:
                  v212 = v254;
                  memcpy(v254, v203, *(_QWORD *)(v205 + 64));
                  v215 = v246;
                  break;
              }
              v209 = v262;
              (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v250 + 56))(v212, 0, 1, v215);
            }
            v227 = v209;
            v228 = v210;
            v229 = 1;
            goto LABEL_143;
          case 0:
            v193 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
            switch(swift_getEnumCaseMultiPayload(v190, v193))
            {
              case 1u:
                v194 = *v190;
                *v189 = *v190;
                v195 = v194;
                v196 = v189;
                v197 = v193;
                v198 = 1;
                goto LABEL_130;
              case 2u:
                v218 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v189, v190, v218);
                v196 = v189;
                v197 = v193;
                v198 = 2;
                goto LABEL_130;
              case 3u:
                v219 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v219 - 8) + 16))(v189, v190, v219);
                v196 = v189;
                v197 = v193;
                v198 = 3;
                goto LABEL_130;
              case 4u:
                v220 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v220 - 8) + 16))(v189, v190, v220);
                v196 = v189;
                v197 = v193;
                v198 = 4;
                goto LABEL_130;
              case 5u:
                v221 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v221 - 8) + 16))(v189, v190, v221);
                v196 = v189;
                v197 = v193;
                v198 = 5;
                goto LABEL_130;
              case 6u:
                v222 = type metadata accessor for Date(0);
                (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v222 - 8) + 16))(v189, v190, v222);
                v196 = v189;
                v197 = v193;
                v198 = 6;
                goto LABEL_130;
              case 8u:
                v223 = *v190;
                *v189 = *v190;
                v224 = v223;
                v196 = v189;
                v197 = v193;
                v198 = 8;
                goto LABEL_130;
              case 9u:
                v225 = *v190;
                *v189 = *v190;
                v226 = v225;
                v196 = v189;
                v197 = v193;
                v198 = 9;
LABEL_130:
                swift_storeEnumTagMultiPayload(v196, v197, v198);
                break;
              default:
                memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
                break;
            }
            a3 = v264;
            v227 = v189;
            v228 = v191;
            v229 = 0;
LABEL_143:
            swift_storeEnumTagMultiPayload(v227, v228, v229);
            goto LABEL_144;
          default:
            memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
            break;
        }
        a3 = v264;
      }
LABEL_144:
      v10[v12[8]] = v11[v12[8]];
      goto LABEL_145;
    }
    v31 = v12[5];
    v32 = (void **)&v10[v31];
    v33 = (void **)&v11[v31];
    sub_10001F544((uint64_t)&v10[v31], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v34 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    v35 = swift_getEnumCaseMultiPayload(v33, v34);
    switch(v35)
    {
      case 2:
        v56 = *v33;
        *v32 = *v33;
        v57 = v56;
        swift_storeEnumTagMultiPayload(v32, v34, 2);
        break;
      case 1:
        __dsta = (void *)v34;
        v58 = *v33;
        *v32 = *v33;
        v59 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v260 = v32;
        v252 = (void **)((char *)v32 + v59);
        v60 = (void **)((char *)v33 + v59);
        v61 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v62 = *(_QWORD *)(v61 - 8);
        v63 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v62 + 48);
        v64 = v58;
        if (v63(v60, 1, v61))
        {
          v65 = sub_10002A750(&qword_100644980);
          memcpy(v252, v60, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          v66 = v260;
          a3 = v264;
          v67 = (uint64_t)__dsta;
        }
        else
        {
          v244 = v61;
          v248 = v62;
          a3 = v264;
          v67 = (uint64_t)__dsta;
          switch(swift_getEnumCaseMultiPayload(v60, v61))
          {
            case 1u:
              v74 = *v60;
              v75 = v252;
              *v252 = *v60;
              v76 = v74;
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 1;
              goto LABEL_105;
            case 2u:
              v175 = type metadata accessor for Date(0);
              v75 = v252;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v252, v60, v175);
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 2;
              goto LABEL_105;
            case 3u:
              v176 = type metadata accessor for Date(0);
              v75 = v252;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v176 - 8) + 16))(v252, v60, v176);
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 3;
              goto LABEL_105;
            case 4u:
              v177 = type metadata accessor for Date(0);
              v75 = v252;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v252, v60, v177);
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 4;
              goto LABEL_105;
            case 5u:
              v178 = type metadata accessor for Date(0);
              v75 = v252;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(v252, v60, v178);
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 5;
              goto LABEL_105;
            case 6u:
              v179 = type metadata accessor for Date(0);
              v75 = v252;
              (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v252, v60, v179);
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 6;
              goto LABEL_105;
            case 8u:
              v180 = *v60;
              v75 = v252;
              *v252 = *v60;
              v181 = v180;
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 8;
              goto LABEL_105;
            case 9u:
              v182 = *v60;
              v75 = v252;
              *v252 = *v60;
              v183 = v182;
              v77 = v252;
              v78 = v244;
              v79 = v244;
              v80 = 9;
LABEL_105:
              swift_storeEnumTagMultiPayload(v77, v79, v80);
              break;
            default:
              v75 = v252;
              memcpy(v252, v60, *(_QWORD *)(v62 + 64));
              v78 = v244;
              break;
          }
          v66 = v260;
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v248 + 56))(v75, 0, 1, v78);
        }
        v99 = v66;
        v100 = v67;
        v101 = 1;
        goto LABEL_108;
      case 0:
        v36 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v33, v36))
        {
          case 1u:
            v37 = *v33;
            *v32 = *v33;
            v38 = v37;
            v39 = v32;
            v40 = v36;
            v41 = 1;
            goto LABEL_48;
          case 2u:
            v90 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v32, v33, v90);
            v39 = v32;
            v40 = v36;
            v41 = 2;
            goto LABEL_48;
          case 3u:
            v91 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v32, v33, v91);
            v39 = v32;
            v40 = v36;
            v41 = 3;
            goto LABEL_48;
          case 4u:
            v92 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v32, v33, v92);
            v39 = v32;
            v40 = v36;
            v41 = 4;
            goto LABEL_48;
          case 5u:
            v93 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v32, v33, v93);
            v39 = v32;
            v40 = v36;
            v41 = 5;
            goto LABEL_48;
          case 6u:
            v94 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v32, v33, v94);
            v39 = v32;
            v40 = v36;
            v41 = 6;
            goto LABEL_48;
          case 8u:
            v95 = *v33;
            *v32 = *v33;
            v96 = v95;
            v39 = v32;
            v40 = v36;
            v41 = 8;
            goto LABEL_48;
          case 9u:
            v97 = *v33;
            *v32 = *v33;
            v98 = v97;
            v39 = v32;
            v40 = v36;
            v41 = 9;
LABEL_48:
            swift_storeEnumTagMultiPayload(v39, v40, v41);
            break;
          default:
            memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
            break;
        }
        a3 = v264;
        v99 = v32;
        v100 = v34;
        v101 = 0;
LABEL_108:
        swift_storeEnumTagMultiPayload(v99, v100, v101);
        goto LABEL_109;
      default:
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        break;
    }
    a3 = v264;
    goto LABEL_109;
  }
  if (!v16)
  {
    v263 = a3;
    v17 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v10, v11, v17);
    v18 = v12[5];
    v19 = (void **)&v10[v18];
    v20 = (void **)&v11[v18];
    v21 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    v22 = swift_getEnumCaseMultiPayload(v20, v21);
    if (v22 == 2)
    {
      v42 = *v20;
      *v19 = *v20;
      v43 = v42;
      v44 = v19;
      v45 = v21;
      v46 = 2;
    }
    else if (v22 == 1)
    {
      v247 = v4;
      v259 = v21;
      v47 = *v20;
      *v19 = *v20;
      v48 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v251 = v19;
      __dst = (void **)((char *)v19 + v48);
      v49 = (void **)((char *)v20 + v48);
      v50 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v51 = *(_QWORD *)(v50 - 8);
      v52 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v51 + 48);
      v53 = v47;
      if (v52(v49, 1, v50))
      {
        v54 = sub_10002A750(&qword_100644980);
        memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        v21 = v259;
        v4 = v247;
        v55 = v251;
      }
      else
      {
        v21 = v259;
        switch(swift_getEnumCaseMultiPayload(v49, v50))
        {
          case 1u:
            v68 = *v49;
            *__dst = *v49;
            v69 = v68;
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 1;
            goto LABEL_58;
          case 2u:
            v102 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v102 - 8) + 16))(__dst, v49, v102);
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 2;
            goto LABEL_58;
          case 3u:
            v103 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(__dst, v49, v103);
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 3;
            goto LABEL_58;
          case 4u:
            v104 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(__dst, v49, v104);
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 4;
            goto LABEL_58;
          case 5u:
            v105 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(__dst, v49, v105);
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 5;
            goto LABEL_58;
          case 6u:
            v106 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(__dst, v49, v106);
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 6;
            goto LABEL_58;
          case 8u:
            v108 = *v49;
            *__dst = *v49;
            v109 = v108;
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 8;
            goto LABEL_58;
          case 9u:
            v110 = *v49;
            *__dst = *v49;
            v111 = v110;
            v70 = __dst;
            v71 = v50;
            v72 = v50;
            v73 = 9;
LABEL_58:
            swift_storeEnumTagMultiPayload(v70, v72, v73);
            v55 = v251;
            v107 = v51;
            break;
          default:
            memcpy(__dst, v49, *(_QWORD *)(v51 + 64));
            v107 = v51;
            v71 = v50;
            v55 = v251;
            break;
        }
        v4 = v247;
        (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v107 + 56))(__dst, 0, 1, v71);
      }
      v44 = v55;
      v45 = v21;
      v46 = 1;
    }
    else
    {
      if (v22)
      {
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        goto LABEL_62;
      }
      v23 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v20, v23))
      {
        case 1u:
          v24 = *v20;
          *v19 = *v20;
          v25 = v24;
          v26 = v19;
          v27 = v23;
          v28 = 1;
          goto LABEL_38;
        case 2u:
          v81 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v19, v20, v81);
          v26 = v19;
          v27 = v23;
          v28 = 2;
          goto LABEL_38;
        case 3u:
          v82 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v19, v20, v82);
          v26 = v19;
          v27 = v23;
          v28 = 3;
          goto LABEL_38;
        case 4u:
          v83 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v19, v20, v83);
          v26 = v19;
          v27 = v23;
          v28 = 4;
          goto LABEL_38;
        case 5u:
          v84 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v19, v20, v84);
          v26 = v19;
          v27 = v23;
          v28 = 5;
          goto LABEL_38;
        case 6u:
          v85 = type metadata accessor for Date(0);
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v19, v20, v85);
          v26 = v19;
          v27 = v23;
          v28 = 6;
          goto LABEL_38;
        case 8u:
          v86 = *v20;
          *v19 = *v20;
          v87 = v86;
          v26 = v19;
          v27 = v23;
          v28 = 8;
          goto LABEL_38;
        case 9u:
          v88 = *v20;
          *v19 = *v20;
          v89 = v88;
          v26 = v19;
          v27 = v23;
          v28 = 9;
LABEL_38:
          swift_storeEnumTagMultiPayload(v26, v27, v28);
          break;
        default:
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
          break;
      }
      v44 = v19;
      v45 = v21;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
LABEL_62:
    v112 = v12[6];
    v113 = &v10[v112];
    v114 = &v11[v112];
    v115 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(v113, v114, v115);
    v116 = v12[7];
    v117 = (void **)&v10[v116];
    v118 = (void **)&v11[v116];
    v119 = swift_getEnumCaseMultiPayload(&v11[v116], v21);
    switch(v119)
    {
      case 2:
        v126 = *v118;
        *v117 = *v118;
        v127 = v126;
        swift_storeEnumTagMultiPayload(v117, v21, 2);
        break;
      case 1:
        v249 = v11;
        v261 = v21;
        v128 = v117;
        v129 = *v118;
        *v128 = *v118;
        v130 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v253 = v128;
        __dstb = (void **)((char *)v128 + v130);
        v131 = (void **)((char *)v118 + v130);
        v132 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v133 = *(_QWORD *)(v132 - 8);
        v134 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v133 + 48);
        v135 = v129;
        if (v134(v131, 1, v132))
        {
          v136 = sub_10002A750(&qword_100644980);
          memcpy(__dstb, v131, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
          v137 = v261;
          a3 = v263;
          v11 = v249;
          v138 = v253;
        }
        else
        {
          v243 = v133;
          v245 = v132;
          v139 = swift_getEnumCaseMultiPayload(v131, v132) - 1;
          v137 = v261;
          a3 = v263;
          switch(v139)
          {
            case 0:
              v140 = *v131;
              v141 = __dstb;
              *__dstb = v140;
              v142 = v140;
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 1;
              goto LABEL_92;
            case 1:
              v159 = type metadata accessor for Date(0);
              v160 = v131;
              v141 = __dstb;
              (*(void (**)(_QWORD *, void **, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(__dstb, v160, v159);
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 2;
              goto LABEL_92;
            case 2:
              v161 = type metadata accessor for Date(0);
              v162 = v131;
              v141 = __dstb;
              (*(void (**)(_QWORD *, void **, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(__dstb, v162, v161);
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 3;
              goto LABEL_92;
            case 3:
              v163 = type metadata accessor for Date(0);
              v164 = v131;
              v141 = __dstb;
              (*(void (**)(_QWORD *, void **, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(__dstb, v164, v163);
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 4;
              goto LABEL_92;
            case 4:
              v165 = type metadata accessor for Date(0);
              v166 = v131;
              v141 = __dstb;
              (*(void (**)(_QWORD *, void **, uint64_t))(*(_QWORD *)(v165 - 8) + 16))(__dstb, v166, v165);
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 5;
              goto LABEL_92;
            case 5:
              v167 = type metadata accessor for Date(0);
              v168 = v131;
              v141 = __dstb;
              (*(void (**)(_QWORD *, void **, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(__dstb, v168, v167);
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 6;
              goto LABEL_92;
            case 7:
              v171 = *v131;
              v141 = __dstb;
              *__dstb = v171;
              v172 = v171;
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 8;
              goto LABEL_92;
            case 8:
              v173 = *v131;
              v141 = __dstb;
              *__dstb = v173;
              v174 = v173;
              v143 = __dstb;
              v144 = v245;
              v145 = v245;
              v146 = 9;
LABEL_92:
              swift_storeEnumTagMultiPayload(v143, v145, v146);
              v169 = v141;
              v138 = v253;
              v170 = v243;
              break;
            default:
              memcpy(__dstb, v131, *(_QWORD *)(v133 + 64));
              v169 = __dstb;
              v170 = v133;
              v144 = v245;
              v138 = v253;
              break;
          }
          v11 = v249;
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v169, 0, 1, v144);
        }
        v156 = v138;
        v157 = v137;
        v158 = 1;
        goto LABEL_95;
      case 0:
        v120 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v118, v120))
        {
          case 1u:
            v121 = *v118;
            *v117 = *v118;
            v122 = v121;
            v123 = v117;
            v124 = v120;
            v125 = 1;
            goto LABEL_82;
          case 2u:
            v147 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v147 - 8) + 16))(v117, v118, v147);
            v123 = v117;
            v124 = v120;
            v125 = 2;
            goto LABEL_82;
          case 3u:
            v148 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v117, v118, v148);
            v123 = v117;
            v124 = v120;
            v125 = 3;
            goto LABEL_82;
          case 4u:
            v149 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v117, v118, v149);
            v123 = v117;
            v124 = v120;
            v125 = 4;
            goto LABEL_82;
          case 5u:
            v150 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v117, v118, v150);
            v123 = v117;
            v124 = v120;
            v125 = 5;
            goto LABEL_82;
          case 6u:
            v151 = type metadata accessor for Date(0);
            (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v117, v118, v151);
            v123 = v117;
            v124 = v120;
            v125 = 6;
            goto LABEL_82;
          case 8u:
            v152 = *v118;
            *v117 = *v118;
            v153 = v152;
            v123 = v117;
            v124 = v120;
            v125 = 8;
            goto LABEL_82;
          case 9u:
            v154 = *v118;
            *v117 = *v118;
            v155 = v154;
            v123 = v117;
            v124 = v120;
            v125 = 9;
LABEL_82:
            swift_storeEnumTagMultiPayload(v123, v124, v125);
            break;
          default:
            memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
            break;
        }
        a3 = v263;
        v156 = v117;
        v157 = v21;
        v158 = 0;
LABEL_95:
        swift_storeEnumTagMultiPayload(v156, v157, v158);
        goto LABEL_96;
      default:
        memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        break;
    }
    a3 = v263;
LABEL_96:
    v10[v12[8]] = v11[v12[8]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    goto LABEL_145;
  }
LABEL_10:
  v29 = sub_10002A750((uint64_t *)&unk_100654F20);
  memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
LABEL_145:
  v239 = *(int *)(a3 + 24);
  v240 = (void **)((char *)a1 + v239);
  v241 = (void **)((char *)v4 + v239);
  *v240 = *v241;
  v240[1] = v241[1];
  return a1;
}

_QWORD *sub_1000C90C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v10 = *((_QWORD *)v9 - 1);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    v13 = v9[5];
    v14 = &v7[v13];
    v15 = &v8[v13];
    v16 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
    v88 = v10;
    v89 = v16;
    if (EnumCaseMultiPayload == 1)
    {
      *v14 = *v15;
      v23 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v86 = v14;
      v24 = (char *)v14 + v23;
      v25 = (char *)v15 + v23;
      v26 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = sub_10002A750(&qword_100644980);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        v16 = v89;
        v29 = v86;
      }
      else
      {
        v84 = v27;
        v30 = v24;
        switch(swift_getEnumCaseMultiPayload(v25, v26))
        {
          case 2u:
            v31 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v24, v25, v31);
            v32 = v24;
            v33 = v26;
            v34 = 2;
            goto LABEL_24;
          case 3u:
            v42 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v24, v25, v42);
            v32 = v24;
            v33 = v26;
            v34 = 3;
            goto LABEL_24;
          case 4u:
            v43 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v24, v25, v43);
            v32 = v24;
            v33 = v26;
            v34 = 4;
            goto LABEL_24;
          case 5u:
            v44 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v24, v25, v44);
            v32 = v24;
            v33 = v26;
            v34 = 5;
            goto LABEL_24;
          case 6u:
            v45 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v24, v25, v45);
            v32 = v24;
            v33 = v26;
            v34 = 6;
LABEL_24:
            swift_storeEnumTagMultiPayload(v32, v33, v34);
            break;
          default:
            v30 = v24;
            memcpy(v24, v25, *(_QWORD *)(v84 + 64));
            break;
        }
        v29 = v86;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v30, 0, 1, v26);
        v16 = v89;
      }
      v39 = v29;
      v40 = v16;
      v41 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        goto LABEL_28;
      }
      v18 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v15, v18))
      {
        case 2u:
          v19 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v14, v15, v19);
          v20 = v14;
          v21 = v18;
          v22 = 2;
          goto LABEL_17;
        case 3u:
          v35 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v14, v15, v35);
          v20 = v14;
          v21 = v18;
          v22 = 3;
          goto LABEL_17;
        case 4u:
          v36 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v14, v15, v36);
          v20 = v14;
          v21 = v18;
          v22 = 4;
          goto LABEL_17;
        case 5u:
          v37 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v14, v15, v37);
          v20 = v14;
          v21 = v18;
          v22 = 5;
          goto LABEL_17;
        case 6u:
          v38 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v14, v15, v38);
          v20 = v14;
          v21 = v18;
          v22 = 6;
LABEL_17:
          swift_storeEnumTagMultiPayload(v20, v21, v22);
          break;
        default:
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          break;
      }
      v39 = v14;
      v40 = v16;
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v39, v40, v41);
LABEL_28:
    v46 = v9[6];
    v47 = &v7[v46];
    v48 = &v8[v46];
    v49 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
    v50 = v9[7];
    v51 = &v7[v50];
    v52 = &v8[v50];
    v53 = swift_getEnumCaseMultiPayload(&v8[v50], v16);
    if (v53 == 1)
    {
      *v51 = *v52;
      v59 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v87 = v51;
      v60 = (char *)v51 + v59;
      v61 = (char *)v52 + v59;
      v62 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
      {
        v64 = sub_10002A750(&qword_100644980);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        v66 = v88;
        v65 = v89;
        v67 = v87;
      }
      else
      {
        v85 = v63;
        v68 = v60;
        switch(swift_getEnumCaseMultiPayload(v61, v62))
        {
          case 2u:
            v69 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v60, v61, v69);
            v70 = v60;
            v71 = v62;
            v72 = 2;
            goto LABEL_49;
          case 3u:
            v79 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v60, v61, v79);
            v70 = v60;
            v71 = v62;
            v72 = 3;
            goto LABEL_49;
          case 4u:
            v80 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v60, v61, v80);
            v70 = v60;
            v71 = v62;
            v72 = 4;
            goto LABEL_49;
          case 5u:
            v81 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v60, v61, v81);
            v70 = v60;
            v71 = v62;
            v72 = 5;
            goto LABEL_49;
          case 6u:
            v82 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v60, v61, v82);
            v70 = v60;
            v71 = v62;
            v72 = 6;
LABEL_49:
            swift_storeEnumTagMultiPayload(v70, v71, v72);
            break;
          default:
            v68 = v60;
            memcpy(v60, v61, *(_QWORD *)(v85 + 64));
            break;
        }
        v67 = v87;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v68, 0, 1, v62);
        v66 = v88;
        v65 = v89;
      }
      v77 = v67;
      v78 = 1;
    }
    else
    {
      if (v53)
      {
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        v66 = v88;
LABEL_53:
        v7[v9[8]] = v8[v9[8]];
        (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v66 + 56))(v7, 0, 1, v9);
        goto LABEL_54;
      }
      v54 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v52, v54))
      {
        case 2u:
          v55 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v51, v52, v55);
          v56 = v51;
          v57 = v54;
          v58 = 2;
          goto LABEL_42;
        case 3u:
          v73 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v51, v52, v73);
          v56 = v51;
          v57 = v54;
          v58 = 3;
          goto LABEL_42;
        case 4u:
          v74 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v51, v52, v74);
          v56 = v51;
          v57 = v54;
          v58 = 4;
          goto LABEL_42;
        case 5u:
          v75 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v51, v52, v75);
          v56 = v51;
          v57 = v54;
          v58 = 5;
          goto LABEL_42;
        case 6u:
          v76 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v51, v52, v76);
          v56 = v51;
          v57 = v54;
          v58 = 6;
LABEL_42:
          swift_storeEnumTagMultiPayload(v56, v57, v58);
          break;
        default:
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
          break;
      }
      v66 = v88;
      v65 = v89;
      v77 = v51;
      v78 = 0;
    }
    swift_storeEnumTagMultiPayload(v77, v65, v78);
    goto LABEL_53;
  }
  v11 = sub_10002A750((uint64_t *)&unk_100654F20);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_54:
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **sub_1000C98F4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int EnumCaseMultiPayload;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for TTRIRemindersBoardDragItemUserInfo(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10001F544((uint64_t)v8, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
      goto LABEL_9;
    }
    v27 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v8, v9, v27);
    if (a1 != a2)
    {
      v28 = v10[5];
      v29 = &v8[v28];
      v30 = &v9[v28];
      sub_10001F544((uint64_t)&v8[v28], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
      v31 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v31);
      if (EnumCaseMultiPayload == 1)
      {
        v175 = v31;
        v179 = a3;
        *v29 = *v30;
        v46 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v47 = (char *)v29 + v46;
        v48 = (char *)v30 + v46;
        v49 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v50 = *(_QWORD *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          v51 = sub_10002A750(&qword_100644980);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
          v52 = v175;
          a3 = v179;
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v48, v49))
          {
            case 2u:
              v66 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v47, v48, v66);
              v67 = v47;
              v68 = v49;
              v69 = 2;
              goto LABEL_78;
            case 3u:
              v125 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 32))(v47, v48, v125);
              v67 = v47;
              v68 = v49;
              v69 = 3;
              goto LABEL_78;
            case 4u:
              v126 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 32))(v47, v48, v126);
              v67 = v47;
              v68 = v49;
              v69 = 4;
              goto LABEL_78;
            case 5u:
              v127 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 32))(v47, v48, v127);
              v67 = v47;
              v68 = v49;
              v69 = 5;
              goto LABEL_78;
            case 6u:
              v128 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v47, v48, v128);
              v67 = v47;
              v68 = v49;
              v69 = 6;
LABEL_78:
              swift_storeEnumTagMultiPayload(v67, v68, v69);
              v129 = v47;
              a3 = v179;
              v130 = v50;
              break;
            default:
              memcpy(v47, v48, *(_QWORD *)(v50 + 64));
              v130 = v50;
              v129 = v47;
              a3 = v179;
              break;
          }
          v52 = v175;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v129, 0, 1, v49);
        }
        v74 = v29;
        v75 = v52;
        v76 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          goto LABEL_82;
        }
        v33 = a3;
        v34 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v30, v34))
        {
          case 2u:
            v35 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v29, v30, v35);
            v36 = v29;
            v37 = v34;
            v38 = 2;
            goto LABEL_37;
          case 3u:
            v70 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v70 - 8) + 32))(v29, v30, v70);
            v36 = v29;
            v37 = v34;
            v38 = 3;
            goto LABEL_37;
          case 4u:
            v71 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v29, v30, v71);
            v36 = v29;
            v37 = v34;
            v38 = 4;
            goto LABEL_37;
          case 5u:
            v72 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v29, v30, v72);
            v36 = v29;
            v37 = v34;
            v38 = 5;
            goto LABEL_37;
          case 6u:
            v73 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v29, v30, v73);
            v36 = v29;
            v37 = v34;
            v38 = 6;
LABEL_37:
            swift_storeEnumTagMultiPayload(v36, v37, v38);
            break;
          default:
            memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
            break;
        }
        a3 = v33;
        v74 = v29;
        v75 = v31;
        v76 = 0;
      }
      swift_storeEnumTagMultiPayload(v74, v75, v76);
    }
LABEL_82:
    v131 = v10[6];
    v132 = &v8[v131];
    v133 = &v9[v131];
    v134 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 40))(v132, v133, v134);
    if (a1 != a2)
    {
      v135 = v10[7];
      v136 = &v8[v135];
      v137 = &v9[v135];
      sub_10001F544((uint64_t)&v8[v135], (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
      v138 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
      v139 = swift_getEnumCaseMultiPayload(v137, v138);
      if (v139 == 1)
      {
        v177 = v138;
        v180 = a3;
        *v136 = *v137;
        v146 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
        v147 = (char *)v136 + v146;
        v148 = (char *)v137 + v146;
        v149 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        v150 = *(_QWORD *)(v149 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
        {
          v151 = sub_10002A750(&qword_100644980);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
          v152 = v177;
          a3 = v180;
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload(v148, v149))
          {
            case 2u:
              v153 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v147, v148, v153);
              v154 = v147;
              v155 = v149;
              v156 = 2;
              goto LABEL_103;
            case 3u:
              v164 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v147, v148, v164);
              v154 = v147;
              v155 = v149;
              v156 = 3;
              goto LABEL_103;
            case 4u:
              v165 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v147, v148, v165);
              v154 = v147;
              v155 = v149;
              v156 = 4;
              goto LABEL_103;
            case 5u:
              v166 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 32))(v147, v148, v166);
              v154 = v147;
              v155 = v149;
              v156 = 5;
              goto LABEL_103;
            case 6u:
              v167 = type metadata accessor for Date(0);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32))(v147, v148, v167);
              v154 = v147;
              v155 = v149;
              v156 = 6;
LABEL_103:
              swift_storeEnumTagMultiPayload(v154, v155, v156);
              v168 = v147;
              a3 = v180;
              v169 = v150;
              break;
            default:
              memcpy(v147, v148, *(_QWORD *)(v150 + 64));
              v169 = v150;
              v168 = v147;
              a3 = v180;
              break;
          }
          v152 = v177;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v168, 0, 1, v149);
        }
        v161 = v136;
        v162 = v152;
        v163 = 1;
        goto LABEL_106;
      }
      if (!v139)
      {
        v140 = a3;
        v141 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
        switch(swift_getEnumCaseMultiPayload(v137, v141))
        {
          case 2u:
            v142 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v142 - 8) + 32))(v136, v137, v142);
            v143 = v136;
            v144 = v141;
            v145 = 2;
            goto LABEL_97;
          case 3u:
            v157 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v157 - 8) + 32))(v136, v137, v157);
            v143 = v136;
            v144 = v141;
            v145 = 3;
            goto LABEL_97;
          case 4u:
            v158 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v158 - 8) + 32))(v136, v137, v158);
            v143 = v136;
            v144 = v141;
            v145 = 4;
            goto LABEL_97;
          case 5u:
            v159 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v136, v137, v159);
            v143 = v136;
            v144 = v141;
            v145 = 5;
            goto LABEL_97;
          case 6u:
            v160 = type metadata accessor for Date(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v136, v137, v160);
            v143 = v136;
            v144 = v141;
            v145 = 6;
LABEL_97:
            swift_storeEnumTagMultiPayload(v143, v144, v145);
            break;
          default:
            memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
            break;
        }
        a3 = v140;
        v161 = v136;
        v162 = v138;
        v163 = 0;
LABEL_106:
        swift_storeEnumTagMultiPayload(v161, v162, v163);
        goto LABEL_107;
      }
      memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    }
LABEL_107:
    v8[v10[8]] = v9[v10[8]];
    goto LABEL_108;
  }
  if (!v14)
  {
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, v9, v15);
    v16 = v10[5];
    v17 = &v8[v16];
    v18 = &v9[v16];
    v19 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
    v20 = swift_getEnumCaseMultiPayload(v18, v19);
    v178 = a3;
    if (v20 == 1)
    {
      v174 = v19;
      *v17 = *v18;
      v39 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v172 = v17;
      v40 = (char *)v17 + v39;
      v41 = (char *)v18 + v39;
      v42 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = sub_10002A750(&qword_100644980);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        v45 = v172;
        v19 = v174;
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload(v41, v42))
        {
          case 2u:
            v53 = type metadata accessor for Date(0);
            v54 = v41;
            v55 = v40;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v40, v54, v53);
            v56 = v40;
            v57 = v42;
            v58 = 2;
            goto LABEL_44;
          case 3u:
            v79 = type metadata accessor for Date(0);
            v80 = v41;
            v55 = v40;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v40, v80, v79);
            v56 = v40;
            v57 = v42;
            v58 = 3;
            goto LABEL_44;
          case 4u:
            v81 = type metadata accessor for Date(0);
            v82 = v41;
            v55 = v40;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v40, v82, v81);
            v56 = v40;
            v57 = v42;
            v58 = 4;
            goto LABEL_44;
          case 5u:
            v83 = type metadata accessor for Date(0);
            v84 = v41;
            v55 = v40;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v40, v84, v83);
            v56 = v40;
            v57 = v42;
            v58 = 5;
            goto LABEL_44;
          case 6u:
            v85 = type metadata accessor for Date(0);
            v86 = v41;
            v55 = v40;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v40, v86, v85);
            v56 = v40;
            v57 = v42;
            v58 = 6;
LABEL_44:
            swift_storeEnumTagMultiPayload(v56, v57, v58);
            v19 = v174;
            v78 = v43;
            break;
          default:
            v77 = v41;
            v55 = v40;
            memcpy(v40, v77, *(_QWORD *)(v43 + 64));
            v78 = v43;
            v19 = v174;
            break;
        }
        v45 = v172;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v55, 0, 1, v42);
      }
      v63 = v45;
      v64 = v19;
      v65 = 1;
    }
    else
    {
      if (v20)
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        goto LABEL_48;
      }
      v21 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v18, v21))
      {
        case 2u:
          v22 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
          v23 = v17;
          v24 = v21;
          v25 = 2;
          goto LABEL_28;
        case 3u:
          v59 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v17, v18, v59);
          v23 = v17;
          v24 = v21;
          v25 = 3;
          goto LABEL_28;
        case 4u:
          v60 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v17, v18, v60);
          v23 = v17;
          v24 = v21;
          v25 = 4;
          goto LABEL_28;
        case 5u:
          v61 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v17, v18, v61);
          v23 = v17;
          v24 = v21;
          v25 = 5;
          goto LABEL_28;
        case 6u:
          v62 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v17, v18, v62);
          v23 = v17;
          v24 = v21;
          v25 = 6;
LABEL_28:
          swift_storeEnumTagMultiPayload(v23, v24, v25);
          break;
        default:
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
          break;
      }
      v63 = v17;
      v64 = v19;
      v65 = 0;
    }
    swift_storeEnumTagMultiPayload(v63, v64, v65);
LABEL_48:
    v87 = v10[6];
    v88 = &v8[v87];
    v89 = &v9[v87];
    v90 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
    v91 = v10[7];
    v92 = &v8[v91];
    v93 = &v9[v91];
    v94 = swift_getEnumCaseMultiPayload(&v9[v91], v19);
    if (v94 == 1)
    {
      v176 = v19;
      *v92 = *v93;
      v100 = *(int *)(type metadata accessor for TTRRemindersListViewModel.ReminderID(0) + 20);
      v173 = v92;
      v101 = (char *)v92 + v100;
      v102 = (char *)v93 + v100;
      v103 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      v104 = *(_QWORD *)(v103 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        v105 = sub_10002A750(&qword_100644980);
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
        v106 = v176;
        a3 = v178;
        v107 = v173;
      }
      else
      {
        v171 = v104;
        switch(swift_getEnumCaseMultiPayload(v102, v103))
        {
          case 2u:
            v108 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 32))(v101, v102, v108);
            v109 = v101;
            v110 = v103;
            v111 = 2;
            goto LABEL_69;
          case 3u:
            v121 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(v101, v102, v121);
            v109 = v101;
            v110 = v103;
            v111 = 3;
            goto LABEL_69;
          case 4u:
            v122 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 32))(v101, v102, v122);
            v109 = v101;
            v110 = v103;
            v111 = 4;
            goto LABEL_69;
          case 5u:
            v123 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v101, v102, v123);
            v109 = v101;
            v110 = v103;
            v111 = 5;
            goto LABEL_69;
          case 6u:
            v124 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v101, v102, v124);
            v109 = v101;
            v110 = v103;
            v111 = 6;
LABEL_69:
            swift_storeEnumTagMultiPayload(v109, v110, v111);
            v120 = v101;
            a3 = v178;
            v119 = v171;
            v107 = v173;
            break;
          default:
            memcpy(v101, v102, *(_QWORD *)(v104 + 64));
            v119 = v104;
            v120 = v101;
            a3 = v178;
            v107 = v173;
            break;
        }
        v106 = v176;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v120, 0, 1, v103);
      }
      v116 = v107;
      v117 = v106;
      v118 = 1;
    }
    else
    {
      if (v94)
      {
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        a3 = v178;
LABEL_73:
        v8[v10[8]] = v9[v10[8]];
        (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
        goto LABEL_108;
      }
      v95 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
      switch(swift_getEnumCaseMultiPayload(v93, v95))
      {
        case 2u:
          v96 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v96 - 8) + 32))(v92, v93, v96);
          v97 = v92;
          v98 = v95;
          v99 = 2;
          goto LABEL_62;
        case 3u:
          v112 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v112 - 8) + 32))(v92, v93, v112);
          v97 = v92;
          v98 = v95;
          v99 = 3;
          goto LABEL_62;
        case 4u:
          v113 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v92, v93, v113);
          v97 = v92;
          v98 = v95;
          v99 = 4;
          goto LABEL_62;
        case 5u:
          v114 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v92, v93, v114);
          v97 = v92;
          v98 = v95;
          v99 = 5;
          goto LABEL_62;
        case 6u:
          v115 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v115 - 8) + 32))(v92, v93, v115);
          v97 = v92;
          v98 = v95;
          v99 = 6;
LABEL_62:
          swift_storeEnumTagMultiPayload(v97, v98, v99);
          break;
        default:
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          break;
      }
      a3 = v178;
      v116 = v92;
      v117 = v19;
      v118 = 0;
    }
    swift_storeEnumTagMultiPayload(v116, v117, v118);
    goto LABEL_73;
  }
LABEL_9:
  v26 = sub_10002A750((uint64_t *)&unk_100654F20);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_108:
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000CA954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CA960);
}

uint64_t sub_1000CA960(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10002A750((uint64_t *)&unk_100654F20);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1000CA9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CA9EC);
}

char *sub_1000CA9EC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10002A750((uint64_t *)&unk_100654F20);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_1000CAA64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100005494(319, (unint64_t *)&unk_100644A80, type metadata accessor for TTRIRemindersBoardDragItemUserInfo);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1005239C0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void (*sub_1000CAAF4(int64x2_t ****a1, uint64_t a2))(_QWORD *a1)
{
  int64x2_t ***v4;
  uint64_t v5;
  int64x2_t **v6;

  v4 = (int64x2_t ***)malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v6 = (int64x2_t **)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_1000CDF24(a2, (uint64_t)v6);
  v4[5] = (int64x2_t **)sub_1000CD640(v4, (uint64_t)v6);
  return sub_1000CAB6C;
}

void sub_1000CAB6C(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_1000CDF68((uint64_t)v2);
  free(v2);
  free(v1);
}

void (*sub_1000CABAC(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1000CD73C(v6, a2, a3);
  return sub_1000CAC18;
}

void sub_1000CAC18(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

double sub_1000CAC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  double result;
  _QWORD v21[3];

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 32), a2);
  v21[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
  v8 = swift_allocObject(&unk_1005F0670, 24, 7);
  swift_weakInit(v8 + 16, v3);
  v9 = swift_allocObject(&unk_1005F0698, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1000CD5FC;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = sub_10002A750((uint64_t *)&unk_100657370);
  v11 = sub_100023FEC(&qword_100644BA8, (uint64_t *)&unk_100657370, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.sink(receiveValue:)(sub_1000CD628, v9, v10, v11);
  swift_release();
  swift_release();
  v12 = swift_beginAccess(v3 + 56, v21, 33, 0);
  AnyCancellable.store(in:)(v3 + 56, v12);
  swift_endAccess(v21);
  swift_release();
  v21[0] = a1;
  v13 = swift_allocObject(&unk_1005F0670, 24, 7);
  swift_weakInit(v13 + 16, v3);
  v14 = sub_10002A750(&qword_100654760);
  v15 = sub_100023FEC(&qword_100644BB0, &qword_100654760, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.sink(receiveValue:)(sub_1000CD630, v13, v14, v15);
  swift_release();
  v16 = swift_beginAccess(v3 + 56, v21, 33, 0);
  AnyCancellable.store(in:)(v3 + 56, v16);
  swift_endAccess(v21);
  swift_release();
  v21[0] = a2;
  v17 = swift_allocObject(&unk_1005F0670, 24, 7);
  swift_weakInit(v17 + 16, v3);
  v18 = swift_allocObject(&unk_1005F06C0, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_1000CD638;
  *(_QWORD *)(v18 + 24) = v17;
  Publisher<>.sink(receiveValue:)(sub_1000CE228, v18, v10, v11);
  swift_release();
  v19 = swift_beginAccess(v3 + 56, v21, 33, 0);
  AnyCancellable.store(in:)(v3 + 56, v19);
  swift_endAccess(v21);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1000CAED8(uint64_t a1)
{
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  if (swift_weakLoadStrong(v1))
  {
    sub_1000CAF2C();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000CAF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  void *v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(_QWORD *);
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  _BOOL8 v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t i;
  int64_t v137;
  unint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  id v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int64_t v158;
  int64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  int64_t v163;
  unint64_t v164;
  int64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int64_t v172;
  int64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  int64_t v177;
  unint64_t v178;
  int64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  uint64_t v194;
  __int16 v195;
  __int16 v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  int64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned __int8 v223;
  unsigned __int8 v224;
  __int128 v225;
  uint64_t v226;
  __int16 v227;
  _QWORD v228[3];
  _BYTE v229[24];
  char v230[24];
  char v231[24];
  char v232[24];
  uint64_t v233;
  int64x2_t v234;
  __int128 v235;
  uint64_t v236;

  v1 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v217 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v197 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v210 = (uint64_t)&v197 - v5;
  __chkstk_darwin(v6);
  v207 = (uint64_t)&v197 - v7;
  __chkstk_darwin(v8);
  v204 = (uint64_t)&v197 - v9;
  __chkstk_darwin(v10);
  v205 = (uint64_t)&v197 - v11;
  __chkstk_darwin(v12);
  v216 = (uint64_t)&v197 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v197 - v15;
  __chkstk_darwin(v17);
  v211 = (uint64_t)&v197 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v197 - v20;
  swift_beginAccess(v0 + 72, v232, 0, 0);
  if (*(_BYTE *)(v0 + 88) == 1)
  {
    swift_beginAccess(v0 + 48, &v219, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
    v23 = sub_1003E6FF4(v22);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  }
  v233 = v23;
  v200 = v0 + 16;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  v206 = v0;
  v201 = v3;
  v198 = v1;
  v199 = v16;
  if (Strong)
  {
    v25 = Strong;
    v26 = *(void **)(Strong + OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_collectionView);
    if (!v26)
      goto LABEL_210;
    *(_QWORD *)&v218 = v25;
    v27 = objc_msgSend(v26, "visibleCells");
    v28 = sub_1000CDFE8();
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0)
        v43 = v29;
      else
        v43 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v29);
      v30 = _CocoaArrayWrapper.endIndex.getter(v43);
      if (v30)
        goto LABEL_8;
    }
    else
    {
      v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v29);
      if (v30)
      {
LABEL_8:
        if (v30 < 1)
        {
          __break(1u);
          goto LABEL_208;
        }
        v31 = 0;
        v32 = _swiftEmptyArrayStorage;
        do
        {
          if ((v29 & 0xC000000000000001) != 0)
            v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
          else
            v33 = *(id *)(v29 + 8 * v31 + 32);
          v34 = v33;
          v35 = type metadata accessor for TTRIBoardColumnCollectionViewCell();
          v36 = swift_dynamicCastClass(v34, v35);
          if (v36
            && (v37 = *(_QWORD *)(v36
                                + OBJC_IVAR____TtC9Reminders33TTRIBoardColumnCollectionViewCell_chromelessBarsStateContributor)) != 0)
          {
            swift_retain();

            if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
              v32 = sub_1004568E8(0, v32[2] + 1, 1, v32);
            v39 = v32[2];
            v38 = v32[3];
            if (v39 >= v38 >> 1)
              v32 = sub_1004568E8((_QWORD *)(v38 > 1), v39 + 1, 1, v32);
            v32[2] = v39 + 1;
            v40 = &v32[2 * v39];
            v40[4] = v37;
            v40[5] = &off_100608B60;
          }
          else
          {

          }
          ++v31;
        }
        while (v30 != v31);
LABEL_29:
        swift_bridgeObjectRelease_n(v29, 2);
        swift_unknownObjectRelease(v218);
        v41 = v32[2];
        if (v41)
          goto LABEL_30;
LABEL_23:
        v42 = _swiftEmptyDictionarySingleton;
        goto LABEL_45;
      }
    }
    v32 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  v32 = _swiftEmptyArrayStorage;
  v41 = _swiftEmptyArrayStorage[2];
  if (!v41)
    goto LABEL_23;
LABEL_30:
  swift_bridgeObjectRetain(v32);
  v44 = 0;
  v42 = _swiftEmptyDictionarySingleton;
  do
  {
    v218 = *(_OWORD *)&v32[2 * v44 + 4];
    v46 = v218;
    v47 = v218 + OBJC_IVAR____TtC9Reminders45TTRIBoardColumnChromelessBarsStateContributor_columnID;
    swift_beginAccess(v218 + OBJC_IVAR____TtC9Reminders45TTRIBoardColumnChromelessBarsStateContributor_columnID, v231, 0, 0);
    sub_1000CDF24(v47, (uint64_t)v21);
    swift_unknownObjectRetain(v46);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
    v234.i64[0] = (uint64_t)v42;
    v50 = sub_1002AA39C((uint64_t)v21);
    v51 = v42[2];
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      goto LABEL_197;
    v54 = v49;
    if (v42[3] >= v53)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v42 = (_QWORD *)v234.i64[0];
        if ((v49 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        sub_1002B0C70();
        v42 = (_QWORD *)v234.i64[0];
        if ((v54 & 1) != 0)
          goto LABEL_31;
      }
    }
    else
    {
      sub_10045B7BC(v53, isUniquelyReferenced_nonNull_native);
      v55 = sub_1002AA39C((uint64_t)v21);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_211;
      v50 = v55;
      v42 = (_QWORD *)v234.i64[0];
      if ((v54 & 1) != 0)
      {
LABEL_31:
        v45 = v42[7];
        swift_unknownObjectRelease(*(_QWORD *)(v45 + 16 * v50));
        *(_OWORD *)(v45 + 16 * v50) = v218;
        goto LABEL_32;
      }
    }
    v42[(v50 >> 6) + 8] |= 1 << v50;
    sub_1000CDF24((uint64_t)v21, v42[6] + *(_QWORD *)(v217 + 72) * v50);
    *(_OWORD *)(v42[7] + 16 * v50) = v218;
    v57 = v42[2];
    v58 = __OFADD__(v57, 1);
    v59 = v57 + 1;
    if (v58)
      goto LABEL_203;
    v42[2] = v59;
LABEL_32:
    ++v44;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1000CDF68((uint64_t)v21);
  }
  while (v41 != v44);
  swift_bridgeObjectRelease(v32);
LABEL_45:
  swift_bridgeObjectRelease(v32);
  v60 = v206;
  *(_QWORD *)&v218 = v206 + 48;
  swift_beginAccess(v206 + 48, v230, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v60 + 48));
  v62 = sub_1003E6FF4(v61);
  swift_bridgeObjectRetain(v42);
  sub_100477390(v63, v62);
  v64 = 0;
  v66 = *(_QWORD *)(v65 + 56);
  v202 = v65 + 56;
  v212 = v65;
  v67 = 1 << *(_BYTE *)(v65 + 32);
  v68 = -1;
  if (v67 < 64)
    v68 = ~(-1 << v67);
  v69 = v68 & v66;
  v208 = (unint64_t)(v67 + 63) >> 6;
  v209 = xmmword_1005205B0;
  v70 = (uint64_t)v199;
  v203 = v42;
  if ((v68 & v66) != 0)
    goto LABEL_51;
  while (2)
  {
    while (2)
    {
      v76 = v64 + 1;
      if (__OFADD__(v64, 1))
        goto LABEL_198;
      if (v76 >= v208)
        goto LABEL_104;
      v77 = *(_QWORD *)(v202 + 8 * v76);
      ++v64;
      if (v77)
        goto LABEL_63;
      v64 = v76 + 1;
      if (v76 + 1 >= v208)
        goto LABEL_104;
      v77 = *(_QWORD *)(v202 + 8 * v64);
      if (v77)
        goto LABEL_63;
      v78 = v76 + 2;
      if (v78 >= v208)
      {
LABEL_104:
        swift_bridgeObjectRelease(v42);
        swift_release();
        v126 = v233;
        v127 = v233 + 56;
        v128 = 1 << *(_BYTE *)(v233 + 32);
        v129 = -1;
        if (v128 < 64)
          v129 = ~(-1 << v128);
        v130 = v129 & *(_QWORD *)(v233 + 56);
        v131 = (unint64_t)(v128 + 63) >> 6;
        swift_bridgeObjectRetain(v233);
        v132 = 0;
        v133 = (uint64_t)v201;
        v134 = v205;
        if (v130)
          goto LABEL_109;
LABEL_110:
        v137 = v132 + 1;
        if (__OFADD__(v132, 1))
          goto LABEL_199;
        if (v137 >= v131)
          goto LABEL_129;
        v138 = *(_QWORD *)(v127 + 8 * v137);
        ++v132;
        if (!v138)
        {
          v132 = v137 + 1;
          if (v137 + 1 >= v131)
            goto LABEL_129;
          v138 = *(_QWORD *)(v127 + 8 * v132);
          if (!v138)
          {
            v139 = v137 + 2;
            if (v139 < v131)
            {
              v138 = *(_QWORD *)(v127 + 8 * v139);
              if (v138)
              {
                v132 = v139;
                goto LABEL_121;
              }
              while (1)
              {
                v132 = v139 + 1;
                if (__OFADD__(v139, 1))
                  goto LABEL_201;
                if (v132 >= v131)
                  break;
                v138 = *(_QWORD *)(v127 + 8 * v132);
                ++v139;
                if (v138)
                  goto LABEL_121;
              }
            }
LABEL_129:
            swift_release();
            v153 = *(_QWORD *)v218;
            v154 = *(_QWORD *)v218 + 64;
            v155 = 1 << *(_BYTE *)(*(_QWORD *)v218 + 32);
            v156 = -1;
            if (v155 < 64)
              v156 = ~(-1 << v155);
            v157 = v156 & *(_QWORD *)(*(_QWORD *)v218 + 64);
            v158 = (unint64_t)(v155 + 63) >> 6;
            swift_bridgeObjectRetain_n(*(_QWORD *)v218, 2);
            v159 = 0;
            while (1)
            {
              if (v157)
              {
                v160 = __clz(__rbit64(v157));
                v157 &= v157 - 1;
                v161 = v160 | (v159 << 6);
              }
              else
              {
                v163 = v159 + 1;
                if (__OFADD__(v159, 1))
                  goto LABEL_204;
                if (v163 >= v158)
                {
LABEL_154:
                  swift_release();
                  swift_bridgeObjectRelease(v153);
                  v166 = 0;
                  goto LABEL_155;
                }
                v164 = *(_QWORD *)(v154 + 8 * v163);
                ++v159;
                if (!v164)
                {
                  v159 = v163 + 1;
                  if (v163 + 1 >= v158)
                    goto LABEL_154;
                  v164 = *(_QWORD *)(v154 + 8 * v159);
                  if (!v164)
                  {
                    v159 = v163 + 2;
                    if (v163 + 2 >= v158)
                      goto LABEL_154;
                    v164 = *(_QWORD *)(v154 + 8 * v159);
                    if (!v164)
                    {
                      v159 = v163 + 3;
                      if (v163 + 3 >= v158)
                        goto LABEL_154;
                      v164 = *(_QWORD *)(v154 + 8 * v159);
                      if (!v164)
                      {
                        v159 = v163 + 4;
                        if (v163 + 4 >= v158)
                          goto LABEL_154;
                        v164 = *(_QWORD *)(v154 + 8 * v159);
                        if (!v164)
                        {
                          v165 = v163 + 5;
                          if (v165 >= v158)
                            goto LABEL_154;
                          v164 = *(_QWORD *)(v154 + 8 * v165);
                          if (!v164)
                          {
                            while (1)
                            {
                              v159 = v165 + 1;
                              if (__OFADD__(v165, 1))
                                break;
                              if (v159 >= v158)
                                goto LABEL_154;
                              v164 = *(_QWORD *)(v154 + 8 * v159);
                              ++v165;
                              if (v164)
                                goto LABEL_152;
                            }
LABEL_208:
                            __break(1u);
                            goto LABEL_209;
                          }
                          v159 = v165;
                        }
                      }
                    }
                  }
                }
LABEL_152:
                v157 = (v164 - 1) & v164;
                v161 = __clz(__rbit64(v164)) + (v159 << 6);
              }
              sub_1000CE130(*(_QWORD *)(v153 + 56) + 32 * v161, (uint64_t)&v225);
              sub_100076BAC((uint64_t)&v225, (uint64_t)&v220);
              v162 = v223;
              sub_1000CE164(&v220);
              if (v162 == 1)
              {
                swift_release();
                swift_bridgeObjectRelease(v153);
                v166 = 1;
LABEL_155:
                v167 = *(_QWORD *)v218;
                v168 = *(_QWORD *)v218 + 64;
                v169 = 1 << *(_BYTE *)(*(_QWORD *)v218 + 32);
                v170 = -1;
                if (v169 < 64)
                  v170 = ~(-1 << v169);
                v171 = v170 & *(_QWORD *)(*(_QWORD *)v218 + 64);
                v172 = (unint64_t)(v169 + 63) >> 6;
                swift_bridgeObjectRetain_n(*(_QWORD *)v218, 2);
                v173 = 0;
                while (1)
                {
                  if (v171)
                  {
                    v174 = __clz(__rbit64(v171));
                    v171 &= v171 - 1;
                    v175 = v174 | (v173 << 6);
                  }
                  else
                  {
                    v177 = v173 + 1;
                    if (__OFADD__(v173, 1))
                      goto LABEL_205;
                    if (v177 >= v172)
                    {
LABEL_180:
                      swift_release();
                      swift_bridgeObjectRelease(v167);
                      v180 = 0;
LABEL_181:
                      swift_bridgeObjectRelease(v126);
                      v181 = v206;
                      v182 = *(unsigned __int8 *)(v206 + 64);
                      if (v182 == 2 || ((((v182 & 1) == 0) ^ v166) & 1) == 0)
                      {
                        *(_BYTE *)(v206 + 64) = v166;
                        v183 = swift_unknownObjectWeakLoadStrong(v200);
                        if (v183)
                        {
                          v184 = v183;
                          v185 = *(_QWORD *)(v183
                                           + OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_preferredChromelessBarStates);
                          swift_beginAccess(v185 + 16, &v225, 0, 0);
                          v186 = HIBYTE(*(unsigned __int16 *)(v185 + 16)) & 1;
                          if (*(_WORD *)(v185 + 16) == 2)
                            LOBYTE(v186) = 0;
                          LOBYTE(v220) = v166;
                          BYTE1(v220) = v186;
                          v187 = sub_1000CE190();
                          TTRObservableViewModel<A>.update(with:forcePublish:)(&v220, 0, v187);
                          swift_unknownObjectRelease(v184);
                        }
                      }
                      v188 = *(unsigned __int8 *)(v181 + 65);
                      if (v188 == 2 || ((((v188 & 1) == 0) ^ v180) & 1) == 0)
                      {
                        *(_BYTE *)(v181 + 65) = v180;
                        v189 = swift_unknownObjectWeakLoadStrong(v200);
                        if (v189)
                        {
                          v190 = v189;
                          v191 = *(_QWORD *)(v189
                                           + OBJC_IVAR____TtC9Reminders36TTRIRemindersBoardMainViewController_preferredChromelessBarStates);
                          swift_beginAccess(v191 + 16, &v220, 0, 0);
                          v229[0] = *(_BYTE *)(v191 + 16) & 1;
                          v229[1] = v180 ^ 1;
                          v192 = sub_1000CE190();
                          TTRObservableViewModel<A>.update(with:forcePublish:)(v229, 0, v192);
                          swift_unknownObjectRelease(v190);
                        }
                      }
                      if (qword_10063D390 != -1)
                        goto LABEL_206;
                      goto LABEL_192;
                    }
                    v178 = *(_QWORD *)(v168 + 8 * v177);
                    ++v173;
                    if (!v178)
                    {
                      v173 = v177 + 1;
                      if (v177 + 1 >= v172)
                        goto LABEL_180;
                      v178 = *(_QWORD *)(v168 + 8 * v173);
                      if (!v178)
                      {
                        v173 = v177 + 2;
                        if (v177 + 2 >= v172)
                          goto LABEL_180;
                        v178 = *(_QWORD *)(v168 + 8 * v173);
                        if (!v178)
                        {
                          v173 = v177 + 3;
                          if (v177 + 3 >= v172)
                            goto LABEL_180;
                          v178 = *(_QWORD *)(v168 + 8 * v173);
                          if (!v178)
                          {
                            v173 = v177 + 4;
                            if (v177 + 4 >= v172)
                              goto LABEL_180;
                            v178 = *(_QWORD *)(v168 + 8 * v173);
                            if (!v178)
                            {
                              v179 = v177 + 5;
                              if (v179 >= v172)
                                goto LABEL_180;
                              v178 = *(_QWORD *)(v168 + 8 * v179);
                              if (!v178)
                              {
                                while (1)
                                {
                                  v173 = v179 + 1;
                                  if (__OFADD__(v179, 1))
                                    break;
                                  if (v173 >= v172)
                                    goto LABEL_180;
                                  v178 = *(_QWORD *)(v168 + 8 * v173);
                                  ++v179;
                                  if (v178)
                                    goto LABEL_178;
                                }
LABEL_209:
                                __break(1u);
LABEL_210:
                                __break(1u);
LABEL_211:
                                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v198);
                                __break(1u);
                                return;
                              }
                              v173 = v179;
                            }
                          }
                        }
                      }
                    }
LABEL_178:
                    v171 = (v178 - 1) & v178;
                    v175 = __clz(__rbit64(v178)) + (v173 << 6);
                  }
                  sub_1000CE130(*(_QWORD *)(v167 + 56) + 32 * v175, (uint64_t)&v225);
                  sub_100076BAC((uint64_t)&v225, (uint64_t)&v220);
                  v176 = v224;
                  sub_1000CE164(&v220);
                  if (v176 == 1)
                  {
                    swift_release();
                    swift_bridgeObjectRelease(v167);
                    v180 = 1;
                    goto LABEL_181;
                  }
                }
              }
            }
          }
        }
LABEL_121:
        v130 = (v138 - 1) & v138;
        for (i = __clz(__rbit64(v138)) + (v132 << 6); ; i = v135 | (v132 << 6))
        {
          v140 = v210;
          sub_1000CDF24(*(_QWORD *)(v126 + 48) + *(_QWORD *)(v217 + 72) * i, v210);
          sub_1000CDFA4(v140, v133);
          v141 = (uint64_t *)v218;
          swift_beginAccess(v218, v229, 32, 0);
          v142 = *v141;
          if (*(_QWORD *)(v142 + 16) && (v143 = sub_1002AA39C(v133), (v144 & 1) != 0))
          {
            sub_1000CE130(*(_QWORD *)(v142 + 56) + 32 * v143, (uint64_t)&v220);
            sub_100076BAC((uint64_t)&v220, (uint64_t)&v225);
            swift_endAccess(v229);
            if (v225 != __PAIR128__(1, 0))
            {
              v145 = swift_unknownObjectWeakLoadStrong(&v225);
              if (v145)
              {
                v146 = v145;
                v147 = *(_QWORD *)(v145
                                 + OBJC_IVAR____TtC9Reminders45TTRIBoardColumnChromelessBarsStateContributor_chromelessBarsContributorConfiguration
                                 + 32);
                v148 = *(_OWORD *)(v145
                                 + OBJC_IVAR____TtC9Reminders45TTRIBoardColumnChromelessBarsStateContributor_chromelessBarsContributorConfiguration
                                 + 16);
                v234 = *(int64x2_t *)(v145
                                    + OBJC_IVAR____TtC9Reminders45TTRIBoardColumnChromelessBarsStateContributor_chromelessBarsContributorConfiguration);
                v235 = v148;
                v236 = v147;
                v149 = (id)v234.i64[0];
                v150 = v206;
                v227 = sub_1000CCB40((uint64_t)&v234) & 0x101;
                sub_1000CDF24((uint64_t)v201, v134);
                swift_beginAccess(v218, v229, 33, 0);
                sub_1000CE130((uint64_t)&v225, (uint64_t)&v220);
                v151 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v150 + 48));
                v228[0] = *(_QWORD *)(v150 + 48);
                *(_QWORD *)(v150 + 48) = 0x8000000000000000;
                sub_100098348((uint64_t)&v220, v134, v151);
                v152 = *(_QWORD *)(v150 + 48);
                *(_QWORD *)(v150 + 48) = v228[0];
                v133 = (uint64_t)v201;
                swift_bridgeObjectRelease(v152);
                sub_1000CDF68(v134);
                swift_endAccess(v229);
                sub_100037F50((id *)&v234);
                swift_unknownObjectRelease(v146);
              }
            }
            sub_1000CDF68(v133);
            sub_1000CE164(&v225);
            if (!v130)
              goto LABEL_110;
          }
          else
          {
            swift_endAccess(v229);
            sub_1000CDF68(v133);
            if (!v130)
              goto LABEL_110;
          }
LABEL_109:
          v135 = __clz(__rbit64(v130));
          v130 &= v130 - 1;
        }
      }
      v77 = *(_QWORD *)(v202 + 8 * v78);
      if (!v77)
      {
        while (1)
        {
          v64 = v78 + 1;
          if (__OFADD__(v78, 1))
            goto LABEL_200;
          if (v64 >= v208)
            goto LABEL_104;
          v77 = *(_QWORD *)(v202 + 8 * v64);
          ++v78;
          if (v77)
            goto LABEL_63;
        }
      }
      v64 = v78;
LABEL_63:
      v69 = (v77 - 1) & v77;
      v75 = __clz(__rbit64(v77)) + (v64 << 6);
LABEL_64:
      v79 = v211;
      v80 = *(_QWORD *)(v217 + 72);
      sub_1000CDF24(*(_QWORD *)(v212 + 48) + v80 * v75, v211);
      sub_1000CDFA4(v79, v70);
      if (v42[2] && (v81 = sub_1002AA39C(v70), (v82 & 1) != 0))
      {
        v83 = (_QWORD *)(v42[7] + 16 * v81);
        v84 = *v83;
        v85 = v83[1];
        swift_unknownObjectRetain(*v83);
      }
      else
      {
        v84 = 0;
        v85 = 0;
      }
      v86 = (uint64_t *)v218;
      swift_beginAccess(v218, &v220, 32, 0);
      v87 = *v86;
      if (*(_QWORD *)(v87 + 16) && (v88 = sub_1002AA39C(v70), (v89 & 1) != 0))
      {
        sub_1000CE130(*(_QWORD *)(v87 + 56) + 32 * v88, (uint64_t)&v234);
        v90 = v234.i64[1];
        if (v234.i64[0] != 1)
        {
LABEL_77:
          sub_1000CE024((uint64_t)&v234, (uint64_t)&v225);
          sub_1000073A0((uint64_t)&v234, (uint64_t *)&unk_100640F00);
          swift_endAccess(&v220);
          if (v84)
            goto LABEL_78;
LABEL_75:
          sub_1000CE024((uint64_t)&v225, (uint64_t)&v234);
          if (*(_OWORD *)&v234 == __PAIR128__(1, 0))
          {
            sub_1000073A0((uint64_t)&v234, &qword_100644BC0);
          }
          else
          {
            v94 = v235;
            swift_retain();
            sub_1000CD23C((uint64_t)&v234);
            if (v94)
            {
              AnyCancellable.cancel()();
              swift_release();
            }
          }
          v95 = v207;
          sub_1000CDF24(v70, v207);
          swift_beginAccess(v218, &v220, 33, 0);
          v97 = sub_1000CAAF4((int64x2_t ****)&v234, v95);
          v98 = v96;
          if (*v96 != 1 || v96[1] != 1)
          {
            sub_1000073A0((uint64_t)v96, &qword_100644BC0);
            *(_OWORD *)v98 = v209;
            v98[2] = 0;
          }
          ((void (*)(int64x2_t *, _QWORD))v97)(&v234, 0);
          swift_endAccess(&v220);
          sub_1000CDF68(v207);
LABEL_91:
          sub_1000073A0((uint64_t)&v225, &qword_100644BC0);
          sub_1000CDF68(v70);
          if (!v69)
            continue;
LABEL_51:
          v74 = __clz(__rbit64(v69));
          v69 &= v69 - 1;
          v75 = v74 | (v64 << 6);
          goto LABEL_64;
        }
      }
      else
      {
        v234 = vdupq_n_s64(1uLL);
        *(_QWORD *)&v235 = 0;
        WORD4(v235) = 0;
        v90 = 1;
      }
      break;
    }
    if (v90 != 1)
      goto LABEL_77;
    sub_1000073A0((uint64_t)&v234, (uint64_t *)&unk_100640F00);
    swift_endAccess(&v220);
    v225 = v209;
    v226 = 0;
    if (!v84)
      goto LABEL_75;
LABEL_78:
    sub_1000CE024((uint64_t)&v225, (uint64_t)&v220);
    if (!v220 && v221 == 1)
    {
      swift_unknownObjectRetain(v84);
      sub_1000073A0((uint64_t)&v220, &qword_100644BC0);
      goto LABEL_95;
    }
    sub_1000CE0F8((uint64_t)&v220, (uint64_t)&v234);
    v91 = swift_unknownObjectWeakLoadStrong(&v234);
    if (!v91)
    {
      swift_unknownObjectRetain(v84);
      sub_1000CE0F8((uint64_t)&v234, (uint64_t)&v220);
      goto LABEL_94;
    }
    v92 = v91;
    swift_unknownObjectRetain(v84);
    swift_unknownObjectRelease(v92);
    sub_1000CE0F8((uint64_t)&v234, (uint64_t)&v220);
    if (v92 != v84)
    {
LABEL_94:
      sub_1000CD23C((uint64_t)&v220);
      goto LABEL_95;
    }
    v93 = v222;
    sub_1000CD23C((uint64_t)&v220);
    if (v93)
    {
      swift_unknownObjectRelease_n(v84, 2);
      goto LABEL_91;
    }
LABEL_95:
    v214 = v64;
    v215 = v80;
    v213 = v69;
    v234.i64[0] = *(_QWORD *)(v84
                            + OBJC_IVAR____TtC9Reminders45TTRIBoardColumnChromelessBarsStateContributor_stateChangeSubject);
    v99 = sub_10002A750(&qword_100657400);
    v100 = sub_100023FEC(&qword_100644BC8, &qword_100657400, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v234.i64[0] = Publisher.eraseToAnyPublisher()(v99, v100);
    v101 = swift_allocObject(&unk_1005F0670, 24, 7);
    v102 = v84;
    v103 = v70;
    v104 = v206;
    swift_weakInit(v101 + 16, v206);
    v105 = sub_10002A750(&qword_100644BD0);
    v106 = sub_100023FEC(&qword_100644BD8, &qword_100644BD0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v107 = Publisher<>.sink(receiveValue:)(sub_1000CE06C, v101, v105, v106);
    swift_release();
    swift_release();
    v221 = v85;
    swift_unknownObjectWeakInit(&v220, v102);
    v222 = v107;
    v108 = v216;
    sub_1000CDF24(v103, v216);
    sub_1000CE074((uint64_t)&v220, (uint64_t)v229);
    swift_beginAccess(v218, v228, 33, 0);
    swift_retain();
    v109 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v104 + 48));
    v234.i64[0] = *(_QWORD *)(v104 + 48);
    v110 = v234.i64[0];
    *(_QWORD *)(v104 + 48) = 0x8000000000000000;
    v112 = sub_1002AA39C(v108);
    v113 = *(_QWORD *)(v110 + 16);
    v114 = (v111 & 1) == 0;
    v115 = v113 + v114;
    if (!__OFADD__(v113, v114))
    {
      v116 = v111;
      if (*(_QWORD *)(v110 + 24) >= v115)
      {
        v70 = v103;
        v119 = v102;
        if ((v109 & 1) == 0)
        {
          sub_1002B0A38();
          v110 = v234.i64[0];
        }
      }
      else
      {
        sub_10045B42C(v115, v109);
        v110 = v234.i64[0];
        v117 = sub_1002AA39C(v216);
        if ((v116 & 1) != (v118 & 1))
          goto LABEL_211;
        v112 = v117;
        v70 = v103;
        v119 = v102;
      }
      v42 = v203;
      v120 = v215;
      v121 = (_QWORD *)v218;
      v122 = *(_QWORD *)v218;
      *(_QWORD *)v218 = v110;
      swift_bridgeObjectRelease(v122);
      v123 = (_QWORD *)*v121;
      if ((v116 & 1) != 0)
      {
        v71 = 32 * v112;
      }
      else
      {
        v234 = (int64x2_t)v209;
        *(_QWORD *)&v235 = 0;
        WORD4(v235) = 0;
        v123[(v112 >> 6) + 8] |= 1 << v112;
        sub_1000CDF24(v216, v123[6] + v112 * v120);
        v71 = 32 * v112;
        sub_100076BAC((uint64_t)&v234, v123[7] + 32 * v112);
        v124 = v123[2];
        v58 = __OFADD__(v124, 1);
        v125 = v124 + 1;
        if (v58)
          goto LABEL_202;
        v123[2] = v125;
      }
      sub_1000CE0B0((uint64_t)v229, v123[7] + v71);
      swift_endAccess(v228);
      sub_1000CDF68(v216);
      v72 = v204;
      sub_1000CDF24(v70, v204);
      v73 = v205;
      sub_1004809C4(v205, v72);
      swift_unknownObjectRelease_n(v119, 2);
      swift_release();
      sub_1000CDF68(v73);
      sub_1000CD23C((uint64_t)&v220);
      sub_1000073A0((uint64_t)&v225, &qword_100644BC0);
      sub_1000CDF68(v70);
      v69 = v213;
      v64 = v214;
      if (!v213)
        continue;
      goto LABEL_51;
    }
    break;
  }
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  swift_once(&qword_10063D390, sub_1000CC754);
LABEL_192:
  v193 = byte_100644AC0;
  v194 = qword_100644AC8;
  if (HIBYTE(word_100644AD0))
    v195 = 256;
  else
    v195 = 0;
  v196 = v195 | word_100644AD0;
  swift_bridgeObjectRetain(qword_100644AC8);
  sub_1000CC7E4(v193, v194, v196);
}

double sub_1000CC2E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  if (swift_weakLoadStrong(v3))
  {
    sub_1000CC344(v2);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_1000CC344(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  _BYTE v29[24];
  int64x2_t v30;
  uint64_t v31;
  __int16 v32;
  char v33[24];

  v3 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)(v1 + 48);
  swift_beginAccess(v1 + 48, v33, 0, 0);
  v8 = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v8);
  sub_1000CDB80(v9, a1);
  v11 = v10;
  swift_bridgeObjectRelease(a1);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(unsigned __int8 *)(v4 + 80);
    v26 = v11;
    v14 = v11 + ((v13 + 32) & ~v13);
    v15 = *(_QWORD *)(v4 + 72);
    v27 = vdupq_n_s64(1uLL);
    do
    {
      sub_1000CDF24(v14, (uint64_t)v6);
      swift_beginAccess(v7, v29, 33, 0);
      v16 = *v7;
      swift_bridgeObjectRetain(*v7);
      v17 = sub_1002AA39C((uint64_t)v6);
      v19 = v18;
      swift_bridgeObjectRelease(v16);
      if ((v19 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
        v21 = *v7;
        v28 = *v7;
        *v7 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1002B0A38();
          v21 = v28;
        }
        sub_1000CDF68(*(_QWORD *)(v21 + 48) + v17 * v15);
        sub_100076BAC(*(_QWORD *)(v21 + 56) + 32 * v17, (uint64_t)&v30);
        sub_1002AE144(v17, v21);
        v22 = *v7;
        *v7 = v21;
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        v30 = v27;
        v31 = 0;
        v32 = 0;
      }
      swift_endAccess(v29);
      sub_1000073A0((uint64_t)&v30, (uint64_t *)&unk_100640F00);
      sub_1000CDF68((uint64_t)v6);
      v14 += v15;
      --v12;
    }
    while (v12);
    v23 = v26;
  }
  else
  {
    v23 = v11;
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v23).n128_u64[0];
  return result;
}

double sub_1000CC52C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  _BYTE v16[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    swift_beginAccess(Strong + 72, &v15, 1, 0);
    *(_BYTE *)(v4 + 72) = 1;
    v5 = *(_QWORD *)(v4 + 80);
    v6 = *(unsigned __int8 *)(v4 + 88);
    v7 = *(unsigned __int8 *)(v4 + 89);
    v8 = qword_10063D390;
    swift_bridgeObjectRetain(v5);
    if (v8 != -1)
      swift_once(&qword_10063D390, sub_1000CC754);
    if (byte_100644AC0 == 1)
    {
      v9 = HIBYTE(word_100644AD0);
      v10 = word_100644AD0;
      v11 = sub_10034169C(v5, qword_100644AC8);
      swift_bridgeObjectRelease(v5);
      if ((v11 & 1) != 0 && ((v6 ^ v10) & 1) == 0 && ((v7 ^ v9) & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      swift_bridgeObjectRelease(v5);
    }
    v13 = *(_QWORD *)(v4 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 32), v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);
LABEL_11:
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000CC65C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t ObjectType;
  _BYTE v11[24];

  swift_beginAccess(v0 + 72, v11, 1, 0);
  *(_BYTE *)(v0 + 88) = 1;
  v1 = *(unsigned __int8 *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(unsigned __int8 *)(v0 + 89);
  v4 = qword_10063D390;
  swift_bridgeObjectRetain(v2);
  if (v4 != -1)
    swift_once(&qword_10063D390, sub_1000CC754);
  if (v1 != byte_100644AC0)
  {
    swift_bridgeObjectRelease(v2);
LABEL_8:
    v9 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32), v5);
    (*(void (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
    return;
  }
  v6 = HIBYTE(word_100644AD0);
  v7 = word_100644AD0;
  v8 = sub_10034169C(v2, qword_100644AC8);
  swift_bridgeObjectRelease(v2);
  if ((v8 & 1) == 0 || !v7 || ((v3 ^ v6) & 1) != 0)
    goto LABEL_8;
}

void sub_1000CC754()
{
  byte_100644AC0 = 0;
  qword_100644AC8 = (uint64_t)&_swiftEmptySetSingleton;
  word_100644AD0 = 0;
}

uint64_t sub_1000CC774(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  char v7;
  unsigned int v8;

  if (*a1 != *a2)
    return 0;
  v3 = a1[17];
  v4 = a2[17];
  v5 = a2[16];
  v6 = a1[16];
  v7 = sub_10034169C(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  if (((v5 ^ v6) & 1) != 0)
    v8 = 0;
  else
    v8 = v3 ^ v4 ^ 1;
  if ((v7 & 1) != 0)
    return v8;
  else
    return 0;
}

void sub_1000CC7E4(char a1, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t ObjectType;
  _BYTE v19[24];

  swift_beginAccess(v3 + 72, v19, 1, 0);
  v7 = *(_QWORD *)(v3 + 80);
  *(_BYTE *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a2;
  *(_BYTE *)(v3 + 88) = a3 & 1;
  *(_BYTE *)(v3 + 89) = HIBYTE(a3) & 1;
  swift_bridgeObjectRelease(v7);
  v8 = *(unsigned __int8 *)(v3 + 72);
  v9 = *(_QWORD *)(v3 + 80);
  v10 = *(unsigned __int8 *)(v3 + 88);
  v11 = *(unsigned __int8 *)(v3 + 89);
  v12 = qword_10063D390;
  swift_bridgeObjectRetain(v9);
  if (v12 != -1)
    swift_once(&qword_10063D390, sub_1000CC754);
  if (v8 != byte_100644AC0)
  {
    swift_bridgeObjectRelease(v9);
LABEL_8:
    v17 = *(_QWORD *)(v3 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 32), v13);
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);
    return;
  }
  v14 = HIBYTE(word_100644AD0);
  v15 = word_100644AD0;
  v16 = sub_10034169C(v9, qword_100644AC8);
  swift_bridgeObjectRelease(v9);
  if ((v16 & 1) == 0 || ((v10 ^ v15) & 1) != 0 || ((v11 ^ v14) & 1) != 0)
    goto LABEL_8;
}

uint64_t sub_1000CC910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t ObjectType;
  _BYTE v27[24];
  _BYTE v28[24];

  v4 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v4);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10002A750(&qword_100644BE8);
  __chkstk_darwin(v7);
  v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  v11 = sub_10002A750(&qword_100644BF0);
  v12 = v11;
  if (Strong)
  {
    v13 = (uint64_t)&v9[*(int *)(v11 + 48)];
    sub_1000CDF24(a1, (uint64_t)v6);
    swift_beginAccess(Strong + 72, v27, 33, 0);
    v14 = sub_1004809C4(v13, (uint64_t)v6);
    swift_endAccess(v27);
    v15 = *(unsigned __int8 *)(Strong + 72);
    v16 = *(_QWORD *)(Strong + 80);
    v17 = *(unsigned __int8 *)(Strong + 88);
    v18 = *(unsigned __int8 *)(Strong + 89);
    v19 = qword_10063D390;
    swift_bridgeObjectRetain(v16);
    if (v19 != -1)
      swift_once(&qword_10063D390, sub_1000CC754);
    if (v15 == byte_100644AC0)
    {
      v21 = HIBYTE(word_100644AD0);
      v22 = word_100644AD0;
      v23 = sub_10034169C(v16, qword_100644AC8);
      swift_bridgeObjectRelease(v16);
      if ((v23 & 1) != 0 && ((v17 ^ v22) & 1) == 0 && ((v18 ^ v21) & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      swift_bridgeObjectRelease(v16);
    }
    v24 = *(_QWORD *)(Strong + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(Strong + 32), v20);
    (*(void (**)(uint64_t, uint64_t))(v24 + 16))(ObjectType, v24);
LABEL_11:
    swift_release();
    *v9 = v14 & 1;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 0, 1, v12);
    return sub_1000073A0((uint64_t)v9, &qword_100644BE8);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  return sub_1000073A0((uint64_t)v9, &qword_100644BE8);
}

uint64_t sub_1000CCB40(uint64_t a1)
{
  uint64_t v1;
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *Strong;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t ObjectType;
  void *v22;
  id v23;
  double v24;
  double v25;
  double MaxY;
  double v27;
  CGFloat v28;
  CGFloat v29;
  double v30;
  double v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  _BOOL4 v40;
  _BOOL4 v41;
  int v42;
  CGFloat Width;
  CGFloat rect1;
  CGFloat rect1_8;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  v3 = *(id *)a1;
  objc_msgSend(v3, "bounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  objc_msgSend(v3, "safeAreaInsets");
  v13 = v12;
  v15 = v14;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 16);
  rect1_8 = v13;
  if (Strong)
  {
    v17 = Strong;
    v18 = objc_msgSend(Strong, "parentViewController");
    if (v18)
    {
      v20 = v18;
      ObjectType = swift_getObjectType(v18, v19);
      if (swift_conformsToProtocol2(ObjectType, &protocol descriptor for TTRIShowRemindersContainerViewControllerType))
        v22 = v20;
      else
        v22 = 0;
      if (v22)
      {
        v23 = sub_10028EF28();
        swift_unknownObjectRelease(v17);

        if ((objc_msgSend(v23, "isHidden") & 1) != 0)
        {

        }
        else
        {
          objc_msgSend(v23, "bounds");
          objc_msgSend(v3, "convertPoint:fromCoordinateSpace:", v23);
          v25 = v24;
          v47.origin.x = v5;
          v47.origin.y = v7;
          v47.size.width = v9;
          v47.size.height = v11;
          MaxY = CGRectGetMaxY(v47);

          v27 = MaxY - v25;
          if (MaxY - v25 < 0.0)
            v27 = 0.0;
          if (v15 <= v27)
            v15 = v27;
        }
      }
      else
      {
        swift_unknownObjectRelease(v17);

      }
    }
    else
    {
      swift_unknownObjectRelease(v17);
    }
  }
  v48.origin.x = v5;
  v48.origin.y = v7;
  v48.size.width = v9;
  v48.size.height = v11;
  Width = CGRectGetWidth(v48);
  v49.origin.x = v5;
  v49.origin.y = v7;
  v49.size.width = v9;
  v49.size.height = v11;
  rect1 = CGRectGetMinX(v49);
  v50.origin.x = v5;
  v50.origin.y = v7;
  v50.size.width = v9;
  v50.size.height = v11;
  v28 = CGRectGetMaxY(v50) - v15;
  v51.origin.x = v5;
  v51.origin.y = v7;
  v51.size.width = v9;
  v51.size.height = v11;
  v29 = CGRectGetWidth(v51);
  objc_msgSend(v3, "contentSize");
  v32 = sub_100038048(0.0, 0.0, v30, v31, *(double *)(a1 + 8), *(double *)(a1 + 16));
  v52.origin.x = v5;
  v33 = v15;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v52.origin.y = v7;
  v52.size.width = Width;
  v52.size.height = rect1_8;
  v54.origin.x = v32;
  v54.origin.y = v35;
  v54.size.width = v37;
  v54.size.height = v39;
  v40 = CGRectIntersectsRect(v52, v54);
  v53.origin.x = rect1;
  v53.origin.y = v28;
  v53.size.width = v29;
  v53.size.height = v33;
  v55.origin.x = v32;
  v55.origin.y = v35;
  v55.size.width = v37;
  v55.size.height = v39;
  v41 = CGRectIntersectsRect(v53, v55);
  sub_100037F50((id *)a1);
  if (v41)
    v42 = 256;
  else
    v42 = 0;
  return v42 | v40;
}

uint64_t sub_1000CCDCC()
{
  _QWORD *v0;

  sub_1000381C8((uint64_t)(v0 + 2));
  swift_unknownObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocClassInstance(v0, 90, 7);
}

uint64_t type metadata accessor for TTRIRemindersBoardChromelessBarsController()
{
  return objc_opt_self(_TtC9Reminders42TTRIRemindersBoardChromelessBarsController);
}

uint64_t initializeWithCopy for TTRIBoardColumnDraggingAnimationCellBackgroundView.Shadow(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for TTRIBoardColumnDraggingAnimationCellBackgroundView.Shadow(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for TTRIBoardColumnDraggingAnimationCellBackgroundView.Shadow(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for TTRIBoardColumnChromelessBarsContributorConfiguration()
{
  return &type metadata for TTRIBoardColumnChromelessBarsContributorConfiguration;
}

uint64_t sub_1000CCF24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for TTRIRemindersBoardChromelessBarsController.InvalidationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for TTRIRemindersBoardChromelessBarsController.InvalidationContext(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TTRIRemindersBoardChromelessBarsController.InvalidationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRIRemindersBoardChromelessBarsController.InvalidationContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRIRemindersBoardChromelessBarsController.InvalidationContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRIRemindersBoardChromelessBarsController.InvalidationContext()
{
  return &type metadata for TTRIRemindersBoardChromelessBarsController.InvalidationContext;
}

_QWORD *destroy for TTRIRemindersBoardChromelessBarsController.ColumnState(_QWORD *result)
{
  BOOL v1;
  _QWORD *v2;

  if (*result)
    v1 = 0;
  else
    v1 = result[1] == 1;
  if (!v1)
  {
    v2 = result;
    swift_unknownObjectWeakDestroy(result);
    return (_QWORD *)swift_release(v2[2]);
  }
  return result;
}

uint64_t initializeWithCopy for TTRIRemindersBoardChromelessBarsController.ColumnState(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;

  if (*(_QWORD *)a2)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a2 + 8) == 1;
  if (v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    swift_unknownObjectWeakCopyInit(a1, a2);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain(v5);
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for TTRIRemindersBoardChromelessBarsController.ColumnState(uint64_t a1, __int128 *a2)
{
  BOOL v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  __int128 v8;

  if (*(_QWORD *)a2)
    v4 = 0;
  else
    v4 = *((_QWORD *)a2 + 1) == 1;
  v5 = v4;
  if (*(_QWORD *)a1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 8) == 1;
  if (v6)
  {
    if ((v5 & 1) != 0)
    {
      v8 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v8;
    }
    else
    {
      swift_unknownObjectWeakCopyInit(a1, a2);
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_retain();
    }
  }
  else if ((v5 & 1) != 0)
  {
    sub_1000CD23C(a1);
    v7 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = v7;
  }
  else
  {
    swift_unknownObjectWeakCopyAssign();
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_retain();
    swift_release();
  }
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  return a1;
}

uint64_t sub_1000CD23C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  swift_release(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t initializeWithTake for TTRIRemindersBoardChromelessBarsController.ColumnState(uint64_t result, uint64_t a2)
{
  BOOL v3;

  if (*(_QWORD *)a2)
    v3 = 0;
  else
    v3 = *(_QWORD *)(a2 + 8) == 1;
  if (v3)
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    result = swift_unknownObjectWeakTakeInit(result, a2);
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  }
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  return result;
}

uint64_t assignWithTake for TTRIRemindersBoardChromelessBarsController.ColumnState(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  BOOL v6;

  if (*(_QWORD *)a2)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a2 + 8) == 1;
  v5 = v4;
  if (*(_QWORD *)a1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 8) == 1;
  if (v6)
  {
    if ((v5 & 1) == 0)
    {
      swift_unknownObjectWeakTakeInit(a1, a2);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      goto LABEL_17;
    }
  }
  else
  {
    if ((v5 & 1) == 0)
    {
      swift_unknownObjectWeakTakeAssign();
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      swift_release();
      goto LABEL_17;
    }
    sub_1000CD23C(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_17:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRIRemindersBoardChromelessBarsController.ColumnState(uint64_t a1, unsigned int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v3 = (*(_DWORD *)a1 & 0x7FFFFFFF) - 1;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRIRemindersBoardChromelessBarsController.ColumnState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
    {
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRIRemindersBoardChromelessBarsController.ColumnState()
{
  return &type metadata for TTRIRemindersBoardChromelessBarsController.ColumnState;
}

uint64_t destroy for TTRIRemindersBoardChromelessBarsController.TrackingContext(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for TTRIRemindersBoardChromelessBarsController.TrackingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit(a1, a2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for TTRIRemindersBoardChromelessBarsController.TrackingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v5);
  return a1;
}

__n128 initializeWithTake for TTRIRemindersBoardChromelessBarsController.TrackingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  v3 = swift_unknownObjectWeakTakeInit(a1, a2);
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

uint64_t assignWithTake for TTRIRemindersBoardChromelessBarsController.TrackingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(swift_unknownObjectWeakTakeAssign() + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRIRemindersBoardChromelessBarsController.TrackingContext(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRIRemindersBoardChromelessBarsController.TrackingContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRIRemindersBoardChromelessBarsController.TrackingContext()
{
  return &type metadata for TTRIRemindersBoardChromelessBarsController.TrackingContext;
}

uint64_t sub_1000CD5D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000CD5FC()
{
  uint64_t v0;

  return sub_1000CAED8(v0);
}

uint64_t sub_1000CD604()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CD628(uint64_t a1)
{
  uint64_t v1;

  return sub_100360428(a1, *(uint64_t (**)(void))(v1 + 16));
}

double sub_1000CD630(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000CC2E8(a1, v1);
}

double sub_1000CD638()
{
  uint64_t v0;

  return sub_1000CC52C(v0);
}

void (*sub_1000CD640(int64x2_t ***a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  int64x2_t **v5;
  uint64_t v6;
  int64x2_t *v7;
  char isUniquelyReferenced_nonNull_native;

  v5 = (int64x2_t **)malloc(0x58uLL);
  *a1 = v5;
  v6 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v7 = (int64x2_t *)malloc(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v5[8] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  sub_1000CDF24(a2, (uint64_t)v7);
  v5[9] = (int64x2_t *)sub_1000CDB34(v5);
  v5[10] = (int64x2_t *)sub_1000CD81C(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_1000CD6E4;
}

void sub_1000CD6E4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_1000CDF68((uint64_t)v3);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_1000CD73C(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_1000CDB60(v7);
  v7[10] = sub_1000CD990(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1000CD7CC;
}

void sub_1000CD7CC(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_1000CD81C(int64x2_t **a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;
  int64x2_t *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void (*result)(uint64_t *);
  uint64_t v20;

  v4 = v3;
  v8 = (int64x2_t *)malloc(0x38uLL);
  *a1 = v8;
  v8[2].i64[0] = a2;
  v8[2].i64[1] = v4;
  v9 = *(_QWORD *)v4;
  v11 = sub_1002AA39C(a2);
  v8[1].i8[10] = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3].i64[0] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        sub_100076BAC(*(_QWORD *)(*(_QWORD *)v4 + 56) + 32 * v11, (uint64_t)v8);
        return sub_1000CD94C;
      }
LABEL_11:
      *v8 = vdupq_n_s64(1uLL);
      v8[1].i64[0] = 0;
      v8[1].i16[4] = 0;
      return sub_1000CD94C;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1002B0A38();
      goto LABEL_7;
    }
    sub_10045B42C(v14, a3 & 1);
    v17 = sub_1002AA39C(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      v11 = v17;
      v8[3].i64[0] = v17;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v20 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

void sub_1000CD94C(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  sub_10007238C(*a1, *(_BYTE *)(*a1 + 26), *(uint64_t **)(*a1 + 40), *(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  sub_1000073A0((uint64_t)v1, (uint64_t *)&unk_100640F00);
  free(v1);
}

void (*sub_1000CD990(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x60uLL);
  *a1 = v10;
  v10[8] = a3;
  v10[9] = v5;
  v10[7] = a2;
  v11 = *v5;
  v13 = sub_100005CF4(a2, a3);
  *((_BYTE *)v10 + 88) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[10] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v5 + 56) + 56 * v13;
        v20 = *(_OWORD *)v19;
        v21 = *(_QWORD *)(v19 + 16);
        v22 = *(_QWORD *)(v19 + 24);
        v23 = *(_OWORD *)(v19 + 32);
        v24 = *(_QWORD *)(v19 + 48);
LABEL_12:
        *(_OWORD *)v10 = v20;
        v10[2] = v21;
        v10[3] = v22;
        *((_OWORD *)v10 + 2) = v23;
        v10[6] = v24;
        return sub_1000CDAEC;
      }
LABEL_11:
      v21 = 0;
      v22 = 0;
      v24 = 0;
      v20 = 0uLL;
      v23 = 0uLL;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1002B004C();
      goto LABEL_7;
    }
    sub_10045A3CC(v16, a4 & 1);
    v25 = sub_100005CF4(a2, a3);
    if ((v17 & 1) == (v26 & 1))
    {
      v13 = v25;
      v10[10] = v25;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000CDAEC(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1000724D0(*a1, *((_BYTE *)*a1 + 88), (uint64_t *)(*a1)[9], (*a1)[10], (*a1)[7], (*a1)[8]);
  sub_1000CE1D4(*v1, v1[1], v1[2], v1[3], v1[4], (void *)v1[5], v1[6]);
  free(v1);
}

uint64_t (*sub_1000CDB34(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1000CDB54;
}

uint64_t sub_1000CDB54(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t (*sub_1000CDB60(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1000CE220;
}

void sub_1000CDB80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t i;
  uint64_t v25;
  unint64_t j;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int64_t v49;
  _QWORD v50[9];
  _QWORD *v51;

  v4 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v48 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v46 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - v7;
  __chkstk_darwin(v9);
  v44 = (uint64_t)&v41 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - v12;
  v14 = 0;
  v45 = a1;
  v17 = *(_QWORD *)(a1 + 64);
  v16 = a1 + 64;
  v15 = v17;
  v47 = _swiftEmptyArrayStorage;
  v51 = _swiftEmptyArrayStorage;
  v18 = 1 << *(_BYTE *)(v16 - 32);
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v20 = v19 & v15;
  v42 = v16;
  v43 = (unint64_t)(v18 + 63) >> 6;
  v21 = a2 + 56;
  if ((v19 & v15) != 0)
    goto LABEL_32;
LABEL_7:
  v22 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v22 < v43)
    {
      v23 = *(_QWORD *)(v42 + 8 * v22);
      i = v14 + 1;
      if (v23)
        goto LABEL_21;
      i = v14 + 2;
      if (v14 + 2 < v43)
      {
        v23 = *(_QWORD *)(v42 + 8 * i);
        if (v23)
          goto LABEL_21;
        i = v14 + 3;
        if (v14 + 3 < v43)
        {
          v23 = *(_QWORD *)(v42 + 8 * i);
          if (v23)
            goto LABEL_21;
          i = v14 + 4;
          if (v14 + 4 < v43)
          {
            v23 = *(_QWORD *)(v42 + 8 * i);
            if (v23)
              goto LABEL_21;
            v25 = v14 + 5;
            if (v14 + 5 < v43)
            {
              v23 = *(_QWORD *)(v42 + 8 * v25);
              for (i = v14 + 5; !v23; ++v25)
              {
                i = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_35;
                if (i >= v43)
                  goto LABEL_33;
                v23 = *(_QWORD *)(v42 + 8 * i);
              }
LABEL_21:
              v20 = (v23 - 1) & v23;
              v49 = i;
              for (j = __clz(__rbit64(v23)) + (i << 6); ; j = v40 | (v14 << 6))
              {
                v27 = v44;
                v28 = *(_QWORD *)(v48 + 72);
                sub_1000CDF24(*(_QWORD *)(v45 + 48) + v28 * j, v44);
                sub_1000CDFA4(v27, (uint64_t)v13);
                if (*(_QWORD *)(a2 + 16)
                  && (Hasher.init(_seed:)(v50, *(_QWORD *)(a2 + 40)),
                      TTRRemindersListViewModel.ItemID.hash(into:)(v50, v29),
                      v30 = Hasher._finalize()(),
                      v31 = -1 << *(_BYTE *)(a2 + 32),
                      v32 = v30 & ~v31,
                      ((*(_QWORD *)(v21 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0))
                {
                  v33 = ~v31;
                  while (1)
                  {
                    sub_1000CDF24(*(_QWORD *)(a2 + 48) + v32 * v28, (uint64_t)v8);
                    v34 = static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:)(v8, v13);
                    sub_1000CDF68((uint64_t)v8);
                    if ((v34 & 1) != 0)
                      break;
                    v32 = (v32 + 1) & v33;
                    if (((*(_QWORD *)(v21 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
                      goto LABEL_27;
                  }
                  sub_1000CDF68((uint64_t)v13);
                  v14 = v49;
                  if (!v20)
                    goto LABEL_7;
                }
                else
                {
LABEL_27:
                  sub_1000CDFA4((uint64_t)v13, v46);
                  v35 = v47;
                  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
                    sub_1003D8424(0, v35[2] + 1, 1);
                  v36 = v51;
                  v38 = v51[2];
                  v37 = v51[3];
                  if (v38 >= v37 >> 1)
                  {
                    sub_1003D8424(v37 > 1, v38 + 1, 1);
                    v36 = v51;
                  }
                  v36[2] = v38 + 1;
                  v39 = *(unsigned __int8 *)(v48 + 80);
                  v47 = v36;
                  sub_1000CDFA4(v46, (uint64_t)v36 + ((v39 + 32) & ~v39) + v38 * v28);
                  v14 = v49;
                  if (!v20)
                    goto LABEL_7;
                }
LABEL_32:
                v40 = __clz(__rbit64(v20));
                v20 &= v20 - 1;
                v49 = v14;
              }
            }
          }
        }
      }
    }
LABEL_33:
    swift_release();
    return;
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_1000CDF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CDF68(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CDFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000CDFE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100644BB8;
  if (!qword_100644BB8)
  {
    v1 = objc_opt_self(UICollectionViewCell);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100644BB8);
  }
  return result;
}

uint64_t sub_1000CE024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100644BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CE06C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CC910(a1, v1);
}

uint64_t sub_1000CE074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit(a2, a1);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v4;
  swift_retain(v4);
  return a2;
}

uint64_t sub_1000CE0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100644BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CE0F8(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit(a2, a1);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_1000CE130(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TTRIRemindersBoardChromelessBarsController.ColumnState(a2, a1);
  return a2;
}

_QWORD *sub_1000CE164(_QWORD *a1)
{
  destroy for TTRIRemindersBoardChromelessBarsController.ColumnState(a1);
  return a1;
}

unint64_t sub_1000CE190()
{
  unint64_t result;

  result = qword_100644BE0;
  if (!qword_100644BE0)
  {
    result = swift_getWitnessTable("U<\r", &type metadata for TTRIShowRemindersChromelessBarStates);
    atomic_store(result, (unint64_t *)&qword_100644BE0);
  }
  return result;
}

uint64_t sub_1000CE1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);

    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_1000CE22C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v37[24];
  _QWORD v38[5];
  _QWORD v39[5];

  v8 = objc_allocWithZone((Class)TTRUndoManager);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithDebugIdentifier:", v9);

  v11 = type metadata accessor for TTRTemplateSharingInteractor(0);
  swift_allocObject(v11, 48, 7);
  v12 = TTRTemplateSharingInteractor.init(template:)(a1);
  v13 = objc_msgSend(a1, "store");
  v14 = type metadata accessor for TTRITemplateSharingRouter();
  v15 = swift_allocObject(v14, 81, 7);
  swift_unknownObjectWeakInit(v15 + 24, 0);
  v16 = type metadata accessor for TTRIActivityAlertRouterCapability();
  v17 = swift_allocObject(v16, 24, 7);
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v15 + 56) = v17;
  swift_unknownObjectWeakInit(v15 + 64, 0);
  swift_unknownObjectWeakInit(v15 + 72, 0);
  *(_BYTE *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 16) = v13;
  swift_unknownObjectWeakAssign(v15 + 24, a2);
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = a4;
  *(_QWORD *)(v15 + 48) = v10;
  v39[3] = v14;
  v39[4] = &off_1005F60B8;
  v39[0] = v15;
  v18 = type metadata accessor for TTRITemplateSharingPresenter(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v20 = sub_100028D48((uint64_t)v39, v14);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)&v37[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = *v22;
  v38[3] = v14;
  v38[4] = &off_1005F60B8;
  v38[0] = v24;
  *(_QWORD *)(v19 + 24) = 0;
  swift_unknownObjectWeakInit(v19 + 16, 0);
  *(_QWORD *)(v19 + 40) = 0;
  swift_unknownObjectWeakInit(v19 + 32, 0);
  *(_BYTE *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = 0;
  *(_DWORD *)(v19 + 63) = 0;
  v25 = objc_allocWithZone((Class)TTRUndoManager);
  swift_retain_n(v15, 2);
  swift_retain();
  v26 = v10;
  swift_retain();
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v25, "initWithDebugIdentifier:", v27);

  *(_QWORD *)(v19 + 152) = v28;
  *(_BYTE *)(v19 + 160) = 1;
  v29 = v19 + OBJC_IVAR____TtC9Reminders28TTRITemplateSharingPresenter_continuationForPerformAction;
  v30 = sub_10002A750((uint64_t *)&unk_100640798);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  *(_QWORD *)(v19 + 72) = v12;
  *(_QWORD *)(v19 + 80) = &protocol witness table for TTRTemplateSharingInteractor;
  sub_100010634((uint64_t)v38, v19 + 88);
  *(_QWORD *)(v19 + 136) = v26;
  v31 = type metadata accessor for TTRTemplateSharingPresenterCapability(0);
  swift_allocObject(v31, 32, 7);
  *(_QWORD *)(v19 + 128) = TTRTemplateSharingPresenterCapability.init(interactor:)(v12, &protocol witness table for TTRTemplateSharingInteractor);
  v32 = type metadata accessor for TTRMainActorDeferredAction(0);
  swift_allocObject(v32, 48, 7);
  v33 = swift_retain();
  v34 = TTRMainActorDeferredAction.init()(v33);
  sub_100027F10(v38);
  *(_QWORD *)(v19 + 144) = v34;
  swift_beginAccess(v34 + 16, v37, 1, 0);
  *(_QWORD *)(v34 + 24) = &off_1005ECC48;
  swift_unknownObjectWeakAssign(v34 + 16, v19);
  sub_100027F10(v39);
  swift_release_n(v15, 2);
  swift_beginAccess(v12 + 16, v39, 1, 0);
  *(_QWORD *)(v12 + 24) = &off_1005ECC68;
  swift_unknownObjectWeakAssign(v12 + 16, v19);
  swift_release();
  return v19;
}

uint64_t sub_1000CE5E4(uint64_t a1)
{
  return sub_1000199E0(a1, (uint64_t (*)(uint64_t))sub_10048AFF0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_100478468);
}

uint64_t sub_1000CE5F8(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  id v6;

  result = sub_10002CDC0(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = 1;
  if (result != 1 << *(_BYTE *)(a1 + 32))
  {
    v5 = sub_10048D490(result, v3, 0, a1);
    v6 = (id)v5;
  }
  return v5;
}

uint64_t sub_1000CE65C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1000D27BC(a1);
  v5 = result;
  v6 = v3;
  v7 = v4 & 1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaDictionary.endIndex.getter(v8);
    if (v7)
    {
      v10 = result;
      v11 = v9;
      v12 = static __CocoaDictionary.Index.== infix(_:_:)(v5, v6, result, v9);
      sub_10003E0E0(v10, v11, 1);
      if ((v12 & 1) != 0)
      {
LABEL_7:
        sub_10003E0E0(v5, v6, v7);
        return 0;
      }
LABEL_11:
      sub_1000D287C(&v15, v5, v6, v7, a1);
      v13 = v14;
      sub_10003E0E0(v5, v6, v7);
      return v13;
    }
  }
  else if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v3)
    {
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_7;
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CE774(uint64_t a1)
{
  return sub_1000199E0(a1, (uint64_t (*)(uint64_t))sub_10048AFF0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1004786DC);
}

uint64_t sub_1000CE788(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10002CDC0(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_10048F340(result, v3, 0, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

uint64_t sub_1000CE804(uint64_t a1)
{
  return sub_1000199E0(a1, sub_10002CDC0, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1004789C8);
}

uint64_t sub_1000CE818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100644BF8);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100644BF8);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000CE8A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  __int16 v45;
  char v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD v68[5];
  char v69[24];

  v2 = v1;
  v67 = a1;
  v3 = sub_10002A750((uint64_t *)&unk_100653A00);
  __chkstk_darwin(v3);
  v66 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10002A750((uint64_t *)&unk_100665210);
  __chkstk_darwin(v5);
  v64 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750((uint64_t *)&unk_100665590);
  __chkstk_darwin(v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TTRListType.SortingCapability(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1000D0300();
  v13 = v1 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_sortingCapability;
  swift_beginAccess(v13, v69, 0, 0);
  sub_10002B1E8(v13, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if (EnumCaseMultiPayload != 1)
  {
    v16 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v12, v16);
  }
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource + 8);
  ObjectType = swift_getObjectType(v18, v14);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 16);
  v21 = swift_unknownObjectRetain(v18);
  v22 = v20(ObjectType, v17, v21);
  v24 = v23;
  swift_unknownObjectRelease(v18);
  v26 = swift_getObjectType(v22, v25);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v24);
  swift_unknownObjectRelease(v22);
  v27 = type metadata accessor for TTRListType(0);
  swift_storeEnumTagMultiPayload(v9, v27, 3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 0, 1, v27);
  v28 = sub_1000D0660();
  v61 = v29;
  v62 = v28;
  type metadata accessor for TTRListColors(0);
  v60 = static TTRListColors.tagged.getter();
  v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource + 8);
  v32 = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_dataModelSource), v31);
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
  v34 = v33(v32, v30);
  v35 = v34;
  if (v34)
    swift_unknownObjectRelease(v34);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v32, v30);
  v37 = v36;
  if (v36)
    swift_unknownObjectRelease(v36);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v30 + 56))(v68, v32, v30);
  v38 = v68[3];
  sub_1000073A0((uint64_t)v68, &qword_100649FC0);
  v39 = v33(v32, v30);
  v65 = v9;
  if (v39)
  {
    v41 = v39;
    v42 = v40;
    v43 = swift_getObjectType(v39, v40);
    v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v43, v42);
    swift_unknownObjectRelease(v41);
  }
  else
  {
    v59 = 0;
  }
  v58 = v37 != 0;
  v44 = v35 != 0;
  v45 = EnumCaseMultiPayload == 1;
  v46 = v63;
  v47 = (v63 >> 8) & 1;
  v48 = v38 != 0;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_completedRemindersCount + 8))
    v49 = 0;
  else
    v49 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_completedRemindersCount);
  v50 = sub_1000D04B4();
  v51 = v64;
  sub_1000D0864(v64);
  v52 = type metadata accessor for TTRTemplatePublicLinkData(0);
  v53 = v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v66, 1, 1, v52);
  BYTE6(v56) = 1;
  WORD2(v56) = v45;
  LODWORD(v56) = 0;
  HIBYTE(v55) = v59 & 1;
  BYTE6(v55) = v48;
  WORD2(v55) = 0;
  BYTE3(v55) = v58;
  *(_WORD *)((char *)&v55 + 1) = v44;
  LOBYTE(v55) = v46 & 1;
  return TTRRemindersListViewModel.ListInfo.init(listType:name:color:reminderCount:sharingInfo:canCreateNewReminder:canToggleCompletedReminderVisbility:canAddSection:canClearCompletedReminders:canSaveAsTemplate:supportsEditableSections:canBePrinted:completedRemindersShown:hasDefaultNewReminderButton:completedRemindersCount:canBeDeleted:collapsedStatesAutosaveName:canCreateCustomSmartListForHashtagsState:hashtagsStateToShow:templateStatus:isOriginOfExistingTemplate:isPublicTemplatePreview:shouldCategorizeGroceryItems:isRecentlyDeletedList:iOS:macOS:)(v65, v62, v61, v60, 0, 1, 0, 3, v55, (_BYTE)v47, v49, 0, 0, 0, v50 & 1, v51, v53, v56);
}

_QWORD *sub_1000CECDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t, __n128);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = v2;
  v4 = v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v6 = *(_QWORD *)(v4 + 8);
  ObjectType = swift_getObjectType(v5, a2);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 16);
  v9 = swift_unknownObjectRetain(v5);
  v10 = v8(ObjectType, v6, v9);
  v12 = v11;
  swift_unknownObjectRelease(v5);
  v13 = type metadata accessor for ShowTaggedViewModelSourceHashtagContext();
  v14 = (_QWORD *)swift_allocObject(v13, 40, 7);
  v14[2] = v10;
  v14[3] = v12;
  v14[4] = v3;
  swift_retain();
  return v14;
}

uint64_t sub_1000CED84()
{
  id v0;
  char v1;

  v0 = *(id *)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor();
  v1 = TTRUserDefaults.showingLargeAttachments(forType:)(7);

  return v1 & 1;
}

void sub_1000CEDC0(uint64_t a1)
{
  id v2;

  v2 = *(id *)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor();
  TTRUserDefaults.setShowingLargeAttachments(value:forType:)(a1, 7);

}

id sub_1000CEE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _BYTE v9[24];

  v1 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v1);
  v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_cachedListInfo;
  swift_beginAccess(v4, v9, 0, 0);
  sub_1000D2E00(v4, (uint64_t)v3);
  v5 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1000073A0((uint64_t)v3, &qword_100649CA0);
    return 0;
  }
  else
  {
    v6 = *(id *)&v3[*(int *)(v5 + 24)];
    sub_10001F544((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
  }
  return v6;
}

uint64_t sub_1000CEEFC()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_hasIncompleteOrCompletedReminders);
  if (v1 != 2)
    return v1 & 1 | 0x40u;
  result = 64;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_completedRemindersCount + 8) & 1) == 0)
  {
    if (*(uint64_t *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_completedRemindersCount) <= 0)
      return 64;
    else
      return 65;
  }
  return result;
}

uint64_t sub_1000CEF44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_OWORD *)a1 = xmmword_100522BB0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = sub_1000D2DF8;
  *(_QWORD *)(a1 + 32) = v1;
  return swift_retain();
}

uint64_t sub_1000CEF6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  int EnumCaseMultiPayload;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v4 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_tree);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)TTRMutableTreeStorage.children(of:)(v10);
  swift_release();
  sub_1000073A0((uint64_t)v10, (uint64_t *)&unk_100640EB0);
  if (v12[2])
  {
    sub_10002B1E8((uint64_t)v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v4);
    sub_10001F544((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    if (!EnumCaseMultiPayload)
    {
      swift_retain();
      v14 = sub_100393344((uint64_t)v12, v11);
      swift_bridgeObjectRelease(v12);
      swift_release();
      v12 = v14;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    v12 = _swiftEmptyArrayStorage;
  }
  v19[1] = v12;
  v15 = sub_10002A750(&qword_100649DF0);
  v16 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  v17 = sub_100023FEC((unint64_t *)&qword_100649EE0, &qword_100649DF0, (uint64_t)&protocol conformance descriptor for [A]);
  Sequence.firstMap<A>(_:)(a2, sub_10037E1C8, 0, v15, v16, v17);
  swift_release();
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_1000CF184()
{
  return 0;
}

double sub_1000CF194@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;
  uint64_t v11;

  v4 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000CF2A4();
  sub_10002B1E8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  LODWORD(v4) = swift_getEnumCaseMultiPayload(v6, v4);
  sub_10001F544((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  if ((_DWORD)v4 == 2)
  {
    v8 = type metadata accessor for TTRSmartListDragAndDropPresenterCapability.MoveReminderSubjectForItem(0);
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = &off_1005F2998;
    v9 = sub_100028D70((_QWORD *)a2);
    sub_10002B1E8(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    *(_QWORD *)((char *)v9 + *(int *)(v8 + 20)) = v7;
    *((_BYTE *)v9 + *(int *)(v8 + 24)) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1000CF2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v1 = OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource____lazy_storage___dragAndDropCapability;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource____lazy_storage___dragAndDropCapability))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource____lazy_storage___dragAndDropCapability);
  }
  else
  {
    v3 = (void *)REMSmartListTypeTagged;
    v4 = type metadata accessor for TTRAttributeMatchingDragAndDropPresenterCapability();
    v2 = swift_allocObject(v4, 41, 7);
    *(_QWORD *)(v2 + 24) = 0;
    swift_unknownObjectWeakInit(v2 + 16, 0);
    *(_BYTE *)(v2 + 40) = 1;
    *(_QWORD *)(v2 + 24) = &off_1005F0728;
    *(_QWORD *)(v2 + 32) = v3;
    swift_unknownObjectWeakAssign(v5, v0);
    *(_QWORD *)(v0 + v1) = v2;
    v6 = v3;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

double TTRListDetailCreationChangeItem.ttrShareeContext.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000CF368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v53 = type metadata accessor for REMHashtagLabelCollection(0);
  v51 = *(_QWORD *)(v53 - 8);
  v4 = __chkstk_darwin(v53);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v51 - v8;
  __chkstk_darwin(v7);
  v52 = (char *)&v51 - v10;
  v11 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v17 = *(_QWORD *)(v15 + 8);
  ObjectType = swift_getObjectType(v16, v18);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 16);
  v21 = swift_unknownObjectRetain(v16);
  v22 = v20(ObjectType, v17, v21);
  v24 = v23;
  swift_unknownObjectRelease(v16);
  v26 = swift_getObjectType(v22, v25);
  v27 = v22;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v24);
  swift_unknownObjectRelease(v22);
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v14, v11);
  if ((_DWORD)result == enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
    v27 = *v14;
    swift_bridgeObjectRelease(v14[1]);
    v11 = (uint64_t)v14 + *(int *)(sub_10002A750((uint64_t *)&unk_1006651D0) + 64);
    v29 = objc_msgSend(*(id *)(a2 + 16), "hashtagContext");
    if (v29)
    {
      v30 = v29;
      v31 = objc_msgSend(v29, "hashtags");

      v32 = sub_100005ED8(0, &qword_100645310, REMHashtag_ptr);
      v33 = sub_1000D2DA0();
      v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, v32, v33);

      v35 = sub_1002ABEC8(v27);
      swift_bridgeObjectRelease(v27);
      REMHashtagLabelCollection.init(labels:)(v35);
      v54 = v34;
      v36 = sub_10002A750(&qword_100645300);
      v37 = sub_100023FEC((unint64_t *)&qword_100645308, &qword_100645300, (uint64_t)&protocol conformance descriptor for Set<A>);
      REMHashtagLabelCollection.init<A>(hashtags:)(&v54, v36, v37);
      v38 = v52;
      REMHashtagLabelCollection.subtracting(_:)(v6);
      v39 = *(void (**)(char *, uint64_t))(v51 + 8);
      v40 = v53;
      v39(v6, v53);
      v41 = ((uint64_t (*)(char *, uint64_t))v39)(v9, v40);
      v42 = REMHashtagLabelCollection.labels.getter(v41);
      v43 = v42;
      v44 = *(_QWORD *)(v42 + 16);
      if (v44)
      {
        v45 = (_QWORD *)(v42 + 40);
        do
        {
          v46 = *(v45 - 1);
          v47 = *v45;
          swift_bridgeObjectRetain(*v45);
          v48 = (void *)TTRReminderEditor.addHashtag(_:)(v46, v47, 0, 0);
          swift_bridgeObjectRelease(v47);

          v45 += 2;
          --v44;
        }
        while (v44);
      }
      swift_bridgeObjectRelease(v43);
      v39(v38, v40);
      goto LABEL_13;
    }
LABEL_12:
    swift_bridgeObjectRelease(v27);
LABEL_13:
    v50 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v11, v50);
  }
  if ((_DWORD)result != enum case for REMHashtagLabelSpecifier.allLabels(_:)
    && (_DWORD)result != enum case for REMHashtagLabelSpecifier.noLabels(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)(v11, v11);
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1000CF6EC(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjectType;
  uint64_t (*v38)(uint64_t, uint64_t, __n128);
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char v66;
  void (*v67)(char *, uint64_t);
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD v105[3];
  uint64_t v106;
  uint64_t v107;

  v97 = sub_10002A750(&qword_1006452F8);
  __chkstk_darwin(v97);
  v3 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0);
  v102 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v98 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (char *)&v89 - v10;
  v12 = type metadata accessor for REMHashtagLabelCollection(0);
  v103 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v92 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v93 = (char *)&v89 - v16;
  v17 = __chkstk_darwin(v15);
  v94 = (char *)&v89 - v18;
  v19 = __chkstk_darwin(v17);
  v91 = (char *)&v89 - v20;
  v21 = __chkstk_darwin(v19);
  v104 = (char *)&v89 - v22;
  v23 = __chkstk_darwin(v21);
  v101 = (char *)&v89 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v89 - v25;
  v27 = a1[3];
  v28 = a1[4];
  sub_10001413C(a1, v27);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v28 + 208))(v105, v27, v28);
  v29 = v106;
  if (!v106)
  {
    sub_1000073A0((uint64_t)v105, &qword_10063F588);
LABEL_8:
    v68 = 0;
    return v68 & 1;
  }
  v96 = v12;
  v30 = v107;
  sub_10001413C(v105, v106);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  sub_100027F10(v105);
  v105[0] = v31;
  swift_bridgeObjectRetain(v31);
  v32 = sub_10002A750(&qword_100645300);
  v33 = sub_100023FEC((unint64_t *)&qword_100645308, &qword_100645300, (uint64_t)&protocol conformance descriptor for Set<A>);
  v95 = v26;
  REMHashtagLabelCollection.init<A>(hashtags:)(v105, v32, v33);
  v34 = *(_QWORD *)&v100[OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource];
  v35 = *(_QWORD *)&v100[OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource + 8];
  ObjectType = swift_getObjectType(v34, v36);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v35 + 16);
  v39 = swift_unknownObjectRetain(v34);
  v40 = v38(ObjectType, v35, v39);
  v42 = v41;
  swift_unknownObjectRelease(v34);
  v44 = swift_getObjectType(v40, v43);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v42);
  swift_unknownObjectRelease(v40);
  (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v45 = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 88))(v9, v5);
  v46 = v5;
  if (v45 != enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    if (v45 == enum case for REMHashtagLabelSpecifier.allLabels(_:))
    {
      v69 = v96;
      v70 = v103;
      if ((v31 & 0xC000000000000001) != 0)
      {
        if (v31 < 0)
          v71 = v31;
        else
          v71 = v31 & 0xFFFFFFFFFFFFFF8;
        v72 = __CocoaSet.count.getter(v71);
      }
      else
      {
        v72 = *(_QWORD *)(v31 + 16);
      }
      swift_bridgeObjectRelease(v31);
      v68 = v72 != 0;
    }
    else
    {
      v69 = v96;
      v70 = v103;
      if (v45 != enum case for REMHashtagLabelSpecifier.noLabels(_:))
        goto LABEL_49;
      if ((v31 & 0xC000000000000001) != 0)
      {
        if (v31 < 0)
          v75 = v31;
        else
          v75 = v31 & 0xFFFFFFFFFFFFFF8;
        v76 = __CocoaSet.count.getter(v75);
      }
      else
      {
        v76 = *(_QWORD *)(v31 + 16);
      }
      swift_bridgeObjectRelease(v31);
      v68 = v76 == 0;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v95, v69);
    return v68 & 1;
  }
  v100 = v11;
  swift_bridgeObjectRelease(v31);
  v90 = v6;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 96))(v9, v5);
  v47 = *v9;
  v48 = v9[1];
  v49 = sub_10002A750((uint64_t *)&unk_1006651D0);
  v50 = v102;
  v52 = v98;
  v51 = v99;
  (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v98, (char *)v9 + *(int *)(v49 + 64), v99);
  v53 = sub_1002ABEC8(v47);
  swift_bridgeObjectRelease(v47);
  REMHashtagLabelCollection.init(labels:)(v53);
  v54 = sub_1002ABEC8(v48);
  swift_bridgeObjectRelease(v48);
  v55 = REMHashtagLabelCollection.init(labels:)(v54);
  v56 = REMHashtagLabelCollection.isEmpty.getter(v55);
  v57 = v56;
  v58 = REMHashtagLabelCollection.isEmpty.getter(v56);
  v59 = *(int *)(v97 + 48);
  v60 = *(int *)(v97 + 64);
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v3, v52, v51);
  v3[v59] = (v57 & 1) == 0;
  v3[v60] = (v58 & 1) == 0;
  v61 = (*(uint64_t (**)(char *, uint64_t))(v50 + 88))(v3, v51);
  if (v61 == enum case for REMHashtagLabelSpecifier.Operation.or(_:))
  {
    v63 = v95;
    v62 = v96;
    if ((v57 & 1) != 0)
    {
      v64 = v101;
      if ((v58 & 1) == 0)
      {
        v65 = v104;
        v66 = REMHashtagLabelCollection.isDisjoint(with:)(v104);
        v67 = *(void (**)(char *, uint64_t))(v103 + 8);
        v67(v65, v62);
LABEL_27:
        v67(v64, v62);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v52, v51);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v100, v46);
        v67(v63, v62);
        v68 = v66 ^ 1;
        return v68 & 1;
      }
      goto LABEL_18;
    }
    v64 = v101;
    v66 = REMHashtagLabelCollection.isDisjoint(with:)(v101);
    if ((v58 & 1) != 0)
    {
      v67 = *(void (**)(char *, uint64_t))(v103 + 8);
      v67(v104, v62);
      goto LABEL_27;
    }
    v78 = v103;
    v79 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
    v79(v93, v63, v62);
    v80 = v92;
    v79(v92, v104, v62);
    if ((v66 & 1) != 0)
    {
      v81 = REMHashtagLabelCollection.isDisjoint(with:)(v80);
      v77 = *(void (**)(char *, uint64_t))(v78 + 8);
      v77(v80, v62);
      v68 = v81 ^ 1;
    }
    else
    {
      v77 = *(void (**)(char *, uint64_t))(v78 + 8);
      v77(v80, v62);
      v68 = 1;
    }
    v85 = v90;
    v86 = v93;
    goto LABEL_45;
  }
  v63 = v95;
  v62 = v96;
  if (v61 == enum case for REMHashtagLabelSpecifier.Operation.and(_:))
  {
    v64 = v101;
    v73 = v94;
    if ((v57 & 1) != 0)
    {
      if ((v58 & 1) != 0)
      {
LABEL_18:
        v74 = *(void (**)(char *, uint64_t))(v103 + 8);
        v74(v104, v62);
        v74(v64, v62);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v52, v51);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v100, v46);
        v74(v63, v62);
        goto LABEL_8;
      }
      v82 = v104;
      v68 = REMHashtagLabelCollection.isDisjoint(with:)(v104);
      v77 = *(void (**)(char *, uint64_t))(v103 + 8);
      v77(v82, v62);
    }
    else
    {
      v68 = REMHashtagLabelCollection.isSuperset(of:)(v101);
      if ((v58 & 1) == 0)
      {
        v83 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
        v84 = v91;
        v83(v91, v63, v62);
        v83(v73, v104, v62);
        if ((v68 & 1) != 0)
          v68 = REMHashtagLabelCollection.isDisjoint(with:)(v73);
        else
          v68 = 0;
        v87 = v73;
        v85 = v90;
        v77 = *(void (**)(char *, uint64_t))(v103 + 8);
        v77(v87, v62);
        v86 = v84;
LABEL_45:
        v77(v86, v62);
        v77(v104, v62);
        v77(v64, v62);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v52, v51);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v100, v46);
        goto LABEL_46;
      }
      v77 = *(void (**)(char *, uint64_t))(v103 + 8);
      v77(v104, v62);
    }
    v77(v64, v62);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v52, v51);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v100, v46);
LABEL_46:
    v77(v63, v62);
    return v68 & 1;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v97, v97);
  __break(1u);
LABEL_49:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v46, v46);
  __break(1u);
  return result;
}

double sub_1000CFF24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result;

  sub_1000CF2A4();
  sub_100125824(a1, a2, a3);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000CFF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v21[5];

  v1 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v7 = *(_QWORD *)(v5 + 8);
  ObjectType = swift_getObjectType(v6, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 16);
  v11 = swift_unknownObjectRetain(v6);
  v12 = v10(ObjectType, v7, v11);
  v14 = v13;
  swift_unknownObjectRelease(v6);
  v16 = swift_getObjectType(v12, v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v14);
  swift_unknownObjectRelease(v12);
  v21[3] = type metadata accessor for TTRUserActivityListPayload(0);
  v21[4] = &protocol witness table for TTRUserActivityListPayload;
  v17 = sub_100028D70(v21);
  (*(void (**)(_QWORD *, char *, uint64_t))(v2 + 16))(v17, v4, v1);
  v18 = type metadata accessor for TTRUserActivityListPayload.State(0);
  swift_storeEnumTagMultiPayload(v17, v18, 4);
  NSUserActivity.setPayload(_:)(v21);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_100027F10(v21);
}

uint64_t sub_1000D00B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v25[5];

  v1 = type metadata accessor for TTRUserActivityWindowSceneRestorationPayload(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v25[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v10 = *(_QWORD *)(v8 + 8);
  ObjectType = swift_getObjectType(v9, v11);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 16);
  v14 = swift_unknownObjectRetain(v9);
  v15 = v13(ObjectType, v10, v14);
  v17 = v16;
  swift_unknownObjectRelease(v9);
  v19 = swift_getObjectType(v15, v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v17);
  swift_unknownObjectRelease(v15);
  sub_100005ED8(0, (unint64_t *)&qword_100649BD0, NSUserActivity_ptr);
  v20 = static NSUserActivity.forStoringWindowSceneRestorationPayload()();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v7, v4);
  v21 = type metadata accessor for TTRUserActivityWindowSceneRestorationPayload.State(0);
  swift_storeEnumTagMultiPayload(v3, v21, 4);
  v25[3] = v1;
  v25[4] = &protocol witness table for TTRUserActivityWindowSceneRestorationPayload;
  v22 = sub_100028D70(v25);
  sub_10002B1E8((uint64_t)v3, (uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUserActivityWindowSceneRestorationPayload);
  NSUserActivity.setPayload(_:)(v25);
  sub_10001F544((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for TTRUserActivityWindowSceneRestorationPayload);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100027F10(v25);
  return v20;
}

void *sub_1000D0278()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_smartList);
  v2 = v1;
  return v1;
}

uint64_t sub_1000D02B0()
{
  uint64_t v0;
  _BYTE *v1;

  v0 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  sub_100012DDC(v0, qword_100644C10);
  v1 = (_BYTE *)sub_100012DC4(v0, (uint64_t)qword_100644C10);
  *v1 = 4;
  return swift_storeEnumTagMultiPayload(v1, v0, 0);
}

uint64_t sub_1000D0300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  int v26;
  uint64_t result;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v8 = *(_QWORD *)(v6 + 8);
  ObjectType = swift_getObjectType(v7, v9);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 16);
  v12 = swift_unknownObjectRetain(v7);
  v13 = v11(ObjectType, v8, v12);
  v15 = v14;
  swift_unknownObjectRelease(v7);
  v17 = swift_getObjectType(v13, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v15);
  swift_unknownObjectRelease(v13);
  v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v18 == enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v19 = *v5;
    swift_bridgeObjectRelease(v5[1]);
    v20 = (char *)v5 + *(int *)(sub_10002A750((uint64_t *)&unk_1006651D0) + 64);
    v21 = *(_QWORD *)(v19 + 16);
    swift_bridgeObjectRelease(v19);
    v22 = v21 != 0;
    v23 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v20, v23);
    v24 = v22;
  }
  else
  {
    if (v18 != enum case for REMHashtagLabelSpecifier.allLabels(_:)
      && v18 != enum case for REMHashtagLabelSpecifier.noLabels(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v2, v2);
      __break(1u);
      return result;
    }
    v22 = 0;
    v24 = *(unsigned __int8 *)(v1
                             + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_hasDefaultNewReminderButtonWhenSelectingAllTags);
  }
  if (v24)
    v26 = 256;
  else
    v26 = 0;
  return v26 | v22;
}

uint64_t sub_1000D04B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v1 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v7 = *(_QWORD *)(v5 + 8);
  ObjectType = swift_getObjectType(v6, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 16);
  v11 = swift_unknownObjectRetain(v6);
  v12 = v10(ObjectType, v7, v11);
  v14 = v13;
  swift_unknownObjectRelease(v6);
  v16 = swift_getObjectType(v12, v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v14);
  swift_unknownObjectRelease(v12);
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 88))(v4, v1);
  if (v17 == enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v2 + 96))(v4, v1);
    v18 = v4[1];
    v19 = *(_QWORD *)(*v4 + 16);
    swift_bridgeObjectRelease(*v4);
    if (v19)
    {
      swift_bridgeObjectRelease(v18);
      v20 = 1;
    }
    else
    {
      v22 = *(_QWORD *)(v18 + 16);
      swift_bridgeObjectRelease(v18);
      v20 = v22 != 0;
    }
    v23 = (char *)v4 + *(int *)(sub_10002A750((uint64_t *)&unk_1006651D0) + 64);
    v24 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  }
  else
  {
    if (v17 != enum case for REMHashtagLabelSpecifier.allLabels(_:)
      && v17 != enum case for REMHashtagLabelSpecifier.noLabels(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v1, v1);
      __break(1u);
      return result;
    }
    return 0;
  }
  return v20;
}

uint64_t sub_1000D0660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t countAndFlagsBits;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;

  v1 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v7 = *(_QWORD *)(v5 + 8);
  ObjectType = swift_getObjectType(v6, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 16);
  v11 = swift_unknownObjectRetain(v6);
  v12 = v10(ObjectType, v7, v11);
  v14 = v13;
  swift_unknownObjectRelease(v6);
  v16 = swift_getObjectType(v12, v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v14);
  swift_unknownObjectRelease(v12);
  v17 = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88))(v4, v1);
  if (v17 == enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    v18 = *v4;
    v19 = v4[1];
    v20 = (char *)v4 + *(int *)(sub_10002A750((uint64_t *)&unk_1006651D0) + 64);
    v21 = sub_100477214(v19, v18);
    v22 = v21;
    v23 = *(_QWORD *)(v21 + 16);
    if (v23 == 1)
    {
      sub_1000CE788(v21);
      v25 = v24;
      swift_bridgeObjectRelease(v22);
      if (v25)
      {
        countAndFlagsBits = String.addingHashtagPrefix()()._countAndFlagsBits;
        swift_bridgeObjectRelease(v25);
LABEL_9:
        v28 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v20, v28);
        return countAndFlagsBits;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v21);
    }
    countAndFlagsBits = static TTRLocalizableStrings.Hashtags.taggedListName(forSelectedLabelCount:)(v23);
    goto LABEL_9;
  }
  if (v17 == enum case for REMHashtagLabelSpecifier.allLabels(_:))
    return static TTRLocalizableStrings.Hashtags.taggedListNameForAllTags.getter();
  if (v17 == enum case for REMHashtagLabelSpecifier.noLabels(_:))
    return static TTRLocalizableStrings.Hashtags.taggedListNameForUntagged.getter();
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v1, v1);
  __break(1u);
  return result;
}

uint64_t sub_1000D0864@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = type metadata accessor for REMHashtagLabelSpecifier(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000D0A24();
  v8 = v6;
  v10 = v9;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_canShowHashtagLabelSelector) & 1) != 0
    || v6)
  {
    v13 = v1 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
    v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
    v15 = *(_QWORD *)(v13 + 8);
    ObjectType = swift_getObjectType(v14, v6);
    v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 16);
    v18 = swift_unknownObjectRetain(v14);
    v19 = v17(ObjectType, v15, v18);
    v21 = v20;
    swift_unknownObjectRelease(v14);
    v23 = swift_getObjectType(v19, v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v23, v21);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v21);
    swift_unknownObjectRelease(v19);
    TTRRemindersListViewModel.HashtagLabelSelectorState.init(labels:selection:)(v24, v5);
    v25 = type metadata accessor for TTRRemindersListViewModel.HashtagLabelSelectorState(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 0, 1, v25);
    v26 = type metadata accessor for TTRRemindersListViewModel.HashtagsState(0);
    v27 = (uint64_t *)(a1 + *(int *)(v26 + 20));
    *v27 = v7;
    v27[1] = v8;
    v27[2] = v10;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a1, 0, 1, v26);
  }
  else
  {
    v11 = type metadata accessor for TTRRemindersListViewModel.HashtagsState(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

uint64_t sub_1000D0A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v1 = type metadata accessor for REMHashtagLabelCollection(0);
  v67 = *(char **)(v1 - 8);
  v68 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v63 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v63 - v8;
  v10 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
  v16 = *(_QWORD *)(v14 + 8);
  ObjectType = swift_getObjectType(v15, v17);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 16);
  v20 = swift_unknownObjectRetain(v15);
  v21 = v19(ObjectType, v16, v20);
  v23 = v22;
  swift_unknownObjectRelease(v15);
  v25 = swift_getObjectType(v21, v24);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v23);
  swift_unknownObjectRelease(v21);
  v26 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v13, v10);
  if (v26 == enum case for REMHashtagLabelSpecifier.labels(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v13, v10);
    v27 = *v13;
    v28 = v13[1];
    v29 = (char *)v13 + *(int *)(sub_10002A750((uint64_t *)&unk_1006651D0) + 64);
    v30 = sub_1002ABEC8(v27);
    swift_bridgeObjectRelease(v27);
    REMHashtagLabelCollection.init(labels:)(v30);
    swift_bridgeObjectRetain(v28);
    v32 = sub_1002ABEC8(v31);
    swift_bridgeObjectRelease(v28);
    REMHashtagLabelCollection.init(labels:)(v32);
    REMHashtagLabelCollection.union(_:)(v4);
    v33 = v68;
    v34 = (void (*)(char *, uint64_t))*((_QWORD *)v67 + 1);
    v34(v4, v68);
    v35 = ((uint64_t (*)(char *, uint64_t))v34)(v7, v33);
    v36 = REMHashtagLabelCollection.labels.getter(v35);
    v37 = *(_QWORD *)(v36 + 16);
    swift_bridgeObjectRelease(v36);
    v38 = static TTRLocalizableStrings.Hashtags.genericHashtagSelectionWithMenuDescription(forLabelCount:)(v37);
    v40 = v38;
    v41 = v39;
    v42 = v9;
    if (v37 == 2)
    {
      v65 = v38;
      v66 = v39;
      v67 = v29;
      v64 = static TTRLocalizableStrings.Hashtags.hashtagSelectionDescriptionWithMenuForTwoTagsFormat.getter();
      v44 = v53;
      v54 = REMHashtagLabelCollection.labels.getter(v64);
      v69 = v54;
      v55 = sub_10002A750(&qword_1006466D0);
      v56 = sub_100023FEC((unint64_t *)&qword_100654F90, &qword_1006466D0, (uint64_t)&protocol conformance descriptor for [A]);
      v48 = static REMHashtagLabelCollection.sortedLabels<A>(from:)(&v69, v55, v56);
      v57 = swift_bridgeObjectRelease(v54);
      __chkstk_darwin(v57);
      *(&v63 - 2) = v28;
      v50 = sub_1000D2BE4;
    }
    else
    {
      if (v37 != 1)
      {
        swift_bridgeObjectRelease(v28);
        v34(v9, v33);
        if (v37 <= 2)
        {
          swift_bridgeObjectRelease(v41);
          v62 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v29, v62);
          return 0;
        }
        goto LABEL_12;
      }
      v65 = v38;
      v66 = v39;
      v67 = v29;
      v64 = static TTRLocalizableStrings.Hashtags.hashtagSelectionDescriptionWithMenuForOneTagFormat.getter();
      v44 = v43;
      v45 = REMHashtagLabelCollection.labels.getter(v64);
      v69 = v45;
      v46 = sub_10002A750(&qword_1006466D0);
      v47 = sub_100023FEC((unint64_t *)&qword_100654F90, &qword_1006466D0, (uint64_t)&protocol conformance descriptor for [A]);
      v48 = static REMHashtagLabelCollection.sortedLabels<A>(from:)(&v69, v46, v47);
      v49 = swift_bridgeObjectRelease(v45);
      __chkstk_darwin(v49);
      *(&v63 - 2) = v28;
      v50 = sub_1000D2E48;
    }
    v58 = sub_1000D2AA8(v48, (uint64_t (*)(uint64_t, uint64_t, __n128))v50);
    sub_100005ED8(0, &qword_1006452E0, NSAttributedString_ptr);
    v59 = sub_100350498((uint64_t)_swiftEmptyArrayStorage);
    static NSAttributedString.formattedString(format:formatAttributes:attributedStringsToInsert:)(v64, v44, v59, v58);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v59);
    v34(v42, v33);
    v29 = v67;
    v40 = v65;
LABEL_12:
    v52 = TTRRemindersListViewModel.HashtagSelectionDescription.init(generic:preferred:)(v40);
    v60 = type metadata accessor for REMHashtagLabelSpecifier.Operation(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v29, v60);
    return v52;
  }
  if (v26 == enum case for REMHashtagLabelSpecifier.allLabels(_:))
  {
    v51 = static TTRLocalizableStrings.Hashtags.hashtagSelectionDescriptionAllTags.getter();
    return TTRRemindersListViewModel.HashtagSelectionDescription.init(generic:preferred:)(v51);
  }
  if (v26 == enum case for REMHashtagLabelSpecifier.noLabels(_:))
  {
    v51 = static TTRLocalizableStrings.Hashtags.hashtagSelectionDescriptionUntagged.getter();
    return TTRRemindersListViewModel.HashtagSelectionDescription.init(generic:preferred:)(v51);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v10, v10);
  __break(1u);
  return result;
}

id sub_1000D0F30(uint64_t a1, uint64_t a2, char a3)
{
  void *object;
  uint64_t v5;
  uint64_t inited;
  void **v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSString *v15;
  unint64_t v16;
  _OWORD *v17;
  id v18;
  NSString v19;
  Class isa;
  id v21;
  uint64_t v23;
  _BYTE v24[48];

  object = String.addingHashtagPrefix()()._object;
  v5 = sub_10002A750(&qword_1006452E8);
  inited = swift_initStackObject(v5, v24);
  *(_OWORD *)(inited + 16) = xmmword_100520250;
  v7 = (void **)NSAttributedStringKey.ttrHashtagSelectionDescriptionEmphasized.unsafeMutableAddressor();
  v8 = *v7;
  *(_QWORD *)(inited + 32) = *v7;
  *(_BYTE *)(inited + 40) = 1;
  v9 = v8;
  v10 = sub_100350D40(inited);
  v11 = sub_10002A750(&qword_10064BB40);
  v12 = swift_initStackObject(v11, &v23);
  *(_OWORD *)(v12 + 16) = xmmword_1005201E0;
  v13 = *v7;
  *(_QWORD *)(v12 + 32) = *v7;
  *(_BYTE *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 64) = &type metadata for Bool;
  *(_QWORD *)(v12 + 72) = NSStrikethroughStyleAttributeName;
  *(_QWORD *)(v12 + 104) = &type metadata for Int;
  *(_QWORD *)(v12 + 80) = 1;
  v14 = v13;
  v15 = NSStrikethroughStyleAttributeName;
  v16 = sub_100350498(v12);
  v17 = (_OWORD *)v16;
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease(v16);
    v17 = sub_1000D10D8(v10);
  }
  swift_bridgeObjectRelease(v10);
  v18 = objc_allocWithZone((Class)NSAttributedString);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  type metadata accessor for Key(0);
  sub_1000D2BEC();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  v21 = objc_msgSend(v18, "initWithString:attributes:", v19, isa);

  return v21;
}

_OWORD *sub_1000D10D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _OWORD *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void *v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _OWORD v36[4];
  _OWORD v37[2];
  _OWORD v38[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10002A750(&qword_1006452F0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v33 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = (_OWORD *)swift_retain(v3);
  v34 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v34 << 6);
      goto LABEL_28;
    }
    v12 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v32)
      goto LABEL_37;
    v13 = *(_QWORD *)(v33 + 8 * v12);
    v14 = v34 + 1;
    if (!v13)
    {
      v14 = v34 + 2;
      if (v34 + 2 >= v32)
        goto LABEL_37;
      v13 = *(_QWORD *)(v33 + 8 * v14);
      if (!v13)
      {
        v14 = v34 + 3;
        if (v34 + 3 >= v32)
          goto LABEL_37;
        v13 = *(_QWORD *)(v33 + 8 * v14);
        if (!v13)
        {
          v14 = v34 + 4;
          if (v34 + 4 >= v32)
            goto LABEL_37;
          v13 = *(_QWORD *)(v33 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v34 = v14;
LABEL_28:
    v16 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v11);
    v17 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v11);
    *(_QWORD *)&v38[0] = v16;
    LOBYTE(v37[0]) = v17;
    v18 = v16;
    swift_dynamicCast((char *)v38 + 8, v37, &type metadata for Bool, &type metadata for Any[8], 7);
    v19 = *(_QWORD *)&v38[0];
    sub_100028D38((_OWORD *)((char *)v38 + 8), v36);
    sub_100028D38(v36, v38);
    sub_100028D38(v38, v37);
    v20 = v3[5];
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;
    Hasher.init(_seed:)(&v35, v20);
    String.hash(into:)(&v35, v21, v23);
    v24 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v23);
    v25 = -1 << *((_BYTE *)v3 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)&v7[8 * (v26 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)&v7[8 * (v26 >> 6)])) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)&v7[8 * v27];
      }
      while (v31 == -1);
      v9 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(v3[6] + 8 * v9) = v19;
    result = sub_100028D38(v37, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v15 = v34 + 5;
  if (v34 + 5 >= v32)
  {
LABEL_37:
    swift_release(v3);
    sub_10003E410(a1);
    return v3;
  }
  v13 = *(_QWORD *)(v33 + 8 * v15);
  if (v13)
  {
    v14 = v34 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v32)
      goto LABEL_37;
    v13 = *(_QWORD *)(v33 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000D1468(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  void (*v34)(uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  double v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v2 = v1;
  LODWORD(v3) = a1;
  v4 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10002A750(&qword_1006452D0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMRemindersListDataView.TaggedModel(0, v9);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v64 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10063D398 != -1)
    swift_once(&qword_10063D398, sub_1000CE818);
  v15 = type metadata accessor for Logger(0);
  v61 = sub_100012DC4(v15, (uint64_t)qword_100644BF8);
  v16 = Logger.logObject.getter(v61);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v63 = v11;
  if (v18)
  {
    v19 = swift_slowAlloc(12, -1);
    v60 = v4;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v62 = v3;
    v3 = v21;
    v58 = v13;
    v59 = v12;
    *(_DWORD *)v20 = 136315138;
    v66 = v21;
    if ((v62 & 1) != 0)
      v22 = 1702195828;
    else
      v22 = 0x65736C6166;
    v23 = v7;
    v24 = v5;
    v25 = v2;
    if ((v62 & 1) != 0)
      v26 = 0xE400000000000000;
    else
      v26 = 0xE500000000000000;
    v65 = sub_100027E40(v22, v26, &v66);
    v12 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v20 + 4, v20 + 12);
    v27 = v26;
    v2 = v25;
    v5 = v24;
    v7 = v23;
    v13 = v58;
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "TTRShowTaggedViewModelSource: canShowHashtagLabelSelector did change {newValue: %s}", v20, 0xCu);
    swift_arrayDestroy(v3, 1, &type metadata for Any[8]);
    v28 = v3;
    LOBYTE(v3) = v62;
    swift_slowDealloc(v28, -1, -1);
    v29 = v20;
    v4 = v60;
    swift_slowDealloc(v29, -1, -1);
  }

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_canShowHashtagLabelSelector) != (v3 & 1))
  {
    *(_BYTE *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_canShowHashtagLabelSelector) = v3 & 1;
    v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
    v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource + 8);
    ObjectType = swift_getObjectType(v32, v30);
    v34 = *(void (**)(uint64_t, uint64_t, __n128))(v31 + 24);
    v35 = swift_unknownObjectRetain(v32);
    v36 = v31;
    v37 = (uint64_t)v63;
    v34(ObjectType, v36, v35);
    swift_unknownObjectRelease(v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v37, 1, v12) == 1)
    {
      v38 = sub_1000073A0(v37, &qword_1006452D0);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "TTRShowTaggedViewModelSource: skip refreshing view model; missing last fetch result.",
          v41,
          2u);
        swift_slowDealloc(v41, -1, -1);
      }

      return;
    }
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v64, v37, v12);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "TTRShowTaggedViewModelSource: refreshing view model due to canShowHashtagLabelSelector change", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    {
      v46 = v13;
      v47 = &_swiftEmptySetSingleton;
      goto LABEL_20;
    }
    v46 = v13;
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_10048D964((uint64_t)_swiftEmptyArrayStorage);
      v47 = v55;
    }
    else
    {
      v47 = &_swiftEmptySetSingleton;
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
        goto LABEL_20;
    }
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_10048D964((uint64_t)_swiftEmptyArrayStorage);
      v48 = v56;
LABEL_21:
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_10048D964((uint64_t)_swiftEmptyArrayStorage);
        v50 = v49;
        goto LABEL_24;
      }
LABEL_23:
      v50 = &_swiftEmptySetSingleton;
      v51 = &_swiftEmptySetSingleton;
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      {
LABEL_27:
        REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)(v47, v48, v50, v51, &_swiftEmptySetSingleton);
        v53 = v64;
        v54 = sub_1000D19B8(v64, (uint64_t)v7, 1);
        (*(void (**)(char *, uint64_t, double))(v5 + 8))(v7, v4, v54);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v53, v12);
        return;
      }
LABEL_24:
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_10048D964((uint64_t)_swiftEmptyArrayStorage);
        v51 = v52;
      }
      else
      {
        v51 = &_swiftEmptySetSingleton;
      }
      goto LABEL_27;
    }
LABEL_20:
    v48 = &_swiftEmptySetSingleton;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      goto LABEL_23;
    goto LABEL_21;
  }
}

double sub_1000D19B8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  double result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  int v105;
  uint64_t v106;
  char *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113[2];
  _QWORD v114[5];
  _OWORD v115[8];
  _BYTE v116[136];

  v4 = v3;
  v105 = a3;
  v7 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v10);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TTRRemindersListTreeViewModel.Section(0);
  v14 = *(_QWORD *)(v13 - 8);
  v100 = v13;
  v101 = v14;
  __chkstk_darwin(v13);
  v103 = (uint64_t)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  __chkstk_darwin(v95);
  v96 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TTRRemindersListViewModel.SectionHeader(0);
  v18 = __chkstk_darwin(v17);
  v97 = (uint64_t)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v102 = (char *)&v90 - v20;
  v21 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  v98 = *(_QWORD *)(v21 - 8);
  v99 = v21;
  __chkstk_darwin(v21);
  v110 = (uint64_t)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v93 = *(_QWORD *)(v23 - 8);
  v94 = v23;
  __chkstk_darwin(v23);
  v92 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for REMRemindersListDataView.FlatModel(0);
  v109 = *(_QWORD *)(v112 - 8);
  v25 = __chkstk_darwin(v112);
  v27 = (char *)&v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v90 - v28;
  v30 = sub_10002A750(&qword_10063F008);
  __chkstk_darwin(v30);
  v32 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_smartList;
  v34 = *(void **)(v4 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_smartList);
  v111 = a1;
  v106 = a2;
  v107 = v9;
  v104 = v12;
  if (v34)
  {
    v35 = objc_msgSend(v34, "sortingStyle");
    v37 = REMRemindersListDataView.TaggedModel.taggedSmartList.getter(v36);
    if (v37)
    {
      v38 = v37;
      goto LABEL_6;
    }
    if (v35)
      goto LABEL_12;
LABEL_15:
    v47 = 1;
    v108 = 1;
    goto LABEL_18;
  }
  v39 = REMRemindersListDataView.TaggedModel.taggedSmartList.getter(&selRef_supportsAttachments);
  if (!v39)
    goto LABEL_15;
  v38 = v39;
  v35 = 0;
LABEL_6:
  v40 = objc_msgSend(v38, "sortingStyle");

  if (!v35)
  {
    if (v40)
    {

      v108 = 0;
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (!v40)
  {
LABEL_12:

    v108 = 0;
    goto LABEL_18;
  }
  v91 = v4;
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v43 = v42;
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v46 = v44;
  if (v41 == v45 && v43 == v44)
    v108 = 1;
  else
    v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v45, v44, 0);

  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v46);
  v4 = v91;
LABEL_18:
  v48 = v109;
  v49 = REMRemindersListDataView.TaggedModel.taggedSmartList.getter((_QWORD *)v47);
  v50 = *(void **)(v4 + v33);
  v51 = v4;
  *(_QWORD *)(v4 + v33) = v49;

  v52 = ((uint64_t (*)(void))REMRemindersListDataView.TaggedModel.flatModel.getter)();
  REMRemindersListDataView.FlatModel.remindersCount.getter(v52);
  v53 = *(void (**)(char *, uint64_t))(v48 + 8);
  v53(v29, v112);
  v54 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48))(v32, 1, v54);
  if (v56 == 1)
  {
    v57 = sub_1000073A0((uint64_t)v32, &qword_10063F008);
    v58 = 0;
  }
  else
  {
    v58 = REMRemindersListDataView.CountByCompleted.completed.getter();
    v57 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v32, v54);
  }
  v59 = v56 == 1;
  v60 = v51;
  v61 = v51 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_completedRemindersCount;
  *(_QWORD *)v61 = v58;
  *(_BYTE *)(v61 + 8) = v59;
  v62 = REMRemindersListDataView.TaggedModel.flatModel.getter(v57);
  v63 = REMRemindersListDataView.FlatModel.hasIncompleteOrCompletedReminders.getter(v62);
  v53(v27, v112);
  *(_BYTE *)(v51 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_hasIncompleteOrCompletedReminders) = v63;
  if ((v108 & 1) != 0 || (v64 = *(void **)(v51 + v33)) == 0)
  {
    v69 = v110;
    sub_1000CE8A8(v110);
    v70 = v60;
    if (qword_10063D3A0 != -1)
      swift_once(&qword_10063D3A0, sub_1000D02B0);
    v71 = sub_100012DC4(v95, (uint64_t)qword_100644C10);
    v72 = v96;
    sub_10002B1E8(v71, v96, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    sub_1000D2B94(v115);
    sub_10003E0EC((uint64_t)v115, (uint64_t)v116);
    v73 = (uint64_t)v102;
    TTRRemindersListViewModel.SectionHeader.init(id:title:isVisible:isTappable:isTitleEditable:isCollapsable:isCustomSmartList:listObjectID:)(v72, v116, 0, 0, 0, 0, 0, 0);
    v74 = v97;
    v75 = sub_10002B1E8(v73, v97, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    v76 = REMRemindersListDataView.TaggedModel.flatModel.getter(v75);
    v77 = REMRemindersListDataView.FlatModel.reminders.getter(v76);
    v53(v27, v112);
    v78 = v103;
    sub_10001F580(v74, v103, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    v79 = v100;
    *(_QWORD *)(v78 + *(int *)(v100 + 20)) = v77;
    *(_BYTE *)(v78 + *(int *)(v79 + 24)) = 0;
    v80 = (uint64_t)v104;
    sub_10002B1E8(v69, (uint64_t)v104, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v80, 0, 1, v99);
    v81 = sub_10002A750(&qword_1006452D8);
    v82 = *(unsigned __int8 *)(v101 + 80);
    v83 = (v82 + 32) & ~v82;
    v84 = swift_allocObject(v81, v83 + *(_QWORD *)(v101 + 72), v82 | 7);
    *(_OWORD *)(v84 + 16) = xmmword_100520250;
    sub_10002B1E8(v78, v84 + v83, type metadata accessor for TTRRemindersListTreeViewModel.Section);
    v85 = type metadata accessor for TTRRemindersListObjectIDOnlyReminderIDProvider();
    v86 = swift_allocObject(v85, 16, 7);
    v87 = type metadata accessor for TTRRemindersListViewModel.Item(0);
    v88 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v107, 1, 1, v87);
    v114[3] = v85;
    v114[4] = &off_100604210;
    v114[0] = v86;
    sub_100010634((uint64_t)v114, (uint64_t)v113);
    v89 = swift_allocObject(&unk_1005F0798, 72, 7);
    *(_QWORD *)(v89 + 16) = v84;
    sub_10002E37C(v113, v89 + 24);
    *(_QWORD *)(v89 + 64) = v70;
    swift_retain();
    swift_bridgeObjectRetain(v84);
    swift_retain();
    sub_10047C8F8(1, v80, (uint64_t (*)(uint64_t))sub_10003E360, v89, v106, v105 & 1, v88);
    swift_release();
    sub_100027F10(v114);
    swift_bridgeObjectRelease(v84);
    sub_1000073A0(v88, (uint64_t *)&unk_100640EB0);
    sub_1000073A0(v80, &qword_100649CA0);
    sub_10001F544(v78, type metadata accessor for TTRRemindersListTreeViewModel.Section);
    sub_10001F544(v73, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionHeader);
    sub_10001F544(v110, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ListInfo);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  else
  {
    v65 = v64;
    v66 = objc_msgSend(v65, "sortingStyle");
    v67 = (uint64_t)v92;
    REMSortingStyle.dataViewSortingStyle.getter();

    sub_100474118(v67, 1);
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v67, v94);
  }
  return result;
}

uint64_t sub_1000D2198()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource____lazy_storage___dragAndDropCapability));

  return swift_unknownObjectRelease(*(_QWORD *)(v0
                                              + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource));
}

uint64_t sub_1000D21D4()
{
  uint64_t v0;

  v0 = sub_10046B320();
  swift_release();

  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D2234()
{
  return type metadata accessor for TTRShowTaggedViewModelSource(0);
}

uint64_t type metadata accessor for TTRShowTaggedViewModelSource(uint64_t a1)
{
  uint64_t result;

  result = qword_100644C88;
  if (!qword_100644C88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTRShowTaggedViewModelSource);
  return result;
}

uint64_t sub_1000D2278(uint64_t a1)
{
  _QWORD v2[7];

  v2[0] = "\b";
  v2[1] = "\b";
  v2[2] = &unk_100523C88;
  v2[3] = &unk_100523CA0;
  v2[4] = &unk_100523CB8;
  v2[5] = &unk_100523CD0;
  v2[6] = &unk_100523CD0;
  return swift_updateClassMetadata2(a1, 256, 7, v2, a1 + 1336);
}

double sub_1000D22E4(uint64_t a1, uint64_t a2)
{
  return sub_1000D19B8(a1, a2, 0);
}

uint64_t sub_1000D22EC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;

  result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC9Reminders31TTRRemindersListViewModelSource_delegate);
  if (result)
  {
    v3 = result;
    ObjectType = swift_getObjectType(result, v2);
    if (swift_conformsToProtocol2(ObjectType, &protocol descriptor for TTRShowTaggedViewModelSourceDelegate))
      v5 = v3;
    else
      v5 = 0;
    if (v5)
      sub_10025A6D0(*(unsigned __int8 *)(v0
                                       + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_canShowHashtagLabelSelector));
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000D2360@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_10063D3A0 != -1)
    swift_once(&qword_10063D3A0, sub_1000D02B0);
  v5 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  v6 = sub_100012DC4(v5, (uint64_t)qword_100644C10);
  if ((static TTRRemindersListViewModel.SectionID.__derived_enum_equals(_:_:)(a1, v6) & 1) != 0)
  {
    v8 = v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource;
    v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Reminders28TTRShowTaggedViewModelSource_taggedDataModelSource);
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType(v9, v7);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 16);
    v13 = swift_unknownObjectRetain(v9);
    v14 = v12(ObjectType, v10, v13);
    v16 = v15;
    swift_unknownObjectRelease(v9);
    v18 = swift_getObjectType(v14, v17);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v16);
    swift_unknownObjectRelease(v14);
    v19 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
    swift_storeEnumTagMultiPayload(a2, v19, 3);
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
    v21 = a2;
    v22 = 0;
    v23 = v19;
  }
  else
  {
    v23 = type metadata accessor for TTRRemindersListMatchedAttributeValue(0);
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
    v21 = a2;
    v22 = 1;
  }
  return v20(v21, v22, 1, v23);
}

void sub_1000D24A0()
{
  sub_1000D2C34();
}

uint64_t sub_1000D24A8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ShowTaggedViewModelSourceHashtagContext()
{
  return objc_opt_self(_TtC9RemindersP33_CF72F6499833E8AC17730EAC4F2CA04739ShowTaggedViewModelSourceHashtagContext);
}

uint64_t sub_1000D24F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v2 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 16), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
}

uint64_t sub_1000D2538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v11;

  v3 = type metadata accessor for REMHashtagLabelSpecifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 16), v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, ObjectType, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_1000D25F4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = type metadata accessor for REMHashtagLabelSpecifier(0);
  *v3 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[1] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[2] = malloc(v6);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v3[4] = v7;
  v3[5] = v8;
  v3[6] = v9;
  v3[7] = swift_getObjectType(v8, v10);
  (*(void (**)(void))(v9 + 8))();
  return sub_1000D26A4;
}

void sub_1000D26A4(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 24), v3[4], *v3);
  v5 = v3[6];
  v6 = (void *)v3[4];
  v7 = (void *)v3[2];
  v8 = (void *)v3[3];
  v9 = *v3;
  v10 = v3[1];
  if ((a2 & 1) != 0)
  {
    v11 = v3[7];
    v4(v3[2], v3[3], *v3);
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v5);
    v12 = *(void (**)(void *, uint64_t))(v10 + 8);
    v12(v8, v9);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v5 + 16))(v3[3], v3[7], v3[6]);
    v12 = *(void (**)(void *, uint64_t))(v10 + 8);
  }
  v12(v6, v9);
  free(v6);
  free(v8);
  free(v7);
  free(v3);
}

uint64_t sub_1000D2780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v2 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 16), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
}

uint64_t sub_1000D27BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    return __CocoaDictionary.startIndex.getter(a1);
  }
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v1 = 1 << v5;
  if (v6 < 7)
    return v1;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v3 = 64;
  while (v8)
  {
    v10 = *v9++;
    v2 = v10;
    --v8;
    v3 += 64;
    if (v10)
      return __clz(__rbit64(v2)) + v3;
  }
  return v1;
}

void sub_1000D287C(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;

  v7 = a2;
  if ((a5 & 0xC000000000000001) == 0)
  {
    if ((a4 & 1) != 0)
      goto LABEL_13;
    if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
    {
      if (*(_DWORD *)(a5 + 36) == (_DWORD)a3)
      {
LABEL_15:
        v20 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * v7);
        v21 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v7);
        *a1 = v21;
        v20;
        v22 = v21;
        return;
      }
      __break(1u);
LABEL_13:
      if (__CocoaDictionary.Index.age.getter(a2, a3) == *(_DWORD *)(a5 + 36))
      {
        v15 = __CocoaDictionary.Index.key.getter(v7, a3);
        v23 = v15;
        v16 = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
        swift_unknownObjectRetain(v15);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v17 = v24;
        swift_unknownObjectRelease(v15);
        v7 = sub_1002AA364((uint64_t)v17);
        v19 = v18;

        if ((v19 & 1) != 0)
          goto LABEL_15;
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  if ((a4 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (a5 < 0)
    v9 = a5;
  else
    v9 = a5 & 0xFFFFFFFFFFFFFF8;
  v10 = __CocoaDictionary.lookup(_:)(a2, a3, v9);
  v12 = v11;
  v23 = v10;
  v13 = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  swift_unknownObjectRetain(v10);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v10);
  v23 = v12;
  v14 = sub_100005ED8(0, &qword_100649C20, REMReminder_ptr);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
  *a1 = v24;
  swift_unknownObjectRelease(v12);
}

_QWORD *sub_1000D2AA8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, __n128))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v9 = swift_bridgeObjectRetain(*v6);
      v10 = a2(v7, v8, v9);
      v11 = sub_1000D0F30(v7, v8, v10 & 1);
      v12 = swift_bridgeObjectRelease(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized ContiguousArray._endMutation()(v14);
      v6 += 2;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

double sub_1000D2B94(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 106) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1000D2BB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100027F10((_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000D2BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10037B9D4(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_1000D2BEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064BB50;
  if (!qword_10064BB50)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_10051FF08, v1);
    atomic_store(result, (unint64_t *)&qword_10064BB50);
  }
  return result;
}

void sub_1000D2C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v0 = type metadata accessor for TTRRemindersListViewModel.ReminderID(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for TTRRemindersListViewModel.Item.ReminderCasesInItem(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTRRemindersListViewModel.Item.reminderCasesOnly.getter(v2);
  v5 = (char *)sub_1000D2CF4 + 4 * byte_100523C10[swift_getEnumCaseMultiPayload(v4, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1000D2CF4()
{
  uint64_t v0;

  sub_10001F544(v0, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item.ReminderCasesInItem);
  return 0;
}

unint64_t sub_1000D2DA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100649F10;
  if (!qword_100649F10)
  {
    v1 = sub_100005ED8(255, &qword_100645310, REMHashtag_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100649F10);
  }
  return result;
}

uint64_t sub_1000D2DF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000CEF6C(v1, a1);
}

uint64_t sub_1000D2E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100649CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D2E4C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  void (*v73)(void *, _UNKNOWN **, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, _UNKNOWN **);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD *, _UNKNOWN **, uint64_t, uint64_t, __n128);
  __n128 v89;
  _QWORD *v90;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  id v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  __int128 v108;
  _OWORD v109[24];
  _QWORD v110[16];
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v99 = a1;
  v100 = a3;
  v4 = type metadata accessor for TTRIRemindersCommonPresenterConfiguration(0);
  __chkstk_darwin(v4);
  v93 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for TTRIRemindersListAssembly.PresenterConfigurationBuilder(0);
  __chkstk_darwin(v98);
  v104 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TTRListType.SortingCapability(0);
  v8 = __chkstk_darwin(v7);
  v96 = (uint64_t)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v103 = (uint64_t)&v92 - v10;
  v102 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v11 = *(_QWORD *)(v102 - 8);
  v12 = __chkstk_darwin(v102);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v101 = (char *)&v92 - v15;
  v16 = type metadata accessor for REMSuggestedAttributesElector.ExcludedAttributes(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TTRIRemindersListAssembly.CommonParameters(0);
  __chkstk_darwin(v19);
  v21 = (void **)((char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = sub_10002B1E8((uint64_t)a2, (uint64_t)v21, v22);
  static REMSuggestedAttributesElector.ExcludedAttributes.nonAssignableLists.getter(v23);
  sub_100041F70(v21, (uint64_t)v18, (void *)1, (uint64_t)v110);
  v24 = (void *)TTRListType.PredefinedSmartListType.smartList(in:)(*a2, 4);
  if (v24)
  {
    *(_QWORD *)&v109[0] = sub_1000D39F0();
    *((_QWORD *)&v109[0] + 1) = &protocol witness table for REMSmartList;
    v25 = v24;
  }
  else
  {
    v25 = 0;
    v108 = 0u;
    v109[0] = 0u;
  }
  LODWORD(v92) = v24 != 0;
  v107 = v24;
  TTRListType.PredefinedSmartListType.fallbackSortingStyle.getter(4);
  v95 = v25;
  v26 = v101;
  static REMRemindersListDataView.SortingStyle.sortingStyle(for:fallback:)(&v107, v14);
  v27 = v102;
  v97 = *(void (**)(char *, uint64_t))(v11 + 8);
  v97(v14, v102);
  sub_1000073A0((uint64_t)&v107, &qword_100649C80);
  v94 = a2;
  v28 = (void *)*a2;
  v29 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v29(v14, v26, v27);
  v30 = type metadata accessor for TTRShowAssignedDataModelSource(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = TTRShowAssignedDataModelSource.init(store:countCompleted:sortingStyle:canChangeSortingStyle:)(v28, 0, v14, 1);
  v29(v14, v26, v27);
  v32 = v103;
  TTRListType.SortingCapability.init(canChangeSortingStyle:canSortByManual:initialSortingStyle:)(1, v92, v14);
  v33 = (void *)v110[0];
  v34 = v96;
  sub_10002B1E8(v32, v96, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  v35 = type metadata accessor for TTRShowAssignedViewModelSource(0);
  v36 = (_QWORD *)swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v37 = v95;
  swift_retain(v31);
  v38 = v33;
  v39 = sub_1000D36AC(v24, v31, v38, v34, 0, v36);
  v95 = v37;

  v96 = v31;
  swift_release(v31);

  sub_10002B1E8((uint64_t)v94, (uint64_t)v21, type metadata accessor for TTRIRemindersListAssembly.CommonParameters);
  sub_100043000((uint64_t)v110, (uint64_t)&v107);
  swift_retain(v39);
  sub_100042A94((uint64_t)v21, (uint64_t)&v107, v39, (uint64_t)&off_100609110, v104);
  v40 = (uint64_t)v93;
  sub_100042C0C((uint64_t)v93);
  v41 = type metadata accessor for TTRIRemindersCommonPresenter(0);
  v42 = *(unsigned int *)(v41 + 48);
  v43 = *(unsigned __int16 *)(v41 + 52);
  v94 = (_QWORD *)v41;
  v44 = swift_allocObject(v41, v42, v43);
  v45 = v100;
  swift_unknownObjectRetain(v100);
  v46 = (_QWORD *)sub_1002A70CC(v40, v45, v44);
  v47 = v46[18];
  ObjectType = swift_getObjectType(v46[17], v48);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 104))(ObjectType, v47);
  if (v50)
  {
    v52 = v50;
    v53 = v51;
    v54 = swift_getObjectType(v50, v51);
    LOBYTE(v53) = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(v54, v53);
    swift_unknownObjectRelease(v52);
    LOBYTE(v50) = v53 & 1;
  }
  v55 = sub_100172EB4(v50, (uint64_t)v46);
  v93 = (char *)v56;
  v58 = v57;
  v60 = v59;
  v92 = swift_getObjectType(v57, v56);
  v46[3] = *(_QWORD *)(v60 + 8);
  v100 = v58;
  swift_unknownObjectWeakAssign(v46 + 2, v58);
  v61 = v46[18];
  v63 = swift_getObjectType(v46[17], v62);
  v64 = *(uint64_t (**)(uint64_t, uint64_t))(v61 + 104);
  swift_retain(v46);
  v65 = v55;
  v66 = v64(v63, v61);
  v68 = v66;
  if (v66)
  {
    v69 = v67;
    v70 = swift_getObjectType(v66, v67);
    LOBYTE(v69) = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 16))(v70, v69);
    swift_unknownObjectRelease(v68);
    v68 = v69 & 1;
  }
  v71 = objc_allocWithZone((Class)type metadata accessor for TTRIShowRemindersViewController(0));
  v72 = (void *)sub_1002A8974(v46, v65, v93, v68, 0, 1, 0, v71);
  swift_release(v46);

  v73 = *(void (**)(void *, _UNKNOWN **, uint64_t, uint64_t))(v60 + 32);
  v74 = v72;
  v93 = v74;
  v73(v72, &off_1005FCD60, v92, v60);
  v75 = v110[0] + direct field offset for TTRRemindersListInteractor.delegate;
  swift_beginAccess(v110[0] + direct field offset for TTRRemindersListInteractor.delegate, &v106, 1, 0);
  *(_QWORD *)(v75 + 8) = &off_1005F3190;
  swift_unknownObjectWeakAssign(v75, v46);
  v76 = v110[0] + direct field offset for TTRRemindersListInteractor.optimisticUpdatesDelegate;
  swift_beginAccess(v110[0] + direct field offset for TTRRemindersListInteractor.optimisticUpdatesDelegate, &v105, 1, 0);
  *(_QWORD *)(v76 + 8) = &protocol witness table for TTRShowAssignedDataModelSource;
  v77 = v96;
  swift_unknownObjectWeakAssign(v76, v96);
  swift_unknownObjectWeakAssign(v110[3] + 16, v74);
  v78 = *(void (**)(uint64_t, _UNKNOWN **))(*(_QWORD *)v77 + 392);
  v79 = swift_retain(v39);
  v78(v79, &off_1005EFE90);
  swift_retain(v39);
  v80 = swift_retain(v46);
  sub_10048D4EC(v80, (uint64_t)&off_1005F30C0);
  swift_release(v39);
  swift_release(v46);
  v81 = v104;
  v82 = *(_QWORD *)(v104 + *(int *)(v98 + 28));
  *(_QWORD *)(v82 + 24) = &off_1005F3260;
  swift_unknownObjectWeakAssign(v82 + 16, v46);
  sub_100028CFC((uint64_t)&v111, (uint64_t)&v107);
  *(_OWORD *)((char *)v109 + 8) = v112;
  *(_OWORD *)((char *)&v109[1] + 8) = v113;
  v83 = v112 + 32;
  *(_QWORD *)(v112 + 40) = &off_1005F3040;
  swift_unknownObjectWeakAssign(v83, v46);
  sub_100027F10(&v107);
  sub_100028CFC((uint64_t)&v114, (uint64_t)&v107);
  v84 = v115;
  v85 = v116;
  *((_QWORD *)&v109[0] + 1) = v115;
  *(_QWORD *)&v109[1] = v116;
  v87 = swift_getObjectType(v115, v86);
  v88 = *(void (**)(_QWORD *, _UNKNOWN **, uint64_t, uint64_t, __n128))(v85 + 48);
  swift_retain(v46);
  v89 = swift_unknownObjectRetain(v84);
  v88(v46, &off_1005F2FF0, v87, v85, v89);
  swift_unknownObjectRelease(v84);
  sub_100027F10(&v107);
  v90 = v99;
  v99[3] = v94;
  v90[4] = &off_1005F0888;
  *v90 = v46;

  swift_release(v77);
  swift_release(v39);

  swift_unknownObjectRelease(v100);
  sub_10001F544(v81, type metadata accessor for TTRIRemindersListAssembly.PresenterConfigurationBuilder);
  sub_10001F544(v103, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  v97(v101, v102);
  sub_100043844((uint64_t)v110);
  return (uint64_t)v93;
}

id TTRIShowAssignedAssembly.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIShowAssignedAssembly();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for TTRIShowAssignedAssembly()
{
  return objc_opt_self(_TtC9Reminders24TTRIShowAssignedAssembly);
}

id TTRIShowAssignedAssembly.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIShowAssignedAssembly();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000D36AC(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v45 = a3;
  v46 = a4;
  v47 = *a6;
  v11 = type metadata accessor for REMAnalyticsEvent(0);
  v48 = *(_QWORD *)(v11 - 8);
  v49 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TTRListType.SortingCapability(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_smartList;
  *(_QWORD *)((char *)a6 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_smartList) = 0;
  v21 = (char *)a6 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_completedRemindersCount;
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  *((_BYTE *)a6 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_hasCompletedReminders) = 2;
  *(_QWORD *)((char *)a6
            + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource____lazy_storage___dragAndDropCapability) = 0;
  v22 = *(void **)((char *)a6 + v20);
  *(_QWORD *)((char *)a6 + v20) = a1;
  swift_retain(a6);
  v23 = a1;

  v24 = (_QWORD *)((char *)a6 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_assignedDataModelSource);
  *v24 = a2;
  v24[1] = (uint64_t)&protocol witness table for TTRShowAssignedDataModelSource;
  *((_BYTE *)a6 + OBJC_IVAR____TtC9Reminders30TTRShowAssignedViewModelSource_hasDefaultNewReminderButton) = a5;
  swift_retain(a2);
  swift_release(a6);
  sub_10002B1E8(a4, (uint64_t)v19, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  swift_retain(a2);
  v25 = sub_1002A8704(a2, (uint64_t)v45, (uint64_t)v19, (uint64_t)a6);
  swift_retain(v25);
  sub_1000B1AA8((uint64_t)v16);
  v26 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v16, 0, 1, v26);
  sub_10046ADD4((uint64_t)v16);
  v27 = sub_1000073A0((uint64_t)v16, &qword_100649CA0);
  v28 = *(void **)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor(v27);
  type metadata accessor for REMAnalyticsManager(0);
  v29 = v28;
  v30 = static REMAnalyticsManager.shared.getter();
  v31 = sub_10002A750(&qword_100645348);
  v32 = &v13[*(int *)(v31 + 48)];
  v33 = &v13[*(int *)(v31 + 80)];
  v34 = enum case for REMRemindersOpenUserOperation.SmartListType.assigned(_:);
  v35 = type metadata accessor for REMRemindersOpenUserOperation.SmartListType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v13, v34, v35);
  v36 = enum case for REMRemindersOpenUserOperation.smartList(_:);
  v37 = type metadata accessor for REMRemindersOpenUserOperation(0);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v13, v36, v37);
  *(_QWORD *)v32 = TTRUserDefaults.activitySessionId.getter(v38);
  *((_QWORD *)v32 + 1) = v39;
  TTRUserDefaults.activitySessionBeginTime.getter();
  *(_QWORD *)v33 = _typeName(_:qualified:)(v47, 0);
  *((_QWORD *)v33 + 1) = v40;
  v42 = v48;
  v41 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v13, enum case for REMAnalyticsEvent.openListUserOperation(_:), v49);
  REMAnalyticsManager.post(event:)(v13);

  swift_release(v30);
  swift_release(v25);
  sub_10001F544(v46, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v41);
  return v25;
}

unint64_t sub_1000D39F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100645340;
  if (!qword_100645340)
  {
    v1 = objc_opt_self(REMSmartList);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100645340);
  }
  return result;
}

uint64_t sub_1000D3A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1000D3A68(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v49;
  char *v50;
  void **aBlock;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;

  v5 = v4;
  v10 = type metadata accessor for TTRAutoCategorizationOverlayView(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v50 = (char *)&v49 - v14;
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      v15 = a2;
      v49 = static TTRLocalizableStrings.AutoCategorization.multipleItemsTitle(withCount:)(a1);
      v17 = v16;
      v18 = TTRSection.displayName.getter(a2, a3 & 0x3F);
      v20 = v19;
      sub_1000D54E4(a1, a2, a3);
    }
    else
    {
      v49 = static TTRLocalizableStrings.AutoCategorization.multipleItemsTitle(withCount:)(a1);
      v17 = v24;
      v18 = static TTRLocalizableStrings.AutoCategorization.multipleItemsSubtitle.getter();
      v20 = v25;
    }
  }
  else
  {
    v21 = a2;
    v49 = static TTRLocalizableStrings.AutoCategorization.singleItemTitle.getter();
    v17 = v22;
    v18 = TTRSection.displayName.getter(a2, a3);
    v20 = v23;

  }
  sub_1000D54AC(a1, a2, a3);
  sub_1000D5360(a1, a2, a3);
  sub_1000D54E4(a1, a2, a3);
  if ((a4 & 1) != 0)
  {
    v27 = 0xE700000000000000;
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6D756C6F63, 0xE700000000000000, 1953720684, 0xE400000000000000, 0);
  }
  else
  {
    v26 = 1;
    v27 = 0xE400000000000000;
  }
  swift_bridgeObjectRelease(v27);
  v28 = swift_allocObject(&unk_1005F08B8, 24, 7);
  swift_weakInit(v28 + 16, v5);
  v29 = swift_allocObject(&unk_1005F08E0, 41, 7);
  *(_QWORD *)(v29 + 16) = v28;
  *(_QWORD *)(v29 + 24) = a1;
  *(_QWORD *)(v29 + 32) = a2;
  *(_BYTE *)(v29 + 40) = a3;
  v30 = (uint64_t)v50;
  TTRAutoCategorizationOverlayView.init(titleString:subtitleString:shouldShowArrow:tapHandler:)(v49, v17, v18, v20, v26 & 1, sub_1000D5570, v29);
  v31 = OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController;
  v32 = *(void **)(v5 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController);
  if (v32)
  {
    sub_1000D55CC(v30, (uint64_t)v13);
    sub_1000D54AC(a1, a2, a3);
    v33 = v32;
    dispatch thunk of UIHostingController.rootView.setter(v13);

  }
  else
  {
    sub_1000D54AC(a1, a2, a3);
    v34 = sub_1000D412C(v30);
    v35 = *(void **)(v5 + v31);
    *(_QWORD *)(v5 + v31) = v34;

    v36 = (void *)objc_opt_self(UIView);
    v55 = sub_1000D5580;
    v56 = v5;
    aBlock = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_100006378;
    v54 = &unk_1005F08F8;
    v37 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v36, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v37, 0, 0.24, 0.0, 0.2, 0.0);
    _Block_release(v37);
  }
  v38 = OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayTimer;
  v39 = *(void **)(v5 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayTimer);
  if (v39)
    objc_msgSend(v39, "invalidate");
  v40 = 10.0;
  if (!UIAccessibilityIsSwitchControlRunning() && (static UIAccessibility.ttriIsVoiceControlRunning.getter() & 1) == 0)
  {
    if ((static UIAccessibility.ttriIsFullKeyboardAccessRunning.getter() & 1) != 0)
      v40 = 10.0;
    else
      v40 = 3.0;
  }
  v41 = swift_allocObject(&unk_1005F08B8, 24, 7);
  swift_weakInit(v41 + 16, v5);
  v55 = sub_1000D5588;
  v56 = v41;
  aBlock = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_1000D4884;
  v54 = &unk_1005F0920;
  v42 = _Block_copy(&aBlock);
  v43 = (void *)objc_opt_self(NSTimer);
  swift_retain();
  v44 = objc_msgSend(v43, "timerWithTimeInterval:repeats:block:", 0, v42, v40);
  _Block_release(v42);
  swift_release();
  swift_release();
  v45 = *(void **)(v5 + v38);
  *(_QWORD *)(v5 + v38) = v44;
  v46 = v44;

  v47 = objc_msgSend((id)objc_opt_self(NSRunLoop), "currentRunLoop");
  objc_msgSend(v47, "addTimer:forMode:", v46, NSRunLoopCommonModes);

  return sub_1000D5590(v30);
}

void sub_1000D3F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  void *v20;
  void *v21;
  void *v22;
  void **aBlock;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char v29[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    v10 = *(void **)(Strong
                   + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController);
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v11, "view");
      if (v12)
      {
        v13 = v12;
        v14 = objc_msgSend(v12, "isHidden");

        if ((v14 & 1) == 0)
        {
          v15 = swift_unknownObjectWeakLoadStrong(v9 + 16);
          if (v15)
          {
            v17 = v15;
            v18 = *(_QWORD *)(v15 + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_presenter + 8);
            ObjectType = swift_getObjectType(*(_QWORD *)(v15 + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_presenter), v16);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 936))(a2, a3, a4, ObjectType, v18);
            swift_unknownObjectRelease(v17);
          }
          v20 = (void *)objc_opt_self(UIView);
          v27 = sub_1000D5610;
          v28 = v9;
          aBlock = _NSConcreteStackBlock;
          v24 = 1107296256;
          v25 = sub_100006378;
          v26 = &unk_1005F0998;
          v21 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          v27 = sub_1000D5618;
          v28 = v9;
          aBlock = _NSConcreteStackBlock;
          v24 = 1107296256;
          v25 = sub_1000D3A2C;
          v26 = &unk_1005F09C0;
          v22 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(v20, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v21, v22, 0.24, 0.0, 0.2, 0.0);
          _Block_release(v22);
          _Block_release(v21);
        }
        swift_release();

      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      swift_release();
    }
  }
}

id sub_1000D412C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  void *v11;
  id v12;
  void *v13;
  id result;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  char v25;
  id v26;
  id v27;
  id v28;
  double v29;
  id v30;
  double v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Class isa;
  double v52;
  uint64_t v53;

  v2 = v1;
  v4 = type metadata accessor for UIHostingControllerSizingOptions(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TTRAutoCategorizationOverlayView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (!Strong)
    return 0;
  v11 = (void *)Strong;
  sub_1000D55CC(a1, (uint64_t)v9);
  v12 = objc_allocWithZone((Class)sub_10002A750(&qword_100645470));
  v13 = (void *)UIHostingController.init(rootView:)(v9);
  static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
  dispatch thunk of UIHostingController.sizingOptions.setter(v6);
  UIHostingController.safeAreaRegions.setter(0);
  result = objc_msgSend(v13, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_22;
  }
  v15 = result;
  objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  result = objc_msgSend(v13, "view");
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = result;
  objc_msgSend(result, "setAlpha:", 0.0);

  result = objc_msgSend(v13, "view");
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v17 = result;
  v18 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v17, "setBackgroundColor:", v18);

  objc_msgSend(v11, "addChildViewController:", v13);
  result = objc_msgSend(v11, "view");
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v19 = result;
  result = objc_msgSend(v13, "view");
  if (result)
  {
    v20 = result;
    objc_msgSend(v19, "addSubview:", result);

    objc_msgSend(v13, "didMoveToParentViewController:", v11);
    v21 = objc_msgSend(v13, "view");
    if (v21)
    {
      v22 = v21;
      v23 = objc_msgSend(v11, "view");
      if (v23)
      {
        v24 = v23;
        v25 = *(_BYTE *)(v2
                       + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_alreadyAppliedWorkaround);
        v26 = objc_msgSend(v22, "bottomAnchor");
        if ((v25 & 1) != 0)
        {
          v27 = objc_msgSend(v24, "keyboardLayoutGuide");
          v28 = objc_msgSend(v27, "topAnchor");

          if (qword_10063D3A8 != -1)
            swift_once(&qword_10063D3A8, sub_1000D4F2C);
          v29 = -*(double *)&qword_100645350;
        }
        else
        {
          v30 = objc_msgSend(v24, "layoutMarginsGuide");
          v28 = objc_msgSend(v30, "bottomAnchor");

          v31 = -*(double *)(v2 + 32);
          if (qword_10063D3A8 != -1)
          {
            v52 = -*(double *)(v2 + 32);
            swift_once(&qword_10063D3A8, sub_1000D4F2C);
            v31 = v52;
          }
          v29 = v31 - *(double *)&qword_100645350;
        }
        v32 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v28, v29);

        v33 = *(void **)(v2
                       + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_workaroundOverlayBottomConstraint);
        *(_QWORD *)(v2
                  + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_workaroundOverlayBottomConstraint) = v32;
        v34 = v32;

        v52 = COERCE_DOUBLE(objc_opt_self(NSLayoutConstraint));
        v35 = sub_10002A750((uint64_t *)&unk_1006415A0);
        v36 = swift_allocObject(v35, 64, 7);
        *(_OWORD *)(v36 + 16) = xmmword_100520050;
        *(_QWORD *)(v36 + 32) = v34;
        v37 = v34;
        v38 = objc_msgSend(v22, "centerXAnchor");
        v39 = objc_msgSend(v24, "centerXAnchor");
        v40 = objc_msgSend(v38, "constraintEqualToAnchor:", v39);

        *(_QWORD *)(v36 + 40) = v40;
        v41 = objc_msgSend(v22, "leadingAnchor");
        v42 = objc_msgSend(v24, "layoutMarginsGuide");
        v43 = objc_msgSend(v42, "leadingAnchor");

        v44 = objc_msgSend(v41, "constraintGreaterThanOrEqualToAnchor:", v43);
        *(_QWORD *)(v36 + 48) = v44;
        v45 = objc_msgSend(v22, "trailingAnchor");
        v46 = objc_msgSend(v24, "layoutMarginsGuide");
        v47 = objc_msgSend(v46, "trailingAnchor");

        v48 = objc_msgSend(v45, "constraintLessThanOrEqualToAnchor:", v47);
        *(_QWORD *)(v36 + 56) = v48;
        v53 = v36;
        specialized Array._endMutation()(v49);
        v50 = v53;
        sub_1000D5620();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v50);
        objc_msgSend(*(id *)&v52, "activateConstraints:", isa);

        swift_unknownObjectRelease(v11);
        return v13;
      }

    }
    swift_unknownObjectRelease(v11);
    return 0;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1000D4728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void **aBlock;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  char v14[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = (void *)objc_opt_self(UIView);
    v12 = sub_1000D5610;
    v13 = v4;
    aBlock = _NSConcreteStackBlock;
    v9 = 1107296256;
    v10 = sub_100006378;
    v11 = &unk_1005F0948;
    v6 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v12 = sub_1000D5618;
    v13 = v4;
    aBlock = _NSConcreteStackBlock;
    v9 = 1107296256;
    v10 = sub_1000D3A2C;
    v11 = &unk_1005F0970;
    v7 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v5, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v6, v7, 0.24, 0.0, 0.2, 0.0);
    _Block_release(v7);
    _Block_release(v6);
    swift_release();
  }
}

void sub_1000D4884(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_1000D48D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayTimer);
  if (v1)
    objc_msgSend(v1, "invalidate");
  v2 = OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v4, "view");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "setHidden:", 1);

      v7 = objc_msgSend(v4, "view");
      if (v7)
      {
        v8 = v7;
        objc_msgSend(v7, "removeFromSuperview");

        objc_msgSend(v4, "willMoveToParentViewController:", 0);
        objc_msgSend(v4, "removeFromParentViewController");

        v9 = *(void **)(v0 + v2);
        *(_QWORD *)(v0 + v2) = 0;

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_1000D49D8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t Strong;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  _QWORD aBlock[6];

  v1 = OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_alreadyAppliedWorkaround;
  if ((*(_BYTE *)(v0
                 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_alreadyAppliedWorkaround) & 1) == 0)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController);
    if (v2)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
      if (Strong)
      {
        v4 = (void *)Strong;
        v5 = v2;
        v6 = objc_msgSend(v4, "view");
        if (v6)
        {
          v19 = v6;
          v7 = *(void **)(v0
                        + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_workaroundOverlayBottomConstraint);
          if (v7)
          {
            v8 = v7;
            objc_msgSend(v8, "setActive:", 0);
            v9 = objc_msgSend(v5, "view");
            if (v9)
            {
              v10 = v9;
              v11 = objc_msgSend(v9, "bottomAnchor");

              v12 = objc_msgSend(v19, "keyboardLayoutGuide");
              v13 = objc_msgSend(v12, "topAnchor");

              if (qword_10063D3A8 != -1)
                swift_once(&qword_10063D3A8, sub_1000D4F2C);
              v14 = objc_msgSend(v11, "constraintEqualToAnchor:constant:", v13, -*(double *)&qword_100645350);

              objc_msgSend(v14, "setActive:", 1);
              v15 = (void *)objc_opt_self(UIView);
              v16 = swift_allocObject(&unk_1005F09F8, 24, 7);
              *(_QWORD *)(v16 + 16) = v19;
              aBlock[4] = sub_1000D56F0;
              aBlock[5] = v16;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_100006378;
              aBlock[3] = &unk_1005F0A10;
              v17 = _Block_copy(aBlock);
              v18 = v19;
              swift_release();
              objc_msgSend(v15, "animateWithDuration:animations:", v17, 0.2);

              swift_unknownObjectRelease(v4);
              _Block_release(v17);
              *(_BYTE *)(v0 + v1) = 1;
            }
            else
            {
              __break(1u);
            }
          }
          else
          {

            swift_unknownObjectRelease(v4);
          }
        }
        else
        {

          swift_unknownObjectRelease(v4);
        }
      }
    }
  }
}

uint64_t sub_1000D4C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  void *v27;
  char v28;
  void *v30;
  _BYTE v31[24];

  v1 = sub_10002A750((uint64_t *)&unk_100653A90);
  __chkstk_darwin(v1);
  v3 = &v31[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  v10 = &v31[-v9 - 8];
  __chkstk_darwin(v11);
  v13 = &v31[-v12 - 8];
  v14 = v0
      + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary;
  v15 = *(unsigned __int8 *)(v0
                           + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary
                           + 16);
  if (v15 > 0xFB)
    goto LABEL_9;
  v16 = *(void **)(v14 + 8);
  v30 = *(void **)v14;
  v17 = v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityTimeOfMostRecentChange;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityTimeOfMostRecentChange, v31, 0, 0);
  sub_10002FC34(v17, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10002FBF4((uint64_t)v3);
LABEL_9:
    v28 = 0;
    return v28 & 1;
  }
  v18 = v30;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v3, v4);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!Strong)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_9;
  }
  v20 = Strong;
  sub_1000D54AC(v18, v16, v15);
  v21 = static Date.+ infix(_:_:)(v13, 10.0);
  static Date.now.getter(v21);
  v22 = static Date.> infix(_:_:)(v10, v7);
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v7, v4);
  v23(v10, v4);
  if ((v22 & 1) == 0)
  {
    v23(v13, v4);
    sub_1000D5670(v30, v16, v15);
    swift_unknownObjectRelease(v20);
    goto LABEL_9;
  }
  sub_1000D5360(0, 0, 0xFCu);
  v24 = *(_QWORD *)(v20 + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_presenter + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v20 + OBJC_IVAR____TtC9Reminders31TTRIShowRemindersViewController_presenter), v25);
  v27 = v30;
  v28 = (*(uint64_t (**)(void *, void *, uint64_t, uint64_t, uint64_t))(v24 + 936))(v30, v16, v15, ObjectType, v24);
  sub_1000D5670(v27, v16, v15);
  swift_unknownObjectRelease(v20);
  v23(v13, v4);
  return v28 & 1;
}

void sub_1000D4F2C()
{
  qword_100645350 = 0x4024000000000000;
}

void sub_1000D4F3C(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(void **)(a1 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "setHidden:", 0);

      v5 = objc_msgSend(v2, "view");
      if (v5)
      {
        v6 = v5;
        objc_msgSend(v5, "setAlpha:", 1.0);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_1000D4FFC(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(a1 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController);
  if (v1)
  {
    v2 = objc_msgSend(v1, "view");
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, "setAlpha:", 0.0);

    }
  }
}

void sub_1000D5060(char a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;

  if ((a1 & 1) != 0)
  {
    v3 = OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController;
    v4 = *(void **)(a2 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v5, "view");
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v6, "setHidden:", 1);

        v8 = objc_msgSend(v5, "view");
        if (v8)
        {
          v9 = v8;
          objc_msgSend(v8, "removeFromSuperview");

          objc_msgSend(v5, "willMoveToParentViewController:", 0);
          objc_msgSend(v5, "removeFromParentViewController");

          v10 = *(void **)(a2 + v3);
          *(_QWORD *)(a2 + v3) = 0;

          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

uint64_t sub_1000D5150()
{
  uint64_t v0;

  sub_1000381C8(v0 + 16);
  sub_10002FBF4(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityTimeOfMostRecentChange);
  sub_1000D5670(*(void **)(v0+ OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary), *(void **)(v0+ OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary+ 8), *(_BYTE *)(v0+ OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary+ 16));

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_workaroundOverlayBottomConstraint));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D51D0()
{
  return type metadata accessor for TTRIAutoCategorizationOverlayController(0);
}

uint64_t type metadata accessor for TTRIAutoCategorizationOverlayController(uint64_t a1)
{
  uint64_t result;

  result = qword_1006453B0;
  if (!qword_1006453B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTRIAutoCategorizationOverlayController);
  return result;
}

void sub_1000D5214(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100523E58;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100005F80(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100523E70;
    v4[4] = &unk_100523E88;
    v4[5] = &unk_100523E88;
    v4[6] = &unk_100523E88;
    v4[7] = &unk_100523EA0;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

uint64_t sub_1000D52B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit(v0 + 16, 0);
  *(_QWORD *)(v0 + 32) = 0;
  v1 = v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityTimeOfMostRecentChange;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = -4;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayTimer) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_overlayHostingController) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_workaroundOverlayBottomConstraint) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController__115183495_alreadyAppliedWorkaround) = 0;
  return v0;
}

uint64_t sub_1000D5360(void *a1, void *a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[24];

  v7 = sub_10002A750((uint64_t *)&unk_100653A90);
  __chkstk_darwin(v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = v3
      + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary;
  v11 = *(void **)(v3
                 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary);
  v12 = *(void **)(v3
                 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityMostRecentChangeSummary
                 + 8);
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 8) = a2;
  v13 = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(v10 + 16) = a3;
  sub_1000D565C(a1, a2, a3);
  sub_1000D5670(v11, v12, v13);
  if (*(unsigned __int8 *)(v10 + 16) < 0xFCu)
  {
    static Date.now.getter(v14);
    v16 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  }
  else
  {
    v15 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  }
  v17 = v3 + OBJC_IVAR____TtC9Reminders39TTRIAutoCategorizationOverlayController_ttriAccessibilityTimeOfMostRecentChange;
  swift_beginAccess(v17, v20, 33, 0);
  sub_1000D5684((uint64_t)v9, v17);
  return swift_endAccess(v20);
}

id sub_1000D54AC(id result, void *a2, unsigned __int8 a3)
{
  id v3;
  id v4;

  if (a3 >> 6 != 1)
  {
    if (a3 >> 6)
      return result;
    v4 = result;
    v3 = a2;
    a2 = v4;
  }
  return a2;
}

void sub_1000D54E4(void *a1, void *a2, unsigned __int8 a3)
{
  void *v3;

  if (a3 >> 6 != 1)
  {
    if (a3 >> 6)
      return;
    v3 = a2;

    a2 = v3;
  }

}

uint64_t sub_1000D551C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D5540()
{
  uint64_t v0;

  swift_release();
  sub_1000D54E4(*(void **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 41, 7);
}

void sub_1000D5570()
{
  uint64_t v0;

  sub_1000D3F0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

void sub_1000D5580()
{
  uint64_t v0;

  sub_1000D4F3C(v0);
}

void sub_1000D5588(uint64_t a1)
{
  uint64_t v1;

  sub_1000D4728(a1, v1);
}

uint64_t sub_1000D5590(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRAutoCategorizationOverlayView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D55CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRAutoCategorizationOverlayView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000D5610()
{
  uint64_t v0;

  sub_1000D4FFC(v0);
}

void sub_1000D5618(char a1)
{
  uint64_t v1;

  sub_1000D5060(a1, v1);
}

unint64_t sub_1000D5620()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064BB60;
  if (!qword_10064BB60)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10064BB60);
  }
  return result;
}

id sub_1000D565C(id result, void *a2, unsigned __int8 a3)
{
  if (a3 <= 0xFBu)
    return sub_1000D54AC(result, a2, a3);
  return result;
}

void sub_1000D5670(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 <= 0xFBu)
    sub_1000D54E4(a1, a2, a3);
}

uint64_t sub_1000D5684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750((uint64_t *)&unk_100653A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D56CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000D56F0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "layoutIfNeeded");
}

uint64_t sub_1000D5730(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a2 + 104))(0, 0, a1, a2);
}

uint64_t sub_1000D5748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100645478);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100645478);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

char *TTRListDetailInteractor.__allocating_init(editor:undoManager:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;

  v3 = v2;
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v6 = sub_1000D90EC(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v6;
}

char *TTRListDetailInteractor.init(editor:undoManager:)(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t v4;
  char *v5;

  v4 = *v2;
  v5 = sub_1000D90EC(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a1);
  return v5;
}

void TTRListDetailInteractor.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *v0;
  if (*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 112)))
  {
    v2 = v0;
    sub_100005ED8(0, (unint64_t *)&qword_10065C600, NSUndoManager_ptr);
    v3 = swift_retain();
    static NSUndoManager.removeObserver(with:)(v3);
    swift_release();
    sub_1000381C8((uint64_t)(v0 + 2));
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v2 + *(_QWORD *)(*v2 + 104));
    swift_release();
    swift_unknownObjectRelease(*(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 120)));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128) + 8));
  }
  else
  {
    __break(1u);
  }
}

uint64_t TTRListDetailInteractor.__deallocating_deinit()
{
  uint64_t v0;

  TTRListDetailInteractor.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t TTRListDetailInteractor.changeItem.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 24))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t TTRListDetailInteractor.hasUnsavedChanges.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v3, &protocol requirements base descriptor for TTRListDetailEditorType, &associated type descriptor for TTRListDetailEditorType.ListDetailChangeItemType);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v18 - v6;
  v8 = *(uint64_t *)((char *)v0 + *(_QWORD *)(v1 + 120));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
  swift_unknownObjectRetain(v8);
  v9(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &protocol requirements base descriptor for TTRListDetailEditorType, &associated conformance descriptor for TTRListDetailEditorType.TTRListDetailEditorType.ListDetailChangeItemType: TTRListDetailChangeItemType);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  if (v8)
  {
    v18 = v11;
    v19 = v8;
    v12 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for TTRListDetailChangeItemType, &associated type descriptor for TTRListDetailChangeItemType.Storage);
    v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v12, &protocol requirements base descriptor for TTRListDetailChangeItemType, &associated conformance descriptor for TTRListDetailChangeItemType.TTRListDetailChangeItemType.Storage: Equatable);
    swift_unknownObjectRetain(v8);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)(&v19, &v18, v12, v13);
    swift_unknownObjectRelease(v11);
    v15 = v19;
    swift_unknownObjectRelease(v8);
    swift_unknownObjectRelease(v15);
    v16 = v14 ^ 1;
  }
  else
  {
    swift_unknownObjectRelease(v11);
    v16 = 1;
  }
  return v16 & 1;
}

Swift::Void __swiftcall TTRListDetailInteractor.update(name:)(Swift::String name)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int128 v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  _BYTE v11[24];

  v2 = v1;
  v3 = *v1;
  v4 = (unsigned __int128)String.validatedListName()();
  v5 = *((_QWORD *)&v4 + 1);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 + 88) + 56))(v4, *((_QWORD *)&v4 + 1), *(_QWORD *)(v3 + 80));
  swift_bridgeObjectRelease(v5);
  swift_beginAccess(v1 + 2, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 2);
  if (Strong)
  {
    v8 = Strong;
    v9 = v2[3];
    ObjectType = swift_getObjectType(Strong, v7);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
    swift_unknownObjectRelease(v8);
  }
}

uint64_t TTRListDetailInteractor.update(color:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _BYTE v8[24];

  v2 = v1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 88) + 64))(a1, *(_QWORD *)(*(_QWORD *)v1 + 80));
  swift_beginAccess(v1 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(result, v4);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

Swift::Void __swiftcall TTRListDetailInteractor.update(badgeEmblem:)(__C::REMListBadgeEmblem badgeEmblem)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _BYTE v8[24];

  v2 = v1;
  (*(void (**)(NSString, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 88) + 72))(badgeEmblem._rawValue, *(_QWORD *)(*(_QWORD *)v1 + 80));
  swift_beginAccess(v1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong, v4);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    swift_unknownObjectRelease(v5);
  }
}

Swift::Void __swiftcall TTRListDetailInteractor.update(badgeEmoji:)(Swift::String badgeEmoji)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _BYTE v8[24];

  v2 = v1;
  (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 88) + 80))(badgeEmoji._countAndFlagsBits, badgeEmoji._object, *(_QWORD *)(*(_QWORD *)v1 + 80));
  swift_beginAccess(v1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong, v4);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    swift_unknownObjectRelease(v5);
  }
}

void TTRListDetailInteractor.update(filter:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 88) + 32))(&v16, *(_QWORD *)(*(_QWORD *)v1 + 80));
  if (v17)
  {
    sub_10002E37C(&v16, (uint64_t)v18);
    v4 = v19;
    v5 = v20;
    sub_10001413C(v18, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, v4, v5);
    swift_beginAccess(v1 + 16, &v16, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType(Strong, v7);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
      swift_unknownObjectRelease(v8);
    }
    sub_100027F10(v18);
  }
  else
  {
    sub_1000073A0((uint64_t)&v16, &qword_100645490);
    if (qword_10063D3B0 != -1)
      swift_once(&qword_10063D3B0, sub_1000D5748);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100012DC4(v11, (uint64_t)qword_100645478);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "TTRListDetailInteractor: failed to update filter; missing editor.filterEditingContext",
        v15,
        2u);
      swift_slowDealloc(v15, -1, -1);
    }

  }
}

void TTRListDetailInteractor.update(listType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 88) + 40))(&v16, *(_QWORD *)(*(_QWORD *)v1 + 80));
  if (v17)
  {
    sub_10002E37C(&v16, (uint64_t)v18);
    v4 = v19;
    v5 = v20;
    sub_10001413C(v18, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, v4, v5);
    swift_beginAccess(v1 + 16, &v16, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType(Strong, v7);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
      swift_unknownObjectRelease(v8);
    }
    sub_100027F10(v18);
  }
  else
  {
    sub_1000073A0((uint64_t)&v16, &qword_100645498);
    if (qword_10063D3B0 != -1)
      swift_once(&qword_10063D3B0, sub_1000D5748);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100012DC4(v11, (uint64_t)qword_100645478);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.fault.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "TTRListDetailInteractor: failed to update filter; missing editor.listTypeEditingContext",
        v15,
        2u);
      swift_slowDealloc(v15, -1, -1);
    }

  }
}

Swift::Void __swiftcall TTRListDetailInteractor.removeExistingSections()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 48))(&v8, *(_QWORD *)(*(_QWORD *)v0 + 80));
  if (v9)
  {
    sub_10002E37C(&v8, (uint64_t)v10);
    v1 = v11;
    v2 = v12;
    sub_10001413C(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
    sub_100027F10(v10);
  }
  else
  {
    sub_1000073A0((uint64_t)&v8, &qword_1006454A0);
    if (qword_10063D3B0 != -1)
      swift_once(&qword_10063D3B0, sub_1000D5748);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100012DC4(v3, (uint64_t)qword_100645478);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.fault.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "TTRListDetailInteractor: failed to remove existing sections; missing editor.sectionsEditingContext",
        v7,
        2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
}

uint64_t TTRListDetailInteractor.save(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v2 + 88) + 88))(a1, a2, *(_QWORD *)(*(_QWORD *)v2 + 80));
}

BOOL static TTRListDetailSavedObjectID.ObjectType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TTRListDetailSavedObjectID.ObjectType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int TTRListDetailSavedObjectID.ObjectType.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t TTRListDetailSavedObjectID.objectType.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t TTRListDetailSavedObjectID.undoNavigationEditingTarget.getter(void *a1, char a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD v8[4];
  _QWORD v9[4];

  if (a2)
  {
    if (a2 == 1)
    {
      v3 = &qword_100645340;
      v4 = REMSmartList_ptr;
    }
    else
    {
      v3 = &qword_1006454A8;
      v4 = REMTemplate_ptr;
    }
  }
  else
  {
    v3 = &qword_100640498;
    v4 = REMList_ptr;
  }
  v5 = sub_100005ED8(0, (unint64_t *)v3, v4);
  v9[3] = sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  v9[0] = a1;
  v8[3] = swift_getMetatypeMetadata(v5);
  v8[0] = v5;
  v6 = a1;
  return TTRUndoNavigationEditingTarget.init(id:itemType:)(v9, v8);
}

void TTRListEditor.listTypeEditingContext.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  unsigned int v5;

  v3 = *v1;
  v4 = objc_msgSend((id)v1[2], "accountCapabilities");
  v5 = objc_msgSend(v4, "supportsGroceriesList");

  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = &protocol witness table for TTRListEditor;
    swift_retain(v1);
  }
  else
  {
    v1 = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_QWORD *)a1 = v1;
}

id REMListChangeItem.canMakeIntoGroceriesList.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "accountCapabilities");
  v2 = objc_msgSend(v1, "supportsGroceriesList");

  return v2;
}

void TTRListEditor.sectionsEditingContext.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  unsigned int v5;

  v3 = *v1;
  v4 = objc_msgSend((id)v1[2], "accountCapabilities");
  v5 = objc_msgSend(v4, "supportsSections");

  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = &protocol witness table for TTRListEditor;
    swift_retain(v1);
  }
  else
  {
    v1 = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_QWORD *)a1 = v1;
}

id TTRListEditor.listDetailSave(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[6];

  v5 = *(void **)(v2 + 16);
  v6 = objc_msgSend(v5, "saveRequest");
  v7 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  v8 = (void *)static OS_dispatch_queue.main.getter(v7);
  v9 = swift_allocObject(&unk_1005F0A48, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v12[4] = sub_1000D94C4;
  v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100009944;
  v12[3] = &unk_1005F0A60;
  v10 = _Block_copy(v12);
  sub_100053DE4(a1, a2);
  objc_msgSend(v6, "saveWithQueue:completion:", v8, v10, swift_release().n128_f64[0]);
  _Block_release(v10);

  return objc_msgSend(v5, "objectID");
}

void TTRListEditor.edit(listType:)(char a1)
{
  TTRListEditor.edit(shouldCategorizeGroceryItems:)(a1 == 1);
}

Swift::Void __swiftcall TTRListEditor.removeExistingSections()()
{
  NSObject *v0;
  NSObject *v1;
  Class isa;
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  id v12;
  void *v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v1 = v0;
  isa = v0[2].isa;
  v3 = -[objc_class sectionsContextChangeItem](isa, "sectionsContextChangeItem");
  if (v3)
  {
    v4 = v3;
    v5 = (void *)TTRListEditor.store.getter();
    v24 = 0;
    v6 = objc_msgSend(v5, "fetchListSectionsForListSectionContextChangeItem:error:", v4, &v24);

    v7 = v24;
    if (v6)
    {
      v8 = sub_100005ED8(0, &qword_1006436D8, REMListSection_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v8);
      v10 = v7;

      if ((unint64_t)v9 >> 62)
        goto LABEL_22;
      v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (v11)
      {
        while (1)
        {
          if (__OFSUB__(v11--, 1))
          {
            __break(1u);
            goto LABEL_18;
          }
          if ((v9 & 0xC000000000000001) == 0)
            break;
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
LABEL_7:
          v13 = v12;
          v6 = v1;
          TTRListEditor.deleteSection(_:)();

          if (!v11)
            goto LABEL_26;
        }
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v11 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          v12 = *(id *)(v9 + 32 + 8 * v11);
          goto LABEL_7;
        }
        __break(1u);
LABEL_22:
        if (v9 < 0)
          v6 = v9;
        else
          v6 = (v9 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(v9);
        v11 = _CocoaArrayWrapper.endIndex.getter(v6);
        swift_bridgeObjectRelease(v9);
      }
LABEL_26:

      swift_bridgeObjectRelease(v9);
    }
    else
    {
      v15 = v24;
      v11 = _convertNSErrorToError(_:)(v7);

      swift_willThrow(v16);
      if (qword_10063D3B0 != -1)
        swift_once(&qword_10063D3B0, sub_1000D5748);
      v17 = type metadata accessor for Logger(0);
      sub_100012DC4(v17, (uint64_t)qword_100645478);
      v18 = swift_retain();
      v6 = Logger.logObject.getter(v18);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v20 = 138412290;
        v22 = -[objc_class objectID](isa, "objectID");
        v24 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v20 + 4, v20 + 12);
        *v21 = v22;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v6, v19, "TTRListEditor#removeExistingSections() : Failed to fetch sections in list {listID: %@}", v20, 0xCu);
        v23 = sub_10002A750(&qword_100642D60);
        swift_arrayDestroy(v21, 1, v23);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v20, -1, -1);
      }
      else
      {
LABEL_18:
        swift_release();
      }
      swift_errorRelease(v11);

    }
  }
}

id sub_1000D6980@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  *a1 = v2;
  return v2;
}

void sub_1000D6990(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  unsigned int v7;

  v5 = *v2;
  v6 = objc_msgSend(*(id *)(v5 + 16), "accountCapabilities");
  v7 = objc_msgSend(v6, "supportsGroceriesList");

  if (v7)
  {
    *(_QWORD *)(a2 + 24) = a1;
    *(_QWORD *)(a2 + 32) = &protocol witness table for TTRListEditor;
    swift_retain(v5);
  }
  else
  {
    v5 = 0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
  }
  *(_QWORD *)a2 = v5;
}

void sub_1000D6A24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  unsigned int v7;

  v5 = *v2;
  v6 = objc_msgSend(*(id *)(v5 + 16), "accountCapabilities");
  v7 = objc_msgSend(v6, "supportsSections");

  if (v7)
  {
    *(_QWORD *)(a2 + 24) = a1;
    *(_QWORD *)(a2 + 32) = &protocol witness table for TTRListEditor;
    swift_retain(v5);
  }
  else
  {
    v5 = 0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
  }
  *(_QWORD *)a2 = v5;
}

void sub_1000D6AB8(uint64_t a1, uint64_t a2)
{
  TTRListEditor.edit(name:)(*(Swift::String *)&a1);
}

uint64_t sub_1000D6AD8()
{
  return TTRListEditor.edit(color:)();
}

void sub_1000D6AF8(__C::REMListBadgeEmblem a1)
{
  TTRListEditor.edit(badgeEmblem:)(a1);
}

void sub_1000D6B18(uint64_t a1, uint64_t a2)
{
  TTRListEditor.edit(badgeEmoji:)(*(Swift::String *)&a1);
}

id sub_1000D6B38(uint64_t a1, uint64_t a2)
{
  return TTRListEditor.listDetailSave(completion:)(a1, a2);
}

void sub_1000D6B5C(char a1)
{
  TTRListEditor.edit(shouldCategorizeGroceryItems:)(a1 == 1);
}

void sub_1000D6B88()
{
  TTRListEditor.removeExistingSections()();
}

id REMListChangeItem.badge.getter()
{
  return sub_1000D7648((SEL *)&selRef_appearanceContext, (SEL *)&selRef_badge);
}

id REMListChangeItem.hasExistingSections.getter()
{
  void *v0;
  void *v1;
  id result;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v1 = v0;
  result = objc_msgSend(v0, "sectionsContextChangeItem");
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(v1, "saveRequest");
    v5 = objc_msgSend(v4, "store");

    v24 = 0;
    v6 = objc_msgSend(v5, "fetchListSectionsForListSectionContextChangeItem:error:", v3, &v24);

    v7 = v24;
    if (v6)
    {
      v8 = sub_100005ED8(0, &qword_1006436D8, REMListSection_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v8);
      v10 = v7;

      if ((unint64_t)v9 >> 62)
      {
        if (v9 < 0)
          v23 = v9;
        else
          v23 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v9);
        v11 = _CocoaArrayWrapper.endIndex.getter(v23);

        swift_bridgeObjectRelease_n(v9, 2);
      }
      else
      {
        v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease(v9);

      }
      return (id)(v11 != 0);
    }
    else
    {
      v12 = v24;
      v13 = _convertNSErrorToError(_:)(v7);

      swift_willThrow(v14);
      if (qword_10063D3B0 != -1)
        swift_once(&qword_10063D3B0, sub_1000D5748);
      v15 = type metadata accessor for Logger(0);
      sub_100012DC4(v15, (uint64_t)qword_100645478);
      v16 = v1;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v19 = 138412290;
        v21 = objc_msgSend(v16, "objectID");
        v24 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19 + 4, v19 + 12);
        *v20 = v21;

        _os_log_impl((void *)&_mh_execute_header, v17, v18, "REMListChangeItem#hasExistingSections : Failed to fetch sections in list {listID: %@}", v19, 0xCu);
        v22 = sub_10002A750(&qword_100642D60);
        swift_arrayDestroy(v20, 1, v22);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);
      }
      else
      {

      }
      swift_errorRelease(v13);

      return 0;
    }
  }
  return result;
}

id sub_1000D6EC0()
{
  id *v0;

  return objc_msgSend(*v0, "saveRequest");
}

id sub_1000D6EE4()
{
  id *v0;

  return objc_msgSend(*v0, "storage");
}

id sub_1000D6F08()
{
  id *v0;

  return objc_msgSend(*v0, "objectID");
}

id sub_1000D6F2C()
{
  id *v0;

  return objc_msgSend(*v0, "accountID");
}

id sub_1000D6F54()
{
  id *v0;

  return objc_msgSend(*v0, "color");
}

id sub_1000D6F78(uint64_t a1, uint64_t a2)
{
  return sub_1000D7750(a1, a2, (SEL *)&selRef_appearanceContext, (SEL *)&selRef_badge);
}

id sub_1000D6F8C()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, "accountCapabilities");
  v2 = objc_msgSend(v1, "supportsGroceriesList");

  return v2;
}

unint64_t sub_1000D6FD8()
{
  return (unint64_t)REMListChangeItem.hasExistingSections.getter() & 1;
}

double TTRSmartListEditor.filterEditingContext.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  double result;

  v3 = *v1;
  v4 = objc_msgSend((id)v1[2], "customContext");

  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = &protocol witness table for TTRSmartListEditor;
    *(_QWORD *)a1 = v1;
    swift_retain(v1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double TTRSmartListEditor.sectionsEditingContext.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_1000D8860("TTRSmartListEditor#sectionsEditingContext : Not implemented because not expected to be called", a1);
}

id TTRSmartListEditor.listDetailSave(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[6];

  v5 = *(void **)(v2 + 16);
  v6 = objc_msgSend(v5, "saveRequest");
  v7 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  v8 = (void *)static OS_dispatch_queue.main.getter(v7);
  v9 = swift_allocObject(&unk_1005F0A98, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v12[4] = sub_1000D9954;
  v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100009944;
  v12[3] = &unk_1005F0AB0;
  v10 = _Block_copy(v12);
  sub_100053DE4(a1, a2);
  objc_msgSend(v6, "saveWithQueue:completion:", v8, v10, swift_release().n128_f64[0]);
  _Block_release(v10);

  return objc_msgSend(v5, "objectID");
}

void sub_1000D71C0(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;

  if (a1)
  {
    if (qword_10063D3B0 != -1)
      swift_once(&qword_10063D3B0, sub_1000D5748);
    v4 = type metadata accessor for Logger(0);
    sub_100012DC4(v4, (uint64_t)qword_100645478);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v21 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(a1, v20, v19);
      v10 = Error.localizedDescription.getter(v19[1], v19[2]);
      v12 = v11;
      v18 = sub_100027E40(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error saving list: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      if (!a2)
        return;
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      if (!a2)
        return;
    }
    goto LABEL_12;
  }
  if (qword_10063D3B0 != -1)
    swift_once(&qword_10063D3B0, sub_1000D5748);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100012DC4(v13, (uint64_t)qword_100645478);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "List saved!", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  if (a2)
LABEL_12:
    a2();
}

double sub_1000D744C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  double result;

  v5 = *v2;
  v6 = objc_msgSend(*(id *)(v5 + 16), "customContext");

  if (v6)
  {
    *(_QWORD *)(a2 + 24) = a1;
    *(_QWORD *)(a2 + 32) = &protocol witness table for TTRSmartListEditor;
    *(_QWORD *)a2 = v5;
    swift_retain(v5);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_1000D74CC@<D0>(uint64_t a1@<X8>)
{
  return sub_1000D8D34("TTRSmartListEditor#sectionsEditingContext : Not implemented because not expected to be called", a1);
}

void sub_1000D74D8(uint64_t a1, uint64_t a2)
{
  TTRSmartListEditor.edit(name:)(*(Swift::String *)&a1);
}

uint64_t sub_1000D74F8()
{
  return TTRSmartListEditor.edit(color:)();
}

void sub_1000D7518(__C::REMListBadgeEmblem a1)
{
  TTRSmartListEditor.edit(badgeEmblem:)(a1);
}

void sub_1000D7538(uint64_t a1, uint64_t a2)
{
  TTRSmartListEditor.edit(badgeEmoji:)(*(Swift::String *)&a1);
}

id sub_1000D7558(uint64_t a1, uint64_t a2)
{
  return TTRSmartListEditor.listDetailSave(completion:)(a1, a2);
}

uint64_t sub_1000D757C()
{
  return TTRSmartListEditor.edit(filter:)();
}

void *REMSmartListChangeItem.name.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "customContext");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "name");

    v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }
  return v2;
}

id REMSmartListChangeItem.color.getter()
{
  return sub_1000D7648((SEL *)&selRef_customContext, (SEL *)&selRef_color);
}

id REMSmartListChangeItem.badge.getter()
{
  return sub_1000D7648((SEL *)&selRef_customContext, (SEL *)&selRef_badge);
}

id sub_1000D7648(SEL *a1, SEL *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = objc_msgSend(v2, *a1);
  v5 = objc_msgSend(v4, *a2);

  return v5;
}

uint64_t REMSmartListChangeItem.hasExistingSections.getter()
{
  return sub_1000D8EC8("REMSmartListChangeItem#sectionsEditingContext : Not implemented because not expected to be called");
}

void *sub_1000D76A4()
{
  id *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(*v0, "customContext");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "name");

    v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }
  return v2;
}

id sub_1000D7728(uint64_t a1, uint64_t a2)
{
  return sub_1000D7750(a1, a2, (SEL *)&selRef_customContext, (SEL *)&selRef_color);
}

id sub_1000D773C(uint64_t a1, uint64_t a2)
{
  return sub_1000D7750(a1, a2, (SEL *)&selRef_customContext, (SEL *)&selRef_badge);
}

id sub_1000D7750(uint64_t a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id *v4;
  id v6;
  id v7;

  v6 = objc_msgSend(*v4, *a3);
  v7 = objc_msgSend(v6, *a4);

  return v7;
}

uint64_t sub_1000D77A0(uint64_t a1, uint64_t a2)
{
  return sub_1000D901C(a1, a2, "REMSmartListChangeItem#sectionsEditingContext : Not implemented because not expected to be called");
}

void TTRListDetailInteractor<>.update(hashtags:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];

  v37 = a1;
  v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002A750(&qword_1006420E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750(&qword_100642098);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v35 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  v35 = *(_QWORD *)(v1 + 32);
  v36 = v1;
  v18 = objc_msgSend(*(id *)(v35 + 16), "customContext", v35);
  if (!v18 || (v19 = v18, v20 = (void *)REMSmartListCustomContextChangeItem.filter.getter(), v19, !v20))
  {
    v22 = type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v21 = REMCustomSmartListFilterDescriptor.__allocating_init()(v22);
    v20 = (void *)v21;
  }
  REMCustomSmartListFilterDescriptor.hashtags.getter(v21);
  v23 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v8, &qword_100642098);
  sub_10000735C(v37, v23, &qword_100642098);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v24((uint64_t)v8, 1, v2) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642098);
    if (v24(v23, 1, v2) == 1)
    {
      sub_1000073A0((uint64_t)v8, &qword_100642098);
      goto LABEL_14;
    }
  }
  else
  {
    sub_10000735C((uint64_t)v8, (uint64_t)v15, &qword_100642098);
    if (v24(v23, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v23, v2);
      v25 = sub_1000175C8(&qword_1006420F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterHashtags);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v5, v2, v25);
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v5, v2);
      sub_1000073A0((uint64_t)v17, &qword_100642098);
      v27(v15, v2);
      sub_1000073A0((uint64_t)v8, &qword_100642098);
      if ((v26 & 1) != 0)
        goto LABEL_14;
      goto LABEL_11;
    }
    sub_1000073A0((uint64_t)v17, &qword_100642098);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
  }
  sub_1000073A0((uint64_t)v8, &qword_1006420E8);
LABEL_11:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(v37, (uint64_t)v12, &qword_100642098);
  v28 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:hashtags:)(v20, v12);
  TTRSmartListEditor.edit(filter:)();
  v29 = v36;
  swift_beginAccess(v36 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v29 + 16);
  if (Strong)
  {
    v32 = Strong;
    v33 = *(_QWORD *)(v29 + 24);
    ObjectType = swift_getObjectType(Strong, v31);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(ObjectType, v33);
    swift_unknownObjectRelease(v32);
  }

LABEL_14:
}

void TTRListDetailInteractor<>.update(date:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];

  v37 = a1;
  v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002A750(&qword_1006420F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750(&qword_100642090);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v35 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  v35 = *(_QWORD *)(v1 + 32);
  v36 = v1;
  v18 = objc_msgSend(*(id *)(v35 + 16), "customContext", v35);
  if (!v18 || (v19 = v18, v20 = (void *)REMSmartListCustomContextChangeItem.filter.getter(), v19, !v20))
  {
    v22 = type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v21 = REMCustomSmartListFilterDescriptor.__allocating_init()(v22);
    v20 = (void *)v21;
  }
  REMCustomSmartListFilterDescriptor.date.getter(v21);
  v23 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v8, &qword_100642090);
  sub_10000735C(v37, v23, &qword_100642090);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v24((uint64_t)v8, 1, v2) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642090);
    if (v24(v23, 1, v2) == 1)
    {
      sub_1000073A0((uint64_t)v8, &qword_100642090);
      goto LABEL_14;
    }
  }
  else
  {
    sub_10000735C((uint64_t)v8, (uint64_t)v15, &qword_100642090);
    if (v24(v23, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v23, v2);
      v25 = sub_1000175C8(&qword_100642100, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterDate);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v5, v2, v25);
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v5, v2);
      sub_1000073A0((uint64_t)v17, &qword_100642090);
      v27(v15, v2);
      sub_1000073A0((uint64_t)v8, &qword_100642090);
      if ((v26 & 1) != 0)
        goto LABEL_14;
      goto LABEL_11;
    }
    sub_1000073A0((uint64_t)v17, &qword_100642090);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
  }
  sub_1000073A0((uint64_t)v8, &qword_1006420F8);
LABEL_11:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(v37, (uint64_t)v12, &qword_100642090);
  v28 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:date:)(v20, v12);
  TTRSmartListEditor.edit(filter:)();
  v29 = v36;
  swift_beginAccess(v36 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v29 + 16);
  if (Strong)
  {
    v32 = Strong;
    v33 = *(_QWORD *)(v29 + 24);
    ObjectType = swift_getObjectType(Strong, v31);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(ObjectType, v33);
    swift_unknownObjectRelease(v32);
  }

LABEL_14:
}

void TTRListDetailInteractor<>.update(time:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];

  v37 = a1;
  v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002A750(&qword_100642108);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750(&qword_100642088);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v35 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  v35 = *(_QWORD *)(v1 + 32);
  v36 = v1;
  v18 = objc_msgSend(*(id *)(v35 + 16), "customContext", v35);
  if (!v18 || (v19 = v18, v20 = (void *)REMSmartListCustomContextChangeItem.filter.getter(), v19, !v20))
  {
    v22 = type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v21 = REMCustomSmartListFilterDescriptor.__allocating_init()(v22);
    v20 = (void *)v21;
  }
  REMCustomSmartListFilterDescriptor.time.getter(v21);
  v23 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v8, &qword_100642088);
  sub_10000735C(v37, v23, &qword_100642088);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v24((uint64_t)v8, 1, v2) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642088);
    if (v24(v23, 1, v2) == 1)
    {
      sub_1000073A0((uint64_t)v8, &qword_100642088);
      goto LABEL_14;
    }
  }
  else
  {
    sub_10000735C((uint64_t)v8, (uint64_t)v15, &qword_100642088);
    if (v24(v23, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v23, v2);
      v25 = sub_1000175C8(&qword_100642110, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterTime, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterTime);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v5, v2, v25);
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v5, v2);
      sub_1000073A0((uint64_t)v17, &qword_100642088);
      v27(v15, v2);
      sub_1000073A0((uint64_t)v8, &qword_100642088);
      if ((v26 & 1) != 0)
        goto LABEL_14;
      goto LABEL_11;
    }
    sub_1000073A0((uint64_t)v17, &qword_100642088);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
  }
  sub_1000073A0((uint64_t)v8, &qword_100642108);
LABEL_11:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(v37, (uint64_t)v12, &qword_100642088);
  v28 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:time:)(v20, v12);
  TTRSmartListEditor.edit(filter:)();
  v29 = v36;
  swift_beginAccess(v36 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v29 + 16);
  if (Strong)
  {
    v32 = Strong;
    v33 = *(_QWORD *)(v29 + 24);
    ObjectType = swift_getObjectType(Strong, v31);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(ObjectType, v33);
    swift_unknownObjectRelease(v32);
  }

LABEL_14:
}

void TTRListDetailInteractor<>.update(priorities:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  id v11;
  void *v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  id v18;
  id v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + 32) + 16), "customContext");
  if (!v4
    || (v5 = v4,
        v18 = (id)REMSmartListCustomContextChangeItem.filter.getter(),
        v5,
        (v6 = (uint64_t)v18) == 0))
  {
    v7 = type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v6 = REMCustomSmartListFilterDescriptor.__allocating_init()(v7);
  }
  v19 = (id)v6;
  v8 = (_QWORD *)REMCustomSmartListFilterDescriptor.priorities.getter(v6);
  if (v8)
  {
    v9 = v8;
    if (a1)
    {
      v10 = sub_100096C38(v8, a1);
      swift_bridgeObjectRelease(v9);
      if (!v10)
        goto LABEL_11;
LABEL_9:

      return;
    }
    swift_bridgeObjectRelease(v8);
  }
  else if (!a1)
  {
    goto LABEL_9;
  }
LABEL_11:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  swift_bridgeObjectRetain(a1);
  v11 = v19;
  v12 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:priorities:)();
  TTRSmartListEditor.edit(filter:)();
  swift_beginAccess(v2 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v15 = Strong;
    v16 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong, v14);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(ObjectType, v16);
    swift_unknownObjectRelease(v15);
  }

}

void TTRListDetailInteractor<>.update(flagged:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  int v7;
  id v8;
  void *v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  id v15;
  id v16;
  _BYTE v17[24];

  v2 = v1;
  v4 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + 32) + 16), "customContext");
  if (!v4
    || (v5 = v4,
        v15 = (id)REMSmartListCustomContextChangeItem.filter.getter(),
        v5,
        (v6 = (uint64_t)v15) == 0))
  {
    type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v6 = REMCustomSmartListFilterDescriptor.__allocating_init()();
  }
  v16 = (id)v6;
  v7 = REMCustomSmartListFilterDescriptor.flagged.getter();
  if (v7 == 2)
  {
    if (a1 != 2)
      goto LABEL_10;
LABEL_9:

    return;
  }
  if (a1 != 2 && ((((a1 & 1) == 0) ^ v7) & 1) != 0)
    goto LABEL_9;
LABEL_10:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  v8 = v16;
  v9 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:flagged:)();
  TTRSmartListEditor.edit(filter:)();
  swift_beginAccess(v2 + 16, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v12 = Strong;
    v13 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong, v11);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(ObjectType, v13);
    swift_unknownObjectRelease(v12);
  }

}

void TTRListDetailInteractor<>.update(location:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];

  v37 = a1;
  v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLocation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10002A750(&qword_100642118);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750(&qword_100642080);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v35 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  v35 = *(_QWORD *)(v1 + 32);
  v36 = v1;
  v18 = objc_msgSend(*(id *)(v35 + 16), "customContext", v35);
  if (!v18 || (v19 = v18, v20 = (void *)REMSmartListCustomContextChangeItem.filter.getter(), v19, !v20))
  {
    v22 = type metadata accessor for REMCustomSmartListFilterDescriptor(0);
    v21 = REMCustomSmartListFilterDescriptor.__allocating_init()(v22);
    v20 = (void *)v21;
  }
  REMCustomSmartListFilterDescriptor.location.getter(v21);
  v23 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000735C((uint64_t)v17, (uint64_t)v8, &qword_100642080);
  sub_10000735C(v37, v23, &qword_100642080);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v24((uint64_t)v8, 1, v2) == 1)
  {
    sub_1000073A0((uint64_t)v17, &qword_100642080);
    if (v24(v23, 1, v2) == 1)
    {
      sub_1000073A0((uint64_t)v8, &qword_100642080);
      goto LABEL_14;
    }
  }
  else
  {
    sub_10000735C((uint64_t)v8, (uint64_t)v15, &qword_100642080);
    if (v24(v23, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v23, v2);
      v25 = sub_1000175C8(&qword_100642120, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLocation, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.FilterLocation);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v5, v2, v25);
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v5, v2);
      sub_1000073A0((uint64_t)v17, &qword_100642080);
      v27(v15, v2);
      sub_1000073A0((uint64_t)v8, &qword_100642080);
      if ((v26 & 1) != 0)
        goto LABEL_14;
      goto LABEL_11;
    }
    sub_1000073A0((uint64_t)v17, &qword_100642080);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
  }
  sub_1000073A0((uint64_t)v8, &qword_100642118);
LABEL_11:
  type metadata accessor for REMCustomSmartListFilterDescriptor(0);
  sub_10000735C(v37, (uint64_t)v12, &qword_100642080);
  v28 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(source:location:)(v20, v12);
  TTRSmartListEditor.edit(filter:)();
  v29 = v36;
  swift_beginAccess(v36 + 16, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v29 + 16);
  if (Strong)
  {
    v32 = Strong;
    v33 = *(_QWORD *)(v29 + 24);
    ObjectType = swift_getObjectType(Strong, v31);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(ObjectType, v33);
    swift_unknownObjectRelease(v32);
  }

LABEL_14:
}

double TTRTemplateEditor.sectionsEditingContext.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_1000D8860("TTRTemplateEditor#sectionsEditingContext : Not implemented because not expected to be called", a1);
}

double sub_1000D8860@<D0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  double result;

  if (qword_10063D3B0 != -1)
    swift_once(&qword_10063D3B0, sub_1000D5748);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100012DC4(v4, (uint64_t)qword_100645478);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.fault.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

id TTRTemplateEditor.listDetailSave(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[6];

  v5 = *(void **)(v2 + 16);
  v6 = objc_msgSend(v5, "saveRequest");
  v7 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
  v8 = (void *)static OS_dispatch_queue.main.getter(v7);
  v9 = swift_allocObject(&unk_1005F0AE8, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v12[4] = sub_1000D94E4;
  v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100009944;
  v12[3] = &unk_1005F0B00;
  v10 = _Block_copy(v12);
  sub_100053DE4(a1, a2);
  objc_msgSend(v6, "saveWithQueue:completion:", v8, v10, swift_release().n128_f64[0]);
  _Block_release(v10);

  return objc_msgSend(v5, "objectID");
}

void sub_1000D8A80(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v20[3];
  _BYTE v21[8];
  uint64_t v22;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10063D3B0 != -1)
      swift_once(&qword_10063D3B0, sub_1000D5748);
    v4 = type metadata accessor for Logger(0);
    sub_100012DC4(v4, (uint64_t)qword_100645478);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v22 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(a1, v21, v20);
      v10 = Error.rem_errorDescription.getter(v20[1], v20[2]);
      v12 = v11;
      v19 = sub_100027E40(v10, v11, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to save template: {error: %s}", v8, 0xCu);
      swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      v13 = swift_errorRelease(a1);
      if (!a2)
        return;
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      if (!a2)
        return;
    }
    goto LABEL_12;
  }
  if (qword_10063D3B0 != -1)
    swift_once(&qword_10063D3B0, sub_1000D5748);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100012DC4(v14, (uint64_t)qword_100645478);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Template saved!", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  if (a2)
LABEL_12:
    a2(v13);
}

double sub_1000D8D28@<D0>(uint64_t a1@<X8>)
{
  return sub_1000D8D34("TTRTemplateEditor#sectionsEditingContext : Not implemented because not expected to be called", a1);
}

double sub_1000D8D34@<D0>(const char *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  double result;

  if (qword_10063D3B0 != -1)
    swift_once(&qword_10063D3B0, sub_1000D5748);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100012DC4(v4, (uint64_t)qword_100645478);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.fault.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a1, v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void sub_1000D8E18(uint64_t a1, uint64_t a2)
{
  TTRTemplateEditor.edit(name:)(*(Swift::String *)&a1);
}

uint64_t sub_1000D8E38()
{
  return TTRTemplateEditor.edit(color:)();
}

void sub_1000D8E58(__C::REMListBadgeEmblem a1)
{
  TTRTemplateEditor.edit(badgeEmblem:)(a1);
}

void sub_1000D8E78(uint64_t a1, uint64_t a2)
{
  TTRTemplateEditor.edit(badgeEmoji:)(*(Swift::String *)&a1);
}

id sub_1000D8E98(uint64_t a1, uint64_t a2)
{
  return TTRTemplateEditor.listDetailSave(completion:)(a1, a2);
}

uint64_t REMTemplateChangeItem.hasExistingSections.getter()
{
  return sub_1000D8EC8("REMTemplateChangeItem#sectionsEditingContext : Not implemented because not expected to be called");
}

uint64_t sub_1000D8EC8(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_10063D3B0 != -1)
    swift_once(&qword_10063D3B0, sub_1000D5748);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100012DC4(v2, (uint64_t)qword_100645478);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, a1, v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 0;
}

uint64_t sub_1000D8F98()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, "name");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id sub_1000D8FEC()
{
  id *v0;

  return objc_msgSend(*v0, "badge");
}

uint64_t sub_1000D9010(uint64_t a1, uint64_t a2)
{
  return sub_1000D901C(a1, a2, "REMTemplateChangeItem#sectionsEditingContext : Not implemented because not expected to be called");
}

uint64_t sub_1000D901C(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_10063D3B0 != -1)
    swift_once(&qword_10063D3B0, sub_1000D5748);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100012DC4(v4, (uint64_t)qword_100645478);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.fault.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a3, v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  return 0;
}

char *sub_1000D90EC(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  uint64_t (**AssociatedConformanceWitness)(_QWORD, _QWORD);
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint8_t *v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 88);
  v39 = *(_QWORD *)v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v7, &protocol requirements base descriptor for TTRListDetailEditorType, &associated type descriptor for TTRListDetailEditorType.ListDetailChangeItemType);
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v36 - v12;
  *((_QWORD *)v3 + 3) = 0;
  v14 = swift_unknownObjectWeakInit(v3 + 16, 0);
  *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 112)] = 0;
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 24))(v7, v6, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 104)], a1, v7);
  AssociatedConformanceWitness = (uint64_t (**)(_QWORD, _QWORD))swift_getAssociatedConformanceWitness(v6, v7, AssociatedTypeWitness, &protocol requirements base descriptor for TTRListDetailEditorType, &associated conformance descriptor for TTRListDetailEditorType.TTRListDetailEditorType.ListDetailChangeItemType: TTRListDetailChangeItemType);
  v16 = AssociatedConformanceWitness[7](AssociatedTypeWitness, AssociatedConformanceWitness);
  v17 = (uint64_t *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 128)];
  *v17 = v16;
  v17[1] = v18;
  v19 = (void *)AssociatedConformanceWitness[4](AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = objc_msgSend(v19, "copyWithZone:", 0);
  swift_unknownObjectRelease(v19);
  _bridgeAnyObjectToAny(_:)(&v42);
  swift_unknownObjectRelease(v20);
  v21 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for TTRListDetailChangeItemType, &associated type descriptor for TTRListDetailChangeItemType.Storage);
  if ((swift_dynamicCast(&v41, &v42, &type metadata for Any[8], v21, 6) & 1) != 0)
  {
    v23 = v40;
    v22 = v41;
  }
  else
  {
    if (qword_10063D3B0 != -1)
      swift_once(&qword_10063D3B0, sub_1000D5748);
    v24 = type metadata accessor for Logger(0);
    sub_100012DC4(v24, (uint64_t)qword_100645478);
    v23 = v40;
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))(v11, v13, AssociatedTypeWitness);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.fault.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(12, -1);
      v38 = a2;
      v29 = (uint8_t *)v28;
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 138412290;
      v36 = v29 + 4;
      v30 = AssociatedConformanceWitness[5](AssociatedTypeWitness, AssociatedConformanceWitness);
      v42 = v30;
      v23 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v36, v29 + 12);
      v31 = v37;
      *v37 = v30;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, AssociatedTypeWitness);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to set initialListStorage by copying REMListStorage {listID: %@}", v29, 0xCu);
      v32 = sub_10002A750(&qword_100642D60);
      swift_arrayDestroy(v31, 1, v32);
      swift_slowDealloc(v31, -1, -1);
      v33 = v29;
      a2 = v38;
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, AssociatedTypeWitness);
    }

    v22 = 0;
  }
  *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 120)] = v22;
  v34 = NSUndoManager.observeChanges<A>(target:handler:)(v3, sub_1000D993C, 0, v39);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v13, AssociatedTypeWitness);
  *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 112)] = v34;
  swift_release();
  return v3;
}

void sub_1000D94C4(uint64_t a1)
{
  uint64_t v1;

  sub_1000D71C0(a1, *(void (**)(void))(v1 + 16));
}

void sub_1000D94E4(uint64_t a1)
{
  uint64_t v1;

  sub_1000D8A80(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000D94EC(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 80), a1, &protocol requirements base descriptor for TTRListDetailEditorType, &associated conformance descriptor for TTRListDetailEditorType.TTRListDetailEditorType.ListDetailChangeItemType: TTRListDetailChangeItemType);
}

unint64_t sub_1000D9508()
{
  unint64_t result;

  result = qword_100645520;
  if (!qword_100645520)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TTRListDetailSavedObjectID.ObjectType, &type metadata for TTRListDetailSavedObjectID.ObjectType);
    atomic_store(result, (unint64_t *)&qword_100645520);
  }
  return result;
}

uint64_t sub_1000D954C()
{
  return sub_100017608(&qword_100645528, &qword_100641B30, REMListChangeItem_ptr, (uint64_t)&protocol conformance descriptor for REMListChangeItem);
}

uint64_t sub_1000D9580()
{
  return sub_100017608(&qword_100645590, &qword_100645598, REMListStorage_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
}

uint64_t sub_1000D95B4()
{
  return sub_100017608(&qword_100645600, &qword_100641B38, REMSmartListChangeItem_ptr, (uint64_t)&protocol conformance descriptor for REMSmartListChangeItem);
}

uint64_t sub_1000D95E8()
{
  return sub_100017608(&qword_100645668, &qword_100645670, REMSmartListStorage_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
}

uint64_t sub_1000D961C()
{
  return sub_100017608(&qword_1006456D8, &qword_100643738, REMTemplateChangeItem_ptr, (uint64_t)&protocol conformance descriptor for REMTemplateChangeItem);
}

uint64_t sub_1000D9650()
{
  return sub_100017608(&qword_100645740, &qword_100645748, REMTemplateStorage_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
}

uint64_t sub_1000D9684(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100524138;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100524150;
    v4[3] = &unk_100524150;
    v4[4] = &unk_100524168;
    result = swift_initClassMetadata2(a1, 0, 5, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for TTRListDetailInteractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002B51C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTRListDetailInteractor);
}

uint64_t initializeBufferWithCopyOfBuffer for TTRListDetailSavedObjectID(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for TTRListDetailSavedObjectID(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for TTRListDetailSavedObjectID(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRListDetailSavedObjectID(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRListDetailSavedObjectID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRListDetailSavedObjectID()
{
  return &type metadata for TTRListDetailSavedObjectID;
}

uint64_t storeEnumTagSinglePayload for TTRListDetailSavedObjectID.ObjectType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000D98BC + 4 * byte_100523EC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D98F0 + 4 * byte_100523EC0[v4]))();
}

uint64_t sub_1000D98F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D98F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D9900);
  return result;
}

uint64_t sub_1000D990C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D9914);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000D9918(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D9920(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTRListDetailSavedObjectID.ObjectType()
{
  return &type metadata for TTRListDetailSavedObjectID.ObjectType;
}

uint64_t sub_1000D996C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t result;
  Swift::String v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v33;
  uint64_t *v34;

  v33 = a4;
  v34 = a6;
  v10 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v29 - v15;
  v17 = sub_10037B448(a1, a2);
  result = 0;
  if ((v17 & 1) != 0)
  {
    v19 = REMRemindersListDataView.SortingStyle.labelTextForSortingStyle()();
    object = v19._object;
    countAndFlagsBits = v19._countAndFlagsBits;
    LOBYTE(v30) = REMRemindersListDataView.SortingStyle.isEqualIgnoringDirection(_:)(a3) & 1;
    v30 = v30;
    v29 = sub_100005ED8(0, (unint64_t *)&qword_1006415C0, UIAction_ptr);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v20(v16, a3, v10);
    v20(v14, a1, v10);
    v21 = *(unsigned __int8 *)(v11 + 80);
    v22 = (v21 + 16) & ~v21;
    v23 = (v12 + v21 + v22) & ~v21;
    v24 = (v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = swift_allocObject(&unk_1005F0DE0, v24 + 16, v21 | 7);
    v26 = v25 + v22;
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
    v27(v26, v16, v10);
    v27(v25 + v23, v14, v10);
    v28 = (_QWORD *)(v25 + v24);
    *v28 = v33;
    v28[1] = a5;
    swift_retain();
    result = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(countAndFlagsBits, object, 0, 0, 0, 0, 0, 0, 0, 0, v30, sub_1000DA888, v25);
  }
  *v34 = result;
  return result;
}

uint64_t sub_1000D9B48(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  void (*v19)(char *);

  v19 = a3;
  v8 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *a6, v12);
  v16 = sub_1000DA788(&qword_100645838, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SortingDirection);
  LOBYTE(a6) = dispatch thunk of static Equatable.== infix(_:_:)(a2, v15, v12, v16);
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if ((a6 & 1) == 0)
  {
    REMRemindersListDataView.SortingStyle.flipped()(result);
    v19(v11);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

UIMenu sub_1000D9C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  UIMenuElementSize preferredElementSize;
  Swift::String v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  UIImage_optional v32;

  v4 = sub_10002A750(&qword_100645840);
  v5 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v4, v9 + 5 * v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100524260;
  v11 = v10 + v9;
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104);
  v12(v11, enum case for REMRemindersListDataView.SortingStyle.manual(_:), v5);
  v13 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v14 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104);
  v15(v11 + v7, v13, v14);
  v12(v11 + v7, enum case for REMRemindersListDataView.SortingStyle.displayDate(_:), v5);
  v15(v11 + 2 * v7, v13, v14);
  v12(v11 + 2 * v7, enum case for REMRemindersListDataView.SortingStyle.creationDate(_:), v5);
  v15(v11 + 3 * v7, enum case for REMRemindersListDataView.SortingDirection.descending(_:), v14);
  v12(v11 + 3 * v7, enum case for REMRemindersListDataView.SortingStyle.priority(_:), v5);
  v15(v11 + 4 * v7, v13, v14);
  v12(v11 + 4 * v7, enum case for REMRemindersListDataView.SortingStyle.title(_:), v5);
  v28 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v16 = (uint64_t)sub_100476B68((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_1000DA7C8, (uint64_t)v27, v10);
  swift_setDeallocating(v10);
  swift_arrayDestroy(v11, *(_QWORD *)(v10 + 16), v5);
  swift_deallocClassInstance(v10, 32, 7);
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v21 = v16;
    else
      v21 = v16 & 0xFFFFFFFFFFFFFF8;
    v22 = sub_100005ED8(0, (unint64_t *)&unk_100649B90, UIMenuElement_ptr);
    swift_bridgeObjectRetain(v16);
    preferredElementSize = _bridgeCocoaArray<A>(_:)(v21, v22);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    swift_bridgeObjectRetain(v16);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v17);
    sub_100005ED8(0, (unint64_t *)&unk_100649B90, UIMenuElement_ptr);
    preferredElementSize = v16;
  }
  swift_bridgeObjectRelease(v16);
  sub_100005ED8(0, &qword_1006415D0, UIMenu_ptr);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v32.value.super.isa = 0;
  v32.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v19, (Swift::String_optional)0, v32, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, (Swift::OpaquePointer)(4 * v7));
}

Class sub_1000D9F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  int v22;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  void (*v30)(char *, uint64_t);
  Swift::String v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  Swift::String v51;
  char *v52;
  uint64_t v53;
  _BOOL8 v54;
  char *v55;
  void (*v56)(uint64_t, char *, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  UIMenuElementSize v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  Class result;
  Swift::OpaquePointer v77;
  uint64_t v78;
  _BOOL8 v79;
  void (*v80)(char *, uint64_t);
  void (*v81)(uint64_t, char *, uint64_t);
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  void (*v96)(char *, uint64_t, uint64_t);
  void (*v97)(char *, uint64_t);
  uint64_t (*v98)(char *, uint64_t);
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  UIImage_optional v107;

  v101 = a3;
  v102 = a4;
  v6 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v104 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v104 + 64);
  v8 = __chkstk_darwin(v6);
  v100 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v99 = (char *)&v78 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v78 - v11;
  v13 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v103 = (char *)&v78 - v18;
  v19 = a2;
  if ((sub_10037B448(a2, a1) & 1) != 0)
  {
    v20 = v104;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
    v21(v12, v19, v6);
    v98 = *(uint64_t (**)(char *, uint64_t))(v20 + 88);
    v22 = v98(v12, v6);
    if (v22 == enum case for REMRemindersListDataView.SortingStyle.displayDate(_:)
      || v22 == enum case for REMRemindersListDataView.SortingStyle.priority(_:)
      || v22 == enum case for REMRemindersListDataView.SortingStyle.creationDate(_:)
      || v22 == enum case for REMRemindersListDataView.SortingStyle.title(_:))
    {
      v26 = *(void (**)(char *, uint64_t))(v104 + 96);
      v93 = v6;
      v91 = enum case for REMRemindersListDataView.SortingStyle.priority(_:);
      v26(v12, v6);
      v95 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v95(v103, v12, v13);
      v96 = v21;
      v27 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
      v28 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 104);
      v28(v17, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v13);
      v89 = v28;
      v29 = v99;
      v92 = v19;
      REMRemindersListDataView.SortingStyle.cloned(withSortingDirection:)(v17);
      v30 = *(void (**)(char *, uint64_t))(v14 + 8);
      v30(v17, v13);
      v80 = v30;
      v31 = REMRemindersListDataView.SortingStyle.labelTextForSortingDirection()();
      countAndFlagsBits = v31._countAndFlagsBits;
      object = v31._object;
      v97 = *(void (**)(char *, uint64_t))(v104 + 8);
      v97(v29, v93);
      v28(v17, v27, v13);
      v32 = sub_1000DA788(&qword_100645830, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SortingDirection);
      v33 = v103;
      v90 = v32;
      dispatch thunk of RawRepresentable.rawValue.getter(v106, v13, v32);
      dispatch thunk of RawRepresentable.rawValue.getter(&v105, v13, v32);
      v79 = v106[0] == v105;
      v30(v17, v13);
      v94 = sub_100005ED8(0, (unint64_t *)&qword_1006415C0, UIAction_ptr);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v33, v13);
      v34 = v93;
      v96(v29, v92, v93);
      v35 = *(unsigned __int8 *)(v14 + 80);
      v36 = v15 + ((v35 + 16) & ~v35);
      v37 = (v35 + 16) & ~v35;
      v86 = v37;
      v38 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
      v39 = v104;
      v40 = *(unsigned __int8 *)(v104 + 80);
      v41 = v38;
      v88 = v38;
      v85 = ((v40 + v38 + 16) & ~v40) + v7;
      v42 = (v40 + v38 + 16) & ~v40;
      v87 = v42;
      v84 = v35 | v40 | 7;
      v43 = swift_allocObject(&unk_1005F0D90, v85, v84);
      v95((char *)(v43 + v37), v17, v13);
      v44 = (_QWORD *)(v43 + v41);
      v45 = v102;
      *v44 = v101;
      v44[1] = v45;
      v81 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
      v46 = v34;
      v81(v43 + v42, v29, v34);
      swift_retain();
      v104 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(countAndFlagsBits, object, 0, 0, 0, 0, 0, 0, 0, 0, v79, sub_1000DA6DC, v43);
      v47 = enum case for REMRemindersListDataView.SortingDirection.descending(_:);
      v48 = v89;
      v89(v17, enum case for REMRemindersListDataView.SortingDirection.descending(_:), v13);
      v49 = v92;
      REMRemindersListDataView.SortingStyle.cloned(withSortingDirection:)(v17);
      v50 = v80;
      v80(v17, v13);
      v51 = REMRemindersListDataView.SortingStyle.labelTextForSortingDirection()();
      countAndFlagsBits = v51._countAndFlagsBits;
      object = v51._object;
      v97(v29, v46);
      v48(v17, v47, v13);
      v52 = v103;
      v53 = v90;
      dispatch thunk of RawRepresentable.rawValue.getter(v106, v13, v90);
      dispatch thunk of RawRepresentable.rawValue.getter(&v105, v13, v53);
      v54 = v106[0] == v105;
      v50(v17, v13);
      v55 = v52;
      v56 = (void (*)(uint64_t, char *, uint64_t))v95;
      v95(v17, v55, v13);
      v57 = v96;
      v96(v29, v49, v46);
      v58 = swift_allocObject(&unk_1005F0DB8, v85, v84);
      v56(v58 + v86, v17, v13);
      v59 = (_QWORD *)(v58 + v88);
      v60 = v102;
      *v59 = v101;
      v59[1] = v60;
      v61 = v29;
      v62 = v46;
      v81(v58 + v87, v61, v46);
      swift_retain();
      v63 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(countAndFlagsBits, object, 0, 0, 0, 0, 0, 0, 0, 0, v54, sub_1000DA6EC, v58);
      v64 = v100;
      v65 = v62;
      v57(v100, v49, v62);
      LODWORD(v62) = v98(v64, v62);
      v97(v64, v65);
      v66 = sub_10002A750((uint64_t *)&unk_1006415A0);
      v67 = swift_allocObject(v66, 48, 7);
      *(_OWORD *)(v67 + 16) = xmmword_10051FF90;
      if ((_DWORD)v62 == v91)
      {
        v68 = v104;
        *(_QWORD *)(v67 + 32) = v63;
        *(_QWORD *)(v67 + 40) = v68;
      }
      else
      {
        *(_QWORD *)(v67 + 32) = v104;
        *(_QWORD *)(v67 + 40) = v63;
      }
      v106[0] = v67;
      specialized Array._endMutation()(v67);
      v70 = v106[0];
      if (!(v106[0] >> 62))
        goto LABEL_21;
LABEL_25:
      if (v70 < 0)
        v74 = v70;
      else
        v74 = v70 & 0xFFFFFFFFFFFFFF8;
      v75 = sub_100005ED8(0, (unint64_t *)&unk_100649B90, UIMenuElement_ptr);
      swift_bridgeObjectRetain(v70);
      v72 = _bridgeCocoaArray<A>(_:)(v74, v75);
      swift_bridgeObjectRelease(v70);
      goto LABEL_22;
    }
    if (v22 != enum case for REMRemindersListDataView.SortingStyle.default(_:)
      && v22 != enum case for REMRemindersListDataView.SortingStyle.manual(_:))
    {
      result = (Class)_diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
      __break(1u);
      return result;
    }
  }
  v70 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    goto LABEL_25;
LABEL_21:
  swift_bridgeObjectRetain(v70);
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v71);
  sub_100005ED8(0, (unint64_t *)&unk_100649B90, UIMenuElement_ptr);
  v72 = v70;
LABEL_22:
  swift_bridgeObjectRelease(v70);
  sub_100005ED8(0, &qword_1006415D0, UIMenu_ptr);
  v73._countAndFlagsBits = 0;
  v73._object = (void *)0xE000000000000000;
  v107.value.super.isa = 0;
  v107.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v73, (Swift::String_optional)0, v107, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v72, v77).super.super.isa;
}

uint64_t sub_1000DA6DC(uint64_t a1)
{
  return sub_1000DA6F8(a1, (unsigned int *)&enum case for REMRemindersListDataView.SortingDirection.ascending(_:));
}

uint64_t sub_1000DA6EC(uint64_t a1)
{
  return sub_1000DA6F8(a1, (unsigned int *)&enum case for REMRemindersListDataView.SortingDirection.descending(_:));
}

uint64_t sub_1000DA6F8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for REMRemindersListDataView.SortingDirection(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for REMRemindersListDataView.SortingStyle(0) - 8) + 80);
  return sub_1000D9B48(a1, v2 + v6, *(void (**)(char *))(v2 + v7), *(_QWORD *)(v2 + v7 + 8), v2 + ((v7 + v8 + 16) & ~v8), a2);
}

uint64_t sub_1000DA788(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for REMRemindersListDataView.SortingDirection(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000DA7C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_1000D996C(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1000DA7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1000DA888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t result;

  v1 = *(_QWORD *)(type metadata accessor for REMRemindersListDataView.SortingStyle(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = (v3 + v2 + ((v2 + 16) & ~v2)) & ~v2;
  v5 = v0 + v4;
  v6 = *(uint64_t (**)(uint64_t))(v0 + ((v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  result = REMRemindersListDataView.SortingStyle.isEqualIgnoringDirection(_:)(v0 + v4);
  if ((result & 1) == 0)
    return v6(v5);
  return result;
}

uint64_t sub_1000DA908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100645848);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100645848);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t TTRHashtagLabelInteractor.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t TTRHashtagLabelInteractor.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_delegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*TTRHashtagLabelInteractor.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_1000DAAC0;
}

void sub_1000DAAC0(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

id TTRHashtagLabelInteractor.store.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_store);
}

void TTRHashtagLabelInteractor.__allocating_init(store:)(void *a1)
{
  objc_class *v1;
  id v3;
  uint64_t v4;

  v3 = objc_allocWithZone(v1);
  TTRHashtagLabelInteractor.init(store:)(a1, v4);
}

void TTRHashtagLabelInteractor.init(store:)(void *a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  objc_super v25;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v5 = &v2[OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_delegate];
  *((_QWORD *)v5 + 1) = 0;
  swift_unknownObjectWeakInit(v5, 0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_dataViewMonitor] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_store] = a1;
  v6 = type metadata accessor for TTRHashtagLabelMonitorableDataView();
  v7 = swift_allocObject(v6, 24, 7);
  *(_QWORD *)(v7 + 16) = a1;
  v25.receiver = v2;
  v25.super_class = ObjectType;
  v8 = a1;
  v9 = objc_msgSendSuper2(&v25, "init");
  sub_10002CDD8();
  v10 = (char *)v9;
  v11 = swift_retain();
  v12 = static OS_dispatch_queue.main.getter(v11);
  type metadata accessor for RDIDispatchQueue(0);
  v13 = static RDIDispatchQueue.storeQueue.getter();
  v14 = static RDIDispatchQueue.storeUserInteractiveQueue.getter();
  v15 = TTRDataViewMonitorEnvironmentInfo.init()();
  v17 = v16;
  v19 = v18;
  v23 = v7;
  v24 = _swiftEmptyArrayStorage;
  v20 = sub_10002A750(&qword_100645878);
  swift_allocObject(v20, 80, 7);
  v21 = TTRDataViewMonitor.init<A>(initialData:dataView:delegate:queue:backgroundQueue:userInteractiveBackgroundQueue:environmentInfo:)(&v24, &v23, v10, v12, v13, v14, v15, v17, v19 & 1, ObjectType, &protocol witness table for TTRHashtagLabelInteractor);
  v22 = OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_dataViewMonitor;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_dataViewMonitor] = v21;
  swift_release();
  if (*(_QWORD *)&v10[v22])
  {
    swift_retain();
    TTRDataViewMonitor.resume(userInteractive:)(1);
    swift_release();
    swift_release();

  }
  else
  {
    __break(1u);
  }
}

uint64_t TTRHashtagLabelMonitorableDataView.__allocating_init(store:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t type metadata accessor for TTRHashtagLabelMonitorableDataView()
{
  return objc_opt_self(_TtC9Reminders34TTRHashtagLabelMonitorableDataView);
}

void TTRHashtagLabelInteractor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Reminders.TTRHashtagLabelInteractor", 35, "init()", 6, 0);
  __break(1u);
}

uint64_t TTRHashtagLabelInteractor.monitor(_:didFetch:diff:transitioningFrom:)(uint64_t a1, uint64_t a2)
{
  return sub_1000DB050(a2);
}

void TTRHashtagLabelInteractor.monitor(_:didHit:transitioningFrom:)(uint64_t a1, uint64_t a2)
{
  sub_1000DB18C(a2);
}

uint64_t sub_1000DAE40(uint64_t a1, uint64_t *a2)
{
  return sub_1000DB050(*a2);
}

uint64_t TTRHashtagLabelMonitorableDataView.init(store:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t TTRHashtagLabelMonitorableDataView.fetchData(from:userInteractive:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMHashtagLabelDataView(0);
  v5 = *(_QWORD *)(v0 + 16);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.alphabetical(_:), v1);
  v6 = static REMHashtagLabelDataView.fetchAllHashtagLabels(store:sortingStyle:includeDetails:)(v5, v4, 0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t TTRHashtagLabelMonitorableDataView.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TTRHashtagLabelMonitorableDataView.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1000DAF60(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  type metadata accessor for REMHashtagLabelDataView(0);
  v9 = *(_QWORD *)(v8 + 16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.alphabetical(_:), v4);
  v10 = static REMHashtagLabelDataView.fetchAllHashtagLabels(store:sortingStyle:includeDetails:)(v9, v7, 0);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a1 = v12;
  return result;
}

uint64_t sub_1000DB050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  _BYTE v15[24];

  v2 = v1;
  if (qword_10063D3B8 != -1)
    swift_once(&qword_10063D3B8, sub_1000DA908);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100012DC4(v4, (uint64_t)qword_100645848);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "TTRAccountListsMonitorableDataView did fetch data", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = v2 + OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_delegate;
  swift_beginAccess(v2 + OBJC_IVAR____TtC9Reminders25TTRHashtagLabelInteractor_delegate, v15, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v9);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)(v9 + 8);
    ObjectType = swift_getObjectType(result, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v2, a1, ObjectType, v13);
    return swift_unknownObjectRelease(v12);
  }
  return result;
}

void sub_1000DB18C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v17[3];
  _BYTE v18[8];
  uint64_t v19;

  if (qword_10063D3B8 != -1)
    swift_once(&qword_10063D3B8, sub_1000DA908);
  v3 = type metadata accessor for Logger(0);
  sub_100012DC4(v3, (uint64_t)qword_100645848);
  swift_errorRetain(a1);
  v4 = v1;
  swift_errorRetain(a1);
  v15 = v4;
  v5 = Logger.logObject.getter(v15);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = (_QWORD *)swift_slowAlloc(8, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v7 = 136315394;
    swift_getErrorValue(a1, v18, v17);
    v10 = Error.localizedDescription.getter(v17[1], v17[2]);
    v12 = v11;
    v16 = sub_100027E40(v10, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    *(_WORD *)(v7 + 12) = 2112;
    v16 = (uint64_t)v15;
    v13 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v7 + 14, v7 + 22);
    *v8 = v15;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "TTRAccountListsMonitorableDataView did hit error {error: %s, interactor: %@}", (uint8_t *)v7, 0x16u);
    v14 = sub_10002A750(&qword_100642D60);
    swift_arrayDestroy(v8, 1, v14);
    swift_slowDealloc(v8, -1, -1);
    swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

_UNKNOWN **sub_1000DB40C()
{
  return &protocol witness table for TTRHashtagLabelMonitorableDataView;
}

uint64_t type metadata accessor for TTRHashtagLabelInteractor()
{
  return objc_opt_self(_TtC9Reminders25TTRHashtagLabelInteractor);
}

uint64_t sub_1000DB438(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_1000DB938((uint64_t)v7, (uint64_t)v9) & 1;
}

void sub_1000DB4A0(char *a1, uint64_t a2)
{
  void *v3;
  NSString v4;
  NSString v5;
  NSString v6;
  _BYTE v7[72];

  sub_1000DBD2C(a2, (uint64_t)v7);
  sub_1000DBD74((uint64_t)v7);
  TTRIStaticTableViewStandardCell.icon.setter(v7);
  v3 = *(void **)&a1[direct field offset for TTRIDetailListTableViewCell.listNameLabel];
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setText:", v4);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setAccessibilityLabel:", v5);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setAccessibilityValue:", v6);

}

id sub_1000DB580()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_1000438B0(*v0);
  return v1;
}

uint64_t sub_1000DB5A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_1000DB5D4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD v5[4];
  _OWORD v6[5];
  uint64_t v7;

  v2 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v2;
  v6[4] = *(_OWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  v5[2] = a2;
  v5[3] = v6;
  return TTRIStaticTableViewStandardCell.performBatchUpdates(_:)(sub_1000DBD24, v5);
}

uint64_t type metadata accessor for TTRIListDetailEditFiltersCellContent(uint64_t a1)
{
  uint64_t result;

  result = qword_1006459C0;
  if (!qword_1006459C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTRIListDetailEditFiltersCellContent);
  return result;
}

uint64_t sub_1000DB66C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 304);
}

void sub_1000DB6A0()
{
  _swift_stdlib_reportUnimplementedInitializer("Reminders.TTRIListDetailEditFiltersCellContent", 46, "init(adaptor:hasDisclosure:state:)", 34, 0);
  __break(1u);
}

uint64_t sub_1000DB6CC()
{
  return type metadata accessor for TTRIListDetailEditFiltersCellContent(0);
}

uint64_t destroy for TTRIListDetailEditFiltersCellStateAdaptor(uint64_t a1)
{
  if (*(_QWORD *)a1 >= 2uLL)

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s9Reminders41TTRIListDetailEditFiltersCellStateAdaptorVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2 >= 2uLL)
    v5 = v4;
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *a1 = v4;
  a1[1] = v7;
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for TTRIListDetailEditFiltersCellStateAdaptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 >= 2uLL)
  {
    if ((unint64_t)v5 >= 2)
    {
      *(_QWORD *)a1 = v5;
      v7 = v5;

      goto LABEL_8;
    }

    v5 = *(void **)a2;
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 2)
  {
LABEL_6:
    *(_QWORD *)a1 = v5;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;
LABEL_8:
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for TTRIListDetailEditFiltersCellStateAdaptor(uint64_t a1, unint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  v5 = *a2;
  if (*(_QWORD *)a1 >= 2uLL)
  {
    if (v5 >= 2)
    {
      *(_QWORD *)a1 = v5;

      goto LABEL_6;
    }

  }
  *(_QWORD *)a1 = v5;
LABEL_6:
  v6 = a2[2];
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRIListDetailEditFiltersCellStateAdaptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRIListDetailEditFiltersCellStateAdaptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRIListDetailEditFiltersCellStateAdaptor()
{
  return &type metadata for TTRIListDetailEditFiltersCellStateAdaptor;
}

unint64_t sub_1000DB8F4()
{
  unint64_t result;

  result = qword_100645B38;
  if (!qword_100645B38)
  {
    result = swift_getWitnessTable(&unk_1005243D8, &type metadata for TTRIListDetailEditFiltersCellStateAdaptor.State);
    atomic_store(result, (unint64_t *)&qword_100645B38);
  }
  return result;
}

uint64_t sub_1000DB938(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  void *v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD v69[8];
  char v70;

  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(void **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned __int8 *)(a1 + 64);
  v14 = *(void **)a2;
  v13 = *(void **)(a2 + 8);
  v15 = *(void **)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 40);
  v19 = *(unsigned __int8 *)(a2 + 64);
  v21 = v16 >> 1 == 0xFFFFFFFF && v19 < 2;
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_QWORD *)(a2 + 56);
  if (v8 >> 1 == 0xFFFFFFFF && v12 < 2)
  {
    if (v21)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    v51 = v4;
    v52 = v5;
    v53 = v6;
    v54 = v8;
    v55 = v7;
    v56 = v9;
    v57 = v10;
    v58 = v11;
    v59 = v12;
    v60 = v14;
    v61 = v13;
    v62 = v15;
    v63 = v16;
    v64 = v18;
    v65 = v17;
    v66 = v22;
    v67 = v23;
    v68 = v19;
    v36 = v12;
    v24 = v8;
    v25 = v15;
    v26 = v13;
    v27 = v14;
    sub_1000DBB78(v4, v5, v6, v24, v7, v9, v10, v11, v36);
    sub_1000DBB78(v27, v26, v25, v16, v18, v17, v22, v23, v19);
    sub_1000DBC00((uint64_t)&v51);
    return 0;
  }
  v69[0] = v4;
  v69[1] = v5;
  v69[2] = v6;
  v69[3] = v8;
  v69[4] = v7;
  v69[5] = v9;
  v69[6] = v10;
  v69[7] = v11;
  v70 = v12;
  v51 = v14;
  v52 = v13;
  v53 = v15;
  v54 = v16;
  v55 = v18;
  v56 = v17;
  v57 = v22;
  v58 = v23;
  v59 = v19;
  v45 = v4;
  v46 = v5;
  v44 = v6;
  v47 = v7;
  v48 = v9;
  v49 = v10;
  v50 = v11;
  v38 = v17;
  v39 = v23;
  v29 = v15;
  v41 = v13;
  v42 = v15;
  v30 = v13;
  v37 = v18;
  v31 = v14;
  v40 = v14;
  sub_1000DBB78(v4, v5, v6, v8, v7, v9, v10, v11, v12);
  sub_1000DBB78(v31, v30, v29, v16, v37, v38, v22, v39, v19);
  v43 = static TTRIStaticTableViewStandardCell.Icon.__derived_enum_equals(_:_:)(v69, &v51);
  sub_1000DBCA4(v40, v41, v42, v16, v37, v38, v22, v39, v19);
  sub_1000DBCA4(v45, v46, v44, v8, v47, v48, v49, v50, v12);
  if ((v43 & 1) == 0)
    return 0;
LABEL_15:
  v32 = *(_QWORD *)(a1 + 72);
  v33 = *(_QWORD *)(a1 + 80);
  v34 = *(_QWORD *)(a2 + 72);
  v35 = *(_QWORD *)(a2 + 80);
  if (v32 == v34 && v33 == v35)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0);
}

id sub_1000DBB78(id result, void *a2, void *a3, unint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  if (a4 >> 1 != 0xFFFFFFFF || a9 >= 2u)
    return sub_1000DBBA0(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

id sub_1000DBBA0(id result, void *a2, void *a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  id v9;
  int v10;
  id v11;
  id v12;

  v9 = result;
  v10 = a9 >> 6;
  if (v10 == 1)
    return result;
  if (!v10)
  {
    v11 = a3;
    v12 = v9;
    return a2;
  }
  return result;
}

uint64_t sub_1000DBC00(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v2 = *(void **)(a1 + 72);
  v3 = *(void **)(a1 + 80);
  v4 = *(void **)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  sub_1000DBCA4(*(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  sub_1000DBCA4(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

void sub_1000DBCA4(void *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a4 >> 1 != 0xFFFFFFFF || a9 >= 2u)
    sub_1000DBCCC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1000DBCCC(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  int v9;

  v9 = a9 >> 6;
  if (v9 != 1)
  {
    if (v9)
      return;

    a1 = a3;
  }

}

void sub_1000DBD24()
{
  uint64_t v0;

  sub_1000DB4A0(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000DBD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100645B78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DBD74(uint64_t a1)
{
  sub_1000DBB78(*(id *)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t destroy for TTRIListDetailEditFiltersCellStateAdaptor.State(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v2 >> 1 != 0xFFFFFFFF || v3 >= 2)
    sub_1000DBCCC(*(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v3);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
}

uint64_t initializeWithCopy for TTRIListDetailEditFiltersCellStateAdaptor.State(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a2 + 64);
  if (v4 >> 1 != 0xFFFFFFFF || v5 >= 2)
  {
    v7 = *(id *)a2;
    v8 = *(void **)(a2 + 8);
    v9 = *(void **)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 40);
    v17 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    sub_1000DBBA0(*(id *)a2, v8, v9, v4, v17, v10, v11, v12, v5);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v17;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    *(_BYTE *)(a1 + 64) = v5;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
  }
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for TTRIListDetailEditFiltersCellStateAdaptor.State(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned int v5;
  BOOL v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v4 = a2[3];
  v5 = *((unsigned __int8 *)a2 + 64);
  v7 = v4 >> 1 == 0xFFFFFFFF && v5 < 2;
  if (*(_QWORD *)(a1 + 24) >> 1 != 0xFFFFFFFFLL || *(unsigned __int8 *)(a1 + 64) >= 2u)
  {
    if (v7)
    {
      sub_1000DC0A0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v10 = *((_OWORD *)a2 + 2);
      v9 = *((_OWORD *)a2 + 3);
      v11 = *((_OWORD *)a2 + 1);
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 16) = v11;
    }
    else
    {
      v15 = *a2;
      v16 = (void *)a2[1];
      v17 = (void *)a2[2];
      v18 = a2[5];
      v39 = a2[4];
      v19 = a2[6];
      v20 = a2[7];
      sub_1000DBBA0((id)*a2, v16, v17, v4, v39, v18, v19, v20, v5);
      v21 = *(void **)a1;
      v22 = *(void **)(a1 + 8);
      v23 = *(void **)(a1 + 16);
      v24 = *(_QWORD *)(a1 + 24);
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(_QWORD *)(a1 + 40);
      v27 = *(_QWORD *)(a1 + 48);
      v28 = *(_QWORD *)(a1 + 56);
      v29 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v39;
      *(_QWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 48) = v19;
      *(_QWORD *)(a1 + 56) = v20;
      *(_BYTE *)(a1 + 64) = v5;
      sub_1000DBCCC(v21, v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  else if (v7)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v12 = *((_OWORD *)a2 + 1);
    v13 = *((_OWORD *)a2 + 2);
    v14 = *((_OWORD *)a2 + 3);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 16) = v12;
  }
  else
  {
    v30 = (id)*a2;
    v31 = (void *)a2[1];
    v32 = (void *)a2[2];
    v33 = a2[5];
    v40 = a2[4];
    v34 = a2[6];
    v35 = a2[7];
    sub_1000DBBA0((id)*a2, v31, v32, v4, v40, v33, v34, v35, v5);
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = v31;
    *(_QWORD *)(a1 + 16) = v32;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v40;
    *(_QWORD *)(a1 + 40) = v33;
    *(_QWORD *)(a1 + 48) = v34;
    *(_QWORD *)(a1 + 56) = v35;
    *(_BYTE *)(a1 + 64) = v5;
  }
  *(_QWORD *)(a1 + 72) = a2[9];
  v36 = a2[10];
  v37 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  return a1;
}

uint64_t sub_1000DC0A0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for TTRIStaticTableViewStandardCell.Icon - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for TTRIListDetailEditFiltersCellStateAdaptor.State(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for TTRIListDetailEditFiltersCellStateAdaptor.State(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 64);
  if (v4 >> 1 == 0xFFFFFFFF && v5 < 2)
    goto LABEL_12;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned __int8 *)(a2 + 64);
  if (v7 >> 1 == 0xFFFFFFFF && v8 < 2)
  {
    sub_1000DC0A0(a1);
LABEL_12:
    v19 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v19;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v20;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(void **)a1;
  v12 = *(void **)(a1 + 8);
  v13 = *(void **)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v7;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  *(_BYTE *)(a1 + 64) = v8;
  sub_1000DBCCC(v11, v12, v13, v4, v14, v15, v16, v17, v5);
LABEL_13:
  v21 = *(_QWORD *)(a2 + 80);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v21;
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTRIListDetailEditFiltersCellStateAdaptor.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRIListDetailEditFiltersCellStateAdaptor.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRIListDetailEditFiltersCellStateAdaptor.State()
{
  return &type metadata for TTRIListDetailEditFiltersCellStateAdaptor.State;
}

char *sub_1000DC268(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  objc_super v13;
  __int128 v14;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableView], 0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableDataController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___deferredUpdateAction] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___nukeCell] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___populateCell] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___animationSlowModeCell] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___pencilAutoCommitDelayCell] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___suggestedAttributeModelCells] = 0;
  v6 = v3;
  static TTRTypedController.currentArgument.getter(&v14, ObjectType, &off_100645BF0);
  v7 = v14;
  *(_OWORD *)&v6[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_eventHandler] = v14;
  v8 = v7;
  swift_unknownObjectRetain(v7);

  v13.receiver = v6;
  v13.super_class = ObjectType;
  v9 = (char *)objc_msgSendSuper2(&v13, "initWithCoder:", a1);
  v10 = v9;
  if (v9)
  {
    v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_eventHandler];
    *(_QWORD *)(v11 + 24) = &off_1005F0F50;
    swift_unknownObjectWeakAssign(v11 + 16, v9);
  }
  swift_unknownObjectRelease(v8);

  return v10;
}

void sub_1000DC3C4(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Strong;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  _QWORD v31[4];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[25];
  _QWORD v37[10];
  char v38[64];
  objc_super v39;

  v3 = v2;
  v39.receiver = v2;
  v39.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v39, "viewDidLoad");
  v4 = sub_10002A750((uint64_t *)&unk_1006415A0);
  inited = swift_initStackObject(v4, v38);
  *(_OWORD *)(inited + 16) = xmmword_100520050;
  TTRITableSectionHeaderFooter.init(title:height:)(v37, 0x6573616261746144);
  memset(v36, 0, sizeof(v36));
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v6 = sub_10002A750(&qword_10064AAE0);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005201E0;
  *(_QWORD *)(v7 + 32) = sub_1000DC828();
  *(_QWORD *)(v7 + 40) = &protocol witness table for TTRITableCell<A>;
  *(_QWORD *)(v7 + 48) = sub_1000DC960();
  *(_QWORD *)(v7 + 56) = &protocol witness table for TTRITableCell<A>;
  v8 = type metadata accessor for TTRITableSection(0);
  swift_allocObject(v8, 217, 7);
  *(_QWORD *)(inited + 32) = TTRITableSection.init(header:footer:items:)(v37, &v33, v7);
  TTRITableSectionHeaderFooter.init(title:height:)(v37, 0x6F6974616D696E41);
  memset(v36, 0, sizeof(v36));
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v9 = swift_allocObject(v6, 48, 7);
  v32 = xmmword_100520250;
  *(_OWORD *)(v9 + 16) = xmmword_100520250;
  *(_QWORD *)(v9 + 32) = sub_1000DCCE4();
  *(_QWORD *)(v9 + 40) = &protocol witness table for TTRITableCell<A>;
  swift_allocObject(v8, 217, 7);
  *(_QWORD *)(inited + 40) = TTRITableSection.init(header:footer:items:)(v37, &v33, v9);
  TTRITableSectionHeaderFooter.init(title:height:)(v37, 0x6C69636E6550);
  memset(v36, 0, sizeof(v36));
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v10 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v10 + 16) = v32;
  *(_QWORD *)(v10 + 32) = sub_1000DCE30();
  *(_QWORD *)(v10 + 40) = &protocol witness table for TTRITableCell<A>;
  swift_allocObject(v8, 217, 7);
  *(_QWORD *)(inited + 48) = TTRITableSection.init(header:footer:items:)(v37, &v33, v10);
  TTRITableSectionHeaderFooter.init(title:height:)(v37, 0xD000000000000014);
  memset(v36, 0, sizeof(v36));
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v11 = sub_1000DCF7C();
  v12 = sub_1002DEA44((uint64_t)v11);
  swift_bridgeObjectRelease(v11);
  swift_allocObject(v8, 217, 7);
  v13 = TTRITableSection.init(header:footer:items:)(v37, &v33, v12);
  *(_QWORD *)(inited + 56) = v13;
  v37[0] = inited;
  specialized Array._endMutation()(v13);
  v14 = v37[0];
  v15 = &v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableView];
  Strong = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableView]);
  if (!Strong)
  {
    __break(1u);
    goto LABEL_9;
  }
  v17 = Strong;
  v18 = sub_1002DEA58(v14);
  swift_bridgeObjectRelease(v14);
  v37[3] = sub_100005ED8(0, (unint64_t *)&qword_100646410, UITableView_ptr);
  v37[4] = &protocol witness table for UITableView;
  v37[0] = v17;
  v19 = objc_allocWithZone((Class)type metadata accessor for TTRITableDataController(0));
  v20 = (void *)TTRITableDataController.init(tableView:sections:rowInsertionAnimationType:collapseSectionIfItemsAreHidden:)(v37, v18, 6, 0);
  v21 = OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableDataController;
  v22 = *(void **)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableDataController];
  *(_QWORD *)&v3[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableDataController] = v20;
  v23 = v20;

  v24 = (void *)swift_unknownObjectWeakLoadStrong(v15);
  if (!v24)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v25 = v24;
  objc_msgSend(v24, "setDataSource:", v23);

  v26 = (void *)swift_unknownObjectWeakLoadStrong(v15);
  if (!v26)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v27 = v26;
  objc_msgSend(v26, "setDelegate:", v23);

  if (*(_QWORD *)&v3[v21])
  {
    __chkstk_darwin(v28);
    v31[2] = v3;
    v30 = v29;
    TTRITableDataController.performBatchUpdates(by:updates:)(1, sub_1000DDB84, v31);

  }
  else
  {

  }
}

uint64_t sub_1000DC828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[7];

  v1 = OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___nukeCell;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___nukeCell))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___nukeCell);
  }
  else
  {
    v3 = v0;
    v13[0] = 1701541198;
    v13[1] = 0xE400000000000000;
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = 1;
    v13[5] = 0;
    v13[6] = 0;
    v4 = objc_allocWithZone((Class)type metadata accessor for TTRIActionCellContent());
    v5 = (_QWORD *)TTRIActionCellContent.init(state:)(v13);
    v6 = swift_allocObject(&unk_1005F0F68, 24, 7);
    swift_unknownObjectWeakInit(v6 + 16, v3);
    v7 = (_QWORD *)((char *)v5 + *(_QWORD *)((swift_isaMask & *v5) + 0x108));
    swift_beginAccess(v7, &v12, 1, 0);
    v8 = *v7;
    v9 = v7[1];
    *v7 = (uint64_t)sub_1000DDB6C;
    v7[1] = v6;
    sub_1000381B8(v8, v9);
    v10 = sub_10002A750(&qword_10064AAD0);
    swift_allocObject(v10, 73, 7);
    v2 = TTRITableCell.init(_:)(v5);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000DC960()
{
  char *v0;
  uint64_t v1;
  char *v2;

  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___populateCell])
  {
    v2 = v0;
    specialized ContiguousArray.reserveCapacity(_:)(5);
    sub_100005ED8(0, (unint64_t *)&qword_1006415C0, UIAction_ptr);
    __asm { BR              X8; loc_1000DCA48 }
  }
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___populateCell];
  swift_retain();
  return v1;
}

uint64_t sub_1000DCCE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD v15[10];

  v1 = OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___animationSlowModeCell;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___animationSlowModeCell))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___animationSlowModeCell);
  }
  else
  {
    v3 = v0;
    v4 = *(id *)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor(0);
    v5 = TTRUserDefaults.animationSlowModeEnabled.getter();

    BYTE5(v13) = 0;
    BYTE4(v13) = 0;
    LODWORD(v13) = v5 & 1;
    TTRIToggleCellContentState.init(icon:title:subtitle:ttriAccessibilitySubtitle:isOn:isSelectable:isControlHidden:isSeparatorHidden:ttriAccessibilitySimulatesExpandAndCollapse:ttriAccessibilityIsInSimulatedExpandedState:)(v15, 1, 0, 0, 0x646F4D20776F6C53, 0xE900000000000065, 0, 0, 0, 0, v13);
    v6 = objc_allocWithZone((Class)type metadata accessor for TTRIToggleCellContent(0));
    v7 = TTRIToggleCellContent.init(state:)(v15);
    v8 = (uint64_t *)(v7 + direct field offset for TTRIToggleCellContent.stateChangeBlock);
    swift_beginAccess(v7 + direct field offset for TTRIToggleCellContent.stateChangeBlock, v14, 1, 0);
    v9 = *v8;
    v10 = v8[1];
    *v8 = (uint64_t)sub_1000DD730;
    v8[1] = 0;
    sub_1000381B8(v9, v10);
    v11 = sub_10002A750((uint64_t *)&unk_10064BD30);
    swift_allocObject(v11, 73, 7);
    v2 = TTRITableCell.init(_:)(v7);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000DCE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[8];
  int v14;

  v1 = OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___pencilAutoCommitDelayCell;
  if (*(_QWORD *)(v0
                 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___pencilAutoCommitDelayCell))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___pencilAutoCommitDelayCell);
  }
  else
  {
    v3 = v0;
    v13[0] = 1;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = 0xD000000000000011;
    v13[5] = 0;
    v13[6] = 0;
    v13[4] = 0x8000000100564B80;
    v13[7] = 0x404000003E99999ALL;
    v14 = 1065353216;
    v4 = objc_allocWithZone((Class)type metadata accessor for TTRISliderCellContent());
    v5 = TTRISliderCellContent.init(state:)(v13);
    v6 = swift_allocObject(&unk_1005F0F68, 24, 7);
    swift_unknownObjectWeakInit(v6 + 16, v3);
    v7 = (uint64_t *)(v5 + direct field offset for TTRISliderCellContent.stateChangeBlock);
    swift_beginAccess(v5 + direct field offset for TTRISliderCellContent.stateChangeBlock, &v12, 1, 0);
    v8 = *v7;
    v9 = v7[1];
    *v7 = (uint64_t)sub_1000DDA80;
    v7[1] = v6;
    sub_1000381B8(v8, v9);
    v10 = sub_10002A750(&qword_100645C08);
    swift_allocObject(v10, 73, 7);
    v2 = TTRITableCell.init(_:)(v5);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

_QWORD *sub_1000DCF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];
  _QWORD *v45;
  _QWORD v46[11];

  v1 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = __chkstk_darwin(v1);
  v5 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - v6;
  v8 = OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___suggestedAttributeModelCells;
  v9 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___suggestedAttributeModelCells);
  if (v9)
  {
    v10 = *(_QWORD **)(v0
                     + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___suggestedAttributeModelCells);
  }
  else
  {
    v11 = static REMSuggestedAttributeOutput.Pipeline.allCases.getter();
    v12 = v11;
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      v37 = v8;
      v38 = v0;
      v45 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v13);
      v43 = type metadata accessor for REMSuggestedAttributesHarvester(0);
      v14 = *(unsigned __int8 *)(v2 + 80);
      v36 = v12;
      v15 = v12 + ((v14 + 32) & ~v14);
      v16 = *(_QWORD *)(v2 + 72);
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
      v41 = (v14 + 16) & ~v14;
      v42 = v16;
      v39 = v14 | 7;
      v40 = v41 + v3;
      do
      {
        v17(v7, v15, v1);
        v18 = static REMSuggestedAttributesHarvester.modelPipelineValueFromUserDefaults(for:)(v7);
        v19 = REMSuggestedAttributeOutput.Pipeline.rawValue.getter();
        BYTE5(v34) = 0;
        BYTE4(v34) = 0;
        LODWORD(v34) = v18 & 1;
        TTRIToggleCellContentState.init(icon:title:subtitle:ttriAccessibilitySubtitle:isOn:isSelectable:isControlHidden:isSeparatorHidden:ttriAccessibilitySimulatesExpandAndCollapse:ttriAccessibilityIsInSimulatedExpandedState:)(v46, 1, 0, 0, v19, v20, 0, 0, 0, 0, v34);
        v21 = objc_allocWithZone((Class)type metadata accessor for TTRIToggleCellContent(0));
        v22 = TTRIToggleCellContent.init(state:)(v46);
        v17(v5, (uint64_t)v7, v1);
        v23 = swift_allocObject(&unk_1005F0F90, v40, v39);
        (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v23 + v41, v5, v1);
        v24 = (uint64_t *)(v22 + direct field offset for TTRIToggleCellContent.stateChangeBlock);
        swift_beginAccess(v22 + direct field offset for TTRIToggleCellContent.stateChangeBlock, v44, 1, 0);
        v25 = *v24;
        v26 = v24[1];
        *v24 = (uint64_t)sub_1000DDAE8;
        v24[1] = v23;
        sub_1000381B8(v25, v26);
        v27 = sub_10002A750((uint64_t *)&unk_10064BD30);
        swift_allocObject(v27, 73, 7);
        v28 = TTRITableCell.init(_:)(v22);
        v29 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        v30 = v45[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
        v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
        specialized ContiguousArray._endMutation()(v31);
        v15 += v42;
        --v13;
      }
      while (v13);
      v10 = v45;
      swift_bridgeObjectRelease(v36);
      v8 = v37;
      v0 = v38;
    }
    else
    {
      swift_bridgeObjectRelease(v11);
      v10 = _swiftEmptyArrayStorage;
    }
    v32 = *(_QWORD *)(v0 + v8);
    *(_QWORD *)(v0 + v8) = v10;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease(v32);
    v9 = 0;
  }
  swift_bridgeObjectRetain(v9);
  return v10;
}

uint64_t sub_1000DD2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v1 = OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___deferredUpdateAction;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___deferredUpdateAction))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController____lazy_storage___deferredUpdateAction);
  }
  else
  {
    v3 = v0;
    v4 = sub_100005ED8(0, (unint64_t *)&qword_100640F30, OS_dispatch_queue_ptr);
    v5 = static OS_dispatch_queue.main.getter(v4);
    v6 = type metadata accessor for TTRDeferredAction(0);
    swift_allocObject(v6, 56, 7);
    v2 = TTRDeferredAction.init(queue:)(v5);
    swift_beginAccess(v2 + 16, v8, 1, 0);
    *(_QWORD *)(v2 + 24) = &off_1005F0F40;
    swift_unknownObjectWeakAssign(v2 + 16, v3);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_1000DD398()
{
  double v0;
  _QWORD *v1;
  float v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23[24];
  id v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  char v32[24];

  v0 = *(double *)&qword_100651CE0;
  v1 = *(id *)(sub_1000DCE30() + 32);
  swift_release();
  v3 = (char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x78);
  swift_beginAccess(v3, v32, 0, 0);
  v4 = (void *)*((_QWORD *)v3 + 1);
  v6 = *((_QWORD *)v3 + 4);
  v5 = *((_QWORD *)v3 + 5);
  v7 = *((_QWORD *)v3 + 6);
  v8 = *((_QWORD *)v3 + 7);
  v9 = *((_OWORD *)v3 + 1);
  v24 = *(id *)v3;
  v25 = v4;
  v26 = v9;
  v27 = v6;
  v28 = v5;
  v29 = v7;
  v30 = v8;
  v2 = v0;
  v31 = v2;
  sub_1000DDA1C(v24, v4, (void *)v9);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  TTRITableCellContent.state.setter(&v24);

  v10 = *(id *)(sub_1000DCE30() + 32);
  swift_release();
  v11 = sub_10002A750((uint64_t *)&unk_100640FD0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100520250;
  *(_QWORD *)(v12 + 56) = &type metadata for Double;
  *(_QWORD *)(v12 + 64) = &protocol witness table for Double;
  *(double *)(v12 + 32) = v0;
  v13 = String.init(format:_:)(0x732066312E25, 0xE600000000000000, v12);
  v15 = v14;
  v16 = (char *)v10 + *(_QWORD *)((swift_isaMask & *v10) + 0x78);
  swift_beginAccess(v16, v23, 0, 0);
  v17 = *(id *)v16;
  v18 = (void *)*((_QWORD *)v16 + 1);
  v19 = (void *)*((_QWORD *)v16 + 2);
  v20 = *((_QWORD *)v16 + 3);
  v21 = *((_QWORD *)v16 + 4);
  LODWORD(v0) = *((_DWORD *)v16 + 16);
  v22 = *((_QWORD *)v16 + 7);
  sub_1000DDA1C(*(id *)v16, v18, v19);
  swift_bridgeObjectRetain(v21);
  v24 = v17;
  v25 = v18;
  *(_QWORD *)&v26 = v19;
  *((_QWORD *)&v26 + 1) = v20;
  v27 = v21;
  v28 = v13;
  v29 = v15;
  v30 = v22;
  v31 = *(float *)&v0;
  TTRITableCellContent.state.setter(&v24);

}

void sub_1000DD584(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

void sub_1000DD5AC()
{
  sub_1002DE338(2, 2, 3, 1, 0, 0);
}

void sub_1000DD644(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(Strong+ OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_eventHandler)+ 32)+ 32)+ 16), "nukeDatabase");

  }
}

uint64_t sub_1000DD6B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = (void *)result;
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_eventHandler);
    swift_unknownObjectRetain(v7);
    sub_1000DD584(v8, v9, a3);

    return swift_unknownObjectRelease(v7);
  }
  return result;
}

void sub_1000DD730(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  id v4;

  v2 = (id *)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor();
  v3 = *(unsigned __int8 *)(a1 + 72);
  v4 = *v2;
  TTRUserDefaults.animationSlowModeEnabled.setter(v3);

}

double sub_1000DD77C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  void *v5;
  Swift::String v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  *(double *)&qword_100651CE0 = *(float *)(a1 + 64);
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000DD2B8();
    v6._object = (void *)0x8000000100564BA0;
    v6._countAndFlagsBits = 0xD000000000000018;
    TTRDeferredAction.scheduleNextRunLoop(reason:)(v6);

    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t type metadata accessor for TTRIDebugMenuViewController()
{
  return objc_opt_self(_TtC9Reminders27TTRIDebugMenuViewController);
}

void sub_1000DD998()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9Reminders27TTRIDebugMenuViewController_tableDataController);
  if (v1)
  {
    v2 = v1;
    TTRITableDataController.performBatchUpdates(by:updates:)(1, sub_1000DDA14, &v3);

  }
}

void sub_1000DDA14()
{
  sub_1000DD398();
}

id sub_1000DDA1C(id result, void *a2, void *a3)
{
  void *v3;
  id v4;
  id v5;

  if (result != (id)1)
  {
    v3 = result;
    v4 = a3;
    v5 = v3;
    return a2;
  }
  return result;
}

uint64_t sub_1000DDA5C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000DDA80(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DD77C(a1, v1);
}

uint64_t sub_1000DDA88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000DDAE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for REMSuggestedAttributeOutput.Pipeline(0) - 8) + 80);
  v4 = v1 + ((v3 + 16) & ~v3);
  type metadata accessor for REMSuggestedAttributesHarvester(0);
  return static REMSuggestedAttributesHarvester.setModelPipelineValueInUserDefaults(for:value:)(v4, *(unsigned __int8 *)(a1 + 72));
}

uint64_t sub_1000DDB3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000DDB60(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DD6B4(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void sub_1000DDB6C()
{
  uint64_t v0;

  sub_1000DD644(v0);
}

ValueMetadata *type metadata accessor for TTRIDebugMenuViewController.Argument()
{
  return &type metadata for TTRIDebugMenuViewController.Argument;
}

uint64_t sub_1000DDB88(_QWORD *a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  void *v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  id v68;
  void *v69;
  void (*v70)(void *, _UNKNOWN **, void **, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, _UNKNOWN **);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(_QWORD *, _UNKNOWN **, uint64_t, _QWORD, __n128);
  __n128 v85;
  _QWORD *v86;
  void **v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[4];
  __int128 v102;
  __int128 v103;
  _QWORD v104[16];
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;

  v96 = a1;
  v97 = a3;
  v4 = type metadata accessor for TTRIRemindersCommonPresenterConfiguration(0);
  __chkstk_darwin(v4);
  v89 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for TTRIRemindersListAssembly.PresenterConfigurationBuilder(0);
  __chkstk_darwin(v92);
  v98 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for TTRListType.SortingCapability(0);
  __chkstk_darwin(v91);
  v90 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsStyle(0);
  v8 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v88 - v15;
  v17 = type metadata accessor for REMSuggestedAttributesElector.ExcludedAttributes(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TTRIRemindersListAssembly.CommonParameters(0);
  __chkstk_darwin(v20);
  v22 = (void **)((char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = a2;
  v24 = sub_10002B1E8((uint64_t)a2, (uint64_t)v22, v23);
  static REMSuggestedAttributesElector.ExcludedAttributes.dueDates.getter(v24);
  sub_100041F70(v22, (uint64_t)v19, 0, (uint64_t)v104);
  TTRListType.PredefinedSmartListType.fallbackSortingStyle.getter(1);
  v25 = *a2;
  v26 = v93;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v93, enum case for REMRemindersListDataView.ScheduledByDateBucketsStyle.regular(_:), v95);
  v94 = v11;
  v27 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v27(v14, v16, v10);
  v28 = type metadata accessor for TTRShowScheduledByDateBucketsDataModelSource(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = TTRShowScheduledByDateBucketsDataModelSource.init(store:style:countCompleted:sortingStyle:canChangeSortingStyle:)(v25, v26, 0, v14, 0);
  v30 = (void *)v104[0];
  v31 = (uint64_t)v90;
  v93 = v16;
  v95 = v10;
  v27(v90, v16, v10);
  swift_storeEnumTagMultiPayload(v31, v91, 0);
  v32 = type metadata accessor for TTRShowScheduledViewModelSource(0);
  v33 = (_QWORD *)swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v34 = v30;
  v91 = v29;
  v35 = sub_1000DE350(v29, v34, v31, 0, v33);

  sub_10002B1E8((uint64_t)v88, (uint64_t)v22, type metadata accessor for TTRIRemindersListAssembly.CommonParameters);
  sub_100043000((uint64_t)v104, (uint64_t)v101);
  swift_retain(v35);
  sub_100042A94((uint64_t)v22, (uint64_t)v101, v35, (uint64_t)&off_100609110, v98);
  v36 = (uint64_t)v89;
  sub_100042C0C((uint64_t)v89);
  v37 = type metadata accessor for TTRIRemindersCommonPresenter(0);
  v38 = *(unsigned int *)(v37 + 48);
  v39 = *(unsigned __int16 *)(v37 + 52);
  v90 = (char *)v37;
  v40 = swift_allocObject(v37, v38, v39);
  v41 = v97;
  swift_unknownObjectRetain(v97);
  v42 = (_QWORD *)sub_1002A70CC(v36, v41, v40);
  v43 = v42[18];
  ObjectType = swift_getObjectType(v42[17], v44);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 104))(ObjectType, v43);
  if (v46)
  {
    v48 = v46;
    v49 = v47;
    v50 = swift_getObjectType(v46, v47);
    LOBYTE(v49) = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(v50, v49);
    swift_unknownObjectRelease(v48);
    LOBYTE(v46) = v49 & 1;
  }
  v51 = sub_100172EB4(v46, (uint64_t)v42);
  v89 = (char *)v52;
  v54 = v53;
  v56 = v55;
  v88 = (void **)swift_getObjectType(v53, v52);
  v42[3] = *(_QWORD *)(v56 + 8);
  v97 = v54;
  swift_unknownObjectWeakAssign(v42 + 2, v54);
  v57 = v42[18];
  v59 = swift_getObjectType(v42[17], v58);
  v60 = *(uint64_t (**)(uint64_t, uint64_t))(v57 + 104);
  swift_retain(v42);
  v61 = v51;
  v62 = v60(v59, v57);
  v64 = v62;
  if (v62)
  {
    v65 = v63;
    v66 = swift_getObjectType(v62, v63);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 16))(v66, v65);
    swift_unknownObjectRelease(v64);
    v64 = v67 & 1;
  }
  v68 = objc_allocWithZone((Class)type metadata accessor for TTRIShowRemindersViewController(0));
  v69 = (void *)sub_1002A8974(v42, v61, v89, v64, 0, 1, 0, v68);
  swift_release(v42);

  v70 = *(void (**)(void *, _UNKNOWN **, void **, uint64_t))(v56 + 32);
  v71 = v69;
  v89 = v71;
  v70(v69, &off_1005FCD60, v88, v56);
  v72 = v104[0] + direct field offset for TTRRemindersListInteractor.delegate;
  swift_beginAccess(v104[0] + direct field offset for TTRRemindersListInteractor.delegate, &v100, 1, 0);
  *(_QWORD *)(v72 + 8) = &off_1005F3190;
  swift_unknownObjectWeakAssign(v72, v42);
  v73 = v104[0] + direct field offset for TTRRemindersListInteractor.optimisticUpdatesDelegate;
  swift_beginAccess(v104[0] + direct field offset for TTRRemindersListInteractor.optimisticUpdatesDelegate, &v99, 1, 0);
  *(_QWORD *)(v73 + 8) = &protocol witness table for TTRShowScheduledByDateBucketsDataModelSource;
  v74 = v91;
  swift_unknownObjectWeakAssign(v73, v91);
  swift_unknownObjectWeakAssign(v104[3] + 16, v71);
  v75 = *(void (**)(uint64_t, _UNKNOWN **))(*(_QWORD *)v74 + 392);
  v76 = swift_retain(v35);
  v75(v76, &off_1005F7470);
  swift_retain(v35);
  v77 = swift_retain(v42);
  sub_10048D4EC(v77, (uint64_t)&off_1005F30C0);
  swift_release(v35);
  swift_release(v42);
  v78 = v98;
  v79 = *(_QWORD *)(v98 + *(int *)(v92 + 28));
  *(_QWORD *)(v79 + 24) = &off_1005F3260;
  swift_unknownObjectWeakAssign(v79 + 16, v42);
  sub_100028CFC((uint64_t)&v105, (uint64_t)v101);
  v102 = v106;
  v103 = v107;
  v80 = v106 + 32;
  *(_QWORD *)(v106 + 40) = &off_1005F3040;
  swift_unknownObjectWeakAssign(v80, v42);
  sub_100027F10(v101);
  sub_100028CFC((uint64_t)&v108, (uint64_t)v101);
  v81 = v109;
  v102 = v109;
  v83 = swift_getObjectType(v109, v82);
  v84 = *(void (**)(_QWORD *, _UNKNOWN **, uint64_t, _QWORD, __n128))(*((_QWORD *)&v81 + 1) + 48);
  swift_retain(v42);
  v85 = swift_unknownObjectRetain(v81);
  v84(v42, &off_1005F2FF0, v83, *((_QWORD *)&v81 + 1), v85);
  swift_unknownObjectRelease(v81);
  sub_100027F10(v101);
  v86 = v96;
  v96[3] = v90;
  v86[4] = &off_1005F1068;
  *v86 = v42;
  swift_release(v74);
  swift_release(v35);

  swift_unknownObjectRelease(v97);
  sub_10001F544(v78, type metadata accessor for TTRIRemindersListAssembly.PresenterConfigurationBuilder);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
  sub_100043844((uint64_t)v104);
  return (uint64_t)v89;
}

id TTRIShowScheduledAssembly.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIShowScheduledAssembly();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for TTRIShowScheduledAssembly()
{
  return objc_opt_self(_TtC9Reminders25TTRIShowScheduledAssembly);
}

id TTRIShowScheduledAssembly.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TTRIShowScheduledAssembly();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000DE350(uint64_t a1, void *a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v40 = a3;
  v42 = *a5;
  v43 = type metadata accessor for REMAnalyticsEvent(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10002A750(&qword_100649CA0);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TTRListType.SortingCapability(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_BYTE *)a5 + OBJC_IVAR____TtC9Reminders31TTRShowScheduledViewModelSource_cachedEmptyListMessaging) = 0x80;
  v18 = (char *)a5 + OBJC_IVAR____TtC9Reminders31TTRShowScheduledViewModelSource_completedRemindersCount;
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = (char *)a5 + OBJC_IVAR____TtC9Reminders31TTRShowScheduledViewModelSource_defaultSectionID;
  v20 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)((char *)a5
            + OBJC_IVAR____TtC9Reminders31TTRShowScheduledViewModelSource_sectionHeadersNeedingPlaceholderReminderItems) = &_swiftEmptySetSingleton;
  *(_QWORD *)((char *)a5 + OBJC_IVAR____TtC9Reminders31TTRShowScheduledViewModelSource_tappedSectionHeaders) = &_swiftEmptySetSingleton;
  *(_QWORD *)((char *)a5 + OBJC_IVAR____TtC9Reminders31TTRShowScheduledViewModelSource_lastSectionsSnapshot) = 0;
  *((_BYTE *)a5 + OBJC_IVAR____TtC9Reminders31TTRShowScheduledViewModelSource_hasDefaultNewReminderButton) = a4;
  sub_10002B1E8(a3, (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  swift_retain(a1);
  v21 = sub_1002A8704(a1, (uint64_t)a2, (uint64_t)v17, (uint64_t)a5);
  swift_retain(v21);
  sub_1001FDBBC((uint64_t)v14);
  v22 = type metadata accessor for TTRRemindersListViewModel.ListInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v14, 0, 1, v22);
  sub_10046ADD4((uint64_t)v14);
  v23 = sub_100080EAC((uint64_t)v14);
  v24 = *(void **)TTRUserDefaults.appUserDefaults.unsafeMutableAddressor(v23);
  type metadata accessor for REMAnalyticsManager(0);
  v25 = v24;
  v26 = static REMAnalyticsManager.shared.getter();
  v27 = sub_10002A750(&qword_100645348);
  v28 = &v11[*(int *)(v27 + 48)];
  v29 = &v11[*(int *)(v27 + 80)];
  v30 = enum case for REMRemindersOpenUserOperation.SmartListType.scheduled(_:);
  v31 = type metadata accessor for REMRemindersOpenUserOperation.SmartListType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v11, v30, v31);
  v32 = enum case for REMRemindersOpenUserOperation.smartList(_:);
  v33 = type metadata accessor for REMRemindersOpenUserOperation(0);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v11, v32, v33);
  *(_QWORD *)v28 = TTRUserDefaults.activitySessionId.getter(v34);
  *((_QWORD *)v28 + 1) = v35;
  TTRUserDefaults.activitySessionBeginTime.getter();
  *(_QWORD *)v29 = _typeName(_:qualified:)(v42, 0);
  *((_QWORD *)v29 + 1) = v36;
  v37 = v41;
  v38 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v11, enum case for REMAnalyticsEvent.openListUserOperation(_:), v43);
  REMAnalyticsManager.post(event:)(v11);

  swift_release(v26);
  swift_release(v21);
  sub_10001F544(v40, (uint64_t (*)(_QWORD))&type metadata accessor for TTRListType.SortingCapability);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v38);
  return v21;
}

uint64_t sub_1000DE698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100645C40);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100645C40);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000DE728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *Strong;
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  v1 = v0;
  if (qword_10063D3C0 != -1)
    swift_once(&qword_10063D3C0, sub_1000DE698);
  v2 = type metadata accessor for Logger(0);
  sub_100012DC4(v2, (uint64_t)qword_100645C40);
  v3 = sub_10002D32C((uint64_t)_swiftEmptyArrayStorage);
  sub_1000143B4((uint64_t)"Learn More done", 15, 2, v3);
  swift_bridgeObjectRelease(v3);
  v4 = *sub_10001413C((_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
  if (qword_10063D2E0 != -1)
    swift_once(&qword_10063D2E0, sub_100059748);
  sub_100012DC4(v2, (uint64_t)qword_100640550);
  sub_1002EB4BC(0x6F4D206E7261654CLL, 0xEA00000000006572);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v6 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
  result = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(result, v8);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v10 + 8))(v1, &off_1005F1088, ObjectType, v10);
    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t sub_1000DE898()
{
  uint64_t v0;

  sub_1000381C8(v0 + 16);
  sub_1000381C8(v0 + 32);
  sub_100027F10((_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for TTRILearnMorePresenter()
{
  return objc_opt_self(_TtC9Reminders22TTRILearnMorePresenter);
}

uint64_t getEnumTagSinglePayload for TTRApplicationRunProperties(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[5])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TTRApplicationRunProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTRApplicationRunProperties()
{
  return &type metadata for TTRApplicationRunProperties;
}

uint64_t sub_1000DE9EC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0
                                              + OBJC_IVAR____TtC9Reminders37TTRIListDetailContainerViewController_presenter));
}

uint64_t type metadata accessor for TTRIListDetailContainerViewController()
{
  return objc_opt_self(_TtC9Reminders37TTRIListDetailContainerViewController);
}

void sub_1000DEAD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t ObjectType;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  sub_100054030(a1, (uint64_t)&v17);
  if (!v18)
  {
    sub_1000DF7E4((uint64_t)&v17);
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders31TTRIRemindersBoardTipHeaderView_contentHostingView)
       + OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentView;
    v10 = *(void **)v9;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    sub_1000DEEA4(v10);

    return;
  }
  sub_10002E37C(&v17, (uint64_t)v19);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Reminders31TTRIRemindersBoardTipHeaderView_contentHostingView);
  v4 = v3 + OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentView;
  v5 = *(void **)(v3 + OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentView);
  if (!v5)
    goto LABEL_7;
  v6 = *(_QWORD *)(v4 + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v3+ OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentView), v2);
  v8 = v5;
  if ((dispatch thunk of UIContentView.supports(_:)(v19, ObjectType, v6) & 1) == 0)
  {

LABEL_7:
    v11 = v20;
    v12 = v21;
    sub_10001413C(v19, v20);
    v13 = (void *)dispatch thunk of UIContentConfiguration.makeContentView()(v11, v12);
    v14 = *(void **)v4;
    *(_QWORD *)v4 = v13;
    *(_QWORD *)(v4 + 8) = v15;
    v16 = v13;
    sub_1000DEEA4(v14);

    goto LABEL_8;
  }
  sub_100010634((uint64_t)v19, (uint64_t)&v17);
  dispatch thunk of UIContentView.configuration.setter(&v17, ObjectType, v6);

LABEL_8:
  sub_100027F10(v19);
}

void sub_1000DEC28(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  Class isa;
  uint64_t v11;

  objc_msgSend(a1, "setDirectionalLayoutMargins:", 8.0, 16.0, 8.0, 16.0);
  objc_msgSend(a1, "setLayoutMarginsRelativeArrangement:", 0);
  objc_msgSend(a1, "setDebugBoundingBoxesEnabled:", 0);
  objc_msgSend(a1, "setEdgesPreservingSuperviewLayoutMargins:", 10);
  objc_msgSend(a1, "setHorizontalAlignment:", 0);
  objc_msgSend(a1, "setVerticalAlignment:", 0);
  v6 = sub_10002A750((uint64_t *)&unk_1006415A0);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10051FF90;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  v11 = v7;
  specialized Array._endMutation()(v7);
  sub_100005ED8(0, (unint64_t *)&qword_1006406F0, UIView_ptr);
  v8 = a2;
  v9 = a3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  objc_msgSend(a1, "setArrangedSubviews:", isa);

}

uint64_t type metadata accessor for TTRIRemindersBoardTipHeaderView()
{
  return objc_opt_self(_TtC9Reminders31TTRIRemindersBoardTipHeaderView);
}

void sub_1000DEEA4(void *a1)
{
  char *v1;
  char *v2;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  Class isa;
  id v18;
  uint64_t v19;

  v2 = v1;
  v4 = *(void **)&v1[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentView];
  if (v4)
  {
    v5 = v4;
    if (a1 && v4 == a1)
      return;
  }
  else
  {
    if (!a1)
      return;
    v5 = 0;
  }
  v18 = v5;
  objc_msgSend(a1, "removeFromSuperview");
  if (v4)
  {
    v6 = (void *)objc_opt_self(UIColor);
    v7 = v18;
    v8 = objc_msgSend(v6, "clearColor");
    objc_msgSend(v7, "setBackgroundColor:", v8);

    objc_msgSend(v7, "setPreservesSuperviewLayoutMargins:", 1);
    objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v2, "addSubview:", v7);
    v19 = UIView.constraintsEqualTo(_:edges:)(v2, 11);
    v9 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_dummyView], "heightAnchor");
    v10 = objc_msgSend(v7, "heightAnchor");
    v11 = objc_msgSend(v9, "constraintEqualToAnchor:", v10);

    v12 = v11;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
    v14 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v13 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v14 >= v13 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
    specialized Array._endMutation()(v15);

    v16 = (void *)objc_opt_self(NSLayoutConstraint);
    sub_100005ED8(0, (unint64_t *)&qword_10064BB60, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, "activateConstraints:", isa, swift_bridgeObjectRelease(v19).n128_f64[0]);

  }
  else
  {

  }
}

char *sub_1000DF0F8(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  objc_class *ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  id v18;
  char *v19;
  id v20;
  char *v21;
  id v22;
  void *v23;
  char *v24;
  uint64_t v25;
  Class isa;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  objc_super v39;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v13 = sub_10002A750(&qword_10063F860);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v7[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentView];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_viewHeightDidChangeCancellable] = 0;
  v18 = objc_allocWithZone((Class)type metadata accessor for HeightReportingDummyView());
  v19 = v7;
  v20 = objc_msgSend(v18, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v20, "setHidden:", 1);
  *(_QWORD *)&v19[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_dummyView] = v20;
  *(_QWORD *)&v19[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentHeight] = 0;
  v21 = (char *)v20;

  v39.receiver = v19;
  v39.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v39, "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v21, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v22, "addSubview:", v21);
  v23 = (void *)objc_opt_self(NSLayoutConstraint);
  v24 = (char *)v22;
  v25 = UIView.constraintsEqualTo(_:edges:)(v24, 3);

  sub_100005ED8(0, (unint64_t *)&qword_10064BB60, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v23, "activateConstraints:", isa);

  v38 = *(_QWORD *)&v21[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A24HeightReportingDummyView_viewHeightSubject];
  v27 = sub_10002A750(&qword_10063F868);
  v28 = sub_100023FEC(&qword_10063F870, &qword_10063F868, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v29 = sub_100053E9C();
  Publisher<>.removeDuplicates()(v27, v28, v29);
  v30 = sub_100023FEC(&qword_10063F880, &qword_10063F860, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v31 = Publisher.eraseToAnyPublisher()(v13, v30);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v38 = v31;
  v32 = swift_allocObject(&unk_1005F1180, 24, 7);
  swift_unknownObjectWeakInit(v32 + 16, v24);
  v33 = sub_10002A750(&qword_10063F888);
  v34 = sub_100023FEC(&qword_10063F890, &qword_10063F888, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v35 = Publisher<>.sink(receiveValue:)(sub_1000DF848, v32, v33, v34);

  swift_release();
  swift_release();
  *(_QWORD *)&v24[OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_viewHeightDidChangeCancellable] = v35;
  swift_release();
  return v24;
}

void sub_1000DF430(double *a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  double v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(double *)(Strong
                   + OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentHeight);
    *(double *)(Strong + OBJC_IVAR____TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView_contentHeight) = v2;
    if ((sub_1003F5628(v6, 0.0000000149011612, v2) & 1) == 0)
      objc_msgSend(v5, "invalidateIntrinsicContentSize");

  }
}

uint64_t type metadata accessor for ContentHostingView()
{
  return objc_opt_self(_TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A18ContentHostingView);
}

uint64_t type metadata accessor for HeightReportingDummyView()
{
  return objc_opt_self(_TtC9RemindersP33_B98983B1AA1B7BB80BBF7452C6255D2A24HeightReportingDummyView);
}

uint64_t sub_1000DF7E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10002A750(&qword_100654980);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DF824()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000DF848(double *a1)
{
  uint64_t v1;

  sub_1000DF430(a1, v1);
}

void sub_1000DF850(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v4;
  id v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[6];
  objc_super v22;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v4 = &v2[OBJC_IVAR____TtC9Reminders31TTRIRemindersBoardTipHeaderView_contentConfiguration];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  v5 = objc_allocWithZone((Class)UIView);
  v6 = v2;
  v7 = objc_msgSend(v5, "init");
  v8 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  objc_msgSend(v7, "setBackgroundColor:", v8);

  *(_QWORD *)&v6[OBJC_IVAR____TtC9Reminders31TTRIRemindersBoardTipHeaderView_backgroundView] = v7;
  v9 = objc_allocWithZone((Class)type metadata accessor for ContentHostingView());
  v10 = v7;
  v11 = objc_msgSend(v9, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v11, "setPreservesSuperviewLayoutMargins:", 1);
  *(_QWORD *)&v6[OBJC_IVAR____TtC9Reminders31TTRIRemindersBoardTipHeaderView_contentHostingView] = v11;
  v12 = v11;

  v22.receiver = v6;
  v22.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v22, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = (_QWORD *)swift_allocObject(&unk_1005F11A8, 40, 7);
  v14[2] = v13;
  v14[3] = v10;
  v14[4] = v12;
  v15 = swift_allocObject(&unk_1005F11D0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000DFB08;
  *(_QWORD *)(v15 + 24) = v14;
  v21[4] = sub_10001B278;
  v21[5] = v15;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_10001B258;
  v21[3] = &unk_1005F11E8;
  v16 = _Block_copy(v21);
  v17 = v13;
  v18 = v10;
  v19 = v12;
  v20 = v17;
  swift_retain();
  objc_msgSend(v20, "performBatchUpdates:", v16, swift_release().n128_f64[0]);

  _Block_release(v16);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v15, "", 150, 49, 29, 1);
  swift_release();
  swift_release();
  if ((v19 & 1) != 0)
    __break(1u);
}

uint64_t sub_1000DFAD4()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000DFB08()
{
  void **v0;

  sub_1000DEC28(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000DFB14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for TTRIReminderCellAutoCompleteViewController()
{
  return objc_opt_self(_TtC9Reminders42TTRIReminderCellAutoCompleteViewController);
}

void sub_1000DFBA8(Swift::OpaquePointer a1, uint64_t a2)
{
  uint64_t v2;

  swift_getObjectType(v2, a2);
  TTRAccessibilityReminderAutoCompleteAnnouncing.ttrAccessibilityAnnounceAutocompletionSuggestionChanges(_:)(a1);
}

void sub_1000DFBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  __n128 v22;
  uint64_t v23;
  Swift::OpaquePointer v24;
  id v25;
  void *v26;
  uint64_t v27;

  v3 = v2;
  swift_getObjectType(v2, a2);
  v5 = sub_10002A750(&qword_100645E90);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRIReminderCellAutoCompleteViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC9Reminders42TTRIReminderCellAutoCompleteViewController_autoCompleteStack;
  v13 = *(void **)(v3 + OBJC_IVAR____TtC9Reminders42TTRIReminderCellAutoCompleteViewController_autoCompleteStack);
  if (v13)
  {
    sub_1000DFE14(a1, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_1000DFE5C((uint64_t)v7);
      v14 = *(void **)(v3 + v12);
      if (!v14)
        return;
      goto LABEL_9;
    }
    sub_1000DFE9C((uint64_t)v7, (uint64_t)v11);
    v15 = &v11[*(int *)(v8 + 24)];
    v16 = *((_QWORD *)v15 + 1);
    if (v16)
    {
      v17 = *(int *)(v8 + 28);
      v18 = *(_QWORD *)&v11[v17];
      if (*(_QWORD *)(v18 + 16))
      {
        v19 = *(_QWORD *)v15;
        v20 = v13;
        v21 = objc_msgSend(v20, "setHidden:", 0, swift_bridgeObjectRetain(v16).n128_f64[0]);
        __chkstk_darwin(v21);
        *(&v27 - 6) = v18;
        *(&v27 - 5) = (uint64_t)v20;
        *(&v27 - 4) = v19;
        *(&v27 - 3) = v16;
        *(&v27 - 2) = v3;
        v22 = swift_bridgeObjectRetain(v18);
        TTRIRemindersListCellAutoCompleteSuggestionsStackView.performSubviewUpdates(block:)(sub_1000E00BC, &v27 - 8, v22);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v18);
        v23 = *(_QWORD *)&v11[v17];
        swift_bridgeObjectRetain(v23);
        TTRAccessibilityReminderAutoCompleteAnnouncing.ttrAccessibilityAnnounceAutocompletionSuggestionChanges(_:)(v24);

        swift_bridgeObjectRelease(v23);
        sub_1000DFEE0((uint64_t)v11);
        return;
      }
    }
    sub_1000DFEE0((uint64_t)v11);
    v14 = *(void **)(v3 + v12);
    if (v14)
    {
LABEL_9:
      v25 = v14;
      TTRIRemindersListCellAutoCompleteSuggestionsStackView.setExclusiveHighlighted(on:)(0);

      v26 = *(void **)(v3 + v12);
      if (v26)
        objc_msgSend(v26, "setHidden:", 1);
    }
  }
}

uint64_t sub_1000DFE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100645E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DFE5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10002A750(&qword_100645E90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DFE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTRIReminderCellAutoCompleteViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DFEE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTRIReminderCellAutoCompleteViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000DFF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v20[24];
  _BYTE v21[224];
  _QWORD v22[28];
  _BYTE v23[200];

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (uint64_t *)(a5 + OBJC_IVAR____TtC9Reminders42TTRIReminderCellAutoCompleteViewController_presenter);
  v8 = a1 + 32;
  do
  {
    if (v5 >= v6)
    {
      TTRIRemindersListCellAutoCompleteSuggestionsStackView.makeHidden(at:)(v5);
    }
    else
    {
      sub_1000E00CC(v8, (uint64_t)v23);
      v9 = type metadata accessor for TTRIRemindersListCellAutoCompleteSuggestionsStackView.Row(0);
      v10 = TTRIRemindersListCellAutoCompleteSuggestionsStackView.cachedView<A>(ofType:at:)(v9, v5, v9);
      if (v10)
      {
        v11 = (void *)v10;
        v12 = (char *)v10;
      }
      else
      {
        v12 = (char *)TTRIRemindersListCellAutoCompleteSuggestionsStackView.createRow()();
        v11 = 0;
      }
      sub_1000E00CC((uint64_t)v23, (uint64_t)v21);
      TTRIRemindersListCellAutoCompleteSuggestionsStackView.RowConfiguration.init(suggestion:query:isLast:leftInset:)(v22, v21, a3, a4, v6 - 1 == v5, 0.0);
      sub_1000E0108((uint64_t)v22, (uint64_t)v21);
      v13 = v11;
      v14 = swift_bridgeObjectRetain(a4);
      TTRIRemindersListCellAutoCompleteSuggestionsStackView.Row.configuration.setter(v21, v14);
      v15 = *v7;
      v16 = *(_QWORD *)(v7[1] + 8);
      v17 = &v12[direct field offset for TTRIRemindersListCellAutoCompleteSuggestionsStackView.Row.suggestionDelegate];
      swift_beginAccess(&v12[direct field offset for TTRIRemindersListCellAutoCompleteSuggestionsStackView.Row.suggestionDelegate], v20, 1, 0);
      *((_QWORD *)v17 + 1) = v16;
      swift_unknownObjectWeakAssign(v17, v15);
      TTRIRemindersListCellAutoCompleteSuggestionsStackView.makeVisible(_:at:alignment:beforeSpacing:bottomMarginIfLast:)(v12, v5, 0, 0.0, 0.0);

      sub_1000E0144((uint64_t)v22);
      sub_1000E0178((uint64_t)v23);
    }
    ++v5;
    v8 += 192;
  }
  while (v5 != 3);
}

void sub_1000E00BC()
{
  uint64_t *v0;

  sub_1000DFF1C(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000E00CC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for TTRAnyReminderTextEditingSuggestion - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000E0108(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for TTRIRemindersListCellAutoCompleteSuggestionsStackView.RowConfiguration
                                             - 1)
                                           + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000E0144(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for TTRIRemindersListCellAutoCompleteSuggestionsStackView.RowConfiguration - 1)
                    + 8))();
  return a1;
}

uint64_t sub_1000E0178(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for TTRAnyReminderTextEditingSuggestion - 1) + 8))();
  return a1;
}

uint64_t type metadata accessor for TTRIRemindersListTipCell()
{
  return objc_opt_self(_TtC9Reminders24TTRIRemindersListTipCell);
}

uint64_t sub_1000E02D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v79;
  uint64_t v80;
  char v81[16];
  uint64_t (*v82)(uint64_t *);
  uint64_t v83;
  char v84[16];
  uint64_t (*v85)(uint64_t);
  uint64_t v86;
  char v87[16];
  uint64_t (*v88)(uint64_t *);
  uint64_t v89;
  char v90[16];
  uint64_t (*v91)(uint64_t *);
  uint64_t v92;
  char v93[16];
  uint64_t (*v94)(uint64_t);
  uint64_t v95;
  char v96[16];
  uint64_t (*v97)(uint64_t *);
  uint64_t v98;
  char v99[16];
  uint64_t (*v100)(uint64_t *);
  uint64_t v101;
  char v102[16];
  uint64_t (*v103)(uint64_t);
  uint64_t v104;
  char v105[16];
  uint64_t (*v106)(uint64_t *);
  uint64_t v107;
  char v108[16];
  uint64_t *v109;
  __int128 v110;
  _QWORD *v111;
  char v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  char v116;
  _QWORD v117[3];
  char v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  char v122;
  char v123[24];
  char v124[24];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130[5];
  _QWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;

  v11 = *(_QWORD **)(v7 + 16);
  v12 = *(_QWORD **)(v7 + 24);
  v13 = *(_QWORD **)(v7 + 32);
  v79 = *(_BYTE *)(v7 + 40);
  swift_beginAccess(v7 + 80, v124, 0, 0);
  v14 = *(_QWORD *)(v7 + 80);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain_n(v12, 2);
  swift_bridgeObjectRetain_n(v13, 2);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain(v14);
  sub_1000F9120(v15, (uint64_t)v12, (uint64_t)a2, &v125);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  v16 = *(_QWORD *)(v7 + 88);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v16);
  sub_1000F9120(v17, (uint64_t)v12, (uint64_t)a2, v130);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  v18 = v128;
  v71 = v128;
  v20 = v125;
  v19 = v126;
  v75 = v126;
  v72 = v125;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v60 = a3;
  sub_1000F9398(v130, v20, v19, v18, v11, v12, v13, v79, v131, a1, a2, a3, a4);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  v140 = v130[0];
  sub_1000522B0(&v140);
  v139 = v130[1];
  sub_1000522B0(&v139);
  v138 = v130[2];
  sub_1000522B0(&v138);
  v137 = v130[3];
  sub_1000522B0(&v137);
  v136 = v130[4];
  sub_1000522B0(&v136);
  v21 = v132;
  v61 = v131[0];
  v63 = v131[1];
  v57 = v133;
  v77 = v132;
  v68 = v134;
  swift_beginAccess(v7 + 96, v123, 0, 0);
  v22 = *(_QWORD *)(v7 + 96);
  v109 = &v125;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  v67 = sub_1000FDD40(v23, (uint64_t)sub_10010306C, (uint64_t)v108, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1000FA288);
  swift_bridgeObjectRelease(v22);
  v24 = *(_QWORD *)(v7 + 80);
  v25 = swift_allocObject(&unk_1005F1900, 25, 7);
  *(_QWORD *)(v25 + 16) = v24;
  *(_BYTE *)(v25 + 24) = 1;
  v106 = sub_100103078;
  v107 = v25;
  v26 = swift_allocObject(&unk_1005F1928, 41, 7);
  *(_QWORD *)(v26 + 16) = v11;
  *(_QWORD *)(v26 + 24) = v12;
  *(_QWORD *)(v26 + 32) = v13;
  *(_BYTE *)(v26 + 40) = v79;
  v103 = sub_1001030A4;
  v104 = v26;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v24);
  sub_1000FC4EC(v72, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1000523AC, (uint64_t)v102, sub_100052D6C, (uint64_t)v105, &qword_1006463D0, &qword_1006463D8);
  v66 = v27;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v72);
  v28 = *(_QWORD *)(v7 + 88);
  v29 = swift_allocObject(&unk_1005F1950, 25, 7);
  *(_QWORD *)(v29 + 16) = v28;
  *(_BYTE *)(v29 + 24) = 1;
  v100 = sub_100105B78;
  v101 = v29;
  v30 = swift_allocObject(&unk_1005F1978, 41, 7);
  *(_QWORD *)(v30 + 16) = v11;
  *(_QWORD *)(v30 + 24) = v12;
  *(_QWORD *)(v30 + 32) = v13;
  *(_BYTE *)(v30 + 40) = v79;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v28);
  v65 = sub_1000FBDF4(v61, (void (*)(uint64_t))sub_1001030B4, v30, sub_100052D6C, (uint64_t)v99, &qword_1006463D0, &qword_1006463D8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v61);
  v31 = *(_QWORD *)(v7 + 80);
  v32 = swift_allocObject(&unk_1005F19A0, 25, 7);
  *(_QWORD *)(v32 + 16) = v31;
  *(_BYTE *)(v32 + 24) = 3;
  v97 = sub_100105B78;
  v98 = v32;
  v33 = swift_allocObject(&unk_1005F19C8, 41, 7);
  *(_QWORD *)(v33 + 16) = v11;
  *(_QWORD *)(v33 + 24) = v12;
  *(_QWORD *)(v33 + 32) = v13;
  *(_BYTE *)(v33 + 40) = v79;
  v94 = sub_1001030A4;
  v95 = v33;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v31);
  sub_1000FC4EC(v71, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1000523AC, (uint64_t)v93, sub_100052D6C, (uint64_t)v96, &qword_1006463D0, &qword_1006463D8);
  v62 = v34;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v71);
  v35 = *(_QWORD *)(v7 + 88);
  v36 = swift_allocObject(&unk_1005F19F0, 25, 7);
  *(_QWORD *)(v36 + 16) = v35;
  *(_BYTE *)(v36 + 24) = 3;
  v91 = sub_100105B78;
  v92 = v36;
  v37 = swift_allocObject(&unk_1005F1A18, 41, 7);
  *(_QWORD *)(v37 + 16) = v11;
  *(_QWORD *)(v37 + 24) = v12;
  *(_QWORD *)(v37 + 32) = v13;
  *(_BYTE *)(v37 + 40) = v79;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v35);
  v59 = sub_1000FBDF4(v57, (void (*)(uint64_t))sub_100105BE0, v37, sub_100052D6C, (uint64_t)v90, &qword_1006463D0, &qword_1006463D8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v57);
  v38 = *(_QWORD *)(v7 + 80);
  v39 = swift_allocObject(&unk_1005F1A40, 25, 7);
  *(_QWORD *)(v39 + 16) = v38;
  *(_BYTE *)(v39 + 24) = 0;
  v88 = sub_100105B78;
  v89 = v39;
  v40 = swift_allocObject(&unk_1005F1A68, 41, 7);
  *(_QWORD *)(v40 + 16) = a1;
  *(_QWORD *)(v40 + 24) = a2;
  *(_QWORD *)(v40 + 32) = v60;
  *(_BYTE *)(v40 + 40) = a4;
  v85 = sub_1001030A4;
  v86 = v40;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v38);
  sub_1000FC4EC(v75, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1000523AC, (uint64_t)v84, sub_100052D6C, (uint64_t)v87, &qword_1006463D0, &qword_1006463D8);
  v58 = v41;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v75);
  v42 = *(_QWORD *)(v7 + 88);
  v43 = swift_allocObject(&unk_1005F1A90, 25, 7);
  *(_QWORD *)(v43 + 16) = v42;
  *(_BYTE *)(v43 + 24) = 0;
  v82 = sub_100105B78;
  v83 = v43;
  v44 = swift_allocObject(&unk_1005F1AB8, 41, 7);
  *(_QWORD *)(v44 + 16) = a1;
  *(_QWORD *)(v44 + 24) = a2;
  *(_QWORD *)(v44 + 32) = v60;
  *(_BYTE *)(v44 + 40) = a4;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v42);
  v56 = sub_1000FBDF4(v63, (void (*)(uint64_t))sub_100105BE0, v44, sub_100052D6C, (uint64_t)v81, &qword_1006463D0, &qword_1006463D8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v63);
  v45 = v127;
  v117[0] = v11;
  v117[1] = v12;
  v117[2] = v13;
  v118 = v79;
  v119 = a1;
  v120 = a2;
  v121 = v60;
  v122 = a4;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v45);
  sub_1000FB3F0(v46, (uint64_t)v117, &qword_1006463D0, &qword_1006463D8, sub_1002AA398);
  v64 = v47;
  swift_bridgeObjectRelease(v71);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  v135 = v129;
  sub_1000522B0(&v135);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)&v110 = v11;
  *((_QWORD *)&v110 + 1) = v12;
  v111 = v13;
  v112 = v79;
  v113 = a1;
  v114 = a2;
  v115 = v60;
  v116 = a4;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v60);
  sub_1000FA43C(v77, &v110);
  v49 = v48;
  v76 = v48;
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease_n(v60, 2);
  swift_bridgeObjectRelease_n(a2, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  swift_bridgeObjectRelease_n(v13, 2);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  v50 = swift_allocObject(&unk_1005F1AE0, 24, 7);
  *(_QWORD *)(v50 + 16) = v67;
  v51 = swift_allocObject(&unk_1005F1B08, 32, 7);
  *(_QWORD *)(v51 + 16) = sub_1001030FC;
  *(_QWORD *)(v51 + 24) = v50;
  v52 = swift_retain();
  sub_1000F879C(v52, sub_100052D6C, v51);
  v54 = v53;
  v74 = v53;
  swift_release();
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(a6);
  v80 = sub_100476F40(v68, v77);
  swift_release();
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease_n(v58, 2);
  swift_bridgeObjectRelease_n(v66, 2);
  swift_bridgeObjectRelease_n(v62, 2);
  swift_bridgeObjectRelease_n(v64, 2);
  swift_bridgeObjectRelease_n(v56, 2);
  swift_bridgeObjectRelease_n(v65, 2);
  swift_bridgeObjectRelease_n(v59, 2);
  result = swift_bridgeObjectRelease_n(v76, 2);
  *a7 = v58;
  a7[1] = v66;
  a7[2] = v62;
  a7[3] = v64;
  a7[4] = v56;
  a7[5] = v65;
  a7[6] = v59;
  a7[7] = v76;
  a7[8] = v74;
  a7[9] = a5;
  a7[10] = a6;
  a7[11] = v80;
  return result;
}

uint64_t sub_1000E0E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  char v78;
  uint64_t v79;
  char v80[16];
  uint64_t (*v81)(uint64_t *);
  uint64_t v82;
  char v83[16];
  uint64_t (*v84)(uint64_t);
  uint64_t v85;
  char v86[16];
  uint64_t (*v87)(uint64_t *);
  uint64_t v88;
  char v89[16];
  uint64_t (*v90)(uint64_t *);
  uint64_t v91;
  char v92[16];
  uint64_t (*v93)(uint64_t);
  uint64_t v94;
  char v95[16];
  uint64_t (*v96)(uint64_t *);
  uint64_t v97;
  char v98[16];
  uint64_t (*v99)(uint64_t *);
  uint64_t v100;
  char v101[16];
  uint64_t (*v102)(uint64_t);
  uint64_t v103;
  char v104[16];
  uint64_t (*v105)(uint64_t *);
  uint64_t v106;
  char v107[16];
  uint64_t *v108;
  __int128 v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  _QWORD v116[3];
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122[24];
  char v123[24];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129[5];
  _QWORD v130[2];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;

  v11 = *(_QWORD *)(v7 + 16);
  v12 = *(_QWORD *)(v7 + 24);
  v13 = *(_QWORD *)(v7 + 32);
  v78 = *(_BYTE *)(v7 + 40);
  swift_beginAccess(v7 + 80, v123, 0, 0);
  v14 = *(_QWORD *)(v7 + 80);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain_n(v12, 2);
  swift_bridgeObjectRetain_n(v13, 2);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain_n(a3, 2);
  v15 = swift_bridgeObjectRetain(v14);
  sub_1000FC914(v15, v12, a2, &v124);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  v16 = *(_QWORD *)(v7 + 88);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v17 = swift_bridgeObjectRetain(v16);
  sub_1000FC914(v17, v12, a2, v129);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  v18 = v127;
  v72 = v127;
  v20 = v124;
  v19 = v125;
  v75 = v125;
  v73 = v124;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v61 = a3;
  sub_1000FCBC4(v129, v20, v19, v18, v11, v12, v13, v78, v130, a1, a2, a3, a4);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  v139 = v129[0];
  sub_1000522B0(&v139);
  v138 = v129[1];
  sub_1000522B0(&v138);
  v137 = v129[2];
  sub_1000522B0(&v137);
  v136 = v129[3];
  sub_1000522B0(&v136);
  v135 = v129[4];
  sub_1000522B0(&v135);
  v21 = v131;
  v62 = v130[0];
  v64 = v130[1];
  v58 = v132;
  v76 = v131;
  v69 = v133;
  swift_beginAccess(v7 + 96, v122, 0, 0);
  v22 = *(_QWORD *)(v7 + 96);
  v108 = &v124;
  swift_bridgeObjectRetain(v21);
  v23 = swift_bridgeObjectRetain(v22);
  v68 = sub_1000FDD40(v23, (uint64_t)sub_10010306C, (uint64_t)v107, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1000FDB68);
  swift_bridgeObjectRelease(v22);
  v24 = *(_QWORD *)(v7 + 80);
  v25 = swift_allocObject(&unk_1005F14C8, 25, 7);
  *(_QWORD *)(v25 + 16) = v24;
  *(_BYTE *)(v25 + 24) = 1;
  v105 = sub_100103078;
  v106 = v25;
  v26 = swift_allocObject(&unk_1005F14F0, 41, 7);
  *(_QWORD *)(v26 + 16) = v11;
  *(_QWORD *)(v26 + 24) = v12;
  *(_QWORD *)(v26 + 32) = v13;
  *(_BYTE *)(v26 + 40) = v78;
  v102 = sub_1001030A4;
  v103 = v26;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v24);
  v27 = swift_bridgeObjectRetain(v73);
  sub_1000FC4EC(v27, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1000523AC, (uint64_t)v101, sub_10005237C, (uint64_t)v104, (uint64_t *)&unk_100640E20, &qword_100646308);
  v67 = v28;
  swift_release(v25);
  swift_release(v26);
  swift_bridgeObjectRelease(v27);
  v29 = *(_QWORD *)(v7 + 88);
  v30 = swift_allocObject(&unk_1005F1518, 25, 7);
  *(_QWORD *)(v30 + 16) = v29;
  *(_BYTE *)(v30 + 24) = 1;
  v99 = sub_100105B78;
  v100 = v30;
  v31 = swift_allocObject(&unk_1005F1540, 41, 7);
  *(_QWORD *)(v31 + 16) = v11;
  *(_QWORD *)(v31 + 24) = v12;
  *(_QWORD *)(v31 + 32) = v13;
  *(_BYTE *)(v31 + 40) = v78;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v29);
  v66 = sub_1000FBDF4(v62, (void (*)(uint64_t))sub_1001030B4, v31, sub_100052D6C, (uint64_t)v98, (uint64_t *)&unk_100640E20, &qword_100646308);
  swift_release(v30);
  swift_release(v31);
  swift_bridgeObjectRelease(v62);
  v32 = *(_QWORD *)(v7 + 80);
  v33 = swift_allocObject(&unk_1005F1568, 25, 7);
  *(_QWORD *)(v33 + 16) = v32;
  *(_BYTE *)(v33 + 24) = 3;
  v96 = sub_100105B78;
  v97 = v33;
  v34 = swift_allocObject(&unk_1005F1590, 41, 7);
  *(_QWORD *)(v34 + 16) = v11;
  *(_QWORD *)(v34 + 24) = v12;
  *(_QWORD *)(v34 + 32) = v13;
  *(_BYTE *)(v34 + 40) = v78;
  v93 = sub_1001030A4;
  v94 = v34;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v32);
  v35 = swift_bridgeObjectRetain(v72);
  sub_1000FC4EC(v35, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1000523AC, (uint64_t)v92, sub_100052D6C, (uint64_t)v95, (uint64_t *)&unk_100640E20, &qword_100646308);
  v63 = v36;
  swift_release(v33);
  swift_release(v34);
  swift_bridgeObjectRelease(v35);
  v37 = *(_QWORD *)(v7 + 88);
  v38 = swift_allocObject(&unk_1005F15B8, 25, 7);
  *(_QWORD *)(v38 + 16) = v37;
  *(_BYTE *)(v38 + 24) = 3;
  v90 = sub_100105B78;
  v91 = v38;
  v39 = swift_allocObject(&unk_1005F15E0, 41, 7);
  *(_QWORD *)(v39 + 16) = v11;
  *(_QWORD *)(v39 + 24) = v12;
  *(_QWORD *)(v39 + 32) = v13;
  *(_BYTE *)(v39 + 40) = v78;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v37);
  v60 = sub_1000FBDF4(v58, (void (*)(uint64_t))sub_100105BE0, v39, sub_100052D6C, (uint64_t)v89, (uint64_t *)&unk_100640E20, &qword_100646308);
  swift_release(v38);
  swift_release(v39);
  swift_bridgeObjectRelease(v58);
  v40 = *(_QWORD *)(v7 + 80);
  v41 = swift_allocObject(&unk_1005F1608, 25, 7);
  *(_QWORD *)(v41 + 16) = v40;
  *(_BYTE *)(v41 + 24) = 0;
  v87 = sub_100105B78;
  v88 = v41;
  v42 = swift_allocObject(&unk_1005F1630, 41, 7);
  *(_QWORD *)(v42 + 16) = a1;
  *(_QWORD *)(v42 + 24) = a2;
  *(_QWORD *)(v42 + 32) = v61;
  *(_BYTE *)(v42 + 40) = a4;
  v84 = sub_1001030A4;
  v85 = v42;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v40);
  v43 = swift_bridgeObjectRetain(v75);
  sub_1000FC4EC(v43, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1000523AC, (uint64_t)v83, sub_100052D6C, (uint64_t)v86, (uint64_t *)&unk_100640E20, &qword_100646308);
  v59 = v44;
  swift_release(v41);
  swift_release(v42);
  swift_bridgeObjectRelease(v43);
  v45 = *(_QWORD *)(v7 + 88);
  v46 = swift_allocObject(&unk_1005F1658, 25, 7);
  *(_QWORD *)(v46 + 16) = v45;
  *(_BYTE *)(v46 + 24) = 0;
  v81 = sub_100105B78;
  v82 = v46;
  v47 = swift_allocObject(&unk_1005F1680, 41, 7);
  *(_QWORD *)(v47 + 16) = a1;
  *(_QWORD *)(v47 + 24) = a2;
  *(_QWORD *)(v47 + 32) = v61;
  *(_BYTE *)(v47 + 40) = a4;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v45);
  v57 = sub_1000FBDF4(v64, (void (*)(uint64_t))sub_100105BE0, v47, sub_100052D6C, (uint64_t)v80, (uint64_t *)&unk_100640E20, &qword_100646308);
  swift_release(v46);
  swift_release(v47);
  swift_bridgeObjectRelease(v64);
  v48 = v126;
  v116[0] = v11;
  v116[1] = v12;
  v116[2] = v13;
  v117 = v78;
  v118 = a1;
  v119 = a2;
  v120 = v61;
  v121 = a4;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v61);
  v49 = swift_bridgeObjectRetain(v48);
  sub_1000FB3F0(v49, (uint64_t)v116, (uint64_t *)&unk_100640E20, &qword_100646308, sub_1002AA398);
  v65 = v50;
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  v134 = v128;
  sub_1000522B0(&v134);
  swift_bridgeObjectRelease(v48);
  *(_QWORD *)&v109 = v11;
  *((_QWORD *)&v109 + 1) = v12;
  v110 = v13;
  v111 = v78;
  v112 = a1;
  v113 = a2;
  v114 = v61;
  v115 = a4;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v61);
  v51 = sub_1000FB834(v76, &v109);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease_n(v61, 2);
  swift_bridgeObjectRelease_n(a2, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  swift_bridgeObjectRelease_n(v13, 2);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  v52 = swift_allocObject(&unk_1005F16A8, 24, 7);
  *(_QWORD *)(v52 + 16) = v68;
  v53 = swift_allocObject(&unk_1005F16D0, 32, 7);
  *(_QWORD *)(v53 + 16) = sub_1001030FC;
  *(_QWORD *)(v53 + 24) = v52;
  v54 = swift_retain(v68);
  v55 = sub_1000F8B34(v54, sub_100052D6C, v53);
  swift_release(v68);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(a6);
  v79 = sub_100476F5C(v69, v76);
  swift_release(v53);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease_n(v59, 2);
  swift_bridgeObjectRelease_n(v67, 2);
  swift_bridgeObjectRelease_n(v63, 2);
  swift_bridgeObjectRelease_n(v65, 2);
  swift_bridgeObjectRelease_n(v57, 2);
  swift_bridgeObjectRelease_n(v66, 2);
  swift_bridgeObjectRelease_n(v60, 2);
  result = swift_bridgeObjectRelease_n(v51, 2);
  *a7 = v59;
  a7[1] = v67;
  a7[2] = v63;
  a7[3] = v65;
  a7[4] = v57;
  a7[5] = v66;
  a7[6] = v60;
  a7[7] = v51;
  a7[8] = v55;
  a7[9] = a5;
  a7[10] = a6;
  a7[11] = v79;
  return result;
}

uint64_t sub_1000E19D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char a4@<W4>, uint64_t (*a5)(void)@<X5>, uint64_t (*a6)(uint64_t, uint64_t)@<X6>, void (*a7)(uint64_t, uint64_t *)@<X7>, uint64_t a8@<X8>)
{
  uint64_t result;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char v43[32];

  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_40;
  result = a5();
  if ((v15 & 1) == 0)
    goto LABEL_40;
  v16 = *(_QWORD *)(a3 + 56);
  v17 = *(_QWORD *)(v16 + 8 * result);
  if ((a4 & 1) == 0)
  {
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_51;
    if (v17 >= *(_QWORD *)(a2 + 16))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      return result;
    }
    v31 = *(_QWORD *)(a2 + 16 * v17 + 40);
    swift_retain(a1);
    v32 = swift_bridgeObjectRetain(v31);
    v33 = a6(v32, a1);
    v35 = v34;
    swift_bridgeObjectRelease(v31);
    swift_release(a1);
    if ((v35 & 1) == 0)
    {
      IndexPath.init(row:section:)(v33, v17);
      v36 = type metadata accessor for IndexPath(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a8, 0, 1, v36);
    }
LABEL_40:
    v37 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a8, 1, 1, v37);
  }
  v40 = *(_QWORD *)(v16 + 8 * result);
  Strong = swift_weakLoadStrong(a1 + 56);
  result = swift_retain(a1);
  v19 = 0;
  if (Strong)
  {
    v20 = a1;
    do
    {
      v21 = __OFADD__(v19++, 1);
      if (v21)
      {
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      a1 = Strong;
      swift_beginAccess(Strong + 64, v43, 0, 0);
      v22 = *(_QWORD *)(Strong + 64);
      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0)
          v30 = v22;
        else
          v30 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_retain(a1);
        swift_bridgeObjectRetain(v22);
        result = _CocoaArrayWrapper.endIndex.getter(v30);
        v23 = result;
        if (!result)
        {
LABEL_6:
          swift_release(v20);
          swift_bridgeObjectRelease(v22);
          goto LABEL_7;
        }
      }
      else
      {
        v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain(a1);
        result = swift_bridgeObjectRetain(v22);
        if (!v23)
          goto LABEL_6;
      }
      if ((v22 & 0xC000000000000001) != 0)
      {
        result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
        v24 = result;
        if (result != v20)
          goto LABEL_14;
      }
      else
      {
        if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_50;
        v24 = *(_QWORD *)(v22 + 32);
        result = swift_retain(v24);
        if (v24 != v20)
        {
LABEL_14:
          v25 = 0;
          v26 = v23 - 1;
          while (1)
          {
            v27 = v19 + 1;
            if (__OFADD__(v19, 1))
              break;
            if ((*(_BYTE *)(v24 + 48) & 1) != 0)
            {
              v42 = 0;
              a7(v24, &v42);
              v28 = v42;
              *(_QWORD *)(v24 + 40) = v42;
              *(_BYTE *)(v24 + 48) = 0;
            }
            else
            {
              v28 = *(_QWORD *)(v24 + 40);
            }
            result = swift_release(v24);
            v21 = __OFADD__(v27, v28);
            v19 = v27 + v28;
            if (v21)
              goto LABEL_46;
            if (v26 == v25)
              goto LABEL_6;
            v29 = v25 + 1;
            if ((v22 & 0xC000000000000001) != 0)
            {
              result = specialized _ArrayBuffer._getElementSlowPath(_:)(v25 + 1, v22);
              v24 = result;
              if (__OFADD__(v29, 1))
                goto LABEL_47;
            }
            else
            {
              if (v29 >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_48;
              v24 = *(_QWORD *)(v22 + 8 * v25 + 40);
              result = swift_retain(v24);
              if (__OFADD__(v29, 1))
                goto LABEL_47;
            }
            ++v25;
            if (v24 == v20)
              goto LABEL_28;
          }
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
      }
LABEL_28:
      swift_bridgeObjectRelease(v22);
      swift_release_n(v20, 2);
LABEL_7:
      Strong = swift_weakLoadStrong(a1 + 56);
      result = swift_release(a1);
      v20 = a1;
    }
    while (Strong);
  }
  swift_release(a1);
  result = v19 - 1;
  if (__OFSUB__(v19, 1))
    goto LABEL_53;
  if (result < 0)
  {
    v39 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a8, 1, 1, v39);
  }
  else
  {
    IndexPath.init(row:section:)(result, v40);
    v38 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a8, 0, 1, v38);
  }
}

uint64_t sub_1000E1D70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, void (*a5)(uint64_t, uint64_t *)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  unint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t (*v47)(uint64_t);
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  char *v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  void (*v82)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  char *v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  char *v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t *);
  char v99[24];
  _QWORD v100[4];
  uint64_t v101;

  v98 = a5;
  v93 = a4;
  v8 = v6;
  v11 = *a2;
  v12 = a2[2];
  v13 = *((unsigned __int8 *)a2 + 24);
  v89 = a2[4];
  v91 = a2[6];
  v90 = *((unsigned __int8 *)a2 + 56);
  v14 = sub_10002A750(&qword_100646950);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v96 = (char *)&v80 - v18;
  v19 = type metadata accessor for IndexPath(0);
  v95 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v88 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v92 = (char *)&v80 - v22;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_42;
  result = a3(a1);
  if ((v24 & 1) == 0)
    goto LABEL_42;
  v87 = a3;
  v25 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * result);
  if (v13)
  {
    v82 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 56) + 8 * result);
    v84 = v17;
    v85 = v19;
    v86 = a6;
    v83 = v6;
    Strong = swift_weakLoadStrong(a1 + 56);
    swift_retain(a1);
    v27 = 0;
    if (Strong)
    {
      a6 = a1;
      v94 = a1;
      while (1)
      {
        v28 = __OFADD__(v27++, 1);
        if (v28)
          goto LABEL_107;
        v29 = Strong;
        swift_beginAccess(Strong + 64, v99, 0, 0);
        v30 = *(_QWORD *)(Strong + 64);
        if ((unint64_t)v30 >> 62)
        {
          if (v30 < 0)
            v38 = *(_QWORD *)(Strong + 64);
          else
            v38 = v30 & 0xFFFFFFFFFFFFFF8;
          swift_retain(Strong);
          swift_bridgeObjectRetain(v30);
          v31 = _CocoaArrayWrapper.endIndex.getter(v38);
          if (!v31)
          {
LABEL_6:
            swift_release(a6);
            swift_bridgeObjectRelease(v30);
            goto LABEL_7;
          }
        }
        else
        {
          v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_retain(Strong);
          swift_bridgeObjectRetain(v30);
          if (!v31)
            goto LABEL_6;
        }
        if ((v30 & 0xC000000000000001) != 0)
        {
          v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v30);
          if (v32 != a6)
            goto LABEL_14;
        }
        else
        {
          if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_108;
          v32 = *(_QWORD *)(v30 + 32);
          swift_retain(v32);
          if (v32 != a6)
          {
LABEL_14:
            v33 = 0;
            v97 = v30 & 0xFFFFFFFFFFFFFF8;
            v34 = v31 - 1;
            while (1)
            {
              v35 = v27 + 1;
              if (__OFADD__(v27, 1))
                break;
              if ((*(_BYTE *)(v32 + 48) & 1) != 0)
              {
                v100[0] = 0;
                v98(v32, v100);
                v36 = v100[0];
                *(_QWORD *)(v32 + 40) = v100[0];
                *(_BYTE *)(v32 + 48) = 0;
              }
              else
              {
                v36 = *(_QWORD *)(v32 + 40);
              }
              swift_release(v32);
              v28 = __OFADD__(v35, v36);
              v27 = v35 + v36;
              if (v28)
                goto LABEL_104;
              if (v34 == v33)
              {
                swift_release(a6);
                swift_bridgeObjectRelease(v30);
                goto LABEL_36;
              }
              v37 = v33 + 1;
              if ((v30 & 0xC000000000000001) != 0)
              {
                v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33 + 1, v30);
                if (__OFADD__(v37, 1))
                  goto LABEL_105;
              }
              else
              {
                if (v37 >= *(_QWORD *)(v97 + 16))
                  goto LABEL_106;
                v32 = *(_QWORD *)(v30 + 8 * v33 + 40);
                swift_retain(v32);
                if (__OFADD__(v37, 1))
                  goto LABEL_105;
              }
              ++v33;
              if (v32 == a6)
                goto LABEL_35;
            }
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
        }
LABEL_35:
        swift_bridgeObjectRelease(v30);
        swift_release_n(a6, 2);
LABEL_36:
        a1 = v94;
LABEL_7:
        Strong = swift_weakLoadStrong(v29 + 56);
        swift_release(v29);
        a6 = v29;
        if (!Strong)
          goto LABEL_49;
      }
    }
    v29 = a1;
LABEL_49:
    swift_release(v29);
    result = v27 - 1;
    if (!__OFSUB__(v27, 1))
    {
      v8 = v83;
      v19 = v85;
      a6 = v86;
      v17 = v84;
      v45 = v95;
      v47 = v87;
      if ((result & 0x8000000000000000) == 0)
      {
        v44 = v96;
        IndexPath.init(row:section:)(result, v82);
        v82 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56);
        v82(v44, 0, 1, v19);
        v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
        if (v81(v44, 1, v19) == 1)
          goto LABEL_52;
        goto LABEL_53;
      }
      v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56);
LABEL_43:
      v17 = v96;
      v48(v96, 1, 1, v19);
      goto LABEL_44;
    }
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  if ((v25 & 0x8000000000000000) != 0)
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  if (v25 >= *(_QWORD *)(v11 + 16))
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v39 = *(_QWORD *)(v11 + 16 * v25 + 40);
  swift_retain(a1);
  v40 = swift_bridgeObjectRetain(v39);
  v41 = v93(v40, a1);
  v43 = v42;
  swift_bridgeObjectRelease(v39);
  swift_release(a1);
  if ((v43 & 1) != 0)
  {
LABEL_42:
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56);
    goto LABEL_43;
  }
  v44 = v96;
  IndexPath.init(row:section:)(v41, v25);
  v45 = v95;
  v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56);
  v46(v44, 0, 1, v19);
  v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v81(v44, 1, v19) == 1)
  {
LABEL_52:
    v17 = v44;
    goto LABEL_44;
  }
  v82 = v46;
  v47 = v87;
LABEL_53:
  v55 = v96;
  v96 = *(char **)(v45 + 32);
  ((void (*)(char *, char *, uint64_t))v96)(v92, v55, v19);
  v56 = v91;
  if (!*(_QWORD *)(v91 + 16) || (result = v47(a1), (v57 & 1) == 0))
  {
LABEL_95:
    v76 = v82;
    goto LABEL_96;
  }
  v58 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * result);
  v91 = v58;
  if (!v90)
  {
    if ((v58 & 0x8000000000000000) == 0)
    {
      if (v58 < *(_QWORD *)(v89 + 16))
      {
        v71 = *(_QWORD *)(v89 + 16 * v58 + 40);
        swift_retain(a1);
        v72 = swift_bridgeObjectRetain(v71);
        v73 = v93(v72, a1);
        v75 = v74;
        swift_bridgeObjectRelease(v71);
        swift_release(a1);
        if ((v75 & 1) == 0)
        {
          IndexPath.init(row:section:)(v73, v91);
          v82(v17, 0, 1, v19);
          goto LABEL_101;
        }
        goto LABEL_95;
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  v59 = swift_weakLoadStrong(a1 + 56);
  result = swift_retain(a1);
  v60 = 0;
  if (!v59)
  {
LABEL_98:
    swift_release(a1);
    result = v60 - 1;
    if (!__OFSUB__(v60, 1))
    {
      v45 = v95;
      v76 = v82;
      if ((result & 0x8000000000000000) == 0)
      {
        IndexPath.init(row:section:)(result, v91);
        v76(v17, 0, 1, v19);
LABEL_101:
        if (v81(v17, 1, v19) != 1)
        {
          v77 = v88;
          v78 = (void (*)(uint64_t, char *, uint64_t))v96;
          ((void (*)(char *, char *, uint64_t))v96)(v88, v17, v19);
          v78(a6, v92, v19);
          v79 = sub_10002A750(&qword_10063F658);
          v78(a6 + *(int *)(v79 + 36), v77, v19);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(a6, 0, 1, v79);
        }
        goto LABEL_97;
      }
LABEL_96:
      v76(v17, 1, 1, v19);
LABEL_97:
      (*(void (**)(char *, uint64_t))(v45 + 8))(v92, v19);
LABEL_44:
      sub_1000073A0((uint64_t)v17, &qword_100646950);
      if (qword_10063D2C0 != -1)
        goto LABEL_112;
      goto LABEL_45;
    }
LABEL_121:
    __break(1u);
    return result;
  }
  v61 = a1;
  v85 = v19;
  v86 = a6;
  v84 = v17;
  while (1)
  {
    v28 = __OFADD__(v60++, 1);
    if (v28)
    {
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    a1 = v59;
    swift_beginAccess(v59 + 64, v100, 0, 0);
    v62 = *(_QWORD *)(v59 + 64);
    if ((unint64_t)v62 >> 62)
      break;
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain(a1);
    result = swift_bridgeObjectRetain(v62);
    if (v63)
      goto LABEL_63;
LABEL_58:
    swift_release(v61);
    swift_bridgeObjectRelease(v62);
LABEL_59:
    v59 = swift_weakLoadStrong(a1 + 56);
    result = swift_release(a1);
    v61 = a1;
    if (!v59)
      goto LABEL_98;
  }
  if (v62 < 0)
    v70 = v62;
  else
    v70 = v62 & 0xFFFFFFFFFFFFFF8;
  swift_retain(a1);
  swift_bridgeObjectRetain(v62);
  result = _CocoaArrayWrapper.endIndex.getter(v70);
  v63 = result;
  if (!result)
    goto LABEL_58;
LABEL_63:
  v94 = a1;
  if ((v62 & 0xC000000000000001) != 0)
  {
    v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v62);
  }
  else
  {
    if (!*(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_118;
    v64 = *(_QWORD *)(v62 + 32);
    swift_retain(v64);
  }
  v65 = v8;
  if (v64 == v61)
  {
LABEL_81:
    swift_bridgeObjectRelease(v62);
    swift_release_n(v61, 2);
LABEL_83:
    v8 = v65;
    v19 = v85;
    a6 = v86;
    v17 = v84;
    a1 = v94;
    goto LABEL_59;
  }
  v66 = 0;
  v97 = v62 & 0xFFFFFFFFFFFFFF8;
  a6 = v63 - 1;
  while (1)
  {
    v28 = __OFADD__(v60, 1);
    v67 = v60 + 1;
    if (v28)
      break;
    if ((*(_BYTE *)(v64 + 48) & 1) != 0)
    {
      v101 = 0;
      v98(v64, &v101);
      v68 = v101;
      *(_QWORD *)(v64 + 40) = v101;
      *(_BYTE *)(v64 + 48) = 0;
    }
    else
    {
      v68 = *(_QWORD *)(v64 + 40);
    }
    result = swift_release(v64);
    v28 = __OFADD__(v67, v68);
    v60 = v67 + v68;
    if (v28)
      goto LABEL_110;
    if (a6 == v66)
    {
      swift_release(v61);
      swift_bridgeObjectRelease(v62);
      goto LABEL_83;
    }
    v69 = v66 + 1;
    if ((v62 & 0xC000000000000001) != 0)
    {
      v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(v66 + 1, v62);
      if (__OFADD__(v69, 1))
        goto LABEL_111;
    }
    else
    {
      if (v69 >= *(_QWORD *)(v97 + 16))
      {
        __break(1u);
        goto LABEL_114;
      }
      v64 = *(_QWORD *)(v62 + 8 * v66 + 40);
      swift_retain(v64);
      if (__OFADD__(v69, 1))
        goto LABEL_111;
    }
    ++v66;
    if (v64 == v61)
      goto LABEL_81;
  }
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  swift_once(&qword_10063D2C0, sub_10004E478);
LABEL_45:
  v49 = type metadata accessor for Logger(0);
  v50 = sub_100012DC4(v49, (uint64_t)qword_10063F5B0);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.fault.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Cannot lookup from, to for moved cell", v53, 2u);
    swift_slowDealloc(v53, -1, -1);
  }

  v54 = sub_10002A750(&qword_10063F658);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(a6, 1, 1, v54);
}

BOOL sub_1000E2754()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *v0;
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    if (__CocoaSet.count.getter(v2))
      return 0;
  }
  else if (*(_QWORD *)(v1 + 16))
  {
    return 0;
  }
  v3 = v0[1];
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = v0[1];
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    if (__CocoaSet.count.getter(v4))
      return 0;
  }
  else if (*(_QWORD *)(v3 + 16))
  {
    return 0;
  }
  v5 = v0[2];
  if ((v5 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v6 = v0[2];
    else
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
    if (__CocoaSet.count.getter(v6))
      return 0;
  }
  else if (*(_QWORD *)(v5 + 16))
  {
    return 0;
  }
  v7 = v0[3];
  if ((v7 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_29;
    return 0;
  }
  if (v7 < 0)
    v8 = v0[3];
  else
    v8 = v7 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v8))
    return 0;
LABEL_29:
  v10 = v0[4];
  if ((v10 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = v0[4];
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    v12 = __CocoaSet.count.getter(v11);
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 16);
  }
  return v12 == 0;
}

uint64_t sub_1000E2848@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;

  v26 = a5;
  v27 = a2;
  v28 = a1;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v10);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  v25 = a3;
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  return result;
}

uint64_t sub_1000E29E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t *, uint64_t))
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[6];
  if (!*(_QWORD *)(v6 + 16))
    return 0;
  v18 = *a2;
  v11 = a2[2];
  v12 = a2[4];
  result = a5();
  if ((v14 & 1) == 0)
    return 0;
  v15 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v15 >= *(_QWORD *)(v12 + 16))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)(v12 + 16 * v15 + 32) != a3)
    return 0;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_12;
  result = ((uint64_t (*)(uint64_t))a5)(a1);
  if ((v16 & 1) == 0)
    goto LABEL_12;
  v17 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * result);
  if ((v17 & 0x8000000000000000) != 0)
    goto LABEL_15;
  if (v17 < *(_QWORD *)(v18 + 16))
  {
    if (*(_QWORD *)(v18 + 16 * v17 + 32) == a3)
      return 0;
LABEL_12:
    swift_retain(a1);
    a6(&v19, a1);
    swift_release(v19);
    return 1;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1000E2B08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  char v8;
  unint64_t v9;

  v4 = a2[2];
  if (!*(_QWORD *)(v4 + 16))
    return 0;
  v6 = *a2;
  result = a4();
  if ((v8 & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < *(_QWORD *)(v6 + 16))
  {
    return *(_QWORD *)(v6 + 16 * v9 + 32) == a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E2B84(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t *, uint64_t))
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[6];
  if (!*(_QWORD *)(v6 + 16))
    return 0;
  v18 = *a2;
  v11 = a2[2];
  v12 = a2[4];
  result = a5();
  if ((v14 & 1) == 0)
    return 0;
  v15 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * result);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v15 >= *(_QWORD *)(v12 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(_QWORD *)(v12 + 16 * v15 + 32) != a3)
    return 0;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_12;
  result = ((uint64_t (*)(uint64_t))a5)(a1);
  if ((v16 & 1) == 0)
    goto LABEL_12;
  v17 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * result);
  if ((v17 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (v17 < *(_QWORD *)(v18 + 16))
  {
    if (*(_QWORD *)(v18 + 16 * v17 + 32) == a3)
      return 1;
LABEL_12:
    swift_retain(a1);
    a6(&v19, a1);
    swift_release(v19);
    return 1;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1000E2CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  char v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(v4 + 16))
    return 0;
  v6 = *(_QWORD *)(a2 + 32);
  result = a4();
  if ((v8 & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < *(_QWORD *)(v6 + 16))
  {
    return *(_QWORD *)(v6 + 16 * v9 + 32) == a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E2D28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char v6;

  if ((sub_10037B2B0(a1, *a4) & 1) != 0 || (sub_10037B2B0(a1, a4[1]) & 1) != 0)
    v6 = 0;
  else
    v6 = sub_10037B2B0(a1, a4[3]) ^ 1;
  return v6 & 1;
}

uint64_t sub_1000E2D80(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  if (*(_QWORD *)(a2 + 16)
    && (v6 = a4(), (v7 & 1) != 0)
    && (v8 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v6), *(_QWORD *)(v8 + 16))
    && (v9 = sub_1002AA3B8(a3), (v10 & 1) != 0))
  {
    return *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
  }
  else
  {
    return 100;
  }
}

uint64_t sub_1000E2DE0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t inserted;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char v33;
  char v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char v51;
  uint64_t TupleTypeMetadata2;
  uint64_t v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;

  v68 = a1;
  v69 = a3;
  v66 = a4;
  v67 = a2 & 1;
  v5 = swift_isaMask & *v4;
  v6 = *(_QWORD *)(v5 + 0x50);
  v7 = type metadata accessor for Optional(0, v6);
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v62 - v11;
  inserted = type metadata accessor for TTRITreeViewTableAdapter.InsertDestination(0, v6, *(_QWORD *)(v5 + 88), v13);
  __chkstk_darwin(inserted);
  v16 = (char *)&v62 - v15;
  v17 = v6;
  v18 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v62 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v62 - v26;
  __chkstk_darwin(v28);
  v63 = (char *)&v62 - v29;
  sub_1000F20EC(v68, v67, v69, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, inserted);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v31 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
      v31(v21, v16, v17);
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v9, v21, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
      v32 = sub_1000E8E10((uint64_t)v9);
      v34 = v33;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v9, v65);
      if ((v34 & 1) == 0)
      {
        v35 = v63;
        v36 = v63;
        v37 = v21;
LABEL_14:
        v31(v36, v37, v17);
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v17, &type metadata for Int, "parent index ", 0);
        v53 = *(int *)(TupleTypeMetadata2 + 48);
        v54 = v66;
        v31(v66, v35, v17);
        *(_QWORD *)&v54[v53] = v32;
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v54, 0, 1, TupleTypeMetadata2);
      }
      if (qword_10063D3C8 != -1)
        swift_once(&qword_10063D3C8, sub_1000E35C8);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_100012DC4(v41, (uint64_t)qword_100645EC0);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.fault.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Missing parent child count", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    }
  }
  else
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v31(v27, v16, v17);
    sub_1000E85FC((uint64_t)v27, v38, v39, v40, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17) == 1)
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v65);
    }
    else
    {
      v31(v24, v12, v17);
      v49 = sub_1000E8744((uint64_t)v27, v46, v47, v48);
      v50 = *(void (**)(char *, uint64_t))(v18 + 8);
      if ((v51 & 1) == 0)
      {
        v32 = v49;
        v50(v27, v17);
        v35 = v63;
        v36 = v63;
        v37 = v24;
        goto LABEL_14;
      }
      v50(v24, v17);
    }
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v56 = type metadata accessor for Logger(0);
    v57 = sub_100012DC4(v56, (uint64_t)qword_100645EC0);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.fault.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Missing parent/childIndex", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
  }
  v61 = swift_getTupleTypeMetadata2(0, v17, &type metadata for Int, "parent index ", 0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v66, 1, 1, v61);
}

uint64_t sub_1000E32B0()
{
  uint64_t v0;

  return swift_unknownObjectUnownedLoadStrong(v0 + qword_100645EF8);
}

void sub_1000E32C0(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[40];

  if (a1 == a2)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)v2 + 16 * a1 + 40);
      swift_retain();
      swift_bridgeObjectRetain(v4);
      return;
    }
    __break(1u);
    goto LABEL_14;
  }
  v6 = sub_1002FE3E0(a1);
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a2 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = v6;
  v9 = v7;
  swift_retain();
  swift_bridgeObjectRetain(v9);
  sub_1004397B4(a2, a2, v8, v9);
  swift_bridgeObjectRelease(v9);
  swift_release();
  if ((uint64_t)a1 < a2)
  {
    v10 = a1 + 1;
    v11 = -1;
    v12 = a2;
LABEL_11:
    sub_100069B18(v10, v12, v11);
    v13 = sub_10002A750((uint64_t *)&unk_1006415A0);
    inited = swift_initStackObject(v13, v17);
    *(_OWORD *)(inited + 16) = xmmword_100521140;
    *(_QWORD *)(inited + 32) = v8;
    v16 = inited;
    specialized Array._endMutation()(inited);
    swift_retain();
    sub_10006A14C(v16, a2);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRetain(v9);
    sub_10006A14C(v15, a2);
    swift_bridgeObjectRelease(v9);
    return;
  }
  v12 = a1 - 1;
  if ((uint64_t)(a1 - 1) >= a2)
  {
    v11 = 1;
    v10 = a2;
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
}

unint64_t sub_1000E344C(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[40];

  v3 = result;
  if (result == a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
    {
      v4 = *(_QWORD *)v2 + 16 * result;
      v5 = *(_QWORD *)(v4 + 32);
      v6 = *(_QWORD *)(v4 + 40);
      swift_retain(v5);
      swift_bridgeObjectRetain(v6);
      return v5;
    }
    __break(1u);
    goto LABEL_15;
  }
  result = sub_1002FE5B8(result);
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = result;
  v9 = v8;
  swift_retain(result);
  swift_bridgeObjectRetain(v9);
  result = (unint64_t)sub_100438918(a2, a2, v5, v9);
  if (v3 < a2)
  {
    v10 = v3 + 1;
    v11 = -1;
    v12 = a2;
LABEL_11:
    sub_100069E20(v10, v12, v11);
    v13 = sub_10002A750((uint64_t *)&unk_1006415A0);
    inited = swift_initStackObject(v13, v17);
    *(_OWORD *)(inited + 16) = xmmword_100521140;
    *(_QWORD *)(inited + 32) = v5;
    v16 = inited;
    specialized Array._endMutation()(inited);
    swift_retain(v5);
    sub_10006A734(v16, a2);
    swift_bridgeObjectRelease(v16);
    v15 = swift_bridgeObjectRetain(v9);
    sub_10006A734(v15, a2);
    swift_bridgeObjectRelease(v9);
    return v5;
  }
  v12 = v3 - 1;
  if (v3 - 1 >= a2)
  {
    v11 = 1;
    v10 = a2;
    goto LABEL_11;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1000E35C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_100645EC0);
  v1 = sub_100012DC4(v0, (uint64_t)qword_100645EC0);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000E3658(uint64_t a1, _QWORD *a2, uint64_t (*a3)(void *), SEL *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  id v13;

  v7 = v4;
  v9 = *(_QWORD *)(v7 + *a2);
  *(_QWORD *)(v7 + *a2) = a1;
  swift_retain(a1);
  swift_release(v9);
  v10 = *(void **)(v7 + qword_100645F00);
  if (a1)
  {
    swift_retain(a1);
    v11 = a3(v10);
    swift_release(a1);
    if ((v11 & 1) != 0)
      v12 = v7;
    else
      v12 = 0;
  }
  else
  {
    v13 = v10;
    v12 = 0;
  }
  objc_msgSend(v10, *a4, v12);

  return swift_release(a1);
}

id sub_1000E36FC(uint64_t *a1, _QWORD *a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a1;
  v6 = *(_QWORD *)(v3 + *a1);
  if (v6)
  {
    swift_unknownObjectWeakAssign(v6 + *a2, v3);
    v7 = *(_QWORD *)(v3 + v5);
  }
  else
  {
    v7 = 0;
  }
  return objc_msgSend(*(id *)(v3 + qword_100645F00), *a3, v7);
}

double sub_1000E3758(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  _QWORD v29[7];
  char v30[24];
  char v31[16];
  void (*v32)();
  _QWORD *v33;

  v5 = swift_isaMask & *v2;
  v6 = (_QWORD *)((char *)v2 + qword_100645F48);
  swift_beginAccess((char *)v2 + qword_100645F48, v30, 1, 0);
  v8 = *v6;
  v7 = v6[1];
  v9 = *(_QWORD *)(v5 + 80);
  v10 = *(_QWORD *)(v5 + 88);
  swift_bridgeObjectRetain(*v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(a1);
  v12 = sub_100370BE4(v11, v9, v10);
  v14 = *v6;
  v13 = v6[1];
  *v6 = v12;
  v6[1] = v15;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  v16 = v6[1];
  v6[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v16);
  if ((a2 & 1) != 0)
  {
    *((_BYTE *)v2 + qword_100645F58) = 0;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, v9, &unk_1005987EC, &unk_1005987FC);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v9, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
    v19 = swift_bridgeObjectRetain(a1);
    v20 = Set.subtracting(_:)(v8, a1, AssociatedTypeWitness, AssociatedConformanceWitness, v19);
    v22 = Set.subtracting(_:)(v7, v20, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
    v24 = Set.subtracting(_:)(a1, v8, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
    v26 = Set.subtracting(_:)(v7, v24, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
    swift_bridgeObjectRelease(v7);
    __chkstk_darwin(v27);
    v29[2] = v22;
    v29[3] = v2;
    v29[4] = v26;
    v32 = sub_1001034B4;
    v33 = v29;
    sub_1000E4554((void (*)(uint64_t *))sub_10002D4F8, (uint64_t)v31, 0, 0, 0, 0);
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v26).n128_u64[0];
    *((_BYTE *)v2 + qword_100645F58) = 1;
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  }
  return result;
}

double sub_1000E3978()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  double result;

  v1 = v0;
  v2 = swift_isaMask & *v0;
  v3 = swift_retain();
  TTRAnyTreeViewCollapsedStatesPersisting.collapsedTreeViewItemIDsChangePublisher.getter(v3);
  swift_release();
  v4 = swift_allocObject(&unk_1005F1428, 24, 7);
  swift_unknownObjectWeakInit(v4 + 16, v1);
  v5 = (_QWORD *)swift_allocObject(&unk_1005F1860, 40, 7);
  v6 = *(_QWORD *)(v2 + 80);
  v5[2] = v6;
  v7 = *(_QWORD *)(v2 + 88);
  v5[3] = v7;
  v5[4] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v6, &unk_1005987EC, &unk_1005987FC);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v6, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
  v10 = type metadata accessor for Set(255, AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = type metadata accessor for AnyPublisher(0, v10, &type metadata for Never, &protocol witness table for Never);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v11);
  v13 = Publisher.sink(receiveCompletion:receiveValue:)(TTRReminderIDsWithMatchingHashtagsProvider.init(reminders:), 0, sub_1001034A8, v5, v11, WitnessTable);
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v1 + qword_100645F60) = v13;
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

id sub_1000E3B08(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_1000E3B48(a1, a2);
}

id sub_1000E3B48(void *a1, void *a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  char *v14;
  uint64_t WitnessTable;
  char *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  objc_super v26;
  uint64_t v27;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v7 = swift_isaMask & *(_QWORD *)v2;
  *(_QWORD *)&v3[qword_100645ED8] = 0;
  *(_QWORD *)&v3[qword_100645EE0] = 0;
  swift_unknownObjectWeakInit(&v3[qword_100645EE8], 0);
  v8 = qword_100645EF0;
  v10 = *(_QWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, v10, &unk_1005987EC, &unk_1005987FC);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v10, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
  type metadata accessor for TTRAnyTreeViewCollapsedStatesPersisting(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v13 = type metadata accessor for TTRTreeViewCollapsedStatesInMemoryPersistence(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v14 = v3;
  v27 = TTRTreeViewCollapsedStatesInMemoryPersistence.__allocating_init()();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TTRTreeViewCollapsedStatesInMemoryPersistence<A>, v13);
  *(_QWORD *)&v3[v8] = TTRAnyTreeViewCollapsedStatesPersisting.__allocating_init<A>(base:)(&v27, v13, WitnessTable);
  *(_QWORD *)&v14[qword_100645F10] = 0;
  *(_QWORD *)&v14[qword_100645F18] = 0;
  *(_QWORD *)&v14[qword_100645F20] = 0;
  *(_QWORD *)&v14[qword_100645F28] = 0;
  v16 = &v14[qword_100645F30];
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  v16[24] = 0;
  v14[qword_100645F38] = 0;
  *(_QWORD *)&v14[qword_100645F40] = 0;
  v17 = (void **)&v14[qword_100645F48];
  *v17 = sub_100370B1C(v10, v9);
  v17[1] = v18;
  v19 = qword_100645F50;
  *(_QWORD *)&v14[v19] = sub_10032BA80(v10, v9);
  v14[qword_100645F58] = 1;
  *(_QWORD *)&v14[qword_100645F60] = 0;
  v20 = qword_100645F68;
  v21 = type metadata accessor for TTRListContentsPrefetchExtender(0);
  swift_allocObject(v21, 32, 7);
  *(_QWORD *)&v14[v20] = TTRListContentsPrefetchExtender.init(prefetchCountNeeded:)(40);
  swift_unknownObjectUnownedInit(&v14[qword_100645EF8], a1);
  *(_QWORD *)&v14[qword_100645F00] = a2;
  v22 = &v14[qword_100645F08];
  *((_QWORD *)v22 + 3) = sub_100005ED8(0, (unint64_t *)&qword_100646410, UITableView_ptr);
  *((_QWORD *)v22 + 4) = &off_10060BD58;
  *(_QWORD *)v22 = a2;
  v23 = a2;

  v26.receiver = v14;
  v26.super_class = ObjectType;
  v24 = objc_msgSendSuper2(&v26, "init");
  sub_1000E3978();

  return v24;
}

id sub_1000E3E04()
{
  uint64_t v0;

  sub_1000F8ECC(0);
  *(_QWORD *)(v0 + qword_100645F18) = 0;
  swift_release();
  sub_1000E3658(0, &qword_100645F20, (uint64_t (*)(void *))sub_10002F988, (SEL *)&selRef_setPrefetchDataSource_);
  sub_1000E3658(0, &qword_100645F28, (uint64_t (*)(void *))sub_100022FD4, (SEL *)&selRef_setDelegate_);
  sub_1000F8F8C(0, &qword_100645ED8, &qword_10065B7C8, (SEL *)&selRef_setDragDelegate_);
  return sub_1000F8F8C(0, &qword_100645EE0, &qword_100653D08, (SEL *)&selRef_setDropDelegate_);
}

uint64_t sub_1000E3EB0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;
  char v23;

  *(_QWORD *)&v21 = sub_1000232AC(a1, (uint64_t)a2, a3, a4);
  *((_QWORD *)&v21 + 1) = v10;
  v22 = v11;
  v23 = v12 & 1;
  v13 = qword_100645F38;
  *((_BYTE *)a2 + qword_100645F38) = 1;
  sub_1000E3F6C((uint64_t)&v21, a2, a3, a4, a1, a5);
  v14 = v22;
  v15 = v23;
  v16 = (char *)a2 + qword_100645F30;
  v17 = *(_QWORD *)((char *)a2 + qword_100645F30);
  v18 = *(_QWORD *)((char *)a2 + qword_100645F30 + 8);
  v19 = *(_QWORD *)((char *)a2 + qword_100645F30 + 16);
  *(_OWORD *)v16 = v21;
  *((_QWORD *)v16 + 2) = v14;
  v16[24] = v15;
  result = sub_1000072F0(v17, v18, v19);
  *((_BYTE *)a2 + v13) = 0;
  return result;
}

uint64_t sub_1000E3F6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  _QWORD v28[3];

  v9 = *(_QWORD *)((swift_isaMask & *a2) + 0x50);
  v10 = *(_QWORD *)((swift_isaMask & *a2) + 0x58);
  v11 = type metadata accessor for TTRITreeViewNodeReuseQueue(0, v9, v10, a4);
  v15 = sub_100023974(v11, v12, v13, v14);
  v16 = sub_100024684(a3, v15);
  swift_release();
  v17 = sub_10019CA80(v16);
  swift_bridgeObjectRelease(v16);
  if (*((_BYTE *)a2 + qword_100645F58) == 1)
  {
    swift_beginAccess((char *)a2 + qword_100645F48, v28, 33, 0);
    v20 = type metadata accessor for TTRITreeViewCollapsedStates(0, v9, v10, v19);
    sub_100370780(a3, v20);
    swift_endAccess(v28);
  }
  v21 = type metadata accessor for TTRITreeViewSectionsMetadata(0, v9, v10, v18);
  sub_1000BE5F0(v17, a4, v21);
  sub_10004E700(a3, 4, 0, 1);
  v28[0] = v17;
  v23 = type metadata accessor for TTRITreeViewNode(255, v9, v10, v22);
  v24 = type metadata accessor for Array(0, v23);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v24);
  sub_10004EA24((uint64_t)v28, 0, a6, 0, v24, WitnessTable);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_1000E411C(void (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;
  char v19;

  *(_QWORD *)&v17 = sub_1000232AC((uint64_t)a1, a2, a3, a4);
  *((_QWORD *)&v17 + 1) = v6;
  v18 = v7;
  v19 = v8 & 1;
  v9 = qword_100645F38;
  *(_BYTE *)(v4 + qword_100645F38) = 1;
  a1(&v17);
  v10 = v18;
  v11 = v19;
  v12 = v4 + qword_100645F30;
  v13 = *(_QWORD *)(v4 + qword_100645F30);
  v14 = *(_QWORD *)(v4 + qword_100645F30 + 8);
  v15 = *(_QWORD *)(v4 + qword_100645F30 + 16);
  *(_OWORD *)v12 = v17;
  *(_QWORD *)(v12 + 16) = v10;
  *(_BYTE *)(v12 + 24) = v11;
  result = sub_1000072F0(v13, v14, v15);
  *(_BYTE *)(v4 + v9) = 0;
  return result;
}

uint64_t sub_1000E41C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  __int128 v29;
  uint64_t v30;
  char v31;

  v10 = *a1;
  v11 = sub_10019CCB4((uint64_t)a1);
  v15 = v11;
  if (*(_BYTE *)(a3 + qword_100645F58) == 1)
  {
    swift_beginAccess(a3 + qword_100645F48, &v29, 33, 0);
    v17 = type metadata accessor for TTRITreeViewCollapsedStates(0, *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), v16);
    sub_100370780(a2, v17);
    v11 = swift_endAccess(&v29);
  }
  *(_QWORD *)&v29 = sub_1000232AC(v11, v12, v13, v14);
  *((_QWORD *)&v29 + 1) = v18;
  v30 = v19;
  v31 = v20 & 1;
  v21 = qword_100645F38;
  *(_BYTE *)(a3 + qword_100645F38) = 1;
  sub_1000E42EC((uint64_t)&v29, a4, v15, (uint64_t)a1, a2, a5);
  v22 = v30;
  v23 = v31;
  v24 = a3 + qword_100645F30;
  v25 = *(_QWORD *)(a3 + qword_100645F30);
  v26 = *(_QWORD *)(a3 + qword_100645F30 + 8);
  v27 = *(_QWORD *)(a3 + qword_100645F30 + 16);
  *(_OWORD *)v24 = v29;
  *(_QWORD *)(v24 + 16) = v22;
  *(_BYTE *)(v24 + 24) = v23;
  result = sub_1000072F0(v25, v26, v27);
  *(_BYTE *)(a3 + v21) = 0;
  return result;
}

uint64_t sub_1000E42EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  _QWORD v25[4];

  v10 = *(_QWORD *)(*(_QWORD *)a4 + 80);
  v11 = *(_QWORD *)(*(_QWORD *)a4 + 88);
  v12 = type metadata accessor for TTRITreeViewSectionsMetadata(0, v10, v11, a4);
  v13 = sub_1000BE748(a2, a3, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  sub_10004E700(a5, 4, 0, 1);
  v25[0] = v13;
  v25[1] = v15;
  v25[2] = v17;
  v25[3] = v19;
  v21 = type metadata accessor for TTRITreeViewNode(255, v10, v11, v20);
  v22 = type metadata accessor for ArraySlice(0, v21);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v22);
  sub_10004EA24((uint64_t)v25, 1, a6, 0, v22, WitnessTable);
  return swift_unknownObjectRelease(v13);
}

BOOL sub_1000E43F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v6 = swift_isaMask & *v4;
  v7 = sub_1000232AC(a1, a2, a3, a4);
  v9 = v8;
  v11 = v10;
  v13 = sub_1000BEDB4(a1, v7, v8, v10, v12 & 1, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88));
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  if (!v13)
    return 1;
  v14 = *(unsigned __int8 *)(v13 + 72);
  swift_release();
  return v14 != 0;
}

BOOL sub_1000E44A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v6 = swift_isaMask & *v4;
  v7 = sub_1000232AC(a1, a2, a3, a4);
  v9 = v8;
  v11 = v10;
  v13 = sub_1000BEDB4(a1, v7, v8, v10, v12 & 1, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88));
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  if (!v13)
    return 0;
  v14 = *(unsigned __int8 *)(v13 + 72);
  swift_release();
  return v14 == 2;
}

uint64_t sub_1000E4548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1000F1E7C(a1, sub_1000BEF2C, a2, a3, a4);
}

double sub_1000E4554(void (*a1)(uint64_t *), uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  char *v7;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  void *Strong;
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t *, uint64_t (*)(uint64_t), _QWORD *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double result;
  _QWORD v78[5];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108[8];

  v7 = (char *)v6;
  v91 = *v6;
  v90 = swift_isaMask;
  v92 = qword_100645F40;
  v11 = *(uint64_t *)((char *)v6 + qword_100645F40);
  if (!v11)
  {
    v12 = sub_1000EECE8(v6, a3, a4, a4);
    if (a5)
      goto LABEL_3;
LABEL_9:
    swift_retain();
    goto LABEL_10;
  }
  v12 = *(uint64_t **)((char *)v6 + qword_100645F40);
  if (!a5)
    goto LABEL_9;
LABEL_3:
  v13 = swift_allocObject(&unk_1005F14A0, 32, 7);
  *(_QWORD *)(v13 + 16) = a5;
  *(_QWORD *)(v13 + 24) = a6;
  v14 = v12 + 8;
  swift_beginAccess(v12 + 8, &v96, 33, 0);
  v15 = (_QWORD *)v12[8];
  swift_retain();
  sub_100053DE4(a5, a6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
  v12[8] = (uint64_t)v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_1004557BC(0, v15[2] + 1, 1, v15);
    *v14 = v15;
  }
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    v15 = sub_1004557BC((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
    *v14 = v15;
  }
  v15[2] = v18 + 1;
  v19 = &v15[2 * v18];
  v19[4] = sub_100105B74;
  v19[5] = v13;
  swift_endAccess(&v96);
LABEL_10:
  a1(v12);
  if (!v11)
  {
    if ((v12[9] & 1) != 0)
    {
      swift_release();
    }
    else
    {
      if ((sub_10004E5D4() & 1) != 0)
      {
        v20 = v12[6];
        v21 = v12[7];
        v22 = (uint64_t *)((char *)v6 + qword_100645F48);
        swift_beginAccess(&v7[qword_100645F48], v108, 0, 0);
        v23 = *v22;
        v24 = v22[1];
        v26 = *(_QWORD *)((v90 & v91) + 0x50);
        v25 = *(_QWORD *)((v90 & v91) + 0x58);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        v27 = sub_100370DA8(v20, v21, v23, v24, v26, v25);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v24);
        v28 = swift_bridgeObjectRelease(v23);
        if ((v27 & 1) == 0)
        {
          v29 = *v22;
          swift_retain();
          swift_bridgeObjectRetain(v29);
          TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v30);
          swift_release();
          v28 = swift_bridgeObjectRelease(v29);
        }
        __chkstk_darwin(v28);
        v78[2] = v7;
        swift_beginAccess(&v7[qword_100645F50], &v96, 33, 0);
        v88 = v26;
        v90 = v25;
        v32 = type metadata accessor for TTRITreeViewSoftReloadContext(0, v26, v25, v31);
        sub_10032BAF0((uint64_t)sub_100103010, (uint64_t)v78, v32);
        v33 = swift_endAccess(&v96);
        v37 = sub_1000232AC(v33, v34, v35, v36);
        v87 = v37;
        v39 = v38;
        v85 = v38;
        v41 = v40;
        v84 = v40;
        v43 = v42;
        Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v7[qword_100645EF8]);
        ObjectType = swift_getObjectType(Strong, v45);

        v47 = _typeName(_:qualified:)(ObjectType, 0);
        v86 = v48;
        sub_10004EBD0(v37, v39, v41, v43 & 1, v47, v48, &v96);
        v49 = v97;
        v91 = v96;
        v50 = v99;
        v79 = v98;
        v52 = v100;
        v51 = v101;
        v54 = v102;
        v53 = v103;
        v55 = v104;
        v80 = v105;
        v56 = v106;
        v89 = v107;
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v85);
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(v86);
        v96 = v91;
        v97 = v49;
        v87 = v49;
        v57 = v79;
        v98 = v79;
        v99 = v50;
        v86 = v50;
        v85 = v52;
        v100 = v52;
        v101 = v51;
        v84 = v51;
        v83 = v54;
        v102 = v54;
        v103 = v53;
        v82 = v53;
        v81 = v55;
        v104 = v55;
        v105 = v80;
        v80 = v56;
        v106 = v56;
        if (sub_100022F8C(&qword_100645F18, (uint64_t (*)(uint64_t))sub_10002F988))
        {
          swift_release();
          v58 = swift_allocObject(&unk_1005F1478, 32, 7);
          *(_QWORD *)(v58 + 16) = v7;
          *(_QWORD *)(v58 + 24) = v12;
          v59 = v58;
          v60 = v7;
          swift_retain();
          v61 = sub_100103028;
        }
        else
        {
          v61 = 0;
          v59 = 0;
        }
        v65 = swift_allocObject(&unk_1005F1428, 24, 7);
        swift_unknownObjectWeakInit(v65 + 16, v7);
        v66 = (_QWORD *)swift_allocObject(&unk_1005F1450, 40, 7);
        v67 = v90;
        v66[2] = v88;
        v66[3] = v67;
        v66[4] = v65;
        v90 = (uint64_t)&v7[qword_100645F08];
        sub_100010634((uint64_t)&v7[qword_100645F08], (uint64_t)v93);
        v68 = v94;
        v69 = v95;
        sub_10001413C(v93, v94);
        v70 = *(void (**)(uint64_t *, uint64_t (*)(uint64_t), _QWORD *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t *, uint64_t, uint64_t))(v69 + 32);
        swift_retain();
        v70(&v96, sub_100103018, v66, v61, v59, sub_100100058, v12, v68, v69);
        swift_release();
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v85);
        swift_bridgeObjectRelease(v86);
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(v91);
        sub_100027F10(v93);
        v71 = v12[2];
        v72 = v12[3];
        v73 = v12[4];
        LOBYTE(v65) = *((_BYTE *)v12 + 40);
        swift_bridgeObjectRetain(v71);
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRetain(v73);
        v74 = v89;
        sub_1000F0460(v89, v71, v72, v73, v65);
        swift_bridgeObjectRelease(v73);
        swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease(v74);
        sub_100010634(v90, (uint64_t)v93);
        v75 = v94;
        v76 = v95;
        sub_10001413C(v93, v94);
        (*(void (**)(uint64_t, uint64_t))(v76 + 24))(v75, v76);
        swift_release();
        sub_1000381B8((uint64_t)v61, v59);
        swift_release();
        v64 = v93;
      }
      else
      {
        sub_100010634((uint64_t)v6 + qword_100645F08, (uint64_t)&v96);
        v62 = v99;
        v63 = v100;
        sub_10001413C(&v96, v99);
        (*(void (**)(uint64_t, uint64_t))(v63 + 24))(v62, v63);
        swift_release();
        v64 = &v96;
      }
      sub_100027F10(v64);
    }
    *(_QWORD *)&v7[v92] = 0;
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000E4C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  char *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v65 = a3;
  v6 = swift_isaMask & *v3;
  v7 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v7);
  v61 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  __chkstk_darwin(v9);
  v60 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v6 + 80);
  v12 = type metadata accessor for Optional(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v59 - v15;
  v17 = *(_QWORD *)(v11 - 8);
  v18 = __chkstk_darwin(v14);
  v20 = (char *)&v59 - v19;
  v64 = a1;
  if ((IndexSet.isEmpty.getter(v18) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v11) == 1)
    {
      v21 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      __chkstk_darwin(v21);
      v22 = v64;
      *(&v59 - 4) = v66;
      *(&v59 - 3) = v22;
      *(&v59 - 2) = v65;
      sub_1000E4554((void (*)(uint64_t *))sub_100103298, (uint64_t)(&v59 - 6), 0, 0, 0, 0);
      return;
    }
    v23 = (uint64_t)v20;
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v20, v16, v11);
    v25 = v17;
    v26 = v66;
    v30 = sub_1000232AC(v24, v27, v28, v29);
    v32 = v31;
    v34 = v33;
    v36 = sub_1000BEDB4(v23, v30, v31, v33, v35 & 1, v11, *(_QWORD *)(v6 + 88));
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v32);
    v37 = swift_bridgeObjectRelease(v30);
    if (!v36)
      goto LABEL_12;
    if (*(_BYTE *)(v36 + 72) == 2)
    {
      v41 = sub_1000232AC(v37, v38, v39, v40);
      v43 = v42;
      v45 = v44;
      v47 = v61;
      sub_1000BF2F8((uint64_t *)v36, v41, v44, v46 & 1, v61);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v41);
      v49 = v62;
      v48 = v63;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v62 + 48))(v47, 1, v63) == 1)
      {
        sub_1000073A0((uint64_t)v47, &qword_100646950);
        if (qword_10063D3C8 != -1)
          swift_once(&qword_10063D3C8, sub_1000E35C8);
        v50 = type metadata accessor for Logger(0);
        v51 = sub_100012DC4(v50, (uint64_t)qword_100645EC0);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.fault.getter(v52);
        if (os_log_type_enabled(v52, v53))
        {
          v54 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v54 = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to find childrenStartIndexPath", v54, 2u);
          swift_slowDealloc(v54, -1, -1);
        }
        swift_release();

LABEL_12:
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v11);
        return;
      }
      v55 = v60;
      v56 = (*(uint64_t (**)(char *, _BYTE *, uint64_t))(v49 + 32))(v60, v47, v48);
      __chkstk_darwin(v56);
      v57 = v64;
      *(&v59 - 6) = v26;
      *(&v59 - 5) = v57;
      *(&v59 - 4) = v36;
      *(&v59 - 3) = (uint64_t)v55;
      *(&v59 - 2) = v65;
      v58 = sub_1000E4554((void (*)(uint64_t *))sub_1001032A4, (uint64_t)(&v59 - 8), 0, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t, double))(v25 + 8))(v23, v11, v58);
      swift_release();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v48);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v11);
      swift_release();
    }
  }
}

uint64_t sub_1000E50DC(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  uint64_t v24;
  char v25;

  *(_QWORD *)&v23 = sub_1000232AC(a1, (uint64_t)a2, a3, (uint64_t)a4);
  *((_QWORD *)&v23 + 1) = v12;
  v24 = v13;
  v25 = v14 & 1;
  v15 = qword_100645F38;
  a2[qword_100645F38] = 1;
  sub_1000E51A8((uint64_t)&v23, a3, a4, a5, a2, a1, a6);
  v16 = v24;
  v17 = v25;
  v18 = &a2[qword_100645F30];
  v19 = *(_QWORD *)&a2[qword_100645F30];
  v20 = *(_QWORD *)&a2[qword_100645F30 + 8];
  v21 = *(_QWORD *)&a2[qword_100645F30 + 16];
  *(_OWORD *)v18 = v23;
  *((_QWORD *)v18 + 2) = v16;
  v18[24] = v17;
  result = sub_1000072F0(v19, v20, v21);
  a2[v15] = 0;
  return result;
}

void (*sub_1000E51A8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7))(uint64_t *, _QWORD)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t *, _QWORD);
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*result)(uint64_t *, _QWORD);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t WitnessTable;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *i;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[24];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v83 = a6;
  v84 = a7;
  v87 = a4;
  v88 = a5;
  v93 = a2;
  v82 = a1;
  v86 = a3;
  v81 = *a3;
  v7 = type metadata accessor for IndexPath(0);
  v95 = *(_QWORD *)(v7 - 8);
  v96 = v7;
  v8 = __chkstk_darwin(v7);
  v85 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v77 - v10;
  v12 = type metadata accessor for IndexSet.Index(0);
  v94 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v92 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v77 - v15;
  v17 = sub_10002A750(&qword_100646348);
  __chkstk_darwin(v17);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10002A750(&qword_100646350);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v77 - v24;
  v26 = type metadata accessor for IndexSet(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v28(v19, v93, v26);
  v28(v23, (uint64_t)v19, v26);
  v89 = sub_1000175C8(&qword_100646358, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet, (uint64_t)&protocol conformance descriptor for IndexSet);
  dispatch thunk of Collection.endIndex.getter(v26);
  v29 = *(void (**)(char *, uint64_t))(v27 + 8);
  v90 = v26;
  v29(v19, v26);
  v30 = &v23[*(int *)(v20 + 36)];
  v31 = v94;
  v32 = *(void (**)(char *, char *, uint64_t))(v94 + 32);
  v91 = v16;
  v93 = v12;
  v32(v30, v16, v12);
  sub_10000F614((uint64_t)v23, (uint64_t)v25, &qword_100646350);
  v33 = &v25[*(int *)(v20 + 36)];
  v77 = &v88[qword_100645F48];
  v88 = *(char **)(v31 + 16);
  v80 = v11;
  v79 = v25;
  for (i = v33; ; v33 = i)
  {
    v34 = v91;
    v35 = v93;
    ((void (*)(char *, char *, uint64_t))v88)(v91, v33, v93);
    v36 = v92;
    v38 = v89;
    v37 = v90;
    dispatch thunk of Collection.startIndex.getter(v90, v89);
    v39 = sub_1000175C8(&qword_100646360, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet.Index, (uint64_t)&protocol conformance descriptor for IndexSet.Index);
    v40 = dispatch thunk of static Equatable.== infix(_:_:)(v34, v36, v35, v39);
    v41 = *(void (**)(char *, uint64_t))(v94 + 8);
    v41(v36, v35);
    v41(v34, v35);
    if ((v40 & 1) != 0)
      return (void (*)(uint64_t *, _QWORD))sub_1000073A0((uint64_t)v25, &qword_100646350);
    v42 = sub_1000175C8(&qword_100646368, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet, (uint64_t)&protocol conformance descriptor for IndexSet);
    dispatch thunk of BidirectionalCollection.formIndex(before:)(v33, v37, v42);
    v43 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v98, v33, v37, v38);
    v45 = *v44;
    v43(&v98, 0);
    sub_10019CDFC(v45);
    v47 = v46;
    v49 = v48;
    v50 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
    v50(v11, v87, v96);
    result = (void (*)(uint64_t *, _QWORD))IndexPath.row.modify(&v98);
    if (__OFADD__(*v52, v47))
      break;
    *v52 += v47;
    result(&v98, 0);
    v53 = (uint64_t)v85;
    result = (void (*)(uint64_t *, _QWORD))((uint64_t (*)(char *, char *, uint64_t))v50)(v85, v11, v96);
    v55 = __OFSUB__(v49, v47);
    v56 = v49 - v47;
    if (v55)
      goto LABEL_8;
    v57 = v96;
    v58 = *(_QWORD *)(v81 + 80);
    v59 = *(_QWORD *)(v81 + 88);
    v60 = type metadata accessor for TTRITreeViewSectionsMetadata(0, v58, v59, v54);
    v61 = sub_1000BE748(v53, v56, v60);
    v63 = v62;
    v65 = v64;
    v67 = v66;
    v68 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v68(v53, v57);
    v98 = v61;
    v99 = v63;
    v100 = v65;
    v101 = v67;
    swift_beginAccess(v77, v97, 33, 0);
    v70 = type metadata accessor for TTRITreeViewCollapsedStates(0, v58, v59, v69);
    v72 = type metadata accessor for TTRITreeViewNode(255, v58, v59, v71);
    v73 = type metadata accessor for ArraySlice(0, v72);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v73);
    sub_100370944((uint64_t)&v98, v70, v73, WitnessTable);
    swift_endAccess(v97);
    v98 = v61;
    v99 = v63;
    v100 = v65;
    v101 = v67;
    v75 = WitnessTable;
    v11 = v80;
    sub_10004EA24((uint64_t)&v98, 1, v84, 0, v73, v75);
    v68((uint64_t)v11, v57);
    v76 = v61;
    v25 = v79;
    swift_unknownObjectRelease(v76);
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000E56F4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  char v21;

  *(_QWORD *)&v19 = sub_1000232AC(a1, (uint64_t)a2, a3, a4);
  *((_QWORD *)&v19 + 1) = v8;
  v20 = v9;
  v21 = v10 & 1;
  v11 = qword_100645F38;
  a2[qword_100645F38] = 1;
  sub_1000E57A8((uint64_t)&v19, a3, a2, a1, a4);
  v12 = v20;
  v13 = v21;
  v14 = &a2[qword_100645F30];
  v15 = *(_QWORD *)&a2[qword_100645F30];
  v16 = *(_QWORD *)&a2[qword_100645F30 + 8];
  v17 = *(_QWORD *)&a2[qword_100645F30 + 16];
  *(_OWORD *)v14 = v19;
  *((_QWORD *)v14 + 2) = v12;
  v14[24] = v13;
  result = sub_1000072F0(v15, v16, v17);
  a2[v11] = 0;
  return result;
}

uint64_t sub_1000E57A8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[32];

  v51 = a4;
  v52 = a5;
  v53 = a3;
  v57 = a2;
  v50 = a1;
  v49 = swift_isaMask & *(_QWORD *)a3;
  v5 = type metadata accessor for IndexSet.Index(0);
  v56 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v55 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - v8;
  v10 = sub_10002A750(&qword_100646348);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10002A750(&qword_100646350);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v48 - v17;
  v19 = type metadata accessor for IndexSet(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v12, v57, v19);
  v21(v16, (uint64_t)v12, v19);
  v57 = sub_1000175C8(&qword_100646358, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet, (uint64_t)&protocol conformance descriptor for IndexSet);
  dispatch thunk of Collection.endIndex.getter(v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v19);
  v22 = &v16[*(int *)(v13 + 36)];
  v23 = v56;
  v24 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v54 = v9;
  v24(v22, v9, v5);
  sub_10000F614((uint64_t)v16, (uint64_t)v18, &qword_100646350);
  v25 = &v18[*(int *)(v13 + 36)];
  v26 = &v53[qword_100645F48];
  v53 = *(char **)(v23 + 16);
  while (1)
  {
    v27 = v54;
    ((void (*)(char *, char *, uint64_t))v53)(v54, v25, v5);
    v28 = v55;
    dispatch thunk of Collection.startIndex.getter(v19, v57);
    v29 = sub_1000175C8(&qword_100646360, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet.Index, (uint64_t)&protocol conformance descriptor for IndexSet.Index);
    v30 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v28, v5, v29);
    v31 = *(void (**)(char *, uint64_t))(v56 + 8);
    v31(v28, v5);
    v31(v27, v5);
    if ((v30 & 1) != 0)
      break;
    v32 = sub_1000175C8(&qword_100646368, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet, (uint64_t)&protocol conformance descriptor for IndexSet);
    dispatch thunk of BidirectionalCollection.formIndex(before:)(v25, v19, v32);
    v33 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v58, v25, v19, v57);
    v35 = *v34;
    v33(v58, 0);
    v36 = *(_QWORD *)(v49 + 80);
    v37 = *(_QWORD *)(v49 + 88);
    v39 = type metadata accessor for TTRITreeViewSectionsMetadata(0, v36, v37, v38);
    v42 = sub_1000BE044(v35, v39, v40, v41);
    v44 = v43;
    swift_beginAccess(v26, v58, 33, 0);
    v46 = type metadata accessor for TTRITreeViewCollapsedStates(0, v36, v37, v45);
    sub_100370AA0(v42, v44, v46);
    swift_endAccess(v58);
    sub_10004EBC0(v42, v44, 1, v52, 0);
    swift_bridgeObjectRelease(v44);
    swift_release();
  }
  return sub_1000073A0((uint64_t)v18, &qword_100646350);
}

uint64_t sub_1000E5B58(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  _BYTE *v78;
  uint64_t v79;
  unsigned int (*v80)(_BYTE *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  char *v88;
  uint8_t *v89;
  void (*v90)(uint64_t *, uint64_t, __n128);
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  __n128 v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t (*v110)(char *, _BYTE *, uint64_t);
  _BYTE *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _BYTE *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint8_t *v132;
  char *v133;
  uint64_t v134;
  uint64_t result;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  char *v139;
  uint64_t *v140;
  __n128 v141;
  void (*v142)(char *, uint64_t, __n128);
  __n128 v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  __n128 v147;
  void (*v148)(char *, uint64_t, __n128);
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  char *v152;
  uint64_t *v153;
  char *v154;
  _BYTE *v155;
  char *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t v171;

  v165 = a4;
  v166 = a2;
  v153 = a1;
  v8 = swift_isaMask & *v5;
  v9 = (uint64_t *)type metadata accessor for IndexSet(0);
  v163 = *(v9 - 1);
  v164 = v9;
  __chkstk_darwin(v9);
  v162 = (char *)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10002A750(&qword_100646950);
  v12 = __chkstk_darwin(v11);
  v155 = (char *)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v157 = (char *)&v151 - v14;
  v158 = type metadata accessor for IndexPath(0);
  v160 = *(_QWORD *)(v158 - 8);
  v15 = __chkstk_darwin(v158);
  v154 = (char *)&v151 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v156 = (char *)&v151 - v18;
  v19 = *(_QWORD *)(v8 + 80);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v17);
  v169 = (char *)&v151 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v167 = (char *)&v151 - v23;
  v24 = type metadata accessor for Optional(0, v19);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v161 = (char *)&v151 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v151 - v28;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v24, v24, 0, 0);
  v31 = __chkstk_darwin(TupleTypeMetadata2);
  v33 = (char *)&v151 - v32;
  v34 = (char *)&v151 + *(int *)(v31 + 48) - v32;
  v168 = v25;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v35((char *)&v151 - v32, a3, v24);
  v36 = a5;
  v37 = v33;
  v35(v34, v36, v24);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v38(v37, 1, v19) != 1)
  {
    v152 = v37;
    v35(v29, (uint64_t)v37, v24);
    if (v38(v34, 1, v19) == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v19);
      goto LABEL_37;
    }
    v159 = v20;
    v41 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v42 = (uint64_t)v167;
    v41(v167, v29, v19);
    v43 = (uint64_t)v169;
    v44 = ((uint64_t (*)(char *, char *, uint64_t))v41)(v169, v34, v19);
    v48 = sub_1000232AC(v44, v45, v46, v47);
    v50 = v49;
    v52 = v51;
    v53 = *(_QWORD *)(v8 + 88);
    v55 = (uint64_t *)sub_1000BEDB4(v42, v48, v49, v51, v54 & 1, v19, v53);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v50);
    v56 = swift_bridgeObjectRelease(v48);
    if (v55)
    {
      v60 = sub_1000232AC(v56, v57, v58, v59);
      v62 = v61;
      v64 = v63;
      v66 = sub_1000BEDB4(v43, v60, v61, v63, v65 & 1, v19, v53);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v62);
      v67 = swift_bridgeObjectRelease(v60);
      v71 = v159;
      v151 = v55;
      if (v66)
      {
        if (*(_BYTE *)(v66 + 72) == 2)
        {
          v164 = (uint64_t *)v66;
          v72 = sub_1000232AC(v67, v68, v69, v70);
          v74 = v73;
          v76 = v75;
          v78 = v157;
          sub_1000BF2F8(v55, v72, v75, v77 & 1, v157);
          swift_bridgeObjectRelease(v76);
          swift_bridgeObjectRelease(v74);
          swift_bridgeObjectRelease(v72);
          v79 = v160;
          v80 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v160 + 48);
          v81 = v158;
          if (v80(v78, 1, v158) == 1)
          {
            v82 = (uint64_t)v78;
          }
          else
          {
            v110 = *(uint64_t (**)(char *, _BYTE *, uint64_t))(v79 + 32);
            v111 = v78;
            v112 = v156;
            v113 = v110(v156, v111, v81);
            v117 = sub_1000232AC(v113, v114, v115, v116);
            v119 = v118;
            v121 = v120;
            v123 = v155;
            sub_1000BF2F8(v164, v117, v120, v122 & 1, v155);
            swift_bridgeObjectRelease(v121);
            swift_bridgeObjectRelease(v119);
            v124 = v117;
            v82 = (uint64_t)v123;
            swift_bridgeObjectRelease(v124);
            if (v80(v123, 1, v81) != 1)
            {
              v136 = (uint64_t *)v154;
              v137 = v110(v154, v123, v81);
              v138 = v151;
              v37 = v152;
              v139 = v169;
              if (*((_BYTE *)v151 + 72) == 1)
              {
                __chkstk_darwin(v137);
                v140 = v153;
                *(&v151 - 4) = v170;
                *(&v151 - 3) = v140;
                v149 = v164;
                v150 = v165;
                sub_1000E4554((void (*)(uint64_t *))sub_100103354, (uint64_t)(&v151 - 6), 0, 0, 0, 0);
                v141 = swift_release();
                v142 = *(void (**)(char *, uint64_t, __n128))(v159 + 8);
                v142(v139, v19, v141);
                ((void (*)(char *, uint64_t))v142)(v167, v19);
                v143 = swift_release();
                v90 = *(void (**)(uint64_t *, uint64_t, __n128))(v160 + 8);
                v90(v136, v81, v143);
                v133 = v156;
              }
              else
              {
                __chkstk_darwin(v137);
                *(&v151 - 8) = v170;
                *(&v151 - 7) = v138;
                v144 = v164;
                *(&v151 - 6) = v166;
                *(&v151 - 5) = v144;
                v145 = v136;
                v146 = (uint64_t *)v156;
                *(&v151 - 4) = v165;
                *(&v151 - 3) = v146;
                v149 = v145;
                sub_1000E4554((void (*)(uint64_t *))sub_100103300, (uint64_t)(&v151 - 10), 0, 0, 0, 0);
                swift_release();
                v147 = swift_release();
                v148 = *(void (**)(char *, uint64_t, __n128))(v159 + 8);
                v148(v169, v19, v147);
                ((void (*)(char *, uint64_t))v148)(v167, v19);
                v90 = *(void (**)(uint64_t *, uint64_t, __n128))(v160 + 8);
                ((void (*)(uint64_t *, uint64_t))v90)(v145, v81);
                v133 = (char *)v146;
              }
              v134 = v81;
              goto LABEL_29;
            }
            (*(void (**)(char *, uint64_t))(v160 + 8))(v112, v81);
          }
          v125 = v169;
          v37 = v152;
          sub_1000073A0(v82, &qword_100646950);
          v126 = v159;
          if (qword_10063D3C8 != -1)
            swift_once(&qword_10063D3C8, sub_1000E35C8);
          v127 = type metadata accessor for Logger(0);
          v128 = sub_100012DC4(v127, (uint64_t)qword_100645EC0);
          v129 = Logger.logObject.getter(v128);
          v130 = static os_log_type_t.fault.getter(v129);
          if (os_log_type_enabled(v129, v130))
          {
            v131 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v131 = 0;
            _os_log_impl((void *)&_mh_execute_header, v129, v130, "Unable to find old/newChildrenStartIndexPath", v131, 2u);
            v132 = v131;
            v126 = v159;
            swift_slowDealloc(v132, -1, -1);
          }
          swift_release();
          swift_release();

          v90 = *(void (**)(uint64_t *, uint64_t, __n128))(v126 + 8);
          ((void (*)(char *, uint64_t))v90)(v125, v19);
LABEL_28:
          v133 = v167;
          v134 = v19;
LABEL_29:
          ((void (*)(char *, uint64_t))v90)(v133, v134);
          goto LABEL_30;
        }
        swift_release();
      }
      if (qword_10063D3C8 != -1)
        swift_once(&qword_10063D3C8, sub_1000E35C8);
      v91 = type metadata accessor for Logger(0);
      v92 = sub_100012DC4(v91, (uint64_t)qword_100645EC0);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.info.getter();
      v95 = os_log_type_enabled(v93, v94);
      v37 = v152;
      if (v95)
      {
        v96 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v96 = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "newParentNode is not found or not expanded, treating this as a delete.", v96, 2u);
        swift_slowDealloc(v96, -1, -1);
      }

      v97 = sub_10002A750((uint64_t *)&unk_10064FA40);
      v98 = swift_allocObject(v97, 40, 7);
      *(_OWORD *)(v98 + 16) = xmmword_100520250;
      *(_QWORD *)(v98 + 32) = v166;
      v171 = v98;
      v99 = sub_1000175C8((unint64_t *)&qword_100646370, (uint64_t (*)(uint64_t))&type metadata accessor for IndexSet, (uint64_t)&protocol conformance descriptor for IndexSet);
      v100 = sub_10002A750(&qword_100641150);
      v101 = sub_100023FEC((unint64_t *)&qword_100646380, &qword_100641150, (uint64_t)&protocol conformance descriptor for [A]);
      v102 = (uint64_t)v162;
      v103 = v100;
      v104 = v164;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v171, v103, v101, v164, v99);
      v105 = (uint64_t)v161;
      v106 = v167;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v161, v167, v19);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v105, 0, 1, v19);
      sub_1000E4C88(v102, v105, 100);
      v107 = swift_release();
      v108 = v168;
      (*(void (**)(uint64_t, uint64_t, __n128))(v168 + 8))(v105, v24, v107);
      (*(void (**)(uint64_t, uint64_t *))(v163 + 8))(v102, v104);
      v109 = *(void (**)(char *, uint64_t))(v71 + 8);
      v109(v169, v19);
      v109(v106, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v37, v24);
    }
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v83 = type metadata accessor for Logger(0);
    v84 = sub_100012DC4(v83, (uint64_t)qword_100645EC0);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.info.getter();
    v87 = os_log_type_enabled(v85, v86);
    v88 = v169;
    v37 = v152;
    if (v87)
    {
      v89 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "oldParentNode is not found, nothing to do.", v89, 2u);
      swift_slowDealloc(v89, -1, -1);
    }

    v90 = *(void (**)(uint64_t *, uint64_t, __n128))(v159 + 8);
    ((void (*)(char *, uint64_t))v90)(v88, v19);
    goto LABEL_28;
  }
  v39 = ((uint64_t (*)(char *, uint64_t, uint64_t))v38)(v34, 1, v19);
  if ((_DWORD)v39 == 1)
  {
    __chkstk_darwin(v39);
    v40 = v166;
    *(&v151 - 4) = v170;
    *(&v151 - 3) = v40;
    v149 = v165;
    sub_1000E4554((void (*)(uint64_t *))sub_100103360, (uint64_t)(&v151 - 6), 0, 0, 0, 0);
LABEL_30:
    v108 = v168;
    return (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v37, v24);
  }
LABEL_37:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7070757320746F4ELL, 0xED0000646574726FLL, "Reminders/TTRITreeViewTableAdapter.swift", 40, 2, 439, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E6640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  char v21;

  *(_QWORD *)&v19 = sub_1000232AC(a1, a2, a3, a4);
  *((_QWORD *)&v19 + 1) = v8;
  v20 = v9;
  v21 = v10 & 1;
  v11 = qword_100645F38;
  *(_BYTE *)(a2 + qword_100645F38) = 1;
  sub_1000E66F0((uint64_t)&v19, a3, a4, a1);
  v12 = v20;
  v13 = v21;
  v14 = a2 + qword_100645F30;
  v15 = *(_QWORD *)(a2 + qword_100645F30);
  v16 = *(_QWORD *)(a2 + qword_100645F30 + 8);
  v17 = *(_QWORD *)(a2 + qword_100645F30 + 16);
  *(_OWORD *)v14 = v19;
  *(_QWORD *)(v14 + 16) = v12;
  *(_BYTE *)(v14 + 24) = v13;
  result = sub_1000072F0(v15, v16, v17);
  *(_BYTE *)(a2 + v11) = 0;
  return result;
}

double sub_1000E66F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v6 = type metadata accessor for TTRITreeViewSectionsMetadata(0, *(_QWORD *)(*(_QWORD *)a4 + 80), *(_QWORD *)(*(_QWORD *)a4 + 88), a4);
  v8 = sub_1000BE3E8(a2, a3, v6, v7);
  v10 = v9;
  sub_10004EBC0(v8, v9, 2, 0, 1);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000E676C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;
  char v23;

  *(_QWORD *)&v21 = sub_1000232AC(a1, (uint64_t)a2, a3, (uint64_t)a4);
  *((_QWORD *)&v21 + 1) = v10;
  v22 = v11;
  v23 = v12 & 1;
  v13 = qword_100645F38;
  *((_BYTE *)a2 + qword_100645F38) = 1;
  sub_1000E6828((uint64_t)&v21, a2, a3, a4, a5, a1);
  v14 = v22;
  v15 = v23;
  v16 = (char *)a2 + qword_100645F30;
  v17 = *(_QWORD *)((char *)a2 + qword_100645F30);
  v18 = *(_QWORD *)((char *)a2 + qword_100645F30 + 8);
  v19 = *(_QWORD *)((char *)a2 + qword_100645F30 + 16);
  *(_OWORD *)v16 = v21;
  *((_QWORD *)v16 + 2) = v14;
  v16[24] = v15;
  result = sub_1000072F0(v17, v18, v19);
  *((_BYTE *)a2 + v13) = 0;
  return result;
}

void sub_1000E6828(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  void (*v44)(_QWORD *, _QWORD);
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t WitnessTable;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  _QWORD v62[4];

  v58 = a1;
  v59 = a6;
  v9 = swift_isaMask & *a2;
  v10 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IndexPath(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v60 = (char *)&v56 - v18;
  v19 = *(_QWORD *)(v9 + 80);
  v56 = *(_QWORD *)(v9 + 88);
  v57 = v19;
  v21 = type metadata accessor for TTRITreeViewNodeReuseQueue(0, v19, v56, v20);
  v25 = sub_100023974(v21, v22, v23, v24);
  v26 = sub_100024A90(a3, (uint64_t)a4, v25);
  swift_release();
  v61 = v26;
  v27 = sub_10019CFE4((uint64_t)v26, a5);
  v29 = v28;
  v32 = sub_1000232AC(v27, v28, v30, v31);
  v34 = v33;
  v36 = v35;
  sub_1000BF2F8(a4, v32, v35, v37 & 1, v12);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v32);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    swift_bridgeObjectRelease(v27);
    sub_1000073A0((uint64_t)v12, &qword_100646950);
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_100012DC4(v38, (uint64_t)qword_100645EC0);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Can't find indexPath to insert currentItem into", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    swift_release();
  }
  else
  {
    v43 = v60;
    (*(void (**)(char *, _BYTE *, uint64_t))(v14 + 32))(v60, v12, v13);
    v44 = (void (*)(_QWORD *, _QWORD))IndexPath.row.modify(v62);
    if (__OFADD__(*v45, v29))
    {
      __break(1u);
    }
    else
    {
      *v45 += v29;
      v44(v62, 0);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v43, v13);
      v47 = v56;
      v46 = v57;
      v49 = type metadata accessor for TTRITreeViewSectionsMetadata(0, v57, v56, v48);
      sub_1000BE5F0(v27, (uint64_t)v17, v49);
      v50 = *(void (**)(char *, uint64_t))(v14 + 8);
      v50(v17, v13);
      v62[0] = v27;
      v52 = type metadata accessor for TTRITreeViewNode(255, v46, v47, v51);
      v53 = type metadata accessor for Array(0, v52);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v53);
      sub_10004EA24((uint64_t)v62, 0, 0, 1, v53, WitnessTable);
      v55 = swift_release();
      ((void (*)(char *, uint64_t, __n128))v50)(v43, v13, v55);
      swift_bridgeObjectRelease(v27);
    }
  }
}

uint64_t sub_1000E6BB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WitnessTable;
  _QWORD v31[4];

  v5 = *a2;
  v6 = sub_10019D26C(a3, a4, a5);
  v8 = v7;
  v10 = v9;
  result = IndexPath.row.getter(v6);
  v12 = __OFADD__(result, v6);
  v13 = result + v6;
  if (v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  v12 = __OFADD__(result, v8);
  v14 = result + v8;
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v14 < v13)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = IndexPath.row.getter(result);
  v12 = __OFADD__(result, v10);
  v15 = result + v10;
  if (v12)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = IndexPath.section.getter(result);
  result = IndexPath.section.getter(v16);
  if (v16 != result || v13 >= v15)
    goto LABEL_9;
  v17 = v14 - v13;
  if (__OFSUB__(v14, v13))
    goto LABEL_14;
  v12 = __OFSUB__(v15, v17);
  v15 -= v17;
  if (!v12)
  {
LABEL_9:
    v18 = IndexPath.section.getter(result);
    v19 = IndexPath.section.getter(v18);
    v20 = *(_QWORD *)(v5 + 80);
    v21 = *(_QWORD *)(v5 + 88);
    v23 = type metadata accessor for TTRITreeViewSectionsMetadata(0, v20, v21, v22);
    v24 = sub_1000BE900(v13, v14, v18, v19, v15, v23);
    v31[0] = v24;
    v31[1] = v25;
    v31[2] = v26;
    v31[3] = v27;
    v28 = type metadata accessor for TTRITreeViewNode(255, v20, v21, v27);
    v29 = type metadata accessor for ArraySlice(0, v28);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v29);
    sub_10004EA24((uint64_t)v31, 2, 0, 1, v29, WitnessTable);
    return swift_unknownObjectRelease(v24);
  }
LABEL_15:
  __break(1u);
  return result;
}

void sub_1000E6D50(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *Strong;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t inited;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  __int128 v105;
  int64_t v106;
  char *v107;
  char *v108;
  int64x2_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118[40];
  char v119[24];
  char v120[24];
  char v121[24];
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  int64x2_t v125;
  char v126;

  v100 = a4;
  v101 = a5;
  v109.i64[0] = a2;
  v7 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v11);
  v107 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v93 - v14;
  v16 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v16);
  v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v19);
  v21 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = a1;
  v22 = *(_QWORD *)(*a1 + 16);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a3 + qword_100645EF8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v21, 1, 1, v7);
  v24 = (*(uint64_t (**)(void *, char *))(v109.i64[0] + 32))(Strong, v21);

  sub_1000073A0((uint64_t)v21, (uint64_t *)&unk_100640EB0);
  v124 = _swiftEmptyArrayStorage;
  v125.i64[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  v125.i64[1] = (uint64_t)_swiftEmptyDictionarySingleton;
  v126 = 1;
  v96 = a3;
  v25 = (uint64_t *)(a3 + qword_100645F48);
  swift_beginAccess(v25, v121, 1, 0);
  v94 = v25;
  v26 = *v25;
  v27 = v25[1];
  v122 = v26;
  v123 = v27;
  v103 = v24;
  v104 = v22;
  if (v24 > v22)
    v22 = v24;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  v102 = v22;
  if (!v22)
  {
    v109 = vdupq_n_s64((unint64_t)_swiftEmptyDictionarySingleton);
    v87 = _swiftEmptyArrayStorage;
    v89 = v94;
    v88 = 1;
LABEL_63:
    v90 = v97;
    swift_bridgeObjectRelease(*v97);
    swift_bridgeObjectRelease(v90[1]);
    swift_bridgeObjectRelease(v90[2]);
    *v90 = v87;
    *(int64x2_t *)(v90 + 1) = v109;
    *((_BYTE *)v90 + 24) = v88;
    v91 = *v89;
    v92 = v89[1];
    *v89 = v26;
    v89[1] = v27;
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(v92);
    return;
  }
  v28 = 0;
  v95 = xmmword_100521140;
  v108 = v18;
  while (1)
  {
    v106 = v28;
    if (v28 >= v104)
    {
      v40 = 0;
      v29 = 0;
      v41 = 0;
      v42 = 0;
      v43 = (uint64_t)_swiftEmptyArrayStorage;
      if ((uint64_t)v28 < v103)
        goto LABEL_23;
      goto LABEL_6;
    }
    if (v28 >= *(_QWORD *)(*v97 + 16))
      break;
    v105 = *(_OWORD *)(*v97 + 16 * v28 + 32);
    v30 = v105;
    v31 = v105 + *(_QWORD *)(*(_QWORD *)v105 + 144);
    swift_beginAccess(v31, &v112, 0, 0);
    sub_10002B1E8(v31, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    swift_retain();
    v32 = *((_QWORD *)&v105 + 1);
    swift_bridgeObjectRetain(*((_QWORD *)&v105 + 1));
    TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v33);
    sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, (uint64_t)v18);
    sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    sub_1000073A0((uint64_t)v18, (uint64_t *)&unk_1006463C0);
    v109.i64[0] = v32;
    v99 = v30;
    if ((unint64_t)v32 >> 62)
    {
      if (v32 < 0)
        v78 = v32;
      else
        v78 = v32 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v32, 2);
      v34 = _CocoaArrayWrapper.endIndex.getter(v78);
      if (v34)
      {
LABEL_12:
        if (v34 < 1)
          goto LABEL_65;
        if ((v109.i64[0] & 0xC000000000000001) != 0)
        {
          v35 = 0;
          v36 = (uint64_t)v108;
          do
          {
            v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(v35++, v109.i64[0]);
            v38 = v37 + *(_QWORD *)(*(_QWORD *)v37 + 144);
            swift_beginAccess(v38, &v111, 0, 0);
            v39 = sub_10002B1E8(v38, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
            TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v39);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
            sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, v36);
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
            sub_1000073A0(v36, (uint64_t *)&unk_1006463C0);
            swift_unknownObjectRelease(v37);
          }
          while (v34 != v35);
        }
        else
        {
          v44 = (uint64_t *)(v109.i64[0] + 32);
          v45 = (uint64_t)v108;
          do
          {
            v46 = *v44++;
            v47 = v46 + *(_QWORD *)(*(_QWORD *)v46 + 144);
            swift_beginAccess(v47, &v110, 0, 0);
            sub_10002B1E8(v47, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
            v48 = swift_retain();
            TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v48);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
            sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, v45);
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
            sub_1000073A0(v45, (uint64_t *)&unk_1006463C0);
            swift_release();
            --v34;
          }
          while (v34);
        }
      }
    }
    else
    {
      v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v32, 2);
      if (v34)
        goto LABEL_12;
    }
    v49 = v109.i64[0];
    swift_bridgeObjectRelease_n(v109.i64[0], 2);
    v40 = swift_allocObject(&unk_1005F1BD0, 32, 7);
    *(_OWORD *)(v40 + 16) = v105;
    v50 = v99;
    swift_retain();
    swift_bridgeObjectRetain(v49);
    sub_100307A44(1, v50, 3, v101, 0);
    swift_release();
    swift_bridgeObjectRelease(v49);
    v28 = v106;
    if (v106 < v103)
    {
      swift_retain();
      v43 = sub_1000E8570(*(_QWORD *)(v40 + 16), *(_QWORD *)(v40 + 24), (void (*)(uint64_t))sub_1004504E8);
      sub_1000381B8((uint64_t)sub_100103660, v40);
      v41 = sub_100103660;
      v42 = v40;
      v18 = v108;
LABEL_23:
      v99 = v42;
      v51 = sub_10002A750((uint64_t *)&unk_100646400);
      v52 = swift_allocObject(v51, 24, 7);
      swift_bridgeObjectRetain(v43);
      v54 = sub_100071630(v53);
      v109.i64[0] = v52;
      *(_QWORD *)(v52 + 16) = v54;
      if ((unint64_t)v43 >> 62)
      {
        if (v43 < 0)
          v79 = v43;
        else
          v79 = v43 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v43);
        v55 = _CocoaArrayWrapper.endIndex.getter(v79);
        swift_bridgeObjectRelease(v43);
        *(_QWORD *)&v105 = v41;
        if (v55)
        {
LABEL_25:
          if (v55 < 1)
            goto LABEL_66;
          if ((v43 & 0xC000000000000001) != 0)
          {
            v56 = 0;
            do
            {
              v57 = specialized _ArrayBuffer._getElementSlowPath(_:)(v56++, v43);
              swift_weakAssign(v57 + 56, 0);
              swift_beginAccess(v57 + 64, v120, 1, 0);
              v58 = *(_QWORD *)(v57 + 64);
              *(_QWORD *)(v57 + 64) = _swiftEmptyArrayStorage;
              swift_bridgeObjectRelease(v58);
              swift_unknownObjectRelease(v57);
            }
            while (v55 != v56);
          }
          else
          {
            v59 = 0;
            do
            {
              v60 = *(_QWORD *)(v43 + 8 * v59++ + 32);
              swift_weakAssign(v60 + 56, 0);
              swift_beginAccess(v60 + 64, &v113, 1, 0);
              v61 = *(_QWORD *)(v60 + 64);
              *(_QWORD *)(v60 + 64) = _swiftEmptyArrayStorage;
              swift_bridgeObjectRelease(v61);
            }
            while (v55 != v59);
          }
        }
      }
      else
      {
        v55 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        *(_QWORD *)&v105 = v41;
        if (v55)
          goto LABEL_25;
      }
      swift_bridgeObjectRelease(v43);
      sub_10006FF24(v28, v109.i64[0]);
      v63 = v62;
      v98 = v64;
      sub_10030A52C(v64);
      if ((unint64_t)v63 >> 62)
      {
        if (v63 < 0)
          v80 = v63;
        else
          v80 = v63 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v63, 2);
        v65 = _CocoaArrayWrapper.endIndex.getter(v80);
        if (v65)
        {
LABEL_34:
          if (v65 < 1)
            goto LABEL_67;
          if ((v63 & 0xC000000000000001) != 0)
          {
            for (i = 0; i != v65; ++i)
            {
              v69 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v63);
              v70 = v69;
              v71 = (uint64_t)&v69[*(_QWORD *)(*(_QWORD *)v69 + 144)];
              if (v69[72] == 1)
              {
                swift_beginAccess(&v69[*(_QWORD *)(*(_QWORD *)v69 + 144)], &v116, 0, 0);
                v67 = sub_10002B1E8(v71, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                v68 = (uint64_t)v107;
                TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v67);
                sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                sub_1004809C4((uint64_t)v15, v68);
                sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
              }
              else
              {
                swift_beginAccess(&v69[*(_QWORD *)(*(_QWORD *)v69 + 144)], v119, 0, 0);
                v72 = sub_10002B1E8(v71, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v72);
                sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, (uint64_t)v18);
                v18 = v108;
                sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
                sub_1000073A0((uint64_t)v18, (uint64_t *)&unk_1006463C0);
              }
              swift_unknownObjectRelease(v70);
            }
          }
          else
          {
            v73 = v63 + 32;
            do
            {
              v76 = *(_QWORD *)v73 + *(_QWORD *)(**(_QWORD **)v73 + 144);
              if (*(_BYTE *)(*(_QWORD *)v73 + 72) == 1)
              {
                swift_beginAccess(*(_QWORD *)v73 + *(_QWORD *)(**(_QWORD **)v73 + 144), &v114, 0, 0);
                sub_10002B1E8(v76, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                v74 = swift_retain();
                v75 = (uint64_t)v107;
                TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v74);
                sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                sub_1004809C4((uint64_t)v15, v75);
                sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
              }
              else
              {
                swift_beginAccess(*(_QWORD *)v73 + *(_QWORD *)(**(_QWORD **)v73 + 144), &v115, 0, 0);
                sub_10002B1E8(v76, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                v77 = swift_retain();
                TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v77);
                sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
                sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, (uint64_t)v18);
                v18 = v108;
                sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
                sub_1000073A0((uint64_t)v18, (uint64_t *)&unk_1006463C0);
              }
              swift_release();
              v73 += 8;
              --v65;
            }
            while (v65);
          }
        }
      }
      else
      {
        v65 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(v63, 2);
        if (v65)
          goto LABEL_34;
      }
      swift_bridgeObjectRelease_n(v63, 2);
      v81 = v124[2];
      swift_bridgeObjectRetain(v63);
      v82 = (uint64_t)v98;
      swift_retain();
      sub_1004397B4(v81, v81, v82, v63);
      swift_release();
      swift_bridgeObjectRelease(v63);
      sub_100069868(v81, 1);
      v83 = sub_10002A750((uint64_t *)&unk_1006415A0);
      inited = swift_initStackObject(v83, v118);
      *(_OWORD *)(inited + 16) = v95;
      *(_QWORD *)(inited + 32) = v82;
      v117 = inited;
      specialized Array._endMutation()(inited);
      v85 = v117;
      swift_retain();
      sub_10006A14C(v85, v81);
      swift_bridgeObjectRelease(v85);
      swift_bridgeObjectRetain(v63);
      sub_10006A14C(v86, v81);
      swift_bridgeObjectRelease(v63);
      sub_100307A44(1, v82, 3, v101, 0);
      swift_release();
      swift_bridgeObjectRelease(v63);
      swift_release();
      sub_1000381B8(v105, v99);
      v28 = v106;
      goto LABEL_7;
    }
    v29 = sub_100103660;
    v18 = v108;
LABEL_6:
    sub_1000381B8((uint64_t)v29, v40);
LABEL_7:
    if (++v28 == v102)
    {
      v27 = v123;
      v87 = v124;
      v109 = v125;
      v88 = v126;
      v26 = v122;
      v89 = v94;
      goto LABEL_63;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
}

uint64_t sub_1000E7978(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *Strong;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t inited;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  __int128 v97;
  uint64_t v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __int128 v107;
  int64_t v108;
  char *v109;
  char *v110;
  int64x2_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121[24];
  char v122[24];
  char v123[24];
  char v124[24];
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int64x2_t v128;
  char v129;

  v102 = a4;
  v103 = a5;
  v111.i64[0] = a2;
  v7 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  v12 = __chkstk_darwin(v11);
  v109 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v95 - v14;
  v16 = sub_10002A750((uint64_t *)&unk_1006462C0);
  __chkstk_darwin(v16);
  v18 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10002A750((uint64_t *)&unk_100640E00);
  __chkstk_darwin(v19);
  v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = a1;
  v22 = *(_QWORD *)(*a1 + 16);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a3 + qword_100645EF8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v21, 1, 1, v7);
  v24 = (*(uint64_t (**)(void *, char *))(v111.i64[0] + 32))(Strong, v21);

  sub_1000073A0((uint64_t)v21, (uint64_t *)&unk_100640E00);
  v127 = _swiftEmptyArrayStorage;
  v128.i64[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v128.i64[1] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v129 = 1;
  v98 = a3;
  v25 = (uint64_t *)(a3 + qword_100645F48);
  swift_beginAccess(v25, v124, 1, 0);
  v96 = v25;
  v26 = *v25;
  v27 = v25[1];
  v125 = v26;
  v126 = v27;
  v105 = v24;
  v106 = v22;
  if (v24 > v22)
    v22 = v24;
  swift_bridgeObjectRetain(v26);
  result = swift_bridgeObjectRetain(v27);
  v104 = v22;
  if (!v22)
  {
    v111 = vdupq_n_s64((unint64_t)&_swiftEmptyDictionarySingleton);
    v89 = _swiftEmptyArrayStorage;
    v91 = v96;
    v90 = 1;
LABEL_64:
    v92 = v99;
    swift_bridgeObjectRelease(*v99);
    swift_bridgeObjectRelease(v92[1]);
    swift_bridgeObjectRelease(v92[2]);
    *v92 = v89;
    *(int64x2_t *)(v92 + 1) = v111;
    *((_BYTE *)v92 + 24) = v90;
    v93 = *v91;
    v94 = v91[1];
    *v91 = v26;
    v91[1] = v27;
    swift_bridgeObjectRelease(v93);
    return swift_bridgeObjectRelease(v94);
  }
  v29 = 0;
  v97 = xmmword_100521140;
  v110 = v18;
  while (1)
  {
    v108 = v29;
    if (v29 >= v106)
    {
      v41 = 0;
      v30 = 0;
      v42 = 0;
      v43 = 0;
      v44 = (uint64_t)_swiftEmptyArrayStorage;
      if ((uint64_t)v29 >= v105)
        goto LABEL_6;
      goto LABEL_23;
    }
    if (v29 >= *(_QWORD *)(*v99 + 16))
      break;
    v107 = *(_OWORD *)(*v99 + 16 * v29 + 32);
    v31 = v107;
    v32 = v107 + *(_QWORD *)(*(_QWORD *)v107 + 144);
    swift_beginAccess(v32, &v114, 0, 0);
    sub_10002B1E8(v32, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    swift_retain(v31);
    v33 = *((_QWORD *)&v107 + 1);
    v34 = swift_bridgeObjectRetain(*((_QWORD *)&v107 + 1));
    TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v34);
    sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, (uint64_t)v18);
    sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    sub_1000073A0((uint64_t)v18, (uint64_t *)&unk_1006462C0);
    v111.i64[0] = v33;
    v101 = v31;
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0)
        v86 = v33;
      else
        v86 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v33, 2);
      result = _CocoaArrayWrapper.endIndex.getter(v86);
      v35 = result;
      if (result)
      {
LABEL_12:
        if (v35 < 1)
          goto LABEL_66;
        if ((v111.i64[0] & 0xC000000000000001) != 0)
        {
          v36 = 0;
          v37 = (uint64_t)v110;
          do
          {
            v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36++, v111.i64[0]);
            v39 = v38 + *(_QWORD *)(*(_QWORD *)v38 + 144);
            swift_beginAccess(v39, &v113, 0, 0);
            v40 = sub_10002B1E8(v39, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v40);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, v37);
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
            sub_1000073A0(v37, (uint64_t *)&unk_1006462C0);
            swift_unknownObjectRelease(v38);
          }
          while (v35 != v36);
        }
        else
        {
          v45 = (uint64_t *)(v111.i64[0] + 32);
          v46 = (uint64_t)v110;
          do
          {
            v47 = *v45++;
            v48 = v47 + *(_QWORD *)(*(_QWORD *)v47 + 144);
            swift_beginAccess(v48, &v112, 0, 0);
            sub_10002B1E8(v48, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            v49 = swift_retain(v47);
            TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v49);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, v46);
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
            sub_1000073A0(v46, (uint64_t *)&unk_1006462C0);
            swift_release(v47);
            --v35;
          }
          while (v35);
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(v33, 2);
      if (v35)
        goto LABEL_12;
    }
    v50 = v111.i64[0];
    swift_bridgeObjectRelease_n(v111.i64[0], 2);
    v41 = swift_allocObject(&unk_1005F1798, 32, 7);
    *(_OWORD *)(v41 + 16) = v107;
    v51 = v101;
    swift_retain(v101);
    swift_bridgeObjectRetain(v50);
    sub_100307CB4(1, v51, 3, v103, 0);
    swift_release(v51);
    swift_bridgeObjectRelease(v50);
    v29 = v108;
    if (v108 >= v105)
    {
      v30 = sub_100103388;
      v18 = v110;
LABEL_6:
      result = sub_1000381B8((uint64_t)v30, v41);
      goto LABEL_7;
    }
    swift_retain(v41);
    v44 = sub_1000E8570(*(_QWORD *)(v41 + 16), *(_QWORD *)(v41 + 24), (void (*)(uint64_t))sub_10045093C);
    sub_1000381B8((uint64_t)sub_100103388, v41);
    v42 = sub_100103388;
    v43 = v41;
    v18 = v110;
LABEL_23:
    v101 = v43;
    *(_QWORD *)&v107 = v42;
    v52 = sub_10002A750((uint64_t *)&unk_100640E10);
    inited = swift_initStackObject(v52, v123);
    v54 = swift_bridgeObjectRetain(v44);
    v55 = sub_1000719F4(v54);
    v111.i64[0] = inited;
    *(_QWORD *)(inited + 16) = v55;
    if ((unint64_t)v44 >> 62)
    {
      if (v44 < 0)
        v87 = v44;
      else
        v87 = v44 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v44);
      result = _CocoaArrayWrapper.endIndex.getter(v87);
      v56 = result;
      if (result)
      {
LABEL_25:
        if (v56 < 1)
          goto LABEL_67;
        if ((v44 & 0xC000000000000001) != 0)
        {
          v57 = 0;
          do
          {
            v58 = specialized _ArrayBuffer._getElementSlowPath(_:)(v57++, v44);
            swift_weakAssign(v58 + 56, 0);
            swift_beginAccess(v58 + 64, v122, 1, 0);
            v59 = *(_QWORD *)(v58 + 64);
            *(_QWORD *)(v58 + 64) = _swiftEmptyArrayStorage;
            swift_bridgeObjectRelease(v59);
            swift_unknownObjectRelease(v58);
          }
          while (v56 != v57);
        }
        else
        {
          v60 = (uint64_t *)(v44 + 32);
          do
          {
            v61 = *v60++;
            swift_weakAssign(v61 + 56, 0);
            swift_beginAccess(v61 + 64, &v115, 1, 0);
            v62 = *(_QWORD *)(v61 + 64);
            *(_QWORD *)(v61 + 64) = _swiftEmptyArrayStorage;
            swift_bridgeObjectRelease(v62);
            --v56;
          }
          while (v56);
        }
      }
    }
    else
    {
      v56 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(v44);
      if (v56)
        goto LABEL_25;
    }
    swift_bridgeObjectRelease_n(v44, 2);
    sub_10006FF48(v29, v111.i64[0]);
    v64 = v63;
    v100 = v65;
    sub_10030A704(v65);
    if ((unint64_t)v64 >> 62)
    {
      if (v64 < 0)
        v88 = v64;
      else
        v88 = v64 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v64, 2);
      result = _CocoaArrayWrapper.endIndex.getter(v88);
      v66 = result;
    }
    else
    {
      v66 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(v64, 2);
    }
    if (v66)
    {
      if (v66 < 1)
        goto LABEL_68;
      if ((v64 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v66; ++i)
        {
          v70 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v64);
          v71 = v70;
          v72 = (uint64_t)&v70[*(_QWORD *)(*(_QWORD *)v70 + 144)];
          if (v70[72] == 1)
          {
            swift_beginAccess(&v70[*(_QWORD *)(*(_QWORD *)v70 + 144)], &v118, 0, 0);
            v68 = sub_10002B1E8(v72, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            v69 = (uint64_t)v109;
            TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v68);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            sub_100481964((uint64_t)v15, v69);
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
          }
          else
          {
            swift_beginAccess(&v70[*(_QWORD *)(*(_QWORD *)v70 + 144)], v121, 0, 0);
            v73 = sub_10002B1E8(v72, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v73);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, (uint64_t)v18);
            v18 = v110;
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
            sub_1000073A0((uint64_t)v18, (uint64_t *)&unk_1006462C0);
          }
          swift_unknownObjectRelease(v71);
        }
      }
      else
      {
        v74 = v64 + 32;
        do
        {
          v77 = *(_QWORD *)v74;
          v78 = *(_QWORD *)v74 + *(_QWORD *)(**(_QWORD **)v74 + 144);
          if (*(_BYTE *)(*(_QWORD *)v74 + 72) == 1)
          {
            swift_beginAccess(*(_QWORD *)v74 + *(_QWORD *)(**(_QWORD **)v74 + 144), &v116, 0, 0);
            sub_10002B1E8(v78, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            v75 = swift_retain(v77);
            v76 = (uint64_t)v109;
            TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v75);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            sub_100481964((uint64_t)v15, v76);
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
          }
          else
          {
            swift_beginAccess(*(_QWORD *)v74 + *(_QWORD *)(**(_QWORD **)v74 + 144), &v117, 0, 0);
            sub_10002B1E8(v78, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            v79 = swift_retain(v77);
            TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v79);
            sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            sub_1000F4DA4((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, (uint64_t)v18);
            v18 = v110;
            sub_10001F544((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
            sub_1000073A0((uint64_t)v18, (uint64_t *)&unk_1006462C0);
          }
          swift_release(v77);
          v74 += 8;
          --v66;
        }
        while (v66);
      }
    }
    swift_bridgeObjectRelease_n(v64, 2);
    v80 = v127[2];
    swift_bridgeObjectRetain(v64);
    v81 = (uint64_t)v100;
    swift_retain(v100);
    sub_100438918(v80, v80, v81, v64);
    sub_100069B3C(v80, 1);
    v82 = sub_10002A750((uint64_t *)&unk_1006415A0);
    v83 = swift_initStackObject(v82, &v120);
    *(_OWORD *)(v83 + 16) = v97;
    *(_QWORD *)(v83 + 32) = v81;
    v119 = v83;
    specialized Array._endMutation()(v83);
    v84 = v119;
    swift_retain(v81);
    sub_10006A734(v84, v80);
    swift_bridgeObjectRelease(v84);
    sub_10006A734(v64, v80);
    sub_100307CB4(1, v81, 3, v103, 0);
    swift_release(v81);
    swift_bridgeObjectRelease(v64);
    v85 = v111.i64[0];
    swift_setDeallocating(v111.i64[0]);
    swift_bridgeObjectRelease(*(_QWORD *)(v85 + 16));
    result = sub_1000381B8(v107, v101);
    v29 = v108;
LABEL_7:
    if (++v29 == v104)
    {
      v27 = v126;
      v89 = v127;
      v111 = v128;
      v90 = v129;
      v26 = v125;
      v91 = v96;
      goto LABEL_64;
    }
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

uint64_t sub_1000E8570(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = sub_10002A750((uint64_t *)&unk_1006415A0);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100521140;
  *(_QWORD *)(v7 + 32) = a1;
  v10 = v7;
  specialized Array._endMutation()(v7);
  swift_retain(a1);
  v8 = swift_bridgeObjectRetain(a2);
  a3(v8);
  return v10;
}

uint64_t sub_1000E85FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  _BYTE v23[24];

  v8 = swift_isaMask & *v5;
  v9 = sub_1000232AC(a1, a2, a3, a4);
  v11 = v10;
  v13 = v12;
  v14 = *(_QWORD *)(v8 + 80);
  v16 = sub_1000BEDB4(a1, v9, v10, v12, v15 & 1, v14, *(_QWORD *)(v8 + 88));
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v9);
  if (!v16)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a5, 1, 1, v14);
  Strong = swift_weakLoadStrong(v16 + 56);
  swift_release();
  if (!Strong)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a5, 1, 1, v14);
  v18 = Strong + *(_QWORD *)(*(_QWORD *)Strong + 144);
  v19 = swift_beginAccess(v18, v23, 0, 0);
  v20 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 16))(a5, v18, v14, v19);
  v21 = swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v20 + 56))(a5, 0, 1, v14, v21);
}

uint64_t sub_1000E8744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[24];
  uint64_t v44;

  v6 = swift_isaMask & *v4;
  v7 = sub_1000232AC(a1, a2, a3, a4);
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 80);
  v13 = *(_QWORD *)(v6 + 88);
  v15 = (uint64_t *)sub_1000BEDB4(a1, v7, v8, v10, v14 & 1, v12, v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  if (!v15)
    return 0;
  Strong = swift_weakLoadStrong(v15 + 7);
  if (!Strong)
  {
    v27 = sub_1000232AC(0, v17, v18, v19);
    v29 = v28;
    v31 = v30;
    v32 = sub_1000BF2C0(v15, v27, v28, v30);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v29);
    v33 = swift_bridgeObjectRelease(v27);
    if ((v32 & 1) != 0)
    {
      v37 = sub_1000232AC(v33, v34, v35, v36);
      v39 = v38;
      v41 = v40;
      v26 = sub_1000BD8F4(v15, v37, v38, v40);
      swift_release();
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v37);
      return v26;
    }
    swift_release();
    return 0;
  }
  v20 = Strong;
  swift_beginAccess(Strong + 64, v43, 0, 0);
  v21 = *(_QWORD *)(v20 + 64);
  v23 = type metadata accessor for TTRITreeViewNode(255, v12, v13, v22);
  v24 = type metadata accessor for Array(0, v23);
  swift_bridgeObjectRetain(v21);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v24);
  Collection.firstIndex(where:)(&v44, sub_100103610, v15, v24, WitnessTable);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v21);
  return v44;
}

uint64_t sub_1000E894C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t Strong;
  void *v54;
  char *v55;
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t WitnessTable;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  __n128 v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  _BYTE v77[24];

  v73 = a3;
  v6 = swift_isaMask & *v3;
  v7 = *(_QWORD *)(v6 + 0x50);
  v8 = type metadata accessor for Optional(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v72 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - v12;
  v14 = *(_QWORD *)(v7 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v70 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v13, a2, v8, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v7) != 1)
  {
    v71 = a1;
    v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, v7);
    v41 = v14;
    v42 = sub_1000232AC(v37, v38, v39, v40);
    v43 = (uint64_t)v18;
    v45 = v44;
    v47 = v46;
    v70 = *(_QWORD *)(v6 + 88);
    v49 = sub_1000BEDB4(v43, v42, v44, v46, v48 & 1, v7, v70);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v45);
    v50 = swift_bridgeObjectRelease(v42);
    if (v49)
    {
      v51 = v41;
      if (*(_BYTE *)(v49 + 72))
      {
        v52 = v73;
        if (*(_BYTE *)(v49 + 72) == 1)
        {
          if (sub_100022F8C(&qword_100645F10, (uint64_t (*)(uint64_t))sub_100022FD4))
          {
            Strong = swift_unknownObjectUnownedLoadStrong((char *)v3 + qword_100645EF8);
            v70 = v49;
            v54 = (void *)Strong;
            v55 = v72;
            (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v72, v43, v7);
            v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56);
            v56(v55, 0, 1, v7);
            sub_1000249CC();
            swift_release();
            swift_release();

            (*(void (**)(char *, uint64_t))(v9 + 8))(v55, v8);
            (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v43, v7);
            return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v56)(v73, 0, 1, v7);
          }
        }
        else
        {
          swift_beginAccess(v49 + 64, v77, 0, 0);
          *(_QWORD *)&v76 = *(_QWORD *)(v49 + 64);
          v60 = type metadata accessor for TTRITreeViewNode(255, v7, v70, v59);
          v61 = type metadata accessor for Array(0, v60);
          WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v61);
          RandomAccessCollection<>.indices.getter(&v74, v61, WitnessTable, &protocol witness table for Int);
          v76 = v74;
          v63 = v71;
          v75 = v71;
          v64 = sub_10002A750(&qword_100644730);
          if ((Range.contains(_:)(&v75, v64) & 1) != 0)
          {
            swift_beginAccess(v49 + 64, &v74, 32, 0);
            Array.subscript.getter(&v76, v63, *(_QWORD *)(v49 + 64), v60);
            v65 = v76;
            swift_endAccess(&v74);
            v66 = swift_release();
            (*(void (**)(uint64_t, uint64_t, __n128))(v51 + 8))(v43, v7, v66);
            v67 = v65 + *(_QWORD *)(*(_QWORD *)v65 + 144);
            v68 = swift_beginAccess(v67, &v74, 0, 0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v51 + 16))(v52, v67, v7, v68);
            v33 = swift_release();
            v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v51 + 56);
            v35 = v52;
            goto LABEL_3;
          }
        }
        v69 = swift_release();
        (*(void (**)(uint64_t, uint64_t, __n128))(v51 + 8))(v43, v7, v69);
        v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v51 + 56);
        v35 = v52;
LABEL_15:
        v36 = 1;
        return v34(v35, v36, 1, v7, v33);
      }
      v58 = swift_release();
      (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v43, v7, v58);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v41 + 56);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v43, v7, v50);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v41 + 56);
    }
    v35 = v73;
    goto LABEL_15;
  }
  v19 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  v23 = sub_1000232AC(v19, v20, v21, v22);
  v25 = v24;
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v25);
  v28 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, v7, *(_QWORD *)(v6 + 88), v27);
  Array.subscript.getter(&v74, a1, v23, v28);
  swift_bridgeObjectRelease(v23);
  v29 = v74;
  swift_bridgeObjectRelease(*((_QWORD *)&v74 + 1));
  v30 = v29 + *(_QWORD *)(*(_QWORD *)v29 + 144);
  v31 = swift_beginAccess(v30, v77, 0, 0);
  v32 = v73;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v14 + 16))(v73, v30, v7, v31);
  v33 = swift_release();
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56);
  v35 = v32;
LABEL_3:
  v36 = 0;
  return v34(v35, v36, 1, v7, v33);
}

uint64_t sub_1000E8E10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *Strong;
  uint64_t v42;
  __n128 v43;
  char *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _BYTE v54[24];

  v3 = swift_isaMask & *v1;
  v4 = *(_QWORD *)(v3 + 0x50);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v51 - v11;
  v13 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v51 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, a1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) != 1)
  {
    v52 = v9;
    v53 = v5;
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v4);
    v31 = (uint64_t)v15;
    v32 = sub_1000232AC(v27, v28, v29, v30);
    v34 = v33;
    v36 = v35;
    v37 = *(_QWORD *)(v3 + 88);
    v39 = sub_1000BEDB4(v31, v32, v33, v35, v38 & 1, v4, v37);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v32);
    if (!v39)
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v31, v4);
      return 0;
    }
    v40 = v31;
    if (*(_BYTE *)(v39 + 72))
    {
      if (*(_BYTE *)(v39 + 72) != 1)
      {
        swift_beginAccess(v39 + 64, v54, 0, 0);
        v46 = *(_QWORD *)(v39 + 64);
        v48 = type metadata accessor for TTRITreeViewNode(0, v4, v37, v47);
        swift_bridgeObjectRetain(v46);
        v26 = Array.count.getter(v49, v48);
        swift_release();
        swift_bridgeObjectRelease(v46);
        goto LABEL_11;
      }
      if (sub_100022F8C(&qword_100645F10, (uint64_t (*)(uint64_t))sub_100022FD4))
      {
        Strong = (void *)swift_unknownObjectUnownedLoadStrong((char *)v1 + qword_100645EF8);
        v42 = v39 + *(_QWORD *)(*(_QWORD *)v39 + 144);
        v43 = swift_beginAccess(v42, v54, 0, 0);
        v44 = v52;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v52, v42, v4, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v4);
        v26 = sub_1000237E8();
        swift_release();
        swift_release();

        (*(void (**)(char *, uint64_t))(v6 + 8))(v44, v53);
LABEL_11:
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v40, v4);
        return v26;
      }
    }
    v45 = swift_release();
    (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(v31, v4, v45);
    return 0;
  }
  v16 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v20 = sub_1000232AC(v16, v17, v18, v19);
  v22 = v21;
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v22);
  v25 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, v4, *(_QWORD *)(v3 + 88), v24);
  v26 = Array.count.getter(v20, v25);
  swift_bridgeObjectRelease(v20);
  return v26;
}

id sub_1000E9158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;

  v5 = sub_1000232AC(a1, a2, a3, a4);
  v7 = v6;
  v9 = v8;
  v11 = sub_1000E91CC(a1, v5, v6, v8, v10 & 1);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v5);
  return v11;
}

id sub_1000E91CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  Class isa;
  uint64_t v22;
  int v23;

  v23 = a5;
  v10 = swift_isaMask & *v5;
  v11 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for IndexPath(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF224(a1, a2, a3, a4, v23, *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1000073A0((uint64_t)v13, &qword_100646950);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v19 = *(id *)(v22 + qword_100645F00);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v19, "cellForRowAtIndexPath:", isa);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v18;
}

uint64_t sub_1000E9370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E9388(a1, a2, a3, a4, a5, (SEL *)&selRef_headerViewForSection_);
}

uint64_t sub_1000E937C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E946C(a1, a2, a3, a4, a5, (SEL *)&selRef_headerViewForSection_);
}

uint64_t sub_1000E9388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  char v18;

  v8 = v6;
  v11 = sub_100073228(a1, a3);
  if (!v11)
    return 0;
  v12 = v11;
  if (!*(_QWORD *)(a4 + 16) || (result = sub_1002AA398(v11), (v14 & 1) == 0))
  {
LABEL_7:
    swift_release();
    return 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v15 < *(_QWORD *)(a2 + 16))
  {
    if (*(_QWORD *)(a2 + 16 * v15 + 32) == v12)
    {
      if (*(_QWORD *)(a4 + 16))
      {
        v17 = sub_1002AA398(v12);
        if ((v18 & 1) != 0)
        {
          v16 = objc_msgSend(*(id *)(v8 + qword_100645F00), *a6, *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v17));
          swift_release();
          return (uint64_t)v16;
        }
      }
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E946C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  char v18;

  v8 = v6;
  v11 = sub_100073338(a1, a3);
  if (!v11)
    return 0;
  v12 = v11;
  if (!*(_QWORD *)(a4 + 16) || (result = sub_1002AA398(v11), (v14 & 1) == 0))
  {
LABEL_7:
    swift_release(v12);
    return 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v15 < *(_QWORD *)(a2 + 16))
  {
    if (*(_QWORD *)(a2 + 16 * v15 + 32) == v12)
    {
      if (*(_QWORD *)(a4 + 16))
      {
        v17 = sub_1002AA398(v12);
        if ((v18 & 1) != 0)
        {
          v16 = objc_msgSend(*(id *)(v8 + qword_100645F00), *a6, *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v17));
          swift_release(v12);
          return (uint64_t)v16;
        }
      }
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

id sub_1000E9550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  _QWORD *v6;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  id v15;

  v11 = (uint64_t *)sub_1000BEDB4(a1, a2, a3, a4, a5, *(_QWORD *)((swift_isaMask & *v6) + 0x50), *(_QWORD *)((swift_isaMask & *v6) + 0x58));
  if (!v11)
    return 0;
  v12 = v11;
  if ((sub_1000BF2C0(v11, a2, a3, a4) & 1) == 0 || (v13 = sub_1000BD8F4(v12, a2, a3, a4), (v14 & 1) != 0))
  {
    swift_release();
    return 0;
  }
  v15 = objc_msgSend(*(id *)((char *)v6 + qword_100645F00), *a6, v13);
  swift_release();
  return v15;
}

uint64_t sub_1000E9630(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t v17;

  v3 = swift_isaMask & *v1;
  v4 = objc_msgSend(*(id *)((char *)v1 + qword_100645F00), "indexPathsForSelectedRows");
  if (!v4)
    return static Array._allocateUninitialized(_:)(0, *(_QWORD *)(v3 + 80));
  v5 = v4;
  v6 = type metadata accessor for IndexPath(0);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  v17 = v7;
  if ((a1 & 1) != 0)
  {
    sub_1000F4658((unint64_t *)&v17);
    v7 = v17;
  }
  v16 = v7;
  __chkstk_darwin(v8);
  v15[2] = v1;
  swift_bridgeObjectRetain(v7);
  v9 = sub_10002A750(&qword_100646388);
  v10 = *(_QWORD *)(v3 + 80);
  v11 = sub_100023FEC(&qword_100646390, &qword_100646388, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = Sequence.compactMap<A>(_:)(sub_100105C08, v15, v9, v10, v11);
  v13 = v16;
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_1000E978C(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __n128 v22;
  id v24;
  Class isa;
  _BYTE v26[12];
  int v27;

  v27 = a2;
  v4 = swift_isaMask & *v2;
  v5 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v5);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_1000232AC(v12, v13, v14, v15);
  v18 = v17;
  v20 = v19;
  sub_1000BF224(a1, v16, v17, v19, v21 & 1, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), (uint64_t)v7);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v18);
  v22 = swift_bridgeObjectRelease(v16);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v9 + 48))(v7, 1, v8, v22) == 1)
    return sub_1000073A0((uint64_t)v7, &qword_100646950);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
  v24 = *(id *)((char *)v2 + qword_100645F00);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "deselectRowAtIndexPath:animated:", isa, v27 & 1);

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_1000E9938(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_10000B0BC((uint64_t)v4, (SEL *)&selRef_scrollViewWillBeginDragging_);

}

void *sub_1000E9994(uint64_t a1, char a2)
{
  uint64_t v2;
  void *result;
  void *v6;

  result = (void *)swift_unknownObjectWeakLoadStrong(v2 + qword_100645EE8);
  if (result)
  {
    v6 = result;
    if ((objc_msgSend(result, "respondsToSelector:", "scrollViewDidEndDragging:willDecelerate:") & 1) != 0)
      objc_msgSend(v6, "scrollViewDidEndDragging:willDecelerate:", a1, a2 & 1);
    return (void *)swift_unknownObjectRelease(v6);
  }
  return result;
}

void sub_1000E9A14(void *a1, uint64_t a2, void *a3, char a4)
{
  id v6;
  id v7;

  v6 = a3;
  v7 = a1;
  sub_1000E9994((uint64_t)v6, a4);

}

void sub_1000E9A70(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_10000B0BC((uint64_t)v4, (SEL *)&selRef_scrollViewDidEndDecelerating_);

}

void sub_1000E9ACC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_10000B0BC((uint64_t)v4, (SEL *)&selRef_scrollViewDidEndScrollingAnimation_);

}

uint64_t sub_1000E9B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(__n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _UNKNOWN **v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  uint64_t v37;
  _QWORD v38[7];
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;
  _BYTE v42[56];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];

  sub_10000735C(a1, (uint64_t)&v31, &qword_100640E50);
  if (!*((_QWORD *)&v32 + 1))
  {
    v12 = &qword_100640E50;
LABEL_11:
    sub_1000073A0((uint64_t)&v31, v12);
    return 0;
  }
  sub_100028D38(&v31, v46);
  sub_100028CFC((uint64_t)v46, (uint64_t)v42);
  v5 = sub_10002A750(&qword_1006462E8);
  if ((swift_dynamicCast(&v31, v42, &type metadata for Any[8], v5, 6) & 1) == 0)
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    sub_100027F10(v46);
    v12 = (uint64_t *)&unk_1006462F0;
    goto LABEL_11;
  }
  sub_10002E37C(&v31, (uint64_t)v43);
  v6 = v45;
  sub_100028D48((uint64_t)v43, v44);
  v7 = *(void (**)(__n128))(v6 + 24);
  v8 = swift_unknownObjectRetain(v3);
  v7(v8);
  sub_1000F0C68((uint64_t)v42);
  v9 = v44;
  v10 = v45;
  sub_10001413C(v43, v44);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v39, v9, v10);
  sub_100102FD4((uint64_t)v42, (uint64_t)v38);
  sub_10000735C((uint64_t)v39, (uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
  sub_10000735C((uint64_t)v38, (uint64_t)v35, (uint64_t *)&unk_10065BDF0);
  if (!v34)
  {
    sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
    sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
    if (!*((_QWORD *)&v36 + 1))
    {
      sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  sub_10000735C((uint64_t)&v31, (uint64_t)&v28, (uint64_t *)&unk_10065BDF0);
  if (!*((_QWORD *)&v36 + 1))
  {
    sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
    sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
    sub_100092348((uint64_t)&v28);
LABEL_17:
    v14 = (uint64_t *)&unk_100646300;
    goto LABEL_18;
  }
  v25 = v35[0];
  v26[0] = v35[1];
  v26[1] = v36;
  v27 = v37;
  if (v28 == *(_QWORD *)&v35[0] && v29 == BYTE8(v25))
  {
    v11 = static AnyHashable.== infix(_:_:)(&v30, v26);
    sub_100092348((uint64_t)&v25);
    sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
    sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
    sub_100092348((uint64_t)&v28);
    sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
    if ((v11 & 1) == 0)
      goto LABEL_19;
LABEL_14:
    sub_100092348((uint64_t)v42);
    sub_100027F10(v46);
    sub_100027F10(v43);
    return 0;
  }
  sub_100092348((uint64_t)&v25);
  sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
  sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
  sub_100092348((uint64_t)&v28);
  v14 = (uint64_t *)&unk_10065BDF0;
LABEL_18:
  sub_1000073A0((uint64_t)&v31, v14);
LABEL_19:
  sub_10000735C(a3, (uint64_t)&v31, (uint64_t *)&unk_1006462D8);
  if (*((_QWORD *)&v32 + 1))
  {
    sub_10002E37C(&v31, (uint64_t)v39);
  }
  else
  {
    v15 = type metadata accessor for TTRITreeViewAnimatingUnanimatedWrapper();
    v16 = swift_allocObject(v15, 32, 7);
    *(_QWORD *)(v16 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v16 + 24) = _swiftEmptyArrayStorage;
    v40 = v15;
    v41 = &off_1005F1328;
    v39[0] = v16;
    sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_1006462D8);
  }
  v17 = v44;
  v18 = v45;
  sub_10001413C(v43, v44);
  sub_100102FD4((uint64_t)v42, (uint64_t)&v31);
  v19 = v40;
  v20 = v41;
  v21 = sub_10001413C(v39, v40);
  v38[3] = v19;
  v38[4] = v20[1];
  v22 = sub_100028D70(v38);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v21, v19);
  (*(void (**)(__int128 *, _QWORD *, uint64_t, uint64_t))(v18 + 40))(&v31, v38, v17, v18);
  sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
  sub_100027F10(v38);
  v23 = v40;
  v24 = v41;
  sub_10001413C(v39, v40);
  ((void (*)(uint64_t, _UNKNOWN **))v24[2])(v23, v24);
  sub_100092348((uint64_t)v42);
  sub_100027F10(v46);
  sub_100027F10(v39);
  sub_100027F10(v43);
  return 1;
}

uint64_t sub_1000E9F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(__n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _UNKNOWN **v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  uint64_t v37;
  _QWORD v38[7];
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;
  _BYTE v42[56];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];

  sub_10000735C(a1, (uint64_t)&v31, &qword_100640E50);
  if (!*((_QWORD *)&v32 + 1))
  {
    v12 = &qword_100640E50;
LABEL_11:
    sub_1000073A0((uint64_t)&v31, v12);
    return 0;
  }
  sub_100028D38(&v31, v46);
  sub_100028CFC((uint64_t)v46, (uint64_t)v42);
  v5 = sub_10002A750(&qword_1006462E8);
  if ((swift_dynamicCast(&v31, v42, &type metadata for Any[8], v5, 6) & 1) == 0)
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    sub_100027F10(v46);
    v12 = (uint64_t *)&unk_1006462F0;
    goto LABEL_11;
  }
  sub_10002E37C(&v31, (uint64_t)v43);
  v6 = v45;
  sub_100028D48((uint64_t)v43, v44);
  v7 = *(void (**)(__n128))(v6 + 24);
  v8 = swift_unknownObjectRetain(v3);
  v7(v8);
  sub_1000F0E00((uint64_t)v42);
  v9 = v44;
  v10 = v45;
  sub_10001413C(v43, v44);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v39, v9, v10);
  sub_100102FD4((uint64_t)v42, (uint64_t)v38);
  sub_10000735C((uint64_t)v39, (uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
  sub_10000735C((uint64_t)v38, (uint64_t)v35, (uint64_t *)&unk_10065BDF0);
  if (!v34)
  {
    sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
    sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
    if (!*((_QWORD *)&v36 + 1))
    {
      sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  sub_10000735C((uint64_t)&v31, (uint64_t)&v28, (uint64_t *)&unk_10065BDF0);
  if (!*((_QWORD *)&v36 + 1))
  {
    sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
    sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
    sub_100092348((uint64_t)&v28);
LABEL_17:
    v14 = (uint64_t *)&unk_100646300;
    goto LABEL_18;
  }
  v25 = v35[0];
  v26[0] = v35[1];
  v26[1] = v36;
  v27 = v37;
  if (v28 == *(_QWORD *)&v35[0] && v29 == BYTE8(v25))
  {
    v11 = static AnyHashable.== infix(_:_:)(&v30, v26);
    sub_100092348((uint64_t)&v25);
    sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
    sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
    sub_100092348((uint64_t)&v28);
    sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
    if ((v11 & 1) == 0)
      goto LABEL_19;
LABEL_14:
    sub_100092348((uint64_t)v42);
    sub_100027F10(v46);
    sub_100027F10(v43);
    return 0;
  }
  sub_100092348((uint64_t)&v25);
  sub_1000073A0((uint64_t)v38, (uint64_t *)&unk_10065BDF0);
  sub_1000073A0((uint64_t)v39, (uint64_t *)&unk_10065BDF0);
  sub_100092348((uint64_t)&v28);
  v14 = (uint64_t *)&unk_10065BDF0;
LABEL_18:
  sub_1000073A0((uint64_t)&v31, v14);
LABEL_19:
  sub_10000735C(a3, (uint64_t)&v31, (uint64_t *)&unk_1006462D8);
  if (*((_QWORD *)&v32 + 1))
  {
    sub_10002E37C(&v31, (uint64_t)v39);
  }
  else
  {
    v15 = type metadata accessor for TTRITreeViewAnimatingUnanimatedWrapper();
    v16 = swift_allocObject(v15, 32, 7);
    *(_QWORD *)(v16 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v16 + 24) = _swiftEmptyArrayStorage;
    v40 = v15;
    v41 = &off_1005F1328;
    v39[0] = v16;
    sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_1006462D8);
  }
  v17 = v44;
  v18 = v45;
  sub_10001413C(v43, v44);
  sub_100102FD4((uint64_t)v42, (uint64_t)&v31);
  v19 = v40;
  v20 = v41;
  v21 = sub_10001413C(v39, v40);
  v38[3] = v19;
  v38[4] = v20[1];
  v22 = sub_100028D70(v38);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v21, v19);
  (*(void (**)(__int128 *, _QWORD *, uint64_t, uint64_t))(v18 + 40))(&v31, v38, v17, v18);
  sub_1000073A0((uint64_t)&v31, (uint64_t *)&unk_10065BDF0);
  sub_100027F10(v38);
  v23 = v40;
  v24 = v41;
  sub_10001413C(v39, v40);
  ((void (*)(uint64_t, _UNKNOWN **))v24[2])(v23, v24);
  sub_100092348((uint64_t)v42);
  sub_100027F10(v46);
  sub_100027F10(v39);
  sub_100027F10(v43);
  return 1;
}

id sub_1000EA3D0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100008994(a1, a2, a3, a4, (void (*)(uint64_t))sub_10010188C);
}

void sub_1000EA3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id Strong;

  Strong = (id)swift_unknownObjectUnownedLoadStrong(a3 + qword_100645EF8);
  sub_1000234D8();

}

uint64_t sub_1000EA434(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a5);
  v13 = a3;
  v14 = a1;
  sub_100101A1C(a4, (uint64_t)v12);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000EA4F4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000172BC(a1, a2, a3, a4, &qword_100645F10, (uint64_t (*)(uint64_t))sub_100022FD4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TTRIAnyTreeViewDataSource, (void (*)(char *, char *))sub_100103A78);
}

uint64_t sub_1000EA518(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *Strong;
  Class isa;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  void (*v103)(char *, uint64_t, __n128);
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  id v106;
  id v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t TupleTypeMetadata2;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129[5];
  __int128 v130;
  __int128 v131;
  char v132[32];

  v4 = v3;
  v124 = a3;
  v116 = a1;
  v6 = swift_isaMask & *v3;
  v119 = type metadata accessor for IndexPath(0);
  v120 = *(_QWORD *)(v119 - 8);
  v7 = __chkstk_darwin(v119);
  v121 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v117 = (char *)&v110 - v9;
  v10 = *(_QWORD *)(v6 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, &type metadata for Int, "parent index ", 0);
  v115 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v122 = (uint64_t)&v110 - v11;
  v113 = swift_getTupleTypeMetadata2(0, v10, &type metadata for Int, 0, 0);
  __chkstk_darwin(v113);
  v112 = (char *)&v110 - v12;
  v13 = type metadata accessor for Optional(0, v10);
  v126 = *(_QWORD *)(v13 - 8);
  v127 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v110 - v15;
  v17 = *(_QWORD *)(v10 - 8);
  v18 = __chkstk_darwin(v14);
  v118 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v128 = (char *)&v110 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v110 - v23;
  v28 = sub_1000232AC(v22, v25, v26, v27);
  v30 = v29;
  v32 = v31;
  v33 = *(_QWORD *)(v6 + 88);
  v125 = a2;
  v35 = sub_10002B364(a2, v28, v29, v31, v34 & 1, v10, v33);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v30);
  result = swift_bridgeObjectRelease(v28);
  if (!v35)
    return result;
  v37 = v35 + *(_QWORD *)(*(_QWORD *)v35 + 144);
  v38 = swift_beginAccess(v37, v132, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v24, v37, v10, v38);
  sub_1000E85FC((uint64_t)v24, v39, v40, v41, (uint64_t)v16);
  v42 = v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v126 + 8))(v16, v127);
LABEL_11:
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v77 = type metadata accessor for Logger(0);
    v78 = sub_100012DC4(v77, (uint64_t)qword_100645EC0);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.fault.getter(v79);
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Unexpected: parent/childIndex not found for item to be moved", v81, 2u);
      swift_slowDealloc(v81, -1, -1);
      swift_release();

    }
    else
    {

      v82 = swift_release();
    }
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v42 + 8))(v24, v10, v82);
  }
  v43 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v44 = (uint64_t)v128;
  v43(v128, v16, v10);
  v45 = v24;
  v49 = sub_1000E8744((uint64_t)v24, v46, v47, v48);
  if ((v50 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v10);
    goto LABEL_11;
  }
  v51 = v49;
  v52 = v122;
  sub_1000EAE50(v125, v124, 1, 1, v122);
  v53 = v52;
  v54 = TupleTypeMetadata2;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v53, 1, TupleTypeMetadata2);
  v111 = v10;
  v110 = v35;
  if (v55 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v53, v115);
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v56 = type metadata accessor for Logger(0);
    sub_100012DC4(v56, (uint64_t)qword_100645EC0);
    v57 = v120;
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
    v59 = v117;
    v60 = v119;
    v58(v117, v125, v119);
    v61 = v121;
    v62 = ((uint64_t (*)(char *, uint64_t, uint64_t))v58)(v121, v124, v60);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.fault.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(64, -1);
      v126 = v66;
      v129[0] = v66;
      *(_DWORD *)v65 = 136315394;
      v67 = IndexPath.description.getter(v66);
      v69 = v68;
      *(_QWORD *)&v130 = sub_100027E40(v67, v68, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v65 + 4, v65 + 12);
      swift_bridgeObjectRelease(v69);
      v127 = v42;
      v70 = *(uint64_t (**)(char *, uint64_t))(v120 + 8);
      v71 = v70(v59, v60);
      *(_WORD *)(v65 + 12) = 2080;
      v72 = v121;
      v73 = IndexPath.description.getter(v71);
      v75 = v74;
      *(_QWORD *)&v130 = sub_100027E40(v73, v74, v129);
      v44 = (uint64_t)v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease(v75);
      v70(v72, v60);
      v42 = v127;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Unexpected: cannot find target parent/index for moving. {from: %s, to: %s}", (uint8_t *)v65, 0x16u);
      v76 = v126;
      swift_arrayDestroy(v126, 2, &type metadata for Any[8]);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v65, -1, -1);
      swift_release();
    }
    else
    {
      v102 = swift_release();
      v103 = *(void (**)(char *, uint64_t, __n128))(v57 + 8);
      v103(v59, v60, v102);
      ((void (*)(char *, uint64_t))v103)(v61, v60);
    }

    v104 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v105 = v111;
    v104(v44, v111);
    return ((uint64_t (*)(char *, uint64_t))v104)(v45, v105);
  }
  else
  {
    v83 = v53;
    v84 = *(_QWORD *)(v53 + *(int *)(v54 + 48));
    v127 = (uint64_t)v4;
    v85 = v10;
    v86 = v113;
    v87 = *(int *)(v113 + 48);
    v88 = v112;
    v43(v112, (char *)v83, v85);
    *(_QWORD *)&v88[v87] = v84;
    v89 = *(_QWORD *)&v88[*(int *)(v86 + 48)];
    v90 = v118;
    v91 = v85;
    v92 = v127;
    v43(v118, v88, v91);
    v93 = sub_100022F8C(&qword_100645F10, (uint64_t (*)(uint64_t))sub_100022FD4);
    v94 = (uint64_t)v45;
    v95 = (uint64_t)v90;
    if (v93)
    {
      Strong = (void *)swift_unknownObjectUnownedLoadStrong(v92 + qword_100645EF8);
      sub_10021DA5C();
      swift_release();

    }
    __chkstk_darwin(v93);
    *(&v110 - 6) = v92;
    *(&v110 - 5) = v94;
    *(&v110 - 4) = v51;
    *(&v110 - 3) = v44;
    *(&v110 - 2) = v89;
    *(&v110 - 1) = v95;
    sub_1000EC104((uint64_t)sub_100103A3C);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v98 = objc_msgSend(v116, "cellForRowAtIndexPath:", isa);

    v99 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:curve:animations:", 3, 0, 0.3);
    v100 = type metadata accessor for TTRITreeViewAnimatingWrapper();
    v101 = swift_allocObject(v100, 24, 7);
    *(_QWORD *)(v101 + 16) = v99;
    if (v98)
    {
      *((_QWORD *)&v131 + 1) = sub_100005ED8(0, (unint64_t *)&qword_1006462D0, UITableViewCell_ptr);
      *(_QWORD *)&v130 = v98;
    }
    else
    {
      v130 = 0u;
      v131 = 0u;
    }
    v129[3] = v100;
    v129[4] = (uint64_t)&off_1005F1360;
    v129[0] = v101;
    v106 = v99;
    v107 = v98;
    swift_retain();
    sub_1000288AC((uint64_t)&v130, v110, (uint64_t)v129);
    swift_release();
    swift_release();

    v108 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v109 = v111;
    v108(v95, v111);
    v108((uint64_t)v128, v109);
    v108(v94, v109);
    sub_1000073A0((uint64_t)v129, (uint64_t *)&unk_1006462D8);
    return sub_1000073A0((uint64_t)&v130, &qword_100640E50);
  }
}

void sub_1000EAE50(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  _QWORD v50[2];
  uint64_t AssociatedTypeWitness;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v58 = a4;
  LODWORD(v76) = a3;
  v75 = a2;
  v73 = a5;
  v7 = *(_QWORD *)((swift_isaMask & *v5) + 0x50);
  v8 = *(_QWORD *)((swift_isaMask & *v5) + 0x58);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, v7, &unk_1005987EC, &unk_1005987FC);
  v50[1] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = __chkstk_darwin(AssociatedTypeWitness);
  v53 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v52 = (char *)v50 - v11;
  v12 = type metadata accessor for Optional(0, v7);
  v69 = *(_QWORD *)(v12 - 8);
  v70 = v12;
  v13 = __chkstk_darwin(v12);
  v54 = (char *)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v62 = (char *)v50 - v16;
  v17 = __chkstk_darwin(v15);
  v61 = (char *)v50 - v18;
  v19 = __chkstk_darwin(v17);
  v60 = (char *)v50 - v20;
  __chkstk_darwin(v19);
  v59 = (char *)v50 - v21;
  v66 = v8;
  v23 = type metadata accessor for TTRITreeViewTableAdapter.MoveDestination(0, v7, v8, v22);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v64 = (char *)v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)v50 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)v50 - v31;
  v74 = v7;
  v77 = *(_QWORD *)(v7 - 8);
  v33 = __chkstk_darwin(v30);
  v55 = (char *)v50 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v56 = (char *)v50 - v36;
  v37 = __chkstk_darwin(v35);
  v67 = (char *)v50 - v38;
  v39 = __chkstk_darwin(v37);
  v40 = __chkstk_darwin(v39);
  v41 = __chkstk_darwin(v40);
  v42 = __chkstk_darwin(v41);
  v43 = __chkstk_darwin(v42);
  v57 = (char *)v50 - v44;
  v45 = __chkstk_darwin(v43);
  v63 = (char *)v50 - v46;
  __chkstk_darwin(v45);
  v68 = (char *)v50 - v47;
  v65 = a1;
  v71 = v5;
  sub_1000F2648(a1, v75, v76, (uint64_t)v32);
  v76 = v24;
  v48 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v72 = v32;
  v48(v29, v32, v23);
  v75 = v23;
  v49 = (char *)&loc_1000EB228 + *((int *)qword_1000EBFA8 + swift_getEnumCaseMultiPayload(v29, v23));
  __asm { BR              X10 }
}

uint64_t sub_1000EB238()
{
  uint64_t v0;
  void (*v1)(_QWORD, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void (*)(_QWORD, _QWORD, uint64_t), uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, uint64_t);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, uint64_t);
  int EnumCaseMultiPayload;
  void (*v24)(_QWORD, _QWORD, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t AssociatedConformanceWitness;
  uint64_t v76;
  unsigned __int8 v77;
  __n128 v78;
  void (*v79)(uint64_t, uint64_t);
  void (*v80)(_QWORD, uint64_t);
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint8_t *v86;
  void (*v87)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t);

  v6 = *(_QWORD *)(v5 - 144);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v8 = v3;
  v9 = *(_QWORD *)(v5 - 168);
  v7(v0, v8, v9);
  v10 = *(void (**)(void (*)(_QWORD, _QWORD, uint64_t), uint64_t))(v5 - 280);
  sub_1000E85FC(v0, v11, v12, v13, (uint64_t)v10);
  if ((*(unsigned int (**)(void (*)(void (*)(_QWORD, _QWORD, uint64_t), uint64_t), uint64_t, uint64_t))(v6 + 48))(v10, 1, v9) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 208) + 8))(v10, *(_QWORD *)(v5 - 200));
LABEL_15:
    v47 = *(_QWORD *)(v5 - 184);
    v46 = *(_QWORD *)(v5 - 176);
    v48 = *(_QWORD *)(v5 - 160);
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_100012DC4(v49, (uint64_t)qword_100645EC0);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.fault.getter(v51);
    v53 = os_log_type_enabled(v51, v52);
    v54 = *(_QWORD *)(v5 - 144);
    if (v53)
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Missing parent/childIndex", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v0, v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 152) + 8))(v47, v48);
    v56 = ((uint64_t (*)(_QWORD, uint64_t, void *, const char *, _QWORD))swift_getTupleTypeMetadata2)(0, v9, &type metadata for Int, "parent index ", 0);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
    v58 = v46;
    return v57(v58, 1, 1, v56);
  }
  v7(v4, (uint64_t)v10, v9);
  v17 = sub_1000E8744(v0, v14, v15, v16);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v4, v9);
    goto LABEL_15;
  }
  v19 = v17;
  v20 = v1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v0, v9);
  v21 = *(_QWORD *)(v5 - 216);
  v7(v21, v4, v9);
  if (__OFADD__(v19, 1))
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_10063D3C8, sub_1000E35C8);
    goto LABEL_30;
  }
  *(_QWORD *)(v5 - 264) = v19 + 1;
  v2 = *(_QWORD *)(v5 - 160);
  v1 = *(void (**)(_QWORD, _QWORD, uint64_t))(v5 - 184);
  v4 = *(_QWORD *)(v5 - 144);
  v22 = *(void (**)(_QWORD, _QWORD, uint64_t))(v5 - 248);
  v20(v22, v1, v2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v2);
  v10 = *(void (**)(void (*)(_QWORD, _QWORD, uint64_t), uint64_t))(*(_QWORD *)(v5 - 152) + 8);
  if (EnumCaseMultiPayload == 3)
  {
    v10(v1, v2);
    v24 = v22;
LABEL_12:
    v10(v24, v2);
LABEL_13:
    v42 = ((uint64_t (*)(_QWORD, uint64_t, void *, const char *, _QWORD))swift_getTupleTypeMetadata2)(0, v9, &type metadata for Int, "parent index ", 0);
    v43 = *(int *)(v42 + 48);
    v44 = *(_QWORD *)(v5 - 176);
    v7(v44, v21, v9);
    *(_QWORD *)(v44 + v43) = *(_QWORD *)(v5 - 264);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v44, 0, 1, v42);
  }
  v25 = ((uint64_t (*)(void (*)(_QWORD, _QWORD, uint64_t), uint64_t))v10)(v22, v2);
  if ((*(_DWORD *)(v5 - 292) & 1) == 0)
  {
    v24 = v1;
    goto LABEL_12;
  }
  *(_QWORD *)(v5 - 144) = v7;
  v29 = sub_1000232AC(v25, v26, v27, v28);
  v31 = v30;
  v33 = v32;
  v35 = sub_10002B364(*(_QWORD *)(v5 - 240), v29, v30, v32, v34 & 1, v9, *(_QWORD *)(v5 - 232));
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v29);
  if (!v35)
  {
    v59 = *(_QWORD *)(v5 - 216);
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v60 = type metadata accessor for Logger(0);
    v61 = sub_100012DC4(v60, (uint64_t)qword_100645EC0);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.fault.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unexpected: node not found at sourceIndexPath", v64, 2u);
      v65 = v64;
      v59 = *(_QWORD *)(v5 - 216);
      swift_slowDealloc(v65, -1, -1);
    }

    v10(v1, v2);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v59, v9);
    goto LABEL_33;
  }
  v36 = v35 + *(_QWORD *)(*(_QWORD *)v35 + 144);
  v37 = swift_beginAccess(v36, v5 - 112, 0, 0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 312);
  (*(void (**)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, __n128))(v4 + 16))(v7, v36, v9, v37);
  v38 = *(_QWORD *)(v5 - 328);
  sub_1000E85FC((uint64_t)v7, v39, v40, v41, v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v38, 1, v9) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 208) + 8))(v38, *(_QWORD *)(v5 - 200));
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 - 144))(*(_QWORD *)(v5 - 320), v38, v9);
    v69 = sub_1000E8744((uint64_t)v7, v66, v67, v68);
    if ((v70 & 1) == 0)
    {
      v71 = *(_QWORD *)(v5 - 232);
      v72 = *(void (**)(uint64_t, uint64_t))(v71 + 24);
      *(_QWORD *)(v5 - 152) = v69;
      v72(v9, v71);
      v73 = *(_QWORD *)(v5 - 336);
      v72(v9, v71);
      v74 = *(_QWORD *)(v5 - 352);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v71, v9, v74, &unk_1005987EC, &unk_1005987F4);
      v76 = *(_QWORD *)(v5 - 344);
      v77 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v73, v74, *(_QWORD *)(AssociatedConformanceWitness + 8));
      v78 = swift_release();
      v79 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 360) + 8);
      ((void (*)(_QWORD, uint64_t, __n128))v79)(*(_QWORD *)(v5 - 336), v74, v78);
      v79(v76, v74);
      v80 = *(void (**)(_QWORD, uint64_t))(v4 + 8);
      v80(*(_QWORD *)(v5 - 320), v9);
      v80(*(_QWORD *)(v5 - 312), v9);
      v10(v1, v2);
      v21 = *(_QWORD *)(v5 - 216);
      *(_QWORD *)(v5 - 264) -= v77 & (*(_QWORD *)(v5 - 152) < *(_QWORD *)(v5 - 264));
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 144);
      goto LABEL_13;
    }
    (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v5 - 320), v9);
  }
  if (qword_10063D3C8 != -1)
    goto LABEL_35;
LABEL_30:
  v81 = type metadata accessor for Logger(0);
  v82 = sub_100012DC4(v81, (uint64_t)qword_100645EC0);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.fault.getter(v83);
  if (os_log_type_enabled(v83, v84))
  {
    v85 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v85 = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Unexpected: parent/childIndex not found for item to be moved", v85, 2u);
    v86 = v85;
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 312);
    swift_slowDealloc(v86, -1, -1);
  }
  swift_release();

  v87 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v4 + 8);
  v87(v7, v9);
  v10(v1, v2);
  v87(*(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 216), v9);
LABEL_33:
  v56 = ((uint64_t (*)(_QWORD, uint64_t, void *, const char *, _QWORD))swift_getTupleTypeMetadata2)(0, v9, &type metadata for Int, "parent index ", 0);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
  v58 = *(_QWORD *)(v5 - 176);
  return v57(v58, 1, 1, v56);
}

uint64_t sub_1000EBFBC(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v23 = a3;
  v24 = a5;
  v22 = a2;
  v8 = *(_QWORD *)((swift_isaMask & *a1) + 0x50);
  v9 = type metadata accessor for Optional(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v21 - v14;
  v16 = *(_QWORD *)(v8 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17((char *)&v21 - v14, a4, v8);
  v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v18(v15, 0, 1, v8);
  v17(v13, a6, v8);
  v18(v13, 0, 1, v8);
  sub_1000E5B58(v22, v23, (uint64_t)v15, v24, (uint64_t)v13);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

double sub_1000EC104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  double result;
  uint64_t v7;
  _QWORD v8[5];
  NSObject *v9;

  if (*(_QWORD *)(v1 + qword_100645F40))
  {
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100012DC4(v2, (uint64_t)qword_100645EC0);
    v9 = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.fault.getter(v9);
    if (os_log_type_enabled(v9, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v4, "performBatchUpdateWithoutTableViewUpdates cannot be called during a batch update", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

  }
  else
  {
    v8[2] = __chkstk_darwin(a1);
    v8[3] = v7;
    return sub_1000E4554((void (*)(uint64_t *))sub_10001B280, (uint64_t)v8, (void (*)(uint64_t *))sub_100103A4C, 0, 0, 0);
  }
  return result;
}

uint64_t sub_1000EC23C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a5);
  v16 = a3;
  v17 = a1;
  sub_1000EA518(v16, (uint64_t)v15, (uint64_t)v13);

  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
}

uint64_t sub_1000EC330(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *Strong;
  uint64_t v10;
  __n128 v11;
  id v12;
  _OWORD v14[2];
  uint64_t v15;
  _QWORD v16[4];
  _BYTE v17[24];

  v5 = *(_QWORD *)((swift_isaMask & *v2) + 0x50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)v14 - v7;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong((char *)v2 + qword_100645EF8);
  v10 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 144);
  v11 = swift_beginAccess(v10, v17, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, v10, v5, v11);
  sub_1000237E8();

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16[3] = sub_100005ED8(0, (unint64_t *)&qword_1006462D0, UITableViewCell_ptr);
  v15 = 0;
  v16[0] = a1;
  memset(v14, 0, sizeof(v14));
  v12 = a1;
  sub_1000288AC((uint64_t)v16, a2, (uint64_t)v14);
  sub_1000073A0((uint64_t)v14, (uint64_t *)&unk_1006462D8);
  return sub_1000073A0((uint64_t)v16, &qword_100640E50);
}

void sub_1000EC48C(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  v10 = a1;
  sub_10000B8AC(v9, a5, (void (*)(void *, id, char *))sub_10002F994);

}

uint64_t sub_1000EC508(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000172BC(a1, a2, a3, a4, &qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TTRIAnyTreeViewDelegate, (void (*)(char *, char *))sub_100103A1C);
}

double sub_1000EC52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = swift_isaMask & *v3;
  v18 = sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4);
  v8 = *(_QWORD *)(v7 + 88);
  v14 = *(_QWORD *)(v7 + 80);
  v15 = v8;
  v16 = a2;
  v17 = a3;
  v10 = type metadata accessor for TTRIAnyTreeViewDelegate(0, v14, v8, v9);
  sub_100023068(a1, (uint64_t)&v18, v11, (void (*)(char *, char *))sub_100103788, (uint64_t)&v13, v10, (uint64_t)&type metadata for () + 8, (uint64_t)&type metadata for ());
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000EC5D8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED564(a1, a2, a3, a4, (void (*)(char *))sub_100101AB8);
}

void sub_1000EC5E4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_100101AE4();

}

double sub_1000EC630(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  double v8;

  v6 = a3;
  v7 = a1;
  v8 = sub_10002BAC8(a4, sub_10002BF14, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TTRIAnyTreeViewSectionFooterViewProviding, (void (*)(char *, char *))sub_1001039DC);

  return v8;
}

id sub_1000EC6A0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  void *v8;

  v6 = a3;
  v7 = a1;
  v8 = (void *)sub_10000B6A0(a4, (uint64_t)sub_10002BF14, (uint64_t (*)(void *, char *, uint64_t))sub_10002F994);

  return v8;
}

uint64_t sub_1000EC700(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED564(a1, a2, a3, a4, (void (*)(char *))sub_100101B58);
}

uint64_t sub_1000EC70C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000172BC(a1, a2, a3, a4, &qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TTRIAnyTreeViewDelegate, (void (*)(char *, char *))sub_10010399C);
}

uint64_t sub_1000EC730(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED564(a1, a2, a3, a4, (void (*)(char *))sub_100101B84);
}

uint64_t sub_1000EC73C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED564(a1, a2, a3, a4, (void (*)(char *))sub_100101BB0);
}

uint64_t sub_1000EC748@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Class isa;
  id v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, "isEditing")
    && (isa = IndexPath._bridgeToObjectiveC()().super.isa,
        v12 = objc_msgSend(a1, "cellForRowAtIndexPath:", isa),
        isa,
        v12)
    && (v13 = objc_msgSend(v12, "isSelected"), v12, v13))
  {
    v14 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
  else
  {
    v16 = type metadata accessor for IndexPath(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v10, a2, v16);
    v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
    __chkstk_darwin(v18);
    *(&v19 - 2) = v4;
    *(&v19 - 1) = (uint64_t)v10;
    sub_1000EC52C(a2, (uint64_t)sub_100103918, (uint64_t)(&v19 - 4));
    return sub_10000F614((uint64_t)v10, a3, &qword_100646950);
  }
}

Class sub_1000EC8E0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void (*v16)(char *, uint64_t);
  Class isa;
  uint64_t v19;

  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v14 = a3;
  v15 = a1;
  sub_1000EC748(v14, (uint64_t)v10, (uint64_t)v13);

  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v16(v13, v7);
  }
  return isa;
}

double sub_1000ECA10@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
  v9 = v2;
  v10 = a2;
  return sub_1000EC52C(a1, (uint64_t)sub_1001038A8, (uint64_t)&v8);
}

uint64_t sub_1000ECA9C(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4, void (*a5)(void *, uint64_t), void (*a6)(char *, char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void *Strong;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  int v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  char *v38;
  void (*v39)(void *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t (*v44)(char *, uint64_t, void (*)(_QWORD, _QWORD));
  void (*v45)(char *, uint64_t);
  int v46;
  uint64_t v47;
  char *v48;
  void (*v49)(void *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t AssociatedConformanceWitness;
  char v55;
  void (*v56)(char *, _QWORD);
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *);
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t TupleTypeMetadata2;
  uint64_t v79;
  void (*v80)(void *, uint64_t);

  v68 = a6;
  v69 = a4;
  v79 = a2;
  v80 = a5;
  v70 = a1;
  v7 = *a1;
  v8 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v8);
  v67 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v7 + 80);
  v74 = *(_QWORD *)(v7 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v74, v10, &unk_1005987EC, &unk_1005987FC);
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v63 = (char *)&v63 - v12;
  v13 = type metadata accessor for Optional(255, AssociatedTypeWitness);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v13, v13, 0, 0);
  v65 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = __chkstk_darwin(TupleTypeMetadata2);
  v71 = (char *)&v63 - v15;
  v77 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v14);
  v64 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v76 = (char *)&v63 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v63 - v20;
  v22 = type metadata accessor for Optional(0, v10);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v63 - v27;
  v66 = a3;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(&a3[qword_100645EF8]);
  v80(Strong, v79);
  v30 = v23;
  v31 = v10;

  v32 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v70 = v28;
  v32(v26, v28, v22);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v26, 1, v10);
  v80 = (void (*)(void *, uint64_t))AssociatedTypeWitness;
  v72 = v30;
  v73 = v22;
  if (v34 == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v22);
    v35 = v75;
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
    v36(v21, 1, 1, AssociatedTypeWitness);
    v37 = *(void (**)(uint64_t, uint64_t))(v74 + 24);
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v74 + 24);
    v37(v10, v74);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v10);
    v35 = v75;
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
    v36(v21, 0, 1, AssociatedTypeWitness);
  }
  v38 = v76;
  v79 = v31;
  ((void (*)(uint64_t))v37)(v31);
  v39 = v80;
  v36(v38, 0, 1, (uint64_t)v80);
  v40 = v77;
  v41 = v71;
  v42 = &v71[*(int *)(TupleTypeMetadata2 + 48)];
  v43 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v43(v71, v21, v13);
  v43(v42, v38, v13);
  v44 = *(uint64_t (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v35 + 48);
  if (v44(v41, 1, (void (*)(_QWORD, _QWORD))v39) == 1)
  {
    v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v38, v13);
    v45(v21, v13);
    v46 = v44(v42, 1, (void (*)(_QWORD, _QWORD))v80);
    v47 = v73;
    if (v46 == 1)
    {
      v45(v41, v13);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v72 + 8))(v70, v47);
    }
    goto LABEL_9;
  }
  v48 = v64;
  v43(v64, v41, v13);
  v49 = v80;
  if (v44(v42, 1, (void (*)(_QWORD, _QWORD))v80) == 1)
  {
    v50 = *(void (**)(char *, uint64_t))(v77 + 8);
    v50(v76, v13);
    v50(v21, v13);
    (*(void (**)(char *, _QWORD))(v75 + 8))(v48, v49);
    v47 = v73;
LABEL_9:
    v51 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v41, TupleTypeMetadata2);
    goto LABEL_12;
  }
  v52 = v75;
  v53 = v63;
  (*(void (**)(char *, char *, void (*)(void *, uint64_t)))(v75 + 32))(v63, v42, v49);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v74, v79, v49, &unk_1005987EC, &unk_1005987F4);
  v55 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v53, v49, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v56 = *(void (**)(char *, _QWORD))(v52 + 8);
  v56(v53, v49);
  v57 = *(void (**)(char *, uint64_t))(v77 + 8);
  v57(v76, v13);
  v57(v21, v13);
  v56(v48, v49);
  v51 = ((uint64_t (*)(char *, uint64_t))v57)(v41, v13);
  v47 = v73;
  if ((v55 & 1) != 0)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v72 + 8))(v70, v47);
LABEL_12:
  __chkstk_darwin(v51);
  *(&v63 - 2) = v66;
  v59 = type metadata accessor for IndexPath(0);
  v60 = v67;
  v61 = v70;
  sub_1000E2848(v68, (uint64_t)(&v63 - 4), (uint64_t)&type metadata for Never, v59, v62, v67);
  (*(void (**)(_QWORD *, uint64_t))(v72 + 8))(v61, v47);
  return sub_1001038D0(v60, v69);
}

uint64_t sub_1000ED024@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v7 = swift_isaMask & *a2;
  v8 = sub_1000232AC(a1, (uint64_t)a2, a3, a4);
  v10 = v9;
  v12 = v11;
  sub_1000BF224(a1, v8, v9, v11, v13 & 1, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), a5);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v10);
  return swift_bridgeObjectRelease(v8);
}

Class sub_1000ED0C4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void (*v16)(char *, uint64_t);
  Class isa;
  uint64_t v19;

  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v14 = a3;
  v15 = a1;
  sub_1000ECA10((uint64_t)v10, (uint64_t)v13);

  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v16(v13, v7);
  }
  return isa;
}

uint64_t sub_1000ED1F0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED564(a1, a2, a3, a4, (void (*)(char *))sub_100101BDC);
}

uint64_t sub_1000ED1FC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED564(a1, a2, a3, a4, (void (*)(char *))sub_100101C08);
}

void sub_1000ED208(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  void *Strong;
  uint64_t v4;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a1 + qword_100645EF8);
  v4 = sub_100098D00();

  *a2 = v4;
}

uint64_t sub_1000ED25C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v11 = a3;
  v12 = a1;
  v13 = sub_100101C34((uint64_t)v10);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v13;
}

id sub_1000ED310(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED388(a1, a2, a3, a4, (void (*)(char *, char *))sub_100103840);
}

void sub_1000ED31C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(void *, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  void *Strong;
  uint64_t v8;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a2 + qword_100645EF8);
  v8 = a3(Strong, a1);

  *a4 = v8;
}

id sub_1000ED37C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED388(a1, a2, a3, a4, (void (*)(char *, char *))sub_100103820);
}

id sub_1000ED388(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  v15 = (void *)sub_100101CE0((uint64_t)v12, a5);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

uint64_t sub_1000ED44C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v14;

  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v11 = a3;
  v12 = a1;
  LOBYTE(a1) = sub_100101D8C((uint64_t)v10);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return a1 & 1;
}

void sub_1000ED500(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t))
{
  id Strong;

  Strong = (id)swift_unknownObjectUnownedLoadStrong(a3 + qword_100645EF8);
  a4(Strong, a2);

}

uint64_t sub_1000ED558(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000ED564(a1, a2, a3, a4, (void (*)(char *))sub_100101E34);
}

uint64_t sub_1000ED564(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  a5(v12);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_1000ED61C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Class isa;
  id v14;
  void *Strong;
  uint64_t v16;

  v3 = v2;
  v6 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a2, (uint64_t)v8, &qword_100646950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000073A0((uint64_t)v8, &qword_100646950);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(a1, "cellForRowAtIndexPath:", isa);

    if (v14)
    {
      objc_msgSend(v14, "setEditing:animated:", 0, 0);

    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4))
  {
    Strong = (void *)swift_unknownObjectUnownedLoadStrong(v3 + qword_100645EF8);
    sub_100098DA4();
    swift_release();

  }
}

uint64_t sub_1000ED7C4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v15;

  v7 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
    v10 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  v12 = a3;
  v13 = a1;
  sub_1000ED61C(v12, (uint64_t)v9);

  return sub_1000073A0((uint64_t)v9, &qword_100646950);
}

uint64_t sub_1000ED8B4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexPath(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

Class sub_1000ED8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  Class isa;
  uint64_t v20;

  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v20 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v20 - v15;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a5);
  sub_1000ED8B4((uint64_t)v11, (uint64_t)v16);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v17(v14, v7);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v17(v16, v7);
  return isa;
}

uint64_t sub_1000ED9F8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000172BC(a1, a2, a3, a4, &qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TTRIAnyTreeViewDelegate, (void (*)(char *, char *))sub_1001037C0);
}

void sub_1000EDA1C(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  void *Strong;
  char v4;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a1 + qword_100645EF8);
  v4 = sub_100098E0C();

  *a2 = v4 & 1;
}

uint64_t sub_1000EDA8C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char v19;
  _OWORD v21[2];

  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a5);
  if (a6)
  {
    v15 = a3;
    v16 = a1;
    swift_unknownObjectRetain(a6);
    _bridgeAnyObjectToAny(_:)(v21);
    swift_unknownObjectRelease(a6);
  }
  else
  {
    memset(v21, 0, sizeof(v21));
    v17 = a3;
    v18 = a1;
  }
  v19 = sub_100101E60(a4, (uint64_t)v14, (uint64_t)v21);

  sub_1000073A0((uint64_t)v21, &qword_100640E50);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v19 & 1;
}

void sub_1000EDB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id Strong;

  Strong = (id)swift_unknownObjectUnownedLoadStrong(a3 + qword_100645EF8);
  sub_100098E30();

}

uint64_t sub_1000EDBF8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _OWORD v20[2];

  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a5);
  if (a6)
  {
    v15 = a3;
    v16 = a1;
    swift_unknownObjectRetain(a6);
    _bridgeAnyObjectToAny(_:)(v20);
    swift_unknownObjectRelease(a6);
  }
  else
  {
    memset(v20, 0, sizeof(v20));
    v17 = a3;
    v18 = a1;
  }
  sub_100101F18(a4, (uint64_t)v14, (uint64_t)v20);

  sub_1000073A0((uint64_t)v20, &qword_100640E50);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000EDCF8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  void *Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = swift_isaMask & *v4;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong((char *)v4 + qword_100645EF8);
  objc_msgSend(Strong, "convertPoint:fromCoordinateSpace:", a1, a3, a4);
  v12 = v11;
  v14 = v13;

  v23 = 0;
  v24 = sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4);
  v20 = v4;
  v21 = v12;
  v22 = v14;
  v16 = type metadata accessor for TTRIAnyTreeViewDelegate(0, *(_QWORD *)(v9 + 80), *(_QWORD *)(v9 + 88), v15);
  v17 = sub_10002A750(&qword_100646418);
  sub_100023068(a2, (uint64_t)&v24, (uint64_t)&v23, (void (*)(char *, char *))sub_100103770, (uint64_t)&v19, v16, v17, (uint64_t)&v25);
  swift_release();
  return v25;
}

void sub_1000EDDFC(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  void *Strong;
  uint64_t v4;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a1 + qword_100645EF8);
  v4 = sub_100098EB4();

  *a2 = v4;
}

id sub_1000EDE68(void *a1, double a2, double a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v19;

  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a6);
  v15 = a5;
  v16 = a1;
  v17 = (void *)sub_1000EDCF8((uint64_t)v15, (uint64_t)v14, a2, a3);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v17;
}

void sub_1000EDF38(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain(a5);
  v10 = a1;
  sub_100101F50((uint64_t)v9, a5, (void (*)(id, uint64_t, uint64_t))sub_100098F18);

  swift_unknownObjectRelease(a5);
}

void sub_1000EDFC4(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  sub_1000EDFDC(a1, a2, a3, a4, a5, (void (*)(id, uint64_t, uint64_t))sub_100098F3C);
}

void sub_1000EDFD0(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  sub_1000EDFDC(a1, a2, a3, a4, a5, (void (*)(id, uint64_t, uint64_t))sub_100098F60);
}

void sub_1000EDFDC(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, uint64_t, uint64_t))
{
  id v10;
  id v11;
  id v12;

  v10 = a3;
  v11 = a4;
  swift_unknownObjectRetain(a5);
  v12 = a1;
  sub_100101F50((uint64_t)v11, a5, a6);

  swift_unknownObjectRelease(a5);
}

uint64_t sub_1000EE068(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1000172BC(a1, a2, a3, a4, &qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for TTRIAnyTreeViewDelegate, (void (*)(char *, char *))sub_100103750);
}

uint64_t sub_1000EE08C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;

  v6 = a3;
  v7 = a1;
  LOBYTE(a4) = sub_100101FF0(a4, 1, (void (*)(char *, char *))sub_100103730);

  return a4 & 1;
}

uint64_t sub_1000EE0E8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;

  v6 = a3;
  v7 = a1;
  LOBYTE(a4) = sub_100101FF0(a4, 0, (void (*)(char *, char *))sub_100103710);

  return a4 & 1;
}

void sub_1000EE144(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *Strong;
  _QWORD v14[6];
  _BYTE v15[16];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[4];

  v5 = *v2;
  v6 = swift_isaMask;
  if (sub_100022F8C(&qword_100645F20, (uint64_t (*)(uint64_t))sub_10002F988))
  {
    v7 = v6 & v5;
    v18[2] = v2;
    v18[3] = a1;
    v16 = v2;
    v17 = a1;
    v8 = TTRListContentsPrefetchExtender.extendFetchIndexPaths(_:sectionCountProvider:rowCountProvider:)(a2, sub_1001036D0, v18, sub_1001036F0, v15);
    v18[0] = v8;
    __chkstk_darwin(v8);
    v14[2] = v2;
    v9 = sub_10002A750(&qword_100646388);
    v10 = *(_QWORD *)(v7 + 80);
    v11 = sub_100023FEC(&qword_100646390, &qword_100646388, (uint64_t)&protocol conformance descriptor for [A]);
    v12 = Sequence.compactMap<A>(_:)(sub_1001036B8, v14, v9, v10, v11);
    swift_bridgeObjectRelease(v8);
    Strong = (void *)swift_unknownObjectUnownedLoadStrong((char *)v2 + qword_100645EF8);
    sub_1000237E8();
    swift_release();
    swift_bridgeObjectRelease(v12);

  }
}

uint64_t sub_1000EE2B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  _BYTE v22[24];

  v7 = swift_isaMask & *a2;
  v8 = sub_1000232AC(a1, (uint64_t)a2, a3, a4);
  v10 = v9;
  v12 = v11;
  v13 = *(_QWORD *)(v7 + 80);
  v15 = sub_10002B364(a1, v8, v9, v11, v14 & 1, v13, *(_QWORD *)(v7 + 88));
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  if (!v15)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 56))(a5, 1, 1, v13, v16);
  v17 = v15 + *(_QWORD *)(*(_QWORD *)v15 + 144);
  v18 = swift_beginAccess(v17, v22, 0, 0);
  v19 = *(_QWORD *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v19 + 16))(a5, v17, v13, v18);
  v20 = swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v19 + 56))(a5, 0, 1, v13, v20);
}

uint64_t sub_1000EE3CC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;

  v7 = type metadata accessor for IndexPath(0);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v7);
  v9 = a3;
  v10 = a1;
  sub_1000EE144((uint64_t)v9, v8);

  return swift_bridgeObjectRelease(v8);
}

id sub_1000EE438(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  char *v53;
  uint8_t *v54;
  id v55;
  void *v56;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  char *v68;
  uint64_t v69;
  char v70[24];

  v4 = v3;
  v66 = a3;
  v67 = a2;
  v6 = *(_QWORD *)((swift_isaMask & *v4) + 0x50);
  v69 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(a1);
  v65 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v68 = (char *)&v63 - v9;
  v11 = *(_QWORD *)(v10 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, v6, &unk_1005987EC, &unk_1005987FC);
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v63 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v15);
  v20 = (char *)&v63 - v19;
  type metadata accessor for TTRITreeViewContextMenuItemIdentifier();
  sub_10046810C(a1, AssociatedTypeWitness, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) != 1)
  {
    v63 = v18;
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, AssociatedTypeWitness);
    v30 = sub_1000232AC(v26, v27, v28, v29);
    v32 = v31;
    v34 = v33;
    v64 = v20;
    v36 = sub_1000BEF2C((uint64_t)v20, v30, v31, v33, v35 & 1, v6, v11);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v30);
    if (!v36)
    {
      if (qword_10063D3C8 != -1)
        swift_once(&qword_10063D3C8, sub_1000E35C8);
      v48 = type metadata accessor for Logger(0);
      v49 = sub_100012DC4(v48, (uint64_t)qword_100645EC0);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.default.getter();
      v52 = os_log_type_enabled(v50, v51);
      v53 = v64;
      if (v52)
      {
        v54 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "TTRITreeViewTableAdapter: unable to generate UITargetedPreview; item may have been deleted",
          v54,
          2u);
        swift_slowDealloc(v54, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v63 + 8))(v53, AssociatedTypeWitness);
      return 0;
    }
    v37 = v36 + *(_QWORD *)(*(_QWORD *)v36 + 144);
    v38 = swift_beginAccess(v37, v70, 0, 0);
    v39 = v69;
    v40 = v65;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v69 + 16))(v65, v37, v6, v38);
    v41 = swift_release();
    v42 = (uint64_t)v68;
    (*(void (**)(char *, char *, uint64_t, __n128))(v39 + 32))(v68, v40, v6, v41);
    v43 = v67(v42);
    if (v43)
    {
      v47 = (id)v43;
    }
    else
    {
      v55 = sub_1000E9158(v42, v44, v45, v46);
      if (!v55)
      {
        if (qword_10063D3C8 != -1)
          swift_once(&qword_10063D3C8, sub_1000E35C8);
        v58 = type metadata accessor for Logger(0);
        v59 = sub_100012DC4(v58, (uint64_t)qword_100645EC0);
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v62 = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "TTRITreeViewTableAdapter: unable to generate UITargetedPreview; cell not found",
            v62,
            2u);
          swift_slowDealloc(v62, -1, -1);
        }

        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v6);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v64, AssociatedTypeWitness);
        return 0;
      }
      v56 = v55;
      v47 = objc_msgSend(objc_allocWithZone((Class)UITargetedPreview), "initWithView:", v55);

    }
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v6);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, AssociatedTypeWitness);
    return v47;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  if (qword_10063D3C8 != -1)
    swift_once(&qword_10063D3C8, sub_1000E35C8);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100012DC4(v21, (uint64_t)qword_100645EC0);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "TTRITreeViewTableAdapter: unexpected type for context menu item ID", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  return 0;
}

uint64_t sub_1000EE94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t result;
  void *Strong;
  uint64_t v10;

  result = sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4);
  if (result)
  {
    Strong = (void *)swift_unknownObjectUnownedLoadStrong(a2 + qword_100645EF8);
    v10 = a4(Strong, a1, a3);
    swift_release();

    return v10;
  }
  return result;
}

id sub_1000EE9D8(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  v1 = a1;
  sub_1000EEA2C((uint64_t)v1, v2);
  v4 = v3;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1000EEA2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v13;
  objc_super v14;

  v3 = (char *)v2 + qword_100645F30;
  v4 = *(_QWORD *)((char *)v2 + qword_100645F30);
  if (v4)
  {
    v6 = *((_QWORD *)v3 + 1);
    v5 = *((_QWORD *)v3 + 2);
    v7 = swift_isaMask & *v2;
    v8 = *(_QWORD *)(v7 + 0x50);
    v9 = *(_QWORD *)(v7 + 88);
    v10 = v3[24];
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v5);
    v11 = sub_1000BF500(v4, v6, v5, v10 & 1, v8, v9);
    sub_1000072F0(v4, v6, v5);
  }
  else
  {
    v14.receiver = v2;
    v14.super_class = (Class)swift_getObjectType(v2, a2);
    v13 = objc_msgSendSuper2(&v14, "debugDescription");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

  }
  return v11;
}

uint64_t sub_1000EEB2C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return sub_1000EEB64(a1, a2, a3, sub_10006B3DC, (uint64_t *)&unk_1006463F0, (uint64_t (*)(_QWORD *))sub_100352EF8);
}

uint64_t sub_1000EEB48(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return sub_1000EEB64(a1, a2, a3, sub_10006B64C, &qword_100646340, (uint64_t (*)(_QWORD *))sub_100352FE0);
}

uint64_t sub_1000EEB64(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t (*a6)(_QWORD *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v9 = a4();
  v11 = v10;
  v13 = v12;
  v14 = (uint64_t *)(a1 + qword_100645F48);
  swift_beginAccess(a1 + qword_100645F48, v29, 0, 0);
  v16 = *v14;
  v15 = v14[1];
  v17 = sub_10002A750(a5);
  v18 = swift_allocObject(v17, 104, 7);
  *(_QWORD *)(v18 + 64) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v18 + 72) = 0;
  v19 = a6(_swiftEmptyArrayStorage);
  v20 = a6(_swiftEmptyArrayStorage);
  *(_QWORD *)(v18 + 80) = v19;
  *(_QWORD *)(v18 + 88) = v20;
  *(_QWORD *)(v18 + 96) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v18 + 16) = v9;
  *(_QWORD *)(v18 + 24) = v11;
  *(_QWORD *)(v18 + 32) = v13;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = v16;
  *(_QWORD *)(v18 + 56) = v15;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  if (a2)
    a2(v18);
  v21 = *(_QWORD *)(a1 + qword_100645F40);
  *(_QWORD *)(a1 + qword_100645F40) = v18;
  swift_retain(v18);
  swift_release(v21);
  if ((*(_BYTE *)(v18 + 72) & 1) == 0)
  {
    sub_100010634(a1 + qword_100645F08, (uint64_t)v26);
    v22 = v27;
    v23 = v28;
    sub_10001413C(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    sub_100027F10(v26);
  }
  return v18;
}

uint64_t *sub_1000EECE8(_QWORD *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v6 = type metadata accessor for TTRITreeViewBatchUpdatesContext(0, *(_QWORD *)((swift_isaMask & *a1) + 0x50), *(_QWORD *)((swift_isaMask & *a1) + 0x58), a4);
  v10 = sub_1000232AC(v6, v7, v8, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = (_QWORD *)((char *)a1 + qword_100645F48);
  swift_beginAccess((char *)a1 + qword_100645F48, v27, 0, 0);
  v19 = *v17;
  v18 = v17[1];
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  v20 = sub_100051000(v10, v12, v14, v16 & 1, v19, v18);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v10);
  if (a2)
    a2(v20);
  *(_QWORD *)((char *)a1 + qword_100645F40) = v20;
  swift_retain();
  swift_release();
  if ((v20[9] & 1) == 0)
  {
    sub_100010634((uint64_t)a1 + qword_100645F08, (uint64_t)v24);
    v21 = v25;
    v22 = v26;
    sub_10001413C(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
    sub_100027F10(v24);
  }
  return v20;
}

uint64_t sub_1000EEE5C(unsigned __int8 *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_1000EEE80(uint64_t a1, uint64_t a2)
{
  return sub_1000EEEB8(a1, a2, sub_10006B3DC, (uint64_t (*)(uint64_t))sub_1002AA39C, sub_1000CE5E4);
}

uint64_t sub_1000EEE9C(uint64_t a1, uint64_t a2)
{
  return sub_1000EEEB8(a1, a2, sub_10006B64C, (uint64_t (*)(uint64_t))sub_1002AA6DC, sub_1000CE774);
}

uint64_t sub_1000EEEB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a3();
  v10 = v9;
  v12 = v11;
  if (*(_QWORD *)(v9 + 16) && (v13 = a4(a1), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v13);
    v16 = swift_bridgeObjectRetain(v15);
    v17 = a5(v16);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v15);
    if (v17)
    {
      swift_release(v17);
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v8);
  }
  return 1;
}

BOOL sub_1000EEF7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v5 = swift_isaMask & *a2;
  v6 = sub_1000232AC(a1, (uint64_t)a2, a3, a4);
  v8 = v7;
  v10 = v9;
  v12 = sub_1000BEF2C(a1, v6, v7, v9, v11 & 1, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88));
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  if (v12)
    swift_release();
  return v12 == 0;
}

uint64_t sub_1000EF01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF034(a1, a2, a3, sub_100102104);
}

uint64_t sub_1000EF028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF034(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10010286C);
}

uint64_t sub_1000EF034(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_retain(a3);
  a4(a1, a2, a3);
  return swift_release(a3);
}

uint64_t sub_1000EF080(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Class isa;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, __n128);
  uint64_t (*v52)(char *);
  uint64_t v53;
  _BYTE v54[32];

  v52 = a2;
  v53 = a3;
  v5 = *(_QWORD *)((swift_isaMask & *v3) + 0x58);
  v46 = *(_QWORD *)((swift_isaMask & *v3) + 0x50);
  v47 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v46, &unk_1005987EC, &unk_1005987FC);
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v49 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v38 - v7;
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100022F8C(&qword_100645F18, (uint64_t (*)(uint64_t))sub_10002F988);
  v40 = result;
  if (result)
  {
    v17 = *(_QWORD *)(a1 + 16);
    v38 = a1;
    if (v17)
    {
      v44 = qword_100645F00;
      v42 = (char *)v3 + qword_100645F50;
      v18 = a1;
      v19 = v3;
      v20 = v18 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
      v50 = *(_QWORD *)(v10 + 72);
      v51 = v21;
      v22 = swift_bridgeObjectRetain(v18);
      v43 = v10;
      v45 = v12;
      v41 = v3;
      v39 = v15;
      while (1)
      {
        v51(v15, v20, v9, v22);
        v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v28)(v15, 0, 1, v9);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
        v29 = v52(v12);
        v27 = v12;
        if (v29)
        {
          v30 = v29;
          v31 = (uint64_t)v8;
          v32 = *(id *)((char *)v19 + v44);
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          v34 = objc_msgSend(v32, "cellForRowAtIndexPath:", isa, v38);

          if (v34)
          {
            v23 = v41;
            v24 = sub_1000EC330(v34, v30);
            sub_100029148(v24);
            swift_beginAccess(v42, v54, 33, 0);
            v26 = type metadata accessor for TTRITreeViewSoftReloadContext(0, v46, v47, v25);
            sub_100020644(v31, v26);
            swift_endAccess(v54);
            swift_release();

            v8 = (char *)v31;
            v19 = v23;
            v15 = v39;
          }
          else
          {
            v8 = (char *)v31;
            sub_100029148(v35);
            swift_beginAccess(v42, v54, 33, 0);
            v37 = type metadata accessor for TTRITreeViewSoftReloadContext(0, v46, v47, v36);
            sub_10032BB98(v31, v37);
            swift_endAccess(v54);
            swift_release();
            v19 = v41;
          }
          v10 = v43;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v49);
          v27 = v45;
        }
        (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v9);
        v20 += v50;
        --v17;
        v12 = v27;
        if (!v17)
          goto LABEL_12;
      }
    }
    else
    {
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
      v22 = swift_bridgeObjectRetain(a1);
LABEL_12:
      v28(v15, 1, 1, v9, v22);
    }
    swift_release();
    return swift_bridgeObjectRelease(v38);
  }
  return result;
}

uint64_t sub_1000EF40C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  _QWORD v16[4];

  v3 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyHashable.base.getter(v16, v10);
  if (swift_dynamicCast(v5, v16, &type metadata for Any[8], v6, 6))
  {
    v11 = a2 + 16;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    sub_10001F580((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    swift_beginAccess(v11, v16, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v11);
    if (Strong)
    {
      v13 = (void *)Strong;
      v14 = sub_1000EF93C((uint64_t)v9, sub_10006B3DC, (uint64_t (*)(uint64_t))sub_1002AA39C, sub_1000CE5E4, (uint64_t (*)(void))sub_1002AA398);

    }
    else
    {
      v14 = 0;
    }
    sub_10001F544((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    sub_1000073A0((uint64_t)v5, (uint64_t *)&unk_1006463C0);
    return 0;
  }
  return v14;
}

uint64_t sub_1000EF5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  _QWORD v16[4];

  v3 = sub_10002A750((uint64_t *)&unk_1006462C0);
  __chkstk_darwin(v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyHashable.base.getter(v16, v8);
  if (swift_dynamicCast(v5, v16, &type metadata for Any[8], v6, 6))
  {
    v11 = a2 + 16;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    sub_10001F580((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    swift_beginAccess(v11, v16, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v11);
    if (Strong)
    {
      v13 = (void *)Strong;
      v14 = sub_1000EF93C((uint64_t)v10, sub_10006B64C, (uint64_t (*)(uint64_t))sub_1002AA6DC, sub_1000CE774, (uint64_t (*)(void))sub_1002AA398);

    }
    else
    {
      v14 = 0;
    }
    sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    sub_1000073A0((uint64_t)v5, (uint64_t *)&unk_1006462C0);
    return 0;
  }
  return v14;
}

uint64_t sub_1000EF784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v23[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &unk_1005987EC, &unk_1005987FC);
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v23 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = __chkstk_darwin(v8);
  v14 = (char *)v23 - v13;
  AnyHashable.base.getter(v23, v12);
  if ((swift_dynamicCast(v10, v23, &type metadata for Any[8], AssociatedTypeWitness, 6) & 1) != 0)
  {
    v15 = a2 + 16;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, AssociatedTypeWitness);
    swift_beginAccess(v15, v23, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v15);
    if (Strong)
    {
      v20 = (void *)Strong;
      v21 = sub_1000EFACC((uint64_t)v14, v17, v18, v19);

    }
    else
    {
      v21 = 0;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0;
  }
  return v21;
}

uint64_t sub_1000EF93C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v10 = a2();
  v12 = v11;
  v14 = v13;
  if (!*(_QWORD *)(v11 + 16) || (v15 = a3(a1), (v16 & 1) == 0))
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v15);
  v18 = swift_bridgeObjectRetain(v17);
  v19 = a4(v18);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v10);
  v20 = swift_bridgeObjectRelease(v17);
  if (!v19)
    return 0;
  v21 = ((uint64_t (*)(uint64_t))a2)(v20);
  v23 = v22;
  v25 = v24;
  v26 = sub_1000FDEBC(v19, v21, v24, a5);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v23);
  v27 = swift_bridgeObjectRelease(v21);
  if ((v26 & 1) == 0)
  {
    swift_release(v19);
    return 0;
  }
  v28 = ((uint64_t (*)(uint64_t))a2)(v27);
  v30 = v29;
  v32 = v31;
  if (*(_QWORD *)(v31 + 16) && (v33 = ((uint64_t (*)(uint64_t))a5)(v19), (v34 & 1) != 0))
    v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
  else
    v35 = 0;
  swift_release(v19);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v28);
  return v35;
}

uint64_t sub_1000EFACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = swift_isaMask & *v4;
  v7 = sub_1000232AC(a1, a2, a3, a4);
  v9 = v8;
  v11 = v10;
  v13 = (uint64_t *)sub_1000BEF2C(a1, v7, v8, v10, v12 & 1, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88));
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v9);
  v14 = swift_bridgeObjectRelease(v7);
  if (!v13)
    return 0;
  v18 = sub_1000232AC(v14, v15, v16, v17);
  v20 = v19;
  v22 = v21;
  v23 = sub_1000BF2C0(v13, v18, v19, v21);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v20);
  v24 = swift_bridgeObjectRelease(v18);
  if ((v23 & 1) == 0)
  {
    swift_release();
    return 0;
  }
  v28 = sub_1000232AC(v24, v25, v26, v27);
  v30 = v29;
  v32 = v31;
  v33 = sub_1000BD8F4(v13, v28, v29, v31);
  swift_release();
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v28);
  return v33;
}

uint64_t sub_1000EFC10(char a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(char *);
  char v11;
  _BYTE v12[24];

  result = swift_beginAccess(a2 + 64, v12, 0, 0);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = a1 & 1;
    swift_bridgeObjectRetain(v5);
    v8 = (uint64_t *)(v5 + 40);
    do
    {
      v10 = (void (*)(char *))*(v8 - 1);
      v9 = *v8;
      v11 = v7;
      swift_retain(v9);
      v10(&v11);
      swift_release(v9);
      v8 += 2;
      --v6;
    }
    while (v6);
    return swift_bridgeObjectRelease(v5);
  }
  return result;
}

void sub_1000EFCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  int64_t v37;
  uint64_t v38;
  uint64_t i;
  char v40;
  unint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _QWORD v48[4];
  _QWORD v49[6];

  v6 = v5;
  v8 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_10002A750(&qword_1006463D0);
    v12 = sub_100023FEC(&qword_1006463D8, &qword_1006463D0, (uint64_t)&unk_1005276C0);
    v13 = Set.Iterator.init(_cocoa:)(v49, v10, v11, v12);
    v8 = v49[0];
    v38 = v49[1];
    v14 = v49[2];
    v15 = v49[3];
    v16 = v49[4];
  }
  else
  {
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v38 = a1 + 56;
    v14 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v15 = 0;
  }
  v37 = (unint64_t)(v14 + 64) >> 6;
  v40 = a5 & 1;
  for (i = v8; ; v8 = i)
  {
    if (v8 < 0)
    {
      v23 = __CocoaSet.Iterator.next()(v13);
      if (!v23)
        goto LABEL_43;
      v24 = v23;
      v48[0] = v23;
      swift_unknownObjectRetain(v23);
      v25 = sub_10002A750(&qword_1006463D0);
      swift_dynamicCast(v46, v48, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
      v26 = *(_QWORD *)&v46[0];
      swift_unknownObjectRelease(v24);
      v22 = v15;
      v20 = v16;
      if (!v26)
        goto LABEL_43;
    }
    else
    {
      if (v16)
      {
        v20 = (v16 - 1) & v16;
        v21 = __clz(__rbit64(v16)) | (v15 << 6);
        v22 = v15;
      }
      else
      {
        v27 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_45;
        if (v27 >= v37)
          goto LABEL_43;
        v28 = *(_QWORD *)(v38 + 8 * v27);
        v22 = v15 + 1;
        if (!v28)
        {
          v22 = v15 + 2;
          if (v15 + 2 >= v37)
            goto LABEL_43;
          v28 = *(_QWORD *)(v38 + 8 * v22);
          if (!v28)
          {
            v22 = v15 + 3;
            if (v15 + 3 >= v37)
              goto LABEL_43;
            v28 = *(_QWORD *)(v38 + 8 * v22);
            if (!v28)
            {
              v29 = v15 + 4;
              while (v37 != v29)
              {
                v28 = *(_QWORD *)(v38 + 8 * v29++);
                if (v28)
                {
                  v22 = v29 - 1;
                  goto LABEL_29;
                }
              }
LABEL_43:
              sub_10003E410(v8);
              return;
            }
          }
        }
LABEL_29:
        v20 = (v28 - 1) & v28;
        v21 = __clz(__rbit64(v28)) + (v22 << 6);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v21);
      swift_retain();
      if (!v26)
        goto LABEL_43;
    }
    v44 = v20;
    v45 = v22;
    v30 = (uint64_t)sub_1000F07FC(v26, a2, a3, a4, v40, v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item, (uint64_t (*)(void))sub_1002AA398, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, char **))sub_1000E9388, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD))sub_1000701C4);
    v31 = v30;
    if (!((unint64_t)v30 >> 62))
      break;
    if (v30 >= 0)
      v30 &= 0xFFFFFFFFFFFFFF8uLL;
    v32 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (v32)
      goto LABEL_33;
LABEL_11:
    swift_release();
    swift_bridgeObjectRelease(v31);
    v16 = v44;
    v15 = v45;
  }
  v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v32)
    goto LABEL_11;
LABEL_33:
  if (v32 >= 1)
  {
    v33 = 0;
    do
    {
      if ((v31 & 0xC000000000000001) != 0)
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v31);
      else
        v34 = *(id *)(v31 + 8 * v33 + 32);
      v35 = v34;
      ++v33;
      v48[3] = sub_100005ED8(0, (unint64_t *)&qword_1006406F0, UIView_ptr);
      v48[0] = v35;
      v47 = 0;
      memset(v46, 0, sizeof(v46));
      v36 = v35;
      sub_1000E9B28((uint64_t)v48, v26, (uint64_t)v46);

      sub_1000073A0((uint64_t)v46, (uint64_t *)&unk_1006462D8);
      sub_1000073A0((uint64_t)v48, &qword_100640E50);
    }
    while (v32 != v33);
    goto LABEL_11;
  }
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_1000F0078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  int64_t v36;
  uint64_t v37;
  uint64_t i;
  char v39;
  unint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _QWORD v47[4];
  _QWORD v48[6];

  v6 = v5;
  v8 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_10002A750((uint64_t *)&unk_100640E20);
    v12 = sub_100023FEC(&qword_100646308, (uint64_t *)&unk_100640E20, (uint64_t)&unk_1005276C0);
    result = (uint64_t)Set.Iterator.init(_cocoa:)(v48, v10, v11, v12);
    v8 = v48[0];
    v37 = v48[1];
    v14 = v48[2];
    v15 = v48[3];
    v16 = v48[4];
  }
  else
  {
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v37 = a1 + 56;
    v14 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain(a1);
    v15 = 0;
  }
  v36 = (unint64_t)(v14 + 64) >> 6;
  v39 = a5 & 1;
  for (i = v8; ; v8 = i)
  {
    if (v8 < 0)
    {
      v23 = __CocoaSet.Iterator.next()(result);
      if (!v23)
        return sub_10003E410(v8);
      v24 = v23;
      v47[0] = v23;
      swift_unknownObjectRetain(v23);
      v25 = sub_10002A750((uint64_t *)&unk_100640E20);
      swift_dynamicCast(v45, v47, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
      v26 = *(_QWORD *)&v45[0];
      swift_unknownObjectRelease(v24);
      v22 = v15;
      v20 = v16;
      if (!v26)
        return sub_10003E410(v8);
    }
    else
    {
      if (v16)
      {
        v20 = (v16 - 1) & v16;
        v21 = __clz(__rbit64(v16)) | (v15 << 6);
        v22 = v15;
      }
      else
      {
        v27 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_47;
        if (v27 >= v36)
          return sub_10003E410(v8);
        v28 = *(_QWORD *)(v37 + 8 * v27);
        v22 = v15 + 1;
        if (!v28)
        {
          v22 = v15 + 2;
          if (v15 + 2 >= v36)
            return sub_10003E410(v8);
          v28 = *(_QWORD *)(v37 + 8 * v22);
          if (!v28)
          {
            v22 = v15 + 3;
            if (v15 + 3 >= v36)
              return sub_10003E410(v8);
            v28 = *(_QWORD *)(v37 + 8 * v22);
            if (!v28)
            {
              v22 = v15 + 4;
              if (v15 + 4 >= v36)
                return sub_10003E410(v8);
              v28 = *(_QWORD *)(v37 + 8 * v22);
              if (!v28)
              {
                v29 = v15 + 5;
                while (v36 != v29)
                {
                  v28 = *(_QWORD *)(v37 + 8 * v29++);
                  if (v28)
                  {
                    v22 = v29 - 1;
                    goto LABEL_31;
                  }
                }
                return sub_10003E410(v8);
              }
            }
          }
        }
LABEL_31:
        v20 = (v28 - 1) & v28;
        v21 = __clz(__rbit64(v28)) + (v22 << 6);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v21);
      swift_retain(v26);
      if (!v26)
        return sub_10003E410(v8);
    }
    v43 = v20;
    v44 = v22;
    result = (uint64_t)sub_1000F07FC(v26, a2, a3, a4, v39, v6, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item, (uint64_t (*)(void))sub_1002AA398, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, char **))sub_1000E946C, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD))sub_100070670);
    v30 = result;
    if (!((unint64_t)result >> 62))
      break;
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v31 = result;
    if (result)
      goto LABEL_35;
LABEL_11:
    swift_release(v26);
    result = swift_bridgeObjectRelease(v30);
    v16 = v43;
    v15 = v44;
  }
  v31 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v31)
    goto LABEL_11;
LABEL_35:
  if (v31 >= 1)
  {
    v32 = 0;
    do
    {
      if ((v30 & 0xC000000000000001) != 0)
        v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v30);
      else
        v33 = *(id *)(v30 + 8 * v32 + 32);
      v34 = v33;
      ++v32;
      v47[3] = sub_100005ED8(0, (unint64_t *)&qword_1006406F0, UIView_ptr);
      v47[0] = v34;
      v46 = 0;
      memset(v45, 0, sizeof(v45));
      v35 = v34;
      sub_1000E9F7C((uint64_t)v47, v26, (uint64_t)v45);

      sub_1000073A0((uint64_t)v45, (uint64_t *)&unk_1006462D8);
      sub_1000073A0((uint64_t)v47, &qword_100640E50);
    }
    while (v31 != v32);
    goto LABEL_11;
  }
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

void sub_1000F0460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t i;
  char v44;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  _QWORD v51[4];
  _QWORD v52[6];

  v6 = v5;
  v8 = a1;
  v9 = swift_isaMask & *v6;
  v40 = v9;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = __CocoaSet.makeIterator()(v10);
    v13 = type metadata accessor for TTRITreeViewNode(0, *(_QWORD *)(v9 + 80), *(_QWORD *)(v9 + 88), v12);
    WitnessTable = swift_getWitnessTable(&unk_1005276C0, v13);
    v15 = Set.Iterator.init(_cocoa:)(v52, v11, v13, WitnessTable);
    v8 = v52[0];
    v42 = v52[1];
    v16 = v52[2];
    v17 = v52[3];
    v18 = v52[4];
  }
  else
  {
    v19 = -1 << *(_BYTE *)(a1 + 32);
    v42 = a1 + 56;
    v16 = ~v19;
    v20 = -v19;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v18 = v21 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v17 = 0;
  }
  v41 = (unint64_t)(v16 + 64) >> 6;
  v44 = a5 & 1;
  for (i = v8; ; v8 = i)
  {
    if (v8 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(v15);
      if (!v25)
        goto LABEL_43;
      v27 = v25;
      v28 = type metadata accessor for TTRITreeViewNode(0, *(_QWORD *)(v40 + 80), *(_QWORD *)(v40 + 88), v26);
      _forceBridgeFromObjectiveC<A>(_:_:)(v49, v27, v28, v28);
      swift_unknownObjectRelease(v27);
      v29 = *(uint64_t **)&v49[0];
      v24 = v17;
      v22 = v18;
      if (!*(_QWORD *)&v49[0])
        goto LABEL_43;
    }
    else
    {
      if (v18)
      {
        v22 = (v18 - 1) & v18;
        v23 = __clz(__rbit64(v18)) | (v17 << 6);
        v24 = v17;
      }
      else
      {
        v30 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_45;
        if (v30 >= v41)
          goto LABEL_43;
        v31 = *(_QWORD *)(v42 + 8 * v30);
        v24 = v17 + 1;
        if (!v31)
        {
          v24 = v17 + 2;
          if (v17 + 2 >= v41)
            goto LABEL_43;
          v31 = *(_QWORD *)(v42 + 8 * v24);
          if (!v31)
          {
            v24 = v17 + 3;
            if (v17 + 3 >= v41)
              goto LABEL_43;
            v31 = *(_QWORD *)(v42 + 8 * v24);
            if (!v31)
            {
              v32 = v17 + 4;
              while (v41 != v32)
              {
                v31 = *(_QWORD *)(v42 + 8 * v32++);
                if (v31)
                {
                  v24 = v32 - 1;
                  goto LABEL_29;
                }
              }
LABEL_43:
              sub_10003E410(v8);
              return;
            }
          }
        }
LABEL_29:
        v22 = (v31 - 1) & v31;
        v23 = __clz(__rbit64(v31)) + (v24 << 6);
      }
      v29 = *(uint64_t **)(*(_QWORD *)(v8 + 48) + 8 * v23);
      swift_retain();
      if (!v29)
        goto LABEL_43;
    }
    v48 = v24;
    v33 = (uint64_t)sub_1000F0A34(v29, a2, a3, a4, v44);
    v34 = v33;
    if (!((unint64_t)v33 >> 62))
      break;
    if (v33 >= 0)
      v33 &= 0xFFFFFFFFFFFFFF8uLL;
    v35 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (v35)
      goto LABEL_33;
LABEL_11:
    swift_release();
    v15 = (_QWORD *)swift_bridgeObjectRelease(v34);
    v18 = v22;
    v17 = v48;
  }
  v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v35)
    goto LABEL_11;
LABEL_33:
  if (v35 >= 1)
  {
    v36 = 0;
    do
    {
      if ((v34 & 0xC000000000000001) != 0)
        v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v34);
      else
        v37 = *(id *)(v34 + 8 * v36 + 32);
      v38 = v37;
      ++v36;
      v51[3] = sub_100005ED8(0, (unint64_t *)&qword_1006406F0, UIView_ptr);
      v51[0] = v38;
      v50 = 0;
      memset(v49, 0, sizeof(v49));
      v39 = v38;
      sub_1000288AC((uint64_t)v51, (uint64_t)v29, (uint64_t)v49);

      sub_1000073A0((uint64_t)v49, (uint64_t *)&unk_1006462D8);
      sub_1000073A0((uint64_t)v51, &qword_100640E50);
    }
    while (v35 != v36);
    goto LABEL_11;
  }
  __break(1u);
LABEL_45:
  __break(1u);
}

_QWORD *sub_1000F07FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t (*a8)(void), uint64_t (*a9)(char *, uint64_t, uint64_t, uint64_t, uint64_t, char **), uint64_t (*a10)(char *, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  char v37[24];

  v17 = a7(0);
  __chkstk_darwin(v17);
  v19 = &v37[-v18 - 8];
  v20 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 144);
  swift_beginAccess(v20, v37, 0, 0);
  sub_10002B1E8(v20, (uint64_t)v19, a7);
  LOBYTE(a8) = sub_1000FDEBC(a1, a2, a4, a8);
  v21 = sub_10002A750((uint64_t *)&unk_10064BB30);
  if ((a8 & 1) != 0)
  {
    v22 = swift_allocObject(v21, 48, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1005201E0;
    v23 = a5 & 1;
    *(_QWORD *)(v22 + 32) = a9(v19, a2, a3, a4, v23, &selRef_headerViewForSection_);
    v24 = a9(v19, a2, a3, a4, v23, &selRef_footerViewForSection_);
    *(_QWORD *)(v22 + 40) = v24;
  }
  else
  {
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100520250;
    v24 = a10(v19, a2, a3, a4, a5 & 1);
    *(_QWORD *)(v22 + 32) = v24;
  }
  v36 = v22;
  specialized Array._endMutation()(v24);
  v25 = v36;
  v26 = _swiftEmptyArrayStorage;
  v36 = (uint64_t)_swiftEmptyArrayStorage;
  v27 = *(_QWORD *)(v25 + 16);
  if (v27)
  {
    v28 = (void **)(v25 + 32);
    do
    {
      v31 = *v28++;
      v30 = v31;
      if (v31)
      {
        v32 = v30;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
        v34 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v33 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v34 >= v33 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
        specialized Array._endMutation()(v29);
      }
      --v27;
    }
    while (v27);
    v26 = (_QWORD *)v36;
  }
  swift_bridgeObjectRelease(v25);
  sub_10001F544((uint64_t)v19, a7);
  return v26;
}

_QWORD *sub_1000F0A34(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  char v34[24];

  v9 = a1;
  v10 = *(_QWORD *)(*a1 + 80);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(a1);
  v14 = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v12 + *(_QWORD *)(v15 + 144);
  v17 = swift_beginAccess(v16, v34, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v16, v10, v17);
  LOBYTE(v9) = sub_1000BF2C0(v9, a2, a3, a4);
  v18 = sub_10002A750((uint64_t *)&unk_10064BB30);
  if ((v9 & 1) != 0)
  {
    v19 = swift_allocObject(v18, 48, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1005201E0;
    v20 = a5 & 1;
    *(_QWORD *)(v19 + 32) = sub_1000E9550((uint64_t)v14, a2, a3, a4, v20, (SEL *)&selRef_headerViewForSection_);
    v21 = sub_1000E9550((uint64_t)v14, a2, a3, a4, v20, (SEL *)&selRef_footerViewForSection_);
    *(_QWORD *)(v19 + 40) = v21;
  }
  else
  {
    v19 = swift_allocObject(v18, 40, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100520250;
    v21 = sub_1000E91CC((uint64_t)v14, a2, a3, a4, a5 & 1);
    *(_QWORD *)(v19 + 32) = v21;
  }
  v33 = v19;
  specialized Array._endMutation()(v21);
  v22 = v33;
  v23 = _swiftEmptyArrayStorage;
  v33 = (uint64_t)_swiftEmptyArrayStorage;
  v24 = *(_QWORD *)(v22 + 16);
  if (v24)
  {
    v25 = (void **)(v22 + 32);
    do
    {
      v28 = *v25++;
      v27 = v28;
      if (v28)
      {
        v29 = v27;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        v31 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v30 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v31 >= v30 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
        specialized Array._endMutation()(v26);
      }
      --v24;
    }
    while (v24);
    v23 = (_QWORD *)v33;
  }
  swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v23;
}

double sub_1000F0C68@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  _BYTE v21[24];

  v3 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - v10;
  if (*(_BYTE *)(v1 + 32))
    v12 = 0;
  else
    v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_BYTE *)(v1 + 72);
  v14 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess(v14, v21, 0, 0);
  v15 = sub_10002B1E8(v14, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v15);
  sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
  sub_10002B1E8((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
  v16 = sub_1000175C8((unint64_t *)&qword_100644970, (uint64_t (*)(uint64_t))&type metadata accessor for TTRRemindersListViewModel.ItemID, (uint64_t)&protocol conformance descriptor for TTRRemindersListViewModel.ItemID);
  AnyHashable.init<A>(_:)(v19, v8, v6, v16);
  sub_10001F544((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v13;
  result = *(double *)v19;
  v18 = v19[1];
  *(_OWORD *)(a1 + 16) = v19[0];
  *(_OWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 48) = v20;
  return result;
}

double sub_1000F0E00@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  _BYTE v21[24];

  v3 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v19 - v10;
  if (*(_BYTE *)(v1 + 32))
    v12 = 0;
  else
    v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_BYTE *)(v1 + 72);
  v14 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess(v14, v21, 0, 0);
  v15 = sub_10002B1E8(v14, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
  TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v15);
  sub_10001F544((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
  sub_10002B1E8((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
  v16 = sub_1000175C8(&qword_100640E88, (uint64_t (*)(uint64_t))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (uint64_t)&protocol conformance descriptor for TTRAccountsListsViewModel.ItemIdentifier);
  AnyHashable.init<A>(_:)(v19, v9, v6, v16);
  sub_10001F544((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v13;
  result = *(double *)v19;
  v18 = v19[1];
  *(_OWORD *)(a1 + 16) = v19[0];
  *(_OWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 48) = v20;
  return result;
}

uint64_t sub_1000F0F98(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  result = IndexPath.row.getter();
  v3 = __OFADD__(result, v1);
  v4 = result + v1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = IndexPath.section.getter();
    return IndexPath.init(row:section:)(v4, v5);
  }
  return result;
}

void sub_1000F0FF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BYTE v11[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100012DC4(v6, (uint64_t)qword_100645EC0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "TTRITreeViewTableAdapter: updating for collapsed states change", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_1000E3758(v2, 1);
  }
}

void sub_1000F110C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  int64_t v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD v96[5];
  _QWORD v97[6];

  v82 = a3;
  v95 = a2;
  v4 = swift_isaMask & *a2;
  v5 = *(_QWORD *)(v4 + 0x50);
  v6 = type metadata accessor for Optional(0, v5);
  v91 = *(_QWORD *)(v6 - 8);
  v92 = v6;
  __chkstk_darwin(v6);
  v90 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v79 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v12);
  v85 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v93 = (char *)&v79 - v15;
  v16 = *(_QWORD *)(v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v16, v5, &unk_1005987EC, &unk_1005987FC);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v87 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v79 - v21;
  type metadata accessor for Optional(0, AssociatedTypeWitness);
  __chkstk_darwin(a1);
  v24 = (uint64_t *)((char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  v28 = (uint64_t *)((char *)&v79 - v27);
  v80 = v16;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (v26 < 0)
      v29 = v26;
    else
      v29 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v30 = __CocoaSet.makeIterator()(v29);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, v5, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
    Set.Iterator.init(_cocoa:)(v96, v30, AssociatedTypeWitness, AssociatedConformanceWitness);
    v32 = v96[0];
    v33 = v96[2];
    v88 = v96[1];
    v89 = v96[3];
    v34 = v96[4];
  }
  else
  {
    v35 = -1 << *(_BYTE *)(v26 + 32);
    v36 = *(_QWORD *)(v26 + 56);
    v88 = v26 + 56;
    v37 = ~v35;
    v38 = -v35;
    if (v38 < 64)
      v39 = ~(-1 << v38);
    else
      v39 = -1;
    v34 = v39 & v36;
    swift_bridgeObjectRetain(v26);
    v33 = v37;
    v89 = 0;
  }
  v84 = v32 & 0x7FFFFFFFFFFFFFFFLL;
  v81 = v33;
  v83 = (unint64_t)(v33 + 64) >> 6;
  v94 = v32;
  v86 = v24;
  while (v32 < 0)
  {
    v42 = __CocoaSet.Iterator.next()(v32);
    if (!v42)
      goto LABEL_33;
    v43 = v42;
    _forceBridgeFromObjectiveC<A>(_:_:)(v28, v42, AssociatedTypeWitness, AssociatedTypeWitness);
    swift_unknownObjectRelease(v43);
LABEL_31:
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v28, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(v22, v28, AssociatedTypeWitness);
    sub_1000F1E7C((uint64_t)v22, sub_1000BEF2C, v48, v49, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v22, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v92);
    }
    else
    {
      v50 = (uint64_t)v93;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v93, v10, v5);
      v51 = sub_1001000A4(v50, 5);
      v52 = v50;
      v24 = v86;
      (*(void (**)(uint64_t, uint64_t, double))(v11 + 8))(v52, v5, v51);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v22, AssociatedTypeWitness);
    }
    v32 = v94;
  }
  if (v34)
  {
    v40 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
    v41 = v40 | (v89 << 6);
LABEL_30:
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(v18 + 16))(v28, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v18 + 72) * v41, AssociatedTypeWitness);
    goto LABEL_31;
  }
  v44 = v89 + 1;
  if (__OFADD__(v89, 1))
  {
    __break(1u);
LABEL_67:
    __break(1u);
    return;
  }
  if (v44 >= v83)
    goto LABEL_33;
  v45 = *(_QWORD *)(v88 + 8 * v44);
  v46 = v89 + 1;
  if (v45)
    goto LABEL_29;
  v46 = v89 + 2;
  if (v89 + 2 >= v83)
    goto LABEL_33;
  v45 = *(_QWORD *)(v88 + 8 * v46);
  if (v45)
    goto LABEL_29;
  v46 = v89 + 3;
  if (v89 + 3 >= v83)
    goto LABEL_33;
  v45 = *(_QWORD *)(v88 + 8 * v46);
  if (v45)
  {
LABEL_29:
    v34 = (v45 - 1) & v45;
    v41 = __clz(__rbit64(v45)) + (v46 << 6);
    v89 = v46;
    goto LABEL_30;
  }
  v47 = v89 + 4;
  while (v83 != v47)
  {
    v45 = *(_QWORD *)(v88 + 8 * v47++);
    if (v45)
    {
      v46 = v47 - 1;
      goto LABEL_29;
    }
  }
LABEL_33:
  v93 = *(char **)(v18 + 56);
  ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v93)(v28, 1, 1, AssociatedTypeWitness);
  sub_10003E410(v94);
  if ((v82 & 0xC000000000000001) != 0)
  {
    if (v82 < 0)
      v53 = v82;
    else
      v53 = v82 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v82);
    v54 = __CocoaSet.makeIterator()(v53);
    v55 = swift_getAssociatedConformanceWitness(v80, v5, AssociatedTypeWitness, &unk_1005987EC, &unk_1005987F4);
    v56 = Set.Iterator.init(_cocoa:)(v97, v54, AssociatedTypeWitness, v55);
    v57 = v97[0];
    v88 = v97[1];
    v58 = v97[2];
    v94 = v97[3];
    v59 = v97[4];
  }
  else
  {
    v60 = -1 << *(_BYTE *)(v82 + 32);
    v61 = *(_QWORD *)(v82 + 56);
    v88 = v82 + 56;
    v58 = ~v60;
    v62 = -v60;
    if (v62 < 64)
      v63 = ~(-1 << v62);
    else
      v63 = -1;
    v59 = v63 & v61;
    swift_bridgeObjectRetain(v82);
    v57 = v82;
    v94 = 0;
  }
  v64 = (uint64_t)v87;
  v89 = v57 & 0x7FFFFFFFFFFFFFFFLL;
  v83 = v58;
  v84 = (unint64_t)(v58 + 64) >> 6;
  v65 = v57;
  v66 = (uint64_t)v90;
  while (2)
  {
    if (v57 < 0)
    {
      v69 = __CocoaSet.Iterator.next()(v56);
      if (!v69)
        goto LABEL_65;
      v70 = v69;
      _forceBridgeFromObjectiveC<A>(_:_:)(v24, v69, AssociatedTypeWitness, AssociatedTypeWitness);
      swift_unknownObjectRelease(v70);
      goto LABEL_63;
    }
    if (v59)
    {
      v67 = __clz(__rbit64(v59));
      v59 &= v59 - 1;
      v68 = v67 | (v94 << 6);
      goto LABEL_62;
    }
    v71 = v94 + 1;
    if (__OFADD__(v94, 1))
      goto LABEL_67;
    if (v71 >= v84)
      goto LABEL_65;
    v72 = *(_QWORD *)(v88 + 8 * v71);
    v73 = v94 + 1;
    if (v72)
      goto LABEL_61;
    v73 = v94 + 2;
    if (v94 + 2 >= v84)
      goto LABEL_65;
    v72 = *(_QWORD *)(v88 + 8 * v73);
    if (v72)
      goto LABEL_61;
    v73 = v94 + 3;
    if (v94 + 3 >= v84)
      goto LABEL_65;
    v72 = *(_QWORD *)(v88 + 8 * v73);
    if (v72)
    {
LABEL_61:
      v59 = (v72 - 1) & v72;
      v68 = __clz(__rbit64(v72)) + (v73 << 6);
      v94 = v73;
LABEL_62:
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16))(v24, *(_QWORD *)(v57 + 48) + *(_QWORD *)(v18 + 72) * v68, AssociatedTypeWitness);
LABEL_63:
      ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v93)(v24, 0, 1, AssociatedTypeWitness);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32))(v64, v24, AssociatedTypeWitness);
      sub_1000F1E7C(v64, sub_1000BEF2C, v75, v76, v66);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v66, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v64, AssociatedTypeWitness);
        v56 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v91 + 8))(v66, v92);
      }
      else
      {
        v77 = (uint64_t)v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v85, v66, v5);
        sub_10010039C(v77, 5);
        v78 = v77;
        v64 = (uint64_t)v87;
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v78, v5);
        v56 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v64, AssociatedTypeWitness);
      }
      v57 = v65;
      continue;
    }
    break;
  }
  v74 = v94 + 4;
  while (v84 != v74)
  {
    v72 = *(_QWORD *)(v88 + 8 * v74++);
    if (v72)
    {
      v73 = v74 - 1;
      goto LABEL_61;
    }
  }
LABEL_65:
  ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v93)(v24, 1, 1, AssociatedTypeWitness);
  sub_10003E410(v65);
}

void sub_1000F18D4()
{
  sub_10010368C();
}

double sub_1000F18F0(uint64_t a1)
{
  uint64_t v2;
  double result;

  sub_1000381C8(a1 + qword_100645EE8);
  swift_release();
  swift_unknownObjectUnownedDestroy(a1 + qword_100645EF8);

  sub_100027F10((_QWORD *)(a1 + qword_100645F08));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000072F0(*(_QWORD *)(a1 + qword_100645F30), *(_QWORD *)(a1 + qword_100645F30 + 8), *(_QWORD *)(a1 + qword_100645F30 + 16));
  swift_release();
  v2 = *(_QWORD *)(a1 + qword_100645F48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100645F48 + 8));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100645F50));
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

id sub_1000F1A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102098(a2, a3, sub_1001033C8);
}

id sub_1000F1A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102098(a2, a3, sub_1001033A8);
}

void sub_1000F1A80(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  char *v33;
  __n128 v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[40];
  _QWORD v67[2];
  _QWORD v68[5];
  _OWORD v69[3];

  v61 = *(_QWORD *)(*(_QWORD *)((swift_isaMask & *v1) + 0x50) - 8);
  __chkstk_darwin(a1);
  v62 = (char *)&v60 - v3;
  v63 = *(_QWORD *)(v4 + 88);
  v6 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v63, v5, &unk_1005987EC, &unk_1005987FC);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v60 - v11;
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  v64 = (char *)&v60 - v13;
  v15 = a1[3];
  v14 = a1[4];
  sub_10001413C(a1, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v67, v15, v14);
  if (v68[3])
  {
    sub_1001033E8((uint64_t)v68, (uint64_t)v66);
    v16 = sub_100092348((uint64_t)v67);
    AnyHashable.base.getter(v69, v16);
    sub_100041DDC((uint64_t)v66);
  }
  else
  {
    sub_1000073A0((uint64_t)v67, (uint64_t *)&unk_10065BDF0);
    memset(v69, 0, 32);
  }
  v17 = v65;
  v18 = sub_10002A750(&qword_100640E50);
  v19 = swift_dynamicCast(v12, v69, v18, AssociatedTypeWitness, 6);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if ((v19 & 1) == 0)
  {
    v20(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return;
  }
  v20(v12, 0, 1, AssociatedTypeWitness);
  v21 = (uint64_t)v64;
  v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v64, v12, AssociatedTypeWitness);
  v26 = sub_1000232AC(v22, v23, v24, v25);
  v28 = v27;
  v30 = v29;
  v32 = (uint64_t *)sub_1000BEF2C(v21, v26, v27, v29, v31 & 1, v6, v63);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v26);
  if (v32)
  {
    v33 = (char *)v32 + *(_QWORD *)(*v32 + 144);
    v34 = swift_beginAccess(v33, v67, 0, 0);
    v35 = v61;
    v36 = *(void (**)(char *, char *, uint64_t, __n128))(v61 + 16);
    v37 = (uint64_t)v62;
    v36(v62, v33, v6, v34);
    v41 = sub_1000E43F8(v37, v38, v39, v40);
    v42 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v42(v37, v6);
    if (!v41)
    {
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v21, AssociatedTypeWitness);
      swift_release();
      return;
    }
    if (objc_msgSend(*(id *)((char *)v1 + qword_100645F00), "style") != (id)2)
      goto LABEL_13;
    v46 = sub_1000232AC(2, v43, v44, v45);
    v48 = v47;
    v50 = v49;
    LODWORD(v63) = sub_1000BF2C0(v32, v46, v47, v49);
    swift_bridgeObjectRelease(v50);
    v51 = v48;
    v37 = (uint64_t)v62;
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v46);
    if ((v63 & 1) != 0)
      v52 = 0;
    else
LABEL_13:
      v52 = 3;
    ((void (*)(uint64_t, char *, uint64_t))v36)(v37, v33, v6);
    v58 = sub_1000E44A0(v37, v55, v56, v57);
    v42(v37, v6);
    ((void (*)(uint64_t, char *, uint64_t))v36)(v37, v33, v6);
    if (v58)
      sub_1001000A4(v37, v52);
    else
      sub_10010039C(v37, v52);
    v59 = swift_release();
    ((void (*)(uint64_t, uint64_t, __n128))v42)(v37, v6, v59);
    v54 = v64;
    v53 = *(void (**)(char *, uint64_t))(v65 + 8);
  }
  else
  {
    v53 = *(void (**)(char *, uint64_t))(v17 + 8);
    v54 = (char *)v21;
  }
  v53(v54, AssociatedTypeWitness);
}

uint64_t sub_1000F1E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1000F1E7C(a1, sub_10002B364, a2, a3, a4);
}

uint64_t sub_1000F1E7C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  _BYTE v24[24];

  v9 = swift_isaMask & *v5;
  v10 = sub_1000232AC(a1, (uint64_t)a2, a3, a4);
  v12 = v11;
  v14 = v13;
  v15 = *(_QWORD *)(v9 + 80);
  v17 = a2(a1, v10, v11, v13, v16 & 1, v15, *(_QWORD *)(v9 + 88));
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v12);
  v18 = swift_bridgeObjectRelease(v10);
  if (!v17)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 56))(a5, 1, 1, v15, v18);
  v19 = v17 + *(_QWORD *)(*(_QWORD *)v17 + 144);
  v20 = swift_beginAccess(v19, v24, 0, 0);
  v21 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 16))(a5, v19, v15, v20);
  v22 = swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v21 + 56))(a5, 0, 1, v15, v22);
}

uint64_t sub_1000F1FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  char v22;
  _BYTE v24[24];

  v6 = swift_isaMask & *v4;
  v7 = sub_1000232AC(a1, a2, a3, a4);
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 80);
  v13 = *(_QWORD *)(v6 + 88);
  v15 = sub_1000BEDB4(a1, v7, v8, v10, v14 & 1, v12, v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  if (v15)
  {
    if (*(_BYTE *)(v15 + 72) && *(_BYTE *)(v15 + 72) != 1)
    {
      swift_beginAccess(v15 + 64, v24, 0, 0);
      v17 = *(_QWORD *)(v15 + 64);
      v19 = type metadata accessor for TTRITreeViewNode(255, v12, v13, v18);
      v20 = type metadata accessor for Array(0, v19);
      swift_bridgeObjectRetain(v17);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
      v22 = Collection.isEmpty.getter(v20, WitnessTable);
      swift_bridgeObjectRelease(v17);
      swift_release();
      v16 = v22 ^ 1;
      return v16 & 1;
    }
    swift_release();
  }
  v16 = 0;
  return v16 & 1;
}

uint64_t sub_1000F20EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t WitnessTable;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  __n128 v62;
  char *v63;
  uint64_t v64;
  uint64_t inserted;
  char *v66;
  uint64_t v67;
  char *v68;
  int v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  int v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;

  v95 = a3;
  v90 = a2;
  v91 = a1;
  v92 = a4;
  v93 = swift_isaMask & *v4;
  v5 = *(_QWORD *)(v93 + 80);
  v89 = type metadata accessor for Optional(0, v5);
  v6 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v8 = (char *)&v83 - v7;
  v94 = v5;
  v9 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v83 - v14;
  v16 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v16);
  v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for IndexPath(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(v95, (uint64_t)v18, &qword_100646950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_1000073A0((uint64_t)v18, &qword_100646950);
    v24 = v94;
    v25 = *(_QWORD *)(v93 + 88);
LABEL_7:
    v68 = v92;
    inserted = type metadata accessor for TTRITreeViewTableAdapter.InsertDestination(0, v24, v25, v23);
    v66 = v68;
LABEL_8:
    v67 = 2;
    return swift_storeEnumTagMultiPayload(v66, inserted, v67);
  }
  v87 = v12;
  v88 = v8;
  v85 = v15;
  v86 = v6;
  v95 = v9;
  v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
  v27 = v19;
  v31 = sub_1000232AC(v26, v28, v29, v30);
  v33 = v32;
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)&v98 = v31;
  v24 = v94;
  v25 = *(_QWORD *)(v93 + 88);
  v36 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(255, v94, v25, v35);
  v37 = type metadata accessor for Array(0, v36);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v37);
  RandomAccessCollection<>.indices.getter(&v96, v37, WitnessTable, &protocol witness table for Int);
  swift_bridgeObjectRelease(v31);
  v98 = v96;
  v97 = IndexPath.section.getter(v39);
  v40 = sub_10002A750(&qword_100644730);
  v41 = Range.contains(_:)(&v97, v40);
  if ((v41 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v27);
    goto LABEL_7;
  }
  v93 = v27;
  v45 = sub_1000232AC(v41, v42, v43, v44);
  v47 = v46;
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v47);
  v50 = IndexPath.section.getter(v49);
  Array.subscript.getter(&v96, v50, v45, v36);
  swift_bridgeObjectRelease(v45);
  v84 = *((_QWORD *)&v96 + 1);
  *(_QWORD *)&v98 = *((_QWORD *)&v96 + 1);
  v51 = v96;
  v53 = type metadata accessor for TTRITreeViewNode(255, v24, v25, v52);
  v54 = type metadata accessor for Array(0, v53);
  v55 = swift_getWitnessTable(&protocol conformance descriptor for [A], v54);
  v56 = RandomAccessCollection<>.indices.getter(&v96, v54, v55, &protocol witness table for Int);
  v98 = v96;
  v97 = IndexPath.row.getter(v56);
  v57 = Range.contains(_:)(&v97, v40);
  if ((v57 & 1) == 0)
  {
    v70 = v90 & 1;
    v71 = v51 + *(_QWORD *)(*(_QWORD *)v51 + 144);
    v72 = swift_beginAccess(v71, &v96, 0, 0);
    v73 = v95;
    v74 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v95 + 16))(v87, v71, v24, v72);
    v75 = (uint64_t)v88;
    sub_1000F3634(v91, v70, v74, (uint64_t)v88);
    swift_bridgeObjectRelease(v84);
    v76 = swift_release();
    (*(void (**)(uint64_t, uint64_t, __n128))(v73 + 8))(v74, v24, v76);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v93);
    v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v75, 1, v24);
    v78 = v92;
    if (v77 != 1)
    {
      v80 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
      v81 = v85;
      v80(v85, v75, v24);
      v80(v78, (uint64_t)v81, v24);
      inserted = type metadata accessor for TTRITreeViewTableAdapter.InsertDestination(0, v24, v25, v82);
      v66 = v78;
      v67 = 1;
      return swift_storeEnumTagMultiPayload(v66, inserted, v67);
    }
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v75, v89);
    inserted = type metadata accessor for TTRITreeViewTableAdapter.InsertDestination(0, v24, v25, v79);
    v66 = v78;
    goto LABEL_8;
  }
  v58 = IndexPath.row.getter(v57);
  v59 = v84;
  Array.subscript.getter(&v98, v58, v84, v53);
  swift_bridgeObjectRelease(v59);
  v60 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v20 + 8))(v22, v93, v60);
  v61 = v98 + *(_QWORD *)(*(_QWORD *)v98 + 144);
  v62 = swift_beginAccess(v61, &v96, 0, 0);
  v63 = v92;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v95 + 16))(v92, v61, v24, v62);
  swift_release();
  inserted = type metadata accessor for TTRITreeViewTableAdapter.InsertDestination(0, v24, v25, v64);
  v66 = v63;
  v67 = 0;
  return swift_storeEnumTagMultiPayload(v66, inserted, v67);
}

uint64_t sub_1000F2648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t WitnessTable;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t Strong;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL4 v84;
  void (*v85)(__int128 *, _QWORD);
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t, __n128);
  char *v117;
  void (*v118)(uint64_t, uint64_t);
  char *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  __n128 v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  void (*v128)(char *, uint64_t);
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __n128 v139;
  void (*v140)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v141;
  uint64_t v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  _BOOL4 v156;
  char *v157;
  uint8_t *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __n128 v163;
  __n128 v164;
  void (*v165)(uint64_t, uint64_t);
  char *v166;
  uint64_t v167;
  __n128 v168;
  char *v169;
  char *v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t AssociatedConformanceWitness;
  char v174;
  __n128 v175;
  void (*v176)(char *, uint64_t, __n128);
  void (*v177)(char *, uint64_t, uint64_t);
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  __n128 v184;
  void (*v185)(char *, uint64_t);
  uint64_t v186;
  void (*v187)(char *, uint64_t, uint64_t);
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(char *, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  void (*v216)(char *, uint64_t);
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;

  v5 = v4;
  LODWORD(v204) = a3;
  v217 = a4;
  v8 = swift_isaMask & *v4;
  v9 = *(_QWORD *)(v8 + 0x50);
  v10 = type metadata accessor for Optional(0, v9);
  v200 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v199 = (uint64_t)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v201 = (uint64_t)&v189 - v14;
  __chkstk_darwin(v13);
  v197 = (uint64_t)&v189 - v15;
  v16 = *(_QWORD *)(v8 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v16, v9, &unk_1005987EC, &unk_1005987FC);
  v207 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v208 = AssociatedTypeWitness;
  v18 = __chkstk_darwin(AssociatedTypeWitness);
  v205 = (char *)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v206 = (char *)&v189 - v21;
  v213 = *(_QWORD *)(v9 - 8);
  v22 = __chkstk_darwin(v20);
  v198 = (char *)&v189 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v202 = (char *)&v189 - v25;
  v26 = __chkstk_darwin(v24);
  v196 = (char *)&v189 - v27;
  v28 = __chkstk_darwin(v26);
  v203 = (char *)&v189 - v29;
  __chkstk_darwin(v28);
  v209 = (char *)&v189 - v30;
  v218 = type metadata accessor for TTRITreeViewTableAdapter.MoveDestination(0, v9, v16, v31);
  v211 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v212 = (char *)&v189 - v32;
  v214 = type metadata accessor for IndexPath(0);
  v216 = *(void (**)(char *, uint64_t))(v214 - 8);
  v33 = __chkstk_darwin(v214);
  v210 = (char *)&v189 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v215 = (char *)&v189 - v36;
  v40 = sub_1000232AC(v35, v37, v38, v39);
  v42 = v41;
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v42);
  *(_QWORD *)&v220 = v40;
  v45 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(255, v9, v16, v44);
  v46 = type metadata accessor for Array(0, v45);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v46);
  RandomAccessCollection<>.indices.getter(&v219, v46, WitnessTable, &protocol witness table for Int);
  v48 = swift_bridgeObjectRelease(v40);
  v220 = v219;
  v221 = IndexPath.section.getter(v48);
  v49 = sub_10002A750(&qword_100644730);
  v50 = Range.contains(_:)(&v221, v49);
  if ((v50 & 1) == 0)
    goto LABEL_9;
  v54 = sub_1000232AC(v50, v51, v52, v53);
  v56 = v55;
  v58 = v57;
  v60 = sub_10002B364(a1, v54, v55, v57, v59 & 1, v9, v16);
  v61 = v58;
  v62 = v60;
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v54);
  if (!v62)
  {
LABEL_9:
    v87 = v217;
    v88 = v218;
    return swift_storeEnumTagMultiPayload(v87, v88, 4);
  }
  v195 = v5;
  Strong = swift_weakLoadStrong(v62 + 56);
  if (!Strong)
  {
    if (qword_10063D3C8 == -1)
      goto LABEL_12;
    goto LABEL_56;
  }
  v190 = v62 + 56;
  v193 = v62;
  v191 = v10;
  v64 = *(_QWORD *)(Strong + 16);
  swift_release();
  v69 = sub_1000232AC(v65, v66, v67, v68);
  v71 = v70;
  swift_bridgeObjectRelease(v72);
  v73 = swift_bridgeObjectRelease(v71);
  v74 = IndexPath.section.getter(v73);
  Array.subscript.getter(&v219, v74, v69, v45);
  swift_bridgeObjectRelease(v69);
  v194 = *((_QWORD *)&v219 + 1);
  v75 = v219;
  v76 = v215;
  v77 = v214;
  v192 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v216 + 2);
  v78 = v192(v215, a2, v214);
  v79 = IndexPath.section.getter(v78);
  v80 = IndexPath.section.getter(v79);
  if (v79 == v80)
  {
    v82 = IndexPath.row.getter(v80);
    v83 = IndexPath.row.getter(v82);
    v84 = v82 < v83;
    if (v82 < v83 && (v204 & 1) != 0)
    {
      v85 = (void (*)(__int128 *, _QWORD))IndexPath.row.modify(&v219);
      if (__OFADD__(*v86, 1))
      {
        __break(1u);
        goto LABEL_58;
      }
      ++*v86;
      v85(&v219, 0);
      v84 = 1;
    }
  }
  else
  {
    v84 = 0;
  }
  v97 = type metadata accessor for TTRITreeViewNode(0, v9, v16, v81);
  v98 = Array.count.getter(v194, v97);
  v99 = IndexPath.row.getter(v98);
  if (v98 < 0)
  {
    __break(1u);
LABEL_56:
    swift_once(&qword_10063D3C8, sub_1000E35C8);
LABEL_12:
    v90 = type metadata accessor for Logger(0);
    v91 = sub_100012DC4(v90, (uint64_t)qword_100645EC0);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.fault.getter(v92);
    v94 = os_log_type_enabled(v92, v93);
    v95 = v218;
    if (v94)
    {
      v96 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "section node cannot be moved", v96, 2u);
      swift_slowDealloc(v96, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
LABEL_32:
    v87 = v217;
    v88 = v95;
    return swift_storeEnumTagMultiPayload(v87, v88, 4);
  }
  if (v99 < 0 || v99 >= v98)
  {
    if (v98 == v99)
    {
      v204 = v75;
      v129 = v210;
      v192(v210, (uint64_t)v76, v77);
      v130 = v201;
      sub_1000F414C(v64, v201);
      v216 = (void (*)(char *, uint64_t))*((_QWORD *)v216 + 1);
      v216(v129, v77);
      v131 = v213;
      v132 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48);
      if (v132(v130, 1, v9) != 1)
      {
        v210 = *(char **)(v131 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v210)(v202, v130, v9);
        v165 = *(void (**)(uint64_t, uint64_t))(v16 + 24);
        v166 = v206;
        v165(v9, v16);
        v167 = v193 + *(_QWORD *)(*(_QWORD *)v193 + 144);
        v168 = swift_beginAccess(v167, &v219, 0, 0);
        v169 = v209;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v131 + 16))(v209, v167, v9, v168);
        v170 = v205;
        v165(v9, v16);
        v171 = *(void (**)(char *, uint64_t))(v131 + 8);
        v171(v169, v9);
        v172 = v208;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, v9, v208, &unk_1005987EC, &unk_1005987F4);
        v174 = dispatch thunk of static Equatable.== infix(_:_:)(v166, v170, v172, *(_QWORD *)(AssociatedConformanceWitness + 8));
        swift_bridgeObjectRelease(v194);
        swift_release();
        v175 = swift_release();
        v176 = *(void (**)(char *, uint64_t, __n128))(v207 + 8);
        v176(v170, v172, v175);
        ((void (*)(char *, uint64_t))v176)(v166, v172);
        v216(v76, v77);
        if ((v174 & 1) == 0)
        {
          v147 = v212;
          ((void (*)(char *, char *, uint64_t))v210)(v212, v202, v9);
          v148 = v147;
          v149 = v218;
          v150 = v218;
          v151 = 0;
          goto LABEL_44;
        }
        v171(v202, v9);
        goto LABEL_39;
      }
      v210 = *(char **)(v200 + 8);
      ((void (*)(uint64_t, uint64_t))v210)(v130, v191);
      v133 = sub_1000F4708(v9, v9);
      v134 = swift_allocObject(v133, ((*(unsigned __int8 *)(v131 + 80) + (unint64_t)*(unsigned int *)(v133 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80))+ *(_QWORD *)(v131 + 72), *(unsigned __int8 *)(v131 + 80) | (unint64_t)*(unsigned __int16 *)(v133 + 52));
      v135 = static Array._adoptStorage(_:count:)(v134, 1);
      v137 = v136;
      v138 = v193 + *(_QWORD *)(*(_QWORD *)v193 + 144);
      v139 = swift_beginAccess(v138, &v219, 0, 0);
      v140 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v213 + 16);
      v140(v137, v138, v9, v139);
      v141 = sub_1000BD87C(v135, v9);
      v142 = v204 + *(_QWORD *)(*(_QWORD *)v204 + 144);
      v143 = swift_beginAccess(v142, &v220, 0, 0);
      v144 = (uint64_t)v209;
      v140((uint64_t)v209, v142, v9, v143);
      v145 = v213;
      v146 = v199;
      sub_1000F3634(v141, 0, v144, v199);
      swift_release();
      swift_bridgeObjectRelease(v194);
      swift_release();
      swift_bridgeObjectRelease(v141);
      (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v144, v9);
      v216(v215, v77);
      if (v132(v146, 1, v9) != 1)
      {
        v177 = *(void (**)(char *, uint64_t, uint64_t))(v145 + 32);
        v178 = v198;
        v177(v198, v146, v9);
        v147 = v212;
        v177(v212, (uint64_t)v178, v9);
        v148 = v147;
        v149 = v218;
        v150 = v218;
        v151 = 2;
        goto LABEL_44;
      }
      ((void (*)(uint64_t, uint64_t))v210)(v146, v191);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v216 + 1))(v76, v77);
      swift_release();
      swift_bridgeObjectRelease(v194);
      swift_release();
    }
    v147 = v212;
    v148 = v212;
    v149 = v218;
    v150 = v218;
    v151 = 4;
LABEL_44:
    swift_storeEnumTagMultiPayload(v148, v150, v151);
    goto LABEL_45;
  }
  v103 = sub_1000232AC(v99, v100, v101, v102);
  v105 = v104;
  v106 = v76;
  v108 = v107;
  v110 = v109;
  v111 = (uint64_t)v210;
  v192(v210, (uint64_t)v106, v77);
  v112 = sub_10002B364(v111, v103, v105, v108, v110 & 1, v9, v16);
  swift_bridgeObjectRelease(v108);
  swift_bridgeObjectRelease(v105);
  swift_bridgeObjectRelease(v103);
  v76 = (char *)*((_QWORD *)v216 + 1);
  ((void (*)(uint64_t, uint64_t))v76)(v111, v77);
  if (!v112)
  {
    if (qword_10063D3C8 == -1)
    {
LABEL_29:
      v152 = type metadata accessor for Logger(0);
      v153 = sub_100012DC4(v152, (uint64_t)qword_100645EC0);
      v154 = Logger.logObject.getter(v153);
      v155 = static os_log_type_t.fault.getter(v154);
      v156 = os_log_type_enabled(v154, v155);
      v95 = v218;
      v157 = v215;
      if (v156)
      {
        v158 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v158 = 0;
        _os_log_impl((void *)&_mh_execute_header, v154, v155, "Failed to lookup node given a valid destinationIndexPath", v158, 2u);
        swift_slowDealloc(v158, -1, -1);
      }
      swift_release();
      swift_bridgeObjectRelease(v194);
      swift_release();

      ((void (*)(char *, uint64_t))v76)(v157, v77);
      goto LABEL_32;
    }
LABEL_58:
    swift_once(&qword_10063D3C8, sub_1000E35C8);
    goto LABEL_29;
  }
  LODWORD(v201) = v84;
  v216 = (void (*)(char *, uint64_t))v76;
  v204 = v75;
  v113 = v112 + *(_QWORD *)(*(_QWORD *)v112 + 144);
  v114 = swift_beginAccess(v113, &v219, 0, 0);
  v115 = v213;
  v116 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v213 + 16);
  v117 = v209;
  v116(v209, v113, v9, v114);
  v118 = *(void (**)(uint64_t, uint64_t))(v16 + 24);
  v202 = (char *)v112;
  v119 = v206;
  v118(v9, v16);
  v120 = *(void (**)(char *, uint64_t))(v115 + 8);
  v120(v117, v9);
  v121 = v193 + *(_QWORD *)(*(_QWORD *)v193 + 144);
  v122 = swift_beginAccess(v121, &v220, 0, 0);
  v123 = v203;
  v116(v203, v121, v9, v122);
  v124 = v205;
  v118(v9, v16);
  v120(v123, v9);
  v125 = v208;
  v126 = swift_getAssociatedConformanceWitness(v16, v9, v208, &unk_1005987EC, &unk_1005987F4);
  v127 = dispatch thunk of static Equatable.== infix(_:_:)(v119, v124, v125, *(_QWORD *)(v126 + 8));
  v128 = *(void (**)(char *, uint64_t))(v207 + 8);
  v128(v124, v125);
  v128(v119, v125);
  if ((v127 & 1) != 0)
  {
    v216(v215, v214);
    swift_release();
    swift_bridgeObjectRelease(v194);
    swift_release();
    swift_release();
LABEL_39:
    v147 = v212;
    v148 = v212;
    v149 = v218;
    v150 = v218;
    v151 = 3;
    goto LABEL_44;
  }
  v159 = v202;
  v147 = v212;
  ((void (*)(char *, uint64_t, uint64_t))v116)(v212, v113, v9);
  v149 = v218;
  swift_storeEnumTagMultiPayload(v147, v218, 1);
  v160 = v214;
  if (!(_DWORD)v201)
  {
    v216(v215, v214);
LABEL_41:
    swift_release();
    swift_bridgeObjectRelease(v194);
LABEL_49:
    swift_release();
    v164 = swift_release();
    goto LABEL_45;
  }
  v161 = swift_weakLoadStrong(v190);
  if (!v161)
    goto LABEL_48;
  v162 = *(_QWORD *)(v161 + 16);
  v163 = swift_release();
  if ((*(_BYTE *)(v193 + 32) & 1) != 0)
  {
    ((void (*)(char *, uint64_t, __n128))v216)(v215, v160, v163);
    swift_bridgeObjectRelease(v194);
    swift_release();
    swift_release();
    v164 = swift_release();
    goto LABEL_45;
  }
  if (v159[32] == 1)
  {
LABEL_48:
    v216(v215, v160);
    swift_release();
    swift_bridgeObjectRelease(v194);
    goto LABEL_49;
  }
  if (*((_QWORD *)v159 + 3) >= *(_QWORD *)(v193 + 24))
  {
    ((void (*)(char *, uint64_t, __n128))v216)(v215, v160, v163);
    goto LABEL_41;
  }
  v181 = v210;
  v182 = v215;
  ((void (*)(char *, char *, uint64_t, __n128))v192)(v210, v215, v160, v163);
  v183 = v197;
  sub_1000F414C(v162, v197);
  swift_release();
  swift_bridgeObjectRelease(v194);
  swift_release();
  v184 = swift_release();
  v185 = v216;
  ((void (*)(char *, uint64_t, __n128))v216)(v181, v160, v184);
  v185(v182, v160);
  v186 = v213;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v183, 1, v9) != 1)
  {
    v180 = v211;
    (*(void (**)(char *, uint64_t))(v211 + 8))(v147, v149);
    v187 = *(void (**)(char *, uint64_t, uint64_t))(v186 + 32);
    v188 = v196;
    v187(v196, v183, v9);
    v187(v147, (uint64_t)v188, v9);
    swift_storeEnumTagMultiPayload(v147, v149, 0);
    v179 = v217;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v180 + 32))(v179, v147, v149, v164);
  }
  (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v183, v191);
LABEL_45:
  v179 = v217;
  v180 = v211;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v180 + 32))(v179, v147, v149, v164);
}

uint64_t sub_1000F3634@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t WitnessTable;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  void *Strong;
  _QWORD *v40;
  _BYTE v41[4];
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[24];
  _BYTE v51[24];
  uint64_t v52;
  uint64_t v53;

  v5 = v4;
  v42 = a2;
  v43 = a1;
  v48 = a4;
  v7 = swift_isaMask & *v4;
  v8 = *(_QWORD *)(v7 + 0x50);
  v9 = type metadata accessor for Optional(0, v8);
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  v10 = __chkstk_darwin(v9);
  v45 = &v41[-v11];
  v12 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v10);
  v14 = &v41[-v13];
  v53 = Array.init()(v8);
  v18 = sub_1000232AC(v53, v15, v16, v17);
  v20 = v19;
  v22 = v21;
  v23 = *(_QWORD *)(v7 + 88);
  v44 = a3;
  v25 = sub_1000BEDB4(a3, v18, v19, v21, v24 & 1, v8, v23);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v18);
  if (v25)
  {
    while (*(_BYTE *)(v25 + 72) == 2)
    {
      v26 = v25 + *(_QWORD *)(*(_QWORD *)v25 + 144);
      v27 = swift_beginAccess(v26, v51, 0, 0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v12 + 16))(v14, v26, v8, v27);
      v28 = type metadata accessor for Array(0, v8);
      swift_retain();
      Array.append(_:)(v14, v28);
      swift_beginAccess(v25 + 64, v50, 0, 0);
      v49 = *(_QWORD *)(v25 + 64);
      v29 = v49;
      v31 = type metadata accessor for TTRITreeViewNode(255, v8, v23, v30);
      v32 = type metadata accessor for Array(0, v31);
      swift_bridgeObjectRetain(v29);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v32);
      BidirectionalCollection.last.getter(&v52, v32, WitnessTable);
      swift_bridgeObjectRelease(v29);
      swift_release_n(v25, 2);
      v25 = v52;
      if (!v52)
        goto LABEL_6;
    }
    swift_release();
  }
LABEL_6:
  v34 = v53;
  v52 = v53;
  v35 = type metadata accessor for Array(0, v8);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for [A], v35);
  if ((Collection.isEmpty.getter(v35, v36) & 1) != 0)
  {
    swift_bridgeObjectRelease(v34);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v48, 1, 1, v8);
  }
  else
  {
    if (sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4))
    {
      v38 = v42 & 1;
      Strong = (void *)swift_unknownObjectUnownedLoadStrong((char *)v5 + qword_100645EF8);
      v40 = v45;
      sub_100098DC4((uint64_t)Strong, v43, v38);
      swift_release();

    }
    else
    {
      v52 = v34;
      v40 = v45;
      Collection.first.getter(v45, v35, v36);
    }
    swift_bridgeObjectRelease(v34);
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v46 + 32))(v48, v40, v47);
  }
}

void sub_1000F3964(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  _QWORD *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inserted;
  uint64_t v30;
  char *v31;
  int v32;
  _QWORD *v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t WitnessTable;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  Class isa;
  double v125;
  CGFloat x;
  double v127;
  double v128;
  double v129;
  CGFloat width;
  double v131;
  CGFloat v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double y;
  CGFloat v139;
  char *v140;
  void *v141;
  char *v142;
  id v143;
  Class v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  CGFloat v150;
  __n128 v151;
  __n128 v152;
  double v153;
  __n128 v154;
  double Height;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;

  v165 = a1;
  v166 = a3;
  v164 = a4;
  v7 = a2 & 1;
  v8 = swift_isaMask & *v5;
  v9 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v9);
  v160 = (uint64_t)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v158 - v12;
  v14 = type metadata accessor for IndexPath(0);
  v161 = *(_QWORD *)(v14 - 8);
  v162 = v14;
  __chkstk_darwin(v14);
  v159 = (char *)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v158 - v17;
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 80) - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v158 - v24;
  v27 = v26;
  v163 = *(_QWORD *)(v8 + 88);
  inserted = type metadata accessor for TTRITreeViewTableAdapter.InsertDestination(0, v26, v163, v28);
  __chkstk_darwin(inserted);
  v31 = (char *)&v158 - v30;
  v32 = v7;
  v33 = v5;
  sub_1000F20EC(v165, v32, v166, (char *)&v158 - v30);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, inserted);
  v35 = 0;
  if (!EnumCaseMultiPayload)
  {
    v110 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v25, v31, v27);
    v114 = sub_1000232AC(v110, v111, v112, v113);
    v116 = v115;
    v118 = v117;
    sub_1000BF224((uint64_t)v25, v114, v115, v117, v119 & 1, v27, v163, (uint64_t)v13);
    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(v116);
    v120 = swift_bridgeObjectRelease(v114);
    v122 = v161;
    v121 = v162;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v161 + 48))(v13, 1, v162, v120) == 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v27);
      sub_1000073A0((uint64_t)v13, &qword_100646950);
      goto LABEL_18;
    }
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v18, v13, v121);
    v123 = *(id *)((char *)v33 + qword_100645F00);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v123, "rectForRowAtIndexPath:", isa);
    x = v125;
    v128 = v127;
    width = v129;
    v132 = v131;

    v170.origin.x = x;
    v170.origin.y = v128;
    v170.size.width = width;
    v170.size.height = v132;
    LOBYTE(v123) = CGRectIsEmpty(v170);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v18, v121);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v27);
    if ((v123 & 1) != 0)
      goto LABEL_18;
    v133 = v164;
LABEL_27:
    v175.size.height = 0.0;
    v175.origin.x = x;
    v175.origin.y = v128;
    v175.size.width = width;
    *(CGRect *)(&v135 - 1) = CGRectInset(v175, 0.0, a5 * -0.5);
    v35 = v157;
    v134 = 0;
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v36 = v19;
    v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, v31, v27);
    v41 = sub_1000232AC(v37, v38, v39, v40);
    v43 = v42;
    v45 = v44;
    v47 = (uint64_t *)sub_1000BEDB4((uint64_t)v22, v41, v42, v44, v46 & 1, v27, v163);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v43);
    v52 = swift_bridgeObjectRelease(v41);
    if (!v47)
    {
      (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v22, v27, v52);
      goto LABEL_18;
    }
    v53 = sub_1000232AC(v48, v49, v50, v51);
    v55 = v54;
    v57 = v56;
    v58 = (_QWORD *)sub_1000BDAC4(v47, v53, v54, v56);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v55);
    v63 = swift_bridgeObjectRelease(v53);
    if (v58)
    {
      v166 = v36;
      v64 = sub_1000232AC(v59, v60, v61, v62);
      v66 = v65;
      v68 = v67;
      v69 = sub_1000BD8F4(v58, v64, v65, v67);
      v70 = (uint64_t)v58;
      v72 = v71;
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v66);
      v77 = swift_bridgeObjectRelease(v64);
      if ((v72 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, __n128))(v166 + 8))(v22, v27, v77);
        swift_release();
      }
      else
      {
        v165 = v70;
        v78 = sub_1000232AC(v73, v74, v75, v76);
        v80 = v79;
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v80);
        v82 = v163;
        v84 = type metadata accessor for TTRITreeViewSectionsMetadata.Section(0, v27, v163, v83);
        Array.subscript.getter(&v168, v69, v78, v84);
        swift_bridgeObjectRelease(v78);
        swift_release();
        v85 = v169;
        v167 = v169;
        v87 = type metadata accessor for TTRITreeViewNode(255, v27, v82, v86);
        v88 = type metadata accessor for Array(0, v87);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v88);
        BidirectionalCollection.last.getter(&v168, v88, WitnessTable);
        *(_QWORD *)&v94 = swift_bridgeObjectRelease(v85).n128_u64[0];
        v95 = v168;
        if (v168)
        {
          v96 = sub_1000232AC(v90, v91, v92, v93);
          v98 = v97;
          v100 = v99;
          v102 = v160;
          sub_1000BD984(v95, v96, v99, v101 & 1, v160);
          swift_bridgeObjectRelease(v100);
          v103 = v98;
          v104 = v102;
          swift_bridgeObjectRelease(v103);
          v105 = swift_bridgeObjectRelease(v96);
          v107 = v161;
          v106 = v162;
          v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v161 + 48))(v104, 1, v162, v105);
          v109 = v166;
          if (v108 == 1)
          {
            (*(void (**)(char *, uint64_t))(v166 + 8))(v22, v27);
            swift_release();
            swift_release();
            swift_release();
            sub_1000073A0(v104, &qword_100646950);
            goto LABEL_18;
          }
          v140 = v159;
          (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v159, v104, v106);
          v141 = *(void **)((char *)v33 + qword_100645F00);
          v142 = v140;
          v143 = v141;
          v144 = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v143, "rectForRowAtIndexPath:", v144);
          x = v145;
          v147 = v146;
          width = v148;
          v150 = v149;

          v172.origin.x = x;
          v172.origin.y = v147;
          v172.size.width = width;
          v172.size.height = v150;
          if (CGRectIsEmpty(v172))
          {
            swift_release();
            swift_release();
            v151 = swift_release();
            (*(void (**)(char *, uint64_t, __n128))(v107 + 8))(v142, v106, v151);
            (*(void (**)(char *, uint64_t, __n128))(v109 + 8))(v22, v27, v152);
            goto LABEL_18;
          }
          v174.origin.x = x;
          v174.origin.y = v147;
          v174.size.width = width;
          v174.size.height = v150;
          Height = CGRectGetHeight(v174);
          swift_release();
          swift_release();
          v156 = swift_release();
          v128 = v147 + Height;
          (*(void (**)(char *, uint64_t, __n128))(v107 + 8))(v142, v106, v156);
          v133 = v164;
          goto LABEL_26;
        }
        objc_msgSend(*(id *)((char *)v33 + qword_100645F00), "rectForHeaderInSection:", v69, v94);
        x = v171.origin.x;
        y = v171.origin.y;
        width = v171.size.width;
        v139 = v171.size.height;
        if (!CGRectIsEmpty(v171))
        {
          v173.origin.x = x;
          v173.origin.y = y;
          v173.size.width = width;
          v173.size.height = v139;
          v153 = CGRectGetHeight(v173);
          swift_release();
          v154 = swift_release();
          v128 = y + v153;
          v133 = v164;
          v109 = v166;
LABEL_26:
          (*(void (**)(char *, uint64_t, __n128))(v109 + 8))(v22, v27, v154);
          goto LABEL_27;
        }
        (*(void (**)(char *, uint64_t))(v166 + 8))(v22, v27);
        swift_release();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v22, v27, v63);
    }
    swift_release();
  }
LABEL_18:
  v134 = 1;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v133 = v164;
LABEL_19:
  *(_QWORD *)v133 = v35;
  *(_QWORD *)(v133 + 8) = v135;
  *(_QWORD *)(v133 + 16) = v136;
  *(_QWORD *)(v133 + 24) = v137;
  *(_BYTE *)(v133 + 32) = v134;
}

uint64_t sub_1000F414C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];

  v5 = *v2;
  v6 = swift_isaMask;
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v36[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  result = IndexPath.row.getter(v9);
  v13 = result - 1;
  if (!__OFSUB__(result, 1))
  {
    v35 = a1;
    v14 = v6 & v5;
    v15 = IndexPath.section.getter(result);
    v16 = IndexPath.init(row:section:)(v13, v15);
    v20 = sub_1000232AC(v16, v17, v18, v19);
    v22 = v21;
    v24 = v23;
    v25 = *(_QWORD *)(v14 + 80);
    v27 = sub_10002B364((uint64_t)v11, v20, v21, v23, v26 & 1, v25, *(_QWORD *)(v14 + 88));
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v20);
    if (v27)
    {
      Strong = swift_weakLoadStrong(v27 + 56);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      if (Strong)
      {
        v29 = *(_QWORD *)(Strong + 16);
        swift_release();
        if (v29 == v35)
        {
          v30 = v27 + *(_QWORD *)(*(_QWORD *)v27 + 144);
          v31 = swift_beginAccess(v30, v36, 0, 0);
          v32 = *(_QWORD *)(v25 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v32 + 16))(a2, v30, v25, v31);
          v33 = swift_release();
          v34 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v32 + 56))(a2, v34, 1, v25, v33);
        }
      }
      v33 = swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    v32 = *(_QWORD *)(v25 - 8);
    v34 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v32 + 56))(a2, v34, 1, v25, v33);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TTRITreeViewAnimatingWrapper()
{
  return objc_opt_self(_TtC9RemindersP33_5FD5AAA012F98A2355B7634098A9176C28TTRITreeViewAnimatingWrapper);
}

id sub_1000F433C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), "startAnimation");
}

void sub_1000F4350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000F4388(a1, a2, a3, a4, (uint64_t)sub_100006378, (uint64_t)&unk_1005F17D8, (SEL *)&selRef_addAnimations_);
}

void sub_1000F436C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000F4388(a1, a2, a3, a4, (uint64_t)sub_1000D3A2C, (uint64_t)&unk_1005F17B0, (SEL *)&selRef_addCompletion_);
}

void sub_1000F4388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v7;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v10 = *(void **)(*(_QWORD *)v7 + 16);
  v13[4] = a1;
  v14 = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = a5;
  v13[3] = a6;
  v11 = _Block_copy(v13);
  v12 = v14;
  swift_retain(a2);
  swift_release(v12);
  objc_msgSend(v10, *a7, v11);
  _Block_release(v11);
}

uint64_t sub_1000F4420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE v13[24];

  v5 = swift_allocObject(&unk_1005F1838, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (_QWORD *)(v2 + 16);
  swift_beginAccess(v2 + 16, v13, 33, 0);
  v7 = *(_QWORD **)(v2 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  *(_QWORD *)(v2 + 16) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_1004557E4(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = sub_1004557E4((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = sub_10001B280;
  v11[5] = v5;
  return swift_endAccess(v13);
}

uint64_t sub_1000F451C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE v13[24];

  v5 = swift_allocObject(&unk_1005F1810, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (_QWORD *)(v2 + 24);
  swift_beginAccess(v2 + 24, v13, 33, 0);
  v7 = *(_QWORD **)(v2 + 24);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  *(_QWORD *)(v2 + 24) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_100455910(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = sub_100455910((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = sub_100103460;
  v11[5] = v5;
  return swift_endAccess(v13);
}

uint64_t sub_1000F4618(uint64_t a1, uint64_t a2)
{
  return sub_1000F4420(a1, a2);
}

uint64_t sub_1000F4638(uint64_t a1, uint64_t a2)
{
  return sub_1000F451C(a1, a2);
}

void sub_1000F4658(unint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5[2];

  v2 = *(_QWORD *)(type metadata accessor for IndexPath(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_1002B3770(v3);
  v4 = *(char **)(v3 + 16);
  v5[0] = (char *)(v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  v5[1] = v4;
  sub_1000F7454(v5);
  *a1 = v3;
}

uint64_t sub_1000F46DC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t sub_1000F4708(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType(a2))
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return sub_10002A750((uint64_t *)&unk_1006415A0);
  else
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
}

uint64_t sub_1000F4754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F4DA4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, a2);
}

uint64_t sub_1000F4778(uint64_t a1)
{
  return sub_1000F4998(a1, sub_100482B48, (uint64_t (*)(uint64_t, uint64_t))sub_1000F5320);
}

uint64_t sub_1000F478C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)(v6, v5);

    if ((v7 & 1) != 0)
    {
      sub_1000F543C(v5, (uint64_t)v6);
      v9 = v8;
      swift_bridgeObjectRelease(v4);
      return v9;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v10 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v11 = NSObject._rawHashValue(seed:)(v10);
  v12 = -1 << *(_BYTE *)(v4 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v4 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
    goto LABEL_15;
  sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
  v14 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
  v15 = static NSObject.== infix(_:_:)(v14, a1);

  if ((v15 & 1) == 0)
  {
    v16 = ~v12;
    do
    {
      v13 = (v13 + 1) & v16;
      if (((*(_QWORD *)(v4 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_15;
      v17 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v13);
      v18 = static NSObject.== infix(_:_:)(v17, a1);

    }
    while ((v18 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v20 = *v2;
  v23 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100482CDC();
    v20 = v23;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v13);
  sub_1000F56F0(v13);
  v21 = *v2;
  *v2 = v23;
  swift_bridgeObjectRelease(v21);
  return v9;
}

uint64_t sub_1000F4960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F4DA4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, a2);
}

uint64_t sub_1000F4984(uint64_t a1)
{
  return sub_1000F4998(a1, (void (*)(void))sub_100483584, (uint64_t (*)(uint64_t, uint64_t))sub_1000F55D4);
}

uint64_t sub_1000F4998(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  Swift::UInt v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[9];

  v4 = v3;
  v6 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v8 = *v4;
    else
      v8 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v9 = swift_retain(a1);
    v10 = __CocoaSet.contains(_:)(v9, v8);
    swift_release(a1);
    if ((v10 & 1) != 0)
    {
      v11 = a3(v8, a1);
      swift_bridgeObjectRelease(v6);
      return v11;
    }
    swift_bridgeObjectRelease(v6);
    return 0;
  }
  Hasher.init(_seed:)(v23, *(_QWORD *)(v6 + 40));
  v13 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v13);
  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v6 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
    return 0;
  v17 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(*(_QWORD *)(v17 + 8 * v16) + 16) != v13)
  {
    v18 = ~v15;
    do
    {
      v16 = (v16 + 1) & v18;
      if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(*(_QWORD *)(v17 + 8 * v16) + 16) != v13);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v20 = *v4;
  v23[0] = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v20 = v23[0];
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v16);
  sub_1000F5AE0(v16);
  v21 = *v4;
  *v4 = v23[0];
  swift_bridgeObjectRelease(v21);
  return v11;
}

uint64_t sub_1000F4B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_1000175C8((unint64_t *)&qword_1006463A0, v12, (uint64_t)&protocol conformance descriptor for IndexPath);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_1000175C8((unint64_t *)&qword_10063F648, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1004838DC();
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_1000F5E30(v16, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (unint64_t *)&qword_1006463A0, (uint64_t)&protocol conformance descriptor for IndexPath);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_1000F4D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F4DA4(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID, (void (*)(_QWORD *))&TTRRemindersListViewModel.SectionID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.SectionID.__derived_enum_equals(_:_:), (void (*)(void))sub_10048291C, a2);
}

uint64_t sub_1000F4DA4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, void (*a3)(_QWORD *)@<X2>, uint64_t (*a4)(char *, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD *);
  uint64_t *v33;
  uint64_t (*v34)(char *, uint64_t);
  _QWORD v35[9];

  v28 = a5;
  v34 = a4;
  v11 = a2(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - v13;
  v33 = v6;
  v15 = *v6;
  Hasher.init(_seed:)(v35, *(_QWORD *)(*v6 + 40));
  swift_bridgeObjectRetain(v15);
  v32 = a3;
  a3(v35);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    v30 = v11;
    v31 = a6;
    v19 = ~v17;
    v29 = v12;
    v20 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      sub_10002B1E8(*(_QWORD *)(v15 + 48) + v20 * v18, (uint64_t)v14, a2);
      v21 = v34(v14, a1);
      sub_10001F544((uint64_t)v14, a2);
      if ((v21 & 1) != 0)
        break;
      v18 = (v18 + 1) & v19;
      if (((*(_QWORD *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      {
        swift_bridgeObjectRelease(v15);
        v22 = 1;
        a6 = v31;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v15);
    v23 = v33;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v33);
    v25 = *v23;
    v35[0] = *v23;
    *v23 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28();
      v25 = v35[0];
    }
    a6 = v31;
    sub_10001F580(*(_QWORD *)(v25 + 48) + v20 * v18, v31, a2);
    sub_1000F5890(v18, a2, v32);
    v26 = *v23;
    *v23 = v35[0];
    swift_bridgeObjectRelease(v26);
    v22 = 0;
LABEL_10:
    v12 = v29;
    v11 = v30;
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v22 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a6, v22, 1, v11);
}

uint64_t sub_1000F4FAC(unsigned __int8 a1)
{
  _QWORD *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  v3 = *v1;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v1 + 40));
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 7;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(unsigned __int8 *)(v7 + v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 7;
    }
    while (*(unsigned __int8 *)(v7 + v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v10 = *v1;
  v14[0] = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1004838F0();
    v10 = v14[0];
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 48) + v6);
  sub_1000F5C88(v6);
  v12 = *v1;
  *v1 = v14[0];
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1000F50CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_1000175C8(&qword_1006463A8, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_1000175C8((unint64_t *)&qword_1006463B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100483A84();
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_1000F5E30(v16, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1006463A8, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

unint64_t sub_1000F5320(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::UInt v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t result;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[9];
  Swift::Int v18;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  swift_unknownObjectRetain(a1);
  v8 = sub_100488DD4(v7, v6);
  v18 = v8;
  Hasher.init(_seed:)(v17, *(_QWORD *)(v8 + 40));
  v9 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v9);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  result = v10 & ~v11;
  v13 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(v8 + 48);
  v15 = *(_QWORD *)(v14 + 8 * result);
  if (*(_QWORD *)(v15 + 16) != v9)
  {
    v16 = ~v11;
    while (1)
    {
      result = (result + 1) & v16;
      if (((*(_QWORD *)(v13 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        break;
      v15 = *(_QWORD *)(v14 + 8 * result);
      if (*(_QWORD *)(v15 + 16) == v9)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_6:
  result = sub_1000F5AE0(result);
  if (v9 == *(_QWORD *)(v15 + 16))
  {
    *v3 = v18;
    return v15;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_1000F543C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  swift_unknownObjectRetain(a1);
  v8 = sub_100488DF0(v7, v6);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain();
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    sub_100005ED8(0, qword_100646430, REMObjectID_ptr);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13, a2);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v18 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_1000F56F0(v12);
      if ((static NSObject.== infix(_:_:)(a2, v18) & 1) != 0)
      {
        *v3 = v19;
        return;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = static NSObject.== infix(_:_:)(v16, a2);

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  swift_release();
  __break(1u);
}

unint64_t sub_1000F55D4(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::UInt v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t result;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[9];
  Swift::Int v18;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  swift_unknownObjectRetain(a1);
  v8 = sub_1004891F0(v7, v6);
  v18 = v8;
  Hasher.init(_seed:)(v17, *(_QWORD *)(v8 + 40));
  v9 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v9);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  result = v10 & ~v11;
  v13 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(v8 + 48);
  v15 = *(_QWORD *)(v14 + 8 * result);
  if (*(_QWORD *)(v15 + 16) != v9)
  {
    v16 = ~v11;
    while (1)
    {
      result = (result + 1) & v16;
      if (((*(_QWORD *)(v13 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        break;
      v15 = *(_QWORD *)(v14 + 8 * result);
      if (*(_QWORD *)(v15 + 16) == v9)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_6:
  result = sub_1000F5AE0(result);
  if (v9 == *(_QWORD *)(v15 + 16))
  {
    *v3 = v18;
    return v15;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t sub_1000F56F0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000F5890(unint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD *))
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  Swift::Int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void (*v32)(_QWORD *);
  uint64_t v33;
  _QWORD v34[9];

  v32 = a3;
  v31 = a2(0);
  result = __chkstk_darwin(v31);
  v9 = (char *)&v29 - v8;
  v10 = *v3;
  v11 = *v3 + 56;
  v12 = -1 << *(_BYTE *)(*v3 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v29 = v7;
    v30 = v3;
    v14 = ~v12;
    swift_retain(v10);
    v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    v33 = v11;
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v16 = (v15 + 1) & v14;
      v17 = *(_QWORD *)(v29 + 72);
      while (1)
      {
        v18 = v17 * v13;
        sub_10002B1E8(*(_QWORD *)(v10 + 48) + v17 * v13, (uint64_t)v9, a2);
        Hasher.init(_seed:)(v34, *(_QWORD *)(v10 + 40));
        v32(v34);
        v19 = Hasher._finalize()();
        sub_10001F544((uint64_t)v9, a2);
        v20 = v19 & v14;
        if ((uint64_t)a1 >= (uint64_t)v16)
          break;
        if (v20 < v16)
          goto LABEL_11;
LABEL_12:
        v21 = *(_QWORD *)(v10 + 48);
        v22 = v17 * a1;
        v23 = v21 + v17 * a1;
        v24 = v21 + v18;
        if ((uint64_t)(v17 * a1) < v18 || v23 >= v24 + v17)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1, v31);
        }
        else
        {
          a1 = v13;
          if (v22 == v18)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v23, v24);
        }
        a1 = v13;
LABEL_6:
        v13 = (v13 + 1) & v14;
        if (((*(_QWORD *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_16;
      }
      if (v20 < v16)
        goto LABEL_6;
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v20)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_16:
    *(_QWORD *)(v33 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v10);
    v3 = v30;
  }
  else
  {
    *(_QWORD *)(v11 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v3;
  v26 = *(_QWORD *)(*v3 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
  return result;
}

unint64_t sub_1000F5AE0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v3 + 40));
        Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000F5C88(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v3 + 40));
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_BYTE *)(v12 + v2);
          v14 = (_BYTE *)(v12 + v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000F5E30(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v40 = a4;
  v38 = a2;
  v6 = a2(0);
  v41 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v9 = (char *)&v34 - v8;
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v35 = v4;
    v14 = ~v12;
    swift_retain(v10);
    v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v37 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v41 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v36(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        v20 = *(_QWORD *)(v10 + 40);
        v21 = sub_1000175C8(v39, v38, v40);
        v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v6, v21);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v6);
        v23 = v22 & v14;
        if (a1 >= (uint64_t)v37)
        {
          if (v23 >= v37 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            v26 = *(_QWORD *)(v10 + 48);
            v16 = v18;
            v27 = v18 * a1;
            v28 = v26 + v18 * a1;
            v29 = v26 + v19;
            if (v18 * a1 < v19 || v28 >= v29 + v18)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v29, 1, v6);
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v27 != v19)
              {
                swift_arrayInitWithTakeBackToFront(v28, v29);
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v37 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v10);
    v4 = v35;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v30 = *v4;
  v31 = *(_QWORD *)(*v4 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v30 + 16) = v33;
    ++*(_DWORD *)(v30 + 36);
  }
  return result;
}

Swift::Int sub_1000F60B8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34[9];

  if (!a3)
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10002A750(&qword_1006463E0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v17 = v15 + 2;
          if (v17 >= v33)
            return v9;
          v16 = v32[v17];
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v11 >= v33)
                return v9;
              v16 = v32[v11];
              ++v17;
              if (v16)
                goto LABEL_22;
            }
          }
          v11 = v17;
        }
      }
LABEL_22:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v19 = *(_QWORD *)(v4 + 56) + 16 * v14;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v9 + 40));
    Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v25) = v18;
    v30 = *(_QWORD *)(v9 + 56) + 16 * v25;
    *(_QWORD *)v30 = v20;
    *(_BYTE *)(v30 + 8) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    result = swift_retain();
    if (!v5)
      return v9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_1000F6338(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_10002A750(&qword_100646330);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v19 = *(_QWORD *)(v4 + 56) + 16 * v14;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v9 + 40));
    Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v25) = v18;
    v30 = *(_QWORD *)(v9 + 56) + 16 * v25;
    *(_QWORD *)v30 = v20;
    *(_BYTE *)(v30 + 8) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    result = swift_retain(v18);
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1000F65CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_24;
      v22 = *(_QWORD *)(v25 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_24;
        v22 = *(_QWORD *)(v25 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_24;
          v22 = *(_QWORD *)(v25 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    sub_10002B1E8(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    sub_10001F580((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    sub_1000F4DA4((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, (uint64_t)v5);
    sub_1000073A0((uint64_t)v5, (uint64_t *)&unk_1006463C0);
    sub_10001F544((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
  }
  v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

_QWORD *sub_1000F6844(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];

  v10 = *v5;
  if ((*v5 & 0xC000000000000001) == 0)
  {
    result = *(_QWORD **)(v10 + 16);
    if (!result)
      return result;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v13 = a1;
      else
        v13 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v14 = __CocoaSet.makeIterator()(v13);
      v15 = sub_10002A750(a2);
      v16 = sub_100023FEC(a3, a2, (uint64_t)&unk_1005276C0);
      result = Set.Iterator.init(_cocoa:)(v40, v14, v15, v16);
      a1 = v40[0];
      v37 = v40[1];
      v17 = v40[2];
      v18 = v40[3];
      v19 = v40[4];
    }
    else
    {
      v20 = -1 << *(_BYTE *)(a1 + 32);
      v37 = a1 + 56;
      v21 = ~v20;
      v22 = -v20;
      if (v22 < 64)
        v23 = ~(-1 << v22);
      else
        v23 = -1;
      v19 = v23 & *(_QWORD *)(a1 + 56);
      result = (_QWORD *)swift_bridgeObjectRetain(a1);
      v17 = v21;
      v18 = 0;
    }
    v35 = (unint64_t)(v17 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v19)
      {
        v24 = (v19 - 1) & v19;
        v25 = __clz(__rbit64(v19)) | (v18 << 6);
        v26 = v18;
      }
      else
      {
        v31 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
          return result;
        }
        if (v31 >= v35)
          return (_QWORD *)sub_10003E410(a1);
        v32 = *(_QWORD *)(v37 + 8 * v31);
        v26 = v18 + 1;
        if (!v32)
        {
          v26 = v18 + 2;
          if (v18 + 2 >= v35)
            return (_QWORD *)sub_10003E410(a1);
          v32 = *(_QWORD *)(v37 + 8 * v26);
          if (!v32)
          {
            v26 = v18 + 3;
            if (v18 + 3 >= v35)
              return (_QWORD *)sub_10003E410(a1);
            v32 = *(_QWORD *)(v37 + 8 * v26);
            if (!v32)
            {
              v26 = v18 + 4;
              if (v18 + 4 >= v35)
                return (_QWORD *)sub_10003E410(a1);
              v32 = *(_QWORD *)(v37 + 8 * v26);
              if (!v32)
              {
                v26 = v18 + 5;
                if (v18 + 5 >= v35)
                  return (_QWORD *)sub_10003E410(a1);
                v32 = *(_QWORD *)(v37 + 8 * v26);
                if (!v32)
                {
                  v33 = v18 + 6;
                  while (v35 != v33)
                  {
                    v32 = *(_QWORD *)(v37 + 8 * v33++);
                    if (v32)
                    {
                      v26 = v33 - 1;
                      goto LABEL_38;
                    }
                  }
                  return (_QWORD *)sub_10003E410(a1);
                }
              }
            }
          }
        }
LABEL_38:
        v24 = (v32 - 1) & v32;
        v25 = __clz(__rbit64(v32)) + (v26 << 6);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
      swift_retain(v30);
      if (!v30)
        return (_QWORD *)sub_10003E410(a1);
      while (1)
      {
        v34 = sub_1000F4998(v30, a4, a5);
        swift_release(v30);
        result = (_QWORD *)swift_release(v34);
        v18 = v26;
        v19 = v24;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v27 = __CocoaSet.Iterator.next()(result);
        if (v27)
        {
          v28 = v27;
          v38 = v27;
          swift_unknownObjectRetain(v27);
          v29 = sub_10002A750(a2);
          swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v29, 7);
          v30 = v39;
          swift_unknownObjectRelease(v28);
          v26 = v18;
          v24 = v19;
          if (v30)
            continue;
        }
        return (_QWORD *)sub_10003E410(a1);
      }
    }
  }
  if (v10 < 0)
    v11 = *v5;
  else
    v11 = v10 & 0xFFFFFFFFFFFFFF8;
  result = (_QWORD *)__CocoaSet.count.getter(v11);
  if (result)
    goto LABEL_8;
  return result;
}

void sub_1000F6B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_10002A750((uint64_t *)&unk_1006462C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_24;
      v22 = *(_QWORD *)(v25 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_24;
        v22 = *(_QWORD *)(v25 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_24;
          v22 = *(_QWORD *)(v25 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    sub_10002B1E8(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    sub_10001F580((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    sub_1000F4DA4((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, (uint64_t)v5);
    sub_1000073A0((uint64_t)v5, (uint64_t *)&unk_1006462C0);
    sub_10001F544((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
  }
  v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_1000F6DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;

  v3 = type metadata accessor for IndexPath(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10002A750(&qword_100646950);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v14 + 63) >> 6;
  v17 = swift_bridgeObjectRetain(a1);
  v18 = 0;
  if (!v16)
    goto LABEL_6;
LABEL_5:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * i, v3, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
      goto LABEL_26;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    sub_1000F4B2C((uint64_t)v6, (uint64_t)v10);
    sub_1000073A0((uint64_t)v10, &qword_100646950);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v16)
      goto LABEL_5;
LABEL_6:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v13 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v25)
        goto LABEL_25;
      v22 = *(_QWORD *)(v13 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v25)
          goto LABEL_25;
        v22 = *(_QWORD *)(v13 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v25)
            goto LABEL_25;
          v22 = *(_QWORD *)(v13 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_21:
    v16 = (v22 - 1) & v22;
  }
  v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v12, 1, 1, v3, v17);
LABEL_26:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v13 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

void sub_1000F707C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    sub_1000F4FAC(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_1000F71DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_10002A750(&qword_100644980);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTRRemindersListViewModel.SectionID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_24;
      v22 = *(_QWORD *)(v25 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_24;
        v22 = *(_QWORD *)(v25 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_24;
          v22 = *(_QWORD *)(v25 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    sub_10002B1E8(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    sub_10001F580((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
    sub_1000F4DA4((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID, (void (*)(_QWORD *))&TTRRemindersListViewModel.SectionID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.SectionID.__derived_enum_equals(_:_:), (void (*)(void))sub_10048291C, (uint64_t)v5);
    sub_1000073A0((uint64_t)v5, &qword_100644980);
    sub_10001F544((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.SectionID);
  }
  v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_1000F7454(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  char *v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char **v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  Swift::Int v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  char *v142;
  uint64_t v143;
  char **v144;
  char *v145;
  Swift::Int v146;
  uint64_t v147;
  uint64_t v148;

  v3 = type metadata accessor for IndexPath(0);
  v148 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v134 = (char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v145 = (char *)&v130 - v6;
  __chkstk_darwin(v7);
  v142 = (char *)&v130 - v8;
  __chkstk_darwin(v9);
  v141 = (char *)&v130 - v10;
  v11 = (Swift::Int)a1[1];
  v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if (v11 < 0)
      goto LABEL_141;
    if (v11)
      sub_1000F7ECC(0, v11, 1, a1);
    return;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_149;
  v144 = a1;
  v131 = v12;
  v137 = v1;
  if (v11 < 2)
  {
    v17 = (char *)_swiftEmptyArrayStorage;
    v136 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80));
    v130 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      v19 = _swiftEmptyArrayStorage[2];
LABEL_107:
      if (v19 >= 2)
      {
        v122 = *v144;
        do
        {
          v123 = v19 - 2;
          if (v19 < 2)
            goto LABEL_136;
          if (!v122)
            goto LABEL_148;
          v124 = *(_QWORD *)&v17[16 * v123 + 32];
          v125 = *(_QWORD *)&v17[16 * v19 + 24];
          v126 = v137;
          sub_1000F8144((unint64_t)&v122[*(_QWORD *)(v148 + 72) * v124], (unint64_t)&v122[*(_QWORD *)(v148 + 72) * *(_QWORD *)&v17[16 * v19 + 16]], (unint64_t)&v122[*(_QWORD *)(v148 + 72) * v125], v136);
          v137 = v126;
          if (v126)
            break;
          if (v125 < v124)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = sub_100392EE4((uint64_t)v17);
          if (v123 >= *((_QWORD *)v17 + 2))
            goto LABEL_138;
          v127 = &v17[16 * v123 + 32];
          *(_QWORD *)v127 = v124;
          *((_QWORD *)v127 + 1) = v125;
          v128 = *((_QWORD *)v17 + 2);
          if (v19 > v128)
            goto LABEL_139;
          memmove(&v17[16 * v19 + 16], &v17[16 * v19 + 32], 16 * (v128 - v19));
          *((_QWORD *)v17 + 2) = v128 - 1;
          v19 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease(v17);
      v129 = v130;
      v130[2] = 0;
      swift_bridgeObjectRelease(v129);
      return;
    }
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v148 + 80);
    v130 = (_QWORD *)v15;
    v136 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v17 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v20 = v18;
    v21 = v18 + 1;
    v135 = v18;
    if (v18 + 1 >= v11)
    {
      v32 = v18 + 1;
      v41 = v137;
      goto LABEL_58;
    }
    v22 = *v144;
    v146 = v11;
    v23 = v148;
    v24 = *(_QWORD *)(v148 + 72);
    v25 = *(void (**)(_QWORD, _QWORD, _QWORD))(v148 + 16);
    v26 = v141;
    v25(v141, &v22[v24 * v21], v3);
    v27 = &v22[v24 * v20];
    v28 = v142;
    v25(v142, v27, v3);
    v143 = sub_1000175C8(&qword_100646398, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    LODWORD(v140) = dispatch thunk of static Comparable.< infix(_:_:)(v26, v28, v3, v143);
    v29 = *(void (**)(_QWORD, _QWORD))(v23 + 8);
    v30 = v28;
    v20 = v135;
    v29(v30, v3);
    v29(v26, v3);
    v31 = v22;
    v32 = v20 + 2;
    v138 = v31;
    v147 = v24;
    if (v20 + 2 >= v146)
    {
      v41 = v137;
      v40 = v146;
      v39 = v24;
      if ((v140 & 1) == 0)
        break;
    }
    else
    {
      v132 = v17;
      v139 = v24 * v21;
      v33 = v31;
      v34 = v24 * v32;
      do
      {
        v35 = v32;
        v36 = v141;
        v25(v141, &v33[v34], v3);
        v37 = v142;
        v25(v142, &v33[v139], v3);
        v38 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v37, v3, v143);
        v29(v37, v3);
        v29(v36, v3);
        if (((v140 ^ v38) & 1) != 0)
        {
          v41 = v137;
          v17 = v132;
          v32 = v35;
          v20 = v135;
          v40 = v146;
          v39 = v147;
          if ((v140 & 1) == 0)
            goto LABEL_38;
          goto LABEL_26;
        }
        v32 = v35 + 1;
        v39 = v147;
        v33 += v147;
      }
      while (v146 != v35 + 1);
      v40 = v146;
      v32 = v146;
      v41 = v137;
      v17 = v132;
      v20 = v135;
      if ((v140 & 1) == 0)
        break;
    }
LABEL_26:
    if (v32 < v20)
      goto LABEL_142;
    if (v20 >= v32)
      break;
    v132 = v17;
    v42 = 0;
    v43 = v39 * (v32 - 1);
    v44 = v32 * v39;
    v45 = v20;
    v46 = v20 * v39;
    v47 = v144;
    v143 = v32;
    do
    {
      if (v45 != v32 + v42 - 1)
      {
        if (!v138)
          goto LABEL_147;
        v48 = v41;
        v49 = &v138[v46];
        v50 = &v138[v43];
        v140 = *(char **)(v148 + 32);
        ((void (*)(char *, char *, uint64_t))v140)(v134, &v138[v46], v3);
        if (v46 < v43 || v49 >= &v138[v44])
        {
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v3);
        }
        else if (v46 != v43)
        {
          swift_arrayInitWithTakeBackToFront(v49, v50);
        }
        ((void (*)(char *, char *, uint64_t))v140)(v50, v134, v3);
        v41 = v48;
        v32 = v143;
        v47 = v144;
        v39 = v147;
      }
      ++v45;
      --v42;
      v43 -= v39;
      v44 -= v39;
      v46 += v39;
    }
    while (v45 < v32 + v42);
    v17 = v132;
    v20 = v135;
    v40 = v146;
    if (v32 < v146)
      goto LABEL_41;
LABEL_58:
    if (v32 < v20)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v137 = v41;
    v143 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v17 = sub_100392A60(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    v71 = *((_QWORD *)v17 + 2);
    v70 = *((_QWORD *)v17 + 3);
    v19 = v71 + 1;
    if (v71 >= v70 >> 1)
      v17 = sub_100392A60((char *)(v70 > 1), v71 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v19;
    v72 = v17 + 32;
    v73 = &v17[16 * v71 + 32];
    v74 = v143;
    *(_QWORD *)v73 = v20;
    *((_QWORD *)v73 + 1) = v74;
    if (v71)
    {
      while (1)
      {
        v75 = v19 - 1;
        if (v19 >= 4)
        {
          v80 = &v72[16 * v19];
          v81 = *((_QWORD *)v80 - 8);
          v82 = *((_QWORD *)v80 - 7);
          v86 = __OFSUB__(v82, v81);
          v83 = v82 - v81;
          if (v86)
            goto LABEL_124;
          v85 = *((_QWORD *)v80 - 6);
          v84 = *((_QWORD *)v80 - 5);
          v86 = __OFSUB__(v84, v85);
          v78 = v84 - v85;
          v79 = v86;
          if (v86)
            goto LABEL_125;
          v87 = v19 - 2;
          v88 = &v72[16 * v19 - 32];
          v90 = *(_QWORD *)v88;
          v89 = *((_QWORD *)v88 + 1);
          v86 = __OFSUB__(v89, v90);
          v91 = v89 - v90;
          if (v86)
            goto LABEL_127;
          v86 = __OFADD__(v78, v91);
          v92 = v78 + v91;
          if (v86)
            goto LABEL_130;
          if (v92 >= v83)
          {
            v110 = &v72[16 * v75];
            v112 = *(_QWORD *)v110;
            v111 = *((_QWORD *)v110 + 1);
            v86 = __OFSUB__(v111, v112);
            v113 = v111 - v112;
            if (v86)
              goto LABEL_134;
            v103 = v78 < v113;
            goto LABEL_95;
          }
        }
        else
        {
          if (v19 != 3)
          {
            v104 = *((_QWORD *)v17 + 4);
            v105 = *((_QWORD *)v17 + 5);
            v86 = __OFSUB__(v105, v104);
            v97 = v105 - v104;
            v98 = v86;
            goto LABEL_89;
          }
          v77 = *((_QWORD *)v17 + 4);
          v76 = *((_QWORD *)v17 + 5);
          v86 = __OFSUB__(v76, v77);
          v78 = v76 - v77;
          v79 = v86;
        }
        if ((v79 & 1) != 0)
          goto LABEL_126;
        v87 = v19 - 2;
        v93 = &v72[16 * v19 - 32];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v96 = __OFSUB__(v94, v95);
        v97 = v94 - v95;
        v98 = v96;
        if (v96)
          goto LABEL_129;
        v99 = &v72[16 * v75];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v86 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v86)
          goto LABEL_132;
        if (__OFADD__(v97, v102))
          goto LABEL_133;
        if (v97 + v102 >= v78)
        {
          v103 = v78 < v102;
LABEL_95:
          if (v103)
            v75 = v87;
          goto LABEL_97;
        }
LABEL_89:
        if ((v98 & 1) != 0)
          goto LABEL_128;
        v106 = &v72[16 * v75];
        v108 = *(_QWORD *)v106;
        v107 = *((_QWORD *)v106 + 1);
        v86 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v86)
          goto LABEL_131;
        if (v109 < v97)
          goto LABEL_14;
LABEL_97:
        v114 = v75 - 1;
        if (v75 - 1 >= v19)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v144)
          goto LABEL_146;
        v115 = v17;
        v116 = &v72[16 * v114];
        v117 = *(_QWORD *)v116;
        v118 = &v72[16 * v75];
        v119 = *((_QWORD *)v118 + 1);
        v120 = v137;
        sub_1000F8144((unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * *(_QWORD *)v116], (unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * *(_QWORD *)v118], (unint64_t)&(*v144)[*(_QWORD *)(v148 + 72) * v119], v136);
        v137 = v120;
        if (v120)
        {
          v17 = v115;
          goto LABEL_118;
        }
        if (v119 < v117)
          goto LABEL_121;
        if (v75 > *((_QWORD *)v115 + 2))
          goto LABEL_122;
        *(_QWORD *)v116 = v117;
        *(_QWORD *)&v72[16 * v114 + 8] = v119;
        v121 = *((_QWORD *)v115 + 2);
        if (v75 >= v121)
          goto LABEL_123;
        v17 = v115;
        v19 = v121 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v121 - 1 - v75));
        *((_QWORD *)v115 + 2) = v121 - 1;
        if (v121 <= 2)
          goto LABEL_14;
      }
    }
    v19 = 1;
LABEL_14:
    v11 = (Swift::Int)v144[1];
    v18 = v143;
    if (v143 >= v11)
      goto LABEL_107;
  }
LABEL_38:
  v47 = v144;
  if (v32 >= v40)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v32, v20))
    goto LABEL_140;
  if (v32 - v20 >= v131)
    goto LABEL_58;
  if (__OFADD__(v20, v131))
    goto LABEL_143;
  if (v20 + v131 >= v40)
    v51 = v40;
  else
    v51 = v20 + v131;
  if (v51 >= v20)
  {
    if (v32 != v51)
    {
      v132 = v17;
      v133 = v51;
      v52 = *(_QWORD *)(v148 + 72);
      v53 = *(char **)(v148 + 16);
      v137 = v41;
      v138 = v53;
      v54 = v52 * (v32 - 1);
      v139 = v52;
      v147 = v32 * v52;
      do
      {
        v56 = 0;
        v143 = v32;
        v140 = (char *)v54;
        while (1)
        {
          v146 = v20;
          v57 = *v47;
          v58 = v141;
          v59 = v47;
          v60 = (void (*)(_QWORD, _QWORD, _QWORD))v138;
          ((void (*)(char *, char *, uint64_t))v138)(v141, &(*v47)[v147 + v56], v3);
          v61 = &v57[v54 + v56];
          v62 = v142;
          v60(v142, v61, v3);
          v63 = sub_1000175C8(&qword_100646398, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
          LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)(v58, v62, v3, v63);
          v64 = *(void (**)(_QWORD, _QWORD))(v148 + 8);
          v64(v62, v3);
          v64(v58, v3);
          if ((v57 & 1) == 0)
            break;
          v65 = *v59;
          if (!*v59)
            goto LABEL_145;
          v66 = &v65[v147 + v56];
          v54 = (uint64_t)v140;
          v67 = &v140[(_QWORD)v65 + v56];
          v68 = *(void (**)(_QWORD, _QWORD, _QWORD))(v148 + 32);
          v68(v145, v66, v3);
          swift_arrayInitWithTakeFrontToBack(v66, v67, 1, v3);
          v68(v67, v145, v3);
          v56 -= v139;
          v20 = v146 + 1;
          v55 = v143;
          v47 = v144;
          if (v143 == v146 + 1)
            goto LABEL_51;
        }
        v55 = v143;
        v47 = v59;
        v54 = (uint64_t)v140;
LABEL_51:
        v32 = v55 + 1;
        v54 += v139;
        v147 += v139;
        v20 = v135;
      }
      while (v32 != v133);
      v32 = v133;
      v41 = v137;
      v17 = v132;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1000F7ECC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a1;
  v7 = type metadata accessor for IndexPath(0);
  v38 = *(_QWORD **)(v7 - 8);
  __chkstk_darwin(v7);
  v37 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v34 = (char *)&v28 - v10;
  v12.n128_f64[0] = __chkstk_darwin(v11);
  v33 = (char *)&v28 - v13;
  v36 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v14 = v38[9];
    v31 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v32 = a4;
    v40 = v14 * (v36 - 1);
    v35 = v14;
    v39 = v14 * v36;
LABEL_5:
    v15 = 0;
    v16 = v30;
    while (1)
    {
      v17 = *a4;
      v18 = v33;
      v19 = v31;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v31)(v33, v39 + v15 + *a4, v7, v12);
      v20 = v34;
      v19(v34, v40 + v15 + v17, v7);
      v21 = sub_1000175C8(&qword_100646398, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v7, v21);
      v22 = (void (*)(char *, uint64_t))v38[1];
      v23 = v20;
      a4 = v32;
      v22(v23, v7);
      v22(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v40 += v35;
        v39 += v35;
        if (++v36 == v29)
          return;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = v24 + v39 + v15;
      v26 = (char *)(v24 + v40 + v15);
      v27 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v27(v37, v25, v7);
      swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v7);
      v27(v26, (uint64_t)v37, v7);
      v15 -= v35;
      if (v36 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1000F8144(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v51 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v50 = (char *)&v45 - v12;
  v52 = v9[9];
  if (!v52)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v52 == -1)
    goto LABEL_62;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v52 == -1)
    goto LABEL_63;
  v14 = (uint64_t)(a2 - a1) / v52;
  v55 = a1;
  v54 = a4;
  v15 = v13 / v52;
  if (v14 >= v13 / v52)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v52;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v15, v8);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v17;
      v53 = a4 + v17;
      v55 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v31 = -v52;
        v46 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v47 = v9;
        v48 = a4;
        v49 = a1;
        do
        {
          v52 = a3 + v31;
          v32 = v50;
          v33 = v46;
          v46(v50, v29 + v31, v8);
          v34 = a2 + v31;
          v35 = v31;
          v36 = v51;
          v33(v51, v34, v8);
          v37 = sub_1000175C8(&qword_100646398, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
          LOBYTE(v33) = dispatch thunk of static Comparable.< infix(_:_:)(v32, v36, v8, v37);
          v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v36, v8);
          v38(v32, v8);
          if ((v33 & 1) != 0)
          {
            v31 = v35;
            v39 = v52;
            if (a3 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v34, 1, v8);
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v52, v34);
            }
            v55 += v31;
          }
          else
          {
            v42 = v53;
            v43 = v53 + v35;
            v53 += v35;
            v31 = v35;
            v39 = v52;
            if (a3 < v42 || v52 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v43, 1, v8);
              v34 = a2;
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront(v52, v43);
              v34 = a2;
            }
          }
          v29 = v53;
          if (v53 <= v40)
            break;
          a2 = v34;
          a3 = v39;
        }
        while (v34 > v41);
      }
      goto LABEL_60;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v52;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v14, v8);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v49 = a4 + v16;
    v53 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v50;
        v19(v50, a2, v8);
        v22 = v51;
        v19(v51, a4, v8);
        v23 = sub_1000175C8(&qword_100646398, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
        v24 = dispatch thunk of static Comparable.< infix(_:_:)(v21, v22, v8, v23);
        v25 = (void (*)(char *, uint64_t))v9[1];
        v25(v22, v8);
        v25(v21, v8);
        v26 = v55;
        if ((v24 & 1) != 0)
        {
          v27 = a2 + v52;
          if (v55 < a2 || v55 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v55, a2, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 == a2)
              v26 = a2;
            else
              swift_arrayInitWithTakeBackToFront(v55, a2);
          }
        }
        else
        {
          v28 = v54 + v52;
          if (v55 < v54 || v55 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v55, v54, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 != v54)
              swift_arrayInitWithTakeBackToFront(v55, v54);
          }
          v54 = v28;
          v27 = a2;
        }
        v55 = v26 + v52;
        a4 = v54;
        if (v54 >= v49)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_60:
    sub_100392B58(&v55, &v54, (uint64_t *)&v53);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F8698(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000F8748(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  char v5;
  _BYTE *v6;

  if (!*(_QWORD *)(a2 + 16))
    return 100;
  v4 = a3(*a1);
  if ((v5 & 1) == 0)
    return 100;
  v6 = (_BYTE *)(*(_QWORD *)(a2 + 56) + 16 * v4);
  if (v6[8])
    return 100;
  else
    return *(_QWORD *)v6;
}

void sub_1000F879C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  _QWORD *v53;
  char v54[24];
  _OWORD v55[2];
  uint64_t v56;
  _QWORD *v57;

  v51 = a2;
  v52 = a3;
  v5 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v5);
  v50 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v49);
  v48 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v47 = (char *)&v41 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return;
  v43 = v3;
  v57 = _swiftEmptyArrayStorage;
  sub_1003D7E58(0, v10, 0);
  v11 = v57;
  v13 = sub_1000F8698(a1);
  v14 = 0;
  v15 = a1 + 64;
  v42 = a1 + 88;
  v44 = v10;
  v45 = v12;
  v46 = a1 + 64;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(a1 + 32))
  {
    v18 = (unint64_t)v13 >> 6;
    if ((*(_QWORD *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
      goto LABEL_26;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
    v20 = *(_QWORD *)(*(_QWORD *)v19 + 144);
    v53 = v11;
    v21 = v19 + v20;
    swift_beginAccess(v19 + v20, v54, 0, 0);
    v22 = v21;
    v23 = v50;
    sub_10002B1E8(v22, v50, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v24 = swift_retain();
    v25 = (uint64_t)v47;
    TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v24);
    sub_10001F544(v23, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v26 = v48;
    sub_10002B1E8(v25, v48, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v27 = sub_1000175C8((unint64_t *)&qword_100644970, (uint64_t (*)(uint64_t))&type metadata accessor for TTRRemindersListViewModel.ItemID, (uint64_t)&protocol conformance descriptor for TTRRemindersListViewModel.ItemID);
    AnyHashable.init<A>(_:)(v55, v26, v49, v27);
    sub_10001F544(v25, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    v28 = v51(v19);
    v11 = v53;
    v29 = v28;
    swift_release();
    v57 = v11;
    v30 = a1;
    v32 = v11[2];
    v31 = v11[3];
    if (v32 >= v31 >> 1)
    {
      sub_1003D7E58(v31 > 1, v32 + 1, 1);
      v11 = v57;
    }
    v11[2] = v32 + 1;
    v33 = &v11[6 * v32];
    v34 = v55[1];
    v35 = v56;
    *((_OWORD *)v33 + 2) = v55[0];
    *((_OWORD *)v33 + 3) = v34;
    v33[8] = v35;
    v33[9] = v29;
    v16 = 1 << *(_BYTE *)(v30 + 32);
    if (v13 >= v16)
      goto LABEL_27;
    v15 = v46;
    v36 = *(_QWORD *)(v46 + 8 * v18);
    if ((v36 & (1 << v13)) == 0)
      goto LABEL_28;
    a1 = v30;
    LODWORD(v12) = v45;
    if (*(_DWORD *)(v30 + 36) != (_DWORD)v45)
      goto LABEL_29;
    v37 = v36 & (-2 << (v13 & 0x3F));
    if (v37)
    {
      v16 = __clz(__rbit64(v37)) | v13 & 0xFFFFFFFFFFFFFFC0;
      v17 = v44;
    }
    else
    {
      v38 = v18 + 1;
      v39 = (unint64_t)(v16 + 63) >> 6;
      v17 = v44;
      if (v18 + 1 < v39)
      {
        v40 = *(_QWORD *)(v46 + 8 * v38);
        if (!v40)
        {
          v38 = v18 + 2;
          if (v18 + 2 >= v39)
            goto LABEL_4;
          v40 = *(_QWORD *)(v46 + 8 * v38);
          if (!v40)
          {
            while (v39 - 3 != v18)
            {
              v40 = *(_QWORD *)(v42 + 8 * v18++);
              if (v40)
              {
                v38 = v18 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        v16 = __clz(__rbit64(v40)) + (v38 << 6);
      }
    }
LABEL_4:
    ++v14;
    v13 = v16;
    if (v14 == v17)
      return;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t sub_1000F8B34(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  _QWORD *v54;
  char v55[24];
  _OWORD v56[2];
  uint64_t v57;
  _QWORD *v58;

  v52 = a2;
  v53 = a3;
  v5 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  __chkstk_darwin(v5);
  v51 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  v7 = __chkstk_darwin(v50);
  v49 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v48 = (char *)&v42 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (!v10)
    return (uint64_t)v11;
  v44 = v3;
  v58 = _swiftEmptyArrayStorage;
  sub_1003D7E58(0, v10, 0);
  v11 = v58;
  result = sub_1000F8698(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v43 = a1 + 88;
  v45 = v10;
  v46 = v13;
  v47 = a1 + 64;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
  {
    v19 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14);
    v21 = *(_QWORD *)(*(_QWORD *)v20 + 144);
    v54 = v11;
    v22 = v20 + v21;
    swift_beginAccess(v20 + v21, v55, 0, 0);
    v23 = v22;
    v24 = v51;
    sub_10002B1E8(v23, v51, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v25 = swift_retain(v20);
    v26 = (uint64_t)v48;
    TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v25);
    sub_10001F544(v24, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v27 = v49;
    sub_10002B1E8(v26, v49, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    v28 = sub_1000175C8(&qword_100640E88, (uint64_t (*)(uint64_t))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (uint64_t)&protocol conformance descriptor for TTRAccountsListsViewModel.ItemIdentifier);
    AnyHashable.init<A>(_:)(v56, v27, v50, v28);
    sub_10001F544(v26, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    v29 = v52(v20);
    v11 = v54;
    v30 = v29;
    result = swift_release(v20);
    v58 = v11;
    v31 = a1;
    v33 = v11[2];
    v32 = v11[3];
    if (v33 >= v32 >> 1)
    {
      result = sub_1003D7E58(v32 > 1, v33 + 1, 1);
      v11 = v58;
    }
    v11[2] = v33 + 1;
    v34 = &v11[6 * v33];
    v35 = v56[1];
    v36 = v57;
    *((_OWORD *)v34 + 2) = v56[0];
    *((_OWORD *)v34 + 3) = v35;
    v34[8] = v36;
    v34[9] = v30;
    v17 = 1 << *(_BYTE *)(v31 + 32);
    if (v14 >= v17)
      goto LABEL_27;
    v16 = v47;
    v37 = *(_QWORD *)(v47 + 8 * v19);
    if ((v37 & (1 << v14)) == 0)
      goto LABEL_28;
    a1 = v31;
    LODWORD(v13) = v46;
    if (*(_DWORD *)(v31 + 36) != (_DWORD)v46)
      goto LABEL_29;
    v38 = v37 & (-2 << (v14 & 0x3F));
    if (v38)
    {
      v17 = __clz(__rbit64(v38)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v18 = v45;
    }
    else
    {
      v39 = v19 + 1;
      v40 = (unint64_t)(v17 + 63) >> 6;
      v18 = v45;
      if (v19 + 1 < v40)
      {
        v41 = *(_QWORD *)(v47 + 8 * v39);
        if (!v41)
        {
          v39 = v19 + 2;
          if (v19 + 2 >= v40)
            goto LABEL_4;
          v41 = *(_QWORD *)(v47 + 8 * v39);
          if (!v41)
          {
            while (v40 - 3 != v19)
            {
              v41 = *(_QWORD *)(v43 + 8 * v19++);
              if (v41)
              {
                v39 = v19 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        v17 = __clz(__rbit64(v41)) + (v39 << 6);
      }
    }
LABEL_4:
    ++v15;
    v14 = v17;
    if (v15 == v18)
      return (uint64_t)v11;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000F8ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  char v6;
  double v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  *(_QWORD *)(v2 + qword_100645F10) = a1;
  swift_retain();
  swift_release();
  v4 = *(void **)(v2 + qword_100645F00);
  if (a1)
  {
    swift_retain();
    v5 = v4;
    v6 = sub_100022FD4();
    *(_QWORD *)&v7 = swift_release().n128_u64[0];
    if ((v6 & 1) != 0)
      v8 = v2;
    else
      v8 = 0;
  }
  else
  {
    v9 = v4;
    v8 = 0;
  }
  objc_msgSend(v4, "setDataSource:", v8, v7);

  v10 = v2 + qword_100645F30;
  v11 = *(_QWORD *)(v2 + qword_100645F30);
  v12 = *(_QWORD *)(v2 + qword_100645F30 + 8);
  v13 = *(_QWORD *)(v2 + qword_100645F30 + 16);
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 24) = 0;
  return sub_1000072F0(v11, v12, v13);
}

id sub_1000F8F8C(void *a1, uint64_t *a2, _QWORD *a3, SEL *a4)
{
  uint64_t v4;
  void *v8;
  id v9;

  v8 = *(void **)(v4 + *a2);
  *(_QWORD *)(v4 + *a2) = a1;
  v9 = a1;

  return sub_1000E36FC(a2, a3, a4);
}

uint64_t sub_1000F8FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = IndexPath.section.getter();
  v5 = 0;
  if (v4 < 0 || v4 >= v3)
    return v5;
  v6 = IndexPath.section.getter();
  if (v6 < 0 || v6 >= v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  v7 = v2 + 16 * v6;
  v2 = *(_QWORD *)(v7 + 32);
  v3 = *(_QWORD *)(v7 + 40);
  if ((unint64_t)v3 >> 62)
  {
LABEL_14:
    if (v3 < 0)
      v12 = v3;
    else
      v12 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_retain(v2);
    swift_bridgeObjectRetain(v3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v12);
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_22;
    __break(1u);
LABEL_19:
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v3);
LABEL_12:
    swift_bridgeObjectRelease(v3);
    swift_release(v2);
    return v5;
  }
  v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain(v2);
  v9 = swift_bridgeObjectRetain(v3);
  v10 = IndexPath.row.getter(v9);
  if ((v10 & 0x8000000000000000) == 0)
  {
    while (v10 < v8)
    {
      v11 = IndexPath.row.getter(v10);
      if ((v3 & 0xC000000000000001) != 0)
        goto LABEL_19;
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v11 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v5 = *(_QWORD *)(v3 + 8 * v11 + 32);
        swift_retain(v5);
        goto LABEL_12;
      }
      __break(1u);
LABEL_22:
      v8 = v11;
      v10 = IndexPath.row.getter(v11);
      if ((v10 & 0x8000000000000000) != 0)
        break;
    }
  }
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  return 0;
}

void sub_1000F9120(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int64_t v28;
  uint64_t v29;
  uint64_t v31[2];
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v35 = &_swiftEmptySetSingleton;
  v36 = &_swiftEmptySetSingleton;
  v33 = &_swiftEmptySetSingleton;
  v34 = &_swiftEmptySetSingleton;
  v32 = &_swiftEmptySetSingleton;
  v29 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  if (v8)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v9++, 1))
  {
    __break(1u);
  }
  else
  {
    if (v9 >= v28)
      goto LABEL_28;
    v13 = *(_QWORD *)(v29 + 8 * v9);
    if (v13)
    {
LABEL_15:
      v8 = (v13 - 1) & v13;
      for (i = __clz(__rbit64(v13)) + (v9 << 6); ; i = v10 | (v9 << 6))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
        v16 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * i);
        v18 = *v16;
        v17 = v16[1];
        swift_retain();
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(a2);
        v20 = sub_1000FB198(v19, v15);
        swift_bridgeObjectRelease(a2);
        swift_retain();
        swift_bridgeObjectRetain(a3);
        v22 = sub_1000FB198(v21, v15);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(a3);
        swift_release();
        if ((v20 & 1) != 0)
        {
          if ((v22 & 1) != 0 && (~(_BYTE)v17 & 3) == 0)
          {
            swift_retain();
            sub_100480BE8(v31, v15);
            swift_release();
          }
        }
        else if ((v22 & 1) == 0)
        {
          swift_release();
          if (!v8)
            goto LABEL_7;
          goto LABEL_6;
        }
        sub_100480BE8(v31, v15);
        swift_release();
        if (!v8)
          goto LABEL_7;
LABEL_6:
        v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
      }
    }
    v14 = v9 + 1;
    if (v9 + 1 >= v28)
      goto LABEL_28;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    if (v13)
    {
LABEL_14:
      v9 = v14;
      goto LABEL_15;
    }
    v14 = v9 + 2;
    if (v9 + 2 >= v28)
    {
LABEL_28:
      swift_release();
      v23 = v35;
      v25 = v33;
      v24 = v34;
      v26 = v32;
      *a4 = v36;
      a4[1] = v23;
      a4[2] = v24;
      a4[3] = v25;
      a4[4] = v26;
      return;
    }
    v13 = *(_QWORD *)(v29 + 8 * v14);
    if (v13)
      goto LABEL_14;
    while (1)
    {
      v9 = v14 + 1;
      if (__OFADD__(v14, 1))
        break;
      if (v9 >= v28)
        goto LABEL_28;
      v13 = *(_QWORD *)(v29 + 8 * v9);
      ++v14;
      if (v13)
        goto LABEL_15;
    }
  }
  __break(1u);
}

void sub_1000F9398(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, _QWORD *a10, _QWORD *a11, _QWORD *a12, char a13)
{
  void *v18;
  void *v19;
  BOOL v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  int64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  void **v148;
  void **v149;
  void **v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  int64_t v165;
  _QWORD *v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  int v172;
  int v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD v176[2];
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  _QWORD v192[5];
  _QWORD v193[5];
  _QWORD v194[5];
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  _QWORD v199[7];

  v174 = a7;
  v170 = a5;
  v171 = a6;
  v190 = &_swiftEmptySetSingleton;
  v191 = &_swiftEmptySetSingleton;
  v188 = &_swiftEmptySetSingleton;
  v189 = &_swiftEmptySetSingleton;
  v187 = &_swiftEmptySetSingleton;
  v18 = *a1;
  v198 = a1[1];
  v199[0] = v18;
  v19 = a1[2];
  v196 = a1[3];
  v197 = v19;
  v195 = a1[4];
  v185 = (uint64_t)v198;
  v186 = (uint64_t)v18;
  v183 = (uint64_t)v196;
  v184 = (uint64_t)v19;
  v182 = (uint64_t)v195;
  sub_10002DF4C(v199);
  sub_10002DF4C(&v198);
  sub_10002DF4C(&v197);
  sub_10002DF4C(&v196);
  sub_10002DF4C(&v195);
  sub_10002DF4C(v199);
  sub_10002DF4C(&v198);
  sub_10002DF4C(&v197);
  sub_10002DF4C(&v196);
  sub_10002DF4C(&v195);
  v20 = sub_1000E2754();
  sub_1000522B0(v199);
  sub_1000522B0(&v198);
  sub_1000522B0(&v197);
  sub_1000522B0(&v196);
  sub_1000522B0(&v195);
  if (v20)
  {
    sub_1000522B0(v199);
    sub_1000522B0(&v198);
    sub_1000522B0(&v197);
    sub_1000522B0(&v196);
    sub_1000522B0(&v195);
    v21 = &_swiftEmptySetSingleton;
    v22 = &_swiftEmptySetSingleton;
    v23 = &_swiftEmptySetSingleton;
    v24 = &_swiftEmptySetSingleton;
    v25 = &_swiftEmptySetSingleton;
LABEL_97:
    *a9 = v25;
    a9[1] = v24;
    a9[2] = v23;
    a9[3] = v22;
    a9[4] = v21;
    return;
  }
  v140 = a9;
  v156 = a2 & 0xC000000000000001;
  v153 = a3 & 0xC000000000000001;
  v151 = a4 & 0xC000000000000001;
  v169 = a12;
  v149 = &v179;
  v150 = &v178;
  v148 = &v180;
  v166 = a11;
  v168 = a10;
  v26 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v26 = a2;
  v146 = v26;
  v147 = &v181;
  v154 = a3;
  v155 = a2;
  v173 = a8 & 1;
  v172 = a13 & 1;
  if (a3 < 0)
    v27 = a3;
  else
    v27 = a3 & 0xFFFFFFFFFFFFFF8;
  v142 = a3 + 56;
  v143 = a2 + 56;
  v28 = a4 & 0xFFFFFFFFFFFFFF8;
  if (a4 < 0)
    v28 = a4;
  v144 = v28;
  v145 = v27;
  v152 = a4;
  v141 = a4 + 56;
  v158 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v177 = &_swiftEmptySetSingleton;
    v178 = &_swiftEmptySetSingleton;
    v179 = &_swiftEmptySetSingleton;
    v180 = &_swiftEmptySetSingleton;
    v181 = &_swiftEmptySetSingleton;
    if (v156)
    {
      swift_bridgeObjectRetain(v155);
      v44 = __CocoaSet.makeIterator()(v146);
      v45 = sub_10002A750(&qword_1006463D0);
      v46 = sub_100023FEC(&qword_1006463D8, &qword_1006463D0, (uint64_t)&unk_1005276C0);
      v47 = Set.Iterator.init(_cocoa:)(v192, v44, v45, v46);
      v48 = v192[0];
      v167 = v192[1];
      v50 = v192[2];
      v49 = v192[3];
      v51 = v192[4];
    }
    else
    {
      v48 = v155;
      v52 = -1 << *(_BYTE *)(v155 + 32);
      v50 = ~v52;
      v53 = -v52;
      v54 = v53 < 64 ? ~(-1 << v53) : -1;
      v51 = v54 & *(_QWORD *)(v155 + 56);
      swift_bridgeObjectRetain(v155);
      v49 = 0;
      v167 = v143;
    }
    v164 = (_QWORD *)(v48 & 0x7FFFFFFFFFFFFFFFLL);
    v165 = (unint64_t)(v50 + 64) >> 6;
    if ((v48 & 0x8000000000000000) == 0)
      break;
    while (1)
    {
      v58 = __CocoaSet.Iterator.next()(v47);
      if (!v58)
        break;
      v59 = v58;
      v175 = v58;
      swift_unknownObjectRetain(v58);
      v60 = sub_10002A750(&qword_1006463D0);
      swift_dynamicCast(v176, &v175, (char *)&type metadata for Swift.AnyObject + 8, v60, 7);
      v61 = (_QWORD *)v176[0];
      v62 = swift_unknownObjectRelease(v59);
      v57 = v49;
      v55 = v51;
      if (!v61)
        break;
LABEL_38:
      __chkstk_darwin(v62);
      v65 = v171;
      *(&v140 - 10) = v170;
      *(&v140 - 9) = v65;
      *(&v140 - 8) = v174;
      *((_BYTE *)&v140 - 56) = v173;
      v66 = v166;
      *(&v140 - 6) = v168;
      *(&v140 - 5) = v66;
      *(&v140 - 4) = v169;
      *((_BYTE *)&v140 - 24) = v172;
      *(&v140 - 2) = v61;
      v67 = sub_10002A750(&qword_1006463E8);
      Set.removeAll(where:)(sub_10010311C, &v140 - 12, v67);
      swift_release();
      v49 = v57;
      v51 = v55;
      if ((v48 & 0x8000000000000000) == 0)
        goto LABEL_19;
    }
LABEL_40:
    sub_10003E410(v48);
    if (v153)
    {
      swift_bridgeObjectRetain(v154);
      v68 = __CocoaSet.makeIterator()(v145);
      v69 = sub_10002A750(&qword_1006463D0);
      v70 = sub_100023FEC(&qword_1006463D8, &qword_1006463D0, (uint64_t)&unk_1005276C0);
      v71 = Set.Iterator.init(_cocoa:)(v193, v68, v69, v70);
      v72 = v193[0];
      v161 = v193[1];
      v73 = v193[2];
      v74 = v193[3];
      v75 = v193[4];
    }
    else
    {
      v72 = v154;
      v76 = -1 << *(_BYTE *)(v154 + 32);
      v73 = ~v76;
      v77 = -v76;
      if (v77 < 64)
        v78 = ~(-1 << v77);
      else
        v78 = -1;
      v75 = v78 & *(_QWORD *)(v154 + 56);
      swift_bridgeObjectRetain(v154);
      v74 = 0;
      v161 = v142;
    }
    v159 = v72 & 0x7FFFFFFFFFFFFFFFLL;
    v160 = (unint64_t)(v73 + 64) >> 6;
    v162 = v72;
    v163 = (_QWORD *)v73;
    if (v72 < 0)
    {
      while (1)
      {
        v82 = __CocoaSet.Iterator.next()(v71);
        if (!v82)
          break;
        v83 = v82;
        v175 = v82;
        swift_unknownObjectRetain(v82);
        v84 = sub_10002A750(&qword_1006463D0);
        swift_dynamicCast(v176, &v175, (char *)&type metadata for Swift.AnyObject + 8, v84, 7);
        v85 = (_QWORD *)v176[0];
        v86 = swift_unknownObjectRelease(v83);
        v81 = v74;
        v79 = v75;
        if (!v85)
          break;
LABEL_66:
        v89 = v174;
        v164 = &v140;
        __chkstk_darwin(v86);
        v167 = v79;
        v91 = v170;
        v90 = v171;
        *(&v140 - 10) = v170;
        *(&v140 - 9) = v90;
        *(&v140 - 8) = v89;
        *((_BYTE *)&v140 - 56) = v173;
        v93 = v168;
        v92 = v169;
        v94 = v166;
        *(&v140 - 6) = v168;
        *(&v140 - 5) = v94;
        *(&v140 - 4) = v92;
        *((_BYTE *)&v140 - 24) = v172;
        *(&v140 - 2) = v85;
        v95 = sub_10002A750(&qword_1006463E8);
        v165 = v81;
        v96 = v95;
        v97 = Set.removeAll(where:)(sub_100103144, &v140 - 12, v95);
        v164 = &v140;
        __chkstk_darwin(v97);
        *(&v140 - 10) = v91;
        *(&v140 - 9) = v90;
        *(&v140 - 8) = v89;
        v72 = v162;
        *((_BYTE *)&v140 - 56) = v173;
        *(&v140 - 6) = v93;
        *(&v140 - 5) = v94;
        *(&v140 - 4) = v169;
        *((_BYTE *)&v140 - 24) = v172;
        *(&v140 - 2) = v85;
        *(&v140 - 1) = &v177;
        Set.removeAll(where:)(sub_1001035E0, &v140 - 12, v96);
        swift_release();
        v74 = v165;
        v75 = v167;
        if ((v72 & 0x8000000000000000) == 0)
          goto LABEL_47;
      }
    }
    else
    {
LABEL_47:
      if (v75)
      {
        v79 = (v75 - 1) & v75;
        v80 = __clz(__rbit64(v75)) | (v74 << 6);
        v81 = v74;
        goto LABEL_65;
      }
      v81 = v74 + 1;
      if (__OFADD__(v74, 1))
        goto LABEL_99;
      if (v81 < v160)
      {
        v87 = *(_QWORD *)(v161 + 8 * v81);
        if (v87)
          goto LABEL_64;
        if (v74 + 2 >= v160)
          goto LABEL_68;
        v87 = *(_QWORD *)(v161 + 8 * (v74 + 2));
        if (v87)
        {
          v81 = v74 + 2;
LABEL_64:
          v79 = (v87 - 1) & v87;
          v80 = __clz(__rbit64(v87)) + (v81 << 6);
LABEL_65:
          v85 = *(_QWORD **)(*(_QWORD *)(v72 + 48) + 8 * v80);
          v86 = swift_retain();
          if (!v85)
            goto LABEL_68;
          goto LABEL_66;
        }
        v81 = v74 + 3;
        if (v74 + 3 >= v160)
          goto LABEL_68;
        v87 = *(_QWORD *)(v161 + 8 * v81);
        if (v87)
          goto LABEL_64;
        v88 = v74 + 4;
        while (v160 != v88)
        {
          v87 = *(_QWORD *)(v161 + 8 * v88++);
          if (v87)
          {
            v81 = v88 - 1;
            goto LABEL_64;
          }
        }
      }
    }
LABEL_68:
    sub_10003E410(v72);
    if (v151)
    {
      swift_bridgeObjectRetain(v152);
      v98 = __CocoaSet.makeIterator()(v144);
      v99 = sub_10002A750(&qword_1006463D0);
      v100 = sub_100023FEC(&qword_1006463D8, &qword_1006463D0, (uint64_t)&unk_1005276C0);
      v101 = Set.Iterator.init(_cocoa:)(v194, v98, v99, v100);
      v102 = v194[0];
      v161 = v194[1];
      v103 = v194[3];
      v157 = v194[2];
      v104 = v194[4];
    }
    else
    {
      v102 = v152;
      v105 = -1 << *(_BYTE *)(v152 + 32);
      v157 = ~v105;
      v106 = -v105;
      if (v106 < 64)
        v107 = ~(-1 << v106);
      else
        v107 = -1;
      v104 = v107 & *(_QWORD *)(v152 + 56);
      swift_bridgeObjectRetain(v152);
      v103 = 0;
      v161 = v141;
    }
    v159 = v102 & 0x7FFFFFFFFFFFFFFFLL;
    v160 = (unint64_t)(v157 + 64) >> 6;
    v162 = v102;
    if (v102 < 0)
      goto LABEL_77;
    while (1)
    {
      if (v104)
      {
        v108 = (v104 - 1) & v104;
        v109 = __clz(__rbit64(v104)) | (v103 << 6);
        v110 = v103;
      }
      else
      {
        v110 = v103 + 1;
        if (__OFADD__(v103, 1))
          goto LABEL_100;
        if (v110 >= v160)
          break;
        v116 = *(_QWORD *)(v161 + 8 * v110);
        if (!v116)
        {
          if (v103 + 2 >= v160)
            break;
          v116 = *(_QWORD *)(v161 + 8 * (v103 + 2));
          if (v116)
          {
            v110 = v103 + 2;
          }
          else
          {
            v110 = v103 + 3;
            if (v103 + 3 >= v160)
              break;
            v116 = *(_QWORD *)(v161 + 8 * v110);
            if (!v116)
            {
              v117 = v103 + 4;
              while (v160 != v117)
              {
                v116 = *(_QWORD *)(v161 + 8 * v117++);
                if (v116)
                {
                  v110 = v117 - 1;
                  goto LABEL_92;
                }
              }
              break;
            }
          }
        }
LABEL_92:
        v108 = (v116 - 1) & v116;
        v109 = __clz(__rbit64(v116)) + (v110 << 6);
      }
      v114 = *(_QWORD **)(*(_QWORD *)(v102 + 48) + 8 * v109);
      v115 = swift_retain();
      if (!v114)
        break;
      while (1)
      {
        v163 = &v140;
        __chkstk_darwin(v115);
        v119 = v169;
        v118 = v170;
        *(&v140 - 10) = v170;
        v120 = v118;
        v121 = v171;
        *(&v140 - 9) = v171;
        v122 = v121;
        v165 = v108;
        *(&v140 - 8) = v174;
        *((_BYTE *)&v140 - 56) = v173;
        v123 = v166;
        *(&v140 - 6) = v168;
        *(&v140 - 5) = v123;
        v124 = v123;
        *(&v140 - 4) = v119;
        v125 = v172;
        *((_BYTE *)&v140 - 24) = v172;
        v167 = (unint64_t)v114;
        *(&v140 - 2) = v114;
        v126 = sub_10002A750(&qword_1006463E8);
        v164 = (_QWORD *)v110;
        v127 = Set.removeAll(where:)(sub_10010311C, &v140 - 12, v126);
        v163 = &v140;
        __chkstk_darwin(v127);
        *(&v140 - 10) = v120;
        *(&v140 - 9) = v122;
        v128 = v174;
        *(&v140 - 8) = v174;
        LOBYTE(v122) = v173;
        *((_BYTE *)&v140 - 56) = v173;
        v129 = (_QWORD *)v167;
        v130 = v168;
        *(&v140 - 6) = v168;
        *(&v140 - 5) = v124;
        *(&v140 - 4) = v119;
        *((_BYTE *)&v140 - 24) = v125;
        *(&v140 - 2) = v129;
        v131 = Set.removeAll(where:)(sub_100103144, &v140 - 12, v126);
        v163 = &v140;
        __chkstk_darwin(v131);
        v133 = v170;
        v132 = v171;
        *(&v140 - 10) = v170;
        *(&v140 - 9) = v132;
        *(&v140 - 8) = v128;
        *((_BYTE *)&v140 - 56) = (_BYTE)v122;
        *(&v140 - 6) = v130;
        *(&v140 - 5) = v124;
        v134 = v124;
        *(&v140 - 4) = v119;
        LOBYTE(v124) = v172;
        *((_BYTE *)&v140 - 24) = v172;
        *(&v140 - 2) = (_QWORD *)v167;
        v135 = Set.removeAll(where:)(sub_100103144, &v140 - 12, v126);
        v163 = &v140;
        __chkstk_darwin(v135);
        v136 = v171;
        *(&v140 - 10) = v133;
        *(&v140 - 9) = v136;
        *(&v140 - 8) = v174;
        LOBYTE(v130) = v173;
        *((_BYTE *)&v140 - 56) = v173;
        v137 = v168;
        *(&v140 - 6) = v168;
        *(&v140 - 5) = v134;
        *(&v140 - 4) = v119;
        *((_BYTE *)&v140 - 24) = (_BYTE)v124;
        v138 = (_QWORD *)v167;
        *(&v140 - 2) = (_QWORD *)v167;
        *(&v140 - 1) = &v177;
        v139 = Set.removeAll(where:)(sub_1001035B0, &v140 - 12, v126);
        __chkstk_darwin(v139);
        *(&v140 - 10) = v170;
        *(&v140 - 9) = v136;
        v102 = v162;
        *(&v140 - 8) = v174;
        *((_BYTE *)&v140 - 56) = (_BYTE)v130;
        *(&v140 - 6) = v137;
        *(&v140 - 5) = v134;
        *(&v140 - 4) = v169;
        *((_BYTE *)&v140 - 24) = v172;
        *(&v140 - 2) = v138;
        Set.removeAll(where:)(sub_100103144, &v140 - 12, v126);
        swift_release();
        v103 = (uint64_t)v164;
        v104 = v165;
        if ((v102 & 0x8000000000000000) == 0)
          break;
LABEL_77:
        v111 = __CocoaSet.Iterator.next()(v101);
        if (v111)
        {
          v112 = v111;
          v175 = v111;
          swift_unknownObjectRetain(v111);
          v113 = sub_10002A750(&qword_1006463D0);
          swift_dynamicCast(v176, &v175, v158, v113, 7);
          v114 = (_QWORD *)v176[0];
          v115 = swift_unknownObjectRelease(v112);
          v110 = v103;
          v108 = v104;
          if (v114)
            continue;
        }
        goto LABEL_11;
      }
    }
LABEL_11:
    sub_10003E410(v102);
    v29 = v185;
    v30 = v186;
    v32 = v183;
    v31 = v184;
    v33 = v182;
    swift_bridgeObjectRetain(v186);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    v167 = v30;
    sub_1004777FC(v30);
    swift_bridgeObjectRetain(v29);
    sub_1004777FC(v34);
    swift_bridgeObjectRetain(v31);
    v164 = (_QWORD *)v31;
    sub_1004777FC(v35);
    swift_bridgeObjectRetain(v32);
    sub_1004777FC(v36);
    swift_bridgeObjectRetain(v33);
    sub_1004777FC(v37);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v31);
    v165 = v29;
    swift_bridgeObjectRelease(v29);
    sub_1000F6844(v30, &qword_1006463D0, &qword_1006463D8, sub_100482B48, (uint64_t (*)(uint64_t, uint64_t))sub_1000F5320);
    sub_1000F6844(v29, &qword_1006463D0, &qword_1006463D8, sub_100482B48, (uint64_t (*)(uint64_t, uint64_t))sub_1000F5320);
    v38 = (uint64_t)v164;
    sub_1000F6844((uint64_t)v164, &qword_1006463D0, &qword_1006463D8, sub_100482B48, (uint64_t (*)(uint64_t, uint64_t))sub_1000F5320);
    sub_1000F6844(v32, &qword_1006463D0, &qword_1006463D8, sub_100482B48, (uint64_t (*)(uint64_t, uint64_t))sub_1000F5320);
    sub_1000F6844(v33, &qword_1006463D0, &qword_1006463D8, sub_100482B48, (uint64_t (*)(uint64_t, uint64_t))sub_1000F5320);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v167);
    v39 = v177;
    v40 = v178;
    v41 = v179;
    v42 = v180;
    v43 = v181;
    v185 = (uint64_t)v178;
    v186 = (uint64_t)v177;
    v183 = (uint64_t)v180;
    v184 = (uint64_t)v179;
    v182 = (uint64_t)v181;
    v199[1] = v177;
    v199[2] = v178;
    v199[3] = v179;
    v199[4] = v180;
    v199[5] = v181;
    swift_bridgeObjectRetain(v177);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    LOBYTE(v29) = sub_1000E2754();
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v39);
    if ((v29 & 1) != 0)
    {
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v39);
      v24 = v190;
      v25 = v191;
      v22 = v188;
      v23 = v189;
      v21 = v187;
      a9 = v140;
      goto LABEL_97;
    }
  }
LABEL_19:
  if (v51)
  {
    v55 = (v51 - 1) & v51;
    v56 = __clz(__rbit64(v51)) | (v49 << 6);
    v57 = v49;
    goto LABEL_37;
  }
  v57 = v49 + 1;
  if (!__OFADD__(v49, 1))
  {
    if (v57 >= v165)
      goto LABEL_40;
    v63 = *(_QWORD *)(v167 + 8 * v57);
    if (!v63)
    {
      if (v49 + 2 >= v165)
        goto LABEL_40;
      v63 = *(_QWORD *)(v167 + 8 * (v49 + 2));
      if (v63)
      {
        v57 = v49 + 2;
      }
      else
      {
        v57 = v49 + 3;
        if (v49 + 3 >= v165)
          goto LABEL_40;
        v63 = *(_QWORD *)(v167 + 8 * v57);
        if (!v63)
        {
          v64 = v49 + 4;
          do
          {
            if (v165 == v64)
              goto LABEL_40;
            v63 = *(_QWORD *)(v167 + 8 * v64++);
          }
          while (!v63);
          v57 = v64 - 1;
        }
      }
    }
    v55 = (v63 - 1) & v63;
    v56 = __clz(__rbit64(v63)) + (v57 << 6);
LABEL_37:
    v61 = *(_QWORD **)(*(_QWORD *)(v48 + 48) + 8 * v56);
    v62 = swift_retain();
    if (!v61)
      goto LABEL_40;
    goto LABEL_38;
  }
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
}

void sub_1000FA288(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v23;
  uint64_t v24;

  v6 = 0;
  v24 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v17 >= v10)
      goto LABEL_22;
    v18 = *(_QWORD *)(v24 + 8 * v17);
    ++v6;
    if (!v18)
    {
      v6 = v17 + 1;
      if (v17 + 1 >= v10)
        goto LABEL_22;
      v18 = *(_QWORD *)(v24 + 8 * v6);
      if (!v18)
        break;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    v13 = *(_QWORD *)(a3 + 56) + 16 * v12;
    v14 = *(_QWORD *)v13;
    v15 = *(unsigned __int8 *)(v13 + 8);
    v16 = swift_retain();
    LOBYTE(v15) = a4(v16, v14, v15);
    swift_release();
    if ((v15 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
LABEL_22:
        sub_1000F60B8(a1, a2, v23, a3);
        return;
      }
    }
  }
  v19 = v17 + 2;
  if (v19 >= v10)
    goto LABEL_22;
  v18 = *(_QWORD *)(v24 + 8 * v19);
  if (v18)
  {
    v6 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v6 >= v10)
      goto LABEL_22;
    v18 = *(_QWORD *)(v24 + 8 * v6);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_24:
  __break(1u);
}

void sub_1000FA43C(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  _QWORD v63[5];
  uint64_t v64;

  v3 = v2;
  v55 = *a2;
  v54 = *((_QWORD *)a2 + 2);
  v53 = *((unsigned __int8 *)a2 + 24);
  v52 = a2[2];
  v51 = *((_QWORD *)a2 + 6);
  v50 = *((unsigned __int8 *)a2 + 56);
  v5 = sub_10002A750((uint64_t *)&unk_100646310);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10002A750(&qword_10063F658);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v42 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v41 = (uint64_t)&v40 - v10;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v12 = __CocoaSet.makeIterator()(v11);
    v13 = sub_10002A750(&qword_1006463D0);
    v14 = sub_100023FEC(&qword_1006463D8, &qword_1006463D0, (uint64_t)&unk_1005276C0);
    v15 = Set.Iterator.init(_cocoa:)(v63, v12, v13, v14);
    a1 = v63[0];
    v47 = v63[1];
    v16 = v63[2];
    v17 = v63[3];
    v18 = v63[4];
  }
  else
  {
    v19 = -1 << *(_BYTE *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 56);
    v47 = a1 + 56;
    v16 = ~v19;
    v21 = -v19;
    if (v21 < 64)
      v22 = ~(-1 << v21);
    else
      v22 = -1;
    v18 = v22 & v20;
    swift_bridgeObjectRetain(a1);
    v17 = 0;
  }
  v43 = v16;
  v44 = _swiftEmptyArrayStorage;
  v46 = (unint64_t)(v16 + 64) >> 6;
  v45 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v23 = v17;
    v24 = v18;
    if ((a1 & 0x8000000000000000) == 0)
      break;
    v27 = __CocoaSet.Iterator.next()(v15);
    if (!v27)
      goto LABEL_44;
    v28 = v27;
    v56 = v27;
    swift_unknownObjectRetain(v27);
    v29 = sub_10002A750(&qword_1006463D0);
    swift_dynamicCast(&v64, &v56, v45, v29, 7);
    v30 = v64;
    swift_unknownObjectRelease(v28);
    v18 = v24;
    if (!v30)
      goto LABEL_44;
LABEL_29:
    v57 = v55;
    v58 = v54;
    v59 = v53;
    v60 = v52;
    v61 = v51;
    v62 = v50;
    sub_1000E1D70(v30, (uint64_t *)&v57, sub_1002AA398, sub_100073214, (void (*)(uint64_t, uint64_t *))sub_10019D874, (uint64_t)v7);
    if (v3)
    {
      swift_release();
      sub_10003E410(a1);
      swift_bridgeObjectRelease(v44);
      return;
    }
    v33 = swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v49 + 48))(v7, 1, v48, v33) == 1)
    {
      v15 = (_QWORD *)sub_1000073A0((uint64_t)v7, (uint64_t *)&unk_100646310);
    }
    else
    {
      v34 = v41;
      sub_10000F614((uint64_t)v7, v41, &qword_10063F658);
      sub_10000F614(v34, v42, &qword_10063F658);
      v35 = (unint64_t)v44;
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
        v35 = sub_10045535C(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
      v37 = *(_QWORD *)(v35 + 16);
      v36 = *(_QWORD *)(v35 + 24);
      if (v37 >= v36 >> 1)
        v35 = sub_10045535C(v36 > 1, v37 + 1, 1, v35);
      *(_QWORD *)(v35 + 16) = v37 + 1;
      v38 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      v44 = (_QWORD *)v35;
      v15 = (_QWORD *)sub_10000F614(v42, v35 + v38 + *(_QWORD *)(v49 + 72) * v37, &qword_10063F658);
    }
  }
  if (v18)
  {
    v25 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v26 = v25 | (v17 << 6);
LABEL_28:
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v26);
    swift_retain();
    if (!v30)
      goto LABEL_44;
    goto LABEL_29;
  }
  ++v17;
  if (!__OFADD__(v23, 1))
  {
    if (v17 >= v46)
      goto LABEL_44;
    v31 = *(_QWORD *)(v47 + 8 * v17);
    if (!v31)
    {
      v32 = v23 + 2;
      if (v23 + 2 >= v46)
        goto LABEL_44;
      v31 = *(_QWORD *)(v47 + 8 * v32);
      if (v31)
        goto LABEL_26;
      v32 = v23 + 3;
      if (v23 + 3 >= v46)
        goto LABEL_44;
      v31 = *(_QWORD *)(v47 + 8 * v32);
      if (v31)
        goto LABEL_26;
      v32 = v23 + 4;
      if (v23 + 4 >= v46)
        goto LABEL_44;
      v31 = *(_QWORD *)(v47 + 8 * v32);
      if (v31)
      {
LABEL_26:
        v17 = v32;
      }
      else
      {
        v17 = v23 + 5;
        if (v23 + 5 >= v46)
          goto LABEL_44;
        v31 = *(_QWORD *)(v47 + 8 * v17);
        if (!v31)
        {
          v39 = v23 + 6;
          while (v46 != v39)
          {
            v31 = *(_QWORD *)(v47 + 8 * v39++);
            if (v31)
            {
              v17 = v39 - 1;
              goto LABEL_27;
            }
          }
LABEL_44:
          sub_10003E410(a1);
          return;
        }
      }
    }
LABEL_27:
    v18 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v17 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_1000FA9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FDEBC(a1, a2, a3, (uint64_t (*)(void))sub_1002AA398);
}

double sub_1000FAA08(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char v37;
  char v38;
  void *Strong;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  double result;
  uint64_t v75;
  _QWORD *v76;
  _QWORD v77[4];
  _QWORD v78[4];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93[24];
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109[8];
  char v110[8];

  v7 = (char *)a5;
  v92 = qword_100645F40;
  v10 = *(_QWORD *)(a5 + qword_100645F40);
  if (v10)
  {
    v11 = *(_QWORD *)(a5 + qword_100645F40);
    if (a3)
      goto LABEL_3;
LABEL_10:
    v20 = swift_retain();
    a6(v20);
    if (!v10)
      goto LABEL_11;
    goto LABEL_28;
  }
  v11 = sub_1000EEB64(a5, a1, a2, sub_10006B3DC, (uint64_t *)&unk_1006463F0, (uint64_t (*)(_QWORD *))sub_100352EF8);
  if (!a3)
    goto LABEL_10;
LABEL_3:
  v12 = swift_allocObject(&unk_1005F18D8, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  v13 = (_QWORD *)(v11 + 64);
  swift_beginAccess(v11 + 64, &v97, 33, 0);
  v14 = *(_QWORD **)(v11 + 64);
  swift_retain();
  sub_100053DE4(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
  *(_QWORD *)(v11 + 64) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_1004557BC(0, v14[2] + 1, 1, v14);
    *v13 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = sub_1004557BC((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
    *v13 = v14;
  }
  v14[2] = v17 + 1;
  v18 = &v14[2 * v17];
  v18[4] = sub_100105B74;
  v18[5] = v12;
  v19 = swift_endAccess(&v97);
  a6(v19);
  if (!v10)
  {
LABEL_11:
    if ((*(_BYTE *)(v11 + 72) & 1) != 0)
    {
      swift_release();
LABEL_27:
      *(_QWORD *)&v7[v92] = 0;
      goto LABEL_28;
    }
    swift_beginAccess(v11 + 80, v110, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v11 + 80) + 16) && !*(_QWORD *)(*(_QWORD *)(v11 + 88) + 16))
    {
      swift_beginAccess(v11 + 96, v93, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v11 + 96) + 16))
      {
        sub_100010634((uint64_t)&v7[qword_100645F08], (uint64_t)&v97);
        v75 = v100;
        v76 = v101;
        sub_10001413C(&v97, v100);
        ((void (*)(uint64_t, _QWORD *))v76[3])(v75, v76);
        swift_release();
        v73 = &v97;
LABEL_26:
        sub_100027F10(v73);
        goto LABEL_27;
      }
    }
    v21 = *(_QWORD *)(v11 + 48);
    v22 = *(_QWORD *)(v11 + 56);
    v23 = (uint64_t *)&v7[qword_100645F48];
    swift_beginAccess(&v7[qword_100645F48], v109, 0, 0);
    v24 = *v23;
    v25 = v23[1];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    if ((sub_10034169C(v21, v24) & 1) != 0)
    {
      v26 = sub_10034169C(v22, v25);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v24);
      if ((v26 & 1) != 0)
      {
LABEL_21:
        __chkstk_darwin(v27);
        v78[2] = v7;
        swift_beginAccess(&v7[qword_100645F50], &v97, 33, 0);
        __chkstk_darwin(v30);
        v77[2] = sub_1001034C0;
        v77[3] = v78;
        v31 = sub_10002A750((uint64_t *)&unk_100646F30);
        Set.removeAll(where:)(sub_100105BE4, v77, v31);
        swift_endAccess(&v97);
        v32 = (_QWORD *)sub_10006B3DC();
        v88 = v32;
        v34 = v33;
        v87 = (uint64_t)v33;
        v36 = v35;
        v86 = v35;
        v38 = v37;
        Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v7[qword_100645EF8]);
        ObjectType = swift_getObjectType(Strong, v40);

        v42 = _typeName(_:qualified:)(ObjectType, 0);
        v44 = v43;
        sub_1000E02D4(v32, v34, v36, v38 & 1, v42, v43, &v97);
        v45 = v98;
        v91 = v97;
        v46 = v100;
        v90 = v99;
        v48 = v101;
        v47 = v102;
        v82 = v7;
        v50 = v103;
        v49 = v104;
        v51 = v105;
        v80 = v106;
        v52 = v107;
        v89 = v108;
        swift_bridgeObjectRelease(v86);
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease(v44);
        v97 = v91;
        v98 = v45;
        v88 = v45;
        v99 = v90;
        v100 = v46;
        v87 = v46;
        v86 = v48;
        v101 = v48;
        v102 = v47;
        v85 = v47;
        v84 = v50;
        v103 = v50;
        v104 = v49;
        v83 = v49;
        v7 = v82;
        v81 = v51;
        v105 = v51;
        v106 = v80;
        v80 = v52;
        v107 = v52;
        v53 = *(_QWORD *)&v82[qword_100645F18];
        if (v53
          && (v54 = *(uint64_t (**)(uint64_t))(v53 + 16),
              v55 = swift_retain(),
              v56 = v54(v55),
              swift_release(),
              (v56 & 1) != 0))
        {
          v57 = swift_allocObject(&unk_1005F18B0, 32, 7);
          *(_QWORD *)(v57 + 16) = v7;
          *(_QWORD *)(v57 + 24) = v11;
          v58 = v57;
          v59 = v7;
          swift_retain();
          v60 = sub_100103500;
        }
        else
        {
          v60 = 0;
          v58 = 0;
        }
        v61 = swift_allocObject(&unk_1005F1888, 24, 7);
        swift_unknownObjectWeakInit(v61 + 16, v7);
        v62 = (uint64_t)&v7[qword_100645F08];
        sub_100010634((uint64_t)&v7[qword_100645F08], (uint64_t)v94);
        v63 = v95;
        v64 = v96;
        sub_10001413C(v94, v95);
        v65 = *(void (**)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v64 + 32);
        swift_retain();
        v79 = v58;
        v65(&v97, sub_1001034F4, v61, v60, v58, sub_100100058, v11, v63, v64);
        swift_release();
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v85);
        swift_bridgeObjectRelease(v86);
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(v90);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease(v91);
        sub_100027F10(v94);
        v66 = *(_QWORD *)(v11 + 16);
        v67 = *(_QWORD *)(v11 + 24);
        v68 = *(_QWORD *)(v11 + 32);
        v69 = *(_BYTE *)(v11 + 40);
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRetain(v67);
        swift_bridgeObjectRetain(v68);
        v70 = v89;
        sub_1000EFCAC(v89, v66, v67, v68, v69);
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v66);
        swift_bridgeObjectRelease(v70);
        sub_100010634(v62, (uint64_t)v94);
        v71 = v95;
        v72 = v96;
        sub_10001413C(v94, v95);
        (*(void (**)(uint64_t, uint64_t))(v72 + 24))(v71, v72);
        swift_release();
        sub_1000381B8((uint64_t)v60, v79);
        swift_release();
        v73 = v94;
        goto LABEL_26;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v24);
    }
    v28 = *v23;
    swift_retain();
    swift_bridgeObjectRetain(v28);
    TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v29);
    swift_release();
    swift_bridgeObjectRelease(v28);
    goto LABEL_21;
  }
LABEL_28:
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

Swift::Int sub_1000FB198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  Swift::Int result;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26[9];

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (v7)
  {
    v14 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v15 = v14 | (v10 << 6);
LABEL_22:
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
    if ((v19 & 0xC000000000000001) != 0)
    {
      if (v19 < 0)
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
      else
        v11 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v12 = swift_retain(a2);
      v13 = __CocoaSet.contains(_:)(v12, v11);
      swift_bridgeObjectRelease(v19);
      result = swift_release(a2);
      if ((v13 & 1) != 0)
      {
LABEL_36:
        swift_release(a1);
        return 1;
      }
    }
    else if (*(_QWORD *)(v19 + 16))
    {
      Hasher.init(_seed:)(v26, *(_QWORD *)(v19 + 40));
      v20 = *(_QWORD *)(a2 + 16);
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v19 + 32);
      v22 = result & ~v21;
      if (((*(_QWORD *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = *(_QWORD *)(v19 + 48);
        if (*(_QWORD *)(*(_QWORD *)(v23 + 8 * v22) + 16) == v20)
          goto LABEL_36;
        v24 = ~v21;
        while (1)
        {
          v22 = (v22 + 1) & v24;
          if (((*(_QWORD *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            break;
          if (*(_QWORD *)(*(_QWORD *)(v23 + 8 * v22) + 16) == v20)
            goto LABEL_36;
        }
      }
    }
  }
  if (__OFADD__(v10++, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v10 >= v8)
    goto LABEL_37;
  v17 = *(_QWORD *)(v4 + 8 * v10);
  if (v17)
  {
LABEL_21:
    v7 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v10 << 6);
    goto LABEL_22;
  }
  v18 = v10 + 1;
  if (v10 + 1 >= v8)
    goto LABEL_37;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
    goto LABEL_20;
  v18 = v10 + 2;
  if (v10 + 2 >= v8)
    goto LABEL_37;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
    goto LABEL_20;
  v18 = v10 + 3;
  if (v10 + 3 >= v8)
    goto LABEL_37;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_20:
    v10 = v18;
    goto LABEL_21;
  }
  v25 = v10 + 4;
  if (v10 + 4 >= v8)
  {
LABEL_37:
    swift_release(a1);
    return 0;
  }
  v17 = *(_QWORD *)(v4 + 8 * v25);
  v10 += 4;
  if (v17)
    goto LABEL_21;
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v8)
      goto LABEL_37;
    v17 = *(_QWORD *)(v4 + 8 * v10);
    ++v25;
    if (v17)
      goto LABEL_21;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1000FB3F0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];
  uint64_t v52;

  v6 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v49 = *(_QWORD *)(a2 + 48);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = sub_10002A750(a3);
    v13 = sub_100023FEC(a4, a3, (uint64_t)&unk_1005276C0);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v51, v11, v12, v13);
    v6 = v51[0];
    v48 = v51[1];
    v15 = v51[2];
    v16 = v51[3];
    v17 = v51[4];
  }
  else
  {
    v18 = -1 << *(_BYTE *)(a1 + 32);
    v48 = a1 + 56;
    v15 = ~v18;
    v19 = -v18;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v17 = v20 & *(_QWORD *)(a1 + 56);
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(a1);
    v16 = 0;
  }
  v47 = (unint64_t)(v15 + 64) >> 6;
  v45 = _swiftEmptyArrayStorage;
  while (1)
  {
    v21 = v16;
    if ((v6 & 0x8000000000000000) == 0)
      break;
    v24 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v24)
      goto LABEL_48;
    v25 = v24;
    v50 = v24;
    swift_unknownObjectRetain(v24);
    v26 = sub_10002A750(a3);
    swift_dynamicCast(&v52, &v50, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
    v27 = v52;
    swift_unknownObjectRelease(v25);
    if (!v27)
      goto LABEL_48;
LABEL_35:
    if (*(_QWORD *)(v7 + 16)
      && (v31 = a5(v27), (v32 & 1) != 0)
      && *(_QWORD *)(v49 + 16)
      && (v33 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v31), v34 = a5(v27), (v35 & 1) != 0))
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v34);
      swift_release(v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10045557C(0, v45[2] + 1, 1, v45);
        v45 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v43 = v45[2];
      v42 = v45[3];
      if (v43 >= v42 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10045557C((_QWORD *)(v42 > 1), v43 + 1, 1, v45);
        v45 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v45[2] = v43 + 1;
      v44 = &v45[2 * v43];
      v44[4] = v33;
      v44[5] = v41;
    }
    else
    {
      if (qword_10063D2C0 != -1)
        swift_once(&qword_10063D2C0, sub_10004E478);
      v36 = type metadata accessor for Logger(0);
      v37 = sub_100012DC4(v36, (uint64_t)qword_10063F5B0);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.fault.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Cannot lookup from, to for moved section", v40, 2u);
        swift_slowDealloc(v40, -1, -1);
      }
      swift_release(v27);

    }
  }
  if (v17)
  {
    v22 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v23 = v22 | (v16 << 6);
LABEL_34:
    v27 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v23);
    swift_retain(v27);
    if (!v27)
      goto LABEL_48;
    goto LABEL_35;
  }
  v28 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v28 >= v47)
      goto LABEL_48;
    v29 = *(_QWORD *)(v48 + 8 * v28);
    ++v16;
    if (!v29)
    {
      v16 = v21 + 2;
      if (v21 + 2 >= v47)
        goto LABEL_48;
      v29 = *(_QWORD *)(v48 + 8 * v16);
      if (!v29)
      {
        v16 = v21 + 3;
        if (v21 + 3 >= v47)
          goto LABEL_48;
        v29 = *(_QWORD *)(v48 + 8 * v16);
        if (!v29)
        {
          v16 = v21 + 4;
          if (v21 + 4 >= v47)
            goto LABEL_48;
          v29 = *(_QWORD *)(v48 + 8 * v16);
          if (!v29)
          {
            v16 = v21 + 5;
            if (v21 + 5 >= v47)
              goto LABEL_48;
            v29 = *(_QWORD *)(v48 + 8 * v16);
            if (!v29)
            {
              v30 = v21 + 6;
              while (v47 != v30)
              {
                v29 = *(_QWORD *)(v48 + 8 * v30++);
                if (v29)
                {
                  v16 = v30 - 1;
                  goto LABEL_33;
                }
              }
LABEL_48:
              sub_10003E410(v6);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v17 = (v29 - 1) & v29;
    v23 = __clz(__rbit64(v29)) + (v16 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

_QWORD *sub_1000FB834(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  _QWORD v63[5];
  uint64_t v64;

  v3 = v2;
  v55 = *a2;
  v54 = *((_QWORD *)a2 + 2);
  v53 = *((unsigned __int8 *)a2 + 24);
  v52 = a2[2];
  v51 = *((_QWORD *)a2 + 6);
  v50 = *((unsigned __int8 *)a2 + 56);
  v5 = sub_10002A750((uint64_t *)&unk_100646310);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10002A750(&qword_10063F658);
  v49 = *(_QWORD *)(v48 - 8);
  v8 = __chkstk_darwin(v48);
  v42 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v41 = (uint64_t)&v40 - v10;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v12 = __CocoaSet.makeIterator()(v11);
    v13 = sub_10002A750((uint64_t *)&unk_100640E20);
    v14 = sub_100023FEC(&qword_100646308, (uint64_t *)&unk_100640E20, (uint64_t)&unk_1005276C0);
    result = Set.Iterator.init(_cocoa:)(v63, v12, v13, v14);
    a1 = v63[0];
    v47 = v63[1];
    v16 = v63[2];
    v17 = v63[3];
    v18 = v63[4];
  }
  else
  {
    v19 = -1 << *(_BYTE *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 56);
    v47 = a1 + 56;
    v16 = ~v19;
    v21 = -v19;
    if (v21 < 64)
      v22 = ~(-1 << v21);
    else
      v22 = -1;
    v18 = v22 & v20;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v17 = 0;
  }
  v43 = v16;
  v44 = _swiftEmptyArrayStorage;
  v46 = (unint64_t)(v16 + 64) >> 6;
  v45 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v23 = v17;
    v24 = v18;
    if ((a1 & 0x8000000000000000) == 0)
      break;
    v27 = __CocoaSet.Iterator.next()(result);
    if (!v27)
      goto LABEL_44;
    v28 = v27;
    v56 = v27;
    swift_unknownObjectRetain(v27);
    v29 = sub_10002A750((uint64_t *)&unk_100640E20);
    swift_dynamicCast(&v64, &v56, v45, v29, 7);
    v30 = v64;
    swift_unknownObjectRelease(v28);
    v18 = v24;
    if (!v30)
      goto LABEL_44;
LABEL_29:
    v57 = v55;
    v58 = v54;
    v59 = v53;
    v60 = v52;
    v61 = v51;
    v62 = v50;
    sub_1000E1D70(v30, (uint64_t *)&v57, sub_1002AA398, sub_100073214, (void (*)(uint64_t, uint64_t *))sub_10019D874, (uint64_t)v7);
    if (v3)
    {
      swift_release(v30);
      sub_10003E410(a1);
      v39 = v44;
      swift_bridgeObjectRelease(v44);
      return v39;
    }
    swift_release(v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v7, 1, v48) == 1)
    {
      result = (_QWORD *)sub_1000073A0((uint64_t)v7, (uint64_t *)&unk_100646310);
    }
    else
    {
      v33 = v41;
      sub_10000F614((uint64_t)v7, v41, &qword_10063F658);
      sub_10000F614(v33, v42, &qword_10063F658);
      v34 = (unint64_t)v44;
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
        v34 = sub_10045535C(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
      v36 = *(_QWORD *)(v34 + 16);
      v35 = *(_QWORD *)(v34 + 24);
      if (v36 >= v35 >> 1)
        v34 = sub_10045535C(v35 > 1, v36 + 1, 1, v34);
      *(_QWORD *)(v34 + 16) = v36 + 1;
      v37 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      v44 = (_QWORD *)v34;
      result = (_QWORD *)sub_10000F614(v42, v34 + v37 + *(_QWORD *)(v49 + 72) * v36, &qword_10063F658);
    }
  }
  if (v18)
  {
    v25 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v26 = v25 | (v17 << 6);
LABEL_28:
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v26);
    swift_retain(v30);
    if (!v30)
      goto LABEL_44;
    goto LABEL_29;
  }
  ++v17;
  if (!__OFADD__(v23, 1))
  {
    if (v17 >= v46)
      goto LABEL_44;
    v31 = *(_QWORD *)(v47 + 8 * v17);
    if (!v31)
    {
      v32 = v23 + 2;
      if (v23 + 2 >= v46)
        goto LABEL_44;
      v31 = *(_QWORD *)(v47 + 8 * v32);
      if (v31)
        goto LABEL_26;
      v32 = v23 + 3;
      if (v23 + 3 >= v46)
        goto LABEL_44;
      v31 = *(_QWORD *)(v47 + 8 * v32);
      if (v31)
        goto LABEL_26;
      v32 = v23 + 4;
      if (v23 + 4 >= v46)
        goto LABEL_44;
      v31 = *(_QWORD *)(v47 + 8 * v32);
      if (v31)
      {
LABEL_26:
        v17 = v32;
      }
      else
      {
        v17 = v23 + 5;
        if (v23 + 5 >= v46)
          goto LABEL_44;
        v31 = *(_QWORD *)(v47 + 8 * v17);
        if (!v31)
        {
          v38 = v23 + 6;
          while (v46 != v38)
          {
            v31 = *(_QWORD *)(v47 + 8 * v38++);
            if (v31)
            {
              v17 = v38 - 1;
              goto LABEL_27;
            }
          }
LABEL_44:
          sub_10003E410(a1);
          return v44;
        }
      }
    }
LABEL_27:
    v18 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v17 << 6);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000FBDF4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t *a6, unint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[6];
  uint64_t v95;

  v85 = a4;
  v86 = a5;
  v88 = a2;
  v89 = a3;
  v10 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IndexPath(0);
  v87 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v84 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v83 = (char *)&v71 - v16;
  v17 = sub_10002A750((uint64_t *)&unk_100646320);
  __chkstk_darwin(v17);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10002A750(qword_100642230);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v74 = (uint64_t)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v72 = (uint64_t)&v71 - v24;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v26 = __CocoaSet.makeIterator()(v25);
    v27 = sub_10002A750(a6);
    v28 = sub_100023FEC(a7, a6, (uint64_t)&unk_1005276C0);
    result = Set.Iterator.init(_cocoa:)(v94, v26, v27, v28);
    a1 = v94[0];
    v80 = v94[1];
    v31 = v94[2];
    v30 = v94[3];
    v32 = v94[4];
  }
  else
  {
    v33 = -1 << *(_BYTE *)(a1 + 32);
    v34 = *(_QWORD *)(a1 + 56);
    v80 = a1 + 56;
    v31 = ~v33;
    v35 = -v33;
    if (v35 < 64)
      v36 = ~(-1 << v35);
    else
      v36 = -1;
    v32 = v36 & v34;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v30 = 0;
  }
  v77 = a6;
  v78 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v73 = v31;
  v79 = (unint64_t)(v31 + 64) >> 6;
  v75 = _swiftEmptyArrayStorage;
  v76 = (char *)&type metadata for Swift.AnyObject + 8;
  v90 = a1;
  v81 = v19;
  v82 = v20;
LABEL_11:
  v37 = v30;
  if (a1 < 0)
  {
    do
    {
      v41 = __CocoaSet.Iterator.next()(result);
      if (!v41)
        goto LABEL_49;
      v42 = v41;
      v93 = v41;
      swift_unknownObjectRetain(v41);
      v43 = sub_10002A750(v77);
      swift_dynamicCast(&v95, &v93, v76, v43, 7);
      v44 = v95;
      swift_unknownObjectRelease(v42);
      v40 = v37;
      v38 = v32;
      if (!v44)
        goto LABEL_49;
LABEL_34:
      v91 = v38;
      v92 = v40;
      v88(v44);
      v48 = v87;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v12, 1, v13) == 1)
      {
        sub_1000073A0((uint64_t)v12, &qword_100646950);
        if (qword_10063D2C0 != -1)
          swift_once(&qword_10063D2C0, sub_10004E478);
        v49 = type metadata accessor for Logger(0);
        v50 = sub_100012DC4(v49, (uint64_t)qword_10063F5B0);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.fault.getter(v51);
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unable to look up index/indexPath", v53, 2u);
          swift_slowDealloc(v53, -1, -1);
        }

        v54 = 1;
      }
      else
      {
        v55 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
        v56 = v83;
        v55(v83, v12, v13);
        v57 = v21;
        v58 = v12;
        v59 = v84;
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v84, v56, v13);
        v60 = v48;
        v61 = v85(v44);
        v62 = *(void (**)(char *, uint64_t))(v60 + 8);
        v63 = v56;
        v19 = v81;
        v64 = v82;
        v62(v63, v13);
        v65 = v59;
        v12 = v58;
        v21 = v57;
        v55(v19, v65, v13);
        v54 = 0;
        v20 = v64;
        *(_QWORD *)&v19[*(int *)(v64 + 36)] = v61;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v54, 1, v20);
      swift_release(v44);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
      {
        v66 = v72;
        sub_10000F614((uint64_t)v19, v72, qword_100642230);
        sub_10000F614(v66, v74, qword_100642230);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v75);
        a1 = v90;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v75 = (_QWORD *)sub_100455688(0, v75[2] + 1, 1, (unint64_t)v75);
        v69 = v75[2];
        v68 = v75[3];
        if (v69 >= v68 >> 1)
          v75 = (_QWORD *)sub_100455688(v68 > 1, v69 + 1, 1, (unint64_t)v75);
        v70 = v75;
        v75[2] = v69 + 1;
        result = (_QWORD *)sub_10000F614(v74, (uint64_t)v70+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v69, qword_100642230);
        v32 = v91;
        v30 = v92;
        goto LABEL_11;
      }
      result = (_QWORD *)sub_1000073A0((uint64_t)v19, (uint64_t *)&unk_100646320);
      v32 = v91;
      v37 = v92;
      a1 = v90;
    }
    while (v90 < 0);
  }
  if (v32)
  {
    v38 = (v32 - 1) & v32;
    v39 = __clz(__rbit64(v32)) | (v37 << 6);
    v40 = v37;
    goto LABEL_33;
  }
  v45 = v37 + 1;
  if (!__OFADD__(v37, 1))
  {
    if (v45 < v79)
    {
      v46 = *(_QWORD *)(v80 + 8 * v45);
      v40 = v37 + 1;
      if (v46)
        goto LABEL_32;
      v40 = v37 + 2;
      if (v37 + 2 >= v79)
        goto LABEL_49;
      v46 = *(_QWORD *)(v80 + 8 * v40);
      if (v46)
        goto LABEL_32;
      v40 = v37 + 3;
      if (v37 + 3 >= v79)
        goto LABEL_49;
      v46 = *(_QWORD *)(v80 + 8 * v40);
      if (v46)
        goto LABEL_32;
      v40 = v37 + 4;
      if (v37 + 4 >= v79)
        goto LABEL_49;
      v46 = *(_QWORD *)(v80 + 8 * v40);
      if (v46)
      {
LABEL_32:
        v38 = (v46 - 1) & v46;
        v39 = __clz(__rbit64(v46)) + (v40 << 6);
LABEL_33:
        v44 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v39);
        swift_retain(v44);
        if (v44)
          goto LABEL_34;
        goto LABEL_49;
      }
      v40 = v37 + 5;
      if (v37 + 5 < v79)
      {
        v46 = *(_QWORD *)(v80 + 8 * v40);
        if (!v46)
        {
          v47 = v37 + 6;
          while (v79 != v47)
          {
            v46 = *(_QWORD *)(v80 + 8 * v47++);
            if (v46)
            {
              v40 = v47 - 1;
              a1 = v90;
              goto LABEL_32;
            }
          }
          goto LABEL_49;
        }
        goto LABEL_32;
      }
    }
LABEL_49:
    sub_10003E410(v90);
    return v75;
  }
  __break(1u);
  return result;
}

void sub_1000FC4EC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t *a6, unint64_t *a7)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v43;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[5];
  uint64_t v50;

  v8 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v12 = __CocoaSet.makeIterator()(v11);
    v13 = sub_10002A750(a6);
    v14 = sub_100023FEC(a7, a6, (uint64_t)&unk_1005276C0);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v49, v12, v13, v14);
    v8 = v49[0];
    v46 = v49[1];
    v16 = v49[2];
    v17 = v49[3];
    v18 = v49[4];
  }
  else
  {
    v19 = -1 << *(_BYTE *)(a1 + 32);
    v46 = a1 + 56;
    v16 = ~v19;
    v20 = -v19;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v18 = v21 & *(_QWORD *)(a1 + 56);
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(a1);
    v17 = 0;
  }
  v45 = (unint64_t)(v16 + 64) >> 6;
  v43 = _swiftEmptyArrayStorage;
  while (1)
  {
    v22 = v17;
    if ((v8 & 0x8000000000000000) == 0)
      break;
    v25 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v25)
      goto LABEL_45;
    v26 = v25;
    v50 = v25;
    swift_unknownObjectRetain(v25);
    v27 = sub_10002A750(a6);
    swift_dynamicCast(&v47, &v50, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
    v28 = v47;
    swift_unknownObjectRelease(v26);
    if (!v28)
      goto LABEL_45;
LABEL_35:
    a2(&v47, v28);
    if (v48 == 1)
    {
      if (qword_10063D2C0 != -1)
        swift_once(&qword_10063D2C0, sub_10004E478);
      v32 = type metadata accessor for Logger(0);
      v33 = sub_100012DC4(v32, (uint64_t)qword_10063F5B0);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.fault.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unable to look up index/indexPath", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }
      swift_release(v28);

    }
    else
    {
      v37 = v47;
      v38 = a4(v28);
      swift_release(v28);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10045569C(0, v43[2] + 1, 1, v43);
        v43 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v40 = v43[2];
      v39 = v43[3];
      if (v40 >= v39 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_10045569C((_QWORD *)(v39 > 1), v40 + 1, 1, v43);
        v43 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v43[2] = v40 + 1;
      v41 = &v43[2 * v40];
      v41[4] = v37;
      v41[5] = v38;
    }
  }
  if (v18)
  {
    v23 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v24 = v23 | (v17 << 6);
LABEL_34:
    v28 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v24);
    swift_retain(v28);
    if (!v28)
      goto LABEL_45;
    goto LABEL_35;
  }
  v29 = v17 + 1;
  if (!__OFADD__(v17, 1))
  {
    if (v29 >= v45)
      goto LABEL_45;
    v30 = *(_QWORD *)(v46 + 8 * v29);
    ++v17;
    if (!v30)
    {
      v17 = v22 + 2;
      if (v22 + 2 >= v45)
        goto LABEL_45;
      v30 = *(_QWORD *)(v46 + 8 * v17);
      if (!v30)
      {
        v17 = v22 + 3;
        if (v22 + 3 >= v45)
          goto LABEL_45;
        v30 = *(_QWORD *)(v46 + 8 * v17);
        if (!v30)
        {
          v17 = v22 + 4;
          if (v22 + 4 >= v45)
            goto LABEL_45;
          v30 = *(_QWORD *)(v46 + 8 * v17);
          if (!v30)
          {
            v17 = v22 + 5;
            if (v22 + 5 >= v45)
              goto LABEL_45;
            v30 = *(_QWORD *)(v46 + 8 * v17);
            if (!v30)
            {
              v31 = v22 + 6;
              while (v45 != v31)
              {
                v30 = *(_QWORD *)(v46 + 8 * v31++);
                if (v30)
                {
                  v17 = v31 - 1;
                  goto LABEL_33;
                }
              }
LABEL_45:
              sub_10003E410(v8);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v18 = (v30 - 1) & v30;
    v24 = __clz(__rbit64(v30)) + (v17 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_1000FC914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v29;
  int64_t v30;
  uint64_t v32[2];
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  v36 = &_swiftEmptySetSingleton;
  v37 = &_swiftEmptySetSingleton;
  v34 = &_swiftEmptySetSingleton;
  v35 = &_swiftEmptySetSingleton;
  v33 = &_swiftEmptySetSingleton;
  v29 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  if (v8)
    goto LABEL_6;
LABEL_7:
  if (!__OFADD__(v10++, 1))
  {
    if (v10 >= v30)
      goto LABEL_30;
    v14 = *(_QWORD *)(v29 + 8 * v10);
    if (v14)
    {
LABEL_17:
      v8 = (v14 - 1) & v14;
      for (i = __clz(__rbit64(v14)) + (v10 << 6); ; i = v11 | (v10 << 6))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
        v17 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * i);
        v19 = *v17;
        v18 = v17[1];
        swift_retain(v16);
        swift_bridgeObjectRetain(v19);
        v20 = swift_bridgeObjectRetain(a2);
        v21 = sub_1000FB198(v20, v16);
        swift_bridgeObjectRelease(a2);
        swift_retain(v16);
        v22 = swift_bridgeObjectRetain(a3);
        v23 = sub_1000FB198(v22, v16);
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(a3);
        swift_release(v16);
        if ((v21 & 1) != 0)
        {
          if ((v23 & 1) != 0 && (~(_BYTE)v18 & 3) == 0)
          {
            swift_retain(v16);
            sub_100481988(v32, v16);
            swift_release(v32[0]);
          }
        }
        else if ((v23 & 1) == 0)
        {
          result = swift_release(v16);
          if (!v8)
            goto LABEL_7;
          goto LABEL_6;
        }
        sub_100481988(v32, v16);
        result = swift_release(v32[0]);
        if (!v8)
          goto LABEL_7;
LABEL_6:
        v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
      }
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v30)
      goto LABEL_30;
    v14 = *(_QWORD *)(v29 + 8 * v15);
    if (!v14)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v30)
        goto LABEL_30;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (!v14)
      {
        v15 = v10 + 3;
        if (v10 + 3 < v30)
        {
          v14 = *(_QWORD *)(v29 + 8 * v15);
          if (v14)
            goto LABEL_16;
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_32;
            if (v10 >= v30)
              break;
            v14 = *(_QWORD *)(v29 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_17;
          }
        }
LABEL_30:
        result = swift_release(a1);
        v24 = v36;
        v26 = v34;
        v25 = v35;
        v27 = v33;
        *a4 = v37;
        a4[1] = v24;
        a4[2] = v25;
        a4[3] = v26;
        a4[4] = v27;
        return result;
      }
    }
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

_QWORD *sub_1000FCBC4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v21;
  void *v22;
  BOOL v23;
  _QWORD *result;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void **v159;
  void **v160;
  void **v161;
  void **v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  int64_t v172;
  uint64_t v173;
  int64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[2];
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  _QWORD v206[5];
  _QWORD v207[5];
  _QWORD v208[5];
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  _QWORD v213[7];

  v204 = &_swiftEmptySetSingleton;
  v205 = &_swiftEmptySetSingleton;
  v202 = &_swiftEmptySetSingleton;
  v203 = &_swiftEmptySetSingleton;
  v201 = &_swiftEmptySetSingleton;
  v21 = *a1;
  v212 = a1[1];
  v213[0] = v21;
  v22 = a1[2];
  v210 = a1[3];
  v211 = v22;
  v209 = a1[4];
  v199 = (uint64_t)v212;
  v200 = (uint64_t)v21;
  v197 = (uint64_t)v210;
  v198 = (uint64_t)v22;
  v196 = (uint64_t)v209;
  sub_10002DF4C(v213);
  sub_10002DF4C(&v212);
  sub_10002DF4C(&v211);
  sub_10002DF4C(&v210);
  sub_10002DF4C(&v209);
  sub_10002DF4C(v213);
  sub_10002DF4C(&v212);
  sub_10002DF4C(&v211);
  sub_10002DF4C(&v210);
  sub_10002DF4C(&v209);
  v23 = sub_1000E2754();
  sub_1000522B0(v213);
  sub_1000522B0(&v212);
  sub_1000522B0(&v211);
  sub_1000522B0(&v210);
  sub_1000522B0(&v209);
  if (v23)
  {
    sub_1000522B0(v213);
    sub_1000522B0(&v212);
    sub_1000522B0(&v211);
    sub_1000522B0(&v210);
    result = sub_1000522B0(&v209);
    v25 = &_swiftEmptySetSingleton;
    v26 = &_swiftEmptySetSingleton;
    v27 = &_swiftEmptySetSingleton;
    v28 = &_swiftEmptySetSingleton;
    v29 = &_swiftEmptySetSingleton;
LABEL_109:
    *a9 = v29;
    a9[1] = v28;
    a9[2] = v27;
    a9[3] = v26;
    a9[4] = v25;
    return result;
  }
  v187 = a6;
  v152 = a9;
  v30 = 0;
  v166 = a2 & 0xC000000000000001;
  v163 = a4 & 0xC000000000000001;
  v164 = a3 & 0xC000000000000001;
  v183 = a12;
  v161 = &v193;
  v162 = &v192;
  v160 = &v194;
  v182 = a11;
  v185 = a10;
  v31 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v31 = a2;
  v158 = v31;
  v159 = &v195;
  v165 = a2;
  v181 = a8 & 1;
  v184 = a13 & 1;
  if (a3 < 0)
    v32 = a3;
  else
    v32 = a3 & 0xFFFFFFFFFFFFFF8;
  v167 = a4;
  v168 = a3;
  v154 = a3 + 56;
  v155 = (uint64_t *)(a2 + 56);
  v33 = a4 & 0xFFFFFFFFFFFFFF8;
  if (a4 < 0)
    v33 = a4;
  v156 = v33;
  v157 = v32;
  v153 = a4 + 56;
  v170 = (char *)&type metadata for Swift.AnyObject + 8;
  v188 = a7;
  v186 = a5;
LABEL_13:
  v191 = &_swiftEmptySetSingleton;
  v192 = &_swiftEmptySetSingleton;
  v193 = &_swiftEmptySetSingleton;
  v194 = &_swiftEmptySetSingleton;
  v195 = &_swiftEmptySetSingleton;
  if (v166)
  {
    swift_bridgeObjectRetain(v165);
    v50 = __CocoaSet.makeIterator()(v158);
    v51 = sub_10002A750((uint64_t *)&unk_100640E20);
    v52 = sub_100023FEC(&qword_100646308, (uint64_t *)&unk_100640E20, (uint64_t)&unk_1005276C0);
    result = Set.Iterator.init(_cocoa:)(v206, v50, v51, v52);
    v53 = v206[0];
    v180 = (uint64_t *)v206[1];
    v54 = v206[2];
    v55 = v206[3];
    v56 = v206[4];
  }
  else
  {
    v53 = v165;
    v57 = -1 << *(_BYTE *)(v165 + 32);
    v58 = ~v57;
    v59 = -v57;
    if (v59 < 64)
      v60 = ~(-1 << v59);
    else
      v60 = -1;
    v56 = v60 & *(_QWORD *)(v165 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(v165);
    v54 = v58;
    v55 = 0;
    v180 = v155;
  }
  v177 = (uint64_t *)v54;
  v178 = (uint64_t *)(v53 & 0x7FFFFFFFFFFFFFFFLL);
  v179 = (unint64_t)(v54 + 64) >> 6;
  if (v53 < 0)
  {
LABEL_20:
    v61 = __CocoaSet.Iterator.next()(result);
    if (!v61)
      goto LABEL_43;
    v62 = v61;
    v189 = v61;
    swift_unknownObjectRetain(v61);
    v63 = sub_10002A750((uint64_t *)&unk_100640E20);
    swift_dynamicCast(v190, &v189, (char *)&type metadata for Swift.AnyObject + 8, v63, 7);
    v64 = v190[0];
    v65 = swift_unknownObjectRelease(v62);
    v66 = v55;
    v67 = v56;
    if (!v64)
      goto LABEL_43;
    goto LABEL_35;
  }
  while (1)
  {
    if (v56)
    {
      v67 = (v56 - 1) & v56;
      v68 = __clz(__rbit64(v56)) | (v55 << 6);
      v66 = v55;
      goto LABEL_34;
    }
    v66 = v55 + 1;
    if (__OFADD__(v55, 1))
      break;
    if (v66 >= v179)
      goto LABEL_43;
    v69 = v180[v66];
    if (!v69)
    {
      v70 = v55 + 2;
      if (v55 + 2 >= v179)
        goto LABEL_43;
      v69 = v180[v70];
      if (v69)
        goto LABEL_32;
      v70 = v55 + 3;
      if (v55 + 3 >= v179)
        goto LABEL_43;
      v69 = v180[v70];
      if (v69)
      {
LABEL_32:
        v66 = v70;
      }
      else
      {
        v66 = v55 + 4;
        if (v55 + 4 >= v179)
        {
LABEL_43:
          v75 = v168;
LABEL_44:
          sub_10003E410(v53);
          if (v164)
          {
            swift_bridgeObjectRetain(v75);
            v76 = __CocoaSet.makeIterator()(v157);
            v77 = sub_10002A750((uint64_t *)&unk_100640E20);
            v78 = sub_100023FEC(&qword_100646308, (uint64_t *)&unk_100640E20, (uint64_t)&unk_1005276C0);
            result = Set.Iterator.init(_cocoa:)(v207, v76, v77, v78);
            v79 = v207[0];
            v175 = v207[1];
            v80 = v207[2];
            v81 = v207[3];
            v82 = v207[4];
          }
          else
          {
            v83 = -1 << *(_BYTE *)(v75 + 32);
            v80 = ~v83;
            v84 = -v83;
            if (v84 < 64)
              v85 = ~(-1 << v84);
            else
              v85 = -1;
            v82 = v85 & *(_QWORD *)(v75 + 56);
            result = (_QWORD *)swift_bridgeObjectRetain(v75);
            v81 = 0;
            v79 = v75;
            v175 = v154;
          }
          v173 = v79 & 0x7FFFFFFFFFFFFFFFLL;
          v174 = (unint64_t)(v80 + 64) >> 6;
          v176 = v79;
          v177 = (uint64_t *)v80;
          if (v79 < 0)
          {
LABEL_51:
            v86 = __CocoaSet.Iterator.next()(result);
            if (v86)
            {
              v87 = v86;
              v189 = v86;
              swift_unknownObjectRetain(v86);
              v88 = sub_10002A750((uint64_t *)&unk_100640E20);
              swift_dynamicCast(v190, &v189, (char *)&type metadata for Swift.AnyObject + 8, v88, 7);
              v89 = v190[0];
              v90 = swift_unknownObjectRelease(v87);
              v91 = v81;
              v92 = v82;
              v93 = v188;
              if (v89)
                goto LABEL_66;
            }
LABEL_74:
            v106 = v167;
            goto LABEL_75;
          }
          while (v82)
          {
            v92 = (v82 - 1) & v82;
            v94 = __clz(__rbit64(v82)) | (v81 << 6);
            v91 = v81;
            v93 = v188;
LABEL_65:
            v89 = *(_QWORD *)(*(_QWORD *)(v79 + 48) + 8 * v94);
            v90 = swift_retain(v89);
            if (!v89)
              goto LABEL_74;
LABEL_66:
            v178 = &v151;
            __chkstk_darwin(v90);
            v180 = (uint64_t *)v92;
            v98 = v186;
            v97 = v187;
            *(&v151 - 10) = v186;
            *(&v151 - 9) = v97;
            *(&v151 - 8) = v93;
            v99 = v181;
            *((_BYTE *)&v151 - 56) = v181;
            v101 = v182;
            v100 = v183;
            *(&v151 - 6) = v185;
            *(&v151 - 5) = v101;
            *(&v151 - 4) = v100;
            *((_BYTE *)&v151 - 24) = v184;
            *(&v151 - 2) = v89;
            v102 = sub_10002A750(&qword_100646338);
            v179 = v91;
            v103 = v102;
            v104 = Set.removeAll(where:)(sub_100103144, &v151 - 12, v102);
            v178 = &v151;
            __chkstk_darwin(v104);
            *(&v151 - 10) = v98;
            *(&v151 - 9) = v97;
            *(&v151 - 8) = v188;
            *((_BYTE *)&v151 - 56) = v99;
            *(&v151 - 6) = v185;
            *(&v151 - 5) = v101;
            v79 = v176;
            *(&v151 - 4) = v100;
            *((_BYTE *)&v151 - 24) = v184;
            *(&v151 - 2) = v89;
            *(&v151 - 1) = (uint64_t)&v191;
            Set.removeAll(where:)(sub_100103200, &v151 - 12, v103);
            result = (_QWORD *)swift_release(v89);
            v81 = v179;
            v82 = (unint64_t)v180;
            if (v79 < 0)
              goto LABEL_51;
          }
          v91 = v81 + 1;
          v93 = v188;
          if (__OFADD__(v81, 1))
            goto LABEL_111;
          if (v91 >= v174)
            goto LABEL_74;
          v95 = *(_QWORD *)(v175 + 8 * v91);
          if (v95)
            goto LABEL_64;
          v96 = v81 + 2;
          if (v81 + 2 >= v174)
            goto LABEL_74;
          v95 = *(_QWORD *)(v175 + 8 * v96);
          if (v95)
            goto LABEL_63;
          v96 = v81 + 3;
          if (v81 + 3 >= v174)
            goto LABEL_74;
          v95 = *(_QWORD *)(v175 + 8 * v96);
          if (v95)
          {
LABEL_63:
            v91 = v96;
LABEL_64:
            v92 = (v95 - 1) & v95;
            v94 = __clz(__rbit64(v95)) + (v91 << 6);
            goto LABEL_65;
          }
          v91 = v81 + 4;
          if (v81 + 4 >= v174)
            goto LABEL_74;
          v95 = *(_QWORD *)(v175 + 8 * v91);
          if (v95)
            goto LABEL_64;
          v105 = v81 + 5;
          v106 = v167;
          while (v174 != v105)
          {
            v95 = *(_QWORD *)(v175 + 8 * v105++);
            if (v95)
            {
              v91 = v105 - 1;
              goto LABEL_64;
            }
          }
LABEL_75:
          sub_10003E410(v79);
          if (v163)
          {
            swift_bridgeObjectRetain(v106);
            v107 = __CocoaSet.makeIterator()(v156);
            v108 = sub_10002A750((uint64_t *)&unk_100640E20);
            v109 = sub_100023FEC(&qword_100646308, (uint64_t *)&unk_100640E20, (uint64_t)&unk_1005276C0);
            result = Set.Iterator.init(_cocoa:)(v208, v107, v108, v109);
            v106 = v208[0];
            v173 = v208[1];
            v110 = v208[2];
            v111 = v208[3];
            v112 = v208[4];
          }
          else
          {
            v113 = -1 << *(_BYTE *)(v106 + 32);
            v110 = ~v113;
            v114 = -v113;
            if (v114 < 64)
              v115 = ~(-1 << v114);
            else
              v115 = -1;
            v112 = v115 & *(_QWORD *)(v106 + 56);
            result = (_QWORD *)swift_bridgeObjectRetain(v106);
            v111 = 0;
            v173 = v153;
          }
          v169 = v110;
          v171 = v106 & 0x7FFFFFFFFFFFFFFFLL;
          v172 = (unint64_t)(v110 + 64) >> 6;
          v174 = v106;
          v180 = v30;
          if ((v106 & 0x8000000000000000) == 0)
            goto LABEL_85;
          while (1)
          {
            v116 = __CocoaSet.Iterator.next()(result);
            a5 = v186;
            if (!v116)
              goto LABEL_12;
            v117 = v116;
            v189 = v116;
            swift_unknownObjectRetain(v116);
            v118 = sub_10002A750((uint64_t *)&unk_100640E20);
            swift_dynamicCast(v190, &v189, v170, v118, 7);
            v119 = v190[0];
            v120 = swift_unknownObjectRelease(v117);
            v121 = v111;
            v122 = v112;
            if (!v119)
              break;
            while (1)
            {
              v177 = &v151;
              __chkstk_darwin(v120);
              v126 = v187;
              *(&v151 - 10) = a5;
              *(&v151 - 9) = v126;
              v127 = v188;
              *(&v151 - 8) = v188;
              v128 = v127;
              v129 = v181;
              *((_BYTE *)&v151 - 56) = v181;
              v179 = v122;
              v130 = v185;
              v131 = v182;
              *(&v151 - 6) = v185;
              *(&v151 - 5) = v131;
              v132 = v183;
              *(&v151 - 4) = v183;
              v133 = v132;
              *((_BYTE *)&v151 - 24) = v184;
              v176 = v119;
              *(&v151 - 2) = v119;
              v134 = sub_10002A750(&qword_100646338);
              v178 = (uint64_t *)v121;
              v175 = v134;
              v30 = v180;
              v135 = Set.removeAll(where:)(sub_10010311C, &v151 - 12, v134);
              v180 = &v151;
              __chkstk_darwin(v135);
              v137 = v186;
              v136 = v187;
              *(&v151 - 10) = v186;
              *(&v151 - 9) = v136;
              *(&v151 - 8) = v128;
              *((_BYTE *)&v151 - 56) = v129;
              *(&v151 - 6) = v130;
              *(&v151 - 5) = v131;
              v138 = v130;
              *(&v151 - 4) = v133;
              LOBYTE(v130) = v184;
              *((_BYTE *)&v151 - 24) = v184;
              v139 = v176;
              *(&v151 - 2) = v176;
              v140 = Set.removeAll(where:)(sub_100103144, &v151 - 12, v134);
              v180 = &v151;
              __chkstk_darwin(v140);
              v141 = v187;
              *(&v151 - 10) = v137;
              *(&v151 - 9) = v141;
              *(&v151 - 8) = v128;
              LOBYTE(v137) = v181;
              *((_BYTE *)&v151 - 56) = v181;
              v142 = v182;
              *(&v151 - 6) = v138;
              *(&v151 - 5) = v142;
              v143 = v139;
              v144 = v183;
              *(&v151 - 4) = v183;
              *((_BYTE *)&v151 - 24) = v130;
              *(&v151 - 2) = v143;
              v145 = v175;
              v146 = Set.removeAll(where:)(sub_100103144, &v151 - 12, v175);
              v180 = &v151;
              __chkstk_darwin(v146);
              *(&v151 - 10) = v186;
              *(&v151 - 9) = v141;
              *(&v151 - 8) = v188;
              *((_BYTE *)&v151 - 56) = v137;
              v147 = v185;
              *(&v151 - 6) = v185;
              *(&v151 - 5) = v142;
              *(&v151 - 4) = v144;
              *((_BYTE *)&v151 - 24) = v130;
              *(&v151 - 2) = v143;
              *(&v151 - 1) = (uint64_t)&v191;
              v148 = Set.removeAll(where:)(sub_1001031D0, &v151 - 12, v145);
              v180 = &v151;
              __chkstk_darwin(v148);
              v149 = v187;
              *(&v151 - 10) = v186;
              *(&v151 - 9) = v149;
              *(&v151 - 8) = v188;
              *((_BYTE *)&v151 - 56) = v137;
              *(&v151 - 6) = v147;
              *(&v151 - 5) = v142;
              v106 = v174;
              *(&v151 - 4) = v144;
              *((_BYTE *)&v151 - 24) = v130;
              *(&v151 - 2) = v143;
              Set.removeAll(where:)(sub_100103144, &v151 - 12, v145);
              result = (_QWORD *)swift_release(v143);
              v112 = v179;
              v111 = (int64_t)v178;
              v180 = v30;
              if (v106 < 0)
                break;
LABEL_85:
              a5 = v186;
              if (v112)
              {
                v122 = (v112 - 1) & v112;
                v123 = __clz(__rbit64(v112)) | (v111 << 6);
                v121 = v111;
              }
              else
              {
                v121 = v111 + 1;
                if (__OFADD__(v111, 1))
                  goto LABEL_112;
                if (v121 >= v172)
                  goto LABEL_12;
                v124 = *(_QWORD *)(v173 + 8 * v121);
                if (!v124)
                {
                  v125 = v111 + 2;
                  if (v111 + 2 >= v172)
                    goto LABEL_12;
                  v124 = *(_QWORD *)(v173 + 8 * v125);
                  if (v124)
                    goto LABEL_94;
                  v125 = v111 + 3;
                  if (v111 + 3 >= v172)
                    goto LABEL_12;
                  v124 = *(_QWORD *)(v173 + 8 * v125);
                  if (v124)
                  {
LABEL_94:
                    v121 = v125;
                  }
                  else
                  {
                    v121 = v111 + 4;
                    if (v111 + 4 >= v172)
                      goto LABEL_12;
                    v124 = *(_QWORD *)(v173 + 8 * v121);
                    if (!v124)
                    {
                      v150 = (char *)(v111 + 5);
                      while ((char *)v172 != v150)
                      {
                        v124 = *(_QWORD *)(v173 + 8 * (_QWORD)v150++);
                        if (v124)
                        {
                          v180 = v30;
                          v121 = (int64_t)(v150 - 1);
                          goto LABEL_95;
                        }
                      }
                      goto LABEL_12;
                    }
                  }
                }
LABEL_95:
                v122 = (v124 - 1) & v124;
                v123 = __clz(__rbit64(v124)) + (v121 << 6);
              }
              v119 = *(_QWORD *)(*(_QWORD *)(v106 + 48) + 8 * v123);
              v120 = swift_retain(v119);
              if (!v119)
                goto LABEL_11;
            }
          }
LABEL_11:
          v30 = v180;
LABEL_12:
          sub_10003E410(v106);
          v34 = v199;
          v35 = v200;
          v37 = v197;
          v36 = v198;
          v38 = v196;
          swift_bridgeObjectRetain(v200);
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v36);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v38);
          v180 = (uint64_t *)v35;
          sub_100477AD4(v35);
          v39 = swift_bridgeObjectRetain(v34);
          sub_100477AD4(v39);
          v40 = swift_bridgeObjectRetain(v36);
          v177 = (uint64_t *)v36;
          sub_100477AD4(v40);
          v41 = swift_bridgeObjectRetain(v37);
          sub_100477AD4(v41);
          v179 = v38;
          v42 = swift_bridgeObjectRetain(v38);
          sub_100477AD4(v42);
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v37);
          swift_bridgeObjectRelease(v36);
          v178 = (uint64_t *)v34;
          swift_bridgeObjectRelease(v34);
          sub_1000F6844(v35, (uint64_t *)&unk_100640E20, &qword_100646308, (void (*)(void))sub_100483584, (uint64_t (*)(uint64_t, uint64_t))sub_1000F55D4);
          sub_1000F6844(v34, (uint64_t *)&unk_100640E20, &qword_100646308, (void (*)(void))sub_100483584, (uint64_t (*)(uint64_t, uint64_t))sub_1000F55D4);
          v43 = (uint64_t)v177;
          sub_1000F6844((uint64_t)v177, (uint64_t *)&unk_100640E20, &qword_100646308, (void (*)(void))sub_100483584, (uint64_t (*)(uint64_t, uint64_t))sub_1000F55D4);
          sub_1000F6844(v37, (uint64_t *)&unk_100640E20, &qword_100646308, (void (*)(void))sub_100483584, (uint64_t (*)(uint64_t, uint64_t))sub_1000F55D4);
          v44 = v179;
          sub_1000F6844(v179, (uint64_t *)&unk_100640E20, &qword_100646308, (void (*)(void))sub_100483584, (uint64_t (*)(uint64_t, uint64_t))sub_1000F55D4);
          swift_bridgeObjectRelease(v44);
          swift_bridgeObjectRelease(v37);
          swift_bridgeObjectRelease(v43);
          swift_bridgeObjectRelease(v178);
          swift_bridgeObjectRelease(v180);
          v45 = v191;
          v46 = v192;
          v47 = v193;
          v48 = v194;
          v49 = v195;
          v199 = (uint64_t)v192;
          v200 = (uint64_t)v191;
          v197 = (uint64_t)v194;
          v198 = (uint64_t)v193;
          v196 = (uint64_t)v195;
          v213[1] = v191;
          v213[2] = v192;
          v213[3] = v193;
          v213[4] = v194;
          v213[5] = v195;
          swift_bridgeObjectRetain(v191);
          swift_bridgeObjectRetain(v46);
          swift_bridgeObjectRetain(v47);
          swift_bridgeObjectRetain(v48);
          swift_bridgeObjectRetain(v49);
          LOBYTE(v34) = sub_1000E2754();
          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease(v48);
          swift_bridgeObjectRelease(v47);
          swift_bridgeObjectRelease(v46);
          swift_bridgeObjectRelease(v45);
          if ((v34 & 1) != 0)
          {
            swift_bridgeObjectRelease(v49);
            swift_bridgeObjectRelease(v48);
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease(v46);
            result = (_QWORD *)swift_bridgeObjectRelease(v45);
            v28 = v204;
            v29 = v205;
            v26 = v202;
            v27 = v203;
            v25 = v201;
            a9 = v152;
            goto LABEL_109;
          }
          goto LABEL_13;
        }
        v69 = v180[v66];
        if (!v69)
        {
          v74 = v55 + 5;
          v75 = v168;
          do
          {
            if (v179 == v74)
              goto LABEL_44;
            v69 = v180[v74++];
          }
          while (!v69);
          v66 = v74 - 1;
        }
      }
    }
    v67 = (v69 - 1) & v69;
    v68 = __clz(__rbit64(v69)) + (v66 << 6);
LABEL_34:
    v64 = *(_QWORD *)(*(_QWORD *)(v53 + 48) + 8 * v68);
    v65 = swift_retain(v64);
    if (!v64)
      goto LABEL_43;
LABEL_35:
    __chkstk_darwin(v65);
    v71 = v187;
    *(&v151 - 10) = a5;
    *(&v151 - 9) = v71;
    *(&v151 - 8) = v188;
    *((_BYTE *)&v151 - 56) = v181;
    v72 = v182;
    *(&v151 - 6) = v185;
    *(&v151 - 5) = v72;
    *(&v151 - 4) = v183;
    *((_BYTE *)&v151 - 24) = v184;
    *(&v151 - 2) = v64;
    v73 = sub_10002A750(&qword_100646338);
    Set.removeAll(where:)(sub_10010311C, &v151 - 12, v73);
    result = (_QWORD *)swift_release(v64);
    v55 = v66;
    v56 = v67;
    if (v53 < 0)
      goto LABEL_20;
  }
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
  return result;
}

uint64_t sub_1000FDB68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = (unint64_t *)result;
  v6 = 0;
  v25 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    v18 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v10)
      return sub_1000F6338(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v6;
    if (!v19)
    {
      v6 = v18 + 1;
      if (v18 + 1 >= v10)
        return sub_1000F6338(v23, a2, v24, a3);
      v19 = *(_QWORD *)(v25 + 8 * v6);
      if (!v19)
      {
        v6 = v18 + 2;
        if (v18 + 2 >= v10)
          return sub_1000F6338(v23, a2, v24, a3);
        v19 = *(_QWORD *)(v25 + 8 * v6);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v9 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v6 << 6);
LABEL_5:
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v14 = *(_QWORD *)(a3 + 56) + 16 * v12;
    v15 = *(_QWORD *)v14;
    v16 = *(unsigned __int8 *)(v14 + 8);
    v17 = swift_retain(v13);
    LOBYTE(v16) = a4(v17, v15, v16);
    result = swift_release(v13);
    if ((v16 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_1000F6338(v23, a2, v24, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v10)
    return sub_1000F6338(v23, a2, v24, a3);
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v6 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v6 >= v10)
      return sub_1000F6338(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v25 + 8 * v6);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000FDD40(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v6 = v4;
  v9 = isStackAllocationSafe;
  v10 = *(_BYTE *)(isStackAllocationSafe + 32);
  v11 = v10 & 0x3F;
  v12 = (1 << v10) + 63;
  v13 = v12 >> 6;
  v14 = 8 * (v12 >> 6);
  if (v11 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v12 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v18 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0), v14);
    v15 = a4((char *)&v18 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0), v13, v9, a2, a3);
    if (v4)
      swift_willThrow(v15);
    else
      return v15;
  }
  else
  {
    v16 = (void *)swift_slowAlloc(v14, -1);
    bzero(v16, v14);
    v6 = a4((char *)v16, v13, v9, a2, a3);
    swift_slowDealloc(v16, -1, -1);
  }
  return v6;
}

uint64_t sub_1000FDEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  char v8;
  unint64_t v9;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  result = a4();
  if ((v8 & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < *(_QWORD *)(a2 + 16))
  {
    return *(_QWORD *)(a2 + 16 * v9 + 32) == a1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FDF30(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  void *Strong;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  char v70;
  uint64_t v71;
  id v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[4];
  _QWORD v92[5];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char v106[24];
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121[8];
  char v122[8];

  v11 = a5;
  v104 = qword_100645F40;
  v14 = *(_QWORD *)(a5 + qword_100645F40);
  if (!v14)
  {
    v15 = sub_1000EEB64(a5, a1, a2, sub_10006B64C, &qword_100646340, (uint64_t (*)(_QWORD *))sub_100352FE0);
    if (a3)
      goto LABEL_3;
LABEL_9:
    swift_retain(v14);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(a5 + qword_100645F40);
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v105 = (char *)v11;
  v16 = swift_allocObject(&unk_1005F1770, 32, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v17 = (_QWORD *)(v15 + 64);
  swift_beginAccess(v15 + 64, &v110, 33, 0);
  v18 = *(_QWORD **)(v15 + 64);
  swift_retain(v14);
  sub_100053DE4(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  *(_QWORD *)(v15 + 64) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = sub_1004557BC(0, v18[2] + 1, 1, v18);
    *v17 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    v18 = sub_1004557BC((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    *v17 = v18;
  }
  v18[2] = v21 + 1;
  v22 = &v18[2 * v21];
  v22[4] = sub_100105B74;
  v22[5] = v16;
  swift_endAccess(&v110);
  v11 = (uint64_t)v105;
LABEL_10:
  *(_QWORD *)&v110 = sub_10006B64C();
  *((_QWORD *)&v110 + 1) = v23;
  v111 = v24;
  LOBYTE(v112) = v25 & 1;
  v26 = qword_100645F38;
  *(_BYTE *)(a6 + qword_100645F38) = 1;
  sub_1000E7978(&v110, a7, a6, v15, a8);
  v27 = v111;
  v28 = v112;
  v29 = a6 + qword_100645F30;
  v30 = *(_QWORD *)(a6 + qword_100645F30);
  v31 = *(_QWORD *)(a6 + qword_100645F30 + 8);
  v32 = *(_QWORD *)(a6 + qword_100645F30 + 16);
  *(_OWORD *)v29 = v110;
  *(_QWORD *)(v29 + 16) = v27;
  *(_BYTE *)(v29 + 24) = v28;
  sub_1000072F0(v30, v31, v32);
  *(_BYTE *)(a6 + v26) = 0;
  if (!v14)
  {
    if ((*(_BYTE *)(v15 + 72) & 1) != 0)
    {
      swift_release(v15);
LABEL_27:
      v15 = *(_QWORD *)(v11 + v104);
      *(_QWORD *)(v11 + v104) = 0;
      return swift_release(v15);
    }
    swift_beginAccess(v15 + 80, v122, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v15 + 80) + 16) && !*(_QWORD *)(*(_QWORD *)(v15 + 88) + 16))
    {
      swift_beginAccess(v15 + 96, v106, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v15 + 96) + 16))
      {
        sub_100010634(v11 + qword_100645F08, (uint64_t)&v110);
        v89 = v112;
        v90 = v113;
        sub_10001413C(&v110, v112);
        (*(void (**)(uint64_t, uint64_t))(v90 + 24))(v89, v90);
        swift_release(v15);
        v87 = &v110;
LABEL_26:
        sub_100027F10(v87);
        goto LABEL_27;
      }
    }
    v33 = *(_QWORD *)(v15 + 48);
    v34 = *(_QWORD *)(v15 + 56);
    v105 = (char *)v11;
    v35 = (uint64_t *)(v11 + qword_100645F48);
    swift_beginAccess(v11 + qword_100645F48, v121, 0, 0);
    v37 = *v35;
    v36 = v35[1];
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v36);
    if ((sub_100341C00(v33, v37) & 1) != 0)
    {
      v38 = sub_100341C00(v34, v36);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v36);
      v39 = swift_bridgeObjectRelease(v37);
      v40 = v105;
      if ((v38 & 1) != 0)
      {
LABEL_21:
        __chkstk_darwin(v39);
        v92[2] = v40;
        v44 = swift_beginAccess(&v40[qword_100645F50], &v110, 33, 0);
        __chkstk_darwin(v44);
        v91[2] = sub_100105B58;
        v91[3] = v92;
        v45 = sub_10002A750(&qword_100640E78);
        Set.removeAll(where:)(sub_100105BE4, v91, v45);
        swift_endAccess(&v110);
        v46 = sub_10006B64C();
        v101 = v46;
        v48 = v47;
        v99 = v47;
        v50 = v49;
        v98 = v49;
        v52 = v51;
        Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v40[qword_100645EF8]);
        ObjectType = swift_getObjectType(Strong, v54);

        v56 = _typeName(_:qualified:)(ObjectType, 0);
        v100 = v57;
        sub_1000E0E74(v46, v48, v50, v52 & 1, v56, v57, &v110);
        v58 = v110;
        v59 = v112;
        v103 = v111;
        v60 = v113;
        v61 = v114;
        v63 = v115;
        v62 = v116;
        v64 = v117;
        v93 = v118;
        v65 = v119;
        v102 = v120;
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v100);
        v101 = v58;
        v110 = v58;
        v100 = *((_QWORD *)&v58 + 1);
        v111 = v103;
        v112 = v59;
        v99 = v59;
        v98 = v60;
        v113 = v60;
        v114 = v61;
        v97 = v61;
        v96 = v63;
        v115 = v63;
        v116 = v62;
        v95 = v62;
        v94 = v64;
        v117 = v64;
        v118 = v93;
        v93 = v65;
        v119 = v65;
        v66 = v105;
        v67 = *(_QWORD *)&v105[qword_100645F18];
        if (v67
          && (v68 = *(uint64_t (**)(uint64_t))(v67 + 16),
              v69 = swift_retain(*(_QWORD *)&v105[qword_100645F18]),
              v70 = v68(v69),
              swift_release(v67),
              (v70 & 1) != 0))
        {
          v71 = swift_allocObject(&unk_1005F1748, 32, 7);
          *(_QWORD *)(v71 + 16) = v66;
          *(_QWORD *)(v71 + 24) = v15;
          v72 = v66;
          swift_retain(v15);
          v73 = sub_100100074;
        }
        else
        {
          v73 = 0;
          v71 = 0;
        }
        v74 = swift_allocObject(&unk_1005F13B0, 24, 7);
        swift_unknownObjectWeakInit(v74 + 16, v66);
        v75 = (uint64_t)v66 + qword_100645F08;
        sub_100010634((uint64_t)v66 + qword_100645F08, (uint64_t)v107);
        v76 = v108;
        v77 = v109;
        sub_10001413C(v107, v108);
        v78 = *(void (**)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v77 + 32);
        swift_retain(v15);
        v78(&v110, sub_100100050, v74, v73, v71, sub_100100058, v15, v76, v77);
        swift_release(v15);
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v94);
        swift_bridgeObjectRelease(v95);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v103);
        swift_bridgeObjectRelease(v100);
        swift_bridgeObjectRelease(v101);
        sub_100027F10(v107);
        v79 = *(_QWORD *)(v15 + 16);
        v80 = *(_QWORD *)(v15 + 24);
        v81 = *(_QWORD *)(v15 + 32);
        v82 = *(_BYTE *)(v15 + 40);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v80);
        swift_bridgeObjectRetain(v81);
        v83 = v102;
        sub_1000F0078(v102, v79, v80, v81, v82);
        v84 = v81;
        v11 = (uint64_t)v105;
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(v83);
        sub_100010634(v75, (uint64_t)v107);
        v85 = v108;
        v86 = v109;
        sub_10001413C(v107, v108);
        (*(void (**)(uint64_t, uint64_t))(v86 + 24))(v85, v86);
        swift_release(v74);
        sub_1000381B8((uint64_t)v73, v71);
        swift_release(v15);
        v87 = (__int128 *)v107;
        goto LABEL_26;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      v40 = v105;
    }
    v41 = *(_QWORD *)&v40[qword_100645EF0];
    v42 = *v35;
    swift_retain(v41);
    v43 = swift_bridgeObjectRetain(v42);
    TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v43);
    swift_release(v41);
    v39 = swift_bridgeObjectRelease(v42);
    goto LABEL_21;
  }
  return swift_release(v15);
}

double sub_1000FE74C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  void *Strong;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  double result;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[4];
  _QWORD v79[4];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[24];
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110[8];
  char v111[8];

  v7 = (char *)a5;
  v93 = qword_100645F40;
  v10 = *(_QWORD *)(a5 + qword_100645F40);
  if (v10)
  {
    v11 = *(_QWORD *)(a5 + qword_100645F40);
    if (a3)
      goto LABEL_3;
LABEL_10:
    v20 = swift_retain(v10);
    a6(v20);
    if (!v10)
      goto LABEL_11;
    goto LABEL_28;
  }
  v11 = sub_1000EEB64(a5, a1, a2, sub_10006B64C, &qword_100646340, (uint64_t (*)(_QWORD *))sub_100352FE0);
  if (!a3)
    goto LABEL_10;
LABEL_3:
  v12 = swift_allocObject(&unk_1005F1C20, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  v13 = (_QWORD *)(v11 + 64);
  swift_beginAccess(v11 + 64, &v98, 33, 0);
  v14 = *(_QWORD **)(v11 + 64);
  swift_retain(v10);
  sub_100053DE4(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
  *(_QWORD *)(v11 + 64) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_1004557BC(0, v14[2] + 1, 1, v14);
    *v13 = v14;
  }
  v17 = v14[2];
  v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    v14 = sub_1004557BC((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
    *v13 = v14;
  }
  v14[2] = v17 + 1;
  v18 = &v14[2 * v17];
  v18[4] = sub_100105B74;
  v18[5] = v12;
  v19 = swift_endAccess(&v98);
  a6(v19);
  if (!v10)
  {
LABEL_11:
    if ((*(_BYTE *)(v11 + 72) & 1) != 0)
    {
      swift_release(v11);
LABEL_27:
      v11 = *(_QWORD *)&v7[v93];
      *(_QWORD *)&v7[v93] = 0;
      goto LABEL_28;
    }
    swift_beginAccess(v11 + 80, v111, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v11 + 80) + 16) && !*(_QWORD *)(*(_QWORD *)(v11 + 88) + 16))
    {
      swift_beginAccess(v11 + 96, v94, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v11 + 96) + 16))
      {
        sub_100010634((uint64_t)&v7[qword_100645F08], (uint64_t)&v98);
        v76 = v101;
        v77 = v102;
        sub_10001413C(&v98, v101);
        (*(void (**)(uint64_t, uint64_t))(v77 + 24))(v76, v77);
        swift_release(v11);
        v74 = &v98;
LABEL_26:
        sub_100027F10(v74);
        goto LABEL_27;
      }
    }
    v21 = *(_QWORD *)(v11 + 48);
    v22 = *(_QWORD *)(v11 + 56);
    v23 = (uint64_t *)&v7[qword_100645F48];
    swift_beginAccess(&v7[qword_100645F48], v110, 0, 0);
    v24 = *v23;
    v25 = v23[1];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    if ((sub_100341C00(v21, v24) & 1) != 0)
    {
      v26 = sub_100341C00(v22, v25);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v25);
      v27 = swift_bridgeObjectRelease(v24);
      if ((v26 & 1) != 0)
      {
LABEL_21:
        __chkstk_darwin(v27);
        v79[2] = v7;
        swift_beginAccess(&v7[qword_100645F50], &v98, 33, 0);
        __chkstk_darwin(v31);
        v78[2] = sub_100105B58;
        v78[3] = v79;
        v32 = sub_10002A750(&qword_100640E78);
        Set.removeAll(where:)(sub_100105BE4, v78, v32);
        swift_endAccess(&v98);
        v33 = sub_10006B64C();
        v89 = v33;
        v35 = v34;
        v88 = v34;
        v37 = v36;
        v87 = v36;
        v39 = v38;
        Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v7[qword_100645EF8]);
        ObjectType = swift_getObjectType(Strong, v41);

        v43 = _typeName(_:qualified:)(ObjectType, 0);
        v45 = v44;
        sub_1000E0E74(v33, v35, v37, v39 & 1, v43, v44, &v98);
        v46 = v99;
        v92 = v98;
        v47 = v101;
        v91 = v100;
        v49 = v102;
        v48 = v103;
        v83 = v7;
        v51 = v104;
        v50 = v105;
        v52 = v106;
        v81 = v107;
        v53 = v108;
        v90 = v109;
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v45);
        v98 = v92;
        v99 = v46;
        v89 = v46;
        v100 = v91;
        v101 = v47;
        v88 = v47;
        v87 = v49;
        v102 = v49;
        v103 = v48;
        v86 = v48;
        v85 = v51;
        v104 = v51;
        v105 = v50;
        v84 = v50;
        v7 = v83;
        v82 = v52;
        v106 = v52;
        v107 = v81;
        v81 = v53;
        v108 = v53;
        v54 = *(_QWORD *)&v83[qword_100645F18];
        if (v54
          && (v55 = *(uint64_t (**)(uint64_t))(v54 + 16),
              v56 = swift_retain(*(_QWORD *)&v83[qword_100645F18]),
              v57 = v55(v56),
              swift_release(v54),
              (v57 & 1) != 0))
        {
          v58 = swift_allocObject(&unk_1005F1BF8, 32, 7);
          *(_QWORD *)(v58 + 16) = v7;
          *(_QWORD *)(v58 + 24) = v11;
          v59 = v58;
          v60 = v7;
          swift_retain(v11);
          v61 = sub_100100074;
        }
        else
        {
          v61 = 0;
          v59 = 0;
        }
        v62 = swift_allocObject(&unk_1005F13B0, 24, 7);
        swift_unknownObjectWeakInit(v62 + 16, v7);
        v63 = (uint64_t)&v7[qword_100645F08];
        sub_100010634((uint64_t)&v7[qword_100645F08], (uint64_t)v95);
        v64 = v96;
        v65 = v97;
        sub_10001413C(v95, v96);
        v66 = *(void (**)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v65 + 32);
        swift_retain(v11);
        v80 = v59;
        v66(&v98, sub_100100050, v62, v61, v59, sub_100100058, v11, v64, v65);
        swift_release(v11);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v85);
        swift_bridgeObjectRelease(v86);
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease(v91);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v92);
        sub_100027F10(v95);
        v67 = *(_QWORD *)(v11 + 16);
        v68 = *(_QWORD *)(v11 + 24);
        v69 = *(_QWORD *)(v11 + 32);
        v70 = *(_BYTE *)(v11 + 40);
        swift_bridgeObjectRetain(v67);
        swift_bridgeObjectRetain(v68);
        swift_bridgeObjectRetain(v69);
        v71 = v90;
        sub_1000F0078(v90, v67, v68, v69, v70);
        swift_bridgeObjectRelease(v69);
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v71);
        sub_100010634(v63, (uint64_t)v95);
        v72 = v96;
        v73 = v97;
        sub_10001413C(v95, v96);
        (*(void (**)(uint64_t, uint64_t))(v73 + 24))(v72, v73);
        swift_release(v62);
        sub_1000381B8((uint64_t)v61, v80);
        swift_release(v11);
        v74 = v95;
        goto LABEL_26;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v24);
    }
    v28 = *(_QWORD *)&v7[qword_100645EF0];
    v29 = *v23;
    swift_retain(v28);
    v30 = swift_bridgeObjectRetain(v29);
    TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v30);
    swift_release(v28);
    v27 = swift_bridgeObjectRelease(v29);
    goto LABEL_21;
  }
LABEL_28:
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

uint64_t sub_1000FEEDC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  void *Strong;
  uint64_t v57;
  uint64_t ObjectType;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t);
  uint64_t v71;
  char v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[4];
  _QWORD v95[4];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110[24];
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125[8];
  char v126[8];

  v108 = qword_100645F40;
  v14 = *(_QWORD *)(a5 + qword_100645F40);
  if (v14)
    v15 = *(_QWORD *)(a5 + qword_100645F40);
  else
    v15 = sub_1000EEB64(a5, a1, a2, sub_10006B64C, &qword_100646340, (uint64_t (*)(_QWORD *))sub_100352FE0);
  v109 = (char *)a5;
  if (a3)
  {
    v16 = swift_allocObject(&unk_1005F1720, 32, 7);
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    v17 = (_QWORD *)(v15 + 64);
    swift_beginAccess(v15 + 64, &v114, 33, 0);
    v18 = *(_QWORD **)(v15 + 64);
    swift_retain(v14);
    sub_100053DE4(a3, a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    *(_QWORD *)(v15 + 64) = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v18 = sub_1004557BC(0, v18[2] + 1, 1, v18);
      *v17 = v18;
    }
    v21 = v18[2];
    v20 = v18[3];
    if (v21 >= v20 >> 1)
    {
      v18 = sub_1004557BC((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
      *v17 = v18;
    }
    v18[2] = v21 + 1;
    v22 = &v18[2 * v21];
    v22[4] = sub_100105B74;
    v22[5] = v16;
    swift_endAccess(&v114);
  }
  else
  {
    swift_retain(v14);
  }
  *(_QWORD *)&v114 = sub_10006B64C();
  *((_QWORD *)&v114 + 1) = v23;
  v115 = v24;
  LOBYTE(v116) = v25 & 1;
  v26 = qword_100645F38;
  *(_BYTE *)(a6 + qword_100645F38) = 1;
  v27 = sub_1000E344C(a7, a8);
  v29 = v28;
  sub_100307CB4(1, v27, 2, 0, 1);
  swift_bridgeObjectRelease(v29);
  swift_release(v27);
  v30 = v115;
  v31 = v116;
  v32 = a6 + qword_100645F30;
  v33 = *(_QWORD *)(a6 + qword_100645F30);
  v34 = *(_QWORD *)(a6 + qword_100645F30 + 8);
  v35 = *(_QWORD *)(a6 + qword_100645F30 + 16);
  *(_OWORD *)v32 = v114;
  *(_QWORD *)(v32 + 16) = v30;
  *(_BYTE *)(v32 + 24) = v31;
  sub_1000072F0(v33, v34, v35);
  *(_BYTE *)(a6 + v26) = 0;
  if (!v14)
  {
    if ((*(_BYTE *)(v15 + 72) & 1) != 0)
    {
      swift_release(v15);
      v36 = v109;
LABEL_28:
      v15 = *(_QWORD *)&v36[v108];
      *(_QWORD *)&v36[v108] = 0;
      return swift_release(v15);
    }
    swift_beginAccess(v15 + 80, v126, 0, 0);
    v36 = v109;
    if (!*(_QWORD *)(*(_QWORD *)(v15 + 80) + 16) && !*(_QWORD *)(*(_QWORD *)(v15 + 88) + 16))
    {
      swift_beginAccess(v15 + 96, v110, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v15 + 96) + 16))
      {
        sub_100010634((uint64_t)&v109[qword_100645F08], (uint64_t)&v114);
        v92 = v116;
        v93 = v117;
        sub_10001413C(&v114, v116);
        (*(void (**)(uint64_t, uint64_t))(v93 + 24))(v92, v93);
        swift_release(v15);
        v90 = &v114;
LABEL_27:
        sub_100027F10(v90);
        goto LABEL_28;
      }
    }
    v37 = *(_QWORD *)(v15 + 48);
    v38 = *(_QWORD *)(v15 + 56);
    v39 = (uint64_t *)&v109[qword_100645F48];
    swift_beginAccess(&v109[qword_100645F48], v125, 0, 0);
    v41 = *v39;
    v40 = v39[1];
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    if ((sub_100341C00(v37, v41) & 1) != 0)
    {
      v42 = sub_100341C00(v38, v40);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v40);
      v43 = swift_bridgeObjectRelease(v41);
      if ((v42 & 1) != 0)
      {
LABEL_22:
        __chkstk_darwin(v43);
        v95[2] = v109;
        v47 = swift_beginAccess(&v109[qword_100645F50], &v114, 33, 0);
        __chkstk_darwin(v47);
        v94[2] = sub_100105B58;
        v94[3] = v95;
        v48 = sub_10002A750(&qword_100640E78);
        Set.removeAll(where:)(sub_100105BE4, v94, v48);
        swift_endAccess(&v114);
        v49 = sub_10006B64C();
        v103 = v49;
        v51 = v50;
        v102 = v50;
        v53 = v52;
        v55 = v54;
        Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v109[qword_100645EF8]);
        ObjectType = swift_getObjectType(Strong, v57);

        v59 = _typeName(_:qualified:)(ObjectType, 0);
        v61 = v60;
        sub_1000E0E74(v49, v51, v53, v55 & 1, v59, v60, &v114);
        v107 = v114;
        v62 = v115;
        v106 = *((_QWORD *)&v114 + 1);
        v63 = v117;
        v105 = v116;
        v64 = v118;
        v65 = v119;
        v66 = v120;
        v67 = v121;
        v68 = v123;
        v97 = v122;
        v104 = v124;
        swift_bridgeObjectRelease(v53);
        swift_bridgeObjectRelease(v102);
        swift_bridgeObjectRelease(v103);
        swift_bridgeObjectRelease(v61);
        *(_QWORD *)&v114 = v107;
        *((_QWORD *)&v114 + 1) = v106;
        v103 = v62;
        v115 = v62;
        v116 = v105;
        v102 = v63;
        v117 = v63;
        v118 = v64;
        v101 = v64;
        v100 = v65;
        v119 = v65;
        v120 = v66;
        v99 = v66;
        v98 = v67;
        v121 = v67;
        v122 = v97;
        v97 = v68;
        v123 = v68;
        v69 = *(_QWORD *)&v109[qword_100645F18];
        if (v69
          && (v70 = *(uint64_t (**)(uint64_t))(v69 + 16),
              v71 = swift_retain(*(_QWORD *)&v109[qword_100645F18]),
              v72 = v70(v71),
              swift_release(v69),
              (v72 & 1) != 0))
        {
          v73 = swift_allocObject(&unk_1005F16F8, 32, 7);
          v74 = v109;
          *(_QWORD *)(v73 + 16) = v109;
          *(_QWORD *)(v73 + 24) = v15;
          v75 = v73;
          v76 = v74;
          swift_retain(v15);
          v77 = sub_100100074;
        }
        else
        {
          v77 = 0;
          v75 = 0;
        }
        v78 = swift_allocObject(&unk_1005F13B0, 24, 7);
        v36 = v109;
        swift_unknownObjectWeakInit(v78 + 16, v109);
        v79 = (uint64_t)&v36[qword_100645F08];
        sub_100010634((uint64_t)&v36[qword_100645F08], (uint64_t)v111);
        v80 = v112;
        v81 = v113;
        sub_10001413C(v111, v112);
        v82 = *(void (**)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v81 + 32);
        swift_retain(v15);
        v96 = v75;
        v82(&v114, sub_100100050, v78, v77, v75, sub_100100058, v15, v80, v81);
        swift_release(v15);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v100);
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v102);
        swift_bridgeObjectRelease(v105);
        swift_bridgeObjectRelease(v103);
        swift_bridgeObjectRelease(v106);
        swift_bridgeObjectRelease(v107);
        sub_100027F10(v111);
        v83 = *(_QWORD *)(v15 + 16);
        v84 = *(_QWORD *)(v15 + 24);
        v85 = *(_QWORD *)(v15 + 32);
        v86 = *(_BYTE *)(v15 + 40);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain(v85);
        v87 = v104;
        sub_1000F0078(v104, v83, v84, v85, v86);
        swift_bridgeObjectRelease(v85);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v87);
        sub_100010634(v79, (uint64_t)v111);
        v88 = v112;
        v89 = v113;
        sub_10001413C(v111, v112);
        (*(void (**)(uint64_t, uint64_t))(v89 + 24))(v88, v89);
        swift_release(v78);
        sub_1000381B8((uint64_t)v77, v96);
        swift_release(v15);
        v90 = (__int128 *)v111;
        goto LABEL_27;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v41);
    }
    v44 = *(_QWORD *)&v109[qword_100645EF0];
    v45 = *v39;
    swift_retain(v44);
    v46 = swift_bridgeObjectRetain(v45);
    TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v46);
    swift_release(v44);
    v43 = swift_bridgeObjectRelease(v45);
    goto LABEL_22;
  }
  return swift_release(v15);
}

uint64_t sub_1000FF730(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  void *Strong;
  uint64_t v51;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  char *v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t (*)(uint64_t), uint64_t, uint64_t);
  uint64_t (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[4];
  _QWORD v92[4];
  id v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t (*v110)(uint64_t);
  char v111[24];
  _QWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127[8];
  char v128[8];

  v10 = a8;
  v110 = a6;
  v107 = qword_100645F40;
  v14 = *(_QWORD *)(a5 + qword_100645F40);
  v109 = (char *)a5;
  if (!v14)
  {
    swift_bridgeObjectRetain(a8);
    v27 = a9;
    v16 = sub_1000EEB64(a5, a1, a2, sub_10006B64C, &qword_100646340, (uint64_t (*)(_QWORD *))sub_100352FE0);
    if (a3)
      goto LABEL_3;
LABEL_9:
    swift_retain(v14);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(a8);
  v15 = a9;
  v16 = v14;
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v106 = a7;
  v108 = v10;
  v17 = swift_allocObject(&unk_1005F1400, 32, 7);
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  v18 = (_QWORD *)(v16 + 64);
  swift_beginAccess(v16 + 64, &v115, 33, 0);
  v19 = *(_QWORD **)(v16 + 64);
  swift_retain(v14);
  sub_100053DE4(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  *(_QWORD *)(v16 + 64) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = sub_1004557BC(0, v19[2] + 1, 1, v19);
    *v18 = v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    v19 = sub_1004557BC((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
    *v18 = v19;
  }
  v19[2] = v22 + 1;
  v23 = &v19[2 * v22];
  v23[4] = sub_100100080;
  v23[5] = v17;
  swift_endAccess(&v115);
  v10 = v108;
  a7 = v106;
LABEL_10:
  swift_bridgeObjectRetain(v10);
  v28 = a9;
  sub_100319798(v110, a7, v10, (uint64_t)v28, a10);
  swift_bridgeObjectRelease(v10);

  if (!v14)
  {
    if ((*(_BYTE *)(v16 + 72) & 1) != 0)
    {
      swift_release(v16);
      v29 = v109;
LABEL_27:
      v16 = *(_QWORD *)&v29[v107];
      *(_QWORD *)&v29[v107] = 0;
      goto LABEL_28;
    }
    swift_beginAccess(v16 + 80, v128, 0, 0);
    v29 = v109;
    if (!*(_QWORD *)(*(_QWORD *)(v16 + 80) + 16) && !*(_QWORD *)(*(_QWORD *)(v16 + 88) + 16))
    {
      swift_beginAccess(v16 + 96, v111, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v16 + 96) + 16))
      {
        sub_100010634((uint64_t)&v109[qword_100645F08], (uint64_t)&v115);
        v88 = v16;
        v89 = v118;
        v90 = v119;
        sub_10001413C(&v115, v118);
        (*(void (**)(uint64_t, uint64_t))(v90 + 24))(v89, v90);
        swift_release(v88);
        sub_100027F10(&v115);
        goto LABEL_27;
      }
    }
    v30 = *(_QWORD *)(v16 + 48);
    v31 = *(_QWORD *)(v16 + 56);
    v110 = (uint64_t (*)(uint64_t))v16;
    v32 = (uint64_t *)&v109[qword_100645F48];
    swift_beginAccess(&v109[qword_100645F48], v127, 0, 0);
    v34 = *v32;
    v33 = v32[1];
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v33);
    v108 = v10;
    v93 = v28;
    if ((sub_100341C00(v30, v34) & 1) != 0)
    {
      v35 = sub_100341C00(v31, v33);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v33);
      v36 = swift_bridgeObjectRelease(v34);
      if ((v35 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v34);
    }
    v37 = *(_QWORD *)&v109[qword_100645EF0];
    v38 = *v32;
    swift_retain(v37);
    v39 = swift_bridgeObjectRetain(v38);
    TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v39);
    swift_release(v37);
    v36 = swift_bridgeObjectRelease(v38);
LABEL_21:
    __chkstk_darwin(v36);
    v92[2] = v109;
    v40 = swift_beginAccess(&v109[qword_100645F50], &v115, 33, 0);
    __chkstk_darwin(v40);
    v91[2] = sub_1000FFFCC;
    v91[3] = v92;
    v41 = sub_10002A750(&qword_100640E78);
    Set.removeAll(where:)(sub_100100000, v91, v41);
    v42 = v109;
    swift_endAccess(&v115);
    v43 = sub_10006B64C();
    v105 = v43;
    v45 = v44;
    v103 = v44;
    v47 = v46;
    v49 = v48;
    Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v42[qword_100645EF8]);
    ObjectType = swift_getObjectType(Strong, v51);

    v53 = _typeName(_:qualified:)(ObjectType, 0);
    v104 = v54;
    sub_1000E0E74(v43, v45, v47, v49 & 1, v53, v54, &v115);
    v55 = v115;
    v56 = v116;
    v94 = v117;
    v57 = v119;
    v58 = v120;
    v59 = v121;
    v61 = v122;
    v60 = v123;
    v62 = v125;
    v97 = v124;
    v106 = v126;
    v63 = v47;
    v64 = v118;
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v103);
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v104);
    v105 = v55;
    v115 = v55;
    v116 = v56;
    v104 = v56;
    v65 = v94;
    v117 = v94;
    v118 = v64;
    v102 = v64;
    v103 = v57;
    v119 = v57;
    v120 = v58;
    v101 = v58;
    v100 = v59;
    v121 = v59;
    v122 = v61;
    v99 = v61;
    v98 = v60;
    v123 = v60;
    v124 = v97;
    v97 = v62;
    v125 = v62;
    v66 = *(_QWORD *)&v42[qword_100645F18];
    if (v66)
    {
      v67 = *(uint64_t (**)(uint64_t))(v66 + 16);
      v68 = swift_retain(*(_QWORD *)&v42[qword_100645F18]);
      v69 = v67(v68);
      swift_release(v66);
      v28 = v93;
      if ((v69 & 1) != 0)
      {
        v70 = swift_allocObject(&unk_1005F13D8, 32, 7);
        v71 = v110;
        *(_QWORD *)(v70 + 16) = v42;
        *(_QWORD *)(v70 + 24) = v71;
        v72 = v42;
        swift_retain(v71);
        v73 = sub_100100074;
      }
      else
      {
        v73 = 0;
        v70 = 0;
      }
    }
    else
    {
      v73 = 0;
      v70 = 0;
      v28 = v93;
    }
    v74 = swift_allocObject(&unk_1005F13B0, 24, 7);
    swift_unknownObjectWeakInit(v74 + 16, v42);
    v96 = &v42[qword_100645F08];
    sub_100010634((uint64_t)&v42[qword_100645F08], (uint64_t)v112);
    v75 = v113;
    v76 = v114;
    sub_10001413C(v112, v113);
    v77 = *(void (**)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t (*)(uint64_t), uint64_t, uint64_t))(v76 + 32);
    v78 = v110;
    swift_retain(v110);
    v95 = v73;
    v77(&v115, sub_100100050, v74, v73, v70, sub_100100058, v78, v75, v76);
    v29 = v109;
    swift_release(v78);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(v103);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v105);
    sub_100027F10(v112);
    v79 = *((_QWORD *)v78 + 2);
    v80 = *((_QWORD *)v78 + 3);
    v81 = *((_QWORD *)v78 + 4);
    v82 = *((_BYTE *)v78 + 40);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v81);
    v83 = v70;
    v84 = v106;
    sub_1000F0078(v106, v79, v80, v81, v82);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v84);
    sub_100010634((uint64_t)v96, (uint64_t)v112);
    v85 = v113;
    v86 = v114;
    sub_10001413C(v112, v113);
    (*(void (**)(uint64_t, uint64_t))(v86 + 24))(v85, v86);
    swift_release(v74);
    sub_1000381B8((uint64_t)v95, v83);
    swift_release(v78);
    sub_100027F10(v112);
    v10 = v108;
    goto LABEL_27;
  }
LABEL_28:
  swift_release(v16);

  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_1000FFFCC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EEEB8(a1, *(_QWORD *)(v1 + 16), sub_10006B64C, (uint64_t (*)(uint64_t))sub_1002AA6DC, sub_1000CE774) & 1;
}

uint64_t sub_100100000()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10010002C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100100050(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EF5C8(a1, v1);
}

uint64_t sub_100100058(char a1)
{
  uint64_t v1;

  return sub_1000EFC10(a1, v1);
}

uint64_t sub_100100074(uint64_t a1)
{
  return sub_1001032B8(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_10010286C);
}

uint64_t sub_100100080(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

double sub_1001000A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a2;
  v4 = swift_isaMask & *v2;
  v5 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000232AC(v10, v13, v14, v15);
  v18 = v17;
  v20 = v19;
  v22 = sub_1000BEDB4(a1, v16, v17, v19, v21 & 1, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88));
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v18);
  v23 = swift_bridgeObjectRelease(v16);
  if (v22)
  {
    if (*(_BYTE *)(v22 + 72) == 2)
    {
      v28 = sub_1000232AC(v23, v24, v25, v26);
      v30 = v29;
      v32 = v31;
      sub_1000BF2F8((uint64_t *)v22, v28, v31, v33 & 1, v7);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v28);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_1000073A0((uint64_t)v7, &qword_100646950);
        if (qword_10063D3C8 != -1)
          swift_once(&qword_10063D3C8, sub_1000E35C8);
        v34 = type metadata accessor for Logger(0);
        v35 = sub_100012DC4(v34, (uint64_t)qword_100645EC0);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.fault.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to find index path", v38, 2u);
          swift_slowDealloc(v38, -1, -1);
          swift_release();

        }
        else
        {

          *(_QWORD *)&result = swift_release().n128_u64[0];
        }
      }
      else
      {
        v39 = (*(uint64_t (**)(char *, _BYTE *, uint64_t))(v9 + 32))(v12, v7, v8);
        __chkstk_darwin(v39);
        *(&v42 - 4) = v22;
        *(&v42 - 3) = (uint64_t)v2;
        v40 = v43;
        *(&v42 - 2) = (uint64_t)v12;
        *(&v42 - 1) = v40;
        sub_1000E4554((void (*)(uint64_t *))sub_100103424, (uint64_t)(&v42 - 6), 0, 0, 0, 0);
        v41 = swift_release();
        (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v12, v8, v41);
      }
    }
    else
    {
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

void sub_10010039C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void (*v41)(char *, _BYTE *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t WitnessTable;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  void *Strong;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61[24];

  v3 = v2;
  v57 = a2;
  v5 = swift_isaMask & *v2;
  v6 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v59 - 8);
  v10 = __chkstk_darwin(v59);
  v58 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000232AC(v10, v12, v13, v14);
  v17 = v16;
  v19 = v18;
  v20 = *(_QWORD *)(v5 + 80);
  v21 = *(_QWORD *)(v5 + 88);
  v56 = a1;
  v23 = sub_1000BEDB4(a1, v15, v16, v18, v22 & 1, v20, v21);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v17);
  v24 = swift_bridgeObjectRelease(v15);
  if (v23)
  {
    if (*(_BYTE *)(v23 + 72) == 1)
    {
      v28 = sub_1000232AC(v24, v25, v26, v27);
      v30 = v29;
      v32 = v31;
      sub_1000BF2F8((uint64_t *)v23, v28, v31, v33 & 1, v8);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v28);
      v34 = v9;
      v35 = v59;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v59) == 1)
      {
        sub_1000073A0((uint64_t)v8, &qword_100646950);
        if (qword_10063D3C8 != -1)
          swift_once(&qword_10063D3C8, sub_1000E35C8);
        v36 = type metadata accessor for Logger(0);
        v37 = sub_100012DC4(v36, (uint64_t)qword_100645EC0);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.fault.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v40 = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unable to find index path", v40, 2u);
          swift_slowDealloc(v40, -1, -1);
          swift_release();

        }
        else
        {

          swift_release();
        }
      }
      else
      {
        v41 = *(void (**)(char *, _BYTE *, uint64_t))(v9 + 32);
        v42 = v58;
        v41(v58, v8, v35);
        swift_beginAccess(v23 + 64, v61, 0, 0);
        v60 = *(_QWORD *)(v23 + 64);
        v44 = type metadata accessor for TTRITreeViewNode(255, v20, v21, v43);
        v45 = type metadata accessor for Array(0, v44);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v45);
        v47 = Collection.isEmpty.getter(v45, WitnessTable);
        if ((v47 & 1) == 0)
        {
          if (qword_10063D3C8 != -1)
            swift_once(&qword_10063D3C8, sub_1000E35C8);
          v48 = type metadata accessor for Logger(0);
          v49 = sub_100012DC4(v48, (uint64_t)qword_100645EC0);
          v50 = Logger.logObject.getter(v49);
          v51 = static os_log_type_t.fault.getter(v50);
          if (os_log_type_enabled(v50, v51))
          {
            v52 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v52 = 0;
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "Collapsed node should have no child nodes", v52, 2u);
            swift_slowDealloc(v52, -1, -1);
          }

        }
        __chkstk_darwin(v47);
        *(&v56 - 4) = (uint64_t)v3;
        *(&v56 - 3) = v23;
        v53 = v57;
        *(&v56 - 2) = (uint64_t)v42;
        *(&v56 - 1) = v53;
        sub_1000E4554((void (*)(uint64_t *))sub_100103430, (uint64_t)(&v56 - 6), 0, 0, 0, 0);
        if (sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4))
        {
          Strong = (void *)swift_unknownObjectUnownedLoadStrong((char *)v3 + qword_100645EF8);
          sub_100098CE0();
          swift_release();
          swift_release();

        }
        else
        {
          v55 = swift_release();
        }
        (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v42, v35, v55);
      }
    }
    else
    {
      swift_release();
    }
  }
}

double sub_10010081C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  char v54;
  void *Strong;
  uint64_t v56;
  uint64_t ObjectType;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  char v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  double result;
  uint64_t v91;
  _QWORD *v92;
  _QWORD v93[4];
  _QWORD v94[4];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char v109[24];
  _QWORD v110[3];
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124[8];
  char v125[8];

  v107 = qword_100645F40;
  v14 = *(_QWORD *)(a5 + qword_100645F40);
  if (v14)
    v15 = *(_QWORD *)(a5 + qword_100645F40);
  else
    v15 = sub_1000EEB64(a5, a1, a2, sub_10006B3DC, (uint64_t *)&unk_1006463F0, (uint64_t (*)(_QWORD *))sub_100352EF8);
  v108 = (char *)a5;
  if (a3)
  {
    v16 = swift_allocObject(&unk_1005F1B58, 32, 7);
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    v17 = (_QWORD *)(v15 + 64);
    swift_beginAccess(v15 + 64, &v113, 33, 0);
    v18 = *(_QWORD **)(v15 + 64);
    swift_retain();
    sub_100053DE4(a3, a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    *(_QWORD *)(v15 + 64) = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v18 = sub_1004557BC(0, v18[2] + 1, 1, v18);
      *v17 = v18;
    }
    v21 = v18[2];
    v20 = v18[3];
    if (v21 >= v20 >> 1)
    {
      v18 = sub_1004557BC((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
      *v17 = v18;
    }
    v18[2] = v21 + 1;
    v22 = &v18[2 * v21];
    v22[4] = sub_100105B74;
    v22[5] = v16;
    swift_endAccess(&v113);
  }
  else
  {
    swift_retain();
  }
  *(_QWORD *)&v113 = sub_10006B3DC();
  *((_QWORD *)&v113 + 1) = v23;
  v114 = v24;
  LOBYTE(v115) = v25 & 1;
  v26 = qword_100645F38;
  *(_BYTE *)(a6 + qword_100645F38) = 1;
  sub_1000E32C0(a7, a8);
  v28 = v27;
  sub_100307A44(1, v29, 2, 0, 1);
  swift_bridgeObjectRelease(v28);
  swift_release();
  v30 = v114;
  v31 = v115;
  v32 = a6 + qword_100645F30;
  v33 = *(_QWORD *)(a6 + qword_100645F30);
  v34 = *(_QWORD *)(a6 + qword_100645F30 + 8);
  v35 = *(_QWORD *)(a6 + qword_100645F30 + 16);
  *(_OWORD *)v32 = v113;
  *(_QWORD *)(v32 + 16) = v30;
  *(_BYTE *)(v32 + 24) = v31;
  sub_1000072F0(v33, v34, v35);
  *(_BYTE *)(a6 + v26) = 0;
  if (!v14)
  {
    if ((*(_BYTE *)(v15 + 72) & 1) != 0)
    {
      swift_release();
      v36 = v108;
LABEL_28:
      *(_QWORD *)&v36[v107] = 0;
      goto LABEL_29;
    }
    swift_beginAccess(v15 + 80, v125, 0, 0);
    v36 = v108;
    if (!*(_QWORD *)(*(_QWORD *)(v15 + 80) + 16) && !*(_QWORD *)(*(_QWORD *)(v15 + 88) + 16))
    {
      swift_beginAccess(v15 + 96, v109, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v15 + 96) + 16))
      {
        sub_100010634((uint64_t)&v108[qword_100645F08], (uint64_t)&v113);
        v91 = v115;
        v92 = v116;
        sub_10001413C(&v113, v115);
        ((void (*)(uint64_t, _QWORD *))v92[3])(v91, v92);
        swift_release();
        v89 = &v113;
LABEL_27:
        sub_100027F10(v89);
        goto LABEL_28;
      }
    }
    v37 = *(_QWORD *)(v15 + 48);
    v38 = *(_QWORD *)(v15 + 56);
    v39 = (uint64_t *)&v108[qword_100645F48];
    swift_beginAccess(&v108[qword_100645F48], v124, 0, 0);
    v41 = *v39;
    v40 = v39[1];
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    if ((sub_10034169C(v37, v41) & 1) != 0)
    {
      v42 = sub_10034169C(v38, v40);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v41);
      if ((v42 & 1) != 0)
      {
LABEL_22:
        __chkstk_darwin(v43);
        v94[2] = v108;
        swift_beginAccess(&v108[qword_100645F50], &v113, 33, 0);
        __chkstk_darwin(v46);
        v93[2] = sub_100105B5C;
        v93[3] = v94;
        v47 = sub_10002A750((uint64_t *)&unk_100646F30);
        Set.removeAll(where:)(sub_100105BE4, v93, v47);
        swift_endAccess(&v113);
        v48 = (_QWORD *)sub_10006B3DC();
        v102 = v48;
        v50 = v49;
        v101 = v49;
        v52 = v51;
        v54 = v53;
        Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v108[qword_100645EF8]);
        ObjectType = swift_getObjectType(Strong, v56);

        v58 = _typeName(_:qualified:)(ObjectType, 0);
        v60 = v59;
        sub_1000E02D4(v48, v50, v52, v54 & 1, v58, v59, &v113);
        v106 = v113;
        v61 = v114;
        v105 = *((_QWORD *)&v113 + 1);
        v62 = v116;
        v104 = v115;
        v63 = v117;
        v64 = v118;
        v65 = v119;
        v66 = v120;
        v67 = v122;
        v96 = v121;
        v103 = v123;
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v102);
        swift_bridgeObjectRelease(v60);
        *(_QWORD *)&v113 = v106;
        *((_QWORD *)&v113 + 1) = v105;
        v102 = v61;
        v114 = v61;
        v115 = v104;
        v101 = v62;
        v116 = v62;
        v117 = v63;
        v100 = v63;
        v99 = v64;
        v118 = v64;
        v119 = v65;
        v98 = v65;
        v97 = v66;
        v120 = v66;
        v121 = v96;
        v96 = v67;
        v122 = v67;
        v68 = *(_QWORD *)&v108[qword_100645F18];
        if (v68
          && (v69 = *(uint64_t (**)(uint64_t))(v68 + 16),
              v70 = swift_retain(),
              v71 = v69(v70),
              swift_release(),
              (v71 & 1) != 0))
        {
          v72 = swift_allocObject(&unk_1005F1B30, 32, 7);
          v73 = v108;
          *(_QWORD *)(v72 + 16) = v108;
          *(_QWORD *)(v72 + 24) = v15;
          v74 = v72;
          v75 = v73;
          swift_retain();
          v76 = sub_100103500;
        }
        else
        {
          v76 = 0;
          v74 = 0;
        }
        v77 = swift_allocObject(&unk_1005F1888, 24, 7);
        v36 = v108;
        swift_unknownObjectWeakInit(v77 + 16, v108);
        v78 = (uint64_t)&v36[qword_100645F08];
        sub_100010634((uint64_t)&v36[qword_100645F08], (uint64_t)v110);
        v79 = v111;
        v80 = v112;
        sub_10001413C(v110, v111);
        v81 = *(void (**)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v80 + 32);
        swift_retain();
        v95 = v74;
        v81(&v113, sub_1001034F4, v77, v76, v74, sub_100100058, v15, v79, v80);
        swift_release();
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v100);
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v104);
        swift_bridgeObjectRelease(v102);
        swift_bridgeObjectRelease(v105);
        swift_bridgeObjectRelease(v106);
        sub_100027F10(v110);
        v82 = *(_QWORD *)(v15 + 16);
        v83 = *(_QWORD *)(v15 + 24);
        v84 = *(_QWORD *)(v15 + 32);
        v85 = *(_BYTE *)(v15 + 40);
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRetain(v84);
        v86 = v103;
        sub_1000EFCAC(v103, v82, v83, v84, v85);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v86);
        sub_100010634(v78, (uint64_t)v110);
        v87 = v111;
        v88 = v112;
        sub_10001413C(v110, v111);
        (*(void (**)(uint64_t, uint64_t))(v88 + 24))(v87, v88);
        swift_release();
        sub_1000381B8((uint64_t)v76, v95);
        swift_release();
        v89 = (__int128 *)v110;
        goto LABEL_27;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v41);
    }
    v44 = *v39;
    swift_retain();
    swift_bridgeObjectRetain(v44);
    TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v45);
    swift_release();
    swift_bridgeObjectRelease(v44);
    goto LABEL_22;
  }
LABEL_29:
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_100101070(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  char v51;
  void *Strong;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  char v69;
  uint64_t v70;
  id v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  double result;
  uint64_t v88;
  _QWORD *v89;
  _QWORD v90[4];
  _QWORD v91[5];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char v105[24];
  _QWORD v106[3];
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120[8];
  char v121[8];

  v11 = a5;
  v103 = qword_100645F40;
  v14 = *(_QWORD *)(a5 + qword_100645F40);
  if (!v14)
  {
    v15 = sub_1000EEB64(a5, a1, a2, sub_10006B3DC, (uint64_t *)&unk_1006463F0, (uint64_t (*)(_QWORD *))sub_100352EF8);
    if (a3)
      goto LABEL_3;
LABEL_9:
    swift_retain();
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(a5 + qword_100645F40);
  if (!a3)
    goto LABEL_9;
LABEL_3:
  v104 = (char *)v11;
  v16 = swift_allocObject(&unk_1005F1BA8, 32, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v17 = (_QWORD *)(v15 + 64);
  swift_beginAccess(v15 + 64, &v109, 33, 0);
  v18 = *(_QWORD **)(v15 + 64);
  swift_retain();
  sub_100053DE4(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  *(_QWORD *)(v15 + 64) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = sub_1004557BC(0, v18[2] + 1, 1, v18);
    *v17 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    v18 = sub_1004557BC((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    *v17 = v18;
  }
  v18[2] = v21 + 1;
  v22 = &v18[2 * v21];
  v22[4] = sub_100105B74;
  v22[5] = v16;
  swift_endAccess(&v109);
  v11 = (uint64_t)v104;
LABEL_10:
  *(_QWORD *)&v109 = sub_10006B3DC();
  *((_QWORD *)&v109 + 1) = v23;
  v110 = v24;
  LOBYTE(v111) = v25 & 1;
  v26 = qword_100645F38;
  *(_BYTE *)(a6 + qword_100645F38) = 1;
  sub_1000E6D50(&v109, a7, a6, v15, a8);
  v27 = v110;
  v28 = v111;
  v29 = a6 + qword_100645F30;
  v30 = *(_QWORD *)(a6 + qword_100645F30);
  v31 = *(_QWORD *)(a6 + qword_100645F30 + 8);
  v32 = *(_QWORD *)(a6 + qword_100645F30 + 16);
  *(_OWORD *)v29 = v109;
  *(_QWORD *)(v29 + 16) = v27;
  *(_BYTE *)(v29 + 24) = v28;
  sub_1000072F0(v30, v31, v32);
  *(_BYTE *)(a6 + v26) = 0;
  if (!v14)
  {
    if ((*(_BYTE *)(v15 + 72) & 1) != 0)
    {
      swift_release();
LABEL_27:
      *(_QWORD *)(v11 + v103) = 0;
      goto LABEL_28;
    }
    swift_beginAccess(v15 + 80, v121, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v15 + 80) + 16) && !*(_QWORD *)(*(_QWORD *)(v15 + 88) + 16))
    {
      swift_beginAccess(v15 + 96, v105, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v15 + 96) + 16))
      {
        sub_100010634(v11 + qword_100645F08, (uint64_t)&v109);
        v88 = v111;
        v89 = v112;
        sub_10001413C(&v109, v111);
        ((void (*)(uint64_t, _QWORD *))v89[3])(v88, v89);
        swift_release();
        v86 = &v109;
LABEL_26:
        sub_100027F10(v86);
        goto LABEL_27;
      }
    }
    v33 = *(_QWORD *)(v15 + 48);
    v34 = *(_QWORD *)(v15 + 56);
    v104 = (char *)v11;
    v35 = (uint64_t *)(v11 + qword_100645F48);
    swift_beginAccess(v11 + qword_100645F48, v120, 0, 0);
    v37 = *v35;
    v36 = v35[1];
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v36);
    if ((sub_10034169C(v33, v37) & 1) != 0)
    {
      v38 = sub_10034169C(v34, v36);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      v40 = v104;
      if ((v38 & 1) != 0)
      {
LABEL_21:
        __chkstk_darwin(v39);
        v91[2] = v40;
        swift_beginAccess(&v40[qword_100645F50], &v109, 33, 0);
        __chkstk_darwin(v43);
        v90[2] = sub_100105B5C;
        v90[3] = v91;
        v44 = sub_10002A750((uint64_t *)&unk_100646F30);
        Set.removeAll(where:)(sub_100105BE4, v90, v44);
        swift_endAccess(&v109);
        v45 = (_QWORD *)sub_10006B3DC();
        v100 = v45;
        v47 = v46;
        v98 = (uint64_t)v46;
        v49 = v48;
        v97 = v48;
        v51 = v50;
        Strong = (void *)swift_unknownObjectUnownedLoadStrong(&v40[qword_100645EF8]);
        ObjectType = swift_getObjectType(Strong, v53);

        v55 = _typeName(_:qualified:)(ObjectType, 0);
        v99 = v56;
        sub_1000E02D4(v45, v47, v49, v51 & 1, v55, v56, &v109);
        v57 = v109;
        v58 = v111;
        v102 = v110;
        v59 = v112;
        v60 = v113;
        v62 = v114;
        v61 = v115;
        v63 = v116;
        v92 = v117;
        v64 = v118;
        v101 = v119;
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease(v100);
        swift_bridgeObjectRelease(v99);
        v100 = (_QWORD *)v57;
        v109 = v57;
        v99 = *((_QWORD *)&v57 + 1);
        v110 = v102;
        v111 = v58;
        v98 = v58;
        v97 = v59;
        v112 = v59;
        v113 = v60;
        v96 = v60;
        v95 = v62;
        v114 = v62;
        v115 = v61;
        v94 = v61;
        v93 = v63;
        v116 = v63;
        v117 = v92;
        v92 = v64;
        v118 = v64;
        v65 = v104;
        v66 = *(_QWORD *)&v104[qword_100645F18];
        if (v66
          && (v67 = *(uint64_t (**)(uint64_t))(v66 + 16),
              v68 = swift_retain(),
              v69 = v67(v68),
              swift_release(),
              (v69 & 1) != 0))
        {
          v70 = swift_allocObject(&unk_1005F1B80, 32, 7);
          *(_QWORD *)(v70 + 16) = v65;
          *(_QWORD *)(v70 + 24) = v15;
          v71 = v65;
          swift_retain();
          v72 = sub_100103500;
        }
        else
        {
          v72 = 0;
          v70 = 0;
        }
        v73 = swift_allocObject(&unk_1005F1888, 24, 7);
        swift_unknownObjectWeakInit(v73 + 16, v65);
        v74 = (uint64_t)v65 + qword_100645F08;
        sub_100010634((uint64_t)v65 + qword_100645F08, (uint64_t)v106);
        v75 = v107;
        v76 = v108;
        sub_10001413C(v106, v107);
        v77 = *(void (**)(__int128 *, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v76 + 32);
        swift_retain();
        v77(&v109, sub_1001034F4, v73, v72, v70, sub_100100058, v15, v75, v76);
        swift_release();
        swift_bridgeObjectRelease(v92);
        swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v94);
        swift_bridgeObjectRelease(v95);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v98);
        swift_bridgeObjectRelease(v102);
        swift_bridgeObjectRelease(v99);
        swift_bridgeObjectRelease(v100);
        sub_100027F10(v106);
        v78 = *(_QWORD *)(v15 + 16);
        v79 = *(_QWORD *)(v15 + 24);
        v80 = *(_QWORD *)(v15 + 32);
        v81 = *(_BYTE *)(v15 + 40);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v80);
        v82 = v101;
        sub_1000EFCAC(v101, v78, v79, v80, v81);
        v83 = v80;
        v11 = (uint64_t)v104;
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease(v82);
        sub_100010634(v74, (uint64_t)v106);
        v84 = v107;
        v85 = v108;
        sub_10001413C(v106, v107);
        (*(void (**)(uint64_t, uint64_t))(v85 + 24))(v84, v85);
        swift_release();
        sub_1000381B8((uint64_t)v72, v70);
        swift_release();
        v86 = (__int128 *)v106;
        goto LABEL_26;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v37);
      v40 = v104;
    }
    v41 = *v35;
    swift_retain();
    swift_bridgeObjectRetain(v41);
    TTRAnyTreeViewCollapsedStatesPersisting.saveCollapsedTreeViewItemIDs(_:)(v42);
    swift_release();
    swift_bridgeObjectRelease(v41);
    goto LABEL_21;
  }
LABEL_28:
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_10010188C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *Strong;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _BYTE v25[24];

  v3 = swift_isaMask & *v1;
  v4 = *(_QWORD *)(v3 + 0x50);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = &v25[-v7 - 8];
  v12 = sub_1000232AC(v6, v9, v10, v11);
  v14 = v13;
  v16 = v15;
  v18 = sub_10002BE0C(a1, v12, v13, v15, v17 & 1, v4, *(_QWORD *)(v3 + 88));
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v12);
  if (!v18)
    return 0;
  if (!sub_100022F8C(&qword_100645F10, (uint64_t (*)(uint64_t))sub_100022FD4))
  {
    swift_release();
    return 0;
  }
  Strong = (void *)swift_unknownObjectUnownedLoadStrong((char *)v1 + qword_100645EF8);
  v20 = v18 + *(_QWORD *)(*(_QWORD *)v18 + 144);
  v21 = swift_beginAccess(v20, v25, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v20, v4, v21);
  v22 = sub_100098C20();
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v22;
}

double sub_100101A1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = swift_isaMask & *v2;
  v13 = sub_100022F8C(&qword_100645F10, (uint64_t (*)(uint64_t))sub_100022FD4);
  v11 = v2;
  v12 = a1;
  v7 = type metadata accessor for TTRIAnyTreeViewDataSource(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v6);
  sub_100023068(a2, (uint64_t)&v13, v8, (void (*)(char *, char *))sub_100103A98, (uint64_t)&v10, v7, (uint64_t)&type metadata for () + 8, (uint64_t)&type metadata for ());
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_100101AB8(uint64_t a1)
{
  uint64_t v2;

  return sub_1000EC52C(a1, (uint64_t)sub_1001039FC, (uint64_t)&v2);
}

void sub_100101AE4()
{
  uint64_t v0;
  id Strong;

  if (sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4))
  {
    Strong = (id)swift_unknownObjectUnownedLoadStrong(v0 + qword_100645EF8);
    sub_100098E94();
    swift_release();

  }
}

double sub_100101B58(uint64_t a1)
{
  uint64_t v2;

  return sub_1000EC52C(a1, (uint64_t)sub_1001039BC, (uint64_t)&v2);
}

double sub_100101B84(uint64_t a1)
{
  uint64_t v2;

  return sub_1000EC52C(a1, (uint64_t)sub_10010397C, (uint64_t)&v2);
}

double sub_100101BB0(uint64_t a1)
{
  uint64_t v2;

  return sub_1000EC52C(a1, (uint64_t)sub_10010395C, (uint64_t)&v2);
}

double sub_100101BDC(uint64_t a1)
{
  uint64_t v2;

  return sub_1000EC52C(a1, (uint64_t)sub_100103888, (uint64_t)&v2);
}

double sub_100101C08(uint64_t a1)
{
  uint64_t v2;

  return sub_1000EC52C(a1, (uint64_t)sub_100103868, (uint64_t)&v2);
}

uint64_t sub_100101C34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = swift_isaMask & *v1;
  v10 = 1;
  v11 = sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4);
  v9 = v1;
  v5 = type metadata accessor for TTRIAnyTreeViewDelegate(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  type metadata accessor for EditingStyle(0);
  sub_100023068(a1, (uint64_t)&v11, (uint64_t)&v10, (void (*)(char *, char *))sub_100103860, (uint64_t)&v8, v5, v6, (uint64_t)&v12);
  swift_release();
  return v12;
}

uint64_t sub_100101CE0(uint64_t a1, void (*a2)(char *, char *))
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = swift_isaMask & *v2;
  v12 = 0;
  v13 = sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4);
  v11 = v2;
  v7 = type metadata accessor for TTRIAnyTreeViewDelegate(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v6);
  v8 = sub_10002A750(&qword_100646420);
  sub_100023068(a1, (uint64_t)&v13, (uint64_t)&v12, a2, (uint64_t)&v10, v7, v8, (uint64_t)&v14);
  swift_release();
  return v14;
}

uint64_t sub_100101D8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;

  v3 = swift_isaMask & *v1;
  v10 = sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4);
  v9 = 1;
  v8 = v1;
  v5 = type metadata accessor for TTRIAnyTreeViewDelegate(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  sub_100023068(a1, (uint64_t)&v10, (uint64_t)&v9, (void (*)(char *, char *))sub_100103800, (uint64_t)&v7, v5, (uint64_t)&type metadata for Bool, (uint64_t)&v11);
  swift_release();
  return v11;
}

double sub_100101E34(uint64_t a1)
{
  uint64_t v2;

  return sub_1000EC52C(a1, (uint64_t)sub_1001037E0, (uint64_t)&v2);
}

uint64_t sub_100101E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;

  v7 = swift_isaMask & *v3;
  v16 = sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4);
  v15 = 0;
  v12 = v3;
  v13 = a1;
  v14 = a3;
  v9 = type metadata accessor for TTRIAnyTreeViewDelegate(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v8);
  sub_100023068(a2, (uint64_t)&v16, (uint64_t)&v15, (void (*)(char *, char *))sub_1001037B4, (uint64_t)&v11, v9, (uint64_t)&type metadata for Bool, (uint64_t)&v17);
  swift_release();
  return v17;
}

double sub_100101F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[3] = a1;
  v4[4] = a3;
  return sub_1000EC52C(a2, (uint64_t)sub_10010377C, (uint64_t)v4);
}

void sub_100101F50(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t))
{
  uint64_t v3;
  id Strong;

  if (sub_100022F8C(&qword_100645F28, (uint64_t (*)(uint64_t))sub_100022FD4))
  {
    Strong = (id)swift_unknownObjectUnownedLoadStrong(v3 + qword_100645EF8);
    a3(Strong, a1, a2);
    swift_release();

  }
}

uint64_t sub_100101FF0(uint64_t a1, char a2, void (*a3)(char *, char *))
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;

  v7 = swift_isaMask & *v3;
  v14 = sub_10002BB68(sub_10002BF5C);
  v13 = a2;
  v12 = v3;
  v9 = type metadata accessor for TTRIAnyTreeViewCellSeparatorCustomizing(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v8);
  sub_10002BBC8(a1, (uint64_t)&v14, (uint64_t)&v13, a3, (uint64_t)&v11, v9, (uint64_t)&type metadata for Bool, (uint64_t)&v15);
  swift_release();
  return v15;
}

id sub_100102098(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  id v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = swift_getObjectType(a1, a2);
  v11 = a2;
  v12[0] = a1;
  v10 = v3;
  swift_unknownObjectRetain(a1);
  v7 = sub_1000EE438((uint64_t)v12, a3, (uint64_t)&v9);
  sub_100027F10(v12);
  return v7;
}

void sub_100102104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, __n128);
  __n128 v31;
  char *v32;
  __n128 v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  Class isa;
  id v48;
  uint64_t Strong;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, __n128);
  char *v82;
  _OWORD v83[2];
  uint64_t v84;
  _QWORD v85[4];
  char v86[24];
  char v87[16];

  v75 = a1;
  v5 = sub_10002A750((uint64_t *)&unk_1006463C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRRemindersListViewModel.ItemID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v65 - v12;
  __chkstk_darwin(v14);
  v78 = (char *)&v65 - v15;
  v16 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  __chkstk_darwin(v16);
  v77 = (uint64_t)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for IndexPath(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v22);
  v24 = *(_QWORD *)(a2 + qword_100645F18);
  if (!v24)
    return;
  v82 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v13;
  v25 = *(uint64_t (**)(uint64_t))(v24 + 16);
  v26 = swift_retain();
  if ((v25(v26) & 1) == 0)
  {
    swift_release();
    return;
  }
  v73 = v24;
  v27 = v75;
  v28 = *(_QWORD *)(v75 + 16);
  if (!v28)
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56);
    v31 = swift_bridgeObjectRetain(v75);
    v32 = v82;
LABEL_35:
    v34(v32, 1, 1, v18, v31);
    swift_release();
    v64 = v27;
LABEL_36:
    swift_bridgeObjectRelease(v64);
    return;
  }
  v65 = v10;
  v67 = v7;
  v71 = qword_100645F00;
  v72 = a2 + qword_100645F50;
  v74 = a2;
  v66 = a2 + qword_100645EF8;
  v29 = v75 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  v80 = *(_QWORD *)(v19 + 72);
  v81 = v30;
  v31 = swift_bridgeObjectRetain(v75);
  v32 = v82;
  v76 = a3;
  while (1)
  {
    v81(v32, v29, v18, v31);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v34)(v32, 0, 1, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v32, 1, v18) == 1)
    {
      swift_release();
      v64 = v75;
      goto LABEL_36;
    }
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v21, v32, v18);
    v36 = *(_QWORD *)(a3 + 16);
    v37 = *(_QWORD *)(v36 + 16);
    v38 = IndexPath.section.getter(v35);
    if (v38 < 0 || v38 >= v37)
      goto LABEL_7;
    v39 = IndexPath.section.getter(v38);
    if (v39 < 0 || v39 >= v37)
      break;
    v40 = *(_QWORD *)(v36 + 16 * v39 + 40);
    if ((unint64_t)v40 >> 62)
    {
      if (v40 < 0)
        v63 = *(_QWORD *)(v36 + 16 * v39 + 40);
      else
        v63 = v40 & 0xFFFFFFFFFFFFFF8;
      swift_retain();
      swift_bridgeObjectRetain(v40);
      v42 = _CocoaArrayWrapper.endIndex.getter(v63);
      if (v42 < 0)
        goto LABEL_39;
      v41 = v42;
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain(v40);
    }
    v43 = IndexPath.row.getter(v42);
    if ((v43 & 0x8000000000000000) != 0 || v43 >= v41)
    {
      swift_bridgeObjectRelease(v40);
      v33 = swift_release();
    }
    else
    {
      v44 = IndexPath.row.getter(v43);
      if ((v40 & 0xC000000000000001) != 0)
      {
        v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v40);
      }
      else
      {
        if ((v44 & 0x8000000000000000) != 0)
          goto LABEL_40;
        if (v44 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_41;
        v45 = *(_QWORD *)(v40 + 8 * v44 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease(v40);
      swift_release();
      v46 = *(id *)(v74 + v71);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v48 = objc_msgSend(v46, "cellForRowAtIndexPath:", isa);

      v79 = v45;
      if (v48)
      {
        Strong = swift_unknownObjectUnownedLoadStrong(v66);
        v50 = v45;
        v51 = (void *)Strong;
        v52 = v50 + *(_QWORD *)(*(_QWORD *)v50 + 144);
        v69 = v52;
        swift_beginAccess(v52, v86, 0, 0);
        v53 = v77;
        sub_10002B1E8(v52, v77, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        (*(void (**)(void *, id, uint64_t))(v73 + 32))(v51, v48, v53);

        sub_10001F544(v53, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v85[3] = sub_100005ED8(0, (unint64_t *)&qword_1006462D0, UITableViewCell_ptr);
        v84 = 0;
        v85[0] = v48;
        memset(v83, 0, sizeof(v83));
        v70 = v48;
        sub_1000E9B28((uint64_t)v85, v79, (uint64_t)v83);
        sub_1000073A0((uint64_t)v83, (uint64_t *)&unk_1006462D8);
        sub_1000073A0((uint64_t)v85, &qword_100640E50);
        v54 = sub_10002B1E8(v69, v53, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v55 = (uint64_t)v78;
        TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v54);
        sub_10001F544(v53, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        swift_beginAccess(v72, v83, 33, 0);
        v56 = (uint64_t)v67;
        sub_1000F4DA4(v55, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID, (void (*)(_QWORD *))&TTRRemindersListViewModel.ItemID.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRRemindersListViewModel.ItemID.__derived_enum_equals(_:_:), (void (*)(void))sub_100482930, (uint64_t)v67);
        sub_1000073A0(v56, (uint64_t *)&unk_1006463C0);
        swift_endAccess(v83);
        swift_release();

      }
      else
      {
        v57 = v45 + *(_QWORD *)(*(_QWORD *)v45 + 144);
        swift_beginAccess(v57, v87, 0, 0);
        v58 = v57;
        v59 = v77;
        v60 = sub_10002B1E8(v58, v77, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v55 = (uint64_t)v78;
        TTRRemindersListViewModel.Item.treeItemIdentifier.getter(v60);
        sub_10001F544(v59, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        swift_beginAccess(v72, v83, 33, 0);
        v61 = (uint64_t)v65;
        sub_10002B1E8(v55, (uint64_t)v65, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
        v62 = (uint64_t)v68;
        sub_1004809C4((uint64_t)v68, v61);
        sub_10001F544(v62, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
        swift_endAccess(v83);
        swift_release();
      }
      sub_10001F544(v55, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.ItemID);
    }
    a3 = v76;
LABEL_7:
    (*(void (**)(char *, uint64_t, __n128))(v19 + 8))(v21, v18, v33);
    v29 += v80;
    --v28;
    v32 = v82;
    if (!v28)
    {
      v27 = v75;
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t sub_10010286C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  Class isa;
  id v46;
  uint64_t Strong;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  _OWORD v81[2];
  uint64_t v82;
  _QWORD v83[4];
  char v84[24];
  char v85[16];

  v73 = a1;
  v5 = sub_10002A750((uint64_t *)&unk_1006462C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v63 - v13;
  __chkstk_darwin(v12);
  v76 = (char *)&v63 - v15;
  v16 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  __chkstk_darwin(v16);
  v75 = (uint64_t)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for IndexPath(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10002A750(&qword_100646950);
  result = __chkstk_darwin(v22);
  v25 = *(_QWORD *)(a2 + qword_100645F18);
  if (!v25)
    return result;
  v80 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v14;
  v26 = *(uint64_t (**)(uint64_t))(v25 + 16);
  v27 = swift_retain(v25);
  if ((v26(v27) & 1) == 0)
    return swift_release(v25);
  v71 = v25;
  v28 = v73;
  v29 = *(_QWORD *)(v73 + 16);
  if (!v29)
  {
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    swift_bridgeObjectRetain(v73);
    v32 = v80;
LABEL_35:
    v33(v32, 1, 1, v18);
    swift_release(v71);
    v62 = v28;
    return swift_bridgeObjectRelease(v62);
  }
  v63 = v11;
  v65 = v7;
  v69 = qword_100645F00;
  v70 = a2 + qword_100645F50;
  v72 = a2;
  v64 = a2 + qword_100645EF8;
  v30 = v73 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v78 = *(_QWORD *)(v19 + 72);
  v79 = v31;
  swift_bridgeObjectRetain(v73);
  v32 = v80;
  v74 = a3;
  while (1)
  {
    v79(v32, v30, v18);
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v33(v32, 0, 1, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v32, 1, v18) == 1)
    {
      swift_release(v71);
      v62 = v73;
      return swift_bridgeObjectRelease(v62);
    }
    v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v21, v32, v18);
    v35 = *(_QWORD *)(a3 + 16);
    v36 = *(_QWORD *)(v35 + 16);
    v37 = IndexPath.section.getter(v34);
    if (v37 < 0 || v37 >= v36)
      goto LABEL_7;
    result = IndexPath.section.getter(v37);
    if (result < 0 || result >= v36)
      break;
    v38 = v35 + 16 * result;
    v39 = *(_QWORD *)(v38 + 32);
    v40 = *(_QWORD *)(v38 + 40);
    if ((unint64_t)v40 >> 62)
    {
      if (v40 < 0)
        v61 = *(_QWORD *)(v38 + 40);
      else
        v61 = v40 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v39);
      swift_bridgeObjectRetain(v40);
      result = _CocoaArrayWrapper.endIndex.getter(v61);
      if (result < 0)
        goto LABEL_39;
      v41 = result;
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain(v39);
      result = swift_bridgeObjectRetain(v40);
    }
    v42 = IndexPath.row.getter(result);
    if ((v42 & 0x8000000000000000) != 0 || v42 >= v41)
    {
      swift_bridgeObjectRelease(v40);
      swift_release(v39);
    }
    else
    {
      result = IndexPath.row.getter(v42);
      if ((v40 & 0xC000000000000001) != 0)
      {
        v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v40);
      }
      else
      {
        if (result < 0)
          goto LABEL_40;
        if ((unint64_t)result >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_41;
        v43 = *(_QWORD *)(v40 + 8 * result + 32);
        swift_retain(v43);
      }
      swift_bridgeObjectRelease(v40);
      swift_release(v39);
      v44 = *(id *)(v72 + v69);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v46 = objc_msgSend(v44, "cellForRowAtIndexPath:", isa);

      v77 = v43;
      if (v46)
      {
        Strong = swift_unknownObjectUnownedLoadStrong(v64);
        v48 = v43;
        v49 = (void *)Strong;
        v50 = v48 + *(_QWORD *)(*(_QWORD *)v48 + 144);
        v67 = v50;
        swift_beginAccess(v50, v84, 0, 0);
        v51 = v75;
        sub_10002B1E8(v50, v75, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        (*(void (**)(void *, id, uint64_t))(v71 + 32))(v49, v46, v51);

        sub_10001F544(v51, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        v83[3] = sub_100005ED8(0, (unint64_t *)&qword_1006462D0, UITableViewCell_ptr);
        v82 = 0;
        v83[0] = v46;
        memset(v81, 0, sizeof(v81));
        v68 = v46;
        sub_1000E9F7C((uint64_t)v83, v77, (uint64_t)v81);
        sub_1000073A0((uint64_t)v81, (uint64_t *)&unk_1006462D8);
        sub_1000073A0((uint64_t)v83, &qword_100640E50);
        v52 = sub_10002B1E8(v67, v51, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        v53 = (uint64_t)v76;
        TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v52);
        sub_10001F544(v51, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        swift_beginAccess(v70, v81, 33, 0);
        v54 = (uint64_t)v65;
        sub_1000F4DA4(v53, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier, (void (*)(_QWORD *))&TTRAccountsListsViewModel.ItemIdentifier.hash(into:), (uint64_t (*)(char *, uint64_t))&static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:), (void (*)(void))sub_100483358, (uint64_t)v65);
        sub_1000073A0(v54, (uint64_t *)&unk_1006462C0);
        swift_endAccess(v81);
        swift_release(v77);

      }
      else
      {
        v55 = v43 + *(_QWORD *)(*(_QWORD *)v43 + 144);
        swift_beginAccess(v55, v85, 0, 0);
        v56 = v55;
        v57 = v75;
        v58 = sub_10002B1E8(v56, v75, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        v53 = (uint64_t)v76;
        TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v58);
        sub_10001F544(v57, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        swift_beginAccess(v70, v81, 33, 0);
        v59 = (uint64_t)v63;
        sub_10002B1E8(v53, (uint64_t)v63, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
        v60 = (uint64_t)v66;
        sub_100481964((uint64_t)v66, v59);
        sub_10001F544(v60, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
        swift_endAccess(v81);
        swift_release(v77);
      }
      sub_10001F544(v53, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    }
    a3 = v74;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v30 += v78;
    --v29;
    v32 = v80;
    if (!v29)
    {
      v28 = v73;
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100102FD4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for TTRITreeViewCellModel - 1) + 16))(a2, a1);
  return a2;
}

BOOL sub_100103010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000EEF7C(a1, *(_QWORD **)(v4 + 16), a3, a4);
}

uint64_t sub_100103018(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000EF784(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_100103028(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EF080(a1, (uint64_t (*)(char *))sub_100103054, *(_QWORD *)(v1 + 24));
}

uint64_t sub_100103054(uint64_t a1)
{
  uint64_t v1;

  return sub_10002B364(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)v1 + 88));
}

uint64_t sub_10010306C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1000E2D28(a1, a2, a3 & 1, *(_QWORD **)(v3 + 16));
}

uint64_t sub_100103078(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000E2D80(*a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), (uint64_t (*)(void))sub_1002AA398);
}

uint64_t sub_1001030A4(uint64_t a1)
{
  return sub_100103544(a1, (uint64_t (*)(void))sub_1002AA398);
}

uint64_t sub_1001030B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000E19D8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), (uint64_t (*)(void))sub_1002AA398, sub_100073214, (void (*)(uint64_t, uint64_t *))sub_10019D874, a2);
}

uint64_t sub_1001030FC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000F8748(a1, *(_QWORD *)(v1 + 16), sub_1002AA398);
}

uint64_t sub_10010311C(uint64_t *a1)
{
  return sub_10010316C(a1, (uint64_t)sub_1002AA398, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1000E2B08) & 1;
}

uint64_t sub_100103144(uint64_t *a1)
{
  return sub_10010316C(a1, (uint64_t)sub_1002AA398, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1000E2CAC) & 1;
}

uint64_t sub_10010316C(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, __int128 *, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  char v17;

  v5 = *(_QWORD *)(v3 + 32);
  v6 = *(_BYTE *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_BYTE *)(v3 + 72);
  v9 = *(_QWORD *)(v3 + 80);
  v10 = *a1;
  v12 = *(_OWORD *)(v3 + 16);
  v13 = v5;
  v14 = v6;
  v15 = *(_OWORD *)(v3 + 48);
  v16 = v7;
  v17 = v8;
  return a3(v10, &v12, v9, a2) & 1;
}

uint64_t sub_1001031D0(uint64_t *a1)
{
  return sub_100103230(a1, (uint64_t)sub_1002AA398, (uint64_t)sub_100481988, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E2B84) & 1;
}

uint64_t sub_100103200(uint64_t *a1)
{
  return sub_100103230(a1, (uint64_t)sub_1002AA398, (uint64_t)sub_100481988, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E29E0) & 1;
}

uint64_t sub_100103230(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_BYTE *)(v4 + 40);
  v9 = *(_QWORD *)(v4 + 64);
  v10 = *(_BYTE *)(v4 + 72);
  v11 = *(_QWORD *)(v4 + 80);
  v12 = *(_QWORD *)(v4 + 88);
  v13 = *a1;
  v15 = *(_OWORD *)(v4 + 16);
  v16 = v7;
  v17 = v8;
  v18 = *(_OWORD *)(v4 + 48);
  v19 = v9;
  v20 = v10;
  return a4(v13, &v15, v11, v12, a2, a3) & 1;
}

uint64_t sub_100103298(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E56F4(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001032A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E50DC(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1001032B8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  swift_retain(v5);
  a2(a1, v6, v5);
  return swift_release(v5);
}

uint64_t sub_100103300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v8[1] = *(_OWORD *)(v4 + 24);
  v9 = v5;
  v10 = v6;
  v11 = *(_OWORD *)(v4 + 56);
  v12 = a1;
  return sub_1000E411C((void (*)(__int128 *))sub_10010336C, (uint64_t)v8, a3, a4);
}

uint64_t sub_100103354(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E676C(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100103360(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000E6640(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10010336C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E6BB0(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100103388()
{
  uint64_t v0;

  return sub_1000E8570(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))sub_10045093C);
}

uint64_t sub_1001033A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EE94C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(void *, uint64_t, uint64_t))sub_100098EF4);
}

uint64_t sub_1001033C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EE94C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(void *, uint64_t, uint64_t))sub_100098ED4);
}

uint64_t sub_1001033E8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100103424(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1000E41C0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100103430(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E3EB0(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10010343C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100103460(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100103484()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001034A8(uint64_t *a1)
{
  uint64_t v1;

  sub_1000F0FF0(a1, *(_QWORD *)(v1 + 32));
}

void sub_1001034B4()
{
  uint64_t v0;

  sub_1000F110C(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001034C0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EEEB8(a1, *(_QWORD *)(v1 + 16), sub_10006B3DC, (uint64_t (*)(uint64_t))sub_1002AA39C, sub_1000CE5E4) & 1;
}

uint64_t sub_1001034F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EF40C(a1, v1);
}

uint64_t sub_100103500(uint64_t a1)
{
  return sub_1001032B8(a1, sub_100102104);
}

uint64_t sub_10010350C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100103544(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v3 + 16) && (v4 = a2(), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

uint64_t sub_10010358C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001035B0(uint64_t *a1)
{
  return sub_100103230(a1, (uint64_t)sub_1002AA398, (uint64_t)sub_100480BE8, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E2B84) & 1;
}

uint64_t sub_1001035E0(uint64_t *a1)
{
  return sub_100103230(a1, (uint64_t)sub_1002AA398, (uint64_t)sub_100480BE8, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E29E0) & 1;
}

BOOL sub_100103610(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(v1 + 16);
}

uint64_t sub_100103634()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100103660()
{
  uint64_t v0;

  return sub_1000E8570(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(uint64_t))sub_1004504E8);
}

uint64_t type metadata accessor for TTRITreeViewTableAdapter.InsertDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002B51C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTRITreeViewTableAdapter.InsertDestination);
}

void sub_10010368C()
{
  _swift_stdlib_reportUnimplementedInitializer("Reminders.TTRITreeViewTableAdapter", 34, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001036B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_1000EE2B0(a1, *(_QWORD **)(v4 + 16), a2, a3, a4);
}

uint64_t sub_1001036D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017140(a1, a2, a3, a4);
}

uint64_t sub_1001036F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100015864(a1, a2, a3, a4);
}

void sub_100103710(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_1000990C4, a2);
}

void sub_100103730(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100022FD4, a2);
}

void sub_100103750(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100098F84, a2);
}

void sub_100103770(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000EDDFC(*(_QWORD *)(v1 + 16), a1);
}

void sub_10010377C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000EDB94(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100103788(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 32))(*a2, a1);
}

void sub_1001037B4(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_1000EDA1C(*(_QWORD *)(v1 + 16), a1);
}

void sub_1001037C0(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100098DE8, a2);
}

void sub_1001037E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED500(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(id, uint64_t))sub_100098D84);
}

void sub_100103800(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100098D60, a2);
}

void sub_100103820(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_1000ED31C(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100098D40, a2);
}

void sub_100103840(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_1000ED31C(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100098D20, a2);
}

void sub_100103860(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000ED208(*(_QWORD *)(v1 + 16), a1);
}

void sub_100103868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED500(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(id, uint64_t))sub_100098CC0);
}

void sub_100103888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED500(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(id, uint64_t))sub_100098CA0);
}

uint64_t sub_1001038A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000ECA9C(a1, a2, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(void *, uint64_t))sub_100098C80, (void (*)(char *, char *))sub_100105B60);
}

uint64_t sub_1001038D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100646950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100103918(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000ECA9C(a1, a2, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(void *, uint64_t))sub_100098C60, (void (*)(char *, char *))sub_100103940);
}

uint64_t sub_100103940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_1000ED024(a1, *(_QWORD **)(v4 + 16), a2, a3, a4);
}

void sub_10010395C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED500(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(id, uint64_t))sub_100098C40);
}

void sub_10010397C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED500(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(id, uint64_t))sub_100098C20);
}

void sub_10010399C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100098BFC, a2);
}

void sub_1001039BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED500(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(id, uint64_t))sub_100098BDC);
}

void sub_1001039DC(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  sub_100023470(a1, *(_QWORD *)(v2 + 16), (double (*)(void *, uint64_t))sub_100023808, a2);
}

void sub_1001039FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED500(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(id, uint64_t))sub_100098E74);
}

void sub_100103A1C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_100098E50, a2);
}

uint64_t sub_100103A3C()
{
  uint64_t v0;

  return sub_1000EBFBC(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24), *(uint64_t **)(v0 + 32), *(_QWORD *)(v0 + 40), *(uint64_t **)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void sub_100103A4C()
{
  sub_10004E5C8();
}

uint64_t type metadata accessor for TTRITreeViewTableAdapter.MoveDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002B51C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTRITreeViewTableAdapter.MoveDestination);
}

void sub_100103A78(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_1000235B4(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(void *, uint64_t))sub_10021DA38, a2);
}

void sub_100103A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000EA3DC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100103AA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_100103B0C(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X14 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  else
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain(v9);
  }
  return v3;
}

uint64_t sub_100103C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (*(unsigned __int8 *)(a1 + v3) < 2u)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_100103C64 + 4 * byte_1005246F5[v4]))();
}

_BYTE *sub_100103CB8(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_100103D98(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (__dst[v7] >= 2u)
    {
      if (v7 <= 3)
        v8 = v7;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v9 = __src[v7];
    if (v9 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

_BYTE *sub_100103F30(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_100104010(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (__dst[v7] >= 2u)
    {
      if (v7 <= 3)
        v8 = v7;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v9 = __src[v7];
    if (v9 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t sub_1001041A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 < 0xFE)
    goto LABEL_19;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_19:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_19;
LABEL_12:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100104260 + 4 * byte_100524718[(v4 - 1)]))();
}

void sub_1001042AC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_100104448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_100104484 + 4 * byte_100524726[v3]))();
}

void sub_1001044CC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_100104588(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 0, 3, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_1001045F4(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 > 3)
    goto LABEL_5;
  v6 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  v7 = 2;
  if (v6 > 0xFFFC)
    v7 = 4;
  if (v6 <= 0xFC)
LABEL_5:
    v7 = 1;
  v8 = v7 + v5;
  v9 = *(_DWORD *)(v4 + 80);
  if (v9 > 7 || v8 > 0x18 || (*(_DWORD *)(v4 + 80) & 0x100000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v9 + 16) & ~v9));
    swift_retain(v12);
    return v3;
  }
  if (v5 > 3)
    goto LABEL_18;
  v14 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v14 <= 0xFFFC)
  {
    if (v14 > 0xFC)
    {
      v15 = *(unsigned __int16 *)((char *)a2 + v5);
      if (v15 < 3)
        goto LABEL_27;
      goto LABEL_23;
    }
LABEL_18:
    v15 = *((unsigned __int8 *)a2 + v5);
    if (v15 < 3)
      goto LABEL_27;
LABEL_23:
    if (v5 <= 3)
      v16 = v5;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  v15 = *(_DWORD *)((char *)a2 + v5);
  if (v15 >= 3)
    goto LABEL_23;
LABEL_27:
  if (v15 == 2)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(__dst);
    if (v5 <= 3)
    {
      v17 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v17 > 0xFFFC)
      {
        v18 = 2;
        goto LABEL_43;
      }
      if (v17 > 0xFC)
      {
        LOWORD(v18) = 2;
        goto LABEL_46;
      }
    }
    *((_BYTE *)v3 + v5) = 2;
    return v3;
  }
  if (v15 == 1)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(__dst);
    if (v5 > 3)
    {
LABEL_38:
      *((_BYTE *)v3 + v5) = 1;
      return v3;
    }
    v18 = 1;
    v19 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v19 <= 0xFFFC)
    {
      if (v19 <= 0xFC)
        goto LABEL_38;
LABEL_46:
      *(_WORD *)((char *)v3 + v5) = v18;
      return v3;
    }
LABEL_43:
    *(_DWORD *)((char *)v3 + v5) = v18;
    return v3;
  }
  (*(void (**)(uint64_t *))(v4 + 16))(__dst);
  if (v5 > 3)
    goto LABEL_30;
  v20 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v20 > 0xFFFC)
  {
    *(_DWORD *)((char *)v3 + v5) = 0;
    return v3;
  }
  if (v20 <= 0xFC)
LABEL_30:
    *((_BYTE *)v3 + v5) = 0;
  else
    *(_WORD *)((char *)v3 + v5) = 0;
  return v3;
}

uint64_t sub_1001048C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 > 3)
    goto LABEL_2;
  v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFC)
  {
    v4 = *(_DWORD *)(a1 + v3);
  }
  else
  {
    if (v5 <= 0xFC)
    {
LABEL_2:
      v4 = *(unsigned __int8 *)(a1 + v3);
      goto LABEL_7;
    }
    v4 = *(unsigned __int16 *)(a1 + v3);
  }
LABEL_7:
  if (v4 < 3)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (v3 <= 3)
    v6 = v3;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_100104940 + 4 * byte_100524730[v6]))();
}

_BYTE *sub_100104994(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 > 3)
    goto LABEL_4;
  v6 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v6 <= 0xFFFC)
  {
    if (v6 > 0xFC)
    {
      v7 = *(unsigned __int16 *)(a2 + v5);
      if (v7 < 3)
        goto LABEL_13;
      goto LABEL_9;
    }
LABEL_4:
    v7 = *(unsigned __int8 *)(a2 + v5);
    if (v7 < 3)
      goto LABEL_13;
LABEL_9:
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v7 = *(_DWORD *)(a2 + v5);
  if (v7 >= 3)
    goto LABEL_9;
LABEL_13:
  if (v7 == 2)
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    if (v5 <= 3)
    {
      v9 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v9 > 0xFFFC)
      {
        v10 = 2;
        goto LABEL_29;
      }
      if (v9 > 0xFC)
      {
        LOWORD(v10) = 2;
        goto LABEL_32;
      }
    }
    __dst[v5] = 2;
    return __dst;
  }
  if (v7 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    if (v5 > 3)
    {
LABEL_24:
      __dst[v5] = 1;
      return __dst;
    }
    v10 = 1;
    v11 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v11 <= 0xFFFC)
    {
      if (v11 <= 0xFC)
        goto LABEL_24;
LABEL_32:
      *(_WORD *)&__dst[v5] = v10;
      return __dst;
    }
LABEL_29:
    *(_DWORD *)&__dst[v5] = v10;
    return __dst;
  }
  (*(void (**)(_BYTE *))(v4 + 16))(__dst);
  if (v5 > 3)
    goto LABEL_16;
  v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v12 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v5] = 0;
    return __dst;
  }
  if (v12 <= 0xFC)
LABEL_16:
    __dst[v5] = 0;
  else
    *(_WORD *)&__dst[v5] = 0;
  return __dst;
}

char *sub_100104BD8(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_5;
  v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      if (*(unsigned __int16 *)&__dst[v7] < 3u)
        goto LABEL_14;
      goto LABEL_10;
    }
LABEL_5:
    if (__dst[v7] < 3u)
      goto LABEL_14;
LABEL_10:
    if (v7 <= 3)
      v10 = v7;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (*(_DWORD *)&__dst[v7] >= 3u)
    goto LABEL_10;
LABEL_14:
  (*(void (**)(char *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  if (v7 > 3)
    goto LABEL_17;
  v11 = ((1 << v8) + 1) >> v8;
  if (v11 <= 0xFFFC)
  {
    if (v11 > 0xFC)
    {
      v12 = *(unsigned __int16 *)&__src[v7];
      if (v12 < 3)
        goto LABEL_26;
      goto LABEL_22;
    }
LABEL_17:
    v12 = __src[v7];
    if (v12 < 3)
      goto LABEL_26;
LABEL_22:
    if (v7 <= 3)
      v13 = v7;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  v12 = *(_DWORD *)&__src[v7];
  if (v12 >= 3)
    goto LABEL_22;
LABEL_26:
  if (v12 == 2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 <= 3)
    {
      v14 = ((1 << v8) + 1) >> v8;
      if (v14 > 0xFFFC)
      {
        v15 = 2;
        goto LABEL_42;
      }
      if (v14 > 0xFC)
      {
        LOWORD(v15) = 2;
        goto LABEL_45;
      }
    }
    __dst[v7] = 2;
    return __dst;
  }
  if (v12 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_37:
      __dst[v7] = 1;
      return __dst;
    }
    v15 = 1;
    v16 = ((1 << v8) + 1) >> v8;
    if (v16 <= 0xFFFC)
    {
      if (v16 <= 0xFC)
        goto LABEL_37;
LABEL_45:
      *(_WORD *)&__dst[v7] = v15;
      return __dst;
    }
LABEL_42:
    *(_DWORD *)&__dst[v7] = v15;
    return __dst;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
  if (v7 > 3)
    goto LABEL_29;
  v17 = ((1 << v8) + 1) >> v8;
  if (v17 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v7] = 0;
    return __dst;
  }
  if (v17 <= 0xFC)
LABEL_29:
    __dst[v7] = 0;
  else
    *(_WORD *)&__dst[v7] = 0;
  return __dst;
}

_BYTE *sub_100104F10(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 > 3)
    goto LABEL_4;
  v6 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v6 <= 0xFFFC)
  {
    if (v6 > 0xFC)
    {
      v7 = *(unsigned __int16 *)(a2 + v5);
      if (v7 < 3)
        goto LABEL_13;
      goto LABEL_9;
    }
LABEL_4:
    v7 = *(unsigned __int8 *)(a2 + v5);
    if (v7 < 3)
      goto LABEL_13;
LABEL_9:
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v7 = *(_DWORD *)(a2 + v5);
  if (v7 >= 3)
    goto LABEL_9;
LABEL_13:
  if (v7 == 2)
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    if (v5 <= 3)
    {
      v9 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v9 > 0xFFFC)
      {
        v10 = 2;
        goto LABEL_29;
      }
      if (v9 > 0xFC)
      {
        LOWORD(v10) = 2;
        goto LABEL_32;
      }
    }
    __dst[v5] = 2;
    return __dst;
  }
  if (v7 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    if (v5 > 3)
    {
LABEL_24:
      __dst[v5] = 1;
      return __dst;
    }
    v10 = 1;
    v11 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v11 <= 0xFFFC)
    {
      if (v11 <= 0xFC)
        goto LABEL_24;
LABEL_32:
      *(_WORD *)&__dst[v5] = v10;
      return __dst;
    }
LABEL_29:
    *(_DWORD *)&__dst[v5] = v10;
    return __dst;
  }
  (*(void (**)(_BYTE *))(v4 + 32))(__dst);
  if (v5 > 3)
    goto LABEL_16;
  v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v12 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v5] = 0;
    return __dst;
  }
  if (v12 <= 0xFC)
LABEL_16:
    __dst[v5] = 0;
  else
    *(_WORD *)&__dst[v5] = 0;
  return __dst;
}

char *sub_100105154(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = 8 * v7;
  if (v7 > 3)
    goto LABEL_5;
  v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      if (*(unsigned __int16 *)&__dst[v7] < 3u)
        goto LABEL_14;
      goto LABEL_10;
    }
LABEL_5:
    if (__dst[v7] < 3u)
      goto LABEL_14;
LABEL_10:
    if (v7 <= 3)
      v10 = v7;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (*(_DWORD *)&__dst[v7] >= 3u)
    goto LABEL_10;
LABEL_14:
  (*(void (**)(char *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
  if (v7 > 3)
    goto LABEL_17;
  v11 = ((1 << v8) + 1) >> v8;
  if (v11 <= 0xFFFC)
  {
    if (v11 > 0xFC)
    {
      v12 = *(unsigned __int16 *)&__src[v7];
      if (v12 < 3)
        goto LABEL_26;
      goto LABEL_22;
    }
LABEL_17:
    v12 = __src[v7];
    if (v12 < 3)
      goto LABEL_26;
LABEL_22:
    if (v7 <= 3)
      v13 = v7;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  v12 = *(_DWORD *)&__src[v7];
  if (v12 >= 3)
    goto LABEL_22;
LABEL_26:
  if (v12 == 2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 <= 3)
    {
      v14 = ((1 << v8) + 1) >> v8;
      if (v14 > 0xFFFC)
      {
        v15 = 2;
        goto LABEL_42;
      }
      if (v14 > 0xFC)
      {
        LOWORD(v15) = 2;
        goto LABEL_45;
      }
    }
    __dst[v7] = 2;
    return __dst;
  }
  if (v12 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_37:
      __dst[v7] = 1;
      return __dst;
    }
    v15 = 1;
    v16 = ((1 << v8) + 1) >> v8;
    if (v16 <= 0xFFFC)
    {
      if (v16 <= 0xFC)
        goto LABEL_37;
LABEL_45:
      *(_WORD *)&__dst[v7] = v15;
      return __dst;
    }
LABEL_42:
    *(_DWORD *)&__dst[v7] = v15;
    return __dst;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
  if (v7 > 3)
    goto LABEL_29;
  v17 = ((1 << v8) + 1) >> v8;
  if (v17 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v7] = 0;
    return __dst;
  }
  if (v17 <= 0xFC)
LABEL_29:
    __dst[v7] = 0;
  else
    *(_WORD *)&__dst[v7] = 0;
  return __dst;
}

uint64_t sub_10010548C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 > 3)
  {
    v4 = 4;
LABEL_5:
    v6 = 8;
    goto LABEL_6;
  }
  v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFC)
    goto LABEL_9;
  v4 = v5 + 3;
  if (v5 <= 0xFC)
    goto LABEL_5;
  v6 = 16;
LABEL_6:
  v7 = (1 << v6) - v4;
  if ((v7 & 0x80000000) == 0)
  {
    if (v3 > 3)
      goto LABEL_13;
LABEL_10:
    v8 = ((1 << (8 * v3)) + 1) >> (8 * v3);
    v9 = 2;
    if (v8 > 0xFFFC)
      v9 = 4;
    if (v8 > 0xFC)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_9:
  v7 = 0x7FFFFFFF;
  if (v3 <= 3)
    goto LABEL_10;
LABEL_13:
  v9 = 1;
LABEL_14:
  if (!a2)
    return 0;
  if (a2 <= v7)
    goto LABEL_32;
  v10 = v9 + v3;
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v13 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v13 < 2)
    {
LABEL_32:
      if (v7)
      {
        if (v3 <= 3)
        {
          v21 = ((1 << (8 * v3)) + 1) >> (8 * v3);
          if (v21 > 0xFFFC)
          {
            v17 = *(_DWORD *)(a1 + v3);
            v18 = ~v17;
LABEL_42:
            v24 = 0x7FFFFFFF;
LABEL_43:
            if (v24 > v18)
              return -v17;
            else
              return 0;
          }
          v20 = v21 + 3;
          if (v21 > 0xFC)
          {
            v23 = *(unsigned __int16 *)(a1 + v3);
            v17 = v23 | 0xFFFF0000;
            v18 = v23 ^ 0xFFFF;
            v19 = 16;
          }
          else
          {
            v22 = *(unsigned __int8 *)(a1 + v3);
            v17 = v22 | 0xFFFFFF00;
            v18 = v22 ^ 0xFF;
            v19 = 8;
          }
        }
        else
        {
          v16 = *(unsigned __int8 *)(a1 + v3);
          v17 = v16 | 0xFFFFFF00;
          v18 = v16 ^ 0xFF;
          v19 = 8;
          v20 = 4;
        }
        v24 = (1 << v19) - v20;
        if ((v24 & 0x80000000) == 0)
          goto LABEL_43;
        goto LABEL_42;
      }
      return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_32;
LABEL_25:
  v14 = (v12 - 1) << v11;
  if (v10 > 3)
    v14 = 0;
  if (!(_DWORD)v10)
    return v7 + v14 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1001055DC + 4 * byte_100524753[(v10 - 1)]))();
}

void sub_1001056C0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = 8 * v5;
  if (v5 <= 3)
  {
    v10 = ((1 << v6) + 1) >> v6;
    if (v10 > 0xFFFC)
      goto LABEL_10;
    v7 = v10 + 3;
    if (v10 > 0xFC)
    {
      v8 = 16;
LABEL_4:
      v9 = (1 << v8) - v7;
      if ((v9 & 0x80000000) == 0)
      {
        if (v5 > 3)
          goto LABEL_14;
LABEL_11:
        v11 = ((1 << v6) + 1) >> v6;
        v12 = 2;
        if (v11 > 0xFFFC)
          v12 = 4;
        if (v11 > 0xFC)
        {
LABEL_15:
          v13 = v12 + v5;
          if (a3 <= v9)
          {
            v14 = 0;
          }
          else if (v13 <= 3)
          {
            v16 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
            if (HIWORD(v16))
            {
              v14 = &dword_100000004;
            }
            else if (v16 >= 0x100)
            {
              v14 = 2;
            }
            else
            {
              v14 = v16 > 1;
            }
          }
          else
          {
            v14 = &_mh_execute_header.magic + 1;
          }
          if (v9 < a2)
          {
            v15 = ~v9 + a2;
            if (v13 < 4)
            {
              if ((_DWORD)v13)
              {
                v17 = v15 & ~(-1 << (8 * v13));
                bzero(a1, v13);
                if ((_DWORD)v13 == 3)
                {
                  *a1 = v17;
                  *((_BYTE *)a1 + 2) = BYTE2(v17);
                }
                else if ((_DWORD)v13 == 2)
                {
                  *a1 = v17;
                }
                else
                {
                  *(_BYTE *)a1 = v17;
                }
              }
            }
            else
            {
              bzero(a1, v13);
              *(_DWORD *)a1 = v15;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_14:
        v12 = 1;
        goto LABEL_15;
      }
LABEL_10:
      v9 = 0x7FFFFFFF;
      if (v5 > 3)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = 4;
  }
  v8 = 8;
  goto LABEL_4;
}

uint64_t sub_100105934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 > 3)
    goto LABEL_2;
  v4 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v4 > 0xFFFC)
  {
    v3 = *(unsigned int *)(a1 + v2);
  }
  else
  {
    if (v4 <= 0xFC)
    {
LABEL_2:
      v3 = *(unsigned __int8 *)(a1 + v2);
      goto LABEL_7;
    }
    v3 = *(unsigned __int16 *)(a1 + v2);
  }
LABEL_7:
  if (v3 < 3)
    return v3;
  if (v2 <= 3)
    v5 = v2;
  else
    v5 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1001059B0 + 4 * byte_100524761[v5]))();
}

_BYTE *sub_1001059F8(_BYTE *result, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    if (v4 < 4)
    {
      v6 = ((a2 - 3) >> (8 * v4)) + 3;
      v7 = (unsigned int *)&result[v4];
      v8 = ((1 << (8 * v4)) + 1) >> (8 * v4);
      if (v8 > 0xFFFC)
      {
        *v7 = v6;
      }
      else if (v8 > 0xFC)
      {
        *(_WORD *)v7 = v6;
      }
      else
      {
        *(_BYTE *)v7 = v6;
      }
    }
    else
    {
      result[v4] = 3;
    }
    if (v4 <= 3)
      v9 = v4;
    else
      v9 = 4;
    bzero(result, v4);
    __asm { BR              X10 }
  }
  if (v4 > 3)
    goto LABEL_3;
  v5 = ((1 << (8 * v4)) + 1) >> (8 * v4);
  if (v5 > 0xFFFC)
  {
    *(_DWORD *)&result[v4] = a2;
  }
  else
  {
    if (v5 <= 0xFC)
    {
LABEL_3:
      result[v4] = a2;
      return result;
    }
    *(_WORD *)&result[v4] = a2;
  }
  return result;
}

uint64_t sub_100105B40(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_1000F46DC(a1, a2) & 1;
}

uint64_t sub_100105B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_100103940(a1, a2, a3, a4);
}

uint64_t sub_100105BE4()
{
  return sub_100100000() & 1;
}

uint64_t sub_100105C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1001036B8(a1, a2, a3, a4);
}

uint64_t sub_100105C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100012DDC(v0, qword_1006465A0);
  v1 = sub_100012DC4(v0, (uint64_t)qword_1006465A0);
  if (qword_10063D610 != -1)
    swift_once(&qword_10063D610, sub_10002D530);
  v2 = sub_100012DC4(v0, (uint64_t)qword_100673780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100105D20(uint64_t a1)
{
  void *v1;
  void *v2;
  char v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[6];

  v2 = v1;
  TTRUserDefaults.appUserDefaults.unsafeMutableAddressor(a1);
  v3 = TTRUserDefaults.animationSlowModeEnabled.getter();
  v4 = 0.15;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_selectedStateShowsPinnedListColor))
    v4 = 0.25;
  v5 = 1.0;
  if ((v3 & 1) != 0)
    v5 = 3.0;
  v6 = v5 * v4;
  v7 = swift_allocObject(&unk_1005F1D48, 24, 7);
  *(_QWORD *)(v7 + 16) = v2;
  v8 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v12[4] = sub_1001070B0;
  v12[5] = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100006378;
  v12[3] = &unk_1005F1D60;
  v9 = _Block_copy(v12);
  v10 = v2;
  swift_release();
  v11 = objc_msgSend(v8, "initWithDuration:controlPoint1:controlPoint2:animations:", v9, v6, 0.33, 0.0, 0.67, 1.0);
  _Block_release(v9);
  objc_msgSend(v11, "startAnimation");

}

void sub_100105EB4(void *a1, uint64_t a2, uint64_t a3, SEL *a4, SEL *a5)
{
  objc_class *ObjectType;
  const char *v10;
  id v11;
  id v12;
  objc_super v13;
  objc_super v14;
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType(a1, a2);
  v15.receiver = a1;
  v15.super_class = ObjectType;
  v10 = *a4;
  v11 = a1;
  LODWORD(v10) = objc_msgSendSuper2(&v15, v10);
  v14.receiver = v11;
  v14.super_class = ObjectType;
  objc_msgSendSuper2(&v14, *a5, a3);
  v13.receiver = v11;
  v13.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v13, *a4);
  if ((_DWORD)v10 != (_DWORD)v12)
    sub_100105D20((uint64_t)v12);

}

void sub_100106104(void *a1, uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  char *v7;
  id v8;
  char v9;
  uint64_t Strong;
  uint64_t v11;
  objc_super v12;

  v12.receiver = v2;
  v12.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v12, "didUpdateFocusInContext:withAnimationCoordinator:", a1, a2);
  v5 = objc_msgSend(a1, "nextFocusedView");
  if (v5)
  {
    v6 = v5;
    sub_100005ED8(0, (unint64_t *)&qword_1006406F0, UIView_ptr);
    v7 = v2;
    v8 = v6;
    v9 = static NSObject.== infix(_:_:)(v8, v7);

    if ((v9 & 1) != 0)
    {
      Strong = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_delegate]);
      if (Strong)
      {
        v11 = Strong;
        if (*(_BYTE *)(Strong + OBJC_IVAR____TtC9Reminders19TTRIPinnedListsView_selectionFollowsFocus) == 1)
          sub_10024F74C(v7, 0);
        swift_unknownObjectRelease(v11);
      }
    }
  }
}

void sub_100106270()
{
  sub_10001EA80();
}

UIAccessibilityTraits sub_1001062CC(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  UIAccessibilityTraits v4;
  UIAccessibilityTraits v5;
  UIAccessibilityTraits v6;
  UIAccessibilityTraits v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v4 = UIAccessibilityTraitButton;
  if ((objc_msgSend(v2, "isUserInteractionEnabled") & 1) == 0)
  {
    v5 = UIAccessibilityTraitNotEnabled;
    if ((UIAccessibilityTraitNotEnabled & ~v4) == 0)
      v5 = 0;
    v4 |= v5;
  }
  v9.receiver = v2;
  v9.super_class = ObjectType;
  if (objc_msgSendSuper2(&v9, "isSelected"))
  {
    v6 = UIAccessibilityTraitSelected;
    if ((UIAccessibilityTraitSelected & ~v4) == 0)
      v6 = 0;
    v4 |= v6;
  }
  v7 = UIAccessibilityTraitStaticText;
  if ((UIAccessibilityTraitStaticText & ~v4) == 0)
    v7 = 0;
  return v7 | v4;
}

void *sub_1001063E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *result;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  char v127[40];

  v1 = type metadata accessor for Date(0);
  v109 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v108 = (char *)&v106 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for TTRAccountsListsViewModel.SmartList(0);
  __chkstk_darwin(v110);
  v111 = (uint64_t)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10002A750((uint64_t *)&unk_100646680);
  __chkstk_darwin(v4);
  v6 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TTRAccountsListsViewModel.PinnedList(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (__int128 *)((char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)&v106 - v12;
  v14 = OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_titleLabel;
  result = *(void **)(v0 + OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_titleLabel);
  if (result)
  {
    v107 = v1;
    v16 = objc_msgSend(result, "text");
    if (v16)
    {
      v17 = v16;
      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

    }
    else
    {
      v20 = (uint64_t *)TTRAccesibility.General.Label.Untitled.unsafeMutableAddressor();
      v19 = v20[1];
      v112 = *v20;
      swift_bridgeObjectRetain(v19);
    }
    v21 = v0 + OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_pinnedList;
    swift_beginAccess(v0 + OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_pinnedList, v127, 0, 0);
    sub_10001F5C4(v21, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      v22 = sub_10001FCE8((uint64_t)v6);
      v23 = (uint64_t *)TTRAccesibility.AccountsList.Format.Name_ItemCount.unsafeMutableAddressor(v22);
      v24 = *v23;
      v25 = v23[1];
      v26 = sub_10002A750((uint64_t *)&unk_100640FD0);
      v27 = swift_allocObject(v26, 112, 7);
      *(_OWORD *)(v27 + 16) = xmmword_1005201E0;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      v28 = sub_1000770A4();
      *(_QWORD *)(v27 + 32) = v112;
      *(_QWORD *)(v27 + 40) = v19;
      v29 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_count);
      *(_QWORD *)(v27 + 96) = &type metadata for Int;
      *(_QWORD *)(v27 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v27 + 64) = v28;
      *(_QWORD *)(v27 + 72) = v29;
      swift_bridgeObjectRetain(v25);
      v30 = String.init(format:_:)(v24, v25, v27);
      swift_bridgeObjectRelease(v25);
      return (void *)v30;
    }
    v31 = (uint64_t)v13;
    sub_10001F580((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.PinnedList);
    sub_10002A790((uint64_t)v13, (uint64_t)v11);
    if (swift_getEnumCaseMultiPayload(v11, v7) != 1)
    {
      v43 = v111;
      v44 = sub_10001F580((uint64_t)v11, v111, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.SmartList);
      v45 = v110;
      v46 = *(unsigned __int8 *)(v43 + *(int *)(v110 + 20));
      if (v46 == 6)
      {
        v30 = v112;
      }
      else
      {
        v47 = (uint64_t *)TTRAccesibility.AccountsList.Format.Name_ItemCount.unsafeMutableAddressor(v44);
        v48 = *v47;
        v49 = v47[1];
        v50 = sub_10002A750((uint64_t *)&unk_100640FD0);
        v51 = swift_allocObject(v50, 112, 7);
        v106 = xmmword_1005201E0;
        *(_OWORD *)(v51 + 16) = xmmword_1005201E0;
        *(_QWORD *)(v51 + 56) = &type metadata for String;
        *(_QWORD *)(v51 + 64) = sub_1000770A4();
        *(_QWORD *)(v51 + 32) = v112;
        *(_QWORD *)(v51 + 40) = v19;
        v52 = *(_QWORD *)(v43 + *(int *)(v45 + 24));
        *(_QWORD *)(v51 + 96) = &type metadata for Int;
        *(_QWORD *)(v51 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v51 + 72) = v52;
        swift_bridgeObjectRetain(v49);
        v30 = String.init(format:_:)(v48, v49, v51);
        v54 = v53;
        v55 = swift_bridgeObjectRelease(v49);
        if (!v46)
        {
          v56 = v108;
          v57 = Date.init()(v55);
          v58 = Date.rem_localizedTodayString.getter(v57);
          v60 = v59;
          (*(void (**)(char *, uint64_t))(v109 + 8))(v56, v107);
          v61 = sub_10002A750((uint64_t *)&unk_100654F80);
          v62 = swift_allocObject(v61, 64, 7);
          *(_OWORD *)(v62 + 16) = v106;
          *(_QWORD *)(v62 + 32) = v30;
          *(_QWORD *)(v62 + 40) = v54;
          *(_QWORD *)(v62 + 48) = v58;
          *(_QWORD *)(v62 + 56) = v60;
          *(_QWORD *)&v114 = v62;
          v63 = (uint64_t *)TTRAccesibility.General.Label.Separator.unsafeMutableAddressor(v62);
          v64 = *v63;
          v65 = v63[1];
          swift_bridgeObjectRetain(v65);
          v66 = sub_10002A750(&qword_1006466D0);
          v67 = sub_1000923A8();
          v30 = BidirectionalCollection<>.joined(separator:)(v64, v65, v66, v67);
          swift_bridgeObjectRelease(v62);
          swift_bridgeObjectRelease(v65);
        }
      }
      sub_10001F544(v43, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.SmartList);
      goto LABEL_27;
    }
    swift_bridgeObjectRelease(v19);
    v32 = v11[11];
    v124 = v11[10];
    v125 = v32;
    v126[0] = v11[12];
    *(_OWORD *)((char *)v126 + 10) = *(__int128 *)((char *)v11 + 202);
    v33 = v11[7];
    v120 = v11[6];
    v121 = v33;
    v34 = v11[9];
    v122 = v11[8];
    v123 = v34;
    v35 = v11[3];
    v116 = v11[2];
    v117 = v35;
    v36 = v11[5];
    v118 = v11[4];
    v119 = v36;
    v37 = v11[1];
    v114 = *v11;
    v115 = v37;
    result = *(void **)(v0 + v14);
    if (result)
    {
      v38 = objc_msgSend(result, "text");
      if (v38)
      {
        v39 = v38;
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v42 = v41;

      }
      else
      {
        v68 = (uint64_t *)TTRAccesibility.General.Label.Untitled.unsafeMutableAddressor();
        v40 = *v68;
        v42 = v68[1];
        swift_bridgeObjectRetain(v42);
      }
      v69 = sub_10002A750((uint64_t *)&unk_100654F80);
      v70 = swift_allocObject(v69, 48, 7);
      *(_OWORD *)(v70 + 16) = xmmword_100520250;
      *(_QWORD *)(v70 + 32) = v40;
      *(_QWORD *)(v70 + 40) = v42;
      v71 = (uint64_t *)TTRAccesibility.AccountsList.Attributes.Pinned.unsafeMutableAddressor();
      v73 = *v71;
      v72 = v71[1];
      swift_bridgeObjectRetain(v72);
      v74 = sub_10001D840((_QWORD *)1, 2, 1, (_QWORD *)v70);
      v75 = v74;
      v74[2] = 2;
      v74[6] = v73;
      v74[7] = v72;
      v76 = *((_QWORD *)&v125 + 1);
      if (*((_QWORD *)&v125 + 1))
      {
        v77 = swift_bridgeObjectRetain(*((_QWORD *)&v125 + 1));
        v78 = Array<A>.ttrAccessibilitySharingSummary()(v77);
        v80 = v79;
        v74 = (_QWORD *)swift_bridgeObjectRelease(v76);
        if (v80)
        {
          v82 = v75[2];
          v81 = v75[3];
          if (v82 >= v81 >> 1)
          {
            v74 = sub_10001D840((_QWORD *)(v81 > 1), v82 + 1, 1, v75);
            v75 = v74;
          }
          v75[2] = v82 + 1;
          v83 = &v75[2 * v82];
          v83[4] = v78;
          v83[5] = v80;
        }
      }
      if (BYTE8(v126[1]) == 1)
      {
        v84 = (uint64_t *)TTRAccesibility.AccountsList.Label.SmartList.unsafeMutableAddressor();
        v86 = *v84;
        v85 = v84[1];
        v87 = v75[2];
        v88 = v75[3];
        swift_bridgeObjectRetain(v85);
        if (v87 >= v88 >> 1)
        {
          v74 = sub_10001D840((_QWORD *)(v88 > 1), v87 + 1, 1, v75);
          v75 = v74;
        }
        v75[2] = v87 + 1;
        v89 = &v75[2 * v87];
        v89[4] = v86;
        v89[5] = v85;
      }
      v113 = v75;
      v90 = (uint64_t *)TTRAccesibility.General.Label.Separator.unsafeMutableAddressor(v74);
      v91 = *v90;
      v92 = v90[1];
      swift_bridgeObjectRetain(v92);
      v93 = sub_10002A750(&qword_1006466D0);
      v94 = sub_1000923A8();
      v95 = BidirectionalCollection<>.joined(separator:)(v91, v92, v93, v94);
      v97 = v96;
      swift_bridgeObjectRelease(v75);
      v98 = swift_bridgeObjectRelease(v92);
      v99 = (uint64_t *)TTRAccesibility.AccountsList.Format.Name_ItemCount.unsafeMutableAddressor(v98);
      v100 = *v99;
      v101 = v99[1];
      v102 = sub_10002A750((uint64_t *)&unk_100640FD0);
      v103 = swift_allocObject(v102, 112, 7);
      *(_OWORD *)(v103 + 16) = xmmword_1005201E0;
      *(_QWORD *)(v103 + 56) = &type metadata for String;
      v104 = sub_1000770A4();
      *(_QWORD *)(v103 + 32) = v95;
      *(_QWORD *)(v103 + 40) = v97;
      v105 = *((_QWORD *)&v115 + 1);
      *(_QWORD *)(v103 + 96) = &type metadata for Int;
      *(_QWORD *)(v103 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v103 + 64) = v104;
      *(_QWORD *)(v103 + 72) = v105;
      swift_bridgeObjectRetain(v101);
      v30 = String.init(format:_:)(v100, v101, v103);
      swift_bridgeObjectRelease(v101);
      sub_100075FE8((uint64_t)&v114);
LABEL_27:
      sub_10001F544(v31, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.PinnedList);
      return (void *)v30;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100106B5C()
{
  uint64_t v0;
  uint64_t result;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  result = *(_QWORD *)(v0 + OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_titleLabel);
  if (result)
  {
    v2 = objc_msgSend((id)result, "text");
    if (v2)
    {
      v3 = v2;
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
      v6 = v5;

    }
    else
    {
      v7 = (uint64_t *)TTRAccesibility.General.Label.Untitled.unsafeMutableAddressor();
      v4 = *v7;
      v6 = v7[1];
      swift_bridgeObjectRetain(v6);
    }
    v8 = sub_10002A750((uint64_t *)&unk_100654F80);
    result = swift_allocObject(v8, 48, 7);
    *(_OWORD *)(result + 16) = xmmword_100520250;
    *(_QWORD *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100106CF4(uint64_t a1, uint64_t a2)
{
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  objc_super v13;
  uint64_t v14;

  v13.receiver = v2;
  v13.super_class = (Class)swift_getObjectType(v2, a2);
  v3 = objc_msgSendSuper2(&v13, "accessibilityCustomActions");
  if (v3)
  {
    v4 = v3;
    v5 = sub_100005ED8(0, (unint64_t *)&unk_1006466C0, UIAccessibilityCustomAction_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  }
  else
  {
    v6 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v14 = v6;
  Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_delegate]);
  if (Strong)
  {
    v8 = Strong;
    v9 = sub_10024F9D8((uint64_t)v2);
    swift_unknownObjectRelease(v8);
    if (v9)
    {
      sub_100450B9C(v9);
      v6 = v14;
    }
  }
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v11 = v6;
    else
      v11 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v6);
    if (!v12)
      goto LABEL_9;
  }
  else if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    swift_bridgeObjectRelease(v6);
    return 0;
  }
  return v6;
}

void sub_100106EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _swift_stdlib_reportUnimplementedInitializer(a3, a4, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_100106FC0()
{
  return type metadata accessor for TTRIPinnedListControl(0);
}

uint64_t sub_10010708C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001070B0()
{
  sub_10001EA80();
}

uint64_t sub_1001070D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 26, 7);
}

uint64_t sub_1001070F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100107104()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  char *v3;

  v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_isDropTarget] = 0;
  v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_isContextMenuTarget] = 0;
  v1 = &v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_pinnedList];
  v2 = type metadata accessor for TTRAccountsListsViewModel.PinnedList(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_count] = 0;
  v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_usesLongTitle] = 0;
  v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_selectedStateShowsPinnedListColor] = 0;
  v3 = &v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_delegate];
  *((_QWORD *)v3 + 1) = 0;
  swift_unknownObjectWeakInit(v3, 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_dynamicDateGlyphCache] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_gradientBackgroundView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_badgeView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_countLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_titleLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9Reminders21TTRIPinnedListControl_stackedAvatarsView] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010055F310, "Reminders/TTRIPinnedListControl.swift", 37, 2, 148, 0);
  __break(1u);
}

void sub_100107238(uint64_t a1)
{
  unint64_t v1;
  id v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  void *object;
  NSString v11;
  id v12;
  _BYTE v13[24];
  uint64_t v14;

  sub_100107414(a1, (uint64_t)v13);
  if (v14)
  {
    v1 = sub_10010745C();
    if ((swift_dynamicCast(&v12, v13, &type metadata for Any[8], v1, 6) & 1) != 0)
    {
      v2 = v12;
      v3 = objc_msgSend(v12, "hasMarkedText");
      v4 = objc_msgSend(v2, "text");
      if (v4)
      {
        v5 = v4;
        v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
        v8 = v7;

      }
      else
      {
        v6 = 0;
        v8 = (void *)0xE000000000000000;
      }
      v9._countAndFlagsBits = v6;
      v9._object = v8;
      object = TTRHashtagAssociationPresenterCapability.validateNewHashtagName(_:hasMarkedText:)(v9, v3).value._object;
      swift_bridgeObjectRelease(v8);
      if (object)
      {
        v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        objc_msgSend(v2, "setText:", v11);

      }
    }
  }
  else
  {
    sub_10002CAA0((uint64_t)v13);
  }
}

uint64_t sub_100107414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10002A750(&qword_100640E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10010745C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10065F350;
  if (!qword_10065F350)
  {
    v1 = objc_opt_self(UITextField);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10065F350);
  }
  return result;
}

void sub_100107498(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t updated;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v2 = type metadata accessor for TTRITreeViewDropProposal(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100115C14(319);
    if (v6 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      updated = type metadata accessor for TTRITreeViewDropUpdateCoordinator.HitTestResult(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v5);
      v8 = type metadata accessor for Optional(319, updated);
      if (v9 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v8 - 8) + 64;
        v10[4] = "\b";
        swift_initClassMetadata2(a1, 0, 5, v10, a1 + 96);
      }
    }
  }
}

uint64_t sub_10010755C()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  uint64_t (*v4)(id *, uint64_t, uint64_t);
  uint64_t result;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t *Strong;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  unint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];

  v1 = v0;
  v2 = (id *)(v0 + qword_1006736E8);
  swift_beginAccess(v0 + qword_1006736E8, v17, 0, 0);
  v3 = sub_10002A750((uint64_t *)&unk_100654900);
  v4 = *(uint64_t (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48);
  result = v4(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = objc_msgSend(*v2, "localDragSession");
    if (v6)
    {
      v8 = v6;
      swift_getObjectType(v6, v7);
      Strong = (uint64_t *)swift_unknownObjectUnownedLoadStrong(*(_QWORD *)(v1 + qword_100646728) + qword_100645EF8);
      v10 = sub_1002A16D0(Strong);

      swift_unknownObjectRelease(v8);
      if (v10)
      {
        v11 = (uint64_t *)(v10 + qword_1006738F8);
        swift_beginAccess(v10 + qword_1006738F8, v16, 0, 0);
        v12 = *v11;
        swift_bridgeObjectRetain(*v11);
        swift_release(v10);
        swift_retain(v1);
        v13 = sub_1001177A8(v12, v1);
        swift_bridgeObjectRelease(v12);
        swift_release(v1);
        return (uint64_t)v13;
      }
    }
    result = v4(v2, 1, v3);
    if ((_DWORD)result != 1)
    {
      v14 = objc_msgSend(*v2, "items");
      v15 = sub_100041E10();
      v13 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

      return (uint64_t)v13;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100107718()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  uint64_t (*v4)(id *, uint64_t, uint64_t);
  uint64_t result;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t *Strong;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v1 = v0;
  v2 = (id *)(v0 + qword_1006736E8);
  swift_beginAccess(v0 + qword_1006736E8, v18, 0, 0);
  v3 = sub_10002A750((uint64_t *)&unk_100654900);
  v4 = *(uint64_t (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48);
  result = v4(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = objc_msgSend(*v2, "localDragSession");
    if (v6)
    {
      v8 = v6;
      swift_getObjectType(v6, v7);
      Strong = (uint64_t *)swift_unknownObjectUnownedLoadStrong(*(_QWORD *)(v1 + qword_100646728) + qword_100645EF8);
      v10 = sub_1002A16D0(Strong);

      swift_unknownObjectRelease(v8);
      if (v10)
      {
        v11 = (uint64_t *)(v10 + qword_1006738F8);
        swift_beginAccess(v10 + qword_1006738F8, v17, 0, 0);
        v12 = *v11;
        swift_bridgeObjectRetain(*v11);
        swift_release();
        swift_retain();
        sub_100117CA8(v12, v1);
        v14 = v13;
        swift_bridgeObjectRelease(v12);
        swift_release();
        return v14;
      }
    }
    result = v4(v2, 1, v3);
    if ((_DWORD)result != 1)
    {
      v15 = objc_msgSend(*v2, "items");
      v16 = sub_100041E10();
      v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

      return v14;
    }
  }
  __break(1u);
  return result;
}

void *sub_1001078D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *result;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  _BYTE v17[24];

  v1 = v0;
  v2 = *v0;
  result = (void *)sub_1001181A8();
  if (result)
  {
    v4 = objc_msgSend(result, "localDragSession");
    if (v4)
    {
      v6 = v4;
      swift_getObjectType(v4, v5);
      v7 = (uint64_t *)sub_1000E32B0();
      v8 = sub_1002A16D0(v7);

      swift_unknownObjectRelease(v6);
      if (v8)
      {
        v9 = (_QWORD *)(v8 + qword_1006738F8);
        swift_beginAccess(v8 + qword_1006738F8, v17, 0, 0);
        v10 = *v9;
        swift_bridgeObjectRetain(*v9);
        swift_release();
        v11 = sub_10002A750(&qword_1006469E0);
        v12 = *(_QWORD *)(v2 + 80);
        v13 = sub_10011824C();
        v14 = Sequence.compactMap<A>(_:)(sub_10011821C, v1, v11, v12, v13);
        swift_bridgeObjectRelease(v10);
        return (void *)v14;
      }
    }
    result = (void *)sub_1001181A8();
    if (result)
    {
      v15 = objc_msgSend(result, "items");
      v16 = sub_100041E10();
      v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

      return (void *)v14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100107A48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  uint64_t v60;
  id v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  id v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _BYTE v89[24];
  char v90[24];
  char v91[32];

  v78 = a3;
  v83 = a5;
  v8 = sub_10002A750(&qword_100646A10);
  __chkstk_darwin(v8);
  v73 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_10002A750(&qword_100646A18);
  __chkstk_darwin(v85);
  v86 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10002A750((uint64_t *)&unk_100646A20);
  v12 = __chkstk_darwin(v11);
  v76 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v75 = (uint64_t)&v71 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v71 - v16;
  v18 = sub_10002A750((uint64_t *)&unk_100640E40);
  v84 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v77 = (uint64_t)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v74 = (uint64_t)&v71 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v71 - v23;
  v25 = sub_10002A750((uint64_t *)&unk_100653F70);
  __chkstk_darwin(v25);
  v27 = (char **)((char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10002A750(&qword_100646950);
  v29 = __chkstk_darwin(v28);
  v72 = (uint64_t)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v32 = (char *)&v71 - v31;
  v33 = a1 + qword_1006736E8;
  v88 = a2;
  swift_retain(a2);
  v34 = a4;
  swift_beginAccess(v33, v91, 0, 0);
  sub_10000735C(v33, (uint64_t)v27, (uint64_t *)&unk_100653F70);
  v35 = sub_10002A750((uint64_t *)&unk_100654900);
  if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v27, 1, v35) != 1)
  {
    v37 = *v27;
    v36 = v27[1];
    sub_10000F614((uint64_t)v27 + *(int *)(v35 + 64), (uint64_t)v32, &qword_100646950);
    swift_retain_n(v88, 2);
    v82 = v34;
    v79 = v37;
    v80 = v36;
    v87 = v32;
    sub_10010E8F4(v36, v37, (uint64_t)v32, (uint64_t)v24);
    v81 = v24;
    sub_10000735C((uint64_t)v24, (uint64_t)v17, (uint64_t *)&unk_100640E40);
    v38 = v84;
    v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56);
    v39(v17, 0, 1, v18);
    v40 = a1;
    v41 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 120);
    swift_beginAccess(v41, v90, 0, 0);
    v42 = v86;
    v43 = v86 + *(int *)(v85 + 48);
    sub_10000735C((uint64_t)v17, v86, (uint64_t *)&unk_100646A20);
    sub_10000735C(v41, v43, (uint64_t *)&unk_100646A20);
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
    if (v44(v42, 1, v18) == 1)
    {
      sub_1000073A0((uint64_t)v17, (uint64_t *)&unk_100646A20);
      v45 = v18;
      v46 = v44(v43, 1, v18);
      v47 = (uint64_t)v81;
      v48 = (uint64_t)v87;
      if (v46 == 1)
      {
        sub_1000073A0(v42, (uint64_t *)&unk_100646A20);
        v49 = v83;
        v50 = a1;
LABEL_9:
        swift_unknownObjectRelease(v79);

        sub_1000073A0(v47, (uint64_t *)&unk_100640E40);
        sub_1000073A0(v48, &qword_100646950);
        v54 = v50 + qword_1006736E0;
        swift_beginAccess(v50 + qword_1006736E0, v89, 0, 0);
        sub_10002B1E8(v54, (uint64_t)v49, type metadata accessor for TTRITreeViewDropProposal);
        v55 = v88;
        v56 = v82;
LABEL_17:

        swift_release_n(v55, 4);
        return;
      }
    }
    else
    {
      v51 = v75;
      sub_10000735C(v42, v75, (uint64_t *)&unk_100646A20);
      v45 = v18;
      if (v44(v43, 1, v18) != 1)
      {
        v52 = v74;
        sub_10000F614(v43, v74, (uint64_t *)&unk_100640E40);
        v53 = sub_100113D00(v51, v52);
        sub_1000073A0(v52, (uint64_t *)&unk_100640E40);
        sub_1000073A0((uint64_t)v17, (uint64_t *)&unk_100646A20);
        sub_1000073A0(v51, (uint64_t *)&unk_100640E40);
        sub_1000073A0(v42, (uint64_t *)&unk_100646A20);
        v49 = v83;
        v50 = v40;
        v47 = (uint64_t)v81;
        v48 = (uint64_t)v87;
        if ((v53 & 1) != 0)
          goto LABEL_9;
LABEL_10:
        v57 = v76;
        sub_10000735C(v47, v76, (uint64_t *)&unk_100640E40);
        v39((char *)v57, 0, 1, v45);
        swift_beginAccess(v41, v89, 33, 0);
        sub_100041F2C(v57, v41, (uint64_t *)&unk_100646A20);
        swift_endAccess(v89);
        v58 = v77;
        sub_10000735C(v47, v77, (uint64_t *)&unk_100640E40);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v58, v45);
        if (EnumCaseMultiPayload)
        {
          v55 = v88;
          v56 = v82;
          if (EnumCaseMultiPayload == 1)
          {
            v60 = v72;
            sub_10000F614(v58, v72, &qword_100646950);
            swift_retain(v55);
            v61 = v56;
            v63 = v79;
            v62 = v80;
            sub_10010FB44(v60, v79, v50, v55, v78, v61, (uint64_t)v49);
            swift_unknownObjectRelease(v63);

            sub_1000073A0(v60, &qword_100646950);
            sub_1000073A0(v47, (uint64_t *)&unk_100640E40);
            v64 = (uint64_t)v87;
LABEL_16:
            sub_1000073A0(v64, &qword_100646950);
            goto LABEL_17;
          }
          swift_retain(v88);
          v69 = v56;
          v70 = v79;
          sub_100111074(v79, v50, v55, v78, (uint64_t)v69, v49);
          swift_unknownObjectRelease(v70);

        }
        else
        {
          v65 = v58;
          v66 = v73;
          sub_10000F614(v65, v73, &qword_100646A10);
          v55 = v88;
          swift_retain(v88);
          v56 = v82;
          v67 = v82;
          v68 = v79;
          sub_100111CE4(v66, v79, v50, v55, v78, v67, v49);
          swift_unknownObjectRelease(v68);

          sub_1000073A0(v66, &qword_100646A10);
        }
        sub_1000073A0(v47, (uint64_t *)&unk_100640E40);
        v64 = (uint64_t)v87;
        goto LABEL_16;
      }
      sub_1000073A0((uint64_t)v17, (uint64_t *)&unk_100646A20);
      sub_1000073A0(v51, (uint64_t *)&unk_100640E40);
      v47 = (uint64_t)v81;
    }
    sub_1000073A0(v42, &qword_100646A18);
    v49 = v83;
    v50 = v40;
    goto LABEL_10;
  }

  swift_release(v88);
  __break(1u);
}

void sub_1001081F0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int EnumCaseMultiPayload;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _BYTE v86[24];
  char v87[24];
  char v88[32];

  v80 = a4;
  v7 = sub_10002A750(&qword_100646958);
  __chkstk_darwin(v7);
  v71 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10002A750((uint64_t *)&unk_100646960);
  __chkstk_darwin(v82);
  v83 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10002A750(&qword_100640EC8);
  __chkstk_darwin(v10);
  v74 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v73 = (uint64_t)&v70 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v70 - v15;
  v17 = sub_10002A750(&qword_100640ED0);
  v81 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v75 = (uint64_t)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v72 = (uint64_t)&v70 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v70 - v22;
  v24 = sub_10002A750((uint64_t *)&unk_100653F70);
  __chkstk_darwin(v24);
  v26 = (void **)((char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v27);
  v70 = (uint64_t)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v70 - v30;
  v32 = a1 + qword_1006736E8;
  v85 = a2;
  swift_retain();
  v33 = a3;
  swift_beginAccess(v32, v88, 0, 0);
  sub_10000735C(v32, (uint64_t)v26, (uint64_t *)&unk_100653F70);
  v34 = sub_10002A750((uint64_t *)&unk_100654900);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v26, 1, v34) != 1)
  {
    v36 = *v26;
    v35 = v26[1];
    sub_10000F614((uint64_t)v26 + *(int *)(v34 + 64), (uint64_t)v31, &qword_100646950);
    swift_retain_n(v85, 2);
    v37 = v33;
    v77 = v36;
    v78 = v35;
    v84 = v31;
    sub_10010F21C(v35, v36, (uint64_t)v31, (uint64_t)v23);
    v79 = v23;
    sub_10000735C((uint64_t)v23, (uint64_t)v16, &qword_100640ED0);
    v38 = v81;
    v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56);
    v39(v16, 0, 1, v17);
    v40 = *(_QWORD *)(*(_QWORD *)a1 + 120);
    v76 = a1;
    v41 = a1 + v40;
    swift_beginAccess(a1 + v40, v87, 0, 0);
    v42 = v83;
    v43 = v83 + *(int *)(v82 + 48);
    sub_10000735C((uint64_t)v16, v83, &qword_100640EC8);
    sub_10000735C(v41, v43, &qword_100640EC8);
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
    if (v44(v42, 1, v17) == 1)
    {
      sub_1000073A0((uint64_t)v16, &qword_100640EC8);
      v45 = v17;
      v46 = v44(v43, 1, v17);
      v47 = (uint64_t)v79;
      v48 = (uint64_t)v84;
      if (v46 == 1)
      {
        sub_1000073A0(v42, &qword_100640EC8);
        v49 = v80;
        v50 = v76;
LABEL_9:
        swift_unknownObjectRelease(v77);

        sub_1000073A0(v47, &qword_100640ED0);
        sub_1000073A0(v48, &qword_100646950);
        v54 = v50 + qword_1006736E0;
        swift_beginAccess(v50 + qword_1006736E0, v86, 0, 0);
        sub_10002B1E8(v54, (uint64_t)v49, type metadata accessor for TTRITreeViewDropProposal);
        v55 = v85;
LABEL_17:

        swift_release_n(v55, 4);
        return;
      }
    }
    else
    {
      v51 = v73;
      sub_10000735C(v42, v73, &qword_100640EC8);
      v45 = v17;
      if (v44(v43, 1, v17) != 1)
      {
        v52 = v72;
        sub_10000F614(v43, v72, &qword_100640ED0);
        v53 = sub_1001141E4(v51, v52);
        sub_1000073A0(v52, &qword_100640ED0);
        sub_1000073A0((uint64_t)v16, &qword_100640EC8);
        sub_1000073A0(v51, &qword_100640ED0);
        sub_1000073A0(v42, &qword_100640EC8);
        v47 = (uint64_t)v79;
        v49 = v80;
        v50 = v76;
        v48 = (uint64_t)v84;
        if ((v53 & 1) != 0)
          goto LABEL_9;
LABEL_10:
        v56 = v74;
        sub_10000735C(v47, v74, &qword_100640ED0);
        v39((char *)v56, 0, 1, v45);
        swift_beginAccess(v41, v86, 33, 0);
        sub_100041F2C(v56, v41, &qword_100640EC8);
        swift_endAccess(v86);
        v57 = v75;
        sub_10000735C(v47, v75, &qword_100640ED0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v57, v45);
        if (EnumCaseMultiPayload)
        {
          v55 = v85;
          if (EnumCaseMultiPayload == 1)
          {
            v59 = v70;
            sub_10000F614(v57, v70, &qword_100646950);
            swift_retain();
            v60 = v37;
            v62 = v77;
            v61 = v78;
            sub_1001106C0(v59, v77, v50, v55, (uint64_t)v60, v49);
            swift_unknownObjectRelease(v62);

            sub_1000073A0(v59, &qword_100646950);
            sub_1000073A0(v47, &qword_100640ED0);
            v63 = (uint64_t)v84;
LABEL_16:
            sub_1000073A0(v63, &qword_100646950);
            goto LABEL_17;
          }
          swift_retain();
          v68 = v37;
          v69 = v77;
          sub_100111730(v77, v55, (uint64_t)v68, v49);
          swift_unknownObjectRelease(v69);

        }
        else
        {
          v64 = v57;
          v65 = v71;
          sub_10000F614(v64, v71, &qword_100646958);
          v55 = v85;
          swift_retain();
          v66 = v37;
          v67 = v77;
          sub_100112A7C(v65, v77, v50, v55, v66, v49);
          swift_unknownObjectRelease(v67);

          sub_1000073A0(v65, &qword_100646958);
        }
        sub_1000073A0(v47, &qword_100640ED0);
        v63 = (uint64_t)v84;
        goto LABEL_16;
      }
      sub_1000073A0((uint64_t)v16, &qword_100640EC8);
      sub_1000073A0(v51, &qword_100640ED0);
      v47 = (uint64_t)v79;
    }
    sub_1000073A0(v42, (uint64_t *)&unk_100646960);
    v49 = v80;
    v50 = v76;
    goto LABEL_10;
  }

  swift_release();
  __break(1u);
}

uint64_t sub_100108978@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Strong;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];

  v61 = a3;
  v60 = a4;
  v5 = a2 & 1;
  v6 = sub_10002A750((uint64_t *)&unk_100640E00);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750(&qword_100646A78);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v59 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v58 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v58 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v58 - v23;
  __chkstk_darwin(v22);
  v58 = (uint64_t)&v58 - v25;
  sub_10010A54C(a1, v5, v61, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if (!EnumCaseMultiPayload)
  {
    sub_10001F580((uint64_t)v11, (uint64_t)v24, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v36 = sub_10006B64C();
    v38 = v37;
    v40 = v39;
    v41 = sub_100073338((uint64_t)v24, v37);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v36);
    if (v41)
    {
      Strong = swift_weakLoadStrong(v41 + 56);
      swift_release(v41);
      if (Strong)
      {
        v43 = Strong + *(_QWORD *)(*(_QWORD *)Strong + 144);
        swift_beginAccess(v43, v62, 0, 0);
        sub_10002B1E8(v43, (uint64_t)v18, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        swift_release(Strong);
        sub_10001F580((uint64_t)v18, (uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        v44 = sub_1002BB9D8((uint64_t)v24);
        if ((v45 & 1) == 0)
        {
          v27 = v44;
          sub_10001F544((uint64_t)v24, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
          goto LABEL_13;
        }
        sub_10001F544((uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      }
    }
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100012DC4(v52, (uint64_t)qword_100645EC0);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.fault.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Missing parent/childIndex", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    v35 = (uint64_t)v24;
    goto LABEL_20;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v21 = v59;
    sub_10001F580((uint64_t)v11, (uint64_t)v59, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    sub_10002B1E8((uint64_t)v21, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    v27 = sub_1002BC048((uint64_t)v8);
    v29 = v28;
    sub_1000073A0((uint64_t)v8, (uint64_t *)&unk_100640E00);
    if ((v29 & 1) != 0)
    {
      if (qword_10063D3C8 != -1)
        swift_once(&qword_10063D3C8, sub_1000E35C8);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_100012DC4(v30, (uint64_t)qword_100645EC0);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.fault.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing parent child count", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = (uint64_t)v21;
LABEL_20:
      sub_10001F544(v35, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      goto LABEL_21;
    }
LABEL_13:
    v46 = v58;
    sub_10001F580((uint64_t)v21, v58, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v47 = sub_10002A750(&qword_100640FF8);
    v48 = *(int *)(v47 + 48);
    v49 = v46;
    v50 = v60;
    sub_10001F580(v49, v60, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    *(_QWORD *)(v50 + v48) = v27;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v50, 0, 1, v47);
  }
LABEL_21:
  v57 = sub_10002A750(&qword_100640FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v60, 1, 1, v57);
}

uint64_t sub_100108E68@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Strong;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];

  v61 = a3;
  v60 = a4;
  v5 = a2 & 1;
  v6 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002A750((uint64_t *)&unk_1006469D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v59 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v58 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v58 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v58 - v22;
  __chkstk_darwin(v24);
  v58 = (uint64_t)&v58 - v25;
  sub_10010A9C0(a1, v5, v61, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if (!EnumCaseMultiPayload)
  {
    sub_10001F580((uint64_t)v11, (uint64_t)v23, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v36 = sub_10006B3DC();
    v38 = v37;
    v40 = v39;
    v41 = sub_100073228((uint64_t)v23, v37);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v36);
    if (v41)
    {
      Strong = swift_weakLoadStrong(v41 + 56);
      swift_release();
      if (Strong)
      {
        v43 = Strong + *(_QWORD *)(*(_QWORD *)Strong + 144);
        swift_beginAccess(v43, v62, 0, 0);
        sub_10002B1E8(v43, (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        swift_release();
        sub_10001F580((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
        v44 = sub_1002BB9FC((uint64_t)v23);
        if ((v45 & 1) == 0)
        {
          v27 = v44;
          sub_10001F544((uint64_t)v23, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
          goto LABEL_13;
        }
        sub_10001F544((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      }
    }
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100012DC4(v52, (uint64_t)qword_100645EC0);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.fault.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Missing parent/childIndex", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    v35 = (uint64_t)v23;
    goto LABEL_20;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v20 = v59;
    sub_10001F580((uint64_t)v11, (uint64_t)v59, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    sub_10002B1E8((uint64_t)v20, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    v27 = sub_1002BC37C((uint64_t)v8);
    v29 = v28;
    sub_1000073A0((uint64_t)v8, (uint64_t *)&unk_100640EB0);
    if ((v29 & 1) != 0)
    {
      if (qword_10063D3C8 != -1)
        swift_once(&qword_10063D3C8, sub_1000E35C8);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_100012DC4(v30, (uint64_t)qword_100645EC0);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.fault.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing parent child count", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = (uint64_t)v20;
LABEL_20:
      sub_10001F544(v35, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      goto LABEL_21;
    }
LABEL_13:
    v46 = v58;
    sub_10001F580((uint64_t)v20, v58, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    v47 = sub_10002A750((uint64_t *)&unk_1006469A8);
    v48 = *(int *)(v47 + 48);
    v49 = v46;
    v50 = v60;
    sub_10001F580(v49, v60, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    *(_QWORD *)(v50 + v48) = v27;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v50, 0, 1, v47);
  }
LABEL_21:
  v57 = sub_10002A750((uint64_t *)&unk_1006469A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v60, 1, 1, v57);
}

void sub_100109358(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t (*a8)(_QWORD)@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, char *, _QWORD), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD v59[10];
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(_QWORD);
  void (*v77)(uint64_t, char *, _QWORD);
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;

  v60 = a4;
  LODWORD(v79) = a3;
  v78 = a2;
  v81 = a9;
  v59[3] = a18;
  v59[2] = a17;
  v62 = a16;
  v69 = a15;
  v74 = a14;
  v70 = a13;
  v75 = a12;
  v80 = a11;
  v77 = a10;
  v59[4] = a5;
  v22 = a5(0);
  v23 = __chkstk_darwin(v22);
  v59[1] = (char *)v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v59[0] = (char *)v59 - v25;
  v63 = a6;
  v26 = sub_10002A750(a6);
  __chkstk_darwin(v26);
  v66 = (char *)v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10002A750(a7);
  v29 = __chkstk_darwin(v28);
  v68 = (char *)v59 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)v59 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)v59 - v34;
  v76 = a8;
  v65 = a8(0);
  v64 = *(_QWORD *)(v65 - 8);
  v36 = __chkstk_darwin(v65);
  v59[5] = (char *)v59 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v59[6] = (char *)v59 - v39;
  v40 = __chkstk_darwin(v38);
  v73 = (char *)v59 - v41;
  v42 = __chkstk_darwin(v40);
  v59[7] = (char *)v59 - v43;
  v44 = __chkstk_darwin(v42);
  v59[8] = (char *)v59 - v45;
  v46 = __chkstk_darwin(v44);
  v61 = (char *)v59 - v47;
  v48 = __chkstk_darwin(v46);
  v67 = (char *)v59 - v49;
  v50 = __chkstk_darwin(v48);
  v51 = __chkstk_darwin(v50);
  v59[9] = (char *)v59 - v52;
  v53 = __chkstk_darwin(v51);
  v54 = __chkstk_darwin(v53);
  v55 = __chkstk_darwin(v54);
  v56 = __chkstk_darwin(v55);
  __chkstk_darwin(v56);
  v72 = (char *)v59 - v57;
  v71 = a1;
  v77(a1, v78, v79);
  v78 = v35;
  v79 = a7;
  sub_10000735C((uint64_t)v35, (uint64_t)v33, a7);
  v58 = (char *)&loc_100109774 + *((int *)qword_10010A538 + swift_getEnumCaseMultiPayload(v33, v28));
  __asm { BR              X10 }
}

uint64_t sub_100109784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(_QWORD);
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t *v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint8_t *v87;

  v6 = *(uint64_t (**)(_QWORD))(v5 - 240);
  v7 = sub_10001F580(v3, v4, v6);
  v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(v5 - 248))(v7);
  v10 = v9;
  v12 = v11;
  v13 = (*(uint64_t (**)(uint64_t))(v5 - 256))(v4);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  if (!v13)
    goto LABEL_17;
  Strong = swift_weakLoadStrong(v13 + 56);
  swift_release();
  if (!Strong)
    goto LABEL_17;
  v15 = Strong + *(_QWORD *)(*(_QWORD *)Strong + 144);
  swift_beginAccess(v15, v5 - 160, 0, 0);
  sub_10002B1E8(v15, v1, v6);
  swift_release();
  sub_10001F580(v1, v0, v6);
  v16 = (*(uint64_t (**)(uint64_t))(v5 - 296))(v4);
  if ((v17 & 1) != 0)
  {
    sub_10001F544(v0, v6);
LABEL_17:
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v62 = type metadata accessor for Logger(0);
    v63 = sub_100012DC4(v62, (uint64_t)qword_100645EC0);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.fault.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v68 = *(_QWORD *)(v5 - 224);
    v67 = *(uint64_t **)(v5 - 216);
    if (v66)
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Missing parent/childIndex", v69, 2u);
      swift_slowDealloc(v69, -1, -1);
    }

    sub_10001F544(v4, v6);
    sub_1000073A0(v68, v67);
    v70 = sub_10002A750(*(uint64_t **)(v5 - 208));
    v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56);
    v72 = *(_QWORD *)(v5 - 200);
    return v71(v72, 1, 1, v70);
  }
  v18 = v16;
  sub_10001F544(v4, v6);
  v19 = *(_QWORD *)(v5 - 272);
  sub_10001F580(v0, v19, v6);
  v20 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
LABEL_34:
    swift_once(&qword_10063D3C8, sub_1000E35C8);
    goto LABEL_29;
  }
  v21 = *(uint64_t **)(v5 - 208);
  v13 = *(_QWORD *)(v5 - 200);
  v4 = *(_QWORD *)(v5 - 224);
  v8 = *(uint64_t **)(v5 - 216);
  v22 = *(_QWORD *)(v5 - 264);
  v23 = *(_QWORD *)(v5 - 304);
  sub_10000735C(v4, v23, v8);
  if (swift_getEnumCaseMultiPayload(v23, v2) == 3)
  {
    sub_1000073A0(v4, v8);
    v24 = v23;
LABEL_14:
    sub_1000073A0(v24, v8);
    goto LABEL_15;
  }
  v25 = sub_1000073A0(v23, v8);
  if ((*(_DWORD *)(v5 - 364) & 1) == 0)
  {
    v24 = v4;
    goto LABEL_14;
  }
  *(_QWORD *)(v5 - 224) = v20;
  v26 = *(uint64_t (**)(uint64_t))(v5 - 248);
  v27 = v26(v25);
  v29 = v28;
  v31 = v30;
  v32 = (*(uint64_t (**)(_QWORD, uint64_t))(v5 - 288))(*(_QWORD *)(v5 - 280), v27);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v27);
  if (!v32)
  {
    v73 = *(_QWORD *)(v5 - 272);
    v74 = *(_QWORD *)(v5 - 200);
    if (qword_10063D3C8 != -1)
      swift_once(&qword_10063D3C8, sub_1000E35C8);
    v75 = type metadata accessor for Logger(0);
    v76 = sub_100012DC4(v75, (uint64_t)qword_100645EC0);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.fault.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Unexpected: node not found at sourceIndexPath", v79, 2u);
      v80 = v79;
      v73 = *(_QWORD *)(v5 - 272);
      swift_slowDealloc(v80, -1, -1);
    }

    sub_1000073A0(v4, v8);
    sub_10001F544(v73, v6);
    v70 = sub_10002A750(*(uint64_t **)(v5 - 208));
    v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56);
    v72 = v74;
    return v71(v72, 1, 1, v70);
  }
  v33 = *(_QWORD *)(*(_QWORD *)v32 + 144);
  *(_QWORD *)(v5 - 216) = v32;
  v34 = v32 + v33;
  swift_beginAccess(v32 + v33, v5 - 112, 0, 0);
  v35 = sub_10002B1E8(v34, v22, v6);
  v36 = v26(v35);
  v38 = v37;
  v39 = v22;
  v41 = v40;
  v42 = (*(uint64_t (**)(uint64_t))(v5 - 256))(v39);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v36);
  v13 = *(_QWORD *)(v5 - 200);
  if (v42)
  {
    v43 = swift_weakLoadStrong(v42 + 56);
    swift_release();
    if (v43)
    {
      v44 = v43 + *(_QWORD *)(*(_QWORD *)v43 + 144);
      swift_beginAccess(v44, v5 - 136, 0, 0);
      v45 = *(_QWORD *)(v5 - 408);
      sub_10002B1E8(v44, v45, v6);
      swift_release();
      v46 = v45;
      v47 = *(_QWORD *)(v5 - 400);
      sub_10001F580(v46, v47, v6);
      v48 = *(_QWORD *)(v5 - 264);
      v49 = (*(uint64_t (**)(uint64_t))(v5 - 296))(v48);
      if ((v50 & 1) == 0)
      {
        v51 = v49;
        v52 = *(_QWORD *)(v5 - 448);
        v53 = *(uint64_t (**)(void))(v5 - 432);
        v54 = v53();
        v55 = *(_QWORD *)(v5 - 440);
        v56 = *(_QWORD *)(v5 - 272);
        ((void (*)(uint64_t))v53)(v54);
        LOBYTE(v53) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 - 424))(v52, v55);
        swift_release();
        v57 = v55;
        v58 = *(uint64_t (**)(_QWORD))(v5 - 416);
        sub_10001F544(v57, v58);
        sub_10001F544(v52, v58);
        sub_10001F544(*(_QWORD *)(v5 - 400), v6);
        sub_10001F544(v48, v6);
        sub_1000073A0(v4, v8);
        v19 = v56;
        v20 = *(_QWORD *)(v5 - 224) - (v53 & (v51 < *(_QWORD *)(v5 - 224)));
        v21 = *(uint64_t **)(v5 - 208);
LABEL_15:
        v59 = sub_10002A750(v21);
        v60 = *(int *)(v59 + 48);
        sub_10001F580(v19, v13, v6);
        *(_QWORD *)(v13 + v60) = v20;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v13, 0, 1, v59);
      }
      sub_10001F544(v47, v6);
    }
  }
  if (qword_10063D3C8 != -1)
    goto LABEL_34;
LABEL_29:
  v81 = type metadata accessor for Logger(0);
  v82 = sub_100012DC4(v81, (uint64_t)qword_100645EC0);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.fault.getter(v83);
  v85 = os_log_type_enabled(v83, v84);
  v86 = *(_QWORD *)(v5 - 264);
  if (v85)
  {
    v87 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v87 = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Unexpected: parent/childIndex not found for item to be moved", v87, 2u);
    swift_slowDealloc(v87, -1, -1);
  }
  swift_release();

  sub_10001F544(v86, v6);
  sub_1000073A0(v4, v8);
  sub_10001F544(*(_QWORD *)(v5 - 272), v6);
  v70 = sub_10002A750(*(uint64_t **)(v5 - 208));
  v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56);
  v72 = v13;
  return v71(v72, 1, 1, v70);
}

unint64_t sub_10010A54C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];

  v5 = v4;
  v52 = a2;
  v53 = a1;
  v55 = a4;
  v7 = sub_10002A750((uint64_t *)&unk_100640E00);
  __chkstk_darwin(v7);
  v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  v10 = *(_QWORD *)(v54 - 8);
  v11 = __chkstk_darwin(v54);
  v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v51 = (uint64_t)v50 - v14;
  v15 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v15);
  v17 = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for IndexPath(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a3, (uint64_t)v17, &qword_100646950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v22 = &qword_100646950;
    v23 = (uint64_t)v17;
LABEL_3:
    sub_1000073A0(v23, v22);
LABEL_18:
    v44 = 2;
    v43 = v55;
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  v50[1] = v5;
  v24 = sub_10006B64C();
  v26 = v25;
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v26);
  v28 = *(_QWORD *)(v24 + 16);
  v29 = swift_bridgeObjectRelease(v24);
  v30 = IndexPath.section.getter(v29);
  if (v30 < 0 || v30 >= v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    goto LABEL_18;
  }
  v31 = sub_10006B64C();
  v33 = v32;
  swift_bridgeObjectRelease(v34);
  v35 = swift_bridgeObjectRelease(v33);
  v36 = IndexPath.section.getter(v35);
  if ((v36 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v36 >= *(_QWORD *)(v31 + 16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v37 = v31 + 16 * v36;
  v5 = *(_QWORD *)(v37 + 32);
  v33 = *(_QWORD *)(v37 + 40);
  swift_retain(v5);
  swift_bridgeObjectRetain(v33);
  result = swift_bridgeObjectRelease(v31);
  if (!((unint64_t)v33 >> 62))
  {
    v39 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_10;
  }
LABEL_25:
  if (v33 < 0)
    v49 = v33;
  else
    v49 = v33 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v33);
  v39 = _CocoaArrayWrapper.endIndex.getter(v49);
  result = swift_bridgeObjectRelease(v33);
  if (v39 < 0)
  {
    __break(1u);
LABEL_30:
    v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v33);
    goto LABEL_16;
  }
LABEL_10:
  v40 = IndexPath.row.getter(result);
  if (v40 < 0 || v40 >= v39)
  {
    v46 = v52 & 1;
    v47 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 144);
    swift_beginAccess(v47, v56, 0, 0);
    sub_10002B1E8(v47, (uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    sub_10010DBD8(v53, v46, (uint64_t)v13, (uint64_t)v9);
    swift_bridgeObjectRelease(v33);
    swift_release(v5);
    sub_10001F544((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v54) != 1)
    {
      v48 = v51;
      sub_10001F580((uint64_t)v9, v51, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      v43 = v55;
      sub_10001F580(v48, v55, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      v44 = 1;
      goto LABEL_19;
    }
    v22 = (uint64_t *)&unk_100640E00;
    v23 = (uint64_t)v9;
    goto LABEL_3;
  }
  result = IndexPath.row.getter(v40);
  if ((v33 & 0xC000000000000001) != 0)
    goto LABEL_30;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v41 = *(_QWORD *)(v33 + 8 * result + 32);
    swift_retain(v41);
LABEL_16:
    swift_release(v5);
    swift_bridgeObjectRelease(v33);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v42 = v41 + *(_QWORD *)(*(_QWORD *)v41 + 144);
    swift_beginAccess(v42, v56, 0, 0);
    v43 = v55;
    sub_10002B1E8(v42, v55, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    swift_release(v41);
    v44 = 0;
LABEL_19:
    v45 = sub_10002A750(&qword_100646A78);
    return swift_storeEnumTagMultiPayload(v43, v45, v44);
  }
  __break(1u);
  return result;
}

unint64_t sub_10010A9C0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];

  v5 = v4;
  v53 = a2;
  v54 = a1;
  v56 = a4;
  v7 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v7);
  v9 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v10 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v12 = (char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v52 = (uint64_t)v51 - v14;
  v15 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v15);
  v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for IndexPath(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a3, (uint64_t)v17, &qword_100646950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v22 = &qword_100646950;
    v23 = (uint64_t)v17;
LABEL_3:
    sub_1000073A0(v23, v22);
LABEL_18:
    v45 = 2;
    v44 = v56;
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  v51[1] = v5;
  v24 = sub_10006B3DC();
  v26 = v25;
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v26);
  v28 = *(_QWORD *)(v24 + 16);
  swift_bridgeObjectRelease(v24);
  v30 = IndexPath.section.getter(v29);
  if (v30 < 0 || v30 >= v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    goto LABEL_18;
  }
  v31 = sub_10006B3DC();
  v33 = v32;
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v33);
  v36 = IndexPath.section.getter(v35);
  if ((v36 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v36 >= *(_QWORD *)(v31 + 16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v37 = v31 + 16 * v36;
  v5 = *(_QWORD *)(v37 + 32);
  v33 = *(_QWORD *)(v37 + 40);
  swift_retain();
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v31);
  if (!((unint64_t)v33 >> 62))
  {
    v39 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_10;
  }
LABEL_25:
  if (v33 < 0)
    v50 = v33;
  else
    v50 = v33 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v33);
  v39 = _CocoaArrayWrapper.endIndex.getter(v50);
  swift_bridgeObjectRelease(v33);
  if (v39 < 0)
  {
    __break(1u);
LABEL_30:
    v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v33);
    goto LABEL_16;
  }
LABEL_10:
  v40 = IndexPath.row.getter(result);
  if (v40 < 0 || v40 >= v39)
  {
    v47 = v53 & 1;
    v48 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 144);
    swift_beginAccess(v48, v57, 0, 0);
    sub_10002B1E8(v48, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    sub_10010DFD0(v54, v47, (uint64_t)v12, (uint64_t)v9);
    swift_bridgeObjectRelease(v33);
    swift_release();
    sub_10001F544((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v55) != 1)
    {
      v49 = v52;
      sub_10001F580((uint64_t)v9, v52, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v44 = v56;
      sub_10001F580(v49, v56, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
      v45 = 1;
      goto LABEL_19;
    }
    v22 = (uint64_t *)&unk_100640EB0;
    v23 = (uint64_t)v9;
    goto LABEL_3;
  }
  result = IndexPath.row.getter(v40);
  if ((v33 & 0xC000000000000001) != 0)
    goto LABEL_30;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v41 = *(_QWORD *)(v33 + 8 * result + 32);
    swift_retain();
LABEL_16:
    swift_release();
    v42 = swift_bridgeObjectRelease(v33);
    (*(void (**)(char *, uint64_t, __n128))(v19 + 8))(v21, v18, v42);
    v43 = v41 + *(_QWORD *)(*(_QWORD *)v41 + 144);
    swift_beginAccess(v43, v57, 0, 0);
    v44 = v56;
    sub_10002B1E8(v43, v56, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
    swift_release();
    v45 = 0;
LABEL_19:
    v46 = sub_10002A750((uint64_t *)&unk_1006469D0);
    return swift_storeEnumTagMultiPayload(v44, v46, v45);
  }
  __break(1u);
  return result;
}

unint64_t sub_10010AE34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];

  v3 = v2;
  v52 = a2;
  v5 = sub_10002A750((uint64_t *)&unk_100640E00);
  __chkstk_darwin(v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v51 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)&qword_100646950;
  v12 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for IndexPath(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a1, (uint64_t)v14, &qword_100646950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    v19 = sub_10006B64C();
    v21 = v20;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);
    v23 = *(_QWORD *)(v19 + 16);
    v24 = swift_bridgeObjectRelease(v19);
    v25 = IndexPath.section.getter(v24);
    if (v25 < 0 || v25 >= v23)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      goto LABEL_20;
    }
    v26 = sub_10006B64C();
    v28 = v27;
    swift_bridgeObjectRelease(v29);
    v30 = swift_bridgeObjectRelease(v28);
    v31 = IndexPath.section.getter(v30);
    if ((v31 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v31 < *(_QWORD *)(v26 + 16))
    {
      v50 = v3;
      v32 = v26 + 16 * v31;
      v3 = *(_QWORD *)(v32 + 32);
      v11 = *(_QWORD *)(v32 + 40);
      swift_retain(v3);
      swift_bridgeObjectRetain(v11);
      result = swift_bridgeObjectRelease(v26);
      if (!((unint64_t)v11 >> 62))
      {
        v34 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_9;
      }
LABEL_24:
      if (v11 < 0)
        v47 = v11;
      else
        v47 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v34 = _CocoaArrayWrapper.endIndex.getter(v47);
      result = swift_bridgeObjectRelease(v11);
      if (v34 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
LABEL_9:
      v35 = IndexPath.row.getter(result);
      if (v35 < 0 || v35 >= v34)
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        swift_bridgeObjectRelease(v11);
        swift_release(v3);
        goto LABEL_20;
      }
      result = IndexPath.row.getter(v35);
      v49 = v3;
      if ((v11 & 0xC000000000000001) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (result < *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v36 = *(_QWORD *)(v11 + 8 * result + 32);
          swift_retain(v36);
LABEL_15:
          v37 = v36 + *(_QWORD *)(*(_QWORD *)v36 + 144);
          swift_beginAccess(v37, v53, 0, 0);
          v38 = v51;
          sub_10002B1E8(v37, v51, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
          swift_release(v36);
          sub_10002B1E8(v38, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
          v39 = sub_1002BC048((uint64_t)v7);
          v41 = v40;
          swift_bridgeObjectRelease(v11);
          swift_release(v49);
          sub_1000073A0((uint64_t)v7, (uint64_t *)&unk_100640E00);
          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
          if ((v41 & 1) == 0)
          {
            v42 = sub_10002A750(&qword_100640FF8);
            v43 = *(int *)(v42 + 48);
            v44 = v38;
            v45 = v52;
            sub_10001F580(v44, v52, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
            *(_QWORD *)(v45 + v43) = v39;
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v45, 0, 1, v42);
          }
          sub_10001F544(v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
          goto LABEL_20;
        }
        __break(1u);
        return result;
      }
LABEL_29:
      v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v11);
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_24;
  }
  sub_1000073A0((uint64_t)v14, &qword_100646950);
LABEL_20:
  v46 = sub_10002A750(&qword_100640FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v52, 1, 1, v46);
}

unint64_t sub_10010B274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];

  v3 = v2;
  v50 = a2;
  v5 = sub_10002A750((uint64_t *)&unk_100640EB0);
  __chkstk_darwin(v5);
  v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TTRRemindersListViewModel.Item(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v49 = (uint64_t)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)&qword_100646950;
  v12 = sub_10002A750(&qword_100646950);
  __chkstk_darwin(v12);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for IndexPath(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000735C(a1, (uint64_t)v14, &qword_100646950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    v19 = sub_10006B3DC();
    v21 = v20;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);
    v23 = *(_QWORD *)(v19 + 16);
    swift_bridgeObjectRelease(v19);
    v25 = IndexPath.section.getter(v24);
    if (v25 < 0 || v25 >= v23)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      goto LABEL_20;
    }
    v26 = sub_10006B3DC();
    v28 = v27;
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v28);
    v31 = IndexPath.section.getter(v30);
    if ((v31 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v31 < *(_QWORD *)(v26 + 16))
    {
      v48[2] = v3;
      v32 = v26 + 16 * v31;
      v3 = *(_QWORD *)(v32 + 32);
      v11 = *(_QWORD *)(v32 + 40);
      swift_retain();
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v26);
      if (!((unint64_t)v11 >> 62))
      {
        v34 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_9;
      }
LABEL_24:
      if (v11 < 0)
        v47 = v11;
      else
        v47 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v34 = _CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease(v11);
      if (v34 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
LABEL_9:
      v35 = IndexPath.row.getter(result);
      if (v35 < 0 || v35 >= v34)
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        swift_bridgeObjectRelease(v11);
        swift_release();
        goto LABEL_20;
      }
      result = IndexPath.row.getter(v35);
      v48[1] = v3;
      if ((v11 & 0xC000000000000001) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (result < *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v36 = *(_QWORD *)(v11 + 8 * result + 32);
          swift_retain();
LABEL_15:
          v37 = v36 + *(_QWORD *)(*(_QWORD *)v36 + 144);
          swift_beginAccess(v37, v51, 0, 0);
          v38 = v49;
          sub_10002B1E8(v37, v49, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
          swift_release();
          sub_10002B1E8(v38, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
          v39 = sub_1002BC37C((uint64_t)v7);
          v41 = v40;
          swift_bridgeObjectRelease(v11);
          swift_release();
          sub_1000073A0((uint64_t)v7, (uint64_t *)&unk_100640EB0);
          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
          if ((v41 & 1) == 0)
          {
            v42 = sub_10002A750((uint64_t *)&unk_1006469A8);
            v43 = *(int *)(v42 + 48);
            v44 = v38;
            v45 = v50;
            sub_10001F580(v44, v50, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
            *(_QWORD *)(v45 + v43) = v39;
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v45, 0, 1, v42);
          }
          sub_10001F544(v38, (uint64_t (*)(_QWORD))&type metadata accessor for TTRRemindersListViewModel.Item);
          goto LABEL_20;
        }
        __break(1u);
        return result;
      }
LABEL_29:
      v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v11);
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_24;
  }
  sub_1000073A0((uint64_t)v14, &qword_100646950);
LABEL_20:
  v46 = sub_10002A750((uint64_t *)&unk_1006469A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v50, 1, 1, v46);
}

uint64_t sub_10010B6B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t Strong;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_BYTE *, _QWORD);
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  BOOL v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t (*v125)(char *, uint64_t, uint64_t);
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(char *, uint64_t, __n128);
  uint64_t v167;
  char *v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE v177[32];
  _BYTE v178[32];

  LODWORD(v166) = a3;
  v8 = sub_10002A750((uint64_t *)&unk_100640E00);
  v9 = __chkstk_darwin(v8);
  v164 = (uint64_t)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v155 - v12;
  __chkstk_darwin(v11);
  v161 = (uint64_t)&v155 - v14;
  v15 = type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier(0);
  v16 = __chkstk_darwin(v15);
  v168 = (char *)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v169 = (void (*)(char *, uint64_t))((char *)&v155 - v18);
  v167 = type metadata accessor for TTRAccountsListsViewModel.Item(0);
  v165 = *(_QWORD *)(v167 - 8);
  v19 = __chkstk_darwin(v167);
  v162 = (uint64_t)&v155 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v163 = (uint64_t)&v155 - v22;
  v23 = __chkstk_darwin(v21);
  v160 = (uint64_t)&v155 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v155 - v26;
  __chkstk_darwin(v25);
  v170 = (uint64_t)&v155 - v28;
  v176 = sub_10002A750(&qword_100646A68);
  __chkstk_darwin(v176);
  v172 = (uint64_t)&v155 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for IndexPath(0);
  v30 = *(_QWORD *)(v174 - 8);
  v31 = __chkstk_darwin(v174);
  v33 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v155 - v34;
  v175 = v4;
  v36 = sub_10006B64C();
  v38 = v37;
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v38);
  v40 = *(_QWORD *)(v36 + 16);
  v41 = swift_bridgeObjectRelease(v36);
  v42 = IndexPath.section.getter(v41);
  if (v42 < 0)
    goto LABEL_12;
  if (v42 >= v40)
    goto LABEL_12;
  v43 = sub_10006B64C();
  v171 = v35;
  v45 = v44;
  v173 = a4;
  v47 = v46;
  v48 = sub_1000F8FE4(a1, v43);
  v49 = v47;
  a4 = v173;
  swift_bridgeObjectRelease(v49);
  v50 = v45;
  v51 = v171;
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v43);
  if (!v48)
  {
LABEL_12:
    v67 = a4;
    v68 = v176;
    return swift_storeEnumTagMultiPayload(v67, v68, 4);
  }
  Strong = swift_weakLoadStrong(v48 + 56);
  if (!Strong)
  {
    if (qword_10063D3C8 == -1)
    {
LABEL_15:
      v70 = type metadata accessor for Logger(0);
      v71 = sub_100012DC4(v70, (uint64_t)qword_100645EC0);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.fault.getter(v72);
      v74 = os_log_type_enabled(v72, v73);
      v75 = v176;
      if (v74)
      {
        v76 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v76 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "section node cannot be moved", v76, 2u);
        swift_slowDealloc(v76, -1, -1);
        swift_release(v48);

      }
      else
      {

        swift_release(v48);
      }
      v67 = a4;
      v68 = v75;
      return swift_storeEnumTagMultiPayload(v67, v68, 4);
    }
LABEL_54:
    swift_once(&qword_10063D3C8, sub_1000E35C8);
    goto LABEL_15;
  }
  v155 = v48 + 56;
  v158 = v48;
  a4 = *(_QWORD *)(Strong + 16);
  swift_release(Strong);
  v48 = sub_10006B64C();
  v54 = v53;
  swift_bridgeObjectRelease(v55);
  v56 = swift_bridgeObjectRelease(v54);
  v57 = IndexPath.section.getter(v56);
  if ((v57 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  v156 = a4;
  v58 = v174;
  if (v57 >= *(_QWORD *)(v48 + 16))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v59 = v48 + 16 * v57;
  v60 = *(_QWORD *)(v59 + 40);
  v157 = *(_QWORD *)(v59 + 32);
  swift_retain(v157);
  v159 = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v48);
  v48 = *(_QWORD *)(v30 + 16);
  v61 = ((uint64_t (*)(char *, uint64_t, uint64_t))v48)(v51, a2, v58);
  v62 = IndexPath.section.getter(v61);
  v63 = IndexPath.section.getter(v62);
  if (v62 != v63)
  {
    a4 = 0;
    goto LABEL_18;
  }
  v64 = IndexPath.row.getter(v63);
  v63 = IndexPath.row.getter(v64);
  a4 = v64 < v63;
  if (v64 >= v63)
  {
LABEL_18:
    a2 = v159;
    goto LABEL_19;
  }
  a2 = v159;
  if ((v166 & 1) != 0)
  {
    v65 = (uint64_t (*)(_BYTE *, _QWORD))IndexPath.row.modify(v177);
    if (__OFADD__(*v66, 1))
    {
      __break(1u);
LABEL_56:
      swift_once(&qword_10063D3C8, sub_1000E35C8);
      goto LABEL_28;
    }
    ++*v66;
    v63 = v65(v177, 0);
    a4 = 1;
  }
LABEL_19:
  if ((unint64_t)a2 >> 62)
  {
LABEL_49:
    if (a2 < 0)
      v120 = a2;
    else
      v120 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v77 = _CocoaArrayWrapper.endIndex.getter(v120);
    v121 = swift_bridgeObjectRelease(a2);
    v78 = IndexPath.row.getter(v121);
    if ((v77 & 0x8000000000000000) == 0)
    {
      v51 = v171;
      a2 = v159;
      if (v78 < 0)
        goto LABEL_58;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_54;
  }
  v77 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v78 = IndexPath.row.getter(v63);
  if (v78 < 0)
  {
LABEL_58:
    if (v77 != v78)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v51, v174);
      swift_release(v158);
      swift_bridgeObjectRelease(a2);
      swift_release(v157);
      v95 = v172;
      v140 = v172;
      v141 = v176;
      v142 = 4;
LABEL_68:
      swift_storeEnumTagMultiPayload(v140, v141, v142);
      goto LABEL_69;
    }
    v122 = v174;
    ((void (*)(char *, char *, uint64_t))v48)(v33, v51, v174);
    sub_10010E3B4(v156, (uint64_t)v13);
    v123 = *(void (**)(char *, uint64_t))(v30 + 8);
    v123(v33, v122);
    v124 = v165;
    v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v165 + 48);
    v126 = v125(v13, 1, v167);
    v110 = v173;
    if (v126 == 1)
    {
      sub_1000073A0((uint64_t)v13, (uint64_t *)&unk_100640E00);
      v127 = sub_10002A750(&qword_100646A70);
      v128 = *(unsigned __int8 *)(v124 + 80);
      v129 = (v128 + 32) & ~v128;
      v130 = swift_allocObject(v127, v129 + *(_QWORD *)(v124 + 72), v128 | 7);
      *(_OWORD *)(v130 + 16) = xmmword_100520250;
      v169 = v123;
      v131 = v130 + v129;
      v132 = v158;
      v133 = v158 + *(_QWORD *)(*(_QWORD *)v158 + 144);
      swift_beginAccess(v133, v177, 0, 0);
      sub_10002B1E8(v133, v131, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      v134 = v157;
      v135 = v157 + *(_QWORD *)(*(_QWORD *)v157 + 144);
      swift_beginAccess(v135, v178, 0, 0);
      v136 = v170;
      sub_10002B1E8(v135, v170, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      v137 = v164;
      sub_10010DBD8(v130, 0, v136, v164);
      v138 = v137;
      swift_release(v132);
      swift_bridgeObjectRelease(v159);
      swift_release(v134);
      swift_bridgeObjectRelease(v130);
      sub_10001F544(v136, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      v169(v171, v122);
      v139 = v125((char *)v137, 1, v167);
      v95 = v172;
      if (v139 == 1)
      {
        sub_1000073A0(v138, (uint64_t *)&unk_100640E00);
        swift_storeEnumTagMultiPayload(v95, v176, 4);
      }
      else
      {
        v153 = v138;
        v154 = v162;
        sub_10001F580(v153, v162, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        sub_10001F580(v154, v95, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
        swift_storeEnumTagMultiPayload(v95, v176, 2);
      }
      return sub_10000F614(v95, v110, &qword_100646A68);
    }
    v143 = v163;
    v144 = sub_10001F580((uint64_t)v13, v163, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v145 = (uint64_t)v169;
    TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v144);
    v146 = v158;
    v147 = v158 + *(_QWORD *)(*(_QWORD *)v158 + 144);
    swift_beginAccess(v147, v177, 0, 0);
    v148 = v147;
    v149 = v170;
    v150 = sub_10002B1E8(v148, v170, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v151 = (uint64_t)v168;
    TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v150);
    sub_10001F544(v149, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v152 = static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:)(v145, v151);
    swift_bridgeObjectRelease(a2);
    swift_release(v157);
    swift_release(v146);
    sub_10001F544(v151, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    sub_10001F544(v145, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    v123(v51, v122);
    v95 = v172;
    if ((v152 & 1) == 0)
    {
      sub_10001F580(v143, v172, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      v140 = v95;
      v141 = v176;
      v142 = 0;
      goto LABEL_68;
    }
    sub_10001F544(v143, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
LABEL_65:
    v140 = v95;
    v141 = v176;
    v142 = 3;
    goto LABEL_68;
  }
LABEL_21:
  if (v78 >= v77)
    goto LABEL_58;
  v79 = sub_10006B64C();
  v81 = v80;
  v82 = v51;
  v84 = v83;
  v85 = v174;
  ((void (*)(char *, char *, uint64_t))v48)(v33, v82, v174);
  v86 = sub_1000F8FE4(v33, v79);
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v79);
  v30 = *(_QWORD *)(v30 + 8);
  ((void (*)(char *, uint64_t))v30)(v33, v85);
  if (v86)
  {
    LODWORD(v164) = a4;
    v166 = (void (*)(char *, uint64_t, __n128))v30;
    v87 = v86 + *(_QWORD *)(*(_QWORD *)v86 + 144);
    swift_beginAccess(v87, v177, 0, 0);
    v88 = v170;
    v89 = sub_10002B1E8(v87, v170, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v90 = (uint64_t)v169;
    TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v89);
    sub_10001F544(v88, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v91 = v158;
    v92 = v158 + *(_QWORD *)(*(_QWORD *)v158 + 144);
    swift_beginAccess(v92, v178, 0, 0);
    v93 = sub_10002B1E8(v92, (uint64_t)v27, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    v94 = (uint64_t)v168;
    TTRAccountsListsViewModel.Item.treeItemIdentifier.getter(v93);
    sub_10001F544((uint64_t)v27, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
    LOBYTE(v92) = static TTRAccountsListsViewModel.ItemIdentifier.__derived_enum_equals(_:_:)(v90, v94);
    sub_10001F544(v94, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    sub_10001F544(v90, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.ItemIdentifier);
    if ((v92 & 1) == 0)
    {
      v95 = v172;
      sub_10002B1E8(v87, v172, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
      v104 = v176;
      swift_storeEnumTagMultiPayload(v95, v176, 1);
      if ((v164 & 1) != 0)
      {
        v105 = swift_weakLoadStrong(v155);
        v106 = v159;
        if (v105)
        {
          v107 = *(_QWORD *)(v105 + 16);
          v108 = swift_release(v105);
          v109 = v158;
          v110 = v173;
          v111 = v174;
          if ((*(_BYTE *)(v158 + 32) & 1) != 0)
          {
            v166(v171, v174, v108);
            swift_bridgeObjectRelease(v106);
            swift_release(v157);
            swift_release(v86);
            v112 = v109;
          }
          else
          {
            if ((*(_BYTE *)(v86 + 32) & 1) != 0)
            {
              v166(v171, v174, v108);
              swift_release(v158);
              v114 = v106;
            }
            else
            {
              v115 = v158;
              if (*(_QWORD *)(v86 + 24) < *(_QWORD *)(v158 + 24))
              {
                ((void (*)(char *, char *, uint64_t, __n128))v48)(v33, v171, v174, v108);
                v116 = v161;
                sub_10010E3B4(v107, v161);
                swift_release(v115);
                swift_bridgeObjectRelease(v159);
                swift_release(v157);
                v117 = swift_release(v86);
                v118 = (void (*)(char *, uint64_t))v166;
                v166(v33, v111, v117);
                v118(v171, v111);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 + 48))(v116, 1, v167) == 1)
                {
                  sub_1000073A0(v116, (uint64_t *)&unk_100640E00);
                }
                else
                {
                  sub_1000073A0(v95, &qword_100646A68);
                  v119 = v160;
                  sub_10001F580(v116, v160, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
                  sub_10001F580(v119, v95, (uint64_t (*)(_QWORD))&type metadata accessor for TTRAccountsListsViewModel.Item);
                  swift_storeEnumTagMultiPayload(v95, v104, 0);
                }
                return sub_10000F614(v95, v110, &qword_100646A68);
              }
              v166(v171, v174, v108);
              swift_release(v115);
              v114 = v159;
            }
            swift_bridgeObjectRelease(v114);
            swift_release(v157);
            v112 = v86;
          }
          swift_release(v112);
          return sub_10000F614(v95, v110, &qword_100646A68);
        }
        ((void (*)(char *, uint64_t))v166)(v171, v174);
        swift_release(v158);
        v113 = v106;
      }
      else
      {
        ((void (*)(char *, uint64_t))v166)(v171, v174);
        swift_release(v158);
        v113 = v159;
      }
      swift_bridgeObjectRelease(v113);
      swift_release(v157);
      swift_release(v86);
LABEL_69:
      v110 = v173;
      return sub_10000F614(v95, v110, &qword_100646A68);
    }
    ((void (*)(char *, uint64_t))v166)(v171, v174);
    swift_release(v91);
    swift_bridgeObjectRelease(v159);
    swift_release(v157);
    swift_release(v86);
    v95 = v172;
    goto LABEL_65;
  }
  v51 = (char *)v173;
  if (qword_10063D3C8 != -1)
    goto LABEL_56;
LABEL_28:
  v96 = type metadata accessor for Logger(0);
  v97 = sub_100012DC4(v96, (uint64_t)qword_100645EC0);
  v98 = Logger.logObject.getter(v97);
  v99 = static os_log_type_t.fault.getter(v98);
  v100 = os_log_type_enabled(v98, v99);
  v101 = v174;
  v102 = v158;
  if (v100)
  {
    v103 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v103 = 0;
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Failed to lookup node given a valid destinationIndexPath", v103, 2u);
    swift_slowDealloc(v103, -1, -1);
  }
  swift_release(v102);
  swift_bridgeObjectRelease(v159);
  swift_release(v157);

  ((void (*)(char *, uint64_t))v30)(v171, v101);
  return swift_storeEnumTagMultiPayload(v51, v176, 4);
}

