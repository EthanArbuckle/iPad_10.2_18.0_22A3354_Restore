uint64_t sub_100005DFC()
{
  if (qword_1002992D0 != -1)
    dispatch_once(&qword_1002992D0, &stru_100261AF0);
  return byte_1002992D8;
}

void sub_100005E3C(id a1)
{
  int v1;

  v1 = MGIsQuestionValid(CFSTR("+N9mZUAHooNvMiQnjeTJ8g"));
  if (v1)
    LOBYTE(v1) = MGGetBoolAnswer(CFSTR("+N9mZUAHooNvMiQnjeTJ8g"));
  byte_1002992D8 = v1;
}

uint64_t sub_100005EC8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  v9 = sub_100006DF4(&qword_10028A6C0);
  v10 = swift_allocObject(v9, 64, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001E4D60;
  v11 = objc_msgSend(v1, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v11);

  v13 = Locale.ltIdentifier.getter(v12);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v8, v2);
  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v15;
  v17 = objc_msgSend(v1, "targetLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v19 = Locale.ltIdentifier.getter(v18);
  v21 = v20;
  v16(v6, v2);
  *(_QWORD *)(v10 + 48) = v19;
  *(_QWORD *)(v10 + 56) = v21;
  v28 = v10;
  swift_bridgeObjectRetain(v10);
  sub_100007008(&v28);
  swift_bridgeObjectRelease(v10);
  v22 = v28;
  v23 = sub_100006DF4(&qword_10028A6C8);
  v24 = sub_100007070();
  v25 = BidirectionalCollection<>.joined(separator:)(45, 0xE100000000000000, v23, v24);
  swift_release(v22);
  return v25;
}

uint64_t variable initialization expression of PlaceholderTextView.placeholder()
{
  return 0;
}

void *variable initialization expression of HighlightTextView.highlightRanges()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of PlaceholderTextView.placeholderColor()
{
  return 0;
}

uint64_t variable initialization expression of RoundTranslationActionButtonStyle.context()
{
  return 0;
}

double variable initialization expression of RoundTranslationActionButtonStyle._scale()
{
  return 1.0;
}

uint64_t variable initialization expression of RoundTranslationActionButtonStyle.visible()
{
  return 1;
}

id variable initialization expression of PlaceholderTextView.placeholderTextView()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
  objc_msgSend(v0, "setUserInteractionEnabled:", 0);
  objc_msgSend(v0, "setBackgroundColor:", 0);
  objc_msgSend(v0, "setEditable:", 0);
  objc_msgSend(v0, "setSelectable:", 0);
  objc_msgSend(v0, "setAutoresizingMask:", 18);
  return v0;
}

id sub_10000615C()
{
  id *v0;

  return *v0;
}

uint64_t sub_100006164@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10000616C(uint64_t a1, uint64_t a2)
{
  return sub_100006E80(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

NSNumber sub_10000618C()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_100006194(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Float._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_1000061E4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_100006238(float *a1@<X8>)
{
  *a1 = static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::Int sub_100006260()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000062A4()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000062CC(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_10000630C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100006320(uint64_t a1, uint64_t a2)
{
  return sub_100006E80(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000632C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000063A0(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10000641C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_10000645C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(_LTTranslationErrorDomain);
}

uint64_t sub_10000646C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000064AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000064EC(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100006550()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100006584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000065D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void type metadata accessor for SBUISystemAperturePresentationBehaviors(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A600, (uint64_t)&unk_100262AE0);
}

void type metadata accessor for SBUISystemApertureContentRole(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A608, (uint64_t)&unk_100262B08);
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A610, (uint64_t)&unk_100262B28);
}

void type metadata accessor for _LTInvocationAppTabName(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A618, (uint64_t)&unk_100262B48);
}

void type metadata accessor for AFSiriDataSharingOptInStatus(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A620, (uint64_t)&unk_100262B68);
}

__n128 initializeWithTake for AppSection(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A628, (uint64_t)&unk_100262BE0);
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A630, (uint64_t)&unk_100262C08);
}

uint64_t initializeBufferWithCopyOfBuffer for TappedAlternatives(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for CopyButton(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000670C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000672C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A638, (uint64_t)&unk_100262C80);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A640, (uint64_t)&unk_100262D08);
}

uint64_t sub_100006780(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000067A0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A648, (uint64_t)&unk_100262D88);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A650, (uint64_t)&unk_100262E08);
}

void type metadata accessor for UIInterfaceOrientationMask(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A658, (uint64_t)&unk_100262E30);
}

_QWORD *sub_100006804@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100006814(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100006820(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_10028A8B0, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E5F68);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006860(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_10028A8B0, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E5F68);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000068A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000068E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000693C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C((unint64_t *)&qword_10028A900, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1001E60BC);
  v3 = sub_100007D5C(&qword_10028A908, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1001E6010);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000069C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C(&qword_10028A920, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1001E5CA8);
  v3 = sub_100007D5C(&qword_10028A928, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1001E5C48);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006A44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
  v3 = sub_100007D5C(&qword_10028A968, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E5768);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_DWORD *sub_100006AC8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_100006AD8@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_100006AE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C(&qword_10028A910, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1001E5E00);
  v3 = sub_100007D5C(&qword_10028A918, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1001E5DA0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Float);
}

uint64_t sub_100006B78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C(&qword_10028A970, (uint64_t (*)(uint64_t))type metadata accessor for Port, (uint64_t)&unk_1001E5464);
  v3 = sub_100007D5C(&qword_10028A978, (uint64_t (*)(uint64_t))type metadata accessor for Port, (uint64_t)&unk_1001E540C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006BFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C(&qword_10028A940, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&unk_1001E5A34);
  v3 = sub_100007D5C(&qword_10028A948, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&unk_1001E59D4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006C80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C(&qword_10028A950, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTagScheme, (uint64_t)&unk_1001E58DC);
  v3 = sub_100007D5C(&qword_10028A958, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTagScheme, (uint64_t)&unk_1001E587C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006D04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100006D48@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100006D70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D5C(&qword_10028A930, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1001E6200);
  v3 = sub_100007D5C(&qword_10028A938, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1001E5B34);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006DF4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100006E34()
{
  float *v0;

  return Float.hashValue.getter(*v0);
}

void sub_100006E3C()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_100006E6C(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFF) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

uint64_t sub_100006E80(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100006EBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100006EFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

BOOL sub_100006F6C(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100006F80(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

void sub_100007008(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001DB590(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_100007100(v4);
  *a1 = v2;
}

unint64_t sub_100007070()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028A6D0;
  if (!qword_10028A6D0)
  {
    v1 = sub_1000070BC(&qword_10028A6C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10028A6D0);
  }
  return result;
}

uint64_t sub_1000070BC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_100007100(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1000077E8(0, v3, 1, a1);
      return;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v111 = v4;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_1000078B4((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_1001DA1D4((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001D9E38(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_1001D9E38((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_1000078B4((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  swift_bridgeObjectRelease(v110);
}

uint64_t sub_1000077E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000078B4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_1001D9F30((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A738, (uint64_t)&unk_100262E58);
}

void type metadata accessor for _LTDisambiguationType(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A740, (uint64_t)&unk_100262E80);
}

void type metadata accessor for _LTTranslationError(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A748, (uint64_t)&unk_100262EA0);
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A750, (uint64_t)&unk_100262EC8);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A758, (uint64_t)&unk_100262EF0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A760, (uint64_t)&unk_100262F18);
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A768, (uint64_t)&unk_100262F40);
}

void type metadata accessor for CGImagePropertyOrientation(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A770, (uint64_t)&unk_100262F68);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A778, (uint64_t)&unk_100262F88);
}

void type metadata accessor for NSLinguisticTag(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A780, (uint64_t)&unk_100262FB8);
}

void type metadata accessor for NSLinguisticTagScheme(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A788, (uint64_t)&unk_100262FE0);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A790, (uint64_t)&unk_100263008);
}

void type metadata accessor for UIReturnKeyType(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A798, (uint64_t)&unk_100263030);
}

void type metadata accessor for _LTSELFLoggingPlaybackSpeed(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7A0, (uint64_t)&unk_100263050);
}

void type metadata accessor for _LTSELFLoggingAudioChannel(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7A8, (uint64_t)&unk_100263070);
}

void type metadata accessor for _LTSELFLoggingSourceOrTargetLanguage(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7B0, (uint64_t)&unk_100263090);
}

void type metadata accessor for _LTAppConversationTabView(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7B8, (uint64_t)&unk_1002630B0);
}

void type metadata accessor for _LTInvocationInputMode(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7C0, (uint64_t)&unk_1002630D0);
}

void type metadata accessor for _LTInvocationType(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7C8, (uint64_t)&unk_1002630F0);
}

void type metadata accessor for Port(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7D0, (uint64_t)&unk_100263110);
}

void type metadata accessor for AVOutputDeviceSubType(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7D8, (uint64_t)&unk_100263138);
}

void type metadata accessor for AVOutputDeviceType(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A7E0, (uint64_t)&unk_100263158);
}

uint64_t sub_100007D04()
{
  return sub_100007D5C(&qword_10028A7E8, (uint64_t (*)(uint64_t))type metadata accessor for AVOutputDeviceType, (uint64_t)&unk_1001E5314);
}

uint64_t sub_100007D30()
{
  return sub_100007D5C(&qword_10028A7F0, (uint64_t (*)(uint64_t))type metadata accessor for Port, (uint64_t)&unk_1001E53D4);
}

uint64_t sub_100007D5C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007D9C()
{
  return sub_100007D5C(&qword_10028A7F8, (uint64_t (*)(uint64_t))type metadata accessor for Port, (uint64_t)&unk_1001E53AC);
}

uint64_t sub_100007DC8()
{
  return sub_100007D5C(&qword_10028A800, (uint64_t (*)(uint64_t))type metadata accessor for Port, (uint64_t)&unk_1001E543C);
}

uint64_t sub_100007DF4()
{
  return sub_100007D5C(&qword_10028A808, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E572C);
}

uint64_t sub_100007E20()
{
  return sub_100007D5C(&qword_10028A810, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E5700);
}

uint64_t sub_100007E4C()
{
  return sub_100007D5C(&qword_10028A818, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTagScheme, (uint64_t)&unk_1001E5840);
}

uint64_t sub_100007E78()
{
  return sub_100007D5C(&qword_10028A820, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTagScheme, (uint64_t)&unk_1001E5814);
}

uint64_t sub_100007EA4()
{
  return sub_100007D5C(&qword_10028A828, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTagScheme, (uint64_t)&unk_1001E58B0);
}

uint64_t sub_100007ED0()
{
  return sub_100007D5C(&qword_10028A830, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&unk_1001E5998);
}

uint64_t sub_100007EFC()
{
  return sub_100007D5C(&qword_10028A838, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&unk_1001E596C);
}

uint64_t sub_100007F28()
{
  return sub_100007D5C(&qword_10028A840, (uint64_t (*)(uint64_t))type metadata accessor for NSLinguisticTag, (uint64_t)&unk_1001E5A08);
}

uint64_t sub_100007F54()
{
  return sub_100007D5C(&qword_10028A848, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1001E5AF8);
}

uint64_t sub_100007F80()
{
  return sub_100007D5C(&qword_10028A850, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1001E5ACC);
}

uint64_t sub_100007FAC()
{
  return sub_100007D5C(&qword_10028A858, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1001E5C0C);
}

uint64_t sub_100007FD8()
{
  return sub_100007D5C(&qword_10028A860, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1001E5BE0);
}

uint64_t sub_100008004()
{
  return sub_100007D5C(&qword_10028A868, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1001E5C7C);
}

uint64_t sub_100008030()
{
  return sub_100007D5C(&qword_10028A870, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1001E5D64);
}

uint64_t sub_10000805C()
{
  return sub_100007D5C(&qword_10028A878, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1001E5D38);
}

uint64_t sub_100008088()
{
  return sub_100007D5C(&qword_10028A880, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1001E5DD4);
}

uint64_t sub_1000080B4()
{
  return sub_100007D5C(&qword_10028A888, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E5E90);
}

uint64_t sub_1000080E0()
{
  return sub_100007D5C(&qword_10028A890, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E5EB8);
}

uint64_t sub_10000810C()
{
  return sub_100007D5C(&qword_10028A898, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1001E5FD4);
}

uint64_t sub_100008138()
{
  return sub_100007D5C(&qword_10028A8A0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1001E5FA8);
}

uint64_t sub_100008164()
{
  return sub_100007D5C(&qword_10028A8A8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1001E6044);
}

uint64_t sub_100008190()
{
  return sub_100007D5C(&qword_10028A8B0, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E5F68);
}

uint64_t sub_1000081BC()
{
  return sub_100007D5C(&qword_10028A8B8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E5F38);
}

uint64_t sub_1000081E8()
{
  return sub_100007D5C(&qword_10028A8C0, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E5EF8);
}

uint64_t sub_100008214()
{
  return sub_100007D5C(&qword_10028A8C8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1001E61A0);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A980, (uint64_t)&unk_100263178);
}

uint64_t sub_100008254()
{
  return sub_100007D5C(&qword_10028A8D0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1001E6168);
}

unint64_t sub_100008284()
{
  unint64_t result;

  result = qword_10028A8D8;
  if (!qword_10028A8D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10028A8D8);
  }
  return result;
}

uint64_t sub_1000082C8()
{
  return sub_100007D5C(&qword_10028A8E0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1001E61D8);
}

uint64_t sub_1000082F4()
{
  return sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
}

uint64_t sub_100008320()
{
  return sub_100007D5C(&qword_10028A8F0, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1001E5B68);
}

uint64_t sub_10000834C()
{
  return sub_100007D5C(&qword_10028A8F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E579C);
}

void type metadata accessor for SNAInvalidationReason(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A988, (uint64_t)&unk_100263198);
}

void type metadata accessor for SNAAssertionState(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A990, (uint64_t)&unk_1002631B8);
}

void type metadata accessor for _LTTranslationSourceOrigin(uint64_t a1)
{
  sub_1000083B4(a1, &qword_10028A998, (uint64_t)&unk_1002631D8);
}

void sub_1000083B4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

objc_class *sub_100008420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  Class isa;
  void *v12;
  objc_class *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  NSString v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  objc_class *v24;
  id v25;
  NSString v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  objc_class *v31;
  id v32;
  objc_class *v34;
  UIAction_optional v35;

  sub_100008948();
  v10 = swift_allocObject(&unk_100263380, 32, 7);
  *(_QWORD *)(v10 + 16) = a5;
  *(_QWORD *)(v10 + 24) = a6;
  swift_retain(a6);
  v35.value.super.super.isa = (Class)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000089A8, v10);
  isa = UIButton.init(type:primaryAction:)(UIButtonTypeCustom, v35).super.super.super.super.isa;
  v12 = (void *)objc_opt_self(UIFont);
  v13 = isa;
  v14 = objc_msgSend(v12, "systemFontOfSize:", 17.0);
  v15 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v16 = objc_msgSend(v15, "configurationWithFont:scale:", v14, 3);

  v34 = v13;
  -[objc_class setPreferredSymbolConfiguration:forImageInState:](v13, "setPreferredSymbolConfiguration:forImageInState:", v16, 0);
  v17 = objc_msgSend(v15, "configurationWithScale:", 3);
  swift_bridgeObjectRetain(a2);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v20 = (void *)objc_opt_self(UIImage);
  v21 = objc_msgSend(v20, "systemImageNamed:withConfiguration:", v19, v18);

  if (v21)
  {
    v22 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    v23 = objc_msgSend(v21, "imageWithTintColor:", v22);

  }
  else
  {
    v23 = 0;
  }
  v24 = v34;
  -[objc_class setImage:forState:](v34, "setImage:forState:", v23, 0);
  swift_bridgeObjectRelease(a2);

  if (a4)
  {
    -[objc_class setPreferredSymbolConfiguration:forImageInState:](v34, "setPreferredSymbolConfiguration:forImageInState:", v16, 4);
    v25 = v16;
    swift_bridgeObjectRetain(a4);
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    v27 = objc_msgSend(v20, "systemImageNamed:withConfiguration:", v26, v25);

    if (v27)
    {
      v28 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v29 = objc_msgSend(v27, "imageWithTintColor:", v28);
      swift_bridgeObjectRelease(a4);

      v24 = v34;
    }
    else
    {
      swift_bridgeObjectRelease(a4);
      v29 = 0;
    }
    -[objc_class setImage:forState:](v24, "setImage:forState:", v29, 4);

  }
  -[objc_class setFrame:](v24, "setFrame:", 0.0, 0.0, 44.0, 44.0);
  v30 = (void *)objc_opt_self(UIColor);
  v31 = v24;
  v32 = objc_msgSend(v30, "whiteColor");
  -[objc_class setTintColor:](v31, "setTintColor:", v32);

  swift_release(a6);
  return v31;
}

uint64_t sub_100008828(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id sub_1000088F8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActionButton();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActionButton()
{
  return objc_opt_self(_TtC17SequoiaTranslator12ActionButton);
}

unint64_t sub_100008948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002948E0;
  if (!qword_1002948E0)
  {
    v1 = objc_opt_self(UIAction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002948E0);
  }
  return result;
}

uint64_t sub_100008984()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000089A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for AlertModel(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AlertModel(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xF9)
  {
    if ((a2 + 33554183) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776967;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776967;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 >= 8;
  v6 = v4 - 8;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554183) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xF8)
    v3 = 0;
  if (a2 > 0xF8)
  {
    *(_WORD *)result = a2 - 249;
    *(_BYTE *)(result + 2) = (a2 - 249) >> 16;
    if (v3)
    {
      v4 = ((a2 - 249) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 7;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertModel()
{
  return &type metadata for AlertModel;
}

uint64_t sub_100008AE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100008B24 + 4 * byte_1001E6380[a1]))(0xD000000000000011, 0x80000001001F7AD0);
}

unint64_t sub_100008B24()
{
  return 0xD000000000000016;
}

uint64_t sub_100008BF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100008C34 + 4 * byte_1001E638C[a1]))(0xD000000000000011, 0x80000001001F7AD0);
}

unint64_t sub_100008C34()
{
  return 0xD000000000000016;
}

uint64_t sub_100008D08(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t countAndFlagsBits;
  void *v40;
  __int128 v41;
  __int128 v42;
  Swift::String v43;
  Swift::String v44;

  v2 = sub_100008BF8(a1);
  v4 = v3;
  if (v2 == 0xD000000000000011 && v3 == 0x80000001001F7AD0)
  {
    swift_bridgeObjectRelease(0x80000001001F7AD0);
    goto LABEL_5;
  }
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0xD000000000000011, 0x80000001001F7AD0, 0);
  swift_bridgeObjectRelease(v4);
  if ((v5 & 1) != 0)
  {
LABEL_5:
    v6 = (void *)objc_opt_self(NSBundle);
    v7 = objc_msgSend(v6, "mainBundle");
    v8 = objc_msgSend(v7, "localizedInfoDictionary");

    if (v8)
    {
      v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      if (*(_QWORD *)(v9 + 16) && (v10 = sub_1001A869C(0xD000000000000013, 0x80000001001F8390), (v11 & 1) != 0))
      {
        sub_10000A0EC(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v41);
        swift_bridgeObjectRelease(v9);
        if (*((_QWORD *)&v42 + 1))
        {
          v12 = sub_10000A05C(0, (unint64_t *)&qword_10028AA68, NSString_ptr);
          if (swift_dynamicCast(&v40, &v41, (char *)&type metadata for Any + 8, v12, 6))
          {
            v13 = v40;
LABEL_15:
            v14 = sub_100008AE8(a1);
            v16 = v15;
            v17 = objc_msgSend(v6, "mainBundle");
            v43._object = (void *)0xE000000000000000;
            v18._countAndFlagsBits = v14;
            v18._object = v16;
            v19._countAndFlagsBits = 0;
            v19._object = (void *)0xE000000000000000;
            v43._countAndFlagsBits = 0;
            v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v43);
            swift_bridgeObjectRelease(v16);

            v21 = sub_100006DF4(&qword_10028AA70);
            v22 = swift_allocObject(v21, 72, 7);
            *(_OWORD *)(v22 + 16) = xmmword_1001E64F0;
            sub_10000A05C(0, (unint64_t *)&qword_10028AA68, NSString_ptr);
            *(_QWORD *)(v22 + 56) = v12;
            *(_QWORD *)(v22 + 64) = sub_10000A094();
            *(_QWORD *)(v22 + 32) = v13;
            v23 = v13;
            v24 = String.init(format:_:)(v20._countAndFlagsBits, v20._object, v22);

            swift_bridgeObjectRelease(v20._object);
            return v24;
          }
LABEL_14:
          v12 = sub_10000A05C(0, (unint64_t *)&qword_10028AA68, NSString_ptr);
          v13 = (void *)NSString.init(stringLiteral:)("Translate", 9, 2);
          goto LABEL_15;
        }
      }
      else
      {
        v41 = 0u;
        v42 = 0u;
        swift_bridgeObjectRelease(v9);
      }
    }
    else
    {
      v41 = 0u;
      v42 = 0u;
    }
    sub_10000A020((uint64_t)&v41, (uint64_t *)&unk_10028C0B0);
    goto LABEL_14;
  }
  v26 = sub_100008AE8(a1);
  v28 = v27;
  v29 = 0xD00000000000001ELL;
  v30 = 0x80000001001F8370;
  v31 = a1 - 6;
  v32 = 0xD000000000000024;
  v33 = 0x80000001001F82B0;
  if (a1 == 5)
  {
    v32 = 0xD00000000000003ELL;
    v33 = 0x80000001001F8330;
  }
  if (a1 != 2)
  {
    v29 = v32;
    v30 = v33;
  }
  if (v31 >= 2)
    v34 = v29;
  else
    v34 = 0xD000000000000040;
  if (v31 >= 2)
    v35 = (void *)v30;
  else
    v35 = (void *)0x80000001001F82E0;
  v36 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v44._object = v35;
  v37._countAndFlagsBits = v26;
  v37._object = v28;
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  v44._countAndFlagsBits = v34;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v44)._countAndFlagsBits;
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v35);

  return countAndFlagsBits;
}

uint64_t sub_1000090F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100008BF8(*a1);
  v5 = v4;
  v6 = sub_100008BF8(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100009178()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100008BF8(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000091D8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100008BF8(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100009218(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100008BF8(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100009274@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100009388(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000092A0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100008BF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_1000092C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000092DC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009320()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100009348(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_100009388(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100261B10, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

uint64_t sub_1000093D0(id a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  NSString v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  unsigned __int8 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  char v62;
  char v63;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[3];
  ValueMetadata *v71;
  unint64_t v72;
  Swift::String v73;

  v2 = type metadata accessor for URLError.NetworkUnavailableReason(0);
  v69 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v67 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028AA28);
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028AA30);
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_10028AA38);
  v11 = __chkstk_darwin(v10);
  v68 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v65 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v65 - v16;
  v18 = objc_msgSend(a1, "domain");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(_LTTranslationErrorDomain);
  v24 = v23;
  if (v22 == v19 && v23 == v21)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_5;
  }
  v66 = v6;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v19, v21, 0);
  swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
  {
LABEL_5:
    swift_bridgeObjectRelease(v21);
    if (objc_msgSend(a1, "code") == (id)10)
    {
      v71 = &type metadata for TranslateFeatures;
      v72 = sub_100009BC4();
      v26 = 2;
      LOBYTE(v70[0]) = 2;
      v27 = isFeatureEnabled(_:)(v70);
      sub_100009C08(v70);

      v28 = 0;
      if ((v27 & 1) != 0)
        v29 = 9;
      else
        v29 = 4;
      return v28 | (v29 << 8) | v26;
    }
    if (objc_msgSend(a1, "code") == (id)14)
    {
      v71 = &type metadata for TranslateFeatures;
      v72 = sub_100009BC4();
      v26 = 2;
      LOBYTE(v70[0]) = 2;
      v30 = isFeatureEnabled(_:)(v70);
      sub_100009C08(v70);

      if ((v30 & 1) != 0)
        v29 = 9;
      else
        v29 = 4;
      v28 = 0x10000;
      return v28 | (v29 << 8) | v26;
    }
    if (objc_msgSend(a1, "code") != (id)9)
    {
      v71 = &type metadata for TranslateFeatures;
      v72 = sub_100009BC4();
      v26 = 2;
      LOBYTE(v70[0]) = 2;
      v34 = isFeatureEnabled(_:)(v70);
      sub_100009C08(v70);

      if ((v34 & 1) != 0)
        v29 = 9;
      else
        v29 = 4;
      goto LABEL_55;
    }
    goto LABEL_39;
  }
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  v33 = v32;
  if (v31 == v19 && v32 == v21)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_22;
  }
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v19, v21, 0);
  swift_bridgeObjectRelease(v33);
  if ((v35 & 1) == 0)
  {
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    v57 = v56;
    if (v55 == v19 && v56 == v21)
    {
      swift_bridgeObjectRelease_n(v21, 2);
    }
    else
    {
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, v19, v21, 0);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v57);
      if ((v62 & 1) == 0)
        goto LABEL_54;
    }
    if (objc_msgSend(a1, "code") == (id)561017449)
    {
      v71 = &type metadata for TranslateFeatures;
      v72 = sub_100009BC4();
      LOBYTE(v70[0]) = 2;
      v63 = isFeatureEnabled(_:)(v70);
      sub_100009C08(v70);

      if ((v63 & 1) != 0)
        v29 = 10;
      else
        v29 = 5;
      v26 = 3;
      v28 = 393216;
      return v28 | (v29 << 8) | v26;
    }
LABEL_54:

    v26 = 2;
    v29 = 4;
LABEL_55:
    v28 = 458752;
    return v28 | (v29 << 8) | v26;
  }
LABEL_22:
  swift_bridgeObjectRelease(v21);
  v70[0] = a1;
  v36 = sub_10000A05C(0, (unint64_t *)&qword_10028AA48, NSError_ptr);
  v37 = type metadata accessor for URLError(0);
  a1 = a1;
  v38 = swift_dynamicCast(v9, v70, v36, v37, 6);
  v39 = *(_QWORD *)(v37 - 8);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56);
  if ((v38 & 1) != 0)
  {
    v41 = v40(v9, 0, 1, v37);
    URLError.networkUnavailableReason.getter(v41);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v37);
    v42 = (uint64_t)v66;
    v43 = v69;
  }
  else
  {
    v40(v9, 1, 1, v37);
    sub_10000A020((uint64_t)v9, &qword_10028AA30);
    v43 = v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v17, 1, 1, v2);
    v42 = (uint64_t)v66;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v15, enum case for URLError.NetworkUnavailableReason.cellular(_:), v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v15, 0, 1, v2);
  v44 = v42 + *(int *)(v4 + 48);
  sub_100009C28((uint64_t)v17, v42);
  sub_100009C28((uint64_t)v15, v44);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (v45(v42, 1, v2) == 1)
  {
    sub_10000A020((uint64_t)v15, &qword_10028AA38);
    v42 = (uint64_t)v66;
    sub_10000A020((uint64_t)v17, &qword_10028AA38);
    if (v45(v44, 1, v2) == 1)
    {
      sub_10000A020(v42, &qword_10028AA38);
LABEL_47:

      v26 = 0;
      v29 = 1;
      v28 = 0x20000;
      return v28 | (v29 << 8) | v26;
    }
  }
  else
  {
    v46 = v68;
    sub_100009C28(v42, v68);
    if (v45(v44, 1, v2) != 1)
    {
      v58 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v67, v44, v2);
      v59 = sub_100009C70();
      v60 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v58, v2, v59);
      v61 = *(void (**)(char *, uint64_t))(v43 + 8);
      v61(v58, v2);
      sub_10000A020((uint64_t)v15, &qword_10028AA38);
      sub_10000A020((uint64_t)v17, &qword_10028AA38);
      v61((char *)v46, v2);
      sub_10000A020(v42, &qword_10028AA38);
      if ((v60 & 1) != 0)
        goto LABEL_47;
      goto LABEL_31;
    }
    sub_10000A020((uint64_t)v15, &qword_10028AA38);
    sub_10000A020((uint64_t)v17, &qword_10028AA38);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v2);
  }
  sub_10000A020(v42, &qword_10028AA28);
LABEL_31:
  if (objc_msgSend(a1, "code") != (id)-1009)
  {
LABEL_39:
    v71 = &type metadata for TranslateFeatures;
    v72 = sub_100009BC4();
    v26 = 2;
    LOBYTE(v70[0]) = 2;
    v54 = isFeatureEnabled(_:)(v70);
    sub_100009C08(v70);

    if ((v54 & 1) != 0)
      v29 = 11;
    else
      v29 = 8;
    v28 = 327680;
    return v28 | (v29 << 8) | v26;
  }
  type metadata accessor for AirplaneModeConfiguration(0);
  v47 = static AirplaneModeConfiguration.isAirplaneModeEnabled.getter();
  v48 = String._bridgeToObjectiveC()();
  v49 = (id)SFLocalizableWAPIStringKeyForKey();

  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v52 = v51;

  v73._countAndFlagsBits = v50;
  v73._object = v52;
  v53 = sub_100009388(v73);

  if (v53 == 12)
    v29 = 7;
  else
    v29 = v53;
  if ((v47 & 1) != 0)
    v28 = 196608;
  else
    v28 = 0x40000;
  v26 = 2;
  return v28 | (v29 << 8) | v26;
}

unint64_t sub_100009BC4()
{
  unint64_t result;

  result = qword_10028AA40;
  if (!qword_10028AA40)
  {
    result = swift_getWitnessTable(&unk_1001EDCF4, &type metadata for TranslateFeatures);
    atomic_store(result, (unint64_t *)&qword_10028AA40);
  }
  return result;
}

uint64_t sub_100009C08(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100009C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028AA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100009C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AA50;
  if (!qword_10028AA50)
  {
    v1 = type metadata accessor for URLError.NetworkUnavailableReason(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URLError.NetworkUnavailableReason, v1);
    atomic_store(result, (unint64_t *)&qword_10028AA50);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for AlertStringKey(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AlertReasonKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertReasonKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100009DA0 + 4 * byte_1001E639D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100009DD4 + 4 * byte_1001E6398[v4]))();
}

uint64_t sub_100009DD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009DDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100009DE4);
  return result;
}

uint64_t sub_100009DF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100009DF8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100009DFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009E04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009E10(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100009E1C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AlertReasonKey()
{
  return &type metadata for AlertReasonKey;
}

uint64_t getEnumTagSinglePayload for AlertStringKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertStringKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_100009F10 + 4 * byte_1001E63A7[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100009F44 + 4 * byte_1001E63A2[v4]))();
}

uint64_t sub_100009F44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009F4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100009F54);
  return result;
}

uint64_t sub_100009F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100009F68);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_100009F6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009F74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlertStringKey()
{
  return &type metadata for AlertStringKey;
}

unint64_t sub_100009F94()
{
  unint64_t result;

  result = qword_10028AA58;
  if (!qword_10028AA58)
  {
    result = swift_getWitnessTable(&unk_1001E6454, &type metadata for AlertStringKey);
    atomic_store(result, (unint64_t *)&qword_10028AA58);
  }
  return result;
}

unint64_t sub_100009FDC()
{
  unint64_t result;

  result = qword_10028AA60;
  if (!qword_10028AA60)
  {
    result = swift_getWitnessTable(&unk_1001E64BC, &type metadata for AlertReasonKey);
    atomic_store(result, (unint64_t *)&qword_10028AA60);
  }
  return result;
}

uint64_t sub_10000A020(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100006DF4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000A05C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10000A094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AA78;
  if (!qword_10028AA78)
  {
    v1 = sub_10000A05C(255, (unint64_t *)&qword_10028AA68, NSString_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10028AA78);
  }
  return result;
}

uint64_t sub_10000A0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_10000A330()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjCClassFromMetadata;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for AppDelegate();
  v4 = static CommandLine.unsafeArgv.getter();
  v5 = ((uint64_t (*)(void))static CommandLine.argc.getter)();
  v6 = static CommandLine.argc.getter(v5);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  v8 = NSStringFromClass(ObjCClassFromMetadata);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  LODWORD(v8) = UIApplicationMain(_:_:_:_:)(v6, v4, 0, 0, v9, v11);
  swift_bridgeObjectRelease(v11);
  exit((int)v8);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC17SequoiaTranslator11AppDelegate);
}

uint64_t sub_10000A440()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Class isa;
  NSString v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0;
  sub_10015DC28();
  sub_10000A560();
  sub_1001DCCBC();
  static NSUserDefaults.ltuiRegisterDefaults()();
  sub_10015E298(0);
  v2 = (void *)static NSUserDefaults.translationGroupDefaults.getter();
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setValue:forKey:", isa, v4);

  sub_100193164();
  v5 = type metadata accessor for InterruptionController();
  swift_allocObject(v5, 56, 7);
  v6 = sub_1000E4F9C();
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator11AppDelegate_interruptionController);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator11AppDelegate_interruptionController) = v6;
  swift_release(v7);
  return 1;
}

unint64_t sub_10000A518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028A900;
  if (!qword_10028A900)
  {
    type metadata accessor for LaunchOptionsKey(255);
    result = swift_getWitnessTable(&unk_1001E60BC, v1);
    atomic_store(result, (unint64_t *)&qword_10028A900);
  }
  return result;
}

unint64_t sub_10000A560()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F160;
  if (!qword_10028F160)
  {
    v1 = objc_opt_self(NSUserDefaults);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028F160);
  }
  return result;
}

uint64_t sub_10000A59C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];

  v75 = a1;
  v87 = a3;
  v76 = sub_100006DF4(&qword_10028AB20);
  __chkstk_darwin(v76);
  v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100006DF4(&qword_10028AB28);
  __chkstk_darwin(v86);
  v79 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100006DF4(&qword_10028AB30);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100006DF4(&qword_10028AB38);
  __chkstk_darwin(v81);
  v84 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006DF4(&qword_10028AB40);
  __chkstk_darwin(v77);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028AB48);
  __chkstk_darwin(v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100006DF4(&qword_10028AB50);
  __chkstk_darwin(v78);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100006DF4(&qword_10028AB58);
  __chkstk_darwin(v82);
  v80 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_10028AB60);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2)
  {
    case 0:
      v22 = sub_100006DF4(&qword_10028AB90);
      v23 = sub_10000B218();
      Label.init(title:icon:)(sub_10000B0B8, 0, sub_10000B130, 0, &type metadata for Text, v22, &protocol witness table for Text, v23);
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v14, v21, v18);
      swift_storeEnumTagMultiPayload(v14, v12, 0);
      v24 = sub_10000AF7C(&qword_10028AB80, &qword_10028AB60);
      v25 = sub_10000AF7C(&qword_10028AB68, &qword_10028AB30);
      _ConditionalContent<>.init(storage:)(v14, v18, v85, v24, v25);
      sub_10000B074((uint64_t)v16, (uint64_t)v11, &qword_10028AB50);
      swift_storeEnumTagMultiPayload(v11, v77, 0);
      v26 = sub_10000AEF0();
      v27 = sub_10000AFBC();
      v28 = (uint64_t)v80;
      v29 = v86;
      _ConditionalContent<>.init(storage:)(v11, v78, v86, v26, v27);
      sub_10000A020((uint64_t)v16, &qword_10028AB50);
      v30 = v84;
      sub_10000B074(v28, v84, &qword_10028AB58);
      swift_storeEnumTagMultiPayload(v30, v81, 0);
      v31 = sub_10000AE84();
      _ConditionalContent<>.init(storage:)(v30, v82, v29, v31, v27);
      sub_10000A020(v28, &qword_10028AB58);
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    case 1:
      v41 = LocalizedStringKey.init(stringLiteral:)(0x4152454D4143, 0xE600000000000000);
      v42 = v8;
      Label<>.init(_:systemImage:)(v41);
      v43 = v85;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v14, v8, v85);
      swift_storeEnumTagMultiPayload(v14, v12, 1);
      v44 = sub_10000AF7C(&qword_10028AB80, &qword_10028AB60);
      v45 = sub_10000AF7C(&qword_10028AB68, &qword_10028AB30);
      _ConditionalContent<>.init(storage:)(v14, v18, v43, v44, v45);
      sub_10000B074((uint64_t)v16, (uint64_t)v11, &qword_10028AB50);
      swift_storeEnumTagMultiPayload(v11, v77, 0);
      v46 = sub_10000AEF0();
      v47 = sub_10000AFBC();
      v48 = (uint64_t)v80;
      v49 = v86;
      _ConditionalContent<>.init(storage:)(v11, v78, v86, v46, v47);
      sub_10000A020((uint64_t)v16, &qword_10028AB50);
      v50 = v84;
      sub_10000B074(v48, v84, &qword_10028AB58);
      swift_storeEnumTagMultiPayload(v50, v81, 0);
      v51 = sub_10000AE84();
      _ConditionalContent<>.init(storage:)(v50, v82, v49, v51, v47);
      sub_10000A020(v48, &qword_10028AB58);
      return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v42, v43);
    case 2:
      v52 = LocalizedStringKey.init(stringLiteral:)(0x41535245564E4F43, 0xEC0000004E4F4954);
      v53 = v8;
      Label<>.init(_:systemImage:)(v52);
      v54 = v83;
      v55 = v85;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v5, v8, v85);
      v56 = v5;
      v57 = v76;
      v58 = 0;
      goto LABEL_7;
    case 3:
      v59 = LocalizedStringKey.init(stringLiteral:)(0x455449524F564146, 0xE900000000000053);
      v53 = v8;
      Label<>.init(_:systemImage:)(v59);
      v54 = v83;
      v55 = v85;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v5, v8, v85);
      v56 = v5;
      v57 = v76;
      v58 = 1;
LABEL_7:
      swift_storeEnumTagMultiPayload(v56, v57, v58);
      v60 = sub_10000AF7C(&qword_10028AB68, &qword_10028AB30);
      v61 = (uint64_t)v79;
      _ConditionalContent<>.init(storage:)(v5, v55, v55, v60, v60);
      sub_10000B074(v61, (uint64_t)v11, &qword_10028AB28);
      swift_storeEnumTagMultiPayload(v11, v77, 1);
      v62 = sub_10000AEF0();
      v63 = sub_10000AFBC();
      v64 = (uint64_t)v80;
      v65 = v86;
      _ConditionalContent<>.init(storage:)(v11, v78, v86, v62, v63);
      sub_10000A020(v61, &qword_10028AB28);
      v66 = v84;
      sub_10000B074(v64, v84, &qword_10028AB58);
      swift_storeEnumTagMultiPayload(v66, v81, 0);
      v67 = sub_10000AE84();
      _ConditionalContent<>.init(storage:)(v66, v82, v65, v67, v63);
      sub_10000A020(v64, &qword_10028AB58);
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v53, v55);
    case 4:
      v68 = LocalizedStringKey.init(stringLiteral:)(0x6C6F686563616C50, 0xEB00000000726564);
      v35 = v8;
      Label<>.init(_:systemImage:)(v68);
      v36 = v83;
      v37 = v85;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v5, v8, v85);
      v38 = v5;
      v39 = v76;
      v40 = 1;
      goto LABEL_9;
    default:
      v88[0] = v75;
      v88[1] = a2;
      v33 = sub_10000B030();
      v34 = swift_bridgeObjectRetain(a2);
      v35 = v8;
      Label<>.init<A>(_:systemImage:)(v88, 1918989427, 0xE400000000000000, &type metadata for String, v33, v34);
      v36 = v83;
      v37 = v85;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v5, v8, v85);
      v38 = v5;
      v39 = v76;
      v40 = 0;
LABEL_9:
      swift_storeEnumTagMultiPayload(v38, v39, v40);
      v69 = sub_10000AF7C(&qword_10028AB68, &qword_10028AB30);
      v70 = (uint64_t)v79;
      _ConditionalContent<>.init(storage:)(v5, v37, v37, v69, v69);
      v71 = v84;
      sub_10000B074(v70, v84, &qword_10028AB28);
      swift_storeEnumTagMultiPayload(v71, v81, 1);
      v72 = sub_10000AE84();
      v73 = sub_10000AFBC();
      _ConditionalContent<>.init(storage:)(v71, v82, v86, v72, v73);
      sub_10000A020(v70, &qword_10028AB28);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v35, v37);
  }
}

unint64_t sub_10000AE84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AB70;
  if (!qword_10028AB70)
  {
    v1 = sub_1000070BC(&qword_10028AB58);
    sub_10000AEF0();
    sub_10000AFBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AB70);
  }
  return result;
}

unint64_t sub_10000AEF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AB78;
  if (!qword_10028AB78)
  {
    v1 = sub_1000070BC(&qword_10028AB50);
    sub_10000AF7C(&qword_10028AB80, &qword_10028AB60);
    sub_10000AF7C(&qword_10028AB68, &qword_10028AB30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AB78);
  }
  return result;
}

uint64_t sub_10000AF7C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000070BC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for Label<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000AFBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AB88;
  if (!qword_10028AB88)
  {
    v1 = sub_1000070BC(&qword_10028AB28);
    sub_10000AF7C(&qword_10028AB68, &qword_10028AB30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AB88);
  }
  return result;
}

unint64_t sub_10000B030()
{
  unint64_t result;

  result = qword_100297A30;
  if (!qword_100297A30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100297A30);
  }
  return result;
}

uint64_t sub_10000B074(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100006DF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000B0B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x54414C534E415254, 0xEB000000004E4F49);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_10000B130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Image.init(_internalSystemName:)(0x74616C736E617274, 0xE900000000000065);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  v7 = Image.resizable(capInsets:resizingMode:)(v5, v6, 0.0, 0.0, 0.0, 0.0);
  swift_release(v6);
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  return result;
}

unint64_t sub_10000B218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AB98;
  if (!qword_10028AB98)
  {
    v1 = sub_1000070BC(&qword_10028AB90);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AB98);
  }
  return result;
}

unint64_t destroy for AppSection(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s17SequoiaTranslator10AppSectionOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for AppSection(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for AppSection(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppSection(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AppSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 4;
  }
  return result;
}

uint64_t sub_10000B488(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_10000B4A0(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppSection()
{
  return &type metadata for AppSection;
}

uint64_t sub_10000B4D0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a1;
  switch(a3)
  {
    case 0uLL:
      v5 = 0x74616C736E617274;
      v6 = 0xEB000000006E6F69;
      break;
    case 1uLL:
      v5 = 0x6C6175736976;
      v6 = 0xE600000000000000;
      break;
    case 2uLL:
      v5 = 0x61737265766E6F63;
      v6 = 0xEC0000006E6F6974;
      break;
    case 3uLL:
      v5 = 0x657469726F766166;
      v6 = 0xE900000000000073;
      break;
    case 4uLL:
      v5 = 1701736302;
      v6 = 0xE400000000000000;
      break;
    default:
      String.hash(into:)(a1, 0x657469726F766166, 0xE900000000000073);
      a1 = v4;
      v5 = a2;
      v6 = a3;
      break;
  }
  return String.hash(into:)(a1, v5, v6);
}

Swift::Int sub_10000B5DC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  sub_10000B4D0((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10000B624(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B4D0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int sub_10000B62C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_10000B4D0((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10000B670@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_10000B720(v2, v3);
}

uint64_t sub_10000B67C(uint64_t *a1, uint64_t a2)
{
  return sub_10000B864(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

unint64_t sub_10000B694()
{
  unint64_t result;

  result = qword_10028ABA0;
  if (!qword_10028ABA0)
  {
    result = swift_getWitnessTable(&unk_1001E65A0, &type metadata for AppSection);
    atomic_store(result, (unint64_t *)&qword_10028ABA0);
  }
  return result;
}

unint64_t sub_10000B6DC()
{
  unint64_t result;

  result = qword_10028ABA8;
  if (!qword_10028ABA8)
  {
    result = swift_getWitnessTable(&unk_1001E6540, &type metadata for AppSection);
    atomic_store(result, (unint64_t *)&qword_10028ABA8);
  }
  return result;
}

uint64_t sub_10000B720(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 5)
    return swift_bridgeObjectRetain(a2);
  return result;
}

_QWORD *sub_10000B734@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  uint64_t v12;

  v6 = type metadata accessor for CoreAnalyticsLogger.InteractionLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (unsigned int *)&enum case for CoreAnalyticsLogger.InteractionLocation.translationTab(_:);
  switch(a2)
  {
    case 0uLL:
      goto LABEL_6;
    case 1uLL:
      v10 = (unsigned int *)&enum case for CoreAnalyticsLogger.InteractionLocation.cameraTab(_:);
      goto LABEL_6;
    case 2uLL:
      v10 = (unsigned int *)&enum case for CoreAnalyticsLogger.InteractionLocation.conversationTab(_:);
      goto LABEL_6;
    case 3uLL:
      goto LABEL_4;
    case 4uLL:
      return (*(_QWORD *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(&enum case for CoreAnalyticsLogger.InteractionLocation.translationTab(_:), a3, 1, 1, v6);
    default:
      sub_10000B900(a1, a2);
LABEL_4:
      v10 = (unsigned int *)&enum case for CoreAnalyticsLogger.InteractionLocation.favoritesTab(_:);
LABEL_6:
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *v10, v6);
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, v6);
  }
}

uint64_t sub_10000B864(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a4)
        goto LABEL_16;
      result = 1;
      break;
    case 1:
      if (a4 != 1)
        goto LABEL_16;
      result = 1;
      break;
    case 2:
      if (a4 != 2)
        goto LABEL_16;
      result = 1;
      break;
    case 3:
      if (a4 != 3)
        goto LABEL_16;
      result = 1;
      break;
    case 4:
      if (a4 != 4)
        goto LABEL_16;
      result = 1;
      break;
    default:
      if (a4 < 5)
      {
LABEL_16:
        result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        result = 1;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
      }
      break;
  }
  return result;
}

uint64_t sub_10000B900(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 5)
    return swift_bridgeObjectRelease(a2);
  return result;
}

void sub_10000B9C4()
{
  sub_10000C3B0("ScrollHistory test done");
}

id sub_10000B9D0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Class isa;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexPath.init(item:section:)(5, 0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(a1, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 1);

  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v9 = type metadata accessor for Logger(0);
  sub_10000F66C(v9, (uint64_t)qword_1002AA3F8);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting ScrollHistory test now", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  return objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", a2);
}

void sub_10000BB4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Class isa;
  NSObject *v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  isa = v6[-1].isa;
  v48 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v43 - v14;
  v16 = *(void **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window);
  if (!v16)
    goto LABEL_8;
  v17 = objc_msgSend(v16, "viewWithTag:", 206);
  if (!v17)
    goto LABEL_8;
  v18 = v17;
  v45 = v3;
  v19 = objc_opt_self(UICollectionView);
  v20 = swift_dynamicCastObjCClass(v18, v19);
  if (!v20)
  {

LABEL_8:
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA3F8);
    v48 = Logger.logObject.getter(v36);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v37, "ScrollFavorites test failing because sceneDelegate has no favoriteCardList", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
    goto LABEL_12;
  }
  v21 = (void *)v20;
  v22 = sub_10014BF0C();
  sub_1001CCE20();
  swift_release(v22);
  v46 = v18;
  v23 = sub_1001DBB08();

  if (v23)
  {
    v24 = type metadata accessor for FavoritesListController();
    if (swift_dynamicCastClass(v23, v24))
    {
      sub_1000C7F54(0);
      objc_msgSend(v21, "layoutIfNeeded");
      v25 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
      v44 = static OS_dispatch_queue.main.getter(v25);
      static DispatchTime.now()();
      + infix(_:_:)(v13, 8.0);
      v26 = *(void (**)(char *, uint64_t))(v10 + 8);
      v26(v13, v9);
      v27 = swift_allocObject(&unk_100263758, 24, 7);
      *(_QWORD *)(v27 + 16) = v21;
      aBlock[4] = sub_10000F7F8;
      v50 = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100075908;
      aBlock[3] = &unk_100263770;
      v28 = _Block_copy(aBlock);
      v29 = v50;
      v46 = v46;
      v30 = swift_release(v29);
      static DispatchQoS.unspecified.getter(v30);
      aBlock[0] = _swiftEmptyArrayStorage;
      v31 = sub_10000F730();
      v32 = sub_100006DF4(&qword_10028AC30);
      v33 = sub_10000F778();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v2, v31);
      v34 = (void *)v44;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v28);
      _Block_release(v28);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v2);
      (*((void (**)(char *, NSObject *))isa + 1))(v8, v48);
      v26(v15, v9);
      return;
    }

  }
  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10000F66C(v39, (uint64_t)qword_1002AA3F8);
  v48 = Logger.logObject.getter(v40);
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v41, "ScrollFavorites test failing because can't find FavoritesListController", v42, 2u);
    swift_slowDealloc(v42, -1, -1);

LABEL_12:
    return;
  }

}

void sub_10000C01C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Class isa;
  id v7;
  id v8;
  NSString v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  void **aBlock;
  _QWORD v23[4];
  uint64_t v24;

  v2 = type metadata accessor for IndexPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, "numberOfSections") >= 3
    && (uint64_t)objc_msgSend(a1, "numberOfItemsInSection:", 2) >= 3)
  {
    IndexPath.init(item:section:)(2, 2);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    objc_msgSend(a1, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 1);

    v7 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    v8 = a1;
    v9 = String._bridgeToObjectiveC()();
    v23[3] = sub_10000C3A4;
    v24 = 0;
    aBlock = _NSConcreteStackBlock;
    v23[0] = 1107296256;
    v23[1] = sub_100075908;
    v23[2] = &unk_100263798;
    v10 = _Block_copy(&aBlock);
    swift_release(v24);
    v11 = objc_msgSend(v7, "initWithTestName:scrollView:completionHandler:", v9, v8, v10);

    _Block_release(v10);
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA3F8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting ScrollFavorites test now", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v11);
    goto LABEL_12;
  }
  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v17 = type metadata accessor for Logger(0);
  sub_10000F66C(v17, (uint64_t)qword_1002AA3F8);
  v21 = a1;
  v11 = Logger.logObject.getter(v21);
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134349056;
    aBlock = (void **)objc_msgSend(v21, "numberOfSections");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v23, v19 + 4);

    _os_log_impl((void *)&_mh_execute_header, v11, v18, "ScrollFavorites test failing because cannot select item 2 in section number 2. Number of sections: %{public}ld, privacy: .public)", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
LABEL_12:

    return;
  }

}

void sub_10000C3A4()
{
  sub_10000C3B0("ScrollFavorites test done");
}

void sub_10000C3B0(const char *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA3F8);
  oslog = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

}

uint64_t sub_10000C484(void *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v40 - 8);
  v9 = __chkstk_darwin(v40);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v38 - v12;
  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000F66C(v14, (uint64_t)qword_1002AA3F8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting NewSpeechTranslation test now", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "startedTest:", v19);

  v20 = *(_QWORD *)&a2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel];
  swift_retain(v20);
  sub_10004F770();
  swift_release(v20);
  v21 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v22 = (void *)static OS_dispatch_queue.main.getter(v21);
  static DispatchTime.now()();
  + infix(_:_:)(v11, 2.0);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24 = v11;
  v25 = v40;
  v23(v24, v40);
  v26 = swift_allocObject(&unk_100263820, 32, 7);
  *(_QWORD *)(v26 + 16) = a2;
  *(_QWORD *)(v26 + 24) = a1;
  aBlock[4] = sub_10000F808;
  v45 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100263838;
  v27 = _Block_copy(aBlock);
  v28 = v45;
  v29 = a2;
  v30 = a1;
  v31 = swift_release(v28);
  static DispatchQoS.unspecified.getter(v31);
  aBlock[0] = _swiftEmptyArrayStorage;
  v32 = sub_10000F730();
  v33 = sub_100006DF4(&qword_10028AC30);
  v34 = sub_10000F778();
  v35 = v38;
  v36 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v39, v32);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v13, v7, v35, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v42);
  return ((uint64_t (*)(char *, uint64_t))v23)(v13, v25);
}

void sub_10000C808(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSString v10;

  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA3F8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Resetting state after NewSpeechTranslation test", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel);
  swift_retain(v9);
  sub_10004D044(0, 0);
  swift_release(v9);
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "finishedTest:", v10);

}

uint64_t sub_10000C950(void *a1, void *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSString v25;
  id v26;
  uint64_t v27;
  void *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v43 = a3;
  v44 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for DispatchTime(0);
  v42 = *(_QWORD *)(v45 - 8);
  v10 = __chkstk_darwin(v45);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  v15 = type metadata accessor for IndexPath(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexPath.init(item:section:)(0, 0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  objc_msgSend(a1, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 1);

  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10000F66C(v20, (uint64_t)qword_1002AA3F8);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Starting NewTextTranslation test now", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = String._bridgeToObjectiveC()();
  v26 = v44;
  objc_msgSend(v44, "startedTest:", v25);

  objc_msgSend(v43, "becomeFirstResponder");
  v27 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v28 = (void *)static OS_dispatch_queue.main.getter(v27);
  static DispatchTime.now()();
  + infix(_:_:)(v12, 2.0);
  v29 = *(void (**)(char *, uint64_t))(v42 + 8);
  v30 = v12;
  v31 = v45;
  v29(v30, v45);
  v32 = swift_allocObject(&unk_1002638C0, 24, 7);
  *(_QWORD *)(v32 + 16) = v26;
  aBlock[4] = sub_10000F850;
  v50 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_1002638D8;
  v33 = _Block_copy(aBlock);
  v34 = v50;
  v35 = v26;
  v36 = swift_release(v34);
  static DispatchQoS.unspecified.getter(v36);
  aBlock[0] = _swiftEmptyArrayStorage;
  v37 = sub_10000F730();
  v38 = sub_100006DF4(&qword_10028AC30);
  v39 = sub_10000F778();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v4, v37);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v9, v6, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v47);
  return ((uint64_t (*)(char *, uint64_t))v29)(v14, v31);
}

void sub_10000CD40(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSString v7;

  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA3F8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Marking NewTextTranslation test as finished", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "finishedTest:", v7);

}

void sub_10000CE50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[5];
  unint64_t v35;

  v1 = a1;
  v35 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
    v5 = sub_10000F684();
    v6 = Set.Iterator.init(_cocoa:)(v34, v3, v4, v5);
    v1 = v34[0];
    v31 = v34[1];
    v8 = v34[2];
    v7 = v34[3];
    v9 = v34[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v8 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v7 = 0;
  }
  v13 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_42;
    v18 = v17;
    v32 = v17;
    v19 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v33;
    swift_unknownObjectRelease(v18);
    v16 = v7;
    v14 = v9;
    if (!v20)
      goto LABEL_42;
LABEL_36:
    v24 = objc_msgSend(v20, "delegate");
    if (v24)
    {
      v25 = v24;
      v26 = type metadata accessor for SceneDelegate();
      v27 = swift_dynamicCastClass(v25, v26);

      if (v27)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v29 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v28 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v29 >= v28 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
        v6 = (_QWORD *)specialized Array._endMutation()(v30);
      }
      else
      {
        v6 = (_QWORD *)swift_unknownObjectRelease(v25);
      }
    }
    else
    {

    }
    v7 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v7 << 6);
    v16 = v7;
LABEL_35:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_42;
    goto LABEL_36;
  }
  v21 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v21 >= v13)
      goto LABEL_42;
    v22 = *(_QWORD *)(v31 + 8 * v21);
    v16 = v7 + 1;
    if (!v22)
    {
      v16 = v7 + 2;
      if (v7 + 2 >= v13)
        goto LABEL_42;
      v22 = *(_QWORD *)(v31 + 8 * v16);
      if (!v22)
      {
        v16 = v7 + 3;
        if (v7 + 3 >= v13)
          goto LABEL_42;
        v22 = *(_QWORD *)(v31 + 8 * v16);
        if (!v22)
        {
          v16 = v7 + 4;
          if (v7 + 4 >= v13)
            goto LABEL_42;
          v22 = *(_QWORD *)(v31 + 8 * v16);
          if (!v22)
          {
            v16 = v7 + 5;
            if (v7 + 5 >= v13)
              goto LABEL_42;
            v22 = *(_QWORD *)(v31 + 8 * v16);
            if (!v22)
            {
              v23 = v7 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v31 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_34;
                }
              }
LABEL_42:
              sub_10000F7C4(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_10000D194(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  NSString v34;
  void *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **aBlock;
  uint64_t v79;
  uint64_t (*v80)(uint64_t);
  void *v81;
  void *v82;
  uint64_t v83;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v77 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v69 - v14;
  if (!objc_msgSend((id)objc_opt_self(RPTTestRunner), "isRecapAvailable"))
  {
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10000F66C(v54, (uint64_t)qword_1002AA3F8);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v56, v57))
      goto LABEL_34;
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    v59 = "Failed to run ScrollHistory test because recap isn't available";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v56, v57, v59, v58, 2u);
    swift_slowDealloc(v58, -1, -1);
    goto LABEL_34;
  }
  v74 = v6;
  v75 = v3;
  v76 = v2;
  v16 = objc_msgSend(a1, "connectedScenes");
  v17 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
  v18 = sub_10000F684();
  v19 = (char *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

  sub_10000CE50((uint64_t)v19);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  if (!((unint64_t)v21 >> 62))
  {
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_29;
  }
  if (v21 < 0)
    v65 = v21;
  else
    v65 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v66 = _CocoaArrayWrapper.endIndex.getter(v65);
  swift_bridgeObjectRelease(v21);
  if (!v66)
  {
LABEL_29:
    swift_bridgeObjectRelease(v21);
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_10000F66C(v67, (uint64_t)qword_1002AA3F8);
    v56 = Logger.logObject.getter(v68);
    v57 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v56, v57))
      goto LABEL_34;
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    v59 = "Failed to run ScrollHistory test because we don't have a sceneDelegate";
    goto LABEL_33;
  }
LABEL_4:
  if ((v21 & 0xC000000000000001) != 0)
  {
    v22 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
  }
  else
  {
    if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_38;
    }
    v22 = (char *)*(id *)(v21 + 32);
  }
  v19 = v22;
  swift_bridgeObjectRelease(v21);
  v23 = *(_QWORD *)&v19[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context];
  KeyPath = swift_getKeyPath(&unk_1001E6610);
  v25 = swift_getKeyPath(&unk_1001E6638);
  aBlock = 0;
  v79 = 0;
  swift_retain(v23);
  static Published.subscript.setter(&aBlock, v23, KeyPath, v25);
  v26 = *(void **)&v19[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window];
  if (!v26 || (v27 = objc_msgSend(v26, "viewWithTag:", 204)) == 0)
  {
LABEL_19:
    if (qword_10028A450 == -1)
    {
LABEL_20:
      v60 = type metadata accessor for Logger(0);
      v61 = sub_10000F66C(v60, (uint64_t)qword_1002AA3F8);
      v56 = Logger.logObject.getter(v61);
      v62 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v56, v62))
      {

        return 0;
      }
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v62, "Failed to run ScrollHistory test because history scroll view can't be found", v63, 2u);
      swift_slowDealloc(v63, -1, -1);

LABEL_34:
      return 0;
    }
LABEL_38:
    swift_once(&qword_10028A450, sub_100121050);
    goto LABEL_20;
  }
  v28 = v27;
  v29 = objc_opt_self(UICollectionView);
  v30 = swift_dynamicCastObjCClass(v28, v29);
  if (!v30)
  {

    goto LABEL_19;
  }
  v31 = (void *)v30;
  v73 = v19;
  v32 = sub_10014BF0C();
  sub_1001CCE20();
  swift_release(v32);
  objc_msgSend(v31, "reloadData");
  objc_msgSend(v31, "layoutIfNeeded");
  v71 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
  v33 = v28;
  v72 = v33;
  v34 = String._bridgeToObjectiveC()();
  v82 = sub_10000B9C4;
  v83 = 0;
  aBlock = _NSConcreteStackBlock;
  v79 = 1107296256;
  v80 = sub_100075908;
  v81 = &unk_100263680;
  v35 = _Block_copy(&aBlock);
  swift_release(v83);
  v70 = objc_msgSend(v71, "initWithTestName:scrollView:completionHandler:", v34, v31, v35);

  _Block_release(v35);
  v36 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v71 = (id)static OS_dispatch_queue.main.getter(v36);
  static DispatchTime.now()();
  + infix(_:_:)(v13, 8.0);
  v37 = *(void (**)(char *, uint64_t))(v10 + 8);
  v37(v13, v9);
  v38 = swift_allocObject(&unk_1002636B8, 32, 7);
  *(_QWORD *)(v38 + 16) = v31;
  v39 = v70;
  *(_QWORD *)(v38 + 24) = v70;
  v82 = sub_10000F728;
  v83 = v38;
  aBlock = _NSConcreteStackBlock;
  v79 = 1107296256;
  v80 = sub_100075908;
  v81 = &unk_1002636D0;
  v40 = _Block_copy(&aBlock);
  v41 = v83;
  v72 = v72;
  v42 = v39;
  v43 = swift_release(v41);
  static DispatchQoS.unspecified.getter(v43);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v44 = sub_10000F730();
  v45 = sub_100006DF4(&qword_10028AC30);
  v46 = sub_10000F778();
  v47 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v45, v46, v76, v44);
  v48 = v71;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v40);
  _Block_release(v40);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v5, v47);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v8, v74);
  v37(v15, v9);
  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v49 = type metadata accessor for Logger(0);
  v50 = sub_10000F66C(v49, (uint64_t)qword_1002AA3F8);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Starting ScrollHistory test soon", v53, 2u);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {

  }
  return 1;
}

uint64_t sub_10000D9AC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 aBlock;
  uint64_t (*v60)(uint64_t);
  void *v61;
  void (*v62)();
  uint64_t v63;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v58 - 8);
  v11 = __chkstk_darwin(v58);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v53 - v14;
  if (!objc_msgSend((id)objc_opt_self(RPTTestRunner), "isRecapAvailable"))
  {
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_10000F66C(v44, (uint64_t)qword_1002AA3F8);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v46, v47))
      goto LABEL_25;
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    v49 = "Failed to run ScrollFavorites test because recap isn't available";
    goto LABEL_24;
  }
  v56 = v7;
  v57 = v6;
  v16 = objc_msgSend(a1, "connectedScenes");
  v17 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
  v18 = sub_10000F684();
  v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

  sub_10000CE50(v19);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  if (!((unint64_t)v21 >> 62))
  {
    v22 = *(char **)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
      goto LABEL_4;
    goto LABEL_20;
  }
  if (v21 < 0)
    v50 = v21;
  else
    v50 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v22 = (char *)_CocoaArrayWrapper.endIndex.getter(v50);
  swift_bridgeObjectRelease(v21);
  if (!v22)
  {
LABEL_20:
    swift_bridgeObjectRelease(v21);
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v51 = type metadata accessor for Logger(0);
    v52 = sub_10000F66C(v51, (uint64_t)qword_1002AA3F8);
    v46 = Logger.logObject.getter(v52);
    v47 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v46, v47))
      goto LABEL_25;
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    v49 = "Failed to run ScrollFavorites test because the app has no sceneDelegate";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v46, v47, v49, v48, 2u);
    swift_slowDealloc(v48, -1, -1);
LABEL_25:

    return 0;
  }
LABEL_4:
  v55 = v3;
  if ((v21 & 0xC000000000000001) != 0)
  {
    v23 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
  }
  else
  {
    if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    v23 = (char *)*(id *)(v21 + 32);
  }
  v24 = v23;
  swift_bridgeObjectRelease(v21);
  v25 = *(_QWORD *)&v24[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context];
  KeyPath = swift_getKeyPath(&unk_1001E6610);
  v27 = swift_getKeyPath(&unk_1001E6638);
  aBlock = xmmword_1001E6600;
  swift_retain(v25);
  static Published.subscript.setter(&aBlock, v25, KeyPath, v27);
  v28 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v29 = (void *)static OS_dispatch_queue.main.getter(v28);
  static DispatchTime.now()();
  + infix(_:_:)(v13, 1.0);
  v54 = *(void (**)(char *, uint64_t))(v10 + 8);
  v30 = v58;
  v54(v13, v58);
  v31 = swift_allocObject(&unk_100263708, 24, 7);
  *(_QWORD *)(v31 + 16) = v24;
  v62 = sub_10000F7CC;
  v63 = v31;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v60 = sub_100075908;
  v61 = &unk_100263720;
  v32 = _Block_copy(&aBlock);
  v33 = v63;
  v22 = v24;
  v34 = swift_release(v33);
  static DispatchQoS.unspecified.getter(v34);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  v35 = sub_10000F730();
  v36 = sub_100006DF4(&qword_10028AC30);
  v37 = sub_10000F778();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v36, v37, v2, v35);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v9, v5, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v57);
  v54(v15, v30);
  if (qword_10028A450 != -1)
LABEL_28:
    swift_once(&qword_10028A450, sub_100121050);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_10000F66C(v38, (uint64_t)qword_1002AA3F8);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Starting ScrollFavorites test soon", v42, 2u);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

  }
  return 1;
}

uint64_t sub_10000DF8C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  char *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void **aBlock;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  void *v90;
  uint64_t (*v91)();
  uint64_t v92;

  v86 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v78 - v14;
  if (!objc_msgSend((id)objc_opt_self(RPTTestRunner), "isRecapAvailable"))
  {
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v59 = type metadata accessor for Logger(0);
    v60 = sub_10000F66C(v59, (uint64_t)qword_1002AA3F8);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v61, v62))
      goto LABEL_42;
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    v64 = "Failed to run NewSpeechTranslation test because recap isn't available";
LABEL_41:
    _os_log_impl((void *)&_mh_execute_header, v61, v62, v64, v63, 2u);
    swift_slowDealloc(v63, -1, -1);
    goto LABEL_42;
  }
  v82 = v6;
  v83 = v5;
  v84 = v2;
  v81 = a1;
  v16 = objc_msgSend(a1, "connectedScenes");
  v17 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
  v18 = sub_10000F684();
  v19 = (char *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

  sub_10000CE50((uint64_t)v19);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  if (!((unint64_t)v21 >> 62))
  {
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_37;
  }
  if (v21 < 0)
    v74 = v21;
  else
    v74 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v75 = _CocoaArrayWrapper.endIndex.getter(v74);
  swift_bridgeObjectRelease(v21);
  if (!v75)
  {
LABEL_37:
    swift_bridgeObjectRelease(v21);
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v76 = type metadata accessor for Logger(0);
    v77 = sub_10000F66C(v76, (uint64_t)qword_1002AA3F8);
    v61 = Logger.logObject.getter(v77);
    v62 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v61, v62))
      goto LABEL_42;
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    v64 = "Failed to run NewSpeechTranslation test because there's no sceneDelegate";
    goto LABEL_41;
  }
LABEL_4:
  if ((v21 & 0xC000000000000001) != 0)
  {
    v22 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
  }
  else
  {
    if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_46;
    }
    v22 = (char *)*(id *)(v21 + 32);
  }
  v23 = v22;
  v85 = v22;
  swift_bridgeObjectRelease(v21);
  v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context];
  KeyPath = swift_getKeyPath(&unk_1001E6610);
  v26 = swift_getKeyPath(&unk_1001E6638);
  aBlock = 0;
  v88 = 0;
  swift_retain(v24);
  v27 = v26;
  v19 = v85;
  static Published.subscript.setter(&aBlock, v24, KeyPath, v27);
  v28 = *(void **)&v19[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window];
  if (!v28 || (v29 = objc_msgSend(v28, "viewWithTag:", 204)) == 0)
  {
LABEL_21:
    if (qword_10028A450 == -1)
    {
LABEL_22:
      v65 = type metadata accessor for Logger(0);
      v66 = sub_10000F66C(v65, (uint64_t)qword_1002AA3F8);
      v61 = Logger.logObject.getter(v66);
      v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v67, "Failed to run NewSpeechTranslation test because history scroll view can't be found", v68, 2u);
        swift_slowDealloc(v68, -1, -1);

LABEL_42:
        return 0;
      }

      return 0;
    }
LABEL_46:
    swift_once(&qword_10028A450, sub_100121050);
    goto LABEL_22;
  }
  v30 = v29;
  v31 = objc_opt_self(UICollectionView);
  if (!swift_dynamicCastObjCClass(v30, v31))
  {

    goto LABEL_21;
  }
  v32 = v30;
  v33 = sub_1001DBB08();

  if (!v33)
  {
LABEL_26:
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_10000F66C(v69, (uint64_t)qword_1002AA3F8);
    v61 = Logger.logObject.getter(v70);
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v71, "Failed to run NewSpeechTranslation test because can't find TranslationListController", v72, 2u);
      swift_slowDealloc(v72, -1, -1);

      goto LABEL_42;
    }

    return 0;
  }
  v34 = type metadata accessor for TranslationListController();
  v35 = swift_dynamicCastClass(v33, v34);
  if (!v35)
  {

    goto LABEL_26;
  }
  v36 = v35;
  v80 = v32;
  v37 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v38 = v33;
  v79 = static OS_dispatch_queue.main.getter(v37);
  static DispatchTime.now()();
  + infix(_:_:)(v13, 2.0);
  v39 = *(void (**)(char *, uint64_t))(v10 + 8);
  v39(v13, v9);
  v40 = swift_allocObject(&unk_1002637D0, 32, 7);
  v41 = v81;
  *(_QWORD *)(v40 + 16) = v81;
  *(_QWORD *)(v40 + 24) = v36;
  v91 = sub_10000F800;
  v92 = v40;
  aBlock = _NSConcreteStackBlock;
  v88 = 1107296256;
  v89 = sub_100075908;
  v90 = &unk_1002637E8;
  v42 = _Block_copy(&aBlock);
  v43 = v92;
  v44 = v41;
  v45 = v38;
  v46 = swift_release(v43);
  static DispatchQoS.unspecified.getter(v46);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v47 = sub_10000F730();
  v48 = sub_100006DF4(&qword_10028AC30);
  v49 = sub_10000F778();
  v50 = v86;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v48, v49, v86, v47);
  v51 = (void *)v79;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v4, v42);
  _Block_release(v42);

  (*(void (**)(char *, uint64_t))(v84 + 8))(v4, v50);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v8, v83);
  v39(v15, v9);
  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v52 = type metadata accessor for Logger(0);
  v53 = sub_10000F66C(v52, (uint64_t)qword_1002AA3F8);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.info.getter();
  v56 = os_log_type_enabled(v54, v55);
  v57 = v85;
  if (v56)
  {
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Starting NewSpeechTranslation test soon", v58, 2u);
    swift_slowDealloc(v58, -1, -1);

  }
  else
  {

  }
  return 1;
}

uint64_t sub_10000E7A4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void (*v51)(char *, uint64_t);
  _QWORD *v52;
  id v53;
  void *v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  _BOOL4 v76;
  id v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void **aBlock;
  uint64_t v102;
  uint64_t (*v103)(uint64_t);
  void *v104;
  uint64_t (*v105)();
  _QWORD *v106;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v92 - v14;
  if (!objc_msgSend((id)objc_opt_self(RPTTestRunner), "isRecapAvailable"))
  {
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_10000F66C(v67, (uint64_t)qword_1002AA3F8);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v69, v70))
      goto LABEL_51;
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    v72 = "Failed to run NewTextTranslation test because recap isn't available";
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, v69, v70, v72, v71, 2u);
    swift_slowDealloc(v71, -1, -1);
    goto LABEL_51;
  }
  v96 = v6;
  v97 = v3;
  v98 = v2;
  v95 = a1;
  v16 = objc_msgSend(a1, "connectedScenes");
  v17 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
  v18 = sub_10000F684();
  v19 = (char *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

  sub_10000CE50((uint64_t)v19);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  if (!((unint64_t)v21 >> 62))
  {
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_46;
  }
  if (v21 < 0)
    v88 = v21;
  else
    v88 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v89 = _CocoaArrayWrapper.endIndex.getter(v88);
  swift_bridgeObjectRelease(v21);
  if (!v89)
  {
LABEL_46:
    swift_bridgeObjectRelease(v21);
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v90 = type metadata accessor for Logger(0);
    v91 = sub_10000F66C(v90, (uint64_t)qword_1002AA3F8);
    v69 = Logger.logObject.getter(v91);
    v70 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v69, v70))
      goto LABEL_51;
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    v72 = "Failed to run NewTextTranslation test because there's no sceneDelegate";
    goto LABEL_50;
  }
LABEL_4:
  if ((v21 & 0xC000000000000001) != 0)
  {
    v22 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
  }
  else
  {
    if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_55;
    }
    v22 = (char *)*(id *)(v21 + 32);
  }
  v23 = v22;
  v99 = v22;
  swift_bridgeObjectRelease(v21);
  objc_msgSend((id)objc_opt_self(CATransaction), "setFrameStallSkipRequest:", 1);
  v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context];
  KeyPath = swift_getKeyPath(&unk_1001E6610);
  v26 = swift_getKeyPath(&unk_1001E6638);
  aBlock = 0;
  v102 = 0;
  swift_retain(v24);
  v27 = v26;
  v19 = v99;
  static Published.subscript.setter(&aBlock, v24, KeyPath, v27);
  v28 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window;
  v29 = *(void **)&v19[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window];
  if (!v29 || (v30 = objc_msgSend(v29, "viewWithTag:", 204)) == 0)
  {
LABEL_28:
    if (qword_10028A450 == -1)
    {
LABEL_29:
      v79 = type metadata accessor for Logger(0);
      v80 = sub_10000F66C(v79, (uint64_t)qword_1002AA3F8);
      v69 = Logger.logObject.getter(v80);
      v81 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v69, v81))
      {

        return 0;
      }
      v82 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v81, "Failed to run NewTextTranslation test because history scroll view can't be found", v82, 2u);
      swift_slowDealloc(v82, -1, -1);

      goto LABEL_51;
    }
LABEL_55:
    swift_once(&qword_10028A450, sub_100121050);
    goto LABEL_29;
  }
  v31 = v30;
  v32 = objc_opt_self(UICollectionView);
  v33 = swift_dynamicCastObjCClass(v31, v32);
  if (!v33)
  {

    goto LABEL_28;
  }
  v34 = (void *)v33;
  v35 = v31;
  v36 = v34;
  v37 = sub_1001DBB08();
  v94 = v35;

  if (!v37
    || (v38 = type metadata accessor for TranslationListController(),
        v39 = swift_dynamicCastClass(v37, v38),
        v37,
        !v39))
  {
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v73 = type metadata accessor for Logger(0);
    v74 = sub_10000F66C(v73, (uint64_t)qword_1002AA3F8);
    v69 = Logger.logObject.getter(v74);
    v75 = static os_log_type_t.error.getter();
    v76 = os_log_type_enabled(v69, v75);
    v77 = v99;
    if (!v76)
    {

LABEL_39:
      return 0;
    }
    v78 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v78 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v75, "Failed to run NewTextTranslation test because can't find TranslationListController", v78, 2u);
    swift_slowDealloc(v78, -1, -1);

LABEL_51:
    return 0;
  }
  v40 = v99;
  v41 = *(void **)&v99[v28];
  if (!v41)
    goto LABEL_34;
  v42 = objc_msgSend(v41, "viewWithTag:", 205);
  if (!v42)
    goto LABEL_34;
  v43 = v42;
  v44 = objc_opt_self(UITextView);
  v45 = swift_dynamicCastObjCClass(v43, v44);
  if (!v45)
  {

LABEL_34:
    if (qword_10028A450 != -1)
      swift_once(&qword_10028A450, sub_100121050);
    v83 = type metadata accessor for Logger(0);
    v84 = sub_10000F66C(v83, (uint64_t)qword_1002AA3F8);
    v69 = Logger.logObject.getter(v84);
    v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v85, "Failed to run NewTextTranslation test because can't find Translation TextView", v86, 2u);
      swift_slowDealloc(v86, -1, -1);

      goto LABEL_51;
    }

    goto LABEL_39;
  }
  v93 = v43;
  v46 = v45;
  v47 = sub_10014BF0C();
  sub_1001CD9F4(1);
  swift_release(v47);
  v48 = v36;
  objc_msgSend(v36, "reloadData");
  objc_msgSend(v36, "layoutIfNeeded");
  v49 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v50 = (void *)static OS_dispatch_queue.main.getter(v49);
  static DispatchTime.now()();
  + infix(_:_:)(v13, 2.0);
  v51 = *(void (**)(char *, uint64_t))(v10 + 8);
  v51(v13, v9);
  v52 = (_QWORD *)swift_allocObject(&unk_100263870, 40, 7);
  v52[2] = v48;
  v53 = v95;
  v52[3] = v95;
  v52[4] = v46;
  v105 = sub_10000F844;
  v106 = v52;
  aBlock = _NSConcreteStackBlock;
  v102 = 1107296256;
  v103 = sub_100075908;
  v104 = &unk_100263888;
  v54 = _Block_copy(&aBlock);
  v55 = v106;
  v94 = v94;
  v56 = v53;
  v95 = v93;
  v57 = swift_release(v55);
  static DispatchQoS.unspecified.getter(v57);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v58 = sub_10000F730();
  v59 = sub_100006DF4(&qword_10028AC30);
  v60 = sub_10000F778();
  v61 = v98;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v59, v60, v98, v58);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v54);
  _Block_release(v54);

  (*(void (**)(char *, uint64_t))(v97 + 8))(v5, v61);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v8, v100);
  v51(v15, v9);
  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v62 = type metadata accessor for Logger(0);
  v63 = sub_10000F66C(v62, (uint64_t)qword_1002AA3F8);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Starting NewTextTranslation test soon", v66, 2u);
    swift_slowDealloc(v66, -1, -1);

  }
  else
  {

  }
  return 1;
}

uint64_t sub_10000F15C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_10028A450 != -1)
    swift_once(&qword_10028A450, sub_100121050);
  v8 = type metadata accessor for Logger(0);
  sub_10000F66C(v8, (uint64_t)qword_1002AA3F8);
  swift_bridgeObjectRetain_n(a3, 2);
  v9 = swift_bridgeObjectRetain_n(a4, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v27 = v25;
    *(_DWORD *)v12 = 136446466;
    swift_bridgeObjectRetain(a3);
    v26 = sub_1001A7FE4(a2, a3, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 4);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v12 + 12) = 2082;
    swift_bridgeObjectRetain(a4);
    v13 = Dictionary.description.getter(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v14 = a3;
    v16 = v15;
    swift_bridgeObjectRelease(a4);
    v26 = sub_1001A7FE4(v13, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 14);
    swift_bridgeObjectRelease_n(a4, 2);
    v17 = v16;
    a3 = v14;
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Running test '%{public}s' with options: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  if (a2 == 0x69486C6C6F726353 && a3 == 0xED000079726F7473
    || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x69486C6C6F726353, 0xED000079726F7473, 0) & 1) != 0)
  {
    v18 = sub_10000D194(a1);
  }
  else if (a2 == 0x61466C6C6F726353 && a3 == 0xEF73657469726F76
         || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x61466C6C6F726353, 0xEF73657469726F76, 0) & 1) != 0)
  {
    v18 = sub_10000D9AC(a1);
  }
  else if (a2 == 0xD000000000000014 && a3 == 0x80000001001F84C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0xD000000000000014, 0x80000001001F84C0, 0) & 1) != 0)
  {
    v18 = sub_10000DF8C(a1);
  }
  else if (a2 == 0xD000000000000012 && a3 == 0x80000001001F84E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0xD000000000000012, 0x80000001001F84E0, 0) & 1) != 0)
  {
    v18 = sub_10000E7A4(a1);
  }
  else
  {
    v20 = swift_bridgeObjectRetain_n(a3, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v27 = v24;
      *(_DWORD *)v23 = 136446210;
      swift_bridgeObjectRetain(a3);
      v26 = sub_1001A7FE4(a2, a3, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v23 + 4);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Test name '%{public}s' doesn't match any known tests; failing",
        v23,
        0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_10000F66C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_10000F684()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AC18;
  if (!qword_10028AC18)
  {
    v1 = sub_10000A05C(255, (unint64_t *)&qword_10028AC10, UIScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10028AC18);
  }
  return result;
}

uint64_t sub_10000F6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000F6F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000F6FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10000F728()
{
  uint64_t v0;

  return sub_10000B9D0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10000F730()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291BF0;
  if (!qword_100291BF0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100291BF0);
  }
  return result;
}

unint64_t sub_10000F778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291C00;
  if (!qword_100291C00)
  {
    v1 = sub_1000070BC(&qword_10028AC30);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100291C00);
  }
  return result;
}

uint64_t sub_10000F7C4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10000F7CC()
{
  uint64_t v0;

  sub_10000BB4C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000F7D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10000F7F8()
{
  uint64_t v0;

  sub_10000C01C(*(void **)(v0 + 16));
}

uint64_t sub_10000F800()
{
  uint64_t v0;

  return sub_10000C484(*(void **)(v0 + 16), *(char **)(v0 + 24));
}

void sub_10000F808()
{
  uint64_t v0;

  sub_10000C808(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10000F810()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000F844()
{
  void **v0;

  return sub_10000C950(v0[2], v0[3], v0[4]);
}

void sub_10000F850()
{
  uint64_t v0;

  sub_10000CD40(*(void **)(v0 + 16));
}

double sub_10000F8A8()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100006DF4(&qword_10028ACC0);
  v1 = swift_allocObject(v0, 64, 7);
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v1 + 16) = xmmword_1001E6660;
  *(_QWORD *)(v1 + 32) = "oneSelectedWithSender:";
  *(_QWORD *)(v1 + 40) = "twoSelectedWithSender:";
  *(_QWORD *)(v1 + 48) = "threeSelectedWithSender:";
  *(_QWORD *)(v1 + 56) = "fourSelectedWithSender:";
  qword_1002AA010 = v1;
  return result;
}

uint64_t sub_10000F9B8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v7;
  uint64_t Strong;
  char *v9;
  _QWORD v11[4];

  swift_unknownObjectRetain(a3);
  v7 = a1;
  _bridgeAnyObjectToAny(_:)(v11, a3);
  swift_unknownObjectRelease(a3);
  Strong = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC17SequoiaTranslator7HitView_delegate]);
  if (Strong)
  {
    v9 = (char *)Strong;
    sub_10001073C(a4);

    v7 = v9;
  }

  return sub_100009C08(v11);
}

id sub_10000FB28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HitView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HitView()
{
  return objc_opt_self(_TtC17SequoiaTranslator7HitView);
}

id sub_10000FB88()
{
  char *v0;
  char *v1;
  char *v2;
  objc_class *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_hitView] = 0;
  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_delegate];
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectWeakInit(v1, 0);
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_currentAlternatives];
  v3 = (objc_class *)type metadata accessor for ASRAlternativesBehaviour();
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_QWORD *)v2 + 6) = 0;
  v9.receiver = v0;
  v9.super_class = v3;
  v4 = objc_msgSendSuper2(&v9, "init");
  v5 = (void *)objc_opt_self(NSNotificationCenter);
  v6 = v4;
  v7 = objc_msgSend(v5, "defaultCenter");
  objc_msgSend(v7, "addObserver:selector:name:object:", v6, "menuDidHideWithSender:", UIMenuControllerDidHideMenuNotification, 0);

  return v6;
}

id sub_10000FC8C()
{
  void *v0;
  id v1;
  objc_super v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:", v0);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ASRAlternativesBehaviour();
  return objc_msgSendSuper2(&v3, "dealloc");
}

id sub_10000FDCC(uint64_t a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat MinX;
  CGFloat MinY;
  char *v20;
  void *v21;
  char *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id result;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  Class isa;
  id v43;
  CGFloat *v44;
  void *v45;
  CGFloat v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  id v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CGFloat v77;
  CGFloat v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD aBlock[5];
  uint64_t v87;
  unint64_t v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;

  v3 = v2;
  v5 = (_QWORD *)a1;
  v6 = *(double *)a1;
  v7 = *(double *)(a1 + 8);
  v8 = *(double *)(a1 + 16);
  v9 = *(double *)(a1 + 24);
  v76 = *(_QWORD *)(a1 + 32);
  v75 = *(_QWORD *)(a1 + 40);
  v74 = *(_QWORD *)(a1 + 48);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v83 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v81 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  __chkstk_darwin(v13);
  v80 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for DispatchTime(0);
  v73 = *(_QWORD *)(v85 - 8);
  v15 = __chkstk_darwin(v85);
  v72 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v78 = v8;
  v79 = (char *)&v64 - v17;
  v77 = v9;
  objc_msgSend(a2, "frame");
  MinX = CGRectGetMinX(v89);
  objc_msgSend(a2, "frame");
  MinY = CGRectGetMinY(v90);
  v91.origin.x = v6;
  v91.origin.y = v7;
  v91.size.width = v8;
  v91.size.height = v9;
  v92 = CGRectOffset(v91, MinX, MinY);
  v20 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for HitView()), "initWithFrame:", v92.origin.x, v92.origin.y, v92.size.width, v92.size.height);
  *(_QWORD *)&v20[OBJC_IVAR____TtC17SequoiaTranslator7HitView_delegate + 8] = &off_100263990;
  swift_unknownObjectWeakAssign();
  v21 = (void *)objc_opt_self(UIColor);
  v22 = v20;
  v23 = objc_msgSend(v21, "clearColor");
  objc_msgSend(v22, "setBackgroundColor:", v23);

  v24 = objc_msgSend(a2, "superview");
  objc_msgSend(v24, "insertSubview:aboveSubview:", v22, a2);

  v25 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_hitView);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_hitView) = v22;
  v70 = v22;

  v71 = objc_msgSend((id)objc_opt_self(UIMenuController), "sharedMenuController");
  if (qword_10028A360 != -1)
    goto LABEL_21;
  while (1)
  {
    v26 = qword_1002AA010;
    v88 = (unint64_t)_swiftEmptyArrayStorage;
    v27 = *(_QWORD *)(qword_1002AA010 + 16);
    v28 = (void *)v5[4];
    swift_bridgeObjectRetain(qword_1002AA010);
    result = objc_msgSend(v28, "alternativeStrings");
    if (!result)
      goto LABEL_24;
    v30 = result;
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for String);

    v32 = *(_QWORD *)(v31 + 16);
    result = (id)swift_bridgeObjectRelease(v31);
    if (v32 < v27)
      v27 = v32;
    if (v27 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
    if (!v27)
      break;
    v65 = v7;
    v66 = v6;
    v67 = v3;
    v68 = v5;
    v69 = v12;
    v6 = 0.0;
    v7 = 0.0;
    while (v27 != *(_QWORD *)&v7)
    {
      result = objc_msgSend(v28, "alternativeStrings");
      if (!result)
        goto LABEL_23;
      v33 = result;
      v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for String);

      if (*(_QWORD *)&v7 >= *(_QWORD *)(v3 + 16))
        goto LABEL_19;
      v5 = *(_QWORD **)(v3 + *(_QWORD *)&v6 + 32);
      v34 = *(_QWORD *)(v3 + *(_QWORD *)&v6 + 40);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v3);
      if (*(_QWORD *)&v7 >= *(_QWORD *)(v26 + 16))
        goto LABEL_20;
      v35 = *(_QWORD *)(v26 + 8 * *(_QWORD *)&v7 + 32);
      v12 = (char *)objc_allocWithZone((Class)UIMenuItem);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v37 = objc_msgSend(v12, "initWithTitle:action:", v36, v35);

      v5 = v37;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v3 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v38 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v3 >= v38 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v3 + 1, 1);
      ++*(_QWORD *)&v7;
      v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v5);
      specialized Array._endMutation()(v39);

      *(_QWORD *)&v6 += 16;
      if (v27 == *(_QWORD *)&v7)
      {
        swift_bridgeObjectRelease(v26);
        v40 = (_QWORD *)v88;
        v41 = v69;
        v5 = v68;
        v3 = v67;
        v6 = v66;
        v7 = v65;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once(&qword_10028A360, sub_10000F8A8);
  }
  swift_bridgeObjectRelease(v26);
  v40 = _swiftEmptyArrayStorage;
  v41 = v12;
LABEL_17:
  sub_10000A05C(0, &qword_10028ACA8, UIMenuItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40);
  v43 = v71;
  objc_msgSend(v71, "setMenuItems:", isa);

  objc_msgSend(v43, "setArrowDirection:", 2);
  objc_msgSend(v43, "update");
  v44 = (CGFloat *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_currentAlternatives);
  v45 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_currentAlternatives + 32);
  *v44 = v6;
  v44[1] = v7;
  v46 = v77;
  v44[2] = v78;
  v44[3] = v46;
  v47 = v75;
  *((_QWORD *)v44 + 4) = v76;
  *((_QWORD *)v44 + 5) = v47;
  *((_QWORD *)v44 + 6) = v74;
  sub_100011128((uint64_t)v5);

  v48 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v49 = (void *)static OS_dispatch_queue.main.getter(v48);
  v50 = v72;
  static DispatchTime.now()();
  v51 = v79;
  + infix(_:_:)(v50, 0.1);
  v78 = *(double *)(v73 + 8);
  (*(void (**)(char *, uint64_t))&v78)(v50, v85);
  v52 = swift_allocObject(&unk_1002639B0, 24, 7);
  v53 = v70;
  *(_QWORD *)(v52 + 16) = v70;
  aBlock[4] = sub_100011174;
  v87 = v52;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_1002639C8;
  v54 = _Block_copy(aBlock);
  v55 = v87;
  v56 = v53;
  v57 = swift_release(v55);
  v58 = v80;
  static DispatchQoS.unspecified.getter(v57);
  aBlock[0] = _swiftEmptyArrayStorage;
  v59 = sub_10000F730();
  v60 = sub_100006DF4(&qword_10028AC30);
  v61 = sub_10000F778();
  v62 = v41;
  v63 = v84;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v60, v61, v84, v59);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v51, v58, v62, v54);
  _Block_release(v54);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v58, v82);
  return (id)(*(uint64_t (**)(char *, uint64_t))&v78)(v51, v85);
}

void sub_10001056C(void *a1)
{
  id v2;

  objc_msgSend(a1, "becomeFirstResponder");
  v2 = objc_msgSend((id)objc_opt_self(UIMenuController), "sharedMenuController");
  objc_msgSend(a1, "bounds");
  objc_msgSend(v2, "showMenuFromView:rect:", a1);

}

uint64_t sub_1000105E8(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD v13[7];
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v3 = objc_msgSend(a1, "view");
  if (v3)
  {
    v4 = v3;
    v5 = objc_opt_self(UITextView);
    v6 = swift_dynamicCastObjCClass(v4, v5);
    if (v6)
    {
      v7 = (void *)v6;
      sub_100010CD8(a1, v13);
      sub_1000110A4((uint64_t)v13, (uint64_t)v14, &qword_10028ACB0);
      if ((_QWORD)v15)
      {
        v17[0] = v14[0];
        v17[1] = v14[1];
        v17[2] = v15;
        v18 = v16;
        sub_10000FDCC((uint64_t)v17, v7);

        sub_10001107C((uint64_t)v13);
        return 1;
      }
    }

  }
  v9 = OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_hitView;
  v10 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_hitView);
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v11, "removeFromSuperview");
    v12 = *(void **)(v1 + v9);
    *(_QWORD *)(v1 + v9) = 0;

  }
  return 0;
}

void sub_10001073C(unint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_currentAlternatives);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_currentAlternatives + 32);
  if (!v3)
    return;
  v5 = v3;
  v6 = objc_msgSend(v5, "alternativeStrings");

  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String);

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(v7 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = v7 + 16 * a1;
  v10 = *(_QWORD *)(v8 + 32);
  v9 = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v7);
  if (v2[4]
    && (v11 = v2[5],
        v12 = v2[6],
        v13 = v1 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_delegate,
        (Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_delegate)) != 0))
  {
    v15 = Strong;
    v16 = *(_QWORD *)(v13 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8))(v10, v9, v11, v12, ObjectType, v16);
    swift_bridgeObjectRelease(v9);
    swift_unknownObjectRelease(v15);
  }
  else
  {
    swift_bridgeObjectRelease(v9);
  }
}

void sub_1000108B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  Class isa;
  id v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_hitView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_hitView);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v3, "removeFromSuperview");
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = 0;

  }
  v5 = (void *)objc_opt_self(UIMenuController);
  v6 = objc_msgSend(v5, "sharedMenuController");
  sub_10000A05C(0, &qword_10028ACA8, UIMenuItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setMenuItems:", isa);

  v8 = objc_msgSend(v5, "sharedMenuController");
  objc_msgSend(v8, "update");

}

uint64_t type metadata accessor for ASRAlternativesBehaviour()
{
  return objc_opt_self(_TtC17SequoiaTranslator24ASRAlternativesBehaviour);
}

void destroy for TappedAlternatives(uint64_t a1)
{

}

uint64_t initializeWithCopy for TappedAlternatives(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  id v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for TappedAlternatives(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = (void *)a2[4];
  v5 = (void *)a1[4];
  a1[4] = v4;
  v6 = v4;

  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for TappedAlternatives(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TappedAlternatives(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TappedAlternatives(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TappedAlternatives(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TappedAlternatives()
{
  return &type metadata for TappedAlternatives;
}

uint64_t sub_100010BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;

  if (qword_10028A360 != -1)
    goto LABEL_18;
  while (1)
  {
    v2 = qword_1002AA010;
    v3 = *(_QWORD *)(qword_1002AA010 + 16);
    if (!v3)
    {
      v5 = 0;
      return v5 & 1;
    }
    v4 = *(_QWORD *)(qword_1002AA010 + 32);
    swift_bridgeObjectRetain(qword_1002AA010);
    if ((static Selector.== infix(_:_:)(v4, a1) & 1) != 0)
      goto LABEL_4;
    if (v3 == 1)
      break;
    if ((static Selector.== infix(_:_:)(*(_QWORD *)(v2 + 40), a1) & 1) != 0)
    {
LABEL_4:
      v5 = 1;
      goto LABEL_8;
    }
    if (v3 == 2)
      break;
    v7 = 6;
    while (1)
    {
      v8 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v5 = static Selector.== infix(_:_:)(*(_QWORD *)(v2 + 8 * v7), a1);
      if ((v5 & 1) == 0)
      {
        ++v7;
        if (v8 != v3)
          continue;
      }
      goto LABEL_8;
    }
    __break(1u);
LABEL_18:
    swift_once(&qword_10028A360, sub_10000F8A8);
  }
  v5 = 0;
LABEL_8:
  swift_bridgeObjectRelease(v2);
  return v5 & 1;
}

void sub_100010CD8(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  int64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  NSString v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  _BYTE v42[24];
  uint64_t v43;

  v4 = objc_msgSend(a1, "view");
  v5 = 0;
  if (!v4)
    goto LABEL_24;
  v6 = v4;
  v7 = objc_opt_self(UITextView);
  v8 = swift_dynamicCastObjCClass(v6, v7);
  if (!v8)
    goto LABEL_23;
  v9 = (void *)v8;
  objc_msgSend(a1, "locationInView:", v8);
  v10 = objc_msgSend(v9, "closestPositionToPoint:");
  if (!v10)
    goto LABEL_23;
  v11 = v10;
  v12 = objc_msgSend(v9, "beginningOfDocument");
  v13 = (int64_t)objc_msgSend(v9, "offsetFromPosition:toPosition:", v12, v11);

  if (v13 < 0)
    goto LABEL_17;
  v14 = objc_msgSend(v9, "attributedText");
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "length");

    if (v13 >= (uint64_t)v16)
      goto LABEL_17;
    v39 = 0;
    v40 = 0;
    v17 = objc_msgSend(v9, "attributedText");
    if (v17)
    {
      v18 = v17;
      v19 = String._bridgeToObjectiveC()();
      v20 = objc_msgSend(v18, "attribute:atIndex:effectiveRange:", v19, v13, &v39);

      if (v20)
      {
        _bridgeAnyObjectToAny(_:)(v41, v20);
        swift_unknownObjectRelease(v20);
      }
      else
      {
        memset(v41, 0, sizeof(v41));
      }
      sub_1000110A4((uint64_t)v41, (uint64_t)v42, (uint64_t *)&unk_10028C0B0);
      if (!v43)
      {

        sub_1000110E8((uint64_t)v42);
        goto LABEL_24;
      }
      v21 = sub_10000A05C(0, &qword_10028ACB8, NSTextAlternatives_ptr);
      if ((swift_dynamicCast(&v38, v42, (char *)&type metadata for Any + 8, v21, 6) & 1) != 0)
      {
        v22 = v38;
        v23 = objc_msgSend(v9, "beginningOfDocument");
        v24 = v39;
        v25 = objc_msgSend(v9, "positionFromPosition:offset:", v23, v39);

        if (v25)
        {
          v26 = v40;
          v27 = objc_msgSend(v9, "positionFromPosition:offset:", v25, v40);
          if (v27)
          {
            v28 = v27;
            v29 = objc_msgSend(v9, "textRangeFromPosition:toPosition:", v25, v27);
            if (v29)
            {
              v30 = v29;
              objc_msgSend(v9, "firstRectForRange:", v29);
              v5 = v31;
              v33 = v32;
              v35 = v34;
              v37 = v36;

LABEL_25:
              *a2 = v5;
              a2[1] = v33;
              a2[2] = v35;
              a2[3] = v37;
              a2[4] = v22;
              a2[5] = v24;
              a2[6] = v26;
              return;
            }

          }
          else
          {
            v28 = v25;
          }

        }
LABEL_23:

        goto LABEL_24;
      }
LABEL_17:

LABEL_24:
      v22 = 0;
      v24 = 0;
      v26 = 0;
      v33 = 0;
      v35 = 0;
      v37 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10001107C(uint64_t a1)
{

  return a1;
}

uint64_t sub_1000110A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100006DF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000110E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4((uint64_t *)&unk_10028C0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100011128(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 32);
  return a1;
}

uint64_t sub_100011150()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100011174()
{
  uint64_t v0;

  sub_10001056C(*(void **)(v0 + 16));
}

uint64_t sub_10001117C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001118C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100011194(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void destroy for AudioDevice(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));

}

uint64_t initializeWithCopy for AudioDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(void **)(a2 + 72);
  v7 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v8 = v6;
  v9 = v7;
  return a1;
}

uint64_t assignWithCopy for AudioDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(void **)(a2 + 72);
  v11 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 80);
  v14 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  v15 = v13;

  return a1;
}

__n128 initializeWithTake for AudioDevice(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AudioDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);

  v10 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for AudioDevice(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioDevice()
{
  return &type metadata for AudioDevice;
}

uint64_t sub_10001148C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_100011498()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[6];
  v4 = v0[7];
  Hasher.init(_seed:)(v6, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_10001151C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  Swift::UInt v6;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[6];
  v6 = v1[7];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int sub_100011584(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;
  _QWORD v7[9];

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[6];
  v5 = v1[7];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_100011604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (v4 == v6 && v5 == v7)
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 1);
}

uint64_t sub_100011634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 == v2 && v5 == v3)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v3, 1) ^ 1;
  return v7 & 1;
}

uint64_t sub_100011670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (v4 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 1) ^ 1;
  return v9 & 1;
}

uint64_t sub_1000116B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 == v2 && v5 == v3)
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v3, 1);
}

BOOL sub_1000116DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  _BOOL8 result;

  v4 = a1[2];
  v5 = a1[3];
  v7 = a1[6];
  v6 = a1[7];
  v8 = a2[2];
  v9 = a2[3];
  v11 = a2[6];
  v10 = a2[7];
  if (v4 == v8 && v5 == v9)
  {
    if (v7 != v11)
      return 0;
    return v6 == v10;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v8, v9, 0);
  result = 0;
  if ((v13 & 1) != 0 && v7 == v11)
    return v6 == v10;
  return result;
}

unint64_t sub_100011760()
{
  unint64_t result;

  result = qword_10028ACC8;
  if (!qword_10028ACC8)
  {
    result = swift_getWitnessTable(&unk_1001E6730, &type metadata for AudioDevice);
    atomic_store(result, (unint64_t *)&qword_10028ACC8);
  }
  return result;
}

void *sub_1000117A4()
{
  return &protocol witness table for String;
}

uint64_t getEnumTagSinglePayload for AudioDevice.AudioChannelType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioDevice.AudioChannelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10001188C + 4 * byte_1001E6715[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000118C0 + 4 * byte_1001E6710[v4]))();
}

uint64_t sub_1000118C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000118C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000118D0);
  return result;
}

uint64_t sub_1000118DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000118E4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000118E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000118F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioDevice.AudioChannelType()
{
  return &type metadata for AudioDevice.AudioChannelType;
}

unint64_t sub_100011910()
{
  unint64_t result;

  result = qword_10028ACD0;
  if (!qword_10028ACD0)
  {
    result = swift_getWitnessTable(&unk_1001E6874, &type metadata for AudioDevice.AudioChannelType);
    atomic_store(result, (unint64_t *)&qword_10028ACD0);
  }
  return result;
}

uint64_t sub_100011954()
{
  uint64_t v0;
  char v2;

  v0 = sub_100006DF4(&qword_10028ACD8);
  sub_100011A00(v0, qword_1002AA018);
  sub_10000F66C(v0, (uint64_t)qword_1002AA018);
  v2 = 0;
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for AudioDeviceTip, 0x766544776F68732BLL, 0xEE00706954656369, &v2, _swiftEmptyArrayStorage, &type metadata for Bool, &type metadata for AudioDeviceTip, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t *sub_100011A00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for AudioDeviceTip(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for AudioDeviceTip(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for AudioDeviceTip(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for AudioDeviceTip(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioDeviceTip(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioDeviceTip(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioDeviceTip()
{
  return &type metadata for AudioDeviceTip;
}

uint64_t sub_100011B78(uint64_t a1, uint64_t a2)
{
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  Swift::String v16;

  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001001F8610;
  v5._countAndFlagsBits = 0xD000000000000010;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v16);

  v8 = sub_100006DF4(&qword_10028AA70);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001244C();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v10 = String.init(format:_:)(v7._countAndFlagsBits, v7._object, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v7._object);
  v15[0] = v10;
  v15[1] = v12;
  v13 = sub_10000B030();
  return Text.init<A>(_:)(v15, &type metadata for String, v13);
}

uint64_t sub_100011CA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[15];
  char v16;

  v4 = sub_100006DF4(&qword_10028AD00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100006DF4(&qword_10028AD08);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100012334(&qword_10028AD10, &qword_10028AD08, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(a1, v8, v12);
  v16 = 1;
  static PredicateExpressions.build_Arg<A>(_:)(&v16, &type metadata for Bool);
  a2[3] = sub_100006DF4(&qword_10028AD18);
  a2[4] = sub_100012210();
  sub_1000122F8(a2);
  v13 = sub_100012334(&qword_10028AD38, &qword_10028AD00, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v11, v7, v8, v4, v12, v13, &protocol witness table for Bool);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100011E3C()
{
  uint64_t *v0;

  return sub_100011B78(*v0, v0[1]);
}

uint64_t sub_100011E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v0 = sub_100006DF4(&qword_10028ACD8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_100006DF4(&qword_10028ACF8);
  v5 = type metadata accessor for Tips.Rule(0);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001E64F0;
  if (qword_10028A368 != -1)
    swift_once(&qword_10028A368, sub_100011954);
  v7 = sub_10000F66C(v0, (uint64_t)qword_1002AA018);
  swift_beginAccess(v7, v12, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v7, v0);
  Tips.Rule.init<A>(_:_:)(v3, sub_100011CA0, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v8 = static Tips.RuleBuilder.buildExpression(_:)(v6);
  swift_bridgeObjectRelease(v6);
  v9 = static Tips.RuleBuilder.buildPartialBlock(first:)(v8);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_100011FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;

  v0 = sub_100006DF4(&qword_10028ACE8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Tips.MaxDisplayCount(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028ACF0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Tips.MaxDisplayCount.init(_:)(1);
  static Tips.OptionsBuilder.buildExpression<A>(_:)(v7, v4, &protocol witness table for Tips.MaxDisplayCount);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = v4;
  v17 = &protocol witness table for Tips.MaxDisplayCount;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>, 1);
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)(v11, v8, OpaqueTypeConformance2);
  v16 = v8;
  v17 = (void *)OpaqueTypeConformance2;
  v13 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>, 1);
  v14 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)(v3, v0, v13);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

uint64_t sub_10001218C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_100012490();
  result = Tip.id.getter(a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_1000121CC()
{
  unint64_t result;

  result = qword_10028ACE0;
  if (!qword_10028ACE0)
  {
    result = swift_getWitnessTable(&unk_1001E68B4, &type metadata for AudioDeviceTip);
    atomic_store(result, (unint64_t *)&qword_10028ACE0);
  }
  return result;
}

unint64_t sub_100012210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AD20;
  if (!qword_10028AD20)
  {
    v1 = sub_1000070BC(&qword_10028AD18);
    sub_100012334(&qword_10028AD28, &qword_10028AD08, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    sub_100012294();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AD20);
  }
  return result;
}

unint64_t sub_100012294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AD30;
  if (!qword_10028AD30)
  {
    v1 = sub_1000070BC(&qword_10028AD00);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AD30);
  }
  return result;
}

_QWORD *sub_1000122F8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100012334(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012374()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  Swift::String v10;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001001F85F0;
  v1._countAndFlagsBits = 0xD000000000000012;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v10);

  v4 = String.init(format:_:)(v3._countAndFlagsBits, v3._object, _swiftEmptyArrayStorage);
  v6 = v5;
  swift_bridgeObjectRelease(v3._object);
  v9[0] = v4;
  v9[1] = v6;
  v7 = sub_10000B030();
  return Text.init<A>(_:)(v9, &type metadata for String, v7);
}

unint64_t sub_10001244C()
{
  unint64_t result;

  result = qword_10028AD40;
  if (!qword_10028AD40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10028AD40);
  }
  return result;
}

unint64_t sub_100012490()
{
  unint64_t result;

  result = qword_10028AD48;
  if (!qword_10028AD48)
  {
    result = swift_getWitnessTable(&unk_1001E68EC, &type metadata for AudioDeviceTip);
    atomic_store(result, (unint64_t *)&qword_10028AD48);
  }
  return result;
}

uint64_t destroy for AudioRoutingButton(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t _s17SequoiaTranslator18AudioRoutingButtonVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for AudioRoutingButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

__n128 initializeWithTake for AudioRoutingButton(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AudioRoutingButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioRoutingButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioRoutingButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioRoutingButton()
{
  return &type metadata for AudioRoutingButton;
}

uint64_t sub_100012694(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020EFB8, 1);
}

uint64_t sub_1000126A4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  swift_retain(a1);
  swift_retain(a2);
  v6 = sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v12);
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v8 = (v12 & 1) == 0;
  Binding.wrappedValue.setter(&v8, v6);
  swift_release(a2);
  return swift_release(a1);
}

uint64_t sub_100012748()
{
  uint64_t v0;

  v0 = LocalizedStringKey.init(stringLiteral:)(0x49545F4F49445541, 0xEB00000000454C54);
  return Label<>.init(_:systemImage:)(v0);
}

uint64_t sub_1000127B4()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1000127CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = sub_100006DF4(&qword_10028AD50);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = v0[1];
  v7 = *((_BYTE *)v0 + 16);
  v8 = swift_allocObject(&unk_100263D18, 33, 7);
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_BYTE *)(v8 + 32) = v7;
  swift_retain(v5);
  swift_retain(v6);
  v9 = sub_100006DF4(&qword_10028AB30);
  v10 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_100012958, v8, sub_100012748, 0, v9, v10);
  v11 = sub_100012334(&qword_10028AD58, &qword_10028AD50, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(0xD000000000000013, 0x80000001001F8630, v1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_10001292C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100012958()
{
  uint64_t v0;

  return sub_1000126A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

unint64_t sub_100012968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AD60;
  if (!qword_10028AD60)
  {
    v1 = sub_1000070BC(&qword_10028AD68);
    sub_100012334(&qword_10028AD58, &qword_10028AD50, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000129EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AD60);
  }
  return result;
}

unint64_t sub_1000129EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AD70;
  if (!qword_10028AD70)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_10028AD70);
  }
  return result;
}

uint64_t *sub_100012A34(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028AD78);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    if (v17)
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = v17;
      v18 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 3) = v18;
      v19 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
      *((_QWORD *)v15 + 5) = v19;
      *((_OWORD *)v15 + 3) = *((_OWORD *)v16 + 3);
      v15[64] = v16[64];
      v20 = (void *)*((_QWORD *)v16 + 9);
      v21 = (void *)*((_QWORD *)v16 + 10);
      *((_QWORD *)v15 + 9) = v20;
      *((_QWORD *)v15 + 10) = v21;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v22 = v20;
      v23 = v21;
    }
    else
    {
      v24 = *((_OWORD *)v16 + 3);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v24;
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_QWORD *)v15 + 10) = *((_QWORD *)v16 + 10);
      v25 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v25;
    }
    v26 = *((_QWORD *)v16 + 11);
    *((_QWORD *)v15 + 11) = v26;
    v27 = a3[6];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = *(uint64_t *)((char *)a2 + v27 + 8);
    swift_retain(v26);
    if (v30)
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = v30;
      v31 = *((_QWORD *)v29 + 3);
      *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
      *((_QWORD *)v28 + 3) = v31;
      v32 = *((_QWORD *)v29 + 5);
      *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
      *((_QWORD *)v28 + 5) = v32;
      *((_OWORD *)v28 + 3) = *((_OWORD *)v29 + 3);
      v28[64] = v29[64];
      v33 = (void *)*((_QWORD *)v29 + 9);
      v34 = (void *)*((_QWORD *)v29 + 10);
      *((_QWORD *)v28 + 9) = v33;
      *((_QWORD *)v28 + 10) = v34;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      v35 = v33;
      v36 = v34;
    }
    else
    {
      v37 = *((_OWORD *)v29 + 3);
      *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
      *((_OWORD *)v28 + 3) = v37;
      *((_OWORD *)v28 + 4) = *((_OWORD *)v29 + 4);
      *((_QWORD *)v28 + 10) = *((_QWORD *)v29 + 10);
      v38 = *((_OWORD *)v29 + 1);
      *(_OWORD *)v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v38;
    }
    v39 = *((_QWORD *)v29 + 11);
    *((_QWORD *)v28 + 11) = v39;
    v40 = a3[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = type metadata accessor for Locale(0);
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
    swift_retain(v39);
    v44(v41, v42, v43);
    v44((char *)a1 + a3[8], (char *)a2 + a3[8], v43);
    v45 = a3[9];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = *((_QWORD *)v47 + 1);
    if (v48)
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *((_QWORD *)v46 + 1) = v48;
      v49 = *((_QWORD *)v47 + 3);
      *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
      *((_QWORD *)v46 + 3) = v49;
      v50 = *((_QWORD *)v47 + 5);
      *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
      *((_QWORD *)v46 + 5) = v50;
      *((_OWORD *)v46 + 3) = *((_OWORD *)v47 + 3);
      v46[64] = v47[64];
      v51 = (void *)*((_QWORD *)v47 + 9);
      v52 = (void *)*((_QWORD *)v47 + 10);
      *((_QWORD *)v46 + 9) = v51;
      *((_QWORD *)v46 + 10) = v52;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      v53 = v51;
      v54 = v52;
    }
    else
    {
      v55 = *((_OWORD *)v47 + 3);
      *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
      *((_OWORD *)v46 + 3) = v55;
      *((_OWORD *)v46 + 4) = *((_OWORD *)v47 + 4);
      *((_QWORD *)v46 + 10) = *((_QWORD *)v47 + 10);
      v56 = *((_OWORD *)v47 + 1);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v56;
    }
    v57 = a3[10];
    v58 = a3[11];
    v59 = *(uint64_t *)((char *)a2 + v57);
    *(uint64_t *)((char *)a1 + v57) = v59;
    v60 = (uint64_t *)((char *)a1 + v58);
    v61 = (uint64_t *)((char *)a2 + v58);
    v62 = *v61;
    swift_bridgeObjectRetain(v59);
    if (v62)
    {
      v63 = v61[1];
      *v60 = v62;
      v60[1] = v63;
      swift_retain(v63);
    }
    else
    {
      *(_OWORD *)v60 = *(_OWORD *)v61;
    }
  }
  return a1;
}

uint64_t sub_100012D40(char *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t result;
  char *v16;

  v4 = sub_100006DF4(&qword_10028AD78);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*(_QWORD *)a1);
  }
  v6 = &a1[a2[5]];
  v7 = *((_QWORD *)v6 + 1);
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*((_QWORD *)v6 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v6 + 5));

  }
  swift_release(*((_QWORD *)v6 + 11));
  v8 = &a1[a2[6]];
  v9 = *((_QWORD *)v8 + 1);
  if (v9)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(*((_QWORD *)v8 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));

  }
  swift_release(*((_QWORD *)v8 + 11));
  v10 = &a1[a2[7]];
  v11 = type metadata accessor for Locale(0);
  v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(&a1[a2[8]], v11);
  v13 = &a1[a2[9]];
  v14 = *((_QWORD *)v13 + 1);
  if (v14)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(*((_QWORD *)v13 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v13 + 5));

  }
  result = swift_bridgeObjectRelease(*(_QWORD *)&a1[a2[10]]);
  v16 = &a1[a2[11]];
  if (*(_QWORD *)v16)
    return swift_release(*((_QWORD *)v16 + 1));
  return result;
}

_QWORD *sub_100012ED0(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;

  v6 = sub_100006DF4(&qword_10028AD78);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a2[v12 + 8];
  if (v15)
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = v15;
    v16 = *((_QWORD *)v14 + 3);
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    *((_QWORD *)v13 + 3) = v16;
    v17 = *((_QWORD *)v14 + 5);
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
    *((_QWORD *)v13 + 5) = v17;
    *((_OWORD *)v13 + 3) = *((_OWORD *)v14 + 3);
    v13[64] = v14[64];
    v18 = (void *)*((_QWORD *)v14 + 9);
    v19 = (void *)*((_QWORD *)v14 + 10);
    *((_QWORD *)v13 + 9) = v18;
    *((_QWORD *)v13 + 10) = v19;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    v20 = v18;
    v21 = v19;
  }
  else
  {
    v22 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v22;
    *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
    *((_QWORD *)v13 + 10) = *((_QWORD *)v14 + 10);
    v23 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v23;
  }
  v24 = *((_QWORD *)v14 + 11);
  *((_QWORD *)v13 + 11) = v24;
  v25 = a3[6];
  v26 = (char *)a1 + v25;
  v27 = &a2[v25];
  v28 = *(_QWORD *)&a2[v25 + 8];
  swift_retain(v24);
  if (v28)
  {
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = *((_QWORD *)v27 + 3);
    *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
    *((_QWORD *)v26 + 3) = v29;
    v30 = *((_QWORD *)v27 + 5);
    *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
    *((_QWORD *)v26 + 5) = v30;
    *((_OWORD *)v26 + 3) = *((_OWORD *)v27 + 3);
    v26[64] = v27[64];
    v31 = (void *)*((_QWORD *)v27 + 9);
    v32 = (void *)*((_QWORD *)v27 + 10);
    *((_QWORD *)v26 + 9) = v31;
    *((_QWORD *)v26 + 10) = v32;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    v33 = v31;
    v34 = v32;
  }
  else
  {
    v35 = *((_OWORD *)v27 + 3);
    *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
    *((_OWORD *)v26 + 3) = v35;
    *((_OWORD *)v26 + 4) = *((_OWORD *)v27 + 4);
    *((_QWORD *)v26 + 10) = *((_QWORD *)v27 + 10);
    v36 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v36;
  }
  v37 = *((_QWORD *)v27 + 11);
  *((_QWORD *)v26 + 11) = v37;
  v38 = a3[7];
  v39 = (char *)a1 + v38;
  v40 = &a2[v38];
  v41 = type metadata accessor for Locale(0);
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
  swift_retain(v37);
  v42(v39, v40, v41);
  v42((char *)a1 + a3[8], &a2[a3[8]], v41);
  v43 = a3[9];
  v44 = (char *)a1 + v43;
  v45 = &a2[v43];
  v46 = *((_QWORD *)v45 + 1);
  if (v46)
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *((_QWORD *)v44 + 1) = v46;
    v47 = *((_QWORD *)v45 + 3);
    *((_QWORD *)v44 + 2) = *((_QWORD *)v45 + 2);
    *((_QWORD *)v44 + 3) = v47;
    v48 = *((_QWORD *)v45 + 5);
    *((_QWORD *)v44 + 4) = *((_QWORD *)v45 + 4);
    *((_QWORD *)v44 + 5) = v48;
    *((_OWORD *)v44 + 3) = *((_OWORD *)v45 + 3);
    v44[64] = v45[64];
    v49 = (void *)*((_QWORD *)v45 + 9);
    v50 = (void *)*((_QWORD *)v45 + 10);
    *((_QWORD *)v44 + 9) = v49;
    *((_QWORD *)v44 + 10) = v50;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v48);
    v51 = v49;
    v52 = v50;
  }
  else
  {
    v53 = *((_OWORD *)v45 + 3);
    *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
    *((_OWORD *)v44 + 3) = v53;
    *((_OWORD *)v44 + 4) = *((_OWORD *)v45 + 4);
    *((_QWORD *)v44 + 10) = *((_QWORD *)v45 + 10);
    v54 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *((_OWORD *)v44 + 1) = v54;
  }
  v55 = a3[10];
  v56 = a3[11];
  v57 = *(_QWORD *)&a2[v55];
  *(_QWORD *)((char *)a1 + v55) = v57;
  v58 = (_QWORD *)((char *)a1 + v56);
  v59 = (uint64_t *)&a2[v56];
  v60 = *v59;
  swift_bridgeObjectRetain(v57);
  if (v60)
  {
    v61 = v59[1];
    *v58 = v60;
    v58[1] = v61;
    swift_retain(v61);
  }
  else
  {
    *(_OWORD *)v58 = *(_OWORD *)v59;
  }
  return a1;
}

char *sub_1000131B0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  id v95;
  void *v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id v104;
  id v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, &qword_10028AD78);
    v6 = sub_100006DF4(&qword_10028AD78);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t)&a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a1[v12 + 8];
  v16 = *(_QWORD *)&a2[v12 + 8];
  if (v15)
  {
    if (v16)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v17 = *((_QWORD *)v14 + 1);
      *(_QWORD *)(v13 + 8) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v15);
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      v18 = *((_QWORD *)v14 + 3);
      v19 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
      *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
      v20 = *((_QWORD *)v14 + 5);
      v21 = *(_QWORD *)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
      *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
      *(_BYTE *)(v13 + 64) = v14[64];
      v22 = (void *)*((_QWORD *)v14 + 9);
      v23 = *(void **)(v13 + 72);
      *(_QWORD *)(v13 + 72) = v22;
      v24 = v22;

      v25 = (void *)*((_QWORD *)v14 + 10);
      v26 = *(void **)(v13 + 80);
      *(_QWORD *)(v13 + 80) = v25;
      v27 = v25;

    }
    else
    {
      sub_1000137F8(v13);
      v35 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v35;
      v37 = *((_OWORD *)v14 + 3);
      v36 = *((_OWORD *)v14 + 4);
      v38 = *((_OWORD *)v14 + 2);
      *(_QWORD *)(v13 + 80) = *((_QWORD *)v14 + 10);
      *(_OWORD *)(v13 + 48) = v37;
      *(_OWORD *)(v13 + 64) = v36;
      *(_OWORD *)(v13 + 32) = v38;
    }
  }
  else if (v16)
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v28 = *((_QWORD *)v14 + 1);
    *(_QWORD *)(v13 + 8) = v28;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    v29 = *((_QWORD *)v14 + 3);
    *(_QWORD *)(v13 + 24) = v29;
    *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
    v30 = *((_QWORD *)v14 + 5);
    *(_QWORD *)(v13 + 40) = v30;
    *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
    *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
    *(_BYTE *)(v13 + 64) = v14[64];
    v31 = (void *)*((_QWORD *)v14 + 9);
    *(_QWORD *)(v13 + 72) = v31;
    v32 = (void *)*((_QWORD *)v14 + 10);
    *(_QWORD *)(v13 + 80) = v32;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    v33 = v31;
    v34 = v32;
  }
  else
  {
    v39 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v39;
    v40 = *((_OWORD *)v14 + 2);
    v41 = *((_OWORD *)v14 + 3);
    v42 = *((_OWORD *)v14 + 4);
    *(_QWORD *)(v13 + 80) = *((_QWORD *)v14 + 10);
    *(_OWORD *)(v13 + 48) = v41;
    *(_OWORD *)(v13 + 64) = v42;
    *(_OWORD *)(v13 + 32) = v40;
  }
  v43 = *(_QWORD *)(v13 + 88);
  v44 = *((_QWORD *)v14 + 11);
  *(_QWORD *)(v13 + 88) = v44;
  swift_retain(v44);
  swift_release(v43);
  v45 = a3[6];
  v46 = (uint64_t)&a1[v45];
  v47 = &a2[v45];
  v48 = *(_QWORD *)&a1[v45 + 8];
  v49 = *(_QWORD *)&a2[v45 + 8];
  if (v48)
  {
    if (v49)
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v50 = *((_QWORD *)v47 + 1);
      *(_QWORD *)(v46 + 8) = v50;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v48);
      *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
      v51 = *((_QWORD *)v47 + 3);
      v52 = *(_QWORD *)(v46 + 24);
      *(_QWORD *)(v46 + 24) = v51;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease(v52);
      *(_QWORD *)(v46 + 32) = *((_QWORD *)v47 + 4);
      v53 = *((_QWORD *)v47 + 5);
      v54 = *(_QWORD *)(v46 + 40);
      *(_QWORD *)(v46 + 40) = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v54);
      *(_QWORD *)(v46 + 48) = *((_QWORD *)v47 + 6);
      *(_QWORD *)(v46 + 56) = *((_QWORD *)v47 + 7);
      *(_BYTE *)(v46 + 64) = v47[64];
      v55 = (void *)*((_QWORD *)v47 + 9);
      v56 = *(void **)(v46 + 72);
      *(_QWORD *)(v46 + 72) = v55;
      v57 = v55;

      v58 = (void *)*((_QWORD *)v47 + 10);
      v59 = *(void **)(v46 + 80);
      *(_QWORD *)(v46 + 80) = v58;
      v60 = v58;

    }
    else
    {
      sub_1000137F8(v46);
      v68 = *((_OWORD *)v47 + 1);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *(_OWORD *)(v46 + 16) = v68;
      v70 = *((_OWORD *)v47 + 3);
      v69 = *((_OWORD *)v47 + 4);
      v71 = *((_OWORD *)v47 + 2);
      *(_QWORD *)(v46 + 80) = *((_QWORD *)v47 + 10);
      *(_OWORD *)(v46 + 48) = v70;
      *(_OWORD *)(v46 + 64) = v69;
      *(_OWORD *)(v46 + 32) = v71;
    }
  }
  else if (v49)
  {
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v61 = *((_QWORD *)v47 + 1);
    *(_QWORD *)(v46 + 8) = v61;
    *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
    v62 = *((_QWORD *)v47 + 3);
    *(_QWORD *)(v46 + 24) = v62;
    *(_QWORD *)(v46 + 32) = *((_QWORD *)v47 + 4);
    v63 = *((_QWORD *)v47 + 5);
    *(_QWORD *)(v46 + 40) = v63;
    *(_QWORD *)(v46 + 48) = *((_QWORD *)v47 + 6);
    *(_QWORD *)(v46 + 56) = *((_QWORD *)v47 + 7);
    *(_BYTE *)(v46 + 64) = v47[64];
    v64 = (void *)*((_QWORD *)v47 + 9);
    *(_QWORD *)(v46 + 72) = v64;
    v65 = (void *)*((_QWORD *)v47 + 10);
    *(_QWORD *)(v46 + 80) = v65;
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v63);
    v66 = v64;
    v67 = v65;
  }
  else
  {
    v72 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *(_OWORD *)(v46 + 16) = v72;
    v73 = *((_OWORD *)v47 + 2);
    v74 = *((_OWORD *)v47 + 3);
    v75 = *((_OWORD *)v47 + 4);
    *(_QWORD *)(v46 + 80) = *((_QWORD *)v47 + 10);
    *(_OWORD *)(v46 + 48) = v74;
    *(_OWORD *)(v46 + 64) = v75;
    *(_OWORD *)(v46 + 32) = v73;
  }
  v76 = *(_QWORD *)(v46 + 88);
  v77 = *((_QWORD *)v47 + 11);
  *(_QWORD *)(v46 + 88) = v77;
  swift_retain(v77);
  swift_release(v76);
  v78 = a3[7];
  v79 = &a1[v78];
  v80 = &a2[v78];
  v81 = type metadata accessor for Locale(0);
  v82 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 24);
  v82(v79, v80, v81);
  v82(&a1[a3[8]], &a2[a3[8]], v81);
  v83 = a3[9];
  v84 = (uint64_t)&a1[v83];
  v85 = &a2[v83];
  v86 = *(_QWORD *)&a1[v83 + 8];
  v87 = *(_QWORD *)&a2[v83 + 8];
  if (v86)
  {
    if (v87)
    {
      *(_QWORD *)v84 = *(_QWORD *)v85;
      v88 = *((_QWORD *)v85 + 1);
      *(_QWORD *)(v84 + 8) = v88;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRelease(v86);
      *(_QWORD *)(v84 + 16) = *((_QWORD *)v85 + 2);
      v89 = *((_QWORD *)v85 + 3);
      v90 = *(_QWORD *)(v84 + 24);
      *(_QWORD *)(v84 + 24) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v90);
      *(_QWORD *)(v84 + 32) = *((_QWORD *)v85 + 4);
      v91 = *((_QWORD *)v85 + 5);
      v92 = *(_QWORD *)(v84 + 40);
      *(_QWORD *)(v84 + 40) = v91;
      swift_bridgeObjectRetain(v91);
      swift_bridgeObjectRelease(v92);
      *(_QWORD *)(v84 + 48) = *((_QWORD *)v85 + 6);
      *(_QWORD *)(v84 + 56) = *((_QWORD *)v85 + 7);
      *(_BYTE *)(v84 + 64) = v85[64];
      v93 = (void *)*((_QWORD *)v85 + 9);
      v94 = *(void **)(v84 + 72);
      *(_QWORD *)(v84 + 72) = v93;
      v95 = v93;

      v96 = (void *)*((_QWORD *)v85 + 10);
      v97 = *(void **)(v84 + 80);
      *(_QWORD *)(v84 + 80) = v96;
      v98 = v96;

    }
    else
    {
      sub_1000137F8(v84);
      v106 = *((_OWORD *)v85 + 1);
      *(_OWORD *)v84 = *(_OWORD *)v85;
      *(_OWORD *)(v84 + 16) = v106;
      v108 = *((_OWORD *)v85 + 3);
      v107 = *((_OWORD *)v85 + 4);
      v109 = *((_OWORD *)v85 + 2);
      *(_QWORD *)(v84 + 80) = *((_QWORD *)v85 + 10);
      *(_OWORD *)(v84 + 48) = v108;
      *(_OWORD *)(v84 + 64) = v107;
      *(_OWORD *)(v84 + 32) = v109;
    }
  }
  else if (v87)
  {
    *(_QWORD *)v84 = *(_QWORD *)v85;
    v99 = *((_QWORD *)v85 + 1);
    *(_QWORD *)(v84 + 8) = v99;
    *(_QWORD *)(v84 + 16) = *((_QWORD *)v85 + 2);
    v100 = *((_QWORD *)v85 + 3);
    *(_QWORD *)(v84 + 24) = v100;
    *(_QWORD *)(v84 + 32) = *((_QWORD *)v85 + 4);
    v101 = *((_QWORD *)v85 + 5);
    *(_QWORD *)(v84 + 40) = v101;
    *(_QWORD *)(v84 + 48) = *((_QWORD *)v85 + 6);
    *(_QWORD *)(v84 + 56) = *((_QWORD *)v85 + 7);
    *(_BYTE *)(v84 + 64) = v85[64];
    v102 = (void *)*((_QWORD *)v85 + 9);
    *(_QWORD *)(v84 + 72) = v102;
    v103 = (void *)*((_QWORD *)v85 + 10);
    *(_QWORD *)(v84 + 80) = v103;
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v101);
    v104 = v102;
    v105 = v103;
  }
  else
  {
    v110 = *((_OWORD *)v85 + 1);
    *(_OWORD *)v84 = *(_OWORD *)v85;
    *(_OWORD *)(v84 + 16) = v110;
    v111 = *((_OWORD *)v85 + 2);
    v112 = *((_OWORD *)v85 + 3);
    v113 = *((_OWORD *)v85 + 4);
    *(_QWORD *)(v84 + 80) = *((_QWORD *)v85 + 10);
    *(_OWORD *)(v84 + 48) = v112;
    *(_OWORD *)(v84 + 64) = v113;
    *(_OWORD *)(v84 + 32) = v111;
  }
  v114 = a3[10];
  v115 = *(_QWORD *)&a2[v114];
  v116 = *(_QWORD *)&a1[v114];
  *(_QWORD *)&a1[v114] = v115;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRelease(v116);
  v117 = a3[11];
  v118 = &a1[v117];
  v119 = (uint64_t *)&a2[v117];
  v120 = *(_QWORD *)&a1[v117];
  v121 = *v119;
  if (!v120)
  {
    if (v121)
    {
      v124 = v119[1];
      *(_QWORD *)v118 = v121;
      *((_QWORD *)v118 + 1) = v124;
      swift_retain(v124);
      return a1;
    }
LABEL_33:
    *(_OWORD *)v118 = *(_OWORD *)v119;
    return a1;
  }
  if (!v121)
  {
    swift_release(*((_QWORD *)v118 + 1));
    goto LABEL_33;
  }
  v122 = v119[1];
  v123 = *((_QWORD *)v118 + 1);
  *(_QWORD *)v118 = v121;
  *((_QWORD *)v118 + 1) = v122;
  swift_retain(v122);
  swift_release(v123);
  return a1;
}

uint64_t sub_1000137F8(uint64_t a1)
{
  destroy for AudioDevice(a1);
  return a1;
}

char *sub_10001382C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_100006DF4(&qword_10028AD78);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 3);
  *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
  *((_OWORD *)v10 + 3) = v12;
  v13 = *((_OWORD *)v11 + 5);
  *((_OWORD *)v10 + 4) = *((_OWORD *)v11 + 4);
  *((_OWORD *)v10 + 5) = v13;
  v14 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v14;
  v15 = &a1[v9];
  v16 = &a2[v9];
  v17 = *((_OWORD *)v16 + 3);
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_OWORD *)v15 + 3) = v17;
  v18 = *((_OWORD *)v16 + 5);
  *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
  *((_OWORD *)v15 + 5) = v18;
  v19 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v19;
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for Locale(0);
  v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
  v24(v21, v22, v23);
  v24(&a1[a3[8]], &a2[a3[8]], v23);
  v25 = a3[9];
  v26 = a3[10];
  v27 = &a1[v25];
  v28 = &a2[v25];
  *((_QWORD *)v27 + 10) = *((_QWORD *)v28 + 10);
  v29 = *((_OWORD *)v28 + 3);
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  *((_OWORD *)v27 + 3) = v29;
  *((_OWORD *)v27 + 4) = *((_OWORD *)v28 + 4);
  v30 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v30;
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  v31 = a3[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *(_QWORD *)v33;
  if (*(_QWORD *)v33)
  {
    v35 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = v34;
    *((_QWORD *)v32 + 1) = v35;
  }
  else
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  return a1;
}

char *sub_1000139BC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, &qword_10028AD78);
    v6 = sub_100006DF4(&qword_10028AD78);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = (uint64_t)&a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8 + 8];
  if (v11)
  {
    v12 = *((_QWORD *)v10 + 1);
    if (v12)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)(v9 + 8) = v12;
      swift_bridgeObjectRelease(v11);
      v13 = *((_QWORD *)v10 + 3);
      v14 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 16) = *((_QWORD *)v10 + 2);
      *(_QWORD *)(v9 + 24) = v13;
      swift_bridgeObjectRelease(v14);
      v15 = *((_QWORD *)v10 + 5);
      v16 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(v9 + 32) = *((_QWORD *)v10 + 4);
      *(_QWORD *)(v9 + 40) = v15;
      swift_bridgeObjectRelease(v16);
      *(_OWORD *)(v9 + 48) = *((_OWORD *)v10 + 3);
      *(_BYTE *)(v9 + 64) = v10[64];
      v17 = *(void **)(v9 + 72);
      *(_QWORD *)(v9 + 72) = *((_QWORD *)v10 + 9);

      v18 = *(void **)(v9 + 80);
      *(_QWORD *)(v9 + 80) = *((_QWORD *)v10 + 10);

      goto LABEL_10;
    }
    sub_1000137F8(v9);
  }
  v19 = *((_OWORD *)v10 + 3);
  *(_OWORD *)(v9 + 32) = *((_OWORD *)v10 + 2);
  *(_OWORD *)(v9 + 48) = v19;
  *(_OWORD *)(v9 + 64) = *((_OWORD *)v10 + 4);
  *(_QWORD *)(v9 + 80) = *((_QWORD *)v10 + 10);
  v20 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v20;
LABEL_10:
  v21 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v9 + 88) = *((_QWORD *)v10 + 11);
  swift_release(v21);
  v22 = a3[6];
  v23 = (uint64_t)&a1[v22];
  v24 = &a2[v22];
  v25 = *(_QWORD *)&a1[v22 + 8];
  if (v25)
  {
    v26 = *((_QWORD *)v24 + 1);
    if (v26)
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_QWORD *)(v23 + 8) = v26;
      swift_bridgeObjectRelease(v25);
      v27 = *((_QWORD *)v24 + 3);
      v28 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
      *(_QWORD *)(v23 + 24) = v27;
      swift_bridgeObjectRelease(v28);
      v29 = *((_QWORD *)v24 + 5);
      v30 = *(_QWORD *)(v23 + 40);
      *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
      *(_QWORD *)(v23 + 40) = v29;
      swift_bridgeObjectRelease(v30);
      *(_OWORD *)(v23 + 48) = *((_OWORD *)v24 + 3);
      *(_BYTE *)(v23 + 64) = v24[64];
      v31 = *(void **)(v23 + 72);
      *(_QWORD *)(v23 + 72) = *((_QWORD *)v24 + 9);

      v32 = *(void **)(v23 + 80);
      *(_QWORD *)(v23 + 80) = *((_QWORD *)v24 + 10);

      goto LABEL_15;
    }
    sub_1000137F8(v23);
  }
  v33 = *((_OWORD *)v24 + 3);
  *(_OWORD *)(v23 + 32) = *((_OWORD *)v24 + 2);
  *(_OWORD *)(v23 + 48) = v33;
  *(_OWORD *)(v23 + 64) = *((_OWORD *)v24 + 4);
  *(_QWORD *)(v23 + 80) = *((_QWORD *)v24 + 10);
  v34 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v34;
LABEL_15:
  v35 = *(_QWORD *)(v23 + 88);
  *(_QWORD *)(v23 + 88) = *((_QWORD *)v24 + 11);
  swift_release(v35);
  v36 = a3[7];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = type metadata accessor for Locale(0);
  v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40);
  v40(v37, v38, v39);
  v40(&a1[a3[8]], &a2[a3[8]], v39);
  v41 = a3[9];
  v42 = (uint64_t)&a1[v41];
  v43 = &a2[v41];
  v44 = *(_QWORD *)&a1[v41 + 8];
  if (v44)
  {
    v45 = *((_QWORD *)v43 + 1);
    if (v45)
    {
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *(_QWORD *)(v42 + 8) = v45;
      swift_bridgeObjectRelease(v44);
      v46 = *((_QWORD *)v43 + 3);
      v47 = *(_QWORD *)(v42 + 24);
      *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
      *(_QWORD *)(v42 + 24) = v46;
      swift_bridgeObjectRelease(v47);
      v48 = *((_QWORD *)v43 + 5);
      v49 = *(_QWORD *)(v42 + 40);
      *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
      *(_QWORD *)(v42 + 40) = v48;
      swift_bridgeObjectRelease(v49);
      *(_OWORD *)(v42 + 48) = *((_OWORD *)v43 + 3);
      *(_BYTE *)(v42 + 64) = v43[64];
      v50 = *(void **)(v42 + 72);
      *(_QWORD *)(v42 + 72) = *((_QWORD *)v43 + 9);

      v51 = *(void **)(v42 + 80);
      *(_QWORD *)(v42 + 80) = *((_QWORD *)v43 + 10);

      goto LABEL_20;
    }
    sub_1000137F8(v42);
  }
  v52 = *((_OWORD *)v43 + 3);
  *(_OWORD *)(v42 + 32) = *((_OWORD *)v43 + 2);
  *(_OWORD *)(v42 + 48) = v52;
  *(_OWORD *)(v42 + 64) = *((_OWORD *)v43 + 4);
  *(_QWORD *)(v42 + 80) = *((_QWORD *)v43 + 10);
  v53 = *((_OWORD *)v43 + 1);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v53;
LABEL_20:
  v54 = a3[10];
  v55 = *(_QWORD *)&a1[v54];
  *(_QWORD *)&a1[v54] = *(_QWORD *)&a2[v54];
  swift_bridgeObjectRelease(v55);
  v56 = a3[11];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = *(_QWORD *)&a1[v56];
  v60 = *(_QWORD *)v58;
  if (!v59)
  {
    if (v60)
    {
      v63 = *((_QWORD *)v58 + 1);
      *(_QWORD *)v57 = v60;
      *((_QWORD *)v57 + 1) = v63;
      return a1;
    }
LABEL_26:
    *(_OWORD *)v57 = *(_OWORD *)v58;
    return a1;
  }
  if (!v60)
  {
    swift_release(*((_QWORD *)v57 + 1));
    goto LABEL_26;
  }
  v61 = *((_QWORD *)v58 + 1);
  v62 = *((_QWORD *)v57 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v61;
  swift_release(v62);
  return a1;
}

uint64_t sub_100013D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100013D40);
}

uint64_t sub_100013D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100006DF4(&qword_100291380);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Locale(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100013DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100013DF8);
}

uint64_t sub_100013DF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100006DF4(&qword_100291380);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Locale(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AudioRoutingMenu(uint64_t a1)
{
  uint64_t result;

  result = qword_10028ADD8;
  if (!qword_10028ADD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AudioRoutingMenu);
  return result;
}

void sub_100013EDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  void *v11;

  sub_100013F90(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Locale(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1001E69F0;
      v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v11 = &unk_1001E6A08;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

void sub_100013F90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002913F0)
  {
    v2 = type metadata accessor for DismissAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002913F0);
  }
}

uint64_t sub_100013FE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020F008, 1);
}

uint64_t sub_100013FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)();
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD v100[4];
  _QWORD v101[4];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v81 = a1;
  v94 = a2;
  v3 = type metadata accessor for AudioRoutingMenu(0);
  v90 = *(_QWORD *)(v3 - 8);
  v91 = v3;
  v95 = *(_QWORD *)(v90 + 64);
  __chkstk_darwin(v3);
  v98 = (uint64_t)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100006DF4(&qword_10028AE60);
  v84 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028AE50);
  v12 = *(_QWORD *)(v11 - 8);
  v86 = v11;
  v87 = v12;
  __chkstk_darwin(v11);
  v96 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_10028AE80);
  v88 = *(_QWORD *)(v14 - 8);
  v89 = v14;
  __chkstk_darwin(v14);
  v83 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100006DF4(&qword_10028AE40);
  __chkstk_darwin(v97);
  v85 = (uint64_t)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_10028AE30);
  v18 = *(_QWORD *)(v17 - 8);
  v92 = v17;
  v93 = v18;
  __chkstk_darwin(v17);
  v99 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101[2] = a1;
  v20 = sub_100006DF4(&qword_10028AE88);
  v21 = sub_100012334(&qword_10028AE90, &qword_10028AE88, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Form.init(content:)(sub_100016064, v101, v20, v21);
  v22 = LocalizedStringKey.init(stringLiteral:)(0x49545F4F49445541, 0xEB00000000454C54);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v5);
  v29 = sub_100012334(&qword_10028AE68, &qword_10028AE60, (uint64_t)&protocol conformance descriptor for Form<A>);
  v30 = v22;
  v31 = v82;
  View.navigationBarTitle(_:displayMode:)(v30, v24, v26 & 1, v28, v8, v82, v29);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v10, v31);
  v33 = v81;
  v100[2] = v81;
  v34 = sub_100006DF4(&qword_10028AE58);
  *(_QWORD *)&v102 = v32;
  *((_QWORD *)&v102 + 1) = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:displayMode:)>>, 1);
  v36 = sub_100012334(&qword_10028AE70, &qword_10028AE58, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v37 = v83;
  v38 = v86;
  v39 = v96;
  View.toolbar<A>(content:)(sub_10001606C, v100, v86, v34, OpaqueTypeConformance2, v36);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v39, v38);
  v40 = v33;
  v41 = v98;
  sub_100016074(v33, v98);
  v42 = *(unsigned __int8 *)(v90 + 80);
  v43 = (char *)(((v42 + 16) & ~v42) + v95);
  v44 = (v42 + 16) & ~v42;
  v95 = v42 | 7;
  v96 = v43;
  v45 = swift_allocObject(&unk_100263D78, v43, v42 | 7);
  v46 = v44;
  v90 = v44;
  sub_1000160BC(v41, v45 + v44);
  v48 = v88;
  v47 = v89;
  v49 = v85;
  (*(void (**)(uint64_t, char *, unint64_t))(v88 + 16))(v85, v37, v89);
  v50 = v97;
  v51 = (uint64_t (**)())(v49 + *(int *)(v97 + 36));
  *v51 = sub_100016100;
  v51[1] = (uint64_t (*)())v45;
  v51[2] = 0;
  v51[3] = 0;
  (*(void (**)(char *, unint64_t))(v48 + 8))(v37, v47);
  v52 = v91;
  v53 = (__int128 *)(v40 + *(int *)(v91 + 20));
  v54 = v53[1];
  v102 = *v53;
  v103 = v54;
  v55 = v53[3];
  v104 = v53[2];
  v105 = v55;
  v56 = v53[5];
  v106 = v53[4];
  v107 = v56;
  sub_100006DF4(&qword_10028AE98);
  State.wrappedValue.getter(&v108);
  v102 = v108;
  v103 = v109;
  v104 = v110;
  v105 = v111;
  v106 = v112;
  *(_QWORD *)&v107 = v113;
  v57 = v41;
  sub_100016074(v40, v41);
  v58 = swift_allocObject(&unk_100263DA0, v96, v95);
  sub_1000160BC(v57, v58 + v46);
  v59 = sub_100006DF4(&qword_10028AE38);
  v88 = v59;
  v60 = sub_100015F4C();
  v89 = v60;
  v87 = sub_1000165A4(&qword_10028AE78, &qword_10028AE38, (void (*)(void))sub_100011760, (uint64_t)&protocol conformance descriptor for <A> A?);
  View.onChange<A>(of:initial:_:)(&v102, 0, sub_100016110, v58, v50, v59, v60, v87);
  swift_release(v58);
  sub_10001613C(v102, *((uint64_t *)&v102 + 1), v103, *((uint64_t *)&v103 + 1), v104, *((uint64_t *)&v104 + 1), v105, *((uint64_t *)&v105 + 1), v106, *((void **)&v106 + 1), (void *)v107);
  sub_10000A020(v49, &qword_10028AE40);
  v61 = v40;
  v62 = (uint64_t *)(v40 + *(int *)(v52 + 36));
  v63 = v62[1];
  v91 = *v62;
  v64 = v62[3];
  v85 = v62[2];
  v86 = v63;
  v65 = v62[4];
  v66 = v62[5];
  v67 = v62[6];
  v84 = v62[7];
  v68 = v62[8];
  v69 = (void *)v62[9];
  v70 = (void *)v62[10];
  *(_QWORD *)&v102 = v91;
  *((_QWORD *)&v102 + 1) = v63;
  *(_QWORD *)&v103 = v85;
  *((_QWORD *)&v103 + 1) = v64;
  *(_QWORD *)&v104 = v65;
  *((_QWORD *)&v104 + 1) = v66;
  *(_QWORD *)&v105 = v67;
  *((_QWORD *)&v105 + 1) = v84;
  *(_QWORD *)&v106 = v68;
  *((_QWORD *)&v106 + 1) = v69;
  *(_QWORD *)&v107 = v70;
  v71 = v98;
  sub_100016074(v61, v98);
  v72 = swift_allocObject(&unk_100263DC8, v96, v95);
  sub_1000160BC(v71, v72 + v90);
  sub_1000161E0(v91, v86, v85, v64, v65, v66, v67, v84, v68, v69, v70);
  v74 = v87;
  v73 = v88;
  *(_QWORD *)&v108 = v97;
  *((_QWORD *)&v108 + 1) = v88;
  *(_QWORD *)&v109 = v89;
  *((_QWORD *)&v109 + 1) = v87;
  v75 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v76 = v92;
  v77 = v73;
  v78 = v99;
  View.onChange<A>(of:initial:_:)(&v102, 0, sub_100016100, v72, v92, v77, v75, v74);
  swift_release(v72);
  sub_10001613C(v102, *((uint64_t *)&v102 + 1), v103, *((uint64_t *)&v103 + 1), v104, *((uint64_t *)&v104 + 1), v105, *((uint64_t *)&v105 + 1), v106, *((void **)&v106 + 1), (void *)v107);
  return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v78, v76);
}

uint64_t sub_1000146E0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;

  v36 = a2;
  v3 = sub_100006DF4(&qword_10028AEE8);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v35 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - v7;
  v9 = sub_100006DF4(&qword_10028AEF0);
  v37 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - v13;
  v41 = a1;
  v15 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001001F8650);
  v42[0] = Text.init(_:tableName:bundle:comment:)(v15);
  v42[1] = v16;
  v43 = v17 & 1;
  v44 = v18;
  v19 = sub_100006DF4(&qword_10028AEF8);
  v20 = sub_100012334(&qword_10028AF00, &qword_10028AEF8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Section<>.init(header:content:)(v42, sub_100016544, v40, &type metadata for Text, v19, &protocol witness table for Text, v20);
  v39 = a1;
  v21 = sub_100006DF4(&qword_10028AF08);
  v22 = sub_100012334(&qword_10028AF10, &qword_10028AF08, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v33 = v8;
  Section<>.init(content:)(sub_10001654C, v38, v21, v22);
  v23 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v34 = v12;
  v23(v12, v14, v9);
  v24 = v4;
  v25 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v26 = v35;
  v25(v35, v8, v3);
  v27 = v36;
  v23(v36, v12, v9);
  v28 = sub_100006DF4(&qword_10028AF18);
  v25(&v27[*(int *)(v28 + 48)], v26, v3);
  v29 = *(void (**)(char *, uint64_t))(v24 + 8);
  v29(v33, v3);
  v30 = *(void (**)(char *, uint64_t))(v37 + 8);
  v30(v14, v9);
  v29(v26, v3);
  return ((uint64_t (*)(char *, uint64_t))v30)(v34, v9);
}

uint64_t sub_100014994@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(_BYTE *, _BYTE *, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  void (*v75)(_BYTE *, uint64_t);
  _QWORD v77[4];
  _BYTE v78[4];
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  uint64_t v128;

  v104 = a1;
  v103 = a2;
  v93 = type metadata accessor for MenuOrder(0);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v91 = &v78[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v90 = sub_100006DF4(&qword_10028AF30);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v88 = &v78[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v100 = sub_100006DF4(&qword_10028AF38);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v87 = &v78[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100006DF4(&qword_10028AF40);
  v6 = __chkstk_darwin(v5);
  v102 = &v78[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v95 = &v78[-v8];
  v101 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v11 = &v78[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100006DF4(&qword_10028AF20);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v98 = &v78[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v18 = &v78[-v17];
  __chkstk_darwin(v16);
  v20 = &v78[-v19];
  v97 = LocalizedStringKey.init(stringLiteral:)(0x45474155474E414CLL, 0xEE004C4542414C5FLL);
  v96 = v21;
  v23 = v22;
  v94 = v24;
  v25 = type metadata accessor for AudioRoutingMenu(0);
  static Locale.current.getter();
  v26 = Locale.sqDisplayName(context:in:)(4, v11);
  v28 = v27;
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v101);
  if (v28)
    v29 = v26;
  else
    v29 = 0;
  v30 = 0xE000000000000000;
  if (v28)
    v30 = v28;
  v117 = v29;
  v118 = v30;
  v31 = sub_10000B030();
  LabeledContent<>.init<A>(_:value:)(v97, v96, v23 & 1, v94, &v117, &type metadata for String, v31);
  v97 = v13;
  v32 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32);
  v96 = v20;
  v101 = v12;
  v32(v20, v18, v12);
  v33 = (uint64_t *)(v104 + *(int *)(v25 + 20));
  v34 = *v33;
  v35 = v33[1];
  v36 = v33[2];
  v37 = v33[3];
  v38 = v33[4];
  v39 = v33[5];
  v41 = v33[6];
  v40 = v33[7];
  v42 = v33[8];
  v43 = (void *)v33[9];
  v45 = (void *)v33[10];
  v44 = v33[11];
  v117 = v34;
  v118 = v35;
  v119 = v36;
  v120 = v37;
  v121 = v38;
  v122 = v39;
  v123 = v41;
  v124 = v40;
  v94 = v40;
  v86 = v42;
  v125 = v42;
  v126 = v43;
  v85 = v43;
  v84 = v45;
  v127 = v45;
  v128 = v44;
  v83 = v44;
  v46 = sub_100006DF4(&qword_10028AE98);
  State.wrappedValue.getter(&v105);
  v47 = v106;
  sub_10001613C(v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115);
  if (v47)
  {
    v82 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001001F8670);
    v81 = v48;
    v79 = v49;
    v80 = v50;
    v105 = v34;
    v106 = v35;
    v107 = v36;
    v108 = v37;
    v109 = v38;
    v110 = v39;
    v111 = v41;
    v112 = v94;
    v113 = v86;
    v114 = v85;
    v115 = v84;
    v116 = v83;
    v51 = State.projectedValue.getter(&v117, v46);
    __chkstk_darwin(v51);
    v52 = sub_100006DF4(&qword_10028AE38);
    v53 = sub_100006DF4(&qword_10028AF50);
    v77[1] = sub_1000165A4(&qword_10028AF58, &qword_10028AE38, (void (*)(void))sub_100016608, (uint64_t)&protocol conformance descriptor for <A> A?);
    v77[2] = sub_1000165A4(&qword_10028AF68, &qword_10028AF50, (void (*)(void))sub_10001664C, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    v77[0] = v53;
    v54 = v88;
    v55 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t (*)(), _QWORD *, uint64_t))Picker<>.init(_:selection:content:))(v82, v81, v79 & 1, v80, &v117, sub_10001659C, v77, v52);
    v56 = v91;
    static MenuOrder.fixed.getter(v55);
    v57 = sub_100012334(&qword_10028AFB0, &qword_10028AF30, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    v58 = v87;
    v59 = v90;
    View.menuOrder(_:)(v56, v90, v57);
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v56, v93);
    (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v54, v59);
    v60 = v99;
    v61 = v95;
    v62 = v100;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 32))(v95, v58, v100);
    v63 = 0;
    v64 = v62;
    v65 = (uint64_t)v61;
    v66 = v60;
  }
  else
  {
    v63 = 1;
    v64 = v100;
    v65 = (uint64_t)v95;
    v66 = v99;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v65, v63, 1, v64);
  v67 = v97;
  v68 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v97 + 16);
  v69 = v98;
  v70 = v96;
  v71 = v101;
  v68(v98, v96, v101);
  v72 = v102;
  sub_100016554(v65, (uint64_t)v102);
  v73 = v103;
  v68(v103, v69, v71);
  v74 = sub_100006DF4(&qword_10028AF48);
  sub_100016554((uint64_t)v72, (uint64_t)&v73[*(int *)(v74 + 48)]);
  sub_10000A020(v65, &qword_10028AF40);
  v75 = *(void (**)(_BYTE *, uint64_t))(v67 + 8);
  v75(v70, v71);
  sub_10000A020((uint64_t)v72, &qword_10028AF40);
  return ((uint64_t (*)(_BYTE *, uint64_t))v75)(v69, v71);
}

uint64_t sub_100015124(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AudioRoutingMenu(0) + 40));
  KeyPath = swift_getKeyPath(&unk_1001E6AA8);
  swift_bridgeObjectRetain(v8);
  v2 = sub_100006DF4(&qword_10028AFB8);
  v3 = sub_100006DF4(&qword_10028AF78);
  v4 = sub_100016754();
  v5 = sub_100016608();
  v6 = sub_10001664C();
  return ((uint64_t (*)(uint64_t *, uint64_t, id (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>), _QWORD, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t))ForEach<>.init(_:id:content:))(&v8, KeyPath, sub_1000151EC, 0, v2, v3, v4, v5, v6);
}

id sub_1000151EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD v23[2];

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v20 = a1[7];
  v21 = (id)a1[6];
  v19 = *((unsigned __int8 *)a1 + 64);
  v10 = (void *)a1[9];
  v9 = (void *)a1[10];
  v23[0] = a1[2];
  v6 = v23[0];
  v23[1] = v5;
  v11 = sub_10000B030();
  swift_bridgeObjectRetain(v5);
  v12 = Text.init<A>(_:)(v23, &type metadata for String, v11);
  LOBYTE(v23[0]) = v13 & 1;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_BYTE *)(a2 + 16) = v13 & 1;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v3;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v5;
  *(_QWORD *)(a2 + 64) = v8;
  *(_QWORD *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 80) = v21;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v19;
  *(_QWORD *)(a2 + 104) = v10;
  *(_QWORD *)(a2 + 112) = v9;
  *(_QWORD *)(a2 + 120) = v4;
  *(_QWORD *)(a2 + 128) = v3;
  *(_QWORD *)(a2 + 136) = v6;
  *(_QWORD *)(a2 + 144) = v5;
  *(_QWORD *)(a2 + 152) = v8;
  *(_QWORD *)(a2 + 160) = v7;
  *(_QWORD *)(a2 + 168) = v21;
  *(_QWORD *)(a2 + 176) = v20;
  *(_QWORD *)(a2 + 184) = v19;
  *(_QWORD *)(a2 + 192) = v10;
  *(_QWORD *)(a2 + 200) = v9;
  swift_bridgeObjectRetain_n(v3, 2);
  swift_bridgeObjectRetain_n(v5, 2);
  swift_bridgeObjectRetain_n(v7, 2);
  v16 = v10;
  v22 = v9;
  v17 = v16;
  return v22;
}

uint64_t sub_100015300@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;

  v59 = a1;
  v1 = type metadata accessor for Locale(0);
  v53 = *(_QWORD *)(v1 - 8);
  v54 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028AF20);
  v55 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v58 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v57 = (char *)&v52 - v8;
  v9 = __chkstk_darwin(v7);
  v56 = (char *)&v52 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v52 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v52 - v14;
  v52 = (char *)&v52 - v14;
  v16 = LocalizedStringKey.init(stringLiteral:)(0x45474155474E414CLL, 0xEE004C4542414C5FLL);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  type metadata accessor for AudioRoutingMenu(0);
  static Locale.current.getter();
  v23 = Locale.sqDisplayName(context:in:)(4, v3);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v3, v54);
  if (v25)
    v26 = v23;
  else
    v26 = 0;
  v27 = 0xE000000000000000;
  if (v25)
    v27 = v25;
  v60 = v26;
  v61 = v27;
  v28 = sub_10000B030();
  LabeledContent<>.init<A>(_:value:)(v16, v18, v20 & 1, v22, &v60, &type metadata for String, v28);
  v29 = v55;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v15, v13, v4);
  v30 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001001F8670);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v38 = objc_msgSend(v37, "name");

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  v60 = v39;
  v61 = v41;
  v42 = v56;
  LabeledContent<>.init<A>(_:value:)(v30, v32, v34 & 1, v36, &v60, &type metadata for String, v28);
  v43 = v29;
  v44 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v45 = v57;
  v46 = v52;
  v44(v57, v52, v4);
  v47 = v58;
  v44(v58, v42, v4);
  v48 = v59;
  v44(v59, v45, v4);
  v49 = sub_100006DF4(&qword_10028AF28);
  v44(&v48[*(int *)(v49 + 48)], v47, v4);
  v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  v50(v42, v4);
  v50(v46, v4);
  v50(v47, v4);
  return ((uint64_t (*)(char *, uint64_t))v50)(v45, v4);
}

uint64_t sub_100015658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;
  char v32[16];
  uint64_t v33;

  v29 = a2;
  v28 = sub_100006DF4(&qword_10028AEA0);
  __chkstk_darwin(v28);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100006DF4(&qword_10028AEA8);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028AEB0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.navigationBarLeading.getter(v13);
  v33 = a1;
  v16 = sub_100006DF4(&qword_10028AEB8);
  v17 = sub_100012334(&qword_10028AEC0, &qword_10028AEB8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v18 = ToolbarItem<>.init(placement:content:)(v10, sub_1000162C4, v32, v16, v17);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v18);
  v31 = a1;
  v19 = sub_100006DF4(&qword_10028AEC8);
  v20 = sub_1000162D4();
  ToolbarItem<>.init(placement:content:)(v10, sub_1000162CC, v30, v19, v20);
  v21 = v28;
  v22 = &v4[*(int *)(v28 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v15, v11);
  v23 = v22;
  v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v23, v7, v27);
  TupleToolbarContent.init(_:)(v4, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_100015888(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for AudioRoutingMenu(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = LocalizedStringKey.init(stringLiteral:)(0x4C45434E4143, 0xE600000000000000);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  sub_100016074(a1, (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_100263E40, v13 + v4, v12 | 7);
  sub_1000160BC((uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  return Button<>.init(_:action:)(v5, v7, v9 & 1, v11, sub_100016374, v14);
}

uint64_t sub_100015984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  v3 = type metadata accessor for AudioRoutingMenu(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v27 = sub_100006DF4(&qword_10028AEB8);
  v6 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = LocalizedStringKey.init(stringLiteral:)(1162760004, 0xE400000000000000);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  sub_100016074(a1, (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(unsigned __int8 *)(v4 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_100263E18, v17 + v5, v16 | 7);
  sub_1000160BC((uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  v19 = Button<>.init(_:action:)(v9, v11, v13 & 1, v15, sub_100016374, v18);
  v20 = static Font.body.getter(v19);
  v21 = Font.bold()();
  swift_release(v20);
  KeyPath = swift_getKeyPath(&unk_1001E6A70);
  v24 = v27;
  v23 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v28, v8, v27);
  v25 = (uint64_t *)(v23 + *(int *)(sub_100006DF4(&qword_10028AEC8) + 36));
  *v25 = KeyPath;
  v25[1] = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v24);
}

uint64_t sub_100015B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v0 = type metadata accessor for DismissAction(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000D5494(v3);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_100015BA4(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t (*v21)(uint64_t);
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;

  v2 = type metadata accessor for AudioRoutingMenu(0);
  v3 = (__int128 *)(a1 + *(int *)(v2 + 20));
  v4 = v3[1];
  v26 = *v3;
  v27 = v4;
  v5 = v3[3];
  v28 = v3[2];
  v29 = v5;
  v6 = v3[5];
  v30 = v3[4];
  v31 = v6;
  sub_100006DF4(&qword_10028AE98);
  State.wrappedValue.getter(&v32);
  v7 = v33;
  if (v33)
  {
    v8 = v32;
    v10 = v34;
    v9 = v35;
    v11 = v36;
    v12 = v37;
    v13 = v38;
    v24 = v40;
    v25 = v39;
    v22 = v42;
    v23 = v41;
    v14 = (uint64_t *)(a1 + *(int *)(v2 + 44));
    v16 = *v14;
    v15 = v14[1];
    if (*v14)
    {
      v17 = v14[1];
      v18 = swift_allocObject(&unk_100263DF0, 32, 7);
      v15 = v17;
      v19 = v18;
      *(_QWORD *)(v18 + 16) = v16;
      *(_QWORD *)(v18 + 24) = v17;
      v20 = sub_100016278;
    }
    else
    {
      v19 = 0;
      v20 = (uint64_t (*)(uint64_t))nullsub_1;
    }
    v21 = v20;
    *(_QWORD *)&v26 = v8;
    *((_QWORD *)&v26 + 1) = v7;
    *(_QWORD *)&v27 = v10;
    *((_QWORD *)&v27 + 1) = v9;
    *(_QWORD *)&v28 = v11;
    *((_QWORD *)&v28 + 1) = v12;
    *(_QWORD *)&v29 = v13;
    *((_QWORD *)&v29 + 1) = v25;
    LOBYTE(v30) = v24;
    *((_QWORD *)&v30 + 1) = v23;
    *(_QWORD *)&v31 = v22;
    sub_100016244(v16, v15);
    v21((uint64_t)&v26);
    swift_release(v19);
    sub_10001613C(v8, v7, v10, v9, v11, v12, v13, v25, v24, v23, v22);
  }
}

uint64_t sub_100015D18(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[5];
  uint64_t v6;

  v2 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  return a2(v5);
}

uint64_t sub_100015D64(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  _QWORD v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v2 = type metadata accessor for AudioRoutingMenu(0);
  v3 = (uint64_t *)(a1 + *(int *)(v2 + 36));
  result = v3[1];
  if (result)
  {
    v6 = (void *)v3[9];
    v5 = (void *)v3[10];
    v7 = v3[2];
    v8 = *v3;
    v9 = (__int128 *)(a1 + *(int *)(v2 + 20));
    v10 = v9[1];
    v25 = *v9;
    v26 = v10;
    v11 = v9[3];
    v27 = v9[2];
    v12 = v9[4];
    v13 = v9[5];
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v19[0] = v8;
    v19[1] = result;
    v19[2] = v7;
    v14 = *(_OWORD *)(v3 + 5);
    v20 = *(_OWORD *)(v3 + 3);
    v21 = v14;
    v22 = *(_OWORD *)(v3 + 7);
    v15 = v14;
    v23 = v6;
    v24 = v5;
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v15);
    v16 = v6;
    v17 = v5;
    v18 = sub_100006DF4(&qword_10028AE98);
    return State.wrappedValue.setter(v19, v18);
  }
  return result;
}

uint64_t sub_100015E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v0 = sub_100006DF4(&qword_10028AE28);
  v1 = sub_1000070BC(&qword_10028AE30);
  v2 = sub_1000070BC(&qword_10028AE38);
  v3 = sub_1000070BC(&qword_10028AE40);
  v4 = sub_100015F4C();
  v5 = sub_1000165A4(&qword_10028AE78, &qword_10028AE38, (void (*)(void))sub_100011760, (uint64_t)&protocol conformance descriptor for <A> A?);
  v10 = v3;
  v11 = v2;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v10 = v1;
  v11 = v2;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  return NavigationStack.init<>(root:)(sub_100015F44, &v9, v0, v7);
}

uint64_t sub_100015F44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100013FF4(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100015F4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_10028AE48;
  if (!qword_10028AE48)
  {
    v1 = sub_1000070BC(&qword_10028AE40);
    v2 = sub_1000070BC(&qword_10028AE50);
    v3 = sub_1000070BC(&qword_10028AE58);
    v6 = sub_1000070BC(&qword_10028AE60);
    v7 = sub_100012334(&qword_10028AE68, &qword_10028AE60, (uint64_t)&protocol conformance descriptor for Form<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:displayMode:)>>, 1);
    v5 = sub_100012334(&qword_10028AE70, &qword_10028AE58, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AE48);
  }
  return result;
}

uint64_t sub_100016064@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000146E0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10001606C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100015658(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100016074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudioRoutingMenu(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000160BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudioRoutingMenu(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100016100()
{
  return sub_1000161A4(sub_100015D64);
}

void sub_100016110()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AudioRoutingMenu(0) - 8) + 80);
  sub_100015BA4(v0 + ((v1 + 16) & ~v1));
}

void sub_10001613C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);

  }
}

uint64_t sub_1000161A4(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AudioRoutingMenu(0) - 8) + 80);
  return a1(v1 + ((v3 + 16) & ~v3));
}

id sub_1000161E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  id v13;
  id result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    v13 = a10;
    return a11;
  }
  return result;
}

uint64_t sub_100016244(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100016254()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100016278(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  uint64_t v7;

  v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  v3 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return v2(v6);
}

uint64_t sub_1000162C4()
{
  uint64_t v0;

  return sub_100015888(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000162CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100015984(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000162D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AED0;
  if (!qword_10028AED0)
  {
    v1 = sub_1000070BC(&qword_10028AEC8);
    sub_100012334(&qword_10028AEC0, &qword_10028AEB8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AED0);
  }
  return result;
}

uint64_t sub_100016374()
{
  return sub_1000161A4((uint64_t (*)(uint64_t))sub_100015B24);
}

uint64_t sub_10001638C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  char *v18;

  v1 = (int *)type metadata accessor for AudioRoutingMenu(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (char *)(v0 + v4);
  v7 = sub_100006DF4(&qword_10028AD78);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*(_QWORD *)v6);
  }
  v9 = &v6[v1[5]];
  v10 = *((_QWORD *)v9 + 1);
  if (v10)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(*((_QWORD *)v9 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v9 + 5));

  }
  swift_release(*((_QWORD *)v9 + 11));
  v11 = &v6[v1[6]];
  v12 = *((_QWORD *)v11 + 1);
  if (v12)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 5));

  }
  swift_release(*((_QWORD *)v11 + 11));
  v13 = &v6[v1[7]];
  v14 = type metadata accessor for Locale(0);
  v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(&v6[v1[8]], v14);
  v16 = &v6[v1[9]];
  v17 = *((_QWORD *)v16 + 1);
  if (v17)
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(*((_QWORD *)v16 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v16 + 5));

  }
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[10]]);
  v18 = &v6[v1[11]];
  if (*(_QWORD *)v18)
    swift_release(*((_QWORD *)v18 + 1));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100016544@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100014994(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10001654C@<X0>(char *a1@<X8>)
{
  return sub_100015300(a1);
}

uint64_t sub_100016554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028AF40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001659C()
{
  uint64_t v0;

  return sub_100015124(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000165A4(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000070BC(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100016608()
{
  unint64_t result;

  result = qword_10028AF60;
  if (!qword_10028AF60)
  {
    result = swift_getWitnessTable(&unk_1001E67A0, &type metadata for AudioDevice);
    atomic_store(result, (unint64_t *)&qword_10028AF60);
  }
  return result;
}

unint64_t sub_10001664C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AF70;
  if (!qword_10028AF70)
  {
    v1 = sub_1000070BC(&qword_10028AF78);
    sub_1000166D0();
    sub_100012334(&qword_10028AFA0, &qword_10028AFA8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AF70);
  }
  return result;
}

unint64_t sub_1000166D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AF80;
  if (!qword_10028AF80)
  {
    v1 = sub_1000070BC(&qword_10028AF88);
    sub_100012334(&qword_10028AF90, &qword_10028AF98, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AF80);
  }
  return result;
}

unint64_t sub_100016754()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AFC0;
  if (!qword_10028AFC0)
  {
    v1 = sub_1000070BC(&qword_10028AFB8);
    sub_100012334(&qword_10028AFC8, &qword_10028AFD0, (uint64_t)&protocol conformance descriptor for [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ReversedCollection<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10028AFC0);
  }
  return result;
}

uint64_t sub_1000167D0()
{
  return sub_100012334(&qword_10028AFD8, (uint64_t *)&unk_10028AFE0, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

void sub_1000167FC()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  double Height;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  Class isa;
  id v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  id v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  objc_class *v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  CGAffineTransform v60;
  objc_super v61;
  char v62[24];
  objc_super v63;
  CGRect v64;

  v1 = v0;
  v2 = type metadata accessor for IndexPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v58 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - v6;
  v8 = (objc_class *)type metadata accessor for BottomToTopLayout();
  v63.receiver = v0;
  v63.super_class = v8;
  v56 = v8;
  objc_msgSendSuper2(&v63, "prepareLayout");
  v9 = &v0[OBJC_IVAR____TtC17SequoiaTranslator17BottomToTopLayout_cachedAttributes];
  swift_beginAccess(&v0[OBJC_IVAR____TtC17SequoiaTranslator17BottomToTopLayout_cachedAttributes], v62, 1, 0);
  v10 = *(_QWORD *)v9;
  v57 = v9;
  *(_QWORD *)v9 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v10);
  v11 = objc_msgSend(v0, "collectionView");
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, "bounds");
    Height = CGRectGetHeight(v64);
    objc_msgSend(v12, "adjustedContentInset");
    v15 = Height - v14;
    objc_msgSend(v0, "collectionViewContentSize");
    if (v15 - v16 >= 0.0)
      v17 = v15 - v16;
    else
      v17 = 0.0;
    v18 = (unint64_t)objc_msgSend(v12, "numberOfSections");
    if ((v18 & 0x8000000000000000) == 0)
    {
      v19 = v18;
      if (!v18)
      {
LABEL_29:

        return;
      }
      v20 = 0;
      v53 = v1;
      v52 = v12;
      v51 = v18;
      while (1)
      {
        if (v20 == v19)
          goto LABEL_34;
        v21 = (unint64_t)objc_msgSend(v12, "numberOfItemsInSection:", v20);
        if ((v21 & 0x8000000000000000) != 0)
          break;
        v22 = v21;
        if (v21)
        {
          v23 = 0;
          v54 = v21;
          v55 = v20;
          while (1)
          {
            if (v22 == v23)
            {
              __break(1u);
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
            IndexPath.init(row:section:)(v23, v20);
            isa = IndexPath._bridgeToObjectiveC()().super.isa;
            v61.receiver = v1;
            v61.super_class = v56;
            v26 = objc_msgSendSuper2(&v61, "layoutAttributesForItemAtIndexPath:", isa);

            if (v26)
              break;
            v24 = *(void (**)(char *, uint64_t))(v3 + 8);
LABEL_14:
            ++v23;
            v24(v7, v2);
            if (v22 == v23)
              goto LABEL_8;
          }
          CGAffineTransformMakeTranslation(&v60, 0.0, v17);
          objc_msgSend(v26, "setTransform:", &v60);
          v27 = v3;
          v28 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
          v29 = (uint64_t)v58;
          v30 = v7;
          v31 = v7;
          v7 = (char *)v2;
          v28((uint64_t)v58, v31, v2);
          v32 = v57;
          swift_beginAccess(v57, &v60, 33, 0);
          v33 = v26;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v32);
          v59 = *(_QWORD **)v32;
          v35 = v59;
          *(_QWORD *)v32 = 0x8000000000000000;
          v37 = sub_1001A8700(v29);
          v38 = v35[2];
          v39 = (v36 & 1) == 0;
          v40 = v38 + v39;
          if (__OFADD__(v38, v39))
            goto LABEL_32;
          v41 = v36;
          if (v35[3] >= v40)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v44 = v59;
              if ((v36 & 1) == 0)
                goto LABEL_26;
            }
            else
            {
              sub_1001AB2F8();
              v44 = v59;
              if ((v41 & 1) == 0)
                goto LABEL_26;
            }
          }
          else
          {
            sub_1001A90F8(v40, isUniquelyReferenced_nonNull_native);
            v42 = sub_1001A8700((uint64_t)v58);
            if ((v41 & 1) != (v43 & 1))
              goto LABEL_37;
            v37 = v42;
            v44 = v59;
            if ((v41 & 1) == 0)
            {
LABEL_26:
              v44[(v37 >> 6) + 8] |= 1 << v37;
              v2 = (uint64_t)v7;
              v28(v44[6] + *(_QWORD *)(v27 + 72) * v37, v58, (uint64_t)v7);
              *(_QWORD *)(v44[7] + 8 * v37) = v33;
              v46 = v44[2];
              v47 = __OFADD__(v46, 1);
              v48 = v46 + 1;
              if (v47)
                goto LABEL_33;
              v44[2] = v48;
              goto LABEL_28;
            }
          }
          v45 = v44[7];

          *(_QWORD *)(v45 + 8 * v37) = v33;
          v2 = (uint64_t)v7;
LABEL_28:
          v49 = *(_QWORD *)v57;
          *(_QWORD *)v57 = v44;
          swift_bridgeObjectRelease(v49);
          v3 = v27;
          v24 = *(void (**)(char *, uint64_t))(v27 + 8);
          v24(v58, v2);
          swift_endAccess(&v60);

          v1 = v53;
          v7 = v30;
          v22 = v54;
          v20 = v55;
          goto LABEL_14;
        }
LABEL_8:
        ++v20;
        v19 = v51;
        v12 = v52;
        if (v20 == v51)
          goto LABEL_29;
      }
LABEL_35:
      __break(1u);
    }
    __break(1u);
LABEL_37:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    __break(1u);
  }
}

void sub_100016C78(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  CGRect v25;
  CGRect v26;

  v10 = 0;
  v12 = a1 + 64;
  v11 = *(_QWORD *)(a1 + 64);
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v11;
  v16 = (unint64_t)(v13 + 63) >> 6;
  if ((v14 & v11) != 0)
    goto LABEL_6;
LABEL_7:
  v19 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v19 < v16)
    {
      v20 = *(_QWORD *)(v12 + 8 * v19);
      ++v10;
      if (v20)
        goto LABEL_22;
      v10 = v19 + 1;
      if (v19 + 1 >= v16)
        goto LABEL_26;
      v20 = *(_QWORD *)(v12 + 8 * v10);
      if (v20)
        goto LABEL_22;
      v10 = v19 + 2;
      if (v19 + 2 >= v16)
        goto LABEL_26;
      v20 = *(_QWORD *)(v12 + 8 * v10);
      if (v20)
        goto LABEL_22;
      v10 = v19 + 3;
      if (v19 + 3 >= v16)
        goto LABEL_26;
      v20 = *(_QWORD *)(v12 + 8 * v10);
      if (v20)
      {
LABEL_22:
        v15 = (v20 - 1) & v20;
        for (i = __clz(__rbit64(v20)) + (v10 << 6); ; i = v17 | (v10 << 6))
        {
          v22 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
          objc_msgSend(v22, "frame");
          v26.origin.x = a2;
          v26.origin.y = a3;
          v26.size.width = a4;
          v26.size.height = a5;
          if (CGRectIntersectsRect(v25, v26))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v23 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
            v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v22);
            specialized ContiguousArray._endMutation()(v24);
            if (!v15)
              goto LABEL_7;
          }
          else
          {

            if (!v15)
              goto LABEL_7;
          }
LABEL_6:
          v17 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
        }
      }
      v21 = v19 + 4;
      if (v21 < v16)
      {
        v20 = *(_QWORD *)(v12 + 8 * v21);
        if (v20)
        {
          v10 = v21;
          goto LABEL_22;
        }
        while (1)
        {
          v10 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_28;
          if (v10 >= v16)
            break;
          v20 = *(_QWORD *)(v12 + 8 * v10);
          ++v21;
          if (v20)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release(a1);
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

void *sub_100016F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];

  v3 = type metadata accessor for IndexPath(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17BottomToTopLayout_cachedAttributes);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator17BottomToTopLayout_cachedAttributes, v30, 0, 0);
  v8 = *v7;
  if (!*(_QWORD *)(*v7 + 16)
    || (swift_bridgeObjectRetain(*v7), sub_1001A8700(a1), v10 = v9, swift_bridgeObjectRelease(v8), (v10 & 1) == 0))
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v16 = type metadata accessor for Logger(0);
    sub_10000F66C(v16, (uint64_t)qword_1002AA338);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v29 = v21;
      *(_DWORD *)v20 = 136446210;
      v22 = sub_100017618();
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v3, v22);
      v25 = v24;
      v28 = sub_1001A7FE4(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "BottomToTopLayout can't find cached attributes for indexPath: %{public}s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }

    return 0;
  }
  v11 = *v7;
  if (!*(_QWORD *)(*v7 + 16))
    return 0;
  swift_bridgeObjectRetain(*v7);
  v12 = sub_1001A8700(a1);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease(v11);
    return 0;
  }
  v14 = *(void **)(*(_QWORD *)(v11 + 56) + 8 * v12);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  return v14;
}

id sub_100017574()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BottomToTopLayout();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BottomToTopLayout()
{
  return objc_opt_self(_TtC17SequoiaTranslator17BottomToTopLayout);
}

uint64_t sub_1000175D4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1000175F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10018345C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100017600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100017610(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100017618()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B080;
  if (!qword_10028B080)
  {
    v1 = type metadata accessor for IndexPath(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IndexPath, v1);
    atomic_store(result, (unint64_t *)&qword_10028B080);
  }
  return result;
}

unint64_t sub_100017660()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B088;
  if (!qword_10028B088)
  {
    v1 = objc_opt_self(UICollectionViewLayoutAttributes);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028B088);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BroadcastPresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for BroadcastPresentation(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for BroadcastPresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

_QWORD *initializeWithTake for BroadcastPresentation(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for BroadcastPresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BroadcastPresentation(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BroadcastPresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BroadcastPresentation()
{
  return &type metadata for BroadcastPresentation;
}

uint64_t sub_100017810(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020F098, 1);
}

double sub_100017820@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double result;
  __int128 v38;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  _OWORD v57[13];
  uint64_t v58;

  v5 = type metadata accessor for ConversationManager(0);
  v6 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
  swift_retain(a2);
  v7 = (void *)EnvironmentObject.init()(v5, v6);
  v9 = v8;
  v10 = type metadata accessor for ConversationContext(0);
  v11 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v12 = EnvironmentObject.init()(v10, v11);
  v14 = v13;
  v15 = type metadata accessor for SceneContext(0);
  v16 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v17 = EnvironmentObject.init()(v15, v16);
  v19 = v18;
  v20 = static Alignment.center.getter(v17);
  v22 = _FrameLayout.init(width:height:alignment:)(&v40, 0, 1, 0, 0, v20, v21);
  v45 = a2;
  v46 = v7;
  v47 = v9;
  v48 = v12;
  v49 = v14;
  v50 = v17;
  v51 = v19;
  v52 = v40;
  v53 = v41;
  v54 = v42;
  v55 = v43;
  v56 = v44;
  v23 = static Alignment.center.getter(v22);
  sub_1000188EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v57, 0.0, 1, 0.0, 1, v23, v24);
  swift_release(a2);

  swift_release(v12);
  v25 = swift_release(v17);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  v29 = sub_100006DF4(&qword_10028B098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a3, a1, v29);
  v30 = a3 + *(int *)(sub_100006DF4(&qword_10028B0A0) + 36);
  v31 = v57[11];
  *(_OWORD *)(v30 + 160) = v57[10];
  *(_OWORD *)(v30 + 176) = v31;
  *(_OWORD *)(v30 + 192) = v57[12];
  v32 = v58;
  v33 = v57[7];
  *(_OWORD *)(v30 + 96) = v57[6];
  *(_OWORD *)(v30 + 112) = v33;
  v34 = v57[9];
  *(_OWORD *)(v30 + 128) = v57[8];
  *(_OWORD *)(v30 + 144) = v34;
  v35 = v57[3];
  *(_OWORD *)(v30 + 32) = v57[2];
  *(_OWORD *)(v30 + 48) = v35;
  v36 = v57[5];
  *(_OWORD *)(v30 + 64) = v57[4];
  *(_OWORD *)(v30 + 80) = v36;
  result = *(double *)v57;
  v38 = v57[1];
  *(_OWORD *)v30 = v57[0];
  *(_OWORD *)(v30 + 16) = v38;
  *(_QWORD *)(v30 + 208) = v32;
  *(_QWORD *)(v30 + 216) = v26;
  *(_QWORD *)(v30 + 224) = v28;
  return result;
}

uint64_t sub_100017A7C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

double sub_100017A94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100017820(a1, *v2, a2);
}

unint64_t sub_100017AA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B0A8;
  if (!qword_10028B0A8)
  {
    v1 = sub_1000070BC(&qword_10028B0A0);
    sub_100012334(&qword_10028B0B0, &qword_10028B098, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100012334(&qword_10028B0B8, &qword_10028B0C0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B0A8);
  }
  return result;
}

uint64_t destroy for BroadcastPresenter(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

  swift_release(*(_QWORD *)(a1 + 24));
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t *initializeWithCopy for BroadcastPresenter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *a2;
  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  a1[6] = a2[6];
  swift_retain(v3);
  v7 = v4;
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for BroadcastPresenter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = (void *)a1[1];
  v7 = (void *)a2[1];
  a1[1] = (uint64_t)v7;
  v8 = v7;

  a1[2] = a2[2];
  v9 = a1[3];
  v10 = a2[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v9);
  a1[4] = a2[4];
  v11 = a1[5];
  v12 = a2[5];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v11);
  a1[6] = a2[6];
  return a1;
}

_QWORD *assignWithTake for BroadcastPresenter(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = a1[3];
  v6 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_release(v5);
  v7 = a1[5];
  v8 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v8;
  swift_release(v7);
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for BroadcastPresenter(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BroadcastPresenter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BroadcastPresenter()
{
  return &type metadata for BroadcastPresenter;
}

void *sub_100017DA8()
{
  return &protocol witness table for Never;
}

void sub_100017DB4(void *a1)
{
  uint64_t *v1;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  unint64_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  ValueMetadata *v42;
  unint64_t v43;
  uint64_t v44;

  v42 = &type metadata for TranslateFeatures;
  v3 = sub_100009BC4();
  v43 = v3;
  LOBYTE(v41[0]) = 2;
  v4 = isFeatureEnabled(_:)(v41);
  sub_100009C08(v41);
  if ((v4 & 1) != 0)
  {
    v5 = v1[5];
    if (v5)
    {
      KeyPath = swift_getKeyPath(&unk_1001E6C78);
      v7 = swift_getKeyPath(&unk_1001E6CA0);
      v8 = swift_retain(v5);
      static Published.subscript.getter(v41, v8, KeyPath);
      swift_release(v5);
      swift_release(KeyPath);
      swift_release(v7);
      v5 = v41[0];
      if (v41[0])
      {
        v9 = v41[1];
        goto LABEL_8;
      }
      goto LABEL_14;
    }
    v33 = v1[6];
    v1 = (uint64_t *)type metadata accessor for SceneContext(0);
    v34 = type metadata accessor for SceneContext;
    v35 = (unint64_t *)&unk_100295500;
    v36 = &unk_1001F3580;
LABEL_21:
    v37 = sub_100007D5C(v35, v34, (uint64_t)v36);
    EnvironmentObject.error()(0, v33, v1, v37);
    __break(1u);
LABEL_22:
    v38 = v1[2];
    v39 = type metadata accessor for ConversationManager(0);
    v40 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    swift_unknownObjectRetain(v5);
    EnvironmentObject.error()(0, v38, v39, v40);
    __break(1u);
    return;
  }
  v5 = v1[3];
  if (!v5)
  {
    v33 = v1[4];
    v1 = (uint64_t *)type metadata accessor for ConversationContext(0);
    v34 = type metadata accessor for ConversationContext;
    v35 = &qword_10028B090;
    v36 = &unk_1001E9C74;
    goto LABEL_21;
  }
  v10 = swift_getKeyPath(&unk_1001E6C30);
  v11 = swift_getKeyPath(&unk_1001E6C58);
  v12 = swift_retain(v5);
  static Published.subscript.getter(v41, v12, v10);
  swift_release(v5);
  swift_release(v10);
  swift_release(v11);
  v5 = v41[0];
  if (v41[0])
  {
    v9 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
LABEL_8:
    swift_unknownObjectRetain(v5);
    v13 = swift_allocObject(&unk_100264090, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, a1);
    v14 = swift_allocObject(&unk_1002640B8, 80, 7);
    v15 = *((_OWORD *)v1 + 1);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v14 + 32) = v15;
    *(_OWORD *)(v14 + 48) = *((_OWORD *)v1 + 2);
    *(_QWORD *)(v14 + 64) = v1[6];
    *(_QWORD *)(v14 + 72) = v13;
    v42 = &type metadata for TranslateFeatures;
    v43 = v3;
    LOBYTE(v41[0]) = 2;
    sub_1000185EC(v1);
    v16 = isFeatureEnabled(_:)(v41);
    sub_100009C08(v41);
    if ((v16 & 1) != 0)
    {
      sub_100018638((uint64_t)v1, (uint64_t)&v44);
      sub_100018638((uint64_t)&v44, (uint64_t)v41);
      v17 = v41[0];
      if (v41[0])
      {
        v18 = type metadata accessor for BroadcastViewModel(0);
        v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
        ObjectType = swift_getObjectType(v5);
        sub_100018680(&v44);
        swift_unknownObjectRetain(v5);
        swift_retain(v14);
        v21 = sub_10001D420(v5, v17, (uint64_t)sub_1000185E0, v14, v19, ObjectType, v9);
LABEL_13:
        v24 = v21;
        v25 = objc_allocWithZone((Class)type metadata accessor for BroadcastViewController(0));
        v26 = swift_retain(v24);
        v27 = sub_10001BC74(v26);
        objc_msgSend(a1, "presentViewController:animated:completion:", v27, 1, 0);

        swift_release(v14);
        swift_release(v24);
        swift_unknownObjectRelease_n(v5, 2);
        return;
      }
    }
    v22 = (void *)v1[1];
    if (v22)
    {
      v23 = type metadata accessor for BroadcastViewModel(0);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      swift_unknownObjectRetain(v5);
      swift_retain(v14);
      v21 = sub_10001BFE0(v5, v9, v22, (uint64_t)sub_1000185E0, v14);
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_14:
  if (qword_10028A400 != -1)
    swift_once(&qword_10028A400, sub_100120ED8);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10000F66C(v28, (uint64_t)qword_1002AA308);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "There's no translation object to present; early returning",
      v32,
      2u);
    swift_slowDealloc(v32, -1, -1);
  }

}

void sub_10001823C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *Strong;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[3];

  v3 = a1[3];
  if (!v3)
  {
    v13 = a1[4];
    v14 = type metadata accessor for ConversationContext(0);
    v15 = type metadata accessor for ConversationContext;
    v16 = &qword_10028B090;
    v17 = &unk_1001E9C74;
LABEL_8:
    v18 = sub_100007D5C(v16, v15, (uint64_t)v17);
    EnvironmentObject.error()(0, v13, v14, v18);
    __break(1u);
    return;
  }
  KeyPath = swift_getKeyPath(&unk_1001E6C30);
  v6 = swift_getKeyPath(&unk_1001E6C58);
  v19[0] = 0;
  swift_retain(v3);
  static Published.subscript.setter(v19, v3, KeyPath, v6);
  v7 = a1[5];
  if (!v7)
  {
    v13 = a1[6];
    v14 = type metadata accessor for SceneContext(0);
    v15 = type metadata accessor for SceneContext;
    v16 = (unint64_t *)&unk_100295500;
    v17 = &unk_1001F3580;
    goto LABEL_8;
  }
  v8 = a2 + 16;
  v9 = swift_getKeyPath(&unk_1001E6C78);
  v10 = swift_getKeyPath(&unk_1001E6CA0);
  v19[0] = 0;
  v19[1] = 0;
  swift_retain(v7);
  static Published.subscript.setter(v19, v7, v9, v10);
  swift_beginAccess(v8, v19, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    v12 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

id sub_1000183B4()
{
  return objc_msgSend(objc_allocWithZone((Class)UIViewController), "initWithNibName:bundle:", 0, 0);
}

void sub_1000183E0(void *a1)
{
  sub_100017DB4(a1);
}

uint64_t sub_10001842C(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_100018464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000186B0();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000184B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000186B0();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100018504(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000186B0();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10001852C()
{
  unint64_t result;

  result = qword_10028B0C8;
  if (!qword_10028B0C8)
  {
    result = swift_getWitnessTable(&unk_1001E6B64, &type metadata for BroadcastPresenter);
    atomic_store(result, (unint64_t *)&qword_10028B0C8);
  }
  return result;
}

uint64_t sub_100018578()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001859C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1000185E0()
{
  uint64_t v0;

  sub_10001823C((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 72));
}

uint64_t *sub_1000185EC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = *a1;
  v3 = (void *)a1[1];
  v4 = a1[3];
  swift_retain(a1[5]);
  swift_retain(v2);
  v5 = v3;
  swift_retain(v4);
  return a1;
}

uint64_t sub_100018638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028B0D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100018680(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

unint64_t sub_1000186B0()
{
  unint64_t result;

  result = qword_10028B0E0;
  if (!qword_10028B0E0)
  {
    result = swift_getWitnessTable(&unk_1001E6BB4, &type metadata for BroadcastPresenter);
    atomic_store(result, (unint64_t *)&qword_10028B0E0);
  }
  return result;
}

uint64_t destroy for BroadcastView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for BroadcastView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for BroadcastView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  v6 = a1[3];
  v7 = a2[3];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[4] = a2[4];
  return a1;
}

__n128 initializeWithTake for BroadcastView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for BroadcastView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_release(v5);
  a1[2] = a2[2];
  v6 = a1[3];
  a1[3] = a2[3];
  swift_release(v6);
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for BroadcastView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BroadcastView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BroadcastView()
{
  return &type metadata for BroadcastView;
}

uint64_t sub_1000188DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020F0F8, 1);
}

uint64_t *sub_1000188EC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v45 = a5;
    v46 = a7;
    v44 = a3;
    v43 = a1;
    v42 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v42;
    v19 = a10;
    a1 = v43;
    a3 = v44;
    v18 = a12;
    a5 = v45;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v34;
  *(_QWORD *)(a9 + 96) = *(_QWORD *)(v15 + 96);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v36;
  v37 = v47[1];
  *(_OWORD *)(a9 + 104) = v47[0];
  *(_OWORD *)(a9 + 120) = v37;
  v38 = v47[3];
  *(_OWORD *)(a9 + 136) = v47[2];
  v39 = v47[4];
  v40 = v47[5];
  *(_OWORD *)(a9 + 200) = v47[6];
  *(_OWORD *)(a9 + 184) = v40;
  *(_OWORD *)(a9 + 168) = v39;
  *(_OWORD *)(a9 + 152) = v38;
  return sub_1000185EC((uint64_t *)v15);
}

double sub_100018AAC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10001903C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B2C0, &qword_10028B2C8).n128_u64[0];
  return result;
}

double sub_100018B04@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100018B5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B2B0, &qword_10028B2B8).n128_u64[0];
  return result;
}

__n128 sub_100018B5C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000B074(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100006DF4(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

double sub_100018D28@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10001903C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B300, &qword_10028B2F0).n128_u64[0];
  return result;
}

double sub_100018D80@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100018B5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B2F0, &qword_10028B2F8).n128_u64[0];
  return result;
}

double sub_100018DD8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100018B5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B308, &qword_10028B310).n128_u64[0];
  return result;
}

__n128 sub_100018E30@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v39;
    a1 = v40;
    v20 = a10;
    a3 = v41;
    v19 = a12;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  sub_10001BBB8(v16, a9);
  v35 = a9 + *(int *)(sub_100006DF4(&qword_10028B318) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

double sub_100018FE4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10001903C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B2E0, &qword_10028B2E8).n128_u64[0];
  return result;
}

__n128 sub_10001903C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = a9;
  v19 = a16;
  v21 = a14;
  v20 = a15;
  v22 = a12;
  v23 = a10;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((_DWORD)v26)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a10;
  if ((a11 & 1) != 0)
    v33 = v32;
  v34 = a12;
  if ((a13 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v24;
    v36 = v26;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v18 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v26 = v36;
    v21 = a14;
    v20 = a15;
    v24 = v46;
    v23 = a10;
    v22 = a12;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a11 & 1, *(_QWORD *)&v22, a13 & 1, v21, v20);
  v41 = sub_100006DF4(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v18, v17, v41);
  v42 = v18 + *(int *)(sub_100006DF4(a17) + 36);
  v43 = v51[5];
  *(_OWORD *)(v42 + 64) = v51[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v51[6];
  v44 = v51[1];
  *(_OWORD *)v42 = v51[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v51[3];
  *(_OWORD *)(v42 + 32) = v51[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

uint64_t *sub_100019218@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    a1 = v42;
    a3 = v43;
    v18 = a12;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  a9[2] = *(_OWORD *)(v15 + 32);
  a9[3] = v34;
  v35 = *(_OWORD *)(v15 + 80);
  a9[4] = *(_OWORD *)(v15 + 64);
  a9[5] = v35;
  v36 = *(_OWORD *)(v15 + 16);
  *a9 = *(_OWORD *)v15;
  a9[1] = v36;
  v37 = v46[5];
  a9[10] = v46[4];
  a9[11] = v37;
  a9[12] = v46[6];
  v38 = v46[1];
  a9[6] = v46[0];
  a9[7] = v38;
  v39 = v46[3];
  a9[8] = v46[2];
  a9[9] = v39;
  return sub_10001BB74((uint64_t *)v15);
}

__n128 sub_1000193C4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v26;
  double v27;
  double v28;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __n128 result;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  _OWORD v40[7];

  v16 = a12;
  v17 = a10;
  v18 = a2 & 1;
  v19 = a1;
  if ((_DWORD)v18)
    v19 = -INFINITY;
  v20 = a4 & 1;
  v21 = a3;
  if ((a4 & 1) != 0)
    v21 = v19;
  v22 = a6 & 1;
  v23 = a8 & 1;
  v24 = a5;
  if ((a6 & 1) != 0)
    v24 = v21;
  if (v19 > v21 || v21 > v24)
    goto LABEL_22;
  v26 = a7;
  if ((a8 & 1) != 0)
    v26 = -INFINITY;
  v27 = a10;
  if ((a11 & 1) != 0)
    v27 = v26;
  v28 = a12;
  if ((a13 & 1) != 0)
    v28 = v27;
  if (v26 > v27 || v27 > v28)
  {
LABEL_22:
    v39 = a7;
    v38 = a5;
    v36 = a1;
    v37 = a3;
    v35 = v18;
    v30 = static os_log_type_t.fault.getter();
    v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = v35;
    a1 = v36;
    a3 = v37;
    v17 = a10;
    a5 = v38;
    v16 = a12;
    a7 = v39;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v40, *(_QWORD *)&a1, v18, *(_QWORD *)&a3, v20, *(_QWORD *)&a5, v22, *(_QWORD *)&a7, v23, *(_QWORD *)&v17, a11 & 1, *(_QWORD *)&v16, a13 & 1, a14, a15);
  v32 = v40[5];
  *(_OWORD *)(a9 + 64) = v40[4];
  *(_OWORD *)(a9 + 80) = v32;
  *(_OWORD *)(a9 + 96) = v40[6];
  v33 = v40[1];
  *(_OWORD *)a9 = v40[0];
  *(_OWORD *)(a9 + 16) = v33;
  result = (__n128)v40[3];
  *(_OWORD *)(a9 + 32) = v40[2];
  *(__n128 *)(a9 + 48) = result;
  return result;
}

uint64_t sub_10001954C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    a1 = v42;
    a3 = v43;
    v18 = a12;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[3];
  a9[2] = v15[2];
  a9[3] = v34;
  v35 = v15[5];
  a9[4] = v15[4];
  a9[5] = v35;
  v36 = v15[1];
  *a9 = *v15;
  a9[1] = v36;
  v37 = v46[5];
  a9[10] = v46[4];
  a9[11] = v37;
  a9[12] = v46[6];
  v38 = v46[1];
  a9[6] = v46[0];
  a9[7] = v38;
  v39 = v46[3];
  a9[8] = v46[2];
  a9[9] = v39;
  return sub_10001BAE0((uint64_t)v15);
}

double sub_1000196F8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100018B5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B290, &qword_10028B298).n128_u64[0];
  return result;
}

double sub_100019750@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100018B5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B2A0, &qword_10028B2A8).n128_u64[0];
  return result;
}

double sub_1000197A8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100018B5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10028B2D0, &qword_10028B2D8).n128_u64[0];
  return result;
}

uint64_t sub_100019800@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)();
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v2 = sub_100006DF4(&qword_10028B0E8);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006DF4(&qword_10028B0F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100006DF4(&qword_10028B0F8);
  v8 = *(_QWORD *)(v27 - 8);
  v9 = __chkstk_darwin(v27);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v4 = static Alignment.center.getter(v9);
  v4[1] = v12;
  v13 = sub_100006DF4(&qword_10028B100);
  v14 = sub_1000199E0(v1, (uint64_t (**)(uint64_t))((char *)v4 + *(int *)(v13 + 44)));
  v15 = static Color.broadcastTintColor.getter(v14);
  v16 = static Edge.Set.all.getter(v15);
  v17 = v16;
  v18 = static Alignment.center.getter(v16);
  v20 = v19;
  sub_10000B074((uint64_t)v4, (uint64_t)v7, &qword_10028B0E8);
  v21 = &v7[*(int *)(v5 + 36)];
  *(_QWORD *)v21 = v15;
  v21[8] = v17;
  *((_QWORD *)v21 + 2) = v18;
  *((_QWORD *)v21 + 3) = v20;
  sub_10000A020((uint64_t)v4, &qword_10028B0E8);
  v22 = sub_10001B110();
  View.statusBar(hidden:)(1, v5, v22);
  sub_10000A020((uint64_t)v7, &qword_10028B0F0);
  v24 = v27;
  v23 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v28, v11, v27);
  v25 = (void (**)())(v23 + *(int *)(sub_100006DF4(&qword_10028B128) + 36));
  *v25 = sub_10001B0C4;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v24);
}

uint64_t sub_1000199E0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (**v33)(uint64_t);
  uint64_t (**v34)(uint64_t);
  uint64_t v35;
  uint64_t v37;
  uint64_t (**v38)(uint64_t);
  __int128 v39;
  __int128 v40;

  v38 = a2;
  v3 = sub_100006DF4(&qword_10028B130);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028B138);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028B140);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v37 - v13;
  v15 = *(_OWORD *)a1;
  v39 = *(_OWORD *)(a1 + 16);
  v40 = v15;
  v16 = swift_allocObject(&unk_100264210, 56, 7);
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(a1 + 32);
  sub_10001B1E0((uint64_t)&v40);
  v18 = sub_10001B1E0((uint64_t)&v39);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v19 = sub_100006DF4(&qword_10028B148);
  v20 = sub_10001AA50((__int128 *)a1, (uint64_t)&v5[*(int *)(v19 + 44)]);
  v21 = static Alignment.bottom.getter(v20);
  sub_100018B5C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v8, 0.0, 1, INFINITY, 0, v21, v22, &qword_10028B130, &qword_10028B138);
  v23 = sub_10000A020((uint64_t)v5, &qword_10028B130);
  v24 = *(double *)(a1 + 32);
  LOBYTE(v5) = static Edge.Set.all.getter(v23);
  v25 = EdgeInsets.init(_all:)(v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_10000B074((uint64_t)v8, (uint64_t)v12, &qword_10028B138);
  v32 = &v12[*(int *)(v9 + 36)];
  *v32 = (char)v5;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  sub_10000A020((uint64_t)v8, &qword_10028B138);
  sub_1000110A4((uint64_t)v12, (uint64_t)v14, &qword_10028B140);
  sub_10000B074((uint64_t)v14, (uint64_t)v12, &qword_10028B140);
  v33 = v38;
  *v38 = sub_10001B1D8;
  v33[1] = (uint64_t (*)(uint64_t))v16;
  v34 = v33;
  v35 = sub_100006DF4(&qword_10028B150);
  sub_10000B074((uint64_t)v12, (uint64_t)v34 + *(int *)(v35 + 48), &qword_10028B140);
  swift_retain(v16);
  sub_10000A020((uint64_t)v14, &qword_10028B140);
  sub_10000A020((uint64_t)v12, &qword_10028B140);
  return swift_release(v16);
}

uint64_t sub_100019CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  double v14;
  _BOOL8 v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  double v22;

  v4 = sub_100006DF4(&qword_10028B1D8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = static Axis.Set.vertical.getter(v6);
  v19 = a2;
  v20 = a1;
  v10 = sub_100006DF4(&qword_10028B1E0);
  v11 = sub_10001B6DC(&qword_10028B1E8, &qword_10028B1E0, (void (*)(void))sub_10001B694);
  ScrollView.init(_:showsIndicators:content:)(v9, 1, sub_10001B68C, v18, v10, v11);
  v21 = *(_OWORD *)(a2 + 16);
  sub_100006DF4(&qword_10028B260);
  v12 = State.wrappedValue.getter(&v22);
  v13 = v22 + *(double *)(a2 + 32) + *(double *)(a2 + 32);
  GeometryProxy.size.getter(v12);
  v15 = v13 <= v14;
  v16 = sub_100012334(&qword_10028B268, &qword_10028B1D8, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  View.scrollDisabled(_:)(v15, v4, v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_100019E24@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t (*v37)(uint64_t, uint64_t);
  void *v38;
  id v39;
  unsigned int *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  double *v76;
  uint64_t v77;
  __int128 v78;
  double v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  double *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD v159[3];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;

  v156 = a2;
  v134 = a1;
  v157 = a3;
  v4 = sub_100006DF4(&qword_10028B270);
  __chkstk_darwin(v4);
  v152 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for EnabledTextSelectability(0);
  v145 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v141 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100006DF4(&qword_10028B258);
  __chkstk_darwin(v130);
  v132 = (uint64_t *)((char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for LayoutDirection(0);
  v158 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v129 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100006DF4(&qword_10028B240);
  __chkstk_darwin(v131);
  v128 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100006DF4(&qword_10028B278);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v135 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100006DF4(&qword_10028B238);
  __chkstk_darwin(v138);
  v136 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100006DF4(&qword_10028B220);
  __chkstk_darwin(v140);
  v137 = (uint64_t)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100006DF4(&qword_10028B280);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v143 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100006DF4(&qword_10028B218);
  __chkstk_darwin(v147);
  v146 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100006DF4(&qword_10028B208);
  __chkstk_darwin(v151);
  v148 = (uint64_t)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100006DF4(&qword_10028B1F8);
  __chkstk_darwin(v153);
  v127 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100006DF4(&qword_10028B1E0);
  __chkstk_darwin(v154);
  v155 = (uint64_t)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = *(_OWORD *)a1;
  v22 = *((_QWORD *)&v167 + 1);
  KeyPath = swift_getKeyPath(&unk_1001E6DC8);
  v24 = swift_getKeyPath(&unk_1001E6DF0);
  v25 = swift_retain(v22);
  static Published.subscript.getter(&v160, v25, KeyPath);
  swift_release(KeyPath);
  swift_release(v24);
  sub_10001B5BC((uint64_t)&v167);
  v26 = sub_10000B030();
  v126 = Text.init<A>(_:)(&v160, &type metadata for String, v26);
  v28 = v27;
  v125 = v29;
  v31 = v30 & 1;
  v32 = swift_getKeyPath(&unk_1001E6E10);
  v33 = v22 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation;
  v34 = *(_QWORD *)(v22 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation);
  v35 = *(_QWORD *)(v33 + 8);
  ObjectType = swift_getObjectType(v34);
  v37 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 48);
  sub_10001B1E0((uint64_t)&v167);
  swift_unknownObjectRetain(v34);
  v38 = (void *)v37(ObjectType, v35);
  swift_unknownObjectRelease(v34);
  v39 = objc_msgSend(v38, "targetLocale");

  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v39);
  LOBYTE(v39) = Locale.isRTL()();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10001B5BC((uint64_t)&v167);
  v40 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v41 = v158;
  if ((v39 & 1) == 0)
    v40 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v42 = v129;
  v43 = v133;
  (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v129, *v40, v133);
  v44 = v132;
  v45 = v43;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v132 + *(int *)(v130 + 28), v42, v43);
  v46 = (uint64_t)v44;
  *v44 = v32;
  v47 = v131;
  v48 = (uint64_t)v128;
  sub_10000B074(v46, (uint64_t)&v128[*(int *)(v131 + 36)], &qword_10028B258);
  v49 = v126;
  *(_QWORD *)v48 = v126;
  *(_QWORD *)(v48 + 8) = v28;
  v50 = v28;
  v51 = v31;
  *(_BYTE *)(v48 + 16) = v31;
  v52 = v125;
  *(_QWORD *)(v48 + 24) = v125;
  v53 = v49;
  v54 = v50;
  sub_10001B9D8(v49, v50, v51);
  swift_bridgeObjectRetain(v52);
  sub_10000A020(v46, &qword_10028B258);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v42, v45);
  sub_10001B9E8(v53, v54, v51);
  v55 = swift_bridgeObjectRelease(v52);
  v56 = v141;
  EnabledTextSelectability.init()(v55);
  v57 = sub_10001B928();
  v58 = v135;
  v59 = v144;
  View.textSelection<A>(_:)(v56, v47, v144, v57, &protocol witness table for EnabledTextSelectability);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v56, v59);
  v60 = sub_10000A020(v48, &qword_10028B240);
  v61 = static Font.Weight.bold.getter(v60);
  v62 = type metadata accessor for Font.Design(0);
  v63 = (uint64_t)v152;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v152, 1, 1, v62);
  v64 = static Font.system(size:weight:design:)(*(_QWORD *)&v61, 0, v63, 60.0);
  sub_10000A020(v63, &qword_10028B270);
  v65 = swift_getKeyPath(&unk_1001E6E40);
  v66 = v139;
  v67 = (uint64_t)v136;
  v68 = v142;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v136, v58, v142);
  v69 = (uint64_t *)(v67 + *(int *)(v138 + 36));
  *v69 = v65;
  v69[1] = v64;
  v70 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v58, v68);
  v71 = static Color.white.getter(v70);
  v72 = swift_getKeyPath(&unk_1001E6D98);
  v73 = v137;
  sub_10000B074(v67, v137, &qword_10028B238);
  v74 = v140;
  v75 = (uint64_t *)(v73 + *(int *)(v140 + 36));
  *v75 = v72;
  v75[1] = v71;
  sub_10000A020(v67, &qword_10028B238);
  v76 = v134;
  v159[0] = *((_OWORD *)v134 + 1);
  v77 = sub_100006DF4(&qword_10028B260);
  State.projectedValue.getter(&v160, v77);
  v78 = v160;
  v79 = *(double *)&v161;
  v80 = sub_10001B7D8();
  v81 = v143;
  View.bindGeometry(to:reader:)(v78, *((_QWORD *)&v78 + 1), sub_10001AA2C, 0, v74, v80, v79);
  swift_release(*((_QWORD *)&v78 + 1));
  swift_release(v78);
  v82 = sub_10000A020(v73, &qword_10028B220);
  LOBYTE(v71) = static Edge.Set.horizontal.getter(v82);
  v83 = EdgeInsets.init(_all:)(130.0);
  v85 = v84;
  v87 = v86;
  v89 = v88;
  v90 = v149;
  v91 = (uint64_t)v146;
  v92 = v150;
  (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v146, v81, v150);
  v93 = v91 + *(int *)(v147 + 36);
  *(_BYTE *)v93 = v71;
  *(double *)(v93 + 8) = v83;
  *(_QWORD *)(v93 + 16) = v85;
  *(_QWORD *)(v93 + 24) = v87;
  *(_QWORD *)(v93 + 32) = v89;
  *(_BYTE *)(v93 + 40) = 0;
  v94 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v81, v92);
  LOBYTE(v71) = static Edge.Set.vertical.getter(v94);
  v95 = EdgeInsets.init(_all:)(v76[4]);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  v102 = v148;
  sub_10000B074(v91, v148, &qword_10028B218);
  v103 = v102 + *(int *)(v151 + 36);
  *(_BYTE *)v103 = v71;
  *(double *)(v103 + 8) = v95;
  *(_QWORD *)(v103 + 16) = v97;
  *(_QWORD *)(v103 + 24) = v99;
  *(_QWORD *)(v103 + 32) = v101;
  *(_BYTE *)(v103 + 40) = 0;
  v104 = sub_10000A020(v91, &qword_10028B218);
  v105 = GeometryProxy.size.getter(v104);
  v107 = v106;
  v108 = static Alignment.center.getter(v105);
  _FrameLayout.init(width:height:alignment:)(v159, v107, 0, 0, 1, v108, v109);
  v110 = v127;
  sub_10000B074(v102, v127, &qword_10028B208);
  v111 = (_OWORD *)(v110 + *(int *)(v153 + 36));
  v112 = v159[1];
  *v111 = v159[0];
  v111[1] = v112;
  v111[2] = v159[2];
  v113 = sub_10000A020(v102, &qword_10028B208);
  v114 = GeometryProxy.size.getter(v113);
  v116 = v115;
  v117 = static Alignment.center.getter(v114);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v160, 0, 1, 0, 1, 0, 1, v116, 0, 0, 1, 0, 1, v117, v118);
  v119 = v155;
  sub_10000B074(v110, v155, &qword_10028B1F8);
  v120 = (_OWORD *)(v119 + *(int *)(v154 + 36));
  v121 = v165;
  v120[4] = v164;
  v120[5] = v121;
  v120[6] = v166;
  v122 = v161;
  *v120 = v160;
  v120[1] = v122;
  v123 = v163;
  v120[2] = v162;
  v120[3] = v123;
  sub_10000A020(v110, &qword_10028B1F8);
  return sub_1000110A4(v119, v157, &qword_10028B1E0);
}

uint64_t sub_10001A990()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10001A9B0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for LayoutDirection(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.layoutDirection.setter(v3);
}

double sub_10001AA2C()
{
  double v0;

  GeometryProxy.size.getter();
  return v0;
}

uint64_t sub_10001AA50@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;

  v85 = a2;
  v84 = type metadata accessor for AccessibilityTraits(0);
  v79 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v83 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028B158);
  __chkstk_darwin(v4);
  v72 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlayButton(0);
  v76 = *(_QWORD *)(v6 - 8);
  v77 = v6;
  __chkstk_darwin(v6);
  v73 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100006DF4(&qword_10028B160);
  __chkstk_darwin(v75);
  v74 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100006DF4(&qword_10028B168);
  v9 = __chkstk_darwin(v82);
  v78 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v80 = (char *)&v71 - v12;
  __chkstk_darwin(v11);
  v81 = (uint64_t)&v71 - v13;
  v14 = type metadata accessor for ConversationButton(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_10028B170);
  __chkstk_darwin(v18);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100006DF4(&qword_10028B178);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v71 - v25;
  v87 = *a1;
  v27 = *((_QWORD *)&v87 + 1);
  swift_retain(*((_QWORD *)&v87 + 1));
  v28 = ConversationButton.init(action:)(sub_10001B208, v27);
  v29 = static Color.broadcastTintColor.getter(v28);
  KeyPath = swift_getKeyPath(&unk_1001E6D20);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v17, v14);
  v31 = (uint64_t *)&v20[*(int *)(v18 + 36)];
  *v31 = KeyPath;
  v31[1] = v29;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v32 = sub_10001B518();
  View.accessibilityIdentifier(_:)(0xD000000000000016, 0x80000001001F87C0, v18, v32);
  sub_10000A020((uint64_t)v20, &qword_10028B170);
  v33 = (uint64_t)v26;
  sub_1000110A4((uint64_t)v24, (uint64_t)v26, &qword_10028B178);
  v34 = swift_getKeyPath(&unk_1001E6D50);
  v35 = swift_getKeyPath(&unk_1001E6D78);
  v36 = swift_retain(v27);
  static Published.subscript.getter(&v86, v36, v34);
  swift_release(v34);
  swift_release(v35);
  sub_10001B5BC((uint64_t)&v87);
  v37 = v86;
  v38 = enum case for PlayButton.Size.large(_:);
  v39 = type metadata accessor for PlayButton.Size(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 104))(v72, v38, v39);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v39);
  swift_retain(v27);
  v42 = v73;
  v43 = PlayButton.init(isPlaying:size:action:)(v37, v41, sub_10001B5E4, v27);
  v44 = static Color.white.getter(v43);
  v45 = swift_getKeyPath(&unk_1001E6D98);
  v46 = v76;
  v47 = (uint64_t)v74;
  v48 = v42;
  v49 = v42;
  v50 = v77;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v48, v77);
  v51 = v75;
  v52 = (uint64_t *)(v47 + *(int *)(v75 + 36));
  *v52 = v45;
  v52[1] = v44;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v50);
  v53 = sub_100006DF4(&qword_10028B1A0);
  v54 = v79;
  v55 = swift_allocObject(v53, ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ 2 * *(_QWORD *)(v79 + 72), *(unsigned __int8 *)(v79 + 80) | 7);
  *(_OWORD *)(v55 + 16) = xmmword_1001E4D60;
  v56 = static AccessibilityTraits.playsSound.getter();
  static AccessibilityTraits.startsMediaSession.getter(v56);
  v86 = v55;
  v57 = sub_100007D5C(&qword_10028B1A8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v58 = sub_100006DF4(&qword_10028B1B0);
  v59 = sub_100012334(&qword_10028B1B8, &qword_10028B1B0, (uint64_t)&protocol conformance descriptor for [A]);
  v60 = v83;
  v61 = v58;
  v62 = v84;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v61, v59, v84, v57);
  v63 = sub_10001B5F0();
  v64 = (uint64_t)v78;
  View.accessibilityAddTraits(_:)(v60, v51, v63);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v60, v62);
  sub_10000A020(v47, &qword_10028B160);
  v65 = (uint64_t)v80;
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000017, 0x80000001001F87E0, v82);
  sub_10000A020(v64, &qword_10028B168);
  v66 = v81;
  sub_1000110A4(v65, v81, &qword_10028B168);
  sub_10000B074(v33, (uint64_t)v24, &qword_10028B178);
  sub_10000B074(v66, v65, &qword_10028B168);
  v67 = v85;
  sub_10000B074((uint64_t)v24, v85, &qword_10028B178);
  v68 = sub_100006DF4(&qword_10028B1D0);
  v69 = v67 + *(int *)(v68 + 48);
  *(_QWORD *)v69 = 0;
  *(_BYTE *)(v69 + 8) = 1;
  sub_10000B074(v65, v67 + *(int *)(v68 + 64), &qword_10028B168);
  sub_10000A020(v66, &qword_10028B168);
  sub_10000A020(v33, &qword_10028B178);
  sub_10000A020(v65, &qword_10028B168);
  return sub_10000A020((uint64_t)v24, &qword_10028B178);
}

void sub_10001B0C4()
{
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
}

uint64_t sub_10001B0D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100019800(a1);
}

unint64_t sub_10001B110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B108;
  if (!qword_10028B108)
  {
    v1 = sub_1000070BC(&qword_10028B0F0);
    sub_100012334(&qword_10028B110, &qword_10028B0E8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100012334(&qword_10028B118, &qword_10028B120, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B108);
  }
  return result;
}

uint64_t sub_10001B1AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001B1D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100019CAC(a1, v1 + 16);
}

uint64_t sub_10001B1E0(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10001B208()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_dismissHandler);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_dismissHandler + 8);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10001B240@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E6DC8);
  v5 = swift_getKeyPath(&unk_1001E6DF0);
  static Published.subscript.getter(v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  v7 = v8[1];
  *a2 = v8[0];
  a2[1] = v7;
  return result;
}

uint64_t sub_10001B2BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E6DC8);
  v6 = swift_getKeyPath(&unk_1001E6DF0);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_10001B33C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E6D50);
  v5 = swift_getKeyPath(&unk_1001E6D78);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10001B3B8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E6D50);
  v5 = swift_getKeyPath(&unk_1001E6D78);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10001B428@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B450(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10001B478@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accentColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B4A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accentColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001B4C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.accentColor.setter(v1);
}

uint64_t sub_10001B4F0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.accentColor.setter(v1);
}

unint64_t sub_10001B518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B180;
  if (!qword_10028B180)
  {
    v1 = sub_1000070BC(&qword_10028B170);
    sub_100007D5C(&qword_10028B188, (uint64_t (*)(uint64_t))&type metadata accessor for ConversationButton, (uint64_t)&protocol conformance descriptor for ConversationButton);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B180);
  }
  return result;
}

uint64_t sub_10001B5BC(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_10001B5F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B1C0;
  if (!qword_10028B1C0)
  {
    v1 = sub_1000070BC(&qword_10028B160);
    sub_100007D5C(&qword_10028B1C8, (uint64_t (*)(uint64_t))&type metadata accessor for PlayButton, (uint64_t)&protocol conformance descriptor for PlayButton);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B1C0);
  }
  return result;
}

uint64_t sub_10001B68C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100019E24(*(double **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10001B694()
{
  return sub_10001B6DC(&qword_10028B1F0, &qword_10028B1F8, (void (*)(void))sub_10001B6B8);
}

uint64_t sub_10001B6B8()
{
  return sub_10001B6DC(&qword_10028B200, &qword_10028B208, (void (*)(void))sub_10001B744);
}

uint64_t sub_10001B6DC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001B744()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10028B210;
  if (!qword_10028B210)
  {
    v1 = sub_1000070BC(&qword_10028B218);
    v2[0] = sub_1000070BC(&qword_10028B220);
    v2[1] = sub_10001B7D8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.bindGeometry(to:reader:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B210);
  }
  return result;
}

unint64_t sub_10001B7D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B228;
  if (!qword_10028B228)
  {
    v1 = sub_1000070BC(&qword_10028B220);
    sub_10001B85C();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B228);
  }
  return result;
}

unint64_t sub_10001B85C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10028B230;
  if (!qword_10028B230)
  {
    v1 = sub_1000070BC(&qword_10028B238);
    v2[0] = sub_1000070BC(&qword_10028B240);
    v2[1] = type metadata accessor for EnabledTextSelectability(255);
    v2[2] = sub_10001B928();
    v2[3] = &protocol witness table for EnabledTextSelectability;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 1);
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B230);
  }
  return result;
}

unint64_t sub_10001B928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B248;
  if (!qword_10028B248)
  {
    v1 = sub_1000070BC(&qword_10028B240);
    sub_100012334(&qword_10028B250, &qword_10028B258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B248);
  }
  return result;
}

uint64_t sub_10001B9B4()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10001B9D8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001B9E8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10001B9F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001BA20(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_10001BA4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10028B288;
  if (!qword_10028B288)
  {
    v1 = sub_1000070BC(&qword_10028B128);
    v2[0] = sub_1000070BC(&qword_10028B0F0);
    v2[1] = sub_10001B110();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.statusBar(hidden:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028B288);
  }
  return result;
}

uint64_t sub_10001BAE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  swift_retain(*(_QWORD *)(a1 + 56));
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  sub_10001B9D8(v6, v7, v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *sub_10001BB74(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *a1;
  v3 = (void *)a1[4];
  swift_retain(a1[2]);
  v4 = v3;
  swift_retain(v2);
  return a1;
}

uint64_t sub_10001BBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranslateText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BroadcastViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_10028B320;
  if (!qword_10028B320)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BroadcastViewController);
  return result;
}

uint64_t sub_10001BC38(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002AA030);
}

id sub_10001BC74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for BroadcastViewModel(0);
  v3 = sub_10001BEB8();
  v4 = swift_retain(a1);
  v5 = ObservedObject.init(wrappedValue:)(v4, v2, v3);
  v7 = v6;
  v17 = 0;
  State.init(wrappedValue:)(&v12, &v17, &type metadata for CGFloat);
  v8 = v12;
  v9 = v13;
  v12 = v5;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = 0x404E000000000000;
  v10 = (id)UIHostingController.init(rootView:)(&v12);
  objc_msgSend(v10, "setModalPresentationStyle:", 0);
  objc_msgSend(v10, "setModalTransitionStyle:", 2);

  swift_release(a1);
  return v10;
}

void sub_10001BD44()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/BroadcastViewController.swift", 47, 2, 21, 0);
  __break(1u);
}

uint64_t sub_10001BD9C()
{
  return 1;
}

uint64_t sub_10001BDA4(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;

  v2 = (void *)objc_opt_self(UIDevice);
  v3 = a1;
  v4 = objc_msgSend(v2, "currentDevice");
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if (v5 == (id)1)
    return 30;
  else
    return 24;
}

id sub_10001BE24()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BroadcastViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10001BE58()
{
  _swift_stdlib_reportUnimplementedInitializer("SequoiaTranslator.BroadcastViewController", 41, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_10001BE84()
{
  _swift_stdlib_reportUnimplementedInitializer("SequoiaTranslator.BroadcastViewController", 41, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_10001BEB0()
{
  return type metadata accessor for BroadcastViewController(0);
}

unint64_t sub_10001BEB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B370;
  if (!qword_10028B370)
  {
    v1 = type metadata accessor for BroadcastViewModel(255);
    result = swift_getWitnessTable(&unk_1001E6EF8, v1);
    atomic_store(result, (unint64_t *)&qword_10028B370);
  }
  return result;
}

uint64_t sub_10001BF00()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E6F78);
  v2 = swift_getKeyPath(&unk_1001E6FA0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10001BF70()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E6F30);
  v2 = swift_getKeyPath(&unk_1001E6F58);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10001BFE0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  char *v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  id v70[3];
  Swift::tuple_Bool_String v71;

  v6 = v5;
  v67 = a5;
  v68 = a1;
  v10 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028B5A8);
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_10028B5B0);
  v65 = *(_QWORD *)(v16 - 8);
  v66 = v16;
  __chkstk_darwin(v16);
  v64 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel__isPlaying;
  LOBYTE(v70[0]) = 0;
  Published.init(initialValue:)(v70, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v22, v21, v18);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_ttsManager) = 0;
  v23 = OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_conversationManager;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_conversationManager) = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v24 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v24 = &_swiftEmptySetSingleton;
  }
  v25 = a4;
  v61 = v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_observers;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_observers) = v24;
  v26 = (_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation);
  v28 = v67;
  v27 = v68;
  *v26 = v68;
  v26[1] = a2;
  v29 = (_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_dismissHandler);
  *v29 = v25;
  v29[1] = v28;
  v30 = *(void **)(v6 + v23);
  *(_QWORD *)(v6 + v23) = a3;
  swift_unknownObjectRetain(v27);
  swift_retain(v28);
  v31 = a3;

  ObjectType = swift_getObjectType(v27);
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(ObjectType, a2);
  v34 = v33;
  v35 = static String.TRANSLATION_LIMIT.getter();
  v71 = String.truncated(limit:)(v35);
  countAndFlagsBits = v71._1._countAndFlagsBits;
  object = v71._1._object;
  if (v71._0)
  {
    if (qword_10028A400 != -1)
      swift_once(&qword_10028A400, sub_100120ED8);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10000F66C(v38, (uint64_t)qword_1002AA308);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      v60 = v15;
      v43 = v31;
      v44 = v42;
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Warning: Attempted to display text that was too long; only displaying a truncated version",
        v42,
        2u);
      v45 = v44;
      v31 = v43;
      v15 = v60;
      swift_slowDealloc(v45, -1, -1);
    }
    swift_bridgeObjectRelease(v34);

    v28 = v67;
  }
  else
  {
    swift_bridgeObjectRelease(v34);
  }
  swift_beginAccess(v6 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel__displayText, v70, 33, 0);
  v69[0] = countAndFlagsBits;
  v69[1] = object;
  Published.init(initialValue:)(v69, &type metadata for String);
  swift_endAccess(v70);
  swift_beginAccess(&v31[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__currentlyPlayingTTS], v70, 33, 0);
  v46 = sub_100006DF4(&qword_10028B5B8);
  Published.projectedValue.getter(v46);
  swift_endAccess(v70);
  v47 = sub_10001D948();
  v70[0] = (id)static OS_dispatch_queue.main.getter(v47);
  v48 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v12, 1, 1, v48);
  v49 = sub_100012334(&qword_10028B5C0, &qword_10028B5A8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v50 = sub_10001D984();
  v51 = v31;
  v52 = v63;
  v53 = v64;
  Publisher.receive<A>(on:options:)(v70, v12, v63, v47, v49, v50);
  sub_10000A020((uint64_t)v12, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v62 + 8))(v15, v52);
  v54 = swift_allocObject(&unk_1002642E0, 24, 7);
  swift_weakInit(v54 + 16, v6);
  v55 = sub_100012334(&qword_10028B5C8, &qword_10028B5B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v56 = v66;
  v57 = Publisher<>.sink(receiveValue:)(sub_10001D9F0, v54, v66, v55);
  swift_release(v54);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v53, v56);
  v58 = v61;
  swift_beginAccess(v61, v70, 33, 0);
  AnyCancellable.store(in:)(v58);
  swift_endAccess(v70);
  swift_release(v57);
  swift_unknownObjectRelease(v68);

  swift_release(v28);
  return v6;
}

uint64_t sub_10001C514(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v17;
  char v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    swift_beginAccess(v4, v19, 0, 0);
    Strong = swift_weakLoadStrong(v4);
    if (Strong)
    {
      v8 = Strong;
      v10 = *(_QWORD *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation);
      v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation + 8);
      swift_unknownObjectRetain(v10);
      swift_release(v8);
      ObjectType = swift_getObjectType(v10);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(ObjectType, v9);
      v14 = v13;
      swift_unknownObjectRelease(v10);
      if (v2)
      {
        if (v12 == v3 && v2 == v14)
        {
          swift_bridgeObjectRelease(v14);
          LOBYTE(v2) = 1;
          goto LABEL_12;
        }
        LOBYTE(v2) = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v3, v2, 0);
      }
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      LOBYTE(v2) = v2 == 0;
    }
LABEL_12:
    KeyPath = swift_getKeyPath(&unk_1001E6F78);
    v17 = swift_getKeyPath(&unk_1001E6FA0);
    v18 = v2 & 1;
    return static Published.subscript.setter(&v18, v6, KeyPath, v17);
  }
  return result;
}

void sub_10001C664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41[5];

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v2);
  v4 = (char *)&v41[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[3] = (uint64_t)&type metadata for TranslateFeatures;
  v41[4] = sub_100009BC4();
  LOBYTE(v41[0]) = 2;
  v5 = isFeatureEnabled(_:)(v41);
  sub_100009C08(v41);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_ttsManager);
    if (v6)
    {
      v7 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
      v8 = (_QWORD *)swift_allocObject(&unk_1002642B8, 48, 7);
      v8[2] = 0;
      v8[3] = 0;
      v8[4] = v6;
      v8[5] = v1;
      swift_retain(v6);
      swift_retain(v1);
      v9 = sub_100049DC0((uint64_t)v4, (uint64_t)&unk_10028B598, (uint64_t)v8);
      swift_release(v9);
    }
    else
    {
      if (qword_10028A488 != -1)
        swift_once(&qword_10028A488, sub_100121150);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_10000F66C(v19, (uint64_t)qword_1002AA4A0);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Can't toggle TTS because there's no TTSManager", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

    }
  }
  else
  {
    v10 = OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation;
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation);
    v12 = type metadata accessor for PersistedTranslation(0);
    v13 = swift_dynamicCastClass(v11, v12);
    if (v13)
    {
      v14 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_conversationManager);
      if (v14)
      {
        v15 = (void *)v13;
        v16 = type metadata accessor for TTSPlaybackViewModel(0);
        swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
        v17 = v14;
        swift_unknownObjectRetain(v11);
        v18 = sub_1001CFF78(v17);
        sub_1001D036C(v15, 0);
        swift_unknownObjectRelease(v11);

        swift_release(v18);
      }
      else
      {
        v34 = qword_10028A400;
        swift_unknownObjectRetain(v11);
        if (v34 != -1)
          swift_once(&qword_10028A400, sub_100120ED8);
        v35 = type metadata accessor for Logger(0);
        v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA308);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Can't toggle TTS because there's no ConversationManager", v39, 2u);
          swift_slowDealloc(v39, -1, -1);
        }

        swift_unknownObjectRelease(v11);
      }
    }
    else
    {
      if (qword_10028A400 != -1)
        swift_once(&qword_10028A400, sub_100120ED8);
      v24 = type metadata accessor for Logger(0);
      sub_10000F66C(v24, (uint64_t)qword_1002AA308);
      v25 = swift_retain_n(v1, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        v41[0] = v29;
        *(_DWORD *)v28 = 136446210;
        ObjectType = swift_getObjectType(*(_QWORD *)(v1 + v10));
        v31 = _typeName(_:qualified:)(ObjectType, 0);
        v33 = v32;
        v40 = sub_1001A7FE4(v31, v32, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v28 + 4);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v33);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {

        swift_release_n(v1, 2);
      }
    }
  }
}

uint64_t sub_10001CAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for UUID(0);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028F1B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[8] = swift_task_alloc(v8);
  v5[9] = swift_task_alloc(v8);
  return swift_task_switch(sub_10001CB8C, 0, 0);
}

uint64_t sub_10001CB8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[4];
  v2 = OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation;
  v0[10] = OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation;
  v3 = (uint64_t *)(v1 + v2);
  v4 = *v3;
  v0[11] = *v3;
  v5 = v3[1];
  v6 = dword_100298DAC;
  swift_unknownObjectRetain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_10001CC28;
  return sub_1001D0ED8(v4, v5, 0, 0, 0, 0, 1, 0);
}

uint64_t sub_10001CC28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10001CE6C;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 88));
    v4 = sub_10001CC94;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001CC94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t, uint64_t);
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 80));
  v2 = *v1;
  v3 = v1[1];
  ObjectType = swift_getObjectType(*v1);
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 128);
  swift_unknownObjectRetain(v2);
  v5(ObjectType, v3);
  swift_unknownObjectRelease(v2);
  v7 = *v1;
  v6 = v1[1];
  v8 = swift_getObjectType(*v1);
  v9 = *(double (**)(uint64_t, uint64_t))(v6 + 96);
  swift_unknownObjectRetain(v7);
  v10 = v9(v8, v6);
  swift_unknownObjectRelease(v7);
  v11 = 2;
  v12 = 3;
  v13 = 3;
  if (v10 == 1.25)
    v13 = 4;
  if (v10 != 1.0)
    v12 = v13;
  if (v10 != 0.75)
    v11 = v12;
  if (v10 == 0.5)
    v14 = 1;
  else
    v14 = v11;
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 40);
  v17 = *(_QWORD *)(v0 + 48);
  sub_10001D3C8(*(_QWORD *)(v0 + 72), v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10000A020(*(_QWORD *)(v0 + 64), (uint64_t *)&unk_10028F1B0);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 48);
    v18 = *(_QWORD *)(v0 + 56);
    v20 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 32))(v18, *(_QWORD *)(v0 + 64), v20);
    v21 = (void *)objc_opt_self(_LTSELFLoggingInvocation);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v21, "translationTTSPlayedWithInvocationId:sourceOrTargetLanguage:isAutoplayTranslation:ttsPlaybackSpeed:audioChannel:", isa, 2, 0, v14, 1);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  sub_10000A020(*(_QWORD *)(v0 + 72), (uint64_t *)&unk_10028F1B0);
  v23 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA4A0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Exception while toggling TTS: %@", v8, 0xCu);
    v11 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel__isPlaying;
  v2 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel__displayText;
  v4 = sub_100006DF4(&qword_10028B5A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_dismissHandler + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_ttsManager));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_observers));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10001D130()
{
  return type metadata accessor for BroadcastViewModel(0);
}

uint64_t type metadata accessor for BroadcastViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10028B3D8;
  if (!qword_10028B3D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BroadcastViewModel);
  return result;
}

void sub_10001D174(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_10001D248(319, (unint64_t *)&qword_100295C00, (uint64_t)&type metadata for Bool);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001D248(319, (unint64_t *)&qword_10028B3E8, (uint64_t)&type metadata for String);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for () + 64;
      v6[3] = &unk_1001E6EC8;
      v6[4] = &unk_1001E6EE0;
      v6[5] = &unk_1001E6EE0;
      v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

void sub_10001D248(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void *sub_10001D28C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10001D298@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for BroadcastViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001D2D4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001D308(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10028B594);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D380;
  return sub_10001CAF8(a1, v4, v5, v7, v6);
}

uint64_t sub_10001D380()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001D3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001D420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  id v65[3];
  Swift::tuple_Bool_String v66;

  v55 = a6;
  v61 = a4;
  v62 = a1;
  v63 = a2;
  v10 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028B5A8);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_10028B5B0);
  v59 = *(_QWORD *)(v16 - 8);
  v60 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel__isPlaying;
  LOBYTE(v65[0]) = 0;
  Published.init(initialValue:)(v65, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v23, v22, v19);
  v24 = OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_ttsManager;
  *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_ttsManager) = 0;
  *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_conversationManager) = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v25 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v25 = &_swiftEmptySetSingleton;
  }
  v26 = v61;
  v27 = v62;
  v56 = a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_observers;
  *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_observers) = v25;
  v28 = (_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_translation);
  *v28 = v27;
  v28[1] = a7;
  v29 = (_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel_dismissHandler);
  *v29 = a3;
  v29[1] = v26;
  v30 = *(_QWORD *)(a5 + v24);
  v31 = v63;
  *(_QWORD *)(a5 + v24) = v63;
  swift_unknownObjectRetain(v27);
  swift_retain(v26);
  swift_retain(v31);
  swift_release(v30);
  (*(void (**)(uint64_t, uint64_t))(a7 + 72))(v55, a7);
  v33 = v32;
  v34 = static String.TRANSLATION_LIMIT.getter();
  v66 = String.truncated(limit:)(v34);
  countAndFlagsBits = v66._1._countAndFlagsBits;
  object = v66._1._object;
  if (v66._0)
  {
    if (qword_10028A400 != -1)
      swift_once(&qword_10028A400, sub_100120ED8);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_10000F66C(v37, (uint64_t)qword_1002AA308);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Warning: Attempted to display text that was too long; only displaying a truncated version",
        v41,
        2u);
      swift_slowDealloc(v41, -1, -1);
    }
    swift_bridgeObjectRelease(v33);

    v26 = v61;
  }
  else
  {
    swift_bridgeObjectRelease(v33);
  }
  swift_beginAccess(a5 + OBJC_IVAR____TtC17SequoiaTranslator18BroadcastViewModel__displayText, v65, 33, 0);
  v64[0] = countAndFlagsBits;
  v64[1] = object;
  Published.init(initialValue:)(v64, &type metadata for String);
  swift_endAccess(v65);
  v42 = v63;
  swift_beginAccess(v63 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentlyPlayingTranslationID, v65, 33, 0);
  v43 = sub_100006DF4(&qword_10028B5B8);
  Published.projectedValue.getter(v43);
  swift_endAccess(v65);
  v44 = sub_10001D948();
  v65[0] = (id)static OS_dispatch_queue.main.getter(v44);
  v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v12, 1, 1, v45);
  v46 = sub_100012334(&qword_10028B5C0, &qword_10028B5A8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v47 = sub_10001D984();
  v48 = v58;
  Publisher.receive<A>(on:options:)(v65, v12, v58, v44, v46, v47);
  sub_10000A020((uint64_t)v12, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v48);
  v49 = swift_allocObject(&unk_1002642E0, 24, 7);
  swift_weakInit(v49 + 16, a5);
  v50 = sub_100012334(&qword_10028B5C8, &qword_10028B5B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v51 = v60;
  v52 = Publisher<>.sink(receiveValue:)(sub_10001D9F0, v49, v60, v50);
  swift_release(v49);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v18, v51);
  v53 = v56;
  swift_beginAccess(v56, v65, 33, 0);
  AnyCancellable.store(in:)(v53);
  swift_endAccess(v65);
  swift_release(v52);
  swift_unknownObjectRelease(v62);
  swift_release(v42);
  swift_release(v26);
  return a5;
}

unint64_t sub_10001D948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AC20;
  if (!qword_10028AC20)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028AC20);
  }
  return result;
}

unint64_t sub_10001D984()
{
  unint64_t result;
  unint64_t v1;

  result = qword_100295550;
  if (!qword_100295550)
  {
    v1 = sub_10001D948();
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_100295550);
  }
  return result;
}

uint64_t sub_10001D9CC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001D9F0(uint64_t *a1)
{
  uint64_t v1;

  return sub_10001C514(a1, v1);
}

BOOL sub_10001DA10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

_QWORD *sub_10001DA28@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_10001DA48(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t *sub_10001DA54@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t sub_10001DA6C()
{
  return sub_10001DA94((uint64_t)&unk_1001E73B8, (uint64_t)&unk_1001E73E0);
}

uint64_t sub_10001DA80()
{
  return sub_10001DA94((uint64_t)&unk_1001E7370, (uint64_t)&unk_1001E7398);
}

uint64_t sub_10001DA94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10001DAFC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E7328);
  v4 = swift_getKeyPath(&unk_1001E7350);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_10001DB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__sceneTypeSelection;
  v2 = sub_100006DF4(&qword_10028BC48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__presentationTypeSelection;
  v4 = sub_100006DF4(&qword_10028BC50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__planeDetectionSelection;
  v6 = sub_100006DF4(&qword_10028BC58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__translationEnabled;
  v8 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__groupingEnabled, v8);
  v9(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__usesAlternateLineGrouping, v8);
  v10 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__textRecognitionDefaultFrequency;
  v11 = sub_100006DF4((uint64_t *)&unk_10028F240);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__textRecognitionInfrequentFrequency, v11);
  v9(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__pauseOnLowStability, v8);
  v13 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__staticImage;
  v14 = sub_100006DF4(&qword_10028BC60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v9(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__isShareSheetPresented, v8);
  v9(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__showRegionAdjustmentView, v8);
  v9(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__showBoundingBox, v8);
  v15 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__staticInteractionSelection;
  v16 = sub_100006DF4(&qword_10028BC68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__currentHeight;
  v18 = sub_100006DF4(&qword_10028BC70);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v19(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__currentWidth, v18);
  v20 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__regionOfInterest;
  v21 = sub_100006DF4(&qword_10028BC78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  return v0;
}

uint64_t sub_10001DDC4()
{
  uint64_t v0;

  sub_10001DB60();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10001DDE8()
{
  return type metadata accessor for CameraConfiguration(0);
}

uint64_t type metadata accessor for CameraConfiguration(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_10028B680, (uint64_t)&nominal type descriptor for CameraConfiguration);
}

void sub_10001DE04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[6];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10001D248(319, &qword_10028B690, (uint64_t)&type metadata for CameraConfiguration.SceneType);
  if (v3 <= 0x3F)
  {
    v21[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001D248(319, &qword_10028B698, (uint64_t)&type metadata for CameraConfiguration.PresentationType);
    if (v5 <= 0x3F)
    {
      v21[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001D248(319, &qword_10028B6A0, (uint64_t)&type metadata for CameraConfiguration.PlaneDetection);
      if (v7 <= 0x3F)
      {
        v21[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001D248(319, (unint64_t *)&qword_100295C00, (uint64_t)&type metadata for Bool);
        if (v9 <= 0x3F)
        {
          v10 = *(_QWORD *)(v8 - 8) + 64;
          v21[3] = v10;
          v21[4] = v10;
          v21[5] = v10;
          sub_10001D248(319, &qword_10028B6A8, (uint64_t)&type metadata for Float);
          if (v12 <= 0x3F)
          {
            v22 = *(_QWORD *)(v11 - 8) + 64;
            v23 = v22;
            v24 = v10;
            sub_10001DFF8(319, &qword_10028B6B0, &qword_10028B6B8);
            if (v14 <= 0x3F)
            {
              v25 = *(_QWORD *)(v13 - 8) + 64;
              v26 = v10;
              v27 = v10;
              v28 = v10;
              sub_10001D248(319, &qword_10028B6C0, (uint64_t)&type metadata for CameraConfiguration.StaticInteraction);
              if (v16 <= 0x3F)
              {
                v29 = *(_QWORD *)(v15 - 8) + 64;
                v30 = (char *)&value witness table for Builtin.Int64 + 64;
                v31 = (char *)&value witness table for Builtin.Int64 + 64;
                sub_10001D248(319, &qword_10028B6C8, (uint64_t)&type metadata for CGFloat);
                if (v18 <= 0x3F)
                {
                  v32 = *(_QWORD *)(v17 - 8) + 64;
                  v33 = v32;
                  sub_10001DFF8(319, &qword_10028B6D0, (uint64_t *)&unk_10028B6D8);
                  if (v20 <= 0x3F)
                  {
                    v34 = *(_QWORD *)(v19 - 8) + 64;
                    swift_updateClassMetadata2(a1, 256, 19, v21, a1 + 80);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_10001DFF8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_1000070BC(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

ValueMetadata *type metadata accessor for CameraConfiguration.StaticInteraction()
{
  return &type metadata for CameraConfiguration.StaticInteraction;
}

char *sub_10001E05C(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  char *v13;
  __n128 v14;
  uint64_t v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    *((_QWORD *)a1 + 1) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
    v13 = v4;
    v14 = swift_bridgeObjectRetain(v6);
    if (v12(v9, 1, v10, v14))
    {
      v15 = sub_100006DF4(&qword_10028BB80);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t sub_10001E15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_10001E1E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t, __n128);
  id v12;
  __n128 v13;
  uint64_t v14;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v10 + 48);
  v12 = v5;
  v13 = swift_bridgeObjectRetain(v4);
  if (v11(v8, 1, v9, v13))
  {
    v14 = sub_100006DF4(&qword_10028BB80);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_10001E2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100006DF4(&qword_10028BB80);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_QWORD *sub_10001E3E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_100006DF4(&qword_10028BB80);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_10001E4A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100006DF4(&qword_10028BB80);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_10001E5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E5D4);
}

uint64_t sub_10001E5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028BB80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10001E654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E660);
}

uint64_t sub_10001E660(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028BB80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CameraConfiguration.StaticImage(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_10028BBE0, (uint64_t)&nominal type descriptor for CameraConfiguration.StaticImage);
}

uint64_t sub_10001E6EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_10001E720(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10001E7A0(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_10001E7A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028BBF0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028BBF0);
  }
}

uint64_t getEnumTagSinglePayload for CameraConfiguration.PlaneDetection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraConfiguration.PlaneDetection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10001E8D0 + 4 * byte_1001E6FC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001E904 + 4 * byte_1001E6FC0[v4]))();
}

uint64_t sub_10001E904(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001E90C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001E914);
  return result;
}

uint64_t sub_10001E920(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001E928);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001E92C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001E934(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraConfiguration.PlaneDetection()
{
  return &type metadata for CameraConfiguration.PlaneDetection;
}

_BYTE *sub_10001E950(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CameraConfiguration.PresentationType()
{
  return &type metadata for CameraConfiguration.PresentationType;
}

uint64_t getEnumTagSinglePayload for TTSManager.PlaybackSide(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s17SequoiaTranslator19CameraConfigurationC9SceneTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001EA48 + 4 * byte_1001E6FCF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001EA7C + 4 * byte_1001E6FCA[v4]))();
}

uint64_t sub_10001EA7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001EA84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001EA8CLL);
  return result;
}

uint64_t sub_10001EA98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001EAA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001EAA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001EAAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraConfiguration.SceneType()
{
  return &type metadata for CameraConfiguration.SceneType;
}

unint64_t sub_10001EACC()
{
  unint64_t result;

  result = qword_10028BC28;
  if (!qword_10028BC28)
  {
    result = swift_getWitnessTable(&unk_1001E70E4, &type metadata for CameraConfiguration.SceneType);
    atomic_store(result, (unint64_t *)&qword_10028BC28);
  }
  return result;
}

unint64_t sub_10001EB14()
{
  unint64_t result;

  result = qword_10028BC30;
  if (!qword_10028BC30)
  {
    result = swift_getWitnessTable(&unk_1001E7184, &type metadata for CameraConfiguration.PresentationType);
    atomic_store(result, (unint64_t *)&qword_10028BC30);
  }
  return result;
}

unint64_t sub_10001EB5C()
{
  unint64_t result;

  result = qword_10028BC38;
  if (!qword_10028BC38)
  {
    result = swift_getWitnessTable(&unk_1001E7224, &type metadata for CameraConfiguration.PlaneDetection);
    atomic_store(result, (unint64_t *)&qword_10028BC38);
  }
  return result;
}

unint64_t sub_10001EBA4()
{
  unint64_t result;

  result = qword_10028BC40;
  if (!qword_10028BC40)
  {
    result = swift_getWitnessTable(&unk_1001E72C4, &type metadata for CameraConfiguration.StaticInteraction);
    atomic_store(result, (unint64_t *)&qword_10028BC40);
  }
  return result;
}

uint64_t sub_10001EBE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD v80[2];
  char v81;

  v1 = sub_100006DF4(&qword_10028BC78);
  v78 = *(_QWORD *)(v1 - 8);
  v79 = v1;
  __chkstk_darwin(v1);
  v77 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100006DF4(&qword_10028BC70);
  v75 = *(_QWORD *)(v3 - 8);
  v76 = v3;
  __chkstk_darwin(v3);
  v74 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028BC68);
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  __chkstk_darwin(v5);
  v71 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028BC60);
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  __chkstk_darwin(v7);
  v68 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100006DF4(&qword_10028B6B8);
  v9 = __chkstk_darwin(v67);
  v66 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v65 = (char *)&v58 - v11;
  v64 = sub_100006DF4((uint64_t *)&unk_10028F240);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100006DF4(&qword_10028BC58);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_10028BC50);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100006DF4(&qword_10028BC48);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__sceneTypeSelection;
  LOBYTE(v80[0]) = 0;
  Published.init(initialValue:)(v80, &type metadata for CameraConfiguration.SceneType);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v25, v24, v21);
  v26 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__presentationTypeSelection;
  LOBYTE(v80[0]) = 1;
  Published.init(initialValue:)(v80, &type metadata for CameraConfiguration.PresentationType);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v26, v20, v17);
  v27 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__planeDetectionSelection;
  LOBYTE(v80[0]) = 2;
  Published.init(initialValue:)(v80, &type metadata for CameraConfiguration.PlaneDetection);
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v27, v16, v59);
  v28 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__translationEnabled;
  LOBYTE(v80[0]) = 1;
  Published.init(initialValue:)(v80, &type metadata for Bool);
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v60 + 32);
  v30 = v61;
  v29(v28, v14, v61);
  v31 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__groupingEnabled;
  LOBYTE(v80[0]) = 1;
  Published.init(initialValue:)(v80, &type metadata for Bool);
  v29(v31, v14, v30);
  v32 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__usesAlternateLineGrouping;
  LOBYTE(v80[0]) = 0;
  Published.init(initialValue:)(v80, &type metadata for Bool);
  v29(v32, v14, v30);
  v33 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__textRecognitionDefaultFrequency;
  LODWORD(v80[0]) = 1048576000;
  v34 = v62;
  Published.init(initialValue:)(v80, &type metadata for Float);
  v35 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
  v36 = v64;
  v35(v33, v34, v64);
  v37 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__textRecognitionInfrequentFrequency;
  LODWORD(v80[0]) = 1069547520;
  Published.init(initialValue:)(v80, &type metadata for Float);
  v35(v37, v34, v36);
  v38 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__pauseOnLowStability;
  LOBYTE(v80[0]) = 1;
  Published.init(initialValue:)(v80, &type metadata for Bool);
  v29(v38, v14, v30);
  v39 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__staticImage;
  v40 = type metadata accessor for CameraConfiguration.StaticImage(0);
  v41 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v65, 1, 1, v40);
  v42 = v66;
  sub_10001F374(v41, v66);
  v43 = v68;
  Published.init(initialValue:)(v42, v67);
  sub_10001F3BC(v41);
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v39, v43, v70);
  v44 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__isShareSheetPresented;
  LOBYTE(v80[0]) = 0;
  Published.init(initialValue:)(v80, &type metadata for Bool);
  v29(v44, v14, v30);
  v45 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__showRegionAdjustmentView;
  LOBYTE(v80[0]) = 1;
  Published.init(initialValue:)(v80, &type metadata for Bool);
  v29(v45, v14, v30);
  v46 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__showBoundingBox;
  LOBYTE(v80[0]) = 0;
  Published.init(initialValue:)(v80, &type metadata for Bool);
  v29(v46, v14, v30);
  v47 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__staticInteractionSelection;
  LOBYTE(v80[0]) = 0;
  v48 = v71;
  Published.init(initialValue:)(v80, &type metadata for CameraConfiguration.StaticInteraction);
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v47, v48, v73);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration_maxHeight) = 0x4069000000000000;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration_maxWidth) = 0x4069000000000000;
  v49 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__currentHeight;
  *(_QWORD *)&v80[0] = 0x4069000000000000;
  v50 = v74;
  Published.init(initialValue:)(v80, &type metadata for CGFloat);
  v51 = v76;
  v52 = *(void (**)(uint64_t, char *, uint64_t))(v75 + 32);
  v52(v49, v50, v76);
  v53 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__currentWidth;
  *(_QWORD *)&v80[0] = 0x4069000000000000;
  Published.init(initialValue:)(v80, &type metadata for CGFloat);
  v52(v53, v50, v51);
  v54 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19CameraConfiguration__regionOfInterest;
  memset(v80, 0, sizeof(v80));
  v81 = 1;
  v55 = sub_100006DF4((uint64_t *)&unk_10028B6D8);
  v56 = v77;
  Published.init(initialValue:)(v80, v55);
  (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v54, v56, v79);
  return v0;
}

uint64_t sub_10001F320@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CameraConfiguration(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001F374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028B6B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001F3BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_10028B6B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001F410(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for CardActionButtons(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 40));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(*(_QWORD *)(a1 + 80));
  return sub_10001F470(*(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
}

uint64_t sub_10001F470(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t initializeWithCopy for CardActionButtons(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  v10 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v10;
  v4 = *(_QWORD *)(a2 + 56);
  v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(_BYTE *)(a2 + 104);
  swift_retain(v3);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  sub_10001F410(v7, v8);
  *(_QWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 104) = v8;
  return a1;
}

uint64_t assignWithCopy for CardActionButtons(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v2 = a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = v2[3];
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = v2[5];
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v2[4];
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = v2[7];
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v2[6];
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)v2 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = v2[9];
  *(_QWORD *)(a1 + 72) = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = v2[10];
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_BYTE *)(a1 + 88) = *((_BYTE *)v2 + 88);
  *(_BYTE *)(a1 + 89) = *((_BYTE *)v2 + 89);
  v16 = v2[12];
  LOBYTE(v2) = *((_BYTE *)v2 + 104);
  sub_10001F410(v16, (char)v2);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 104) = (_BYTE)v2;
  sub_10001F470(v17, v18);
  return a1;
}

__n128 initializeWithTake for CardActionButtons(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for CardActionButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v7);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_release(*(_QWORD *)(a1 + 72));
  v8 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v8);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v9 = *(_BYTE *)(a2 + 104);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v9;
  sub_10001F470(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardActionButtons(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CardActionButtons(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardActionButtons()
{
  return &type metadata for CardActionButtons;
}

uint64_t sub_10001F7E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020F77C, 1);
}

uint64_t sub_10001F7F4()
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000028, 0x80000001001F8CF0);
  qword_1002AA050 = result;
  return result;
}

uint64_t sub_10001F828()
{
  uint64_t result;

  result = Image.init(systemName:)(1918989427, 0xE400000000000000);
  qword_1002AA058 = result;
  return result;
}

uint64_t sub_10001F850()
{
  uint64_t result;

  result = Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
  qword_1002AA060 = result;
  return result;
}

uint64_t sub_10001F884()
{
  uint64_t result;

  result = Image.init(systemName:)(0x6F6C632E6B6F6F62, 0xEB00000000646573);
  qword_1002AA068 = result;
  return result;
}

uint64_t sub_10001F8BC()
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000010, 0x80000001001F8CD0);
  qword_1002AA070 = result;
  return result;
}

uint64_t sub_10001F8F0@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t KeyPath;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  int *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  void (*v111)(char *, uint64_t);
  uint64_t v113;
  __int16 v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  void (*v126)(char *, char *, uint64_t);
  unint64_t v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char v141[16];
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v125 = a2;
  v120 = sub_100006DF4(&qword_10028BC88);
  v3 = __chkstk_darwin(v120);
  v118 = (char *)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v119 = (char *)&v115 - v5;
  v124 = sub_100006DF4(&qword_10028BC90);
  v122 = *(_QWORD *)(v124 - 8);
  v6 = __chkstk_darwin(v124);
  v123 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v121 = (char *)&v115 - v8;
  v9 = sub_100006DF4(&qword_10028BC98);
  v10 = __chkstk_darwin(v9);
  v133 = (uint64_t)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v136 = (char *)&v115 - v12;
  v13 = sub_100006DF4(&qword_10028BCA0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_10028BCA8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v115 - v21;
  v135 = sub_100006DF4(&qword_10028BCB0);
  v140 = *(_QWORD *)(v135 - 8);
  v23 = __chkstk_darwin(v135);
  v132 = (char *)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v138 = (char *)&v115 - v26;
  v27 = __chkstk_darwin(v25);
  v139 = (char *)&v115 - v28;
  __chkstk_darwin(v27);
  v137 = (char *)&v115 - v29;
  v117 = a1;
  v31 = *a1;
  v30 = a1[1];
  swift_retain(v30);
  Button.init(action:label:)(v31, v30, sub_100020460, 0, &type metadata for Image, &protocol witness table for Image);
  v129 = sub_100012334(&qword_10028BCB8, &qword_10028BCA0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v130 = v13;
  View.accessibilityIdentifier(_:)(0xD000000000000011, 0x80000001001F8C30, v13, v129);
  v128 = *(void (**)(char *, uint64_t))(v14 + 8);
  v128(v16, v13);
  v32 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001001F8C50);
  v114 = 256;
  v113 = 0;
  v33 = Text.init(_:tableName:bundle:comment:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  v131 = v17;
  ModifiedContent<>.accessibility(label:)();
  sub_10001B9E8(v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  sub_10000A020((uint64_t)v20, &qword_10028BCA8);
  KeyPath = swift_getKeyPath(&unk_1001E7468);
  v143 = KeyPath;
  LOBYTE(v144) = 0;
  v41 = sub_100020B88();
  v127 = v41;
  v134 = sub_100020C24();
  v42 = v139;
  View.buttonStyle<A>(_:)(&v143, v17, &type metadata for CardActionButtonStyle, v41, v134);
  swift_release(KeyPath);
  sub_10000A020((uint64_t)v22, &qword_10028BCA8);
  v126 = *(void (**)(char *, char *, uint64_t))(v140 + 32);
  v43 = v117;
  v44 = v42;
  v45 = v135;
  v126(v137, v44, v135);
  v46 = v43[2];
  v47 = v43[3];
  v142 = v43;
  swift_retain(v47);
  Button.init(action:label:)(v46, v47, sub_100020C68, v141, &type metadata for Image, &protocol witness table for Image);
  v48 = v130;
  View.accessibilityIdentifier(_:)(0xD000000000000013, 0x80000001001F8C70, v130, v129);
  v115 = v16;
  v128(v16, v48);
  v49 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x80000001001F8C90);
  v114 = 256;
  v113 = 0;
  v50 = Text.init(_:tableName:bundle:comment:)(v49);
  v52 = v51;
  v54 = v53;
  LOBYTE(v33) = v55 & 1;
  v56 = v131;
  ModifiedContent<>.accessibility(label:)();
  v57 = v139;
  sub_10001B9E8(v50, v52, v33);
  v58 = v134;
  swift_bridgeObjectRelease(v54);
  v116 = v20;
  sub_10000A020((uint64_t)v20, &qword_10028BCA8);
  v59 = swift_getKeyPath(&unk_1001E7468);
  v143 = v59;
  LOBYTE(v144) = 0;
  v60 = v56;
  v61 = v57;
  View.buttonStyle<A>(_:)(&v143, v60, &type metadata for CardActionButtonStyle, v127, v58);
  swift_release(v59);
  sub_10000A020((uint64_t)v22, &qword_10028BCA8);
  v62 = ((uint64_t (*)(char *, char *, uint64_t))v126)(v138, v57, v45);
  if ((*((_BYTE *)v43 + 89) & 1) != 0)
  {
    v65 = v43[4];
    v66 = v43[5];
    __chkstk_darwin(v62);
    swift_retain(v66);
    v67 = v115;
    Button.init(action:label:)(v65, v66, sub_100020D38, &v115 - 4, &type metadata for Image, &protocol witness table for Image);
    v68 = (uint64_t)v116;
    v69 = v130;
    View.accessibilityIdentifier(_:)(0x746369446E65706FLL, 0xEE007972616E6F69, v130, v129);
    v128(v67, v69);
    v70 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x80000001001F8CB0);
    v114 = 256;
    v113 = 0;
    v71 = Text.init(_:tableName:bundle:comment:)(v70);
    v73 = v72;
    v75 = v74;
    v77 = v76 & 1;
    v78 = v131;
    ModifiedContent<>.accessibility(label:)();
    sub_10001B9E8(v71, v73, v77);
    swift_bridgeObjectRelease(v75);
    sub_10000A020(v68, &qword_10028BCA8);
    v79 = swift_getKeyPath(&unk_1001E7468);
    v143 = v79;
    LOBYTE(v144) = 0;
    View.buttonStyle<A>(_:)(&v143, v78, &type metadata for CardActionButtonStyle, v127, v134);
    swift_release(v79);
    sub_10000A020((uint64_t)v22, &qword_10028BCA8);
    v80 = (uint64_t)v136;
    v126(v136, v61, v135);
    v63 = 0;
    v64 = v80;
  }
  else
  {
    v63 = 1;
    v64 = (uint64_t)v136;
  }
  v81 = v135;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v64, v63, 1, v135);
  v83 = v43[6];
  v82 = v43[7];
  v147 = 0;
  swift_retain(v82);
  State.init(wrappedValue:)(&v143, &v147, &type metadata for Int);
  v84 = v144;
  v145 = v83;
  v146 = v82;
  v85 = sub_100020C70();
  v86 = (uint64_t)v118;
  View.accessibilityIdentifier(_:)(0x6E61725479706F63, 0xEF6E6F6974616C73, &type metadata for CopyButton, v85);
  swift_release(v82);
  swift_release(v84);
  v87 = LocalizedStringKey.init(stringLiteral:)(0x504F435F59313141, 0xEF454C5449545F59);
  v114 = 256;
  v113 = 0;
  v88 = Text.init(_:tableName:bundle:comment:)(v87);
  v90 = v89;
  v92 = v91;
  v94 = v93 & 1;
  v95 = (uint64_t)v119;
  v96 = v120;
  ModifiedContent<>.accessibility(label:)();
  sub_10001B9E8(v88, v90, v94);
  swift_bridgeObjectRelease(v92);
  sub_10000A020(v86, &qword_10028BC88);
  v97 = swift_getKeyPath(&unk_1001E7468);
  v143 = v97;
  LOBYTE(v144) = 0;
  v98 = sub_100020CB4();
  v99 = v123;
  View.buttonStyle<A>(_:)(&v143, v96, &type metadata for CardActionButtonStyle, v98, v134);
  swift_release(v97);
  sub_10000A020(v95, &qword_10028BC88);
  v100 = v122;
  v101 = v121;
  v102 = v124;
  (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v121, v99, v124);
  v103 = v139;
  v104 = *(void (**)(char *, char *, uint64_t))(v140 + 16);
  v104(v139, v137, v81);
  v105 = v132;
  v104(v132, v138, v81);
  sub_10000B074((uint64_t)v136, v133, &qword_10028BC98);
  v106 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  v106(v99, v101, v102);
  v107 = v125;
  v104(v125, v103, v81);
  v108 = (int *)sub_100006DF4(&qword_10028BCE0);
  v104(&v107[v108[12]], v105, v81);
  v109 = v133;
  sub_10000B074(v133, (uint64_t)&v107[v108[16]], &qword_10028BC98);
  v106(&v107[v108[20]], v99, v102);
  v110 = *(void (**)(char *, uint64_t))(v100 + 8);
  v110(v101, v102);
  sub_10000A020((uint64_t)v136, &qword_10028BC98);
  v111 = *(void (**)(char *, uint64_t))(v140 + 8);
  v111(v138, v81);
  v111(v137, v81);
  v110(v99, v102);
  sub_10000A020(v109, &qword_10028BC98);
  v111(v132, v81);
  return ((uint64_t (*)(char *, uint64_t))v111)(v139, v81);
}

uint64_t sub_100020460@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_10028A370 != -1)
    swift_once(&qword_10028A370, sub_10001F7F4);
  v2 = qword_1002AA050;
  *a1 = qword_1002AA050;
  return swift_retain(v2);
}

uint64_t sub_1000204B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if (qword_10028A380 != -1)
      swift_once(&qword_10028A380, sub_10001F850);
    v3 = &qword_1002AA060;
  }
  else
  {
    if (qword_10028A378 != -1)
      swift_once(&qword_10028A378, sub_10001F828);
    v3 = &qword_1002AA058;
  }
  result = swift_retain(*v3);
  *a2 = result;
  return result;
}

uint64_t sub_100020544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;

  sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v4);
  if (v4 == 1)
  {
    if (qword_10028A390 != -1)
      swift_once(&qword_10028A390, sub_10001F8BC);
    v2 = &qword_1002AA070;
  }
  else
  {
    if (qword_10028A388 != -1)
      swift_once(&qword_10028A388, sub_10001F884);
    v2 = &qword_1002AA068;
  }
  result = swift_retain(*v2);
  *a1 = result;
  return result;
}

uint64_t sub_10002060C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[5];
  _OWORD v10[2];

  v4 = v2[5];
  v9[4] = v2[4];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v2 + 89);
  v5 = v2[1];
  v9[0] = *v2;
  v9[1] = v5;
  v6 = v2[3];
  v9[2] = v2[2];
  v9[3] = v6;
  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4038000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v7 = sub_100006DF4(&qword_10028BC80);
  return sub_10001F8F0(v9, (char *)(a2 + *(int *)(v7 + 44)));
}

uint64_t sub_10002067C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;

  v64 = a3;
  v65 = a2;
  v67 = a4;
  v63 = sub_100006DF4(&qword_10028BCF8);
  __chkstk_darwin(v63);
  v70 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Image.Scale(0);
  v6 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100006DF4(&qword_10028BD00);
  __chkstk_darwin(v68);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_10028BD08);
  __chkstk_darwin(v15);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_10028BD10);
  v61 = *(_QWORD *)(v18 - 8);
  v62 = v18;
  __chkstk_darwin(v18);
  v56 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100006DF4(&qword_10028BD18);
  __chkstk_darwin(v57);
  v60 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100006DF4(&qword_10028BD20);
  v21 = __chkstk_darwin(v59);
  v58 = (uint64_t)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a1;
  v23 = ButtonStyleConfiguration.label.getter(v21);
  v24 = static Font.body.getter(v23);
  KeyPath = swift_getKeyPath(&unk_1001E74F0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v9);
  v26 = (uint64_t *)&v14[*(int *)(v68 + 36)];
  *v26 = KeyPath;
  v26[1] = v24;
  v27 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v28 = v69;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.Scale.large(_:), v69);
  v29 = swift_getKeyPath(&unk_1001E7520);
  v30 = (uint64_t *)&v17[*(int *)(v15 + 36)];
  v31 = sub_100006DF4(&qword_10028BD28);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v30 + *(int *)(v31 + 28), v8, v28);
  *v30 = v29;
  sub_10000B074((uint64_t)v14, (uint64_t)v17, &qword_10028BD00);
  v32 = v8;
  v33 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v28);
  sub_10000A020((uint64_t)v14, &qword_10028BD00);
  v34 = enum case for DynamicTypeSize.xxLarge(_:);
  v35 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
  v36 = sub_100007D5C(&qword_10028BD30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v33, v33, v35, v36);
  if ((result & 1) != 0)
  {
    v38 = sub_100020F1C();
    v39 = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v40 = v56;
    View.dynamicTypeSize<A>(_:)(v33, v27, v63, v38, v39);
    sub_10000A020(v33, &qword_10028BCF8);
    sub_10000A020((uint64_t)v17, &qword_10028BD08);
    LOBYTE(v38) = v64 & 1;
    v41 = v65;
    sub_10001F410(v65, v64 & 1);
    v42 = sub_1000D54C8(v41, v38);
    v43 = sub_10001F470(v41, v38);
    v44 = v40;
    if ((v42 & 1) != 0)
      v45 = static Color.translateAccentColor.getter(v43);
    else
      v45 = static Color.tertiaryTranslateAccentColor.getter(v43);
    v46 = v45;
    v47 = swift_getKeyPath(&unk_1001E7550);
    v49 = (uint64_t)v60;
    v48 = v61;
    v50 = v62;
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v60, v44, v62);
    v51 = (uint64_t *)(v49 + *(int *)(v57 + 36));
    *v51 = v47;
    v51[1] = v46;
    v52 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v44, v50);
    if ((ButtonStyleConfiguration.isPressed.getter(v52) & 1) != 0)
      v53 = 0.5;
    else
      v53 = 1.0;
    v54 = v58;
    sub_10000B074(v49, v58, &qword_10028BD18);
    *(double *)(v54 + *(int *)(v59 + 36)) = v53;
    sub_10000A020(v49, &qword_10028BD18);
    return sub_100021044(v54, v67);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100020B74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10002067C(a1, *(_QWORD *)v2, *(unsigned __int8 *)(v2 + 8), a2);
}

unint64_t sub_100020B88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BCC0;
  if (!qword_10028BCC0)
  {
    v1 = sub_1000070BC(&qword_10028BCA8);
    sub_100012334(&qword_10028BCB8, &qword_10028BCA0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028BCC0);
  }
  return result;
}

unint64_t sub_100020C24()
{
  unint64_t result;

  result = qword_10028BCC8;
  if (!qword_10028BCC8)
  {
    result = swift_getWitnessTable(&unk_1001E74B8, &type metadata for CardActionButtonStyle);
    atomic_store(result, (unint64_t *)&qword_10028BCC8);
  }
  return result;
}

uint64_t sub_100020C68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000204B0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100020C70()
{
  unint64_t result;

  result = qword_10028BCD0;
  if (!qword_10028BCD0)
  {
    result = swift_getWitnessTable(&unk_1001EC170, &type metadata for CopyButton);
    atomic_store(result, (unint64_t *)&qword_10028BCD0);
  }
  return result;
}

unint64_t sub_100020CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BCD8;
  if (!qword_10028BCD8)
  {
    v1 = sub_1000070BC(&qword_10028BC88);
    sub_100020C70();
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028BCD8);
  }
  return result;
}

uint64_t sub_100020D38@<X0>(uint64_t *a1@<X8>)
{
  return sub_100020544(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for CardActionButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for CardActionButtonStyle(uint64_t a1)
{
  return sub_10001F470(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for CardActionButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_10001F470(v5, v6);
  return a1;
}

uint64_t initializeWithTake for StaticImage(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for CardActionButtonStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_10001F470(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardActionButtonStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CardActionButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardActionButtonStyle()
{
  return &type metadata for CardActionButtonStyle;
}

uint64_t sub_100020ED0()
{
  return sub_100012334(&qword_10028BCE8, &qword_10028BCF0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100020EFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020F7A4, 1);
}

unint64_t sub_100020F1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BD38;
  if (!qword_10028BD38)
  {
    v1 = sub_1000070BC(&qword_10028BD08);
    sub_100020FA0();
    sub_100012334(&qword_10028BD50, &qword_10028BD28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028BD38);
  }
  return result;
}

unint64_t sub_100020FA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BD40;
  if (!qword_10028BD40)
  {
    v1 = sub_1000070BC(&qword_10028BD00);
    sub_100007D5C((unint64_t *)&qword_10028BD48, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028BD40);
  }
  return result;
}

uint64_t sub_100021044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028BD20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100021090()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BD60;
  if (!qword_10028BD60)
  {
    v1 = sub_1000070BC(&qword_10028BD20);
    sub_1000210FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028BD60);
  }
  return result;
}

unint64_t sub_1000210FC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10028BD68;
  if (!qword_10028BD68)
  {
    v1 = sub_1000070BC(&qword_10028BD18);
    v2[0] = sub_1000070BC(&qword_10028BD08);
    v2[1] = sub_1000070BC(&qword_10028BCF8);
    v2[2] = sub_100020F1C();
    v2[3] = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028BD68);
  }
  return result;
}

id sub_1000211F0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double v8;
  objc_class *v9;
  uint64_t v10;
  id v11;
  Class isa;
  id v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___stack;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___stack);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___stack);
  }
  else
  {
    v4 = v0;
    v5 = sub_100006DF4((uint64_t *)&unk_10028C060);
    v6 = swift_allocObject(v5, 80, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1001E7580;
    *(_QWORD *)(v6 + 32) = sub_100021378();
    *(_QWORD *)(v6 + 40) = sub_1000216BC();
    *(_QWORD *)(v6 + 48) = sub_1000218B0();
    v7 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    LODWORD(v8) = 1128792064;
    objc_msgSend(v7, "setContentHuggingPriority:forAxis:", 1, v8);
    objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = sub_100022070();
    v9 = sub_100021BF8();
    *(_QWORD *)(v6 + 72) = v9;
    specialized Array._endMutation()(v9);
    v10 = v6;
    v11 = objc_allocWithZone((Class)UIStackView);
    sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v10);
    v13 = objc_msgSend(v11, "initWithArrangedSubviews:", isa);

    v14 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

objc_class *sub_100021378()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  objc_class *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  _UNKNOWN **v16;
  id v17;
  id v18;
  void *v19;
  objc_class *v20;
  id v21;
  void *v22;
  id v23;
  UIAction_optional v25;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___expandAction;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___expandAction);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___expandAction);
  }
  else
  {
    v4 = v0;
    type metadata accessor for ActionButton();
    v5 = swift_allocObject(&unk_100264828, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
    v6 = swift_allocObject(&unk_1002648A0, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_100023B8C;
    *(_QWORD *)(v6 + 24) = v5;
    swift_retain_n(v5, 2);
    v25.value.super.super.isa = (Class)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100023BD8, v6);
    isa = UIButton.init(type:primaryAction:)(UIButtonTypeCustom, v25).super.super.super.super.isa;
    v8 = (void *)objc_opt_self(UIFont);
    v9 = isa;
    v10 = objc_msgSend(v8, "systemFontOfSize:", 17.0);
    v11 = (void *)objc_opt_self(UIImageSymbolConfiguration);
    v12 = objc_msgSend(v11, "configurationWithFont:scale:", v10, 3);

    -[objc_class setPreferredSymbolConfiguration:forImageInState:](v9, "setPreferredSymbolConfiguration:forImageInState:", v12, 0);
    v13 = objc_msgSend(v11, "configurationWithScale:", 3);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v14, v13);

    v16 = NSCollectionLayoutSection_ptr;
    if (v15)
    {
      v17 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v18 = objc_msgSend(v15, "imageWithTintColor:", v17);

      v16 = NSCollectionLayoutSection_ptr;
    }
    else
    {
      v18 = 0;
    }
    -[objc_class setImage:forState:](v9, "setImage:forState:", v18, 0);

    -[objc_class setFrame:](v9, "setFrame:", 0.0, 0.0, 44.0, 44.0);
    v19 = (void *)objc_opt_self(v16[48]);
    v20 = v9;
    v21 = objc_msgSend(v19, "whiteColor");
    -[objc_class setTintColor:](v20, "setTintColor:", v21);

    swift_release_n(v5, 2);
    v22 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v20;
    v3 = v20;

    v2 = 0;
  }
  v23 = v2;
  return v3;
}

objc_class *sub_1000216BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___starAction;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___starAction);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___starAction);
  }
  else
  {
    v4 = v0;
    type metadata accessor for ActionButton();
    v5 = swift_allocObject(&unk_100264828, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v6 = sub_100008420(1918989427, 0xE400000000000000, 0x6C69662E72617473, 0xE90000000000006CLL, (uint64_t)sub_100023B6C, v5);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

uint64_t sub_10002177C(void *a1, uint64_t a2, void (*a3)(_OWORD *))
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  _OWORD v11[2];
  _QWORD v12[5];
  _BYTE v13[24];
  _BYTE v14[24];
  uint64_t v15;
  _BYTE v16[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    v7 = (void *)result;
    v8 = result + OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate;
    swift_beginAccess(result + OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate, v13, 0, 0);
    sub_100023A68(v8, (uint64_t)v14);
    if (v15)
    {
      sub_100023AB0((uint64_t)v14, (uint64_t)v12);
      sub_10000A020((uint64_t)v14, (uint64_t *)&unk_10028C080);
      sub_100023AF4(v12, v12[3]);
      v9 = objc_msgSend(a1, "sender");
      if (v9)
      {
        v10 = v9;
        _bridgeAnyObjectToAny(_:)(v11, v9);
        swift_unknownObjectRelease(v10);
      }
      else
      {
        memset(v11, 0, sizeof(v11));
      }
      a3(v11);

      sub_10000A020((uint64_t)v11, (uint64_t *)&unk_10028C0B0);
      return sub_100009C08(v12);
    }
    else
    {

      return sub_10000A020((uint64_t)v14, (uint64_t *)&unk_10028C080);
    }
  }
  return result;
}

objc_class *sub_1000218B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  objc_class *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  _UNKNOWN **v16;
  id v17;
  id v18;
  void *v19;
  objc_class *v20;
  id v21;
  void *v22;
  id v23;
  UIAction_optional v25;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___bookClosedAction;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___bookClosedAction);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___bookClosedAction);
  }
  else
  {
    v4 = v0;
    type metadata accessor for ActionButton();
    v5 = swift_allocObject(&unk_100264828, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
    v6 = swift_allocObject(&unk_100264878, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_100023B4C;
    *(_QWORD *)(v6 + 24) = v5;
    swift_retain_n(v5, 2);
    v25.value.super.super.isa = (Class)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100023BD8, v6);
    isa = UIButton.init(type:primaryAction:)(UIButtonTypeCustom, v25).super.super.super.super.isa;
    v8 = (void *)objc_opt_self(UIFont);
    v9 = isa;
    v10 = objc_msgSend(v8, "systemFontOfSize:", 17.0);
    v11 = (void *)objc_opt_self(UIImageSymbolConfiguration);
    v12 = objc_msgSend(v11, "configurationWithFont:scale:", v10, 3);

    -[objc_class setPreferredSymbolConfiguration:forImageInState:](v9, "setPreferredSymbolConfiguration:forImageInState:", v12, 0);
    v13 = objc_msgSend(v11, "configurationWithScale:", 3);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v14, v13);

    v16 = NSCollectionLayoutSection_ptr;
    if (v15)
    {
      v17 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v18 = objc_msgSend(v15, "imageWithTintColor:", v17);

      v16 = NSCollectionLayoutSection_ptr;
    }
    else
    {
      v18 = 0;
    }
    -[objc_class setImage:forState:](v9, "setImage:forState:", v18, 0);

    -[objc_class setFrame:](v9, "setFrame:", 0.0, 0.0, 44.0, 44.0);
    v19 = (void *)objc_opt_self(v16[48]);
    v20 = v9;
    v21 = objc_msgSend(v19, "whiteColor");
    -[objc_class setTintColor:](v20, "setTintColor:", v21);

    swift_release_n(v5, 2);
    v22 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v20;
    v3 = v20;

    v2 = 0;
  }
  v23 = v2;
  return v3;
}

objc_class *sub_100021BF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  objc_class *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  _UNKNOWN **v16;
  id v17;
  id v18;
  void *v19;
  objc_class *v20;
  id v21;
  void *v22;
  id v23;
  UIAction_optional v25;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playButton;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playButton);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playButton);
  }
  else
  {
    v4 = v0;
    type metadata accessor for ActionButton();
    v5 = swift_allocObject(&unk_100264828, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
    v6 = swift_allocObject(&unk_100264850, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_100023B3C;
    *(_QWORD *)(v6 + 24) = v5;
    swift_retain_n(v5, 2);
    v25.value.super.super.isa = (Class)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100023B44, v6);
    isa = UIButton.init(type:primaryAction:)(UIButtonTypeCustom, v25).super.super.super.super.isa;
    v8 = (void *)objc_opt_self(UIFont);
    v9 = isa;
    v10 = objc_msgSend(v8, "systemFontOfSize:", 17.0);
    v11 = (void *)objc_opt_self(UIImageSymbolConfiguration);
    v12 = objc_msgSend(v11, "configurationWithFont:scale:", v10, 3);

    -[objc_class setPreferredSymbolConfiguration:forImageInState:](v9, "setPreferredSymbolConfiguration:forImageInState:", v12, 0);
    v13 = objc_msgSend(v11, "configurationWithScale:", 3);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v14, v13);

    v16 = NSCollectionLayoutSection_ptr;
    if (v15)
    {
      v17 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v18 = objc_msgSend(v15, "imageWithTintColor:", v17);

      v16 = NSCollectionLayoutSection_ptr;
    }
    else
    {
      v18 = 0;
    }
    -[objc_class setImage:forState:](v9, "setImage:forState:", v18, 0);

    -[objc_class setFrame:](v9, "setFrame:", 0.0, 0.0, 44.0, 44.0);
    v19 = (void *)objc_opt_self(v16[48]);
    v20 = v9;
    v21 = objc_msgSend(v19, "whiteColor");
    -[objc_class setTintColor:](v20, "setTintColor:", v21);

    swift_release_n(v5, 2);
    v22 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v20;
    v3 = v20;

    v2 = 0;
  }
  v23 = v2;
  return v3;
}

uint64_t sub_100021F3C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  _OWORD v9[2];
  _QWORD v10[5];
  _BYTE v11[24];
  _BYTE v12[24];
  uint64_t v13;
  _BYTE v14[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = result + OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate;
    swift_beginAccess(result + OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate, v11, 0, 0);
    sub_100023A68(v6, (uint64_t)v12);
    if (v13)
    {
      sub_100023AB0((uint64_t)v12, (uint64_t)v10);
      sub_10000A020((uint64_t)v12, (uint64_t *)&unk_10028C080);
      sub_100023AF4(v10, v10[3]);
      v7 = objc_msgSend(a1, "sender");
      if (v7)
      {
        v8 = v7;
        _bridgeAnyObjectToAny(_:)(v9, v7);
        swift_unknownObjectRelease(v8);
      }
      else
      {
        memset(v9, 0, sizeof(v9));
      }
      sub_10002C370(4, (uint64_t)v9);

      sub_10000A020((uint64_t)v9, (uint64_t *)&unk_10028C0B0);
      return sub_100009C08(v10);
    }
    else
    {

      return sub_10000A020((uint64_t)v12, (uint64_t *)&unk_10028C080);
    }
  }
  return result;
}

id sub_100022070()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playbackRateLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playbackRateLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playbackRateLabel);
  }
  else
  {
    v4 = sub_1000220CC();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1000220CC()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  NSString v6;
  id v7;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v1 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleHeadline, 0);
  v2 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v1, "pointSize");
  v3 = objc_msgSend(v2, "systemFontOfSize:weight:");
  v4 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleHeadline);
  v5 = objc_msgSend(v4, "scaledFontForFont:maximumPointSize:", v3, 1.79769313e308);

  objc_msgSend(v0, "setFont:", v5);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v6);

  objc_msgSend(v0, "setTextColor:", v7);
  objc_msgSend(v0, "setHidden:", 1);
  return v0;
}

char *sub_100022280(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  objc_class *v25;
  objc_class *v26;
  double v27;
  objc_class *v28;
  NSString v29;
  objc_class *v30;
  objc_class *v31;
  objc_class *v32;
  objc_class *v33;
  objc_class *v34;
  double v35;
  objc_class *v36;
  objc_class *v37;
  NSString v38;
  void *v39;
  id v40;
  objc_class *v41;
  NSString v42;
  id v43;
  objc_class *v44;
  NSString v45;
  id v46;
  objc_class *v47;
  NSString v48;
  id v49;
  objc_class *v50;
  NSString v51;
  objc_class *v52;
  objc_class *v53;
  id v54;
  Swift::String v55;
  Swift::String v56;
  void *object;
  NSString v58;
  objc_class *v59;
  NSString v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  objc_class *v67;
  id v68;
  objc_class *v69;
  id v70;
  id v71;
  char *v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  Class isa;
  id v96;
  void *v97;
  objc_super v98;
  Swift::String v99;

  v9 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions_background;
  v10 = objc_allocWithZone((Class)type metadata accessor for ChromeBar());
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = &v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate];
  *((_QWORD *)v12 + 4) = 0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___stack] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___expandAction] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___starAction] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___bookClosedAction] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playButton] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_playLongPress] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playbackRateLabel] = 0;

  v98.receiver = v11;
  v98.super_class = (Class)type metadata accessor for CardActions();
  v13 = (char *)objc_msgSendSuper2(&v98, "initWithFrame:", a1, a2, a3, a4);
  v14 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions_background;
  v15 = *(void **)&v13[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_background];
  v16 = v13;
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v13[v14], "setAlpha:", 0.0);
  objc_msgSend(v16, "addSubview:", *(_QWORD *)&v13[v14]);
  v17 = *(void **)&v13[v14];
  v18 = v16;
  v19 = v17;
  sub_1001DB5F8(v19);

  v20 = (void *)objc_opt_self(UIFont);
  v21 = objc_msgSend(v20, "systemFontOfSize:", 28.0);
  v22 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v96 = objc_msgSend(v22, "configurationWithFont:", v21);

  v23 = objc_msgSend(v20, "systemFontOfSize:", 17.0);
  v24 = objc_msgSend(v22, "configurationWithFont:", v23);

  v25 = sub_1000216BC();
  v97 = v24;
  -[objc_class setPreferredSymbolConfiguration:forImageInState:](v25, "setPreferredSymbolConfiguration:forImageInState:", v24, 0);

  v26 = sub_1000216BC();
  LODWORD(v27) = 1148846080;
  -[objc_class setContentCompressionResistancePriority:forAxis:](v26, "setContentCompressionResistancePriority:forAxis:", 1, v27);

  v28 = sub_1000216BC();
  v29 = String._bridgeToObjectiveC()();
  -[objc_class setAccessibilityIdentifier:](v28, "setAccessibilityIdentifier:", v29);

  v30 = sub_1000216BC();
  -[objc_class setTranslatesAutoresizingMaskIntoConstraints:](v30, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v31 = sub_1000218B0();
  -[objc_class setPreferredSymbolConfiguration:forImageInState:](v31, "setPreferredSymbolConfiguration:forImageInState:", v24, 0);

  v32 = sub_1000218B0();
  -[objc_class setTranslatesAutoresizingMaskIntoConstraints:](v32, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v33 = sub_100021BF8();
  -[objc_class setPreferredSymbolConfiguration:forImageInState:](v33, "setPreferredSymbolConfiguration:forImageInState:", v96, 0);

  v34 = sub_100021BF8();
  LODWORD(v35) = 1148846080;
  -[objc_class setContentCompressionResistancePriority:forAxis:](v34, "setContentCompressionResistancePriority:forAxis:", 1, v35);

  v36 = sub_100021BF8();
  -[objc_class setTranslatesAutoresizingMaskIntoConstraints:](v36, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v37 = sub_100021378();
  v38 = String._bridgeToObjectiveC()();
  v39 = (void *)objc_opt_self(UIColor);
  v40 = objc_msgSend(v39, "colorNamed:", v38);

  -[objc_class setTintColor:](v37, "setTintColor:", v40);
  v41 = sub_1000216BC();
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v39, "colorNamed:", v42);

  -[objc_class setTintColor:](v41, "setTintColor:", v43);
  v44 = sub_1000218B0();
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v39, "colorNamed:", v45);

  -[objc_class setTintColor:](v44, "setTintColor:", v46);
  v47 = sub_100021BF8();
  v48 = String._bridgeToObjectiveC()();
  v49 = objc_msgSend(v39, "colorNamed:", v48);

  -[objc_class setTintColor:](v47, "setTintColor:", v49);
  v50 = sub_100021378();
  v51 = String._bridgeToObjectiveC()();
  -[objc_class setAccessibilityIdentifier:](v50, "setAccessibilityIdentifier:", v51);

  v52 = sub_100021378();
  -[objc_class setTranslatesAutoresizingMaskIntoConstraints:](v52, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v53 = sub_1000218B0();
  v54 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v55._countAndFlagsBits = 0xD000000000000015;
  v99._object = (void *)0xE000000000000000;
  v55._object = (void *)0x80000001001F8CB0;
  v56._countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  v99._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v55, (Swift::String_optional)0, (NSBundle)v54, v56, v99)._object;

  v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  -[objc_class setAccessibilityLabel:](v53, "setAccessibilityLabel:", v58);

  v59 = sub_1000218B0();
  v60 = String._bridgeToObjectiveC()();
  -[objc_class setAccessibilityIdentifier:](v59, "setAccessibilityIdentifier:", v60);

  v61 = sub_1000211F0();
  objc_msgSend(v61, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v62 = sub_1000211F0();
  objc_msgSend(v62, "setDistribution:", 0);

  v63 = sub_1000211F0();
  objc_msgSend(v63, "setDirectionalLayoutMargins:", 10.0, 32.0, 10.0, 32.0);

  v64 = sub_1000211F0();
  objc_msgSend(v64, "setLayoutMarginsRelativeArrangement:", 1);

  v65 = sub_1000211F0();
  objc_msgSend(v65, "setInsetsLayoutMarginsFromSafeArea:", 0);

  v66 = sub_1000211F0();
  v67 = sub_100021378();
  objc_msgSend(v66, "setCustomSpacing:afterView:", v67, 28.0);

  v68 = sub_1000211F0();
  v69 = sub_1000216BC();
  objc_msgSend(v68, "setCustomSpacing:afterView:", v69, 28.0);

  v70 = sub_1000211F0();
  v71 = sub_100022070();
  objc_msgSend(v70, "setCustomSpacing:afterView:", v71, 4.0);

  v72 = v18;
  v73 = sub_1000211F0();
  objc_msgSend(v72, "addSubview:", v73);

  v74 = (void *)objc_opt_self(NSLayoutConstraint);
  v75 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v76 = swift_allocObject(v75, 64, 7);
  *(_OWORD *)(v76 + 16) = xmmword_1001E7590;
  v77 = sub_1000211F0();
  v78 = objc_msgSend(v77, "topAnchor");

  v79 = objc_msgSend(v72, "topAnchor");
  v80 = objc_msgSend(v78, "constraintEqualToAnchor:", v79);

  *(_QWORD *)(v76 + 32) = v80;
  v81 = sub_1000211F0();
  v82 = objc_msgSend(v81, "leadingAnchor");

  v83 = objc_msgSend(v72, "leadingAnchor");
  v84 = objc_msgSend(v82, "constraintEqualToAnchor:", v83);

  *(_QWORD *)(v76 + 40) = v84;
  v85 = objc_msgSend(v72, "trailingAnchor");
  v86 = sub_1000211F0();
  v87 = objc_msgSend(v86, "trailingAnchor");

  v88 = objc_msgSend(v85, "constraintEqualToAnchor:", v87);
  *(_QWORD *)(v76 + 48) = v88;
  v89 = objc_msgSend(v72, "bottomAnchor");
  v90 = sub_1000211F0();
  v91 = objc_msgSend(v90, "bottomAnchor");

  v92 = objc_msgSend(v89, "constraintEqualToAnchor:", v91);
  *(_QWORD *)(v76 + 56) = v92;
  specialized Array._endMutation()(v93);
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v76);
  objc_msgSend(v74, "activateConstraints:", isa);

  sub_100022C98();
  return v72;
}

void sub_100022C98()
{
  void *v0;
  void *v1;
  uint64_t v2;
  char v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  Swift::String v20;
  unint64_t v21;
  NSString v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  objc_class *v26;
  objc_class *v27;
  UIMenuElementSize v28;
  __n128 v29;
  UIMenuElementSize preferredElementSize;
  Swift::String v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  Swift::OpaquePointer v36;
  id v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  UIImage_optional v42;
  Swift::String v43;

  v1 = v0;
  v41 = (uint64_t)_swiftEmptyArrayStorage;
  v37 = (id)objc_opt_self(NSBundle);
  sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
  v2 = 0;
  do
  {
    v3 = *((_BYTE *)&off_100261D68 + v2 + 32);
    v4 = objc_msgSend(v37, "mainBundle");
    v43._countAndFlagsBits = 0xD00000000000001FLL;
    v43._object = (void *)0x80000001001F8F20;
    v5._countAndFlagsBits = 0xD000000000000013;
    v5._object = (void *)0x80000001001F8F00;
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v43);

    v8 = sub_100006DF4(&qword_10028AA70);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_1001E64F0;
    sub_10002307C(v3);
    v11 = v10;
    v13 = v12;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10001244C();
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    v14 = String.init(format:_:)(v7._countAndFlagsBits, v7._object, v9);
    v16 = v15;
    swift_bridgeObjectRelease(v7._object);
    v17 = swift_allocObject(&unk_100264800, 25, 7);
    *(_QWORD *)(v17 + 16) = v1;
    *(_BYTE *)(v17 + 24) = v3;
    v1;
    v18 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v14, v16, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100023A5C, v17);
    v39 = 0;
    v40 = 0xE000000000000000;
    v19 = v18;
    v20._countAndFlagsBits = 0x6574615279616C70;
    v20._object = (void *)0xE90000000000005FLL;
    String.append(_:)(v20);
    v38 = v3;
    _print_unlocked<A, B>(_:_:)(&v38, &v39, &type metadata for TTSPlaybackRate, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v21 = v40;
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    objc_msgSend(v19, "setAccessibilityIdentifier:", v22);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v24 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v23 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v24 >= v23 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
    ++v2;
    v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v19);
    specialized Array._endMutation()(v25);

  }
  while (v2 != 4);
  v26 = sub_100021BF8();
  -[objc_class setShowsMenuAsPrimaryAction:](v26, "setShowsMenuAsPrimaryAction:", 0);

  v27 = sub_100021BF8();
  v28 = v41;
  if ((unint64_t)v41 >> 62)
  {
    if (v41 < 0)
      v33 = v41;
    else
      v33 = v41 & 0xFFFFFFFFFFFFFF8;
    v34 = sub_10000A05C(0, &qword_10028BDF8, UIMenuElement_ptr);
    v35 = swift_bridgeObjectRetain(v28);
    preferredElementSize = _bridgeCocoaArray<A>(_:)(v33, v34, v35);
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v29 = swift_bridgeObjectRetain(v41);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v29);
    sub_10000A05C(0, &qword_10028BDF8, UIMenuElement_ptr);
    preferredElementSize = v28;
  }
  swift_bridgeObjectRelease(v28);
  sub_10000A05C(0, &qword_10028BE00, UIMenu_ptr);
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  v42.value.super.isa = 0;
  v42.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v31, (Swift::String_optional)0, v42, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v36).super.super.isa;
  -[objc_class setMenu:](v27, "setMenu:", isa);

}

void sub_10002307C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000230AC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001001F8EE0;
  v1._countAndFlagsBits = 0xD000000000000018;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100023218(void *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  id v6;
  id v7;
  _OWORD v9[2];
  _QWORD v10[5];
  _BYTE v11[24];
  _BYTE v12[24];
  uint64_t v13;

  v5 = a2 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate;
  swift_beginAccess(a2 + OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate, v11, 0, 0);
  sub_100023A68(v5, (uint64_t)v12);
  if (!v13)
    return sub_10000A020((uint64_t)v12, (uint64_t *)&unk_10028C080);
  sub_100023AB0((uint64_t)v12, (uint64_t)v10);
  sub_10000A020((uint64_t)v12, (uint64_t *)&unk_10028C080);
  sub_100023AF4(v10, v10[3]);
  v6 = objc_msgSend(a1, "sender");
  if (v6)
  {
    v7 = v6;
    _bridgeAnyObjectToAny(_:)(v9, v6);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10002C370(a3, (uint64_t)v9);
  sub_10000A020((uint64_t)v9, (uint64_t *)&unk_10028C0B0);
  return sub_100009C08(v10);
}

void sub_100023320(char a1)
{
  objc_class *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  objc_class *v16;
  objc_class *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  _QWORD v31[2];
  _QWORD v32[4];
  Swift::String v33;

  v2 = sub_100021BF8();
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v33._object = (void *)0xE000000000000000;
  v4._object = (void *)0x80000001001F8E40;
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v33);

  v7 = sub_100006DF4(&qword_10028AA70);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1001E64F0;
  sub_10002307C(a1);
  v10 = v9;
  v12 = v11;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10001244C();
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v12;
  String.init(format:_:)(v6._countAndFlagsBits, v6._object, v8);
  v14 = v13;
  swift_bridgeObjectRelease(v6._object);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  -[objc_class setAccessibilityLabel:](v2, "setAccessibilityLabel:", v15);

  v16 = sub_100021BF8();
  v17 = sub_100021BF8();
  v18 = -[objc_class accessibilityLabel](v17, "accessibilityLabel");

  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v32[2] = v19;
    v32[3] = v21;
    v32[0] = 32;
    v32[1] = 0xE100000000000000;
    v31[0] = 95;
    v31[1] = 0xE100000000000000;
    v22 = sub_10000B030();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v32, v31, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v22, v22, v22);
    v24 = v23;
    swift_bridgeObjectRelease(v21);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    -[objc_class setAccessibilityIdentifier:](v16, "setAccessibilityIdentifier:", v25);

    v26 = sub_100022070();
    v27 = v26;
    if (a1 == 2)
    {
      objc_msgSend(v26, "setHidden:", 1);
    }
    else
    {
      sub_10002307C(a1);
      v29 = v28;
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      objc_msgSend(v27, "setText:", v30);

      v27 = sub_100022070();
      objc_msgSend(v27, "setHidden:", 0);
    }

  }
  else
  {
    __break(1u);
  }
}

id sub_1000235E4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardActions();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardActions()
{
  return objc_opt_self(_TtC17SequoiaTranslator11CardActions);
}

uint64_t getEnumTagSinglePayload for ConversationContext.ContextMetrics.AppUIMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TTSPlaybackRate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000237C0 + 4 * byte_1001E75A5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000237F4 + 4 * byte_1001E75A0[v4]))();
}

uint64_t sub_1000237F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000237FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100023804);
  return result;
}

uint64_t sub_100023810(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100023818);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10002381C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023824(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSPlaybackRate()
{
  return &type metadata for TTSPlaybackRate;
}

unint64_t sub_100023844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BDE0;
  if (!qword_10028BDE0)
  {
    v1 = sub_1000070BC(&qword_10028BDE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10028BDE0);
  }
  return result;
}

void sub_100023890(_QWORD *a1@<X8>)
{
  *a1 = &off_100261D90;
}

unint64_t sub_1000238A4()
{
  unint64_t result;

  result = qword_10028BDF0;
  if (!qword_10028BDF0)
  {
    result = swift_getWitnessTable(&unk_1001E7658, &type metadata for TTSPlaybackRate);
    atomic_store(result, (unint64_t *)&qword_10028BDF0);
  }
  return result;
}

void sub_1000238E8()
{
  char *v0;
  uint64_t v1;
  char *v2;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator11CardActions_background;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ChromeBar()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate];
  *((_QWORD *)v2 + 4) = 0;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___stack] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___expandAction] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___starAction] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___bookClosedAction] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_playLongPress] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator11CardActions____lazy_storage___playbackRateLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/CardActions.swift", 35, 2, 129, 0);
  __break(1u);
}

uint64_t sub_1000239E8(double a1)
{
  unsigned int v2;

  if (a1 == 0.5)
    return 0;
  if (a1 == 0.75)
    return 1;
  if (a1 == 1.25)
    v2 = 3;
  else
    v2 = 4;
  if (a1 == 1.0)
    return 2;
  else
    return v2;
}

uint64_t sub_100023A38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100023A5C(void *a1)
{
  uint64_t v1;

  return sub_100023218(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100023A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028C080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100023AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_100023AF4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100023B18()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100023B3C(void *a1)
{
  uint64_t v1;

  return sub_100021F3C(a1, v1);
}

uint64_t sub_100023B44(uint64_t a1)
{
  uint64_t v1;

  return sub_100008828(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100023B4C(void *a1)
{
  uint64_t v1;

  return sub_10002177C(a1, v1, (void (*)(_OWORD *))sub_10002BEF4);
}

uint64_t sub_100023B6C(void *a1)
{
  uint64_t v1;

  return sub_10002177C(a1, v1, (void (*)(_OWORD *))sub_10002BD94);
}

uint64_t sub_100023B8C(void *a1)
{
  uint64_t v1;

  return sub_10002177C(a1, v1, (void (*)(_OWORD *))sub_10002BA54);
}

uint64_t sub_100023BAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_100023BDC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___containerView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___containerView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___containerView);
  }
  else
  {
    v4 = sub_100023C38();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100023C38()
{
  id v0;
  id v1;
  id v2;
  id v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = objc_msgSend(v0, "layer");
  objc_msgSend(v1, "setCornerRadius:", 10.0);

  v2 = objc_msgSend(v0, "layer");
  objc_msgSend(v2, "setMasksToBounds:", 1);

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v3);

  return v0;
}

char *sub_100023D30()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___cardView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___cardView];
  if (v2)
  {
    v3 = *(char **)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___cardView];
  }
  else
  {
    v4 = sub_100023D90(v0);
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

char *sub_100023D90(void *a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  char *v7;
  id v8;
  char *v9;
  NSString v10;
  _BYTE v12[24];
  _QWORD v13[5];

  v2 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TranslationCard(0)), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13[3] = type metadata accessor for CardCollectionViewCell();
  v13[4] = &off_100264910;
  v13[0] = a1;
  v3 = (uint64_t)&v2[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate];
  swift_beginAccess(&v2[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate], v12, 33, 0);
  v4 = v2;
  v5 = a1;
  sub_1000250D0((uint64_t)v13, v3);
  swift_endAccess(v12);

  v6 = (void *)objc_opt_self(UIColor);
  v7 = v4;
  v8 = objc_msgSend(v6, "secondarySystemGroupedBackgroundColor");
  objc_msgSend(v7, "setBackgroundColor:", v8);

  v9 = v7;
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setAccessibilityIdentifier:", v10);

  objc_msgSend(v9, "setClipsToBounds:", 1);
  return v9;
}

double sub_100023EF0()
{
  void *v0;
  void *v1;
  char *v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  id v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double MaxY;
  char *v23;
  id v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  CGRect v34;
  CGRect v35;

  v1 = v0;
  v2 = sub_100023D30();
  v3 = sub_1001AD418();

  objc_msgSend(v3, "bounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v12 = sub_100023D30();
  v13 = sub_1001AD418();

  objc_msgSend(v1, "convertRect:fromCoordinateSpace:", v13, v5, v7, v9, v11);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v34.origin.x = v15;
  v34.origin.y = v17;
  v34.size.width = v19;
  v34.size.height = v21;
  MaxY = CGRectGetMaxY(v34);
  v23 = sub_100023D30();
  v24 = *(id *)&v23[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];

  objc_msgSend(v24, "frame");
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;

  v35.origin.x = v26;
  v35.origin.y = v28;
  v35.size.width = v30;
  v35.size.height = v32;
  return MaxY + CGRectGetHeight(v35);
}

char *sub_100024030(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  char *v9;
  objc_class *v10;
  char *v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  char *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  double v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  char *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  Class isa;
  id v41;
  id v42;
  id v43;
  double v44;
  void *v45;
  NSString v46;
  char *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  char *v53;
  id v54;
  id v55;
  id v56;
  double v57;
  NSString v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  double v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  double v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  double v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  Class v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  void *v94;
  id v95;
  id v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  objc_super v104;

  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_paddingDefault] = 0x4038000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_topPaddingDefault] = 0x4010000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_bottomPaddingDefault] = 0xC010000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_leadingPadding] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_trailingPadding] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___containerView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___cardView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_collapsedMinHeight] = 0x4056800000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_expandedMinimumHeight] = 0x4077C00000000000;
  v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded] = 0;
  v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying] = 0;
  v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minimumHeightEnabled] = 1;
  v9 = &v4[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate];
  v10 = (objc_class *)type metadata accessor for CardCollectionViewCell();
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_QWORD *)v9 + 4) = 0;
  v104.receiver = v4;
  v104.super_class = v10;
  v11 = (char *)objc_msgSendSuper2(&v104, "initWithFrame:", a1, a2, a3, a4);
  v12 = sub_100023D30();
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v13 = objc_msgSend(v11, "contentView");
  v14 = sub_100023BDC();
  objc_msgSend(v13, "addSubview:", v14);

  v15 = sub_100023BDC();
  v16 = sub_100023D30();
  objc_msgSend(v15, "addSubview:", v16);

  v17 = sub_100023D30();
  v18 = objc_msgSend(v17, "bottomAnchor");

  v19 = sub_100023BDC();
  v20 = objc_msgSend(v19, "bottomAnchor");

  v21 = objc_msgSend(v18, "constraintEqualToAnchor:", v20);
  LODWORD(v22) = 1132068864;
  objc_msgSend(v21, "setPriority:", v22);
  v100 = (id)objc_opt_self(NSLayoutConstraint);
  v102 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v23 = swift_allocObject(v102, 64, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001E7590;
  v24 = sub_100023D30();
  v25 = objc_msgSend(v24, "topAnchor");

  v26 = sub_100023BDC();
  v27 = objc_msgSend(v26, "topAnchor");

  v28 = objc_msgSend(v25, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v23 + 32) = v28;
  v29 = sub_100023D30();
  v30 = objc_msgSend(v29, "leadingAnchor");

  v31 = sub_100023BDC();
  v32 = objc_msgSend(v31, "leadingAnchor");

  v33 = objc_msgSend(v30, "constraintEqualToAnchor:", v32);
  *(_QWORD *)(v23 + 40) = v33;
  v34 = sub_100023D30();
  v35 = objc_msgSend(v34, "trailingAnchor");

  v36 = sub_100023BDC();
  v37 = objc_msgSend(v36, "trailingAnchor");

  v38 = objc_msgSend(v35, "constraintEqualToAnchor:", v37);
  *(_QWORD *)(v23 + 48) = v38;
  *(_QWORD *)(v23 + 56) = v21;
  specialized Array._endMutation()(v39);
  sub_100025254();
  v101 = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v100, "activateConstraints:", isa);

  v41 = sub_100023BDC();
  v42 = objc_msgSend(v41, "heightAnchor");

  v43 = objc_msgSend(v42, "constraintGreaterThanOrEqualToConstant:", *(double *)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_collapsedMinHeight]);
  LODWORD(v44) = 1148846080;
  v45 = v43;
  v99 = v43;
  objc_msgSend(v43, "setPriority:", v44);
  v46 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "setIdentifier:", v46);

  v47 = sub_100023D30();
  v48 = objc_msgSend(v47, "heightAnchor");

  v49 = objc_msgSend(v48, "constraintEqualToConstant:", 0.0);
  v50 = *(void **)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight];
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight] = v49;

  v51 = sub_100023BDC();
  v52 = objc_msgSend(v51, "bottomAnchor");

  v53 = sub_100023D30();
  v54 = *(id *)&v53[OBJC_IVAR____TtC17SequoiaTranslator8CardView_container];

  v55 = objc_msgSend(v54, "bottomAnchor");
  v56 = objc_msgSend(v52, "constraintEqualToAnchor:constant:", v55, 16.0);

  v98 = v56;
  LODWORD(v57) = 1132068864;
  objc_msgSend(v56, "setPriority:", v57);
  v58 = String._bridgeToObjectiveC()();
  objc_msgSend(v56, "setIdentifier:", v58);

  v59 = sub_100023BDC();
  v60 = objc_msgSend(v59, "leadingAnchor");

  v61 = objc_msgSend(v11, "contentView");
  v62 = objc_msgSend(v61, "leadingAnchor");

  v63 = OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_paddingDefault;
  v97 = objc_msgSend(v60, "constraintEqualToAnchor:constant:", v62, *(double *)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_paddingDefault]);

  LODWORD(v64) = 1148829696;
  objc_msgSend(v97, "setPriority:", v64);
  v65 = objc_msgSend(v11, "contentView");
  v66 = objc_msgSend(v65, "trailingAnchor");

  v67 = sub_100023BDC();
  v68 = objc_msgSend(v67, "trailingAnchor");

  v69 = objc_msgSend(v66, "constraintEqualToAnchor:constant:", v68, *(double *)&v11[v63]);
  v70 = sub_100023BDC();
  v71 = objc_msgSend(v70, "topAnchor");

  v72 = objc_msgSend(v11, "contentView");
  v73 = objc_msgSend(v72, "topAnchor");

  v74 = objc_msgSend(v71, "constraintEqualToAnchor:", v73);
  LODWORD(v75) = 1148829696;
  objc_msgSend(v74, "setPriority:", v75);
  v76 = sub_100023BDC();
  v77 = objc_msgSend(v76, "bottomAnchor");

  v78 = objc_msgSend(v11, "contentView");
  v79 = objc_msgSend(v78, "bottomAnchor");

  v80 = objc_msgSend(v77, "constraintEqualToAnchor:", v79);
  LODWORD(v81) = 1148829696;
  objc_msgSend(v80, "setPriority:", v81);
  v82 = swift_allocObject(v102, 80, 7);
  *(_OWORD *)(v82 + 16) = xmmword_1001E7580;
  *(_QWORD *)(v82 + 32) = v74;
  *(_QWORD *)(v82 + 40) = v97;
  *(_QWORD *)(v82 + 48) = v69;
  *(_QWORD *)(v82 + 56) = v80;
  *(_QWORD *)(v82 + 64) = v99;
  *(_QWORD *)(v82 + 72) = v98;
  v103 = v82;
  specialized Array._endMutation()(v82);
  v83 = v74;
  v84 = v97;
  v85 = v69;
  v86 = v80;
  v87 = v99;
  v88 = v98;
  v89 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v103);
  objc_msgSend(v100, "activateConstraints:", v89);

  objc_msgSend(v87, "setActive:", v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minimumHeightEnabled]);
  v90 = *(void **)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_leadingPadding];
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_leadingPadding] = v84;
  v91 = v84;

  v92 = *(void **)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_trailingPadding];
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_trailingPadding] = v85;
  v93 = v85;

  v94 = *(void **)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight];
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight] = v87;
  v95 = v87;

  sub_100024A80();
  return v11;
}

id sub_100024A80()
{
  _BYTE *v0;
  _BYTE *v1;
  char *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  void *v7;
  char *v8;
  id v9;
  double v10;
  double v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  double v20;
  id result;
  double v22;

  v1 = v0;
  v2 = sub_100023D30();
  v3 = OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded;
  v4 = v1[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded];
  v5 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded;
  v6 = v2[OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded];
  v2[OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded] = v4;
  if (v4 != v6)
  {
    sub_1001AF1A0();
    v4 = v2[v5];
  }
  if (v6 != v4)
    sub_1001AF1A0();

  if ((v1[v3] & 1) == 0)
  {
    v7 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight];
    if (v7)
      objc_msgSend(v7, "setActive:", 0);
  }
  v8 = sub_100023D30();
  v9 = objc_msgSend(v8, "layer");

  v10 = 0.0;
  v11 = 10.0;
  if (!v1[v3])
    v11 = 0.0;
  objc_msgSend(v9, "setCornerRadius:", v11);

  v12 = OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight;
  v13 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight];
  if (v13)
  {
    v14 = v1[v3]
        ? &OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_expandedMinimumHeight
        : &OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_collapsedMinHeight;
    objc_msgSend(v13, "setConstant:", *(double *)&v1[*v14]);
    v15 = *(void **)&v1[v12];
    if (v15)
    {
      if (v1[v3] == 1)
        v16 = v1[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minimumHeightEnabled];
      else
        v16 = 0;
      objc_msgSend(v15, "setActive:", v16);
    }
  }
  v17 = objc_msgSend(v1, "traitCollection");
  v18 = objc_msgSend(v17, "horizontalSizeClass");

  if (v18 == (id)1)
    v10 = 16.0;
  v19 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_leadingPadding];
  if (v19)
  {
    v20 = 0.0;
    if (!v1[v3])
      v20 = v10;
    objc_msgSend(v19, "setConstant:", v20);
  }
  result = *(id *)&v1[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_trailingPadding];
  if (result)
  {
    v22 = 0.0;
    if (!v1[v3])
      v22 = v10;
    return objc_msgSend(result, "setConstant:", v22);
  }
  return result;
}

id sub_100024CD4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardCollectionViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardCollectionViewCell()
{
  return objc_opt_self(_TtC17SequoiaTranslator22CardCollectionViewCell);
}

uint64_t sub_100024DAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD v11[5];
  _BYTE v12[24];
  _BYTE v13[24];
  uint64_t v14;

  v9 = v4 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate;
  swift_beginAccess(v4 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate, v12, 0, 0);
  sub_100025048(v9, (uint64_t)v13);
  if (!v14)
    return sub_100025090((uint64_t)v13);
  sub_100023AB0((uint64_t)v13, (uint64_t)v11);
  sub_100025090((uint64_t)v13);
  sub_100023AF4(v11, v11[3]);
  sub_10002A228(a1, a2, a3, a4, v4);
  return sub_100009C08(v11);
}

uint64_t sub_100024E74(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[5];
  _BYTE v6[24];
  _BYTE v7[24];
  uint64_t v8;

  v3 = v1 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate;
  swift_beginAccess(v3, v6, 0, 0);
  sub_100025048(v3, (uint64_t)v7);
  if (!v8)
    return sub_100025090((uint64_t)v7);
  sub_100023AB0((uint64_t)v7, (uint64_t)v5);
  sub_100025090((uint64_t)v7);
  sub_100023AF4(v5, v5[3]);
  sub_10002A928(a1);
  return sub_100009C08(v5);
}

uint64_t sub_100024F0C(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[5];
  _BYTE v8[24];
  _BYTE v9[24];
  uint64_t v10;

  v5 = v2 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate;
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate, v8, 0, 0);
  sub_100025048(v5, (uint64_t)v9);
  if (!v10)
    return sub_100025090((uint64_t)v9);
  sub_100023AB0((uint64_t)v9, (uint64_t)v7);
  sub_100025090((uint64_t)v9);
  sub_100023AF4(v7, v7[3]);
  a2(a1, v2);
  return sub_100009C08(v7);
}

uint64_t sub_100024FB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_100024DAC(a1, a2, a3, a4);
}

uint64_t sub_100024FD8(uint64_t a1)
{
  return sub_100024F0C(a1, (void (*)(uint64_t, uint64_t))sub_10002A670);
}

uint64_t sub_100025000(void *a1)
{
  return sub_100024E74(a1);
}

uint64_t sub_100025020(uint64_t a1)
{
  return sub_100024F0C(a1, (void (*)(uint64_t, uint64_t))sub_10002ADC8);
}

uint64_t sub_100025048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028BEA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025090(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_10028BEA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000250D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028BEB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100025118()
{
  _BYTE *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_paddingDefault] = 0x4038000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_topPaddingDefault] = 0x4010000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_bottomPaddingDefault] = 0xC010000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_leadingPadding] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_trailingPadding] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___containerView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell____lazy_storage___cardView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_collapsedMinHeight] = 0x4056800000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_expandedMinimumHeight] = 0x4077C00000000000;
  v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minimumHeightEnabled] = 1;
  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/CardCollectionViewCell.swift", 46, 2, 141, 0);
  __break(1u);
}

unint64_t sub_100025254()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002930C0;
  if (!qword_1002930C0)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002930C0);
  }
  return result;
}

NSString sub_100025290()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002AA078 = (uint64_t)result;
  return result;
}

id sub_1000252E8()
{
  return sub_100025664(&OBJC_IVAR____TtC17SequoiaTranslator18CardListController____lazy_storage___layout, (uint64_t (*)(uint64_t))sub_1000252FC);
}

char *sub_1000252FC(void *a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  char *v17;
  uint64_t v18;
  id v19;
  _BYTE v21[24];
  _QWORD aBlock[3];
  void *v23;
  id (*v24)(uint64_t, void *);
  uint64_t v25;

  v2 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v3 = objc_msgSend(v2, "fractionalWidthDimension:", 1.0);
  v4 = objc_msgSend(v2, "estimatedDimension:", 100.0);
  v5 = (void *)objc_opt_self(NSCollectionLayoutSize);
  v6 = objc_msgSend(v5, "sizeWithWidthDimension:heightDimension:", v3, v4);

  v7 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutItem), "itemWithLayoutSize:", v6);
  v8 = objc_msgSend(v2, "fractionalWidthDimension:", 1.0);
  v9 = objc_msgSend(v2, "estimatedDimension:", 100.0);
  v10 = objc_msgSend(v5, "sizeWithWidthDimension:heightDimension:", v8, v9);

  v11 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutGroup), "horizontalGroupWithLayoutSize:subitem:count:", v10, v7, 1);
  v12 = swift_allocObject(&unk_100264E60, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = objc_allocWithZone((Class)type metadata accessor for InvertedCollectionViewLayout());
  v24 = sub_10002D558;
  v25 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAEF0;
  v23 = &unk_100264E78;
  v14 = _Block_copy(aBlock);
  v15 = a1;
  v16 = v11;
  v17 = (char *)objc_msgSend(v13, "initWithSectionProvider:", v14);
  _Block_release(v14);
  swift_release(v25);
  v23 = (void *)type metadata accessor for CardListController(0);
  v24 = (id (*)(uint64_t, void *))&off_100264960;
  aBlock[0] = v15;
  v18 = (uint64_t)&v17[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout_swipeDelegate];
  swift_beginAccess(&v17[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout_swipeDelegate], v21, 33, 0);
  v19 = v15;
  sub_10002D560((uint64_t)aBlock, v18, (uint64_t *)&unk_10028C0A0);
  swift_endAccess(v21);

  return v17;
}

id sub_1000255A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;

  sub_1001DBBC0(a2);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", a4);
  objc_msgSend(v14, "setInterGroupSpacing:", *(double *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_collectionViewSpacing));
  objc_msgSend(v14, "setContentInsets:", v7, v9, v11, v13);
  return v14;
}

id sub_100025650()
{
  return sub_100025664(&OBJC_IVAR____TtC17SequoiaTranslator18CardListController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1000256C0);
}

id sub_100025664(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2(v2);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1000256C0(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  CGAffineTransform v14;

  v2 = sub_1000252E8();
  v3 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v2, 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v3, "setShowsVerticalScrollIndicator:", 0);
  objc_msgSend(v3, "setAlwaysBounceVertical:", 1);
  objc_msgSend(v3, "setAllowsMultipleSelection:", 0);
  objc_msgSend(v3, "setDataSource:", a1);
  objc_msgSend(v3, "setDelegate:", a1);
  objc_msgSend(v3, "setContentInsetAdjustmentBehavior:", 2);
  v4 = (void *)objc_opt_self(UIColor);
  v5 = v3;
  v6 = objc_msgSend(v4, "systemGroupedBackgroundColor");
  objc_msgSend(v5, "setBackgroundColor:", v6);

  v7 = type metadata accessor for CardCollectionViewCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v7);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v9);

  CGAffineTransformMakeScale(&v14, 1.0, -1.0);
  objc_msgSend(v5, "setTransform:", &v14);
  v10 = type metadata accessor for MoreHistoryCollectionViewCell();
  v11 = swift_getObjCClassFromMetadata(v10);
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "registerClass:forCellWithReuseIdentifier:", v11, v12);

  return v5;
}

void sub_1000258DC()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  objc_super v10;

  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for CardListController(0);
  objc_msgSendSuper2(&v10, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = v1;
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v2, "setBackgroundColor:", v3);

  sub_100025C70();
  v4 = objc_msgSend(v0, "view");
  if (!v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = v4;
  v6 = sub_100025650();
  objc_msgSend(v5, "addSubview:", v6);

  v7 = objc_msgSend(v0, "view");
  if (v7)
  {
    v8 = v7;
    v9 = sub_100025650();
    sub_1001DB5F8(v9);

    return;
  }
LABEL_7:
  __break(1u);
}

void sub_100025ACC()
{
  void *v0;
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  objc_super v25;

  v25.receiver = v0;
  v25.super_class = (Class)type metadata accessor for CardListController(0);
  objc_msgSendSuper2(&v25, "viewSafeAreaInsetsDidChange");
  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v2 = v1;
  objc_msgSend(v1, "safeAreaInsets");
  v4 = v3;
  v6 = v5;

  v7 = objc_msgSend(v0, "view");
  if (!v7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = v7;
  objc_msgSend(v7, "safeAreaInsets");
  v10 = v9;

  v11 = objc_msgSend(v0, "view");
  if (!v11)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v12 = v11;
  objc_msgSend(v11, "safeAreaInsets");
  v14 = v13;

  v15 = sub_100025650();
  objc_msgSend(v15, "contentInset");
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;

  if (v17 != v10 || v19 != v4 || v21 != v14 || v23 != v6)
  {
    v24 = sub_100025650();
    objc_msgSend(v24, "setContentInset:", v10, v4, v14, v6);

  }
}

uint64_t sub_100025C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  id v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  id v30;
  Class isa;
  Class v32;
  id v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char v70[24];
  _QWORD *v71;
  _QWORD aBlock[5];
  uint64_t v73;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v66 = *(_QWORD *)(v2 - 8);
  v67 = v2;
  __chkstk_darwin(v2);
  v65 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  __chkstk_darwin(v4);
  v62 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for Locale(0);
  v60 = *(_QWORD *)(v61 - 8);
  v6 = __chkstk_darwin(v61);
  v59 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v58 = (char *)&v53 - v8;
  v57 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_dictionaryManager;
  v9 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_dictionaryManager);
  v10 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_conversation);
  v11 = v9;
  v12 = v10;
  v13 = sub_100076A78();

  sub_1000A3E3C(v13);
  v68 = v1;
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v16 = swift_getKeyPath(&unk_1001E7838);
  v17 = swift_retain(v14);
  static Published.subscript.getter(aBlock, v17, KeyPath);
  swift_release(v14);
  swift_release(KeyPath);
  result = swift_release(v16);
  v19 = aBlock[0];
  if (!(aBlock[0] >> 62))
  {
    v20 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v19);
  }
  if (aBlock[0] < 0)
    v52 = aBlock[0];
  else
    v52 = aBlock[0] & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(aBlock[0]);
  v20 = _CocoaArrayWrapper.endIndex.getter(v52);
  result = swift_bridgeObjectRelease(v19);
  if (!v20)
    return swift_bridgeObjectRelease(v19);
LABEL_3:
  if (v20 >= 1)
  {
    v21 = 0;
    v54 = v19 & 0xC000000000000001;
    v56 = v19;
    v55 = v20;
    v22 = v62;
    v23 = v65;
    do
    {
      if (v54)
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v19);
      else
        v24 = *(id *)(v19 + 8 * v21 + 32);
      v25 = v24;
      ++v21;
      v26 = (char *)*(id *)(v68 + v57);
      v27 = v58;
      v69 = v25;
      v28 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v26);
      v29 = v59;
      dispatch thunk of PersistedTranslation.targetLocale.getter(v28);
      v30 = objc_allocWithZone((Class)_LTLocalePair);
      isa = Locale._bridgeToObjectiveC()().super.isa;
      v32 = Locale._bridgeToObjectiveC()().super.isa;
      v33 = objc_msgSend(v30, "initWithSourceLocale:targetLocale:", isa, v32);

      v34 = *(void (**)(char *, uint64_t))(v60 + 8);
      v35 = v61;
      v34(v29, v61);
      v34(v27, v35);
      v36 = *(void **)&v26[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_dictionaryQueue];
      v37 = swift_allocObject(&unk_100264E10, 32, 7);
      *(_QWORD *)(v37 + 16) = v26;
      *(_QWORD *)(v37 + 24) = v33;
      aBlock[4] = sub_10002D550;
      v73 = v37;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100075908;
      aBlock[3] = &unk_100264E28;
      v38 = _Block_copy(aBlock);
      v39 = v26;
      v40 = v36;
      v41 = v33;
      static DispatchQoS.unspecified.getter(v41);
      v71 = _swiftEmptyArrayStorage;
      v42 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v43 = sub_100006DF4(&qword_10028AC30);
      v44 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
      v45 = v67;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v43, v44, v67, v42);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v22, v23, v38);
      _Block_release(v38);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v45);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v22, v64);
      swift_release(v73);
      v46 = (uint64_t *)&v39[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability];
      swift_beginAccess(&v39[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability], v70, 0, 0);
      v47 = *v46;
      v48 = objc_msgSend(v41, "canonicalIdentifier", swift_bridgeObjectRetain(v47).n128_f64[0]);
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

      sub_1000CED6C(v49, v51, v47);
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease(v47);
      v19 = v56;
    }
    while (v55 != v21);
    return swift_bridgeObjectRelease(v19);
  }
  __break(1u);
  return result;
}

void sub_1000261A8(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _BYTE v31[104];
  objc_super v32;

  v32.receiver = (id)v1;
  v32.super_class = (Class)type metadata accessor for CardListController(0);
  objc_msgSendSuper2(&v32, "viewDidAppear:", a1 & 1);
  v3 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_initialAppearance;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_initialAppearance) == 1)
  {
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
    v5 = OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation;
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation))
    {
      v29 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_initialAppearance;
      KeyPath = swift_getKeyPath(&unk_1001E7810);
      v7 = swift_getKeyPath(&unk_1001E7838);
      v8 = swift_retain(v4);
      static Published.subscript.getter(v30, v8, KeyPath);
      swift_release(KeyPath);
      swift_release(v7);
      v9 = v30[0];
      if (v30[0] >> 62)
        goto LABEL_20;
      v10 = *(_QWORD *)((v30[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain(v4);
      while (v10)
      {
        v28 = v1;
        v11 = 0;
        while (1)
        {
          v12 = (v9 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9)
              : *(id *)(v9 + 8 * v11 + 32);
          v1 = (uint64_t)v12;
          v13 = *(void **)(v4 + v5);
          if (v13)
            break;

          v16 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_19;
LABEL_15:
          ++v11;
          if (v16 == v10)
          {
            v11 = 0;
            v17 = 1;
            v1 = v28;
            goto LABEL_25;
          }
        }
        type metadata accessor for PersistedTranslation(0);
        v14 = (id)v1;
        v15 = v13;
        v1 = static NSObject.== infix(_:_:)(v14, v15);

        if ((v1 & 1) != 0)
        {
          v17 = 0;
          v1 = v28;
          goto LABEL_25;
        }
        v16 = v11 + 1;
        if (!__OFADD__(v11, 1))
          goto LABEL_15;
LABEL_19:
        __break(1u);
LABEL_20:
        if (v9 < 0)
          v18 = v9;
        else
          v18 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_retain(v4);
        swift_bridgeObjectRetain(v9);
        v10 = _CocoaArrayWrapper.endIndex.getter(v18);
        swift_bridgeObjectRelease(v9);
      }
      v11 = 0;
      v17 = 1;
LABEL_25:
      swift_bridgeObjectRelease(v9);
      swift_release_n(v4, 2);
      v3 = v29;
    }
    else
    {
      v11 = 0;
      v17 = 0;
    }
    sub_100026550(v11, v17);
    *(_BYTE *)(v1 + v3) = 0;
    sub_100027F30();
    v19 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_10028A398 != -1)
      swift_once(&qword_10028A398, sub_100025290);
    v20 = qword_1002AA078;
    v21 = sub_100006DF4((uint64_t *)&unk_1002954E0);
    inited = swift_initStackObject(v21, v31);
    *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
    v30[0] = 0xD000000000000011;
    v30[1] = 0x80000001001F92E0;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v30, &type metadata for String, &protocol witness table for String);
    v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_minSourceTextSize);
    v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_minSourceTextSize + 8);
    type metadata accessor for CGSize(0);
    *(_QWORD *)(inited + 96) = v25;
    *(_QWORD *)(inited + 72) = v23;
    *(_QWORD *)(inited + 80) = v24;
    v26 = sub_1001A4AA4(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "postNotificationName:object:userInfo:", v20, 0, isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

  }
}

uint64_t sub_100026550(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  uint64_t isEscapingClosureAtFileLocation;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v57;
  uint64_t v58;
  uint64_t v59;
  Class isa;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t aBlock;
  uint64_t v89;
  uint64_t (*v90)(uint64_t);
  void *v91;
  void *v92;
  _QWORD *v93;

  v86 = a2;
  v78 = a1;
  v5 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v5);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for DispatchWorkItemFlags(0);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v82 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for DispatchQoS(0);
  v81 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v80 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IndexPath(0);
  v79 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v79 + 64);
  v12 = __chkstk_darwin(v10);
  v13 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v77 = (char *)&v77 - v14;
  v15 = (void *)objc_opt_self(UIView);
  v16 = swift_allocObject(&unk_100264CF8, 24, 7);
  *(_QWORD *)(v16 + 16) = v2;
  v17 = swift_allocObject(&unk_100264D20, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_10002D3E0;
  *(_QWORD *)(v17 + 24) = v16;
  v87 = v16;
  v92 = sub_10002D62C;
  v93 = (_QWORD *)v17;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v89 = 1107296256;
  v90 = sub_100026DB0;
  v91 = &unk_100264D38;
  v18 = (char *)_Block_copy(&aBlock);
  v19 = v93;
  v20 = v2;
  swift_retain(v17);
  swift_release(v19);
  objc_msgSend(v15, "performWithoutAnimation:", v18);
  _Block_release(v18);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v17, "", 110, 191, 40, 1);
  swift_release(v17);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_25:
    if (isEscapingClosureAtFileLocation < 0)
      v75 = isEscapingClosureAtFileLocation;
    else
      v75 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
    v31 = _CocoaArrayWrapper.endIndex.getter(v75);
    swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    goto LABEL_7;
  }
  v22 = sub_100025650();
  objc_msgSend(v22, "contentOffset");
  v3 = v23;
  v4 = v24;

  v25 = sub_100025650();
  v26 = objc_msgSend(v25, "indexPathsForSelectedItems");

  if (v26)
  {
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v10);

  }
  else
  {
    v17 = 0;
  }
  v18 = (char *)OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
  v27 = *(_QWORD *)((char *)v20 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v29 = swift_getKeyPath(&unk_1001E7838);
  v30 = swift_retain(v27);
  static Published.subscript.getter(&aBlock, v30, KeyPath);
  swift_release(v27);
  swift_release(KeyPath);
  swift_release(v29);
  isEscapingClosureAtFileLocation = aBlock;
  if ((unint64_t)aBlock >> 62)
    goto LABEL_25;
  v31 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
  swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
  if (v31 <= 0)
    goto LABEL_13;
  if ((v86 & 1) != 0)
  {
    v57 = sub_100025650();
    if (v17)
    {
      v58 = v79;
      if (*(_QWORD *)(v17 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(v7, v17 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80)), v10);
        v59 = 0;
      }
      else
      {
        v59 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v7, v59, 1, v10);
      swift_bridgeObjectRelease(v17);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v7, 1, v10) == 1)
      {
        isa = 0;
      }
      else
      {
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v10);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v7, 1, 1, v10);
      isa = 0;
    }
    objc_msgSend(v57, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 1);

    v61 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    v62 = (void *)static OS_dispatch_queue.main.getter(v61);
    v63 = (_QWORD *)swift_allocObject(&unk_100264D70, 40, 7);
    v63[2] = v20;
    v63[3] = v3;
    v63[4] = v4;
    v92 = sub_10002D450;
    v93 = v63;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v89 = 1107296256;
    v90 = sub_100075908;
    v91 = &unk_100264D88;
    v64 = _Block_copy(&aBlock);
    v65 = v93;
    v66 = v20;
    v67 = swift_release(v65);
    v68 = v80;
    static DispatchQoS.unspecified.getter(v67);
    aBlock = (uint64_t)_swiftEmptyArrayStorage;
    v69 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v70 = sub_100006DF4(&qword_10028AC30);
    v71 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
    v72 = v82;
    v73 = v70;
    v74 = v85;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v73, v71, v85, v69);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v68, v72, v64);
    _Block_release(v64);

    (*(void (**)(char *, uint64_t))(v83 + 8))(v72, v74);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v68, v84);
    return swift_release(v87);
  }
  v32 = *(_QWORD *)&v18[(_QWORD)v20];
  v33 = swift_getKeyPath(&unk_1001E7810);
  v34 = swift_getKeyPath(&unk_1001E7838);
  v35 = swift_retain(v32);
  static Published.subscript.getter(&aBlock, v35, v33);
  swift_release(v32);
  swift_release(v33);
  swift_release(v34);
  v36 = aBlock;
  if ((unint64_t)aBlock >> 62)
  {
    v76 = aBlock < 0 ? aBlock : aBlock & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(aBlock);
    v37 = _CocoaArrayWrapper.endIndex.getter(v76);
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    v37 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v36);
  if (v37 <= v78)
  {
LABEL_13:
    swift_release(v87);
    return swift_bridgeObjectRelease(v17);
  }
  v38 = v77;
  IndexPath.init(item:section:)(v78, 0);
  v39 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v40 = (void *)static OS_dispatch_queue.main.getter(v39);
  v41 = v79;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v13, v38, v10);
  v42 = *(unsigned __int8 *)(v41 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(&unk_100264DC0, v43 + v11, v42 | 7);
  *(_QWORD *)(v44 + 16) = v17;
  *(_QWORD *)(v44 + 24) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v44 + v43, v13, v10);
  v92 = sub_10002D520;
  v93 = (_QWORD *)v44;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v89 = 1107296256;
  v90 = sub_100075908;
  v91 = &unk_100264DD8;
  v45 = _Block_copy(&aBlock);
  v46 = v93;
  v47 = v20;
  v48 = swift_release(v46);
  v49 = v80;
  static DispatchQoS.unspecified.getter(v48);
  aBlock = (uint64_t)_swiftEmptyArrayStorage;
  v50 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v51 = sub_100006DF4(&qword_10028AC30);
  v52 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
  v53 = v82;
  v54 = v51;
  v55 = v85;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v54, v52, v85, v50);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v53, v45);
  _Block_release(v45);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v53, v55);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v49, v84);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v10);
  return swift_release(v87);
}

uint64_t sub_100026DB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_100026DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, unint64_t, uint64_t);
  void (*v16)(char *, _QWORD, uint64_t, uint64_t);
  id v17;
  Class isa;
  id v19;
  id v20;
  Class v21;
  uint64_t v22;

  v5 = sub_100006DF4((uint64_t *)&unk_100290880);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || !*(_QWORD *)(a1 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_6;
  }
  v15 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  v15(v10, a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v11);
  v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v16(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_6:
    sub_10000A020((uint64_t)v10, (uint64_t *)&unk_100290880);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v15(v8, (unint64_t)v14, v11);
  v16(v8, 0, 1, v11);
  sub_100027930((uint64_t)v8, 0);
  sub_10000A020((uint64_t)v8, (uint64_t *)&unk_100290880);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_7:
  v17 = sub_100025650();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 0);

  sub_100027038(a3, 0);
  v19 = sub_100025650();
  objc_msgSend(v19, "layoutIfNeeded");

  v20 = sub_100025650();
  v21 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "scrollToItemAtIndexPath:atScrollPosition:animated:", v21, 4, 0);

}

void sub_100027038(uint64_t a1, int a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  void **v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  Class isa;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  id v38;
  Class v39;
  Class v40;
  id v41;
  void (*v42)(char *, uint64_t);
  objc_class *v43;
  uint64_t v44;
  char v45;
  id v46;
  void *v47;
  id v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double Height;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  void **v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  const char *v72;
  char v73;
  int v74;
  unint64_t v75;
  char *v76;
  id v77;
  objc_class *v78;
  id v79;
  id v80;
  NSString v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  id v89;
  void *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  id v96;
  char isEscapingClosureAtFileLocation;
  id v98;
  id v99;
  int v100;
  char *v101;
  void **aBlock;
  uint64_t v103;
  uint64_t (*v104)(uint64_t);
  void *v105;
  void *v106;
  uint64_t v107;
  CGRect v108;

  v100 = a2;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v98 - v9;
  v11 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v11);
  v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for IndexPath(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  v16 = (uint64_t)&v2[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_currentExpandedIndexPath];
  swift_beginAccess(&v2[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_currentExpandedIndexPath], &aBlock, 33, 0);
  sub_10002D560((uint64_t)v13, v16, (uint64_t *)&unk_100290880);
  swift_endAccess(&aBlock);
  v17 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
  v101 = v2;
  v18 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session];
  v19 = swift_retain(v18);
  v20 = IndexPath.item.getter(v19);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v22 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(&aBlock, v18, KeyPath);
  swift_release(v18);
  swift_release(KeyPath);
  swift_release(v22);
  v23 = aBlock;
  if (((unint64_t)aBlock & 0xC000000000000001) == 0)
  {
    if ((v20 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v20 < *(_QWORD *)(((unint64_t)aBlock & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v24 = aBlock[v20 + 4];
      goto LABEL_5;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    return;
  }
  v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, aBlock);
LABEL_5:
  v25 = v24;
  swift_bridgeObjectRelease(v23);
  v26 = *(_QWORD *)&v101[v17];
  v27 = *(void **)(v26 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation);
  *(_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation) = v25;
  v28 = v25;

  v29 = sub_100025650();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v31 = objc_msgSend(v29, "cellForItemAtIndexPath:", isa);

  if (!v31)
  {
LABEL_20:

    return;
  }
  v32 = type metadata accessor for CardCollectionViewCell();
  v33 = swift_dynamicCastClass(v31, v32);
  if (!v33)
  {

    goto LABEL_20;
  }
  v34 = v33;
  v98 = v31;
  v35 = sub_100023D30();
  v36 = *(id *)&v101[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_dictionaryManager];
  v37 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v36);
  v99 = v28;
  dispatch thunk of PersistedTranslation.targetLocale.getter(v37);
  v38 = objc_allocWithZone((Class)_LTLocalePair);
  v39 = Locale._bridgeToObjectiveC()().super.isa;
  v40 = Locale._bridgeToObjectiveC()().super.isa;
  v41 = objc_msgSend(v38, "initWithSourceLocale:targetLocale:", v39, v40);

  v42 = *(void (**)(char *, uint64_t))(v5 + 8);
  v42(v8, v4);
  v42(v10, v4);
  LOBYTE(v39) = sub_1000A3E3C(v41);

  v43 = sub_1000218B0();
  -[objc_class setHidden:](v43, "setHidden:", (v39 & 1) == 0);

  v44 = OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded;
  v45 = *(_BYTE *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded);
  *(_BYTE *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) = 1;
  if ((v45 & 1) == 0)
    sub_100024A80();
  v46 = objc_msgSend(v101, "view");
  if (!v46)
    goto LABEL_40;
  v47 = v46;
  v48 = objc_msgSend(v46, "safeAreaLayoutGuide");

  objc_msgSend(v48, "layoutFrame");
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v56 = v55;

  v108.origin.x = v50;
  v108.origin.y = v52;
  v108.size.width = v54;
  v108.size.height = v56;
  Height = CGRectGetHeight(v108);
  *(double *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_expandedMinimumHeight) = Height;
  v58 = *(void **)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight);
  v59 = v98;
  if (v58)
  {
    if ((*(_BYTE *)(v34 + v44) & 1) == 0)
      Height = *(double *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_collapsedMinHeight);
    objc_msgSend(v58, "setConstant:", Height);
  }
  v60 = *(void **)&v101[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_conversation];
  v61 = swift_getKeyPath(&unk_1001E7858);
  v62 = swift_getKeyPath(&unk_1001E7880);
  v63 = v60;
  static Published.subscript.getter(&aBlock, v63, v61);

  swift_release(v61);
  swift_release(v62);
  v65 = aBlock;
  v64 = v103;
  v66 = objc_msgSend(v99, "identifier");
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
  v69 = v68;

  if (v64)
  {
    if (v65 == (void **)v67 && v64 == v69)
    {
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v69);
      v70 = *(_BYTE *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying);
      *(_BYTE *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying) = 1;
      if ((v70 & 1) != 0)
        goto LABEL_31;
    }
    else
    {
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v64, v67, v69, 0);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v69);
      v74 = *(unsigned __int8 *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying);
      *(_BYTE *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying) = v73 & 1;
      if ((v73 & 1) == v74)
        goto LABEL_31;
      if ((v73 & 1) == 0)
      {
        v75 = 0x80000001001F8F60;
        goto LABEL_27;
      }
    }
    v72 = "pause.circle.fill";
  }
  else
  {
    swift_bridgeObjectRelease(v69);
    v71 = *(_BYTE *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying);
    *(_BYTE *)(v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying) = 0;
    if ((v71 & 1) == 0)
      goto LABEL_31;
    v72 = "play.circle.fill";
  }
  v75 = (unint64_t)(v72 - 32) | 0x8000000000000000;
LABEL_27:
  v76 = sub_100023D30();
  v77 = *(id *)&v76[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];

  v78 = sub_100021BF8();
  v79 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 3);
  swift_bridgeObjectRetain(v75);
  v80 = v79;
  v81 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v75);
  v82 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v81, v80);

  if (v82)
  {
    v83 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    v84 = objc_msgSend(v82, "imageWithTintColor:", v83);

  }
  else
  {
    v84 = 0;
  }
  -[objc_class setImage:forState:](v78, "setImage:forState:", v84, 0);
  swift_bridgeObjectRelease(v75);

LABEL_31:
  if ((v100 & 1) != 0)
  {
    v85 = (void *)objc_opt_self(UIView);
    v86 = swift_allocObject(&unk_100264CA8, 24, 7);
    *(_QWORD *)(v86 + 16) = v34;
    v106 = sub_10002D3D0;
    v107 = v86;
    aBlock = _NSConcreteStackBlock;
    v103 = 1107296256;
    v104 = sub_100075908;
    v105 = &unk_100264CC0;
    v87 = _Block_copy(&aBlock);
    v88 = v107;
    v89 = v59;
    swift_release(v88);
    objc_msgSend(v85, "animateWithDuration:animations:", v87, 0.25);
    _Block_release(v87);
  }
  v90 = (void *)objc_opt_self(UIView);
  v91 = swift_allocObject(&unk_100264C30, 24, 7);
  v92 = v101;
  *(_QWORD *)(v91 + 16) = v101;
  v93 = swift_allocObject(&unk_100264C58, 32, 7);
  *(_QWORD *)(v93 + 16) = sub_10002D368;
  *(_QWORD *)(v93 + 24) = v91;
  v106 = sub_10002D62C;
  v107 = v93;
  aBlock = _NSConcreteStackBlock;
  v103 = 1107296256;
  v104 = sub_100026DB0;
  v105 = &unk_100264C70;
  v94 = _Block_copy(&aBlock);
  v95 = v107;
  v96 = v92;
  swift_retain(v93);
  swift_release(v95);
  objc_msgSend(v90, "performWithoutAnimation:", v94);

  _Block_release(v94);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v93, "", 110, 276, 40, 1);
  swift_release(v91);
  swift_release(v93);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_39;
}

uint64_t sub_100027930(uint64_t a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  id v14;
  Class isa;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  void **v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  char v31;
  uint64_t v32;
  void *v33;
  int v34;
  char v35;
  char v36;
  char *v37;
  id v38;
  objc_class *v39;
  id v40;
  NSString v41;
  id v42;
  objc_class *v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  char isEscapingClosureAtFileLocation;
  _BYTE v59[12];
  int v60;
  id v61;
  char *v62;
  void **aBlock;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  void *v66;
  void *v67;
  uint64_t v68;

  v3 = v2;
  v6 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v6);
  v8 = &v59[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v59[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B074(a1, (uint64_t)v8, (uint64_t *)&unk_100290880);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_10000A020((uint64_t)v8, (uint64_t *)&unk_100290880);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
  v14 = sub_100025650();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, "cellForItemAtIndexPath:", isa);

  if (!v16)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  v17 = type metadata accessor for CardCollectionViewCell();
  v18 = swift_dynamicCastClass(v16, v17);
  if (!v18)
  {

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  }
  v19 = v18;
  v60 = a2;
  v20 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
  v62 = v3;
  v21 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session];
  v22 = swift_retain(v21);
  v23 = IndexPath.item.getter(v22);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v25 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(&aBlock, v21, KeyPath);
  swift_release(v21);
  swift_release(KeyPath);
  result = swift_release(v25);
  v26 = aBlock;
  if (((unint64_t)aBlock & 0xC000000000000001) != 0)
  {
    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, aBlock);
    goto LABEL_9;
  }
  if ((v23 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v23 >= *(_QWORD *)(((unint64_t)aBlock & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  v27 = aBlock[v23 + 4];
LABEL_9:
  v61 = v27;
  swift_bridgeObjectRelease(v26);
  v28 = *(void **)(*(_QWORD *)&v62[v20] + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation);
  if (v28)
  {
    type metadata accessor for PersistedTranslation(0);
    v29 = v61;
    v30 = v28;
    v31 = static NSObject.== infix(_:_:)(v29, v30);

    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)&v62[v20];
      v33 = *(void **)(v32 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation);
      *(_QWORD *)(v32 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation) = 0;

    }
  }
  v34 = *(unsigned __int8 *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) = 0;
  if (v34 == 1)
    sub_100024A80();
  v35 = *(_BYTE *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying) = 0;
  v36 = v60;
  if ((v35 & 1) != 0)
  {
    v37 = sub_100023D30();
    v38 = *(id *)&v37[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];

    v39 = sub_100021BF8();
    v40 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 3);
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v41, v40);

    if (v42)
    {
      v43 = v39;
      v44 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v45 = objc_msgSend(v42, "imageWithTintColor:", v44);

      v39 = v43;
      v36 = v60;
    }
    else
    {
      v45 = 0;
    }
    -[objc_class setImage:forState:](v39, "setImage:forState:", v45, 0);

  }
  if ((v36 & 1) != 0)
  {
    v46 = (void *)objc_opt_self(UIView);
    v47 = swift_allocObject(&unk_100264BE0, 24, 7);
    *(_QWORD *)(v47 + 16) = v19;
    v67 = sub_10002D670;
    v68 = v47;
    aBlock = _NSConcreteStackBlock;
    v64 = 1107296256;
    v65 = sub_100075908;
    v66 = &unk_100264BF8;
    v48 = _Block_copy(&aBlock);
    v49 = v68;
    v50 = v16;
    swift_release(v49);
    objc_msgSend(v46, "animateWithDuration:animations:", v48, 0.25);
    _Block_release(v48);
  }
  v51 = (void *)objc_opt_self(UIView);
  v52 = swift_allocObject(&unk_100264B68, 24, 7);
  v53 = v62;
  *(_QWORD *)(v52 + 16) = v62;
  v54 = swift_allocObject(&unk_100264B90, 32, 7);
  *(_QWORD *)(v54 + 16) = sub_10002D368;
  *(_QWORD *)(v54 + 24) = v52;
  v67 = sub_1000089A8;
  v68 = v54;
  aBlock = _NSConcreteStackBlock;
  v64 = 1107296256;
  v65 = sub_100026DB0;
  v66 = &unk_100264BA8;
  v55 = _Block_copy(&aBlock);
  v56 = v68;
  v57 = v53;
  swift_retain(v54);
  swift_release(v56);
  objc_msgSend(v51, "performWithoutAnimation:", v55);
  _Block_release(v55);

  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v54, "", 110, 301, 40, 1);
  swift_release(v52);
  result = swift_release(v54);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_28;
  return result;
}

void sub_100027F30()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  char *v14;
  id v15;
  double v16;
  double v17;
  char *v18;
  id v19;
  double v20;
  double v21;
  char *v22;
  id v23;
  double v24;
  double v25;
  char *v26;
  id v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  uint64_t inited;
  NSString *v40;
  id v41;
  unint64_t v42;
  Class isa;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double Height;
  id v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  id v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  double v67;
  double *v68;
  double Width;
  char v70[72];
  CGRect v71;
  CGRect v72;
  CGRect v73;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CardCollectionViewCell()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = objc_msgSend(v0, "view");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "safeAreaLayoutGuide");

    objc_msgSend(v5, "layoutFrame");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;

    v71.origin.x = v7;
    v71.origin.y = v9;
    v71.size.width = v11;
    v71.size.height = v13;
    Width = CGRectGetWidth(v71);
    v14 = sub_100023D30();
    v15 = sub_1001AD668();

    objc_msgSend(v15, "textContainerInset");
    v17 = v16;

    v18 = sub_100023D30();
    v19 = sub_1001AD668();

    objc_msgSend(v19, "textContainerInset");
    v21 = v20;

    v22 = sub_100023D30();
    v23 = sub_1001AD668();

    objc_msgSend(v23, "contentInset");
    v25 = v24;

    v26 = sub_100023D30();
    v27 = sub_1001AD668();

    objc_msgSend(v27, "contentInset");
    v29 = v28;

    v30 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleFootnote, 0);
    v31 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v30, "pointSize");
    v32 = objc_msgSend(v31, "systemFontOfSize:weight:");
    v33 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleFootnote);
    v34 = objc_msgSend(v33, "scaledFontForFont:maximumPointSize:", v32, 1.79769313e308);

    v35 = objc_allocWithZone((Class)NSString);
    v36 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v35, "initWithString:", v36);

    v38 = sub_100006DF4(&qword_100298070);
    inited = swift_initStackObject(v38, v70);
    *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
    *(_QWORD *)(inited + 32) = NSFontAttributeName;
    *(_QWORD *)(inited + 64) = sub_10000A05C(0, (unint64_t *)&qword_10028C090, UIFont_ptr);
    *(_QWORD *)(inited + 40) = v34;
    v40 = NSFontAttributeName;
    v41 = v34;
    v42 = sub_1001A4A88(inited);
    type metadata accessor for Key(0);
    sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v37, "boundingRectWithSize:options:attributes:context:", 1, isa, 0, 1.79769313e308, 1.79769313e308);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    v51 = v50;

    v72.origin.x = v45;
    v72.origin.y = v47;
    v72.size.width = v49;
    v72.size.height = v51;
    Height = CGRectGetHeight(v72);

    v53 = objc_msgSend(v1, "view");
    if (v53)
    {
      v54 = v53;
      v55 = ceil(Height);
      v56 = v55 + v55;
      v57 = Width - v17 - v21 - v25 - v29 + -64.0;
      v58 = objc_msgSend(v53, "safeAreaLayoutGuide");

      objc_msgSend(v58, "layoutFrame");
      v60 = v59;
      v62 = v61;
      v64 = v63;
      v66 = v65;

      v73.origin.x = v60;
      v73.origin.y = v62;
      v73.size.width = v64;
      v73.size.height = v66;
      v67 = CGRectGetHeight(v73);

      v68 = (double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_minSourceTextSize];
      *v68 = floor(v57);
      v68[1] = floor((v67 + -88.0 + -34.0 + -1.0 - v56) / 2.3);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_100028440()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardListController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100028524()
{
  return type metadata accessor for CardListController(0);
}

uint64_t type metadata accessor for CardListController(uint64_t a1)
{
  uint64_t result;

  result = qword_10028BF20;
  if (!qword_10028BF20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CardListController);
  return result;
}

void sub_100028568(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100028638(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = "\b";
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = &unk_1001E7760;
    v4[9] = &unk_1001E7760;
    v4[10] = &unk_1001E7778;
    v4[11] = &unk_1001E7790;
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

void sub_100028638(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028BF30)
  {
    v2 = type metadata accessor for IndexPath(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028BF30);
  }
}

id sub_10002868C()
{
  return sub_100025650();
}

id sub_100028724()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  uint64_t v10;
  id result;
  id v12;
  Class isa;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double Height;
  void *v29;
  char v31[24];
  objc_super v32;
  CGRect v33;

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v2);
  v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = (objc_class *)type metadata accessor for CardListController(0);
  v32.receiver = v1;
  v32.super_class = v9;
  objc_msgSendSuper2(&v32, "viewWillLayoutSubviews");
  v10 = (uint64_t)&v1[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_currentExpandedIndexPath];
  swift_beginAccess(&v1[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_currentExpandedIndexPath], v31, 0, 0);
  sub_10000B074(v10, (uint64_t)v4, (uint64_t *)&unk_100290880);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return (id)sub_10000A020((uint64_t)v4, (uint64_t *)&unk_100290880);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v12 = sub_100025650();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v12, "cellForItemAtIndexPath:", isa);

  if (!v14)
    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = type metadata accessor for CardCollectionViewCell();
  v16 = swift_dynamicCastClass(v14, v15);
  if (!v16)
  {
LABEL_10:

    return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v17 = v16;
  result = objc_msgSend(v1, "view");
  if (result)
  {
    v18 = result;
    v19 = objc_msgSend(result, "safeAreaLayoutGuide");

    objc_msgSend(v19, "layoutFrame");
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;

    v33.origin.x = v21;
    v33.origin.y = v23;
    v33.size.width = v25;
    v33.size.height = v27;
    Height = CGRectGetHeight(v33);
    *(double *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_expandedMinimumHeight) = Height;
    v29 = *(void **)(v17 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight);
    if (v29)
    {
      if ((*(_BYTE *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) & 1) == 0)
        Height = *(double *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_collapsedMinHeight);
      objc_msgSend(v29, "setConstant:", Height);
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_100028ADC(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSString v12;
  Class isa;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  const char *v45;
  char v46;
  int v47;
  unint64_t v48;
  char *v49;
  id v50;
  objc_class *v51;
  id v52;
  id v53;
  NSString v54;
  id v55;
  id v56;
  id v57;
  char *v58;
  id v59;
  void *v60;
  id v61;
  double v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  double Height;
  void *v71;
  char *v72;
  char *v73;
  double v74;
  double v75;
  char *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  int v98;
  char *v99;
  id v100;
  char *v101;
  uint64_t v102;
  id v103;
  Class v104;
  Class v105;
  id v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  char v109;
  objc_class *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  id v117;
  _BYTE v118[24];
  _QWORD v119[3];
  uint64_t v120;
  _UNKNOWN **v121;
  CGRect v122;

  v3 = v2;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v116 = (char *)&v113 - v11;
  v12 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v117 = a1;
  v14 = objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v12, isa);

  v15 = type metadata accessor for CardCollectionViewCell();
  v16 = swift_dynamicCastClassUnconditional(v14, v15, 0, 0, 0);
  v17 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
  v18 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session];
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v20 = swift_getKeyPath(&unk_1001E7838);
  v21 = swift_retain(v18);
  static Published.subscript.getter(v119, v21, KeyPath);
  swift_release(v18);
  swift_release(KeyPath);
  swift_release(v20);
  v22 = v119[0];
  if (v119[0] >> 62)
  {
    if (v119[0] < 0)
      v112 = v119[0];
    else
      v112 = v119[0] & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v119[0]);
    v23 = _CocoaArrayWrapper.endIndex.getter(v112);
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    v23 = *(_QWORD *)((v119[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v22);
  if (IndexPath.row.getter(v24) < v23)
  {
    v25 = *(_QWORD *)&v3[v17];
    v26 = swift_retain(v25);
    v27 = IndexPath.item.getter(v26);
    v28 = swift_getKeyPath(&unk_1001E7810);
    v29 = swift_getKeyPath(&unk_1001E7838);
    static Published.subscript.getter(v119, v25, v28);
    swift_release(v25);
    swift_release(v28);
    swift_release(v29);
    v30 = v119[0];
    v113 = v7;
    v114 = v6;
    v115 = v10;
    if ((v119[0] & 0xC000000000000001) == 0)
    {
      if ((v27 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v27 < *(_QWORD *)((v119[0] & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v31 = *(id *)(v119[0] + 8 * v27 + 32);
        goto LABEL_8;
      }
      __break(1u);
      goto LABEL_47;
    }
    v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v119[0]);
LABEL_8:
    v32 = v31;
    swift_bridgeObjectRelease(v30);
    v33 = *(void **)&v3[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_conversation];
    v34 = swift_getKeyPath(&unk_1001E7858);
    v35 = swift_getKeyPath(&unk_1001E7880);
    v36 = v33;
    static Published.subscript.getter(v119, v36, v34);

    swift_release(v34);
    swift_release(v35);
    v38 = v119[0];
    v37 = v119[1];
    v39 = objc_msgSend(v32, "identifier");
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v42 = v41;

    if (v37)
    {
      if (v38 == v40 && v37 == v42)
      {
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v42);
        v43 = *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying);
        *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying) = 1;
        if ((v43 & 1) != 0)
          goto LABEL_23;
      }
      else
      {
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v37, v40, v42, 0);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v42);
        v47 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying);
        *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying) = v46 & 1;
        if ((v46 & 1) == v47)
          goto LABEL_23;
        if ((v46 & 1) == 0)
        {
          v48 = 0x80000001001F8F60;
          goto LABEL_19;
        }
      }
      v45 = "pause.circle.fill";
    }
    else
    {
      swift_bridgeObjectRelease(v42);
      v44 = *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying);
      *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isPlaying) = 0;
      if ((v44 & 1) == 0)
        goto LABEL_23;
      v45 = "play.circle.fill";
    }
    v48 = (unint64_t)(v45 - 32) | 0x8000000000000000;
LABEL_19:
    v49 = sub_100023D30();
    v50 = *(id *)&v49[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];

    v51 = sub_100021BF8();
    v52 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 3);
    swift_bridgeObjectRetain(v48);
    v53 = v52;
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    v55 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v54, v53);

    if (v55)
    {
      v56 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
      v57 = objc_msgSend(v55, "imageWithTintColor:", v56);

    }
    else
    {
      v57 = 0;
    }
    -[objc_class setImage:forState:](v51, "setImage:forState:", v57, 0, v113, v114);
    swift_bridgeObjectRelease(v48);

LABEL_23:
    v58 = sub_100023D30();
    sub_1001A52A8(v32);

    v59 = objc_msgSend(v3, "view");
    if (v59)
    {
      v60 = v59;
      v61 = objc_msgSend(v59, "safeAreaLayoutGuide");

      objc_msgSend(v61, "layoutFrame");
      v63 = v62;
      v65 = v64;
      v67 = v66;
      v69 = v68;

      v122.origin.x = v63;
      v122.origin.y = v65;
      v122.size.width = v67;
      v122.size.height = v69;
      Height = CGRectGetHeight(v122);
      *(double *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_expandedMinimumHeight) = Height;
      v71 = *(void **)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_minHeight);
      v72 = v115;
      if (v71)
      {
        if ((*(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) & 1) == 0)
          Height = *(double *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_collapsedMinHeight);
        objc_msgSend(v71, "setConstant:", Height, v113, v114);
      }
      v73 = sub_100023D30();
      v74 = *(double *)&v3[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_minSourceTextSize];
      v75 = *(double *)&v3[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_minSourceTextSize + 8];
      v76 = sub_100023D30();
      v77 = sub_1001AD668();

      v78 = objc_msgSend(v77, "text");
      if (v78)
      {
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        v81 = v80;

        v82 = (void *)sub_1001D851C(v74, v75, v79, v81, 0);
        swift_bridgeObjectRelease(v81);
        v83 = *(void **)&v73[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont];
        *(_QWORD *)&v73[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont] = v82;
        v84 = v82;

        sub_1001B039C();
        v85 = type metadata accessor for CardListController(0);
        v120 = v85;
        v121 = &off_100264970;
        v119[0] = v3;
        v86 = v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate;
        swift_beginAccess(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_delegate, v118, 33, 0);
        v87 = v3;
        sub_10002D560((uint64_t)v119, v86, &qword_10028BEA8);
        swift_endAccess(v118);
        v88 = sub_100023D30();
        v89 = (char *)*(id *)&v88[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];

        v120 = v85;
        v121 = &off_100264998;
        v119[0] = v87;
        v90 = (uint64_t)&v89[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate];
        swift_beginAccess(&v89[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_delegate], v118, 33, 0);
        v91 = v87;
        sub_10002D560((uint64_t)v119, v90, (uint64_t *)&unk_10028C080);
        swift_endAccess(v118);

        v92 = objc_msgSend(v117, "indexPathsForSelectedItems");
        if (v92)
        {
          v93 = v92;
          v94 = type metadata accessor for IndexPath(0);
          v95 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v93, v94);

          __chkstk_darwin(v96);
          *(&v113 - 2) = a2;
          LOBYTE(v93) = sub_1000E5660((uint64_t (*)(char *))sub_10002D328, (_BOOL8)(&v113 - 4), v95);
          swift_bridgeObjectRelease(v95);
          v97 = (_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded);
          v98 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded);
          *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) = v93 & 1;
          if ((v93 & 1) == v98)
          {
LABEL_32:
            v99 = sub_100023D30();
            if (*v97 == 1)
            {
              v100 = *(id *)&v91[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_dictionaryManager];
              v101 = v116;
              v102 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v100);
              dispatch thunk of PersistedTranslation.targetLocale.getter(v102);
              v103 = objc_allocWithZone((Class)_LTLocalePair);
              v104 = Locale._bridgeToObjectiveC()().super.isa;
              v105 = Locale._bridgeToObjectiveC()().super.isa;
              v106 = objc_msgSend(v103, "initWithSourceLocale:targetLocale:", v104, v105);

              v107 = v114;
              v108 = *(void (**)(char *, uint64_t))(v113 + 8);
              v108(v72, v114);
              v108(v101, v107);
              LOBYTE(v108) = sub_1000A3E3C(v106);

              v109 = v108 ^ 1;
            }
            else
            {
              v109 = 1;
            }
            v110 = sub_1000218B0();
            -[objc_class setHidden:](v110, "setHidden:", v109 & 1);

            return;
          }
        }
        else
        {
          v97 = (_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded);
          v111 = *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded);
          *(_BYTE *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) = 0;
          if ((v111 & 1) == 0)
            goto LABEL_32;
        }
        sub_100024A80();
        goto LABEL_32;
      }
LABEL_48:
      __break(1u);
      return;
    }
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
}

void sub_1000297B8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  char *v7;
  char *v8;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  id v23;
  Class isa;
  id v25;
  Class v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  double v45;
  id v46;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  char *v50;
  void *v51;
  char *v52;
  id v53;
  _BYTE *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  _BYTE *v58;
  char *v59;
  char *v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  void (**v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  double v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  id v79;
  id v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  CGFloat v90;
  double v91;
  double v92;
  double v93;
  CGFloat v94;
  double v95;
  CGFloat v96;
  double v97;
  id v98;
  double v99;
  double v100;
  double v101;
  CGFloat Width;
  CGFloat Height;
  CGFloat *v104;
  id v105;
  double v106;
  CGFloat v107;
  double v108;
  CGFloat v109;
  double v110;
  CGFloat v111;
  double v112;
  CGFloat v113;
  id v114;
  double v115;
  double v116;
  id v117;
  double v118;
  CGFloat v119;
  double v120;
  CGFloat v121;
  double v122;
  CGFloat v123;
  double v124;
  CGFloat v125;
  double MaxY;
  id v127;
  double v128;
  double v129;
  double v130;
  id v131;
  double v132;
  CGFloat v133;
  double v134;
  CGFloat v135;
  double v136;
  CGFloat v137;
  double v138;
  CGFloat v139;
  double MinX;
  id v141;
  double v142;
  double v143;
  id v144;
  void *v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  id v156;
  void *v157;
  id v158;
  id v159;
  void *v160;
  uint64_t v161;
  char v162;
  char v163;
  uint64_t v164;
  double MinY;
  char *v166;
  uint64_t v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;

  v8 = v7;
  v16 = objc_msgSend(v7, "presentedViewController");
  if (v16)
  {
    v17 = v16;
    v18 = type metadata accessor for DictionaryWordSelectionController();
    v19 = swift_dynamicCastClass(v17, v18);
    if (v19)
    {
      v20 = *(void **)(v19 + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController);
      v166 = v20;

      if (v20)
      {
        v21 = &v166[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
        v22 = *(_QWORD *)&v166[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text + 8];
        *(_QWORD *)v21 = a2;
        *((_QWORD *)v21 + 1) = a3;
        swift_bridgeObjectRetain(a3);
        swift_bridgeObjectRelease(v22);
        sub_1000A7A90();
LABEL_22:

        return;
      }
    }
    else
    {

    }
  }
  v23 = sub_100025650();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v23, "scrollToItemAtIndexPath:atScrollPosition:animated:", isa, 1, 1);

  v25 = sub_100025650();
  v26 = IndexPath._bridgeToObjectiveC()().super.isa;
  v166 = (char *)objc_msgSend(v25, "cellForItemAtIndexPath:", v26);

  if (v166)
  {
    v164 = a5;
    v27 = type metadata accessor for CardCollectionViewCell();
    v28 = swift_dynamicCastClass(v166, v27);
    if (!v28)
      goto LABEL_22;
    v29 = (char *)v28;
    v162 = a6;
    v163 = a7;
    v30 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
    v31 = *(_QWORD *)&v8[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session];
    KeyPath = swift_getKeyPath(&unk_1001E7810);
    v33 = swift_getKeyPath(&unk_1001E7838);
    v34 = swift_retain(v31);
    static Published.subscript.getter(&v167, v34, KeyPath);
    swift_release(v31);
    swift_release(KeyPath);
    swift_release(v33);
    v35 = v167;
    if ((unint64_t)v167 >> 62)
    {
      if (v167 < 0)
        v161 = v167;
      else
        v161 = v167 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v167);
      v36 = _CocoaArrayWrapper.endIndex.getter(v161);
      v37 = swift_bridgeObjectRelease_n(v35, 2);
      if ((v36 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      v36 = *(_QWORD *)((v167 & 0xFFFFFFFFFFFFF8) + 0x10);
      v37 = swift_bridgeObjectRelease(v167);
    }
    v38 = IndexPath.row.getter(v37);
    if ((v38 & 0x8000000000000000) != 0 || v38 >= v36)
    {

      return;
    }
    v39 = *(_QWORD *)&v8[v30];
    v40 = swift_retain(v39);
    a1 = IndexPath.row.getter(v40);
    v41 = swift_getKeyPath(&unk_1001E7810);
    v42 = swift_getKeyPath(&unk_1001E7838);
    static Published.subscript.getter(&v167, v39, v41);
    swift_release(v39);
    swift_release(v41);
    swift_release(v42);
    v35 = v167;
    if ((v167 & 0xC000000000000001) == 0)
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (a1 < *(_QWORD *)((v167 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v43 = *(id *)(v167 + 8 * a1 + 32);
        goto LABEL_16;
      }
      __break(1u);
      goto LABEL_35;
    }
LABEL_32:
    v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v35);
LABEL_16:
    v44 = v43;
    swift_bridgeObjectRelease(v35);
    v45 = *(double *)&v29[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_expandedMinimumHeight];
    v46 = objc_allocWithZone((Class)type metadata accessor for DictionaryWordSelectionController());
    v47 = sub_1000A91B8(v45);
    v48 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translation;
    v49 = *(void **)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translation];
    *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translation] = v44;
    v50 = v44;

    v51 = *(void **)&v47[v48];
    v52 = v50;
    if (v51)
    {
      v53 = v51;
      v54 = sub_1000A8F0C();
      v52 = sub_100023D30();

      sub_1001A52A8(v53);
    }

    v55 = &v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_word];
    v56 = *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_word + 8];
    *v55 = a2;
    v55[1] = a3;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v56);
    v57 = &v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initialTouchPointInTargetView];
    *(_QWORD *)v57 = a4;
    *((_QWORD *)v57 + 1) = v164;
    v57[16] = v162 & 1;
    v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initiallySetHighlightToFirstWord] = v163 & 1;
    v58 = sub_1000A8F0C();
    v59 = sub_100023D30();

    v60 = sub_100023D30();
    v61 = *(id *)&v60[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont];

    v62 = *(void **)&v59[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont];
    *(_QWORD *)&v59[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont] = v61;
    v63 = v61;

    sub_1001B039C();
    v64 = swift_allocObject(&unk_100264A00, 24, 7);
    swift_unknownObjectWeakInit(v64 + 16, v29);
    v65 = swift_allocObject(&unk_100264A28, 24, 7);
    swift_unknownObjectWeakInit(v65 + 16, v50);
    v66 = (void (*)(uint64_t))swift_allocObject(&unk_100264A50, 40, 7);
    *((_QWORD *)v66 + 2) = v64;
    *((_QWORD *)v66 + 3) = v65;
    *((_QWORD *)v66 + 4) = v8;
    v67 = (void (**)(uint64_t))&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translationAlternativeSelectedHandler];
    v68 = *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translationAlternativeSelectedHandler];
    v69 = *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translationAlternativeSelectedHandler
                        + 8];
    *v67 = sub_10002BA38;
    v67[1] = v66;
    v70 = v8;
    sub_10002BA44(v68, v69);
    objc_msgSend(v29, "bounds");
    objc_msgSend(v29, "convertRect:toView:", 0);
    v72 = v71;
    v74 = v73;
    v76 = v75;
    v78 = v77;
    v79 = sub_100025650();
    v80 = sub_100025650();
    objc_msgSend(v80, "bounds");
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v88 = v87;

    objc_msgSend(v79, "convertRect:toView:", 0, v82, v84, v86, v88);
    v90 = v89;
    v92 = v91;
    v94 = v93;
    v96 = v95;

    v168.origin.x = v90;
    v168.origin.y = v92;
    v168.size.width = v94;
    v168.size.height = v96;
    v97 = v92 + CGRectGetHeight(v168);
    v98 = sub_100025650();
    objc_msgSend(v98, "safeAreaInsets");
    v100 = v99;

    v169.origin.x = v72;
    v169.origin.y = v74;
    v169.size.width = v76;
    v169.size.height = v78;
    v101 = v97 - v100 - CGRectGetHeight(v169);
    v170.origin.x = v72;
    v170.origin.y = v74;
    v170.size.width = v76;
    v170.size.height = v78;
    Width = CGRectGetWidth(v170);
    v171.origin.x = v72;
    v171.origin.y = v74;
    v171.size.width = v76;
    v171.size.height = v78;
    Height = CGRectGetHeight(v171);
    v104 = (CGFloat *)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame];
    *v104 = v72;
    v104[1] = v101;
    v104[2] = Width;
    v104[3] = Height;
    v105 = sub_100025650();
    objc_msgSend(v105, "frame");
    v107 = v106;
    v109 = v108;
    v111 = v110;
    v113 = v112;

    v172.origin.x = v107;
    v172.origin.y = v109;
    v172.size.width = v111;
    v172.size.height = v113;
    MinY = CGRectGetMinY(v172);
    v114 = sub_100025650();
    objc_msgSend(v114, "adjustedContentInset");
    v116 = v115;

    v117 = sub_100025650();
    objc_msgSend(v117, "frame");
    v119 = v118;
    v121 = v120;
    v123 = v122;
    v125 = v124;

    v173.origin.x = v119;
    v173.origin.y = v121;
    v173.size.width = v123;
    v173.size.height = v125;
    MaxY = CGRectGetMaxY(v173);
    v127 = sub_100025650();
    objc_msgSend(v127, "adjustedContentInset");
    v129 = v128;

    v130 = *(double *)&v70[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_collectionViewSpacing];
    v131 = sub_100025650();
    objc_msgSend(v131, "frame");
    v133 = v132;
    v135 = v134;
    v137 = v136;
    v139 = v138;

    v174.origin.x = v133;
    v174.origin.y = v135;
    v174.size.width = v137;
    v174.size.height = v139;
    MinX = CGRectGetMinX(v174);
    v141 = sub_100025650();
    objc_msgSend(v141, "contentSize");
    v143 = v142;

    v144 = objc_msgSend(v70, "view");
    if (v144)
    {
      v145 = v144;
      v146 = v130;
      objc_msgSend(v144, "convertRect:toView:", 0, MinX, MinY + v116, v143, MaxY - v129 + v130 - (MinY + v116));
      v148 = v147;
      v150 = v149;
      v152 = v151;
      v154 = v153;

      v155 = &v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalVisibleScrollRect];
      *v155 = v148;
      v155[1] = v150;
      v155[2] = v152;
      v155[3] = v154;
      *(double *)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_scrollViewAdditionalContentHeight] = v146;
      v156 = objc_msgSend(v70, "view");
      if (v156)
      {
        v157 = v156;
        v158 = objc_msgSend(v156, "window");

        if (v158)
        {
          v159 = objc_msgSend(v158, "snapshotViewAfterScreenUpdates:", 0);

        }
        else
        {
          v159 = 0;
        }
        v160 = *(void **)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_backgroundView];
        *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_backgroundView] = v159;

        objc_msgSend(v47, "setModalPresentationStyle:", 0);
        objc_msgSend(v70, "presentViewController:animated:completion:", v47, 0, 0);

        return;
      }
LABEL_36:
      __break(1u);
      return;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
}

void sub_10002A0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = a3 + 16;
    swift_beginAccess(v10, v19, 0, 0);
    v11 = swift_unknownObjectWeakLoadStrong(v10);
    if (v11)
    {
      v12 = (void *)v11;
      PersistedTranslation.selectedAlternativeIndex.setter(a1);
      sub_100023AB0(*(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session)+ OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v16);
      v13 = v17;
      v14 = v18;
      sub_100023AF4(v16, v17);
      dispatch thunk of TranslationStore.save()(v13, v14);
      sub_100009C08(v16);
      v15 = sub_100023D30();
      sub_1001A52A8(v12);

      v9 = v15;
    }

  }
}

uint64_t sub_10002A1B4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v1 = type metadata accessor for CardCollectionViewCell();
  v2 = swift_dynamicCastClass(v0, v1);
  if (v2)
  {
    v3 = v2;
    v4 = v0;
  }
  else
  {
    v5 = objc_msgSend(v0, "superview");
    if (v5)
    {
      v6 = v5;
      v3 = sub_10002A1B4();

    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_10002A228(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  char *v34;
  id v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  id v48;
  Class isa;
  Class v50;
  id v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = v5;
  v58 = a3;
  v59 = a4;
  v56 = a1;
  v57 = a2;
  v8 = type metadata accessor for Locale(0);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  v9 = __chkstk_darwin(v8);
  v60 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v56 - v11;
  v13 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for IndexPath(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v56 - v21;
  v23 = sub_100025650();
  v24 = objc_msgSend(v23, "indexPathForCell:", a5, v56, v57);

  if (v24)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v25 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v25(v15, v20, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      v25(v22, v15, v16);
      v26 = *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
      v27 = swift_retain(v26);
      v28 = IndexPath.row.getter(v27);
      KeyPath = swift_getKeyPath(&unk_1001E7810);
      v30 = swift_getKeyPath(&unk_1001E7838);
      static Published.subscript.getter(&v63, v26, KeyPath);
      swift_release(v26);
      swift_release(KeyPath);
      swift_release(v30);
      v31 = v63;
      if ((v63 & 0xC000000000000001) == 0)
      {
        if ((v28 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v28 < *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v32 = *(id *)(v63 + 8 * v28 + 32);
          goto LABEL_7;
        }
        __break(1u);
LABEL_15:
        __break(1u);
        return;
      }
      v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v63);
LABEL_7:
      v33 = v32;
      swift_bridgeObjectRelease(v31);
      v34 = sub_100023D30();
      v35 = sub_1001AD668();

      v36 = objc_msgSend(v35, "text");
      if (v36)
      {
        v37 = String._bridgeToObjectiveC()();
        v38 = objc_msgSend(v36, "stringByReplacingCharactersInRange:withString:", v58, v59, v37);

        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v58 = v40;
        v59 = v39;

        v57 = *(id *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_conversation);
        v41 = objc_msgSend(v33, "identifier");
        v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        v43 = v42;

        v45 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v44);
        v46 = v33;
        v47 = v60;
        dispatch thunk of PersistedTranslation.targetLocale.getter(v45);
        v48 = objc_allocWithZone((Class)_LTLocalePair);
        isa = Locale._bridgeToObjectiveC()().super.isa;
        v50 = Locale._bridgeToObjectiveC()().super.isa;
        v51 = objc_msgSend(v48, "initWithSourceLocale:targetLocale:", isa, v50);

        v52 = v62;
        v53 = *(void (**)(char *, uint64_t))(v61 + 8);
        v53(v47, v62);
        v53(v12, v52);
        v54 = v57;
        v55 = v58;
        sub_100075F60(v56, v43, v59, v58, v51);
        swift_bridgeObjectRelease(v55);

        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
        return;
      }
      goto LABEL_15;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  }
  sub_10000A020((uint64_t)v15, (uint64_t *)&unk_100290880);
}

uint64_t sub_10002A670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v6 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v6);
  v8 = (char *)&v32[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v32[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32[-1] - v14;
  v16 = sub_100025650();
  v17 = objc_msgSend(v16, "indexPathForCell:", a2);

  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    return sub_10000A020((uint64_t)v8, (uint64_t *)&unk_100290880);
  }
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v18(v8, v13, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_10000A020((uint64_t)v8, (uint64_t *)&unk_100290880);
  v18(v15, v8, v9);
  v19 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
  v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
  v21 = swift_retain(v20);
  v22 = IndexPath.row.getter(v21);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v24 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(v32, v20, KeyPath);
  swift_release(v20);
  swift_release(KeyPath);
  result = swift_release(v24);
  v26 = v32[0];
  if ((v32[0] & 0xC000000000000001) != 0)
  {
    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v32[0]);
    goto LABEL_7;
  }
  if ((v22 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v22 < *(_QWORD *)((v32[0] & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v27 = *(id *)(v32[0] + 8 * v22 + 32);
LABEL_7:
    v28 = v27;
    swift_bridgeObjectRelease(v26);
    PersistedTranslation.selectedAlternativeIndex.setter(a1);
    sub_100023AB0(*(_QWORD *)(v3 + v19) + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v32);
    v29 = v33;
    v30 = v34;
    sub_100023AF4(v32, v33);
    dispatch thunk of TranslationStore.save()(v29, v30);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    return sub_100009C08(v32);
  }
  __break(1u);
  return result;
}

void sub_10002A928(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Strong;
  void *v41;
  id v42;
  void *v43;
  Class isa;
  Class v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v49 - v7;
  v9 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IndexPath(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v49 - v17;
  v19 = objc_msgSend(a1, "view");
  if (v19)
  {
    v53 = v3;
    v55 = v19;
    v20 = objc_opt_self(UITextView);
    v21 = swift_dynamicCastObjCClass(v55, v20);
    if (!v21 || (v22 = (void *)v21, (v23 = sub_10002A1B4()) == 0))
    {

      return;
    }
    v50 = v2;
    v51 = v8;
    v24 = (void *)v23;
    v25 = sub_100025650();
    v52 = v24;
    v26 = objc_msgSend(v25, "indexPathForCell:", v24);

    if (v26)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v27 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v27(v11, v16, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        v27(v18, v11, v12);
        v28 = *(_QWORD *)(v54 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
        v29 = swift_retain(v28);
        v30 = IndexPath.item.getter(v29);
        KeyPath = swift_getKeyPath(&unk_1001E7810);
        v32 = swift_getKeyPath(&unk_1001E7838);
        static Published.subscript.getter(v56, v28, KeyPath);
        swift_release(v28);
        swift_release(KeyPath);
        swift_release(v32);
        v33 = v56[0];
        if ((v56[0] & 0xC000000000000001) == 0)
        {
          v34 = v51;
          if ((v30 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v30 < *(_QWORD *)((v56[0] & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v35 = *(id *)(v56[0] + 8 * v30 + 32);
LABEL_10:
            swift_bridgeObjectRelease(v33);
            dispatch thunk of PersistedTranslation.speechResult.getter(v56);
            v37 = v57;
            v36 = v58;
            sub_100023AF4(v56, v57);
            dispatch thunk of AnnotatedResult.locale.getter(v37, *(_QWORD *)(v36 + 16));
            sub_100009C08(v56);
            dispatch thunk of PersistedTranslation.translationResult.getter(v56);
            v38 = v57;
            v39 = v58;
            sub_100023AF4(v56, v57);
            dispatch thunk of TranslationResult.locale.getter(v38, v39);
            sub_100009C08(v56);
            Strong = swift_unknownObjectWeakLoadStrong(v54 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_newTranslationManager);
            if (!Strong)
            {

              goto LABEL_17;
            }
            v41 = (void *)Strong;
            v42 = objc_msgSend(v22, "text");
            if (v42)
            {
              v43 = v42;
              isa = Locale._bridgeToObjectiveC()().super.isa;
              v45 = Locale._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v41, "startTranslationWith:sourceLocale:targetLocale:", v43, isa, v45);

              swift_unknownObjectRelease(v41);
LABEL_17:
              v46 = *(void (**)(char *, uint64_t))(v53 + 8);
              v47 = v6;
              v48 = v50;
              v46(v47, v50);
              v46(v34, v48);
              (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
              return;
            }
LABEL_22:
            __break(1u);
            return;
          }
          __break(1u);
          goto LABEL_22;
        }
        v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v56[0]);
        v34 = v51;
        goto LABEL_10;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    }

    sub_10000A020((uint64_t)v11, (uint64_t *)&unk_100290880);
  }
}

void sub_10002ADC8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  Class isa;
  Class v34;
  id v35;
  void (*v36)(char *, uint64_t);
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CGFloat v47;
  CGFloat v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v53 = a1;
  v4 = type metadata accessor for Locale(0);
  v54 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v52 - v8;
  v10 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IndexPath(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v55 = v2;
  v56 = (char *)&v52 - v18;
  v19 = sub_100025650();
  v20 = objc_msgSend(v19, "indexPathForCell:", a2);

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_13;
  }
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v21(v12, v17, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
LABEL_13:
    sub_10000A020((uint64_t)v12, (uint64_t *)&unk_100290880);
    return;
  }
  v21(v56, v12, v13);
  v22 = *(_QWORD *)(v55 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
  v23 = swift_retain(v22);
  v24 = IndexPath.row.getter(v23);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v26 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(&v57, v22, KeyPath);
  swift_release(v22);
  swift_release(KeyPath);
  swift_release(v26);
  v27 = v57;
  if ((v57 & 0xC000000000000001) != 0)
  {
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v57);
LABEL_7:
    v29 = v28;
    swift_bridgeObjectRelease(v27);
    v30 = *(id *)(v55 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_dictionaryManager);
    v31 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v30);
    dispatch thunk of PersistedTranslation.targetLocale.getter(v31);
    v32 = objc_allocWithZone((Class)_LTLocalePair);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v34 = Locale._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v32, "initWithSourceLocale:targetLocale:", isa, v34);

    v36 = *(void (**)(char *, uint64_t))(v54 + 8);
    v36(v7, v4);
    v36(v9, v4);
    LOBYTE(v36) = sub_1000A3E3C(v35);

    if ((v36 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v56, v13);

      return;
    }
    v37 = v53;
    v38 = objc_msgSend(v53, "view");
    if (v38)
    {
      v39 = v38;
      v40 = type metadata accessor for HighlightTextView();
      v41 = swift_dynamicCastClass(v39, v40);
      if (v41)
      {
        v42 = v41;
        objc_msgSend(v37, "locationInView:", v41);
        v44 = v43;
        v46 = v45;
        objc_msgSend(v37, "locationInView:", v42);
        v49 = HighlightTextView.getWordAtPoint(_:)(v47, v48);
        if (v50)
        {
          v51 = v50;
          sub_1000297B8((unint64_t)v56, v49, v50, v44, v46, 0, 0);

          swift_bridgeObjectRelease(v51);
LABEL_17:
          (*(void (**)(char *, uint64_t))(v14 + 8))(v56, v13);
          return;
        }
      }

    }
    goto LABEL_17;
  }
  if ((v24 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v24 < *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v28 = *(id *)(v57 + 8 * v24 + 32);
    goto LABEL_7;
  }
  __break(1u);
}

void sub_10002B218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa;
  id v7;
  id v8;

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a5, "deleteCell:", isa);

  v7 = sub_1000252E8();
  v8 = sub_1000E5888();

  objc_msgSend(v8, "resetSwipedItemAnimated:completion:", 1, 0);
}

void sub_10002B294(int a1, int a2, int a3, int a4, id a5, uint64_t a6)
{
  id v6;
  id v7;

  objc_msgSend(a5, "favorite:", a6);
  v6 = sub_1000252E8();
  v7 = sub_1000E5888();

  objc_msgSend(v7, "resetSwipedItemAnimated:completion:", 1, 0);
}

void sub_10002B2FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v4);
  v6 = (char *)&v31[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31[-1] - v12;
  v14 = sub_100025650();
  v15 = objc_msgSend(v14, "indexPathForCell:", a1);

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_10;
  }
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_10:
    sub_10000A020((uint64_t)v6, (uint64_t *)&unk_100290880);
    return;
  }
  v16(v13, v6, v7);
  v17 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
  v19 = swift_retain(v18);
  v20 = IndexPath.row.getter(v19);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v22 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(v31, v18, KeyPath);
  swift_release(v18);
  swift_release(KeyPath);
  swift_release(v22);
  v23 = v31[0];
  if ((v31[0] & 0xC000000000000001) == 0)
  {
    if ((v20 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v20 < *(_QWORD *)((v31[0] & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v24 = *(id *)(v31[0] + 8 * v20 + 32);
      goto LABEL_7;
    }
    __break(1u);
    return;
  }
  v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v31[0]);
LABEL_7:
  v25 = v24;
  swift_bridgeObjectRelease(v23);
  sub_100023AB0(*(_QWORD *)(v2 + v17) + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v31);
  v26 = v32;
  v27 = v33;
  sub_100023AF4(v31, v32);
  dispatch thunk of TranslationStore.toggleFavoriteBackground(_:)(v25, v26, v27);
  sub_100009C08(v31);
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);

  }
  else
  {
    v28 = sub_100023D30();
    v29 = sub_1001AE4F0();

    objc_msgSend(v29, "setHidden:", (dispatch thunk of PersistedTranslation.isFavorite.getter() & 1) == 0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
}

void sub_10002B664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  id v22;
  uint64_t v23;

  v2 = v1;
  v4 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
  v6 = swift_retain(v5);
  v7 = IndexPath.row.getter(v6);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v9 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(&v23, v5, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = v23;
  if ((v23 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v23);
    goto LABEL_5;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v23 + 8 * v7 + 32);
LABEL_5:
    v12 = v11;
    swift_bridgeObjectRelease(v10);
    v13 = *(_QWORD *)(v2 + v4);
    swift_retain(v13);
    sub_1001A35B0(v12);
    swift_release(v13);
    v14 = sub_100025650();
    v15 = sub_100006DF4((uint64_t *)&unk_10028C070);
    v16 = type metadata accessor for IndexPath(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned __int8 *)(v17 + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject(v15, v19 + *(_QWORD *)(v17 + 72), v18 | 7);
    *(_OWORD *)(v20 + 16) = xmmword_1001E64F0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v20 + v19, a1, v16);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v14, "deleteItemsAtIndexPaths:", isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

    v22 = sub_100025650();
    objc_msgSend(v22, "performBatchUpdates:completion:", 0, 0);

    return;
  }
  __break(1u);
}

uint64_t sub_10002B8E4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v5 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10002B964(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v5 = swift_getKeyPath(&unk_1001E7838);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10002B9E0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002BA04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10002BA38(uint64_t a1)
{
  uint64_t *v1;

  sub_10002A0AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10002BA44(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_10002BA54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[4];

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v34 - v12;
  sub_10000B074(a1, (uint64_t)v36, (uint64_t *)&unk_10028C0B0);
  if (!v36[3])
  {
    v32 = (uint64_t *)&unk_10028C0B0;
    v33 = (char *)v36;
LABEL_14:
    sub_10000A020((uint64_t)v33, v32);
    return;
  }
  v14 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
  if ((swift_dynamicCast(&v35, v36, (char *)&type metadata for Any + 8, v14, 6) & 1) == 0)
    return;
  v15 = v35;
  v16 = (void *)sub_10002A1B4();

  if (!v16)
    return;
  v17 = sub_100025650();
  v18 = objc_msgSend(v17, "indexPathForCell:", v16);

  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_13;
  }
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v19(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_13:

    v32 = (uint64_t *)&unk_100290880;
    v33 = v6;
    goto LABEL_14;
  }
  v19(v13, v6, v7);
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
  v21 = swift_retain(v20);
  v22 = IndexPath.row.getter(v21);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v24 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(v36, v20, KeyPath);
  swift_release(v20);
  swift_release(KeyPath);
  swift_release(v24);
  v25 = v36[0];
  if ((v36[0] & 0xC000000000000001) != 0)
  {
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v36[0]);
    goto LABEL_10;
  }
  if ((v22 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v22 < *(_QWORD *)((v36[0] & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v26 = *(id *)(v36[0] + 8 * v22 + 32);
LABEL_10:
    v27 = v26;
    swift_bridgeObjectRelease(v25);
    v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_context);
    v29 = swift_getKeyPath(&unk_1001E78E8);
    v30 = swift_getKeyPath(&unk_1001E7910);
    v36[0] = v27;
    swift_retain(v28);
    v31 = v27;
    static Published.subscript.setter(v36, v28, v29, v30);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return;
  }
  __break(1u);
}

void sub_10002BD94(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  _BYTE v10[24];
  uint64_t v11;

  v2 = v1;
  sub_10000B074(a1, (uint64_t)v10, (uint64_t *)&unk_10028C0B0);
  if (!v11)
    goto LABEL_8;
  v4 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
  if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
  {
    v5 = v9;
    v6 = (void *)sub_10002A1B4();

    if (v6)
    {
      sub_10000B074(a1, (uint64_t)v10, (uint64_t *)&unk_10028C0B0);
      if (v11)
      {
        v7 = type metadata accessor for ActionButton();
        if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
        {
          v8 = v9;
          objc_msgSend(v8, "setSelected:", objc_msgSend(v8, "isSelected") ^ 1);

          objc_msgSend(v6, "endEditing:", 1);
          objc_msgSend(v2, "favorite:", v6);

        }
        else
        {

        }
        return;
      }

LABEL_8:
      sub_10000A020((uint64_t)v10, (uint64_t *)&unk_10028C0B0);
    }
  }
}

void sub_10002BEF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _QWORD v46[4];

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v42 - v12;
  sub_10000B074(a1, (uint64_t)v46, (uint64_t *)&unk_10028C0B0);
  if (!v46[3])
  {
    v40 = (uint64_t *)&unk_10028C0B0;
    v41 = (char *)v46;
    goto LABEL_15;
  }
  v14 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
  if ((swift_dynamicCast(&v45, v46, (char *)&type metadata for Any + 8, v14, 6) & 1) != 0)
  {
    v15 = (void *)v45;
    v16 = (void *)sub_10002A1B4();

    if (v16)
    {
      v17 = sub_100025650();
      v18 = objc_msgSend(v17, "indexPathForCell:", v16);

      if (v18)
      {
        static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v18);

        v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v19(v6, v11, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
        {
          v19(v13, v6, v7);
          v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
          v21 = swift_retain(v20);
          v22 = IndexPath.row.getter(v21);
          KeyPath = swift_getKeyPath(&unk_1001E7810);
          v24 = swift_getKeyPath(&unk_1001E7838);
          static Published.subscript.getter(v46, v20, KeyPath);
          swift_release(v20);
          swift_release(KeyPath);
          swift_release(v24);
          v25 = v46[0];
          if ((v46[0] & 0xC000000000000001) == 0)
          {
            if ((v22 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v22 < *(_QWORD *)((v46[0] & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v26 = *(id *)(v46[0] + 8 * v22 + 32);
              goto LABEL_10;
            }
            __break(1u);
            return;
          }
          v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v46[0]);
LABEL_10:
          v27 = v26;
          v28 = swift_bridgeObjectRelease(v25);
          v44 = v27;
          v29 = dispatch thunk of PersistedTranslation.displayText.getter(v28);
          v31 = v30;
          v32 = swift_allocObject(&unk_100264EB0, 48, 7);
          *(_OWORD *)(v32 + 32) = 0u;
          *(_OWORD *)(v32 + 16) = 0u;
          v46[0] = v29;
          v46[1] = v31;
          v45 = 15;
          v33 = (_QWORD *)swift_allocObject(&unk_100264ED8, 40, 7);
          v33[2] = v32;
          v33[3] = v29;
          v33[4] = v31;
          swift_retain(v32);
          swift_bridgeObjectRetain(v31);
          v43 = sub_100006DF4((uint64_t *)&unk_10028C0C0);
          v42 = sub_10000B030();
          v34 = sub_100012334((unint64_t *)&unk_10028C0D0, (uint64_t *)&unk_10028C0C0, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
          StringProtocol.enumerateSubstrings<A>(in:options:_:)(&v45, 3, sub_10002D5FC, v33, &type metadata for String, v43, v42, v34);
          swift_release(v33);
          swift_beginAccess(v32 + 16, v46, 0, 0);
          v35 = *(_QWORD *)(v32 + 16);
          v43 = *(_QWORD *)(v32 + 24);
          v36 = *(_QWORD *)(v32 + 40);
          swift_bridgeObjectRetain(v36);
          swift_bridgeObjectRelease(v31);
          swift_release(v32);
          if (v36)
          {
            v37 = static String._fromSubstring(_:)(v35);
            v39 = v38;
            swift_bridgeObjectRelease(v36);
            sub_1000297B8((unint64_t)v13, v37, v39, 0, 0, 1, 1);

            swift_bridgeObjectRelease(v39);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);

          }
          return;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
      }

      v40 = (uint64_t *)&unk_100290880;
      v41 = v6;
LABEL_15:
      sub_10000A020((uint64_t)v41, v40);
    }
  }
}

void sub_10002C370(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD v35[4];

  v3 = v2;
  v6 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  sub_10000B074(a2, (uint64_t)v35, (uint64_t *)&unk_10028C0B0);
  if (v35[3])
  {
    v16 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
    if ((swift_dynamicCast(&v34, v35, (char *)&type metadata for Any + 8, v16, 6) & 1) != 0)
    {
      v17 = v34;
      v18 = (void *)sub_10002A1B4();

      if (v18)
      {
        v19 = sub_100025650();
        v20 = objc_msgSend(v19, "indexPathForCell:", v18);

        if (v20)
        {
          static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v20);

          v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v21(v8, v13, v9);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
          {
            v21(v15, v8, v9);
            v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session);
            v23 = swift_retain(v22);
            v24 = IndexPath.row.getter(v23);
            KeyPath = swift_getKeyPath(&unk_1001E7810);
            v26 = swift_getKeyPath(&unk_1001E7838);
            static Published.subscript.getter(v35, v22, KeyPath);
            swift_release(v22);
            swift_release(KeyPath);
            swift_release(v26);
            v27 = v35[0];
            if ((v35[0] & 0xC000000000000001) == 0)
            {
              if ((v24 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v24 < *(_QWORD *)((v35[0] & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v28 = *(id *)(v35[0] + 8 * v24 + 32);
                goto LABEL_10;
              }
              __break(1u);
              JUMPOUT(0x10002C744);
            }
            specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v35[0]);
LABEL_10:
            swift_bridgeObjectRelease(v27);
            objc_msgSend(v18, "endEditing:", 1);
            v29 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator18CardListController_context);
            v30 = swift_getKeyPath(&unk_1001E78A0);
            v31 = swift_getKeyPath(&unk_1001E78C8);
            v32 = swift_retain(v29);
            static Published.subscript.getter(v35, v32, v30);
            swift_release(v29);
            swift_release(v30);
            swift_release(v31);
            __asm { BR              X10 }
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
        }

        sub_10000A020((uint64_t)v8, (uint64_t *)&unk_100290880);
      }
    }
  }
  else
  {
    sub_10000A020((uint64_t)v35, (uint64_t *)&unk_10028C0B0);
  }
}

void sub_10002C758()
{
  _BYTE *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator18CardListController_dictionaryManager;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DictionaryManager()), "init");
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v2 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v2 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_subscriptions] = v2;
  v3 = &v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_currentExpandedIndexPath];
  v4 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_newTranslationManager], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_collectionViewSpacing] = 0x4020000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController____lazy_storage___layout] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController____lazy_storage___collectionView] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_initialAppearance] = 1;
  *(int64x2_t *)&v0[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_minSourceTextSize] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/CardListController.swift", 42, 2, 80, 0);
  __break(1u);
}

uint64_t sub_10002C8B4(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  void *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSString v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  NSString v38;
  void *v39;
  id v40;
  uint64_t v41;
  char *v42;
  id v43;
  id v44;
  void *v45;
  NSString v46;
  void *v47;
  id v48;
  NSString v49;
  id v50;
  NSString v51;
  id v52;
  uint64_t v53;
  void *v54;
  NSString v55;
  void *v56;
  id v57;
  NSString v58;
  id v59;
  NSString v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  id v66;
  id v67;
  Class v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  id v73;
  Class v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  unint64_t v81;
  id v82;
  void *v83;
  __n128 v84;
  char v85;
  uint64_t v86;
  void *object;
  id countAndFlagsBits;
  char *v89;
  id v90;
  void *v91;
  __int128 v92;
  uint64_t v93;
  unint64_t aBlock;
  uint64_t v95;
  void (*v96)(uint64_t, void *, void *, void *);
  void *v97;
  void *v98;
  uint64_t v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;

  v2 = v1;
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100025650();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v7, "cellForItemAtIndexPath:", isa);

  if (!v9)
    return 0;
  v10 = type metadata accessor for CardCollectionViewCell();
  v11 = swift_dynamicCastClass(v9, v10);
  if (!v11 || *(_BYTE *)(v11 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded) == 1)
  {

    return 0;
  }
  v89 = (char *)v11;
  v14 = a1;
  v93 = a1;
  v15 = (void *)objc_opt_self(NSBundle);
  v16 = objc_msgSend(v15, "mainBundle");
  v100._countAndFlagsBits = 0xD000000000000029;
  v100._object = (void *)0x80000001001F9360;
  v17._countAndFlagsBits = 0x455449524F564146;
  v17._object = (void *)0xE800000000000000;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v100);
  object = v19._object;
  countAndFlagsBits = (id)v19._countAndFlagsBits;

  v20 = objc_msgSend(v15, "mainBundle");
  v101._countAndFlagsBits = 0xD00000000000002BLL;
  v101._object = (void *)0x80000001001F9390;
  v21._countAndFlagsBits = 0x49524F5641464E55;
  v21._object = (void *)0xEA00000000004554;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v101);
  v91 = v23._object;
  *(_QWORD *)&v92 = v23._countAndFlagsBits;

  v24 = objc_msgSend(v15, "mainBundle");
  v102._countAndFlagsBits = 0xD000000000000027;
  v102._object = (void *)0x80000001001F93C0;
  v25._countAndFlagsBits = 0x4554454C4544;
  v25._object = (void *)0xE600000000000000;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v102)._object;

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v4);
  v28 = *(unsigned __int8 *)(v5 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = swift_allocObject(&unk_100264A78, v29 + v6, v28 | 7);
  *(_QWORD *)(v30 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v30 + v29, (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v31 = v2;
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v98 = sub_10002D25C;
  v99 = v30;
  aBlock = (unint64_t)_NSConcreteStackBlock;
  v95 = 1107296256;
  v96 = sub_1001BA88C;
  v97 = &unk_100264A90;
  v33 = _Block_copy(&aBlock);
  v34 = (void *)objc_opt_self(UIContextualAction);
  v35 = objc_msgSend(v34, "contextualActionWithStyle:title:handler:", 1, v32, v33);

  _Block_release(v33);
  swift_release(v99);
  v36 = (void *)objc_opt_self(UIColor);
  v37 = objc_msgSend(v36, "systemRedColor");
  v90 = v35;
  objc_msgSend(v35, "setBackgroundColor:", v37);

  v38 = String._bridgeToObjectiveC()();
  v39 = (void *)objc_opt_self(UIImage);
  v40 = objc_msgSend(v39, "systemImageNamed:", v38);

  objc_msgSend(v35, "setImage:", v40);
  v41 = swift_allocObject(&unk_100264AC8, 32, 7);
  v42 = v89;
  *(_QWORD *)(v41 + 16) = v31;
  *(_QWORD *)(v41 + 24) = v42;
  v43 = v31;
  v44 = v9;
  v45 = object;
  v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45);
  v98 = sub_10002D308;
  v99 = v41;
  aBlock = (unint64_t)_NSConcreteStackBlock;
  v95 = 1107296256;
  v96 = sub_1001BA88C;
  v97 = &unk_100264AE0;
  v47 = _Block_copy(&aBlock);
  v48 = objc_msgSend(v34, "contextualActionWithStyle:title:handler:", 0, v46, v47);

  _Block_release(v47);
  swift_release(v99);
  v49 = String._bridgeToObjectiveC()();
  v50 = objc_msgSend(v36, "colorNamed:", v49);

  objc_msgSend(v48, "setBackgroundColor:", v50);
  v51 = String._bridgeToObjectiveC()();
  v52 = objc_msgSend(v39, "systemImageNamed:", v51);

  objc_msgSend(v48, "setImage:", v52);
  v53 = swift_allocObject(&unk_100264B18, 32, 7);
  *(_QWORD *)(v53 + 16) = v43;
  *(_QWORD *)(v53 + 24) = v42;
  v89 = (char *)v43;
  countAndFlagsBits = v44;
  v54 = v91;
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v54);
  v98 = sub_10002D630;
  v99 = v53;
  aBlock = (unint64_t)_NSConcreteStackBlock;
  v95 = 1107296256;
  v96 = sub_1001BA88C;
  v97 = &unk_100264B30;
  v56 = _Block_copy(&aBlock);
  v57 = objc_msgSend(v34, "contextualActionWithStyle:title:handler:", 0, v55, v56);

  _Block_release(v56);
  swift_release(v99);
  v58 = String._bridgeToObjectiveC()();
  v59 = objc_msgSend(v36, "colorNamed:", v58);

  objc_msgSend(v57, "setBackgroundColor:", v59);
  v60 = String._bridgeToObjectiveC()();
  v61 = objc_msgSend(v39, "systemImageNamed:", v60);

  objc_msgSend(v57, "setImage:", v61);
  v62 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v63 = swift_allocObject(v62, 48, 7);
  v92 = xmmword_1001E76E0;
  *(_OWORD *)(v63 + 16) = xmmword_1001E76E0;
  v64 = v90;
  *(_QWORD *)(v63 + 32) = v90;
  *(_QWORD *)(v63 + 40) = v48;
  aBlock = v63;
  specialized Array._endMutation()(v63);
  v65 = aBlock;
  sub_10000A05C(0, &qword_100290890, UIContextualAction_ptr);
  v66 = v64;
  v67 = v48;
  v68 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v65);
  v69 = (void *)objc_opt_self(UISwipeActionsConfiguration);
  v12 = objc_msgSend(v69, "configurationWithActions:", v68);

  v70 = swift_allocObject(v62, 48, 7);
  *(_OWORD *)(v70 + 16) = v92;
  *(_QWORD *)(v70 + 32) = v66;
  *(_QWORD *)(v70 + 40) = v57;
  aBlock = v70;
  specialized Array._endMutation()(v70);
  v71 = aBlock;
  v72 = v66;
  v73 = v57;
  v74 = Array._bridgeToObjectiveC()().super.isa;
  v75 = objc_msgSend(v69, "configurationWithActions:", v74, swift_bridgeObjectRelease(v71).n128_f64[0]);

  v76 = *(_QWORD *)&v89[OBJC_IVAR____TtC17SequoiaTranslator18CardListController_session];
  swift_retain(v76);
  v78 = IndexPath.item.getter(v77);
  KeyPath = swift_getKeyPath(&unk_1001E7810);
  v80 = swift_getKeyPath(&unk_1001E7838);
  static Published.subscript.getter(&aBlock, v76, KeyPath);
  swift_release(v76);
  swift_release(KeyPath);
  result = swift_release(v80);
  v81 = aBlock;
  if ((aBlock & 0xC000000000000001) != 0)
  {
    v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, aBlock);
LABEL_11:
    v83 = v82;
    v84 = swift_bridgeObjectRelease(v81);
    v85 = dispatch thunk of PersistedTranslation.isFavorite.getter(v84);

    if ((v85 & 1) != 0)
    {

      return (uint64_t)v75;
    }
    else
    {

    }
    return (uint64_t)v12;
  }
  if ((v78 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v78 < *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v82 = *(id *)(aBlock + 8 * v78 + 32);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002D1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002D25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for IndexPath(0);
  sub_10002B218(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_10002D2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002D2D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002D2DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10002D308(int a1, int a2, int a3, int a4)
{
  uint64_t v4;

  sub_10002B294(a1, a2, a3, a4, *(id *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_10002D328(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E6E00(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10002D344()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002D36C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10002D37C()
{
  id v0;

  v0 = sub_100025650();
  objc_msgSend(v0, "performBatchUpdates:completion:", 0, 0);

}

uint64_t sub_10002D3C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10002D3D0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "layoutIfNeeded");
}

void sub_10002D3E0()
{
  id v0;

  v0 = sub_100025650();
  objc_msgSend(v0, "reloadData");

}

uint64_t sub_10002D41C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002D42C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10002D450()
{
  uint64_t v0;
  double v1;
  double v2;
  id v3;

  v1 = *(double *)(v0 + 24);
  v2 = *(double *)(v0 + 32);
  v3 = sub_100025650();
  objc_msgSend(v3, "setContentOffset:", v1, v2);

}

uint64_t sub_10002D4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002D520()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath(0) - 8) + 80);
  sub_100026DD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

void sub_10002D550()
{
  uint64_t v0;

  sub_1000A40C4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_10002D558(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1000255A4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10002D560(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100006DF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002D5AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002D5D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002D5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;

  return sub_1001832EC(a1, a2, a3, a4, a5, a6, a7, *(_QWORD **)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32));
}

id sub_10002D73C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardRevealController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardRevealController()
{
  return objc_opt_self(_TtC17SequoiaTranslator20CardRevealController);
}

id sub_10002D78C(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  objc_super v19;

  v9 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions;
  v10 = objc_allocWithZone((Class)type metadata accessor for CardActions());
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_container;
  *(_QWORD *)&v11[v12] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = &v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate];
  *((_QWORD *)v13 + 4) = 0;
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTopAnchor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackLeadingAnchor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTrailingAnchor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionLeadingAnchor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionTrailingAnchor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionBottomAnchor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_separationConstraint] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_containerBottom] = 0;
  v11[OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded] = 0;

  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for CardView();
  v14 = objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
  v15 = (void *)objc_opt_self(UIColor);
  v16 = v14;
  v17 = objc_msgSend(v15, "secondarySystemGroupedBackgroundColor");
  objc_msgSend(v16, "setBackgroundColor:", v17);

  objc_msgSend(v16, "setClipsToBounds:", 1);
  sub_10002D9C0();
  sub_10002DA6C();

  return v16;
}

id sub_10002D9C0()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_container;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_container], "setAxis:", 1);
  objc_msgSend(*(id *)&v0[v1], "setDistribution:", 0);
  objc_msgSend(*(id *)&v0[v1], "setAlignment:", 0);
  objc_msgSend(*(id *)&v0[v1], "setLayoutMarginsRelativeArrangement:", 1);
  objc_msgSend(*(id *)&v0[v1], "setInsetsLayoutMarginsFromSafeArea:", 0);
  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[v1]);
  return objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions]);
}

void sub_10002DA6C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  double v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  Class isa;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  int v70;
  int v71;

  v1 = v0;
  v2 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_container;
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_container), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions);
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = objc_msgSend(*(id *)((char *)v1 + v2), "topAnchor");
  v5 = objc_msgSend(v1, "topAnchor");
  v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

  v7 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTopAnchor;
  v8 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTopAnchor);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTopAnchor) = v6;

  v9 = objc_msgSend(*(id *)((char *)v1 + v2), "leadingAnchor");
  v10 = objc_msgSend(v1, "leadingAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:", v10);

  v12 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackLeadingAnchor);
  v67 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackLeadingAnchor;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackLeadingAnchor) = v11;

  v13 = objc_msgSend(v1, "trailingAnchor");
  v14 = objc_msgSend(*(id *)((char *)v1 + v2), "trailingAnchor");
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

  v16 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTrailingAnchor);
  v65 = (char *)OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTrailingAnchor;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTrailingAnchor) = v15;

  v17 = objc_msgSend(v3, "leadingAnchor");
  v18 = objc_msgSend(v1, "leadingAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  v20 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionLeadingAnchor;
  v21 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionLeadingAnchor);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionLeadingAnchor) = v19;

  v22 = objc_msgSend(v3, "trailingAnchor");
  v23 = objc_msgSend(v1, "trailingAnchor");
  v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

  v25 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionTrailingAnchor);
  v64 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionTrailingAnchor;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionTrailingAnchor) = v24;

  v26 = objc_msgSend(v3, "bottomAnchor");
  v27 = objc_msgSend(v1, "bottomAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

  v29 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionBottomAnchor;
  v30 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionBottomAnchor);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionBottomAnchor) = v28;

  v31 = objc_msgSend(v1, "bottomAnchor");
  v32 = objc_msgSend(*(id *)((char *)v1 + v2), "bottomAnchor");
  v33 = objc_msgSend(v31, "constraintGreaterThanOrEqualToAnchor:constant:", v32, 20.0);

  v34 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_containerBottom;
  v35 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_containerBottom);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_containerBottom) = v33;

  v37 = *(void **)((char *)v1 + v34);
  if (v37)
  {
    LODWORD(v36) = 1132068864;
    objc_msgSend(v37, "setPriority:", v36);
  }
  v38 = objc_msgSend(*(id *)((char *)v1 + v2), "heightAnchor");
  v39 = objc_msgSend(v38, "constraintLessThanOrEqualToConstant:", 0.0);

  type metadata accessor for UILayoutPriority(0);
  v41 = v40;
  v70 = 1065353216;
  v71 = 1132068864;
  v42 = sub_10002E280();
  static _UIKitNumericRawRepresentable.- infix(_:_:)(&v69, &v71, &v70, v41, v42);
  LODWORD(v43) = v69;
  objc_msgSend(v39, "setPriority:", v43);
  v44 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v45 = swift_allocObject(v44, 96, 7);
  *(_OWORD *)(v45 + 16) = xmmword_1001E7950;
  v46 = *(void **)((char *)v1 + v7);
  if (!v46)
  {
    __break(1u);
    goto LABEL_12;
  }
  v47 = v45;
  *(_QWORD *)(v45 + 32) = v46;
  v48 = *(void **)((char *)v1 + v67);
  if (!v48)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v45 + 40) = v48;
  v49 = *(void **)&v65[(_QWORD)v1];
  if (!v49)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(v45 + 48) = v49;
  v50 = *(void **)((char *)v1 + v34);
  if (!v50)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v45 + 56) = v50;
  *(_QWORD *)(v45 + 64) = v39;
  v51 = *(void **)((char *)v1 + v20);
  if (!v51)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v68 = v39;
  *(_QWORD *)(v45 + 72) = v51;
  v52 = *(void **)((char *)v1 + v64);
  if (!v52)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)(v45 + 80) = v52;
  v53 = *(void **)((char *)v1 + v29);
  if (v53)
  {
    v66 = (id)objc_opt_self(NSLayoutConstraint);
    *(_QWORD *)(v47 + 88) = v53;
    v69 = v47;
    specialized Array._endMutation()(v66);
    v54 = v69;
    sub_100025254();
    v55 = v46;
    v56 = v48;
    v57 = v49;
    v58 = v50;
    v59 = v68;
    v60 = v51;
    v61 = v52;
    v62 = v53;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v66, "activateConstraints:", isa, swift_bridgeObjectRelease(v54).n128_f64[0]);

    (*(void (**)(void))((swift_isaMask & *v1) + 0x1E0))();
    return;
  }
LABEL_17:
  __break(1u);
}

uint64_t sub_10002DFD4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded);
}

id sub_10002DFE4()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  double v4;
  void *v5;
  char v6;
  double v7;
  void *v8;
  char v9;
  double v10;
  void *v11;
  char v12;
  double v13;
  void *v14;
  char v15;
  double v16;

  v1 = objc_msgSend(v0, "traitCollection");
  v2 = objc_msgSend(v1, "horizontalSizeClass");

  if (v2 == (id)1)
    v4 = 16.0;
  else
    v4 = 32.0;
  v5 = *(void **)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTopAnchor);
  if (v5)
  {
    v6 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1C8))();
    v7 = 32.0;
    if ((v6 & 1) == 0)
      v7 = 16.0;
    v3 = objc_msgSend(v5, "setConstant:", v7);
  }
  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackLeadingAnchor);
  if (v8)
  {
    v9 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x1C8))(v3);
    v10 = 32.0;
    if ((v9 & 1) == 0)
      v10 = v4;
    v3 = objc_msgSend(v8, "setConstant:", v10);
  }
  v11 = *(void **)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTrailingAnchor);
  if (v11)
  {
    v12 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x1C8))(v3);
    v13 = 32.0;
    if ((v12 & 1) == 0)
      v13 = v4;
    v3 = objc_msgSend(v11, "setConstant:", v13);
  }
  v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_containerBottom);
  if (v14)
  {
    v15 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x1C8))(v3);
    v16 = 0.0;
    if ((v15 & 1) != 0)
      v16 = 20.0;
    objc_msgSend(v14, "setConstant:", v16);
  }
  return objc_msgSend(v0, "setNeedsLayout");
}

id sub_10002E168()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardView()
{
  return objc_opt_self(_TtC17SequoiaTranslator8CardView);
}

unint64_t sub_10002E280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C218;
  if (!qword_10028C218)
  {
    type metadata accessor for UILayoutPriority(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UILayoutPriority, v1);
    atomic_store(result, (unint64_t *)&qword_10028C218);
  }
  return result;
}

void sub_10002E2C8()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CardActions()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_container;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = &v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate];
  *((_QWORD *)v3 + 4) = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTopAnchor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackLeadingAnchor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_stackTrailingAnchor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionLeadingAnchor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionTrailingAnchor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actionBottomAnchor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_separationConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_containerBottom] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/CardView.swift", 32, 2, 62, 0);
  __break(1u);
}

uint64_t sub_10002E414(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4((uint64_t *)&unk_10028BEB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10002E454()
{
  qword_1002AA0A8 = 0x4014000000000000;
}

uint64_t getEnumTagSinglePayload for ChatBubbleShape(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChatBubbleShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChatBubbleShape()
{
  return &type metadata for ChatBubbleShape;
}

unint64_t sub_10002E50C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C220;
  if (!qword_10028C220)
  {
    v1 = sub_1000070BC(&qword_10028C228);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C220);
  }
  return result;
}

double sub_10002E558@<D0>(char a1@<W0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>)
{
  double MinX;
  double v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat MinY;
  CGFloat Width;
  CGFloat v20;
  CGFloat v21;
  CGFloat Height;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  double MaxX;
  CGFloat MaxY;
  double v31;
  CGFloat v32;
  double v33;
  double v34;
  double v35;
  CGFloat v36;
  double v37;
  double v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  CGFloat v45;
  char v46;
  double result;
  __int128 v48;
  CGFloat v49;
  CGFloat v50;
  __int128 v51;
  __int128 v52;
  char v53;
  _QWORD v54[5];
  _BYTE v55[40];
  CGAffineTransform v56;
  CGAffineTransform v57;
  _OWORD v58[2];
  char v59;
  _QWORD v60[6];
  _BYTE v61[40];
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;

  MinX = CGRectGetMinX(*(CGRect *)&a3);
  if (qword_10028A3A0 != -1)
    swift_once(&qword_10028A3A0, sub_10002E454);
  v15 = *(double *)&qword_1002AA0A8;
  v16 = MinX + *(double *)&qword_1002AA0A8;
  v62.origin.x = a3;
  v62.origin.y = a4;
  v62.size.width = a5;
  v62.size.height = a6;
  v17 = a4;
  v50 = a4;
  MinY = CGRectGetMinY(v62);
  v63.origin.x = a3;
  v63.origin.y = v17;
  v63.size.width = a5;
  v63.size.height = a6;
  Width = CGRectGetWidth(v63);
  v20 = a3;
  v49 = a3;
  v21 = Width - v15;
  v64.origin.x = v20;
  v64.origin.y = v17;
  v64.size.width = a5;
  v64.size.height = a6;
  Height = CGRectGetHeight(v64);
  Path.init()(&v51);
  v65.origin.x = v16;
  v65.origin.y = MinY;
  v65.size.width = v21;
  v65.size.height = Height;
  v23 = CGRectGetMinX(v65) + a7;
  v66.origin.x = v16;
  v66.origin.y = MinY;
  v66.size.width = v21;
  v66.size.height = Height;
  v24 = CGRectGetMinY(v66);
  Path.move(to:)(v23, v24);
  v67.origin.x = v16;
  v67.origin.y = MinY;
  v67.size.width = v21;
  v67.size.height = Height;
  v25 = CGRectGetMaxX(v67) - a7;
  v68.origin.x = v16;
  v68.origin.y = MinY;
  v68.size.width = v21;
  v68.size.height = Height;
  v26 = CGRectGetMinY(v68);
  Path.addLine(to:)(v25, v26);
  v69.origin.x = v16;
  v69.origin.y = MinY;
  v69.size.width = v21;
  v69.size.height = Height;
  v27 = CGRectGetMaxX(v69) - a7;
  v70.origin.x = v16;
  v70.origin.y = MinY;
  v70.size.width = v21;
  v70.size.height = Height;
  v28 = CGRectGetMinY(v70);
  v60[0] = 0x3FF0000000000000;
  v60[1] = 0;
  v60[2] = 0;
  v60[3] = 0x3FF0000000000000;
  v60[4] = 0;
  v60[5] = 0;
  Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v60, v27, v28 + a7, a7);
  v71.origin.x = v16;
  v71.origin.y = MinY;
  v71.size.width = v21;
  v71.size.height = Height;
  MaxX = CGRectGetMaxX(v71);
  v72.origin.x = v16;
  v72.origin.y = MinY;
  v72.size.width = v21;
  v72.size.height = Height;
  MaxY = CGRectGetMaxY(v72);
  Path.addLine(to:)(MaxX, MaxY - a7);
  v73.origin.x = v16;
  v73.origin.y = MinY;
  v73.size.width = v21;
  v73.size.height = Height;
  v31 = CGRectGetMaxX(v73) - a7;
  v74.origin.x = v16;
  v74.origin.y = MinY;
  v74.size.width = v21;
  v74.size.height = Height;
  v32 = CGRectGetMaxY(v74);
  Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v60, v31, v32 - a7, a7);
  v75.origin.x = v16;
  v75.origin.y = MinY;
  v75.size.width = v21;
  v75.size.height = Height;
  v33 = CGRectGetMinX(v75) + a7;
  v76.origin.x = v16;
  v76.origin.y = MinY;
  v76.size.width = v21;
  v76.size.height = Height;
  v34 = CGRectGetMaxY(v76);
  Path.addLine(to:)(v33, v34);
  v77.origin.x = v16;
  v77.origin.y = MinY;
  v77.size.width = v21;
  v77.size.height = Height;
  v35 = CGRectGetMinX(v77) + a7;
  v78.origin.x = v16;
  v78.origin.y = MinY;
  v78.size.width = v21;
  v78.size.height = Height;
  v36 = CGRectGetMaxY(v78);
  Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v60, v35, v36 - a7, a7);
  v79.origin.x = v49;
  v79.origin.y = v50;
  v79.size.width = a5;
  v79.size.height = a6;
  v37 = CGRectGetMinX(v79);
  v80.origin.x = v49;
  v80.origin.y = v50;
  v80.size.width = a5;
  v80.size.height = a6;
  v38 = CGRectGetMaxY(v80);
  Path.addCurve(to:control1:control2:)(v37, v38, v37 + 10.0, v38 + -3.0, v37 + 7.0, v38);
  v81.origin.x = v16;
  v81.origin.y = MinY;
  v81.size.width = v21;
  v81.size.height = Height;
  v39 = CGRectGetMinX(v81);
  v82.origin.x = v16;
  v82.origin.y = MinY;
  v82.size.width = v21;
  v82.size.height = Height;
  v40 = CGRectGetMaxY(v82);
  Path.addCurve(to:control1:control2:)(v39, v40 - a7 + 7.0, v39 + -5.0, v40 - a7 + 7.0 + 10.0, v39, v40 - a7 + 7.0 + 6.0);
  v83.origin.x = v16;
  v83.origin.y = MinY;
  v83.size.width = v21;
  v83.size.height = Height;
  v41 = CGRectGetMinX(v83);
  v84.origin.x = v16;
  v84.origin.y = MinY;
  v84.size.width = v21;
  v84.size.height = Height;
  v42 = CGRectGetMinY(v84);
  Path.addLine(to:)(v41, v42 + a7);
  v85.origin.x = v16;
  v85.origin.y = MinY;
  v85.size.width = v21;
  v85.size.height = Height;
  v43 = CGRectGetMinX(v85) + a7;
  v86.origin.x = v16;
  v86.origin.y = MinY;
  v86.size.width = v21;
  v86.size.height = Height;
  v44 = CGRectGetMinY(v86);
  Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v60, v43, v44 + a7, a7);
  if ((a1 & 1) == 0)
  {
    v58[0] = v51;
    v58[1] = v52;
    v59 = v53;
    CGAffineTransformMakeScale(&v57, -1.0, 1.0);
    sub_10002ED68((uint64_t)v58, (uint64_t)v61);
    sub_10002EDBC((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EDA4);
    Path.applying(_:)(v54, &v57);
    sub_10002EDBC((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EDF4);
    sub_10002EDBC((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EDF4);
    sub_10002ED68((uint64_t)v54, (uint64_t)v55);
    sub_10002EDBC((uint64_t)v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EDA4);
    v87.origin.x = v49;
    v87.origin.y = v50;
    v87.size.height = a6;
    v87.size.width = a5;
    v45 = CGRectGetWidth(v87);
    CGAffineTransformMakeTranslation(&v56, v45, 0.0);
    Path.applying(_:)(&v51, &v56);
    sub_10002EDBC((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EDF4);
    sub_10002EDBC((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EDF4);
  }
  v46 = v53;
  result = *(double *)&v51;
  v48 = v52;
  *(_OWORD *)a2 = v51;
  *(_OWORD *)(a2 + 16) = v48;
  *(_BYTE *)(a2 + 32) = v46;
  return result;
}

double sub_10002EAC4@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  sub_10002E558(*(_BYTE *)v5, (uint64_t)v9, a2, a3, a4, a5, *(double *)(v5 + 8));
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

uint64_t sub_10002EB14()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_10002EB2C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_10002EB88;
}

void sub_10002EB88(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_10002EBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002EE0C();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10002EC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002EE0C();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10002EC58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002EE0C();
  return Shape.body.getter(a1, v2);
}

unint64_t sub_10002EC94()
{
  unint64_t result;

  result = qword_10028C230;
  if (!qword_10028C230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_10028C230);
  }
  return result;
}

unint64_t sub_10002ECDC()
{
  unint64_t result;

  result = qword_10028C238;
  if (!qword_10028C238)
  {
    result = swift_getWitnessTable(&unk_1001E7A04, &type metadata for ChatBubbleShape);
    atomic_store(result, (unint64_t *)&qword_10028C238);
  }
  return result;
}

unint64_t sub_10002ED24()
{
  unint64_t result;

  result = qword_10028C240;
  if (!qword_10028C240)
  {
    result = swift_getWitnessTable(&unk_1001E79B4, &type metadata for ChatBubbleShape);
    atomic_store(result, (unint64_t *)&qword_10028C240);
  }
  return result;
}

uint64_t sub_10002ED68(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Path.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_10002EDA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3)
    return swift_retain(result);
  return result;
}

uint64_t sub_10002EDBC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_10002EDF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3)
    return swift_release(result);
  return result;
}

unint64_t sub_10002EE0C()
{
  unint64_t result;

  result = qword_10028C248;
  if (!qword_10028C248)
  {
    result = swift_getWitnessTable(&unk_1001E7A54, &type metadata for ChatBubbleShape);
    atomic_store(result, (unint64_t *)&qword_10028C248);
  }
  return result;
}

id sub_10002EE50()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 10);
  qword_10028C250 = (uint64_t)result;
  return result;
}

char *sub_10002EE8C(double a1, double a2, double a3, double a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  objc_super v16;

  v9 = OBJC_IVAR____TtC17SequoiaTranslator9ChromeBar_backgroundView;
  v10 = qword_10028A3A8;
  v11 = v4;
  if (v10 != -1)
    swift_once(&qword_10028A3A8, sub_10002EE50);
  *(_QWORD *)&v11[v9] = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", qword_10028C250);

  v16.receiver = v11;
  v16.super_class = (Class)type metadata accessor for ChromeBar();
  v12 = (char *)objc_msgSendSuper2(&v16, "initWithFrame:", a1, a2, a3, a4);
  v13 = *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator9ChromeBar_backgroundView];
  v14 = v12;
  objc_msgSend(v14, "addSubview:", v13);
  sub_10002F074();

  return v14;
}

void sub_10002F074()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  Class isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator9ChromeBar_backgroundView];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v4 = swift_allocObject(v3, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001E7590;
  v5 = objc_msgSend(v1, "topAnchor");
  v6 = objc_msgSend(v0, "topAnchor");
  v7 = objc_msgSend(v5, "constraintEqualToAnchor:", v6);

  *(_QWORD *)(v4 + 32) = v7;
  v8 = objc_msgSend(v1, "leadingAnchor");
  v9 = objc_msgSend(v0, "leadingAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v4 + 40) = v10;
  v11 = objc_msgSend(v1, "trailingAnchor");
  v12 = objc_msgSend(v0, "trailingAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v4 + 48) = v13;
  v14 = objc_msgSend(v1, "bottomAnchor");
  v15 = objc_msgSend(v0, "bottomAnchor");
  v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

  *(_QWORD *)(v4 + 56) = v16;
  specialized Array._endMutation()(v17);
  sub_100025254();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "activateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

id sub_10002F2C0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChromeBar();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ChromeBar()
{
  return objc_opt_self(_TtC17SequoiaTranslator9ChromeBar);
}

_QWORD *sub_10002F320(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    a1[1] = v8;
    swift_retain(v4);
    swift_retain(v8);
    v9 = *(int *)(sub_100006DF4(&qword_10028C288) + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for LanguageOption(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[5];
    v14 = (_QWORD *)((char *)v7 + v13);
    v15 = (char *)a2 + v13;
    v16 = *(_QWORD *)((char *)a2 + v13);
    v17 = *(_QWORD *)((char *)a2 + v13 + 8);
    *v14 = v16;
    v14[1] = v17;
    swift_retain(v16);
    swift_retain(v17);
    v18 = *(int *)(sub_100006DF4(&qword_10028C290) + 32);
    v19 = (char *)v14 + v18;
    v20 = &v15[v18];
    v21 = type metadata accessor for Locale(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = a3[6];
    v23 = a3[7];
    v24 = (char *)v7 + v22;
    v25 = (char *)a2 + v22;
    v26 = *(_QWORD *)v25;
    v27 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v27;
    v24[16] = v25[16];
    v28 = (char *)v7 + v23;
    v29 = (char *)a2 + v23;
    v30 = *(_QWORD *)v29;
    v31 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v31;
    v28[16] = v29[16];
    v32 = a3[9];
    *((_BYTE *)v7 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v7 + v32) = *((_BYTE *)a2 + v32);
    v33 = a3[10];
    v34 = (_QWORD *)((char *)v7 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    v4 = v35[1];
    *v34 = *v35;
    v34[1] = v4;
    swift_retain(v26);
    swift_retain(v27);
    swift_retain(v30);
    swift_retain(v31);
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_10002F4B0(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_100006DF4(&qword_10028C288) + 32);
  v5 = type metadata accessor for LanguageOption(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (char *)v6 + *(int *)(sub_100006DF4(&qword_10028C290) + 32);
  v8 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = (_QWORD *)((char *)a1 + a2[7]);
  swift_release(*v10);
  swift_release(v10[1]);
  return swift_release(*(_QWORD *)((char *)a1 + a2[10] + 8));
}

_QWORD *sub_10002F59C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain(v6);
  swift_retain(v7);
  v8 = *(int *)(sub_100006DF4(&qword_10028C288) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LanguageOption(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12);
  v16 = *(_QWORD *)((char *)a2 + v12 + 8);
  *v13 = v15;
  v13[1] = v16;
  swift_retain(v15);
  swift_retain(v16);
  v17 = *(int *)(sub_100006DF4(&qword_10028C290) + 32);
  v18 = (char *)v13 + v17;
  v19 = &v14[v17];
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  v25 = *(_QWORD *)v24;
  v26 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v26;
  v23[16] = v24[16];
  v27 = (char *)a1 + v22;
  v28 = (char *)a2 + v22;
  v29 = *(_QWORD *)v28;
  v30 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = v30;
  v27[16] = v28[16];
  v31 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
  v32 = a3[10];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v29);
  swift_retain(v30);
  swift_retain(v35);
  return a1;
}

_QWORD *sub_10002F6F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(sub_100006DF4(&qword_10028C288) + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for LanguageOption(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)((char *)a1 + v14);
  v18 = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *((_QWORD *)v16 + 1);
  v20 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v19;
  swift_retain(v19);
  swift_release(v20);
  v21 = *(int *)(sub_100006DF4(&qword_10028C290) + 32);
  v22 = &v15[v21];
  v23 = &v16[v21];
  v24 = type metadata accessor for Locale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = a3[6];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a1 + v25);
  v29 = *(_QWORD *)((char *)a2 + v25);
  *(_QWORD *)((char *)a1 + v25) = v29;
  swift_retain(v29);
  swift_release(v28);
  v30 = *((_QWORD *)v27 + 1);
  v31 = *((_QWORD *)v26 + 1);
  *((_QWORD *)v26 + 1) = v30;
  swift_retain(v30);
  swift_release(v31);
  v26[16] = v27[16];
  v32 = a3[7];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a1 + v32);
  v36 = *(_QWORD *)((char *)a2 + v32);
  *(_QWORD *)((char *)a1 + v32) = v36;
  swift_retain(v36);
  swift_release(v35);
  v37 = *((_QWORD *)v34 + 1);
  v38 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v33 + 1) = v37;
  swift_retain(v37);
  swift_release(v38);
  v33[16] = v34[16];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v39 = a3[10];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_retain(v42);
  swift_release(v43);
  return a1;
}

_QWORD *sub_10002F8D8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_100006DF4(&qword_10028C288) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for LanguageOption(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[5];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 8);
  *v12 = *(_QWORD *)((char *)a2 + v11);
  v12[1] = v14;
  v15 = *(int *)(sub_100006DF4(&qword_10028C290) + 32);
  v16 = (char *)v12 + v15;
  v17 = &v13[v15];
  v18 = type metadata accessor for Locale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[6];
  v20 = a3[7];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v21[16] = v22[16];
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v23[16] = v24[16];
  v25 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_10002F9F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(sub_100006DF4(&qword_10028C288) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LanguageOption(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_release(v15);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_release(v16);
  v17 = *(int *)(sub_100006DF4(&qword_10028C290) + 32);
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)((char *)a1 + v21);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  swift_release(v24);
  v25 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  swift_release(v25);
  v22[16] = v23[16];
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a1 + v26);
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
  swift_release(v29);
  v30 = *((_QWORD *)v27 + 1);
  *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
  swift_release(v30);
  v27[16] = v28[16];
  v31 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
  v32 = a3[10];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v36 = *v34;
  v35 = v34[1];
  v37 = v33[1];
  *v33 = v36;
  v33[1] = v35;
  swift_release(v37);
  return a1;
}

uint64_t sub_10002FB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002FB88);
}

uint64_t sub_10002FB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100006DF4(&qword_10028C288);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006DF4(&qword_10028C290);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10002FC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002FC48);
}

uint64_t sub_10002FC48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100006DF4(&qword_10028C288);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100006DF4(&qword_10028C290);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CombinedLanguagePickerPill(uint64_t a1)
{
  uint64_t result;

  result = qword_10028C2F0;
  if (!qword_10028C2F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CombinedLanguagePickerPill);
  return result;
}

void sub_10002FD34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_10002FDF8(319, &qword_10028C300, (uint64_t (*)(uint64_t))&type metadata accessor for LanguageOption);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10002FDF8(319, (unint64_t *)&unk_10028C308, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1001E7AE0;
      v6[3] = &unk_1001E7AE0;
      v6[4] = &unk_1001E7AF8;
      v6[5] = &unk_1001E7AF8;
      v6[6] = &unk_1001E7B10;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_10002FDF8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Binding(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10002FE44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020FF70, 1);
}

uint64_t sub_10002FE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t KeyPath;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v49 = a2;
  v3 = sub_100006DF4(&qword_10028C368);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100006DF4(&qword_10028C370);
  v6 = __chkstk_darwin(v48);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v47 = (uint64_t)&v45 - v9;
  v10 = sub_100006DF4(&qword_10028C378);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028C380);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100006DF4(&qword_10028C388);
  v16 = __chkstk_darwin(v46);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v45 - v20;
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v19);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v22 = (uint64_t)&v12[*(int *)(sub_100006DF4(&qword_10028C390) + 44)];
  v45 = a1;
  sub_10003024C(a1, v22);
  v23 = a1 + *(int *)(type metadata accessor for CombinedLanguagePickerPill(0) + 28);
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  LOBYTE(v23) = *(_BYTE *)(v23 + 16);
  v50 = v24;
  v51 = v25;
  v52 = v23;
  sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v53);
  v26 = v53;
  KeyPath = swift_getKeyPath(&unk_1001E7BA8);
  v28 = &v15[*(int *)(v13 + 36)];
  v29 = (uint64_t *)&v28[*(int *)(type metadata accessor for CombinedLanguagePickerPillStyle(0) + 24)];
  *v29 = KeyPath;
  v30 = sub_100006DF4((uint64_t *)&unk_1002914A0);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  *v28 = v26;
  v28[1] = 1;
  v31 = sub_1000110A4((uint64_t)v12, (uint64_t)v15, &qword_10028C378);
  v32 = static Color.primary.getter(v31);
  v33 = swift_getKeyPath(&unk_1001E7BD8);
  sub_10000B074((uint64_t)v15, (uint64_t)v18, &qword_10028C380);
  v34 = (uint64_t *)&v18[*(int *)(v46 + 36)];
  *v34 = v33;
  v34[1] = v32;
  sub_10000A020((uint64_t)v15, &qword_10028C380);
  v35 = sub_1000110A4((uint64_t)v18, (uint64_t)v21, &qword_10028C388);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v35);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v36 = sub_100006DF4(&qword_10028C398);
  v37 = sub_100030B4C(v45, (uint64_t)&v5[*(int *)(v36 + 44)]);
  v38 = static Color.primary.getter(v37);
  v39 = swift_getKeyPath(&unk_1001E7BD8);
  sub_10000B074((uint64_t)v5, (uint64_t)v8, &qword_10028C368);
  v40 = (uint64_t *)&v8[*(int *)(v48 + 36)];
  *v40 = v39;
  v40[1] = v38;
  sub_10000A020((uint64_t)v5, &qword_10028C368);
  v41 = v47;
  sub_1000110A4((uint64_t)v8, v47, &qword_10028C370);
  sub_10000B074((uint64_t)v21, (uint64_t)v18, &qword_10028C388);
  sub_10000B074(v41, (uint64_t)v8, &qword_10028C370);
  v42 = v49;
  sub_10000B074((uint64_t)v18, v49, &qword_10028C388);
  v43 = sub_100006DF4(&qword_10028C3A0);
  sub_10000B074((uint64_t)v8, v42 + *(int *)(v43 + 48), &qword_10028C370);
  sub_10000A020(v41, &qword_10028C370);
  sub_10000A020((uint64_t)v21, &qword_10028C388);
  sub_10000A020((uint64_t)v8, &qword_10028C370);
  return sub_10000A020((uint64_t)v18, &qword_10028C388);
}

uint64_t sub_10003024C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;

  v127 = a2;
  v3 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v3);
  v117 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LanguageOption(0);
  v119 = *(_QWORD *)(v5 - 8);
  v120 = v5;
  __chkstk_darwin(v5);
  v118 = (uint64_t *)((char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v131 = sub_100006DF4(&qword_10028C290);
  __chkstk_darwin(v131);
  v115 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LanguagePicker(0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  __chkstk_darwin(v8);
  v122 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_10028C3F0);
  v11 = __chkstk_darwin(v10);
  v126 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v121 = (char *)&v101 - v14;
  __chkstk_darwin(v13);
  v125 = (uint64_t)&v101 - v15;
  v114 = sub_100006DF4(&qword_10028C3F8);
  v112 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v108 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100006DF4(&qword_10028C400);
  __chkstk_darwin(v110);
  v109 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_10028C408);
  v19 = __chkstk_darwin(v18);
  v106 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v104 = (char *)&v101 - v21;
  v111 = type metadata accessor for Locale(0);
  v113 = *(_QWORD *)(v111 - 8);
  v22 = __chkstk_darwin(v111);
  v116 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (uint64_t *)((char *)&v101 - v24);
  v128 = sub_100006DF4(&qword_10028C288);
  __chkstk_darwin(v128);
  v27 = (uint64_t *)((char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = type metadata accessor for DetectableLanguagePicker(0);
  v102 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100006DF4(&qword_10028C410);
  v31 = __chkstk_darwin(v30);
  v130 = (uint64_t)&v101 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v129 = (uint64_t)&v101 - v33;
  v34 = (int *)type metadata accessor for CombinedLanguagePickerPill(0);
  v35 = (uint64_t *)(a1 + v34[6]);
  v36 = *v35;
  v37 = v35[1];
  LOBYTE(v35) = *((_BYTE *)v35 + 16);
  v136 = v36;
  v137 = v37;
  v138 = (char)v35;
  v38 = sub_100006DF4(&qword_100296C60);
  Binding.projectedValue.getter(&v132, v38);
  v39 = v132;
  v40 = v133;
  v41 = BYTE8(v133);
  Binding.projectedValue.getter(v27, v128);
  v105 = a1 + v34[5];
  Binding.wrappedValue.getter(v25);
  v42 = a1 + v34[10];
  v103 = a1;
  v107 = v42;
  v43 = *(_QWORD *)(v42 + 8);
  v44 = swift_retain(v43);
  v45 = LanguagesService.models.getter(v44);
  swift_release(v43);
  v46 = v39;
  v47 = v27;
  v48 = (uint64_t)v104;
  v49 = v130;
  DetectableLanguagePicker.init(isDetected:selectedOption:preferredLocales:oppositeLocale:languageModels:sourceUsesOCR:)(v46, v40, v41, v47, 0, v25, v45, *(unsigned __int8 *)(a1 + v34[9]));
  v50 = sub_100007D5C(&qword_10028C418, (uint64_t (*)(uint64_t))&type metadata accessor for DetectableLanguagePicker, (uint64_t)&protocol conformance descriptor for DetectableLanguagePicker);
  v51 = v101;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9730, v101, v50);
  v52 = (uint64_t)v106;
  (*(void (**)(char *, uint64_t))(v102 + 8))(v29, v51);
  sub_1000110A4(v49, v129, &qword_10028C410);
  v53 = Image.init(systemName:)(0x6F662E776F727261, 0xED00006472617772);
  v54 = static UnitPoint.center.getter();
  v132 = v53;
  __asm { FMOV            V2.2D, #0.75 }
  v133 = _Q2;
  v134 = v54;
  v135 = v60;
  v61 = sub_100006DF4(&qword_10028C420);
  v62 = sub_100031540();
  v63 = v108;
  v64 = v61;
  v65 = v115;
  View.bold(_:)(1, v64, v62);
  v66 = swift_release(v53);
  v67 = static Color.secondary.getter(v66);
  KeyPath = swift_getKeyPath(&unk_1001E7C08);
  v69 = v112;
  v70 = (uint64_t)v109;
  v71 = v114;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v109, v63, v114);
  v72 = v110;
  v73 = (uint64_t *)(v70 + *(int *)(v110 + 36));
  *v73 = KeyPath;
  v73[1] = v67;
  v74 = (uint64_t)v117;
  (*(void (**)(char *, uint64_t))(v69 + 8))(v63, v71);
  v75 = sub_1000315AC();
  View.accessibilityHidden(_:)(1, v72, v75);
  sub_10000A020(v70, &qword_10028C400);
  v76 = v52;
  v77 = v48;
  sub_1000110A4(v52, v48, &qword_10028C408);
  Binding.projectedValue.getter(v65, v131);
  v78 = v118;
  v79 = Binding.wrappedValue.getter(v118);
  LanguageOption.locale.getter(v79);
  v80 = v111;
  v81 = v78;
  v82 = v113;
  (*(void (**)(_QWORD *, uint64_t))(v119 + 8))(v81, v120);
  v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v74, 1, v80);
  if ((_DWORD)v83 == 1)
  {
    v84 = v116;
    static Locale.current.getter(v83);
    sub_10000A020(v74, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    v85 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
    v84 = v116;
    v85(v116, v74, v80);
  }
  v86 = *(_QWORD *)(v107 + 8);
  v87 = swift_retain(v86);
  v88 = LanguagesService.models.getter(v87);
  swift_release(v86);
  v89 = v122;
  LanguagePicker.init(selectedLocale:preferredLocales:oppositeLocale:languageModels:disabledLanguages:)(v65, 0, v84, v88, &_swiftEmptySetSingleton);
  v90 = sub_100007D5C(&qword_10028C438, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagePicker, (uint64_t)&protocol conformance descriptor for LanguagePicker);
  v91 = (uint64_t)v121;
  v92 = v124;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9750, v124, v90);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v89, v92);
  v93 = v125;
  sub_1000110A4(v91, v125, &qword_10028C3F0);
  v95 = v129;
  v94 = v130;
  sub_10000B074(v129, v130, &qword_10028C410);
  v96 = v76;
  sub_10000B074(v48, v76, &qword_10028C408);
  v97 = v126;
  sub_10000B074(v93, v126, &qword_10028C3F0);
  v98 = v127;
  sub_10000B074(v94, v127, &qword_10028C410);
  v99 = sub_100006DF4(&qword_10028C440);
  sub_10000B074(v96, v98 + *(int *)(v99 + 48), &qword_10028C408);
  sub_10000B074(v97, v98 + *(int *)(v99 + 64), &qword_10028C3F0);
  sub_10000A020(v93, &qword_10028C3F0);
  sub_10000A020(v77, &qword_10028C408);
  sub_10000A020(v95, &qword_10028C410);
  sub_10000A020(v97, &qword_10028C3F0);
  sub_10000A020(v96, &qword_10028C408);
  return sub_10000A020(v94, &qword_10028C410);
}

uint64_t sub_100030B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  _BYTE *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];
  char v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;

  v104 = a2;
  v3 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v3);
  v89 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LanguageOption(0);
  v92 = *(_QWORD *)(v5 - 8);
  v93 = v5;
  __chkstk_darwin(v5);
  v91 = (uint64_t *)((char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = sub_100006DF4(&qword_10028C290);
  __chkstk_darwin(v106);
  v88 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for LanguagePicker(0);
  v97 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v96 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100006DF4(&qword_10028C3A8);
  __chkstk_darwin(v99);
  v98 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_10028C3B0);
  __chkstk_darwin(v10);
  v101 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100006DF4(&qword_10028C3B8);
  v12 = __chkstk_darwin(v94);
  v103 = (uint64_t)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v95 = (char *)&v78 - v15;
  __chkstk_darwin(v14);
  v102 = (uint64_t)&v78 - v16;
  v85 = type metadata accessor for Locale(0);
  v86 = *(_QWORD *)(v85 - 8);
  v17 = __chkstk_darwin(v85);
  v87 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v78 - v19);
  v105 = sub_100006DF4(&qword_10028C288);
  __chkstk_darwin(v105);
  v22 = (uint64_t *)((char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v83 = sub_100006DF4(&qword_10028C3C0);
  __chkstk_darwin(v83);
  v24 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006DF4(&qword_10028C3C8);
  __chkstk_darwin(v25);
  v80 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100006DF4(&qword_10028C3D0);
  v27 = __chkstk_darwin(v82);
  v90 = (uint64_t)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v79 = (char *)&v78 - v29;
  v30 = (int *)type metadata accessor for CombinedLanguagePickerPill(0);
  v31 = (uint64_t *)(a1 + v30[6]);
  v32 = *v31;
  v33 = v31[1];
  LOBYTE(v31) = *((_BYTE *)v31 + 16);
  v107[0] = v32;
  v107[1] = v33;
  v108 = (char)v31;
  v78 = sub_100006DF4(&qword_100296C60);
  Binding.projectedValue.getter(&v109, v78);
  v35 = v109;
  v34 = v110;
  v36 = v111;
  Binding.projectedValue.getter(v22, v105);
  v81 = a1 + v30[5];
  Binding.wrappedValue.getter(v20);
  v84 = a1 + v30[10];
  v37 = *(_QWORD *)(v84 + 8);
  v38 = swift_retain(v37);
  v39 = LanguagesService.models.getter(v38);
  swift_release(v37);
  DetectableLanguagePicker.init(isDetected:selectedOption:preferredLocales:oppositeLocale:languageModels:sourceUsesOCR:)(v35, v34, v36, v22, 0, v20, v39, 0);
  v40 = sub_100012334(&qword_10028C3D8, &qword_10028C3C0, (uint64_t)&protocol conformance descriptor for EquatableView<A>);
  v41 = (uint64_t)v80;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9730, v83, v40);
  sub_10000A020((uint64_t)v24, &qword_10028C3C0);
  v42 = v30[7];
  v43 = (uint64_t)v79;
  v44 = (uint64_t *)(a1 + v42);
  v45 = *v44;
  v46 = v44[1];
  LOBYTE(v44) = *((_BYTE *)v44 + 16);
  v109 = v45;
  v110 = v46;
  v111 = v44;
  Binding.wrappedValue.getter(v107);
  LOBYTE(a1) = v107[0];
  KeyPath = swift_getKeyPath(&unk_1001E7BA8);
  v48 = (_BYTE *)(v43 + *(int *)(v82 + 36));
  v49 = type metadata accessor for CombinedLanguagePickerPillStyle(0);
  v50 = (uint64_t *)&v48[*(int *)(v49 + 24)];
  *v50 = KeyPath;
  v51 = (uint64_t)v89;
  v52 = sub_100006DF4((uint64_t *)&unk_1002914A0);
  swift_storeEnumTagMultiPayload(v50, v52, 0);
  *v48 = a1;
  v53 = v88;
  v48[1] = 0;
  sub_1000110A4(v41, v43, &qword_10028C3C8);
  Binding.projectedValue.getter(v53, v106);
  v54 = v91;
  v55 = Binding.wrappedValue.getter(v91);
  LanguageOption.locale.getter(v55);
  v56 = v85;
  v57 = v54;
  v58 = v86;
  (*(void (**)(_QWORD *, uint64_t))(v92 + 8))(v57, v93);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v51, 1, v56);
  v60 = v87;
  if ((_DWORD)v59 == 1)
  {
    static Locale.current.getter(v59);
    sub_10000A020(v51, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v87, v51, v56);
  }
  v61 = *(_QWORD *)(v84 + 8);
  v62 = swift_retain(v61);
  v63 = LanguagesService.models.getter(v62);
  swift_release(v61);
  v64 = v96;
  LanguagePicker.init(selectedLocale:preferredLocales:oppositeLocale:languageModels:disabledLanguages:)(v53, 0, v60, v63, &_swiftEmptySetSingleton);
  v65 = (uint64_t)v98;
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v64, v100);
  v66 = sub_100012334(&qword_10028C3E0, &qword_10028C3A8, (uint64_t)&protocol conformance descriptor for EquatableView<A>);
  v67 = (uint64_t)v101;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9750, v99, v66);
  sub_10000A020(v65, &qword_10028C3A8);
  v68 = swift_getKeyPath(&unk_1001E7BA8);
  v69 = (uint64_t)v95;
  v70 = &v95[*(int *)(v94 + 36)];
  v71 = (uint64_t *)&v70[*(int *)(v49 + 24)];
  *v71 = v68;
  swift_storeEnumTagMultiPayload(v71, v52, 0);
  *(_WORD *)v70 = 0;
  sub_1000110A4(v67, v69, &qword_10028C3B0);
  v72 = v102;
  sub_1000110A4(v69, v102, &qword_10028C3B8);
  v73 = v90;
  sub_10000B074(v43, v90, &qword_10028C3D0);
  v74 = v103;
  sub_10000B074(v72, v103, &qword_10028C3B8);
  v75 = v104;
  sub_10000B074(v73, v104, &qword_10028C3D0);
  v76 = sub_100006DF4(&qword_10028C3E8);
  sub_10000B074(v74, v75 + *(int *)(v76 + 48), &qword_10028C3B8);
  sub_10000A020(v72, &qword_10028C3B8);
  sub_10000A020(v43, &qword_10028C3D0);
  sub_10000A020(v74, &qword_10028C3B8);
  return sub_10000A020(v73, &qword_10028C3D0);
}

uint64_t sub_10003137C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t *v9;
  uint64_t v11;

  v3 = sub_100006DF4(&qword_10028C350);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Axis.Set.horizontal.getter(v4);
  v7 = sub_100006DF4(&qword_10028C358);
  sub_10002FE54(v1, (uint64_t)&v6[*(int *)(v7 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1001E7B78);
  sub_10000B074((uint64_t)v6, a1, &qword_10028C350);
  v9 = (uint64_t *)(a1 + *(int *)(sub_100006DF4(&qword_10028C360) + 36));
  *v9 = KeyPath;
  v9[1] = 1;
  return sub_10000A020((uint64_t)v6, &qword_10028C350);
}

uint64_t sub_10003144C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.languageLabelContext.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100031474(_QWORD *a1)
{
  return EnvironmentValues.languageLabelContext.setter(*a1);
}

uint64_t sub_100031498()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1000314B8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for DynamicTypeSize(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.dynamicTypeSize.setter(v3);
}

unint64_t sub_100031540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C428;
  if (!qword_10028C428)
  {
    v1 = sub_1000070BC(&qword_10028C420);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C428);
  }
  return result;
}

unint64_t sub_1000315AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10028C430;
  if (!qword_10028C430)
  {
    v1 = sub_1000070BC(&qword_10028C400);
    v2[0] = sub_1000070BC(&qword_10028C420);
    v2[1] = sub_100031540();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C430);
  }
  return result;
}

unint64_t sub_10003165C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C448;
  if (!qword_10028C448)
  {
    v1 = sub_1000070BC(&qword_10028C360);
    sub_100012334(&qword_10028C450, &qword_10028C350, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    sub_100012334(&qword_10028C458, &qword_10028C460, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C448);
  }
  return result;
}

uint64_t *sub_1000316F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = sub_100006DF4((uint64_t *)&unk_1002914A0);
    if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
    {
      v9 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
      v10 = v6;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *v7;
      *v6 = *v7;
      swift_retain(v14);
      v10 = v6;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return v3;
}

uint64_t sub_1000317D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v3 = sub_100006DF4((uint64_t *)&unk_1002914A0);
  if (swift_getEnumCaseMultiPayload(v2, v3) != 1)
    return swift_release(*v2);
  v4 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
}

_WORD *sub_100031838(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (uint64_t *)((char *)a1 + v4);
  v6 = (uint64_t *)((char *)a2 + v4);
  v7 = sub_100006DF4((uint64_t *)&unk_1002914A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
    v9 = 1;
  }
  else
  {
    v10 = *v6;
    *v5 = *v6;
    swift_retain(v10);
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v5, v7, v9);
  return a1;
}

_BYTE *sub_1000318DC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = (uint64_t *)&a1[v4];
    v6 = (uint64_t *)&a2[v4];
    sub_10000A020((uint64_t)&a1[v4], (uint64_t *)&unk_1002914A0);
    v7 = sub_100006DF4((uint64_t *)&unk_1002914A0);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
      v9 = 1;
    }
    else
    {
      v10 = *v6;
      *v5 = *v6;
      swift_retain(v10);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v5, v7, v9);
  }
  return a1;
}

_WORD *sub_1000319A0(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100006DF4((uint64_t *)&unk_1002914A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_100031A48(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = &a1[v4];
    v6 = &a2[v4];
    sub_10000A020((uint64_t)&a1[v4], (uint64_t *)&unk_1002914A0);
    v7 = sub_100006DF4((uint64_t *)&unk_1002914A0);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload(v5, v7, 1);
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100031B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100031B1C);
}

uint64_t sub_100031B1C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_100006DF4(&qword_10028C468);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t sub_100031B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100031BA8);
}

_BYTE *sub_100031BA8(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028C468);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CombinedLanguagePickerPillStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_10028C4C8;
  if (!qword_10028C4C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CombinedLanguagePickerPillStyle);
  return result;
}

void sub_100031C58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1001E7C60;
  v4[1] = &unk_1001E7C60;
  sub_100031CCC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100031CCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028C4D8)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028C4D8);
  }
}

uint64_t sub_100031D20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10020FFC0, 1);
}

uint64_t sub_100031D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a1;
  v54 = a2;
  v2 = sub_100006DF4(&qword_10028C510);
  __chkstk_darwin(v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028C518);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028C520);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028C528);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_10028C530);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static Edge.Set.vertical.getter(v15);
  v19 = EdgeInsets.init(_all:)(10.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = sub_100006DF4(&qword_10028C538);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v7, v52, v26);
  v28 = &v7[*(int *)(v5 + 36)];
  *v28 = v18;
  *((double *)v28 + 1) = v19;
  *((_QWORD *)v28 + 2) = v21;
  *((_QWORD *)v28 + 3) = v23;
  *((_QWORD *)v28 + 4) = v25;
  v28[40] = 0;
  v29 = static Edge.Set.horizontal.getter(v27);
  v30 = EdgeInsets.init(_all:)(15.0);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_10000B074((uint64_t)v7, (uint64_t)v10, &qword_10028C518);
  v37 = &v10[*(int *)(v8 + 36)];
  *v37 = v29;
  *((double *)v37 + 1) = v30;
  *((_QWORD *)v37 + 2) = v32;
  *((_QWORD *)v37 + 3) = v34;
  *((_QWORD *)v37 + 4) = v36;
  v37[40] = 0;
  sub_10000A020((uint64_t)v7, &qword_10028C518);
  v38 = v53;
  v39 = sub_100032058((uint64_t)v4);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  v43 = (uint64_t)&v13[*(int *)(v11 + 36)];
  sub_10000B074((uint64_t)v4, v43, &qword_10028C510);
  v44 = (uint64_t *)(v43 + *(int *)(sub_100006DF4(&qword_10028C540) + 36));
  *v44 = v40;
  v44[1] = v42;
  sub_10000B074((uint64_t)v10, (uint64_t)v13, &qword_10028C520);
  sub_10000A020((uint64_t)v4, &qword_10028C510);
  v45 = sub_10000A020((uint64_t)v10, &qword_10028C520);
  if (*(_BYTE *)(v38 + 1) == 1)
    v46 = static Color.primary.getter(v45);
  else
    v46 = static Color.secondary.getter(v45);
  v47 = v46;
  KeyPath = swift_getKeyPath(&unk_1001E7CC8);
  sub_10000B074((uint64_t)v13, (uint64_t)v17, &qword_10028C528);
  v49 = (uint64_t *)&v17[*(int *)(v14 + 36)];
  *v49 = KeyPath;
  v49[1] = v47;
  sub_10000A020((uint64_t)v13, &qword_10028C528);
  return sub_1000110A4((uint64_t)v17, v54, &qword_10028C530);
}

uint64_t sub_100032058@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v130 = a1;
  v124 = sub_100006DF4(&qword_10028C548);
  v2 = __chkstk_darwin(v124);
  v109 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v111 = (char *)&v106 - v4;
  v120 = type metadata accessor for Material(0);
  v118 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v117 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100006DF4(&qword_10028C550);
  v6 = __chkstk_darwin(v123);
  v108 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v110 = (uint64_t)&v106 - v8;
  v119 = sub_100006DF4(&qword_10028C558);
  __chkstk_darwin(v119);
  v122 = (uint64_t)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100006DF4(&qword_10028C560);
  __chkstk_darwin(v129);
  v125 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v11);
  v114 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100006DF4(&qword_10028C568);
  v13 = __chkstk_darwin(v116);
  v15 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v107 = (char *)&v106 - v16;
  v126 = sub_100006DF4(&qword_10028C570);
  __chkstk_darwin(v126);
  v128 = (uint64_t)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100006DF4(&qword_10028C578);
  __chkstk_darwin(v113);
  v115 = (uint64_t)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100006DF4(&qword_10028C580);
  __chkstk_darwin(v127);
  v121 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v20);
  v22 = (_OWORD *)((char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = sub_100006DF4(&qword_10028C588);
  v23 = __chkstk_darwin(v112);
  v25 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v106 - v26;
  v28 = type metadata accessor for DynamicTypeSize(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (uint64_t *)((char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = *v1;
  type metadata accessor for CombinedLanguagePickerPillStyle(0);
  v33 = sub_1000D5680(v31);
  v34 = DynamicTypeSize.isAccessibilitySize.getter(v33);
  (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v31, v28);
  if (v32 == 1)
  {
    if ((v34 & 1) != 0)
    {
      v35 = (char *)v22 + *(int *)(v20 + 20);
      v36 = enum case for RoundedCornerStyle.continuous(_:);
      v37 = type metadata accessor for RoundedCornerStyle(0);
      v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
      __asm { FMOV            V0.2D, #10.0 }
      *v22 = _Q0;
      v44 = static Color.translateAccentColor.getter(v38);
      KeyPath = swift_getKeyPath(&unk_1001E7CC8);
      sub_100032D68((uint64_t)v22, (uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      v46 = v112;
      v47 = (uint64_t *)&v25[*(int *)(v112 + 36)];
      *v47 = KeyPath;
      v47[1] = v44;
      sub_100032DAC((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      v48 = &qword_10028C588;
      sub_1000110A4((uint64_t)v25, (uint64_t)v27, &qword_10028C588);
      v49 = v115;
      sub_10000B074((uint64_t)v27, v115, &qword_10028C588);
      swift_storeEnumTagMultiPayload(v49, v113, 0);
      v50 = sub_100032C30();
      v51 = sub_100032CCC();
      v52 = (uint64_t)v121;
      _ConditionalContent<>.init(storage:)(v49, v46, v123, v50, v51);
      v53 = &qword_10028C580;
      v54 = v128;
      sub_10000B074(v52, v128, &qword_10028C580);
      swift_storeEnumTagMultiPayload(v54, v126, 0);
      v55 = sub_100032BC0(&qword_10028C5B8, &qword_10028C580, (void (*)(void))sub_100032C30, (void (*)(void))sub_100032CCC);
      v56 = sub_100032BC0(&qword_10028C5D8, &qword_10028C560, (void (*)(void))sub_100032A88, (void (*)(void))sub_100032B24);
      _ConditionalContent<>.init(storage:)(v54, v127, v129, v55, v56);
      v57 = v52;
LABEL_9:
      sub_10000A020(v57, v53);
      v76 = (uint64_t)v27;
      return sub_10000A020(v76, v48);
    }
    v77 = enum case for RoundedCornerStyle.continuous(_:);
    v78 = type metadata accessor for RoundedCornerStyle(0);
    v79 = (uint64_t)v114;
    v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 104))(v114, v77, v78);
    v81 = static Color.translateAccentColor.getter(v80);
    v82 = swift_getKeyPath(&unk_1001E7CC8);
    sub_100032D68(v79, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    v83 = v116;
    v84 = (uint64_t *)&v15[*(int *)(v116 + 36)];
    *v84 = v82;
    v84[1] = v81;
    sub_100032DAC(v79, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    v48 = &qword_10028C568;
    v27 = v107;
    sub_1000110A4((uint64_t)v15, (uint64_t)v107, &qword_10028C568);
    v85 = v122;
    sub_10000B074((uint64_t)v27, v122, &qword_10028C568);
    swift_storeEnumTagMultiPayload(v85, v119, 0);
    v86 = sub_100032A88();
    v87 = sub_100032B24();
    v88 = v124;
    v89 = (uint64_t)v125;
    v90 = v85;
    v91 = v83;
LABEL_8:
    _ConditionalContent<>.init(storage:)(v90, v91, v88, v86, v87);
    v53 = &qword_10028C560;
    v102 = v128;
    sub_10000B074(v89, v128, &qword_10028C560);
    swift_storeEnumTagMultiPayload(v102, v126, 1);
    v103 = sub_100032BC0(&qword_10028C5B8, &qword_10028C580, (void (*)(void))sub_100032C30, (void (*)(void))sub_100032CCC);
    v104 = sub_100032BC0(&qword_10028C5D8, &qword_10028C560, (void (*)(void))sub_100032A88, (void (*)(void))sub_100032B24);
    _ConditionalContent<>.init(storage:)(v102, v127, v129, v103, v104);
    v57 = v89;
    goto LABEL_9;
  }
  if ((v34 & 1) == 0)
  {
    v92 = enum case for RoundedCornerStyle.continuous(_:);
    v93 = type metadata accessor for RoundedCornerStyle(0);
    v94 = (uint64_t)v114;
    v95 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 104))(v114, v92, v93);
    v96 = v117;
    static Material.bar.getter(v95);
    v97 = v124;
    v98 = (uint64_t)v109;
    v99 = v118;
    v100 = v120;
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(&v109[*(int *)(v124 + 36)], v96, v120);
    sub_100032D68(v94, v98, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v96, v100);
    sub_100032DAC(v94, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    v48 = &qword_10028C548;
    v27 = v111;
    sub_1000110A4(v98, (uint64_t)v111, &qword_10028C548);
    v101 = v122;
    sub_10000B074((uint64_t)v27, v122, &qword_10028C548);
    swift_storeEnumTagMultiPayload(v101, v119, 1);
    v86 = sub_100032A88();
    v87 = sub_100032B24();
    v89 = (uint64_t)v125;
    v90 = v101;
    v91 = v116;
    v88 = v97;
    goto LABEL_8;
  }
  v58 = (char *)v22 + *(int *)(v20 + 20);
  v59 = enum case for RoundedCornerStyle.continuous(_:);
  v60 = type metadata accessor for RoundedCornerStyle(0);
  v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v58, v59, v60);
  __asm { FMOV            V0.2D, #10.0 }
  *v22 = _Q0;
  v63 = v117;
  static Material.bar.getter(v61);
  v64 = v123;
  v65 = (uint64_t)v108;
  v66 = v118;
  v67 = v120;
  (*(void (**)(char *, char *, uint64_t))(v118 + 16))(&v108[*(int *)(v123 + 36)], v63, v120);
  sub_100032D68((uint64_t)v22, v65, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v67);
  sub_100032DAC((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v48 = &qword_10028C550;
  v68 = v110;
  sub_1000110A4(v65, v110, &qword_10028C550);
  v69 = v115;
  sub_10000B074(v68, v115, &qword_10028C550);
  swift_storeEnumTagMultiPayload(v69, v113, 1);
  v70 = sub_100032C30();
  v71 = sub_100032CCC();
  v72 = (uint64_t)v121;
  _ConditionalContent<>.init(storage:)(v69, v112, v64, v70, v71);
  v73 = v128;
  sub_10000B074(v72, v128, &qword_10028C580);
  swift_storeEnumTagMultiPayload(v73, v126, 0);
  v74 = sub_100032BC0(&qword_10028C5B8, &qword_10028C580, (void (*)(void))sub_100032C30, (void (*)(void))sub_100032CCC);
  v75 = sub_100032BC0(&qword_10028C5D8, &qword_10028C560, (void (*)(void))sub_100032A88, (void (*)(void))sub_100032B24);
  _ConditionalContent<>.init(storage:)(v73, v127, v129, v74, v75);
  sub_10000A020(v72, &qword_10028C580);
  v76 = v68;
  return sub_10000A020(v76, v48);
}

unint64_t sub_100032A88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C590;
  if (!qword_10028C590)
  {
    v1 = sub_1000070BC(&qword_10028C568);
    sub_100007D5C(&qword_10028C598, (uint64_t (*)(uint64_t))&type metadata accessor for Capsule, (uint64_t)&protocol conformance descriptor for Capsule);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C590);
  }
  return result;
}

unint64_t sub_100032B24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C5A0;
  if (!qword_10028C5A0)
  {
    v1 = sub_1000070BC(&qword_10028C548);
    sub_100007D5C(&qword_10028C598, (uint64_t (*)(uint64_t))&type metadata accessor for Capsule, (uint64_t)&protocol conformance descriptor for Capsule);
    sub_100012334(&qword_10028C5A8, &qword_10028C5B0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C5A0);
  }
  return result;
}

uint64_t sub_100032BC0(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000070BC(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100032C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C5C0;
  if (!qword_10028C5C0)
  {
    v1 = sub_1000070BC(&qword_10028C588);
    sub_100007D5C(&qword_10028C5C8, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C5C0);
  }
  return result;
}

unint64_t sub_100032CCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C5D0;
  if (!qword_10028C5D0)
  {
    v1 = sub_1000070BC(&qword_10028C550);
    sub_100007D5C(&qword_10028C5C8, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
    sub_100012334(&qword_10028C5A8, &qword_10028C5B0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C5D0);
  }
  return result;
}

uint64_t sub_100032D68(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100032DAC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100032DEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C5E0;
  if (!qword_10028C5E0)
  {
    v1 = sub_1000070BC(&qword_10028C530);
    sub_100032E70();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C5E0);
  }
  return result;
}

unint64_t sub_100032E70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C5E8;
  if (!qword_10028C5E8)
  {
    v1 = sub_1000070BC(&qword_10028C528);
    sub_100032EF4();
    sub_100012334(&qword_10028C608, &qword_10028C540, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C5E8);
  }
  return result;
}

unint64_t sub_100032EF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C5F0;
  if (!qword_10028C5F0)
  {
    v1 = sub_1000070BC(&qword_10028C520);
    sub_100032F60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C5F0);
  }
  return result;
}

unint64_t sub_100032F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C5F8;
  if (!qword_10028C5F8)
  {
    v1 = sub_1000070BC(&qword_10028C518);
    sub_100012334(&qword_10028C600, &qword_10028C538, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028C5F8);
  }
  return result;
}

NSString sub_100032FE4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002AA0B0 = (uint64_t)result;
  return result;
}

uint64_t sub_100033018()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8088);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000330A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8088);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 16);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_100033130(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8088);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003E9EC);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_1000331E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8148);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100033270@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8148);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 64);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_100033300(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8148);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003ECCC);
  swift_release(KeyPath);
  return swift_release(v2);
}

id sub_1000333B8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8060);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 72);
}

void sub_10003343C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = a2;
  v3 = a2;

}

void *sub_10003346C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E8320);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 80);
  v4 = v3;
  return v3;
}

id sub_1000334F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8320);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 80);
  *a2 = v6;
  return v6;
}

void sub_100033584(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8320);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003EF2C);
  swift_release(KeyPath);

}

void *sub_100033638()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E7F70);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 88);
  v4 = v3;
  return v3;
}

id sub_1000336C4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E7F70);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 88);
  *a2 = v6;
  return v6;
}

void sub_100033750(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E7F70);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003D5C0);
  swift_release(KeyPath);

}

uint64_t sub_100033804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1001E8010);
  v6 = v0;
  v3 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 96);
  sub_100016244(v4, *(_QWORD *)(v1 + 104));
  return v4;
}

uint64_t sub_10003389C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, _QWORD *, _QWORD *, _QWORD *);
  uint64_t v11;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8010);
  v11 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 96);
  v7 = *(_QWORD *)(v3 + 104);
  if (v6)
  {
    v8 = swift_allocObject(&unk_100265198, 32, 7);
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = sub_10003E7CC;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a2 = v9;
  a2[1] = v8;
  return sub_100016244(v6, v7);
}

uint64_t sub_100033964(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v10;

  v4 = *a1;
  v3 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_100265170, 32, 7);
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = sub_10003E784;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8010);
  __chkstk_darwin(KeyPath);
  v10 = v7;
  sub_100016244(v4, v3);
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10003E6E0);
  sub_10002BA44((uint64_t)v6, v5);
  return swift_release(KeyPath);
}

uint64_t sub_100033A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = a3;
  sub_100016244(a2, a3);
  return sub_10002BA44(v3, v4);
}

uint64_t sub_100033AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1001E7FE8);
  v6 = v0;
  v3 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 112);
  sub_100016244(v4, *(_QWORD *)(v1 + 120));
  return v4;
}

uint64_t sub_100033B68@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, unsigned __int8 *);
  uint64_t v11;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E7FE8);
  v11 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 112);
  v7 = *(_QWORD *)(v3 + 120);
  if (v6)
  {
    v8 = swift_allocObject(&unk_100265148, 32, 7);
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = sub_10003D598;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a2 = v9;
  a2[1] = v8;
  return sub_100016244(v6, v7);
}

uint64_t sub_100033C30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, char);
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v10;

  v4 = *a1;
  v3 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_100265120, 32, 7);
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = sub_10003D560;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E7FE8);
  __chkstk_darwin(KeyPath);
  v10 = v7;
  sub_100016244(v4, v3);
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10003D528);
  sub_10002BA44((uint64_t)v6, v5);
  return swift_release(KeyPath);
}

uint64_t sub_100033D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
  sub_100016244(a2, a3);
  return sub_10002BA44(v3, v4);
}

uint64_t sub_100033D9C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E83E8);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t sub_100033E20@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E83E8);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 128);
  return result;
}

uint64_t sub_100033EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E83E8);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003EF90);
  return swift_release(KeyPath);
}

uint64_t sub_100033F54()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8208);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 136));
}

uint64_t sub_100033FDC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8208);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 136);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_10003406C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8208);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003ED60);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_100034124()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E82A8);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t sub_1000341A8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E82A8);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 144);
  return result;
}

uint64_t sub_100034234(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E82A8);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003EFF0);
  return swift_release(KeyPath);
}

uint64_t sub_1000342DC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E82D0);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 145);
}

uint64_t sub_100034360@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E82D0);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 145);
  return result;
}

uint64_t sub_1000343EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E82D0);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003EFDC);
  return swift_release(KeyPath);
}

uint64_t sub_100034494()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8120);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 146);
}

uint64_t sub_100034518@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8120);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 146);
  return result;
}

uint64_t sub_1000345A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8120);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003F090);
  return swift_release(KeyPath);
}

void *sub_10003464C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E8038);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 152);
  v4 = v3;
  return v3;
}

id sub_1000346D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8038);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 152);
  *a2 = v6;
  return v6;
}

void sub_100034764(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8038);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003E80C);
  swift_release(KeyPath);

}

void *sub_100034818()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E8258);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 160);
  v4 = v3;
  return v3;
}

id sub_1000348A4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8258);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 160);
  *a2 = v6;
  return v6;
}

void sub_100034930(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8258);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003F02C);
  swift_release(KeyPath);

}

void *sub_1000349E4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E82F8);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 168);
  v4 = v3;
  return v3;
}

id sub_100034A70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E82F8);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 168);
  *a2 = v6;
  return v6;
}

void sub_100034AFC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E82F8);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003F054);
  swift_release(KeyPath);

}

uint64_t sub_100034BB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E83C0);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  return swift_release(KeyPath);
}

uint64_t sub_100034C30(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E83C0);
  v5 = v1;
  v3 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100034CB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E83C0);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, nullsub_1);
  return swift_release(KeyPath);
}

uint64_t sub_100034D4C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E81E0);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 176);
}

uint64_t sub_100034DD0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E81E0);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 176);
  return result;
}

uint64_t sub_100034E5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E81E0);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003EFC8);
  return swift_release(KeyPath);
}

uint64_t sub_100034F04()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8348);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 177);
}

uint64_t sub_100034F88@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8348);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 177);
  return result;
}

uint64_t sub_100035014(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8348);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003F004);
  return swift_release(KeyPath);
}

void sub_1000350BC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD, __n128);
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v3 = a1 & 1;
  v4 = type metadata accessor for DisambiguationResultModel.RenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001E7F48);
  v24 = v1;
  v9 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v9);
  swift_release(KeyPath);
  if (*(unsigned __int8 *)(v1 + 178) != v3)
  {
    v10 = swift_getKeyPath(&unk_1001E7F70);
    v24 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v10, v9);
    swift_release(v10);
    v11 = *(void **)(v1 + 88);
    if (v11)
    {
      v12 = swift_getKeyPath(&unk_1001E7F48);
      v24 = v2;
      v13 = v11;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v12, v9);
      v14 = swift_release(v12);
      if (*(_BYTE *)(v2 + 178))
        v15 = (unsigned int *)&enum case for DisambiguationResultModel.RenderingMode.dictionary(_:);
      else
        v15 = (unsigned int *)&enum case for DisambiguationResultModel.RenderingMode.disambiguation(_:);
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v7, *v15, v4, v14);
      dispatch thunk of DisambiguationResultModel.renderMode.setter(v7);

    }
    v16 = swift_getKeyPath(&unk_1001E7F98);
    __chkstk_darwin(v16);
    *(&v23 - 3) = 0;
    *(&v23 - 2) = 0;
    *(&v23 - 4) = v2;
    *((_BYTE *)&v23 - 8) = 1;
    v24 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v16, sub_10003D4F0);
    swift_release(v16);
    v17 = swift_getKeyPath(&unk_1001E7FC0);
    __chkstk_darwin(v17);
    *(&v23 - 3) = 0;
    *(&v23 - 2) = 0;
    *(&v23 - 4) = v2;
    *((_BYTE *)&v23 - 8) = 1;
    v24 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v17, sub_10003D50C);
    swift_release(v17);
    v18 = swift_getKeyPath(&unk_1001E7FE8);
    v24 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v18, v9);
    swift_release(v18);
    v19 = *(void (**)(uint64_t, _QWORD, __n128))(v2 + 112);
    if (v19)
    {
      v20 = *(_QWORD *)(v2 + 120);
      v21 = swift_getKeyPath(&unk_1001E7F48);
      v24 = v2;
      swift_retain(v20);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v21, v9);
      v22 = swift_release(v21);
      v19(v2, *(unsigned __int8 *)(v2 + 178), v22);
      sub_10002BA44((uint64_t)v19, v20);
    }
  }
}

uint64_t sub_1000353C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E7F48);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 178);
}

void sub_10003544C(uint64_t a1, char a2)
{
  char v3;

  v3 = *(_BYTE *)(a1 + 178);
  *(_BYTE *)(a1 + 178) = a2;
  sub_1000350BC(v3);
}

uint64_t sub_10003547C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E7F48);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  result = swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 178) == 1)
  {
    v4 = swift_getKeyPath(&unk_1001E7F98);
    v6 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, v4, v2);
    result = swift_release(v4);
    if ((*(_BYTE *)(v0 + 200) & 1) == 0)
    {
      v5 = swift_getKeyPath(&unk_1001E7FC0);
      __chkstk_darwin(v5);
      v6 = v0;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, v5, sub_10003D50C);
      return swift_release(v5);
    }
  }
  return result;
}

uint64_t sub_1000355C0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E7F98);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + 184);
}

__n128 sub_100035648@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  unsigned __int8 v6;
  __n128 result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E7F98);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_BYTE *)(v3 + 200);
  result = *(__n128 *)(v3 + 184);
  *a2 = result;
  a2[1].n128_u8[0] = v6;
  return result;
}

uint64_t sub_1000356DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E7F98);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003D4F0);
  return swift_release(KeyPath);
}

uint64_t sub_100035794(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 192) = a3;
  *(_BYTE *)(a1 + 200) = a4 & 1;
  return sub_10003547C();
}

uint64_t sub_1000357C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E7F48);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  result = swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 178) == 1)
  {
    v4 = swift_getKeyPath(&unk_1001E7FC0);
    v6 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, v4, v2);
    result = swift_release(v4);
    if ((*(_BYTE *)(v0 + 224) & 1) == 0)
    {
      v5 = swift_getKeyPath(&unk_1001E7F98);
      __chkstk_darwin(v5);
      v6 = v0;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, v5, sub_10003D4F0);
      return swift_release(v5);
    }
  }
  return result;
}

uint64_t sub_10003590C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E7FC0);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + 208);
}

__n128 sub_100035994@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  uint64_t KeyPath;
  uint64_t v5;
  unsigned __int8 v6;
  __n128 result;
  __n128 *v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E7FC0);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3[14].n128_u8[0];
  result = v3[13];
  *a2 = result;
  a2[1].n128_u8[0] = v6;
  return result;
}

uint64_t sub_100035A28(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E7FC0);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003D50C);
  return swift_release(KeyPath);
}

uint64_t sub_100035AE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)(a1 + 208) = a2;
  *(_QWORD *)(a1 + 216) = a3;
  *(_BYTE *)(a1 + 224) = a4 & 1;
  return sub_1000357C8();
}

uint64_t sub_100035B14()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8398);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 225);
}

uint64_t sub_100035B98(uint64_t result, char a2)
{
  *(_BYTE *)(result + 225) = a2;
  return result;
}

uint64_t sub_100035BA0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E81B8);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 226);
}

uint64_t sub_100035C24@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E81B8);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 226);
  return result;
}

uint64_t sub_100035CB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E81B8);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003EFB4);
  return swift_release(KeyPath);
}

uint64_t sub_100035D58()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8370);
  v4 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 227);
}

uint64_t sub_100035DDC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8370);
  v7 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 227);
  return result;
}

uint64_t sub_100035E68(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8370);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10003EF68);
  return swift_release(KeyPath);
}

double sub_100035F10()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1001E8280);
  v4[0] = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 232, v4, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 232)).n128_u64[0];
  return result;
}

double sub_100035FAC@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8280);
  v8[0] = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 232, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 232);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

double sub_100036050(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8280);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003EE4C);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t sub_100036108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1 + 232, v6, 1, 0);
  v4 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

double sub_10003616C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1001E8230);
  v4[0] = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 240, v4, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 240)).n128_u64[0];
  return result;
}

double sub_100036208@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8230);
  v8[0] = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 240, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 240);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

double sub_1000362AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8230);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003F068);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t sub_100036364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1 + 240, v6, 1, 0);
  v4 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000363C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_1001E80F8);
  v6[0] = v1;
  v4 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 264, v6, 0, 0);
  return sub_10000B074(v1 + 264, a1, &qword_100298060);
}

uint64_t sub_100036478@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E80F8);
  v7[0] = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 264, v7, 0, 0);
  return sub_10000B074(v3 + 264, a2, &qword_100298060);
}

uint64_t sub_100036528(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;
  _BYTE v7[40];

  sub_10000B074(a1, (uint64_t)v7, &qword_100298060);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E80F8);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10003EA84);
  swift_release(KeyPath);
  return sub_10000A020((uint64_t)v7, &qword_100298060);
}

uint64_t sub_1000365F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 264;
  swift_beginAccess(a1 + 264, v5, 33, 0);
  sub_10003EA9C(a2, v3);
  return swift_endAccess(v5);
}

void sub_100036650(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _BYTE *v35;
  uint64_t v36;
  id v37;
  _BYTE *v38;
  id v39;
  Class isa;
  Class v41;
  void (*v42)(_BYTE *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _BYTE v61[4];
  int v62;
  _BYTE *v63;
  uint64_t v64;
  id v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[5];
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v3 = v2;
  LODWORD(v65) = a2;
  v67 = type metadata accessor for Locale(0);
  v64 = *(_QWORD *)(v67 - 8);
  v5 = __chkstk_darwin(v67);
  v63 = &v61[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v66 = &v61[-v7];
  KeyPath = swift_getKeyPath(&unk_1001E8060);
  v68 = v3;
  v69 = a1;
  *(_QWORD *)&v72 = v3;
  v9 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v10 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v72, KeyPath, sub_10003EE94);
  swift_release(KeyPath);

  v11 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v11, v9);
  swift_release(v11);
  v12 = *(id *)(v3 + 72);
  LOBYTE(v11) = dispatch thunk of PersistedTranslation.showDisambiguation.getter(v12);

  if ((v11 & 1) != 0)
  {
    v13 = swift_getKeyPath(&unk_1001E8060);
    *(_QWORD *)&v72 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v13, v9);
    swift_release(v13);
    v14 = *(id *)(v3 + 72);
    dispatch thunk of PersistedTranslation.speechResult.getter(&v72);

    v15 = *((_QWORD *)&v73 + 1);
    v16 = v74;
    sub_100023AF4(&v72, *((uint64_t *)&v73 + 1));
    dispatch thunk of SpeechResult.alternatives.getter(v71, v15, v16);
    v17 = swift_getKeyPath(&unk_1001E80F8);
    __chkstk_darwin(v17);
    *(_QWORD *)&v61[-16] = v3;
    *(_QWORD *)&v61[-8] = v71;
    v70 = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v70, v17, sub_10003F07C);
    swift_release(v17);
    sub_10000A020((uint64_t)v71, &qword_100298060);
    sub_100009C08(&v72);
  }
  else
  {
    v74 = 0;
    v72 = 0u;
    v73 = 0u;
    v18 = swift_getKeyPath(&unk_1001E80F8);
    __chkstk_darwin(v18);
    *(_QWORD *)&v61[-16] = v3;
    *(_QWORD *)&v61[-8] = &v72;
    v71[0] = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v71, v18, sub_10003F07C);
    swift_release(v18);
    sub_10000A020((uint64_t)&v72, &qword_100298060);
  }
  v62 = sub_10003A614();
  if ((v62 & 1) != 0)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v19 = type metadata accessor for Logger(0);
    sub_10000F66C(v19, (uint64_t)qword_1002AA470);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "asrAlternatives exists and has low-confidence items so creating asrAlternativesBehaviour object", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASRAlternativesBehaviour()), "init");
    v24 = swift_getKeyPath(&unk_1001E82F8);
    __chkstk_darwin(v24);
    *(_QWORD *)&v61[-16] = v3;
    *(_QWORD *)&v61[-8] = v23;
    *(_QWORD *)&v72 = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v72, v24, sub_10003F054);
    swift_release(v24);

    v25 = swift_getKeyPath(&unk_1001E82F8);
    *(_QWORD *)&v72 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v25, v9);
    swift_release(v25);
    v26 = *(_QWORD *)(v3 + 168);
    if (v26)
    {
      *(_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_delegate + 8) = &off_100265100;
      swift_unknownObjectWeakAssign();
    }
  }
  else
  {
    v27 = swift_getKeyPath(&unk_1001E82F8);
    *(_QWORD *)&v72 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v27, v9);
    swift_release(v27);
    if (*(_QWORD *)(v3 + 168))
    {
      if (qword_10028A478 != -1)
        swift_once(&qword_10028A478, sub_100121100);
      v28 = type metadata accessor for Logger(0);
      sub_10000F66C(v28, (uint64_t)qword_1002AA470);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "asrAlternatives is nil or is high confidence, so clearing asrAlternativesBehaviour object", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }

      v32 = swift_getKeyPath(&unk_1001E82F8);
      __chkstk_darwin(v32);
      *(_QWORD *)&v61[-16] = v3;
      *(_QWORD *)&v61[-8] = 0;
      *(_QWORD *)&v72 = v3;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v72, v32, sub_10003EEF8);
      swift_release(v32);
    }
  }
  if ((v65 & 1) != 0)
    objc_msgSend(*(id *)(v3 + 304), "reset");
  sub_100038A50();
  v33 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v33, v9);
  swift_release(v33);
  v34 = *(id *)(v3 + 72);
  v35 = v66;
  dispatch thunk of PersistedTranslation.sourceLocale.getter(v34);

  v36 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v36, v9);
  swift_release(v36);
  v37 = *(id *)(v3 + 72);
  v38 = v63;
  dispatch thunk of PersistedTranslation.targetLocale.getter(v37);

  v39 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v41 = Locale._bridgeToObjectiveC()().super.isa;
  v65 = objc_msgSend(v39, "initWithSourceLocale:targetLocale:", isa, v41);

  v42 = *(void (**)(_BYTE *, uint64_t))(v64 + 8);
  v43 = v67;
  v42(v38, v67);
  v42(v35, v43);
  if ((v62 & 1) != 0
    || (v44 = swift_getKeyPath(&unk_1001E8320),
        *(_QWORD *)&v72 = v3,
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v44, v9),
        swift_release(v44),
        (v45 = *(void **)(v3 + 80)) == 0))
  {
    v47 = 0;
  }
  else
  {
    v46 = v45;
    v47 = sub_1000A3E3C(v65);

  }
  v48 = swift_getKeyPath(&unk_1001E8348);
  __chkstk_darwin(v48);
  *(_QWORD *)&v61[-16] = v3;
  v61[-8] = v47 & 1;
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v72, v48, sub_10003EEE0);
  swift_release(v48);
  v49 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v49, v9);
  swift_release(v49);
  v50 = *(void **)(v3 + 72);
  v51 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)&v72 = v3;
  v52 = v50;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v51, v9);
  swift_release(v51);
  v53 = *(id *)(v3 + 72);
  v54 = (uint64_t)v66;
  dispatch thunk of PersistedTranslation.sourceLocale.getter(v53);

  v55 = swift_allocObject(&unk_1002651C0, 24, 7);
  swift_weakInit(v55 + 16, v3);
  swift_retain(v55);
  v56 = (void *)sub_10003D958(v52, v54, (uint64_t)sub_10003EEF0, v55);

  swift_release(v55);
  v42((_BYTE *)v54, v67);
  swift_release(v55);
  v57 = swift_getKeyPath(&unk_1001E7F70);
  __chkstk_darwin(v57);
  *(_QWORD *)&v61[-16] = v3;
  *(_QWORD *)&v61[-8] = v56;
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v72, v57, sub_10003F040);
  swift_release(v57);

  v58 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v72, v58, v9);
  swift_release(v58);
  v59 = *(id *)(v3 + 72);
  LOBYTE(v58) = sub_1001A602C();

  v60 = swift_getKeyPath(&unk_1001E8120);
  __chkstk_darwin(v60);
  *(_QWORD *)&v61[-16] = v3;
  v61[-8] = v58;
  *(_QWORD *)&v72 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v72, v60, sub_10003F090);
  swift_release(v60);
  sub_100037F7C();

}

uint64_t sub_10003705C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    sub_10003A114(a2);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1000370B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  id v102;
  char v103[24];
  id v104[6];

  v1 = v0;
  v86 = sub_100006DF4(&qword_10028B5B0);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v84 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100006DF4(&qword_10028CDE0);
  v4 = *(_QWORD *)(v3 - 8);
  v95 = v3;
  v96 = v4;
  __chkstk_darwin(v3);
  v93 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028CDE8);
  v7 = *(_QWORD *)(v6 - 8);
  v97 = v6;
  v98 = v7;
  __chkstk_darwin(v6);
  v94 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v9);
  v101 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028CDF0);
  v12 = *(_QWORD *)(v11 - 8);
  v99 = v11;
  v100 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_10028B5A8);
  v87 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006DF4(&qword_10028CDF8);
  v90 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006DF4(&qword_10028CE00);
  v21 = *(_QWORD *)(v20 - 8);
  v91 = v20;
  v92 = v21;
  __chkstk_darwin(v20);
  v88 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001E8148);
  v104[0] = v0;
  v24 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v104, KeyPath, v24);
  swift_release(KeyPath);
  v25 = v0[8];
  swift_beginAccess(v25 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentlyPlayingTranslationID, v104, 33, 0);
  swift_retain(v25);
  v82 = sub_100006DF4(&qword_10028B5B8);
  Published.projectedValue.getter(v82);
  swift_endAccess(v104);
  swift_release(v25);
  v26 = swift_getKeyPath(&unk_1001E8148);
  v104[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v104, v26, v24);
  swift_release(v26);
  v27 = v0[8];
  swift_beginAccess(v27 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentSide, v104, 33, 0);
  swift_retain(v27);
  v28 = sub_100006DF4(&qword_10028CE08);
  Published.projectedValue.getter(v28);
  swift_endAccess(v104);
  swift_release(v27);
  v29 = sub_100012334(&qword_10028B5C0, &qword_10028B5A8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v30 = sub_100012334(&qword_10028CE10, &qword_10028CDF0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v31 = v99;
  v81 = v29;
  Publisher.combineLatest<A>(_:)(v14, v15, v99, v29, v30);
  (*(void (**)(char *, unint64_t))(v100 + 8))(v14, v31);
  v32 = *(void (**)(char *, uint64_t))(v87 + 8);
  v83 = v17;
  v87 = v15;
  v80 = v32;
  v32(v17, v15);
  v33 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v104[0] = (id)static OS_dispatch_queue.main.getter(v33);
  v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v100 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 56);
  v35 = (uint64_t)v101;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v100)(v101, 1, 1, v34);
  v36 = sub_100012334(&qword_10028CE18, &qword_10028CDF8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v99 = sub_10001D984();
  v37 = v88;
  v38 = v89;
  Publisher.receive<A>(on:options:)(v104, v35, v89, v33, v36, v99);
  sub_10000A020(v35, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v90 + 8))(v19, v38);
  v39 = swift_allocObject(&unk_1002651C0, 24, 7);
  swift_weakInit(v39 + 16, v1);
  v40 = swift_allocObject(&unk_1002652B0, 32, 7);
  *(_QWORD *)(v40 + 16) = sub_10003EE04;
  *(_QWORD *)(v40 + 24) = v39;
  v41 = sub_100012334(&qword_10028CE20, &qword_10028CE00, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v42 = v91;
  v43 = v37;
  v44 = Publisher<>.sink(receiveValue:)(sub_10003EE10, v40, v91, v41);
  swift_release(v40);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v43, v42);
  v45 = swift_getKeyPath(&unk_1001E8280);
  v104[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v104, v45, v24);
  swift_release(v45);
  v104[0] = v1;
  v46 = swift_getKeyPath(&unk_1001E8280);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v104, v46, v24);
  swift_release(v46);
  swift_beginAccess(v1 + 29, v104, 33, 0);
  AnyCancellable.store(in:)(v1 + 29);
  swift_endAccess(v104);
  swift_release(v44);
  v104[0] = v1;
  v47 = swift_getKeyPath(&unk_1001E8280);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v104, v47, v24);
  swift_release(v47);
  v48 = swift_getKeyPath(&unk_1001E80F8);
  v104[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v104, v48, v24);
  swift_release(v48);
  swift_beginAccess(v1 + 33, v103, 0, 0);
  sub_10000B074((uint64_t)(v1 + 33), (uint64_t)v104, &qword_100298060);
  v49 = sub_100006DF4(&qword_100298060);
  v50 = v93;
  Optional.publisher.getter(v49);
  v51 = sub_10000A020((uint64_t)v104, &qword_100298060);
  v102 = (id)static OS_dispatch_queue.main.getter(v51);
  v92 = v34;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v100)(v35, 1, 1, v34);
  v52 = sub_100012334(&qword_10028CE28, &qword_10028CDE0, (uint64_t)&protocol conformance descriptor for A?.Publisher);
  v53 = v94;
  v54 = v35;
  v55 = v35;
  v56 = v95;
  Publisher.receive<A>(on:options:)(&v102, v54, v95, v33, v52, v99);
  sub_10000A020(v55, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v96 + 8))(v50, v56);
  v57 = swift_allocObject(&unk_1002651C0, 24, 7);
  swift_weakInit(v57 + 16, v1);
  v58 = sub_100012334(&qword_10028CE30, &qword_10028CDE8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v59 = v97;
  v60 = Publisher<>.sink(receiveValue:)(sub_10003EDB8, v57, v97, v58);
  swift_release(v57);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v53, v59);
  v61 = swift_getKeyPath(&unk_1001E8280);
  v104[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v104, v61, v24);
  swift_release(v61);
  v104[0] = v1;
  v62 = swift_getKeyPath(&unk_1001E8280);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v104, v62, v24);
  swift_release(v62);
  swift_beginAccess(v1 + 29, v104, 33, 0);
  AnyCancellable.store(in:)(v1 + 29);
  swift_endAccess(v104);
  swift_release(v60);
  v104[0] = v1;
  v63 = swift_getKeyPath(&unk_1001E8280);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v104, v63, v24);
  swift_release(v63);
  v64 = swift_getKeyPath(&unk_1001E8208);
  v104[0] = v1;
  v98 = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v104, v64, v24);
  result = swift_release(v64);
  v66 = v1[17];
  if (v66)
  {
    swift_beginAccess(v66 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager__allowedTranslationID, v104, 33, 0);
    swift_retain(v66);
    v67 = v83;
    Published.projectedValue.getter(v82);
    swift_endAccess(v104);
    v68 = swift_release(v66);
    v104[0] = (id)static OS_dispatch_queue.main.getter(v68);
    v69 = (uint64_t)v101;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v100)(v101, 1, 1, v92);
    v70 = v84;
    v71 = v87;
    Publisher.receive<A>(on:options:)(v104, v69, v87, v33, v81, v99);
    sub_10000A020(v69, &qword_100296BE0);

    v80(v67, v71);
    v72 = swift_allocObject(&unk_1002651C0, 24, 7);
    swift_weakInit(v72 + 16, v1);
    v73 = sub_100012334(&qword_10028B5C8, &qword_10028B5B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v74 = v86;
    v75 = Publisher<>.sink(receiveValue:)(sub_10003EE44, v72, v86, v73);
    swift_release(v72);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v70, v74);
    v76 = swift_getKeyPath(&unk_1001E8280);
    v104[0] = v1;
    v77 = v98;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v104, v76, v98);
    swift_release(v76);
    v104[0] = v1;
    v78 = swift_getKeyPath(&unk_1001E8280);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v104, v78, v77);
    swift_release(v78);
    swift_beginAccess(v1 + 29, v104, 33, 0);
    AnyCancellable.store(in:)(v1 + 29);
    swift_endAccess(v104);
    swift_release(v75);
    v104[0] = v1;
    v79 = swift_getKeyPath(&unk_1001E8280);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v104, v79, v77);
    return swift_release(v79);
  }
  return result;
}

uint64_t sub_100037BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[24];

  v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v24, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    KeyPath = swift_getKeyPath(&unk_1001E8060);
    v23 = v8;
    v10 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v10);
    swift_release(KeyPath);
    v11 = objc_msgSend(*(id *)(v8 + 72), "identifier");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    if (a2)
    {
      if (v12 != a1 || v14 != a2)
        _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v12, v14, 0);
    }
    swift_bridgeObjectRelease(v14);
    v16 = swift_getKeyPath(&unk_1001E82A8);
    __chkstk_darwin(v16);
    v23 = v8;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v16, sub_10003EE6C);
    swift_release(v16);
    v17 = swift_getKeyPath(&unk_1001E8060);
    v23 = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v17, v10);
    swift_release(v17);
    v18 = objc_msgSend(*(id *)(v8 + 72), "identifier");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    if (!a2 || v19 == a1 && v21 == a2)
    {
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v19, v21, 0);
      swift_bridgeObjectRelease(v21);
    }
    v22 = swift_getKeyPath(&unk_1001E82D0);
    __chkstk_darwin(v22);
    v23 = v8;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v22, sub_10003EE84);
    swift_release(v8);
    return swift_release(v22);
  }
  return result;
}

uint64_t sub_100037ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10003A84C();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100037F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_100038A50();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100037F7C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  void *v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  id v70[4];
  _QWORD v71[3];

  v1 = v0;
  v2 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v2);
  v68 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100006DF4(&qword_10028CDB8);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v66 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028CDC0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v61 - v10;
  KeyPath = swift_getKeyPath(&unk_1001E8230);
  v71[0] = v0;
  v63 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v71, KeyPath, v63);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 30, v71, 0, 0);
  v13 = v0[30];
  v14 = swift_bridgeObjectRetain(v13);
  sub_10003869C(v14);
  swift_bridgeObjectRelease(v13);
  v62 = v9;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v15 = v5;
    v16 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v15 = v5;
    v16 = &_swiftEmptySetSingleton;
  }
  v64 = v1 + 30;
  v65 = v15;
  v17 = swift_getKeyPath(&unk_1001E8230);
  __chkstk_darwin(v17);
  *(&v61 - 2) = (uint64_t)v1;
  *(&v61 - 1) = (uint64_t)v16;
  v70[0] = v1;
  v18 = v63;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v70, v17, sub_10003EDA0);
  swift_release(v17);
  swift_bridgeObjectRelease(v16);
  v19 = swift_getKeyPath(&unk_1001E7F70);
  v70[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v70, v19, v18);
  swift_release(v19);
  v20 = (void *)v1[11];
  v21 = v6;
  if (v20)
  {
    v22 = v20;
    v23 = v66;
    dispatch thunk of DisambiguationResultModel.$sourceAttributedText.getter();

    v24 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    v70[0] = (id)static OS_dispatch_queue.main.getter();
    v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v26 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v68, 1, 1, v25);
    v27 = sub_100012334(&qword_10028CDC8, &qword_10028CDB8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v28 = sub_10001D984();
    v29 = v11;
    v30 = v69;
    Publisher.receive<A>(on:options:)(v70, v26, v69, v24, v27, v28);
    sub_10000A020(v26, &qword_100296BE0);

    v31 = v23;
    v21 = v6;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v31, v30);
    v32 = swift_allocObject(&unk_1002651C0, 24, 7);
    swift_weakInit(v32 + 16, v1);
    v33 = sub_100012334(&qword_10028CDD0, &qword_10028CDC0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v34 = v65;
    v35 = Publisher<>.sink(receiveValue:)(sub_10003EDB8, v32, v65, v33);
    swift_release(v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v29, v34);
    v36 = swift_getKeyPath(&unk_1001E8230);
    v70[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v70, v36, v18);
    swift_release(v36);
    v70[0] = v1;
    v37 = swift_getKeyPath(&unk_1001E8230);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v70, v37, v18);
    swift_release(v37);
    v38 = v64;
    swift_beginAccess(v64, v70, 33, 0);
    AnyCancellable.store(in:)(v38);
    swift_endAccess(v70);
    swift_release(v35);
    v70[0] = v1;
    v39 = swift_getKeyPath(&unk_1001E8230);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v70, v39, v18);
    swift_release(v39);
  }
  v40 = swift_getKeyPath(&unk_1001E7F70);
  v70[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v70, v40, v18);
  result = swift_release(v40);
  v42 = (void *)v1[11];
  if (v42)
  {
    v43 = v42;
    v45 = v65;
    v44 = v66;
    dispatch thunk of DisambiguationResultModel.$targetAttributedText.getter();

    v46 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    v70[0] = (id)static OS_dispatch_queue.main.getter();
    v47 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56);
    v61 = v21;
    v49 = (uint64_t)v68;
    v48(v68, 1, 1, v47);
    v50 = sub_100012334(&qword_10028CDC8, &qword_10028CDB8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v51 = sub_10001D984();
    v52 = v62;
    v53 = v69;
    Publisher.receive<A>(on:options:)(v70, v49, v69, v46, v50, v51);
    sub_10000A020(v49, &qword_100296BE0);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v53);
    v54 = swift_allocObject(&unk_1002651C0, 24, 7);
    swift_weakInit(v54 + 16, v1);
    v55 = sub_100012334(&qword_10028CDD0, &qword_10028CDC0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v56 = Publisher<>.sink(receiveValue:)(sub_10003EDC0, v54, v45, v55);
    swift_release(v54);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v52, v45);
    v57 = swift_getKeyPath(&unk_1001E8230);
    v70[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v70, v57, v18);
    swift_release(v57);
    v70[0] = v1;
    v58 = swift_getKeyPath(&unk_1001E8230);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v70, v58, v18);
    swift_release(v58);
    v59 = v64;
    swift_beginAccess(v64, v70, 33, 0);
    AnyCancellable.store(in:)(v59);
    swift_endAccess(v70);
    swift_release(v56);
    v70[0] = v1;
    v60 = swift_getKeyPath(&unk_1001E8230);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v70, v60, v18);
    return swift_release(v60);
  }
  return result;
}

_QWORD *sub_10003869C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for AnyCancellable(0);
    v5 = sub_100007D5C(&qword_10028CDD8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v1 = v26[0];
    v24 = v26[1];
    v7 = v26[2];
    v8 = v26[3];
    v9 = v26[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v13)
      return (_QWORD *)sub_10000F7C4(v1);
    v22 = *(_QWORD *)(v24 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        return (_QWORD *)sub_10000F7C4(v1);
      v22 = *(_QWORD *)(v24 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          return (_QWORD *)sub_10000F7C4(v1);
        v22 = *(_QWORD *)(v24 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            return (_QWORD *)sub_10000F7C4(v1);
          v22 = *(_QWORD *)(v24 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              return (_QWORD *)sub_10000F7C4(v1);
            v22 = *(_QWORD *)(v24 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v24 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_31;
                }
              }
              return (_QWORD *)sub_10000F7C4(v1);
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain(v20);
    if (!v20)
      return (_QWORD *)sub_10000F7C4(v1);
    while (1)
    {
      AnyCancellable.cancel()();
      result = (_QWORD *)swift_release(v20);
      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(result);
      if (v17)
      {
        v18 = v17;
        v25 = v17;
        v19 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v27;
        swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      return (_QWORD *)sub_10000F7C4(v1);
    }
  }
  __break(1u);
  return result;
}

void sub_10003893C(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t KeyPath;
  id v7;
  uint64_t v8;
  char v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    KeyPath = swift_getKeyPath(&unk_1001E8258);
    __chkstk_darwin(KeyPath);
    v8 = v5;
    sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    v7 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003EDD0);
    swift_release(v5);
    swift_release(KeyPath);

  }
}

uint64_t sub_100038A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  void (*v14)();
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for GenderTipManager.Registration(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_1001E8060);
  v17 = v0;
  v6 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(id *)(v0 + 72);
  LOBYTE(KeyPath) = dispatch thunk of PersistedTranslation.showDisambiguation.getter();

  if ((KeyPath & 1) != 0)
  {
    v8 = swift_getKeyPath(&unk_1001E8208);
    v17 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v8, v6);
    swift_release(v8);
    v9 = *(_QWORD *)(v1 + 136);
    if (v9)
    {
      v10 = swift_getKeyPath(&unk_1001E8060);
      v17 = v1;
      swift_retain(v9);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v10, v6);
      swift_release(v10);
      v11 = *(id *)(v1 + 72);
      sub_1000CC8A4(v11, 0, v4);
      v12 = sub_1000CCA88(v4);
      sub_10003ED24((uint64_t)v4);
      swift_release(v9);

    }
    else
    {
      v12 = 0;
    }
    v13 = swift_getKeyPath(&unk_1001E81E0);
    __chkstk_darwin(v13);
    *(&v16 - 2) = v1;
    *((_BYTE *)&v16 - 8) = v12 & 1;
    v17 = v1;
    v14 = sub_10003EFC8;
  }
  else
  {
    v13 = swift_getKeyPath(&unk_1001E81E0);
    __chkstk_darwin(v13);
    *(&v16 - 2) = v1;
    *((_BYTE *)&v16 - 8) = 0;
    v17 = v1;
    v14 = sub_10003ED0C;
  }
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v17, v13, v14);
  return swift_release(v13);
}

void sub_100038CBC(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_1001E8060);
    v18 = v4;
    v12 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, KeyPath, v12);
    swift_release(KeyPath);
    objc_msgSend(*(id *)(v4 + 72), "setTtsPlaybackRateDouble:", *(double *)&a1);
    LOBYTE(KeyPath) = sub_1000239E8(*(double *)&a1);
    v13 = swift_getKeyPath(&unk_1001E8120);
    __chkstk_darwin(v13);
    *(&v17 - 2) = v4;
    *((_BYTE *)&v17 - 8) = KeyPath;
    v18 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, v13, sub_10003EBE8);
    swift_release(v13);
  }
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
  v15 = swift_allocObject(&unk_100265260, 41, 7);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = v4;
  *(_BYTE *)(v15 + 40) = a3 & 1;
  swift_retain(v4);
  v16 = sub_100049DC0((uint64_t)v10, (uint64_t)&unk_10028CDA0, v15);
  swift_release(v16);
}

uint64_t sub_100038EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)(v5 + 208) = a5;
  *(_QWORD *)(v5 + 96) = a4;
  v6 = sub_100006DF4(&qword_10028F190);
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 112) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 120) = v8;
  *(_QWORD *)(v5 + 128) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028F1B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 144) = swift_task_alloc(v9);
  return swift_task_switch(sub_100038F5C, 0, 0);
}

uint64_t sub_100038F5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD **)(v0 + 96);
  KeyPath = swift_getKeyPath(&unk_1001E8148);
  *(_QWORD *)(v0 + 152) = OBJC_IVAR____TtC17SequoiaTranslator29CommittedTranslationViewModel___observationRegistrar;
  *(_QWORD *)(v0 + 48) = v1;
  v3 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  *(_QWORD *)(v0 + 160) = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 48, KeyPath, v3);
  swift_release(KeyPath);
  v4 = v1[8];
  *(_QWORD *)(v0 + 168) = v4;
  v5 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)(v0 + 32) = v1;
  swift_retain(v4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 32, v5, v3);
  swift_release(v5);
  v6 = (void *)v1[9];
  *(_QWORD *)(v0 + 176) = v6;
  v7 = swift_getKeyPath(&unk_1001E8088);
  *(_QWORD *)(v0 + 40) = v1;
  v8 = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, v7, v3);
  swift_release(v7);
  v9 = v1[2];
  if (v9)
  {
    v10 = swift_getKeyPath(&unk_1001E8170);
    v11 = swift_getKeyPath(&unk_1001E8198);
    v12 = swift_retain(v9);
    static Published.subscript.getter((_QWORD *)(v0 + 16), v12, v10);
    swift_release(v11);
    swift_release(v10);
    swift_release(v9);
    v9 = *(_QWORD *)(v0 + 16);
    v13 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(v0 + 184) = v13;
  v14 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
  v15 = (_QWORD *)swift_task_alloc(dword_100298DAC);
  *(_QWORD *)(v0 + 192) = v15;
  *v15 = v0;
  v15[1] = sub_100039150;
  return sub_1001D0ED8((uint64_t)v8, v14, *(_BYTE *)(v0 + 208), v9, v13, 0, 0, 0);
}

uint64_t sub_100039150()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  v7 = v2 + 168;
  v5 = *(_QWORD *)(v2 + 168);
  v6 = *(void **)(v7 + 8);
  swift_bridgeObjectRelease(v4);
  if (v0)
  {
    swift_release(v5);

    v8 = sub_1000393F8;
  }
  else
  {

    swift_release(v5);
    v8 = sub_1000391E0;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000391E0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(unsigned __int8 *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 96);
  KeyPath = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)(v0 + 80) = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 80, KeyPath, v1);
  swift_release(KeyPath);
  v5 = *(id *)(v3 + 72);
  dispatch thunk of PersistedTranslation.selfLoggingInvocationId.getter();

  if (v2)
    v6 = 1;
  else
    v6 = 2;
  v7 = swift_getKeyPath(&unk_1001E8060);
  *(_QWORD *)(v0 + 88) = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 88, v7, v1);
  swift_release(v7);
  objc_msgSend(*(id *)(v3 + 72), "ttsPlaybackRateDouble");
  v9 = 2;
  v10 = 3;
  v11 = 3;
  if (v8 == 1.25)
    v11 = 4;
  if (v8 != 1.0)
    v10 = v11;
  if (v8 != 0.75)
    v9 = v10;
  if (v8 == 0.5)
    v12 = 1;
  else
    v12 = v9;
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  sub_10000B074(*(_QWORD *)(v0 + 144), v13, (uint64_t *)&unk_10028F1B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10000A020(*(_QWORD *)(v0 + 136), (uint64_t *)&unk_10028F1B0);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v16, *(_QWORD *)(v0 + 136), v18);
    v19 = (void *)objc_opt_self(_LTSELFLoggingInvocation);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "translationTTSPlayedWithInvocationId:sourceOrTargetLanguage:isAutoplayTranslation:ttsPlaybackSpeed:audioChannel:", isa, v6, 0, v12, 1);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  sub_10000A020(*(_QWORD *)(v0 + 144), (uint64_t *)&unk_10028F1B0);
  v21 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000393F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v1 = *(_QWORD *)(v0 + 200);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA470);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 200);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 72) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Exception while toggling TTS: %@", v8, 0xCu);
    v11 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 200));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 200);

  v13 = (void *)_convertErrorToNSError(_:)(v12);
  v14 = objc_msgSend(v13, "underlyingErrors");

  v15 = sub_100006DF4((uint64_t *)&unk_100296430);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if (*(_QWORD *)(v16 + 16))
  {
    v17 = *(_QWORD *)(v16 + 32);
    swift_errorRetain(v17);
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)(v0 + 56) = v17;
    v18 = sub_10000A05C(0, (unint64_t *)&qword_10028AA48, NSError_ptr);
    if ((swift_dynamicCast(v0 + 64, v0 + 56, v15, v18, 6) & 1) != 0)
    {
      v19 = *(void **)(v0 + 64);
      v20 = objc_msgSend(v19, "domain");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      if (v21 == 0x65746F6D6552544CLL && v23 == 0xEF6572756C696146)
      {
        v24 = swift_bridgeObjectRelease(0xEF6572756C696146).n128_u64[0];
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, 0x65746F6D6552544CLL, 0xEF6572756C696146, 0);
        v24 = swift_bridgeObjectRelease(v23).n128_u64[0];
        if ((v27 & 1) == 0)
        {
          v38 = *(_QWORD *)(v0 + 200);
          goto LABEL_19;
        }
      }
      v28 = objc_msgSend(v19, "code", *(double *)&v24);
      v29 = *(_QWORD *)(v0 + 200);
      if (v28 == (id)919)
      {
        v30 = *(_QWORD *)(v0 + 96);
        v31 = *(_QWORD *)(v0 + 104);
        v32 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
        v33 = swift_allocObject(&unk_1002651C0, 24, 7);
        swift_weakInit(v33 + 16, v30);
        type metadata accessor for MainActor(0);
        v34 = swift_retain(v33);
        v35 = static MainActor.shared.getter(v34);
        v36 = (_QWORD *)swift_allocObject(&unk_100265288, 40, 7);
        v36[2] = v35;
        v36[3] = &protocol witness table for MainActor;
        v36[4] = v33;
        swift_release(v33);
        v37 = sub_100049F0C(v31, (uint64_t)&unk_10028CDB0, (uint64_t)v36);
        swift_errorRelease(v29);
        swift_release(v37);
LABEL_20:

        goto LABEL_21;
      }
      v38 = *(_QWORD *)(v0 + 200);
LABEL_19:
      swift_errorRelease(v38);
      goto LABEL_20;
    }
    v26 = *(_QWORD *)(v0 + 200);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRelease(v16);
    v26 = v25;
  }
  swift_errorRelease(v26);
LABEL_21:
  v39 = *(_QWORD *)(v0 + 136);
  v40 = *(_QWORD *)(v0 + 128);
  v41 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[6] = a1;
  v4[7] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[8] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000398BC, v6, v7);
}

uint64_t sub_1000398BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    KeyPath = swift_getKeyPath(&unk_1001E81B8);
    v4 = swift_task_alloc(32);
    *(_QWORD *)(v4 + 16) = Strong;
    *(_BYTE *)(v4 + 24) = 1;
    *(_QWORD *)(v0 + 40) = Strong;
    sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, KeyPath, sub_10003ECBC);
    swift_release(KeyPath);
    swift_release(Strong);
    swift_task_dealloc(v4);
  }
  **(_BYTE **)(v0 + 48) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000399D4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  id v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)();
  void *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  int v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = v3;
  v67 = a3;
  v62 = a2;
  v6 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_10028CD88);
  __chkstk_darwin(v10);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DisambiguationResultModel.LinkRangeInfo(0);
  v66 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v65 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_10028CD90);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v58 - v19;
  v21 = type metadata accessor for DisambiguationLinkInfo(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_1001E7F98);
    __chkstk_darwin(KeyPath);
    *(&v58 - 3) = 0;
    *(&v58 - 4) = (id)v4;
    v68 = v4;
    sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v68, KeyPath, sub_10003D4F0);
    swift_release(KeyPath);
    v32 = swift_getKeyPath(&unk_1001E7FC0);
    __chkstk_darwin(v32);
    *(&v58 - 3) = 0;
    v56 = 0;
    *(&v58 - 4) = (id)v4;
    LOBYTE(v57) = 1;
    v68 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v68, v32, sub_10003D50C);
    swift_release(v32);
    return;
  }
  v60 = v25;
  v61 = v23;
  v59 = v13;
  v26 = swift_getKeyPath(&unk_1001E7F70);
  v63 = v4 + OBJC_IVAR____TtC17SequoiaTranslator29CommittedTranslationViewModel___observationRegistrar;
  v68 = v4;
  v64 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v26, v64);
  swift_release(v26);
  v27 = *(void **)(v4 + 88);
  if (v27)
  {
    v28 = v27;
    v29 = (void *)DisambiguationResultModel.disambiguableResult.getter();

    if (v29)
    {
      v58 = v28;
      sub_10000B074(v67, (uint64_t)v20, &qword_10028CD90);
      v30 = v61;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v61) == 1)
      {

        sub_10000A020((uint64_t)v20, &qword_10028CD90);
      }
      else
      {
        v33 = v60;
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v60, v20, v30);
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v18, v33, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v30);
        v34 = v58;
        dispatch thunk of DisambiguationResultModel.rangeInfo(for:)(v18);
        sub_10000A020((uint64_t)v18, &qword_10028CD90);
        v35 = v66;
        v36 = v59;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v12, 1, v59) == 1)
        {
          (*(void (**)(char *, uint64_t))(v22 + 8))(v60, v30);

          sub_10000A020((uint64_t)v12, &qword_10028CD88);
        }
        else
        {
          v37 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
          v38 = v35;
          v39 = v65;
          v37(v65, v12, v36);
          v40 = swift_getKeyPath(&unk_1001E7F48);
          v68 = v4;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v40, v64);
          v41 = swift_release(v40);
          if ((*(_BYTE *)(v4 + 178) & 1) == 0)
          {
            (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, v62, v6, v41);
            v44 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
            v45 = v58;
            if (v44 == enum case for DisambiguationResultModel.TextLocation.source(_:))
            {
              v46 = v65;
              v47 = (void *)DisambiguationResultModel.LinkRangeInfo.targetRange.getter();
              v49 = v48;
              v50 = swift_getKeyPath(&unk_1001E7FC0);
              __chkstk_darwin(v50);
              *(&v58 - 4) = (id)v4;
              *(&v58 - 3) = v47;
              v56 = v49;
              LOBYTE(v57) = 0;
              v68 = v4;
              v51 = sub_10003D50C;
            }
            else
            {
              v46 = v65;
              if (v44 != enum case for DisambiguationResultModel.TextLocation.target(_:))
              {
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "SequoiaTranslator/CommittedTranslationViewModel.swift", 53, 2, 297, 0);
                __break(1u);
                return;
              }
              v52 = (void *)DisambiguationResultModel.LinkRangeInfo.sourceRange.getter();
              v54 = v53;
              v50 = swift_getKeyPath(&unk_1001E7F98);
              __chkstk_darwin(v50);
              *(&v58 - 4) = (id)v4;
              *(&v58 - 3) = v52;
              v56 = v54;
              LOBYTE(v57) = 0;
              v68 = v4;
              v51 = sub_10003D4F0;
            }
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v68, v50, v51);

            v55 = swift_release(v50);
            (*(void (**)(char *, uint64_t, __n128))(v38 + 8))(v46, v59, v55);
            (*(void (**)(char *, uint64_t))(v22 + 8))(v60, v61);
            return;
          }

          (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v36);
          (*(void (**)(char *, uint64_t))(v22 + 8))(v60, v61);
        }
      }
    }
    else
    {

    }
  }
  v42 = swift_getKeyPath(&unk_1001E7F98);
  __chkstk_darwin(v42);
  *(&v58 - 3) = 0;
  *(&v58 - 4) = (id)v4;
  v68 = v4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v68, v42, sub_10003D4F0);
  swift_release(v42);
  v43 = swift_getKeyPath(&unk_1001E7FC0);
  __chkstk_darwin(v43);
  *(&v58 - 3) = 0;
  v56 = 0;
  *(&v58 - 4) = (id)v4;
  LOBYTE(v57) = 1;
  v68 = v4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v68, v43, sub_10003D50C);
  swift_release(v43);
}

id sub_10003A114(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t KeyPath;
  uint64_t v24;
  id v25;
  id result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  id v36;
  char *v37;
  id v38;
  Class isa;
  Class v40;
  id v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = v1;
  v4 = type metadata accessor for CoreAnalyticsLogger.CardType(0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  __chkstk_darwin(v4);
  v55 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  v53 = *(_QWORD *)(v6 - 8);
  v54 = v6;
  v7 = __chkstk_darwin(v6);
  v52 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v51 = (char *)&v49 - v9;
  v10 = sub_100006DF4(&qword_10028CD80);
  __chkstk_darwin(v10);
  v58 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CoreAnalyticsLogger.InteractionLocation(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v59 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v61 = v12;
  v15 = type metadata accessor for Logger(0);
  sub_10000F66C(v15, (uint64_t)qword_1002AA470);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "User changed disambiguation selection; saving changes to the database",
      v18,
      2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v60 = v13;
  if (a1)
  {
    v19 = objc_msgSend(a1, "edge");
    v20 = objc_msgSend(v19, "type");

    v21 = *(void **)(v2 + 304);
    v50 = v20;
    v22 = objc_msgSend(v21, "hasAnyChangeOfType:", v20);
  }
  else
  {
    v50 = 0;
    v22 = 1;
  }
  sub_100023AF4((_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 48));
  KeyPath = swift_getKeyPath(&unk_1001E8060);
  v62 = v2;
  v24 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, KeyPath, v24);
  swift_release(KeyPath);
  v25 = *(id *)(v2 + 72);
  dispatch thunk of TranslationStore.updateDisambiguation(for:)();

  result = objc_msgSend(*(id *)(v2 + 304), "addUserSelection:", a1);
  if (a1 && (v22 & 1) == 0)
  {
    v27 = *(_QWORD *)(v2 + 248);
    v28 = *(_QWORD *)(v2 + 256);
    sub_10000B720(v27, v28);
    v29 = v58;
    sub_10000B734(v27, v28, v58);
    v31 = v60;
    v30 = v61;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v29, 1, v61) == 1)
    {
      return (id)sub_10000A020(v29, &qword_10028CD80);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v59, v29, v30);
      v32 = swift_getKeyPath(&unk_1001E8060);
      v62 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, v32, v24);
      swift_release(v32);
      v33 = *(id *)(v2 + 72);
      v34 = v51;
      dispatch thunk of PersistedTranslation.sourceLocale.getter(v33);

      v35 = swift_getKeyPath(&unk_1001E8060);
      v62 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, v35, v24);
      swift_release(v35);
      v36 = *(id *)(v2 + 72);
      v37 = v52;
      dispatch thunk of PersistedTranslation.targetLocale.getter(v36);

      v38 = objc_allocWithZone((Class)_LTLocalePair);
      isa = Locale._bridgeToObjectiveC()().super.isa;
      v40 = Locale._bridgeToObjectiveC()().super.isa;
      v41 = objc_msgSend(v38, "initWithSourceLocale:targetLocale:", isa, v40);

      v42 = v54;
      v43 = *(void (**)(char *, uint64_t))(v53 + 8);
      v43(v37, v54);
      v43(v34, v42);
      type metadata accessor for CoreAnalyticsLogger(0);
      v44 = static CoreAnalyticsLogger.shared.getter();
      v46 = v55;
      v45 = v56;
      v47 = v57;
      (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for CoreAnalyticsLogger.CardType.committed(_:), v57);
      v48 = v59;
      dispatch thunk of CoreAnalyticsLogger.didInteractWithDisambiguation(fromCard:location:type:localePair:)(v46, v59, v50, v41);

      swift_release(v44);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v48, v30);
    }
  }
  return result;
}

uint64_t sub_10003A614()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  KeyPath = swift_getKeyPath(&unk_1001E80F8);
  v29[0] = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v29, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 264, v25, 0, 0);
  sub_10000B074(v0 + 264, (uint64_t)&v26, &qword_100298060);
  if (v27)
  {
    sub_10003E994(&v26, (uint64_t)v29);
    v3 = v30;
    v4 = v31;
    sub_100023AF4(v29, v30);
    v5 = dispatch thunk of SpeechSausage.tokenBins.getter(v3, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      v8 = v5 + 32;
      swift_bridgeObjectRetain(v5);
      do
      {
        sub_100023AB0(v8, (uint64_t)&v26);
        v9 = v27;
        v10 = v28;
        sub_100023AF4(&v26, v27);
        sub_1001A60A8(v9, v10, (uint64_t)v22);
        v11 = v23;
        v12 = v24;
        sub_100023AF4(v22, v23);
        LOBYTE(v9) = dispatch thunk of SpeechTokenAlternatives.isLowConfidence.getter(v11, v12);
        sub_100023AB0((uint64_t)&v26, (uint64_t)v19);
        if ((v9 & 1) != 0)
        {
          v13 = v20;
          v14 = v21;
          sub_100023AF4(v19, v20);
          v15 = sub_1001A6120(0, v13, v14);
          v16 = *(_QWORD *)(v15 + 16);
          swift_bridgeObjectRelease(v15);
          sub_100009C08(v19);
          sub_100009C08(v22);
          sub_100009C08(&v26);
          if (v16)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            v17 = 1;
            goto LABEL_13;
          }
        }
        else
        {
          sub_100009C08(v19);
          sub_100009C08(v22);
          sub_100009C08(&v26);
        }
        v8 += 40;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease_n(v6, 2);
    }
    else
    {
      swift_bridgeObjectRelease(v5);
    }
    v17 = 0;
LABEL_13:
    sub_100009C08(v29);
  }
  else
  {
    sub_10000A020((uint64_t)&v26, &qword_100298060);
    return 0;
  }
  return v17;
}

void sub_10003A84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t);
  unsigned int *v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t Strong;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  Class isa;
  Class v41;
  id v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  id v46;
  Swift::Bool v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Class v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  id v71;
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83[8];
  _QWORD v84[3];
  __int128 v85;
  uint64_t v86;
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v80 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v79 = (char *)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)v72 - v5;
  v7 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v81 = (uint64_t)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DisambiguationResultModel.RenderingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10003A614() & 1) != 0)
  {
    v75 = v2;
    v77 = v8;
    v78 = v7;
    KeyPath = swift_getKeyPath(&unk_1001E80F8);
    v15 = v0 + OBJC_IVAR____TtC17SequoiaTranslator29CommittedTranslationViewModel___observationRegistrar;
    v84[0] = v0;
    v16 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v84, KeyPath, v16);
    swift_release(KeyPath);
    swift_beginAccess(v0 + 264, v84, 0, 0);
    sub_10000B074(v0 + 264, (uint64_t)&v85, &qword_100298060);
    if (v86)
    {
      sub_10003E994(&v85, (uint64_t)v87);
      v17 = swift_getKeyPath(&unk_1001E7F48);
      *(_QWORD *)&v85 = v0;
      v76 = v16;
      v72[1] = v15;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v17, v16);
      swift_release(v17);
      v18 = *(unsigned __int8 *)(v0 + 178);
      v73 = v11;
      v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
      if (v18)
        v20 = (unsigned int *)&enum case for DisambiguationResultModel.RenderingMode.dictionary(_:);
      else
        v20 = (unsigned int *)&enum case for DisambiguationResultModel.RenderingMode.disambiguation(_:);
      v21 = *v20;
      v74 = v10;
      v19(v13, v21, v10);
      v22 = objc_allocWithZone((Class)NSMutableAttributedString);
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v22, "initWithString:", v23);

      v25 = v88;
      v26 = v89;
      sub_100023AF4(v87, v88);
      v27 = dispatch thunk of SpeechSausage.tokenBins.getter(v25, v26);
      v28 = v27;
      v29 = *(_QWORD *)(v27 + 16);
      if (v29)
      {
        v30 = (_QWORD *)(v27 + 32);
        do
        {
          sub_10003B0B0(v30, (uint64_t)v13, v24);
          v30 += 5;
          --v29;
        }
        while (v29);
      }
      swift_bridgeObjectRelease(v28);
      v31 = v76;
      swift_weakInit(v83, v1);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v81, enum case for DisambiguationResultModel.TextLocation.source(_:), v78);
      swift_beginAccess(v83, &v85, 0, 0);
      Strong = swift_weakLoadStrong(v83);
      if (Strong)
      {
        v33 = Strong;
        v34 = swift_getKeyPath(&unk_1001E8060);
        v82 = v33;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v82, v34, v31);
        swift_release(v34);
        v35 = *(id *)(v33 + 72);
        v36 = swift_release(v33);
        v37 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v36);
        v38 = v79;
        dispatch thunk of PersistedTranslation.targetLocale.getter(v37);
        v39 = objc_allocWithZone((Class)_LTLocalePair);
        isa = Locale._bridgeToObjectiveC()().super.isa;
        v41 = Locale._bridgeToObjectiveC()().super.isa;
        v42 = objc_msgSend(v39, "initWithSourceLocale:targetLocale:", isa, v41);

        v43 = *(void (**)(char *, uint64_t))(v80 + 8);
        v44 = v38;
        v45 = v75;
        v43(v44, v75);
        v43(v6, v45);

        v46 = objc_msgSend(v42, "sourceLocale");
        static Locale._unconditionallyBridgeFromObjectiveC(_:)(v46);

        v47 = Locale.isRTL()();
        v43(v6, v45);
      }
      else
      {
        v47 = 0;
      }
      v58 = v74;
      type metadata accessor for DisambiguationResultModel(0);
      v59 = static DisambiguationResultModel.defaultAttributes(forRTL:)(v47);
      v61 = v77;
      v60 = v78;
      if (!v59)
        v59 = sub_1001A4A88((uint64_t)_swiftEmptyArrayStorage);
      v62 = v59;
      v63 = sub_1000ABD9C(v81, (uint64_t)v13);
      if (!v63)
        v63 = sub_1001A4A88((uint64_t)_swiftEmptyArrayStorage);
      v64 = sub_10003B374(v62, v63);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v81, v60);
      type metadata accessor for Key(0);
      sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
      v65 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v64);
      objc_msgSend(v24, "addAttributes:range:", v65, 0, objc_msgSend(v24, "length"));

      if (qword_10028A478 != -1)
        swift_once(&qword_10028A478, sub_100121100);
      v66 = type metadata accessor for Logger(0);
      sub_10000F66C(v66, (uint64_t)qword_1002AA470);
      v67 = Logger.logObject.getter();
      v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v69 = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Updating sourceText from ASR alternatives", v69, 2u);
        swift_slowDealloc(v69, -1, -1);
      }

      v70 = swift_getKeyPath(&unk_1001E8038);
      __chkstk_darwin(v70);
      v72[-2] = v1;
      v72[-1] = v24;
      v82 = v1;
      v71 = v24;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v82, v70, sub_10003F018);
      swift_release(v70);

      swift_weakDestroy(v83);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v58);
      sub_100009C08(v87);
      return;
    }
    sub_10000A020((uint64_t)&v85, &qword_100298060);
  }
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v48 = type metadata accessor for Logger(0);
  sub_10000F66C(v48, (uint64_t)qword_1002AA470);
  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Updating sourceText from resultModel", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }

  v52 = swift_getKeyPath(&unk_1001E7F70);
  v87[0] = v1;
  v53 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v87, v52, v53);
  swift_release(v52);
  v54 = *(void **)(v1 + 88);
  if (v54)
  {
    v55 = v54;
    v56 = (void *)dispatch thunk of DisambiguationResultModel.sourceAttributedText.getter();

  }
  else
  {
    v56 = 0;
  }
  v57 = swift_getKeyPath(&unk_1001E8038);
  __chkstk_darwin(v57);
  v72[-2] = v1;
  v72[-1] = v56;
  v87[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v87, v57, sub_10003F018);
  swift_release(v57);

}

uint64_t sub_10003B0B0(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v32 = a3;
  v5 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v33[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DisambiguationResultModel.RenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100023AF4(a1, v12);
  sub_1001A60A8(v12, v13, (uint64_t)v33);
  v15 = v34;
  v14 = v35;
  sub_100023AF4(v33, v34);
  dispatch thunk of SpeechTokenAlternatives.text.getter(v15, v14);
  v17 = v16;
  v18 = objc_allocWithZone((Class)NSMutableAttributedString);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v20 = objc_msgSend(v18, "initWithString:", v19);

  v21 = a1[3];
  v22 = a1[4];
  sub_100023AF4(a1, v21);
  v23 = sub_1001A619C(1, v21, v22);
  if (v23)
  {
    v24 = v23;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DisambiguationResultModel.RenderingMode.disambiguation(_:), v8);
    v25 = static DisambiguationResultModel.RenderingMode.== infix(_:_:)(a2, v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v25 & 1) != 0)
    {
      if (qword_10028A3B0 != -1)
        swift_once(&qword_10028A3B0, sub_100032FE4);
      v26 = qword_1002AA0B0;
      v27 = v24;
      objc_msgSend(v20, "addAttribute:value:range:", v26, v27, 0, objc_msgSend(v20, "length"));

    }
  }
  v28 = v34;
  v29 = v35;
  sub_100023AF4(v33, v34);
  if ((dispatch thunk of SpeechTokenAlternatives.hasSpaceAfter.getter(v28, v29) & 1) != 0)
  {
    sub_10000A05C(0, &qword_10028CD78, NSAttributedString_ptr);
    AttributedString.init(stringLiteral:)(32, 0xE100000000000000);
    v30 = (void *)NSAttributedString.init(_:)(v7);
    objc_msgSend(v20, "appendAttributedString:", v30);

  }
  objc_msgSend(v32, "appendAttributedString:", v20, v32);

  return sub_100009C08(v33);
}

uint64_t sub_10003B374(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_10003D630(a1, (uint64_t)sub_10003D5F4, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v2)
    swift_bridgeObjectRelease(v6);
  return v6;
}

void sub_10003B3F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  Class isa;
  Class v34;
  id v35;
  void (*v36)(_QWORD, _QWORD);
  uint64_t v37;
  unint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _BYTE v72[12];
  int v73;
  _QWORD *v74;
  uint64_t v75;
  NSObject *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v3 = v2;
  v6 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v6);
  v8 = &v72[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  v10 = *(NSObject **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v72[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v72[-v14];
  v16 = a2;
  if (!a2)
  {
    KeyPath = swift_getKeyPath(&unk_1001E8038);
    v83 = v2;
    v18 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v83, KeyPath, v18);
    swift_release(KeyPath);
    v19 = *(void **)(v2 + 152);
    if (!v19)
      goto LABEL_12;
    v20 = objc_msgSend(v19, "string");
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v16 = v21;

  }
  v22 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v22 = a1 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    v79 = a1;
    v80 = v8;
    v23 = swift_getKeyPath(&unk_1001E8060);
    v76 = v10;
    v24 = v23;
    v83 = v3;
    v25 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    swift_bridgeObjectRetain(a2);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v83, v24, v25);
    swift_release(v24);
    v26 = objc_msgSend(*(id *)(v3 + 72), "identifier");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v77 = v28;
    v78 = v27;

    v29 = swift_getKeyPath(&unk_1001E8060);
    v83 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v83, v29, v25);
    swift_release(v29);
    v81 = v3;
    v30 = *(id *)(v3 + 72);
    v31 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v30);
    dispatch thunk of PersistedTranslation.targetLocale.getter(v31);
    v32 = objc_allocWithZone((Class)_LTLocalePair);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v34 = Locale._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v32, "initWithSourceLocale:targetLocale:", isa, v34);

    v36 = (void (*)(_QWORD, _QWORD))v76[1].isa;
    v36(v13, v9);
    v36(v15, v9);

    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v37 = type metadata accessor for Logger(0);
    sub_10000F66C(v37, (uint64_t)qword_1002AA470);
    v38 = v77;
    swift_bridgeObjectRetain_n(v77, 2);
    swift_bridgeObjectRetain_n(v16, 2);
    v39 = v35;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.info.getter(v40);
    v42 = v41;
    v76 = v40;
    if (os_log_type_enabled(v40, v41))
    {
      v43 = swift_slowAlloc(32, -1);
      v74 = (_QWORD *)swift_slowAlloc(8, -1);
      v75 = swift_slowAlloc(32, -1);
      v83 = v75;
      *(_DWORD *)v43 = 136446722;
      swift_bridgeObjectRetain(v38);
      v44 = v78;
      v82 = sub_1001A7FE4(v78, v38, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v43 + 4);
      swift_bridgeObjectRelease_n(v38, 3);
      *(_WORD *)(v43 + 12) = 2050;
      v73 = v42;
      v45 = v79;
      v46 = v38;
      v47 = String.count.getter(v79, v16);
      swift_bridgeObjectRelease(v16);
      v82 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v43 + 14);
      swift_bridgeObjectRelease(v16);
      *(_WORD *)(v43 + 22) = 2114;
      v82 = (uint64_t)v39;
      v48 = v39;
      v49 = v45;
      v38 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v43 + 24);
      v50 = v74;
      *v74 = v39;

      v51 = v76;
      _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v73, "Retranslating translation %{public}s with text of length %{public}ld with pair: %{public}@", (uint8_t *)v43, 0x20u);
      v52 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v50, 1, v52);
      swift_slowDealloc(v50, -1, -1);
      v53 = v75;
      swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      v54 = v81;
    }
    else
    {

      swift_bridgeObjectRelease_n(v38, 2);
      swift_bridgeObjectRelease_n(v16, 2);
      v54 = v81;
      v44 = v78;
      v49 = v79;
    }
    v67 = type metadata accessor for TaskPriority(0);
    v68 = (uint64_t)v80;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v80, 1, 1, v67);
    v69 = swift_allocObject(&unk_1002651C0, 24, 7);
    swift_weakInit(v69 + 16, v54);
    v70 = (_QWORD *)swift_allocObject(&unk_1002651E8, 80, 7);
    v70[2] = 0;
    v70[3] = 0;
    v70[4] = v49;
    v70[5] = v16;
    v70[6] = v39;
    v70[7] = v69;
    v70[8] = v44;
    v70[9] = v38;
    v71 = sub_100049DC0(v68, (uint64_t)&unk_10028CD58, (uint64_t)v70);
    swift_release(v71);
    return;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v16);
LABEL_12:
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v55 = type metadata accessor for Logger(0);
  sub_10000F66C(v55, (uint64_t)qword_1002AA470);
  v56 = swift_retain_n(v3, 2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = swift_slowAlloc(32, -1);
    v83 = v60;
    *(_DWORD *)v59 = 136446210;
    v61 = swift_getKeyPath(&unk_1001E8060);
    v82 = v3;
    v62 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v82, v61, v62);
    swift_release(v61);
    v63 = objc_msgSend(*(id *)(v3 + 72), "identifier");
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;

    v82 = sub_1001A7FE4(v64, v66, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v59 + 4);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v66);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Not retranslating translation %{public}s because the new source text is empty or nil", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

    swift_release_n(v3, 2);
  }
}

uint64_t sub_10003BBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v8[28] = a8;
  v8[29] = v19;
  v8[26] = a6;
  v8[27] = a7;
  v8[24] = a4;
  v8[25] = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[30] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[31] = v10;
  v8[32] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[33] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[34] = v12;
  v8[35] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  v8[36] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[37] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[38] = swift_task_alloc(v15);
  v8[39] = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  v8[40] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[41] = v17;
  v8[42] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003BCA8, 0, 0);
}

uint64_t sub_10003BCA8(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t **v5;

  v2 = (void *)v1[26];
  UUID.init()(a1);
  v1[43] = (uint64_t)objc_msgSend(objc_allocWithZone((Class)_LTTranslator), "init");
  v3 = objc_msgSend(v2, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v3);

  v4 = objc_msgSend(v2, "targetLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v4);

  v5 = (uint64_t **)swift_task_alloc(dword_10029429C);
  v1[44] = (uint64_t)v5;
  *v5 = v1;
  v5[1] = (uint64_t *)sub_10003BDA0;
  return sub_100127434((uint64_t)(v1 + 8), v1[24], v1[25], v1[39], v1[38], 257, 0, v1[42]);
}

uint64_t sub_10003BDA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();

  v2 = *(_QWORD **)v1;
  v4 = *(void **)(*(_QWORD *)v1 + 344);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v3);

  v5 = v2[38];
  v6 = v2[39];
  v8 = v2 + 36;
  v7 = v2[36];
  v9 = *(void (**)(uint64_t, uint64_t))(v8[1] + 8);
  v9(v5, v7);
  v9(v6, v7);
  if (v0)
    v10 = sub_10003C124;
  else
    v10 = sub_10003BE30;
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_10003BE30()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *(_QWORD *)(v0 + 336);
  v27 = *(_QWORD *)(v0 + 328);
  v28 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 224);
  v2 = *(void **)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216) + 16;
  v4 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 280);
  v5 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v21 = (void *)static OS_dispatch_queue.main.getter(v5);
  v6 = swift_allocObject(&unk_1002651C0, 24, 7);
  swift_beginAccess(v3, v0 + 144, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  swift_weakInit(v6 + 16, Strong);
  swift_release(Strong);
  sub_100023AB0(v0 + 64, v0 + 104);
  v8 = (_QWORD *)swift_allocObject(&unk_100265210, 104, 7);
  v8[2] = v6;
  v8[3] = v18;
  v8[4] = v1;
  sub_10003E994((__int128 *)(v0 + 104), (uint64_t)(v8 + 5));
  v8[10] = v19;
  v8[11] = v4;
  v8[12] = v2;
  *(_QWORD *)(v0 + 48) = sub_10003E9AC;
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_100075908;
  *(_QWORD *)(v0 + 40) = &unk_100265228;
  v9 = _Block_copy((const void *)(v0 + 16));
  swift_retain(v6);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v4);
  static DispatchQoS.unspecified.getter(v2);
  *(_QWORD *)(v0 + 184) = _swiftEmptyArrayStorage;
  v10 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v11 = sub_100006DF4(&qword_10028AC30);
  v12 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 184, v11, v12, v23, v10);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v22, v9);
  _Block_release(v9);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v20, v26);
  sub_100009C08((_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(v6);
  v13 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = type metadata accessor for Logger(0);
  sub_10000F66C(v3, (uint64_t)qword_1002AA470);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 232);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 224);
    v11 = swift_slowAlloc(22, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v11 = 136446466;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 176) = sub_1001A7FE4(v10, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v11 + 4);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2112;
    v13 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 168) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 14);
    *v12 = v13;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to retranslate %{public}s with new source: %@", (uint8_t *)v11, 0x16u);
    v14 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 360));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v15 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C3DC(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  id v52;
  uint64_t KeyPath;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  double v62;
  id v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  uint64_t v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[4];
  unsigned int v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  _BYTE *v86;
  id v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[3];
  uint64_t v96;
  uint64_t v97;
  char v98[32];

  v87 = a7;
  v89 = a5;
  v93 = a2;
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v88 = &v75[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for StoredSpeechResult(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v75[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_100006DF4((uint64_t *)&unk_10028F170);
  __chkstk_darwin(v17);
  v19 = &v75[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for SpeechResultOrigin(0);
  v90 = *(_QWORD *)(v20 - 8);
  v91 = (_BYTE *)v20;
  v21 = __chkstk_darwin(v20);
  v86 = &v75[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v24 = &v75[-v23];
  v79 = type metadata accessor for CoreAnalyticsLogger.CardType(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = &v75[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v98, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (!result)
    return result;
  v27 = result;
  v83 = a6;
  v92 = v24;
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v80 = type metadata accessor for Logger(0);
  sub_10000F66C(v80, (uint64_t)qword_1002AA470);
  v28 = swift_bridgeObjectRetain_n(a3, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v85 = a4;
  v82 = v13;
  v81 = v14;
  v84 = a3;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v95[0] = v33;
    *(_DWORD *)v32 = 136446210;
    swift_bridgeObjectRetain(a3);
    v94 = sub_1001A7FE4(v93, a3, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v32 + 4);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Finished retranslation with identifier %{public}s, replacing it in the card", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v34 = v32;
    a4 = v85;
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v35 = a4[3];
  v36 = a4[4];
  sub_100023AF4(a4, v35);
  v37 = dispatch thunk of TranslationResult.disambiguableResult.getter(v35, v36);
  v38 = v92;
  if (v37)
  {
    v39 = (void *)v37;
    if (objc_msgSend(*(id *)(v27 + 304), "restoreChangesToResult:", v37))
    {
      if (qword_10028A428 != -1)
        swift_once(&qword_10028A428, sub_100120F9C);
      v40 = sub_10000F66C(v80, (uint64_t)qword_1002AA380);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.info.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Restored user selection changes to disambiguable result after retranslation", v43, 2u);
        swift_slowDealloc(v43, -1, -1);
      }

      v38 = v92;
    }
    if (objc_msgSend(v39, "hasDisambiguations"))
    {
      v44 = objc_msgSend(v39, "hasDisambiguationsOfType:", 1);
      v76 = objc_msgSend(v39, "hasDisambiguationsOfType:", 0);
      v45 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
      v46 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v45);
      v47 = NSUserDefaults.genderDisambiguationEnabled.getter();

      type metadata accessor for CoreAnalyticsLogger(0);
      v48 = static CoreAnalyticsLogger.shared.getter();
      v49 = v78;
      v50 = v77;
      v51 = v79;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v78 + 104))(v77, enum case for CoreAnalyticsLogger.CardType.committed(_:), v79);
      v52 = v44;
      v38 = v92;
      dispatch thunk of CoreAnalyticsLogger.didOfferDisambiguation(fromCard:hasGender:hasMeaning:genderDisambiguationSettingEnabled:)(v50, v52, v76, (v47 == 2) | (v47 & 1));

      swift_release(v48);
      (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v50, v51);
    }
    else
    {

    }
  }
  KeyPath = swift_getKeyPath(&unk_1001E8060);
  v95[0] = v27;
  v54 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v95, KeyPath, v54);
  swift_release(KeyPath);
  v55 = objc_msgSend(*(id *)(v27 + 72), "sourceInput");
  if (v55)
  {
    v56 = v55;
    dispatch thunk of AnySpeechResult.value.getter(v95);

    v57 = v96;
    v58 = v97;
    sub_100023AF4(v95, v96);
    dispatch thunk of SpeechResult.origin.getter(v57, v58);
    v59 = v90;
    v60 = v91;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, _BYTE *))(v90 + 56))(v19, 0, 1, v91);
    sub_100009C08(v95);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, _BYTE *))(v59 + 48))(v19, 1, v60) != 1)
    {
      (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(v59 + 32))(v38, v19, v60);
      goto LABEL_22;
    }
  }
  else
  {
    v59 = v90;
    v60 = v91;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, _BYTE *))(v90 + 56))(v19, 1, 1, v91);
  }
  (*(void (**)(_BYTE *, _QWORD, _BYTE *))(v59 + 104))(v38, enum case for SpeechResultOrigin.text(_:), v60);
  sub_10000A020((uint64_t)v19, (uint64_t *)&unk_10028F170);
LABEL_22:
  v61 = v83;
  *(_QWORD *)&v62 = swift_bridgeObjectRetain(v83).n128_u64[0];
  v63 = objc_msgSend(v87, "sourceLocale", v62);
  v64 = v88;
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v63);

  v65 = v86;
  (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(v59 + 16))(v86, v38, v60);
  StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v89, v61, 0, 0, v64, v65);
  v66 = swift_getKeyPath(&unk_1001E8088);
  v95[0] = v27;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v95, v66, v54);
  swift_release(v66);
  v67 = *(_QWORD *)(v27 + 16);
  v68 = v84;
  if (v67
    && (swift_retain(*(_QWORD *)(v27 + 16)),
        v69 = sub_10003DDA0(v93, v68, (uint64_t)v16, (uint64_t)v85, v67),
        swift_release(v67),
        v69))
  {
    sub_100036650(v69, 1);
  }
  else
  {
    if (qword_10028A460 != -1)
      swift_once(&qword_10028A460, sub_100121094);
    sub_10000F66C(v80, (uint64_t)qword_1002AA428);
    v70 = swift_bridgeObjectRetain_n(v68, 2);
    v69 = Logger.logObject.getter(v70);
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v71))
    {
      v91 = v16;
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = v59;
      v74 = swift_slowAlloc(32, -1);
      v95[0] = v74;
      *(_DWORD *)v72 = 136446210;
      swift_bridgeObjectRetain(v68);
      v94 = sub_1001A7FE4(v93, v68, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v72 + 4);
      swift_bridgeObjectRelease_n(v68, 3);
      _os_log_impl((void *)&_mh_execute_header, v69, v71, "Failed to update translation %{public}s in session after retranslating", v72, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v72, -1, -1);
      swift_release(v27);

      (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v91, v82);
      return (*(uint64_t (**)(_BYTE *, _BYTE *))(v73 + 8))(v92, v60);
    }
    swift_bridgeObjectRelease_n(v68, 2);
  }
  swift_release(v27);

  (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v16, v82);
  return (*(uint64_t (**)(_BYTE *, _BYTE *))(v59 + 8))(v38, v60);
}

double sub_10003CD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double result;
  uint64_t v46;
  uint64_t v47;

  KeyPath = swift_getKeyPath(&unk_1001E8038);
  v47 = v4;
  v8 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v47, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(void **)(v4 + 152);
  if (!v9)
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10000F66C(v28, (uint64_t)qword_1002AA440);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v30, v31))
      goto LABEL_17;
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Can't retranslate after ASR disambiguation because source text is nil", v32, 2u);
    v33 = (uint64_t)v32;
    goto LABEL_16;
  }
  v10 = objc_msgSend(v9, "string");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = String.count.getter(v11, v13);
  v15 = v14;
  if (a3 < 0 || v14 < a4 + a3)
  {
    swift_bridgeObjectRelease(v13);
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10000F66C(v34, (uint64_t)qword_1002AA440);
    v30 = Logger.logObject.getter(v35);
    v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v30, v36))
      goto LABEL_17;
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v47 = v38;
    *(_DWORD *)v37 = 136446466;
    v39 = _NSRange.description.getter(a3, a4);
    v41 = v40;
    v46 = sub_1001A7FE4(v39, v40, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v37 + 4);
    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v37 + 12) = 2082;
    v42 = _NSRange.description.getter(0, v15);
    v44 = v43;
    v46 = sub_1001A7FE4(v42, v43, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v37 + 14);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v30, v36, "Can't retranslate after ASR disambiguation because replacement range %{public}s is out of bounds of source text range %{public}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    v33 = v37;
LABEL_16:
    swift_slowDealloc(v33, -1, -1);
LABEL_17:

    return result;
  }
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "stringByReplacingCharactersInRange:withString:", a3, a4, v17);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v22 = type metadata accessor for Logger(0);
  sub_10000F66C(v22, (uint64_t)qword_1002AA440);
  v23 = swift_bridgeObjectRetain_n(v21, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v47 = v27;
    *(_DWORD *)v26 = 136642819;
    swift_bridgeObjectRetain(v21);
    v46 = sub_1001A7FE4(v19, v21, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v26 + 4);
    swift_bridgeObjectRelease_n(v21, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "User selected ASR disambiguation; retranslating with new source text: %{sensitive}s",
      v26,
      0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
  }
  sub_10003B3F0(v19, v21);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

uint64_t sub_10003D238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100009C08((_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 64));

  sub_10002BA44(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10002BA44(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 136));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
  sub_10000B900(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10000A020(v0 + 264, &qword_100298060);

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator29CommittedTranslationViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10003D30C()
{
  uint64_t v0;

  sub_10003D238();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003D330()
{
  return type metadata accessor for CommittedTranslationViewModel(0);
}

uint64_t type metadata accessor for CommittedTranslationViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10028C640;
  if (!qword_10028C640)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CommittedTranslationViewModel);
  return result;
}

uint64_t sub_10003D374(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[31];

  v4[0] = "\b";
  v4[1] = &unk_1001E7E38;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = "\b";
  v4[5] = "\b";
  v4[6] = &unk_1001E7E50;
  v4[7] = &unk_1001E7E50;
  v4[8] = &unk_1001E7E68;
  v4[9] = "\b";
  v4[10] = &unk_1001E7E68;
  v4[11] = &unk_1001E7E68;
  v4[12] = &unk_1001E7E80;
  v4[13] = "\b";
  v4[14] = "\b";
  v4[15] = "\b";
  v4[16] = (char *)&value witness table for () + 64;
  v4[17] = &unk_1001E7E68;
  v4[18] = &unk_1001E7E68;
  v4[19] = &unk_1001E7E68;
  v4[20] = &unk_1001E7E98;
  v4[21] = &unk_1001E7E98;
  v4[22] = &unk_1001E7E68;
  v4[23] = &unk_1001E7E68;
  v4[24] = &unk_1001E7E68;
  v4[25] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[26] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[27] = &unk_1001E7EB0;
  v4[28] = &unk_1001E7EC8;
  v4[29] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[30] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 31, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_10003D488@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CommittedTranslationViewModel(0);
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

void *sub_10003D4CC()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_10003D4F0()
{
  return sub_10003EAE4();
}

uint64_t sub_10003D50C()
{
  return sub_10003EB20();
}

uint64_t sub_10003D528()
{
  return sub_10003E6F4();
}

uint64_t sub_10003D53C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003D560(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, char *);
  char v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, char *))(v2 + 16);
  v6 = a1;
  v5 = a2;
  return v3(&v6, &v5);
}

uint64_t sub_10003D598(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

void sub_10003D5C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = v2;
  v4 = v2;

}

id sub_10003D5F4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  v4 = *a1;
  sub_10000A0EC((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;
  return v4;
}

uint64_t sub_10003D630(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *i;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _OWORD v44[2];
  _OWORD v45[2];
  void *v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = -1 << *(_BYTE *)(a1 + 32);
  v10 = ~v9;
  v11 = *(_QWORD *)(a1 + 64);
  v12 = -v9;
  v48 = a1;
  v49 = a1 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v50 = v10;
  v51 = 0;
  v52 = v13 & v11;
  v53 = a2;
  v54 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_10003DBD0((uint64_t)&v46);
  v14 = v46;
  if (!v46)
    goto LABEL_27;
  sub_10003EA2C(v47, v45);
  v15 = *(_QWORD **)a5;
  v17 = sub_1001A876C((uint64_t)v14);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_1001AB520();
      if ((v21 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v25 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    *(_QWORD *)(v25[6] + 8 * v17) = v14;
    sub_10003EA2C(v45, (_OWORD *)(v25[7] + 32 * v17));
    v26 = v25[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v25[2] = v28;
LABEL_16:
    sub_10003DBD0((uint64_t)&v46);
    for (i = v46; v46; i = v46)
    {
      sub_10003EA2C(v47, v45);
      v31 = *(_QWORD **)a5;
      v33 = sub_1001A876C((uint64_t)i);
      v34 = v31[2];
      v35 = (v32 & 1) == 0;
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        goto LABEL_28;
      v37 = v32;
      if (v31[3] < v36)
      {
        sub_1001A948C(v36, 1);
        v38 = sub_1001A876C((uint64_t)i);
        if ((v37 & 1) != (v39 & 1))
          goto LABEL_30;
        v33 = v38;
      }
      if ((v37 & 1) != 0)
      {
        sub_10000A0EC((uint64_t)v45, (uint64_t)v44);
        sub_100009C08(v45);

        v30 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v33);
        sub_100009C08(v30);
        sub_10003EA2C(v44, v30);
      }
      else
      {
        v40 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v33 >> 6) + 64) |= 1 << v33;
        *(_QWORD *)(v40[6] + 8 * v33) = i;
        sub_10003EA2C(v45, (_OWORD *)(v40[7] + 32 * v33));
        v41 = v40[2];
        v27 = __OFADD__(v41, 1);
        v42 = v41 + 1;
        if (v27)
          goto LABEL_29;
        v40[2] = v42;
      }
      sub_10003DBD0((uint64_t)&v46);
    }
LABEL_27:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_10000F7C4(v48);
    return swift_release(v54);
  }
  sub_1001A948C(v20, a4 & 1);
  v22 = sub_1001A876C((uint64_t)v14);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    if ((v21 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_10000A0EC((uint64_t)v45, (uint64_t)v44);
    sub_100009C08(v45);

    v24 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v17);
    sub_100009C08(v24);
    sub_10003EA2C(v44, v24);
    goto LABEL_16;
  }
LABEL_30:
  type metadata accessor for Key(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10003D958(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  id v34;
  uint64_t v36;
  _QWORD v37[5];

  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v37[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v37[-1] - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v37[-1] - v16;
  v18 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
  dispatch thunk of PersistedTranslation.targetLocale.getter(v18);
  v37[3] = &type metadata for TranslateFeatures;
  v37[4] = sub_100009BC4();
  LOBYTE(v37[0]) = 5;
  v19 = isFeatureEnabled(_:)(v37);
  v20 = sub_100009C08(v37);
  if ((v19 & 1) == 0)
    goto LABEL_7;
  v20 = dispatch thunk of PersistedTranslation.showDisambiguation.getter(v20);
  if ((v20 & 1) == 0)
    goto LABEL_7;
  v21 = type metadata accessor for PersistedTranslation(0);
  v20 = swift_dynamicCastClass(a1, v21);
  if (!v20)
    goto LABEL_7;
  v22 = swift_unknownObjectRetain(a1);
  v23 = dispatch thunk of PersistedTranslation.disambiguableResult.getter(v22);
  if (!v23)
  {

LABEL_7:
    v26 = dispatch thunk of PersistedTranslation.displaySourceText.getter(v20);
    v28 = v27;
    v29 = dispatch thunk of PersistedTranslation.displayText.getter();
    v31 = v30;
    v32 = a2;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v33(v15, v32, v8);
    v33(v12, (uint64_t)v17, v8);
    v34 = objc_allocWithZone((Class)type metadata accessor for DisambiguationResultModel(0));
    v25 = DisambiguationResultModel.init(withStaticSource:staticTarget:sourceLocale:targetLocale:globalAttributeProvider:)(v26, v28, v29, v31, v15, v12, sub_1000ABD9C, 0);
    goto LABEL_8;
  }
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v36 = v23;
  v24(v15, a2, v8);
  v24(v12, (uint64_t)v17, v8);
  objc_allocWithZone((Class)type metadata accessor for DisambiguationResultModel(0));
  sub_100016244(a3, a4);
  v25 = DisambiguationResultModel.init(disambiguableResult:excludedTypes:sourceLocale:targetLocale:globalAttributeProvider:linkAttributeProvider:userSelectionHandler:)(v36, _swiftEmptyArrayStorage, v15, v12, sub_1000ABD9C, 0, sub_1000ABDC0, 0, a3, a4);

LABEL_8:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  return v25;
}

uint64_t sub_10003DBD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void (*v18)(_OWORD *);
  uint64_t result;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v10);
    sub_10000A0EC(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(_QWORD *)&v24[0] = v11;
    v12 = v11;
    goto LABEL_23;
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    v15 = *(_QWORD *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      v9 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v13 << 6);
      v7 = v13;
      goto LABEL_3;
    }
    v16 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      v15 = *(_QWORD *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        v13 = v16;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        v15 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          v13 = v5 + 3;
          goto LABEL_7;
        }
        v16 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          v15 = *(_QWORD *)(v4 + 8 * v16);
          if (v15)
            goto LABEL_10;
          v13 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            v15 = *(_QWORD *)(v4 + 8 * v13);
            if (v15)
              goto LABEL_7;
            v7 = v14 - 1;
            v17 = v5 + 6;
            while (v14 != v17)
            {
              v15 = *(_QWORD *)(v4 + 8 * v17++);
              if (v15)
              {
                v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v18 = (void (*)(_OWORD *))v1[5];
  result = sub_10003EA3C((uint64_t)v24, (uint64_t)v22);
  if (*(_QWORD *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    v18(v20);
    return sub_10000A020((uint64_t)v20, &qword_10028CD70);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10003DDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD *, _QWORD);
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[48];
  _QWORD v41[6];
  _QWORD v42[5];

  v10 = type metadata accessor for StoredSpeechResult(0);
  v42[3] = v10;
  v42[4] = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  v11 = sub_1000122F8(v42);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v11, a3, v10);
  KeyPath = swift_getKeyPath(&unk_1001E80B0);
  v13 = swift_getKeyPath(&unk_1001E80D8);
  static Published.subscript.getter(v41, a5, KeyPath);
  swift_release(KeyPath);
  swift_release(v13);
  v14 = v41[0];
  swift_bridgeObjectRetain(a2);
  v15 = sub_10003E0F4(v14, a1, a2);
  LOBYTE(v13) = v16;
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(a2);
  v17 = 0;
  if ((v13 & 1) != 0)
    goto LABEL_13;
  v18 = swift_getKeyPath(&unk_1001E80B0);
  v19 = swift_getKeyPath(&unk_1001E80D8);
  static Published.subscript.getter(v41, a5, v18);
  swift_release(v18);
  result = swift_release(v19);
  v21 = v41[0];
  if ((v41[0] & 0xC000000000000001) != 0)
  {
    v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v41[0]);
    goto LABEL_6;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v15 >= *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v22 = *(id *)(v41[0] + 8 * v15 + 32);
LABEL_6:
  v23 = v22;
  swift_bridgeObjectRelease(v21);
  sub_100023AB0((uint64_t)v42, (uint64_t)v41);
  dispatch thunk of PersistedTranslation.speechResult.setter(v41);
  sub_100023AB0(a4, (uint64_t)v41);
  dispatch thunk of PersistedTranslation.translationResult.setter(v41);
  v24 = *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v25 = *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  sub_100023AF4((_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v24);
  dispatch thunk of TranslationStore.save()(v24, v25);
  v26 = swift_getKeyPath(&unk_1001E80B0);
  v27 = swift_getKeyPath(&unk_1001E80D8);
  v17 = v23;
  v28 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v41, a5, v26, v27);
  v30 = v29;
  v31 = *v29;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v29);
  *v30 = v31;
  if (!(_DWORD)result || v31 < 0 || (v31 & 0x4000000000000000) != 0)
  {
    result = sub_1000808EC(v31);
    v31 = result;
    *v30 = result;
  }
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_17;
  if (v15 < *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(void **)((v31 & 0xFFFFFFFFFFFFFF8) + 8 * v15 + 0x20);
    *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 8 * v15 + 0x20) = v17;

    specialized Array._endMutation()(v33);
    v28(v41, 0);
    swift_release(v26);
    swift_release(v27);
    v34 = sub_100006DF4(&qword_10028A6C0);
    inited = swift_initStackObject(v34, v40);
    *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
    v36 = objc_msgSend(v17, "identifier");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    *(_QWORD *)(inited + 32) = v37;
    *(_QWORD *)(inited + 40) = v39;
    sub_1001CA2AC((_QWORD *)inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
LABEL_13:
    sub_100009C08(v42);
    return (uint64_t)v17;
  }
LABEL_18:
  __break(1u);
  return result;
}

unint64_t sub_10003E0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  unint64_t v20;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    v20 = v4;
    v4 = a1 & 0xC000000000000001;
    while (!__OFSUB__(v8--, 1))
    {
      if (v4)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v8 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v10 = *(id *)(a1 + 32 + 8 * v8);
      }
      v11 = v10;
      v12 = objc_msgSend(v10, "identifier", v20);
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      if (v13 == a2 && v15 == a3)
      {

        swift_bridgeObjectRelease(a3);
        return v8;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, a2, a3, 0);

      swift_bridgeObjectRelease(v15);
      if ((v17 & 1) != 0 || !v8)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  return v8;
}

uint64_t sub_10003E280(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  void *v31;
  uint64_t v34;
  _QWORD v35[5];

  v35[3] = a14;
  v35[4] = a15;
  v21 = sub_1000122F8(v35);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a14 - 8) + 32))(v21, a3, a14);
  *(_QWORD *)(a13 + 16) = 0;
  *(_QWORD *)(a13 + 136) = 0;
  *(_WORD *)(a13 + 144) = 0;
  *(_OWORD *)(a13 + 80) = 0u;
  *(_OWORD *)(a13 + 96) = 0u;
  *(_OWORD *)(a13 + 112) = 0u;
  *(_BYTE *)(a13 + 128) = 0;
  *(_BYTE *)(a13 + 146) = 4;
  *(_QWORD *)(a13 + 160) = 0;
  *(_QWORD *)(a13 + 168) = 0;
  *(_QWORD *)(a13 + 152) = 0;
  *(_DWORD *)(a13 + 175) = 0;
  *(_QWORD *)(a13 + 184) = 0;
  *(_QWORD *)(a13 + 192) = 0;
  *(_BYTE *)(a13 + 200) = 1;
  *(_QWORD *)(a13 + 208) = 0;
  *(_QWORD *)(a13 + 216) = 0;
  *(_BYTE *)(a13 + 224) = 1;
  *(_WORD *)(a13 + 225) = 1;
  *(_BYTE *)(a13 + 227) = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      v31 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
    else
      v31 = &_swiftEmptySetSingleton;
    *(_QWORD *)(a13 + 232) = v31;
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      v22 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
    else
      v22 = &_swiftEmptySetSingleton;
  }
  else
  {
    v22 = &_swiftEmptySetSingleton;
    *(_QWORD *)(a13 + 232) = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(a13 + 240) = v22;
  *(_QWORD *)(a13 + 296) = 0;
  *(_OWORD *)(a13 + 264) = 0u;
  *(_OWORD *)(a13 + 280) = 0u;
  ObservationRegistrar.init()();
  *(_QWORD *)(a13 + 72) = a1;
  v23 = *(_QWORD *)(a13 + 16);
  v24 = a1;
  swift_retain(a2);
  swift_release(v23);
  *(_QWORD *)(a13 + 16) = a2;
  sub_100023AB0((uint64_t)v35, a13 + 24);
  *(_QWORD *)(a13 + 64) = a4;
  v25 = *(void **)(a13 + 80);
  swift_retain(a4);
  v26 = a8;

  *(_QWORD *)(a13 + 80) = a8;
  v27 = *(_QWORD *)(a13 + 136);
  swift_retain(a7);
  swift_release(v27);
  *(_QWORD *)(a13 + 136) = a7;
  *(_QWORD *)(a13 + 248) = a5;
  *(_QWORD *)(a13 + 256) = a6;
  *(_QWORD *)(a13 + 304) = objc_msgSend(objc_allocWithZone((Class)_LTDisambiguationChangeManager), "init");
  sub_100036650(v24, 1);
  KeyPath = swift_getKeyPath(&unk_1001E8010);
  __chkstk_darwin(KeyPath);
  v34 = a13;
  sub_100016244(a9, a10);
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, KeyPath, sub_10003E6E0);
  sub_10002BA44(a9, a10);
  swift_release(KeyPath);
  v29 = swift_getKeyPath(&unk_1001E7FE8);
  __chkstk_darwin(v29);
  v34 = a13;
  sub_100016244(a11, a12);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, v29, sub_10003D528);
  sub_10002BA44(a11, a12);
  swift_release(v29);
  sub_1000370B8();
  sub_100009C08(v35);
  return a13;
}

uint64_t sub_10003E5E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  v27 = a7;
  v28 = a8;
  v25 = a5;
  v26 = a6;
  v24 = a4;
  v23 = a9;
  v17 = *(_QWORD *)(a13 - 8);
  __chkstk_darwin(a1);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CommittedTranslationViewModel(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a3, a13);
  return sub_10003E280(a1, a2, (uint64_t)v19, v24, v25, v26, v27, v28, v23, *((uint64_t *)&v23 + 1), a10, a11, v21, a13, a14);
}

uint64_t sub_10003E6E0()
{
  return sub_10003E73C();
}

uint64_t sub_10003E6F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(v2 + 112);
  v5 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 112) = v1;
  *(_QWORD *)(v2 + 120) = v3;
  sub_100016244(v1, v3);
  return sub_10002BA44(v4, v5);
}

uint64_t sub_10003E73C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = v1;
  *(_QWORD *)(v2 + 104) = v3;
  sub_100016244(v1, v3);
  return sub_10002BA44(v4, v5);
}

uint64_t sub_10003E784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t, uint64_t *, _QWORD *, _QWORD *);
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, _QWORD *, _QWORD *))(v7 + 16);
  v13 = a1;
  v11[1] = a5;
  v12 = a3;
  v10[1] = a7;
  v11[0] = a4;
  v10[0] = a6;
  return v8(&v13, a2, &v12, v11, v10);
}

uint64_t sub_10003E7CC(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v5 + 16))(*a1, a2, *a3, *a4, a4[1], *a5, a5[1]);
}

void sub_10003E80C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 152);
  *(_QWORD *)(v1 + 152) = v2;
  v4 = v2;

}

uint64_t sub_10003E848()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003E86C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10003E8B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10028CD54);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10001D380;
  return sub_10003BBB4(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10003E950()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_100009C08((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));

  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10003E994(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10003E9AC()
{
  uint64_t v0;

  return sub_10003C3DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(void **)(v0 + 96));
}

uint64_t sub_10003E9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E9D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10003E9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

_OWORD *sub_10003EA2C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10003EA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028CD68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EA84()
{
  uint64_t v0;

  return sub_1000365F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10003EA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100298060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EAE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 40);
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 200) = v2;
  return sub_10003547C();
}

uint64_t sub_10003EB20()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 40);
  *(_OWORD *)(v1 + 208) = *(_OWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 224) = v2;
  return sub_1000357C8();
}

uint64_t sub_10003EB5C()
{
  return sub_10003EC10(41);
}

uint64_t sub_10003EB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10028CD9C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100038EA0(a1, v4, v5, v6, v7);
}

void sub_10003EBE8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 146) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10003EC08()
{
  return sub_10003EC10(40);
}

uint64_t sub_10003EC10(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10003EC48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10028CDAC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_100039850(a1, v4, v5, v6);
}

void sub_10003ECBC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 226) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10003ECCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

void sub_10003ED0C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 176) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10003ED24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GenderTipManager.Registration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003ED60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_10003EDA0()
{
  uint64_t v0;

  return sub_100036364(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10003EDB8(uint64_t a1)
{
  uint64_t v1;

  return sub_100037ED4(a1, v1);
}

void sub_10003EDC0(void **a1)
{
  uint64_t v1;

  sub_10003893C(a1, v1);
}

void sub_10003EDD0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 160);
  *(_QWORD *)(v1 + 160) = v2;
  v4 = v2;

}

uint64_t sub_10003EE04(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100037BE0(a1, a2, a3 & 1, v3);
}

uint64_t sub_10003EE10(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_10003EE44(uint64_t a1)
{
  uint64_t v1;

  return sub_100037F28(a1, v1);
}

uint64_t sub_10003EE4C()
{
  uint64_t v0;

  return sub_100036108(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10003EE6C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 144) = *(_BYTE *)(v0 + 24);
}

void sub_10003EE84()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 145) = *(_BYTE *)(v0 + 24);
}

void sub_10003EE94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v2;
  v4 = v2;

}

void sub_10003EEE0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 177) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10003EEF0(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_10003705C(a1, a2, v2);
}

void sub_10003EEF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 168);
  *(_QWORD *)(v1 + 168) = v2;
  v4 = v2;

}

void sub_10003EF2C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v2;
  v4 = v2;

}

void sub_10003EF68()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 227) = *(_BYTE *)(v0 + 24);
}

void sub_10003EF90()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 128) = *(_BYTE *)(v0 + 24);
}

void sub_10003EFB4()
{
  sub_10003ECBC();
}

void sub_10003EFC8()
{
  sub_10003ED0C();
}

void sub_10003EFDC()
{
  sub_10003EE84();
}

void sub_10003EFF0()
{
  sub_10003EE6C();
}

void sub_10003F004()
{
  sub_10003EEE0();
}

void sub_10003F018()
{
  sub_10003E80C();
}

void sub_10003F02C()
{
  sub_10003EDD0();
}

void sub_10003F040()
{
  sub_10003D5C0();
}

void sub_10003F054()
{
  sub_10003EEF8();
}

uint64_t sub_10003F068()
{
  return sub_10003EDA0();
}

uint64_t sub_10003F07C()
{
  return sub_10003EA84();
}

void sub_10003F090()
{
  sub_10003EBE8();
}

uint64_t sub_10003F0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028CE40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v25 - v14;
  sub_1000D58EC((uint64_t *)((char *)&v25 - v14));
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_10000B074((uint64_t)v15, (uint64_t)v6, &qword_10028CE40);
  sub_10000B074((uint64_t)v13, v16, &qword_10028CE40);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) != 1)
  {
    sub_10000B074((uint64_t)v6, (uint64_t)v10, &qword_10028CE40);
    if (v17(v16, 1, v0) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      v19 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v19);
      v21 = *(void (**)(char *, uint64_t))(v1 + 8);
      v21(v3, v0);
      sub_10000A020((uint64_t)v13, &qword_10028CE40);
      sub_10000A020((uint64_t)v15, &qword_10028CE40);
      v21(v10, v0);
      v18 = sub_10000A020((uint64_t)v6, &qword_10028CE40);
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v26 = static HorizontalAlignment.leading.getter(v18);
      v27 = 0;
      v28 = 1;
      v22 = sub_10004965C();
      v23 = &type metadata for VStackLayout;
      return AnyLayout.init<A>(_:)(&v26, v23, v22);
    }
    sub_10000A020((uint64_t)v13, &qword_10028CE40);
    sub_10000A020((uint64_t)v15, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_6:
    v18 = sub_10000A020((uint64_t)v6, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v13, &qword_10028CE40);
  sub_10000A020((uint64_t)v15, &qword_10028CE40);
  if (v17(v16, 1, v0) != 1)
    goto LABEL_6;
  v18 = sub_10000A020((uint64_t)v6, &qword_10028CE40);
LABEL_8:
  v26 = static VerticalAlignment.top.getter(v18);
  v27 = 0;
  v28 = 1;
  v22 = sub_1000496A0();
  v23 = &type metadata for HStackLayout;
  return AnyLayout.init<A>(_:)(&v26, v23, v22);
}

id sub_10003F3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  UIFontTextStyle v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  KeyPath = swift_getKeyPath(&unk_1001E8A60);
  v3 = swift_getKeyPath(&unk_1001E8A88);
  v4 = swift_retain(v1);
  static Published.subscript.getter(&v12, v4, KeyPath);
  swift_release(v1);
  swift_release(KeyPath);
  swift_release(v3);
  if (v12 == 1)
  {
    v5 = UIFontTextStyleTitle3;
    v6 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle3, 0);
  }
  else
  {
    v5 = UIFontTextStyleTitle1;
    v6 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
  }
  v7 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v6, "pointSize");
  v8 = objc_msgSend(v7, "systemFontOfSize:weight:");
  v9 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", v5);
  v10 = objc_msgSend(v9, "scaledFontForFont:maximumPointSize:", v8, 1.79769313e308);

  return v10;
}

uint64_t sub_10003F5CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28));
  v2 = v1[1];
  KeyPath = swift_getKeyPath(&unk_1001E8B20);
  v4 = swift_getKeyPath(&unk_1001E8B48);
  v5 = swift_retain(v2);
  static Published.subscript.getter(&v21, v5, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  swift_release(v4);
  v6 = v22;
  swift_bridgeObjectRelease(v22);
  if (v6
    || (v7 = swift_getKeyPath(&unk_1001E8AA8),
        v8 = swift_getKeyPath(&unk_1001E8AD0),
        v9 = swift_retain(v2),
        static Published.subscript.getter(&v21, v9, v7),
        swift_release(v2),
        swift_release(v7),
        swift_release(v8),
        (((unsigned __int16)v21 | (BYTE2(v21) << 16)) & 0xFF0000) == 0x80000))
  {
    v10 = *v1;
    v11 = type metadata accessor for ComposeTranslationViewModel(0);
    v12 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
    v13 = ObservedObject.projectedValue.getter(v10, v2, v11, v12);
    v14 = swift_getKeyPath(&unk_1001E8B20);
    ObservedObject.Wrapper.subscript.getter(&v21, v14, v13, v12);
    swift_release(v14);
    swift_release(v13);
  }
  else
  {
    v15 = sub_100008D08(BYTE1(v21));
    v17 = v16;
    v20[0] = v15;
    v20[1] = v16;
    v18 = sub_100006DF4(&qword_10028D160);
    static Binding.constant(_:)(&v21, v20, v18);
    swift_bridgeObjectRelease(v17);
  }
  return v21;
}

id sub_10003F788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  KeyPath = swift_getKeyPath(&unk_1001E8B20);
  v3 = swift_getKeyPath(&unk_1001E8B48);
  v4 = swift_retain(v1);
  static Published.subscript.getter(&v10, v4, KeyPath);
  swift_release(v1);
  swift_release(KeyPath);
  swift_release(v3);
  v5 = v11;
  swift_bridgeObjectRelease(v11);
  if (v5)
    return objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v6 = swift_getKeyPath(&unk_1001E8AA8);
  v7 = swift_getKeyPath(&unk_1001E8AD0);
  v8 = swift_retain(v1);
  static Published.subscript.getter(&v10, v8, v6);
  swift_release(v1);
  swift_release(v6);
  swift_release(v7);
  if (BYTE2(v10) << 16 == 0x80000)
    return objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  sub_100048C48();
  return (id)static UIColor.quaternarySourceTextColor.getter();
}

id sub_10003F8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  NSString v17;
  Class isa;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  KeyPath = swift_getKeyPath(&unk_1001E8AA8);
  v3 = swift_getKeyPath(&unk_1001E8AD0);
  v4 = swift_retain(v1);
  static Published.subscript.getter(&v21, v4, KeyPath);
  swift_release(v1);
  swift_release(KeyPath);
  swift_release(v3);
  if ((((unsigned __int16)v21 | (BYTE2(v21) << 16)) & 0xFF0000) == 0x80000)
  {
    v5 = swift_getKeyPath(&unk_1001E8A18);
    v6 = swift_getKeyPath(&unk_1001E8A40);
    v7 = swift_retain(v1);
    static Published.subscript.getter(&v21, v7, v5);
    swift_release(v1);
    swift_release(v5);
    swift_release(v6);
    return (id)v21;
  }
  else
  {
    sub_100008D08(BYTE1(v21));
    v10 = v9;
    v11 = sub_100006DF4(&qword_100298070);
    inited = swift_initStackObject(v11, &v20);
    *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
    *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
    v13 = sub_100048C48();
    v14 = static UIColor.quaternaryTranslateAccentColor.getter(NSForegroundColorAttributeName);
    *(_QWORD *)(inited + 64) = v13;
    *(_QWORD *)(inited + 40) = v14;
    v15 = sub_1001A4A88(inited);
    v16 = objc_allocWithZone((Class)NSAttributedString);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    type metadata accessor for Key(0);
    sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v8 = objc_msgSend(v16, "initWithString:attributes:", v17, isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

  }
  return v8;
}

uint64_t sub_10003FAD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  uint64_t v50;
  char *v51;
  char v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t OpaqueTypeConformance2;
  uint64_t v69;
  char *v70;
  char *v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (**v81)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unint64_t v108;
  void *v109;
  _QWORD v110[3];

  v102 = a1;
  v103 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v100 = (char *)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ComposeTranslationCardView(0);
  v94 = *(_QWORD *)(v3 - 8);
  v4 = v3;
  v105 = *(_QWORD *)(v94 + 64);
  __chkstk_darwin(v3);
  v93 = (uint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028CF18);
  __chkstk_darwin(v6);
  v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028CF20);
  __chkstk_darwin(v9);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100006DF4(&qword_10028CF28);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006DF4(&qword_10028CF30);
  __chkstk_darwin(v89);
  v88 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_10028CF38);
  v15 = *(_QWORD *)(v14 - 8);
  v96 = v14;
  v97 = v15;
  __chkstk_darwin(v14);
  v104 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_10028CF40);
  v98 = *(_QWORD *)(v17 - 8);
  v99 = v17;
  v18 = __chkstk_darwin(v17);
  v95 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v8 + 1) = 0x3FF0000000000000;
  v8[16] = 0;
  v20 = sub_100006DF4(&qword_10028CF48);
  sub_1000402E4(v1, (uint64_t)&v8[*(int *)(v20 + 44)]);
  v21 = v4;
  v86 = v4;
  v92 = v1 + *(int *)(v4 + 28);
  v22 = *(_QWORD *)(v92 + 8);
  KeyPath = swift_getKeyPath(&unk_1001E84C8);
  v24 = swift_getKeyPath(&unk_1001E84F0);
  v25 = swift_retain(v22);
  static Published.subscript.getter(&v106, v25, KeyPath);
  swift_release(v22);
  swift_release(KeyPath);
  swift_release(v24);
  LOBYTE(v4) = v106;
  sub_10000B074((uint64_t)v8, (uint64_t)v11, &qword_10028CF18);
  v11[*(int *)(v9 + 36)] = v4;
  sub_10000A020((uint64_t)v8, &qword_10028CF18);
  v26 = *(int *)(v21 + 40);
  v27 = v1;
  v28 = (char *)(v1 + v26);
  v29 = *v28;
  v30 = *((_QWORD *)v28 + 1);
  LOBYTE(v110[0]) = v29;
  v110[1] = v30;
  v31 = sub_100006DF4(&qword_10028CF50);
  State.projectedValue.getter(&v106, v31);
  v32 = v106;
  v33 = v107;
  v34 = v108;
  v35 = type metadata accessor for GenderDisambiguationLearnMoreView(0);
  v36 = sub_10004826C();
  v37 = sub_100007D5C(&qword_10028CF70, (uint64_t (*)(uint64_t))&type metadata accessor for GenderDisambiguationLearnMoreView, (uint64_t)&protocol conformance descriptor for GenderDisambiguationLearnMoreView);
  v38 = v87;
  View.formSheet<A>(isPresented:content:)(v32, v33, v34, &j___s13TranslationUI33GenderDisambiguationLearnMoreViewVACycfC, 0, v9, v35, v36, v37);
  swift_release(v33);
  swift_release(v32);
  sub_10000A020((uint64_t)v11, &qword_10028CF20);
  v39 = v93;
  sub_100032D68(v27, v93, type metadata accessor for ComposeTranslationCardView);
  v40 = *(unsigned __int8 *)(v94 + 80);
  v105 += (v40 + 16) & ~v40;
  v41 = (v40 + 16) & ~v40;
  v84 = v41;
  v42 = v40 | 7;
  v43 = swift_allocObject(&unk_100265318, v105, v40 | 7);
  v44 = v39;
  sub_100048338(v39, v43 + v41);
  v45 = v90;
  v46 = (uint64_t)v88;
  v47 = v91;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v88, v38, v91);
  v48 = v89;
  v49 = (uint64_t (**)())(v46 + *(int *)(v89 + 36));
  *v49 = sub_10004837C;
  v49[1] = (uint64_t (*)())v43;
  v49[2] = 0;
  v49[3] = 0;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v47);
  v50 = *(int *)(v86 + 36);
  v85 = v27;
  v51 = (char *)(v27 + v50);
  v52 = *v51;
  v53 = (void *)*((_QWORD *)v51 + 1);
  LOBYTE(v51) = v51[16];
  LOBYTE(v106) = v52;
  v107 = v53;
  LOBYTE(v108) = (_BYTE)v51;
  v54 = sub_100006DF4(&qword_10028CF78);
  FocusState.wrappedValue.getter(v110, v54);
  LOBYTE(v106) = v110[0];
  v55 = v44;
  sub_100032D68(v27, v44, type metadata accessor for ComposeTranslationCardView);
  v56 = v105;
  v57 = swift_allocObject(&unk_100265340, v105, v42);
  v58 = v84;
  sub_100048338(v55, v57 + v84);
  v59 = sub_100048398();
  View.onChange<A>(of:initial:_:)(&v106, 0, sub_10004838C, v57, v48, &type metadata for Bool, v59, &protocol witness table for Bool);
  swift_release(v57);
  sub_10000A020(v46, &qword_10028CF30);
  v60 = *(_QWORD *)(*(_QWORD *)(v92 + 8) + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
  v61 = swift_getKeyPath(&unk_1001E8510);
  v106 = v60;
  v62 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  swift_retain(v60);
  v63 = v62;
  v64 = v85;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v106, v61, v63);
  swift_release(v61);
  LOBYTE(v47) = *(_BYTE *)(v60 + 24);
  swift_release(v60);
  LOBYTE(v110[0]) = v47;
  sub_100032D68(v64, v55, type metadata accessor for ComposeTranslationCardView);
  v65 = v56;
  v66 = v58;
  v94 = v42;
  v67 = swift_allocObject(&unk_100265368, v65, v42);
  sub_100048338(v55, v67 + v58);
  v106 = v48;
  v107 = &type metadata for Bool;
  v108 = v59;
  v109 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v69 = v96;
  v70 = v95;
  v71 = v104;
  View.onChange<A>(of:initial:_:)(v110, 0, sub_10004847C, v67, v96, &type metadata for Bool, OpaqueTypeConformance2, &protocol witness table for Bool);
  swift_release(v67);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v71, v69);
  v72 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10028A510 != -1)
    swift_once(&qword_10028A510, sub_100194F3C);
  v73 = v100;
  NSNotificationCenter.publisher(for:object:)(qword_1002AA638, 0);

  sub_100032D68(v64, v55, type metadata accessor for ComposeTranslationCardView);
  v74 = swift_allocObject(&unk_100265390, v105, v94);
  sub_100048338(v55, v74 + v66);
  v76 = v98;
  v75 = v99;
  v77 = v102;
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 16))(v102, v70, v99);
  v78 = sub_100006DF4(&qword_10028CF88);
  v79 = v101;
  v80 = v103;
  (*(void (**)(uint64_t, char *, uint64_t))(v101 + 16))(v77 + *(int *)(v78 + 52), v73, v103);
  v81 = (uint64_t (**)(uint64_t))(v77 + *(int *)(v78 + 56));
  *v81 = sub_1000484E8;
  v81[1] = (uint64_t (*)(uint64_t))v74;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v73, v80);
  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v70, v75);
}

uint64_t sub_1000402E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v56 = a2;
  v55 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v55);
  v54 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100006DF4(&qword_10028CF90);
  __chkstk_darwin(v51);
  v5 = (uint64_t *)((char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006DF4(&qword_10028CF98);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028CFA0);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006DF4(&qword_10028CFA8);
  __chkstk_darwin(v52);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100006DF4(&qword_10028CFB0);
  v14 = __chkstk_darwin(v53);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v14);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v17 = sub_100006DF4(&qword_10028CFB8);
  sub_100040748(a1, (uint64_t)&v8[*(int *)(v17 + 44)]);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8)
                  + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
  KeyPath = swift_getKeyPath(&unk_1001E85C8);
  v57 = v18;
  v20 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  swift_retain(v18);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v57, KeyPath, v20);
  swift_release(KeyPath);
  v21 = *(_QWORD *)(v18 + 16);
  swift_release(v18);
  v22 = sub_10000B074((uint64_t)v8, (uint64_t)v5 + *(int *)(v51 + 36), &qword_10028CF98);
  *v5 = v21;
  v23 = static Animation.linear.getter(v22);
  sub_10000B074((uint64_t)v5, (uint64_t)v11, &qword_10028CF90);
  v24 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v24 = v23;
  v24[1] = v21;
  sub_10000A020((uint64_t)v5, &qword_10028CF90);
  v25 = sub_10000A020((uint64_t)v8, &qword_10028CF98);
  LOBYTE(v23) = static Edge.Set.all.getter(v25);
  v26 = EdgeInsets.init(_all:)(20.0);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_10000B074((uint64_t)v11, (uint64_t)v13, &qword_10028CFA0);
  v33 = &v13[*(int *)(v52 + 36)];
  *v33 = v23;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_10000A020((uint64_t)v11, &qword_10028CFA0);
  v34 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemGroupedBackgroundColor");
  v35 = Color.init(uiColor:)(v34);
  LOBYTE(a1) = static Edge.Set.all.getter(v35);
  sub_10000B074((uint64_t)v13, (uint64_t)v16, &qword_10028CFA8);
  v36 = &v16[*(int *)(v53 + 36)];
  *(_QWORD *)v36 = v35;
  v36[8] = a1;
  sub_10000A020((uint64_t)v13, &qword_10028CFA8);
  v37 = v54;
  v38 = &v54[*(int *)(v55 + 20)];
  v39 = enum case for RoundedCornerStyle.continuous(_:);
  v40 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v38, v39, v40);
  __asm { FMOV            V0.2D, #10.0 }
  *v37 = _Q0;
  v46 = sub_100006DF4(&qword_10028CFC0);
  v47 = v56;
  v48 = v56 + *(int *)(v46 + 36);
  sub_100032D68((uint64_t)v37, v48, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v48 + *(int *)(sub_100006DF4(&qword_10028CFC8) + 36)) = 256;
  sub_10000B074((uint64_t)v16, v47, &qword_10028CFB0);
  sub_100032DAC((uint64_t)v37, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_10000A020((uint64_t)v16, &qword_10028CFB0);
}

uint64_t sub_100040748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v4 = sub_100006DF4(&qword_10028CFD0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v25 - v8);
  *v9 = sub_10003F0A4();
  sub_100040904(a1, (uint64_t)v9 + *(int *)(v4 + 44));
  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  KeyPath = swift_getKeyPath(&unk_1001E85F0);
  v12 = swift_getKeyPath(&unk_1001E8618);
  v13 = swift_retain(v10);
  static Published.subscript.getter(&v26, v13, KeyPath);
  swift_release(v10);
  swift_release(KeyPath);
  v14 = swift_release(v12);
  v15 = v26;
  LOBYTE(KeyPath) = static Edge.Set.top.getter(v14);
  v16 = EdgeInsets.init(_all:)(6.0);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  sub_10000B074((uint64_t)v9, (uint64_t)v7, &qword_10028CFD0);
  sub_10000B074((uint64_t)v7, a2, &qword_10028CFD0);
  v23 = a2 + *(int *)(sub_100006DF4(&qword_10028CFD8) + 48);
  *(_QWORD *)v23 = v15;
  *(_BYTE *)(v23 + 8) = KeyPath;
  *(double *)(v23 + 16) = v16;
  *(_QWORD *)(v23 + 24) = v18;
  *(_QWORD *)(v23 + 32) = v20;
  *(_QWORD *)(v23 + 40) = v22;
  *(_BYTE *)(v23 + 48) = 0;
  swift_bridgeObjectRetain(v15);
  sub_10000A020((uint64_t)v9, &qword_10028CFD0);
  swift_bridgeObjectRelease(v15);
  return sub_10000A020((uint64_t)v7, &qword_10028CFD0);
}

uint64_t sub_100040904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  _QWORD *v57;
  void (*v58)(_QWORD);
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  int v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  char *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, _QWORD, uint64_t);
  unsigned int v129;
  void (*v130)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[2];
  _QWORD v158[2];
  unsigned __int8 v159;

  v152 = a2;
  v3 = sub_100006DF4(&qword_10028CFE0);
  v4 = __chkstk_darwin(v3);
  v150 = (uint64_t)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v151 = (uint64_t *)((char *)&v121 - v6);
  v139 = type metadata accessor for UUID(0);
  v138 = *(_QWORD *)(v139 - 8);
  v7 = __chkstk_darwin(v139);
  v137 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v136 = (char *)&v121 - v9;
  v10 = type metadata accessor for ComposeTranslationCardView(0);
  v133 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v134 = v11;
  v135 = (uint64_t)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UserInterfaceSizeClass(0);
  v154 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v124 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100006DF4(&qword_10028CFE8);
  v14 = __chkstk_darwin(v155);
  v146 = (uint64_t)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v121 - v16;
  v18 = sub_100006DF4(&qword_10028CE40);
  v19 = __chkstk_darwin(v18);
  v123 = (uint64_t)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v153 = (uint64_t)&v121 - v22;
  v23 = __chkstk_darwin(v21);
  v140 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v121 - v24);
  v25 = __chkstk_darwin(v23);
  v122 = (uint64_t)&v121 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v121 - v28;
  __chkstk_darwin(v27);
  v31 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v121 - v30);
  v131 = type metadata accessor for LanguageFlipperBindingView(0);
  __chkstk_darwin(v131);
  v33 = (char *)&v121 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100006DF4(&qword_10028CFF0);
  __chkstk_darwin(v132);
  v143 = (uint64_t)&v121 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100006DF4(&qword_10028CFF8);
  v35 = __chkstk_darwin(v142);
  v149 = (uint64_t)&v121 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v141 = (uint64_t)&v121 - v38;
  __chkstk_darwin(v37);
  v147 = (uint64_t)&v121 - v39;
  v40 = sub_100006DF4(&qword_10028D000);
  v41 = __chkstk_darwin(v40);
  v148 = (uint64_t)&v121 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v121 - v44;
  v46 = __chkstk_darwin(v43);
  v48 = (char *)&v121 - v47;
  *(_QWORD *)v45 = static HorizontalAlignment.leading.getter(v46);
  *((_QWORD *)v45 + 1) = 0x4008000000000000;
  v45[16] = 0;
  v49 = sub_100006DF4(&qword_10028D008);
  sub_1000415C8(a1, (uint64_t)&v45[*(int *)(v49 + 44)]);
  v145 = v48;
  sub_1000110A4((uint64_t)v45, (uint64_t)v48, &qword_10028D000);
  v50 = (uint64_t *)(a1 + *(int *)(v10 + 28));
  v51 = *v50;
  v52 = v50[1];
  v53 = type metadata accessor for ComposeTranslationViewModel(0);
  v54 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  v55 = ObservedObject.projectedValue.getter(v51, v52, v53, v54);
  KeyPath = swift_getKeyPath(&unk_1001E8638);
  ObservedObject.Wrapper.subscript.getter(v158, KeyPath, v55, v54);
  swift_release(KeyPath);
  swift_release(v55);
  v127 = v158[0];
  v126 = v158[1];
  v125 = v159;
  v144 = a1;
  v57 = (_QWORD *)v154;
  sub_1000D58EC(v31);
  v58 = (void (*)(_QWORD))v57[13];
  v129 = enum case for UserInterfaceSizeClass.compact(_:);
  v128 = (void (*)(uint64_t, _QWORD, uint64_t))v58;
  v58(v29);
  v130 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v57[7];
  v130(v29, 0, 1, v12);
  v59 = (uint64_t)&v17[*(int *)(v155 + 48)];
  sub_10000B074((uint64_t)v31, (uint64_t)v17, &qword_10028CE40);
  sub_10000B074((uint64_t)v29, v59, &qword_10028CE40);
  v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v57[6];
  if (v60((uint64_t)v17, 1, v12) == 1)
  {
    sub_10000A020((uint64_t)v29, &qword_10028CE40);
    sub_10000A020((uint64_t)v31, &qword_10028CE40);
    v61 = v60(v59, 1, v12);
    if (v61 == 1)
      v62 = &qword_10028CE40;
    else
      v62 = &qword_10028CFE8;
    if (v61 == 1)
      v63 = -1;
    else
      v63 = 0;
  }
  else
  {
    v64 = v122;
    sub_10000B074((uint64_t)v17, v122, &qword_10028CE40);
    v121 = v60;
    if (v60(v59, 1, v12) == 1)
    {
      sub_10000A020((uint64_t)v29, &qword_10028CE40);
      sub_10000A020((uint64_t)v31, &qword_10028CE40);
      (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v64, v12);
      v63 = 0;
      v62 = &qword_10028CFE8;
    }
    else
    {
      v65 = v154;
      v66 = v124;
      (*(void (**)(char *, uint64_t, uint64_t))(v154 + 32))(v124, v59, v12);
      v67 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v63 = dispatch thunk of static Equatable.== infix(_:_:)(v64, v66, v12, v67);
      v68 = *(void (**)(char *, uint64_t))(v65 + 8);
      v68(v66, v12);
      v62 = &qword_10028CE40;
      sub_10000A020((uint64_t)v29, &qword_10028CE40);
      sub_10000A020((uint64_t)v31, &qword_10028CE40);
      v68((char *)v64, v12);
    }
    v60 = v121;
  }
  sub_10000A020((uint64_t)v17, v62);
  v69 = v144;
  v70 = v135;
  sub_100032D68(v144, v135, type metadata accessor for ComposeTranslationCardView);
  v71 = *(unsigned __int8 *)(v133 + 80);
  v72 = (v71 + 16) & ~v71;
  v73 = swift_allocObject(&unk_1002653B8, v72 + v134, v71 | 7);
  v74 = sub_100048338(v70, v73 + v72);
  v75 = v126;
  *(_QWORD *)v33 = v127;
  *((_QWORD *)v33 + 1) = v75;
  v33[16] = v125;
  v33[17] = v63 & 1;
  *((_WORD *)v33 + 9) = 256;
  *((_QWORD *)v33 + 3) = sub_10004854C;
  *((_QWORD *)v33 + 4) = v73;
  v76 = v131;
  v77 = &v33[*(int *)(v131 + 36)];
  v78 = v136;
  UUID.init()(v74);
  v79 = v138;
  v80 = v137;
  v81 = v139;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v137, v78, v139);
  State.init(wrappedValue:)(v77, v80, v81);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v81);
  v82 = *(int *)(v76 + 40);
  v83 = v69;
  v84 = &v33[v82];
  v156 = 0;
  State.init(wrappedValue:)(v157, &v156, &type metadata for Angle);
  v85 = v157[1];
  *(_QWORD *)v84 = v157[0];
  *((_QWORD *)v84 + 1) = v85;
  v86 = v143;
  sub_100032D68((uint64_t)v33, v143, type metadata accessor for LanguageFlipperBindingView);
  *(_QWORD *)(v86 + *(int *)(v132 + 36)) = 0x3FB999999999999ALL;
  v87 = sub_100032DAC((uint64_t)v33, type metadata accessor for LanguageFlipperBindingView);
  v88 = static Edge.Set.horizontal.getter(v87);
  v89 = v140;
  sub_1000D58EC(v140);
  v90 = v153;
  v128(v153, v129, v12);
  v130((char *)v90, 0, 1, v12);
  v91 = v146;
  v92 = v146 + *(int *)(v155 + 48);
  sub_10000B074((uint64_t)v89, v146, &qword_10028CE40);
  sub_10000B074(v90, v92, &qword_10028CE40);
  if (v60(v91, 1, v12) != 1)
  {
    v94 = v123;
    sub_10000B074(v91, v123, &qword_10028CE40);
    if (v60(v92, 1, v12) != 1)
    {
      v95 = v88;
      v96 = v154;
      v97 = v124;
      (*(void (**)(char *, uint64_t, uint64_t))(v154 + 32))(v124, v92, v12);
      v98 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      LODWORD(v155) = dispatch thunk of static Equatable.== infix(_:_:)(v94, v97, v12, v98);
      v99 = *(void (**)(char *, uint64_t))(v96 + 8);
      v99(v97, v12);
      sub_10000A020(v153, &qword_10028CE40);
      sub_10000A020((uint64_t)v89, &qword_10028CE40);
      v99((char *)v94, v12);
      v88 = v95;
      sub_10000A020(v91, &qword_10028CE40);
      v93 = 0.0;
      if ((v155 & 1) != 0)
        goto LABEL_20;
LABEL_19:
      v93 = 24.0;
      goto LABEL_20;
    }
    sub_10000A020(v90, &qword_10028CE40);
    sub_10000A020((uint64_t)v89, &qword_10028CE40);
    (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v94, v12);
LABEL_17:
    sub_10000A020(v91, &qword_10028CFE8);
    goto LABEL_19;
  }
  sub_10000A020(v90, &qword_10028CE40);
  sub_10000A020((uint64_t)v89, &qword_10028CE40);
  if (v60(v92, 1, v12) != 1)
    goto LABEL_17;
  sub_10000A020(v91, &qword_10028CE40);
  v93 = 0.0;
LABEL_20:
  v100 = EdgeInsets.init(_all:)(v93);
  v102 = v101;
  v104 = v103;
  v106 = v105;
  v107 = v141;
  sub_10000B074(v86, v141, &qword_10028CFF0);
  v108 = v107 + *(int *)(v142 + 36);
  *(_BYTE *)v108 = v88;
  *(double *)(v108 + 8) = v100;
  *(_QWORD *)(v108 + 16) = v102;
  *(_QWORD *)(v108 + 24) = v104;
  *(_QWORD *)(v108 + 32) = v106;
  *(_BYTE *)(v108 + 40) = 0;
  sub_10000A020(v86, &qword_10028CFF0);
  v109 = v147;
  v110 = sub_1000110A4(v107, v147, &qword_10028CFF8);
  v111 = static HorizontalAlignment.leading.getter(v110);
  v112 = (uint64_t)v151;
  *v151 = v111;
  *(_QWORD *)(v112 + 8) = 0x4008000000000000;
  *(_BYTE *)(v112 + 16) = 0;
  v113 = sub_100006DF4(&qword_10028D018);
  sub_1000433F0(v83, v112 + *(int *)(v113 + 44));
  v114 = (uint64_t)v145;
  v115 = v148;
  sub_10000B074((uint64_t)v145, v148, &qword_10028D000);
  v116 = v149;
  sub_10000B074(v109, v149, &qword_10028CFF8);
  v117 = v150;
  sub_10000B074(v112, v150, &qword_10028CFE0);
  v118 = v152;
  sub_10000B074(v115, v152, &qword_10028D000);
  v119 = sub_100006DF4(&qword_10028D020);
  sub_10000B074(v116, v118 + *(int *)(v119 + 48), &qword_10028CFF8);
  sub_10000B074(v117, v118 + *(int *)(v119 + 64), &qword_10028CFE0);
  sub_10000A020(v112, &qword_10028CFE0);
  sub_10000A020(v109, &qword_10028CFF8);
  sub_10000A020(v114, &qword_10028D000);
  sub_10000A020(v117, &qword_10028CFE0);
  sub_10000A020(v116, &qword_10028CFF8);
  return sub_10000A020(v115, &qword_10028D000);
}

uint64_t sub_1000415C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v117 = a2;
  v118 = a1;
  v110 = type metadata accessor for UserInterfaceSizeClass(0);
  v112 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v100 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v113);
  v109 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028CE40);
  v6 = __chkstk_darwin(v5);
  v101 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v111 = (char *)&v100 - v9;
  __chkstk_darwin(v8);
  v108 = (char *)&v100 - v10;
  v11 = sub_100006DF4(&qword_10028D058);
  v12 = __chkstk_darwin(v11);
  v116 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v114 = (char *)&v100 - v14;
  v15 = sub_100006DF4(&qword_10028D108);
  v16 = __chkstk_darwin(v15);
  v115 = (uint64_t)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v107 = (uint64_t *)((char *)&v100 - v19);
  __chkstk_darwin(v18);
  v119 = (uint64_t)&v100 - v20;
  v21 = type metadata accessor for Locale(0);
  __chkstk_darwin(v21);
  v23 = (char **)((char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = sub_100006DF4(&qword_10028C290);
  __chkstk_darwin(v24);
  v26 = (char **)((char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for LanguagePicker(0);
  v105 = *(_QWORD *)(v27 - 8);
  v106 = v27;
  __chkstk_darwin(v27);
  v103 = (char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100006DF4(&qword_10028D110);
  __chkstk_darwin(v104);
  v30 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100006DF4(&qword_10028D118);
  v32 = __chkstk_darwin(v31);
  v121 = (uint64_t)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v120 = (uint64_t)&v100 - v34;
  v35 = type metadata accessor for ComposeTranslationCardView(0);
  v36 = (_QWORD *)(a1 + *(int *)(v35 + 28));
  v37 = *v36;
  v38 = v36[1];
  v39 = type metadata accessor for ComposeTranslationViewModel(0);
  v40 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  v41 = ObservedObject.projectedValue.getter(v37, v38, v39, v40);
  KeyPath = swift_getKeyPath(&unk_1001E8688);
  ObservedObject.Wrapper.subscript.getter(v26, KeyPath, v41, v40);
  swift_release(v41);
  swift_release(KeyPath);
  v102 = v36;
  v43 = v36[1];
  v44 = swift_getKeyPath(&unk_1001E8660);
  v45 = swift_getKeyPath(&unk_1001E87A8);
  v46 = swift_retain(v43);
  static Published.subscript.getter(v23, v46, v44);
  swift_release(v43);
  swift_release(v44);
  v47 = (uint64_t)v109;
  swift_release(v45);
  v48 = v118;
  v49 = *(_QWORD *)(v118 + *(int *)(v35 + 32) + 8);
  v50 = swift_retain(v49);
  v51 = LanguagesService.models.getter(v50);
  swift_release(v49);
  v52 = v103;
  v53 = v108;
  v54 = LanguagePicker.init(selectedLocale:preferredLocales:oppositeLocale:languageModels:disabledLanguages:)(v26, 0, v23, v51, &_swiftEmptySetSingleton);
  v55 = static Color.primary.getter(v54);
  v56 = swift_getKeyPath(&unk_1001E8AF0);
  v58 = v105;
  v57 = v106;
  v59 = v52;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v30, v52, v106);
  v60 = v104;
  v61 = (uint64_t *)&v30[*(int *)(v104 + 36)];
  *v61 = v56;
  v61[1] = v55;
  v62 = v121;
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v57);
  v63 = sub_1000491AC();
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9B10, v60, v63);
  sub_10000A020((uint64_t)v30, &qword_10028D110);
  v64 = sub_1000110A4(v62, v120, &qword_10028D118);
  v65 = static VerticalAlignment.top.getter(v64);
  v66 = (uint64_t)v107;
  *v107 = v65;
  *(_QWORD *)(v66 + 8) = 0;
  *(_BYTE *)(v66 + 16) = 1;
  v67 = sub_100006DF4(&qword_10028D128);
  sub_100041F30(v48, v66 + *(int *)(v67 + 44));
  v68 = (uint64_t)v111;
  v69 = v112;
  sub_1000110A4(v66, v119, &qword_10028D108);
  sub_1000D58EC(v53);
  v70 = v110;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v69 + 104))(v68, enum case for UserInterfaceSizeClass.compact(_:), v110);
  v71 = v70;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v68, 0, 1, v70);
  v72 = v47 + *(int *)(v113 + 48);
  v73 = (uint64_t)v53;
  sub_10000B074((uint64_t)v53, v47, &qword_10028CE40);
  sub_10000B074(v68, v72, &qword_10028CE40);
  v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  v75 = v47;
  v76 = v71;
  if (v74(v47, 1, v71) == 1)
  {
    sub_10000A020(v68, &qword_10028CE40);
    sub_10000A020(v73, &qword_10028CE40);
    v77 = v74(v72, 1, v71);
    v78 = (uint64_t)v114;
    if (v77 == 1)
    {
      sub_10000A020(v47, &qword_10028CE40);
      goto LABEL_9;
    }
  }
  else
  {
    v79 = v101;
    sub_10000B074(v47, v101, &qword_10028CE40);
    if (v74(v72, 1, v76) != 1)
    {
      v80 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v100, v72, v76);
      v81 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v82 = dispatch thunk of static Equatable.== infix(_:_:)(v79, v80, v76, v81);
      v83 = *(void (**)(char *, uint64_t))(v69 + 8);
      v83(v80, v76);
      sub_10000A020(v68, &qword_10028CE40);
      sub_10000A020(v73, &qword_10028CE40);
      v83((char *)v79, v76);
      sub_10000A020(v75, &qword_10028CE40);
      v78 = (uint64_t)v114;
      if ((v82 & 1) != 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    sub_10000A020(v68, &qword_10028CE40);
    sub_10000A020(v73, &qword_10028CE40);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v79, v76);
    v78 = (uint64_t)v114;
  }
  sub_10000A020(v47, &qword_10028CFE8);
LABEL_8:
  v84 = v102[1];
  v85 = swift_getKeyPath(&unk_1001E8760);
  v86 = swift_getKeyPath(&unk_1001E8788);
  v87 = swift_retain(v84);
  static Published.subscript.getter(&v122, v87, v85);
  swift_release(v84);
  swift_release(v85);
  swift_release(v86);
  if (v122 != 3)
  {
    sub_10004313C(v122, v78);
    v89 = type metadata accessor for ErrorStateView(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v78, 0, 1, v89);
    goto LABEL_11;
  }
LABEL_9:
  v88 = type metadata accessor for ErrorStateView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v78, 1, 1, v88);
LABEL_11:
  v91 = v120;
  v90 = v121;
  sub_10000B074(v120, v121, &qword_10028D118);
  v92 = v119;
  v93 = v115;
  sub_10000B074(v119, v115, &qword_10028D108);
  v94 = v116;
  sub_10000B074(v78, v116, &qword_10028D058);
  v95 = v117;
  sub_10000B074(v90, v117, &qword_10028D118);
  v96 = v78;
  v97 = (int *)sub_100006DF4(&qword_10028D130);
  sub_10000B074(v93, v95 + v97[12], &qword_10028D108);
  v98 = v95 + v97[16];
  *(_QWORD *)v98 = 0x3F847AE147AE147BLL;
  *(_BYTE *)(v98 + 8) = 0;
  sub_10000B074(v94, v95 + v97[20], &qword_10028D058);
  sub_10000A020(v96, &qword_10028D058);
  sub_10000A020(v92, &qword_10028D108);
  sub_10000A020(v91, &qword_10028D118);
  sub_10000A020(v94, &qword_10028D058);
  sub_10000A020(v93, &qword_10028D108);
  return sub_10000A020(v90, &qword_10028D118);
}

uint64_t sub_100041F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (**v52)(uint64_t);
  uint64_t (**v53)(uint64_t);
  uint64_t (**v54)();
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int *v76;
  void (**v77)(char *, char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  void (**v144)(char *, char *, uint64_t);
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE v152[7];
  int v153;
  char v154;
  unsigned __int8 v155;
  _BYTE v156[7];
  _BYTE v157[7];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  char v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  _BYTE v187[7];
  char v188;
  _BYTE v189[7];
  double v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;

  v142 = a2;
  v3 = type metadata accessor for LayoutDirection(0);
  v144 = *(void (***)(char *, char *, uint64_t))(v3 - 8);
  v145 = v3;
  __chkstk_darwin(v3);
  v143 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ComposeTranslationCardView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  v148 = v5;
  v8 = *(_QWORD *)(v6 + 64);
  v131 = v6;
  v132 = v8;
  __chkstk_darwin(v5);
  v10 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v149 = *(_QWORD *)(v11 - 8);
  v150 = v11;
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v146 = v13;
  v14 = (int *)type metadata accessor for LanguageAwareEditor(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_10028B2C0);
  v137 = *(_QWORD *)(v17 - 8);
  v138 = v17;
  __chkstk_darwin(v17);
  v135 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4(&qword_10028B2C8);
  __chkstk_darwin(v19);
  v136 = (uint64_t)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100006DF4(&qword_10028D138);
  __chkstk_darwin(v140);
  v139 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006DF4(&qword_10028D140);
  v23 = __chkstk_darwin(v22);
  v151 = (uint64_t)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v141 = (char *)&v121 - v26;
  __chkstk_darwin(v25);
  v147 = (uint64_t)&v121 - v27;
  v28 = sub_10003F5CC();
  v129 = v29;
  v130 = v28;
  v127 = v31;
  v128 = v30;
  v134 = a1 + *(int *)(v7 + 28);
  v32 = a1;
  v33 = *(_QWORD *)(v134 + 8);
  swift_retain(v33);
  v34 = sub_10004B140();
  v125 = v35;
  v126 = v34;
  swift_release(v33);
  KeyPath = swift_getKeyPath(&unk_1001E8688);
  v37 = swift_getKeyPath(&unk_1001E86B0);
  v38 = swift_retain(v33);
  static Published.subscript.getter(v13, v38, KeyPath);
  swift_release(v33);
  swift_release(KeyPath);
  swift_release(v37);
  v124 = sub_10003F788();
  v123 = objc_msgSend((id)objc_opt_self(UIColor), "quaternaryLabelColor");
  v122 = sub_10003F3EC();
  v39 = v32;
  sub_100032D68(v32, (uint64_t)v10, type metadata accessor for ComposeTranslationCardView);
  v40 = *(unsigned __int8 *)(v131 + 80);
  v41 = (v40 + 16) & ~v40;
  v42 = v41 + v132;
  v43 = v40 | 7;
  v44 = swift_allocObject(&unk_1002655C0, v41 + v132, v40 | 7);
  sub_100048338((uint64_t)v10, v44 + v41);
  sub_100032D68(v39, (uint64_t)v10, type metadata accessor for ComposeTranslationCardView);
  v45 = swift_allocObject(&unk_1002655E8, v42, v43);
  sub_100048338((uint64_t)v10, v45 + v41);
  v133 = v39;
  sub_100032D68(v39, (uint64_t)v10, type metadata accessor for ComposeTranslationCardView);
  v46 = swift_allocObject(&unk_100265610, v42, v43);
  sub_100048338((uint64_t)v10, v46 + v41);
  v47 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache();
  v48 = (_QWORD *)swift_allocObject(v47, 40, 7);
  v48[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
  v48[3] = _swiftEmptyArrayStorage;
  v48[4] = 100;
  v49 = v129;
  *(_QWORD *)v16 = v130;
  *((_QWORD *)v16 + 1) = v49;
  v50 = v127;
  *((_QWORD *)v16 + 2) = v128;
  *((_QWORD *)v16 + 3) = v50;
  v51 = v125;
  *((_QWORD *)v16 + 4) = v126;
  *((_QWORD *)v16 + 5) = v51;
  (*(void (**)(char *, _QWORD *, uint64_t))(v149 + 32))(&v16[v14[6]], v146, v150);
  *(_QWORD *)&v16[v14[7]] = v124;
  *(_QWORD *)&v16[v14[8]] = v123;
  *(_QWORD *)&v16[v14[9]] = v122;
  *(_QWORD *)&v16[v14[10]] = 4;
  v16[v14[11]] = 1;
  *(_QWORD *)&v16[v14[12]] = 0;
  v16[v14[13]] = 1;
  v52 = (uint64_t (**)(uint64_t))&v16[v14[14]];
  *v52 = sub_10004924C;
  v52[1] = (uint64_t (*)(uint64_t))v44;
  v53 = (uint64_t (**)(uint64_t))&v16[v14[15]];
  *v53 = sub_10004925C;
  v53[1] = (uint64_t (*)(uint64_t))v45;
  v54 = (uint64_t (**)())&v16[v14[16]];
  *v54 = sub_10004926C;
  v54[1] = (uint64_t (*)())v46;
  v55 = &v16[v14[17]];
  *(_QWORD *)v55 = 0;
  *((_QWORD *)v55 + 1) = 0;
  *(_QWORD *)&v16[v14[18]] = 205;
  *(_QWORD *)&v16[v14[19]] = v48;
  v56 = v39 + *(int *)(v148 + 36);
  v57 = *(_BYTE *)v56;
  v58 = *(_QWORD *)(v56 + 8);
  LOBYTE(v56) = *(_BYTE *)(v56 + 16);
  LOBYTE(v158) = v57;
  *((_QWORD *)&v158 + 1) = v58;
  LOBYTE(v159) = v56;
  v59 = sub_100006DF4(&qword_10028CF78);
  FocusState.projectedValue.getter(&v170, v59);
  v60 = v170;
  v61 = v171;
  v62 = v172;
  v63 = sub_100007D5C((unint64_t *)&unk_100292970, type metadata accessor for LanguageAwareEditor, (uint64_t)&unk_1001EF5F0);
  v64 = v135;
  View.focused(_:)(*(_QWORD *)&v60, v61, v62, v14, v63);
  swift_release(v61);
  swift_release(*(_QWORD *)&v60);
  v65 = sub_100032DAC((uint64_t)v16, type metadata accessor for LanguageAwareEditor);
  v66 = static Alignment.leading.getter(v65);
  v67 = v136;
  v69 = sub_100018AAC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v136, 0.0, 1, 0.0, 1, v66, v68);
  (*(void (**)(char *, uint64_t, double))(v137 + 8))(v64, v138, v69);
  v70 = swift_getKeyPath(&unk_1001E89E8);
  v71 = *(_QWORD *)(v134 + 8);
  v72 = swift_getKeyPath(&unk_1001E8688);
  v73 = swift_getKeyPath(&unk_1001E86B0);
  v74 = swift_retain(v71);
  v75 = v146;
  static Published.subscript.getter(v146, v74, v72);
  swift_release(v71);
  swift_release(v72);
  swift_release(v73);
  LOBYTE(v71) = Locale.isRTL()();
  (*(void (**)(_QWORD *, uint64_t))(v149 + 8))(v75, v150);
  v76 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v78 = v143;
  v77 = v144;
  if ((v71 & 1) == 0)
    v76 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v79 = v145;
  v144[13](v143, (char *)*v76, v145);
  v81 = (uint64_t)v139;
  v80 = v140;
  v82 = (uint64_t *)&v139[*(int *)(v140 + 36)];
  v83 = sub_100006DF4(&qword_10028B258);
  v77[2]((char *)v82 + *(int *)(v83 + 28), v78, v79);
  *v82 = v70;
  sub_10000B074(v67, v81, &qword_10028B2C8);
  ((void (*)(char *, uint64_t))v77[1])(v78, v79);
  sub_10000A020(v67, &qword_10028B2C8);
  v84 = sub_1000492A4();
  v85 = (uint64_t)v141;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9B30, v80, v84);
  sub_10000A020(v81, &qword_10028D138);
  v86 = v147;
  v87 = sub_1000110A4(v85, v147, &qword_10028D140);
  v88 = static Alignment.center.getter(v87);
  v136 = v89;
  sub_100042B20(v133, (uint64_t)&v170);
  LOBYTE(v79) = LOBYTE(v170);
  LODWORD(v134) = LOBYTE(v170);
  v90 = BYTE1(v170);
  LODWORD(v132) = BYTE1(v170);
  v91 = BYTE2(v170);
  LODWORD(v131) = BYTE2(v170);
  v92 = v174;
  v144 = (void (**)(char *, char *, uint64_t))v173;
  v145 = v172;
  v135 = v174;
  v143 = v175;
  v130 = (uint64_t)v176;
  v93 = v177;
  v149 = v178;
  v150 = v171;
  LODWORD(v146) = v179;
  v139 = v181;
  v140 = v180;
  v94 = v182;
  v138 = (uint64_t)v183;
  LODWORD(v137) = v184;
  LODWORD(v141) = static Edge.Set.top.getter();
  v95 = sub_100006DF4(&qword_10028CE48);
  ScaledMetric.wrappedValue.getter(&v170, v95);
  v96 = EdgeInsets.init(_all:)(v170);
  v98 = v97;
  v100 = v99;
  v102 = v101;
  v155 = 0;
  v103 = v151;
  sub_10000B074(v86, v151, &qword_10028D140);
  LODWORD(v148) = v155;
  v104 = v142;
  sub_10000B074(v103, v142, &qword_10028D140);
  v105 = v104 + *(int *)(sub_100006DF4(&qword_10028D158) + 48);
  v106 = *(double *)&v88;
  *(_QWORD *)&v158 = v88;
  v107 = v136;
  *((_QWORD *)&v158 + 1) = v136;
  LOBYTE(v159) = v79;
  BYTE1(v159) = v90;
  BYTE2(v159) = v91;
  *(_DWORD *)((char *)&v159 + 3) = v153;
  BYTE7(v159) = v154;
  *((_QWORD *)&v159 + 1) = v150;
  *(_QWORD *)&v160 = v145;
  *((_QWORD *)&v160 + 1) = v144;
  *(_QWORD *)&v161 = v92;
  v108 = v130;
  *((_QWORD *)&v161 + 1) = v143;
  *(_QWORD *)&v162 = v130;
  *((_QWORD *)&v162 + 1) = v93;
  *(_QWORD *)&v163 = v149;
  BYTE8(v163) = (_BYTE)v146;
  *(_DWORD *)((char *)&v163 + 9) = *(_DWORD *)v152;
  HIDWORD(v163) = *(_DWORD *)&v152[3];
  v109 = v139;
  v110 = v140;
  *(_QWORD *)&v164 = v140;
  *((_QWORD *)&v164 + 1) = v139;
  *(_QWORD *)&v165 = v94;
  v111 = v138;
  *((_QWORD *)&v165 + 1) = v138;
  LOBYTE(v104) = v137;
  LOBYTE(v166) = v137;
  *(_DWORD *)((char *)&v166 + 1) = *(_DWORD *)v157;
  DWORD1(v166) = *(_DWORD *)&v157[3];
  LOBYTE(v92) = (_BYTE)v141;
  BYTE8(v166) = (_BYTE)v141;
  HIDWORD(v166) = *(_DWORD *)&v156[3];
  *(_DWORD *)((char *)&v166 + 9) = *(_DWORD *)v156;
  *(double *)&v167 = v96;
  *((_QWORD *)&v167 + 1) = v98;
  *(_QWORD *)&v168 = v100;
  *((_QWORD *)&v168 + 1) = v102;
  v169 = v148;
  v112 = v167;
  v113 = v168;
  *(_BYTE *)(v105 + 176) = v148;
  *(_OWORD *)(v105 + 144) = v112;
  *(_OWORD *)(v105 + 160) = v113;
  v114 = v166;
  *(_OWORD *)(v105 + 112) = v165;
  *(_OWORD *)(v105 + 128) = v114;
  v115 = v158;
  v116 = v159;
  v117 = v161;
  *(_OWORD *)(v105 + 32) = v160;
  *(_OWORD *)(v105 + 48) = v117;
  *(_OWORD *)v105 = v115;
  *(_OWORD *)(v105 + 16) = v116;
  v118 = v162;
  v119 = v164;
  *(_OWORD *)(v105 + 80) = v163;
  *(_OWORD *)(v105 + 96) = v119;
  *(_OWORD *)(v105 + 64) = v118;
  sub_1000493D0(&v158);
  sub_10000A020(v147, &qword_10028D140);
  v170 = v106;
  v171 = v107;
  LOBYTE(v172) = v134;
  BYTE1(v172) = v132;
  BYTE2(v172) = v131;
  *(_DWORD *)((char *)&v172 + 3) = v153;
  HIBYTE(v172) = v154;
  v173 = v150;
  v174 = (char *)v145;
  v175 = (char *)v144;
  v176 = v135;
  v177 = v143;
  v178 = v108;
  v179 = v93;
  v180 = v149;
  LOBYTE(v181) = (_BYTE)v146;
  *(_DWORD *)((char *)&v181 + 1) = *(_DWORD *)v152;
  HIDWORD(v181) = *(_DWORD *)&v152[3];
  v182 = v110;
  v183 = v109;
  v184 = v94;
  v185 = v111;
  v186 = v104;
  *(_DWORD *)v187 = *(_DWORD *)v157;
  *(_DWORD *)&v187[3] = *(_DWORD *)&v157[3];
  v188 = (char)v92;
  *(_DWORD *)&v189[3] = *(_DWORD *)&v156[3];
  *(_DWORD *)v189 = *(_DWORD *)v156;
  v190 = v96;
  v191 = v98;
  v192 = v100;
  v193 = v102;
  v194 = v148;
  sub_100049454(&v170);
  return sub_10000A020(v151, &qword_10028D140);
}

id sub_100042A48(void *a1, uint64_t a2)
{
  id result;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = objc_msgSend(a1, "text");
  if (result)
  {
    v4 = result;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v7 = v6;

    v8 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
    swift_retain(v8);
    sub_10004EAFC(v5, v7);
    swift_bridgeObjectRelease(v7);
    return (id)swift_release(v8);
  }
  return result;
}

uint64_t sub_100042ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  swift_retain(v2);
  sub_10004F1F8(0);
  return swift_release(v2);
}

void sub_100042B20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;

  v4 = type metadata accessor for ComposeTranslationCardView(0);
  v78 = *(char **)(v4 - 8);
  v5 = *((_QWORD *)v78 + 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v79 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v74 - v11;
  v76 = a1 + *(int *)(v4 + 28);
  v13 = *(_QWORD *)(v76 + 8);
  KeyPath = swift_getKeyPath(&unk_1001E8928);
  v15 = swift_getKeyPath(&unk_1001E8950);
  v16 = swift_retain(v13);
  static Published.subscript.getter((uint64_t *)((char *)&v84 + 4), v16, KeyPath);
  swift_release(v13);
  swift_release(KeyPath);
  swift_release(v15);
  v83 = BYTE4(v84);
  swift_retain(v13);
  v82 = sub_10004ACBC();
  swift_release(v13);
  v17 = swift_getKeyPath(&unk_1001E8688);
  v18 = swift_getKeyPath(&unk_1001E86B0);
  v19 = swift_retain(v13);
  static Published.subscript.getter(v12, v19, v17);
  swift_release(v13);
  swift_release(v17);
  v20 = swift_release(v18);
  static Locale.current.getter(v20);
  v21 = Locale.sqDisplayName(context:in:)(0, v10);
  v80 = v22;
  v81 = v21;
  v23 = *(void (**)(char *, uint64_t))(v79 + 8);
  v23(v10, v7);
  v23(v12, v7);
  v79 = a1;
  sub_100032D68(a1, (uint64_t)v6, type metadata accessor for ComposeTranslationCardView);
  v24 = v78[80];
  v25 = v76;
  v26 = (v24 + 16) & ~v24;
  v27 = v26 + v5;
  v28 = v24 | 7;
  v29 = swift_allocObject(&unk_100265638, v27, v24 | 7);
  v78 = v6;
  v30 = sub_100048338((uint64_t)v6, v29 + v26);
  v31 = static Color.sourceTextColor.getter(v30);
  v32 = swift_getKeyPath(&unk_1001E8970);
  v33 = *(_QWORD *)(v25 + 8);
  swift_retain(v33);
  if ((sub_10004ACBC() & 1) != 0)
  {
    if (sub_10005098C())
    {
      v36 = v33;
    }
    else
    {
      v37 = swift_getKeyPath(&unk_1001E8928);
      v38 = swift_getKeyPath(&unk_1001E8950);
      v75 = v31;
      v39 = v32;
      v40 = v38;
      static Published.subscript.getter(&v84, v33, v37);
      swift_release(v33);
      swift_release(v37);
      v36 = v40;
      v32 = v39;
      v31 = v75;
    }
    v34 = swift_release(v36);
    v35 = 0.0;
  }
  else
  {
    v34 = swift_release(v33);
    v35 = 1.0;
  }
  v41 = static Animation.default.getter(v34);
  v42 = *(_QWORD *)(v25 + 8);
  swift_retain(v42);
  if ((sub_10004ACBC() & 1) == 0)
  {
    swift_release(v42);
    v43 = 2;
LABEL_12:
    v77 = v43;
    goto LABEL_13;
  }
  if (!sub_10005098C())
  {
    v44 = swift_getKeyPath(&unk_1001E8928);
    v74 = v41;
    v45 = v44;
    v46 = swift_getKeyPath(&unk_1001E8950);
    v75 = v31;
    v47 = v32;
    v48 = v46;
    static Published.subscript.getter((uint64_t *)((char *)&v84 + 1), v42, v45);
    swift_release(v42);
    v49 = v45;
    v41 = v74;
    swift_release(v49);
    v50 = v48;
    v32 = v47;
    v31 = v75;
    swift_release(v50);
    v43 = (v84 & 0x100) == 0;
    goto LABEL_12;
  }
  swift_release(v42);
  v77 = 0;
LABEL_13:
  v51 = (uint64_t)v78;
  sub_100032D68(v79, (uint64_t)v78, type metadata accessor for ComposeTranslationCardView);
  v52 = swift_allocObject(&unk_100265660, v27, v28);
  sub_100048338(v51, v52 + v26);
  v53 = *(_QWORD *)(v25 + 8);
  swift_retain(v53);
  if ((sub_10004ACBC() & 1) == 0 || sub_10005098C())
  {
    v54 = swift_release(v53);
LABEL_16:
    v55 = 0.0;
    goto LABEL_17;
  }
  v59 = swift_getKeyPath(&unk_1001E8928);
  v60 = v41;
  v61 = swift_getKeyPath(&unk_1001E8950);
  static Published.subscript.getter((uint64_t *)((char *)&v84 + 2), v53, v59);
  swift_release(v53);
  swift_release(v59);
  v62 = v61;
  v41 = v60;
  v54 = swift_release(v62);
  v55 = 1.0;
  if ((v84 & 0x10000) != 0)
    goto LABEL_16;
LABEL_17:
  v56 = static Animation.linear(duration:)(v54, 0.25);
  v57 = *(_QWORD *)(v25 + 8);
  swift_retain(v57);
  if ((sub_10004ACBC() & 1) != 0)
  {
    if (sub_10005098C())
    {
      swift_release(v57);
      v58 = 0;
    }
    else
    {
      v63 = v41;
      v64 = swift_getKeyPath(&unk_1001E8928);
      v65 = v32;
      v66 = swift_getKeyPath(&unk_1001E8950);
      static Published.subscript.getter((uint64_t *)((char *)&v84 + 3), v57, v64);
      swift_release(v57);
      v67 = v64;
      v41 = v63;
      swift_release(v67);
      v68 = v66;
      v32 = v65;
      swift_release(v68);
      v58 = (v84 & 0x1000000) == 0;
    }
  }
  else
  {
    swift_release(v57);
    v58 = 2;
  }
  v69 = v80;
  v70 = v82;
  *(_BYTE *)a2 = v83;
  *(_BYTE *)(a2 + 1) = v70 & 1;
  if (v69)
    v71 = v69;
  else
    v71 = 0xE000000000000000;
  *(_BYTE *)(a2 + 2) = 1;
  v72 = v81;
  if (!v69)
    v72 = 0;
  *(_QWORD *)(a2 + 8) = v72;
  *(_QWORD *)(a2 + 16) = v71;
  *(_QWORD *)(a2 + 24) = sub_1000494DC;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v32;
  *(_QWORD *)(a2 + 48) = v31;
  *(double *)(a2 + 56) = v35;
  *(_QWORD *)(a2 + 64) = v41;
  *(_BYTE *)(a2 + 72) = v77;
  *(_QWORD *)(a2 + 80) = sub_100049648;
  *(_QWORD *)(a2 + 88) = v52;
  *(double *)(a2 + 96) = v55;
  *(_QWORD *)(a2 + 104) = v56;
  *(_BYTE *)(a2 + 112) = v58;
  swift_bridgeObjectRetain(v71);
  swift_retain(v29);
  swift_retain(v32);
  v73 = swift_retain(v31);
  swift_release(v73);
  swift_release(v32);
  swift_release(v29);
  swift_bridgeObjectRelease(v71);
}

uint64_t sub_1000430EC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  swift_retain(v1);
  sub_100054584(0);
  sub_10004D044(0, 0);
  return swift_release(v1);
}

uint64_t sub_10004313C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t);
  _QWORD v26[2];

  v5 = type metadata accessor for ErrorStateView.Context(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (_QWORD *)((char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (_QWORD *)((char *)v26 - v14);
  if (a1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ErrorStateView.Context.translate(_:), v5);
    if (a1 == 1)
      static ErrorStateView.noInternetConnection(context:)(v8);
    else
      static ErrorStateView.missingOfflineAssets(context:)(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v16 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
    KeyPath = swift_getKeyPath(&unk_1001E8688);
    v18 = swift_getKeyPath(&unk_1001E86B0);
    v26[1] = a2;
    v19 = v18;
    v20 = swift_retain(v16);
    static Published.subscript.getter(v15, v20, KeyPath);
    swift_release(v16);
    swift_release(KeyPath);
    swift_release(v19);
    v21 = swift_getKeyPath(&unk_1001E8660);
    v22 = swift_getKeyPath(&unk_1001E87A8);
    v23 = swift_retain(v16);
    static Published.subscript.getter(v13, v23, v21);
    swift_release(v16);
    swift_release(v21);
    swift_release(v22);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ErrorStateView.Context.translate(_:), v5);
    static ErrorStateView.airplaneMode(sourceLocale:targetLocale:context:)(v15, v13, v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
    v24(v13, v9);
    return ((uint64_t (*)(_QWORD *, uint64_t))v24)(v15, v9);
  }
}

uint64_t sub_10004339C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  swift_retain(v1);
  sub_10004DC58(0x72657070696C46, 0xE700000000000000);
  return swift_release(v1);
}

uint64_t sub_1000433F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (**v51)(char *, uint64_t);
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  uint64_t OpaqueTypeConformance2;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  char v131;
  double v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  void *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  uint64_t v164;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (**v193)(char *, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  _OWORD v207[11];
  __int128 v208;
  _BYTE v209[199];
  _QWORD v210[2];
  char v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  _BYTE v223[23];
  uint64_t v224;
  void *v225;
  uint64_t v226;
  void *v227;

  v200 = a1;
  v198 = a2;
  v3 = type metadata accessor for ComposeTranslationCardView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = v3;
  v202 = v3;
  v168 = v4;
  __chkstk_darwin(v3);
  v169 = v6;
  v170 = (uint64_t)&v166 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028D030);
  v172 = *(_QWORD *)(v7 - 8);
  v173 = v7;
  __chkstk_darwin(v7);
  v171 = (char *)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028D038);
  v175 = *(_QWORD *)(v9 - 8);
  v176 = v9;
  __chkstk_darwin(v9);
  v174 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028D040);
  v180 = *(_QWORD *)(v11 - 8);
  v181 = v11;
  __chkstk_darwin(v11);
  v179 = (char *)&v166 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028D048);
  v191 = *(_QWORD *)(v13 - 8);
  v192 = v13;
  v14 = __chkstk_darwin(v13);
  v178 = (char *)&v166 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v177 = (uint64_t)&v166 - v16;
  v17 = sub_100006DF4(&qword_10028D050);
  v18 = __chkstk_darwin(v17);
  v197 = (uint64_t)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v196 = (uint64_t)&v166 - v20;
  v21 = type metadata accessor for UserInterfaceSizeClass(0);
  v22 = *(_QWORD *)(v21 - 8);
  v187 = v21;
  v188 = v22;
  __chkstk_darwin(v21);
  v166 = (char *)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v190);
  v189 = (char *)&v166 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006DF4(&qword_10028CE40);
  v26 = __chkstk_darwin(v25);
  v167 = (uint64_t)&v166 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v186 = (char *)&v166 - v29;
  __chkstk_darwin(v28);
  v199 = (unint64_t)&v166 - v30;
  v31 = sub_100006DF4(&qword_10028D058);
  v32 = __chkstk_darwin(v31);
  v195 = (uint64_t)&v166 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v204 = (uint64_t)&v166 - v34;
  v35 = sub_100006DF4(&qword_10028D060);
  v36 = __chkstk_darwin(v35);
  v194 = (uint64_t)&v166 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v185 = (uint64_t *)((char *)&v166 - v39);
  __chkstk_darwin(v38);
  v203 = (uint64_t)&v166 - v40;
  v41 = type metadata accessor for Locale(0);
  __chkstk_darwin(v41);
  v183 = (char **)((char *)&v166 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = sub_100006DF4(&qword_10028C290);
  __chkstk_darwin(v43);
  v45 = (char **)((char *)&v166 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v182 = v45;
  v184 = type metadata accessor for LanguagePicker(0);
  v193 = *(void (***)(char *, uint64_t))(v184 - 8);
  __chkstk_darwin(v184);
  v47 = (char *)&v166 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100006DF4(&qword_10028C3F0);
  v49 = __chkstk_darwin(v48);
  v51 = (void (**)(char *, uint64_t))((char *)&v166 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v49);
  v205 = (uint64_t)&v166 - v52;
  v53 = (_QWORD *)(a1 + *(int *)(v5 + 28));
  v54 = *v53;
  v55 = v53[1];
  v56 = type metadata accessor for ComposeTranslationViewModel(0);
  v57 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  v58 = ObservedObject.projectedValue.getter(v54, v55, v56, v57);
  KeyPath = swift_getKeyPath(&unk_1001E8660);
  ObservedObject.Wrapper.subscript.getter(v45, KeyPath, v58, v57);
  swift_release(v58);
  swift_release(KeyPath);
  v201 = v53;
  v60 = v53[1];
  v61 = (uint64_t)v186;
  v62 = swift_getKeyPath(&unk_1001E8688);
  v63 = swift_getKeyPath(&unk_1001E86B0);
  v64 = swift_retain(v60);
  v65 = v183;
  static Published.subscript.getter(v183, v64, v62);
  swift_release(v60);
  swift_release(v62);
  v66 = v63;
  v67 = v187;
  swift_release(v66);
  v68 = v200;
  v69 = *(_QWORD *)(v200 + *(int *)(v202 + 32) + 8);
  v70 = swift_retain(v69);
  v71 = LanguagesService.models.getter(v70);
  swift_release(v69);
  v72 = v71;
  v73 = v188;
  LanguagePicker.init(selectedLocale:preferredLocales:oppositeLocale:languageModels:disabledLanguages:)(v182, 0, v65, v72, &_swiftEmptySetSingleton);
  v74 = sub_100007D5C(&qword_10028C438, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagePicker, (uint64_t)&protocol conformance descriptor for LanguagePicker);
  v75 = v184;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9AD0, v184, v74);
  v193[1](v47, v75);
  v193 = v51;
  v76 = (uint64_t)v51;
  v77 = (uint64_t)v189;
  v78 = sub_1000110A4(v76, v205, &qword_10028C3F0);
  v79 = static VerticalAlignment.top.getter(v78);
  v80 = (uint64_t)v185;
  *v185 = v79;
  *(_QWORD *)(v80 + 8) = 0;
  *(_BYTE *)(v80 + 16) = 1;
  v81 = sub_100006DF4(&qword_10028D068);
  sub_100044458(v68, v80 + *(int *)(v81 + 44));
  v82 = (_QWORD *)v199;
  sub_1000110A4(v80, v203, &qword_10028D060);
  v83 = v68;
  sub_1000D58EC(v82);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v73 + 104))(v61, enum case for UserInterfaceSizeClass.compact(_:), v67);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v61, 0, 1, v67);
  v84 = v77 + *(int *)(v190 + 48);
  sub_10000B074((uint64_t)v82, v77, &qword_10028CE40);
  v85 = v61;
  sub_10000B074(v61, v84, &qword_10028CE40);
  v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v86(v77, 1, v67) == 1)
  {
    sub_10000A020(v61, &qword_10028CE40);
    sub_10000A020((uint64_t)v82, &qword_10028CE40);
    if (v86(v84, 1, v67) == 1)
    {
      sub_10000A020(v77, &qword_10028CE40);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v87 = v167;
  sub_10000B074(v77, v167, &qword_10028CE40);
  if (v86(v84, 1, v67) == 1)
  {
    sub_10000A020(v85, &qword_10028CE40);
    sub_10000A020((uint64_t)v82, &qword_10028CE40);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v87, v67);
LABEL_6:
    sub_10000A020(v77, &qword_10028CFE8);
LABEL_9:
    v96 = type metadata accessor for ErrorStateView(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v204, 1, 1, v96);
    goto LABEL_11;
  }
  v88 = v166;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v166, v84, v67);
  v89 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v90 = dispatch thunk of static Equatable.== infix(_:_:)(v87, v88, v67, v89);
  v91 = *(void (**)(char *, uint64_t))(v73 + 8);
  v91(v88, v67);
  sub_10000A020(v85, &qword_10028CE40);
  sub_10000A020(v199, &qword_10028CE40);
  v91((char *)v87, v67);
  sub_10000A020(v77, &qword_10028CE40);
  if ((v90 & 1) == 0)
    goto LABEL_9;
LABEL_8:
  v92 = v201[1];
  v93 = swift_getKeyPath(&unk_1001E8760);
  v94 = swift_getKeyPath(&unk_1001E8788);
  v95 = swift_retain(v92);
  static Published.subscript.getter(&v224, v95, v93);
  swift_release(v92);
  swift_release(v93);
  swift_release(v94);
  if (v224 == 3)
    goto LABEL_9;
  v97 = v204;
  sub_10004313C(v224, v204);
  v98 = type metadata accessor for ErrorStateView(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v97, 0, 1, v98);
LABEL_11:
  v99 = v201[1];
  v100 = swift_getKeyPath(&unk_1001E86D0);
  v101 = swift_getKeyPath(&unk_1001E86F8);
  v102 = swift_retain(v99);
  static Published.subscript.getter(&v224, v102, v100);
  swift_release(v99);
  swift_release(v100);
  swift_release(v101);
  if (v224 == 1)
  {
    v103 = v201;
    v104 = v201[1];
    v105 = swift_getKeyPath(&unk_1001E8718);
    v106 = swift_getKeyPath(&unk_1001E8740);
    v107 = swift_retain(v104);
    static Published.subscript.getter(v108, v107, v105);
    swift_release(v104);
    swift_release(v105);
    swift_release(v106);
    v109 = v170;
    sub_100032D68(v83, v170, type metadata accessor for ComposeTranslationCardView);
    v110 = *(unsigned __int8 *)(v168 + 80);
    v111 = (v110 + 16) & ~v110;
    v112 = swift_allocObject(&unk_1002653E0, v111 + v169, v110 | 7);
    sub_100048338(v109, v112 + v111);
    v199 = sub_100048860();
    v113 = v171;
    TipView.init(_:arrowEdge:action:)(v199, 4, sub_100048808, v112, &type metadata for TipsHelper.GenderDisambiguationTip, v199);
    v114 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
    v115 = Color.init(_:)(v114);
    v224 = v115;
    v116 = sub_100012334(&qword_10028D088, &qword_10028D030, (uint64_t)&protocol conformance descriptor for TipView<A>);
    v117 = v103;
    v119 = v173;
    v118 = v174;
    View.tipBackground<A>(_:)(&v224, v173, &type metadata for Color, v116, &protocol witness table for Color);
    swift_release(v115);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v113, v119);
    v224 = v119;
    v225 = &type metadata for Color;
    v226 = v116;
    v227 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v224, &opaque type descriptor for <<opaque return type of View.tipBackground<A>(_:)>>, 1);
    v121 = v179;
    v122 = v176;
    View.tipCornerRadius(_:antialiased:)(1, v176, OpaqueTypeConformance2, 8.0);
    v123 = (*(uint64_t (**)(char *, uint64_t))(v175 + 8))(v118, v122);
    v124 = static Edge.Set.bottom.getter(v123);
    v125 = v117[1];
    v126 = swift_getKeyPath(&unk_1001E8718);
    v127 = swift_getKeyPath(&unk_1001E8740);
    v128 = swift_retain(v125);
    static Published.subscript.getter(v129, v128, v126);
    v130 = v125;
    v83 = v200;
    swift_release(v130);
    swift_release(v126);
    swift_release(v127);
    v131 = Tip.shouldDisplay.getter(&type metadata for TipsHelper.GenderDisambiguationTip, v199);
    v132 = 0.0;
    if ((v131 & 1) != 0)
      v132 = 16.0;
    v133 = EdgeInsets.init(_all:)(v132);
    v135 = v134;
    v137 = v136;
    v139 = v138;
    v141 = v180;
    v140 = v181;
    v142 = (uint64_t)v178;
    (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v178, v121, v181);
    v143 = v192;
    v144 = v142 + *(int *)(v192 + 36);
    *(_BYTE *)v144 = v124;
    *(double *)(v144 + 8) = v133;
    *(_QWORD *)(v144 + 16) = v135;
    *(_QWORD *)(v144 + 24) = v137;
    *(_QWORD *)(v144 + 32) = v139;
    *(_BYTE *)(v144 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v141 + 8))(v121, v140);
    v145 = v177;
    sub_1000110A4(v142, v177, &qword_10028D048);
    v146 = v196;
    sub_1000110A4(v145, v196, &qword_10028D048);
    v147 = 0;
  }
  else
  {
    v147 = 1;
    v146 = v196;
    v143 = v192;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 56))(v146, v147, 1, v143);
  v148 = v83 + *(int *)(v202 + 36);
  v149 = *(_BYTE *)v148;
  v150 = *(void **)(v148 + 8);
  LOBYTE(v148) = *(_BYTE *)(v148 + 16);
  LOBYTE(v224) = v149;
  v225 = v150;
  LOBYTE(v226) = v148;
  v151 = sub_100006DF4(&qword_10028CF78);
  v152 = FocusState.wrappedValue.getter(v210, v151);
  if (LOBYTE(v210[0]) == 1)
  {
    v153 = static VerticalAlignment.center.getter(v152);
    sub_100045894(v83, (uint64_t)v207);
    *(_OWORD *)&v209[135] = v207[8];
    *(_OWORD *)&v209[151] = v207[9];
    *(_OWORD *)&v209[167] = v207[10];
    *(_OWORD *)&v209[183] = v208;
    *(_OWORD *)&v209[71] = v207[4];
    *(_OWORD *)&v209[87] = v207[5];
    *(_OWORD *)&v209[103] = v207[6];
    *(_OWORD *)&v209[119] = v207[7];
    *(_OWORD *)&v209[7] = v207[0];
    *(_OWORD *)&v209[23] = v207[1];
    *(_OWORD *)&v209[39] = v207[2];
    *(_OWORD *)&v209[55] = v207[3];
    v221 = *(_OWORD *)&v209[144];
    v222 = *(_OWORD *)&v209[160];
    *(_OWORD *)v223 = *(_OWORD *)&v209[176];
    v217 = *(_OWORD *)&v209[80];
    v218 = *(_OWORD *)&v209[96];
    v219 = *(_OWORD *)&v209[112];
    v220 = *(_OWORD *)&v209[128];
    v213 = *(_OWORD *)&v209[16];
    v214 = *(_OWORD *)&v209[32];
    v215 = *(_OWORD *)&v209[48];
    v216 = *(_OWORD *)&v209[64];
    v206 = 1;
    v210[0] = v153;
    v210[1] = 0;
    v211 = 1;
    *(_QWORD *)&v223[15] = *((_QWORD *)&v208 + 1);
    v212 = *(_OWORD *)v209;
    nullsub_1(v210);
  }
  else
  {
    sub_1000485AC((uint64_t)v210);
  }
  sub_1000110A4((uint64_t)v210, (uint64_t)&v224, &qword_10028D070);
  v154 = (uint64_t)v193;
  sub_10000B074(v205, (uint64_t)v193, &qword_10028C3F0);
  v155 = v203;
  v156 = v194;
  sub_10000B074(v203, v194, &qword_10028D060);
  v157 = v204;
  v158 = v195;
  sub_10000B074(v204, v195, &qword_10028D058);
  v159 = v197;
  sub_10000B074(v146, v197, &qword_10028D050);
  sub_1000110A4((uint64_t)&v224, (uint64_t)v207, &qword_10028D070);
  v160 = v146;
  v161 = v198;
  sub_10000B074(v154, v198, &qword_10028C3F0);
  v162 = (int *)sub_100006DF4(&qword_10028D078);
  sub_10000B074(v156, v161 + v162[12], &qword_10028D060);
  v163 = v161 + v162[16];
  *(_QWORD *)v163 = 0x3F847AE147AE147BLL;
  *(_BYTE *)(v163 + 8) = 0;
  sub_10000B074(v158, v161 + v162[20], &qword_10028D058);
  sub_10000B074(v159, v161 + v162[24], &qword_10028D050);
  v164 = v161 + v162[28];
  sub_1000110A4((uint64_t)v207, (uint64_t)v209, &qword_10028D070);
  sub_1000110A4((uint64_t)v209, v164, &qword_10028D070);
  sub_1000486B0(v209, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000485D4);
  sub_10000A020(v160, &qword_10028D050);
  sub_10000A020(v157, &qword_10028D058);
  sub_10000A020(v155, &qword_10028D060);
  sub_10000A020(v205, &qword_10028C3F0);
  sub_1000110A4((uint64_t)v207, (uint64_t)v210, &qword_10028D070);
  sub_1000486B0(v210, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100048724);
  sub_10000A020(v159, &qword_10028D050);
  sub_10000A020(v158, &qword_10028D058);
  sub_10000A020(v156, &qword_10028D060);
  return sub_10000A020(v154, &qword_10028C3F0);
}

uint64_t sub_100044458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;

  v57 = a2;
  v3 = sub_100006DF4(&qword_10028D090);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006DF4(&qword_10028D098);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v59 = (uint64_t)&v51 - v11;
  *v5 = static Alignment.topLeading.getter(v10);
  v5[1] = v12;
  v13 = sub_100006DF4(&qword_10028D0A0);
  sub_100044870(a1, (_QWORD *)((char *)v5 + *(int *)(v13 + 44)));
  v14 = static Animation.easeInOut.getter();
  v15 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  KeyPath = swift_getKeyPath(&unk_1001E88E0);
  v17 = swift_getKeyPath(&unk_1001E8908);
  v18 = swift_retain(v15);
  static Published.subscript.getter(&v77, v18, KeyPath);
  swift_release(v15);
  swift_release(KeyPath);
  swift_release(v17);
  v19 = *(_QWORD *)(*(_QWORD *)&v77 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)&v77);
  sub_10000B074((uint64_t)v5, (uint64_t)v9, &qword_10028D090);
  v20 = &v9[*(int *)(v6 + 36)];
  *(_QWORD *)v20 = v14;
  v20[8] = v19 == 0;
  sub_10000A020((uint64_t)v5, &qword_10028D090);
  v21 = v59;
  v22 = sub_1000110A4((uint64_t)v9, v59, &qword_10028D098);
  v23 = static Alignment.center.getter(v22);
  v54 = v24;
  v55 = v23;
  v25 = sub_1000453F0(a1, (uint64_t)&v77);
  LOBYTE(v15) = LOBYTE(v77);
  LOBYTE(KeyPath) = BYTE1(v77);
  LOBYTE(v5) = BYTE2(v77);
  v51 = v79;
  v52 = v78;
  v58 = v80;
  v53 = v82;
  v65 = v83;
  v66 = v81;
  v26 = v84;
  v64 = v85;
  v63 = v86;
  v61 = v88;
  v62 = v87;
  v60 = static Edge.Set.top.getter(v25);
  v27 = sub_100006DF4(&qword_10028CE48);
  ScaledMetric.wrappedValue.getter(&v77, v27);
  v28 = EdgeInsets.init(_all:)(v77);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v67 = 0;
  v35 = (uint64_t)v9;
  v56 = v9;
  sub_10000B074(v21, (uint64_t)v9, &qword_10028D098);
  LOBYTE(v9) = v67;
  v36 = v57;
  sub_10000B074(v35, v57, &qword_10028D098);
  v37 = (_OWORD *)(v36 + *(int *)(sub_100006DF4(&qword_10028D0A8) + 48));
  v39 = v54;
  v38 = *(double *)&v55;
  *(_QWORD *)&v68 = v55;
  *((_QWORD *)&v68 + 1) = v54;
  LOBYTE(v69) = v15;
  BYTE1(v69) = KeyPath;
  BYTE2(v69) = (_BYTE)v5;
  v40 = v51;
  v41 = v52;
  *((_QWORD *)&v69 + 1) = v52;
  *(_QWORD *)&v70 = v51;
  *((_QWORD *)&v70 + 1) = v58;
  *(_QWORD *)&v71 = v66;
  v42 = v53;
  *((_QWORD *)&v71 + 1) = v53;
  *(_QWORD *)&v72 = v65;
  *((_QWORD *)&v72 + 1) = v26;
  *(_QWORD *)&v73 = v64;
  BYTE8(v73) = v63;
  *(_QWORD *)&v74 = v62;
  *((_QWORD *)&v74 + 1) = v61;
  LOBYTE(v75) = v60;
  *((double *)&v75 + 1) = v28;
  *(_QWORD *)&v76[0] = v30;
  *((_QWORD *)&v76[0] + 1) = v32;
  *(_QWORD *)&v76[1] = v34;
  BYTE8(v76[1]) = (_BYTE)v9;
  v43 = v70;
  v44 = v71;
  v45 = v73;
  v37[4] = v72;
  v37[5] = v45;
  v37[2] = v43;
  v37[3] = v44;
  v46 = v69;
  *v37 = v68;
  v37[1] = v46;
  v47 = v74;
  v48 = v75;
  v49 = v76[0];
  *(_OWORD *)((char *)v37 + 137) = *(_OWORD *)((char *)v76 + 9);
  v37[7] = v48;
  v37[8] = v49;
  v37[6] = v47;
  sub_100048B40(&v68);
  sub_10000A020(v59, &qword_10028D098);
  v77 = v38;
  v78 = v39;
  LOBYTE(v79) = v15;
  BYTE1(v79) = KeyPath;
  BYTE2(v79) = (_BYTE)v5;
  v80 = v41;
  v81 = v40;
  v82 = v58;
  v83 = v66;
  v84 = v42;
  v85 = v65;
  v86 = v26;
  v87 = v64;
  LOBYTE(v88) = v63;
  v89 = v62;
  v90 = v61;
  v91 = v60;
  v92 = v28;
  v93 = v30;
  v94 = v32;
  v95 = v34;
  v96 = (char)v9;
  sub_100048BB0(&v77);
  return sub_10000A020((uint64_t)v56, &qword_10028D098);
}

void sub_100044870(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t (**v63)(uint64_t, uint64_t);
  _QWORD *v64;
  void (**v65)();
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unsigned int *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unsigned __int8 v135[16];

  v133 = a2;
  v3 = type metadata accessor for Locale(0);
  v134 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v128 = (uint64_t *)((char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for LayoutDirection(0);
  v131 = *(_QWORD *)(v5 - 8);
  v132 = v5;
  __chkstk_darwin(v5);
  v130 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ComposeTranslationCardView(0);
  v115 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v115 + 64);
  v9 = __chkstk_darwin(v7);
  v116 = (uint64_t)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v119 = (uint64_t)&v105 - v10;
  v11 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (int *)type metadata accessor for LanguageAwareText(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117 = sub_100006DF4(&qword_10028B2B0);
  __chkstk_darwin(v117);
  v118 = (uint64_t)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_10028B2B8);
  __chkstk_darwin(v18);
  v122 = (uint64_t)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100006DF4(&qword_10028D0B0);
  __chkstk_darwin(v120);
  v124 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100006DF4(&qword_10028D0B8);
  __chkstk_darwin(v127);
  v125 = (uint64_t)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006DF4(&qword_10028D0C0);
  v23 = __chkstk_darwin(v22);
  v129 = (uint64_t)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v123 = (char *)&v105 - v26;
  __chkstk_darwin(v25);
  v126 = (uint64_t)&v105 - v27;
  v28 = a1 + *(int *)(v7 + 28);
  v29 = *(_QWORD *)(v28 + 8);
  KeyPath = swift_getKeyPath(&unk_1001E88E0);
  v31 = swift_getKeyPath(&unk_1001E8908);
  v32 = swift_retain(v29);
  static Published.subscript.getter(v135, v32, KeyPath);
  swift_release(v29);
  swift_release(KeyPath);
  swift_release(v31);
  v33 = *(_QWORD *)(*(_QWORD *)v135 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)v135);
  if (v33)
  {
    v34 = swift_getKeyPath(&unk_1001E88E0);
    v35 = swift_getKeyPath(&unk_1001E8908);
    v36 = swift_retain(v29);
    static Published.subscript.getter(v135, v36, v34);
    swift_release(v29);
    swift_release(v34);
    swift_release(v35);
    v121 = *(_QWORD *)v135;
  }
  else
  {
    v121 = 0;
  }
  v112 = sub_10003F8C4();
  swift_retain(v29);
  v111 = sub_10004B25C();
  v110 = v37;
  swift_release(v29);
  v38 = swift_getKeyPath(&unk_1001E8660);
  v39 = swift_getKeyPath(&unk_1001E87A8);
  v40 = swift_retain(v29);
  static Published.subscript.getter(v13, v40, v38);
  swift_release(v29);
  swift_release(v38);
  swift_release(v39);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v13, 0, 1, v3);
  v109 = sub_10003F3EC();
  v113 = v28;
  v41 = *(_QWORD *)(v28 + 8);
  v42 = swift_getKeyPath(&unk_1001E89A0);
  v43 = swift_getKeyPath(&unk_1001E89C8);
  v114 = v3;
  v44 = v43;
  v45 = swift_retain(v41);
  static Published.subscript.getter(v135, v45, v42);
  swift_release(v41);
  swift_release(v42);
  swift_release(v44);
  v106 = v135[0];
  v46 = sub_100048C48();
  v105 = static UIColor.quaternaryTranslateAccentColor.getter(v46);
  v47 = v119;
  sub_100032D68(a1, v119, type metadata accessor for ComposeTranslationCardView);
  v48 = *(unsigned __int8 *)(v115 + 80);
  v49 = a1;
  v108 = a1;
  v50 = (v48 + 16) & ~v48;
  v51 = v50 + v8;
  v52 = v48 | 7;
  v115 = v51;
  v107 = v48 | 7;
  v53 = swift_allocObject(&unk_100265548, v51, v48 | 7);
  sub_100048338(v47, v53 + v50);
  v54 = v49;
  v55 = v116;
  sub_100032D68(v54, v116, type metadata accessor for ComposeTranslationCardView);
  v56 = swift_allocObject(&unk_100265570, v51, v52);
  sub_100048338(v55, v56 + v50);
  v57 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache();
  v58 = (_QWORD *)swift_allocObject(v57, 40, 7);
  v58[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
  v58[3] = _swiftEmptyArrayStorage;
  v58[4] = 100;
  v59 = v111;
  *v16 = v112;
  v16[1] = v59;
  v16[2] = v110;
  v60 = sub_1000110A4((uint64_t)v13, (uint64_t)v16 + v14[6], (uint64_t *)&unk_10028FE50);
  *(_QWORD *)((char *)v16 + v14[7]) = v109;
  *((_BYTE *)v16 + v14[8]) = v106;
  *(_QWORD *)((char *)v16 + v14[9]) = v105;
  *(_QWORD *)((char *)v16 + v14[10]) = 0;
  *((_BYTE *)v16 + v14[11]) = 1;
  v61 = (char *)v16 + v14[12];
  *(_QWORD *)v61 = 0;
  *((_QWORD *)v61 + 1) = 0;
  v61[16] = 1;
  v62 = (_QWORD *)((char *)v16 + v14[13]);
  *v62 = 0;
  v62[1] = 0;
  *(_QWORD *)((char *)v16 + v14[14]) = 0;
  *((_BYTE *)v16 + v14[15]) = 0;
  v63 = (uint64_t (**)(uint64_t, uint64_t))((char *)v16 + v14[16]);
  *v63 = sub_100048C88;
  v63[1] = (uint64_t (*)(uint64_t, uint64_t))v53;
  v64 = (_QWORD *)((char *)v16 + v14[17]);
  *v64 = 0;
  v64[1] = 0;
  v65 = (void (**)())((char *)v16 + v14[18]);
  *v65 = sub_100048CD8;
  v65[1] = (void (*)())v56;
  *(_QWORD *)((char *)v16 + v14[19]) = 0;
  *((_BYTE *)v16 + v14[20]) = 1;
  v66 = (_QWORD *)((char *)v16 + v14[21]);
  *v66 = 0;
  v66[1] = 0;
  *(_QWORD *)((char *)v16 + v14[22]) = v58;
  v67 = static VerticalAlignment.firstTextBaseline.getter(v60);
  sub_100032D68(v108, v47, type metadata accessor for ComposeTranslationCardView);
  v68 = swift_allocObject(&unk_100265598, v115, v107);
  sub_100048338(v47, v68 + v50);
  v69 = v118;
  sub_100032D68((uint64_t)v16, v118, type metadata accessor for LanguageAwareText);
  v70 = (uint64_t *)(v69 + *(int *)(v117 + 36));
  *v70 = v67;
  v70[1] = (uint64_t)sub_100048D14;
  v70[2] = v68;
  v71 = sub_100032DAC((uint64_t)v16, type metadata accessor for LanguageAwareText);
  v72 = static Alignment.leading.getter(v71);
  v73 = v122;
  sub_100018B04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v122, 0.0, 1, 0.0, 1, v72, v74);
  sub_10000A020(v69, &qword_10028B2B0);
  v75 = swift_getKeyPath(&unk_1001E89E8);
  v76 = v113;
  v77 = *(_QWORD *)(v113 + 8);
  v78 = swift_getKeyPath(&unk_1001E8660);
  v79 = swift_getKeyPath(&unk_1001E87A8);
  v80 = swift_retain(v77);
  v81 = v128;
  static Published.subscript.getter(v128, v80, v78);
  swift_release(v77);
  swift_release(v78);
  swift_release(v79);
  LOBYTE(v77) = Locale.isRTL()();
  (*(void (**)(_QWORD *, uint64_t))(v134 + 8))(v81, v114);
  v82 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v84 = v130;
  v83 = v131;
  if ((v77 & 1) == 0)
    v82 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v85 = v132;
  (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v130, *v82, v132);
  v86 = (uint64_t)v124;
  v87 = (uint64_t *)&v124[*(int *)(v120 + 36)];
  v88 = sub_100006DF4(&qword_10028B258);
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))((char *)v87 + *(int *)(v88 + 28), v84, v85);
  *v87 = v75;
  sub_10000B074(v73, v86, &qword_10028B2B8);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
  sub_10000A020(v73, &qword_10028B2B8);
  v89 = *(_QWORD *)(v76 + 8);
  v90 = swift_getKeyPath(&unk_1001E88E0);
  v91 = swift_getKeyPath(&unk_1001E8908);
  v92 = swift_retain(v89);
  static Published.subscript.getter(v135, v92, v90);
  swift_release(v89);
  swift_release(v90);
  swift_release(v91);
  v93 = *(_QWORD *)(*(_QWORD *)v135 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)v135);
  if (v93)
    v94 = 0.0;
  else
    v94 = 1.0;
  v95 = v125;
  sub_10000B074(v86, v125, &qword_10028D0B0);
  v96 = v127;
  *(double *)(v95 + *(int *)(v127 + 36)) = v94;
  sub_10000A020(v86, &qword_10028D0B0);
  v97 = sub_10001B6DC(&qword_10028D0D0, &qword_10028D0B8, (void (*)(void))sub_100048D78);
  v98 = v123;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001001F9AF0, v96, v97);
  sub_10000A020(v95, &qword_10028D0B8);
  v99 = (uint64_t)v98;
  v100 = v126;
  sub_1000110A4(v99, v126, &qword_10028D0C0);
  v101 = v129;
  sub_10000B074(v100, v129, &qword_10028D0C0);
  v102 = v133;
  v103 = v121;
  *v133 = v121;
  v104 = sub_100006DF4(&qword_10028D100);
  sub_10000B074(v101, (uint64_t)v102 + *(int *)(v104 + 48), &qword_10028D0C0);
  swift_bridgeObjectRetain(v103);
  sub_10000A020(v100, &qword_10028D0C0);
  sub_10000A020(v101, &qword_10028D0C0);
  swift_bridgeObjectRelease(v103);
}

uint64_t sub_100045338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;

  v6 = type metadata accessor for ComposeTranslationCardView(0);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + *(int *)(v6 + 48));
  v8 = *(_QWORD *)(a3 + *(int *)(v6 + 28) + 8);
  v9 = *(void **)(v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel);
  if (v9)
  {
    swift_retain(v8);
    v10 = v9;
    v11 = (void *)DisambiguationResultModel.disambiguableResult.getter();
    swift_release(v8);

  }
  else
  {
    v11 = 0;
  }
  v12 = v7(v11, a1, a2);

  return v12;
}

uint64_t sub_1000453F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a1;
  v4 = type metadata accessor for ComposeTranslationCardView(0);
  v44 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v44 + 64);
  __chkstk_darwin(v4);
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v40 - v11;
  v42 = a1 + *(int *)(v4 + 28);
  v13 = *(_QWORD *)(v42 + 8);
  KeyPath = swift_getKeyPath(&unk_1001E8928);
  v15 = swift_getKeyPath(&unk_1001E8950);
  v16 = swift_retain(v13);
  static Published.subscript.getter(&v45, v16, KeyPath);
  swift_release(v13);
  swift_release(KeyPath);
  swift_release(v15);
  v43 = v45;
  swift_retain(v13);
  v41 = sub_10004ACBC();
  swift_release(v13);
  v17 = swift_getKeyPath(&unk_1001E8660);
  v18 = swift_getKeyPath(&unk_1001E87A8);
  v19 = swift_retain(v13);
  static Published.subscript.getter(v12, v19, v17);
  swift_release(v13);
  swift_release(v17);
  v20 = swift_release(v18);
  static Locale.current.getter(v20);
  v21 = Locale.sqDisplayName(context:in:)(0, v10);
  v23 = v22;
  v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  v24(v10, v6);
  v24(v12, v6);
  if (v23)
    v25 = v21;
  else
    v25 = 0;
  if (v23)
    v26 = v23;
  else
    v26 = 0xE000000000000000;
  sub_100032D68(v40, (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ComposeTranslationCardView);
  v27 = *(unsigned __int8 *)(v44 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = swift_allocObject(&unk_100265520, v28 + v5, v27 | 7);
  v30 = sub_100048338((uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28);
  v31 = static Color.translateAccentColor.getter(v30);
  v32 = swift_getKeyPath(&unk_1001E8970);
  v33 = *(_QWORD *)(v42 + 8);
  swift_retain(v33);
  v34 = sub_10004ACBC();
  v35 = swift_release(v33);
  if ((v34 & 0x100) != 0)
    v36 = 0.0;
  else
    v36 = 1.0;
  v37 = static Animation.default.getter(v35);
  swift_retain(v33);
  v38 = (unsigned __int16)sub_10004ACBC() >> 8;
  result = swift_release(v33);
  *(_BYTE *)a2 = v43;
  *(_BYTE *)(a2 + 1) = BYTE1(v41) & 1;
  *(_BYTE *)(a2 + 2) = 0;
  *(_QWORD *)(a2 + 8) = v25;
  *(_QWORD *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = sub_100048C2C;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v32;
  *(_QWORD *)(a2 + 48) = v31;
  *(double *)(a2 + 56) = v36;
  *(_QWORD *)(a2 + 64) = v37;
  *(_BYTE *)(a2 + 72) = v38 & 1;
  *(_QWORD *)(a2 + 80) = nullsub_1;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

uint64_t sub_1000456E8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  swift_retain(v1);
  sub_10004DC58(0, 0);
  sub_10004F770();
  return swift_release(v1);
}

uint64_t sub_100045734(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;
  uint64_t v20;
  char v21;

  if (qword_10028A428 != -1)
    swift_once(&qword_10028A428, sub_100120F9C);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000F66C(v3, (uint64_t)qword_1002AA380);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Presenting learn more from compose card", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = type metadata accessor for ComposeTranslationCardView(0);
  v9 = (char *)(a2 + *(int *)(v8 + 36));
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  LOBYTE(v9) = v9[16];
  v19 = v10;
  v20 = v11;
  v21 = (char)v9;
  v18 = 0;
  v12 = sub_100006DF4(&qword_10028CF78);
  FocusState.wrappedValue.setter(&v18, v12);
  v13 = (char *)(a2 + *(int *)(v8 + 40));
  v14 = *v13;
  v15 = *((_QWORD *)v13 + 1);
  v19 = v14;
  v20 = v15;
  v18 = 1;
  v16 = sub_100006DF4(&qword_10028CF50);
  return State.wrappedValue.setter(&v18, v16);
}

uint64_t sub_100045894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[7];
  unsigned __int8 v69;
  int v70;
  __int16 v71;
  _BYTE v72[7];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _BYTE v82[7];
  char v83;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t (*v86)();
  uint64_t v87;
  uint64_t (*v88)();
  uint64_t v89;
  uint64_t (*v90)();
  uint64_t v91;
  char v92;
  _BYTE v93[7];
  uint64_t (*v94)();
  uint64_t v95;
  char v96;
  char v97;
  int v98;
  __int16 v99;
  uint64_t v100;
  char v101;
  _BYTE v102[7];
  uint64_t v103;
  _BYTE *(*v104)(_BYTE *);
  uint64_t v105;

  v66 = type metadata accessor for ComposeTranslationCardView(0);
  v4 = *(_QWORD *)(v66 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v66);
  v7 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v53 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v53 - v11;
  sub_100032D68(a1, (uint64_t)&v53 - v11, type metadata accessor for ComposeTranslationCardView);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = ((v13 + 16) & ~v13) + v5;
  v15 = (v13 + 16) & ~v13;
  v16 = v13 | 7;
  v67 = swift_allocObject(&unk_100265408, v14, v13 | 7);
  sub_100048338((uint64_t)v12, v67 + v15);
  v61 = v12;
  sub_100032D68(a1, (uint64_t)v12, type metadata accessor for ComposeTranslationCardView);
  v64 = swift_allocObject(&unk_100265430, v14, v16);
  sub_100048338((uint64_t)v12, v64 + v15);
  v17 = a1;
  sub_100032D68(a1, (uint64_t)v10, type metadata accessor for ComposeTranslationCardView);
  v58 = v16;
  v59 = v14;
  v63 = swift_allocObject(&unk_100265458, v14, v16);
  sub_100048338((uint64_t)v10, v63 + v15);
  sub_100032D68(a1, (uint64_t)v7, type metadata accessor for ComposeTranslationCardView);
  v62 = swift_allocObject(&unk_100265480, v14, v16);
  v18 = v15;
  sub_100048338((uint64_t)v7, v62 + v15);
  v19 = (uint64_t *)(a1 + *(int *)(v66 + 28));
  v20 = v19[1];
  KeyPath = swift_getKeyPath(&unk_1001E87C8);
  v22 = swift_getKeyPath(&unk_1001E87F0);
  v23 = swift_retain(v20);
  static Published.subscript.getter(&v84, v23, KeyPath);
  swift_release(v20);
  swift_release(KeyPath);
  swift_release(v22);
  v60 = v84;
  v24 = *v19;
  v25 = v19[1];
  v26 = type metadata accessor for ComposeTranslationViewModel(0);
  v27 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  v28 = ObservedObject.projectedValue.getter(v24, v25, v26, v27);
  v29 = swift_getKeyPath(&unk_1001E8810);
  ObservedObject.Wrapper.subscript.getter(&v84, v29, v28, v27);
  swift_release(v29);
  swift_release(v28);
  v31 = v84;
  v30 = v85;
  v54 = v84;
  v57 = v86;
  v32 = v19[1];
  v33 = swift_getKeyPath(&unk_1001E8838);
  v34 = swift_getKeyPath(&unk_1001E8860);
  v35 = swift_retain(v32);
  static Published.subscript.getter(&v73, v35, v33);
  swift_release(v32);
  swift_release(v33);
  swift_release(v34);
  v56 = v73;
  v66 = swift_getKeyPath(&unk_1001E8880);
  v36 = v19[1];
  swift_retain(v36);
  LOBYTE(v33) = sub_100050678();
  swift_release(v36);
  v55 = swift_getKeyPath(&unk_1001E88B0);
  v65 = swift_allocObject(&unk_1002654A8, 17, 7);
  *(_BYTE *)(v65 + 16) = v33 & 1;
  v69 = 0;
  v37 = (uint64_t)v61;
  sub_100032D68(v17, (uint64_t)v61, type metadata accessor for ComposeTranslationCardView);
  v59 = swift_allocObject(&unk_1002654D0, v59, v58);
  sub_100048338(v37, v59 + v18);
  v38 = v19[1];
  swift_retain(v38);
  LOBYTE(v33) = sub_10005098C();
  swift_release(v38);
  v61 = (char *)swift_getKeyPath(&unk_1001E88B0);
  v39 = swift_allocObject(&unk_1002654F8, 17, 7);
  *(_BYTE *)(v39 + 16) = v33 & 1;
  LODWORD(v58) = v69;
  *(_QWORD *)&v73 = sub_1000488B0;
  *((_QWORD *)&v73 + 1) = v67;
  v41 = v63;
  v40 = v64;
  *(_QWORD *)&v74 = sub_1000488C0;
  *((_QWORD *)&v74 + 1) = v64;
  *(_QWORD *)&v75 = sub_100048910;
  *((_QWORD *)&v75 + 1) = v63;
  v42 = v62;
  *(_QWORD *)&v76 = sub_100048920;
  *((_QWORD *)&v76 + 1) = v62;
  LOBYTE(v34) = v60;
  LOBYTE(v77) = v60;
  *(_DWORD *)((char *)&v77 + 1) = *(_DWORD *)v72;
  DWORD1(v77) = *(_DWORD *)&v72[3];
  *((_QWORD *)&v77 + 1) = v31;
  *(_QWORD *)&v78 = v30;
  v43 = v30;
  LOBYTE(v30) = v56;
  LOBYTE(v19) = v57;
  BYTE8(v78) = v57;
  BYTE9(v78) = v56;
  *(_DWORD *)((char *)&v78 + 10) = v70;
  HIWORD(v78) = v71;
  v44 = v65;
  *(_QWORD *)&v79 = v66;
  BYTE8(v79) = v69;
  *(_DWORD *)((char *)&v79 + 9) = *(_DWORD *)v68;
  HIDWORD(v79) = *(_DWORD *)&v68[3];
  v45 = v55;
  *(_QWORD *)&v80 = v55;
  *((_QWORD *)&v80 + 1) = sub_1000489B4;
  v81 = v65;
  v46 = v76;
  *(_OWORD *)(a2 + 32) = v75;
  *(_OWORD *)(a2 + 48) = v46;
  v47 = v74;
  *(_OWORD *)a2 = v73;
  *(_OWORD *)(a2 + 16) = v47;
  v48 = v77;
  v49 = v78;
  v50 = v80;
  *(_OWORD *)(a2 + 96) = v79;
  *(_OWORD *)(a2 + 112) = v50;
  *(_OWORD *)(a2 + 64) = v48;
  *(_OWORD *)(a2 + 80) = v49;
  v83 = 1;
  *(_DWORD *)(a2 + 145) = *(_DWORD *)v82;
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v82[3];
  *(_QWORD *)(a2 + 128) = v44;
  *(_QWORD *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 144) = 1;
  v51 = v59;
  *(_QWORD *)(a2 + 152) = sub_1000489C0;
  *(_QWORD *)(a2 + 160) = v51;
  *(_QWORD *)(a2 + 168) = v61;
  *(_QWORD *)(a2 + 176) = sub_100049DA0;
  *(_QWORD *)(a2 + 184) = v39;
  sub_1000489DC((uint64_t)&v73);
  v84 = sub_1000488B0;
  v85 = v67;
  v86 = sub_1000488C0;
  v87 = v40;
  v88 = sub_100048910;
  v89 = v41;
  v90 = sub_100048920;
  v91 = v42;
  v92 = v34;
  *(_DWORD *)v93 = *(_DWORD *)v72;
  *(_DWORD *)&v93[3] = *(_DWORD *)&v72[3];
  v94 = v54;
  v95 = v43;
  v96 = (char)v19;
  v97 = v30;
  v99 = v71;
  v98 = v70;
  v100 = v66;
  v101 = v58;
  *(_DWORD *)&v102[3] = *(_DWORD *)&v68[3];
  *(_DWORD *)v102 = *(_DWORD *)v68;
  v103 = v45;
  v104 = sub_1000489B4;
  v105 = v65;
  return sub_100048A8C((uint64_t)&v84);
}

uint64_t sub_100045E68(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v2 = type metadata accessor for ComposeTranslationCardView(0);
  v3 = (uint64_t *)(a1 + *(int *)(v2 + 24));
  v4 = *v3;
  if (*v3)
  {
    v5 = *(_QWORD *)(a1 + *(int *)(v2 + 28) + 8);
    swift_retain(v5);
    swift_retain(v4);
    v6 = sub_100050A2C();
    v8 = v7;
    swift_release(v5);
    if (v6)
    {
      v9 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      objc_msgSend(v9, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);

    }
    KeyPath = swift_getKeyPath(&unk_1001E8580);
    v11 = swift_getKeyPath(&unk_1001E85A8);
    v16[0] = v6;
    v16[1] = v8;
    return static Published.subscript.setter(v16, v4, KeyPath, v11);
  }
  else
  {
    v13 = v3[1];
    v14 = type metadata accessor for SceneContext(0);
    v15 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_100045FA4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  v4 = swift_retain(v3);
  a2(v4);
  return swift_release(v3);
}

uint64_t sub_100045FE8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  swift_retain(v1);
  sub_10004F1F8(0);
  return swift_release(v1);
}

uint64_t sub_100046030(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  char *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v2 = type metadata accessor for ComposeTranslationCardView(0);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + *(int *)(v2 + 28) + 8);
  v5 = *(void **)(v4 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel);
  if (v5)
  {
    swift_retain(*(_QWORD *)(a1 + *(int *)(v2 + 28) + 8));
    v6 = v5;
    dispatch thunk of DisambiguationResultModel.didAppear()();
    swift_release(v4);

  }
  v7 = (char *)(a1 + *(int *)(v3 + 36));
  v8 = *v7;
  v9 = *((_QWORD *)v7 + 1);
  v10 = v7[16];
  LOBYTE(v20) = *v7;
  v21 = v9;
  v22 = v10;
  v11 = sub_100006DF4(&qword_10028CF78);
  FocusState.wrappedValue.getter(&v23, v11);
  v12 = v23;
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
  KeyPath = swift_getKeyPath(&unk_1001E8510);
  v20 = v13;
  v15 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  swift_retain(v13);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(unsigned __int8 *)(v13 + 24);
  result = swift_release(v13);
  if (v12 != v16)
  {
    v18 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
    LOBYTE(v20) = v8;
    v21 = v9;
    v22 = v10;
    swift_retain(v18);
    FocusState.wrappedValue.getter(&v23, v11);
    v19 = swift_getKeyPath(&unk_1001E8510);
    __chkstk_darwin(v19);
    v20 = v18;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v20, v19, sub_100049DA8);
    swift_release(v18);
    return swift_release(v19);
  }
  return result;
}

uint64_t sub_10004623C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v4 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
  KeyPath = swift_getKeyPath(&unk_1001E8510);
  v12 = v5;
  v7 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  swift_retain(v5);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(unsigned __int8 *)(v5 + 24);
  result = swift_release(v5);
  if (v3 != v8)
  {
    v10 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
    v11 = swift_getKeyPath(&unk_1001E8510);
    __chkstk_darwin(v11);
    v12 = v10;
    swift_retain(v10);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, v11, sub_100048514);
    swift_release(v10);
    return swift_release(v11);
  }
  return result;
}

_QWORD *sub_1000463A8(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = *a2;
  type metadata accessor for ComposeTranslationCardView(0);
  v3 = sub_100006DF4(&qword_10028CF78);
  result = FocusState.wrappedValue.getter(&v5, v3);
  if (v2 != v5)
  {
    LOBYTE(v5) = v2;
    return (_QWORD *)FocusState.wrappedValue.setter(&v5, v3);
  }
  return result;
}

uint64_t sub_100046450(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v3 = type metadata accessor for ComposeTranslationCardView(0);
  v4 = (uint64_t *)(a2 + *(int *)(v3 + 20));
  v5 = *v4;
  if (!*v4)
  {
    v19 = v4[1];
    v20 = type metadata accessor for ConversationContext(0);
    v21 = type metadata accessor for ConversationContext;
    v22 = &qword_10028B090;
    v23 = &unk_1001E9C74;
    goto LABEL_9;
  }
  v6 = v3;
  KeyPath = swift_getKeyPath(&unk_1001E8538);
  v8 = swift_getKeyPath(&unk_1001E8560);
  v9 = swift_retain(v5);
  static Published.subscript.getter(&v25, v9, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  result = swift_release(v8);
  v11 = v26;
  if (v26 != 5)
  {
    result = sub_1000484FC(v25, v26);
    if (!v11)
    {
      v12 = (uint64_t *)(a2 + *(int *)(v6 + 24));
      v13 = *v12;
      if (!*v12)
      {
        while (1)
        {
          v19 = v12[1];
          v20 = type metadata accessor for SceneContext(0);
          v21 = type metadata accessor for SceneContext;
          v22 = (unint64_t *)&unk_100295500;
          v23 = &unk_1001F3580;
LABEL_9:
          v24 = sub_100007D5C(v22, v21, (uint64_t)v23);
          EnvironmentObject.error()(0, v19, v20, v24);
          __break(1u);
        }
      }
      v14 = swift_getKeyPath(&unk_1001E8580);
      v15 = swift_getKeyPath(&unk_1001E85A8);
      v16 = swift_retain(v13);
      static Published.subscript.getter(&v25, v16, v14);
      swift_release(v13);
      swift_release(v14);
      swift_release(v15);
      v17 = v25;
      result = swift_unknownObjectRelease(v25);
      if (!v17)
      {
        v18 = *(_QWORD *)(a2 + *(int *)(v6 + 28) + 8);
        swift_retain(v18);
        sub_10004F770();
        return swift_release(v18);
      }
    }
  }
  return result;
}

unint64_t sub_10004660C(void *a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  unint64_t v11;
  id v12;
  Class isa;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  id v24;
  _QWORD *v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  os_log_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[5];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[3] = (uint64_t)&type metadata for TranslateFeatures;
  v35[4] = sub_100009BC4();
  LOBYTE(v35[0]) = 5;
  v10 = isFeatureEnabled(_:)(v35);
  sub_100009C08(v35);
  v11 = 0;
  if ((v10 & 1) != 0 && a1)
  {
    v12 = a1;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(v12, "sentenceWithUUID:", isa);

    if (v14)
    {
      v11 = (unint64_t)_LTDisambiguableSentence.menu(forLinkIndex:)(a3);

    }
    else
    {
      if (qword_10028A428 != -1)
        swift_once(&qword_10028A428, sub_100120F9C);
      v15 = type metadata accessor for Logger(0);
      sub_10000F66C(v15, (uint64_t)qword_1002AA380);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
      v16 = v12;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v32 = (_QWORD *)swift_slowAlloc(8, -1);
        v33 = swift_slowAlloc(32, -1);
        v35[0] = v33;
        *(_DWORD *)v19 = 136446466;
        v20 = sub_100007D5C(&qword_10028CE38, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v31 = v17;
        v21 = dispatch thunk of CustomStringConvertible.description.getter(v6, v20);
        v34 = sub_1001A7FE4(v21, v22, v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v19 + 4);
        v23 = swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v23);
        *(_WORD *)(v19 + 12) = 2114;
        v34 = (uint64_t)v16;
        v24 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v19 + 14);
        v25 = v32;
        *v32 = a1;

        v26 = v31;
        _os_log_impl((void *)&_mh_execute_header, v31, v18, "Unable to find sentence UUID %{public}s in result %{public}@", (uint8_t *)v19, 0x16u);
        v27 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v25, 1, v27);
        swift_slowDealloc(v25, -1, -1);
        v28 = v33;
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      return 0;
    }
  }
  return v11;
}

uint64_t sub_100046968@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v71;
  int v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[2];
  __int128 v86;

  v2 = v1;
  v84 = a1;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  __chkstk_darwin(v3);
  v81 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028BCA0);
  v73 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100006DF4(&qword_10028BCA8);
  v8 = __chkstk_darwin(v75);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v71 - v12;
  v14 = __chkstk_darwin(v11);
  v74 = (char *)&v71 - v15;
  __chkstk_darwin(v14);
  v79 = (char *)&v71 - v16;
  v76 = sub_100006DF4(&qword_10028D1A0);
  __chkstk_darwin(v76);
  v80 = (uint64_t)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006DF4(&qword_10028D1A8);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(&unk_100265798, 56, 7);
  v20 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v19 + 32) = v20;
  v21 = *((_QWORD *)v2 + 4);
  *(_QWORD *)(v19 + 48) = v21;
  v86 = *(_OWORD *)(v2 + 8);
  sub_100049B60((uint64_t)&v86);
  swift_retain(v21);
  Button.init(action:label:)(sub_100049B38, v19, sub_100046FE0, 0, &type metadata for Image, &protocol witness table for Image);
  v72 = *v2;
  if ((v72 & 1) != 0)
  {
    v29 = LocalizedStringKey.init(stringLiteral:)(0x4F54535F59313141, 0xEF454C5449545F50);
    v24 = Text.init(_:tableName:bundle:comment:)(v29);
    v26 = v30;
    v28 = v31;
    v71 = 0x74747542706F7473;
  }
  else
  {
    v71 = 0xD000000000000012;
    v22 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001001F9B90);
    v24 = Text.init(_:tableName:bundle:comment:)(v22);
    v26 = v25;
    v28 = v27;
  }
  v32 = v23 & 1;
  v33 = *((_QWORD *)&v86 + 1);
  v34 = sub_100012334(&qword_10028BCB8, &qword_10028BCA0, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibility(label:)(v24, v26, v32, v28, v5, v34);
  sub_10001B9E8(v24, v26, v32);
  v35 = swift_bridgeObjectRelease(v28);
  (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v7, v5, v35);
  v85[0] = v86;
  v36 = sub_10000B030();
  swift_bridgeObjectRetain(v33);
  v37 = Text.init<A>(_:)(v85, &type metadata for String, v36);
  v39 = v38;
  v41 = v40;
  LOBYTE(v32) = v42 & 1;
  v43 = v75;
  ModifiedContent<>.accessibility(value:)();
  sub_10001B9E8(v37, v39, v32);
  swift_bridgeObjectRelease(v41);
  sub_10000A020((uint64_t)v10, &qword_10028BCA8);
  v44 = 0x80000001001F9BD0;
  if ((v2[2] & 1) == 0)
    v44 = 0x80000001001F9BB0;
  if ((v72 & 1) != 0)
    v45 = 0xEA00000000006E6FLL;
  else
    v45 = v44;
  v46 = (uint64_t)v74;
  ModifiedContent<>.accessibilityIdentifier(_:)(v71, v45, v43);
  swift_bridgeObjectRelease(v45);
  sub_10000A020((uint64_t)v13, &qword_10028BCA8);
  v47 = sub_100006DF4(&qword_10028B1A0);
  v48 = v82;
  v49 = swift_allocObject(v47, ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v82 + 72), *(unsigned __int8 *)(v82 + 80) | 7);
  *(_OWORD *)(v49 + 16) = xmmword_1001E64F0;
  static AccessibilityTraits.startsMediaSession.getter(v49);
  *(_QWORD *)&v85[0] = v49;
  v50 = sub_100007D5C(&qword_10028B1A8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v51 = sub_100006DF4(&qword_10028B1B0);
  v52 = sub_100012334(&qword_10028B1B8, &qword_10028B1B0, (uint64_t)&protocol conformance descriptor for [A]);
  v53 = v81;
  v54 = v51;
  v55 = v83;
  dispatch thunk of SetAlgebra.init<A>(_:)(v85, v54, v52, v83, v50);
  v56 = (uint64_t)v79;
  ModifiedContent<>.accessibility(addTraits:)(v53, v43);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v53, v55);
  v57 = sub_10000A020(v46, &qword_10028BCA8);
  v58 = v2[1];
  v59 = static Color.accentColor.getter(v57);
  v60 = v59;
  if ((v58 & 1) != 0)
  {
    v61 = Color.opacity(_:)(v59, 0.3);
    swift_release(v60);
    v60 = v61;
  }
  KeyPath = swift_getKeyPath(&unk_1001E8C28);
  v63 = v80;
  sub_10000B074(v56, v80, &qword_10028BCA8);
  v64 = (uint64_t *)(v63 + *(int *)(v76 + 36));
  *v64 = KeyPath;
  v64[1] = v60;
  v65 = sub_10000A020(v56, &qword_10028BCA8);
  v66 = static Font.title2.getter(v65);
  v67 = swift_getKeyPath(&unk_1001E8C58);
  v68 = v78;
  sub_10000B074(v63, v78, &qword_10028D1A0);
  v69 = (uint64_t *)(v68 + *(int *)(v77 + 36));
  *v69 = v67;
  v69[1] = v66;
  sub_10000A020(v63, &qword_10028D1A0);
  return sub_1000110A4(v68, v84, &qword_10028D1A8);
}

uint64_t sub_100046FE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(6515053, 0xE300000000000000);
  *a1 = result;
  return result;
}

uint64_t sub_100047010@<X0>(uint64_t a1@<X8>)
{
  return sub_100046968(a1);
}

uint64_t sub_100047048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v37[2];

  v37[0] = a3;
  v5 = sub_100006DF4(&qword_10028BCA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028D180);
  __chkstk_darwin(v9);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028D188);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v37 - v16;
  swift_retain(a2);
  Button.init(action:label:)(a1, a2, sub_100047334, 0, &type metadata for Image, &protocol witness table for Image);
  v18 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v19 = Color.init(_:)(v18);
  KeyPath = swift_getKeyPath(&unk_1001E8C28);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
  v21 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v21 = KeyPath;
  v21[1] = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001001F9B50);
  v23 = Text.init(_:tableName:bundle:comment:)(v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = sub_100049A68();
  View.accessibility(label:)(v23, v25, v29, v27, v9, v30);
  sub_10001B9E8(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  sub_10000A020((uint64_t)v11, &qword_10028D180);
  ModifiedContent<>.accessibilityIdentifier(_:)(0x7475427261656C63, 0xEB000000006E6F74, v12);
  v31 = sub_10000A020((uint64_t)v15, &qword_10028D188);
  v32 = static Font.title2.getter(v31);
  v33 = swift_getKeyPath(&unk_1001E8C58);
  v34 = v37[0];
  sub_10000B074((uint64_t)v17, v37[0], &qword_10028D188);
  v35 = (uint64_t *)(v34 + *(int *)(sub_100006DF4(&qword_10028D198) + 36));
  *v35 = v33;
  v35[1] = v32;
  return sub_10000A020((uint64_t)v17, &qword_10028D188);
}

uint64_t sub_100047334@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000011, 0x80000001001F9B70);
  *a1 = result;
  return result;
}

uint64_t sub_100047370@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100047048(*v1, v1[1], a1);
}

uint64_t *sub_100047378(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for UserInterfaceSizeClass(0);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_100006DF4(&qword_10028CE40);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v13 = a1;
      v14 = v7;
      v15 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v13 = a1;
      v14 = v7;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v16 = a3[5];
    v17 = a3[6];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = *v19;
    v21 = v19[1];
    *v18 = v20;
    v18[1] = v21;
    v22 = (uint64_t *)((char *)a1 + v17);
    v23 = (uint64_t *)((char *)a2 + v17);
    v25 = *v23;
    v24 = v23[1];
    *v22 = v25;
    v22[1] = v24;
    v26 = a3[7];
    v27 = a3[8];
    v28 = (uint64_t *)((char *)a1 + v26);
    v29 = (uint64_t *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (uint64_t *)((char *)a1 + v27);
    v32 = (uint64_t *)((char *)a2 + v27);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = a3[9];
    v35 = a3[10];
    v36 = (char *)a1 + v34;
    v37 = (char *)a2 + v34;
    *v36 = *v37;
    v38 = *((_QWORD *)v37 + 1);
    *((_QWORD *)v36 + 1) = v38;
    v36[16] = v37[16];
    v39 = (char *)a1 + v35;
    v40 = (char *)a2 + v35;
    *v39 = *v40;
    v41 = *((_QWORD *)v40 + 1);
    *((_QWORD *)v39 + 1) = v41;
    v42 = a3[11];
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    swift_retain(v20);
    swift_retain(v25);
    swift_retain(v30);
    swift_retain(v33);
    swift_retain(v38);
    swift_retain(v41);
    v45 = sub_100006DF4(&qword_10028CE48);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    v46 = a3[12];
    v47 = (uint64_t *)((char *)a1 + v46);
    v48 = (uint64_t *)((char *)a2 + v46);
    v11 = v48[1];
    *v47 = *v48;
    v47[1] = v11;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_1000475A8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v4 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for UserInterfaceSizeClass(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[5]));
  swift_release(*(_QWORD *)((char *)a1 + a2[6]));
  swift_release(*(_QWORD *)((char *)a1 + a2[7] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[8] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[9] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[10] + 8));
  v7 = (char *)a1 + a2[11];
  v8 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8));
}

uint64_t *sub_1000476C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;

  v6 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100006DF4(&qword_10028CE40);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a1;
    v12 = v6;
    v13 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v11 = a1;
    v12 = v6;
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v13);
  v14 = a3[5];
  v15 = a3[6];
  v16 = (uint64_t *)((char *)a1 + v14);
  v17 = (uint64_t *)((char *)a2 + v14);
  v18 = *v17;
  v19 = v17[1];
  *v16 = v18;
  v16[1] = v19;
  v20 = (uint64_t *)((char *)a1 + v15);
  v21 = (uint64_t *)((char *)a2 + v15);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  v24 = a3[7];
  v25 = a3[8];
  v26 = (uint64_t *)((char *)a1 + v24);
  v27 = (uint64_t *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (uint64_t *)((char *)a1 + v25);
  v30 = (uint64_t *)((char *)a2 + v25);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = a3[9];
  v33 = a3[10];
  v34 = (char *)a1 + v32;
  v35 = (char *)a2 + v32;
  *v34 = *v35;
  v36 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v34 + 1) = v36;
  v34[16] = v35[16];
  v37 = (char *)a1 + v33;
  v38 = (char *)a2 + v33;
  *v37 = *v38;
  v39 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v37 + 1) = v39;
  v40 = a3[11];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  swift_retain(v18);
  swift_retain(v23);
  swift_retain(v28);
  swift_retain(v31);
  swift_retain(v36);
  swift_retain(v39);
  v43 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  v44 = a3[12];
  v45 = (uint64_t *)((char *)a1 + v44);
  v46 = (uint64_t *)((char *)a2 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  swift_retain(v47);
  return a1;
}

uint64_t *sub_1000478C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, (uint64_t *)&unk_100291470);
    v6 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100006DF4(&qword_10028CE40);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = v6;
      v13 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
      v11 = a1;
      v12 = v6;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(uint64_t *)((char *)a1 + v14);
  v18 = *(uint64_t *)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(uint64_t *)((char *)a1 + v19);
  v23 = *(uint64_t *)((char *)a2 + v19);
  *(uint64_t *)((char *)a1 + v19) = v23;
  swift_retain(v23);
  swift_release(v22);
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  v24 = a3[7];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_retain(v27);
  swift_release(v28);
  v29 = a3[8];
  v30 = (uint64_t *)((char *)a1 + v29);
  v31 = (uint64_t *)((char *)a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v33 = v30[1];
  v30[1] = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = a3[9];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  *v35 = *((_BYTE *)a2 + v34);
  v37 = *(uint64_t *)((char *)a1 + v34 + 8);
  v38 = *(uint64_t *)((char *)a2 + v34 + 8);
  *((_QWORD *)v35 + 1) = v38;
  swift_retain(v38);
  swift_release(v37);
  v35[16] = v36[16];
  v39 = a3[10];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  *v40 = *v41;
  v42 = *((_QWORD *)v40 + 1);
  v43 = *((_QWORD *)v41 + 1);
  *((_QWORD *)v40 + 1) = v43;
  swift_retain(v43);
  swift_release(v42);
  v44 = a3[11];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 24))(v45, v46, v47);
  v48 = a3[12];
  v49 = (uint64_t *)((char *)a1 + v48);
  v50 = (uint64_t *)((char *)a2 + v48);
  v51 = v50[1];
  v52 = v49[1];
  *v49 = *v50;
  v49[1] = v51;
  swift_retain(v51);
  swift_release(v52);
  return a1;
}

char *sub_100047B44(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100006DF4(&qword_10028CE40);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v10 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  v12 = a3[9];
  v13 = a3[10];
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v16 = *(_OWORD *)&a2[v13];
  v14[16] = v15[16];
  *(_OWORD *)&a1[v13] = v16;
  v17 = a3[11];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

char *sub_100047CC8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, (uint64_t *)&unk_100291470);
    v6 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100006DF4(&qword_10028CE40);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(_QWORD *)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  swift_release(v13);
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_release(v17);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_release(v23);
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_release(v29);
  v30 = a3[9];
  v31 = &a1[v30];
  v32 = &a2[v30];
  *v31 = a2[v30];
  v33 = *(_QWORD *)&a1[v30 + 8];
  *((_QWORD *)v31 + 1) = *(_QWORD *)&a2[v30 + 8];
  swift_release(v33);
  v31[16] = v32[16];
  v34 = a3[10];
  v35 = &a1[v34];
  v36 = &a2[v34];
  *v35 = *v36;
  v37 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
  swift_release(v37);
  v38 = a3[11];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v42 = a3[12];
  v43 = *(_QWORD *)&a1[v42 + 8];
  *(_OWORD *)&a1[v42] = *(_OWORD *)&a2[v42];
  swift_release(v43);
  return a1;
}

uint64_t sub_100047EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047F00);
}

uint64_t sub_100047F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100006DF4(&qword_10028CE50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100006DF4(&qword_10028CE48);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100047FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047FC0);
}

uint64_t sub_100047FC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100006DF4(&qword_10028CE50);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_100006DF4(&qword_10028CE48);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ComposeTranslationCardView(uint64_t a1)
{
  uint64_t result;

  result = qword_10028CEB0;
  if (!qword_10028CEB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ComposeTranslationCardView);
  return result;
}

void sub_1000480AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1001E8430;
    v6[2] = &unk_1001E8430;
    v6[3] = &unk_1001E8448;
    v6[4] = &unk_1001E8448;
    v6[5] = &unk_1001E8460;
    v6[6] = &unk_1001E8430;
    sub_1000481B8(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

void sub_100048160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100292460)
  {
    v2 = sub_1000070BC(&qword_10028CE40);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100292460);
  }
}

void sub_1000481B8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028CEC0)
  {
    v2 = sub_100048210();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for CGFloat, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028CEC0);
  }
}

unint64_t sub_100048210()
{
  unint64_t result;

  result = qword_10028CEC8;
  if (!qword_10028CEC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10028CEC8);
  }
  return result;
}

uint64_t sub_100048254(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100210638, 1);
}

unint64_t sub_10004826C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028CF58;
  if (!qword_10028CF58)
  {
    v1 = sub_1000070BC(&qword_10028CF20);
    sub_100012334(&qword_10028CF60, &qword_10028CF18, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000482F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028CF58);
  }
  return result;
}

unint64_t sub_1000482F0()
{
  unint64_t result;

  result = qword_10028CF68;
  if (!qword_10028CF68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_10028CF68);
  }
  return result;
}

uint64_t sub_100048338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ComposeTranslationCardView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004837C()
{
  return sub_100048558(sub_100046030);
}

uint64_t sub_10004838C(uint64_t a1, uint64_t a2)
{
  return sub_100048488(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004623C);
}

unint64_t sub_100048398()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10028CF80;
  if (!qword_10028CF80)
  {
    v1 = sub_1000070BC(&qword_10028CF30);
    v2[0] = sub_1000070BC(&qword_10028CF20);
    v2[1] = type metadata accessor for GenderDisambiguationLearnMoreView(255);
    v2[2] = sub_10004826C();
    v2[3] = sub_100007D5C(&qword_10028CF70, (uint64_t (*)(uint64_t))&type metadata accessor for GenderDisambiguationLearnMoreView, (uint64_t)&protocol conformance descriptor for GenderDisambiguationLearnMoreView);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.formSheet<A>(isPresented:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028CF80);
  }
  return result;
}

uint64_t sub_10004847C(uint64_t a1, uint64_t a2)
{
  return sub_100048488(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000463A8);
}

uint64_t sub_100048488(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ComposeTranslationCardView(0) - 8) + 80);
  return a3(a1, a2, v3 + ((v6 + 16) & ~v6));
}

uint64_t sub_1000484E8(uint64_t a1)
{
  return sub_100048814(a1, sub_100046450);
}

uint64_t sub_1000484FC(uint64_t a1, unint64_t a2)
{
  if (a2 != 5)
    return sub_10000B900(a1, a2);
  return a1;
}

uint64_t sub_100048514()
{
  uint64_t v0;

  return sub_100055A90(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10004854C()
{
  return sub_100048558(sub_10004339C);
}

uint64_t sub_100048558(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ComposeTranslationCardView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

double sub_1000485AC(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000485D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t result;

  if (a4)
  {
    swift_retain(a13);
    swift_retain(a14);
    swift_retain(a5);
    swift_retain(a7);
    swift_retain(a9);
    swift_retain(a11);
    sub_10001F410(a16, a17 & 1);
    swift_retain(a18);
    swift_retain(a20);
    swift_retain(a24);
    swift_retain(a25);
    return swift_retain(a27);
  }
  return result;
}

_QWORD *sub_1000486B0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26]);
  return a1;
}

uint64_t sub_100048724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t result;

  if (a4)
  {
    swift_release(a5);
    swift_release(a7);
    swift_release(a9);
    swift_release(a11);
    swift_release(a14);
    swift_release(a13);
    sub_10001F470(a16, a17 & 1);
    swift_release(a27);
    swift_release(a25);
    swift_release(a24);
    swift_release(a20);
    return swift_release(a18);
  }
  return result;
}

uint64_t sub_100048808(uint64_t a1)
{
  return sub_100048814(a1, sub_100045734);
}

uint64_t sub_100048814(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ComposeTranslationCardView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_100048860()
{
  unint64_t result;

  result = qword_10028D080;
  if (!qword_10028D080)
  {
    result = swift_getWitnessTable(&unk_1001F59C0, &type metadata for TipsHelper.GenderDisambiguationTip);
    atomic_store(result, (unint64_t *)&qword_10028D080);
  }
  return result;
}

uint64_t sub_1000488B0()
{
  return sub_100048558(sub_100045E68);
}

uint64_t sub_1000488C0()
{
  return sub_1000488CC((void (*)(uint64_t))sub_100050F54);
}

uint64_t sub_1000488CC(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ComposeTranslationCardView(0) - 8) + 80);
  return sub_100045FA4(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_100048910()
{
  return sub_1000488CC((void (*)(uint64_t))sub_1000515B0);
}

uint64_t sub_100048920()
{
  return sub_1000488CC((void (*)(uint64_t))sub_10005173C);
}

uint64_t sub_10004894C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100048974(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000489A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000489B4(_BYTE *a1)
{
  uint64_t v1;

  return sub_1000E244C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_1000489C0()
{
  return sub_100048558(sub_100045FE8);
}

uint64_t sub_1000489CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000489DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_BYTE *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 128);
  swift_retain(*(_QWORD *)(a1 + 72));
  swift_retain(v6);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  sub_10001F410(v7, v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_100048A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_BYTE *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 128);
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v6);
  sub_10001F470(v7, v8);
  swift_release(v10);
  swift_release(v9);
  return a1;
}

_QWORD *sub_100048B40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[13];
  swift_retain(a1[10]);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

_QWORD *sub_100048BB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[10];
  swift_release(a1[13]);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  swift_release(v6);
  return a1;
}

uint64_t sub_100048C2C()
{
  return sub_100048558(sub_1000456E8);
}

unint64_t sub_100048C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D0C8;
  if (!qword_10028D0C8)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028D0C8);
  }
  return result;
}

uint64_t sub_100048C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ComposeTranslationCardView(0) - 8) + 80);
  return sub_100045338(a1, a2, v2 + ((v5 + 16) & ~v5));
}

void sub_100048CD8()
{
  type metadata accessor for ComposeTranslationCardView(0);
  sub_100048FEC();
}

double sub_100048D14()
{
  id v0;
  double v1;
  double v2;

  type metadata accessor for ComposeTranslationCardView(0);
  v0 = sub_10003F3EC();
  objc_msgSend(v0, "ascender");
  v2 = v1;

  return v2;
}

unint64_t sub_100048D78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D0D8;
  if (!qword_10028D0D8)
  {
    v1 = sub_1000070BC(&qword_10028D0B0);
    sub_10001B6DC(&qword_10028D0E0, &qword_10028B2B8, (void (*)(void))sub_100048E1C);
    sub_100012334(&qword_10028B250, &qword_10028B258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D0D8);
  }
  return result;
}

unint64_t sub_100048E1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D0E8;
  if (!qword_10028D0E8)
  {
    v1 = sub_1000070BC(&qword_10028B2B0);
    sub_100007D5C(&qword_10028D0F0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF768);
    sub_100048EA0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D0E8);
  }
  return result;
}

unint64_t sub_100048EA0()
{
  unint64_t result;

  result = qword_10028D0F8;
  if (!qword_10028D0F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AlignmentWritingModifier, &type metadata for _AlignmentWritingModifier);
    atomic_store(result, (unint64_t *)&qword_10028D0F8);
  }
  return result;
}

uint64_t sub_100048EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ComposeTranslationCardView(0) + 28) + 8);
  KeyPath = swift_getKeyPath(&unk_1001E8928);
  v3 = swift_getKeyPath(&unk_1001E8950);
  v4 = swift_retain(v1);
  static Published.subscript.getter(&v9, v4, KeyPath);
  swift_release(v1);
  swift_release(KeyPath);
  swift_release(v3);
  if (v9 == 1)
  {
    swift_retain(v1);
    sub_100050128(0);
  }
  else
  {
    v5 = type metadata accessor for ComposeTranslationViewModel(0);
    v6 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
    swift_retain(v1);
    v7 = ObservableObject<>.objectWillChange.getter(v5, v6);
    swift_release(v1);
    v1 = v7;
    ObservableObjectPublisher.send()();
  }
  return swift_release(v1);
}

void sub_100048FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void *v16;
  uint64_t v17;
  char v18;
  id v19[2];
  char v20;

  v1 = v0;
  v2 = type metadata accessor for ComposeTranslationCardView(0);
  v3 = v0 + *(int *)(v2 + 28);
  v4 = *(_QWORD *)(v3 + 8);
  KeyPath = swift_getKeyPath(&unk_1001E8A18);
  v6 = swift_getKeyPath(&unk_1001E8A40);
  v7 = swift_retain(v4);
  static Published.subscript.getter(v19, v7, KeyPath);
  swift_release(v4);
  swift_release(KeyPath);
  swift_release(v6);
  v8 = v19[0];
  if (!v19[0])
    goto LABEL_6;
  v9 = objc_msgSend(v19[0], "string");

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  swift_bridgeObjectRelease(v12);
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
    v4 = *(_QWORD *)(v3 + 8);
LABEL_6:
    swift_retain(v4);
    sub_10004DC58(0, 0);
    swift_release(v4);
    v14 = (char *)(v1 + *(int *)(v2 + 36));
    v15 = *v14;
    v16 = (void *)*((_QWORD *)v14 + 1);
    LOBYTE(v14) = v14[16];
    LOBYTE(v19[0]) = v15;
    v19[1] = v16;
    v20 = (char)v14;
    v18 = 1;
    v17 = sub_100006DF4(&qword_10028CF78);
    FocusState.wrappedValue.setter(&v18, v17);
  }
}

uint64_t sub_10004915C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100049184(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

unint64_t sub_1000491AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D120;
  if (!qword_10028D120)
  {
    v1 = sub_1000070BC(&qword_10028D110);
    sub_100007D5C(&qword_10028C438, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagePicker, (uint64_t)&protocol conformance descriptor for LanguagePicker);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D120);
  }
  return result;
}

uint64_t sub_10004924C(uint64_t a1)
{
  return sub_100048814(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100042A48);
}

uint64_t sub_10004925C(uint64_t a1)
{
  return sub_100048814(a1, sub_100042ADC);
}

uint64_t sub_10004926C()
{
  type metadata accessor for ComposeTranslationCardView(0);
  return sub_100048EE4();
}

unint64_t sub_1000492A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D148;
  if (!qword_10028D148)
  {
    v1 = sub_1000070BC(&qword_10028D138);
    sub_100049328();
    sub_100012334(&qword_10028B250, &qword_10028B258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D148);
  }
  return result;
}

unint64_t sub_100049328()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10028D150;
  if (!qword_10028D150)
  {
    v1 = sub_1000070BC(&qword_10028B2C8);
    v2[0] = type metadata accessor for LanguageAwareEditor(255);
    v2[1] = sub_100007D5C((unint64_t *)&unk_100292970, type metadata accessor for LanguageAwareEditor, (uint64_t)&unk_1001EF5F0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.focused(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D150);
  }
  return result;
}

_QWORD *sub_1000493D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[13];
  swift_retain(a1[15]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

_QWORD *sub_100049454(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[15];
  swift_release(a1[13]);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  return a1;
}

uint64_t sub_1000494DC()
{
  return sub_1000488CC((void (*)(uint64_t))sub_10004F770);
}

uint64_t sub_1000494EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for ComposeTranslationCardView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v4, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = v3 | 7;
  v11 = v4 + v5;
  swift_release(*(_QWORD *)((char *)v6 + v1[5]));
  swift_release(*(_QWORD *)((char *)v6 + v1[6]));
  swift_release(*(_QWORD *)((char *)v6 + v1[7] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[8] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[9] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[10] + 8));
  v12 = (char *)v6 + v1[11];
  v13 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)((char *)v6 + v1[12] + 8));
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100049648()
{
  return sub_100048558(sub_1000430EC);
}

unint64_t sub_10004965C()
{
  unint64_t result;

  result = qword_10028D168;
  if (!qword_10028D168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VStackLayout, &type metadata for VStackLayout);
    atomic_store(result, (unint64_t *)&qword_10028D168);
  }
  return result;
}

unint64_t sub_1000496A0()
{
  unint64_t result;

  result = qword_10028D170;
  if (!qword_10028D170)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HStackLayout, &type metadata for HStackLayout);
    atomic_store(result, (unint64_t *)&qword_10028D170);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ClearButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ClearButton(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for ClearButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for ClearButton(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClearButton(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClearButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClearButton()
{
  return &type metadata for ClearButton;
}

uint64_t destroy for DictationButton(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for DictationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for DictationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for DictationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DictationButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DictationButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DictationButton()
{
  return &type metadata for DictationButton;
}

uint64_t sub_100049A14()
{
  return sub_100012334(&qword_10028D178, &qword_10028CF88, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
}

uint64_t sub_100049A40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100210688, 1);
}

uint64_t sub_100049A50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100210660, 1);
}

unint64_t sub_100049A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D190;
  if (!qword_10028D190)
  {
    v1 = sub_1000070BC(&qword_10028D180);
    sub_100012334(&qword_10028BCB8, &qword_10028BCA0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D190);
  }
  return result;
}

uint64_t sub_100049B0C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100049B38()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 17) & 1) == 0)
    return (*(uint64_t (**)(void))(v0 + 40))();
  return result;
}

uint64_t sub_100049B60(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_100049B8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D1B0;
  if (!qword_10028D1B0)
  {
    v1 = sub_1000070BC(&qword_10028D198);
    sub_100049C10();
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D1B0);
  }
  return result;
}

unint64_t sub_100049C10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D1B8;
  if (!qword_10028D1B8)
  {
    v1 = sub_1000070BC(&qword_10028D188);
    sub_100049A68();
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D1B8);
  }
  return result;
}

unint64_t sub_100049C98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D1C0;
  if (!qword_10028D1C0)
  {
    v1 = sub_1000070BC(&qword_10028D1A8);
    sub_100049D1C();
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D1C0);
  }
  return result;
}

unint64_t sub_100049D1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D1C8;
  if (!qword_10028D1C8)
  {
    v1 = sub_1000070BC(&qword_10028D1A0);
    sub_100020B88();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028D1C8);
  }
  return result;
}

uint64_t sub_100049DA8()
{
  return sub_100048514();
}

uint64_t sub_100049DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000A020(a1, &qword_10028F190);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100265A88, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10028DDF0, v16);
}

uint64_t sub_100049F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100049F44(a1, a2, a3, (uint64_t)&unk_100265BA0, &qword_10028DE78, (uint64_t)&unk_10028DE70);
}

uint64_t sub_100049F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100049F44(a1, a2, a3, (uint64_t)&unk_100265EA0, &qword_10028E018, (uint64_t)&unk_10028E010);
}

uint64_t sub_100049F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v26[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_10000A020(a1, &qword_10028F190);
    v14 = 7168;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v14 = v21 | 0x1C00;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  v23 = sub_100006DF4(a5);
  if (v20 | v18)
  {
    v26[0] = 0;
    v26[1] = 0;
    v24 = v26;
    v26[2] = v18;
    v26[3] = v20;
  }
  else
  {
    v24 = 0;
  }
  return swift_task_create(v14, v24, v23, a6, v22);
}

double sub_10004A0A0@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v5 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10004A11C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v6 = swift_getKeyPath(&unk_1001E8F68);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_10004A19C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001E9180, (uint64_t)&unk_1001E91A8, a2);
}

uint64_t sub_10004A1B0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A288(a1, a2, a3, a4, (uint64_t)&unk_1001E9180, (uint64_t)&unk_1001E91A8, (void (*)(uint64_t))sub_10004A5AC);
}

uint64_t sub_10004A1CC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9608, (uint64_t)&unk_1001E9630, a2);
}

uint64_t sub_10004A1E0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9608, (uint64_t)&unk_1001E9630);
}

uint64_t sub_10004A1F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001E8EB0, (uint64_t)&unk_1001E8ED8, a2);
}

uint64_t sub_10004A208@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(a4, v6, KeyPath, v8);
  swift_release(v8);
  return swift_release(KeyPath);
}

uint64_t sub_10004A26C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A288(a1, a2, a3, a4, (uint64_t)&unk_1001E8EB0, (uint64_t)&unk_1001E8ED8, (void (*)(uint64_t))sub_10004A864);
}

uint64_t sub_10004A288(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v12 = type metadata accessor for Locale(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = ((uint64_t (*)(void))__chkstk_darwin)();
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v25 - v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v19((char *)&v25 - v17, a1, v12);
  v20 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v22 = swift_getKeyPath(a6);
  v19(v16, (uint64_t)v18, v12);
  swift_retain(v20);
  v23 = static Published.subscript.setter(v16, v20, KeyPath, v22);
  a7(v23);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

void sub_10004A3A0(char *a1)
{
  sub_1001D5554(*a1);
}

void sub_10004A3AC()
{
  char *v0;

  sub_1000CDF58(*v0);
}

void sub_10004A3B4()
{
  __asm { BR              X10 }
}

uint64_t sub_10004A3E8(uint64_t a1)
{
  String.hash(into:)(a1, 0x6554746567726174, 0xEA00000000007478);
  return swift_bridgeObjectRelease(0xEA00000000007478);
}

void sub_10004A484(uint64_t a1)
{
  char *v1;

  sub_1000CE8A4(a1, *v1);
}

unint64_t sub_10004A48C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005D580(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004A4B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10004A4E0 + 4 * byte_1001E8C96[*v0]))();
}

void sub_10004A4E0(_QWORD *a1@<X8>)
{
  *a1 = 0x6554746567726174;
  a1[1] = 0xEA00000000007478;
}

void sub_10004A500(char *a1@<X8>)
{
  strcpy(a1, "sourceLocaleID");
  a1[15] = -18;
}

void sub_10004A538(_QWORD *a1@<X8>)
{
  *a1 = 0x656D757274736E69;
  a1[1] = 0xEF6E6F697461746ELL;
}

void sub_10004A560(_QWORD *a1@<X8>)
{
  *a1 = 0x7375636F66;
  a1[1] = 0xE500000000000000;
}

NSString sub_10004A578()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002AA0B8 = (uint64_t)result;
  return result;
}

uint64_t sub_10004A5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  NSString v26;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  v9 = (void *)objc_opt_self(NSUserDefaults);
  v10 = objc_msgSend(v9, "standardUserDefaults");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "stringForKey:", v11);

  if (v12)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

  }
  else
  {
    v15 = 0xE500000000000000;
    v13 = 0x53555F6E65;
  }
  Locale.init(identifier:)(v13, v15);
  KeyPath = swift_getKeyPath(&unk_1001E9180);
  v17 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v6, v1, KeyPath);
  swift_release(v17);
  swift_release(KeyPath);
  v18 = sub_100007D5C(&qword_10028DE18, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  LOBYTE(KeyPath) = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v18);
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v19(v8, v2);
  if ((KeyPath & 1) == 0)
    sub_10004DFDC();
  v20 = swift_getKeyPath(&unk_1001E9180);
  v21 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v6, v1, v20);
  swift_release(v21);
  swift_release(v20);
  v22 = objc_msgSend(v9, "standardUserDefaults");
  Locale.identifier.getter(v22);
  v24 = v23;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "setObject:forKey:", v25, v26);

  return ((uint64_t (*)(char *, uint64_t))v19)(v6, v2);
}

uint64_t sub_10004A850@<X0>(_QWORD *a1@<X8>)
{
  return sub_10004AA94((uint64_t)&unk_1001E9180, (uint64_t)&unk_1001E91A8, a1);
}

uint64_t sub_10004A864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v25 - v7);
  sub_10015D9EC();
  KeyPath = swift_getKeyPath(&unk_1001E8EB0);
  v10 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v6, v0, KeyPath);
  swift_release(v10);
  swift_release(KeyPath);
  v11 = sub_100007D5C(&qword_10028DE18, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  v12 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v11);
  v13 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  if ((v12 & 1) == 0)
    sub_10004DFDC();
  v14 = swift_getKeyPath(&unk_1001E8EB0);
  v15 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v8, v1, v14);
  swift_release(v15);
  swift_release(v14);
  v16 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  Locale.identifier.getter(v16);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "setObject:forKey:", v19, v20);

  v22 = Locale.identifier.getter(v21);
  sub_10015E498(v22, v23);
  return ((uint64_t (*)(_QWORD *, uint64_t))v13)(v8, v2);
}

uint64_t sub_10004AA80@<X0>(_QWORD *a1@<X8>)
{
  return sub_10004AA94((uint64_t)&unk_1001E8EB0, (uint64_t)&unk_1001E8ED8, a1);
}

uint64_t sub_10004AA94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  static Published.subscript.getter(a3, v3, KeyPath, v7);
  swift_release(v7);
  return swift_release(KeyPath);
}

uint64_t sub_10004AAF0()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9608, (uint64_t)&unk_1001E9630);
}

uint64_t sub_10004AB04()
{
  return sub_10004AE84((uint64_t)&unk_1001E8F40, (uint64_t)&unk_1001E8F68);
}

uint64_t sub_10004AB18()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8F88);
  v2 = swift_getKeyPath(&unk_1001E8FB0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10004AB88()
{
  return sub_10004ABB0((uint64_t)&unk_1001E90F0, (uint64_t)&unk_1001E9118);
}

uint64_t sub_10004AB9C()
{
  return sub_10004ABB0((uint64_t)&unk_1001E8FD0, (uint64_t)&unk_1001E8FF8);
}

uint64_t sub_10004ABB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  return v7;
}

uint64_t sub_10004AC18()
{
  return sub_10004AC40((uint64_t)&unk_1001E9530, (uint64_t)&unk_1001E9558);
}

uint64_t sub_10004AC2C()
{
  return sub_10004AC40((uint64_t)&unk_1001E9650, (uint64_t)&unk_1001E9678);
}

uint64_t sub_10004AC40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v8, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  if (BYTE1(v8))
    v6 = 256;
  else
    v6 = 0;
  return v6 | v8;
}

uint64_t sub_10004ACBC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_1001E9530);
  v2 = swift_getKeyPath(&unk_1001E9558);
  static Published.subscript.getter((uint64_t *)((char *)&v12 + 6), v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  if ((v12 & 0x1000000000000) != 0)
  {
    v3 = 1;
  }
  else
  {
    v4 = swift_getKeyPath(&unk_1001E9650);
    v5 = swift_getKeyPath(&unk_1001E9678);
    static Published.subscript.getter((uint64_t *)((char *)&v12 + 4), v0, v4, v5);
    swift_release(v5);
    swift_release(v4);
    v3 = BYTE4(v12) ^ 1;
  }
  v6 = swift_getKeyPath(&unk_1001E9530);
  v7 = swift_getKeyPath(&unk_1001E9558);
  static Published.subscript.getter((uint64_t *)((char *)&v12 + 2), v0, v6, v7);
  swift_release(v7);
  swift_release(v6);
  v8 = 256;
  if ((v12 & 0x1000000) == 0)
  {
    v9 = swift_getKeyPath(&unk_1001E9650);
    v10 = swift_getKeyPath(&unk_1001E9678);
    static Published.subscript.getter(&v12, v0, v9, v10);
    swift_release(v10);
    swift_release(v9);
    if (BYTE1(v12))
      v8 = 0;
    else
      v8 = 256;
  }
  return v8 | v3 & 1u;
}

uint64_t sub_10004AE34()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9698, (uint64_t)&unk_1001E96C0);
}

uint64_t sub_10004AE48()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9380, (uint64_t)&unk_1001E93A8);
}

uint64_t sub_10004AE5C()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9458, (uint64_t)&unk_1001E9480);
}

uint64_t sub_10004AE70()
{
  return sub_10004AE84((uint64_t)&unk_1001E94E8, (uint64_t)&unk_1001E9510);
}

uint64_t sub_10004AE84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  return v7;
}

uint64_t sub_10004AEEC()
{
  return sub_10004AFC8((uint64_t)&unk_1001E95C0, (uint64_t)&unk_1001E95E8);
}

uint64_t sub_10004AF00()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9728, (uint64_t)&unk_1001E9750);
}

uint64_t sub_10004AF14()
{
  return sub_10004AFC8((uint64_t)&unk_1001E90A8, (uint64_t)&unk_1001E90D0);
}

uint64_t sub_10004AF28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E92A8);
  v2 = swift_getKeyPath(&unk_1001E92D0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return (unsigned __int16)v4 | (BYTE2(v4) << 16);
}

uint64_t sub_10004AFA0()
{
  return sub_10004AFC8((uint64_t)&unk_1001E92F0, (uint64_t)&unk_1001E9318);
}

uint64_t sub_10004AFB4()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9578, (uint64_t)&unk_1001E95A0);
}

uint64_t sub_10004AFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  return v7;
}

uint64_t sub_10004B030()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E9060);
  v2 = swift_getKeyPath(&unk_1001E9088);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10004B0A0()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9018, (uint64_t)&unk_1001E9040);
}

uint64_t sub_10004B0B4()
{
  return sub_10004AFC8((uint64_t)&unk_1001E91F0, (uint64_t)&unk_1001E9218);
}

uint64_t sub_10004B0C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E8EF8);
  v4 = swift_getKeyPath(&unk_1001E8F20);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(v4);
  return swift_release(KeyPath);
}

uint64_t sub_10004B12C()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9138, (uint64_t)&unk_1001E9160);
}

uint64_t sub_10004B140()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001E90A8);
  v2 = swift_getKeyPath(&unk_1001E90D0);
  static Published.subscript.getter((uint64_t *)((char *)&v6 + 1), v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  if (BYTE1(v6) != 3)
    return 0xD000000000000019;
  v3 = swift_getKeyPath(&unk_1001E9018);
  v4 = swift_getKeyPath(&unk_1001E9040);
  static Published.subscript.getter(&v6, v0, v3, v4);
  swift_release(v4);
  swift_release(v3);
  if ((_BYTE)v6)
    return 0x4E494E455453494CLL;
  else
    return 0x545F4F545F504154;
}

uint64_t sub_10004B25C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v2 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v12, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v13;
  if (v13)
  {
    v4 = v12;
    swift_bridgeObjectRelease(v13);
    v5 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v5 = v4 & 0xFFFFFFFFFFFFLL;
    v6 = v5 != 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = swift_getKeyPath(&unk_1001E9018);
  v8 = swift_getKeyPath(&unk_1001E9040);
  static Published.subscript.getter(&v12, v0, v7, v8);
  swift_release(v8);
  swift_release(v7);
  result = 0;
  if ((v12 & 1) == 0 && !v6)
  {
    v10 = swift_getKeyPath(&unk_1001E90A8);
    v11 = swift_getKeyPath(&unk_1001E90D0);
    static Published.subscript.getter(&v12, v0, v10, v11);
    swift_release(v11);
    swift_release(v10);
    if (v12 == 3)
      return 0x545F4F545F504154;
    else
      return 0xD000000000000019;
  }
  return result;
}

char *sub_10004B3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel____lazy_storage___streamingManager;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel____lazy_storage___streamingManager);
  if (v2)
  {
    v3 = *(char **)(v0
                  + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel____lazy_storage___streamingManager);
  }
  else
  {
    v4 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_translator);
    v5 = type metadata accessor for TextStreamingTranslationManager(0);
    v6 = (char *)swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v7 = v4;
    swift_retain(v0);
    v3 = sub_10009703C(v7, v0, v6);

    v8 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v8);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10004B488()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;

  KeyPath = swift_getKeyPath(&unk_1001E96E0);
  v2 = swift_getKeyPath(&unk_1001E9708);
  static Published.subscript.getter(v3, v0, KeyPath, v2);
  swift_release(v2);
  return swift_release(KeyPath);
}

uint64_t sub_10004B4E4()
{
  return sub_10004AFC8((uint64_t)&unk_1001E9338, (uint64_t)&unk_1001E9360);
}

uint64_t sub_10004B4F8(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[31];
  char v10;
  _BYTE v11[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    sub_100051DD0();
    swift_release(v5);
  }
  if (qword_10028A4F8 != -1)
    swift_once(&qword_10028A4F8, sub_100192138);
  v6 = sub_100006DF4(&qword_10028ACD8);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA5F0);
  v10 = v2;
  swift_beginAccess(v7, v9, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v10, v6);
  return swift_endAccess(v9);
}

uint64_t sub_10004B5C8(char a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, (char *)v14 + 1, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = a2 & 1;
    if (a2 == 2)
      v8 = 0;
    if (a1 == 1)
      v9 = v8;
    else
      v9 = 0;
    KeyPath = swift_getKeyPath(&unk_1001E9018);
    v11 = swift_getKeyPath(&unk_1001E9040);
    static Published.subscript.getter(v14, v7, KeyPath, v11);
    swift_release(KeyPath);
    swift_release(v11);
    if (v9 == LOBYTE(v14[0]))
    {
      return swift_release(v7);
    }
    else
    {
      v12 = swift_getKeyPath(&unk_1001E9018);
      v13 = swift_getKeyPath(&unk_1001E9040);
      LOBYTE(v14[0]) = v9;
      return static Published.subscript.setter(v14, v7, v12, v13);
    }
  }
  return result;
}

double sub_10004B6CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  double result;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[24];

  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4 += 16;
  swift_beginAccess(a4, v39, 0, 0);
  Strong = swift_weakLoadStrong(a4);
  if (Strong)
  {
    v14 = Strong;
    if (a2)
    {
      v37 = a1;
      v38 = a2;
      v15 = swift_bridgeObjectRetain(a2);
      static CharacterSet.whitespacesAndNewlines.getter(v15);
      v16 = sub_10000B030();
      v17 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v16);
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_bridgeObjectRelease();
      v20 = String.count.getter(v17, v19);
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
      if (a3)
        goto LABEL_4;
    }
    else
    {
      v20 = 0;
      if (a3)
      {
LABEL_4:
        v21 = objc_msgSend(a3, "string", result);
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        v37 = v22;
        v38 = v24;
        static CharacterSet.whitespacesAndNewlines.getter(v25);
        v26 = sub_10000B030();
        v27 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v26);
        v29 = v28;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        swift_bridgeObjectRelease();
        v30 = String.count.getter(v27, v29);
        swift_bridgeObjectRelease();
        if (v30 <= v20)
          v31 = v20;
        else
          v31 = v30;
        goto LABEL_9;
      }
    }
    v31 = v20 & ~(v20 >> 63);
LABEL_9:
    KeyPath = swift_getKeyPath(&unk_1001E91F0);
    v33 = swift_getKeyPath(&unk_1001E9218);
    static Published.subscript.getter(&v37, v14, KeyPath);
    swift_release(KeyPath);
    swift_release(v33);
    if (v31 > 50 == v37)
    {
      *(_QWORD *)&result = swift_release(v14).n128_u64[0];
    }
    else
    {
      v34 = swift_getKeyPath(&unk_1001E91F0);
      v35 = swift_getKeyPath(&unk_1001E9218);
      LOBYTE(v37) = v31 > 50;
      static Published.subscript.setter(&v37, v14, v34, v35);
    }
  }
  return result;
}

double sub_10004B928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  _BYTE v14[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA470);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Clearing compose card since the previous session timed out", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_10004D044(0, 0);
    v11 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
    KeyPath = swift_getKeyPath(&unk_1001E91C8);
    __chkstk_darwin(KeyPath);
    v13 = v11;
    sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
    swift_retain(v11);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_10005DCCC);
    swift_release(v5);
    swift_release(v11);
    *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  }
  return result;
}

double sub_10004BB08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD v9[3];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, (char *)v9 + 1, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    if (v2)
    {
      KeyPath = swift_getKeyPath(&unk_1001E9018);
      v8 = swift_getKeyPath(&unk_1001E9040);
      static Published.subscript.getter(v9, v6, KeyPath);
      swift_release(KeyPath);
      swift_release(v8);
      if (LOBYTE(v9[0]) == 1)
      {
        sub_100050128(1);
        sub_10004D044(0, 1);
      }
    }
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_10004BBCC(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_1001E90A8);
    v7 = swift_getKeyPath(&unk_1001E90D0);
    v8 = v2;
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

double sub_10004BC54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_100054910();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

double sub_10004BCA8(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    sub_10004DA4C(v2);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_10004BD04()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:", v0);

  v2 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__sourceLocale;
  v3 = sub_100006DF4(&qword_10028F270);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  v4(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__targetLocale, v3);
  v5 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isFlipped;
  v6 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__sourceText;
  v9 = sub_100006DF4(&qword_10028B5B8);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__targetText;
  v12 = sub_100006DF4(&qword_10028DF38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__textStreamingErrorTips;
  v14 = sub_100006DF4(&qword_10028DF30);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__tips, v14);
  v16 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__forceDisableDictation;
  v17 = sub_100006DF4(&qword_10028DF28);
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v18(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isASRSupported, v17);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__unableToTranslate, v6);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isFavorite, v6);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isDictionaryModeActive, v6);
  v10(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__pendingDictionaryModeSourceText, v9);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__canShowDictionary, v6);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__userInteractionEnabled, v6);
  v19 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__stateError;
  v20 = sub_100006DF4(&qword_10028DF20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__transactionalError;
  v22 = sub_100006DF4(&qword_10028DF18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__showErrorAlert, v6);
  v23 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__inputStyle;
  v24 = sub_100006DF4(&qword_10028DF10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__state;
  v26 = sub_100006DF4(&qword_10028DF08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isListening, v6);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__useSmallerFont, v6);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics));
  v27 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__partialSpeechResult;
  v28 = sub_100006DF4(&qword_10028DF00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__redactTargetText, v6);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_service));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_errorStateContext));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_genderTipManager));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel____lazy_storage___streamingManager));

  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationUpdateSubscription));

  v29 = v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__genderDisambiguationTip;
  v30 = sub_100006DF4(&qword_10028DFF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  v7(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__canShowGenderTip, v6);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_observers));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation));
  return v0;
}

uint64_t sub_10004C1BC()
{
  uint64_t v0;

  sub_10004BD04();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004C1E0()
{
  return type metadata accessor for ComposeTranslationViewModel(0);
}

uint64_t type metadata accessor for ComposeTranslationViewModel(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_10028D300, (uint64_t)&nominal type descriptor for ComposeTranslationViewModel);
}

void sub_10004C1FC(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  uint64_t (*v44)(uint64_t);
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  id aBlock[3];
  void *v108;
  uint64_t (*v109)(uint64_t);
  uint64_t v110;

  v6 = v5;
  v94 = a2;
  v95 = a4;
  v10 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v10);
  v98 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100006DF4(&qword_10028CDB8);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v96 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028CDC0);
  v101 = *(_QWORD *)(v13 - 8);
  v102 = v13;
  __chkstk_darwin(v13);
  v100 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v15);
  v93 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v21 = __chkstk_darwin(v20);
  v104 = (uint64_t *)((char *)&v90 - v22);
  v23 = __chkstk_darwin(v21);
  v106 = (uint64_t *)((char *)&v90 - v24);
  __chkstk_darwin(v23);
  v103 = (char *)&v90 - v25;
  v105 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationUpdateSubscription;
  v26 = *(_QWORD *)(v5
                  + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationUpdateSubscription);
  if (v26)
  {
    swift_retain(v26);
    AnyCancellable.cancel()();
    swift_release(v26);
  }
  v27 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel;
  v28 = *(void **)(v6 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel) = 0;

  v92 = a1;
  sub_10000B074(a1, (uint64_t)aBlock, (uint64_t *)&unk_10028F1C0);
  v29 = v108;
  if (v108)
  {
    v91 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = v17;
    v31 = v18;
    v32 = v109;
    sub_100023AF4(aBlock, (uint64_t)v108);
    v33 = dispatch thunk of TranslationResult.disambiguableResult.getter(v29, v32);
    sub_100009C08(aBlock);
    if (v33)
    {
      v34 = objc_msgSend(*(id *)(v6+ OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationChangeManager), "restoreChangesToResult:", v33);
      v35 = v31;
      v36 = v30;
      v37 = (uint64_t)v93;
      if (v34)
      {
        if (qword_10028A428 != -1)
          swift_once(&qword_10028A428, sub_100120F9C);
        v38 = type metadata accessor for Logger(0);
        v39 = sub_10000F66C(v38, (uint64_t)qword_1002AA380);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Restored changes to new result from previous user-selections", v42, 2u);
          swift_slowDealloc(v42, -1, -1);
        }

      }
      sub_10000B074(v92, (uint64_t)aBlock, (uint64_t *)&unk_10028F1C0);
      v43 = v108;
      v90 = v33;
      if (v108)
      {
        v44 = v109;
        sub_100023AF4(aBlock, (uint64_t)v108);
        dispatch thunk of TranslationResult.locale.getter(v43, v44);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v36);
        sub_100009C08(aBlock);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v37, 1, v36) != 1)
        {
          v45 = v103;
          (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v103, v37, v36);
LABEL_29:
          KeyPath = swift_getKeyPath(&unk_1001E9180);
          v59 = swift_getKeyPath(&unk_1001E91A8);
          static Published.subscript.getter(v106, v6, KeyPath);
          swift_release(v59);
          swift_release(KeyPath);
          v60 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
          v61 = v104;
          v60((char *)v104, v45, v36);
          v62 = swift_allocObject(&unk_100265A38, 24, 7);
          swift_weakInit(v62 + 16, v6);
          v63 = v35;
          v64 = v91;
          v60(v91, v45, v36);
          v65 = *(unsigned __int8 *)(v63 + 80);
          v66 = (v65 + 24) & ~v65;
          v67 = swift_allocObject(&unk_100265D30, v66 + v19, v65 | 7);
          *(_QWORD *)(v67 + 16) = v62;
          (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v67 + v66, v64, v36);
          objc_allocWithZone((Class)type metadata accessor for DisambiguationResultModel(0));
          swift_retain(v62);
          v57 = DisambiguationResultModel.init(disambiguableResult:excludedTypes:sourceLocale:targetLocale:globalAttributeProvider:linkAttributeProvider:userSelectionHandler:)(v90, _swiftEmptyArrayStorage, v106, v61, sub_1000ABD9C, 0, sub_10004CB1C, 0, sub_10005E244, v67);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v103, v36);
          swift_release(v62);
          goto LABEL_30;
        }
      }
      else
      {
        sub_10000A020((uint64_t)aBlock, (uint64_t *)&unk_10028F1C0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v37, 1, 1, v36);
      }
      v45 = v103;
      Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
      sub_10000A020(v37, (uint64_t *)&unk_10028FE50);
      goto LABEL_29;
    }
  }
  else
  {
    sub_10000A020((uint64_t)aBlock, (uint64_t *)&unk_10028F1C0);
  }
  v46 = v94;
  if (!a3)
    v46 = 0;
  v103 = v46;
  if (a3)
    v47 = a3;
  else
    v47 = 0xE000000000000000;
  if (a5)
    v48 = v95;
  else
    v48 = 0;
  if (a5)
    v49 = a5;
  else
    v49 = 0xE000000000000000;
  v50 = swift_getKeyPath(&unk_1001E9180);
  v51 = swift_getKeyPath(&unk_1001E91A8);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  v52 = v106;
  static Published.subscript.getter(v106, v6, v50);
  swift_release(v51);
  swift_release(v50);
  v53 = swift_getKeyPath(&unk_1001E8EB0);
  v54 = swift_getKeyPath(&unk_1001E8ED8);
  v55 = v104;
  static Published.subscript.getter(v104, v6, v53);
  swift_release(v54);
  swift_release(v53);
  v56 = objc_allocWithZone((Class)type metadata accessor for DisambiguationResultModel(0));
  v57 = DisambiguationResultModel.init(withStaticSource:staticTarget:sourceLocale:targetLocale:globalAttributeProvider:)(v103, v47, v48, v49, v52, v55, sub_1000ABD9C, 0);
LABEL_30:
  v68 = *(void **)(v6 + v27);
  *(_QWORD *)(v6 + v27) = v57;

  v69 = *(void **)(v6 + v27);
  if (v69)
  {
    v70 = v69;
    v71 = v96;
    dispatch thunk of DisambiguationResultModel.$targetAttributedText.getter();

    v72 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    aBlock[0] = (id)static OS_dispatch_queue.main.getter(v72);
    v73 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v74 = (uint64_t)v98;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v98, 1, 1, v73);
    v75 = sub_100012334(&qword_10028CDC8, &qword_10028CDB8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v76 = sub_10001D984();
    v77 = v99;
    v78 = v100;
    Publisher.receive<A>(on:options:)(aBlock, v74, v99, v72, v75, v76);
    sub_10000A020(v74, &qword_100296BE0);

    (*(void (**)(char *, uint64_t))(v97 + 8))(v71, v77);
    v79 = swift_allocObject(&unk_100265A38, 24, 7);
    swift_weakInit(v79 + 16, v6);
    v80 = sub_100012334(&qword_10028CDD0, &qword_10028CDC0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v81 = v102;
    v82 = Publisher<>.sink(receiveValue:)(sub_10005E1C0, v79, v102, v80);
    swift_release(v79);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v78, v81);
  }
  else
  {
    v82 = 0;
  }
  v83 = *(_QWORD *)(v6 + v105);
  *(_QWORD *)(v6 + v105) = v82;
  swift_release(v83);
  sub_100051DD0();
  v84 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_debounceTimer;
  objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_debounceTimer), "invalidate");
  v85 = (void *)objc_opt_self(NSTimer);
  v86 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v86 + 16, v6);
  v109 = sub_10005E1C8;
  v110 = v86;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100187FE4;
  v108 = &unk_100265CF8;
  v87 = _Block_copy(aBlock);
  swift_release(v110);
  v88 = objc_msgSend(v85, "scheduledTimerWithTimeInterval:repeats:block:", 0, v87, 1.0);
  _Block_release(v87);
  v89 = *(void **)(v6 + v84);
  *(_QWORD *)(v6 + v84) = v88;

}

unint64_t sub_10004CB1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  NSString *v11;
  _BYTE v14[72];

  v2 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DisambiguationResultModel.TextLocation.source(_:), v2);
  LOBYTE(a1) = static DisambiguationResultModel.TextLocation.== infix(_:_:)(a1, v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v6 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  if ((a1 & 1) != 0)
    v7 = static UIColor.sourceLinkColor.getter();
  else
    v7 = static UIColor.targetLinkColor.getter();
  v8 = v7;
  v9 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v9, v14);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 64) = v6;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 40) = v8;
  v11 = NSForegroundColorAttributeName;
  return sub_1001A4A88(inited);
}

uint64_t sub_10004CC30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t KeyPath;
  uint64_t v24;
  id v25;
  Class isa;
  Class v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[24];

  v39 = a4;
  v6 = type metadata accessor for CoreAnalyticsLogger.InteractionLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for CoreAnalyticsLogger.CardType(0);
  v10 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  a3 += 16;
  swift_beginAccess(a3, v41, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v18 = result;
    v35 = v10;
    v37 = v7;
    v38 = v6;
    v19 = objc_msgSend(a2, "edge");
    v20 = objc_msgSend(v19, "type");

    v21 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationChangeManager;
    v22 = *(void **)(v18 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationChangeManager);
    v36 = v20;
    LOBYTE(v19) = objc_msgSend(v22, "hasAnyChangeOfType:", v20);
    objc_msgSend(*(id *)(v18 + v21), "addUserSelection:", a2);
    if ((v19 & 1) != 0)
    {
      return swift_release(v18);
    }
    else
    {
      KeyPath = swift_getKeyPath(&unk_1001E9180);
      v24 = swift_getKeyPath(&unk_1001E91A8);
      static Published.subscript.getter(v16, v18, KeyPath, v24);
      swift_release(v24);
      swift_release(KeyPath);
      v25 = objc_allocWithZone((Class)_LTLocalePair);
      isa = Locale._bridgeToObjectiveC()().super.isa;
      v27 = Locale._bridgeToObjectiveC()().super.isa;
      v28 = objc_msgSend(v25, "initWithSourceLocale:targetLocale:", isa, v27);

      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
      type metadata accessor for CoreAnalyticsLogger(0);
      v29 = static CoreAnalyticsLogger.shared.getter();
      v30 = v35;
      v31 = v40;
      (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v12, enum case for CoreAnalyticsLogger.CardType.compose(_:), v40);
      v33 = v37;
      v32 = v38;
      (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v9, enum case for CoreAnalyticsLogger.InteractionLocation.translationTab(_:), v38);
      dispatch thunk of CoreAnalyticsLogger.didInteractWithDisambiguation(fromCard:location:type:localePair:)(v12, v9, v36, v28);
      swift_release(v29);

      swift_release(v18);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v32);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v12, v31);
    }
  }
  return result;
}

uint64_t sub_10004CF0C(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  _BYTE v16[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_1001E8F88);
    v7 = swift_getKeyPath(&unk_1001E8FB0);
    static Published.subscript.getter(&v15, v5, KeyPath);
    swift_release(v7);
    swift_release(KeyPath);
    v8 = v15;
    if (v15
      && (sub_10000A05C(0, &qword_10028CD78, NSAttributedString_ptr),
          v9 = v2,
          v10 = v8,
          v11 = static NSObject.== infix(_:_:)(),
          v9,
          v10,
          v10,
          (v11 & 1) != 0))
    {
      return swift_release(v5);
    }
    else
    {
      v12 = swift_getKeyPath(&unk_1001E8F88);
      v13 = swift_getKeyPath(&unk_1001E8FB0);
      v15 = v2;
      v14 = v2;
      return static Published.subscript.setter(&v15, v5, v12, v13);
    }
  }
  return result;
}

void sub_10004D044(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  char v63;
  _OWORD v64[2];
  uint64_t v65;

  v3 = v2;
  if (a1)
  {
    v6 = qword_10028A478;
    v7 = a1;
    if (v6 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v8 = type metadata accessor for Logger(0);
    sub_10000F66C(v8, (uint64_t)qword_1002AA470);
    v9 = v7;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = a2;
      v13 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      *(_QWORD *)&v64[0] = v9;
      v14 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, (char *)v64 + 8, v12 + 4);
      *v13 = a1;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Resetting translation compose card due to error: %@", v12, 0xCu);
      v15 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v13, 1, v15);
      v16 = v13;
      a2 = v63;
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10000F66C(v17, (uint64_t)qword_1002AA470);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Resetting translation compose card", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    KeyPath = swift_getKeyPath(&unk_1001E8F40);
    v23 = swift_getKeyPath(&unk_1001E8F68);
    static Published.subscript.getter(v64, v3, KeyPath);
    swift_release(v23);
    swift_release(KeyPath);
    v24 = *((_QWORD *)&v64[0] + 1);
    swift_bridgeObjectRelease(*((_QWORD *)&v64[0] + 1));
    if (v24)
    {
      v25 = swift_getKeyPath(&unk_1001E8F40);
      v26 = swift_getKeyPath(&unk_1001E8F68);
      v64[0] = 0uLL;
      swift_retain(v3);
      static Published.subscript.setter(v64, v3, v25, v26);
    }
  }
  v27 = swift_getKeyPath(&unk_1001E9018);
  v28 = swift_getKeyPath(&unk_1001E9040);
  static Published.subscript.getter(v64, v3, v27);
  swift_release(v28);
  swift_release(v27);
  if (LOBYTE(v64[0]) == 1)
    sub_10005058C(a2 & 1);
  v29 = sub_10004B3E4();
  sub_10018898C();
  swift_release(v29);
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationChangeManager), "reset");
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_debounceTimer), "invalidate");
  v30 = swift_getKeyPath(&unk_1001E9338);
  v31 = swift_getKeyPath(&unk_1001E9360);
  static Published.subscript.getter(v64, v3, v30);
  swift_release(v31);
  swift_release(v30);
  if (LOBYTE(v64[0]) == 1)
  {
    v32 = swift_getKeyPath(&unk_1001E9338);
    v33 = swift_getKeyPath(&unk_1001E9360);
    LOBYTE(v64[0]) = 0;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v32, v33);
  }
  v34 = swift_getKeyPath(&unk_1001E9060);
  v35 = swift_getKeyPath(&unk_1001E9088);
  static Published.subscript.getter(v64, v3, v34);
  swift_release(v35);
  swift_release(v34);
  if (LOBYTE(v64[0]))
  {
    v36 = swift_getKeyPath(&unk_1001E9060);
    v37 = swift_getKeyPath(&unk_1001E9088);
    LOBYTE(v64[0]) = 0;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v36, v37);
  }
  v38 = swift_getKeyPath(&unk_1001E9578);
  v39 = swift_getKeyPath(&unk_1001E95A0);
  static Published.subscript.getter(v64, v3, v38);
  swift_release(v39);
  swift_release(v38);
  if (LOBYTE(v64[0]) != 2)
  {
    v40 = swift_getKeyPath(&unk_1001E9578);
    v41 = swift_getKeyPath(&unk_1001E95A0);
    LOBYTE(v64[0]) = 2;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v40, v41);
  }
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  sub_10004C1FC((uint64_t)v64, 0, 0, 0, 0);
  sub_10000A020((uint64_t)v64, (uint64_t *)&unk_10028F1C0);
  v42 = swift_getKeyPath(&unk_1001E9698);
  v43 = swift_getKeyPath(&unk_1001E96C0);
  static Published.subscript.getter(v64, v3, v42);
  swift_release(v43);
  swift_release(v42);
  if (LOBYTE(v64[0]) == 1)
  {
    v44 = swift_getKeyPath(&unk_1001E9698);
    v45 = swift_getKeyPath(&unk_1001E96C0);
    LOBYTE(v64[0]) = 0;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v44, v45);
  }
  v46 = swift_getKeyPath(&unk_1001E9530);
  v47 = swift_getKeyPath(&unk_1001E9558);
  static Published.subscript.getter(v64, v3, v46);
  swift_release(v47);
  swift_release(v46);
  if ((v64[0] & 1) != 0 || BYTE1(v64[0]))
  {
    v48 = swift_getKeyPath(&unk_1001E9530);
    v49 = swift_getKeyPath(&unk_1001E9558);
    LOWORD(v64[0]) = 0;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v48, v49);
  }
  v50 = swift_getKeyPath(&unk_1001E9380);
  v51 = swift_getKeyPath(&unk_1001E93A8);
  static Published.subscript.getter(v64, v3, v50);
  swift_release(v51);
  swift_release(v50);
  if (LOBYTE(v64[0]) == 1)
  {
    v52 = swift_getKeyPath(&unk_1001E9380);
    v53 = swift_getKeyPath(&unk_1001E93A8);
    LOBYTE(v64[0]) = 0;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v52, v53);
  }
  sub_10004D8CC();
  sub_10004E30C();
  v54 = swift_getKeyPath(&unk_1001E92A8);
  v55 = swift_getKeyPath(&unk_1001E92D0);
  static Published.subscript.getter(v64, v3, v54);
  swift_release(v55);
  swift_release(v54);
  if (BYTE2(v64[0]) << 16 != 0x80000)
  {
    v56 = swift_getKeyPath(&unk_1001E92A8);
    v57 = swift_getKeyPath(&unk_1001E92D0);
    BYTE2(v64[0]) = 8;
    LOWORD(v64[0]) = 0;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v56, v57);
  }
  v58 = swift_getKeyPath(&unk_1001E9138);
  v59 = swift_getKeyPath(&unk_1001E9160);
  static Published.subscript.getter(v64, v3, v58);
  swift_release(v59);
  swift_release(v58);
  if (LOBYTE(v64[0]) == 1)
  {
    v60 = swift_getKeyPath(&unk_1001E9138);
    v61 = swift_getKeyPath(&unk_1001E9160);
    LOBYTE(v64[0]) = 0;
    swift_retain(v3);
    static Published.subscript.setter(v64, v3, v60, v61);
  }
  if (a1)
  {
    v62 = a1;
    sub_100054C2C(v62);

  }
}

uint64_t sub_10004D8CC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  KeyPath = swift_getKeyPath(&unk_1001E90F0);
  v2 = swift_getKeyPath(&unk_1001E9118);
  static Published.subscript.getter(&v14, v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v14;
  v4 = sub_1000BFBFC((uint64_t)v14, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v3);
  if ((v4 & 1) == 0)
  {
    v5 = swift_getKeyPath(&unk_1001E90F0);
    v6 = swift_getKeyPath(&unk_1001E9118);
    v14 = _swiftEmptyArrayStorage;
    swift_retain(v0);
    static Published.subscript.setter(&v14, v0, v5, v6);
  }
  v7 = swift_getKeyPath(&unk_1001E8FD0);
  v8 = swift_getKeyPath(&unk_1001E8FF8);
  static Published.subscript.getter(&v14, v0, v7);
  swift_release(v8);
  swift_release(v7);
  v9 = v14;
  v10 = sub_1000BFBFC((uint64_t)v14, (uint64_t)_swiftEmptyArrayStorage);
  result = swift_bridgeObjectRelease(v9);
  if ((v10 & 1) == 0)
  {
    v12 = swift_getKeyPath(&unk_1001E8FD0);
    v13 = swift_getKeyPath(&unk_1001E8FF8);
    v14 = _swiftEmptyArrayStorage;
    swift_retain(v0);
    return static Published.subscript.setter(&v14, v0, v12, v13);
  }
  return result;
}

void sub_10004DA4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  Class isa;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  Class v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[2];
  __int16 v23;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 4];
  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_1001E9180);
    v9 = swift_getKeyPath(&unk_1001E91A8);
    v10 = a1;
    static Published.subscript.getter(v7, v2, KeyPath, v9);
    swift_release(v9);
    swift_release(KeyPath);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v12 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
    v12(v7, v4);
    LOBYTE(KeyPath) = objc_msgSend(v10, "locale:supportsModality:", isa, 1);

    v13 = swift_getKeyPath(&unk_1001E8EB0);
    v14 = swift_getKeyPath(&unk_1001E8ED8);
    static Published.subscript.getter(v7, v2, v13, v14);
    swift_release(v14);
    swift_release(v13);
    v15 = Locale._bridgeToObjectiveC()().super.isa;
    v12(v7, v4);
    v16 = objc_msgSend(v10, "locale:supportsModality:", v15, 1);

    v17 = swift_getKeyPath(&unk_1001E9650);
    v18 = swift_getKeyPath(&unk_1001E9678);
    v22[0] = KeyPath;
    v22[1] = v16;
    swift_retain(v2);
    static Published.subscript.setter(v22, v2, v17, v18);

  }
  else
  {
    v19 = swift_getKeyPath(&unk_1001E9650);
    v20 = swift_getKeyPath(&unk_1001E9678);
    v23 = 257;
    swift_retain(v2);
    static Published.subscript.setter(&v23, v2, v19, v20);
  }
}

uint64_t sub_10004DC58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  uint64_t v15;
  void *v16;
  uint64_t KeyPath;
  uint64_t v18;
  void (*v19)(_QWORD *, _QWORD);
  BOOL *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v5 = type metadata accessor for Locale(0);
  v34 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v33 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  if (a2
    && (a1 == 0x72657070696C46 && a2 == 0xE700000000000000
     || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x72657070696C46, 0xE700000000000000, 0) & 1) != 0))
  {
    v14 = String._bridgeToObjectiveC()();
    v15 = swift_allocObject(&unk_100265A38, 24, 7);
    swift_weakInit(v15 + 16, v2);
    aBlock[4] = sub_10005E100;
    v36 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100170878;
    aBlock[3] = &unk_100265CD0;
    v16 = _Block_copy(aBlock);
    swift_release(v36);
    AnalyticsSendEventLazy(v14, v16);
    _Block_release(v16);

  }
  KeyPath = swift_getKeyPath(&unk_1001E9608);
  v18 = swift_getKeyPath(&unk_1001E9630);
  v19 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(aBlock, v2, KeyPath, v18);
  *v20 = !*v20;
  v19(aBlock, 0);
  swift_release(v18);
  swift_release(KeyPath);
  v21 = swift_getKeyPath(&unk_1001E9180);
  v22 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v13, v2, v21);
  swift_release(v22);
  swift_release(v21);
  v23 = swift_getKeyPath(&unk_1001E8EB0);
  v24 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v11, v2, v23);
  swift_release(v24);
  swift_release(v23);
  v25 = swift_getKeyPath(&unk_1001E9180);
  v26 = swift_getKeyPath(&unk_1001E91A8);
  v27 = v34;
  v28 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  v28(v8, v11, v5);
  swift_retain(v2);
  static Published.subscript.setter(v8, v2, v25, v26);
  sub_10004A5AC();
  v29 = *(void (**)(char *, uint64_t))(v27 + 8);
  v29(v11, v5);
  v28(v11, v13, v5);
  v30 = swift_getKeyPath(&unk_1001E8EB0);
  v31 = swift_getKeyPath(&unk_1001E8ED8);
  v28(v8, v11, v5);
  swift_retain(v2);
  static Published.subscript.setter(v8, v2, v30, v31);
  sub_10004A864();
  v29(v11, v5);
  sub_10004D8CC();
  return ((uint64_t (*)(char *, uint64_t))v29)(v13, v5);
}

void sub_10004DFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Class isa;
  Class v26;
  id v27;
  void (*v28)(_QWORD *, uint64_t);
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v31 - v7);
  KeyPath = swift_getKeyPath(&unk_1001E9578);
  v10 = swift_getKeyPath(&unk_1001E95A0);
  static Published.subscript.getter(&v31, v1, KeyPath);
  swift_release(v10);
  swift_release(KeyPath);
  v11 = v31;
  if (v31 != 2)
  {
    v12 = swift_getKeyPath(&unk_1001E9060);
    v13 = swift_getKeyPath(&unk_1001E9088);
    static Published.subscript.getter(&v31, v1, v12);
    swift_release(v13);
    swift_release(v12);
    if (v31 == 1)
    {
      if ((v11 & 1) != 0)
      {
        v18 = swift_getKeyPath(&unk_1001E9018);
        v19 = swift_getKeyPath(&unk_1001E9040);
        static Published.subscript.getter(&v31, v1, v18);
        swift_release(v19);
        swift_release(v18);
        if (v31 == 1)
          sub_100050128(0);
      }
      else
      {
        v14 = swift_getKeyPath(&unk_1001E8F40);
        v15 = swift_getKeyPath(&unk_1001E8F68);
        static Published.subscript.getter(&v31, v1, v14);
        swift_release(v15);
        swift_release(v14);
        if (v32)
          v16 = v31;
        else
          v16 = 0;
        if (v32)
          v17 = v32;
        else
          v17 = 0xE000000000000000;
        sub_10004EAFC(v16, v17);
        swift_bridgeObjectRelease(v17);
      }
    }
  }
  v20 = swift_getKeyPath(&unk_1001E9180);
  v21 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v8, v1, v20);
  swift_release(v21);
  swift_release(v20);
  v22 = swift_getKeyPath(&unk_1001E8EB0);
  v23 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v6, v1, v22);
  swift_release(v23);
  swift_release(v22);
  v24 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v26 = Locale._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v24, "initWithSourceLocale:targetLocale:", isa, v26);

  v28 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v28(v6, v2);
  v28(v8, v2);
  sub_1000A40E8(v27);
  sub_10004E30C();
  v30 = (void *)LanguagesService.localeModalities.getter(v29);
  sub_10004DA4C(v30);

}

void sub_10004E30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class isa;
  Class v15;
  id v16;
  void (*v17)(_QWORD *, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v30 - v7);
  KeyPath = swift_getKeyPath(&unk_1001E9180);
  v10 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v8, v1, KeyPath);
  swift_release(v10);
  swift_release(KeyPath);
  v11 = swift_getKeyPath(&unk_1001E8EB0);
  v12 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v6, v1, v11);
  swift_release(v12);
  swift_release(v11);
  v13 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v15 = Locale._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v13, "initWithSourceLocale:targetLocale:", isa, v15);

  v17 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v17(v6, v2);
  v17(v8, v2);
  v18 = sub_1000A3E3C(v16);
  v19 = swift_getKeyPath(&unk_1001E8F40);
  v20 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v30, v1, v19);
  swift_release(v20);
  swift_release(v19);
  v21 = v31;
  if (v31)
  {
    v22 = v30;
    swift_bridgeObjectRelease(v31);
    v23 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0)
      v23 = v22 & 0xFFFFFFFFFFFFLL;
    v24 = v23 == 0;
    if ((v18 & 1) == 0)
      goto LABEL_9;
LABEL_8:
    v25 = !v24;
    goto LABEL_10;
  }
  if ((v18 & 1) != 0)
  {
    v24 = 1;
    goto LABEL_8;
  }
LABEL_9:
  v25 = 0;
LABEL_10:
  v26 = swift_getKeyPath(&unk_1001E95C0);
  v27 = swift_getKeyPath(&unk_1001E95E8);
  static Published.subscript.getter(&v30, v1, v26);
  swift_release(v27);
  swift_release(v26);
  if (v25 != v30)
  {
    v28 = swift_getKeyPath(&unk_1001E95C0);
    v29 = swift_getKeyPath(&unk_1001E95E8);
    LOBYTE(v30) = v25;
    swift_retain(v1);
    static Published.subscript.setter(&v30, v1, v28, v29);
  }

}

void sub_10004E5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t KeyPath;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v2;
  v46 = a1;
  v47 = a2;
  v4 = type metadata accessor for Locale(0);
  v48 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v45 - v8);
  v10 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001E90A8);
  v17 = swift_getKeyPath(&unk_1001E90D0);
  static Published.subscript.getter(&v52, v3, KeyPath);
  swift_release(v17);
  swift_release(KeyPath);
  v18 = v52;
  if (v52 == 3)
  {
    v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
    v20 = swift_getKeyPath(&unk_1001E9180);
    v21 = swift_getKeyPath(&unk_1001E91A8);
    swift_retain(v19);
    static Published.subscript.getter(v9, v3, v20);
    swift_release(v21);
    swift_release(v20);
    v22 = swift_getKeyPath(&unk_1001E8EB0);
    v23 = swift_getKeyPath(&unk_1001E8ED8);
    static Published.subscript.getter(&v12[v10[5]], v3, v22);
    swift_release(v23);
    swift_release(v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(&v12[v10[14]], 1, 1, v50);
    v24 = v48;
    (*(void (**)(char *, _QWORD *, uint64_t))(v48 + 32))(v12, v9, v4);
    *(_QWORD *)&v12[v10[6]] = 1;
    *(_QWORD *)&v12[v10[7]] = 1;
    *(_QWORD *)&v12[v10[8]] = 0;
    v12[v10[9]] = 0;
    v25 = &v12[v10[10]];
    *(_QWORD *)v25 = 0;
    v25[8] = 1;
    v12[v10[11]] = 0;
    *(_QWORD *)&v12[v10[12]] = 0;
    v26 = &v12[v10[13]];
    *(_QWORD *)v26 = 0;
    v26[8] = 1;
    sub_10015AEE0((uint64_t)v12);
    v27 = *(void **)(v19 + 16);
    if (v27)
    {
      v28 = objc_msgSend(v27, "invocationId");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_release(v19);
      sub_100032DAC((uint64_t)v12, type metadata accessor for SELFLoggingInvocationWrapper.Parameters);
      v29 = sub_10004B3E4();
      v30 = swift_getKeyPath(&unk_1001E9180);
      v31 = swift_getKeyPath(&unk_1001E91A8);
      static Published.subscript.getter(v9, v3, v30);
      swift_release(v31);
      swift_release(v30);
      v32 = swift_getKeyPath(&unk_1001E8EB0);
      v33 = swift_getKeyPath(&unk_1001E8ED8);
      static Published.subscript.getter(v7, v3, v32);
      swift_release(v33);
      swift_release(v32);
      sub_10018A910(v46, v47, (uint64_t)v9, (uint64_t)v7, (uint64_t)v15);
      swift_release(v29);
      v34 = *(void (**)(_QWORD *, uint64_t))(v24 + 8);
      v34(v7, v4);
      v34(v9, v4);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v50);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA470);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v52 = v40;
      *(_DWORD *)v39 = 136315138;
      v41 = 0xE90000000000006BLL;
      v42 = 0x726F7774654E6F6ELL;
      if (v18 != 1)
      {
        v42 = 0xD000000000000014;
        v41 = 0x80000001001F7D40;
      }
      if (v18)
        v43 = v42;
      else
        v43 = 0xD000000000000013;
      if (v18)
        v44 = v41;
      else
        v44 = 0x80000001001F7D20;
      v51 = sub_1001A7FE4(v43, v44, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v39 + 4);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping partial translation because an error state is active: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }

  }
}

void sub_10004EAFC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(_QWORD *, uint64_t);
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;

  v3 = v2;
  v6 = type metadata accessor for Locale(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  v7 = __chkstk_darwin(v6);
  v59 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v58 - v9);
  v11 = type metadata accessor for CharacterSet(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D8CC();
  KeyPath = swift_getKeyPath(&unk_1001E9380);
  v16 = swift_getKeyPath(&unk_1001E93A8);
  static Published.subscript.getter(&v62, v3, KeyPath);
  swift_release(v16);
  swift_release(KeyPath);
  if (v62 == 1)
    sub_100050F54();
  if ((a2 & 0x2000000000000000) != 0)
    v17 = HIBYTE(a2) & 0xF;
  else
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  v18 = swift_getKeyPath(&unk_1001E9578);
  v19 = swift_getKeyPath(&unk_1001E95A0);
  if (v17)
  {
    LOBYTE(v62) = 0;
    swift_retain(v3);
    static Published.subscript.setter(&v62, v3, v18, v19);
    v20 = swift_getKeyPath(&unk_1001E9060);
    v21 = swift_getKeyPath(&unk_1001E9088);
    LOBYTE(v62) = 1;
    swift_retain(v3);
    static Published.subscript.setter(&v62, v3, v20, v21);
    v22 = swift_getKeyPath(&unk_1001E9530);
    v23 = swift_getKeyPath(&unk_1001E9558);
    LOWORD(v62) = 257;
    swift_retain(v3);
    static Published.subscript.setter(&v62, v3, v22, v23);
    *((_QWORD *)&v63 + 1) = &type metadata for TranslateFeatures;
    v64 = sub_100009BC4();
    LOBYTE(v62) = 4;
    LOBYTE(v22) = isFeatureEnabled(_:)(&v62);
    sub_100009C08(&v62);
    if ((v22 & 1) != 0)
    {
      *(_QWORD *)&v62 = a1;
      *((_QWORD *)&v62 + 1) = a2;
      static CharacterSet.whitespacesAndNewlines.getter(v24);
      v25 = sub_10000B030();
      v26 = StringProtocol.trimmingCharacters(in:)(v14, &type metadata for String, v25);
      v28 = v27;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      swift_bridgeObjectRelease(v28);
      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = v26 & 0xFFFFFFFFFFFFLL;
      if (!v29)
        goto LABEL_15;
      v30 = sub_10004B3E4();
      v31 = sub_1001886C0();
      v33 = v32;
      swift_release(v30);
      swift_bridgeObjectRelease(v33);
      v34 = HIBYTE(v33) & 0xF;
      if ((v33 & 0x2000000000000000) == 0)
        v34 = v31 & 0xFFFFFFFFFFFFLL;
      if (!v34)
      {
        v35 = swift_getKeyPath(&unk_1001E9180);
        v36 = swift_getKeyPath(&unk_1001E91A8);
        static Published.subscript.getter(v10, v3, v35);
        swift_release(v36);
        swift_release(v35);
        v37 = swift_getKeyPath(&unk_1001E8EB0);
        v38 = swift_getKeyPath(&unk_1001E8ED8);
        v39 = v59;
        static Published.subscript.getter(v59, v3, v37);
        swift_release(v38);
        swift_release(v37);
        LOBYTE(v37) = static Locale.== infix(_:_:)(v10, v39);
        v40 = *(void (**)(_QWORD *, uint64_t))(v60 + 8);
        v41 = v39;
        v42 = v61;
        v40(v41, v61);
        v40(v10, v42);
        if ((v37 & 1) == 0)
        {
LABEL_15:
          v43 = swift_getKeyPath(&unk_1001E9138);
          v44 = swift_getKeyPath(&unk_1001E9160);
          static Published.subscript.getter(&v62, v3, v43);
          swift_release(v44);
          swift_release(v43);
          if ((v62 & 1) == 0)
          {
            v45 = swift_getKeyPath(&unk_1001E9138);
            v46 = swift_getKeyPath(&unk_1001E9160);
            LOBYTE(v62) = 1;
            swift_retain(v3);
            static Published.subscript.setter(&v62, v3, v45, v46);
          }
          v64 = 0;
          v62 = 0u;
          v63 = 0u;
          sub_10004C1FC((uint64_t)&v62, (char *)a1, a2, a1, a2);
          sub_10000A020((uint64_t)&v62, (uint64_t *)&unk_10028F1C0);
        }
      }
      sub_10004E5C4(a1, a2);
    }
    else
    {
      v64 = 0;
      v62 = 0u;
      v63 = 0u;
      sub_10004C1FC((uint64_t)&v62, (char *)a1, a2, a1, a2);
      sub_10000A020((uint64_t)&v62, (uint64_t *)&unk_10028F1C0);
    }
  }
  else
  {
    LOBYTE(v62) = 2;
    swift_retain(v3);
    static Published.subscript.setter(&v62, v3, v18, v19);
    v47 = swift_getKeyPath(&unk_1001E9060);
    v48 = swift_getKeyPath(&unk_1001E9088);
    LOBYTE(v62) = 0;
    swift_retain(v3);
    static Published.subscript.setter(&v62, v3, v47, v48);
    v49 = swift_getKeyPath(&unk_1001E9530);
    v50 = swift_getKeyPath(&unk_1001E9558);
    LOWORD(v62) = 0;
    swift_retain(v3);
    static Published.subscript.setter(&v62, v3, v49, v50);
    v64 = 0;
    v62 = 0u;
    v63 = 0u;
    sub_10004C1FC((uint64_t)&v62, 0, 0, 0, 0);
    sub_10000A020((uint64_t)&v62, (uint64_t *)&unk_10028F1C0);
    *((_QWORD *)&v63 + 1) = &type metadata for TranslateFeatures;
    v64 = sub_100009BC4();
    LOBYTE(v62) = 4;
    LOBYTE(v49) = isFeatureEnabled(_:)(&v62);
    sub_100009C08(&v62);
    if ((v49 & 1) != 0)
    {
      v64 = 0;
      v62 = 0u;
      v63 = 0u;
      sub_10004C1FC((uint64_t)&v62, (char *)a1, a2, a1, a2);
      sub_10000A020((uint64_t)&v62, (uint64_t *)&unk_10028F1C0);
    }
    v51 = swift_getKeyPath(&unk_1001E9138);
    v52 = swift_getKeyPath(&unk_1001E9160);
    static Published.subscript.getter(&v62, v3, v51);
    swift_release(v52);
    swift_release(v51);
    if (v62 == 1)
    {
      v53 = swift_getKeyPath(&unk_1001E9138);
      v54 = swift_getKeyPath(&unk_1001E9160);
      LOBYTE(v62) = 0;
      swift_retain(v3);
      static Published.subscript.setter(&v62, v3, v53, v54);
    }
    v55 = sub_10004B3E4();
    sub_10018898C();
    swift_release(v55);
  }
  v56 = swift_getKeyPath(&unk_1001E8F40);
  v57 = swift_getKeyPath(&unk_1001E8F68);
  *(_QWORD *)&v62 = a1;
  *((_QWORD *)&v62 + 1) = a2;
  swift_retain(v3);
  swift_bridgeObjectRetain(a2);
  static Published.subscript.setter(&v62, v3, v56, v57);
  sub_10004E30C();
}

void sub_10004F1F8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v36[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10004D8CC();
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA470);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "in performFinalTextTranslation", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v14 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v37, v2, KeyPath);
  swift_release(v14);
  v15 = swift_release(KeyPath);
  if (!v38)
  {
LABEL_15:
    v28 = Logger.logObject.getter(v15);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Skipping final translation: no text to translate", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    if ((a1 & 1) != 0)
      goto LABEL_20;
    return;
  }
  static CharacterSet.whitespacesAndNewlines.getter(v16);
  v17 = sub_10000B030();
  v18 = StringProtocol.trimmingCharacters(in:)(v7, &type metadata for String, v17);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease(v38);
  v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0)
    v21 = v18 & 0xFFFFFFFFFFFFLL;
  if (!v21)
  {
    swift_bridgeObjectRelease(v20);
    goto LABEL_15;
  }
  v22 = swift_getKeyPath(&unk_1001E9060);
  v23 = swift_getKeyPath(&unk_1001E9088);
  static Published.subscript.getter(&v37, v2, v22);
  swift_release(v23);
  swift_release(v22);
  if (v37 != 2)
  {
    v31 = swift_getKeyPath(&unk_1001E9060);
    v32 = swift_getKeyPath(&unk_1001E9088);
    LOBYTE(v37) = 2;
    swift_retain(v2);
    static Published.subscript.setter(&v37, v2, v31, v32);
    sub_100053C08(v18, v20, v33, 0);
    swift_bridgeObjectRelease(v20);
    sub_100054584(1);
    if ((a1 & 1) == 0)
      return;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease(v20);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Early returning and not translating because translation is in progress with the same text already", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  if ((a1 & 1) != 0)
  {
LABEL_20:
    v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
    v35 = swift_getKeyPath(&unk_1001E91C8);
    __chkstk_darwin(v35);
    *(_QWORD *)&v36[-16] = v34;
    v36[-8] = 0;
    v37 = v34;
    sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
    swift_retain(v34);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v35, sub_10005E678);
    swift_release(v35);
    swift_release(v34);
  }
}

void sub_10004F770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  id v76;
  Class isa;
  Class v78;
  id v79;
  void (*v80)(_QWORD *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v93 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v88 = (uint64_t *)((char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v87 = (uint64_t *)((char *)&v83 - v6);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v83 - v8);
  __chkstk_darwin(v7);
  v11 = (char *)&v83 - v10;
  v12 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v92 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v19 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v94, v1, KeyPath);
  swift_release(v19);
  swift_release(KeyPath);
  v20 = v95;
  if (!v95)
    goto LABEL_10;
  v21 = v94;
  swift_bridgeObjectRelease(v95);
  v22 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0)
    v22 = v21 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10000F66C(v23, (uint64_t)qword_1002AA470);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "begingListening called when source text is present", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

  }
  else
  {
LABEL_10:
    v89 = v16;
    v90 = v15;
    v91 = v11;
    v86 = v9;
    v28 = v2;
    v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
    v30 = swift_getKeyPath(&unk_1001E91C8);
    __chkstk_darwin(v30);
    v94 = v29;
    sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
    swift_retain(v29);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v94, v30, sub_10005E678);
    swift_release(v30);
    swift_release(v29);
    v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager);
    v32 = swift_getKeyPath(&unk_1001E9260);
    v33 = swift_getKeyPath(&unk_1001E9288);
    static Published.subscript.getter(&v94, v31, v32);
    swift_release(v33);
    swift_release(v32);
    v34 = v95;
    swift_bridgeObjectRelease(v95);
    if (v34)
    {
      if (qword_10028A478 != -1)
        swift_once(&qword_10028A478, sub_100121100);
      v35 = type metadata accessor for Logger(0);
      v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA470);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Cancelling TTS when dictation starts", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }

      sub_1001D3410();
    }
    v40 = swift_getKeyPath(&unk_1001E9578);
    v41 = swift_getKeyPath(&unk_1001E95A0);
    static Published.subscript.getter(&v94, v1, v40);
    swift_release(v41);
    swift_release(v40);
    if ((v94 & 1) == 0)
    {
      v42 = swift_getKeyPath(&unk_1001E9578);
      v43 = swift_getKeyPath(&unk_1001E95A0);
      LOBYTE(v94) = 1;
      swift_retain(v1);
      static Published.subscript.setter(&v94, v1, v42, v43);
    }
    v44 = swift_getKeyPath(&unk_1001E9060);
    v45 = swift_getKeyPath(&unk_1001E9088);
    static Published.subscript.getter(&v94, v1, v44);
    swift_release(v45);
    swift_release(v44);
    v46 = v91;
    v47 = v89;
    if (v94 != 1)
    {
      v48 = swift_getKeyPath(&unk_1001E9060);
      v49 = swift_getKeyPath(&unk_1001E9088);
      LOBYTE(v94) = 1;
      swift_retain(v1);
      static Published.subscript.setter(&v94, v1, v48, v49);
    }
    v50 = swift_getKeyPath(&unk_1001E9530);
    v51 = swift_getKeyPath(&unk_1001E9558);
    LOWORD(v94) = 257;
    swift_retain(v1);
    static Published.subscript.setter(&v94, v1, v50, v51);
    v52 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
    v53 = swift_getKeyPath(&unk_1001E9180);
    v54 = swift_getKeyPath(&unk_1001E91A8);
    swift_retain(v52);
    static Published.subscript.getter(v46, v1, v53);
    swift_release(v54);
    swift_release(v53);
    v55 = swift_getKeyPath(&unk_1001E8EB0);
    v56 = swift_getKeyPath(&unk_1001E8ED8);
    static Published.subscript.getter(&v14[v12[5]], v1, v55);
    swift_release(v56);
    swift_release(v55);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(&v14[v12[14]], 1, 1, v90);
    (*(void (**)(char *, _QWORD *, uint64_t))(v93 + 32))(v14, v46, v2);
    *(_QWORD *)&v14[v12[6]] = 2;
    *(_QWORD *)&v14[v12[7]] = 2;
    *(_QWORD *)&v14[v12[8]] = 0;
    v14[v12[9]] = 0;
    v57 = &v14[v12[10]];
    *(_QWORD *)v57 = 0;
    v57[8] = 1;
    v14[v12[11]] = 0;
    *(_QWORD *)&v14[v12[12]] = 0;
    v58 = &v14[v12[13]];
    *(_QWORD *)v58 = 0;
    v58[8] = 1;
    sub_10015AEE0((uint64_t)v14);
    v59 = *(void **)(v52 + 16);
    if (v59)
    {
      v60 = objc_msgSend(v59, "invocationId");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_release(v52);
      sub_100032DAC((uint64_t)v14, type metadata accessor for SELFLoggingInvocationWrapper.Parameters);
      v85 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_speechManager);
      v61 = swift_getKeyPath(&unk_1001E9180);
      v62 = swift_getKeyPath(&unk_1001E91A8);
      static Published.subscript.getter(v46, v1, v61);
      swift_release(v62);
      swift_release(v61);
      v63 = swift_getKeyPath(&unk_1001E8EB0);
      v64 = swift_getKeyPath(&unk_1001E8ED8);
      v65 = v86;
      static Published.subscript.getter(v86, v1, v63);
      swift_release(v64);
      swift_release(v63);
      v66 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
      v67 = swift_getKeyPath(&unk_1001E93C8);
      v68 = swift_getKeyPath(&unk_1001E93F0);
      static Published.subscript.getter(&v94, v66, v67);
      swift_release(v68);
      swift_release(v67);
      v69 = v95;
      v84 = v94;
      v70 = swift_getKeyPath(&unk_1001E9180);
      v71 = swift_getKeyPath(&unk_1001E91A8);
      v72 = v87;
      static Published.subscript.getter(v87, v1, v70);
      swift_release(v71);
      swift_release(v70);
      v73 = swift_getKeyPath(&unk_1001E8EB0);
      v74 = swift_getKeyPath(&unk_1001E8ED8);
      v75 = v88;
      static Published.subscript.getter(v88, v1, v73);
      swift_release(v74);
      swift_release(v73);
      v76 = objc_allocWithZone((Class)_LTLocalePair);
      isa = Locale._bridgeToObjectiveC()().super.isa;
      v78 = Locale._bridgeToObjectiveC()().super.isa;
      v79 = objc_msgSend(v76, "initWithSourceLocale:targetLocale:", isa, v78);

      v80 = *(void (**)(_QWORD *, uint64_t))(v93 + 8);
      v80(v75, v28);
      v80(v72, v28);
      LOBYTE(v78) = sub_10015F5AC(v79);

      v81 = v92;
      v82 = (uint64_t)v91;
      sub_10016C848((uint64_t)v91, (uint64_t)v65, v84, v69, 0, v78 & 1, 1, 1, 0x101u, 0, 0, v92);
      swift_bridgeObjectRelease(v69);
      v80(v65, v28);
      v80((_QWORD *)v82, v28);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v81, v90);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100050128(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[80];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1001E9530);
  v5 = swift_getKeyPath(&unk_1001E9558);
  static Published.subscript.getter(&v37, v2, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  if ((v37 & 1) != 0 || BYTE1(v37))
  {
    v6 = swift_getKeyPath(&unk_1001E9530);
    v7 = swift_getKeyPath(&unk_1001E9558);
    LOWORD(v37) = 0;
    swift_retain(v2);
    static Published.subscript.setter(&v37, v2, v6, v7);
  }
  v8 = swift_getKeyPath(&unk_1001E9018);
  v9 = swift_getKeyPath(&unk_1001E9040);
  static Published.subscript.getter(&v37, v2, v8);
  swift_release(v9);
  swift_release(v8);
  if (v37 == 1)
  {
    v10 = swift_getKeyPath(&unk_1001E9018);
    v11 = swift_getKeyPath(&unk_1001E9040);
    LOBYTE(v37) = 0;
    swift_retain(v2);
    static Published.subscript.setter(&v37, v2, v10, v11);
  }
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_speechManager);
  if ((a1 & 1) != 0)
  {
    sub_10016D1D0();
  }
  else
  {
    v13 = v12 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v12 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
    if (Strong)
    {
      v15 = Strong;
      v16 = *(_QWORD *)(v13 + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v16 + 16))(0, ObjectType, v16);
      swift_unknownObjectRelease(v15);
    }
    v18 = *(_QWORD *)(v12 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer);
    if (v18)
      objc_msgSend(*(id *)(v18 + 48), "endAudio");
    sub_100147478();
  }
  v19 = swift_getKeyPath(&unk_1001E8EF8);
  v20 = swift_getKeyPath(&unk_1001E8F20);
  static Published.subscript.getter(&v37, v2, v19);
  swift_release(v20);
  swift_release(v19);
  v21 = *((_QWORD *)&v38 + 1);
  sub_10000A020((uint64_t)&v37, &qword_10028D388);
  if (v21)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v22 = swift_getKeyPath(&unk_1001E8EF8);
    v23 = swift_getKeyPath(&unk_1001E8F20);
    sub_10000B074((uint64_t)&v37, (uint64_t)v36, &qword_10028D388);
    swift_retain(v2);
    static Published.subscript.setter(v36, v2, v22, v23);
    sub_10000A020((uint64_t)&v37, &qword_10028D388);
  }
  v24 = swift_getKeyPath(&unk_1001E9060);
  v25 = swift_getKeyPath(&unk_1001E9088);
  static Published.subscript.getter(&v37, v2, v24);
  swift_release(v25);
  swift_release(v24);
  if (v37 != 1)
  {
    v26 = swift_getKeyPath(&unk_1001E9060);
    v27 = swift_getKeyPath(&unk_1001E9088);
    LOBYTE(v37) = 1;
    swift_retain(v2);
    static Published.subscript.setter(&v37, v2, v26, v27);
  }
  *((_QWORD *)&v38 + 1) = &type metadata for TranslateFeatures;
  *(_QWORD *)&v39 = sub_100009BC4();
  LOBYTE(v37) = 9;
  v28 = isFeatureEnabled(_:)(&v37);
  sub_100009C08(&v37);
  if ((v28 & 1) != 0)
  {
    v29 = swift_getKeyPath(&unk_1001E9578);
    v30 = swift_getKeyPath(&unk_1001E95A0);
    static Published.subscript.getter(&v37, v2, v29);
    swift_release(v30);
    swift_release(v29);
    if ((v37 & 1) != 0)
      sub_100148E68(1, 1);
  }
  v31 = swift_getKeyPath(&unk_1001E9578);
  v32 = swift_getKeyPath(&unk_1001E95A0);
  static Published.subscript.getter(&v37, v2, v31);
  swift_release(v32);
  result = swift_release(v31);
  if (v37 == 2 || (v37 & 1) != 0)
  {
    v34 = swift_getKeyPath(&unk_1001E9578);
    v35 = swift_getKeyPath(&unk_1001E95A0);
    LOBYTE(v37) = 0;
    swift_retain(v2);
    return static Published.subscript.setter(&v37, v2, v34, v35);
  }
  return result;
}

uint64_t sub_10005058C(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_1001E9018);
  v4 = swift_getKeyPath(&unk_1001E9040);
  static Published.subscript.getter(&v10, v1, KeyPath);
  swift_release(v4);
  swift_release(KeyPath);
  if (v10 == 1)
    sub_100050128(0);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager);
  v6 = swift_getKeyPath(&unk_1001E9260);
  v7 = swift_getKeyPath(&unk_1001E9288);
  static Published.subscript.getter(&v10, v5, v6);
  swift_release(v7);
  swift_release(v6);
  v8 = v11;
  result = swift_bridgeObjectRelease(v11);
  if (v8)
  {
    if ((a1 & 1) == 0)
      return sub_1001D3410();
  }
  return result;
}

uint64_t sub_100050678()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  ValueMetadata *v20;
  unint64_t v21;
  _QWORD *v22;
  void *Description;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  char v27;
  char v28;
  _BYTE v29[24];
  uint64_t v30;
  unint64_t v31;
  ValueMetadata *v32;
  unint64_t v33;

  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v2 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v30, v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v31;
  swift_bridgeObjectRelease(v31);
  if (!v3)
    goto LABEL_12;
  v4 = swift_getKeyPath(&unk_1001E8F40);
  v5 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v30, v0, v4);
  swift_release(v5);
  result = swift_release(v4);
  v7 = v31;
  if (v31)
  {
    v8 = v30;
    swift_bridgeObjectRelease(v31);
    v9 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v9 = v8 & 0xFFFFFFFFFFFFLL;
    if (!v9)
      goto LABEL_12;
    v10 = swift_getKeyPath(&unk_1001E8F40);
    v11 = swift_getKeyPath(&unk_1001E8F68);
    static Published.subscript.getter(&v30, v0, v10);
    swift_release(v11);
    result = swift_release(v10);
    v12 = v31;
    if (v31)
    {
      v13 = String.count.getter(v30, v31);
      swift_bridgeObjectRelease(v12);
      if (v13)
      {
        v32 = &type metadata for TranslateFeatures;
        v33 = sub_100009BC4();
        LOBYTE(v30) = 4;
        v14 = isFeatureEnabled(_:)(&v30);
        sub_100009C08(&v30);
        if ((v14 & 1) != 0)
        {
          v15 = sub_10004B3E4();
          v16 = swift_getKeyPath(&unk_1001E8F40);
          v17 = swift_getKeyPath(&unk_1001E8F68);
          static Published.subscript.getter(&v30, v0, v16);
          swift_release(v17);
          swift_release(v16);
          v18 = v31;
          if ((sub_10018B8C8(v30, v31) & 1) != 0)
          {
            v19 = (uint64_t)&v15[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation];
            swift_beginAccess(&v15[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation], v29, 0, 0);
            sub_10000B074(v19, (uint64_t)&v30, (uint64_t *)&unk_10028F1C0);
            v20 = v32;
            if (v32)
            {
              v21 = v33;
              v22 = sub_100023AF4(&v30, (uint64_t)v32);
              Description = v20[-1].Description;
              __chkstk_darwin(v22);
              v25 = &v29[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
              (*((void (**)(_BYTE *, _BYTE *))Description + 2))(v25, v26);
              sub_10000A020((uint64_t)&v30, (uint64_t *)&unk_10028F1C0);
              v27 = dispatch thunk of TranslationResult.isFinal.getter(v20, v21);
              (*((void (**)(_BYTE *, ValueMetadata *))Description + 1))(v25, v20);
              swift_release(v15);
              swift_bridgeObjectRelease(v18);
LABEL_17:
              v28 = v27 ^ 1;
              return v28 & 1;
            }
            sub_10000A020((uint64_t)&v30, (uint64_t *)&unk_10028F1C0);
          }
          swift_release(v15);
          swift_bridgeObjectRelease(v18);
          v27 = 0;
          goto LABEL_17;
        }
        v28 = 0;
        return v28 & 1;
      }
LABEL_12:
      v28 = 1;
      return v28 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_10005098C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v2 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v7, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v8;
  if (!v8)
    return 1;
  v4 = v7;
  swift_bridgeObjectRelease(v8);
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v4 & 0xFFFFFFFFFFFFLL;
  return v5 == 0;
}

uint64_t sub_100050A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  unint64_t v56;
  id v57;
  unint64_t v58;

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v2);
  v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v51 - v12);
  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v15 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v57, v1, KeyPath);
  swift_release(v15);
  swift_release(KeyPath);
  if (v58)
    v16 = v57;
  else
    v16 = 0;
  v17 = 0xE000000000000000;
  if (v58)
    v18 = v58;
  else
    v18 = 0xE000000000000000;
  v55 = v16;
  v56 = v18;
  v19 = swift_getKeyPath(&unk_1001E8F88);
  v20 = swift_getKeyPath(&unk_1001E8FB0);
  static Published.subscript.getter(&v57, v1, v19);
  swift_release(v20);
  swift_release(v19);
  v21 = v57;
  if (v57)
  {
    v22 = objc_msgSend(v57, "string");

    v21 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v17 = v23;

  }
  v24 = swift_getKeyPath(&unk_1001E9180);
  v25 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v13, v1, v24);
  swift_release(v25);
  swift_release(v24);
  v26 = swift_getKeyPath(&unk_1001E8EB0);
  v27 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v11, v1, v26);
  swift_release(v27);
  swift_release(v26);
  LOBYTE(v26) = static Locale.== infix(_:_:)(v13, v11);
  v28 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v28(v11, v7);
  v28(v13, v7);
  if ((v26 & 1) != 0)
  {
    swift_bridgeObjectRelease(v17);
    v17 = v56;
    swift_bridgeObjectRetain(v56);
    v21 = v55;
  }
  v29 = String.count.getter(v21, v17);
  if (v29 < 1)
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v56);
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_10000F66C(v45, (uint64_t)qword_1002AA470);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Request to broadcast a translation when the text to display is empty", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    return 0;
  }
  else
  {
    v30 = UUID.init()(v29);
    v51 = UUID.uuidString.getter(v30);
    v32 = v31;
    v33 = v52;
    v34 = v53;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v6, v53);
    v35 = swift_getKeyPath(&unk_1001E9180);
    v36 = swift_getKeyPath(&unk_1001E91A8);
    static Published.subscript.getter(v13, v1, v35);
    swift_release(v36);
    swift_release(v35);
    v37 = swift_getKeyPath(&unk_1001E8EB0);
    v38 = swift_getKeyPath(&unk_1001E8ED8);
    static Published.subscript.getter(v11, v1, v37);
    swift_release(v38);
    swift_release(v37);
    v39 = swift_getKeyPath(&unk_1001E9380);
    v40 = swift_getKeyPath(&unk_1001E93A8);
    static Published.subscript.getter(&v57, v1, v39);
    swift_release(v40);
    swift_release(v39);
    LOBYTE(v39) = (_BYTE)v57;
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
    v42 = (uint64_t)v54;
    v41(v54, 1, 1, v34);
    v43 = type metadata accessor for TestableTranslation(0);
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v44 = sub_1000AC35C(v51, v32, (uint64_t)v13, (uint64_t)v11, v39, (uint64_t)v55, v56, (uint64_t)v21, 1.0, v17, 0, 0, 0, v42);
    sub_100007D5C(&qword_10028DFD8, type metadata accessor for TestableTranslation, (uint64_t)&unk_1001EC790);
  }
  return v44;
}

void sub_100050F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t KeyPath;
  uint64_t v20;
  void (*v21)(uint64_t *, _QWORD);
  BOOL *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  void (*v50)(_QWORD *, uint64_t, __n128);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v51 - v7);
  v9 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v56 = *(NSObject **)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_100050678() & 1) != 0)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10000F66C(v15, (uint64_t)qword_1002AA470);
    v56 = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v17, "Ignoring request to toggleFavorite with actions disabled", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  else
  {
    v55 = v12;
    KeyPath = swift_getKeyPath(&unk_1001E9380);
    v20 = swift_getKeyPath(&unk_1001E93A8);
    v21 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify(&v57, v1, KeyPath, v20);
    *v22 = !*v22;
    v21(&v57, 0);
    swift_release(v20);
    swift_release(KeyPath);
    v23 = swift_getKeyPath(&unk_1001E8F40);
    v24 = swift_getKeyPath(&unk_1001E8F68);
    static Published.subscript.getter(&v57, v1, v23);
    swift_release(v24);
    swift_release(v23);
    if (v58)
    {
      v54 = v58;
      v52 = v57;
      v25 = swift_getKeyPath(&unk_1001E9380);
      v26 = swift_getKeyPath(&unk_1001E93A8);
      static Published.subscript.getter(&v57, v1, v25);
      swift_release(v26);
      swift_release(v25);
      if (v57 == 1)
      {
        if (qword_10028A478 != -1)
          swift_once(&qword_10028A478, sub_100121100);
        v53 = v3;
        v27 = type metadata accessor for Logger(0);
        v28 = sub_10000F66C(v27, (uint64_t)qword_1002AA470);
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "Creating a new final translation request for the favorited translation", v31, 2u);
          swift_slowDealloc(v31, -1, -1);
        }

        v32 = *(_QWORD *)(v1
                        + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
        v33 = swift_getKeyPath(&unk_1001E9180);
        v34 = swift_getKeyPath(&unk_1001E91A8);
        swift_retain(v32);
        static Published.subscript.getter(v8, v1, v33);
        swift_release(v34);
        swift_release(v33);
        v35 = swift_getKeyPath(&unk_1001E8EB0);
        v36 = swift_getKeyPath(&unk_1001E8ED8);
        static Published.subscript.getter(&v11[v9[5]], v1, v35);
        swift_release(v36);
        swift_release(v35);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v56[7].isa)(&v11[v9[14]], 1, 1, v55);
        (*(void (**)(char *, _QWORD *, uint64_t))(v53 + 32))(v11, v8, v2);
        *(_QWORD *)&v11[v9[6]] = 1;
        *(_QWORD *)&v11[v9[7]] = 1;
        *(_QWORD *)&v11[v9[8]] = 0;
        v11[v9[9]] = 0;
        v37 = &v11[v9[10]];
        *(_QWORD *)v37 = 0;
        v37[8] = 1;
        v11[v9[11]] = 0;
        *(_QWORD *)&v11[v9[12]] = 0;
        v38 = &v11[v9[13]];
        *(_QWORD *)v38 = 0;
        v38[8] = 1;
        sub_10015AEE0((uint64_t)v11);
        v39 = *(void **)(v32 + 16);
        if (v39)
        {
          v40 = objc_msgSend(v39, "invocationId");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          swift_release(v32);
          sub_100032DAC((uint64_t)v11, type metadata accessor for SELFLoggingInvocationWrapper.Parameters);
          v41 = sub_10004B3E4();
          v42 = swift_getKeyPath(&unk_1001E9180);
          v43 = swift_getKeyPath(&unk_1001E91A8);
          static Published.subscript.getter(v8, v1, v42);
          swift_release(v43);
          swift_release(v42);
          v44 = swift_getKeyPath(&unk_1001E8EB0);
          v45 = swift_getKeyPath(&unk_1001E8ED8);
          static Published.subscript.getter(v6, v1, v44);
          swift_release(v45);
          swift_release(v44);
          v46 = swift_getKeyPath(&unk_1001E9380);
          v47 = swift_getKeyPath(&unk_1001E93A8);
          static Published.subscript.getter(&v57, v1, v46);
          swift_release(v47);
          swift_release(v46);
          v48 = v54;
          sub_10018B338(v52, v54, (uint64_t)v8, (uint64_t)v6, v57, (uint64_t)v14);
          swift_release(v41);
          v49 = swift_bridgeObjectRelease(v48);
          v50 = *(void (**)(_QWORD *, uint64_t, __n128))(v53 + 8);
          v50(v6, v2, v49);
          ((void (*)(_QWORD *, uint64_t))v50)(v8, v2);
          ((void (*)(char *, uint64_t))v56[1].isa)(v14, v55);
        }
        else
        {
          __break(1u);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v54);
      }
    }
  }
}

void sub_1000515B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  if ((sub_100050678() & 1) != 0)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10000F66C(v1, (uint64_t)qword_1002AA470);
    oslog = Logger.logObject.getter(v2);
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Ignoring request to show dictionary with actions disabled", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_1001E8F40);
    v6 = swift_getKeyPath(&unk_1001E8F68);
    static Published.subscript.getter(&v12, v0, KeyPath);
    swift_release(v6);
    swift_release(KeyPath);
    v7 = v12;
    v8 = v13;
    v9 = swift_getKeyPath(&unk_1001E94E8);
    v10 = swift_getKeyPath(&unk_1001E9510);
    v12 = v7;
    v13 = v8;
    swift_retain(v0);
    static Published.subscript.setter(&v12, v0, v9, v10);
    sub_10004F1F8(1);
  }
}

void sub_10005173C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSString v9;
  uint64_t v10;
  void *v11;
  uint64_t KeyPath;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  id aBlock[5];
  uint64_t v34;

  v1 = type metadata accessor for UTType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_100050678() & 1) != 0)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA470);
    v32 = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v7, "Ignoring request to copy translation with actions disabled", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  else
  {
    v9 = String._bridgeToObjectiveC()();
    v10 = swift_allocObject(&unk_100265A38, 24, 7);
    swift_weakInit(v10 + 16, v0);
    aBlock[4] = sub_10005DFA8;
    v34 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_100170878;
    aBlock[3] = &unk_100265CA8;
    v11 = _Block_copy(aBlock);
    swift_release(v34);
    AnalyticsSendEventLazy(v9, v11);
    _Block_release(v11);

    KeyPath = swift_getKeyPath(&unk_1001E8F88);
    v13 = swift_getKeyPath(&unk_1001E8FB0);
    static Published.subscript.getter(aBlock, v0, KeyPath);
    swift_release(v13);
    swift_release(KeyPath);
    v14 = aBlock[0];
    if (aBlock[0])
    {
      v15 = objc_msgSend(aBlock[0], "string");

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      if (String.count.getter(v16, v18) >= 1)
      {
        v19 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
        v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v18);
        v22 = static UTType.plainText.getter(v21);
        UTType.identifier.getter(v22);
        v24 = v23;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        v25 = String._bridgeToObjectiveC()();
        objc_msgSend(v19, "setValue:forPasteboardType:", v20, v25, swift_bridgeObjectRelease(v24).n128_f64[0]);

        return;
      }
      swift_bridgeObjectRelease(v18);
    }
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10000F66C(v26, (uint64_t)qword_1002AA470);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to get valid target text to copy to pasteboard", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

  }
}

unint64_t sub_100051B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, uint64_t);
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  unint64_t v34;
  _BYTE v36[128];
  _BYTE v37[32];

  v10 = type metadata accessor for Locale(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v16 = &v36[-v15];
  a1 += 16;
  swift_beginAccess(a1, v37, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong)
    return 0;
  v18 = Strong;
  v19 = sub_100006DF4(&qword_10028DFD0);
  inited = swift_initStackObject(v19, v36);
  *(_OWORD *)(inited + 16) = xmmword_1001E6660;
  *(_QWORD *)(inited + 32) = 0x6D614E746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  sub_10000A05C(0, (unint64_t *)&qword_10028AA68, NSString_ptr);
  *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)(a2, a3, 2);
  *(_QWORD *)(inited + 56) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  *(_QWORD *)(inited + 72) = NSString.init(stringLiteral:)(a4, a5, 2);
  strcpy((char *)(inited + 80), "sourceLocale");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  KeyPath = swift_getKeyPath(&unk_1001E9180);
  v22 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v16, v18, KeyPath);
  swift_release(v22);
  v23 = swift_release(KeyPath);
  Locale.ltIdentifier.getter(v23);
  v25 = v24;
  v26 = *(void (**)(_QWORD *, uint64_t))(v11 + 8);
  v26(v16, v10);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(inited + 96) = v27;
  strcpy((char *)(inited + 104), "targetLocale");
  *(_BYTE *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  v28 = swift_getKeyPath(&unk_1001E8EB0);
  v29 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v14, v18, v28);
  swift_release(v29);
  v30 = swift_release(v28);
  Locale.ltIdentifier.getter(v30);
  v32 = v31;
  v26(v14, v10);
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(inited + 120) = v33;
  v34 = sub_1001A4D08(inited);
  swift_release(v18);
  return v34;
}

void sub_100051DD0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;

  KeyPath = swift_getKeyPath(&unk_1001E9458);
  v2 = swift_getKeyPath(&unk_1001E9480);
  static Published.subscript.getter((uint64_t *)((char *)&v16 + 1), v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  if (BYTE1(v16) == 1)
  {
    v3 = sub_1001A76D0(0, 1, 1, _swiftEmptyArrayStorage);
    v5 = v3[2];
    v4 = v3[3];
    v6 = v4 >> 1;
    v7 = v5 + 1;
    if (v4 >> 1 <= v5)
    {
      v3 = sub_1001A76D0((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
      v4 = v3[3];
      v6 = v4 >> 1;
    }
    v3[2] = v7;
    v3[v5 + 4] = 1;
    v8 = v5 + 2;
    if (v6 < v8)
      v3 = sub_1001A76D0((_QWORD *)(v4 > 1), v8, 1, v3);
    v9 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_translationOptions);
    v11 = swift_getKeyPath(&unk_1001E94A0);
    v12 = swift_getKeyPath(&unk_1001E94C8);
    static Published.subscript.getter(&v16, v10, v11);
    swift_release(v12);
    swift_release(v11);
    if ((v16 & 1) != 0)
    {
      v3 = _swiftEmptyArrayStorage;
      goto LABEL_12;
    }
    v9 = 1;
    v3 = sub_1001A76D0(0, 1, 1, _swiftEmptyArrayStorage);
    v7 = v3[2];
    v13 = v3[3];
    v8 = v7 + 1;
    if (v7 >= v13 >> 1)
    {
      v9 = 1;
      v3 = sub_1001A76D0((_QWORD *)(v13 > 1), v7 + 1, 1, v3);
    }
  }
  v3[2] = v8;
  v3[v7 + 4] = v9;
LABEL_12:
  v14 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel);
  if (v14)
  {
    v15 = v14;
    dispatch thunk of DisambiguationResultModel.excludedTypes.setter(v3);

  }
  else
  {
    swift_bridgeObjectRelease(v3);
  }
}

uint64_t sub_100051FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v15[24];

  v3 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_beginAccess(a2, v15, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  swift_weakInit(v7 + 16, Strong);
  swift_release(Strong);
  type metadata accessor for MainActor(0);
  v9 = swift_retain(v7);
  v10 = static MainActor.shared.getter(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_100265D58, 40, 7);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v7;
  swift_release(v7);
  v12 = sub_100049DC0((uint64_t)v5, (uint64_t)&unk_10028DFE8, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_100052124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[5] = a4;
  v5 = type metadata accessor for CoreAnalyticsLogger.CardType(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[9] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000521B8, v8, v9);
}

uint64_t sub_1000521B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v5 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 48);
    sub_100054910();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for CoreAnalyticsLogger.CardType.compose(_:), v6);
    v7 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel);
    if (v7)
    {
      v8 = v7;
      v9 = (void *)DisambiguationResultModel.disambiguableResult.getter();

    }
    else
    {
      v9 = 0;
    }
    v11 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 48);
    sub_1000522BC(v10, v9);
    swift_release(v3);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000522BC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  unint64_t v34;

  v5 = type metadata accessor for CoreAnalyticsLogger.CardType(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v28 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  if (a2)
  {
    v32 = a2;
    if (!objc_msgSend(v32, "hasDisambiguations"))
    {
LABEL_6:

      return;
    }
    v29 = v2;
    v31 = objc_msgSend(v32, "hasDisambiguationsOfType:", 1);
    v30 = objc_msgSend(v32, "hasDisambiguationsOfType:", 0);
    v15 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
    v16 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v15);
    v17 = NSUserDefaults.genderDisambiguationEnabled.getter();

    v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v18(v14, a1, v5);
    v19 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v14, v5);
    v20 = v19;
    if ((_DWORD)v19 == enum case for CoreAnalyticsLogger.CardType.compose(_:))
    {
      v21 = *(_QWORD *)(v29
                      + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
      if (*(_BYTE *)(v21
                    + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) != 1)
      {
        *(_BYTE *)(v21 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) = 1;
        v22 = swift_retain(v21);
        v23 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v22);
        v24 = NSUserDefaults.genderDisambiguationEnabled.getter();

        type metadata accessor for CoreAnalyticsLogger(0);
        v25 = static CoreAnalyticsLogger.shared.getter();
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 104))(v12, v20, v5);
        dispatch thunk of CoreAnalyticsLogger.didOfferDisambiguation(fromCard:hasGender:hasMeaning:genderDisambiguationSettingEnabled:)(v12, v31, v30, (v24 == 2) | (v24 & 1));
        swift_release(v25);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
        swift_release(v21);
      }
      goto LABEL_6;
    }
    if ((_DWORD)v19 == enum case for CoreAnalyticsLogger.CardType.committed(_:))
    {
      type metadata accessor for CoreAnalyticsLogger(0);
      v26 = static CoreAnalyticsLogger.shared.getter();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 104))(v12, v20, v5);
      dispatch thunk of CoreAnalyticsLogger.didOfferDisambiguation(fromCard:hasGender:hasMeaning:genderDisambiguationSettingEnabled:)(v12, v31, v30, (v17 == 2) | (v17 & 1));
      swift_release(v26);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
    else
    {
      v18(v9, a1, v5);
      v33 = 0;
      v34 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      v27._object = (void *)0x80000001001FA100;
      v27._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v27);
      _print_unlocked<A, B>(_:_:)(v9, &v33, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v33, v34, "SequoiaTranslator/ComposeTranslationViewModel.swift", 51, 2, 803, 0);
      __break(1u);
    }
  }
}

void sub_100052638(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  void **v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  double v78;
  id v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char *v89;
  char *v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  void *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSString v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t KeyPath;
  void **v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  void **aBlock;
  unint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  char v160;
  __int128 v161;
  __int128 v162;

  v2 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for DispatchWorkItemFlags(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v143 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for DispatchQoS(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v140 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchTime(0);
  v137 = *(_QWORD *)(v139 - 8);
  v7 = __chkstk_darwin(v139);
  v136 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v138 = (char *)&v130 - v9;
  v10 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v10);
  v150 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for StoredTranslationResult(0);
  v149 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v148 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SpeechResultOrigin(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for StoredSpeechResult(0);
  v146 = *(_QWORD *)(v17 - 8);
  v147 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Locale(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (uint64_t *)((char *)&v130 - v25);
  v153 = a1;
  v27 = objc_msgSend(a1, "userInfo");
  if (!v27)
  {
    v161 = 0u;
    v162 = 0u;
LABEL_16:
    sub_10000A020((uint64_t)&v161, (uint64_t *)&unk_10028C0B0);
    goto LABEL_17;
  }
  v28 = v27;
  v135 = v4;
  v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v27, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v160 = 0;
  v30 = sub_10005DE7C();
  AnyHashable.init<A>(_:)(&aBlock, &v160, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v30);
  if (*(_QWORD *)(v29 + 16) && (v31 = sub_1001A87EC((uint64_t)&aBlock), (v32 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v29 + 56) + 32 * v31, (uint64_t)&v161);
  }
  else
  {
    v161 = 0u;
    v162 = 0u;
  }
  swift_bridgeObjectRelease(v29);
  sub_10005DEC0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v162 + 1))
    goto LABEL_16;
  if ((swift_dynamicCast(&aBlock, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_17:
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10000F66C(v39, (uint64_t)qword_1002AA470);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Request to open a system translation with nil or empty source text", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    return;
  }
  v33 = HIBYTE(v155) & 0xF;
  if ((v155 & 0x2000000000000000) == 0)
    v33 = (unint64_t)aBlock & 0xFFFFFFFFFFFFLL;
  if (!v33)
  {
    swift_bridgeObjectRelease(v155);
    goto LABEL_17;
  }
  v132 = aBlock;
  v133 = v155;
  v134 = v30;
  sub_10004D044(0, 0);
  v34 = objc_msgSend(v153, "userInfo");
  if (!v34)
  {
    v161 = 0u;
    v162 = 0u;
LABEL_29:
    sub_10000A020((uint64_t)&v161, (uint64_t *)&unk_10028C0B0);
    goto LABEL_30;
  }
  v35 = v34;
  v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v160 = 2;
  AnyHashable.init<A>(_:)(&aBlock, &v160, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v134);
  if (*(_QWORD *)(v36 + 16) && (v37 = sub_1001A87EC((uint64_t)&aBlock), (v38 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v36 + 56) + 32 * v37, (uint64_t)&v161);
  }
  else
  {
    v161 = 0u;
    v162 = 0u;
  }
  swift_bridgeObjectRelease(v36);
  sub_10005DEC0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v162 + 1))
    goto LABEL_29;
  if ((swift_dynamicCast(&aBlock, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    Locale.init(identifier:)(aBlock, v155);
    KeyPath = swift_getKeyPath(&unk_1001E9180);
    v44 = swift_getKeyPath(&unk_1001E91A8);
    (*(void (**)(char *, _QWORD *, uint64_t))(v21 + 16))(v24, v26, v20);
    v45 = v152;
    swift_retain(v152);
    static Published.subscript.setter(v24, v45, KeyPath, v44);
    sub_10004A5AC();
    (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v26, v20);
  }
LABEL_30:
  v46 = objc_msgSend(v153, "userInfo");
  if (!v46)
  {
    v161 = 0u;
    v162 = 0u;
    v49 = v134;
LABEL_39:
    sub_10000A020((uint64_t)&v161, (uint64_t *)&unk_10028C0B0);
    goto LABEL_40;
  }
  v47 = v46;
  v48 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v46, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v160 = 3;
  v49 = v134;
  AnyHashable.init<A>(_:)(&aBlock, &v160, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v134);
  if (*(_QWORD *)(v48 + 16) && (v50 = sub_1001A87EC((uint64_t)&aBlock), (v51 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v48 + 56) + 32 * v50, (uint64_t)&v161);
  }
  else
  {
    v161 = 0u;
    v162 = 0u;
  }
  swift_bridgeObjectRelease(v48);
  sub_10005DEC0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v162 + 1))
    goto LABEL_39;
  if ((swift_dynamicCast(&aBlock, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    Locale.init(identifier:)(aBlock, v155);
    KeyPath = swift_getKeyPath(&unk_1001E8EB0);
    v52 = swift_getKeyPath(&unk_1001E8ED8);
    (*(void (**)(char *, _QWORD *, uint64_t))(v21 + 16))(v24, v26, v20);
    v53 = v152;
    swift_retain(v152);
    v54 = v52;
    v49 = v134;
    static Published.subscript.setter(v24, v53, KeyPath, v54);
    sub_10004A864();
    (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v26, v20);
  }
LABEL_40:
  v55 = objc_msgSend(v153, "userInfo");
  if (!v55)
  {
    v161 = 0u;
    v162 = 0u;
LABEL_50:
    sub_10000A020((uint64_t)&v161, (uint64_t *)&unk_10028C0B0);
    goto LABEL_51;
  }
  v56 = v55;
  v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v55, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v160 = 1;
  AnyHashable.init<A>(_:)(&aBlock, &v160, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v49);
  if (*(_QWORD *)(v57 + 16) && (v58 = sub_1001A87EC((uint64_t)&aBlock), (v59 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v57 + 56) + 32 * v58, (uint64_t)&v161);
  }
  else
  {
    v161 = 0u;
    v162 = 0u;
  }
  swift_bridgeObjectRelease(v57);
  sub_10005DEC0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v162 + 1))
    goto LABEL_50;
  if ((swift_dynamicCast(&aBlock, &v161, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_51:
    v74 = swift_getKeyPath(&unk_1001E9060);
    v75 = swift_getKeyPath(&unk_1001E9088);
    LOBYTE(aBlock) = 1;
    v76 = v152;
    swift_retain(v152);
    static Published.subscript.setter(&aBlock, v76, v74, v75);
    v77 = v133;
    sub_10004EAFC((uint64_t)v132, v133);
    *(_QWORD *)&v78 = swift_bridgeObjectRelease(v77).n128_u64[0];
    goto LABEL_52;
  }
  v60 = aBlock;
  v61 = v155;
  v62 = swift_getKeyPath(&unk_1001E9180);
  v63 = swift_getKeyPath(&unk_1001E91A8);
  v64 = v152;
  static Published.subscript.getter(v26, v152, v62);
  swift_release(v63);
  swift_release(v62);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for SpeechResultOrigin.text(_:), v13);
  StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v132, v133, 0, 0, v26, v16);
  v65 = swift_getKeyPath(&unk_1001E8EB0);
  v66 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v26, v64, v65);
  swift_release(v66);
  swift_release(v65);
  v67 = (uint64_t)v148;
  StoredTranslationResult.init(text:locale:isOffline:romanization:)(v60, v61, v26, 1, 0, 0);
  *(_BYTE *)(v64 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_newTranslationFromPunchOut) = 1;
  v68 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation;
  v69 = *(_QWORD *)(v64 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
  v70 = *(void **)(v69 + 16);
  if (v70)
  {
    swift_retain(*(_QWORD *)(v64
                           + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation));
    v71 = objc_msgSend(v70, "invocationId");
    v72 = (uint64_t)v150;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v73 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 0, 1, v73);
    swift_release(v69);
  }
  else
  {
    v117 = type metadata accessor for UUID(0);
    v72 = (uint64_t)v150;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v150, 1, 1, v117);
  }
  v118 = v152;
  v119 = *(_QWORD *)(v152 + v68);
  swift_retain(v119);
  sub_10015B614();
  swift_release(v119);
  v120 = *(char **)(v118 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
  sub_10005A53C((uint64_t)v19, v67, 0, v72, v120);
  v49 = v134;
  if (v121)
  {
    v122 = v121;
    v123 = *(_QWORD *)&v120[OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24];
    v124 = *(_QWORD *)&v120[OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32];
    sub_100023AF4(&v120[OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store], v123);
    dispatch thunk of TranslationStore.save()(v123, v124);

    sub_10000A020(v72, (uint64_t *)&unk_10028F1B0);
    (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v67, v151);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v19, v147);
LABEL_52:
    v79 = objc_msgSend(v153, "userInfo", v78);
    if (v79)
    {
      v80 = v79;
      v81 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v79, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v160 = 5;
      AnyHashable.init<A>(_:)(&aBlock, &v160, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v49);
      if (*(_QWORD *)(v81 + 16) && (v82 = sub_1001A87EC((uint64_t)&aBlock), (v83 & 1) != 0))
      {
        sub_10000A0EC(*(_QWORD *)(v81 + 56) + 32 * v82, (uint64_t)&v161);
      }
      else
      {
        v161 = 0u;
        v162 = 0u;
      }
      swift_bridgeObjectRelease(v81);
      sub_10005DEC0((uint64_t)&aBlock);
      if (*((_QWORD *)&v162 + 1))
      {
        if ((swift_dynamicCast(&aBlock, &v161, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
          && aBlock == 1)
        {
          v84 = v152;
          v85 = *(void ***)(v152 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
          v86 = swift_getKeyPath(&unk_1001E91C8);
          __chkstk_darwin(v86);
          *(&v130 - 2) = (uint64_t)v85;
          *((_BYTE *)&v130 - 8) = 0;
          aBlock = v85;
          sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
          swift_retain(v85);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&aBlock, v86, sub_10005E678);
          swift_release(v86);
          swift_release(v85);
          v87 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
          v88 = (void *)static OS_dispatch_queue.main.getter(v87);
          v89 = v136;
          static DispatchTime.now()();
          v90 = v138;
          + infix(_:_:)(v89, 0.3);
          v91 = *(void (**)(char *, uint64_t))(v137 + 8);
          v92 = v139;
          v91(v89, v139);
          v158 = sub_10005DF80;
          v159 = v84;
          aBlock = _NSConcreteStackBlock;
          v155 = 1107296256;
          v156 = sub_100075908;
          v157 = &unk_100265C80;
          v93 = _Block_copy(&aBlock);
          v94 = swift_retain(v84);
          v95 = v140;
          static DispatchQoS.unspecified.getter(v94);
          *(_QWORD *)&v161 = _swiftEmptyArrayStorage;
          v96 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v97 = sub_100006DF4(&qword_10028AC30);
          v98 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
          v99 = v143;
          v100 = v97;
          v101 = v145;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v161, v100, v98, v145, v96);
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v90, v95, v99, v93);
          _Block_release(v93);

          (*(void (**)(char *, uint64_t))(v144 + 8))(v99, v101);
          (*(void (**)(char *, uint64_t))(v141 + 8))(v95, v142);
          v91(v90, v92);
          v49 = v134;
          swift_release(v159);
        }
LABEL_63:
        v102 = objc_msgSend(v153, "userInfo");
        if (v102)
        {
          v103 = v102;
          v104 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v102, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

          v160 = 4;
          AnyHashable.init<A>(_:)(&aBlock, &v160, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v49);
          if (*(_QWORD *)(v104 + 16) && (v105 = sub_1001A87EC((uint64_t)&aBlock), (v106 & 1) != 0))
          {
            sub_10000A0EC(*(_QWORD *)(v104 + 56) + 32 * v105, (uint64_t)&v161);
          }
          else
          {
            v161 = 0u;
            v162 = 0u;
          }
          swift_bridgeObjectRelease(v104);
          sub_10005DEC0((uint64_t)&aBlock);
          if (*((_QWORD *)&v162 + 1))
          {
            v107 = type metadata accessor for TypedInputInstrumentation(0);
            if ((swift_dynamicCast(&aBlock, &v161, (char *)&type metadata for Any + 8, v107, 6) & 1) != 0)
            {
              v108 = (char *)aBlock;
              v109 = (uint64_t)v135;
              Date.init()();
              v110 = type metadata accessor for Date(0);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v109, 0, 1, v110);
              v111 = (uint64_t)&v108[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start];
              swift_beginAccess(&v108[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start], &aBlock, 33, 0);
              sub_10005DEF4(v109, v111);
              swift_endAccess(&aBlock);
              v112 = String._bridgeToObjectiveC()();
              v113 = swift_allocObject(&unk_100265C40, 24, 7);
              *(_QWORD *)(v113 + 16) = v108;
              v158 = sub_10005DF60;
              v159 = v113;
              aBlock = _NSConcreteStackBlock;
              v155 = 1107296256;
              v156 = sub_100170878;
              v157 = &unk_100265C58;
              v114 = _Block_copy(&aBlock);
              v115 = v159;
              v116 = v108;
              swift_release(v115);
              AnalyticsSendEventLazy(v112, v114);
              _Block_release(v114);

            }
            return;
          }
        }
        else
        {
          v161 = 0u;
          v162 = 0u;
        }
        sub_10000A020((uint64_t)&v161, (uint64_t *)&unk_10028C0B0);
        return;
      }
    }
    else
    {
      v161 = 0u;
      v162 = 0u;
    }
    sub_10000A020((uint64_t)&v161, (uint64_t *)&unk_10028C0B0);
    goto LABEL_63;
  }
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v125 = type metadata accessor for Logger(0);
  v126 = sub_10000F66C(v125, (uint64_t)qword_1002AA470);
  v127 = Logger.logObject.getter(v126);
  v128 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v127, v128))
  {
    v129 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v129 = 0;
    _os_log_impl((void *)&_mh_execute_header, v127, v128, "Failed to insert translation from punchout", v129, 2u);
    swift_slowDealloc(v129, -1, -1);
  }

  sub_10000A020(v72, (uint64_t *)&unk_10028F1B0);
  (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v67, v151);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v19, v147);
}

uint64_t sub_100053834(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
  KeyPath = swift_getKeyPath(&unk_1001E91C8);
  v4 = v1;
  sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  swift_retain(v1);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v4, KeyPath, sub_10005E678);
  swift_release(v1);
  return swift_release(KeyPath);
}

void sub_100053940(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[5];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  const char *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;

  sub_1000557A8(319);
  if (v3 <= 0x3F)
  {
    v28[0] = *(_QWORD *)(v2 - 8) + 64;
    v28[1] = v28[0];
    sub_10001D248(319, (unint64_t *)&qword_100295C00, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v28[2] = v6;
      sub_10001DFF8(319, (unint64_t *)&qword_10028F0C0, &qword_10028D160);
      if (v8 <= 0x3F)
      {
        v9 = *(_QWORD *)(v7 - 8) + 64;
        v28[3] = v9;
        sub_10001DFF8(319, &qword_10028D318, &qword_10028D320);
        if (v11 <= 0x3F)
        {
          v28[4] = *(_QWORD *)(v10 - 8) + 64;
          sub_10001DFF8(319, &qword_10028D328, &qword_10028D330);
          if (v13 <= 0x3F)
          {
            v29 = *(_QWORD *)(v12 - 8) + 64;
            v30 = v29;
            sub_10001DFF8(319, &qword_10028D338, &qword_10028D340);
            if (v15 <= 0x3F)
            {
              v31 = *(_QWORD *)(v14 - 8) + 64;
              v32 = v31;
              v33 = v6;
              v34 = v6;
              v35 = v6;
              v36 = v9;
              v37 = v6;
              v38 = v6;
              sub_10001DFF8(319, &qword_10028D348, &qword_10028D350);
              if (v17 <= 0x3F)
              {
                v39 = *(_QWORD *)(v16 - 8) + 64;
                sub_10001DFF8(319, &qword_10028D358, &qword_10028D360);
                if (v19 <= 0x3F)
                {
                  v40 = *(_QWORD *)(v18 - 8) + 64;
                  v41 = v6;
                  sub_10001DFF8(319, &qword_10028D368, &qword_10028D370);
                  if (v21 <= 0x3F)
                  {
                    v42 = *(_QWORD *)(v20 - 8) + 64;
                    sub_10001D248(319, &qword_10028D378, (uint64_t)&type metadata for ComposeTranslationViewModel.TranslationState);
                    if (v23 <= 0x3F)
                    {
                      v43 = *(_QWORD *)(v22 - 8) + 64;
                      v44 = v6;
                      v45 = v6;
                      v46 = (char *)&value witness table for Builtin.NativeObject + 64;
                      sub_10001DFF8(319, &qword_10028D380, &qword_10028D388);
                      if (v25 <= 0x3F)
                      {
                        v47 = *(_QWORD *)(v24 - 8) + 64;
                        v48 = v6;
                        v49 = (char *)&value witness table for Builtin.NativeObject + 64;
                        v50 = (char *)&value witness table for Builtin.NativeObject + 64;
                        v51 = (char *)&value witness table for Builtin.UnknownObject + 64;
                        v52 = (char *)&value witness table for Builtin.NativeObject + 64;
                        v55 = (char *)&value witness table for Builtin.NativeObject + 64;
                        v56 = (char *)&value witness table for Builtin.NativeObject + 64;
                        v53 = (char *)&value witness table for Builtin.UnknownObject + 64;
                        v54 = (char *)&value witness table for Builtin.UnknownObject + 64;
                        v57 = "\b";
                        v58 = "\b";
                        v59 = "\b";
                        v60 = "\b";
                        v61 = (char *)&value witness table for Builtin.UnknownObject + 64;
                        sub_10001D248(319, (unint64_t *)&unk_10028D390, (uint64_t)&type metadata for TipsHelper.GenderDisambiguationTip);
                        if (v27 <= 0x3F)
                        {
                          v62 = *(_QWORD *)(v26 - 8) + 64;
                          v63 = v6;
                          v64 = (char *)&value witness table for Builtin.UnknownObject + 64;
                          v65 = (char *)&value witness table for Builtin.BridgeObject + 64;
                          v66 = (char *)&value witness table for Builtin.NativeObject + 64;
                          v67 = &unk_1001E8D08;
                          swift_updateClassMetadata2(a1, 256, 44, v28, a1 + 80);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_100053C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(_QWORD *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  void *v77;
  id v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v5 = v4;
  v102 = a4;
  v104 = a2;
  v100 = a1;
  v6 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v99 = (uint64_t *)((char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v103 = (uint64_t *)((char *)&v89 - v16);
  KeyPath = swift_getKeyPath(&unk_1001E90A8);
  v18 = swift_getKeyPath(&unk_1001E90D0);
  static Published.subscript.getter(&v106, v5, KeyPath);
  swift_release(v18);
  swift_release(KeyPath);
  v19 = v106;
  if (v106 == 3)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000F66C(v20, (uint64_t)qword_1002AA470);
    v22 = swift_retain_n(v5, 4);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter();
    v25 = v24;
    v26 = os_log_type_enabled(v23, v24);
    v97 = v12;
    v98 = v9;
    v95 = v11;
    v96 = v13;
    if (v26)
    {
      v27 = swift_slowAlloc(22, -1);
      v92 = swift_slowAlloc(64, -1);
      v106 = v92;
      *(_DWORD *)v27 = 136446466;
      v28 = swift_getKeyPath(&unk_1001E9180);
      v93 = v21;
      v91 = v25;
      v29 = v28;
      v30 = swift_getKeyPath(&unk_1001E91A8);
      v94 = v6;
      v31 = v103;
      static Published.subscript.getter(v103, v5, v29);
      swift_release(v30);
      v32 = swift_release(v29);
      v33 = Locale.ltIdentifier.getter(v32);
      v35 = v34;
      v36 = *(void (**)(_QWORD *, uint64_t))(v13 + 8);
      v36(v31, v12);
      v105 = sub_1001A7FE4(v33, v35, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v27 + 4);
      swift_bridgeObjectRelease(v35);
      swift_release_n(v5, 2);
      *(_WORD *)(v27 + 12) = 2082;
      v90 = v27 + 14;
      v37 = swift_getKeyPath(&unk_1001E8EB0);
      v38 = swift_getKeyPath(&unk_1001E8ED8);
      static Published.subscript.getter(v31, v5, v37);
      swift_release(v38);
      v39 = swift_release(v37);
      v40 = Locale.ltIdentifier.getter(v39);
      v42 = v41;
      v43 = v31;
      v6 = v94;
      v36(v43, v12);
      v105 = sub_1001A7FE4(v40, v42, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v90);
      swift_bridgeObjectRelease(v42);
      swift_release_n(v5, 2);
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v91, "Requested text translation from '%{public}s'->'%{public}s'", (uint8_t *)v27, 0x16u);
      v44 = v92;
      swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_release_n(v5, 4);
    }

    v55 = v102;
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v104);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(18, -1);
      *(_DWORD *)v59 = 134218240;
      v60 = v104;
      v106 = String.count.getter(v100, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v59 + 4);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v59 + 12) = 1024;
      LODWORD(v106) = v55 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, (char *)&v106 + 4, v59 + 14);
      swift_bridgeObjectRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "... of length %ld has sanitized text: %{BOOL}d", (uint8_t *)v59, 0x12u);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v55);
    }
    v62 = v97;
    v61 = v98;
    v63 = v96;

    v64 = swift_getKeyPath(&unk_1001E9380);
    v65 = swift_getKeyPath(&unk_1001E93A8);
    static Published.subscript.getter(&v106, v5, v64);
    swift_release(v65);
    swift_release(v64);
    if ((v106 & 1) == 0)
    {
      v66 = *(_QWORD *)(v5
                      + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
      v67 = swift_getKeyPath(&unk_1001E9180);
      v68 = v61;
      v69 = swift_getKeyPath(&unk_1001E91A8);
      swift_retain(v66);
      v70 = v103;
      static Published.subscript.getter(v103, v5, v67);
      swift_release(v69);
      swift_release(v67);
      v71 = swift_getKeyPath(&unk_1001E8EB0);
      v72 = swift_getKeyPath(&unk_1001E8ED8);
      static Published.subscript.getter(&v8[v6[5]], v5, v71);
      swift_release(v72);
      swift_release(v71);
      v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56);
      v74 = v63;
      v73(&v8[v6[14]], 1, 1, v101);
      (*(void (**)(char *, _QWORD *, uint64_t))(v63 + 32))(v8, v70, v62);
      *(_QWORD *)&v8[v6[6]] = 1;
      *(_QWORD *)&v8[v6[7]] = 1;
      *(_QWORD *)&v8[v6[8]] = 0;
      v8[v6[9]] = 0;
      v75 = &v8[v6[10]];
      *(_QWORD *)v75 = 0;
      v75[8] = 1;
      v8[v6[11]] = 0;
      *(_QWORD *)&v8[v6[12]] = 0;
      v76 = &v8[v6[13]];
      *(_QWORD *)v76 = 0;
      v76[8] = 1;
      sub_10015AEE0((uint64_t)v8);
      v77 = *(void **)(v66 + 16);
      if (v77)
      {
        v78 = objc_msgSend(v77, "invocationId");
        v79 = (uint64_t)v95;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_release(v66);
        sub_100032DAC((uint64_t)v8, type metadata accessor for SELFLoggingInvocationWrapper.Parameters);
        v80 = sub_10004B3E4();
        v81 = swift_getKeyPath(&unk_1001E9180);
        v82 = swift_getKeyPath(&unk_1001E91A8);
        static Published.subscript.getter(v70, v5, v81);
        swift_release(v82);
        swift_release(v81);
        v83 = swift_getKeyPath(&unk_1001E8EB0);
        v84 = swift_getKeyPath(&unk_1001E8ED8);
        v85 = v99;
        static Published.subscript.getter(v99, v5, v83);
        swift_release(v84);
        swift_release(v83);
        v86 = swift_getKeyPath(&unk_1001E9380);
        v87 = swift_getKeyPath(&unk_1001E93A8);
        static Published.subscript.getter(&v106, v5, v86);
        swift_release(v87);
        swift_release(v86);
        sub_10018B338(v100, v104, (uint64_t)v70, (uint64_t)v85, v106, v79);
        swift_release(v80);
        v88 = *(void (**)(_QWORD *, uint64_t))(v74 + 8);
        v88(v85, v62);
        v88(v70, v62);
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v79, v101);
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_10000F66C(v45, (uint64_t)qword_1002AA470);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v106 = v50;
      *(_DWORD *)v49 = 136315138;
      v51 = 0xE90000000000006BLL;
      v52 = 0x726F7774654E6F6ELL;
      if (v19 != 1)
      {
        v52 = 0xD000000000000014;
        v51 = 0x80000001001F7D40;
      }
      if (v19)
        v53 = v52;
      else
        v53 = 0xD000000000000013;
      if (v19)
        v54 = v51;
      else
        v54 = 0x80000001001F7D20;
      v105 = sub_1001A7FE4(v53, v54, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v49 + 4);
      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Skipping final translation because an error state is active: %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }

  }
}

uint64_t sub_100054584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(_QWORD *, uint64_t, __n128);
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v23 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v22 - v8);
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v12 = swift_getKeyPath(&unk_1001E8F68);
  swift_retain(v10);
  static Published.subscript.getter(v24, v2, KeyPath);
  swift_release(v12);
  swift_release(KeyPath);
  v14 = v24[0];
  v13 = v24[1];
  v15 = swift_getKeyPath(&unk_1001E9180);
  v16 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v9, v2, v15);
  swift_release(v16);
  swift_release(v15);
  v17 = swift_getKeyPath(&unk_1001E8EB0);
  v18 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v7, v2, v17);
  swift_release(v18);
  swift_release(v17);
  sub_10015B1F4(v14, v13, (uint64_t)v9, (uint64_t)v7, a1);
  swift_release(v10);
  v19 = swift_bridgeObjectRelease(v13);
  v20 = *(void (**)(_QWORD *, uint64_t, __n128))(v23 + 8);
  v20(v7, v4, v19);
  return ((uint64_t (*)(_QWORD *, uint64_t))v20)(v9, v4);
}

uint64_t sub_100054754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void (*v18)(_QWORD *, uint64_t, __n128);
  _QWORD v20[2];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (_QWORD *)((char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (_QWORD *)((char *)v20 - v6);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v10 = swift_getKeyPath(&unk_1001E8F68);
  swift_retain(v8);
  static Published.subscript.getter(v20, v0, KeyPath);
  swift_release(v10);
  swift_release(KeyPath);
  v12 = v20[0];
  v11 = v20[1];
  v13 = swift_getKeyPath(&unk_1001E9180);
  v14 = swift_getKeyPath(&unk_1001E91A8);
  static Published.subscript.getter(v7, v0, v13);
  swift_release(v14);
  swift_release(v13);
  v15 = swift_getKeyPath(&unk_1001E8EB0);
  v16 = swift_getKeyPath(&unk_1001E8ED8);
  static Published.subscript.getter(v5, v0, v15);
  swift_release(v16);
  swift_release(v15);
  sub_10015B308(v12, v11, (uint64_t)v7, (uint64_t)v5);
  swift_release(v8);
  v17 = swift_bridgeObjectRelease(v11);
  v18 = *(void (**)(_QWORD *, uint64_t, __n128))(v2 + 8);
  v18(v5, v1, v17);
  return ((uint64_t (*)(_QWORD *, uint64_t))v18)(v7, v1);
}

uint64_t sub_100054910()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  _QWORD *v25;
  int v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v1 = (int *)type metadata accessor for GenderTipManager.Registration(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v33 = (uint64_t *)((char *)&v32 - v6);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v32 - v8);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v32 - v10);
  v32 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_genderTipManager);
  v12 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel;
  v13 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel);
  v34 = v0;
  if (v13)
  {
    v14 = v13;
    v15 = (void *)DisambiguationResultModel.disambiguableResult.getter();

  }
  else
  {
    v15 = 0;
  }
  *v9 = 0x65736F706D6F43;
  v9[1] = 0xE700000000000000;
  v16 = (char *)v9 + v1[5];
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  if (v15)
    v19 = objc_msgSend(v15, "hasDisambiguationsOfType:", 1);
  else
    v19 = 0;
  *((_BYTE *)v9 + v1[6]) = v19;
  *((_BYTE *)v9 + v1[7]) = 1;
  sub_10005DDA8((uint64_t)v9, (uint64_t)v11, type metadata accessor for GenderTipManager.Registration);
  sub_1000CCD24(v11);
  sub_100032DAC((uint64_t)v11, type metadata accessor for GenderTipManager.Registration);

  v20 = v34;
  v21 = *(void **)(v34 + v12);
  if (v21)
  {
    v22 = v21;
    v23 = (void *)DisambiguationResultModel.disambiguableResult.getter();

  }
  else
  {
    v23 = 0;
  }
  *(_QWORD *)v4 = 0x65736F706D6F43;
  *((_QWORD *)v4 + 1) = 0xE700000000000000;
  v18(&v4[v1[5]], 1, 1, v17);
  if (v23)
    v24 = objc_msgSend(v23, "hasDisambiguationsOfType:", 1);
  else
    v24 = 0;
  v4[v1[6]] = v24;
  v4[v1[7]] = 1;
  v25 = v33;
  sub_10005DDA8((uint64_t)v4, (uint64_t)v33, type metadata accessor for GenderTipManager.Registration);
  v26 = sub_1000CCA88(v25) & 1;
  sub_100032DAC((uint64_t)v25, type metadata accessor for GenderTipManager.Registration);

  KeyPath = swift_getKeyPath(&unk_1001E9338);
  v28 = swift_getKeyPath(&unk_1001E9360);
  static Published.subscript.getter(&v36, v20, KeyPath);
  swift_release(v28);
  result = swift_release(KeyPath);
  if (v26 != v36)
  {
    v30 = swift_getKeyPath(&unk_1001E9338);
    v31 = swift_getKeyPath(&unk_1001E9360);
    v35 = v26;
    swift_retain(v20);
    return static Published.subscript.setter(&v35, v20, v30, v31);
  }
  return result;
}

uint64_t sub_100054C2C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (**v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;

  v2 = v1;
  v3 = a1;
  v4 = sub_1000093D0(v3);
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v5 = type metadata accessor for Logger(0);
  sub_10000F66C(v5, (uint64_t)qword_1002AA470);
  v6 = v3;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = (_QWORD *)swift_slowAlloc(8, -1);
    v61 = swift_slowAlloc(32, -1);
    v64 = v61;
    *(_DWORD *)v9 = 136446466;
    LOBYTE(v63) = BYTE2(v4);
    v11 = String.init<A>(describing:)(&v63, &type metadata for AlertReasonKey);
    v13 = v12;
    v63 = sub_1001A7FE4(v11, v12, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v9 + 4);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 12) = 2112;
    v63 = (uint64_t)v6;
    v14 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v9 + 14);
    *v10 = v6;

    v2 = v1;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received error with reason '%{public}s': %@", (uint8_t *)v9, 0x16u);
    v15 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v10, 1, v15);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {

  }
  switch(BYTE2(v4))
  {
    case 1u:
      goto LABEL_9;
    case 6u:
      KeyPath = swift_getKeyPath(&unk_1001E92A8);
      v41 = swift_getKeyPath(&unk_1001E92D0);
      BYTE2(v64) = 6;
      LOWORD(v64) = v4;
      swift_retain(v2);
      static Published.subscript.setter(&v64, v2, KeyPath, v41);
      v42 = swift_getKeyPath(&unk_1001E92F0);
      v43 = swift_getKeyPath(&unk_1001E9318);
      LOBYTE(v64) = 1;
LABEL_16:
      swift_retain(v2);
      v37 = v2;
      v38 = v42;
      v39 = v43;
      return static Published.subscript.setter(&v64, v37, v38, v39);
    case 5u:
LABEL_9:
      v16 = swift_getKeyPath(&unk_1001E92A8);
      v17 = swift_getKeyPath(&unk_1001E92D0);
      BYTE2(v64) = BYTE2(v4);
      LOWORD(v64) = v4;
      swift_retain(v2);
      static Published.subscript.setter(&v64, v2, v16, v17);
      v18 = sub_100006DF4(&qword_10028DFC8);
      v19 = (int *)type metadata accessor for TranslateTip(0);
      v20 = *((_QWORD *)v19 - 1);
      v21 = *(_QWORD *)(v20 + 72);
      v22 = *(unsigned __int8 *)(v20 + 80);
      v23 = (v22 + 32) & ~v22;
      v24 = swift_allocObject(v18, v23 + v21, v22 | 7);
      *(_OWORD *)(v24 + 16) = xmmword_1001E64F0;
      v25 = v24 + v23;
      v26 = (void *)objc_opt_self(NSBundle);
      swift_retain(v2);
      v27 = objc_msgSend(v26, "mainBundle");
      v66._object = (void *)0xE000000000000000;
      v28._object = (void *)0x80000001001FA050;
      v28._countAndFlagsBits = 0xD000000000000016;
      v29._countAndFlagsBits = 0;
      v29._object = (void *)0xE000000000000000;
      v66._countAndFlagsBits = 0;
      v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v66);

      v31 = swift_allocObject(&unk_100265C18, 32, 7);
      *(_QWORD *)(v31 + 16) = sub_10005DD84;
      *(_QWORD *)(v31 + 24) = v2;
      v32 = swift_retain(v2);
      UUID.init()(v32);
      *(Swift::String *)(v25 + v19[5]) = v30;
      v33 = (_QWORD *)(v25 + v19[6]);
      *v33 = 0;
      v33[1] = 0;
      v34 = (uint64_t (**)())(v25 + v19[7]);
      *v34 = sub_10005DDA0;
      v34[1] = (uint64_t (*)())v31;
      swift_release(v2);
      v35 = swift_getKeyPath(&unk_1001E8FD0);
      v36 = swift_getKeyPath(&unk_1001E8FF8);
      v64 = v24;
      swift_retain(v2);
      v37 = v2;
      v38 = v35;
      v39 = v36;
      return static Published.subscript.setter(&v64, v37, v38, v39);
  }
  v44 = v6;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = HIWORD(v4);
    v48 = swift_slowAlloc(22, -1);
    v62 = v2;
    v49 = (_QWORD *)swift_slowAlloc(8, -1);
    v50 = swift_slowAlloc(32, -1);
    v64 = v50;
    *(_DWORD *)v48 = 136446466;
    LOBYTE(v63) = v47;
    v51 = String.init<A>(describing:)(&v63, &type metadata for AlertReasonKey);
    v53 = v52;
    v63 = sub_1001A7FE4(v51, v52, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v48 + 4);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v48 + 12) = 2112;
    v63 = (uint64_t)v44;
    v54 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v48 + 14);
    *v49 = v44;

    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Ignoring displaying an error because it's not allow-listed to display to the user: reason '%{public}s': %@", (uint8_t *)v48, 0x16u);
    v55 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v49, 1, v55);
    v56 = v49;
    v2 = v62;
    swift_slowDealloc(v56, -1, -1);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {

  }
  v57 = swift_getKeyPath(&unk_1001E8F40);
  v58 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v64, v2, v57);
  swift_release(v58);
  swift_release(v57);
  v59 = v65;
  result = swift_bridgeObjectRelease(v65);
  if (v59)
  {
    v42 = swift_getKeyPath(&unk_1001E8F40);
    v43 = swift_getKeyPath(&unk_1001E8F68);
    v64 = 0;
    v65 = 0;
    goto LABEL_16;
  }
  return result;
}

void sub_1000552F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject **v30;
  NSObject *v31;
  uint64_t v32;
  NSObject **v33;
  NSObject *v34;
  uint64_t v35;

  v1 = v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(_LTTranslationErrorDomain);
  v3 = v2;
  v4 = objc_allocWithZone((Class)NSError);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 14, 0, swift_bridgeObjectRelease(v3).n128_f64[0]);

  KeyPath = swift_getKeyPath(&unk_1001E9018);
  v8 = swift_getKeyPath(&unk_1001E9040);
  static Published.subscript.getter(&v34, v1, KeyPath);
  swift_release(v8);
  swift_release(KeyPath);
  if ((v34 & 1) != 0)
    goto LABEL_3;
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager);
  v10 = swift_getKeyPath(&unk_1001E9260);
  v11 = swift_getKeyPath(&unk_1001E9288);
  static Published.subscript.getter(&v34, v9, v10);
  swift_release(v11);
  swift_release(v10);
  v12 = v35;
  swift_bridgeObjectRelease(v35);
  if (v12)
    goto LABEL_3;
  v21 = sub_10004B3E4();
  v22 = v21[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState];
  swift_release(v21);
  if (v22)
  {
    if (v22 == 1)
    {
      swift_bridgeObjectRelease(0xEB00000000676E69);
LABEL_3:
      if (qword_10028A478 != -1)
        swift_once(&qword_10028A478, sub_100121100);
      v13 = type metadata accessor for Logger(0);
      sub_10000F66C(v13, (uint64_t)qword_1002AA470);
      v14 = v6;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = (NSObject **)swift_slowAlloc(8, -1);
        v34 = v14;
        *(_DWORD *)v17 = 138412290;
        v18 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4);
        *v33 = v14;

        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Translate view was active during XPC interruption: %@", v17, 0xCu);
        v19 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v33, 1, v19);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {

      }
      sub_100050128(0);
      v20 = v14;
      sub_10004D044(v14, 0);
      goto LABEL_9;
    }
    v23 = 0xE500000000000000;
    v24 = 0x726F727265;
  }
  else
  {
    v23 = 0xE400000000000000;
    v24 = 1701602409;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, 0x74616C736E617274, 0xEB00000000676E69, 0);
  swift_bridgeObjectRelease(v23);
  if ((v25 & 1) != 0)
    goto LABEL_3;
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v26 = type metadata accessor for Logger(0);
  sub_10000F66C(v26, (uint64_t)qword_1002AA470);
  v27 = v6;
  v20 = Logger.logObject.getter(v27);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v29 = 138412290;
    v34 = v27;
    v31 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v29 + 4);
    *v30 = v27;

    _os_log_impl((void *)&_mh_execute_header, v20, v28, "Translate view was idle during XPC interruption, ignoring XPC error: %@", v29, 0xCu);
    v32 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v30, 1, v32);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {

    v20 = v27;
  }
LABEL_9:

}

void sub_1000557A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028D310)
  {
    v2 = type metadata accessor for Locale(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028D310);
  }
}

uint64_t sub_1000557FC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ComposeTranslationViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

void sub_100055838()
{
  qword_1002AA0C0 = 0x4071800000000000;
}

double sub_10005584C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E9238);
  v4 = v0;
  v2 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 16);
}

uint64_t sub_1000558D0(uint64_t result, double a2)
{
  *(double *)(result + 16) = a2;
  return result;
}

uint64_t sub_1000558D8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E91C8);
  v4 = v0;
  v2 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_10005595C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E91C8);
  v7 = v3;
  v5 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  result = swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

uint64_t sub_1000559E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E91C8);
  v5 = v2;
  sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10005E678);
  return swift_release(KeyPath);
}

uint64_t sub_100055A90(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t sub_100055A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator11CardMetrics___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100055AE8()
{
  return type metadata accessor for CardMetrics(0);
}

uint64_t type metadata accessor for CardMetrics(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_10028DCC0, (uint64_t)&nominal type descriptor for CardMetrics);
}

uint64_t sub_100055B04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1001E8D08;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ComposeTranslationViewModel.TranslationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100055BD4 + 4 * byte_1001E8CA1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100055C08 + 4 * byte_1001E8C9C[v4]))();
}

uint64_t sub_100055C08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055C10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100055C18);
  return result;
}

uint64_t sub_100055C24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100055C2CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100055C30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055C38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComposeTranslationViewModel.TranslationState()
{
  return &type metadata for ComposeTranslationViewModel.TranslationState;
}

uint64_t storeEnumTagSinglePayload for ComposeTranslationViewModel.InputStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100055CA0 + 4 * byte_1001E8CAB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100055CD4 + 4 * byte_1001E8CA6[v4]))();
}

uint64_t sub_100055CD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055CDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100055CE4);
  return result;
}

uint64_t sub_100055CF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100055CF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100055CFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055D04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComposeTranslationViewModel.InputStyle()
{
  return &type metadata for ComposeTranslationViewModel.InputStyle;
}

unint64_t sub_100055D24()
{
  unint64_t result;

  result = qword_10028DDC8;
  if (!qword_10028DDC8)
  {
    result = swift_getWitnessTable(&unk_1001E8D9C, &type metadata for ComposeTranslationViewModel.InputStyle);
    atomic_store(result, (unint64_t *)&qword_10028DDC8);
  }
  return result;
}

unint64_t sub_100055D6C()
{
  unint64_t result;

  result = qword_10028DDD0;
  if (!qword_10028DDD0)
  {
    result = swift_getWitnessTable(&unk_1001E8E04, &type metadata for ComposeTranslationViewModel.TranslationState);
    atomic_store(result, &qword_10028DDD0);
  }
  return result;
}

uint64_t sub_100055DB0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA470);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 67109120;
    v20 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Speech: listening status changed to %{BOOL}d", v11, 8u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v13 + 16, v2);
  type metadata accessor for MainActor(0);
  v14 = swift_retain(v13);
  v15 = static MainActor.shared.getter(v14);
  v16 = swift_allocObject(&unk_100265B00, 41, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v16 + 32) = v13;
  *(_BYTE *)(v16 + 40) = a1 & 1;
  swift_release(v13);
  v17 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_10028DE28, v16);
  return swift_release(v17);
}

uint64_t sub_100055FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 256) = a5;
  *(_QWORD *)(v5 + 240) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 248) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100056024, v7, v8);
}

uint64_t sub_100056024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t KeyPath;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 248));
  v1 += 16;
  swift_beginAccess(v1, v0 + 216, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = (_BYTE *)(v0 + 16);
    v5 = *(unsigned __int8 *)(v0 + 256);
    KeyPath = swift_getKeyPath(&unk_1001E9018);
    v7 = swift_getKeyPath(&unk_1001E9040);
    static Published.subscript.getter((_QWORD *)(v0 + 16), v3, KeyPath);
    swift_release(v7);
    swift_release(KeyPath);
    if (v5 == *(unsigned __int8 *)(v0 + 16)
      || (*(_BYTE *)(v0 + 256) ? (v8 = 1) : (v8 = 3),
          v9 = swift_getKeyPath(&unk_1001E9060),
          v10 = swift_getKeyPath(&unk_1001E9088),
          static Published.subscript.getter((_QWORD *)(v0 + 16), v3, v9),
          swift_release(v10),
          swift_release(v9),
          v8 == *v4))
    {
LABEL_7:
      swift_release(v3);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v12 = *(_BYTE *)(v0 + 256);
    v13 = swift_getKeyPath(&unk_1001E9060);
    v14 = swift_getKeyPath(&unk_1001E9088);
    *v4 = v8;
    swift_retain(v3);
    static Published.subscript.setter(v0 + 16, v3, v13, v14);
    if ((v12 & 1) != 0)
    {
      if (qword_10028A478 != -1)
        swift_once(&qword_10028A478, sub_100121100);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10000F66C(v15, (uint64_t)qword_1002AA470);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Speech: empty ELSE case", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }
      swift_release(v3);

    }
    else
    {
      v20 = swift_getKeyPath(&unk_1001E8EF8);
      v21 = swift_getKeyPath(&unk_1001E8F20);
      static Published.subscript.getter((_QWORD *)(v0 + 96), v3, v20);
      swift_release(v21);
      swift_release(v20);
      if (!*(_QWORD *)(v0 + 120))
      {
        sub_10000A020(v0 + 96, &qword_10028D388);
        if (qword_10028A478 != -1)
          swift_once(&qword_10028A478, sub_100121100);
        v27 = type metadata accessor for Logger(0);
        v28 = sub_10000F66C(v27, (uint64_t)qword_1002AA470);
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.info.getter(v29);
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "isListening false without a partial result.  This is likely just be an audio interruption (see rdar://129403664)", v31, 2u);
          swift_slowDealloc(v31, -1, -1);
        }

        sub_100050128(1);
        goto LABEL_7;
      }
      sub_10003E994((__int128 *)(v0 + 96), v0 + 16);
      sub_10005A9A0(v0 + 136, v0 + 56);
      sub_100023AB0(v0 + 16, v0 + 96);
      sub_10000B074(v0 + 56, v0 + 136, (uint64_t *)&unk_10028F1C0);
      if (*(_QWORD *)(v0 + 160))
      {
        sub_10003E994((__int128 *)(v0 + 136), v0 + 176);
        sub_100009C08((_QWORD *)(v0 + 96));
        if (qword_10028A478 != -1)
          swift_once(&qword_10028A478, sub_100121100);
        v22 = type metadata accessor for Logger(0);
        v23 = sub_10000F66C(v22, (uint64_t)qword_1002AA470);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Speech: finalizing partial translation", v26, 2u);
          swift_slowDealloc(v26, -1, -1);
        }

        sub_100056594((_QWORD *)(v0 + 16), (_QWORD *)(v0 + 176));
        swift_release(v3);
        sub_100009C08((_QWORD *)(v0 + 176));
      }
      else
      {
        sub_10000A020(v0 + 136, (uint64_t *)&unk_10028F1C0);
        sub_100009C08((_QWORD *)(v0 + 96));
        if (qword_10028A478 != -1)
          swift_once(&qword_10028A478, sub_100121100);
        v32 = type metadata accessor for Logger(0);
        v33 = sub_10000F66C(v32, (uint64_t)qword_1002AA470);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.info.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Speech: Performing final text translation", v36, 2u);
          swift_slowDealloc(v36, -1, -1);
        }

        sub_10004F1F8(0);
        sub_100050128(0);
        swift_release(v3);
      }
      sub_10000A020(v0 + 16, &qword_10028DE30);
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100056594(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v6 = type metadata accessor for CoreAnalyticsLogger.CardType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100023AF4(a1, v13);
  if ((dispatch thunk of SpeechResult.isEmpty()(v13, v14) & 1) != 0)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10000F66C(v15, (uint64_t)qword_1002AA470);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not storing speech translation result, as speech result is empty.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  else
  {
    v37 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
    v38 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation;
    v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
    v21 = *(void **)(v20 + 16);
    v39 = v6;
    if (v21)
    {
      swift_retain(v20);
      v22 = objc_msgSend(v21, "invocationId");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v23 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 0, 1, v23);
      swift_release(v20);
    }
    else
    {
      v24 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v12, 1, 1, v24);
    }
    v25 = a1[3];
    v26 = a1[4];
    v27 = sub_100023AF4(a1, v25);
    v29 = a2[3];
    v28 = a2[4];
    v30 = sub_100023AF4(a2, v29);

    sub_10000A020((uint64_t)v12, (uint64_t *)&unk_10028F1B0);
    v31 = *(_QWORD *)(v3 + v38);
    swift_retain(v31);
    sub_10015B614();
    swift_release(v31);
    v32 = v39;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for CoreAnalyticsLogger.CardType.committed(_:), v39);
    v33 = a2[3];
    v34 = a2[4];
    sub_100023AF4(a2, v33);
    v35 = (void *)dispatch thunk of TranslationResult.disambiguableResult.getter(v33, v34);
    sub_1000522BC((uint64_t)v9, v35);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v32);
  }
  sub_100050128(0);
  sub_10004D044(0, 0);
}

uint64_t sub_1000568D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[16];
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v3 = v2;
  v6 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v9);
  v45 = AnnotatedResult.displayString.getter(v9, *(_QWORD *)(v10 + 16));
  v12 = v11;
  sub_10000B074(a2, (uint64_t)&v46, (uint64_t *)&unk_10028F1C0);
  v13 = v48;
  if (v48)
  {
    v14 = v49;
    sub_100023AF4(&v46, v48);
    v15 = dispatch thunk of TranslationResult.alternatives.getter(v13, v14);
    v16 = v15;
    if (*(_QWORD *)(v15 + 16))
    {
      sub_100023AB0(v15 + 32, (uint64_t)&v50);
    }
    else
    {
      v52 = 0;
      v50 = 0u;
      v51 = 0u;
    }
    swift_bridgeObjectRelease(v16);
    v19 = *((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v20 = v52;
      sub_100023AF4(&v50, *((uint64_t *)&v51 + 1));
      v21 = TranslationAlternative.displayString.getter(v19, v20);
      v23 = v22;
      sub_100009C08(&v50);
      sub_100009C08(&v46);
      goto LABEL_10;
    }
    sub_100009C08(&v46);
    v17 = &qword_100296440;
    v18 = &v50;
  }
  else
  {
    v17 = (uint64_t *)&unk_10028F1C0;
    v18 = (__int128 *)&v46;
  }
  sub_10000A020((uint64_t)v18, v17);
  v21 = 0;
  v23 = 0xE000000000000000;
LABEL_10:
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v24 = type metadata accessor for Logger(0);
  sub_10000F66C(v24, (uint64_t)qword_1002AA470);
  swift_bridgeObjectRetain_n(v12, 2);
  v25 = swift_bridgeObjectRetain_n(v23, 2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v44 = v21;
    v29 = v28;
    v30 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v50 = v30;
    *(_DWORD *)v29 = 136643075;
    v43 = a2;
    swift_bridgeObjectRetain(v12);
    v46 = sub_1001A7FE4(v45, v12, (uint64_t *)&v50);
    v42 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v29 + 4);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v29 + 12) = 2085;
    swift_bridgeObjectRetain(v23);
    v46 = sub_1001A7FE4(v44, v23, (uint64_t *)&v50);
    v8 = v42;
    a2 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v29 + 14);
    swift_bridgeObjectRelease_n(v23, 3);
    v31 = v27;
    v32 = v23;
    _os_log_impl((void *)&_mh_execute_header, v26, v31, "Speech: partial %{sensitive}s -> %{sensitive}s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v33 = v29;
    v21 = v44;
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v23, 2);
    swift_bridgeObjectRelease_n(v12, 2);
    v32 = v23;
  }
  v34 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v8, 1, 1, v34);
  v35 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v35 + 16, v3);
  sub_100023AB0((uint64_t)a1, (uint64_t)&v50);
  sub_10000B074(a2, (uint64_t)&v46, (uint64_t *)&unk_10028F1C0);
  type metadata accessor for MainActor(0);
  v36 = swift_retain(v35);
  v37 = static MainActor.shared.getter(v36);
  v38 = (_QWORD *)swift_allocObject(&unk_100265AD8, 152, 7);
  v38[2] = v37;
  v38[3] = &protocol witness table for MainActor;
  v38[4] = v35;
  sub_10003E994(&v50, (uint64_t)(v38 + 5));
  sub_10005A9A0((uint64_t)&v46, (uint64_t)(v38 + 10));
  v38[15] = v45;
  v38[16] = v12;
  v38[17] = v21;
  v38[18] = v32;
  swift_release(v35);
  v39 = sub_100049DC0((uint64_t)v8, (uint64_t)&unk_10028DE10, (uint64_t)v38);
  return swift_release(v39);
}

uint64_t sub_100056D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v8[54] = v18;
  v8[55] = v19;
  v8[52] = a7;
  v8[53] = a8;
  v8[50] = a5;
  v8[51] = a6;
  v8[49] = a4;
  v9 = type metadata accessor for TranslateTip(0);
  v8[56] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[57] = v10;
  v8[58] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v8[59] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[60] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[61] = swift_task_alloc(v13);
  v8[62] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v8[63] = static MainActor.shared.getter(v14);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  return swift_task_switch(sub_100056E08, v15, v16);
}

uint64_t sub_100056E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, __n128);
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String_optional v35;
  __n128 v36;
  uint64_t v37;
  int *v38;
  id v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t inited;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  id v82;
  NSString v83;
  Class isa;
  id v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  id v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v97)(uint64_t, _QWORD);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;

  v1 = *(_QWORD *)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 504));
  v1 += 16;
  swift_beginAccess(v1, v0 + 320, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    goto LABEL_23;
  v3 = Strong;
  v98 = v0 + 96;
  v99 = v0 + 16;
  v5 = *(_QWORD *)(v0 + 488);
  v4 = *(_QWORD **)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD **)(v0 + 400);
  KeyPath = swift_getKeyPath(&unk_1001E8EB0);
  v10 = swift_getKeyPath(&unk_1001E8ED8);
  v100 = v3;
  static Published.subscript.getter(v4, v3, KeyPath);
  swift_release(v10);
  v11 = swift_release(KeyPath);
  v12 = Locale.identifier.getter(v11);
  v14 = v13;
  v15 = *(void (**)(uint64_t, uint64_t, __n128))(v6 + 8);
  ((void (*)(_QWORD *, uint64_t))v15)(v4, v7);
  v17 = v8[3];
  v16 = v8[4];
  sub_100023AF4(v8, v17);
  dispatch thunk of AnnotatedResult.locale.getter(v17, *(_QWORD *)(v16 + 16));
  LOBYTE(v16) = sub_1000A5184(v5, v12, v14);
  v18 = swift_bridgeObjectRelease(v14);
  v15(v5, v7, v18);
  sub_100023AB0((uint64_t)v8, v0 + 248);
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v0 + 272);
    v19 = *(_QWORD *)(v0 + 280);
    sub_100023AF4((_QWORD *)(v0 + 248), v20);
    LOBYTE(v19) = dispatch thunk of AnnotatedResult.isLowConfidence.getter(v20, *(_QWORD *)(v19 + 16));
    sub_100009C08((_QWORD *)(v0 + 248));
    v21 = v100;
    if ((v19 & 1) == 0)
    {
      v23 = *(_QWORD **)(v0 + 488);
      v22 = *(_QWORD *)(v0 + 496);
      v24 = *(_QWORD *)(v0 + 472);
      v25 = *(_QWORD **)(v0 + 400);
      v26 = sub_10004DC58(0, 0);
      static Locale.current.getter(v26);
      v28 = v8[3];
      v27 = v8[4];
      sub_100023AF4(v25, v28);
      v29 = v28;
      v21 = v100;
      v30 = dispatch thunk of AnnotatedResult.locale.getter(v29, *(_QWORD *)(v27 + 16));
      v31 = Locale.identifier.getter(v30);
      v33 = v32;
      ((void (*)(_QWORD *, uint64_t))v15)(v23, v24);
      v34._countAndFlagsBits = v31;
      v34._object = v33;
      v35 = Locale.localizedString(forIdentifier:)(v34);
      v36 = swift_bridgeObjectRelease(v33);
      v15(v22, v24, v36);
      if (v35.value._object)
      {
        v37 = *(_QWORD *)(v0 + 464);
        v38 = *(int **)(v0 + 448);
        v39 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v101._countAndFlagsBits = 0xD000000000000027;
        v101._object = (void *)0x80000001001F9FA0;
        v40._object = (void *)0x80000001001F9F80;
        v40._countAndFlagsBits = 0xD00000000000001CLL;
        v41._countAndFlagsBits = 0;
        v41._object = (void *)0xE000000000000000;
        v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, (NSBundle)v39, v41, v101);

        v43 = sub_100006DF4(&qword_10028AA70);
        v44 = swift_allocObject(v43, 72, 7);
        *(_OWORD *)(v44 + 16) = xmmword_1001E64F0;
        *(_QWORD *)(v44 + 56) = &type metadata for String;
        *(_QWORD *)(v44 + 64) = sub_10001244C();
        *(Swift::String_optional *)(v44 + 32) = v35;
        v45 = String.init(format:_:)(v42._countAndFlagsBits, v42._object, v44);
        v47 = v46;
        swift_bridgeObjectRelease(v42._object);
        UUID.init()(v48);
        v49 = (uint64_t *)(v37 + v38[5]);
        *v49 = v45;
        v49[1] = v47;
        v50 = (_QWORD *)(v37 + v38[6]);
        *v50 = 0;
        v50[1] = 0;
        v51 = (_QWORD *)(v37 + v38[7]);
        *v51 = 0;
        v51[1] = 0;
        v52 = swift_getKeyPath(&unk_1001E8FD0);
        v53 = swift_getKeyPath(&unk_1001E8FF8);
        v97 = (void (*)(uint64_t, _QWORD))static Published.subscript.modify(v0 + 288, v100, v52, v53);
        v55 = v54;
        v56 = *v54;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
        *v55 = v56;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v56 = sub_1001A78E8(0, *(_QWORD *)(v56 + 16) + 1, 1, v56);
          *v55 = v56;
        }
        v59 = *(_QWORD *)(v56 + 16);
        v58 = *(_QWORD *)(v56 + 24);
        if (v59 >= v58 >> 1)
        {
          v56 = sub_1001A78E8(v58 > 1, v59 + 1, 1, v56);
          *v55 = v56;
        }
        v61 = *(_QWORD *)(v0 + 456);
        v60 = *(_QWORD *)(v0 + 464);
        *(_QWORD *)(v56 + 16) = v59 + 1;
        sub_10005DDA8(v60, v56+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v59, type metadata accessor for TranslateTip);
        v97(v0 + 288, 0);
        swift_release(v53);
        swift_release(v52);
      }
    }
  }
  else
  {
    sub_100009C08((_QWORD *)(v0 + 248));
    v21 = v100;
  }
  v62 = *(_QWORD *)(v0 + 408);
  sub_100023AB0(*(_QWORD *)(v0 + 400), v99);
  sub_10000B074(v62, v0 + 56, (uint64_t *)&unk_10028F1C0);
  v63 = swift_getKeyPath(&unk_1001E8EF8);
  v64 = swift_getKeyPath(&unk_1001E8F20);
  sub_10000B074(v99, v98, &qword_10028D388);
  swift_retain(v21);
  static Published.subscript.setter(v98, v21, v63, v64);
  sub_10000A020(v99, &qword_10028D388);
  v65 = swift_getKeyPath(&unk_1001E8F40);
  v66 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter((_QWORD *)(v0 + 344), v21, v65);
  swift_release(v66);
  swift_release(v65);
  v67 = *(_QWORD *)(v0 + 352);
  v68 = *(_QWORD *)(v0 + 424);
  if (!v67)
  {
    v71 = *(_QWORD *)(v0 + 424);
    goto LABEL_18;
  }
  v69 = *(_QWORD *)(v0 + 344);
  v70 = *(_QWORD *)(v0 + 416);
  if (v69 != v70 || v67 != v68)
  {
    v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, *(_QWORD *)(v0 + 352), v70, *(_QWORD *)(v0 + 424), 0);
    swift_bridgeObjectRelease(v67);
    if ((v72 & 1) != 0)
      goto LABEL_19;
    v71 = *(_QWORD *)(v0 + 424);
LABEL_18:
    v73 = *(_QWORD *)(v0 + 416);
    v74 = swift_getKeyPath(&unk_1001E8F40);
    v75 = swift_getKeyPath(&unk_1001E8F68);
    *(_QWORD *)(v0 + 360) = v73;
    *(_QWORD *)(v0 + 368) = v68;
    swift_retain(v21);
    swift_bridgeObjectRetain(v71);
    static Published.subscript.setter(v0 + 360, v21, v74, v75);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 352));
LABEL_19:
  v76 = *(_QWORD *)(v0 + 440);
  v77 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v77, v0 + 176);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  v79 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  swift_bridgeObjectRetain(v76);
  v80 = static UIColor.targetTextColor.getter(NSForegroundColorAttributeName);
  *(_QWORD *)(inited + 64) = v79;
  *(_QWORD *)(inited + 40) = v80;
  v81 = sub_1001A4A88(inited);
  v82 = objc_allocWithZone((Class)NSAttributedString);
  v83 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v76);
  type metadata accessor for Key(0);
  sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v85 = objc_msgSend(v82, "initWithString:attributes:", v83, isa, swift_bridgeObjectRelease(v81).n128_f64[0]);

  v86 = swift_getKeyPath(&unk_1001E8F88);
  v87 = swift_getKeyPath(&unk_1001E8FB0);
  static Published.subscript.getter((_QWORD *)(v0 + 376), v21, v86);
  swift_release(v87);
  swift_release(v86);
  v88 = *(void **)(v0 + 376);
  if (v88
    && (sub_10000A05C(0, &qword_10028CD78, NSAttributedString_ptr),
        v89 = v85,
        v90 = v88,
        v91 = static NSObject.== infix(_:_:)(v90, v89),
        v89,
        v90,
        v90,
        (v91 & 1) != 0))
  {

    swift_release(v21);
  }
  else
  {
    v92 = swift_getKeyPath(&unk_1001E8F88);
    v93 = swift_getKeyPath(&unk_1001E8FB0);
    *(_QWORD *)(v0 + 384) = v85;
    static Published.subscript.setter(v0 + 384, v21, v92, v93);
  }
LABEL_23:
  v94 = *(_QWORD *)(v0 + 488);
  v95 = *(_QWORD *)(v0 + 464);
  swift_task_dealloc(*(_QWORD *)(v0 + 496));
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v3 = v2;
  v6 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v9 = type metadata accessor for Logger(0);
  sub_10000F66C(v9, (uint64_t)qword_1002AA470);
  sub_100023AB0(a1, (uint64_t)&v48);
  v10 = sub_100023AB0(a2, (uint64_t)&v45);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v40 = v2;
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v44 = v14;
    *(_DWORD *)v13 = 136643075;
    v15 = v49;
    v16 = v50;
    sub_100023AF4(&v48, v49);
    v17 = AnnotatedResult.displayString.getter(v15, *(_QWORD *)(v16 + 16));
    v19 = v18;
    *(_QWORD *)&v41 = sub_1001A7FE4(v17, v18, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v13 + 4);
    swift_bridgeObjectRelease(v19);
    sub_100009C08(&v48);
    *(_WORD *)(v13 + 12) = 2085;
    v21 = v46;
    v20 = v47;
    sub_100023AF4(&v45, v46);
    v22 = dispatch thunk of TranslationResult.alternatives.getter(v21, v20);
    v23 = v22;
    if (*(_QWORD *)(v22 + 16))
    {
      sub_100023AB0(v22 + 32, (uint64_t)&v41);
    }
    else
    {
      v43 = 0;
      v41 = 0u;
      v42 = 0u;
    }
    swift_bridgeObjectRelease(v23);
    v24 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v25 = v43;
      sub_100023AF4(&v41, *((uint64_t *)&v42 + 1));
      v24 = TranslationAlternative.displayString.getter(v24, v25);
      v27 = v26;
      sub_100009C08(&v41);
    }
    else
    {
      sub_10000A020((uint64_t)&v41, &qword_100296440);
      v27 = 0;
    }
    *(_QWORD *)&v41 = v24;
    *((_QWORD *)&v41 + 1) = v27;
    v28 = sub_100006DF4(&qword_10028D160);
    v29 = String.init<A>(describing:)(&v41, v28);
    v31 = v30;
    *(_QWORD *)&v41 = sub_1001A7FE4(v29, v30, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8, v13 + 14);
    swift_bridgeObjectRelease(v31);
    sub_100009C08(&v45);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Speech: final: %{sensitive}s -> %{sensitive}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v3 = v40;
  }
  else
  {
    sub_100009C08(&v48);
    sub_100009C08(&v45);

  }
  v32 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v8, 1, 1, v32);
  v33 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v33 + 16, v3);
  sub_100023AB0(a1, (uint64_t)&v48);
  sub_100023AB0(a2, (uint64_t)&v45);
  type metadata accessor for MainActor(0);
  v34 = swift_retain(v33);
  v35 = static MainActor.shared.getter(v34);
  v36 = (_QWORD *)swift_allocObject(&unk_100265AB0, 120, 7);
  v36[2] = v35;
  v36[3] = &protocol witness table for MainActor;
  v36[4] = v33;
  sub_10003E994(&v48, (uint64_t)(v36 + 5));
  sub_10003E994(&v45, (uint64_t)(v36 + 10));
  swift_release(v33);
  v37 = sub_100049DC0((uint64_t)v8, (uint64_t)&unk_10028DE00, (uint64_t)v36);
  return swift_release(v37);
}

uint64_t sub_1000579F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[8] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_100057A60, v8, v9);
}

uint64_t sub_100057A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 64));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_100056594(*(_QWORD **)(v0 + 48), *(_QWORD **)(v0 + 56));
    swift_release(v3);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v7 = type metadata accessor for Logger(0);
  sub_10000F66C(v7, (uint64_t)qword_1002AA470);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(a1);
    v13 = _swift_stdlib_bridgeErrorToNSError(a1);
    v23 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 4);
    *v12 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Speech: finished with error %@", v11, 0xCu);
    v14 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v16 + 16, v2);
  type metadata accessor for MainActor(0);
  swift_errorRetain(a1);
  v17 = swift_retain(v16);
  v18 = static MainActor.shared.getter(v17);
  v19 = (_QWORD *)swift_allocObject(&unk_100265A60, 48, 7);
  v19[2] = v18;
  v19[3] = &protocol witness table for MainActor;
  v19[4] = v16;
  v19[5] = a1;
  swift_release(v16);
  v20 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_10028DDE0, (uint64_t)v19);
  return swift_release(v20);
}

uint64_t sub_100057D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[8] = a4;
  v5[9] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[10] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100057DD4, v7, v8);
}

uint64_t sub_100057DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 80));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_100050128(0);
    swift_release(v3);
  }
  v4 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v4, v0 + 40, 0, 0);
  v5 = swift_weakLoadStrong(v4);
  if (v5)
  {
    v6 = v5;
    v7 = (void *)_convertErrorToNSError(_:)(*(_QWORD *)(v0 + 72));
    sub_10004D044(v7, 1);

    swift_release(v6);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057EB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE v54[4];
  int v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62[5];

  v5 = v4;
  v10 = type metadata accessor for StreamingRequestInfo(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v13);
  v15 = &v54[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for TranslateTip(0);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
  v18 = __chkstk_darwin(v16);
  __chkstk_darwin(v18);
  if (a4)
  {
    v58 = v21;
    v59 = v20;
    v60 = &v54[-v19];
    swift_errorRetain(a4);
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v22 = type metadata accessor for Logger(0);
    sub_10000F66C(v22, (uint64_t)qword_1002AA470);
    swift_errorRetain(a4);
    v23 = swift_errorRetain(a4);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      v28 = swift_slowAlloc(32, -1);
      v56 = v5;
      v29 = v28;
      v62[0] = v28;
      *(_DWORD *)v26 = 136315394;
      if ((a3 & 1) != 0)
        v30 = 0x6C616E6966;
      else
        v30 = 0x6C616974726170;
      v55 = a3;
      if ((a3 & 1) != 0)
        v31 = 0xE500000000000000;
      else
        v31 = 0xE700000000000000;
      v57 = v15;
      v61 = sub_1001A7FE4(v30, v31, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v26 + 4);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v26 + 12) = 2112;
      swift_errorRetain(a4);
      v32 = _swift_stdlib_bridgeErrorToNSError(a4);
      v61 = v32;
      v33 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v26 + 14);
      *v27 = v32;
      v15 = v57;
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Exception while creating a %s translation: %@", (uint8_t *)v26, 0x16u);
      v34 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v27, 1, v34);
      swift_slowDealloc(v27, -1, -1);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      v35 = v29;
      v5 = v56;
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      if ((v33 & 1) == 0)
        return swift_errorRelease(a4);
    }
    else
    {
      swift_errorRelease(a4);
      swift_errorRelease(a4);

      if ((a3 & 1) == 0)
        return swift_errorRelease(a4);
    }
    swift_retain(v5);
    v44 = v60;
    sub_1001A0DD8(1, (uint64_t)sub_10005D8A8, v5, (uint64_t)v60);
    swift_release(v5);
    v45 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v15, 1, 1, v45);
    v46 = swift_allocObject(&unk_100265A38, 24, 7);
    swift_weakInit(v46 + 16, v5);
    v47 = v59;
    sub_100032D68((uint64_t)v44, v59, type metadata accessor for TranslateTip);
    type metadata accessor for MainActor(0);
    v48 = swift_retain(v46);
    v49 = static MainActor.shared.getter(v48);
    v50 = *(unsigned __int8 *)(v58 + 80);
    v51 = (v50 + 40) & ~v50;
    v52 = (_QWORD *)swift_allocObject(&unk_100265B50, v51 + v17, v50 | 7);
    v52[2] = v49;
    v52[3] = &protocol witness table for MainActor;
    v52[4] = v46;
    sub_10005DDA8(v47, (uint64_t)v52 + v51, type metadata accessor for TranslateTip);
    swift_release(v46);
    v53 = sub_100049DC0((uint64_t)v15, (uint64_t)&unk_10028DE50, (uint64_t)v52);
    swift_release(v53);
    swift_errorRelease(a4);
    return sub_100032DAC((uint64_t)v44, type metadata accessor for TranslateTip);
  }
  else
  {
    v37 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v15, 1, 1, v37);
    sub_10000B074(a2, (uint64_t)v62, (uint64_t *)&unk_10028F1C0);
    sub_100032D68(a1, (uint64_t)&v54[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for StreamingRequestInfo);
    type metadata accessor for MainActor(0);
    v38 = swift_retain(v5);
    v39 = static MainActor.shared.getter(v38);
    v40 = *(unsigned __int8 *)(v11 + 80);
    v41 = (v40 + 88) & ~v40;
    v42 = swift_allocObject(&unk_100265B28, v41 + v12, v40 | 7);
    *(_QWORD *)(v42 + 16) = v39;
    *(_QWORD *)(v42 + 24) = &protocol witness table for MainActor;
    *(_BYTE *)(v42 + 32) = a3 & 1;
    sub_10005A9A0((uint64_t)v62, v42 + 40);
    *(_QWORD *)(v42 + 80) = v5;
    sub_10005DDA8((uint64_t)&v54[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v42 + v41, type metadata accessor for StreamingRequestInfo);
    v43 = sub_100049DC0((uint64_t)v15, (uint64_t)&unk_10028DE40, v42);
    return swift_release(v43);
  }
}

uint64_t sub_100058410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v6 + 16, a1);
  type metadata accessor for MainActor(0);
  v7 = swift_retain(v6);
  v8 = static MainActor.shared.getter(v7);
  v9 = (_QWORD *)swift_allocObject(&unk_100265B78, 40, 7);
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v6;
  swift_release(v6);
  v10 = sub_100049DC0((uint64_t)v4, (uint64_t)&unk_10028DE60, (uint64_t)v9);
  return swift_release(v10);
}

uint64_t sub_10005851C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 40) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 48) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100058588, v6, v7);
}

uint64_t sub_100058588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_10004F1F8(0);
    swift_release(v3);
  }
  else
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA470);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "self is nil in retranslation action handler", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000586AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[10] = a4;
  v5[11] = a5;
  v6 = *(_QWORD *)(type metadata accessor for TranslateTip(0) - 8);
  v5[12] = v6;
  v5[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[14] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_10005873C, v8, v9);
}

uint64_t sub_10005873C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD);
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 112));
  v1 += 16;
  swift_beginAccess(v1, v0 + 48, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    KeyPath = swift_getKeyPath(&unk_1001E90A8);
    v5 = swift_getKeyPath(&unk_1001E90D0);
    static Published.subscript.getter((_QWORD *)(v0 + 120), v3, KeyPath);
    swift_release(v5);
    swift_release(KeyPath);
    if (*(_BYTE *)(v0 + 120) == 3)
    {
      v6 = swift_getKeyPath(&unk_1001E90F0);
      v7 = swift_getKeyPath(&unk_1001E9118);
      static Published.subscript.getter((_QWORD *)(v0 + 72), v3, v6);
      swift_release(v7);
      swift_release(v6);
      v8 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 16);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
      if (!v8)
      {
        sub_100032D68(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 104), type metadata accessor for TranslateTip);
        v9 = swift_getKeyPath(&unk_1001E90F0);
        v10 = swift_getKeyPath(&unk_1001E9118);
        v11 = (void (*)(uint64_t, _QWORD))static Published.subscript.modify(v0 + 16, v3, v9, v10);
        v13 = v12;
        v14 = *v12;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
        *v13 = v14;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v14 = sub_1001A78E8(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
          *v13 = v14;
        }
        v16 = *(_QWORD *)(v14 + 16);
        v17 = *(_QWORD *)(v14 + 24);
        v18 = v16 + 1;
        if (v16 >= v17 >> 1)
        {
          v27 = v16 + 1;
          v24 = v14;
          v25 = *(_QWORD *)(v14 + 16);
          v26 = sub_1001A78E8(v17 > 1, v16 + 1, 1, v24);
          v16 = v25;
          v18 = v27;
          v14 = v26;
          *v13 = v26;
        }
        v20 = *(_QWORD *)(v0 + 96);
        v19 = *(_QWORD *)(v0 + 104);
        *(_QWORD *)(v14 + 16) = v18;
        sub_10005DDA8(v19, v14+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v16, type metadata accessor for TranslateTip);
        v11(v0 + 16, 0);
        swift_release(v10);
        swift_release(v9);
      }
      v21 = swift_getKeyPath(&unk_1001E9060);
      v22 = swift_getKeyPath(&unk_1001E9088);
      *(_BYTE *)(v0 + 121) = 1;
      static Published.subscript.setter(v0 + 121, v3, v21, v22);
    }
    else
    {
      swift_release(v3);
    }
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000589D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v7 + 296) = a6;
  *(_QWORD *)(v7 + 304) = a7;
  *(_QWORD *)(v7 + 288) = a5;
  *(_BYTE *)(v7 + 442) = a4;
  v8 = type metadata accessor for CoreAnalyticsLogger.CardType(0);
  *(_QWORD *)(v7 + 312) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 320) = v9;
  *(_QWORD *)(v7 + 328) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  *(_QWORD *)(v7 + 336) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SpeechResultOrigin(0);
  *(_QWORD *)(v7 + 344) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 352) = v12;
  *(_QWORD *)(v7 + 360) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  *(_QWORD *)(v7 + 368) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 376) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 384) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 392) = swift_task_alloc(v15);
  v16 = type metadata accessor for StoredSpeechResult(0);
  *(_QWORD *)(v7 + 400) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v7 + 408) = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 416) = swift_task_alloc(v18);
  *(_QWORD *)(v7 + 424) = swift_task_alloc(v18);
  v19 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 432) = static MainActor.shared.getter(v19);
  v20 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  return swift_task_switch(sub_100058B28, v20, v21);
}

uint64_t sub_100058B28()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;

  v1 = *(unsigned __int8 *)(v0 + 442);
  swift_release(*(_QWORD *)(v0 + 432));
  if (v1 == 1)
  {
    sub_10000B074(*(_QWORD *)(v0 + 288), v0 + 216, (uint64_t *)&unk_10028F1C0);
    if (*(_QWORD *)(v0 + 240))
    {
      sub_10003E994((__int128 *)(v0 + 216), v0 + 56);
      v2 = *(_QWORD *)(v0 + 80);
      v3 = *(_QWORD *)(v0 + 88);
      v113 = (_QWORD *)(v0 + 56);
      sub_100023AF4((_QWORD *)(v0 + 56), v2);
      v4 = dispatch thunk of TranslationResult.disambiguableResult.getter(v2, v3);
      if (v4)
      {
        v5 = (void *)v4;
        if (objc_msgSend(*(id *)(*(_QWORD *)(v0 + 296)+ OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationChangeManager), "restoreChangesToResult:", v4))
        {
          if (qword_10028A428 != -1)
            swift_once(&qword_10028A428, sub_100120F9C);
          v6 = type metadata accessor for Logger(0);
          v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA380);
          v8 = Logger.logObject.getter(v7);
          v9 = static os_log_type_t.info.getter(v8);
          if (os_log_type_enabled(v8, v9))
          {
            v10 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v10 = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, v9, "Restored changes to finalized result from previous user-selections", v10, 2u);
            swift_slowDealloc(v10, -1, -1);
          }

        }
      }
      v11 = *(_QWORD *)(v0 + 424);
      v12 = *(_QWORD **)(v0 + 392);
      v109 = *(_QWORD *)(v0 + 400);
      v111 = *(_QWORD *)(v0 + 416);
      v13 = *(_QWORD *)(v0 + 360);
      v103 = *(_QWORD *)(v0 + 352);
      v105 = *(_QWORD *)(v0 + 408);
      v107 = *(_QWORD *)(v0 + 344);
      v14 = *(_QWORD *)(v0 + 296);
      v15 = *(_QWORD *)(v0 + 304);
      v16 = type metadata accessor for StreamingRequestInfo(0);
      v17 = (uint64_t *)(v15 + *(int *)(v16 + 20));
      v18 = v17[1];
      v102 = *v17;
      KeyPath = swift_getKeyPath(&unk_1001E9180);
      v20 = swift_getKeyPath(&unk_1001E91A8);
      swift_bridgeObjectRetain(v18);
      static Published.subscript.getter(v12, v14, KeyPath);
      swift_release(v20);
      swift_release(KeyPath);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v103 + 104))(v13, enum case for SpeechResultOrigin.text(_:), v107);
      StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v102, v18, 0, 0, v12, v13);
      v21 = *(_QWORD *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v111, v11, v109);
      v22 = *(unsigned __int8 *)(v15 + *(int *)(v16 + 36));
      v110 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation;
      v112 = v14;
      v23 = *(_QWORD *)(v14
                      + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
      v24 = *(void **)(v23 + 16);
      v25 = *(_QWORD *)(v0 + 336);
      v108 = v21;
      v106 = v22;
      if (v24)
      {
        swift_retain(v23);
        v26 = objc_msgSend(v24, "invocationId");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v27 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 0, 1, v27);
        swift_release(v23);
      }
      else
      {
        v58 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v25, 1, 1, v58);
      }
      v59 = *(_QWORD *)(v0 + 416);
      v60 = *(_QWORD *)(v0 + 400);
      v61 = *(_QWORD *)(v0 + 408);
      v63 = *(_QWORD *)(v0 + 328);
      v62 = *(_QWORD *)(v0 + 336);
      v100 = *(_QWORD *)(v0 + 320);
      v101 = *(_QWORD *)(v0 + 312);
      v104 = *(_QWORD *)(v0 + 424);
      v64 = *(_QWORD *)(v0 + 80);
      v65 = *(_QWORD *)(v0 + 88);
      v66 = sub_100023AF4(v113, v64);
      v67 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);

      sub_10000A020(v62, (uint64_t *)&unk_10028F1B0);
      v68 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v68(v59, v60);
      v69 = *(_QWORD *)(v112 + v110);
      swift_retain(v69);
      sub_10015B614();
      swift_release(v69);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v100 + 104))(v63, enum case for CoreAnalyticsLogger.CardType.committed(_:), v101);
      v70 = *(_QWORD *)(v0 + 80);
      v71 = *(_QWORD *)(v0 + 88);
      sub_100023AF4(v113, v70);
      v72 = (void *)dispatch thunk of TranslationResult.disambiguableResult.getter(v70, v71);
      sub_1000522BC(v63, v72);

      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v63, v101);
      v68(v104, v60);
      sub_100009C08(v113);
    }
    else
    {
      sub_10000A020(v0 + 216, (uint64_t *)&unk_10028F1C0);
    }
    sub_10004D044(0, 0);
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 296);
    v29 = swift_getKeyPath(&unk_1001E8F40);
    v30 = swift_getKeyPath(&unk_1001E8F68);
    static Published.subscript.getter((_QWORD *)(v0 + 272), v28, v29);
    swift_release(v30);
    swift_release(v29);
    v31 = *(_QWORD *)(v0 + 280);
    if (v31)
    {
      v32 = *(_QWORD *)(v0 + 272);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
      v33 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000) == 0)
        v33 = v32 & 0xFFFFFFFFFFFFLL;
      if (v33)
      {
        v34 = sub_10004B3E4();
        v35 = sub_1001886C0();
        v37 = v36;
        swift_release(v34);
        swift_bridgeObjectRelease(v37);
        v38 = HIBYTE(v37) & 0xF;
        if ((v37 & 0x2000000000000000) == 0)
          v38 = v35 & 0xFFFFFFFFFFFFLL;
        if (v38)
          goto LABEL_47;
        v40 = *(_QWORD **)(v0 + 384);
        v39 = *(_QWORD **)(v0 + 392);
        v41 = *(_QWORD *)(v0 + 368);
        v42 = *(_QWORD *)(v0 + 376);
        v43 = *(_QWORD *)(v0 + 296);
        v44 = swift_getKeyPath(&unk_1001E9180);
        v45 = swift_getKeyPath(&unk_1001E91A8);
        static Published.subscript.getter(v39, v43, v44);
        swift_release(v45);
        swift_release(v44);
        v46 = swift_getKeyPath(&unk_1001E8EB0);
        v47 = swift_getKeyPath(&unk_1001E8ED8);
        static Published.subscript.getter(v40, v43, v46);
        swift_release(v47);
        swift_release(v46);
        LOBYTE(v43) = static Locale.== infix(_:_:)(v39, v40);
        v48 = *(void (**)(_QWORD *, uint64_t))(v42 + 8);
        v48(v40, v41);
        v48(v39, v41);
        if ((v43 & 1) != 0)
        {
LABEL_47:
          v49 = *(_QWORD *)(v0 + 296);
          v50 = swift_getKeyPath(&unk_1001E9138);
          v51 = swift_getKeyPath(&unk_1001E9160);
          static Published.subscript.getter((_QWORD *)(v0 + 441), v49, v50);
          swift_release(v51);
          swift_release(v50);
          if (*(_BYTE *)(v0 + 441) == 1)
          {
            v52 = *(_QWORD *)(v0 + 296);
            v53 = swift_getKeyPath(&unk_1001E9138);
            v54 = swift_getKeyPath(&unk_1001E9160);
            *(_BYTE *)(v0 + 440) = 0;
            swift_retain(v52);
            static Published.subscript.setter(v0 + 440, v52, v53, v54);
          }
        }
        sub_10000B074(*(_QWORD *)(v0 + 288), v0 + 96, (uint64_t *)&unk_10028F1C0);
        v55 = *(_QWORD *)(v0 + 120);
        if (v55)
        {
          v56 = *(_QWORD *)(v0 + 128);
          sub_100023AF4((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
          v57 = (void *)dispatch thunk of TranslationResult.disambiguableResult.getter(v55, v56);
          sub_100009C08((_QWORD *)(v0 + 96));

          if (v57)
          {
            sub_10004C1FC(*(_QWORD *)(v0 + 288), 0, 0, 0, 0);
            goto LABEL_30;
          }
        }
        else
        {
          sub_10000A020(v0 + 96, (uint64_t *)&unk_10028F1C0);
        }
        sub_10000B074(*(_QWORD *)(v0 + 288), v0 + 176, (uint64_t *)&unk_10028F1C0);
        v80 = *(_QWORD *)(v0 + 200);
        if (v80)
        {
          v81 = *(_QWORD *)(v0 + 208);
          sub_100023AF4((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
          v82 = dispatch thunk of TranslationResult.alternatives.getter(v80, v81);
          v83 = v82;
          if (*(_QWORD *)(v82 + 16))
          {
            sub_100023AB0(v82 + 32, v0 + 136);
          }
          else
          {
            *(_QWORD *)(v0 + 168) = 0;
            *(_OWORD *)(v0 + 136) = 0u;
            *(_OWORD *)(v0 + 152) = 0u;
          }
          swift_bridgeObjectRelease(v83);
          v86 = *(_QWORD *)(v0 + 160);
          if (v86)
          {
            v87 = *(_QWORD *)(v0 + 296);
            v88 = *(_QWORD *)(v0 + 168);
            sub_100023AF4((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
            v89 = TranslationAlternative.displayString.getter(v86, v88);
            v91 = v90;
            sub_100009C08((_QWORD *)(v0 + 136));
            sub_100009C08((_QWORD *)(v0 + 176));
            *(_QWORD *)(v0 + 48) = 0;
            *(_OWORD *)(v0 + 16) = 0u;
            *(_OWORD *)(v0 + 32) = 0u;
            v92 = swift_getKeyPath(&unk_1001E8F40);
            v93 = swift_getKeyPath(&unk_1001E8F68);
            static Published.subscript.getter((_QWORD *)(v0 + 256), v87, v92);
            swift_release(v93);
            swift_release(v92);
            v94 = *(_QWORD *)(v0 + 264);
            sub_10004C1FC(v0 + 16, *(char **)(v0 + 256), v94, v89, v91);
            swift_bridgeObjectRelease(v91);
            swift_bridgeObjectRelease(v94);
            sub_10000A020(v0 + 16, (uint64_t *)&unk_10028F1C0);
            goto LABEL_30;
          }
          sub_100009C08((_QWORD *)(v0 + 176));
          v84 = &qword_100296440;
          v85 = v0 + 136;
        }
        else
        {
          v84 = (uint64_t *)&unk_10028F1C0;
          v85 = v0 + 176;
        }
        sub_10000A020(v85, v84);
        if (qword_10028A478 != -1)
          swift_once(&qword_10028A478, sub_100121100);
        v95 = type metadata accessor for Logger(0);
        v96 = sub_10000F66C(v95, (uint64_t)qword_1002AA470);
        v97 = Logger.logObject.getter(v96);
        v98 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v97, v98))
        {
          v99 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v99 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "Can't find any text to display for result", v99, 2u);
          swift_slowDealloc(v99, -1, -1);
        }

      }
    }
  }
LABEL_30:
  v73 = *(_QWORD *)(v0 + 416);
  v75 = *(_QWORD *)(v0 + 384);
  v74 = *(_QWORD *)(v0 + 392);
  v76 = *(_QWORD *)(v0 + 360);
  v78 = *(_QWORD *)(v0 + 328);
  v77 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000594B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100057EB0(a1, a2, a3, a4);
}

void *sub_1000594D0@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *result;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  void (*v42)(char *, _QWORD *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = __chkstk_darwin(v4);
  v48 = (uint64_t *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v51 = (uint64_t *)((char *)&v44 - v7);
  v8 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  KeyPath = swift_getKeyPath(&unk_1001E8F40);
  v19 = swift_getKeyPath(&unk_1001E8F68);
  static Published.subscript.getter(&v52, v2, KeyPath);
  swift_release(KeyPath);
  swift_release(v19);
  if (v53)
  {
    v45 = v53;
    v46 = v15;
    v47 = a1;
    v44 = v52;
    v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
    v21 = swift_getKeyPath(&unk_1001E9180);
    v22 = swift_getKeyPath(&unk_1001E91A8);
    swift_retain(v20);
    v23 = v51;
    static Published.subscript.getter(v51, v2, v21);
    swift_release(v21);
    swift_release(v22);
    v24 = swift_getKeyPath(&unk_1001E8EB0);
    v25 = swift_getKeyPath(&unk_1001E8ED8);
    static Published.subscript.getter(&v10[v8[5]], v2, v24);
    swift_release(v24);
    swift_release(v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(&v10[v8[14]], 1, 1, v11);
    v26 = v23;
    v27 = v50;
    v49 = *(_QWORD *)(v49 + 32);
    ((void (*)(char *, _QWORD *, uint64_t))v49)(v10, v26, v50);
    *(_QWORD *)&v10[v8[6]] = 1;
    *(_QWORD *)&v10[v8[7]] = 1;
    *(_QWORD *)&v10[v8[8]] = 0;
    v10[v8[9]] = 0;
    v28 = &v10[v8[10]];
    *(_QWORD *)v28 = 0;
    v28[8] = 1;
    v10[v8[11]] = 0;
    *(_QWORD *)&v10[v8[12]] = 0;
    v29 = &v10[v8[13]];
    *(_QWORD *)v29 = 0;
    v29[8] = 1;
    sub_10015AEE0((uint64_t)v10);
    result = *(void **)(v20 + 16);
    if (result)
    {
      v31 = objc_msgSend(result, "invocationId");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      swift_release(v20);

      sub_100032DAC((uint64_t)v10, type metadata accessor for SELFLoggingInvocationWrapper.Parameters);
      v32 = v46;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v46, v17, v11);
      v33 = swift_getKeyPath(&unk_1001E9180);
      v34 = swift_getKeyPath(&unk_1001E91A8);
      v35 = v51;
      static Published.subscript.getter(v51, v2, v33);
      swift_release(v33);
      swift_release(v34);
      v36 = swift_getKeyPath(&unk_1001E8EB0);
      v37 = swift_getKeyPath(&unk_1001E8ED8);
      v38 = v48;
      static Published.subscript.getter(v48, v2, v36);
      swift_release(v36);
      swift_release(v37);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      v39 = v47;
      v40 = v45;
      *(_QWORD *)v47 = v44;
      *((_QWORD *)v39 + 1) = v40;
      v41 = (int *)type metadata accessor for SELFLoggingInvocationDescription(0);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v39[v41[5]], v32, v11);
      v42 = (void (*)(char *, _QWORD *, uint64_t))v49;
      ((void (*)(char *, _QWORD *, uint64_t))v49)(&v39[v41[6]], v35, v27);
      v42(&v39[v41[7]], v38, v27);
      return (void *)(*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v41 - 1) + 56))(v39, 0, 1, v41);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v43 = type metadata accessor for SELFLoggingInvocationDescription(0);
    return (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(a1, 1, 1, v43);
  }
  return result;
}

void *sub_10005993C@<X0>(char *a1@<X8>)
{
  return sub_1000594D0(a1);
}

uint64_t sub_10005995C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
  swift_retain(v1);
  sub_10015B4BC();
  return swift_release(v1);
}

uint64_t sub_100059994()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000599B8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000599EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10028DDDC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D380;
  return sub_100057D68(a1, v4, v5, v7, v6);
}

uint64_t sub_100059A64@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E92F0, (uint64_t)&unk_1001E9318, a2);
}

uint64_t sub_100059A78(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E92F0, (uint64_t)&unk_1001E9318);
}

uint64_t sub_100059A8C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E96E0);
  v3 = swift_getKeyPath(&unk_1001E9708);
  static Published.subscript.getter(v4, v1, KeyPath, v3);
  swift_release(v3);
  return swift_release(KeyPath);
}

uint64_t sub_100059AEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E96E0);
  v4 = swift_getKeyPath(&unk_1001E9708);
  v5 = swift_retain(v2);
  return static Published.subscript.setter(v5, v2, KeyPath, v4);
}

uint64_t sub_100059B44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8F88);
  v5 = swift_getKeyPath(&unk_1001E8FB0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_100059BC0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8F88);
  v5 = swift_getKeyPath(&unk_1001E8FB0);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_100059C34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059C70(a1, (uint64_t)&unk_1001E90F0, (uint64_t)&unk_1001E9118, a2);
}

uint64_t sub_100059C48(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059CFC(a1, a2, a3, a4, (uint64_t)&unk_1001E90F0, (uint64_t)&unk_1001E9118);
}

uint64_t sub_100059C5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059C70(a1, (uint64_t)&unk_1001E8FD0, (uint64_t)&unk_1001E8FF8, a2);
}

uint64_t sub_100059C70@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(v8);
  result = swift_release(KeyPath);
  *a4 = v10;
  return result;
}

uint64_t sub_100059CE8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059CFC(a1, a2, a3, a4, (uint64_t)&unk_1001E8FD0, (uint64_t)&unk_1001E8FF8);
}

uint64_t sub_100059CFC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_100059D70@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v11, v6, KeyPath, v8);
  swift_release(v8);
  result = swift_release(KeyPath);
  v10 = BYTE1(v11);
  *a4 = v11;
  a4[1] = v10;
  return result;
}

uint64_t sub_100059DF0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  char v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _BYTE v13[2];

  v7 = *a1;
  v8 = a1[1];
  v9 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11 = swift_getKeyPath(a6);
  v13[0] = v7;
  v13[1] = v8;
  swift_retain(v9);
  return static Published.subscript.setter(v13, v9, KeyPath, v11);
}

uint64_t sub_100059E6C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9380, (uint64_t)&unk_1001E93A8, a2);
}

uint64_t sub_100059E80(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9380, (uint64_t)&unk_1001E93A8);
}

uint64_t sub_100059E94@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E95C0, (uint64_t)&unk_1001E95E8, a2);
}

uint64_t sub_100059EA8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E95C0, (uint64_t)&unk_1001E95E8);
}

uint64_t sub_100059EBC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E90A8, (uint64_t)&unk_1001E90D0, a2);
}

uint64_t sub_100059ED0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E90A8, (uint64_t)&unk_1001E90D0);
}

uint64_t sub_100059EE4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  __int16 v7;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E92A8);
  v5 = swift_getKeyPath(&unk_1001E92D0);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  v7 = v8;
  *(_BYTE *)(a2 + 2) = BYTE2(v8);
  *(_WORD *)a2 = v7;
  return result;
}

uint64_t sub_100059F68(__int16 *a1, uint64_t *a2)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  __int16 v8;
  char v9;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 2);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E92A8);
  v6 = swift_getKeyPath(&unk_1001E92D0);
  v9 = v3;
  v8 = v2;
  swift_retain(v4);
  return static Published.subscript.setter(&v8, v4, KeyPath, v6);
}

uint64_t sub_100059FE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(v8);
  result = swift_release(KeyPath);
  *a4 = v10;
  return result;
}

uint64_t sub_10005A060(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10005A0CC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E9060);
  v5 = swift_getKeyPath(&unk_1001E9088);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_10005A148(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E9060);
  v5 = swift_getKeyPath(&unk_1001E9088);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10005A1B8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9018, (uint64_t)&unk_1001E9040, a2);
}

uint64_t sub_10005A1CC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9018, (uint64_t)&unk_1001E9040);
}

uint64_t sub_10005A1E0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E91F0, (uint64_t)&unk_1001E9218, a2);
}

uint64_t sub_10005A1F4(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E91F0, (uint64_t)&unk_1001E9218);
}

uint64_t sub_10005A208@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E8EF8);
  v5 = swift_getKeyPath(&unk_1001E8F20);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(v5);
  return swift_release(KeyPath);
}

uint64_t sub_10005A270(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _BYTE v7[80];
  _BYTE v8[80];

  sub_10000B074(a1, (uint64_t)v8, &qword_10028D388);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E8EF8);
  v5 = swift_getKeyPath(&unk_1001E8F20);
  sub_10000B074((uint64_t)v8, (uint64_t)v7, &qword_10028D388);
  swift_retain(v3);
  static Published.subscript.setter(v7, v3, KeyPath, v5);
  return sub_10000A020((uint64_t)v8, &qword_10028D388);
}

uint64_t sub_10005A30C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9138, (uint64_t)&unk_1001E9160, a2);
}

uint64_t sub_10005A320(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9138, (uint64_t)&unk_1001E9160);
}

uint64_t sub_10005A334@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9338, (uint64_t)&unk_1001E9360, a2);
}

uint64_t sub_10005A348(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9338, (uint64_t)&unk_1001E9360);
}

uint64_t sub_10005A35C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10005A3C0;
  return v6(a1);
}

uint64_t sub_10005A3C0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10005A40C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10028DDEC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003EFA0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10028DDE8 + dword_10028DDE8))(a1, v4);
}

uint64_t sub_10005A47C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  sub_100009C08(v0 + 5);
  sub_100009C08(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10005A4B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10028DDFC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_1000579F0(a1, v4, v5, v6, (uint64_t)(v1 + 5), (uint64_t)(v1 + 10));
}

void sub_10005A53C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  _QWORD v34[5];
  _QWORD v35[5];

  v10 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v10);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for StoredSpeechResult(0);
  v35[3] = v17;
  v35[4] = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  v18 = sub_1000122F8(v35);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v18, a1, v17);
  v19 = type metadata accessor for StoredTranslationResult(0);
  v34[3] = v19;
  v34[4] = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
  v20 = sub_1000122F8(v34);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v20, a2, v19);
  v21 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *(_QWORD *)v16 = static OS_dispatch_queue.main.getter(v21);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v22 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v13);
  if ((v22 & 1) != 0)
  {
    v23 = *(_QWORD *)&a5[OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24];
    v24 = *(_QWORD *)&a5[OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32];
    sub_100023AF4(&a5[OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store], v23);
    v25 = (void *)dispatch thunk of TranslationStore.insert(speech:translationResult:isFavorite:)(v35, v34, a3 & 1, v23, v24);
    if (!v25)
    {
LABEL_5:
      sub_100009C08(v35);
      sub_100009C08(v34);
      return;
    }
    KeyPath = swift_getKeyPath(&unk_1001E93C8);
    v27 = swift_getKeyPath(&unk_1001E93F0);
    static Published.subscript.getter(v33, a5, KeyPath);
    swift_release(KeyPath);
    swift_release(v27);
    v28 = v33[1];
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "setSessionID:", v29, swift_bridgeObjectRelease(v28).n128_f64[0]);

    sub_10000B074(a4, (uint64_t)v12, (uint64_t *)&unk_10028F1B0);
    dispatch thunk of PersistedTranslation.selfLoggingInvocationId.setter(v12);
    a4 = swift_getKeyPath(&unk_1001E9410);
    v12 = (char *)swift_getKeyPath(&unk_1001E9438);
    v22 = v25;
    a5 = (char *)static Published.subscript.modify(v33, a5, a4, v12);
    v16 = *v30;
    if (!((unint64_t)*v30 >> 62))
    {
LABEL_4:
      sub_1001CBF04(0, 0, v22);
      ((void (*)(_QWORD *, _QWORD))a5)(v33, 0);
      swift_release(a4);
      swift_release(v12);
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  if (v16 < 0)
    v31 = v16;
  else
    v31 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v16);
  if ((v32 & 0x8000000000000000) == 0)
    goto LABEL_4;
  __break(1u);
}

uint64_t sub_10005A894(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_10005A8FC;
  return v5(v2 + 32);
}

uint64_t sub_10005A8FC()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10005A94C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  sub_100009C08(v0 + 5);
  if (v0[13])
    sub_100009C08(v0 + 10);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_10005A9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028F1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005A9E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v4 = v1[3];
  v10 = v1[2];
  v5 = v1[4];
  v6 = v1[15];
  v7 = v1[16];
  v8 = (_QWORD *)swift_task_alloc(dword_10028DE0C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100056D28(a1, v10, v4, v5, (uint64_t)(v1 + 5), (uint64_t)(v1 + 10), v6, v7);
}

uint64_t sub_10005AA94@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001E8EB0, (uint64_t)&unk_1001E8ED8, a2);
}

uint64_t sub_10005AAB8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A288(a1, a2, a3, a4, (uint64_t)&unk_1001E8EB0, (uint64_t)&unk_1001E8ED8, (void (*)(uint64_t))sub_10004A864);
}

uint64_t sub_10005AAFC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059C70(a1, (uint64_t)&unk_1001E8FD0, (uint64_t)&unk_1001E8FF8, a2);
}

uint64_t sub_10005AB20(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059CFC(a1, a2, a3, a4, (uint64_t)&unk_1001E8FD0, (uint64_t)&unk_1001E8FF8);
}

uint64_t sub_10005AB44()
{
  return sub_10003EC10(41);
}

uint64_t sub_10005AB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10028DE24);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100055FB4(a1, v4, v5, v6, v7);
}

uint64_t sub_10005ABC8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9018, (uint64_t)&unk_1001E9040, a2);
}

uint64_t sub_10005ABEC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9018, (uint64_t)&unk_1001E9040);
}

uint64_t sub_10005AC18(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(char *, uint64_t), uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(uint64_t, char *, uint64_t);
  void (*v64)(uint64_t, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void *v122;
  void (*v123)(char *, uint64_t);
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  NSString v131;
  id v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  void *v142;
  char *v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  _BOOL4 v149;
  char *v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  __n128 v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __n128 v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __n128 v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __n128 v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  void (*v218)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __n128 v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  void (*v235)(uint64_t, uint64_t, uint64_t, char *);
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __n128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __n128 v247;
  uint64_t v248;
  void (*v249)(uint64_t, uint64_t);
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __n128 v264;
  char *v265;
  uint64_t v266;
  void (*v267)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __n128 v272;
  __n128 v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __n128 v285;
  uint64_t v286;
  id v287;
  uint64_t v288;
  __n128 v289;
  uint64_t v290;
  void (*v291)(char *, uint64_t);
  uint64_t v293;
  uint64_t v294;
  void (*v295)(uint64_t, char *, uint64_t);
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  void (*v313)(char *, uint64_t);
  uint64_t v314;
  void *v315;
  void (*v316)(char *, uint64_t);
  id v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  char *v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t (*v382)(char *, uint64_t);
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  id v397;
  char v398[8];
  _OWORD v399[5];

  v387 = a8;
  v316 = a7;
  v317 = a6;
  v384 = a5;
  v385 = a4;
  v383 = a3;
  v394 = a2;
  v315 = a1;
  v374 = sub_100006DF4(&qword_10028DE80);
  v373 = *(_QWORD *)(v374 - 8);
  __chkstk_darwin(v374);
  v372 = (char *)&v293 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v377 = sub_100006DF4(&qword_10028DE88);
  v376 = *(_QWORD *)(v377 - 8);
  __chkstk_darwin(v377);
  v375 = (char *)&v293 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v367 = sub_100006DF4(&qword_10028DE90);
  v365 = *(_QWORD *)(v367 - 8);
  __chkstk_darwin(v367);
  v363 = (char *)&v293 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v364 = sub_100006DF4(&qword_100296BC0);
  v362 = *(_QWORD *)(v364 - 8);
  v12 = __chkstk_darwin(v364);
  v361 = (char *)&v293 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v360 = (char *)&v293 - v14;
  v370 = sub_100006DF4(&qword_10028DE98);
  v369 = *(_QWORD *)(v370 - 8);
  __chkstk_darwin(v370);
  v368 = (char *)&v293 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v386 = sub_100006DF4(&qword_10028B5B0);
  v359 = *(_QWORD *)(v386 - 8);
  __chkstk_darwin(v386);
  v371 = (char *)&v293 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v349 = sub_100006DF4(&qword_10028DEA0);
  v348 = *(_QWORD *)(v349 - 8);
  __chkstk_darwin(v349);
  v347 = (char *)&v293 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v353 = sub_100006DF4(&qword_10028DEA8);
  v351 = *(_QWORD *)(v353 - 8);
  __chkstk_darwin(v353);
  v350 = (char *)&v293 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v355 = sub_100006DF4(&qword_10028DEB0);
  v354 = *(_QWORD *)(v355 - 8);
  __chkstk_darwin(v355);
  v352 = (char *)&v293 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v358 = sub_100006DF4(&qword_10028DEB8);
  v357 = *(_QWORD *)(v358 - 8);
  __chkstk_darwin(v358);
  v356 = (char *)&v293 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v340 = sub_100006DF4(&qword_10028DEC0);
  v339 = *(_QWORD *)(v340 - 8);
  __chkstk_darwin(v340);
  v338 = (char *)&v293 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v393 = sub_100006DF4(&qword_10028B5A8);
  v337 = *(_QWORD *)(v393 - 8);
  __chkstk_darwin(v393);
  v392 = (char *)&v293 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v343 = sub_100006DF4(&qword_10028DEC8);
  v342 = *(_QWORD *)(v343 - 8);
  __chkstk_darwin(v343);
  v341 = (char *)&v293 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v346 = sub_100006DF4(&qword_10028DED0);
  v345 = *(_QWORD *)(v346 - 8);
  __chkstk_darwin(v346);
  v344 = (char *)&v293 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = sub_100006DF4(&qword_10028DED8);
  v329 = *(_QWORD *)(v330 - 8);
  __chkstk_darwin(v330);
  v328 = (char *)&v293 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v327 = sub_100006DF4(&qword_10028DEE0);
  v326 = *(_QWORD *)(v327 - 8);
  __chkstk_darwin(v327);
  v325 = (char *)&v293 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v333 = sub_100006DF4(&qword_10028DEE8);
  v332 = *(_QWORD *)(v333 - 8);
  __chkstk_darwin(v333);
  v331 = (char *)&v293 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v336 = sub_100006DF4(&qword_10028DEF0);
  v335 = *(_QWORD *)(v336 - 8);
  __chkstk_darwin(v336);
  v334 = (char *)&v293 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v29);
  v366 = (char *)&v293 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v320 = sub_100006DF4(&qword_10028DEF8);
  v319 = *(_QWORD *)(v320 - 8);
  __chkstk_darwin(v320);
  v318 = (char *)&v293 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = sub_100006DF4(&qword_1002987B0);
  v322 = *(_QWORD *)(v323 - 8);
  __chkstk_darwin(v323);
  v321 = (char *)&v293 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v388 = type metadata accessor for Locale(0);
  v314 = *(_QWORD *)(v388 - 8);
  v33 = __chkstk_darwin(v388);
  v379 = (char *)&v293 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v391 = (char *)&v293 - v36;
  v37 = __chkstk_darwin(v35);
  v390 = (char *)&v293 - v38;
  v39 = __chkstk_darwin(v37);
  v389 = (char *)&v293 - v40;
  __chkstk_darwin(v39);
  v378 = (char *)&v293 - v41;
  v313 = (void (*)(char *, uint64_t))sub_100006DF4(&qword_10028DF00);
  v312 = *((_QWORD *)v313 - 1);
  __chkstk_darwin(v313);
  v311 = (char *)&v293 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v381 = sub_100006DF4(&qword_10028DF08);
  v310 = *(_QWORD *)(v381 - 8);
  __chkstk_darwin(v381);
  v309 = (char *)&v293 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v382 = (uint64_t (*)(char *, uint64_t))sub_100006DF4(&qword_10028DF10);
  v308 = *((_QWORD *)v382 - 1);
  __chkstk_darwin(v382);
  v307 = (char *)&v293 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v306 = sub_100006DF4(&qword_10028DF18);
  v305 = *(_QWORD *)(v306 - 8);
  __chkstk_darwin(v306);
  v304 = (char *)&v293 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = sub_100006DF4(&qword_10028DF20);
  v302 = *(_QWORD *)(v303 - 8);
  __chkstk_darwin(v303);
  v301 = (char *)&v293 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = sub_100006DF4(&qword_10028DF28);
  v299 = *(_QWORD *)(v300 - 8);
  __chkstk_darwin(v300);
  v298 = (char *)&v293 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = sub_100006DF4(&qword_10028DF30);
  v294 = *(_QWORD *)(v296 - 8);
  __chkstk_darwin(v296);
  v49 = (char *)&v293 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100006DF4(&qword_10028DF38);
  v324 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v52 = (char *)&v293 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100006DF4(&qword_10028B5B8);
  v54 = *(_QWORD *)(v53 - 8);
  v395 = v53;
  __chkstk_darwin(v53);
  v380 = (char *)&v293 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v59 = (char *)&v293 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isFlipped;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v295 = *(void (**)(uint64_t, char *, uint64_t))(v57 + 32);
  v295(v60, v59, v56);
  v61 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__sourceText;
  v399[0] = 0uLL;
  v297 = sub_100006DF4(&qword_10028D160);
  v62 = v380;
  Published.init(initialValue:)(v399, v297);
  v63 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
  v63(v61, v62, v53);
  v64 = v63;
  v65 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__targetText;
  *(_QWORD *)&v399[0] = 0;
  v66 = sub_100006DF4(&qword_10028D320);
  Published.init(initialValue:)(v399, v66);
  v67 = *(void (**)(uint64_t, char *, uint64_t))(v324 + 32);
  v324 = v50;
  v67(v65, v52, v50);
  v68 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__textStreamingErrorTips;
  *(_QWORD *)&v399[0] = _swiftEmptyArrayStorage;
  v69 = sub_100006DF4(&qword_10028D330);
  Published.init(initialValue:)(v399, v69);
  v70 = *(void (**)(uint64_t, char *, uint64_t))(v294 + 32);
  v71 = v296;
  v70(v68, v49, v296);
  v72 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__tips;
  *(_QWORD *)&v399[0] = _swiftEmptyArrayStorage;
  Published.init(initialValue:)(v399, v69);
  v70(v72, v49, v71);
  v73 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__forceDisableDictation;
  LOWORD(v399[0]) = 0;
  v74 = sub_100006DF4(&qword_10028D340);
  v75 = v298;
  Published.init(initialValue:)(v399, v74);
  v76 = *(void (**)(uint64_t, char *, uint64_t))(v299 + 32);
  v77 = v300;
  v76(v73, v75, v300);
  v78 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isASRSupported;
  LOWORD(v399[0]) = 257;
  Published.init(initialValue:)(v399, v74);
  v76(v78, v75, v77);
  v79 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__unableToTranslate;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80 = v295;
  v295(v79, v59, v56);
  v81 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isFavorite;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v81, v59, v56);
  v82 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isDictionaryModeActive;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v82, v59, v56);
  v83 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__pendingDictionaryModeSourceText;
  v399[0] = 0uLL;
  v84 = v380;
  v85 = v8;
  Published.init(initialValue:)(v399, v297);
  v64(v83, v84, v395);
  v86 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__canShowDictionary;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v86, v59, v56);
  v87 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__userInteractionEnabled;
  LOBYTE(v399[0]) = 1;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v87, v59, v56);
  v88 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__stateError;
  LOBYTE(v399[0]) = 3;
  v89 = sub_100006DF4(&qword_10028D350);
  v90 = v301;
  Published.init(initialValue:)(v399, v89);
  (*(void (**)(uint64_t, char *, uint64_t))(v302 + 32))(v88, v90, v303);
  v91 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__transactionalError;
  BYTE2(v399[0]) = 8;
  LOWORD(v399[0]) = 0;
  v92 = sub_100006DF4(&qword_10028D360);
  v93 = v304;
  Published.init(initialValue:)(v399, v92);
  (*(void (**)(uint64_t, char *, uint64_t))(v305 + 32))(v91, v93, v306);
  v94 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__showErrorAlert;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v94, v59, v56);
  v95 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__inputStyle;
  LOBYTE(v399[0]) = 2;
  v96 = sub_100006DF4(&qword_10028D370);
  v97 = v307;
  Published.init(initialValue:)(v399, v96);
  (*(void (**)(uint64_t, char *, uint64_t (*)(char *, uint64_t)))(v308 + 32))(v95, v97, v382);
  v98 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__state;
  LOBYTE(v399[0]) = 0;
  v99 = v309;
  Published.init(initialValue:)(v399, &type metadata for ComposeTranslationViewModel.TranslationState);
  (*(void (**)(uint64_t, char *, uint64_t))(v310 + 32))(v98, v99, v381);
  v100 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isListening;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v100, v59, v56);
  v101 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__useSmallerFont;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v101, v59, v56);
  v102 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__partialSpeechResult;
  memset(v399, 0, sizeof(v399));
  sub_10000B074((uint64_t)v399, (uint64_t)&v397, &qword_10028D388);
  v103 = sub_100006DF4(&qword_10028D388);
  v104 = v311;
  Published.init(initialValue:)(&v397, v103);
  sub_10000A020((uint64_t)v399, &qword_10028D388);
  (*(void (**)(uint64_t, char *, void (*)(char *, uint64_t)))(v312 + 32))(v102, v104, v313);
  v105 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__redactTargetText;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v80(v105, v59, v56);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel____lazy_storage___streamingManager) = 0;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_debounceTimer) = 0;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationResultModel) = 0;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationUpdateSubscription) = 0;
  v106 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_disambiguationChangeManager;
  *(_QWORD *)(v8 + v106) = objc_msgSend(objc_allocWithZone((Class)_LTDisambiguationChangeManager), "init");
  v107 = v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__canShowGenderTip;
  LOBYTE(v399[0]) = 0;
  Published.init(initialValue:)(v399, &type metadata for Bool);
  v380 = (char *)v56;
  v80(v107, v59, v56);
  v108 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_dictionaryManager;
  *(_QWORD *)(v8 + v108) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DictionaryManager()), "init");
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v109 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v109 = &_swiftEmptySetSingleton;
  }
  v110 = v388;
  v111 = v378;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_observers) = v109;
  v112 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation;
  v113 = type metadata accessor for SELFLoggingInvocationWrapper(0);
  v114 = swift_allocObject(v113, *(unsigned int *)(v113 + 48), *(unsigned __int16 *)(v113 + 52));
  *(_QWORD *)(v114 + 16) = 0;
  v115 = v114 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters;
  v116 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v115, 1, 1, v116);
  UUID.init()(v117);
  *(_BYTE *)(v114 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) = 0;
  *(_QWORD *)(v114 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabName) = 1;
  *(_QWORD *)(v85 + v112) = v114;
  *(_BYTE *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_newTranslationFromPunchOut) = 0;
  v118 = v394;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_service) = v394;
  v119 = v384;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager) = v384;
  v120 = v383;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session) = v383;
  v121 = v385;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_errorStateContext) = v385;
  v122 = v315;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_translator) = v315;
  v123 = v316;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_translationOptions) = v316;
  v124 = objc_allocWithZone((Class)type metadata accessor for SpeechManager());
  v125 = v122;
  swift_retain(v118);
  swift_retain(v119);
  swift_retain(v120);
  swift_retain(v121);
  v313 = v123;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_speechManager) = sub_10016C6D8(v125, v317);
  v126 = v387;
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_genderTipManager) = v387;
  swift_beginAccess(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__genderDisambiguationTip, v399, 33, 0);
  swift_retain(v126);
  Published.init(initialValue:)(v127, &type metadata for TipsHelper.GenderDisambiguationTip);
  swift_endAccess(v399);
  v128 = type metadata accessor for CardMetrics(0);
  v129 = swift_allocObject(v128, *(unsigned int *)(v128 + 48), *(unsigned __int16 *)(v128 + 52));
  if (qword_10028A3C0 != -1)
    swift_once(&qword_10028A3C0, sub_100055838);
  *(_QWORD *)(v129 + 16) = qword_1002AA0C0;
  *(_BYTE *)(v129 + 24) = 0;
  ObservationRegistrar.init()();
  *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics) = v129;
  v130 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v131 = String._bridgeToObjectiveC()();
  v132 = objc_msgSend(v130, "stringForKey:", v131);

  if (v132)
  {
    v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
    v135 = v134;

  }
  else
  {
    v135 = 0xE500000000000000;
    v133 = 0x53555F6E65;
  }
  v136 = v110;
  v137 = v379;
  v138 = v389;
  Locale.init(identifier:)(v133, v135);
  sub_10015D9EC();
  v139 = v314;
  v140 = *(void (**)(char *, char *, uint64_t))(v314 + 16);
  v141 = v390;
  v140(v390, v111, v136);
  v142 = (void *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__sourceLocale);
  swift_beginAccess(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__sourceLocale, v399, 33, 0);
  v143 = v391;
  v140(v391, v141, v136);
  v317 = v142;
  Published.init(initialValue:)(v143, v136);
  v144 = *(void (**)(char *, uint64_t))(v139 + 8);
  v144(v141, v136);
  swift_endAccess(v399);
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v145 = type metadata accessor for Logger(0);
  sub_10000F66C(v145, (uint64_t)qword_1002AA470);
  v146 = ((uint64_t (*)(char *, char *, uint64_t))v140)(v137, v111, v136);
  v147 = Logger.logObject.getter(v146);
  v148 = static os_log_type_t.debug.getter();
  v149 = os_log_type_enabled(v147, v148);
  v396 = v85;
  if (v149)
  {
    v150 = v137;
    v151 = (uint8_t *)swift_slowAlloc(12, -1);
    v152 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v399[0] = v152;
    *(_DWORD *)v151 = 136315138;
    v153 = Locale.languageIdentifier.getter(v152);
    v397 = (id)sub_1001A7FE4(v153, v154, (uint64_t *)v399);
    v136 = v388;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v397, v398, v151 + 4);
    v155 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v144)(v150, v136, v155);
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "source locale: %s", v151, 0xCu);
    swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
    v156 = v152;
    v85 = v396;
    v138 = v389;
    swift_slowDealloc(v156, -1, -1);
    swift_slowDealloc(v151, -1, -1);
  }
  else
  {
    v144(v137, v136);
  }

  v316 = v144;
  v157 = v390;
  v140(v390, v138, v136);
  v315 = (void *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__targetLocale);
  swift_beginAccess(v85 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__targetLocale, v399, 33, 0);
  v158 = v391;
  v140(v391, v157, v136);
  Published.init(initialValue:)(v158, v136);
  v144(v157, v136);
  swift_endAccess(v399);
  swift_beginAccess((char *)v313 + OBJC_IVAR____TtC17SequoiaTranslator24SharedTranslationOptions__genderDisambiguationUserSettingEnabled, v399, 33, 0);
  v159 = v318;
  Published.projectedValue.getter(v380);
  swift_endAccess(v399);
  v160 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *(_QWORD *)&v399[0] = static OS_dispatch_queue.main.getter(v160);
  v161 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v391 = *(char **)(*(_QWORD *)(v161 - 8) + 56);
  v162 = (uint64_t)v366;
  v380 = (char *)v161;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v391)(v366, 1, 1, v161);
  v163 = sub_100012334(&qword_10028DF40, &qword_10028DEF8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v390 = (char *)sub_10001D984();
  v164 = v321;
  v165 = v320;
  Publisher.receive<A>(on:options:)(v399, v162, v320, v160, v163, v390);
  sub_10000A020(v162, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v319 + 8))(v159, v165);
  v166 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v166 + 16, v396);
  v167 = sub_100012334(&qword_100298800, &qword_1002987B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v168 = v323;
  v169 = Publisher<>.sink(receiveValue:)(sub_10005DC30, v166, v323, v167);
  v170 = swift_release(v166);
  (*(void (**)(char *, uint64_t, __n128))(v322 + 8))(v164, v168, v170);
  v171 = v396 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_observers;
  swift_beginAccess(v396 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_observers, v399, 33, 0);
  AnyCancellable.store(in:)(v171);
  swift_endAccess(v399);
  swift_release(v169);
  swift_beginAccess(v396 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__state, v399, 33, 0);
  v172 = v325;
  Published.projectedValue.getter(v381);
  swift_endAccess(v399);
  swift_beginAccess(v396 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__inputStyle, v399, 33, 0);
  v173 = v328;
  Published.projectedValue.getter(v382);
  swift_endAccess(v399);
  v174 = sub_100012334(&qword_10028DF48, &qword_10028DEE0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v175 = sub_100012334(&qword_10028DF50, &qword_10028DED8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v176 = v331;
  v177 = v327;
  v178 = v330;
  Publisher.combineLatest<A>(_:)(v173, v327, v330, v174, v175);
  (*(void (**)(char *, uint64_t))(v329 + 8))(v173, v178);
  v179 = (*(uint64_t (**)(char *, uint64_t))(v326 + 8))(v172, v177);
  v379 = (char *)v160;
  *(_QWORD *)&v399[0] = static OS_dispatch_queue.main.getter(v179);
  v180 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v391;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v391)(v162, 1, 1, v161);
  v181 = sub_100012334(&qword_10028DF58, &qword_10028DEE8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v182 = v334;
  v183 = v333;
  v184 = v390;
  Publisher.receive<A>(on:options:)(v399, v162, v333, v160, v181, v390);
  sub_10000A020(v162, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v332 + 8))(v176, v183);
  v185 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v185 + 16, v396);
  v186 = swift_allocObject(&unk_100265BC8, 32, 7);
  *(_QWORD *)(v186 + 16) = sub_10005DC38;
  *(_QWORD *)(v186 + 24) = v185;
  v187 = sub_100012334(&qword_10028DF60, &qword_10028DEF0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v188 = v336;
  v189 = Publisher<>.sink(receiveValue:)(sub_10005DC40, v186, v336, v187);
  v190 = swift_release(v186);
  (*(void (**)(char *, uint64_t, __n128))(v335 + 8))(v182, v188, v190);
  swift_beginAccess(v171, v399, 33, 0);
  AnyCancellable.store(in:)(v171);
  swift_endAccess(v399);
  swift_release(v189);
  swift_beginAccess(v396 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__sourceText, v399, 33, 0);
  v191 = v392;
  Published.projectedValue.getter(v395);
  swift_endAccess(v399);
  swift_beginAccess(v396 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__targetText, v399, 33, 0);
  v192 = v338;
  Published.projectedValue.getter(v324);
  swift_endAccess(v399);
  v193 = sub_100012334(&qword_10028B5C0, &qword_10028B5A8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v381 = v193;
  v194 = sub_100012334(&qword_10028DF68, &qword_10028DEC0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v195 = v341;
  v196 = v393;
  v197 = v340;
  Publisher.combineLatest<A>(_:)(v192, v393, v340, v193, v194);
  (*(void (**)(char *, uint64_t))(v339 + 8))(v192, v197);
  v382 = *(uint64_t (**)(char *, uint64_t))(v337 + 8);
  v198 = v382(v191, v196);
  v199 = v379;
  *(_QWORD *)&v399[0] = static OS_dispatch_queue.main.getter(v198);
  v200 = v380;
  v180(v162, 1, 1, v380);
  v201 = sub_100012334(&qword_10028DF70, &qword_10028DEC8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v202 = v344;
  v203 = v343;
  Publisher.receive<A>(on:options:)(v399, v162, v343, v199, v201, v184);
  sub_10000A020(v162, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v342 + 8))(v195, v203);
  v204 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v204 + 16, v396);
  v205 = swift_allocObject(&unk_100265BF0, 32, 7);
  *(_QWORD *)(v205 + 16) = sub_10005DC68;
  *(_QWORD *)(v205 + 24) = v204;
  v206 = sub_100012334(&qword_10028DF78, &qword_10028DED0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v207 = v346;
  v208 = Publisher<>.sink(receiveValue:)(sub_10005DC70, v205, v346, v206);
  v209 = swift_release(v205);
  (*(void (**)(char *, uint64_t, __n128))(v345 + 8))(v202, v207, v209);
  v323 = v171;
  swift_beginAccess(v171, v399, 33, 0);
  AnyCancellable.store(in:)(v171);
  swift_endAccess(v399);
  swift_release(v208);
  swift_beginAccess(&v383[OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__currentID], v399, 33, 0);
  v210 = sub_100006DF4(&qword_10028B5A0);
  v211 = v347;
  Published.projectedValue.getter(v210);
  swift_endAccess(v399);
  v212 = sub_100012334(&qword_10028DF80, &qword_10028DEA0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v213 = v350;
  v214 = v349;
  Publisher<>.removeDuplicates()(v349, v212, &protocol witness table for String);
  v215 = (*(uint64_t (**)(char *, uint64_t))(v348 + 8))(v211, v214);
  *(_QWORD *)&v399[0] = static OS_dispatch_queue.main.getter(v215);
  v216 = v200;
  v217 = v200;
  v218 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v391;
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))v391)(v162, 1, 1, v216);
  v219 = sub_100012334(&qword_10028DF88, &qword_10028DEA8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v220 = v352;
  v221 = v353;
  v222 = v390;
  Publisher.receive<A>(on:options:)(v399, v162, v353, v199, v219, v390);
  sub_10000A020(v162, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v351 + 8))(v213, v221);
  v223 = sub_100012334(&qword_10028DF90, &qword_10028DEB0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v224 = v356;
  v225 = v355;
  Publisher.dropFirst(_:)(1, v355, v223);
  (*(void (**)(char *, uint64_t))(v354 + 8))(v220, v225);
  v226 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v226 + 16, v396);
  v227 = sub_100012334(&qword_10028DF98, &qword_10028DEB8, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v228 = v358;
  v229 = Publisher<>.sink(receiveValue:)(sub_10005DC9C, v226, v358, v227);
  v230 = swift_release(v226);
  (*(void (**)(char *, uint64_t, __n128))(v357 + 8))(v224, v228, v230);
  v231 = v323;
  swift_beginAccess(v323, v399, 33, 0);
  AnyCancellable.store(in:)(v231);
  swift_endAccess(v399);
  swift_release(v229);
  swift_beginAccess(v384 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentlyPlayingTranslationID, v399, 33, 0);
  v232 = v392;
  Published.projectedValue.getter(v395);
  v233 = swift_endAccess(v399);
  v234 = v199;
  *(_QWORD *)&v399[0] = static OS_dispatch_queue.main.getter(v233);
  v218(v162, 1, 1, v217);
  v235 = v218;
  v236 = v371;
  v237 = v393;
  Publisher.receive<A>(on:options:)(v399, v162, v393, v234, v381, v222);
  sub_10000A020(v162, &qword_100296BE0);

  v382(v232, v237);
  v238 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v238 + 16, v396);
  v384 = sub_100012334(&qword_10028B5C8, &qword_10028B5B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v239 = v386;
  v240 = Publisher<>.sink(receiveValue:)(sub_10005DCA4, v238, v386, v384);
  v241 = swift_release(v238);
  v383 = *(char **)(v359 + 8);
  ((void (*)(char *, uint64_t, __n128))v383)(v236, v239, v241);
  swift_beginAccess(v231, v399, 33, 0);
  v242 = v231;
  AnyCancellable.store(in:)(v231);
  swift_endAccess(v399);
  swift_release(v240);
  swift_beginAccess(v317, v399, 33, 0);
  v243 = sub_100006DF4(&qword_10028F270);
  v244 = (uint64_t)v360;
  Published.projectedValue.getter(v243);
  swift_endAccess(v399);
  swift_beginAccess(v315, v399, 33, 0);
  v245 = (uint64_t)v361;
  Published.projectedValue.getter(v243);
  swift_endAccess(v399);
  v246 = (uint64_t)v363;
  LanguagesService.$models.getter(v247);
  v248 = sub_1000B054C(v244, v245, v246);
  (*(void (**)(uint64_t, uint64_t))(v365 + 8))(v246, v367);
  v249 = *(void (**)(uint64_t, uint64_t))(v362 + 8);
  v250 = v245;
  v251 = v364;
  v249(v250, v364);
  v252 = ((uint64_t (*)(uint64_t, uint64_t))v249)(v244, v251);
  *(_QWORD *)&v399[0] = v248;
  v253 = v379;
  v397 = (id)static OS_dispatch_queue.main.getter(v252);
  v254 = v380;
  v235(v162, 1, 1, v380);
  v255 = sub_100006DF4(&qword_10028DFA0);
  v256 = sub_100012334(&qword_10028DFA8, &qword_10028DFA0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v257 = v368;
  v258 = v253;
  v259 = v390;
  Publisher.receive<A>(on:options:)(&v397, v162, v255, v253, v256, v390);
  sub_10000A020(v162, &qword_100296BE0);

  swift_release(*(_QWORD *)&v399[0]);
  v260 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v260 + 16, v396);
  v261 = sub_100012334(&qword_10028DFB0, &qword_10028DE98, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v262 = v370;
  v263 = Publisher<>.sink(receiveValue:)(sub_10005DCAC, v260, v370, v261);
  v264 = swift_release(v260);
  (*(void (**)(char *, uint64_t, __n128))(v369 + 8))(v257, v262, v264);
  swift_beginAccess(v242, v399, 33, 0);
  AnyCancellable.store(in:)(v242);
  swift_endAccess(v399);
  swift_release(v263);
  swift_beginAccess(v387 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager__allowedTranslationID, v399, 33, 0);
  v265 = v392;
  Published.projectedValue.getter(v395);
  v266 = swift_endAccess(v399);
  *(_QWORD *)&v399[0] = static OS_dispatch_queue.main.getter(v266);
  v267 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v391;
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))v391)(v162, 1, 1, v254);
  v268 = v393;
  Publisher.receive<A>(on:options:)(v399, v162, v393, v258, v381, v259);
  sub_10000A020(v162, &qword_100296BE0);

  v382(v265, v268);
  v269 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v269 + 16, v396);
  v270 = v386;
  v271 = Publisher<>.sink(receiveValue:)(sub_10005DCB4, v269, v386, v384);
  v272 = swift_release(v269);
  ((void (*)(char *, uint64_t, __n128))v383)(v236, v270, v272);
  swift_beginAccess(v242, v399, 33, 0);
  AnyCancellable.store(in:)(v242);
  swift_endAccess(v399);
  v273 = swift_release(v271);
  v274 = v372;
  v275 = LanguagesService.$localeModalities.getter(v273);
  *(_QWORD *)&v399[0] = static OS_dispatch_queue.main.getter(v275);
  v276 = v254;
  v277 = v396;
  v267(v162, 1, 1, v276);
  v278 = sub_100012334(&qword_10028DFB8, &qword_10028DE80, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v279 = v375;
  v280 = v374;
  Publisher.receive<A>(on:options:)(v399, v162, v374, v258, v278, v259);
  sub_10000A020(v162, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v373 + 8))(v274, v280);
  v281 = swift_allocObject(&unk_100265A38, 24, 7);
  swift_weakInit(v281 + 16, v277);
  v282 = sub_100012334(&qword_10028DFC0, &qword_10028DE88, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v283 = v377;
  v284 = Publisher<>.sink(receiveValue:)(sub_10005DCBC, v281, v377, v282);
  v285 = swift_release(v281);
  (*(void (**)(char *, uint64_t, __n128))(v376 + 8))(v279, v283, v285);
  swift_beginAccess(v242, v399, 33, 0);
  AnyCancellable.store(in:)(v242);
  swift_endAccess(v399);
  swift_release(v284);
  v286 = *(_QWORD *)(v277 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_speechManager)
       + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
  *(_QWORD *)(v286 + 8) = &off_1002659F0;
  swift_unknownObjectWeakAssign(v286, v277);
  v287 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v288 = qword_10028A3B8;
  swift_retain(v277);
  if (v288 != -1)
    swift_once(&qword_10028A3B8, sub_10004A578);
  objc_msgSend(v287, "addObserver:selector:name:object:", v277, "openTranslation:", qword_1002AA0B8, 0);

  v289 = swift_release(v277);
  v290 = v388;
  v291 = v316;
  ((void (*)(char *, uint64_t, __n128))v316)(v389, v388, v289);
  v291(v378, v290);
  return v277;
}

unint64_t sub_10005D580(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100261DB8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

void sub_10005D5C8(float a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;
  double v7;
  uint64_t v8;

  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA470);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.info.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    v7 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v5 + 4);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Speech: input detected at %f level.", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10005D6F4()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);

  v1 = (int *)type metadata accessor for StreamingRequestInfo(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(v0[2]);
  if (v0[8])
    sub_100009C08(v0 + 5);
  v5 = v3 | 7;
  v6 = (v3 + 88) & ~v3;
  v7 = v6 + v4;
  swift_release(v0[10]);
  v8 = (char *)v0 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v1[5] + 8]);
  v11 = &v8[v1[6]];
  v12 = type metadata accessor for Locale(0);
  v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(&v8[v1[7]], v12);
  v10(&v8[v1[10]], v9);
  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_10005D7FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StreamingRequestInfo(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  v8 = v1 + 40;
  v9 = *(_QWORD *)(v1 + 80);
  v10 = v1 + ((v4 + 88) & ~v4);
  v11 = (_QWORD *)swift_task_alloc(dword_10028DE3C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10003EFA0;
  return sub_1000589D0(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10005D8A8()
{
  uint64_t v0;

  return sub_100058410(v0);
}

uint64_t sub_10005D8B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (int *)type metadata accessor for TranslateTip(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[7]);
  if (*v7)
    swift_release(v7[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005D96C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslateTip(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10028DE4C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_1000586AC(a1, v5, v6, v7, v8);
}

uint64_t sub_10005DA00@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E90A8, (uint64_t)&unk_1001E90D0, a2);
}

uint64_t sub_10005DA24(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E90A8, (uint64_t)&unk_1001E90D0);
}

uint64_t sub_10005DA48@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059C70(a1, (uint64_t)&unk_1001E90F0, (uint64_t)&unk_1001E9118, a2);
}

uint64_t sub_10005DA6C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059CFC(a1, a2, a3, a4, (uint64_t)&unk_1001E90F0, (uint64_t)&unk_1001E9118);
}

uint64_t sub_10005DA90()
{
  return sub_10003EC10(40);
}

uint64_t sub_10005DA98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10028DE5C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_10005851C(a1, v4, v5, v6);
}

uint64_t sub_10005DB04@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9138, (uint64_t)&unk_1001E9160, a2);
}

uint64_t sub_10005DB28(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9138, (uint64_t)&unk_1001E9160);
}

uint64_t sub_10005DB4C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001E9180, (uint64_t)&unk_1001E91A8, a2);
}

uint64_t sub_10005DB70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004A288(a1, a2, a3, a4, (uint64_t)&unk_1001E9180, (uint64_t)&unk_1001E91A8, (void (*)(uint64_t))sub_10004A5AC);
}

uint64_t sub_10005DB9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005DBC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10028DE6C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003EFA0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10028DE68 + dword_10028DE68))(a1, v4);
}

uint64_t sub_10005DC30(char *a1)
{
  uint64_t v1;

  return sub_10004B4F8(a1, v1);
}

uint64_t sub_10005DC38(char a1, char a2)
{
  uint64_t v2;

  return sub_10004B5C8(a1, a2, v2);
}

uint64_t sub_10005DC40(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

double sub_10005DC68(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_10004B6CC(a1, a2, a3, v3);
}

uint64_t sub_10005DC70(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*a1, a1[1], a1[2]);
}

double sub_10005DC9C(uint64_t a1)
{
  uint64_t v1;

  return sub_10004B928(a1, v1);
}

double sub_10005DCA4(uint64_t a1)
{
  uint64_t v1;

  return sub_10004BB08(a1, v1);
}

uint64_t sub_10005DCAC(char *a1)
{
  uint64_t v1;

  return sub_10004BBCC(a1, v1);
}

double sub_10005DCB4(uint64_t a1)
{
  uint64_t v1;

  return sub_10004BC54(a1, v1);
}

double sub_10005DCBC(void **a1)
{
  uint64_t v1;

  return sub_10004BCA8(a1, v1);
}

void sub_10005DCCC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 24) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10005DCDC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E91F0, (uint64_t)&unk_1001E9218, a2);
}

uint64_t sub_10005DD00(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E91F0, (uint64_t)&unk_1001E9218);
}

uint64_t sub_10005DD3C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E92F0, (uint64_t)&unk_1001E9318, a2);
}

uint64_t sub_10005DD60(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E92F0, (uint64_t)&unk_1001E9318);
}

void sub_10005DD84()
{
  sub_10004D044(0, 0);
  sub_10004F770();
}

uint64_t sub_10005DDA0()
{
  uint64_t v0;

  return sub_1001A0FCC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10005DDA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005DDEC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9338, (uint64_t)&unk_1001E9360, a2);
}

uint64_t sub_10005DE10(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9338, (uint64_t)&unk_1001E9360);
}

uint64_t sub_10005DE34@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9380, (uint64_t)&unk_1001E93A8, a2);
}

uint64_t sub_10005DE58(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9380, (uint64_t)&unk_1001E93A8);
}

unint64_t sub_10005DE7C()
{
  unint64_t result;

  result = qword_100295460;
  if (!qword_100295460)
  {
    result = swift_getWitnessTable(&unk_1001E97E4, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys);
    atomic_store(result, (unint64_t *)&qword_100295460);
  }
  return result;
}

uint64_t sub_10005DEC0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10005DEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002948B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005DF3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_10005DF60()
{
  return sub_1001385D0();
}

uint64_t sub_10005DF68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005DF78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005DF80()
{
  uint64_t v0;

  return sub_100053834(v0);
}

unint64_t sub_10005DFA8()
{
  uint64_t v0;

  return sub_100051B10(v0, (uint64_t)"copyTranslation", 15, (uint64_t)"app/translate/input", 19);
}

uint64_t sub_10005DFE0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059D70(a1, (uint64_t)&unk_1001E9530, (uint64_t)&unk_1001E9558, a2);
}

uint64_t sub_10005E004(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059DF0(a1, a2, a3, a4, (uint64_t)&unk_1001E9530, (uint64_t)&unk_1001E9558);
}

uint64_t sub_10005E028@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9578, (uint64_t)&unk_1001E95A0, a2);
}

uint64_t sub_10005E04C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9578, (uint64_t)&unk_1001E95A0);
}

uint64_t sub_10005E070@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E95C0, (uint64_t)&unk_1001E95E8, a2);
}

uint64_t sub_10005E094(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E95C0, (uint64_t)&unk_1001E95E8);
}

uint64_t sub_10005E0B8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9608, (uint64_t)&unk_1001E9630, a2);
}

uint64_t sub_10005E0DC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9608, (uint64_t)&unk_1001E9630);
}

unint64_t sub_10005E100()
{
  uint64_t v0;

  return sub_100051B10(v0, (uint64_t)"swapLanguages", 13, (uint64_t)"app/translate", 13);
}

uint64_t sub_10005E130@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059D70(a1, (uint64_t)&unk_1001E9650, (uint64_t)&unk_1001E9678, a2);
}

uint64_t sub_10005E154(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059DF0(a1, a2, a3, a4, (uint64_t)&unk_1001E9650, (uint64_t)&unk_1001E9678);
}

uint64_t sub_10005E178@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001E9698, (uint64_t)&unk_1001E96C0, a2);
}

uint64_t sub_10005E19C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9698, (uint64_t)&unk_1001E96C0);
}

uint64_t sub_10005E1C0(void **a1)
{
  uint64_t v1;

  return sub_10004CF0C(a1, v1);
}

uint64_t sub_10005E1C8(uint64_t a1)
{
  uint64_t v1;

  return sub_100051FE4(a1, v1);
}

uint64_t sub_10005E1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005E244(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Locale(0) - 8) + 80);
  return sub_10004CC30(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_10005E294()
{
  return sub_10003EC10(40);
}

uint64_t sub_10005E29C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10028DFE4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_100052124(a1, v4, v5, v6);
}

uint64_t getEnumTagSinglePayload for ComposeTranslationViewModel.OpenInTranslateKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ComposeTranslationViewModel.OpenInTranslateKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10005E3F4 + 4 * byte_1001E8CB5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10005E428 + 4 * byte_1001E8CB0[v4]))();
}

uint64_t sub_10005E428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005E430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005E438);
  return result;
}

uint64_t sub_10005E444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005E44CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10005E450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005E458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComposeTranslationViewModel.OpenInTranslateKeys()
{
  return &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys;
}

unint64_t sub_10005E478()
{
  unint64_t result;

  result = qword_10028DFF8;
  if (!qword_10028DFF8)
  {
    result = swift_getWitnessTable(&unk_1001E97BC, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys);
    atomic_store(result, (unint64_t *)&qword_10028DFF8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ComposeTranslationViewModel.SupplementaryControlVisibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10005E508 + 4 * byte_1001E8CBF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10005E53C + 4 * byte_1001E8CBA[v4]))();
}

uint64_t sub_10005E53C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005E544(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005E54CLL);
  return result;
}

uint64_t sub_10005E558(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005E560);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10005E564(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005E56C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComposeTranslationViewModel.SupplementaryControlVisibility()
{
  return &type metadata for ComposeTranslationViewModel.SupplementaryControlVisibility;
}

unint64_t sub_10005E58C()
{
  unint64_t result;

  result = qword_10028E000;
  if (!qword_10028E000)
  {
    result = swift_getWitnessTable(&unk_1001E9890, &type metadata for ComposeTranslationViewModel.SupplementaryControlVisibility);
    atomic_store(result, (unint64_t *)&qword_10028E000);
  }
  return result;
}

uint64_t sub_10005E5D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10028E00C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D380;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10028E008 + dword_10028E008))(a1, v4);
}

void sub_10005E678()
{
  sub_10005DCCC();
}

id sub_10005E68C(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  objc_class *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  objc_super v24;

  v9 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_layoutStack;
  v10 = objc_allocWithZone((Class)UIStackView);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_titleLabel;
  *(_QWORD *)&v11[v12] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button;
  v14 = (void *)objc_opt_self(UIButton);
  *(_QWORD *)&v11[v13] = objc_msgSend(v14, "buttonWithType:", 0);
  v15 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option2Button;
  *(_QWORD *)&v11[v15] = objc_msgSend(v14, "buttonWithType:", 0);
  v16 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 10);
  v17 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v16);
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_background] = v17;
  v18 = (objc_class *)type metadata accessor for SeparatorView();
  objc_allocWithZone(v18);
  v19 = v16;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_separator1] = sub_10015D78C(v19);
  v20 = objc_allocWithZone(v18);
  v21 = v19;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_separator2] = sub_10015D78C(v21);

  v24.receiver = v11;
  v24.super_class = (Class)type metadata accessor for ConfirmationView();
  v22 = objc_msgSendSuper2(&v24, "initWithFrame:", a1, a2, a3, a4);
  sub_10005E8D4();
  sub_10005F00C();

  return v22;
}

void sub_10005E8D4()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;

  v1 = (void *)objc_opt_self(UIColor);
  v2 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v2);

  v3 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_layoutStack];
  v4 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v3, "setBackgroundColor:", v4);

  v5 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_background];
  v6 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v5, "setBackgroundColor:", v6);

  objc_msgSend(v0, "setClipsToBounds:", 1);
  v7 = objc_msgSend(v0, "layer");
  objc_msgSend(v7, "setCornerRadius:", 10.0);

  objc_msgSend(v0, "addSubview:", v5);
  v8 = objc_msgSend(v5, "contentView");
  objc_msgSend(v8, "addSubview:", v3);

  objc_msgSend(v3, "setAxis:", 1);
  objc_msgSend(v3, "setAlignment:", 0);
  objc_msgSend(v3, "setDistribution:", 3);
  objc_msgSend(v3, "setSpacing:", 10.0);
  objc_msgSend(v3, "setLayoutMarginsRelativeArrangement:", 1);
  objc_msgSend(v3, "setDirectionalLayoutMargins:", 10.0, 0.0, 10.0, 0.0);
  v9 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_titleLabel];
  objc_msgSend(v3, "addArrangedSubview:", v9);
  objc_msgSend(v3, "addArrangedSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_separator1]);
  v10 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button];
  objc_msgSend(v3, "addArrangedSubview:", v10);
  objc_msgSend(v3, "addArrangedSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_separator2]);
  v36 = *(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option2Button];
  objc_msgSend(v3, "addArrangedSubview:");
  v11 = objc_msgSend(v1, "secondaryLabelColor");
  objc_msgSend(v9, "setTextColor:", v11);

  objc_msgSend(v9, "setTextAlignment:", 1);
  objc_msgSend(v9, "setAdjustsFontForContentSizeCategory:", 1);
  v12 = (void *)objc_opt_self(UIFontDescriptor);
  v13 = objc_msgSend(v12, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleSubheadline, 0);
  v14 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v13, "pointSize");
  v15 = objc_msgSend(v14, "systemFontOfSize:weight:");
  v16 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleSubheadline);
  v17 = objc_msgSend(v16, "scaledFontForFont:maximumPointSize:", v15, 1.79769313e308);

  objc_msgSend(v9, "setFont:", v17);
  objc_msgSend(v9, "setAdjustsFontSizeToFitWidth:", 1);
  objc_msgSend(v9, "setMinimumScaleFactor:", 0.1);
  objc_msgSend(v9, "setNumberOfLines:", 0);
  LODWORD(v18) = 1132068864;
  objc_msgSend(v9, "setContentCompressionResistancePriority:forAxis:", 1, v18);
  v19 = objc_msgSend(v1, "labelColor");
  objc_msgSend(v10, "setTitleColor:forState:", v19, 0);

  v20 = objc_msgSend(v10, "titleLabel");
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v12, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, 0);
    objc_msgSend(v22, "pointSize");
    v23 = objc_msgSend(v14, "systemFontOfSize:weight:");
    v24 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
    v25 = objc_msgSend(v24, "scaledFontForFont:maximumPointSize:", v23, 1.79769313e308);

    objc_msgSend(v21, "setFont:", v25);
  }
  v26 = objc_msgSend(v10, "titleLabel");
  objc_msgSend(v26, "setAdjustsFontSizeToFitWidth:", 1);

  v27 = objc_msgSend(v10, "titleLabel");
  objc_msgSend(v27, "setMinimumScaleFactor:", 0.1);

  v28 = objc_msgSend(v1, "labelColor");
  objc_msgSend(v36, "setTitleColor:forState:", v28, 0);

  v29 = objc_msgSend(v36, "titleLabel");
  if (v29)
  {
    v30 = v29;
    v31 = objc_msgSend(v12, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, 0);
    objc_msgSend(v31, "pointSize");
    v32 = objc_msgSend(v14, "systemFontOfSize:weight:");
    v33 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
    v34 = objc_msgSend(v33, "scaledFontForFont:maximumPointSize:", v32, 1.79769313e308);

    objc_msgSend(v30, "setFont:", v34);
  }
  v35 = objc_msgSend(v36, "titleLabel");
  objc_msgSend(v35, "setAdjustsFontSizeToFitWidth:", 1);

  v37 = objc_msgSend(v36, "titleLabel");
  objc_msgSend(v37, "setMinimumScaleFactor:", 0.1);

}

void sub_10005F00C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  Class isa;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_background);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_layoutStack);
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  sub_1001DB5F8(v2);
  sub_1001DB5F8(v3);
  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001E98F0;
  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_separator1), "heightAnchor"));
  v8 = objc_msgSend(v7, "constraintEqualToConstant:", 1.0);

  *(_QWORD *)(v6 + 32) = v8;
  v9 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_separator2), "heightAnchor"));
  v10 = objc_msgSend(v9, "constraintEqualToConstant:", 1.0);

  *(_QWORD *)(v6 + 40) = v10;
  v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_titleLabel), "heightAnchor"));
  v12 = objc_msgSend(v11, "constraintGreaterThanOrEqualToConstant:", 37.0);

  *(_QWORD *)(v6 + 48) = v12;
  v13 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button);
  v14 = objc_msgSend(v13, "heightAnchor");
  v15 = objc_msgSend(v14, "constraintGreaterThanOrEqualToConstant:", 44.0);

  *(_QWORD *)(v6 + 56) = v15;
  v16 = objc_msgSend(v13, "heightAnchor");
  v17 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option2Button), "heightAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

  *(_QWORD *)(v6 + 64) = v18;
  specialized Array._endMutation()(v19);
  sub_100025254();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

}

id sub_10005F29C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConfirmationView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConfirmationView()
{
  return objc_opt_self(_TtC17SequoiaTranslator16ConfirmationView);
}

void sub_10005F374()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_layoutStack;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_titleLabel;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button;
  v4 = (void *)objc_opt_self(UIButton);
  *(_QWORD *)&v0[v3] = objc_msgSend(v4, "buttonWithType:", 0);
  v5 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option2Button;
  *(_QWORD *)&v0[v5] = objc_msgSend(v4, "buttonWithType:", 0);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/ConfirmationView.swift", 40, 2, 35, 0);
  __break(1u);
}

uint64_t destroy for ConversationBubbleContextMenu(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));

  swift_release(*(_QWORD *)(a1 + 72));
  return swift_release(*(_QWORD *)(a1 + 88));
}

uint64_t initializeWithCopy for ConversationBubbleContextMenu(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  __int128 v11;
  __int128 v12;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  v7 = a2[5];
  v6 = a2[6];
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  v11 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 56) = v11;
  v8 = a2[11];
  v12 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 88) = v8;
  swift_retain(v3);
  swift_retain(v5);
  swift_bridgeObjectRetain(v7);
  v9 = (id)v11;
  swift_retain(v12);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for ConversationBubbleContextMenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = (void *)a2[7];
  v11 = (void *)a1[7];
  a1[7] = (uint64_t)v10;
  v12 = v10;

  v13 = a2[9];
  v14 = a1[9];
  a1[8] = a2[8];
  a1[9] = v13;
  swift_retain(v13);
  swift_release(v14);
  v16 = a2[10];
  v15 = a2[11];
  v17 = a1[11];
  a1[10] = v16;
  a1[11] = v15;
  swift_retain(v15);
  swift_release(v17);
  return a1;
}

__n128 initializeWithTake for ConversationBubbleContextMenu(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t *assignWithTake for ConversationBubbleContextMenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v7 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];

  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  swift_release(a1[9]);
  v8 = a2[11];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v9 = a1[11];
  a1[11] = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationBubbleContextMenu(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationBubbleContextMenu(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationBubbleContextMenu()
{
  return &type metadata for ConversationBubbleContextMenu;
}

uint64_t sub_10005F7B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100210FA8, 1);
}

uint64_t sub_10005F7C8@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  int *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char v97[16];
  uint64_t v98;

  v81 = a1;
  v2 = sub_100006DF4(&qword_10028E080);
  __chkstk_darwin(v2);
  v4 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100006DF4(&qword_10028E088);
  v94 = *(_QWORD *)(v80 - 8);
  v5 = __chkstk_darwin(v80);
  v91 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v96 = (char *)&v77 - v7;
  v8 = type metadata accessor for Divider(0);
  v9 = *(_QWORD *)(v8 - 8);
  v89 = v8;
  v90 = v9;
  v10 = __chkstk_darwin(v8);
  v93 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v87 = (char *)&v77 - v13;
  v14 = __chkstk_darwin(v12);
  v95 = (char *)&v77 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v77 - v16;
  v86 = sub_100006DF4(&qword_10028E090);
  v88 = *(_QWORD *)(v86 - 8);
  v18 = __chkstk_darwin(v86);
  v92 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v85 = (char *)&v77 - v21;
  v22 = __chkstk_darwin(v20);
  v83 = (char *)&v77 - v23;
  v24 = __chkstk_darwin(v22);
  v82 = (char *)&v77 - v25;
  v26 = __chkstk_darwin(v24);
  v84 = (char *)&v77 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v77 - v28;
  v30 = (_OWORD *)swift_allocObject(&unk_100266018, 112, 7);
  v31 = *(_OWORD *)(v1 + 48);
  v30[3] = *(_OWORD *)(v1 + 32);
  v30[4] = v31;
  v32 = *(_OWORD *)(v1 + 80);
  v30[5] = *(_OWORD *)(v1 + 64);
  v30[6] = v32;
  v33 = *(_OWORD *)(v1 + 16);
  v30[1] = *(_OWORD *)v1;
  v30[2] = v33;
  sub_100060748((uint64_t *)v1);
  v34 = sub_100006DF4(&qword_10028E098);
  v35 = sub_1000607B8();
  v79 = v29;
  v36 = Button.init(action:label:)(sub_100060740, v30, sub_10005FF1C, 0, v34, v35);
  v78 = v17;
  Divider.init()(v36);
  v37 = (_OWORD *)swift_allocObject(&unk_100266040, 112, 7);
  v38 = *(_OWORD *)(v1 + 48);
  v37[3] = *(_OWORD *)(v1 + 32);
  v37[4] = v38;
  v39 = *(_OWORD *)(v1 + 80);
  v37[5] = *(_OWORD *)(v1 + 64);
  v37[6] = v39;
  v40 = *(_OWORD *)(v1 + 16);
  v37[1] = *(_OWORD *)v1;
  v37[2] = v40;
  sub_100060748((uint64_t *)v1);
  Button.init(action:label:)(sub_100060858, v37, sub_10006013C, 0, v34, v35);
  v41 = (_OWORD *)swift_allocObject(&unk_100266068, 112, 7);
  v42 = *(_OWORD *)(v1 + 48);
  v41[3] = *(_OWORD *)(v1 + 32);
  v41[4] = v42;
  v43 = *(_OWORD *)(v1 + 80);
  v41[5] = *(_OWORD *)(v1 + 64);
  v41[6] = v43;
  v44 = *(_OWORD *)(v1 + 16);
  v41[1] = *(_OWORD *)v1;
  v41[2] = v44;
  v98 = v1;
  sub_100060748((uint64_t *)v1);
  v45 = sub_100006DF4(&qword_10028E0A8);
  v46 = sub_100060874();
  v47 = Button.init(action:label:)(sub_100060864, v41, sub_10006086C, v97, v45, v46);
  v48 = Divider.init()(v47);
  static ButtonRole.destructive.getter(v48);
  v49 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v4, 0, 1, v49);
  v50 = (_OWORD *)swift_allocObject(&unk_100266090, 112, 7);
  v51 = *(_OWORD *)(v1 + 48);
  v50[3] = *(_OWORD *)(v1 + 32);
  v50[4] = v51;
  v52 = *(_OWORD *)(v1 + 80);
  v50[5] = *(_OWORD *)(v1 + 64);
  v50[6] = v52;
  v53 = *(_OWORD *)(v1 + 16);
  v50[1] = *(_OWORD *)v1;
  v50[2] = v53;
  sub_100060748((uint64_t *)v1);
  v54 = v82;
  Button.init(role:action:label:)(v4, sub_100060928, v50, sub_100060610, 0, v34, v35);
  v55 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  v56 = v83;
  v57 = v86;
  v55(v83, v29, v86);
  v58 = v89;
  v59 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v60 = v87;
  v59(v87, v17, v89);
  v61 = v85;
  v55(v85, v84, v57);
  v62 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  v63 = v91;
  v64 = v80;
  v62(v91, v96, v80);
  v59(v93, v95, v58);
  v65 = v54;
  v66 = v86;
  v55(v92, v65, v86);
  v67 = v81;
  v55(v81, v56, v66);
  v68 = (int *)sub_100006DF4(&qword_10028E0B8);
  v69 = v60;
  v70 = v89;
  v59(&v67[v68[12]], v69, v89);
  v55(&v67[v68[16]], v61, v66);
  v62(&v67[v68[20]], v63, v64);
  v71 = v93;
  v59(&v67[v68[24]], v93, v70);
  v72 = v92;
  v55(&v67[v68[28]], v92, v66);
  v73 = *(void (**)(char *, uint64_t))(v88 + 8);
  v73(v82, v66);
  v74 = *(void (**)(char *, uint64_t))(v90 + 8);
  v74(v95, v70);
  v75 = *(void (**)(char *, uint64_t))(v94 + 8);
  v75(v96, v64);
  v73(v84, v66);
  v74(v78, v70);
  v73(v79, v66);
  v73(v72, v66);
  v74(v71, v70);
  v75(v91, v64);
  v73(v85, v66);
  v74(v87, v70);
  return ((uint64_t (*)(char *, uint64_t))v73)(v83, v66);
}

void sub_10005FDF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t v15;

  v2 = type metadata accessor for UTType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    v8 = *(_QWORD *)(a1 + 40);
  else
    v8 = 0xE000000000000000;
  swift_bridgeObjectRetain(v7);
  v9 = String._bridgeToObjectiveC()();
  v10 = swift_bridgeObjectRelease(v8);
  v11 = static UTType.plainText.getter(v10);
  UTType.identifier.getter(v11);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v6, "setValue:forPasteboardType:", v9, v14);

}

uint64_t sub_10005FF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_100006DF4(&qword_10028AB30);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = LocalizedStringKey.init(stringLiteral:)(1498435395, 0xE400000000000000);
  Label<>.init(_:systemImage:)(v4);
  v5 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityIdentifier(_:)(2037411683, 0xE400000000000000, v0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100060008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v13 = *(_OWORD *)(a1 + 48);
    v2 = *((_QWORD *)&v13 + 1);
    v3 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
    v4 = (void *)objc_opt_self(UIApplication);
    swift_retain(v1);
    sub_100060A28((uint64_t)&v13);
    v5 = objc_msgSend(v4, "sharedApplication");
    objc_msgSend(v5, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);

    KeyPath = swift_getKeyPath(&unk_1001E9990);
    v7 = swift_getKeyPath(&unk_1001E99B8);
    v12[0] = v2;
    v12[1] = v3;
    return static Published.subscript.setter(v12, v1, KeyPath, v7);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = type metadata accessor for SceneContext(0);
    v11 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v9, v10, v11);
    __break(1u);
  }
  return result;
}

uint64_t sub_10006013C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_100006DF4(&qword_10028AB30);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001001FA2C0);
  Label<>.init(_:systemImage:)(v4);
  v5 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityIdentifier(_:)(0x6C6C7546776F6873, 0xEE006E6565726353, v0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10006024C(uint64_t a1)
{
  void (*v1)(id, uint64_t);
  uint64_t v2;
  __int128 v4;

  v1 = *(void (**)(id, uint64_t))(a1 + 64);
  v4 = *(_OWORD *)(a1 + 48);
  v2 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
  v1(*((id *)&v4 + 1), v2);
  return sub_100060930((uint64_t)&v4);
}

uint64_t sub_1000602B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v25;

  v2 = sub_100006DF4(&qword_10028E0C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028AB30);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028E098);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v25 - v13;
  v25 = *(_OWORD *)(a1 + 48);
  v15 = *((id *)&v25 + 1);
  LOBYTE(a1) = dispatch thunk of PersistedTranslation.isFavorite.getter();
  sub_100060930((uint64_t)&v25);
  if ((a1 & 1) != 0)
  {
    v16 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x80000001001FA280);
    Label<>.init(_:systemImage:)(v16);
    v17 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    View.accessibilityIdentifier(_:)(0xD000000000000013, 0x80000001001FA2A0, v5, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100060958((uint64_t)v12, (uint64_t)v14);
    sub_1000609A0((uint64_t)v14, (uint64_t)v4);
    v18 = v4;
    v19 = v2;
    v20 = 0;
  }
  else
  {
    v21 = LocalizedStringKey.init(stringLiteral:)(0x4F5641465F444441, 0xED00005345544952);
    Label<>.init(_:systemImage:)(v21);
    v22 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    View.accessibilityIdentifier(_:)(0x726F766146646461, 0xEC00000073657469, v5, v22);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100060958((uint64_t)v12, (uint64_t)v14);
    sub_1000609A0((uint64_t)v14, (uint64_t)v4);
    v18 = v4;
    v19 = v2;
    v20 = 1;
  }
  swift_storeEnumTagMultiPayload(v18, v19, v20);
  v23 = sub_1000607B8();
  _ConditionalContent<>.init(storage:)(v4, v9, v9, v23, v23);
  return sub_1000609E8((uint64_t)v14);
}

uint64_t sub_1000605A4(uint64_t a1)
{
  void (*v1)(id, uint64_t);
  uint64_t v2;
  __int128 v4;

  v1 = *(void (**)(id, uint64_t))(a1 + 80);
  v4 = *(_OWORD *)(a1 + 48);
  v2 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
  v1(*((id *)&v4 + 1), v2);
  return sub_100060930((uint64_t)&v4);
}

uint64_t sub_100060610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_100006DF4(&qword_10028AB30);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = LocalizedStringKey.init(stringLiteral:)(0x4554454C4544, 0xE600000000000000);
  Label<>.init(_:systemImage:)(v4);
  v5 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityIdentifier(_:)(0x6574656C6564, 0xE600000000000000, v0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000606FC@<X0>(char *a1@<X8>)
{
  return sub_10005F7C8(a1);
}

void sub_100060740()
{
  uint64_t v0;

  sub_10005FDF0(v0 + 16);
}

uint64_t *sub_100060748(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = (void *)a1[7];
  v5 = a1[9];
  v6 = a1[11];
  swift_bridgeObjectRetain(a1[5]);
  v7 = v4;
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

unint64_t sub_1000607B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E0A0;
  if (!qword_10028E0A0)
  {
    v1 = sub_1000070BC(&qword_10028E098);
    sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028E0A0);
  }
  return result;
}

uint64_t sub_100060858()
{
  uint64_t v0;

  return sub_100060008(v0 + 16);
}

uint64_t sub_100060864()
{
  uint64_t v0;

  return sub_10006024C(v0 + 16);
}

uint64_t sub_10006086C()
{
  uint64_t v0;

  return sub_1000602B8(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100060874()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E0B0;
  if (!qword_10028E0B0)
  {
    v1 = sub_1000070BC(&qword_10028E0A8);
    sub_1000607B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028E0B0);
  }
  return result;
}

uint64_t sub_1000608DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100060928()
{
  uint64_t v0;

  return sub_1000605A4(v0 + 16);
}

uint64_t sub_100060930(uint64_t a1)
{

  return a1;
}

uint64_t sub_100060958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028E098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000609A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028E098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000609E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_10028E098);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100060A28(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t sub_100060A58()
{
  return sub_100012334(&qword_10028E0C8, &qword_10028E0D0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t getEnumTagSinglePayload for ConversationBubbleStyle(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for ConversationBubbleStyle()
{
  return &type metadata for ConversationBubbleStyle;
}

uint64_t storeEnumTagSinglePayload for ConversationBubbleStyle.BubbleAlignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100060B24 + 4 * byte_1001E99E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100060B58 + 4 * byte_1001E99E0[v4]))();
}

uint64_t sub_100060B58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060B60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100060B68);
  return result;
}

uint64_t sub_100060B74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100060B7CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100060B80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060B88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationBubbleStyle.BubbleAlignment()
{
  return &type metadata for ConversationBubbleStyle.BubbleAlignment;
}

unint64_t sub_100060BA8()
{
  unint64_t result;

  result = qword_10028E0D8;
  if (!qword_10028E0D8)
  {
    result = swift_getWitnessTable(&unk_1001E9A58, &type metadata for ConversationBubbleStyle.BubbleAlignment);
    atomic_store(result, (unint64_t *)&qword_10028E0D8);
  }
  return result;
}

uint64_t sub_100060BEC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  double v22;
  char v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  char v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v69 = a1;
  v78 = a3;
  v74 = a2 & 1;
  v6 = type metadata accessor for ContentShapeKinds(0);
  v76 = *(_QWORD *)(v6 - 8);
  v77 = v6;
  __chkstk_darwin(v6);
  v75 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028E0E0);
  __chkstk_darwin(v8);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100006DF4(&qword_10028E0E8);
  __chkstk_darwin(v68);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100006DF4(&qword_10028E0F0);
  __chkstk_darwin(v70);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100006DF4(&qword_10028E0F8);
  __chkstk_darwin(v73);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100006DF4(&qword_10028E100);
  __chkstk_darwin(v72);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100006DF4(&qword_10028E108);
  v19 = __chkstk_darwin(v71);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0.0;
  v23 = static Edge.Set.leading.getter(v19);
  v24 = 0.0;
  if ((a2 & 1) == 0)
  {
    if (qword_10028A3A0 != -1)
      swift_once(&qword_10028A3A0, sub_10002E454);
    v24 = *(double *)&qword_1002AA0A8;
  }
  v25 = EdgeInsets.init(_all:)(v24 + a4);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = sub_100006DF4(&qword_10028E110);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v10, v69, v32);
  v34 = &v10[*(int *)(v8 + 36)];
  *v34 = v23;
  *((double *)v34 + 1) = v25;
  *((_QWORD *)v34 + 2) = v27;
  *((_QWORD *)v34 + 3) = v29;
  *((_QWORD *)v34 + 4) = v31;
  v34[40] = 0;
  v35 = static Edge.Set.trailing.getter(v33);
  v36 = v74;
  if (v74)
  {
    if (qword_10028A3A0 != -1)
      swift_once(&qword_10028A3A0, sub_10002E454);
    v22 = *(double *)&qword_1002AA0A8;
  }
  v37 = EdgeInsets.init(_all:)(v22 + a4);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_10000B074((uint64_t)v10, (uint64_t)v12, &qword_10028E0E0);
  v44 = &v12[*(int *)(v68 + 36)];
  *v44 = v35;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_10000A020((uint64_t)v10, &qword_10028E0E0);
  v46 = static Edge.Set.vertical.getter(v45);
  v47 = EdgeInsets.init(_all:)(a4);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  sub_10000B074((uint64_t)v12, (uint64_t)v14, &qword_10028E0E8);
  v54 = &v14[*(int *)(v70 + 36)];
  *v54 = v46;
  *((double *)v54 + 1) = v47;
  *((_QWORD *)v54 + 2) = v49;
  *((_QWORD *)v54 + 3) = v51;
  *((_QWORD *)v54 + 4) = v53;
  v54[40] = 0;
  sub_10000A020((uint64_t)v12, &qword_10028E0E8);
  v55 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemGroupedBackgroundColor");
  v56 = Color.init(uiColor:)(v55);
  v57 = static Edge.Set.all.getter(v56);
  sub_10000B074((uint64_t)v14, (uint64_t)v16, &qword_10028E0F0);
  v58 = &v16[*(int *)(v73 + 36)];
  *(_QWORD *)v58 = v56;
  v58[8] = v57;
  sub_10000A020((uint64_t)v14, &qword_10028E0F0);
  sub_10000B074((uint64_t)v16, (uint64_t)v18, &qword_10028E0F8);
  v59 = &v18[*(int *)(v72 + 36)];
  *v59 = v36 ^ 1;
  *((_QWORD *)v59 + 1) = 0x4031000000000000;
  *((_WORD *)v59 + 8) = 256;
  v60 = sub_10000A020((uint64_t)v16, &qword_10028E0F8);
  v61 = v75;
  static ContentShapeKinds.contextMenuPreview.getter(v60);
  v62 = &v21[*(int *)(v71 + 36)];
  v63 = sub_100006DF4(&qword_10028E118);
  v65 = v76;
  v64 = v77;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(&v62[*(int *)(v63 + 40)], v61, v77);
  *v62 = v36 ^ 1;
  *((_QWORD *)v62 + 1) = 0x4031000000000000;
  v62[16] = 0;
  sub_10000B074((uint64_t)v18, (uint64_t)v21, &qword_10028E100);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v61, v64);
  sub_10000A020((uint64_t)v18, &qword_10028E100);
  return sub_1000610EC((uint64_t)v21, v78);
}

uint64_t sub_1000610D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100060BEC(a1, *(_BYTE *)v2, a2, *(double *)(v2 + 8));
}

uint64_t sub_1000610DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100211008, 1);
}

uint64_t sub_1000610EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028E108);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100061138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E120;
  if (!qword_10028E120)
  {
    v1 = sub_1000070BC(&qword_10028E108);
    sub_1000611BC();
    sub_100012334(&qword_10028E178, &qword_10028E118, (uint64_t)&protocol conformance descriptor for _ContentShapeKindModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028E120);
  }
  return result;
}

unint64_t sub_1000611BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E128;
  if (!qword_10028E128)
  {
    v1 = sub_1000070BC(&qword_10028E100);
    sub_100061240();
    sub_100012334(&qword_10028E168, &qword_10028E170, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028E128);
  }
  return result;
}

unint64_t sub_100061240()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E130;
  if (!qword_10028E130)
  {
    v1 = sub_1000070BC(&qword_10028E0F8);
    sub_1000612F8(&qword_10028E138, &qword_10028E0F0, (void (*)(void))sub_1000612DC);
    sub_100012334(&qword_10028E158, &qword_10028E160, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028E130);
  }
  return result;
}

uint64_t sub_1000612DC()
{
  return sub_1000612F8(&qword_10028E140, &qword_10028E0E8, (void (*)(void))sub_100061364);
}

uint64_t sub_1000612F8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100061364()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E148;
  if (!qword_10028E148)
  {
    v1 = sub_1000070BC(&qword_10028E0E0);
    sub_100012334(&qword_10028E150, &qword_10028E110, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028E148);
  }
  return result;
}

uint64_t destroy for ConversationBubbleWidthManager(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for ConversationBubbleWidthManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for ConversationBubbleWidthManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t assignWithTake for ConversationBubbleWidthManager(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationBubbleWidthManager(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationBubbleWidthManager(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationBubbleWidthManager()
{
  return &type metadata for ConversationBubbleWidthManager;
}

uint64_t sub_100061594(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10021104C, 1);
}

uint64_t sub_1000615A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  double v30;

  v25[1] = a1;
  v27 = a2;
  v3 = sub_100006DF4(&qword_10028B2F0);
  __chkstk_darwin(v3);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028B2F8);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006DF4(&qword_10028E180);
  v9 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_OWORD *)(v2 + 24);
  v12 = sub_100006DF4(&qword_10028B260);
  v13 = State.wrappedValue.getter(&v28);
  v14 = *(double *)&v28;
  v15 = *v2;
  if ((*v2 & 1) != 0)
    v16 = static Alignment.trailing.getter(v13);
  else
    v16 = static Alignment.leading.getter(v13);
  sub_100018D28(0.0, 1, 0.0, 1, v14 * *((double *)v2 + 2) + *((double *)v2 + 1), 0, 0.0, 1, (uint64_t)v5, 0.0, 1, 0.0, 1, v16, v17);
  if ((v15 & 1) != 0)
    v19 = static Alignment.trailing.getter(v18);
  else
    v19 = static Alignment.leading.getter(v18);
  sub_100018D80(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v8, 0.0, 1, 0.0, 1, v19, v20);
  sub_10000A020((uint64_t)v5, &qword_10028B2F0);
  v28 = *(_OWORD *)(v2 + 24);
  State.projectedValue.getter(&v29, v12);
  v21 = v29;
  v22 = v30;
  v23 = sub_100061884(&qword_10028E188, &qword_10028B2F8, (void (*)(void))sub_100061868);
  View.bindGeometry(to:reader:)(v21, *((_QWORD *)&v21 + 1), sub_100061844, 0, v6, v23, v22);
  swift_release(*((_QWORD *)&v21 + 1));
  swift_release(v21);
  sub_10000A020((uint64_t)v8, &qword_10028B2F8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27, v11, v26);
}

uint64_t sub_100061844()
{
  return GeometryProxy.size.getter();
}

uint64_t sub_100061868()
{
  return sub_100061884(&qword_10028E190, &qword_10028B2F0, (void (*)(void))sub_1000618F0);
}

uint64_t sub_100061884(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000618F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E198;
  if (!qword_10028E198)
  {
    v1 = sub_1000070BC(&qword_10028B300);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10028E198);
  }
  return result;
}

uint64_t sub_10006193C()
{
  _QWORD v1[2];

  v1[0] = sub_1000070BC(&qword_10028B2F8);
  v1[1] = sub_100061884(&qword_10028E188, &qword_10028B2F8, (void (*)(void))sub_100061868);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.bindGeometry(to:reader:)>>, 1);
}

void sub_1000619A0(char *a1)
{
  sub_1001D5B30(*a1);
}

void sub_1000619AC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1000619F4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7469617274726F70, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_100061A70()
{
  __asm { BR              X10 }
}

uint64_t sub_100061AA8(uint64_t a1)
{
  String.hash(into:)(a1, 0x7469617274726F70, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_100061B10(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100061B54()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7469617274726F70, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100061BD0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000662E0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100061BFC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100061C28 + 4 * byte_1001E9B4C[*v0]))();
}

void sub_100061C28(_QWORD *a1@<X8>)
{
  *a1 = 0x7469617274726F70;
  a1[1] = 0xE800000000000000;
}

void sub_100061C44(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "conversation");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_100061C68(_QWORD *a1@<X8>)
{
  *a1 = 0x73616364616F7262;
  a1[1] = 0xE900000000000074;
}

void sub_100061C88(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_100006DF4(&qword_1002948B0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for Date(0);
  __chkstk_darwin(v4);
  __asm { BR              X11 }
}

uint64_t sub_100061D74@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&loc_100061DD0 + *((int *)qword_100062168 + a2)))(0x7469617274726F70, a1, 0x7465736E75);
}

void sub_100061DEC(uint64_t a1)
{
  uint64_t v2;
  char v3;

  if (a1 == 0x7469617274726F70 && v2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease_n(0xE800000000000000, 2);
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, 0x7469617274726F70, 0xE800000000000000, 0);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(0xE800000000000000);
    if ((v3 & 1) == 0)
      __asm { BR              X10 }
  }
}

uint64_t sub_100062188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char v21;
  unsigned int v22;
  NSString v23;
  uint64_t v24;
  uint64_t inited;
  Class isa;
  __n128 v27;
  void (*v29)(uint64_t, char *, uint64_t);
  void (*v30)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[80];

  v32 = a1;
  v2 = sub_100006DF4(&qword_1002948B0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v29 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v29 - v13;
  v15 = objc_msgSend((id)objc_opt_self(NSDate), "now");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = type metadata accessor for ConversationContext.ContextMetrics(0);
  v17 = v1 + *(int *)(v16 + 20);
  sub_10000A020(v17, &qword_1002948B0);
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 16);
  v29(v17, v14, v8);
  v30 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56);
  v30(v17, 0, 1, v8);
  v18 = *(int *)(v16 + 24);
  v31 = v1;
  v19 = v1 + v18;
  sub_100065FD0(v1 + v18, (uint64_t)v7);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v20(v7, 1, v8) == 1)
  {
    sub_10000A020((uint64_t)v7, &qword_1002948B0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    v21 = static Date.< infix(_:_:)(v12, v14);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    if ((v21 & 1) != 0)
    {
LABEL_5:
      sub_10000A020(v19, &qword_1002948B0);
      v29(v19, v14, v8);
      v30(v19, 0, 1, v8);
      goto LABEL_6;
    }
  }
  sub_100065FD0(v19, (uint64_t)v5);
  v22 = v20(v5, 1, v8);
  sub_10000A020((uint64_t)v5, &qword_1002948B0);
  if (v22 == 1)
    goto LABEL_5;
LABEL_6:
  v23 = String._bridgeToObjectiveC()();
  v24 = sub_100006DF4(&qword_10028DFD0);
  inited = swift_initStackObject(v24, v33);
  *(_OWORD *)(inited + 16) = xmmword_1001E4D60;
  *(_QWORD *)(inited + 32) = 0x6E75614C6C6F6F62;
  *(_QWORD *)(inited + 40) = 0xEA00000000006863;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 56), "favoritesCount");
  *(_BYTE *)(inited + 71) = -18;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  sub_1001A4D08(inited);
  sub_10000A05C(0, (unint64_t *)&qword_1002930B0, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v27 = swift_bridgeObjectRelease();
  AnalyticsSendEvent(v23, isa, v27);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_100062504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  int *v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  _BYTE v19[80];

  v1 = sub_100006DF4(&qword_1002948B0);
  v2 = __chkstk_darwin(v1);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v19[-v5];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v19[-v12];
  v14 = (int *)type metadata accessor for ConversationContext.ContextMetrics(0);
  *(_BYTE *)(v0 + v14[7]) = 0;
  sub_100065FD0(v0 + v14[5], (uint64_t)v6);
  v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1, v7) == 1)
    return sub_10000A020((uint64_t)v6, &qword_1002948B0);
  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
  v17(v13, v6, v7);
  sub_100065FD0(v0 + v14[6], (uint64_t)v4);
  if (v15(v4, 1, v7) != 1)
  {
    v17(v11, v4, v7);
    String._bridgeToObjectiveC()();
    v18 = sub_100006DF4(&qword_10028DFD0);
    *(_OWORD *)(swift_initStackObject(v18, v19) + 16) = xmmword_1001E4D60;
    __asm { BR              X12 }
  }
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return sub_10000A020((uint64_t)v4, &qword_1002948B0);
}

uint64_t sub_100062860()
{
  return sub_10001DA94((uint64_t)&unk_1001EA238, (uint64_t)&unk_1001EA260);
}

uint64_t sub_100062874()
{
  return sub_10001DA94((uint64_t)&unk_1001E9D28, (uint64_t)&unk_1001E9D98);
}

uint64_t sub_100062888()
{
  return sub_10001DA94((uint64_t)&unk_1001E9D50, (uint64_t)&unk_1001E9D78);
}

uint64_t sub_10006289C()
{
  return sub_10001DA94((uint64_t)&unk_1001EA1F0, (uint64_t)&unk_1001EA218);
}

uint64_t sub_1000628B0()
{
  return sub_10001DA94((uint64_t)&unk_1001EA1A8, (uint64_t)&unk_1001EA1D0);
}

uint64_t sub_1000628C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EA160);
  v2 = swift_getKeyPath(&unk_1001EA188);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100062934()
{
  return sub_10001DA94((uint64_t)&unk_1001E9DB8, (uint64_t)&unk_1001E9DE0);
}

uint64_t sub_100062948()
{
  return sub_10001DA94((uint64_t)&unk_1001EA118, (uint64_t)&unk_1001EA140);
}

uint64_t sub_10006295C()
{
  return sub_10001DA94((uint64_t)&unk_1001EA0D0, (uint64_t)&unk_1001EA0F8);
}

uint64_t sub_100062970()
{
  return sub_10001DA94((uint64_t)&unk_1001EA088, (uint64_t)&unk_1001EA0B0);
}

uint64_t sub_100062984()
{
  return sub_10001DA94((uint64_t)&unk_1001E9E90, (uint64_t)&unk_1001E9EB8);
}

uint64_t sub_100062998()
{
  return sub_10001DA94((uint64_t)&unk_1001EA040, (uint64_t)&unk_1001EA068);
}

uint64_t sub_1000629AC()
{
  return sub_10001DA94((uint64_t)&unk_1001E9FF8, (uint64_t)&unk_1001EA020);
}

double sub_1000629C0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_1001E9FB0);
  v2 = swift_getKeyPath(&unk_1001E9FD8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100062A30()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E9F68);
  v2 = swift_getKeyPath(&unk_1001E9F90);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100062AA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E9E00);
  v2 = swift_getKeyPath(&unk_1001E9E28);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100062B14()
{
  return sub_10001DA94((uint64_t)&unk_1001E9E48, (uint64_t)&unk_1001E9E70);
}

double sub_100062B28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_1001E9F20);
  v2 = swift_getKeyPath(&unk_1001E9F48);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100062B9C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001E9ED8);
  v4 = swift_getKeyPath(&unk_1001E9F00);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100062C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t KeyPath;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  char *v129;
  id v130;
  NSString v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  id v148;
  uint64_t v149;
  char *v150;
  void (*v151)(uint64_t, uint64_t, uint64_t, char *);
  char *v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  __CFNotificationCenter *v176;
  __CFString *v177;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  void (**v222)(_QWORD, _QWORD, _QWORD);
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  id v230;
  _OWORD v231[2];

  v1 = v0;
  v211 = sub_100006DF4(&qword_10028E9A0);
  v212 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v208 = (char *)&v179 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100006DF4(&qword_10028E9A8);
  v214 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v209 = (char *)&v179 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028E9B0);
  v5 = *(_QWORD *)(v4 - 8);
  v215 = v4;
  v216 = v5;
  __chkstk_darwin(v4);
  v210 = (char *)&v179 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v7);
  v204 = (char *)&v179 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100006DF4(&qword_10028E9B8);
  v207 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v205 = (char *)&v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100006DF4(&qword_10028E9C0);
  v202 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v200 = (char *)&v179 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028E9C8);
  __chkstk_darwin(v11);
  v224 = (char *)&v179 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v219 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v223 = (char *)&v179 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = sub_100006DF4(&qword_10028E9D0);
  v217 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v225 = (char *)&v179 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = type metadata accessor for TranslationTaskHint(0, v15);
  v222 = *(void (***)(_QWORD, _QWORD, _QWORD))(v229 - 8);
  __chkstk_darwin(v229);
  v221 = (char *)&v179 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_100006DF4(&qword_10028E9D8);
  v220 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v218 = (char *)&v179 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for NavigationSplitViewVisibility(0);
  v198 = *(_QWORD *)(v199 - 8);
  v18 = __chkstk_darwin(v199);
  v197 = (char *)&v179 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v196 = (char *)&v179 - v20;
  v195 = sub_100006DF4(&qword_10028E9E0);
  v194 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v193 = (char *)&v179 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100006DF4(&qword_10028E9E8);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v190 = (char *)&v179 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100006DF4(&qword_10028E9F0);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v187 = (char *)&v179 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100006DF4(&qword_10028BC70);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v184 = (char *)&v179 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100006DF4(&qword_100295540);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v26 = (char *)&v179 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100006DF4(&qword_10028E9F8);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v28 = (char *)&v179 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v179 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100006DF4(&qword_10028EA00);
  v34 = *(_QWORD *)(v33 - 8);
  v203 = v33;
  __chkstk_darwin(v33);
  v36 = (char *)&v179 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(v1 + 16, 0);
  v37 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__displayMode;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for ConversationContext.DisplayMode);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v37, v36, v33);
  v38 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_airplaneModeConfiguration;
  *(_QWORD *)(v1 + v38) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AirplaneModeConfiguration(0)), "init");
  v39 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__airplaneModeEnabled;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 32);
  v40(v39, v32, v29);
  v41 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__onDeviceModeEnabled;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v41, v32, v29);
  v42 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isErrorShowing;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v42, v32, v29);
  v43 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__imageTranslationState;
  LOBYTE(v231[0]) = 1;
  Published.init(initialValue:)(v231, &type metadata for ImageTranslationView.UIState);
  (*(void (**)(uint64_t, char *, uint64_t))(v180 + 32))(v43, v28, v181);
  v44 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_saveImageEvent;
  v45 = sub_100006DF4(&qword_10028EA08);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v1 + v44) = PassthroughSubject.init()();
  v46 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__currentTab;
  v231[0] = 0uLL;
  v47 = sub_100006DF4(&qword_10028E2B8);
  Published.init(initialValue:)(v231, v47);
  (*(void (**)(uint64_t, char *, uint64_t))(v182 + 32))(v46, v26, v183);
  v48 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__languageDownloadSheetVisible;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v48, v32, v29);
  v49 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__pencilActive;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v49, v32, v29);
  v50 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__pencilWriting;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v50, v32, v29);
  v51 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isCardEditing;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v51, v32, v29);
  v52 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__faceToFaceVisible;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v52, v32, v29);
  v53 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isHalfScreenMultitasking;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v53, v32, v29);
  v54 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isMultitasking;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v54, v32, v29);
  v55 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__sceneWidth;
  *(_QWORD *)&v231[0] = 0x7FF0000000000000;
  v56 = v184;
  Published.init(initialValue:)(v231, &type metadata for CGFloat);
  (*(void (**)(uint64_t, char *, uint64_t))(v185 + 32))(v55, v56, v186);
  v57 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__staticImage;
  *(_QWORD *)&v231[0] = 0;
  BYTE8(v231[0]) = -1;
  v58 = sub_100006DF4(&qword_10028E2C8);
  v59 = v187;
  Published.init(initialValue:)(v231, v58);
  (*(void (**)(uint64_t, char *, uint64_t))(v188 + 32))(v57, v59, v189);
  v60 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__broadcastTranslation;
  *(_QWORD *)&v231[0] = 0;
  v61 = sub_100006DF4(&qword_10028E2D8);
  v62 = v190;
  Published.init(initialValue:)(v231, v61);
  (*(void (**)(uint64_t, char *, uint64_t))(v191 + 32))(v60, v62, v192);
  v63 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__clearConfirmationVisible;
  LOBYTE(v231[0]) = 0;
  Published.init(initialValue:)(v231, &type metadata for Bool);
  v40(v63, v32, v29);
  v64 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__rootWindowSafeAreaInsets;
  type metadata accessor for UIEdgeInsets(0);
  memset(v231, 0, sizeof(v231));
  v65 = v193;
  Published.init(initialValue:)(v231, v66);
  v67 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v194 + 32))(v64, v65, v195);
  v68 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__sidebarVisibility;
  v69 = v196;
  static NavigationSplitViewVisibility.automatic.getter(v67);
  v70 = v198;
  v71 = v197;
  v72 = v199;
  (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v197, v69, v199);
  v73 = v218;
  Published.init(initialValue:)(v71, v72);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v72);
  (*(void (**)(uint64_t, char *, uint64_t))(v220 + 32))(v68, v73, v228);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_lastKnownInterfaceOrientation) = 0;
  v74 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech;
  KeyPath = swift_getKeyPath(&unk_1001E9CB0);
  v76 = (void *)objc_opt_self(NSUserDefaults);
  v77 = objc_msgSend(v76, "standardUserDefaults");
  v78 = sub_100006DF4(&qword_10028F250);
  swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
  v79 = PassthroughSubject.init()();
  *(_QWORD *)v74 = v77;
  *(_QWORD *)(v74 + 8) = KeyPath;
  *(_BYTE *)(v74 + 16) = 1;
  *(_QWORD *)(v74 + 24) = v79;
  v80 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__continuousListening;
  v81 = swift_getKeyPath(&unk_1001E9CD8);
  v82 = objc_msgSend(v76, "standardUserDefaults");
  swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
  v83 = PassthroughSubject.init()();
  *(_QWORD *)v80 = v82;
  *(_QWORD *)(v80 + 8) = v81;
  *(_BYTE *)(v80 + 16) = 0;
  *(_QWORD *)(v80 + 24) = v83;
  v84 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS;
  v85 = swift_getKeyPath(&unk_1001E9D00);
  v86 = objc_msgSend(v76, "standardUserDefaults");
  swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
  v87 = PassthroughSubject.init()();
  *(_QWORD *)v84 = v86;
  *(_QWORD *)(v84 + 8) = v85;
  *(_BYTE *)(v84 + 16) = 0;
  *(_QWORD *)(v84 + 24) = v87;
  v228 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_subscriptions;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_subscriptions) = _swiftEmptyArrayStorage;
  v88 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_metrics;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_metrics) = 0;
  v89 = (int *)type metadata accessor for ConversationContext.ContextMetrics(0);
  v90 = v88 + v89[5];
  v91 = type metadata accessor for Date(0);
  v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56);
  v92(v90, 1, 1, v91);
  v92(v88 + v89[6], 1, 1, v91);
  *(_BYTE *)(v88 + v89[7]) = 1;
  v93 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_languagesService;
  v94 = v221;
  ((void (**)(char *, _QWORD, uint64_t))v222)[13](v221, enum case for TranslationTaskHint.speech(_:), v229);
  v95 = type metadata accessor for LanguagesService(0);
  swift_allocObject(v95, *(unsigned int *)(v95 + 48), *(unsigned __int16 *)(v95 + 52));
  *(_QWORD *)(v1 + v93) = LanguagesService.init(task:)(v94);
  v197 = (char *)objc_opt_self(NSNotificationCenter);
  v96 = objc_msgSend(v197, "defaultCenter");
  v97 = v223;
  NSNotificationCenter.publisher(for:object:)(NSUserDefaultsDidChangeNotification, 0);

  v222 = (void (**)(_QWORD, _QWORD, _QWORD))objc_opt_self(NSRunLoop);
  *(_QWORD *)&v231[0] = objc_msgSend(v222, "mainRunLoop");
  v98 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  v221 = *(char **)(*(_QWORD *)(v98 - 8) + 56);
  v99 = (uint64_t)v224;
  v196 = (char *)v98;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v221)(v224, 1, 1, v98);
  v100 = sub_10000A05C(0, &qword_10028EA10, NSRunLoop_ptr);
  v229 = v100;
  v101 = sub_100007D5C(&qword_100296C40, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v220 = v101;
  v102 = sub_100065E60(&qword_10028EA18, &qword_10028EA10, NSRunLoop_ptr, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  v104 = v225;
  v103 = v226;
  v105 = v101;
  v106 = v102;
  v218 = (char *)v102;
  Publisher.receive<A>(on:options:)(v231, v99, v226, v100, v105, v102);
  sub_10000A020(v99, &qword_10028E9C8);

  v219 = *(_QWORD *)(v219 + 8);
  ((void (*)(char *, uint64_t))v219)(v97, v103);
  v107 = sub_100012334(&qword_10028EA20, &qword_10028E9D0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v199 = v107;
  swift_retain(v1);
  v108 = v227;
  v109 = Publisher<>.sink(receiveValue:)(sub_100065EA0, v1, v227, v107);
  v110 = swift_release(v1);
  v198 = *(_QWORD *)(v217 + 8);
  ((void (*)(char *, uint64_t, __n128))v198)(v104, v108, v110);
  v111 = v228;
  swift_beginAccess(v228, v231, 33, 0);
  v112 = sub_100006DF4((uint64_t *)&unk_100295560);
  v113 = sub_100012334(&qword_10028EA28, (uint64_t *)&unk_100295560, (uint64_t)&protocol conformance descriptor for [A]);
  v114 = v112;
  v217 = v112;
  AnyCancellable.store<A>(in:)(v111, v112, v113);
  swift_endAccess(v231);
  swift_release(v109);
  v115 = *(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_airplaneModeConfiguration);
  v116 = dispatch thunk of AirplaneModeConfiguration.isEnabled.getter();

  *(_QWORD *)&v231[0] = v116;
  v230 = objc_msgSend(v222, "mainRunLoop");
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v221)(v99, 1, 1, v98);
  v117 = sub_100006DF4(&qword_10028EA30);
  v118 = sub_100012334(&qword_10028EA38, &qword_10028EA30, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v119 = v200;
  Publisher.receive<A>(on:options:)(&v230, v99, v117, v229, v118, v106);
  sub_10000A020(v99, &qword_10028E9C8);

  swift_release(*(_QWORD *)&v231[0]);
  v120 = swift_getKeyPath(&unk_1001E9D28);
  *(_QWORD *)&v231[0] = v1;
  v121 = sub_100012334(&qword_10028EA40, &qword_10028E9C0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v122 = v201;
  v123 = Publisher<>.assign<A>(to:on:)(v120, v231, v201, v121);
  v124 = swift_release(v120);
  (*(void (**)(char *, uint64_t, __n128))(v202 + 8))(v119, v122, v124);
  v125 = v111;
  swift_beginAccess(v111, v231, 33, 0);
  v126 = v114;
  v127 = v113;
  v195 = v113;
  AnyCancellable.store<A>(in:)(v111, v126, v113);
  swift_endAccess(v231);
  *(_QWORD *)&v128 = swift_release(v123).n128_u64[0];
  v129 = v197;
  v130 = objc_msgSend(v197, "defaultCenter", v128);
  v131 = String._bridgeToObjectiveC()();
  v132 = v223;
  NSNotificationCenter.publisher(for:object:)(v131, 0);

  v133 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *(_QWORD *)&v231[0] = static OS_dispatch_queue.main.getter(v133);
  v134 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v135 = (uint64_t)v204;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 56))(v204, 1, 1, v134);
  v136 = sub_100065E60((unint64_t *)&qword_100295550, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v137 = v205;
  v138 = v226;
  Publisher.receive<A>(on:options:)(v231, v135, v226, v133, v220, v136);
  sub_10000A020(v135, &qword_100296BE0);

  ((void (*)(char *, uint64_t))v219)(v132, v138);
  v139 = sub_100012334(&qword_10028EA48, &qword_10028E9B8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v1);
  v140 = v206;
  v141 = v139;
  v142 = v137;
  v143 = Publisher<>.sink(receiveValue:)(sub_100065EF0, v1, v206, v141);
  v144 = swift_release(v1);
  (*(void (**)(char *, uint64_t, __n128))(v207 + 8))(v142, v140, v144);
  swift_beginAccess(v125, v231, 33, 0);
  v145 = v125;
  v146 = v217;
  AnyCancellable.store<A>(in:)(v145, v217, v127);
  swift_endAccess(v231);
  v147 = objc_msgSend(v129, "defaultCenter", swift_release(v143).n128_f64[0]);
  NSNotificationCenter.publisher(for:object:)(UIApplicationWillEnterForegroundNotification, 0);

  v148 = v222;
  *(_QWORD *)&v231[0] = objc_msgSend(v222, "mainRunLoop");
  v149 = (uint64_t)v224;
  v150 = v196;
  v151 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v221;
  ((void (*)(char *, uint64_t, uint64_t, char *))v221)(v224, 1, 1, v196);
  v152 = v225;
  Publisher.receive<A>(on:options:)(v231, v149, v138, v229, v220, v218);
  sub_10000A020(v149, &qword_10028E9C8);

  ((void (*)(char *, uint64_t))v219)(v132, v138);
  swift_retain(v1);
  v153 = v227;
  v154 = Publisher<>.sink(receiveValue:)(sub_100065EF0, v1, v227, v199);
  v155 = swift_release(v1);
  ((void (*)(char *, uint64_t, __n128))v198)(v152, v153, v155);
  v156 = v228;
  swift_beginAccess(v228, v231, 33, 0);
  v157 = v146;
  v158 = v195;
  AnyCancellable.store<A>(in:)(v156, v157, v195);
  swift_endAccess(v231);
  swift_release(v154);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__displayMode, v231, 33, 0);
  v159 = v208;
  Published.projectedValue.getter(v203);
  swift_endAccess(v231);
  *(_QWORD *)&v231[0] = objc_msgSend(v148, "mainRunLoop");
  v151(v149, 1, 1, v150);
  v160 = sub_100012334(&qword_10028EA50, &qword_10028E9A0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v161 = v209;
  v162 = v211;
  Publisher.receive<A>(on:options:)(v231, v149, v211, v229, v160, v218);
  sub_10000A020(v149, &qword_10028E9C8);

  (*(void (**)(char *, uint64_t))(v212 + 8))(v159, v162);
  v163 = sub_100012334(&qword_10028EA58, &qword_10028E9A8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v164 = sub_100065AB4();
  v165 = v210;
  v166 = v213;
  Publisher<>.removeDuplicates()(v213, v163, v164);
  (*(void (**)(char *, uint64_t))(v214 + 8))(v161, v166);
  v167 = sub_100012334(&qword_10028EA60, &qword_10028E9B0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  swift_retain(v1);
  v168 = v215;
  v169 = Publisher<>.sink(receiveValue:)(sub_100065F08, v1, v215, v167);
  v170 = swift_release(v1);
  (*(void (**)(char *, uint64_t, __n128))(v216 + 8))(v165, v168, v170);
  v171 = v228;
  swift_beginAccess(v228, v231, 33, 0);
  AnyCancellable.store<A>(in:)(v171, v217, v158);
  swift_endAccess(v231);
  swift_release(v169);
  v172 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v173 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v172);
  LOBYTE(v171) = NSUserDefaults.onDeviceOnly.getter();

  v174 = swift_getKeyPath(&unk_1001E9D50);
  v175 = swift_getKeyPath(&unk_1001E9D78);
  LOBYTE(v231[0]) = v171 & 1;
  swift_retain(v1);
  static Published.subscript.setter(v231, v1, v174, v175);
  v176 = CFNotificationCenterGetDarwinNotifyCenter();
  v177 = (__CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterAddObserver(v176, 0, (CFNotificationCallback)sub_10006451C, v177, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  return v1;
}

uint64_t sub_100064308(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v3 = type metadata accessor for ConversationContext(0);
  v4 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v5 = ObservableObject<>.objectWillChange.getter(v3, v4);
  ObservableObjectPublisher.send()();
  swift_release(v5);
  v6 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v7 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v6);
  v8 = NSUserDefaults.onDeviceOnly.getter();

  KeyPath = swift_getKeyPath(&unk_1001E9D50);
  v10 = swift_getKeyPath(&unk_1001E9D78);
  v12 = v8 & 1;
  swift_retain(a2);
  return static Published.subscript.setter(&v12, a2, KeyPath, v10);
}

uint64_t sub_1000643F0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001E9D28, (uint64_t)&unk_1001E9D98, a2);
}

uint64_t sub_100064404(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9D28, (uint64_t)&unk_1001E9D98);
}

uint64_t sub_100064418(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  v3 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v4 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v3);
  v5 = NSUserDefaults.onDeviceOnly.getter();

  KeyPath = swift_getKeyPath(&unk_1001E9D50);
  v7 = swift_getKeyPath(&unk_1001E9D78);
  v9 = v5 & 1;
  swift_retain(a2);
  return static Published.subscript.setter(&v9, a2, KeyPath, v7);
}

uint64_t sub_1000644B8(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  char *v3;
  char v4;
  char v5;
  _BYTE v7[24];

  v2 = *a1;
  v3 = (char *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_metrics);
  swift_beginAccess(a2 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_metrics, v7, 33, 0);
  if (v2)
    v4 = 2;
  else
    v4 = 1;
  v5 = *v3;
  *v3 = v4;
  sub_100061C88(v5);
  return swift_endAccess(v7);
}

void sub_10006451C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSString v13;

  v8 = (void *)objc_opt_self(NSNotificationCenter);
  v9 = a1;
  v10 = a3;
  v11 = a5;
  v12 = objc_msgSend(v8, "defaultCenter");
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "postNotificationName:object:", v13, 0);

}

uint64_t sub_1000645E0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v17;
  id v18;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech + 8);
  v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech + 16);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech + 24);
  v18 = *(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech);
  v6 = v18;
  swift_retain(v3);
  swift_retain(v5);
  swift_getAtKeyPath(&v17, &v18, v3);
  swift_release(v5);
  swift_release(v3);

  v7 = v17;
  if (v17 == 2)
    v7 = v4;
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_languagesService);
    swift_retain(v8);
    v10 = LanguagesService.autoDetectSpeechUnsupportedPairs.getter(v9);
    v11 = objc_msgSend(a1, "canonicalIdentifier", swift_release(v8).n128_f64[0]);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    LOBYTE(v11) = sub_1000CED6C(v12, v14, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v11 ^ 1;
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100064700()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  id v19;

  KeyPath = swift_getKeyPath(&unk_1001E9DB8);
  v2 = swift_getKeyPath(&unk_1001E9DE0);
  static Published.subscript.getter(&v19, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  if (v19 == 1)
  {
    v3 = swift_getKeyPath(&unk_1001E9DB8);
    v4 = swift_getKeyPath(&unk_1001E9DE0);
    LOBYTE(v19) = 0;
    swift_retain(v0);
    static Published.subscript.setter(&v19, v0, v3, v4);
  }
  v5 = swift_getKeyPath(&unk_1001E9E00);
  v6 = swift_getKeyPath(&unk_1001E9E28);
  static Published.subscript.getter(&v19, v0, v5, v6);
  swift_release(v5);
  swift_release(v6);
  v7 = v19;

  if (v7)
  {
    v8 = swift_getKeyPath(&unk_1001E9E00);
    v9 = swift_getKeyPath(&unk_1001E9E28);
    v19 = 0;
    swift_retain(v0);
    static Published.subscript.setter(&v19, v0, v8, v9);
  }
  v10 = swift_getKeyPath(&unk_1001E9E48);
  v11 = swift_getKeyPath(&unk_1001E9E70);
  static Published.subscript.getter(&v19, v0, v10, v11);
  swift_release(v10);
  swift_release(v11);
  if (v19 == 1)
  {
    v12 = swift_getKeyPath(&unk_1001E9E48);
    v13 = swift_getKeyPath(&unk_1001E9E70);
    LOBYTE(v19) = 0;
    swift_retain(v0);
    static Published.subscript.setter(&v19, v0, v12, v13);
  }
  v14 = swift_getKeyPath(&unk_1001E9E90);
  v15 = swift_getKeyPath(&unk_1001E9EB8);
  static Published.subscript.getter(&v19, v0, v14, v15);
  swift_release(v14);
  result = swift_release(v15);
  if (v19 == 1)
  {
    v17 = swift_getKeyPath(&unk_1001E9E90);
    v18 = swift_getKeyPath(&unk_1001E9EB8);
    LOBYTE(v19) = 0;
    swift_retain(v0);
    return static Published.subscript.setter(&v19, v0, v17, v18);
  }
  return result;
}

uint64_t sub_100064968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;

  sub_100011194(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__displayMode;
  v2 = sub_100006DF4(&qword_10028EA00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__airplaneModeEnabled;
  v4 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__onDeviceModeEnabled, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isErrorShowing, v4);
  v6 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__imageTranslationState;
  v7 = sub_100006DF4(&qword_10028E9F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_saveImageEvent));
  v8 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__currentTab;
  v9 = sub_100006DF4(&qword_100295540);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__languageDownloadSheetVisible, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__pencilActive, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__pencilWriting, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isCardEditing, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__faceToFaceVisible, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isHalfScreenMultitasking, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__isMultitasking, v4);
  v10 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__sceneWidth;
  v11 = sub_100006DF4(&qword_10028BC70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__staticImage;
  v13 = sub_100006DF4(&qword_10028E9F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__broadcastTranslation;
  v15 = sub_100006DF4(&qword_10028E9E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__clearConfirmationVisible, v4);
  v16 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__rootWindowSafeAreaInsets;
  v17 = sub_100006DF4(&qword_10028E9E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__sidebarVisibility;
  v19 = sub_100006DF4(&qword_10028E9D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v21 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech);
  v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech + 8);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autodetectSpeech + 24));
  swift_release(v20);

  v23 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__continuousListening);
  v22 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__continuousListening + 8);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__continuousListening + 24));
  swift_release(v22);

  v25 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS);
  v24 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS + 8);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS + 24));
  swift_release(v24);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_subscriptions));
  sub_100066190(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_metrics);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_languagesService));
  return v0;
}

uint64_t sub_100064CA8()
{
  uint64_t v0;

  sub_100064968();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100064CCC()
{
  return type metadata accessor for ConversationContext(0);
}

uint64_t type metadata accessor for ConversationContext(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_10028E290, (uint64_t)&nominal type descriptor for ConversationContext);
}

void sub_100064CE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[29];

  v23[0] = "\b";
  sub_10001D248(319, &qword_10028E2A0, (uint64_t)&type metadata for ConversationContext.DisplayMode);
  if (v3 <= 0x3F)
  {
    v23[1] = *(_QWORD *)(v2 - 8) + 64;
    v23[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    sub_10001D248(319, (unint64_t *)&qword_100295C00, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v23[3] = v6;
      v23[4] = v6;
      v23[5] = v6;
      sub_10001D248(319, &qword_10028E2A8, (uint64_t)&type metadata for ImageTranslationView.UIState);
      if (v8 <= 0x3F)
      {
        v23[6] = *(_QWORD *)(v7 - 8) + 64;
        v23[7] = (char *)&value witness table for Builtin.NativeObject + 64;
        sub_10001DFF8(319, &qword_10028E2B0, &qword_10028E2B8);
        if (v10 <= 0x3F)
        {
          v23[8] = *(_QWORD *)(v9 - 8) + 64;
          v23[9] = v6;
          v23[10] = v6;
          v23[11] = v6;
          v23[12] = v6;
          v23[13] = v6;
          v23[14] = v6;
          v23[15] = v6;
          sub_10001D248(319, &qword_10028B6C8, (uint64_t)&type metadata for CGFloat);
          if (v12 <= 0x3F)
          {
            v23[16] = *(_QWORD *)(v11 - 8) + 64;
            sub_10001DFF8(319, &qword_10028E2C0, &qword_10028E2C8);
            if (v14 <= 0x3F)
            {
              v23[17] = *(_QWORD *)(v13 - 8) + 64;
              sub_10001DFF8(319, &qword_10028E2D0, &qword_10028E2D8);
              if (v16 <= 0x3F)
              {
                v23[18] = *(_QWORD *)(v15 - 8) + 64;
                v23[19] = v6;
                sub_10006598C(319, &qword_10028E2E0, (uint64_t (*)(uint64_t))type metadata accessor for UIEdgeInsets, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
                if (v18 <= 0x3F)
                {
                  v23[20] = *(_QWORD *)(v17 - 8) + 64;
                  sub_10006598C(319, (unint64_t *)&unk_10028E2E8, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationSplitViewVisibility, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
                  if (v20 <= 0x3F)
                  {
                    v23[21] = *(_QWORD *)(v19 - 8) + 64;
                    v23[22] = (char *)&value witness table for Builtin.Int64 + 64;
                    v23[23] = &unk_1001E9BA0;
                    v23[24] = &unk_1001E9BA0;
                    v23[25] = &unk_1001E9BA0;
                    v23[26] = (char *)&value witness table for Builtin.BridgeObject + 64;
                    v21 = type metadata accessor for ConversationContext.ContextMetrics(319);
                    if (v22 <= 0x3F)
                    {
                      v23[27] = *(_QWORD *)(v21 - 8) + 64;
                      v23[28] = (char *)&value witness table for Builtin.NativeObject + 64;
                      swift_updateClassMetadata2(a1, 256, 29, v23, a1 + 80);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for ConversationContext.ContextMetrics(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_10028E950, (uint64_t)&nominal type descriptor for ConversationContext.ContextMetrics);
}

_QWORD *sub_100064F68(char *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      v13 = sub_100006DF4(&qword_1002948B0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v15 = a3[6];
    v16 = (char *)v4 + v15;
    v17 = &a2[v15];
    if (v12(&a2[v15], 1, v10))
    {
      v18 = sub_100006DF4(&qword_1002948B0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    *((_BYTE *)v4 + a3[7]) = a2[a3[7]];
  }
  return v4;
}

uint64_t sub_1000650DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return result;
}

_BYTE *sub_100065188(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100006DF4(&qword_1002948B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = sub_100006DF4(&qword_1002948B0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *sub_1000652D0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100006DF4(&qword_1002948B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_100006DF4(&qword_1002948B0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *sub_1000654A8(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100006DF4(&qword_1002948B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = sub_100006DF4(&qword_1002948B0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *sub_1000655F0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100006DF4(&qword_1002948B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_100006DF4(&qword_1002948B0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t sub_1000657C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000657D4);
}

uint64_t sub_1000657D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100006DF4(&qword_1002948B0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100065868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100065874);
}

uint64_t sub_100065874(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_1002948B0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  return result;
}

void sub_1000658F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = &unk_1001E9BD0;
  sub_10006598C(319, (unint64_t *)&qword_10028E960, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_1001E9BE8;
    swift_initStructMetadata(a1, 256, 4, &v4, a1 + 16);
  }
}

void sub_10006598C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ConversationContext.DisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100065A30 + 4 * byte_1001E9B59[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100065A64 + 4 * byte_1001E9B54[v4]))();
}

uint64_t sub_100065A64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065A6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100065A74);
  return result;
}

uint64_t sub_100065A80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100065A88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100065A8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065A94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationContext.DisplayMode()
{
  return &type metadata for ConversationContext.DisplayMode;
}

unint64_t sub_100065AB4()
{
  unint64_t result;

  result = qword_10028E998;
  if (!qword_10028E998)
  {
    result = swift_getWitnessTable(&unk_1001E9C4C, &type metadata for ConversationContext.DisplayMode);
    atomic_store(result, (unint64_t *)&qword_10028E998);
  }
  return result;
}

uint64_t sub_100065AF8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ConversationContext(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100065B34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E9ED8);
  v5 = swift_getKeyPath(&unk_1001E9F00);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100065B9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for NavigationSplitViewVisibility(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E9ED8);
  v14 = swift_getKeyPath(&unk_1001E9F00);
  v11(v8, (uint64_t)v10, v4);
  swift_retain(v12);
  static Published.subscript.setter(v8, v12, KeyPath, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

void sub_100065CA0(void **a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100065D50(a1, a2);
}

void sub_100065CBC(_BYTE *a1, void **a2)
{
  sub_100065DA8(a1, a2);
}

void sub_100065CE8(void **a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100065D50(a1, a2);
}

void sub_100065D04(_BYTE *a1, void **a2)
{
  sub_100065DA8(a1, a2);
}

void sub_100065D30(void **a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100065D50(a1, a2);
}

void sub_100065D50(void **a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  NSString v4;

  v3 = *a1;
  v4 = String._bridgeToObjectiveC()();
  LOBYTE(v3) = objc_msgSend(v3, "BOOLForKey:", v4);

  *a2 = (_BYTE)v3;
}

void sub_100065DA8(_BYTE *a1, void **a2)
{
  void *v2;
  Class isa;
  NSString v4;

  v2 = *a2;
  if (*a1 == 2)
    isa = 0;
  else
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", isa, v4);
  swift_unknownObjectRelease(isa);

}

void sub_100065E30(_BYTE *a1, void **a2)
{
  sub_100065DA8(a1, a2);
}

uint64_t sub_100065E60(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10000A05C(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100065EA0(uint64_t a1)
{
  uint64_t v1;

  return sub_100064308(a1, v1);
}

uint64_t sub_100065EA8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001E9D28, (uint64_t)&unk_1001E9D98, a2);
}

uint64_t sub_100065ECC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9D28, (uint64_t)&unk_1001E9D98);
}

uint64_t sub_100065EF0(uint64_t a1)
{
  uint64_t v1;

  return sub_100064418(a1, v1);
}

uint64_t sub_100065F08(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_1000644B8(a1, v1);
}

uint64_t sub_100065F10@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_100065F88@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001E9D50, (uint64_t)&unk_1001E9D78, a2);
}

uint64_t sub_100065FAC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001E9D50, (uint64_t)&unk_1001E9D78);
}

uint64_t sub_100065FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002948B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066020@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001E9E00);
  v5 = swift_getKeyPath(&unk_1001E9E28);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000660A0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001E9E00);
  v5 = swift_getKeyPath(&unk_1001E9E28);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_100066190(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConversationContext.ContextMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ConversationContext.ContextMetrics.AppUIMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100066218 + 4 * byte_1001E9B63[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10006624C + 4 * byte_1001E9B5E[v4]))();
}

uint64_t sub_10006624C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006625CLL);
  return result;
}

uint64_t sub_100066268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100066270);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100066274(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006627C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationContext.ContextMetrics.AppUIMode()
{
  return &type metadata for ConversationContext.ContextMetrics.AppUIMode;
}

unint64_t sub_10006629C()
{
  unint64_t result;

  result = qword_10028EA68;
  if (!qword_10028EA68)
  {
    result = swift_getWitnessTable(&unk_1001EA304, &type metadata for ConversationContext.ContextMetrics.AppUIMode);
    atomic_store(result, (unint64_t *)&qword_10028EA68);
  }
  return result;
}

unint64_t sub_1000662E0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100261E68, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_100066328()
{
  uint64_t v0;

  v0 = static VerticalAlignment.center.getter();
  return ViewDimensions.subscript.getter(v0);
}

uint64_t sub_100066350()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_10006B820();
  result = VerticalAlignment.init(_:)(&_s19PlayButtonAlignmentVN, v0);
  qword_1002AA138 = result;
  return result;
}

uint64_t sub_10006637C()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v1 = v0[48];
  if (v1 == 2)
  {
    v2 = v0[49];
    if (v2 == 2)
    {
      v3 = v0[51];
      v4 = v3 == 2 || (v3 & 1) == 0;
    }
    else
    {
      v4 = (v2 & 1) == 0;
    }
  }
  else
  {
    v4 = v1 & 1;
  }
  return (v4 ^ v0[50]) & 1;
}

void sub_1000663D0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  int v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned __int8 *)(v1 + 49);
  if (v3 == 2)
    goto LABEL_5;
  v4 = *(void **)(v1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001EA440);
  v6 = swift_getKeyPath(&unk_1001EA468);
  v7 = v4;
  static Published.subscript.getter(v13, v7, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v8 = v13[0];
  v9 = v13[1];
  v10 = v14;
  v11 = v15;
  v12 = v16;
  if (!v14)
  {

    goto LABEL_7;
  }
  v8 = v13[0] & 1;

  if (v8 != (v3 & 1))
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
LABEL_5:
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
LABEL_7:
  *a1 = v8;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  a1[4] = v12;
}

uint64_t sub_1000664C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  void *v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v32 - v7;
  v9 = *(_QWORD *)(v0 + 32);
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 32);
    swift_unknownObjectRetain(v9);
    v13 = v12(ObjectType, v10);
    v14 = Locale.identifier.getter(v13);
    v16 = v15;
    v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v8, v2);
    v18 = *(void **)(v0 + 8);
    KeyPath = swift_getKeyPath(&unk_1001EA488);
    v20 = swift_getKeyPath(&unk_1001EA4B0);
    v21 = v18;
    static Published.subscript.getter(v6, v21, KeyPath, v20);

    swift_release(KeyPath);
    v22 = swift_release(v20);
    v23 = Locale.identifier.getter(v22);
    v25 = v24;
    v17(v6, v2);
    v26 = v14 == v23 && v16 == v25;
    if (v26)
    {
      swift_unknownObjectRelease(v9);
      swift_bridgeObjectRelease_n(v16, 2);
      v28 = 0;
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v23, v25, 0);
      swift_bridgeObjectRelease(v25);
      swift_unknownObjectRelease(v9);
      swift_bridgeObjectRelease(v16);
      v28 = v27 ^ 1;
    }
  }
  else
  {
    v29 = *(unsigned __int8 *)(v0 + 49);
    if (v29 == 2)
    {
      v30 = *(unsigned __int8 *)(v0 + 51);
      v26 = v30 == 2;
      v28 = v30 & 1;
      if (v26)
        v28 = 0;
    }
    else
    {
      v28 = v29 & 1;
    }
  }
  return (v28 ^ *(unsigned __int8 *)(v1 + 50)) & 1;
}

id sub_1000666AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t);
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t KeyPath;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Bool v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString *v24;
  id v25;
  unint64_t v26;
  id v27;
  NSString v28;
  NSDictionary v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[14];
  _QWORD v43[5];
  _BYTE v44[8];
  unint64_t v45;
  uint64_t v46;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
    swift_unknownObjectRetain(v6);
    v9(ObjectType, v7);
    v11 = v10;
    swift_unknownObjectRelease(v6);
  }
  else
  {
    sub_1000663D0(v43);
    sub_1000110A4((uint64_t)v43, (uint64_t)v44, &qword_10028EBE8);
    v11 = v45;
    if (v45)
    {
      swift_bridgeObjectRelease(v46);
    }
    else
    {
      if (*(_BYTE *)(v0 + 51) != 2)
      {
        v12 = *(void **)(v0 + 8);
        KeyPath = swift_getKeyPath(&unk_1001EA3F8);
        v14 = swift_getKeyPath(&unk_1001EA420);
        v15 = v12;
        static Published.subscript.getter(v42, v15, KeyPath);

        swift_release(KeyPath);
        swift_release(v14);
        if (((LOWORD(v42[0]) | (BYTE2(v42[0]) << 16)) & 0xFF0000) != 0x80000)
        {
          sub_100008D08(BYTE1(v42[0]));
          v33 = v32;
          v34 = sub_100006DF4(&qword_100298070);
          inited = swift_initStackObject(v34, &v41);
          *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
          *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
          v36 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
          v37 = static UIColor.quaternarySourceTextColor.getter(NSForegroundColorAttributeName);
          *(_QWORD *)(inited + 64) = v36;
          *(_QWORD *)(inited + 40) = v37;
          v38 = sub_1001A4A88(inited);
          v39 = objc_allocWithZone((Class)NSAttributedString);
          v28 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v33);
          type metadata accessor for Key(0);
          sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
          v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
          v30 = objc_msgSend(v39, "initWithString:attributes:", v28, v29.super.isa, swift_bridgeObjectRelease(v38).n128_f64[0]);
          goto LABEL_13;
        }
      }
      v11 = 0xE000000000000000;
    }
  }
  v16 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  if (v6
    && (v17 = *(_QWORD *)(v1 + 40),
        v18 = swift_getObjectType(v6),
        (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17),
        v19 = Locale.isRTL()(),
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2),
        v19))
  {
    v20 = 2;
  }
  else
  {
    v20 = 0;
  }
  objc_msgSend(v16, "setAlignment:", v20);
  v21 = sub_100006DF4(&qword_100298070);
  v22 = swift_initStackObject(v21, (char *)v42 + 4);
  *(_OWORD *)(v22 + 16) = xmmword_1001E4D60;
  *(_QWORD *)(v22 + 32) = NSForegroundColorAttributeName;
  v23 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  *(_QWORD *)(v22 + 40) = static UIColor.sourceTextColor.getter(NSForegroundColorAttributeName);
  *(_QWORD *)(v22 + 64) = v23;
  *(_QWORD *)(v22 + 72) = NSParagraphStyleAttributeName;
  *(_QWORD *)(v22 + 104) = sub_10000A05C(0, &qword_10028EBF0, NSMutableParagraphStyle_ptr);
  *(_QWORD *)(v22 + 80) = v16;
  v24 = NSParagraphStyleAttributeName;
  v25 = v16;
  v26 = sub_1001A4A88(v22);
  v27 = objc_allocWithZone((Class)NSAttributedString);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  type metadata accessor for Key(0);
  sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
  v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v30 = objc_msgSend(v27, "initWithString:attributes:", v28, v29.super.isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

LABEL_13:
  return v30;
}

id sub_100066B00()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t);
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Bool v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString *v20;
  id v21;
  unint64_t v22;
  id v23;
  NSString v24;
  NSDictionary v25;
  id v26;
  void *v28;
  uint64_t KeyPath;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  _BYTE v40[72];
  uint64_t v41;
  _QWORD v42[5];
  _QWORD v43[2];
  uint64_t v44;
  unint64_t v45;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v40[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = v0[4];
  if (v6)
  {
    v7 = v0[5];
    ObjectType = swift_getObjectType(v0[4]);
    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 72);
    swift_unknownObjectRetain(v6);
    v9(ObjectType, v7);
    v11 = v10;
    swift_unknownObjectRelease(v6);
  }
  else
  {
    v28 = (void *)v0[1];
    KeyPath = swift_getKeyPath(&unk_1001EA3F8);
    v30 = swift_getKeyPath(&unk_1001EA420);
    v31 = v28;
    static Published.subscript.getter(v43, v31, KeyPath);

    swift_release(KeyPath);
    swift_release(v30);
    if (((LOWORD(v43[0]) | (BYTE2(v43[0]) << 16)) & 0xFF0000) != 0x80000)
    {
      sub_100008D08(BYTE1(v43[0]));
      v33 = v32;
      v34 = sub_100006DF4(&qword_100298070);
      inited = swift_initStackObject(v34, v40);
      *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
      *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
      v36 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
      v37 = static UIColor.quaternaryTranslateAccentColor.getter(NSForegroundColorAttributeName);
      *(_QWORD *)(inited + 64) = v36;
      *(_QWORD *)(inited + 40) = v37;
      v38 = sub_1001A4A88(inited);
      v39 = objc_allocWithZone((Class)NSAttributedString);
      v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
      type metadata accessor for Key(0);
      sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
      v25.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v26 = objc_msgSend(v39, "initWithString:attributes:", v24, v25.super.isa, swift_bridgeObjectRelease(v38).n128_f64[0]);
      goto LABEL_8;
    }
    sub_1000663D0(v42);
    sub_1000110A4((uint64_t)v42, (uint64_t)v43, &qword_10028EBE8);
    if (v44)
    {
      v11 = v45;
      swift_bridgeObjectRelease(v44);
    }
    else
    {
      v11 = 0xE000000000000000;
    }
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  if (v6
    && (v13 = v1[5],
        v14 = swift_getObjectType(v6),
        (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v14, v13),
        v15 = Locale.isRTL()(),
        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2),
        v15))
  {
    v16 = 2;
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v12, "setAlignment:", v16);
  v17 = sub_100006DF4(&qword_100298070);
  v18 = swift_initStackObject(v17, &v41);
  *(_OWORD *)(v18 + 16) = xmmword_1001E4D60;
  *(_QWORD *)(v18 + 32) = NSForegroundColorAttributeName;
  v19 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  *(_QWORD *)(v18 + 40) = static UIColor.targetTextColor.getter(NSForegroundColorAttributeName);
  *(_QWORD *)(v18 + 64) = v19;
  *(_QWORD *)(v18 + 72) = NSParagraphStyleAttributeName;
  *(_QWORD *)(v18 + 104) = sub_10000A05C(0, &qword_10028EBF0, NSMutableParagraphStyle_ptr);
  *(_QWORD *)(v18 + 80) = v12;
  v20 = NSParagraphStyleAttributeName;
  v21 = v12;
  v22 = sub_1001A4A88(v18);
  v23 = objc_allocWithZone((Class)NSAttributedString);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  type metadata accessor for Key(0);
  sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
  v25.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v23, "initWithString:attributes:", v24, v25.super.isa, swift_bridgeObjectRelease(v22).n128_f64[0]);

LABEL_8:
  return v26;
}

id sub_100066F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  uint64_t KeyPath;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  id v32;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v35 - v7;
  v9 = 0;
  v10 = *(unsigned __int8 *)(v1 + 50);
  if (v10 != 2)
  {
    v11 = v10 & 1;
    v12 = *(_QWORD *)(v1 + 32);
    if (v12)
    {
      v13 = *(_QWORD *)(v1 + 40);
      ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 32));
      v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 32);
      swift_unknownObjectRetain(v12);
      v36 = v12;
      v16 = v15(ObjectType, v13);
      v17 = Locale.identifier.getter(v16);
      v19 = v18;
      v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      v20(v8, v2);
      v21 = *(void **)(v1 + 8);
      if (v11)
      {
        KeyPath = swift_getKeyPath(&unk_1001EA590);
        v23 = &unk_1001EA5B8;
      }
      else
      {
        KeyPath = swift_getKeyPath(&unk_1001EA488);
        v23 = &unk_1001EA4B0;
      }
      v25 = swift_getKeyPath(v23);
      static Published.subscript.getter(v6, v21, KeyPath);

      swift_release(KeyPath);
      v26 = swift_release(v25);
      v27 = Locale.identifier.getter(v26);
      v29 = v28;
      v20(v6, v2);
      if (v17 == v27 && v19 == v29)
      {
        swift_bridgeObjectRelease_n(v19, 2);
      }
      else
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v27, v29, 0);
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease(v19);
        if ((v31 & 1) == 0)
        {
          v32 = sub_100066B00();
LABEL_16:
          v9 = v32;
          swift_unknownObjectRelease(v36);
          return v9;
        }
      }
      v32 = sub_1000666AC();
      goto LABEL_16;
    }
    v24 = *(unsigned __int8 *)(v1 + 49);
    if (v24 == 2)
    {
      return 0;
    }
    else if ((v24 & 1) == v11)
    {
      return sub_1000666AC();
    }
    else
    {
      return sub_100066B00();
    }
  }
  return v9;
}

uint64_t sub_100067174@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  void *v9;
  uint64_t KeyPath;
  void *v11;
  uint64_t v12;
  Swift::Bool v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;

  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(unsigned __int8 *)(v1 + 50);
  if (v7 == 2)
  {
    type metadata accessor for ConversationDisplayBubble(0);
    return sub_1000D5B14(a1);
  }
  else
  {
    v9 = *(void **)(v1 + 8);
    if ((v7 & 1) != 0)
    {
      KeyPath = swift_getKeyPath(&unk_1001EA590);
      v11 = &unk_1001EA5B8;
    }
    else
    {
      KeyPath = swift_getKeyPath(&unk_1001EA488);
      v11 = &unk_1001EA4B0;
    }
    v12 = swift_getKeyPath(v11);
    static Published.subscript.getter(v6, v9, KeyPath);

    swift_release(KeyPath);
    swift_release(v12);
    v13 = Locale.isRTL()();
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
    v14 = type metadata accessor for LayoutDirection(0);
    if (v13)
      v15 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
    else
      v15 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(a1, *v15, v14);
  }
}

BOOL sub_1000672CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(v2);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);
    v2 = v6;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager);
  KeyPath = swift_getKeyPath(&unk_1001EA4D0);
  v10 = swift_getKeyPath(&unk_1001EA4F8);
  v11 = swift_retain(v8);
  static Published.subscript.getter(&v20, v11, KeyPath);
  swift_release(v8);
  swift_release(KeyPath);
  swift_release(v10);
  v12 = v21;
  if (!v2)
  {
    if (!v21)
      goto LABEL_14;
    v13 = v21;
LABEL_12:
    swift_bridgeObjectRelease(v13);
    return 0;
  }
  if (!v21)
  {
    v13 = v2;
    goto LABEL_12;
  }
  if (v5 == v20 && v2 == v21)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v2, v20, v21, 0);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v12);
    result = 0;
    if ((v15 & 1) == 0)
      return result;
  }
LABEL_14:
  if (*(_BYTE *)(v1 + 50) == 2)
    return 1;
  v16 = *(_QWORD *)(v7 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager);
  v17 = swift_getKeyPath(&unk_1001EA518);
  v18 = swift_getKeyPath(&unk_1001EA540);
  v19 = swift_retain(v16);
  static Published.subscript.getter(&v20, v19, v17);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  LODWORD(v17) = v20;
  return (_DWORD)v17 == sub_1000664C0();
}

uint64_t sub_10006749C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 32);
  if (!v1)
    return 0;
  v2 = type metadata accessor for PersistedTranslation(0);
  v3 = swift_dynamicCastClass(v1, v2);
  if (!v3)
  {
    v5 = qword_10028A410;
    swift_unknownObjectRetain(v1);
    if (v5 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v6 = type metadata accessor for Logger(0);
    sub_10000F66C(v6, (uint64_t)qword_1002AA338);
    v7 = swift_unknownObjectRetain_n(v1, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v18 = v11;
      *(_DWORD *)v10 = 136446210;
      ObjectType = swift_getObjectType(v1);
      v13 = _typeName(_:qualified:)(ObjectType, 0);
      v15 = v14;
      v17 = sub_1001A7FE4(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4);
      swift_unknownObjectRelease_n(v1, 2);
      swift_bridgeObjectRelease(v15);
        v10,
        0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
      swift_unknownObjectRelease(v1);

    }
    else
    {

      swift_unknownObjectRelease_n(v1, 3);
    }
    return 0;
  }
  v4 = v3;
  swift_unknownObjectRetain(v1);
  return v4;
}

uint64_t sub_100067684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t result;
  uint64_t v14;
  uint64_t ObjectType;
  char v16;
  unsigned __int8 v17;
  id v18;
  uint64_t v19[5];
  _BYTE v20[16];
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for ConversationDisplayBubble(0);
  v3 = __chkstk_darwin(v2);
  v5 = (id *)((char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __chkstk_darwin(v3);
  v8 = (char *)v19 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)v19 - v9;
  v11 = *(_QWORD *)(v0 + 32);
  result = sub_100032D68(v1, (uint64_t)v19 - v9, v12);
  if (!v11)
  {
    sub_100032DAC((uint64_t)v10, type metadata accessor for ConversationDisplayBubble);
    sub_100032D68(v1, (uint64_t)v8, type metadata accessor for ConversationDisplayBubble);
    goto LABEL_6;
  }
  if (*((_QWORD *)v10 + 4))
  {
    v14 = *((_QWORD *)v10 + 5);
    ObjectType = swift_getObjectType(*((_QWORD *)v10 + 4));
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(ObjectType, v14);
    sub_100032DAC((uint64_t)v10, type metadata accessor for ConversationDisplayBubble);
    sub_100032D68(v1, (uint64_t)v8, type metadata accessor for ConversationDisplayBubble);
    if ((v16 & 1) != 0)
    {
      v17 = 1;
LABEL_10:
      sub_100032DAC((uint64_t)v8, type metadata accessor for ConversationDisplayBubble);
      return v17 & 1;
    }
LABEL_6:
    sub_1000663D0(v19);
    sub_10006B864(v19);
    sub_100032D68((uint64_t)v8, (uint64_t)v5, type metadata accessor for ConversationDisplayBubble);
    sub_1000110A4((uint64_t)v19, (uint64_t)v20, &qword_10028EBE8);
    if (v21)
    {
      v18 = v5[1];
      v17 = sub_10008CF94();

    }
    else
    {
      v17 = 0;
    }
    sub_100032DAC((uint64_t)v5, type metadata accessor for ConversationDisplayBubble);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100067848@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  id v26;
  _QWORD *v27;
  id v28;
  id v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t ObjectType;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v2 = v1;
  v104 = a1;
  v3 = sub_100006DF4(&qword_10028EB60);
  __chkstk_darwin(v3);
  v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028EB68);
  __chkstk_darwin(v6);
  v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028EB70);
  v96 = *(_QWORD *)(v9 - 8);
  v97 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100006DF4(&qword_10028EB78);
  __chkstk_darwin(v95);
  v99 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100006DF4(&qword_10028EB80);
  v13 = __chkstk_darwin(v103);
  v98 = (uint64_t)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v100 = (uint64_t)&v89 - v15;
  v101 = sub_100006DF4(&qword_10028EB88);
  __chkstk_darwin(v101);
  v102 = (uint64_t)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for ConversationDisplayBubble(0);
  v91 = *(_QWORD *)(v93 - 8);
  v17 = *(_QWORD *)(v91 + 64);
  v18 = __chkstk_darwin(v93);
  v92 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v94 = (uint64_t)&v89 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v89 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v89 - v24;
  v26 = sub_100066F44();

  sub_100032D68(v2, (uint64_t)v25, type metadata accessor for ConversationDisplayBubble);
  if (v26)
  {
    sub_100032DAC((uint64_t)v25, type metadata accessor for ConversationDisplayBubble);
    sub_100032D68(v2, (uint64_t)v23, type metadata accessor for ConversationDisplayBubble);
    v27 = (_QWORD *)v2;
LABEL_7:
    v37 = sub_100032DAC((uint64_t)v23, type metadata accessor for ConversationDisplayBubble);
    goto LABEL_8;
  }
  v28 = sub_1000666AC();
  v29 = objc_msgSend(v28, "string");

  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v90 = v6;
  v31 = v11;
  v33 = v32;

  swift_bridgeObjectRelease(v33);
  v34 = HIBYTE(v33) & 0xF;
  v35 = (v33 & 0x2000000000000000) == 0;
  v11 = v31;
  v6 = v90;
  if (v35)
    v36 = v30 & 0xFFFFFFFFFFFFLL;
  else
    v36 = v34;
  sub_100032DAC((uint64_t)v25, type metadata accessor for ConversationDisplayBubble);
  sub_100032D68(v2, (uint64_t)v23, type metadata accessor for ConversationDisplayBubble);
  v27 = (_QWORD *)v2;
  if (v36)
    goto LABEL_7;
  v80 = sub_100066B00();
  v81 = objc_msgSend(v80, "string");

  v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
  v84 = v83;

  swift_bridgeObjectRelease(v84);
  v85 = HIBYTE(v84) & 0xF;
  v35 = (v84 & 0x2000000000000000) == 0;
  v27 = (_QWORD *)v2;
  v6 = v90;
  if (v35)
    v86 = v82 & 0xFFFFFFFFFFFFLL;
  else
    v86 = v85;
  v37 = sub_100032DAC((uint64_t)v23, type metadata accessor for ConversationDisplayBubble);
  if (!v86)
  {
    v87 = v102;
    swift_storeEnumTagMultiPayload(v102, v101, 0);
    v88 = sub_10006B14C();
    return _ConditionalContent<>.init(storage:)(v87, &type metadata for EmptyView, v103, &protocol witness table for EmptyView, v88);
  }
LABEL_8:
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v37);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v38 = sub_100006DF4(&qword_10028EB90);
  sub_100068048(v27, (uint64_t)&v5[*(int *)(v38 + 44)]);
  v39 = sub_10006637C();
  sub_10000B074((uint64_t)v5, (uint64_t)v8, &qword_10028EB60);
  v40 = &v8[*(int *)(v6 + 36)];
  *v40 = v39;
  *((_QWORD *)v40 + 1) = 0x4030000000000000;
  v41 = sub_10000A020((uint64_t)v5, &qword_10028EB60);
  __chkstk_darwin(v41);
  *(&v89 - 2) = (uint64_t)v27;
  v42 = sub_100006DF4(&qword_10028EB98);
  v43 = sub_10006AF44();
  v44 = sub_10006B00C();
  View.contextMenu<A>(menuItems:)(sub_10006AF3C, &v89 - 4, v6, v42, v43, v44);
  sub_10000A020((uint64_t)v8, &qword_10028EB68);
  v45 = v27[4];
  v46 = v94;
  sub_100032D68((uint64_t)v27, v94, type metadata accessor for ConversationDisplayBubble);
  if (v45)
    v47 = *(unsigned __int8 *)(v46 + 51) != 2;
  else
    v47 = 1;
  LODWORD(v90) = v47;
  v49 = (uint64_t)v92;
  v48 = v93;
  v50 = v91;
  v51 = v11;
  sub_100032DAC(v46, type metadata accessor for ConversationDisplayBubble);
  LODWORD(v94) = sub_1000672CC();
  if (!v27[4]
    || (v52 = v27[5],
        ObjectType = swift_getObjectType(v27[4]),
        v54 = sub_1000AC00C(ObjectType, v52),
        v54 == 4))
  {
    v54 = 2;
  }
  LODWORD(v93) = v54;
  sub_100032D68((uint64_t)v27, v49, type metadata accessor for ConversationDisplayBubble);
  v55 = *(unsigned __int8 *)(v50 + 80);
  v56 = (v55 + 16) & ~v55;
  v57 = swift_allocObject(&unk_1002664E0, v56 + v17, v55 | 7);
  sub_10006B0B8(v49, v57 + v56);
  LODWORD(v91) = sub_10006637C();
  v58 = (_QWORD *)((char *)v27 + *(int *)(v48 + 56));
  v59 = v58[1];
  v105[0] = *v58;
  v105[1] = v59;
  v92 = (char *)sub_100006DF4(&qword_10028B260);
  State.projectedValue.getter(&v106, v92);
  v60 = v106;
  v61 = v107;
  v62 = v108;
  swift_retain(v106);
  swift_retain(v61);
  v63 = swift_retain(v57);
  v64 = static VerticalAlignment.center.getter(v63);
  v66 = v96;
  v65 = v97;
  v67 = (uint64_t)v99;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v99, v51, v97);
  swift_release(v57);
  swift_release(v61);
  swift_release(v60);
  v68 = v67 + *(int *)(v95 + 36);
  *(_BYTE *)v68 = v90;
  *(_BYTE *)(v68 + 1) = v94 & 1;
  *(_BYTE *)(v68 + 2) = v93;
  *(_QWORD *)(v68 + 8) = sub_10006B0FC;
  *(_QWORD *)(v68 + 16) = v57;
  *(_BYTE *)(v68 + 24) = v91;
  *(_QWORD *)(v68 + 32) = v64;
  *(_QWORD *)(v68 + 40) = 0;
  *(_QWORD *)(v68 + 48) = v60;
  *(_QWORD *)(v68 + 56) = v61;
  *(_QWORD *)(v68 + 64) = v62;
  *(_QWORD *)(v68 + 72) = 0x4020000000000000;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v51, v65);
  LOBYTE(v65) = sub_10006637C();
  v69 = v58[1];
  v106 = *v58;
  v107 = v69;
  State.wrappedValue.getter(v105);
  v70 = v105[0];
  v105[0] = 0x4079000000000000;
  State.init(wrappedValue:)(&v106, v105, &type metadata for CGFloat);
  v71 = v106;
  v72 = v107;
  v73 = v98;
  sub_10000B074(v67, v98, &qword_10028EB78);
  v74 = v103;
  v75 = v73 + *(int *)(v103 + 36);
  *(_BYTE *)v75 = v65;
  *(_QWORD *)(v75 + 8) = v70;
  *(_QWORD *)(v75 + 16) = 0x3FE8000000000000;
  *(_QWORD *)(v75 + 24) = v71;
  *(_QWORD *)(v75 + 32) = v72;
  sub_10000A020(v67, &qword_10028EB78);
  v76 = v100;
  sub_1000110A4(v73, v100, &qword_10028EB80);
  v77 = v102;
  sub_10000B074(v76, v102, &qword_10028EB80);
  swift_storeEnumTagMultiPayload(v77, v101, 1);
  v78 = sub_10006B14C();
  _ConditionalContent<>.init(storage:)(v77, &type metadata for EmptyView, v74, &protocol witness table for EmptyView, v78);
  return sub_10000A020(v76, &qword_10028EB80);
}

uint64_t sub_100068048@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  double v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t KeyPath;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  id v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  double v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  double v101;
  uint64_t v102;
  __int128 v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t ObjectType;
  char *v109;
  Swift::Bool v110;
  unsigned int *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  void (*v120)(char *, char *, uint64_t);
  void (*v121)(uint64_t, char *, uint64_t);
  void (*v122)(uint64_t, char *, uint64_t);
  char *v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  double v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  id v151;
  uint64_t v152;
  _QWORD *v153;
  UIFontTextStyle v154;
  id v155;
  id v156;
  id v157;
  id v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  Swift::Bool v174;
  unsigned int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v207;
  int *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  id v217;
  Swift::String v218;
  Swift::String v219;
  Swift::String v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t (**v224)();
  uint64_t v225;
  char *v226;
  _QWORD *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  id v233;
  void (*v234)(char *, uint64_t, uint64_t, _QWORD *);
  UIFontTextStyle v235;
  char *v236;
  int *v237;
  char *v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  void (*v253)(uint64_t, char *, uint64_t);
  char *v254;
  unsigned __int8 *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  _QWORD *v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  double v279;
  uint64_t v280;
  double v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  Swift::String v285;

  v270 = a2;
  v271 = sub_100006DF4(&qword_10028EC10);
  __chkstk_darwin(v271);
  v261 = (char *)&v225 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = type metadata accessor for Divider(0);
  v244 = *(_QWORD *)(v245 - 8);
  __chkstk_darwin(v245);
  v243 = (char *)&v225 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_100006DF4(&qword_10028EC18);
  __chkstk_darwin(v242);
  v248 = (char *)&v225 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = sub_100006DF4(&qword_10028EC20);
  v6 = __chkstk_darwin(v247);
  v250 = (uint64_t)&v225 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v246 = (uint64_t)&v225 - v9;
  __chkstk_darwin(v8);
  v260 = (uint64_t)&v225 - v10;
  v258 = type metadata accessor for ConversationDisplayBubble(0);
  v241 = *(_QWORD *)(v258 - 8);
  v11 = __chkstk_darwin(v258);
  v252 = (char *)&v225 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = v12;
  __chkstk_darwin(v11);
  v255 = (unsigned __int8 *)&v225 - v13;
  v14 = sub_100006DF4(&qword_10028EC28);
  v15 = __chkstk_darwin(v14);
  v257 = (uint64_t)&v225 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v266 = (uint64_t)&v225 - v17;
  v275 = (_QWORD *)type metadata accessor for Locale(0);
  v272 = *(v275 - 1);
  __chkstk_darwin(v275);
  v251 = (char *)&v225 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = sub_100006DF4(&qword_10028EC30);
  __chkstk_darwin(v268);
  v273 = (uint64_t)&v225 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = sub_100006DF4(&qword_10028EC38);
  v20 = __chkstk_darwin(v269);
  v263 = (char *)&v225 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v264 = (char *)&v225 - v22;
  v274 = type metadata accessor for LayoutDirection(0);
  v267 = *(_QWORD *)(v274 - 8);
  v23 = __chkstk_darwin(v274);
  v249 = (char *)&v225 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v262 = (uint64_t *)((char *)&v225 - v26);
  __chkstk_darwin(v25);
  v254 = (char *)&v225 - v27;
  v28 = (int *)type metadata accessor for LanguageAwareText(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = sub_100006DF4(&qword_10028EC40);
  v253 = *(void (**)(uint64_t, char *, uint64_t))(v259 - 8);
  v31 = __chkstk_darwin(v259);
  v33 = (char *)&v225 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v265 = (char *)&v225 - v34;
  v35 = sub_100006DF4(&qword_10028EC48);
  v36 = __chkstk_darwin(v35);
  v38 = (uint64_t *)((char *)&v225 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = __chkstk_darwin(v36);
  v41 = (char *)&v225 - v40;
  v42 = __chkstk_darwin(v39);
  v44 = (char *)&v225 - v43;
  v45 = __chkstk_darwin(v42);
  v47 = (char *)&v225 - v46;
  __chkstk_darwin(v45);
  v49 = (char *)&v225 - v48;
  v276 = a1;
  v50 = sub_100066F44();
  if (v50)
  {
    v51 = v50;
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v272 + 56))(&v30[v28[6]], 1, 1, v275);
    v52 = (void *)objc_opt_self(UIFontDescriptor);
    v275 = v51;
    v53 = objc_msgSend(v52, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle2, 0);
    v54 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v53, "pointSize");
    v55 = objc_msgSend(v54, "systemFontOfSize:weight:");
    v56 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle2);
    v57 = objc_msgSend(v56, "scaledFontForFont:maximumPointSize:", v55, 1.79769313e308);

    v58 = sub_10015E56C();
    v59 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache();
    v60 = (_QWORD *)swift_allocObject(v59, 40, 7);
    v60[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
    v60[3] = _swiftEmptyArrayStorage;
    v60[4] = 100;
    *(_QWORD *)v30 = v51;
    *(_OWORD *)(v30 + 8) = xmmword_1001EA330;
    *(_QWORD *)&v30[v28[7]] = v57;
    v30[v28[8]] = 0;
    *(_QWORD *)&v30[v28[9]] = 0;
    *(double *)&v30[v28[10]] = v58;
    v30[v28[11]] = 0;
    v61 = &v30[v28[12]];
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v61 + 1) = 0;
    v61[16] = 1;
    v62 = &v30[v28[13]];
    *(_QWORD *)v62 = 0;
    *((_QWORD *)v62 + 1) = 0;
    *(_QWORD *)&v30[v28[14]] = 0;
    v30[v28[15]] = 0;
    v63 = &v30[v28[16]];
    *(_QWORD *)v63 = 0;
    *((_QWORD *)v63 + 1) = 0;
    v64 = &v30[v28[17]];
    *(_QWORD *)v64 = 0;
    *((_QWORD *)v64 + 1) = 0;
    v65 = &v30[v28[18]];
    *(_QWORD *)v65 = 0;
    *((_QWORD *)v65 + 1) = 0;
    *(_QWORD *)&v30[v28[19]] = 0;
    v30[v28[20]] = 0;
    v66 = &v30[v28[21]];
    *(_QWORD *)v66 = 0;
    *((_QWORD *)v66 + 1) = 0;
    *(_QWORD *)&v30[v28[22]] = v60;
    KeyPath = swift_getKeyPath(&unk_1001EA560);
    v68 = v262;
    sub_100067174(v262);
    v69 = v269;
    v70 = (uint64_t)v263;
    v71 = (uint64_t *)&v263[*(int *)(v269 + 36)];
    v72 = sub_100006DF4(&qword_10028B258);
    v73 = v267;
    v74 = v274;
    (*(void (**)(char *, _QWORD *, uint64_t))(v267 + 16))((char *)v71 + *(int *)(v72 + 28), v68, v274);
    *v71 = KeyPath;
    sub_100032D68((uint64_t)v30, v70, type metadata accessor for LanguageAwareText);
    (*(void (**)(_QWORD *, uint64_t))(v73 + 8))(v68, v74);
    sub_100032DAC((uint64_t)v30, type metadata accessor for LanguageAwareText);
    v75 = v70;
    v76 = (uint64_t)v264;
    sub_1000110A4(v75, (uint64_t)v264, &qword_10028EC38);
    v77 = v273;
    sub_10000B074(v76, v273, &qword_10028EC38);
    swift_storeEnumTagMultiPayload(v77, v268, 0);
    v78 = sub_10006B5E0();
    v79 = sub_100012334(&qword_10028EC68, &qword_10028EC10, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v77, v69, v271, v78, v79);

    v80 = v76;
    v81 = &qword_10028EC38;
    return sub_10000A020(v80, v81);
  }
  v240 = (uint64_t)v47;
  v263 = (char *)v35;
  v226 = v41;
  v238 = v33;
  v236 = v44;
  v262 = v38;
  v264 = v49;
  v82 = v276;
  *(_QWORD *)&v239 = sub_1000666AC();
  v83 = &v30[v28[6]];
  v84 = v272;
  v85 = v275;
  v234 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v272 + 56);
  v234(v83, 1, 1, v275);
  v233 = (id)objc_opt_self(UIFontDescriptor);
  v86 = objc_msgSend(v233, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle2, 0);
  v87 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v86, "pointSize");
  v232 = v87;
  v88 = objc_msgSend(v87, "systemFontOfSize:weight:");
  v89 = objc_allocWithZone((Class)UIFontMetrics);
  v235 = UIFontTextStyleTitle2;
  v90 = objc_msgSend(v89, "initForTextStyle:", UIFontTextStyleTitle2);
  v91 = objc_msgSend(v90, "scaledFontForFont:maximumPointSize:", v88, 1.79769313e308);

  v92 = sub_10015E56C();
  v231 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache();
  v93 = (_QWORD *)swift_allocObject(v231, 40, 7);
  v93[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
  v93[3] = _swiftEmptyArrayStorage;
  v93[4] = 100;
  *(_QWORD *)v30 = v239;
  v239 = xmmword_1001EA330;
  *(_OWORD *)(v30 + 8) = xmmword_1001EA330;
  *(_QWORD *)&v30[v28[7]] = v91;
  v30[v28[8]] = 0;
  *(_QWORD *)&v30[v28[9]] = 0;
  *(double *)&v30[v28[10]] = v92;
  v30[v28[11]] = 0;
  v94 = &v30[v28[12]];
  *(_QWORD *)v94 = 0;
  *((_QWORD *)v94 + 1) = 0;
  v94[16] = 1;
  v95 = &v30[v28[13]];
  *(_QWORD *)v95 = 0;
  *((_QWORD *)v95 + 1) = 0;
  *(_QWORD *)&v30[v28[14]] = 0;
  v30[v28[15]] = 0;
  v96 = &v30[v28[16]];
  *(_QWORD *)v96 = 0;
  *((_QWORD *)v96 + 1) = 0;
  v97 = &v30[v28[17]];
  *(_QWORD *)v97 = 0;
  *((_QWORD *)v97 + 1) = 0;
  v98 = &v30[v28[18]];
  *(_QWORD *)v98 = 0;
  *((_QWORD *)v98 + 1) = 0;
  *(_QWORD *)&v30[v28[19]] = 0;
  v30[v28[20]] = 1;
  v99 = &v30[v28[21]];
  *(_QWORD *)v99 = 0;
  *((_QWORD *)v99 + 1) = 0;
  *(_QWORD *)&v30[v28[22]] = v93;
  v100 = (_QWORD *)((char *)v82 + *(int *)(v258 + 48));
  v101 = *(double *)v100;
  v227 = v100;
  v102 = v100[1];
  v279 = v101;
  v280 = v102;
  v230 = sub_100006DF4(&qword_10028B260);
  State.projectedValue.getter(&v282, v230);
  v103 = v282;
  v104 = *(double *)&v283;
  v229 = sub_100007D5C(&qword_10028D0F0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF768);
  View.bindGeometry(to:reader:)(v103, *((_QWORD *)&v103 + 1), sub_10006B944, 0, v28, v229, v104);
  swift_release(*((_QWORD *)&v103 + 1));
  swift_release(v103);
  sub_100032DAC((uint64_t)v30, type metadata accessor for LanguageAwareText);
  v105 = swift_getKeyPath(&unk_1001EA560);
  v106 = v82[4];
  v228 = v30;
  v237 = v28;
  if (v106
    && (v107 = v82[5],
        ObjectType = swift_getObjectType(v106),
        v109 = v251,
        (*(void (**)(uint64_t, uint64_t))(v107 + 32))(ObjectType, v107),
        v110 = Locale.isRTL()(),
        (*(void (**)(char *, _QWORD *))(v84 + 8))(v109, v85),
        v110))
  {
    v111 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  }
  else
  {
    v111 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  }
  v112 = (uint64_t)v264;
  v113 = v274;
  v114 = v254;
  v115 = v240;
  v116 = *v111;
  v117 = v267;
  v118 = v254;
  v254 = *(char **)(v267 + 104);
  ((void (*)(char *, uint64_t, uint64_t))v254)(v118, v116, v274);
  v119 = (uint64_t *)(v115 + *((int *)v263 + 9));
  v240 = sub_100006DF4(&qword_10028B258);
  v120 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
  v120((char *)v119 + *(int *)(v240 + 28), v114, v113);
  *v119 = v105;
  v121 = v253;
  v122 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v253 + 2);
  v123 = v265;
  v124 = v259;
  v122(v115, v265, v259);
  v267 = *(_QWORD *)(v117 + 8);
  ((void (*)(char *, uint64_t))v267)(v114, v113);
  v265 = (char *)*((_QWORD *)v121 + 1);
  ((void (*)(char *, uint64_t))v265)(v123, v124);
  sub_1000110A4(v115, v112, &qword_10028EC48);
  v125 = v276;
  LOBYTE(v123) = sub_100067684();
  v126 = v255;
  sub_100032D68((uint64_t)v125, (uint64_t)v255, type metadata accessor for ConversationDisplayBubble);
  v127 = v260;
  if ((v123 & 1) != 0)
  {
    sub_100032DAC((uint64_t)v126, type metadata accessor for ConversationDisplayBubble);
    v128 = (uint64_t)v261;
  }
  else
  {
    v253 = v122;
    v129 = v126[51];
    v130 = sub_100032DAC((uint64_t)v126, type metadata accessor for ConversationDisplayBubble);
    v128 = (uint64_t)v261;
    v131 = v237;
    if (v129 == 2)
    {
      v255 = (unsigned __int8 *)v120;
      v132 = v243;
      Divider.init()(v130);
      v133 = v227[1];
      *(_QWORD *)&v282 = *v227;
      *((_QWORD *)&v282 + 1) = v133;
      v134 = v230;
      State.wrappedValue.getter(&v279);
      v135 = v279;
      v136 = (_QWORD *)((char *)v125 + *(int *)(v258 + 52));
      v137 = v136[1];
      *(_QWORD *)&v282 = *v136;
      *((_QWORD *)&v282 + 1) = v137;
      v138 = State.wrappedValue.getter(&v279);
      v139 = v279;
      if (v135 > v279)
        v139 = v135;
      v140 = v139;
      v141 = static Alignment.center.getter(v138);
      _FrameLayout.init(width:height:alignment:)(&v282, *(_QWORD *)&v140, 0, 0, 1, v141, v142);
      v143 = v244;
      v144 = (uint64_t)v248;
      v145 = v245;
      (*(void (**)(char *, char *, uint64_t))(v244 + 16))(v248, v132, v245);
      v146 = (_OWORD *)(v144 + *(int *)(v242 + 36));
      v147 = v283;
      *v146 = v282;
      v146[1] = v147;
      v146[2] = v284;
      (*(void (**)(char *, uint64_t))(v143 + 8))(v132, v145);
      if (qword_10028A3C8 != -1)
        swift_once(&qword_10028A3C8, sub_100066350);
      v148 = qword_1002AA138;
      v149 = v246;
      sub_10000B074(v144, v246, &qword_10028EC18);
      v150 = (uint64_t *)(v149 + *(int *)(v247 + 36));
      *v150 = v148;
      v150[1] = (uint64_t)sub_100066328;
      v150[2] = 0;
      sub_10000A020(v144, &qword_10028EC18);
      sub_1000110A4(v149, v127, &qword_10028EC20);
      v151 = sub_100066B00();
      v152 = (uint64_t)v228;
      v153 = v275;
      v234(&v228[v131[6]], 1, 1, v275);
      v154 = v235;
      v155 = objc_msgSend(v233, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", v235, 0);
      objc_msgSend(v155, "pointSize");
      v156 = objc_msgSend(v232, "systemFontOfSize:weight:");
      v157 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", v154);
      v158 = objc_msgSend(v157, "scaledFontForFont:maximumPointSize:", v156, 1.79769313e308);

      v159 = (_QWORD *)swift_allocObject(v231, 40, 7);
      v159[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
      v159[3] = _swiftEmptyArrayStorage;
      v159[4] = 100;
      *(_QWORD *)v152 = v151;
      *(_OWORD *)(v152 + 8) = v239;
      *(_QWORD *)(v152 + v131[7]) = v158;
      *(_BYTE *)(v152 + v131[8]) = 0;
      *(_QWORD *)(v152 + v131[9]) = 0;
      *(_QWORD *)(v152 + v131[10]) = 0;
      *(_BYTE *)(v152 + v131[11]) = 0;
      v160 = v152 + v131[12];
      *(_QWORD *)v160 = 0;
      *(_QWORD *)(v160 + 8) = 0;
      *(_BYTE *)(v160 + 16) = 1;
      v161 = (_QWORD *)(v152 + v131[13]);
      *v161 = 0;
      v161[1] = 0;
      *(_QWORD *)(v152 + v131[14]) = 0;
      *(_BYTE *)(v152 + v131[15]) = 0;
      v162 = (_QWORD *)(v152 + v131[16]);
      *v162 = 0;
      v162[1] = 0;
      v163 = (_QWORD *)(v152 + v131[17]);
      *v163 = 0;
      v163[1] = 0;
      v164 = (_QWORD *)(v152 + v131[18]);
      *v164 = 0;
      v164[1] = 0;
      *(_QWORD *)(v152 + v131[19]) = 0;
      *(_BYTE *)(v152 + v131[20]) = 1;
      v165 = (_QWORD *)(v152 + v131[21]);
      *v165 = 0;
      v165[1] = 0;
      *(_QWORD *)(v152 + v131[22]) = v159;
      v166 = v136[1];
      v277 = *v136;
      v278 = v166;
      State.projectedValue.getter(&v279, v134);
      v167 = v279;
      v168 = v280;
      View.bindGeometry(to:reader:)(*(_QWORD *)&v279, v280, sub_100061844, 0, v131, v229, v281);
      v169 = v168;
      v125 = v276;
      swift_release(v169);
      swift_release(*(_QWORD *)&v167);
      sub_100032DAC(v152, type metadata accessor for LanguageAwareText);
      v170 = swift_getKeyPath(&unk_1001EA560);
      if (v125[4]
        && (v171 = v125[5],
            v172 = swift_getObjectType(v125[4]),
            v173 = v251,
            (*(void (**)(uint64_t, uint64_t))(v171 + 40))(v172, v171),
            v174 = Locale.isRTL()(),
            (*(void (**)(char *, _QWORD *))(v272 + 8))(v173, v153),
            v174))
      {
        v175 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
      }
      else
      {
        v175 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
      }
      v128 = (uint64_t)v261;
      v178 = v257;
      v177 = (uint64_t)v252;
      v179 = v262;
      v180 = v274;
      v181 = (uint64_t)v226;
      v182 = v249;
      ((void (*)(char *, _QWORD, uint64_t))v254)(v249, *v175, v274);
      v183 = (uint64_t *)(v181 + *((int *)v263 + 9));
      ((void (*)(char *, char *, uint64_t))v255)((char *)v183 + *(int *)(v240 + 28), v182, v180);
      *v183 = v170;
      v184 = v238;
      v185 = v259;
      v253(v181, v238, v259);
      ((void (*)(char *, uint64_t))v267)(v182, v180);
      ((void (*)(char *, uint64_t))v265)(v184, v185);
      v186 = v181;
      v187 = (uint64_t)v236;
      sub_1000110A4(v186, (uint64_t)v236, &qword_10028EC48);
      v188 = v260;
      v189 = v250;
      sub_10000B074(v260, v250, &qword_10028EC20);
      sub_10000B074(v187, (uint64_t)v179, &qword_10028EC48);
      sub_10000B074(v189, v178, &qword_10028EC20);
      v190 = sub_100006DF4(&qword_10028EC70);
      sub_10000B074((uint64_t)v179, v178 + *(int *)(v190 + 48), &qword_10028EC48);
      sub_10000A020(v187, &qword_10028EC48);
      sub_10000A020(v188, &qword_10028EC20);
      sub_10000A020((uint64_t)v179, &qword_10028EC48);
      sub_10000A020(v189, &qword_10028EC20);
      v191 = sub_100006DF4(&qword_10028EC50);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 56))(v178, 0, 1, v191);
      sub_1000110A4(v178, v266, &qword_10028EC28);
      goto LABEL_20;
    }
  }
  v176 = sub_100006DF4(&qword_10028EC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 56))(v266, 1, 1, v176);
  v177 = (uint64_t)v252;
LABEL_20:
  v192 = v256;
  v193 = v273;
  if (v125[4])
    goto LABEL_22;
  v194 = (void *)v125[1];
  v195 = swift_getKeyPath(&unk_1001EA3F8);
  v196 = swift_getKeyPath(&unk_1001EA420);
  v197 = v194;
  static Published.subscript.getter(&v279, v197, v195);

  swift_release(v195);
  swift_release(v196);
  if (BYTE2(v279) << 16 == 0x80000)
  {
LABEL_22:
    v198 = 0;
  }
  else
  {
    v207 = sub_100006DF4(&qword_10028DFC8);
    v208 = (int *)type metadata accessor for TranslateTip(0);
    v209 = *((_QWORD *)v208 - 1);
    v210 = *(_QWORD *)(v209 + 72);
    v211 = *(unsigned __int8 *)(v209 + 80);
    v212 = (v211 + 32) & ~v211;
    v198 = swift_allocObject(v207, v212 + v210, v211 | 7);
    *(_OWORD *)(v198 + 16) = xmmword_1001E64F0;
    v213 = v198 + v212;
    sub_100032D68((uint64_t)v125, v177, type metadata accessor for ConversationDisplayBubble);
    v214 = *(unsigned __int8 *)(v241 + 80);
    v215 = (v214 + 16) & ~v214;
    v216 = swift_allocObject(&unk_100266580, v215 + v192, v214 | 7);
    sub_10006B0B8(v177, v216 + v215);
    v217 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v285._object = (void *)0xE000000000000000;
    v218._object = (void *)0x80000001001FA050;
    v218._countAndFlagsBits = 0xD000000000000016;
    v219._countAndFlagsBits = 0;
    v219._object = (void *)0xE000000000000000;
    v285._countAndFlagsBits = 0;
    v220 = NSLocalizedString(_:tableName:bundle:value:comment:)(v218, (Swift::String_optional)0, (NSBundle)v217, v219, v285);

    v221 = swift_allocObject(&unk_1002665A8, 32, 7);
    *(_QWORD *)(v221 + 16) = sub_10006B7C8;
    *(_QWORD *)(v221 + 24) = v216;
    v222 = swift_retain(v216);
    UUID.init()(v222);
    *(Swift::String *)(v213 + v208[5]) = v220;
    v193 = v273;
    v223 = (_QWORD *)(v213 + v208[6]);
    *v223 = 0;
    v223[1] = 0;
    v224 = (uint64_t (**)())(v213 + v208[7]);
    *v224 = sub_10005DDA0;
    v224[1] = (uint64_t (*)())v221;
    v128 = (uint64_t)v261;
    swift_release(v216);
  }
  v199 = (uint64_t)v264;
  v200 = v262;
  sub_10000B074((uint64_t)v264, (uint64_t)v262, &qword_10028EC48);
  v201 = v266;
  v202 = v257;
  sub_10000B074(v266, v257, &qword_10028EC28);
  sub_10000B074((uint64_t)v200, v128, &qword_10028EC48);
  v203 = sub_100006DF4(&qword_10028EC58);
  sub_10000B074(v202, v128 + *(int *)(v203 + 48), &qword_10028EC28);
  *(_QWORD *)(v128 + *(int *)(v203 + 64)) = v198;
  sub_10000A020(v202, &qword_10028EC28);
  sub_10000A020((uint64_t)v200, &qword_10028EC48);
  sub_10000B074(v128, v193, &qword_10028EC10);
  swift_storeEnumTagMultiPayload(v193, v268, 1);
  v204 = sub_10006B5E0();
  v205 = sub_100012334(&qword_10028EC68, &qword_10028EC10, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v193, v269, v271, v204, v205);
  sub_10000A020(v128, &qword_10028EC10);
  sub_10000A020(v201, &qword_10028EC28);
  v80 = v199;
  v81 = &qword_10028EC48;
  return sub_10000A020(v80, v81);
}

void sub_100069798(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t KeyPath;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  __int16 v15;
  char v16;

  v1 = qword_10028A410;
  v2 = (char *)*(id *)(a1 + 8);
  if (v1 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000F66C(v3, (uint64_t)qword_1002AA338);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Resetting ConversationViewModel", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  sub_10008FD60();
  sub_100090758(3, 1, 1);
  sub_1001D3410();
  KeyPath = swift_getKeyPath(&unk_1001EA3F8);
  v9 = swift_getKeyPath(&unk_1001EA420);
  v16 = 8;
  v15 = 0;
  static Published.subscript.setter(&v15, v2, KeyPath, v9);
  v10 = *(unsigned __int16 *)&v2[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
  if ((v10 & 0xFF00) == 0x200)
  {
    v11 = v2;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Cannot restart last speech translation since there never was a speech translation that started before", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  else
  {
    v12 = v2;
    sub_10009005C(v10, (v10 >> 8) & 1);
  }

}

void *sub_1000699A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for ConversationDisplayBubble(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)sub_10006749C();
  if (!result)
  {
    v21 = 0;
    v23 = 0;
    v26 = 0;
    v28 = 0;
    v10 = 0;
    v12 = 0;
    goto LABEL_7;
  }
  v9 = result;
  if (*(_BYTE *)(a1 + 50) != 2 || *(_BYTE *)(a1 + 51) != 2)
  {

    v21 = 0;
    v23 = 0;
    v26 = 0;
    v28 = 0;
    v10 = 0;
    v12 = 0;
    result = 0;
LABEL_7:
    v30 = 0;
    v32 = 0;
    v17 = 0;
    v31 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  v10 = dispatch thunk of PersistedTranslation.displayText.getter(result);
  v12 = v11;
  sub_100032D68(a1, (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ConversationDisplayBubble);
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = v14 + v6;
  v16 = v13 | 7;
  v17 = swift_allocObject(&unk_100266530, v14 + v6, v13 | 7);
  sub_10006B0B8((uint64_t)v7, v17 + v14);
  sub_100032D68(a1, (uint64_t)v7, type metadata accessor for ConversationDisplayBubble);
  v18 = swift_allocObject(&unk_100266558, v15, v16);
  sub_10006B0B8((uint64_t)v7, v18 + v14);
  v19 = type metadata accessor for ConversationContext(0);
  v20 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v21 = EnvironmentObject.init()(v19, v20);
  v23 = v22;
  v24 = type metadata accessor for SceneContext(0);
  v25 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v26 = EnvironmentObject.init()(v24, v25);
  v28 = v27;
  v34 = type metadata accessor for PersistedTranslation(0);
  v29 = sub_100007D5C(&qword_10028EC08, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&protocol conformance descriptor for NSManagedObject);
  result = (void *)ObservedObject.init(wrappedValue:)(v9, v34, v29);
  v31 = sub_10006B574;
  v32 = sub_10006B564;
LABEL_8:
  *a2 = v21;
  a2[1] = v23;
  a2[2] = v26;
  a2[3] = v28;
  a2[4] = v10;
  a2[5] = v12;
  a2[6] = (uint64_t)result;
  a2[7] = v30;
  a2[8] = (uint64_t)v32;
  a2[9] = v17;
  a2[10] = (uint64_t)v31;
  a2[11] = v18;
  return result;
}

void sub_100069C04(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  id v7;

  v7 = *(id *)(a3 + 8);
  a4(a1, a2);

}

uint64_t sub_100069C5C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  void (*v17)(uint64_t, uint64_t, double);
  int v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[12];
  _BOOL4 v32;

  v3 = v2;
  v6 = type metadata accessor for ConversationDisplayBubble(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100006DF4(&qword_10028F190);
  result = __chkstk_darwin(v10);
  v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(_QWORD *)(v3 + 32);
  if (v14)
  {
    v15 = *(_QWORD *)(v3 + 40);
    if ((a2 & 1) != 0)
    {
      swift_unknownObjectRetain(*(_QWORD *)(v3 + 32));
    }
    else
    {
      ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 32));
      v17 = *(void (**)(uint64_t, uint64_t, double))(v15 + 104);
      swift_unknownObjectRetain(v14);
      v17(ObjectType, v15, *(double *)&a1);
    }
    v18 = *(unsigned __int8 *)(v3 + 50);
    if (v18 == 2)
    {
      v19 = *(unsigned __int8 *)(v3 + 48);
      if (v19 == 2)
      {
        v20 = 0;
        v32 = 0;
        v21 = 0;
      }
      else
      {
        v32 = 0;
        v21 = v19 & 1;
        v20 = (v19 & 1) == 0;
      }
    }
    else
    {
      v32 = sub_1000664C0() == 0;
      v20 = v18 & 1;
      v21 = v18 & 1;
    }
    v22 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 1, 1, v22);
    sub_100032D68(v3, (uint64_t)&v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for ConversationDisplayBubble);
    type metadata accessor for MainActor(0);
    v23 = swift_unknownObjectRetain(v14);
    v24 = static MainActor.shared.getter(v23);
    v25 = *(unsigned __int8 *)(v7 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = (v8 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = swift_allocObject(&unk_100266508, v27 + 19, v25 | 7);
    *(_QWORD *)(v28 + 16) = v24;
    *(_QWORD *)(v28 + 24) = &protocol witness table for MainActor;
    sub_10006B0B8((uint64_t)v9, v28 + v26);
    v29 = v28 + v27;
    *(_QWORD *)v29 = v14;
    *(_QWORD *)(v29 + 8) = v15;
    *(_BYTE *)(v29 + 16) = v32;
    *(_BYTE *)(v29 + 17) = v21 & 1;
    *(_BYTE *)(v29 + 18) = v20;
    v30 = sub_100049DC0((uint64_t)v13, (uint64_t)&unk_10028EC00, v28);
    swift_unknownObjectRelease(v14);
    return swift_release(v30);
  }
  return result;
}

uint64_t sub_100069E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_BYTE *)(v8 + 82) = v13;
  *(_BYTE *)(v8 + 81) = a8;
  *(_BYTE *)(v8 + 80) = a7;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 40) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 56) = v11;
  return swift_task_switch(sub_100069F20, v10, v11);
}

uint64_t sub_100069F20()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, char, char, char, char, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(*(_QWORD *)(v0 + 16) + 8);
  *(_QWORD *)(v0 + 64) = v2;
  ObjectType = swift_getObjectType(v1);
  v4 = unk_10028F6DC;
  v8 = (uint64_t (*)(uint64_t, char, char, char, char, uint64_t, uint64_t, uint64_t))((char *)&dword_10028F6D8
                                                                                          + dword_10028F6D8);
  v5 = v2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_100069FC0;
  return v8(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 80), *(_BYTE *)(v0 + 81), *(_BYTE *)(v0 + 82), 0, (uint64_t)v5, ObjectType, *(_QWORD *)(v0 + 32));
}

uint64_t sub_100069FC0()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;

  v1 = *v0;
  v2 = *(void **)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));

  return swift_task_switch(sub_10006A010, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10006A010()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, uint64_t a13, uint64_t a14)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  double v40;
  uint64_t v41;
  uint64_t v42;

  v25 = type metadata accessor for ConversationViewModel(0);
  v26 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  *(_QWORD *)a9 = ObservedObject.init(wrappedValue:)(a1, v25, v26);
  *(_QWORD *)(a9 + 8) = v27;
  v28 = type metadata accessor for TTSManager(0);
  v29 = sub_100007D5C(&qword_10028EA78, type metadata accessor for TTSManager, (uint64_t)&unk_1001F75B4);
  *(_QWORD *)(a9 + 16) = ObservedObject.init(wrappedValue:)(a2, v28, v29);
  *(_QWORD *)(a9 + 24) = v30;
  *(_QWORD *)(a9 + 32) = a3;
  *(_QWORD *)(a9 + 40) = a4;
  *(_BYTE *)(a9 + 48) = a5;
  *(_BYTE *)(a9 + 49) = a6;
  *(_BYTE *)(a9 + 50) = a7;
  *(_BYTE *)(a9 + 51) = a8;
  v31 = (int *)type metadata accessor for ConversationDisplayBubble(0);
  sub_1000110A4(a13, a9 + v31[11], &qword_10028EA80);
  v32 = (_QWORD *)(a9 + v31[12]);
  v40 = a10;
  State.init(wrappedValue:)(&v41, &v40, &type metadata for CGFloat);
  v33 = v42;
  *v32 = v41;
  v32[1] = v33;
  v34 = (_QWORD *)(a9 + v31[13]);
  v40 = a11;
  State.init(wrappedValue:)(&v41, &v40, &type metadata for CGFloat);
  v35 = v42;
  *v34 = v41;
  v34[1] = v35;
  v36 = (_QWORD *)(a9 + v31[14]);
  v40 = a12;
  State.init(wrappedValue:)(&v41, &v40, &type metadata for CGFloat);
  v37 = v42;
  *v36 = v41;
  v36[1] = v37;
  return sub_1000110A4(a14, a9 + v31[15], &qword_10028EA88);
}

uint64_t type metadata accessor for ConversationDisplayBubble(uint64_t a1)
{
  uint64_t result;

  result = qword_10028EAF0;
  if (!qword_10028EAF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationDisplayBubble);
  return result;
}

_QWORD *sub_10006A260(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = (void *)a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v40 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v40;
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    v9 = a3[11];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v7;
    swift_retain(v8);
    swift_unknownObjectRetain(v40);
    v13 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
    {
      v14 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
      v15 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v13, v15);
    v18 = a3[12];
    v19 = a3[13];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)((char *)v4 + v19);
    v24 = (uint64_t *)((char *)a2 + v19);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = a3[14];
    v27 = a3[15];
    v28 = (_QWORD *)((char *)v4 + v26);
    v29 = (uint64_t *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (_QWORD *)((char *)v4 + v27);
    v32 = (uint64_t *)((char *)a2 + v27);
    swift_retain(v22);
    swift_retain(v25);
    swift_retain(v30);
    v33 = sub_100006DF4(&qword_10028EA90);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = v31;
      v36 = v33;
      v37 = 1;
    }
    else
    {
      v38 = *v32;
      *v31 = *v32;
      swift_retain(v38);
      v35 = v31;
      v36 = v33;
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v36, v37);
  }
  return v4;
}

uint64_t sub_10006A440(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(a1 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 32));
  v4 = (_QWORD *)(a1 + a2[11]);
  v5 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  swift_release(*(_QWORD *)(a1 + a2[12] + 8));
  swift_release(*(_QWORD *)(a1 + a2[13] + 8));
  swift_release(*(_QWORD *)(a1 + a2[14] + 8));
  v7 = (_QWORD *)(a1 + a2[15]);
  v8 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7);
  v9 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
}

uint64_t sub_10006A554(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;

  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v36 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v36;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v8 = a3[11];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = v6;
  swift_retain(v7);
  swift_unknownObjectRetain(v36);
  v12 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v10, v12) == 1)
  {
    v13 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v10;
    *v9 = *v10;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v12, v14);
  v16 = a3[12];
  v17 = a3[13];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)(a1 + v17);
  v22 = (_QWORD *)(a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[14];
  v25 = a3[15];
  v26 = (_QWORD *)(a1 + v24);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (uint64_t *)(a1 + v25);
  v30 = (uint64_t *)(a2 + v25);
  swift_retain(v20);
  swift_retain(v23);
  swift_retain(v28);
  v31 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    v33 = 1;
  }
  else
  {
    v34 = *v30;
    *v29 = *v30;
    swift_retain(v34);
    v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v31, v33);
  return a1;
}

uint64_t sub_10006A700(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_unknownObjectRetain(v11);
  swift_unknownObjectRelease(v13);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  if (a1 != a2)
  {
    v14 = a3[11];
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    sub_10000A020(a1 + v14, &qword_1002969A0);
    v17 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  v21 = a3[12];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v24 = v22[1];
  v25 = v23[1];
  v22[1] = v25;
  swift_retain(v25);
  swift_release(v24);
  v26 = a3[13];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v29 = v27[1];
  v30 = v28[1];
  v27[1] = v30;
  swift_retain(v30);
  swift_release(v29);
  v31 = a3[14];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v34 = v32[1];
  v35 = v33[1];
  v32[1] = v35;
  swift_retain(v35);
  swift_release(v34);
  if (a1 != a2)
  {
    v36 = a3[15];
    v37 = (uint64_t *)(a1 + v36);
    v38 = (uint64_t *)(a2 + v36);
    sub_10000A020(a1 + v36, &qword_10028EA90);
    v39 = sub_100006DF4(&qword_10028EA90);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v37, v38, v40);
      v41 = 1;
    }
    else
    {
      v42 = *v38;
      *v37 = *v38;
      swift_retain(v42);
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v39, v41);
  }
  return a1;
}

uint64_t sub_10006A94C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v7 = a3[11];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10006AAA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease(v11);
  *(_QWORD *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  if (a1 != a2)
  {
    v12 = a3[11];
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_10000A020(a1 + v12, &qword_1002969A0);
    v15 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v17 = a3[12];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v18[1];
  v18[1] = v19[1];
  swift_release(v20);
  v21 = a3[13];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v24 = v22[1];
  v22[1] = v23[1];
  swift_release(v24);
  v25 = a3[14];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v26[1];
  v26[1] = v27[1];
  swift_release(v28);
  if (a1 != a2)
  {
    v29 = a3[15];
    v30 = (void *)(a1 + v29);
    v31 = (const void *)(a2 + v29);
    sub_10000A020(a1 + v29, &qword_10028EA90);
    v32 = sub_100006DF4(&qword_10028EA90);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v30, v31, v33);
      swift_storeEnumTagMultiPayload(v30, v32, 1);
    }
    else
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10006ACA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006ACB4);
}

uint64_t sub_10006ACB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028EA80);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 44);
    }
    else
    {
      v10 = sub_100006DF4(&qword_10028EA88);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10006AD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006AD68);
}

uint64_t sub_10006AD68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028EA80);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = sub_100006DF4(&qword_10028EA88);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10006AE0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  v6[0] = &unk_1001EA360;
  v6[1] = &unk_1001EA360;
  v6[2] = &unk_1001EA378;
  v6[3] = &unk_1001EA390;
  v6[4] = &unk_1001EA390;
  v6[5] = &unk_1001EA390;
  v6[6] = &unk_1001EA390;
  sub_10006AEDC(319, (unint64_t *)&qword_10028EB00, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v3 <= 0x3F)
  {
    v6[7] = *(_QWORD *)(v2 - 8) + 64;
    v6[8] = &unk_1001EA378;
    v6[9] = &unk_1001EA378;
    v6[10] = &unk_1001EA378;
    sub_10006AEDC(319, (unint64_t *)&qword_10028EB08, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v6[11] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 12, v6, a1 + 16);
    }
  }
}

void sub_10006AEDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10006AF28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100211624, 1);
}

void *sub_10006AF3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000699A0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10006AF44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EBA0;
  if (!qword_10028EBA0)
  {
    v1 = sub_1000070BC(&qword_10028EB68);
    sub_100012334(&qword_10028EBA8, &qword_10028EB60, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10006AFC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028EBA0);
  }
  return result;
}

unint64_t sub_10006AFC8()
{
  unint64_t result;

  result = qword_10028EBB0;
  if (!qword_10028EBB0)
  {
    result = swift_getWitnessTable(&unk_1001E9A80, &type metadata for ConversationBubbleStyle);
    atomic_store(result, (unint64_t *)&qword_10028EBB0);
  }
  return result;
}

unint64_t sub_10006B00C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EBB8;
  if (!qword_10028EBB8)
  {
    v1 = sub_1000070BC(&qword_10028EB98);
    sub_10006B070();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10028EBB8);
  }
  return result;
}

unint64_t sub_10006B070()
{
  unint64_t result;

  result = qword_10028EBC0;
  if (!qword_10028EBC0)
  {
    result = swift_getWitnessTable(&unk_1001E9940, &type metadata for ConversationBubbleContextMenu);
    atomic_store(result, (unint64_t *)&qword_10028EBC0);
  }
  return result;
}

uint64_t sub_10006B0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationDisplayBubble(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B0FC(uint64_t a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  type metadata accessor for ConversationDisplayBubble(0);
  return sub_100069C5C(a1, v3);
}

unint64_t sub_10006B14C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EBC8;
  if (!qword_10028EBC8)
  {
    v1 = sub_1000070BC(&qword_10028EB80);
    sub_10006B1B8();
    sub_10006B2B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028EBC8);
  }
  return result;
}

unint64_t sub_10006B1B8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10028EBD0;
  if (!qword_10028EBD0)
  {
    v1 = sub_1000070BC(&qword_10028EB78);
    v2[0] = sub_1000070BC(&qword_10028EB68);
    v2[1] = sub_1000070BC(&qword_10028EB98);
    v2[2] = sub_10006AF44();
    v2[3] = sub_10006B00C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.contextMenu<A>(menuItems:)>>, 1);
    sub_10006B270();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028EBD0);
  }
  return result;
}

unint64_t sub_10006B270()
{
  unint64_t result;

  result = qword_10028EBD8;
  if (!qword_10028EBD8)
  {
    result = swift_getWitnessTable("پ\a", &type metadata for ConversationPlayButton);
    atomic_store(result, (unint64_t *)&qword_10028EBD8);
  }
  return result;
}

unint64_t sub_10006B2B4()
{
  unint64_t result;

  result = qword_10028EBE0;
  if (!qword_10028EBE0)
  {
    result = swift_getWitnessTable(&unk_1001E9AF0, &type metadata for ConversationBubbleWidthManager);
    atomic_store(result, (unint64_t *)&qword_10028EBE0);
  }
  return result;
}

uint64_t sub_10006B308()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for ConversationDisplayBubble(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v4 + 32));
  v7 = (_QWORD *)(v0 + v4 + v1[11]);
  v8 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v6 + v1[13] + 8));
  swift_release(*(_QWORD *)(v6 + v1[14] + 8));
  v10 = (_QWORD *)(v6 + v1[15]);
  v11 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 19;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10006B474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for ConversationDisplayBubble(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  v13 = *(_BYTE *)(v9 + 17);
  v14 = (_QWORD *)swift_task_alloc(dword_10028EBFC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10001D380;
  return sub_100069E9C(a1, v6, v7, v8, v10, v11, v12, v13);
}

void sub_10006B564(uint64_t a1, uint64_t a2)
{
  sub_10006B580(a1, a2, (void (*)(uint64_t, uint64_t))sub_100091960);
}

void sub_10006B574(uint64_t a1, uint64_t a2)
{
  sub_10006B580(a1, a2, (void (*)(uint64_t, uint64_t))sub_100091B84);
}

void sub_10006B580(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationDisplayBubble(0) - 8) + 80);
  sub_100069C04(a1, a2, v3 + ((v7 + 16) & ~v7), a3);
}

unint64_t sub_10006B5E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EC60;
  if (!qword_10028EC60)
  {
    v1 = sub_1000070BC(&qword_10028EC38);
    sub_100007D5C(&qword_10028D0F0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF768);
    sub_100012334(&qword_10028B250, &qword_10028B258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028EC60);
  }
  return result;
}

uint64_t sub_10006B680()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for ConversationDisplayBubble(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v4 + 32));
  v7 = (_QWORD *)(v0 + v4 + v1[11]);
  v8 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v6 + v1[13] + 8));
  swift_release(*(_QWORD *)(v6 + v1[14] + 8));
  v10 = (_QWORD *)(v6 + v1[15]);
  v11 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10006B7C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationDisplayBubble(0) - 8) + 80);
  sub_100069798(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10006B7F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10006B820()
{
  unint64_t result;

  result = qword_10028EC78;
  if (!qword_10028EC78)
  {
    result = swift_getWitnessTable(&unk_1001EA5F4, &_s19PlayButtonAlignmentVN);
    atomic_store(result, (unint64_t *)&qword_10028EC78);
  }
  return result;
}

uint64_t *sub_10006B864(uint64_t *a1)
{
  sub_10006B894(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t sub_10006B894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

ValueMetadata *_s19PlayButtonAlignmentVMa()
{
  return &_s19PlayButtonAlignmentVN;
}

unint64_t sub_10006B8D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EC80;
  if (!qword_10028EC80)
  {
    v1 = sub_1000070BC(&qword_10028EC88);
    sub_10006B14C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028EC80);
  }
  return result;
}

_QWORD *sub_10006B948(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v18);
  }
  else
  {
    v5 = (void *)a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    v8 = a2[8];
    v9 = *(int *)(a3 + 40);
    v10 = (uint64_t *)((char *)a2 + v9);
    v11 = (uint64_t *)(a1 + v9);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v8;
    v12 = v5;
    swift_retain(v6);
    swift_retain(v7);
    swift_retain(v8);
    v13 = sub_100006DF4(&qword_10028EA90);
    if (swift_getEnumCaseMultiPayload(v10, v13) == 1)
    {
      v14 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v10, v14);
      v15 = v11;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v19 = *v10;
      *v11 = *v10;
      swift_retain(v19);
      v15 = v11;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return v3;
}

uint64_t sub_10006BA6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(*(_QWORD *)(a1 + 64));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 40));
  v5 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_10006BAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(int *)(a3 + 40);
  v9 = (uint64_t *)(a2 + v8);
  v10 = (uint64_t *)(a1 + v8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v11 = v4;
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  v12 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v9, v12) == 1)
  {
    v13 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v9, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v9;
    *v10 = *v9;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  return a1;
}

uint64_t sub_10006BBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v10);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_retain(v12);
  swift_release(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain(v14);
  swift_release(v13);
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 40);
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_10000A020(a1 + v15, &qword_10028EA90);
    v18 = sub_100006DF4(&qword_10028EA90);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  return a1;
}

uint64_t sub_10006BD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 40);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v8 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10006BDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_release(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v10);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 40);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_10000A020(a1 + v12, &qword_10028EA90);
    v15 = sub_100006DF4(&qword_10028EA90);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10006BF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006BF28);
}

uint64_t sub_10006BF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028EA88);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_10006BFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006BFB4);
}

uint64_t sub_10006BFB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028EA88);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ConversationEditorBubble(uint64_t a1)
{
  uint64_t result;

  result = qword_10028ECE8;
  if (!qword_10028ECE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationEditorBubble);
  return result;
}

void sub_10006C068(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1001EA670;
  v4[1] = &unk_1001EA670;
  v4[2] = &unk_1001EA688;
  v4[3] = &unk_1001EA6A0;
  v4[4] = &unk_1001EA6B8;
  v4[5] = &unk_1001EA6B8;
  sub_10006C0FC(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_10006C0FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028EB08)
  {
    v2 = type metadata accessor for ContentSizeCategory(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028EB08);
  }
}

uint64_t sub_10006C150(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100211674, 1);
}

uint64_t sub_10006C160()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v10;

  v1 = *((_BYTE *)v0 + 32);
  v2 = *v0;
  v3 = v0[1];
  v4 = type metadata accessor for ConversationViewModel(0);
  v5 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  v6 = (void *)ObservedObject.projectedValue.getter(v2, v3, v4, v5);
  if ((v1 & 1) != 0)
    v7 = &unk_1001EA858;
  else
    v7 = &unk_1001EA8A0;
  KeyPath = swift_getKeyPath(v7);
  ObservedObject.Wrapper.subscript.getter(&v10, KeyPath, v6, v5);
  swift_release(KeyPath);

  return v10;
}

id sub_10006C220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  id v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  Swift::Bool v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  NSString *v28;
  id v29;
  unint64_t v30;
  id v31;
  NSString v32;
  Class isa;
  _BYTE v35[112];
  uint64_t v36;
  unint64_t v37;
  void *v38;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(void **)(v0 + 8);
  KeyPath = swift_getKeyPath(&unk_1001EA810);
  v7 = swift_getKeyPath(&unk_1001EA838);
  v8 = v5;
  static Published.subscript.getter(&v36, v8, KeyPath);

  swift_release(KeyPath);
  swift_release(v7);
  v9 = v38;
  if (v38)
  {
    v10 = *(unsigned __int8 *)(v0 + 32);
    if (((v36 & 1) == 0) == v10)
      goto LABEL_12;
    if ((v10 & 1) != 0)
    {
      v11 = swift_getKeyPath(&unk_1001EA858);
      v12 = &unk_1001EA880;
    }
    else
    {
      v11 = swift_getKeyPath(&unk_1001EA8A0);
      v12 = &unk_1001EA8C8;
    }
    v13 = swift_getKeyPath(v12);
    v14 = v8;
    static Published.subscript.getter(&v36, v14, v11);

    swift_release(v11);
    swift_release(v13);
    v16 = v36;
    v15 = v37;
    if (!v37)
      goto LABEL_12;
    swift_bridgeObjectRelease(v37);
    v17 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v17 = v16 & 0xFFFFFFFFFFFFLL;
    if (v17)
    {
      v18 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
      if ((v10 & 1) != 0)
      {
        v19 = swift_getKeyPath(&unk_1001EA748);
        v20 = &unk_1001EA770;
      }
      else
      {
        v19 = swift_getKeyPath(&unk_1001EA720);
        v20 = &unk_1001EA7F0;
      }
      v22 = swift_getKeyPath(v20);
      static Published.subscript.getter(v4, v8, v19);

      swift_release(v19);
      swift_release(v22);
      v23 = Locale.isRTL()();
      (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
      if (v23)
        v24 = 2;
      else
        v24 = 0;
      objc_msgSend(v18, "setAlignment:", v24);
      v25 = sub_100006DF4(&qword_100298070);
      inited = swift_initStackObject(v25, v35);
      *(_OWORD *)(inited + 16) = xmmword_1001E4D60;
      *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
      v27 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
      *(_QWORD *)(inited + 40) = static UIColor.targetTextColor.getter(NSForegroundColorAttributeName);
      *(_QWORD *)(inited + 64) = v27;
      *(_QWORD *)(inited + 72) = NSParagraphStyleAttributeName;
      *(_QWORD *)(inited + 104) = sub_10000A05C(0, &qword_10028EBF0, NSMutableParagraphStyle_ptr);
      *(_QWORD *)(inited + 80) = v18;
      v28 = NSParagraphStyleAttributeName;
      v29 = v18;
      v30 = sub_1001A4A88(inited);
      v31 = objc_allocWithZone((Class)NSAttributedString);
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      type metadata accessor for Key(0);
      sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v9 = objc_msgSend(v31, "initWithString:attributes:", v32, isa, swift_bridgeObjectRelease(v30).n128_f64[0]);

    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  return v9;
}

BOOL sub_10006C5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t KeyPath;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  _BOOL8 v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int16 v49;
  int v50;
  int v51;
  int v53;
  int v54;
  _BYTE v57[11];
  uint64_t v58;

  v1 = v0;
  v2 = type metadata accessor for ConversationEditorBubble(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v57[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __chkstk_darwin(v3);
  v8 = &v57[-v7];
  v9 = __chkstk_darwin(v6);
  v11 = &v57[-v10];
  v12 = __chkstk_darwin(v9);
  v14 = &v57[-v13];
  v15 = __chkstk_darwin(v12);
  v17 = &v57[-v16];
  __chkstk_darwin(v15);
  v19 = &v57[-v18];
  v20 = *(void **)(v1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001EA8E8);
  v22 = swift_getKeyPath(&unk_1001EA910);
  v23 = v20;
  static Published.subscript.getter((uint64_t *)((char *)&v58 + 4), v23, KeyPath);

  swift_release(KeyPath);
  swift_release(v22);
  LODWORD(v23) = BYTE4(v58);
  sub_100032D68(v1, (uint64_t)v19, type metadata accessor for ConversationEditorBubble);
  if ((_DWORD)v23 == 1)
  {
    v24 = (uint64_t)v8;
    v25 = v19[32];
    sub_100032D68((uint64_t)v19, (uint64_t)v17, type metadata accessor for ConversationEditorBubble);
    v26 = (uint64_t)v11;
    if ((v25 & 1) != 0)
      goto LABEL_3;
    v35 = (void *)*((_QWORD *)v17 + 1);
    v36 = swift_getKeyPath(&unk_1001EA8E8);
    v37 = swift_getKeyPath(&unk_1001EA910);
    v38 = v35;
    static Published.subscript.getter((uint64_t *)((char *)&v58 + 1), v38, v36);
    swift_release(v36);
    swift_release(v37);
    if (BYTE1(v58) == 1)
    {
      v39 = *(_WORD *)&v38[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
      if ((v39 & 0xFF00) == 0x200)
      {

        sub_100032D68((uint64_t)v17, (uint64_t)v14, type metadata accessor for ConversationEditorBubble);
        goto LABEL_29;
      }
      v50 = *(_WORD *)&v38[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
      v51 = v39 & 1;

      sub_100032D68((uint64_t)v17, (uint64_t)v14, type metadata accessor for ConversationEditorBubble);
      if (v50 != 2 && v51 == 0)
        goto LABEL_29;
    }
    else
    {

      sub_100032D68((uint64_t)v17, (uint64_t)v14, type metadata accessor for ConversationEditorBubble);
    }
    v40 = (void *)*((_QWORD *)v14 + 1);
    v41 = swift_getKeyPath(&unk_1001EA8E8);
    v42 = swift_getKeyPath(&unk_1001EA910);
    v43 = v40;
    static Published.subscript.getter(&v58, v43, v41);
    swift_release(v41);
    swift_release(v42);
    if (v58 == 1)
    {
      v44 = *(_WORD *)&v43[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
      if ((v44 & 0xFF00) != 0x200)
      {

        sub_100032DAC((uint64_t)v14, type metadata accessor for ConversationEditorBubble);
        sub_100032DAC((uint64_t)v17, type metadata accessor for ConversationEditorBubble);
        sub_100032D68((uint64_t)v19, v26, type metadata accessor for ConversationEditorBubble);
        v34 = 1;
        if (v44 == 2 || (v44 & 1) == 0)
          goto LABEL_41;
        goto LABEL_4;
      }

      sub_100032DAC((uint64_t)v14, type metadata accessor for ConversationEditorBubble);
LABEL_3:
      sub_100032DAC((uint64_t)v17, type metadata accessor for ConversationEditorBubble);
      sub_100032D68((uint64_t)v19, v26, type metadata accessor for ConversationEditorBubble);
LABEL_4:
      v27 = *(unsigned __int8 *)(v26 + 32);
      sub_100032D68(v26, v24, type metadata accessor for ConversationEditorBubble);
      if (v27 == 1)
      {
        v28 = *(void **)(v24 + 8);
        v29 = swift_getKeyPath(&unk_1001EA8E8);
        v30 = swift_getKeyPath(&unk_1001EA910);
        v31 = v28;
        static Published.subscript.getter((uint64_t *)((char *)&v58 + 3), v31, v29);
        swift_release(v29);
        swift_release(v30);
        if (BYTE3(v58) == 1)
        {
          v32 = *(_WORD *)&v31[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
          v33 = (uint64_t)v5;
          if ((v32 & 0xFF00) == 0x200)
          {

            sub_100032D68(v24, (uint64_t)v5, type metadata accessor for ConversationEditorBubble);
            goto LABEL_35;
          }
          v53 = *(_WORD *)&v31[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
          v54 = v32 & 1;

          sub_100032D68(v24, (uint64_t)v5, type metadata accessor for ConversationEditorBubble);
          if (v53 != 2 && v54 != 0)
            goto LABEL_35;
        }
        else
        {

          v33 = (uint64_t)v5;
          sub_100032D68(v24, (uint64_t)v5, type metadata accessor for ConversationEditorBubble);
        }
        v45 = *(void **)(v33 + 8);
        v46 = swift_getKeyPath(&unk_1001EA8E8);
        v47 = swift_getKeyPath(&unk_1001EA910);
        v48 = v45;
        static Published.subscript.getter((uint64_t *)((char *)&v58 + 2), v48, v46);
        swift_release(v46);
        swift_release(v47);
        if (BYTE2(v58) == 1)
        {
          v49 = *(_WORD *)&v48[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
          v34 = (v49 & 0xFF00) != 512;
          if ((v49 & 0xFF00) == 0x200
            || *(_WORD *)&v48[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation] == 2
            || (v49 & 1) != 0)
          {

          }
          else
          {

            v34 = 0;
          }
          goto LABEL_40;
        }

LABEL_35:
        v34 = 1;
LABEL_40:
        sub_100032DAC(v33, type metadata accessor for ConversationEditorBubble);
        sub_100032DAC(v24, type metadata accessor for ConversationEditorBubble);
        goto LABEL_41;
      }
      sub_100032DAC(v24, type metadata accessor for ConversationEditorBubble);
      v34 = 0;
LABEL_41:
      sub_100032DAC(v26, type metadata accessor for ConversationEditorBubble);
      goto LABEL_42;
    }

LABEL_29:
    sub_100032DAC((uint64_t)v14, type metadata accessor for ConversationEditorBubble);
    sub_100032DAC((uint64_t)v17, type metadata accessor for ConversationEditorBubble);
    sub_100032D68((uint64_t)v19, v26, type metadata accessor for ConversationEditorBubble);
    v34 = 1;
    goto LABEL_41;
  }
  v34 = 0;
LABEL_42:
  sub_100032DAC((uint64_t)v19, type metadata accessor for ConversationEditorBubble);
  return v34;
}

uint64_t sub_10006CB78()
{
  uint64_t v0;
  void *v1;
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v6;

  v1 = *(void **)(v0 + 8);
  KeyPath = swift_getKeyPath(&unk_1001EA930);
  v3 = swift_getKeyPath(&unk_1001EA958);
  v4 = v1;
  static Published.subscript.getter(&v6, v4, KeyPath);

  swift_release(KeyPath);
  swift_release(v3);
  if (v6 != 3)
    return 0xD000000000000019;
  if (sub_10006C5B0())
    return 0x4E494E455453494CLL;
  if (*(_BYTE *)(v0 + 33) == 2)
    return 0x545F4F545F504154;
  return 0x535F4F545F504154;
}

uint64_t sub_10006CC84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v3 = sub_100006DF4(&qword_10028ED38);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028ED40);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028ED48);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v10);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v13 = sub_100006DF4(&qword_10028ED50);
  sub_10006CE8C(v1, (uint64_t)&v5[*(int *)(v13 + 44)]);
  v14 = *(_BYTE *)(v1 + 32) ^ ((*(_BYTE *)(v1 + 33) & 1) == 0);
  sub_10000B074((uint64_t)v5, (uint64_t)v8, &qword_10028ED38);
  v15 = &v8[*(int *)(v6 + 36)];
  *v15 = v14 & 1;
  *((_QWORD *)v15 + 1) = 0x4030000000000000;
  sub_10000A020((uint64_t)v5, &qword_10028ED38);
  v16 = *(_BYTE *)(v1 + 32) ^ ((*(_BYTE *)(v1 + 33) & 1) == 0);
  v22 = 0x4079000000000000;
  State.init(wrappedValue:)(v23, &v22, &type metadata for CGFloat);
  v17 = v23[0];
  v18 = v23[1];
  sub_10000B074((uint64_t)v8, (uint64_t)v12, &qword_10028ED40);
  v19 = &v12[*(int *)(v9 + 36)];
  *v19 = v16 & 1;
  *(_OWORD *)(v19 + 8) = xmmword_1001EA630;
  *((_QWORD *)v19 + 3) = v17;
  *((_QWORD *)v19 + 4) = v18;
  sub_10000A020((uint64_t)v8, &qword_10028ED40);
  return sub_1000110A4((uint64_t)v12, a1, &qword_10028ED48);
}

uint64_t sub_10006CE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t KeyPath;
  void *v64;
  char v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD, _QWORD, _QWORD);
  void *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  id v101;
  id v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  void (**v120)(void *);
  uint64_t v121;
  uint64_t (**v122)(void *);
  void (**v123)();
  uint64_t (**v124)(void *);
  uint64_t v125;
  void (*v126)(_QWORD, _QWORD, _QWORD);
  void *v127;
  void *v128;
  uint64_t v129;
  _QWORD *v130;
  Swift::Bool v131;
  unsigned int *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  double v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t OpaqueTypeConformance2;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  id v155;
  void *v156;
  char *v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  _QWORD *v161;
  double v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD *v169;
  __int128 v170;
  int *v171;
  uint64_t v172;
  UIFontTextStyle v173;
  id v174;
  id v175;
  id v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  _QWORD *v196;
  uint64_t v197;
  Swift::Bool v198;
  unsigned int *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  double v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(char *, char *, uint64_t);
  char *v218;
  uint64_t v219;
  void (*v220)(char *, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v229;
  id v230;
  UIFontTextStyle v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  _BOOL4 v249;
  id v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  void (*v280)(char *, uint64_t);
  void (*v281)(_QWORD, _QWORD, _QWORD);
  void (*v282)(char *, uint64_t, uint64_t);
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  double v289;
  uint64_t v290;
  double v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;

  v275 = a2;
  v240 = type metadata accessor for LanguageAwareText(0);
  __chkstk_darwin(v240);
  v276 = (uint64_t)&v229 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_100006DF4(&qword_10028EC38);
  __chkstk_darwin(v242);
  v243 = (char *)&v229 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_100006DF4(&qword_10028ED58);
  v246 = *(_QWORD *)(v248 - 8);
  v5 = __chkstk_darwin(v248);
  v247 = (char *)&v229 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v241 = (char *)&v229 - v8;
  __chkstk_darwin(v7);
  v245 = (char *)&v229 - v9;
  v237 = type metadata accessor for Divider(0);
  v236 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237);
  v235 = (char *)&v229 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_100006DF4(&qword_10028EC18);
  v11 = __chkstk_darwin(v234);
  v244 = (uint64_t)&v229 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v233 = (char *)&v229 - v14;
  __chkstk_darwin(v13);
  v277 = (uint64_t)&v229 - v15;
  v16 = sub_100006DF4(&qword_10028ED60);
  v17 = __chkstk_darwin(v16);
  v274 = (uint64_t)&v229 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v273 = (uint64_t)&v229 - v19;
  v279 = type metadata accessor for LayoutDirection(0);
  v265 = *(_QWORD *)(v279 - 8);
  v20 = __chkstk_darwin(v279);
  v239 = (char *)&v229 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v263 = (char *)&v229 - v22;
  v23 = type metadata accessor for ConversationEditorBubble(0);
  v258 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v259 = v24;
  v260 = (uint64_t)&v229 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = type metadata accessor for LanguageAwareEditor(0);
  __chkstk_darwin(v261);
  v26 = (uint64_t *)((char *)&v229 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v267 = sub_100006DF4(&qword_10028ED68);
  __chkstk_darwin(v267);
  v264 = (char *)&v229 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_100006DF4(&qword_10028ED70);
  v269 = *(_QWORD *)(v270 - 8);
  __chkstk_darwin(v270);
  v268 = (char *)&v229 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100006DF4(&qword_10028ED78);
  v30 = __chkstk_darwin(v29);
  v272 = (uint64_t)&v229 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v266 = (char *)&v229 - v33;
  __chkstk_darwin(v32);
  v285 = (uint64_t)&v229 - v34;
  v286 = type metadata accessor for Locale(0);
  v278 = *(_QWORD **)(v286 - 8);
  v35 = __chkstk_darwin(v286);
  v238 = (id *)((char *)&v229 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = __chkstk_darwin(v35);
  v283 = (id *)((char *)&v229 - v38);
  __chkstk_darwin(v37);
  v280 = (void (*)(char *, uint64_t))((char *)&v229 - v39);
  v282 = (void (*)(char *, uint64_t, uint64_t))sub_100006DF4(&qword_10028C290);
  v40 = __chkstk_darwin(v282);
  v262 = (id *)((char *)&v229 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = __chkstk_darwin(v40);
  v257 = (id *)((char *)&v229 - v43);
  __chkstk_darwin(v42);
  v45 = (id *)((char *)&v229 - v44);
  v256 = type metadata accessor for LanguagePicker(0);
  v255 = *(_QWORD *)(v256 - 8);
  __chkstk_darwin(v256);
  v47 = (char *)&v229 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100006DF4(&qword_10028C3F0);
  __chkstk_darwin(v48);
  v252 = (char *)&v229 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = sub_100006DF4(&qword_10028ED80);
  v50 = __chkstk_darwin(v254);
  v271 = (uint64_t)&v229 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v54 = (char *)&v229 - v53;
  __chkstk_darwin(v52);
  v284 = (uint64_t)&v229 - v55;
  v56 = *(unsigned __int8 *)(a1 + 32);
  v57 = *(_QWORD *)a1;
  v58 = *(_QWORD *)(a1 + 8);
  v59 = type metadata accessor for ConversationViewModel(0);
  v60 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  v61 = (void *)ObservedObject.projectedValue.getter(v57, v58, v59, v60);
  if (v56)
    v62 = &unk_1001EA720;
  else
    v62 = &unk_1001EA748;
  KeyPath = swift_getKeyPath(v62);
  v253 = (uint64_t)v45;
  v281 = (void (*)(_QWORD, _QWORD, _QWORD))v60;
  ObservedObject.Wrapper.subscript.getter(v45, KeyPath, v61, v60);
  swift_release(KeyPath);

  v64 = *(void **)(a1 + 8);
  v65 = *(_BYTE *)(a1 + 32);
  if ((v65 & 1) != 0)
  {
    v66 = swift_getKeyPath(&unk_1001EA748);
    v67 = &unk_1001EA770;
  }
  else
  {
    v66 = swift_getKeyPath(&unk_1001EA720);
    v67 = &unk_1001EA7F0;
  }
  v68 = swift_getKeyPath(v67);
  v69 = v64;
  static Published.subscript.getter(v280, v69, v66);

  swift_release(v66);
  swift_release(v68);
  v70 = *(_QWORD *)(a1 + 24);
  v71 = swift_retain(v70);
  v72 = LanguagesService.models.getter(v71);
  swift_release(v70);
  v73 = swift_retain(v70);
  v74 = LanguagesService.asrUnsupportedModels.getter(v73);
  swift_release(v70);
  LanguagePicker.init(selectedLocale:preferredLocales:oppositeLocale:languageModels:disabledLanguages:)(v253, 0, v280, v72, v74);
  if ((*(_BYTE *)(a1 + 33) & 1) != 0)
  {
    if ((v65 & 1) != 0)
      goto LABEL_9;
  }
  else if ((v65 & 1) == 0)
  {
LABEL_9:
    v75 = 0xD000000000000022;
    v76 = 0x80000001001FA6C0;
    goto LABEL_12;
  }
  v76 = 0x80000001001FA750;
  v75 = 0xD000000000000021;
LABEL_12:
  v77 = sub_100007D5C(&qword_10028C438, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagePicker, (uint64_t)&protocol conformance descriptor for LanguagePicker);
  v78 = (uint64_t)v252;
  v79 = v256;
  View.accessibilityIdentifier(_:)(v75, v76, v256, v77);
  v80 = swift_bridgeObjectRelease(v76);
  v81 = (*(uint64_t (**)(char *, uint64_t, __n128))(v255 + 8))(v47, v79, v80);
  v82 = static Color.primary.getter(v81);
  v83 = swift_getKeyPath(&unk_1001EA790);
  sub_10000B074(v78, (uint64_t)v54, &qword_10028C3F0);
  v84 = (uint64_t *)&v54[*(int *)(v254 + 36)];
  *v84 = v83;
  v84[1] = v82;
  sub_10000A020(v78, &qword_10028C3F0);
  sub_1000110A4((uint64_t)v54, v284, &qword_10028ED80);
  v85 = sub_10006C160();
  v256 = v86;
  v255 = v87;
  v254 = v88;
  v253 = sub_10006CB78();
  v252 = v89;
  LODWORD(v83) = *(unsigned __int8 *)(a1 + 32);
  v90 = *(_QWORD *)a1;
  v91 = *(_QWORD *)(a1 + 8);
  v280 = (void (*)(char *, uint64_t))type metadata accessor for ConversationViewModel(0);
  v92 = v281;
  v93 = (void *)ObservedObject.projectedValue.getter(v90, v91, v280, v281);
  if ((_DWORD)v83)
    v94 = &unk_1001EA720;
  else
    v94 = &unk_1001EA748;
  v95 = swift_getKeyPath(v94);
  v96 = v257;
  ObservedObject.Wrapper.subscript.getter(v257, v95, v93, v92);
  swift_release(v95);

  Binding.wrappedValue.getter(v283);
  sub_10000A020((uint64_t)v96, &qword_10028C290);
  v97 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  v257 = (_QWORD *)static UIColor.sourceTextColor.getter(v97);
  v232 = v97;
  v251 = static UIColor.quaternarySourceTextColor.getter(v257);
  v230 = (id)objc_opt_self(UIFontDescriptor);
  v98 = objc_msgSend(v230, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle2, 0);
  v99 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v98, "pointSize");
  v229 = v99;
  v100 = objc_msgSend(v99, "systemFontOfSize:weight:");
  v101 = objc_allocWithZone((Class)UIFontMetrics);
  v231 = UIFontTextStyleTitle2;
  v102 = objc_msgSend(v101, "initForTextStyle:", UIFontTextStyleTitle2);
  v250 = objc_msgSend(v102, "scaledFontForFont:maximumPointSize:", v100, 1.79769313e308);

  v249 = *(unsigned __int8 *)(a1 + 33) == 2;
  v103 = sub_10015E56C();
  v104 = v260;
  sub_100032D68(a1, v260, type metadata accessor for ConversationEditorBubble);
  v105 = *(unsigned __int8 *)(v258 + 80);
  v106 = (v105 + 16) & ~v105;
  v107 = v106 + v259;
  v108 = v105 | 7;
  v259 = swift_allocObject(&unk_100266678, v106 + v259, v105 | 7);
  sub_10006F4AC(v104, v259 + v106);
  sub_100032D68(a1, v104, type metadata accessor for ConversationEditorBubble);
  v109 = swift_allocObject(&unk_1002666A0, v107, v108);
  sub_10006F4AC(v104, v109 + v106);
  sub_100032D68(a1, v104, type metadata accessor for ConversationEditorBubble);
  v110 = swift_allocObject(&unk_1002666C8, v107, v108);
  sub_10006F4AC(v104, v110 + v106);
  sub_100032D68(a1, v104, type metadata accessor for ConversationEditorBubble);
  v111 = swift_allocObject(&unk_1002666F0, v107, v108);
  sub_10006F4AC(v104, v111 + v106);
  v260 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache();
  v112 = (_QWORD *)swift_allocObject(v260, 40, 7);
  v112[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
  v112[3] = _swiftEmptyArrayStorage;
  v112[4] = 100;
  v113 = v256;
  *v26 = v85;
  v26[1] = v113;
  v114 = v254;
  v26[2] = v255;
  v26[3] = v114;
  v115 = v252;
  v26[4] = v253;
  v26[5] = (uint64_t)v115;
  v116 = (int *)v261;
  v117 = v278;
  v118 = v283;
  v119 = v286;
  ((void (*)(char *, _QWORD *, uint64_t))v278[4])((char *)v26 + *(int *)(v261 + 24), v283, v286);
  *(uint64_t *)((char *)v26 + v116[7]) = (uint64_t)v257;
  *(uint64_t *)((char *)v26 + v116[8]) = v251;
  *(uint64_t *)((char *)v26 + v116[9]) = (uint64_t)v250;
  *(uint64_t *)((char *)v26 + v116[10]) = 9;
  *((_BYTE *)v26 + v116[11]) = v249;
  *(double *)((char *)v26 + v116[12]) = v103;
  *((_BYTE *)v26 + v116[13]) = 0;
  v120 = (void (**)(void *))((char *)v26 + v116[14]);
  v121 = v259;
  *v120 = sub_10006F4F0;
  v120[1] = (void (*)(void *))v121;
  v122 = (uint64_t (**)(void *))((char *)v26 + v116[15]);
  *v122 = sub_10006F534;
  v122[1] = (uint64_t (*)(void *))v109;
  v123 = (void (**)())((char *)v26 + v116[16]);
  *v123 = sub_10006F54C;
  v123[1] = (void (*)())v110;
  v124 = (uint64_t (**)(void *))((char *)v26 + v116[17]);
  *v124 = sub_10006F650;
  v124[1] = (uint64_t (*)(void *))v111;
  *(uint64_t *)((char *)v26 + v116[18]) = 0;
  *(uint64_t *)((char *)v26 + v116[19]) = (uint64_t)v112;
  v125 = swift_getKeyPath(&unk_1001EA7C0);
  LODWORD(v116) = *(unsigned __int8 *)(a1 + 32);
  v126 = v281;
  v127 = (void *)ObservedObject.projectedValue.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v280, v281);
  if ((_DWORD)v116)
    v128 = &unk_1001EA720;
  else
    v128 = &unk_1001EA748;
  v129 = swift_getKeyPath(v128);
  v130 = v262;
  ObservedObject.Wrapper.subscript.getter(v262, v129, v127, v126);
  swift_release(v129);

  Binding.wrappedValue.getter(v118);
  sub_10000A020((uint64_t)v130, &qword_10028C290);
  v131 = Locale.isRTL()();
  v283 = (_QWORD *)v117[1];
  ((void (*)(_QWORD *, uint64_t))v283)(v118, v119);
  v132 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  if (!v131)
    v132 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v133 = *v132;
  v134 = v265;
  v135 = v263;
  v136 = v279;
  v282 = *(void (**)(char *, uint64_t, uint64_t))(v265 + 104);
  v282(v263, v133, v279);
  v137 = v267;
  v138 = (uint64_t)v264;
  v139 = (uint64_t *)&v264[*(int *)(v267 + 36)];
  v140 = sub_100006DF4(&qword_10028B258);
  v141 = (char *)v139 + *(int *)(v140 + 28);
  v281 = *(void (**)(_QWORD, _QWORD, _QWORD))(v134 + 16);
  v281(v141, v135, v136);
  *v139 = v125;
  sub_100032D68((uint64_t)v26, v138, type metadata accessor for LanguageAwareEditor);
  v280 = *(void (**)(char *, uint64_t))(v134 + 8);
  v280(v135, v136);
  sub_100032DAC((uint64_t)v26, type metadata accessor for LanguageAwareEditor);
  v142 = *(_QWORD *)(a1 + 48);
  v289 = *(double *)(a1 + 40);
  v290 = v142;
  v143 = sub_100006DF4(&qword_10028B260);
  State.projectedValue.getter(&v292, v143);
  v144 = v292;
  v145 = *(double *)&v293;
  v146 = sub_10006F6C4();
  v147 = v268;
  View.bindGeometry(to:reader:)(v144, *((_QWORD *)&v144 + 1), sub_10006B944, 0, v137, v146, v145);
  swift_release(*((_QWORD *)&v144 + 1));
  swift_release(v144);
  sub_10000A020(v138, &qword_10028ED68);
  if ((*(_BYTE *)(a1 + 33) & 1) != 0)
  {
    v148 = 0xD000000000000021;
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v148 = 0xD000000000000021;
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    {
LABEL_22:
      v148 = 0xD000000000000022;
      v149 = "conversationTrailingInputTextField";
      goto LABEL_25;
    }
  }
  v149 = "conversationLeadingInputTextField";
LABEL_25:
  v150 = (unint64_t)(v149 - 32) | 0x8000000000000000;
  *(_QWORD *)&v292 = v137;
  *((_QWORD *)&v292 + 1) = v146;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v292, &opaque type descriptor for <<opaque return type of View.bindGeometry(to:reader:)>>, 1);
  v152 = (uint64_t)v266;
  v153 = v270;
  View.accessibilityIdentifier(_:)(v148, v150, v270, OpaqueTypeConformance2);
  v154 = swift_bridgeObjectRelease(v150);
  (*(void (**)(char *, uint64_t, __n128))(v269 + 8))(v147, v153, v154);
  sub_1000110A4(v152, v285, &qword_10028ED78);
  v155 = sub_10006C220();
  if (v155)
  {
    v156 = v155;
    v270 = v140;
    v157 = v235;
    Divider.init()(v155);
    v158 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)&v292 = *(_QWORD *)(a1 + 40);
    *((_QWORD *)&v292 + 1) = v158;
    State.wrappedValue.getter(&v289);
    v159 = v289;
    v160 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v292 = *(_QWORD *)(a1 + 56);
    *((_QWORD *)&v292 + 1) = v160;
    v269 = v143;
    v161 = State.wrappedValue.getter(&v289);
    v162 = v289;
    if (v159 > v289)
      v162 = v159;
    v163 = v162;
    v164 = static Alignment.center.getter(v161);
    _FrameLayout.init(width:height:alignment:)(&v292, *(_QWORD *)&v163, 0, 0, 1, v164, v165);
    v166 = v236;
    v167 = (uint64_t)v233;
    v168 = v237;
    (*(void (**)(char *, char *, uint64_t))(v236 + 16))(v233, v157, v237);
    v169 = (_OWORD *)(v167 + *(int *)(v234 + 36));
    v170 = v293;
    *v169 = v292;
    v169[1] = v170;
    v169[2] = v294;
    (*(void (**)(char *, uint64_t))(v166 + 8))(v157, v168);
    sub_1000110A4(v167, v277, &qword_10028EC18);
    v171 = (int *)v240;
    v172 = v276;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v278[7])(v276 + *(int *)(v240 + 24), 1, 1, v286);
    v278 = v156;
    v173 = v231;
    v174 = objc_msgSend(v230, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", v231, 0);
    objc_msgSend(v174, "pointSize");
    v175 = objc_msgSend(v229, "systemFontOfSize:weight:");
    v176 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", v173);
    v177 = objc_msgSend(v176, "scaledFontForFont:maximumPointSize:", v175, 1.79769313e308);

    LOBYTE(v176) = *(_BYTE *)(*(_QWORD *)(a1 + 8)
                            + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_redactTargetText);
    v179 = static UIColor.quaternaryTranslateAccentColor.getter(v178);
    v180 = (_QWORD *)swift_allocObject(v260, 40, 7);
    v180[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
    v180[3] = _swiftEmptyArrayStorage;
    v180[4] = 100;
    *(_QWORD *)v172 = v156;
    *(_OWORD *)(v172 + 8) = xmmword_1001EA330;
    *(_QWORD *)(v172 + v171[7]) = v177;
    *(_BYTE *)(v172 + v171[8]) = (_BYTE)v176;
    *(_QWORD *)(v172 + v171[9]) = v179;
    *(_QWORD *)(v172 + v171[10]) = 0;
    *(_BYTE *)(v172 + v171[11]) = 0;
    v181 = v172 + v171[12];
    *(_QWORD *)v181 = 0;
    *(_QWORD *)(v181 + 8) = 0;
    *(_BYTE *)(v181 + 16) = 1;
    v182 = (_QWORD *)(v172 + v171[13]);
    *v182 = 0;
    v182[1] = 0;
    *(_QWORD *)(v172 + v171[14]) = 0;
    *(_BYTE *)(v172 + v171[15]) = 0;
    v183 = (_QWORD *)(v172 + v171[16]);
    *v183 = 0;
    v183[1] = 0;
    v184 = (_QWORD *)(v172 + v171[17]);
    *v184 = 0;
    v184[1] = 0;
    v185 = (_QWORD *)(v172 + v171[18]);
    *v185 = 0;
    v185[1] = 0;
    *(_QWORD *)(v172 + v171[19]) = 0;
    *(_BYTE *)(v172 + v171[20]) = 1;
    v186 = (_QWORD *)(v172 + v171[21]);
    *v186 = 0;
    v186[1] = 0;
    *(_QWORD *)(v172 + v171[22]) = v180;
    v187 = swift_getKeyPath(&unk_1001EA7C0);
    v188 = *(void **)(a1 + 8);
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    {
      v189 = swift_getKeyPath(&unk_1001EA748);
      v190 = &unk_1001EA770;
    }
    else
    {
      v189 = swift_getKeyPath(&unk_1001EA720);
      v190 = &unk_1001EA7F0;
    }
    v194 = swift_getKeyPath(v190);
    v195 = v188;
    v196 = v238;
    static Published.subscript.getter(v238, v195, v189);
    v197 = v270;

    swift_release(v189);
    swift_release(v194);
    v198 = Locale.isRTL()();
    ((void (*)(_QWORD *, uint64_t))v283)(v196, v286);
    v199 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
    if (!v198)
      v199 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
    v200 = v239;
    v201 = v279;
    v282(v239, *v199, v279);
    v202 = v242;
    v203 = (uint64_t)v243;
    v204 = (uint64_t *)&v243[*(int *)(v242 + 36)];
    v281((char *)v204 + *(int *)(v197 + 28), v200, v201);
    *v204 = v187;
    v205 = v276;
    sub_100032D68(v276, v203, type metadata accessor for LanguageAwareText);
    v280(v200, v201);
    sub_100032DAC(v205, type metadata accessor for LanguageAwareText);
    v206 = *(_QWORD *)(a1 + 64);
    v287 = *(_QWORD *)(a1 + 56);
    v288 = v206;
    State.projectedValue.getter(&v289, v269);
    v207 = v289;
    v208 = v290;
    v209 = v291;
    v210 = sub_10006B5E0();
    v211 = v241;
    View.bindGeometry(to:reader:)(*(_QWORD *)&v207, v208, sub_100061844, 0, v202, v210, v209);
    swift_release(v208);
    swift_release(*(_QWORD *)&v207);
    sub_10000A020(v203, &qword_10028EC38);
    v212 = v246;
    v213 = v245;
    v214 = v248;
    (*(void (**)(char *, char *, uint64_t))(v246 + 32))(v245, v211, v248);
    v215 = v277;
    v216 = v244;
    sub_10000B074(v277, v244, &qword_10028EC18);
    v217 = *(void (**)(char *, char *, uint64_t))(v212 + 16);
    v218 = v247;
    v217(v247, v213, v214);
    v193 = v274;
    sub_10000B074(v216, v274, &qword_10028EC18);
    v219 = sub_100006DF4(&qword_10028EDA0);
    v217((char *)(v193 + *(int *)(v219 + 48)), v218, v214);

    v220 = *(void (**)(char *, uint64_t))(v212 + 8);
    v220(v213, v214);
    sub_10000A020(v215, &qword_10028EC18);
    v220(v218, v214);
    sub_10000A020(v216, &qword_10028EC18);
    v221 = sub_100006DF4(&qword_10028ED90);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v221 - 8) + 56))(v193, 0, 1, v221);
    v192 = v273;
    sub_1000110A4(v193, v273, &qword_10028ED60);
  }
  else
  {
    v191 = sub_100006DF4(&qword_10028ED90);
    v192 = v273;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 56))(v273, 1, 1, v191);
    v193 = v274;
  }
  v222 = v284;
  v223 = v271;
  sub_10000B074(v284, v271, &qword_10028ED80);
  v224 = v285;
  v225 = v272;
  sub_10000B074(v285, v272, &qword_10028ED78);
  sub_10000B074(v192, v193, &qword_10028ED60);
  v226 = v275;
  sub_10000B074(v223, v275, &qword_10028ED80);
  v227 = sub_100006DF4(&qword_10028ED98);
  sub_10000B074(v225, v226 + *(int *)(v227 + 48), &qword_10028ED78);
  sub_10000B074(v193, v226 + *(int *)(v227 + 64), &qword_10028ED60);
  sub_10000A020(v192, &qword_10028ED60);
  sub_10000A020(v224, &qword_10028ED78);
  sub_10000A020(v222, &qword_10028ED80);
  sub_10000A020(v193, &qword_10028ED60);
  sub_10000A020(v225, &qword_10028ED78);
  return sub_10000A020(v223, &qword_10028ED80);
}

void sub_10006E660(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ValueMetadata *v40;
  unint64_t v41;

  v3 = type metadata accessor for ConversationEditorBubble(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = &type metadata for TranslateFeatures;
  v41 = sub_100009BC4();
  LOBYTE(v38) = 4;
  v14 = isFeatureEnabled(_:)(&v38);
  sub_100009C08(&v38);
  if ((v14 & 1) != 0)
  {
    v36 = a1;
    v37 = v1;
    v15 = objc_msgSend(a1, "text");
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      v38 = v17;
      v39 = v19;
      static CharacterSet.whitespacesAndNewlines.getter(v20);
      v21 = sub_10000B030();
      v22 = StringProtocol.trimmingCharacters(in:)(v13, &type metadata for String, v21);
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v24);
      v25 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000) == 0)
        v25 = v22 & 0xFFFFFFFFFFFFLL;
      if (v25)
      {
        v26 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 1, 1, v26);
        sub_100032D68(v37, (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ConversationEditorBubble);
        type metadata accessor for MainActor(0);
        v27 = v36;
        v28 = static MainActor.shared.getter(v27);
        v29 = *(unsigned __int8 *)(v4 + 80);
        v30 = (v29 + 32) & ~v29;
        v31 = (v5 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
        v32 = swift_allocObject(&unk_100266768, v31 + 8, v29 | 7);
        *(_QWORD *)(v32 + 16) = v28;
        *(_QWORD *)(v32 + 24) = &protocol witness table for MainActor;
        sub_10006F4AC((uint64_t)v6, v32 + v30);
        *(_QWORD *)(v32 + v31) = v27;
        v33 = sub_100049DC0((uint64_t)v9, (uint64_t)&unk_10028EDD0, v32);
        swift_release(v33);
      }
      else
      {
        v34 = *(id *)(v37 + 8);
        sub_10008FD60();

      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10006E8F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v8 = type metadata accessor for ConversationEditorBubble(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_100032D68(a2, (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ConversationEditorBubble);
  type metadata accessor for MainActor(0);
  v15 = a1;
  v16 = static MainActor.shared.getter(v15);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 40) & ~v17;
  v19 = (_QWORD *)swift_allocObject(a3, v18 + v10, v17 | 7);
  v19[2] = v16;
  v19[3] = &protocol witness table for MainActor;
  v19[4] = v15;
  sub_10006F4AC((uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v19 + v18);
  v20 = sub_100049DC0((uint64_t)v13, a4, (uint64_t)v19);
  return swift_release(v20);
}

uint64_t sub_10006EA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[12] = a4;
  v5[13] = a5;
  v6 = type metadata accessor for CharacterSet(0);
  v5[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[15] = v7;
  v5[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[17] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[18] = v9;
  v5[19] = v10;
  return swift_task_switch(sub_10006EAE8, v9, v10);
}

id sub_10006EAE8()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;

  result = objc_msgSend(*(id *)(v0 + 96), "text");
  if (result)
  {
    v2 = result;
    v4 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v8 = v7;

    *(_QWORD *)(v0 + 48) = v6;
    *(_QWORD *)(v0 + 56) = v8;
    static CharacterSet.whitespacesAndNewlines.getter(v9);
    v10 = sub_10000B030();
    v11 = StringProtocol.trimmingCharacters(in:)(v3, &type metadata for String, v10);
    v13 = v12;
    v14 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v14(v3, v5);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
    swift_bridgeObjectRelease(v13);
    v15 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    if (!v15)
    {
      swift_release(*(_QWORD *)(v0 + 136));
      v30 = *(_QWORD *)(v0 + 128);
      v31 = *(void **)(v0 + 96);
      v32 = sub_10006C160();
      v34 = v33;
      v36 = v35;
      *(_QWORD *)(v0 + 16) = v32;
      *(_QWORD *)(v0 + 24) = v33;
      *(_QWORD *)(v0 + 32) = v37;
      *(_QWORD *)(v0 + 40) = v35;
      *(_OWORD *)(v0 + 80) = xmmword_1001EA640;
      v38 = sub_100006DF4(&qword_100292980);
      Binding.wrappedValue.setter(v0 + 80, v38);
      swift_release(v34);
      swift_release(v32);
      swift_bridgeObjectRelease(v36);
      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v31, "setText:", v39);

      objc_msgSend(v31, "resignFirstResponder");
      swift_task_dealloc(v30);
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    v16 = *(void **)(v0 + 96);
    v17 = *(void **)(*(_QWORD *)(v0 + 104) + 8);
    *(_QWORD *)(v0 + 160) = v17;
    v17;
    result = objc_msgSend(v16, "text");
    if (result)
    {
      v18 = result;
      v19 = *(_QWORD *)(v0 + 128);
      v21 = *(_QWORD *)(v0 + 104);
      v20 = *(_QWORD *)(v0 + 112);
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v24 = v23;

      *(_QWORD *)(v0 + 64) = v22;
      *(_QWORD *)(v0 + 72) = v24;
      static CharacterSet.whitespacesAndNewlines.getter(v25);
      v26 = StringProtocol.trimmingCharacters(in:)(v19, &type metadata for String, v10);
      v28 = v27;
      *(_QWORD *)(v0 + 168) = v27;
      v14(v19, v20);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
      LOBYTE(v19) = *(_BYTE *)(v21 + 32);
      v29 = (_QWORD *)swift_task_alloc(dword_10028F674);
      *(_QWORD *)(v0 + 176) = v29;
      *v29 = v0;
      v29[1] = sub_10006ED6C;
      return (id)sub_10008EE88(v26, v28, v19);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006ED6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 168);
  v3 = *(void **)(*v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  swift_bridgeObjectRelease(v2);

  return swift_task_switch(sub_10006EDD0, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_10006EDD0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;

  swift_release(*(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(void **)(v0 + 96);
  v3 = sub_10006C160();
  v5 = v4;
  v7 = v6;
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v4;
  *(_QWORD *)(v0 + 32) = v8;
  *(_QWORD *)(v0 + 40) = v6;
  *(_OWORD *)(v0 + 80) = xmmword_1001EA640;
  v9 = sub_100006DF4(&qword_100292980);
  Binding.wrappedValue.setter(v0 + 80, v9);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v7);
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setText:", v10);

  objc_msgSend(v2, "resignFirstResponder");
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006EEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[4] = a4;
  v5[5] = a5;
  v6 = type metadata accessor for CharacterSet(0);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[9] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[10] = v9;
  v5[11] = v10;
  return swift_task_switch(sub_10006EF54, v9, v10);
}

id sub_10006EF54()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = (void *)v0[5];
  v2 = *(void **)(v0[4] + 8);
  v0[12] = v2;
  v2;
  result = objc_msgSend(v1, "text");
  if (result)
  {
    v4 = result;
    v6 = v0[7];
    v5 = v0[8];
    v7 = v0[6];
    v8 = v0[4];
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    v0[2] = v9;
    v0[3] = v11;
    static CharacterSet.whitespacesAndNewlines.getter(v12);
    v13 = sub_10000B030();
    v14 = StringProtocol.trimmingCharacters(in:)(v5, &type metadata for String, v13);
    v16 = v15;
    v0[13] = v15;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_bridgeObjectRelease(v0[3]);
    LOBYTE(v5) = *(_BYTE *)(v8 + 32);
    v17 = (_QWORD *)swift_task_alloc(dword_10028F67C);
    v0[14] = v17;
    *v17 = v0;
    v17[1] = sub_10006F068;
    return (id)sub_10008F5D0(v14, v16, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006F068()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 104);
  v3 = *(void **)(*v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease(v2);

  return swift_task_switch(sub_10006F0CC, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_10006F0CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006F104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[12] = a4;
  v5[13] = a5;
  v6 = type metadata accessor for CharacterSet(0);
  v5[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[15] = v7;
  v5[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[17] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[18] = v9;
  v5[19] = v10;
  return swift_task_switch(sub_10006F198, v9, v10);
}

id sub_10006F198()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  result = objc_msgSend(*(id *)(v0 + 96), "text");
  if (result)
  {
    v2 = result;
    v4 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v8 = v7;

    *(_QWORD *)(v0 + 48) = v6;
    *(_QWORD *)(v0 + 56) = v8;
    static CharacterSet.whitespacesAndNewlines.getter(v9);
    v10 = sub_10000B030();
    v11 = StringProtocol.trimmingCharacters(in:)(v3, &type metadata for String, v10);
    v13 = v12;
    v14 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v14(v3, v5);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
    swift_bridgeObjectRelease(v13);
    v15 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    if (!v15)
    {
      swift_release(*(_QWORD *)(v0 + 136));
      swift_task_dealloc(*(_QWORD *)(v0 + 128));
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    v16 = *(void **)(v0 + 96);
    v17 = *(void **)(*(_QWORD *)(v0 + 104) + 8);
    *(_QWORD *)(v0 + 160) = v17;
    v17;
    result = objc_msgSend(v16, "text");
    if (result)
    {
      v18 = result;
      v19 = *(_QWORD *)(v0 + 128);
      v21 = *(_QWORD *)(v0 + 104);
      v20 = *(_QWORD *)(v0 + 112);
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v24 = v23;

      *(_QWORD *)(v0 + 64) = v22;
      *(_QWORD *)(v0 + 72) = v24;
      static CharacterSet.whitespacesAndNewlines.getter(v25);
      v26 = StringProtocol.trimmingCharacters(in:)(v19, &type metadata for String, v10);
      v28 = v27;
      *(_QWORD *)(v0 + 168) = v27;
      v14(v19, v20);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
      LOBYTE(v19) = *(_BYTE *)(v21 + 32);
      v29 = (_QWORD *)swift_task_alloc(dword_10028F674);
      *(_QWORD *)(v0 + 176) = v29;
      *v29 = v0;
      v29[1] = sub_10006F37C;
      return (id)sub_10008EE88(v26, v28, v19);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006F37C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 168);
  v3 = *(void **)(*v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  swift_bridgeObjectRelease(v2);

  return swift_task_switch(sub_10006F3E0, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_10006F3E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 136));
  v1 = sub_10006C160();
  v3 = v2;
  v5 = v4;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v6;
  *(_QWORD *)(v0 + 40) = v4;
  *(_OWORD *)(v0 + 80) = xmmword_1001EA640;
  v7 = sub_100006DF4(&qword_100292980);
  Binding.wrappedValue.setter(v0 + 80, v7);
  swift_release(v3);
  swift_release(v1);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006F4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationEditorBubble(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10006F4F0(void *a1)
{
  type metadata accessor for ConversationEditorBubble(0);
  sub_10006E660(a1);
}

uint64_t sub_10006F534(void *a1)
{
  return sub_10006F664(a1, (uint64_t)&unk_100266740, (uint64_t)&unk_10028EDC0);
}

void sub_10006F54C()
{
  type metadata accessor for ConversationEditorBubble(0);
  sub_10006F810();
}

uint64_t sub_10006F588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ConversationEditorBubble(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  swift_release(*(_QWORD *)(v0 + v4 + 64));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 40));
  v7 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006F650(void *a1)
{
  return sub_10006F664(a1, (uint64_t)&unk_100266718, (uint64_t)&unk_10028EDB0);
}

uint64_t sub_10006F664(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationEditorBubble(0) - 8) + 80);
  return sub_10006E8F0(a1, v3 + ((v7 + 16) & ~v7), a2, a3);
}

unint64_t sub_10006F6C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028ED88;
  if (!qword_10028ED88)
  {
    v1 = sub_1000070BC(&qword_10028ED68);
    sub_100007D5C((unint64_t *)&unk_100292970, type metadata accessor for LanguageAwareEditor, (uint64_t)&unk_1001EF5F0);
    sub_100012334(&qword_10028B250, &qword_10028B258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028ED88);
  }
  return result;
}

uint64_t sub_10006F77C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationEditorBubble(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10028EDAC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_10006F104(a1, v5, v6, v7, v8);
}

void sub_10006F810()
{
  uint64_t v0;
  void *v1;
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 8);
  KeyPath = swift_getKeyPath(&unk_1001EA8E8);
  v3 = swift_getKeyPath(&unk_1001EA910);
  v4 = v1;
  static Published.subscript.getter(&v10, v4, KeyPath);

  swift_release(KeyPath);
  swift_release(v3);
  if (v10 == 1)
  {
    v5 = v4;
    sub_100090758(4, 0, 1);

  }
  else
  {
    v6 = type metadata accessor for ConversationViewModel(0);
    v7 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
    v8 = v4;
    v9 = ObservableObject<>.objectWillChange.getter(v6, v7);

    ObservableObjectPublisher.send()();
    swift_release(v9);
  }
}

uint64_t sub_10006F918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ConversationEditorBubble(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  swift_release(*(_QWORD *)(v0 + v4 + 64));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 40));
  v7 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006F9F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationEditorBubble(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10028EDBC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D380;
  return sub_10006EA54(a1, v5, v6, v7, v8);
}

uint64_t sub_10006FA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for ConversationEditorBubble(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  swift_release(*(_QWORD *)(v0 + v4 + 64));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 40));
  v7 = sub_100006DF4(&qword_10028EA90);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;

  return swift_deallocObject(v0, v10, v3 | 7);
}

uint64_t sub_10006FB70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for ConversationEditorBubble(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10028EDCC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003EFA0;
  return sub_10006EEC0(a1, v6, v7, v8, v9);
}

unint64_t sub_10006FC20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EDD8;
  if (!qword_10028EDD8)
  {
    v1 = sub_1000070BC(&qword_10028ED48);
    sub_10006FC8C();
    sub_10006B2B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028EDD8);
  }
  return result;
}

unint64_t sub_10006FC8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EDE0;
  if (!qword_10028EDE0)
  {
    v1 = sub_1000070BC(&qword_10028ED40);
    sub_100012334(&qword_10028EDE8, &qword_10028ED38, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10006AFC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028EDE0);
  }
  return result;
}

char *sub_10006FD10(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    a1[8] = *((_BYTE *)a2 + 8);
    v6 = *(int *)(a3 + 24);
    v7 = &a1[v6];
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = v5;
    v10 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v8, v10) == 1)
    {
      v11 = type metadata accessor for UserInterfaceSizeClass(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11))
      {
        v13 = sub_100006DF4(&qword_10028CE40);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, uint64_t *, uint64_t))(v12 + 16))(v7, v8, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
      }
      v15 = v7;
      v16 = v10;
      v17 = 1;
    }
    else
    {
      v14 = *v8;
      *(_QWORD *)v7 = *v8;
      swift_retain(v14);
      v15 = v7;
      v16 = v10;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_10006FE4C(id *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = (id *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  return result;
}

uint64_t sub_10006FEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(int *)(a3 + 24);
  v6 = (uint64_t *)(a1 + v5);
  v7 = (uint64_t *)(a2 + v5);
  v8 = v4;
  v9 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v9) == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10))
    {
      v12 = sub_100006DF4(&qword_10028CE40);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      v13 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(v6, v7, v10);
      v13 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    }
  }
  else
  {
    v14 = *v7;
    *v6 = *v7;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v9, v13);
  return a1;
}

uint64_t sub_100070014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    sub_10000A020(a1 + v9, (uint64_t *)&unk_100291470);
    v12 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_100006DF4(&qword_10028CE40);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
        v16 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v16);
  }
  return a1;
}

uint64_t sub_100070154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
    {
      v10 = sub_100006DF4(&qword_10028CE40);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v5, v6, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100070264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_10000A020(a1 + v7, (uint64_t *)&unk_100291470);
    v10 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for UserInterfaceSizeClass(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        v13 = sub_100006DF4(&qword_10028CE40);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10007039C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000703A8);
}

uint64_t sub_1000703A8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_100070428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070434);
}

char *sub_100070434(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028CE50);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ConversationList(uint64_t a1)
{
  uint64_t result;

  result = qword_10028EE48;
  if (!qword_10028EE48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationList);
  return result;
}

void sub_1000704E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1001EA9A8;
  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

id sub_100070568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  char **v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  double v28;
  void *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  double v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  id v43;
  id v44;
  char *v46;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v46 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v50);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028CE40);
  v6 = __chkstk_darwin(v5);
  v47 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v46 - v9;
  __chkstk_darwin(v8);
  v48 = (char *)&v46 - v11;
  v12 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v13 = objc_msgSend(v12, "fractionalWidthDimension:", 1.0);
  v14 = objc_msgSend(v12, "estimatedDimension:", 60.0);
  v15 = (void *)objc_opt_self(NSCollectionLayoutSize);
  v16 = objc_msgSend(v15, "sizeWithWidthDimension:heightDimension:", v13, v14);

  v17 = (void *)objc_opt_self(NSCollectionLayoutItem);
  v52 = v16;
  v18 = objc_msgSend(v17, "itemWithLayoutSize:", v16);
  v19 = &selRef_scribbleInteractionDidFinishWriting_;
  objc_msgSend(v18, "setContentInsets:", 0.0, 0.0, 0.0, 0.0);
  v20 = objc_msgSend(v12, "fractionalWidthDimension:", 1.0);
  v21 = objc_msgSend(v12, "estimatedDimension:", 60.0);
  v22 = objc_msgSend(v15, "sizeWithWidthDimension:heightDimension:", v20, v21);

  v23 = objc_opt_self(NSCollectionLayoutGroup);
  v24 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v25 = swift_allocObject(v24, 40, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1001EA980;
  *(_QWORD *)(v25 + 32) = v18;
  v53 = v25;
  specialized Array._endMutation()(v25);
  v26 = v53;
  sub_100070CB8();
  v49 = v18;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v28 = swift_bridgeObjectRelease(v26).n128_u64[0];
  v29 = (void *)v23;
  v30 = v48;
  v31 = objc_msgSend(v29, "horizontalGroupWithLayoutSize:subitems:", v22, isa, v28);

  type metadata accessor for ConversationList(0);
  sub_1000D58EC(v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v10, enum case for UserInterfaceSizeClass.compact(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v10, 0, 1, v0);
  v32 = (uint64_t)&v4[*(int *)(v50 + 48)];
  sub_100070CF4((uint64_t)v30, (uint64_t)v4);
  sub_100070CF4((uint64_t)v10, v32);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v33((uint64_t)v4, 1, v0) != 1)
  {
    v35 = v47;
    sub_100070CF4((uint64_t)v4, v47);
    if (v33(v32, 1, v0) != 1)
    {
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 32);
      v51 = v22;
      v37 = v30;
      v38 = v46;
      v36(v46, v32, v0);
      v39 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v40 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v38, v0, v39);
      v41 = *(void (**)(char *, uint64_t))(v1 + 8);
      v41(v38, v0);
      sub_10000A020((uint64_t)v10, &qword_10028CE40);
      v42 = (uint64_t)v37;
      v22 = v51;
      sub_10000A020(v42, &qword_10028CE40);
      v41((char *)v35, v0);
      sub_10000A020((uint64_t)v4, &qword_10028CE40);
      v34 = 0.0;
      v19 = &selRef_scribbleInteractionDidFinishWriting_;
      if ((v40 & 1) != 0)
        goto LABEL_9;
LABEL_8:
      v34 = 65.0;
      goto LABEL_9;
    }
    sub_10000A020((uint64_t)v10, &qword_10028CE40);
    sub_10000A020((uint64_t)v30, &qword_10028CE40);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v35, v0);
    v19 = &selRef_scribbleInteractionDidFinishWriting_;
LABEL_6:
    sub_10000A020((uint64_t)v4, &qword_10028CFE8);
    goto LABEL_8;
  }
  sub_10000A020((uint64_t)v10, &qword_10028CE40);
  sub_10000A020((uint64_t)v30, &qword_10028CE40);
  if (v33(v32, 1, v0) != 1)
    goto LABEL_6;
  sub_10000A020((uint64_t)v4, &qword_10028CE40);
  v34 = 0.0;
LABEL_9:
  objc_msgSend(v31, v19[283], 0.0, v34, 0.0, v34);
  v43 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", v31);
  objc_msgSend(v43, v19[283], 0.0, 0.0, 0.0, 0.0);
  v44 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BottomToTopLayout()), "initWithSection:", v43);

  return v44;
}

char *sub_100070B28()
{
  uint64_t v0;
  id v1;
  void *v2;
  int v3;
  id v4;

  v1 = sub_100070568();
  v2 = *(void **)v0;
  v3 = *(unsigned __int8 *)(v0 + 8);
  v4 = objc_allocWithZone((Class)type metadata accessor for ConversationListController());
  return sub_1000711B8(v1, v2, v3);
}

uint64_t sub_100070B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C(&qword_10028EE98, type metadata accessor for ConversationList, (uint64_t)&unk_1001EAA10);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100070BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C(&qword_10028EE98, type metadata accessor for ConversationList, (uint64_t)&unk_1001EAA10);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100070C50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_10028EE98, type metadata accessor for ConversationList, (uint64_t)&unk_1001EAA10);
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_100070C8C()
{
  return sub_100007D5C(&qword_10028EE88, type metadata accessor for ConversationList, (uint64_t)&unk_1001EA9C0);
}

unint64_t sub_100070CB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028EE90;
  if (!qword_10028EE90)
  {
    v1 = objc_opt_self(NSCollectionLayoutItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028EE90);
  }
  return result;
}

uint64_t sub_100070CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028CE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100070D3C@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_100070D50(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

Swift::Int sub_100070D58()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100070D98()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100070DBC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100070DF8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Swift::UInt v5;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(a2)
  {
    case 0uLL:
      v5 = 1;
      goto LABEL_8;
    case 1uLL:
      v5 = 2;
      goto LABEL_8;
    case 2uLL:
      v5 = 3;
      goto LABEL_8;
    case 3uLL:
      v5 = 4;
      goto LABEL_8;
    case 4uLL:
      v5 = 5;
LABEL_8:
      Hasher._combine(_:)(v5);
      break;
    default:
      ObjectType = swift_getObjectType(a2);
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
      swift_unknownObjectRetain(a2);
      v9 = v8(ObjectType, a3);
      v11 = v10;
      String.hash(into:)(a1, v9, v10);
      swift_bridgeObjectRelease(v11);
      sub_100074B70(a2);
      break;
  }
}

Swift::Int sub_100070ED8(unint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  switch(a1)
  {
    case 0uLL:
      v4 = 1;
      goto LABEL_8;
    case 1uLL:
      v4 = 2;
      goto LABEL_8;
    case 2uLL:
      v4 = 3;
      goto LABEL_8;
    case 3uLL:
      v4 = 4;
      goto LABEL_8;
    case 4uLL:
      v4 = 5;
LABEL_8:
      Hasher._combine(_:)(v4);
      break;
    default:
      ObjectType = swift_getObjectType(a1);
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
      swift_unknownObjectRetain(a1);
      v7 = v6(ObjectType, a2);
      v9 = v8;
      String.hash(into:)(v11, v7, v8);
      swift_bridgeObjectRelease(v9);
      sub_100074B70(a1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_100070FCC(uint64_t a1, uint64_t a2)
{
  return sub_1000749F8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

Swift::Int sub_100070FE0()
{
  uint64_t v0;

  return sub_100070ED8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_100070FE8(uint64_t a1)
{
  uint64_t v1;

  sub_100070DF8(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int sub_100070FF0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, unint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v3 = *v1;
  v2 = v1[1];
  Hasher.init(_seed:)(v11, a1);
  switch(v3)
  {
    case 0uLL:
      v4 = 1;
      goto LABEL_8;
    case 1uLL:
      v4 = 2;
      goto LABEL_8;
    case 2uLL:
      v4 = 3;
      goto LABEL_8;
    case 3uLL:
      v4 = 4;
      goto LABEL_8;
    case 4uLL:
      v4 = 5;
LABEL_8:
      Hasher._combine(_:)(v4);
      break;
    default:
      ObjectType = swift_getObjectType(v3);
      v6 = *(uint64_t (**)(uint64_t, unint64_t))(v2 + 24);
      swift_unknownObjectRetain(v3);
      v7 = v6(ObjectType, v2);
      v9 = v8;
      String.hash(into:)(v11, v7, v8);
      swift_bridgeObjectRelease(v9);
      sub_100074B70(v3);
      break;
  }
  return Hasher._finalize()();
}

id sub_1000710E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController____lazy_storage___bottomSeparatorLine;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController____lazy_storage___bottomSeparatorLine);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController____lazy_storage___bottomSeparatorLine);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = objc_msgSend((id)objc_opt_self(UIColor), "separatorColor");
    objc_msgSend(v4, "setBackgroundColor:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

char *sub_1000711B8(void *a1, void *a2, int a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  objc_class *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  objc_super v131;

  LODWORD(v119) = a3;
  v125 = sub_100006DF4(&qword_10028DEA0);
  v123 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v121 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100006DF4(&qword_10028EF60);
  v124 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v122 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028EF68);
  v128 = *(_QWORD *)(v8 - 8);
  v129 = v8;
  __chkstk_darwin(v8);
  v127 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v10);
  v120 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028EF70);
  v117 = *(_QWORD *)(v12 - 8);
  v118 = v12;
  __chkstk_darwin(v12);
  v116 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_10028B5A8);
  v109 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v108 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v107 = (char *)&v94 - v17;
  v106 = sub_100006DF4(&qword_10028EF78);
  v104 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v103 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4(&qword_100296BC0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v94 - v23;
  v96 = sub_100006DF4(&qword_10028EF80);
  __chkstk_darwin(v96);
  v26 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100006DF4(&qword_10028EF88);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100006DF4(&qword_10028EF90);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v30 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100006DF4(&qword_10028EF98);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100006DF4(&qword_10028EFA0);
  v114 = *(_QWORD *)(v32 - 8);
  v115 = v32;
  __chkstk_darwin(v32);
  v113 = (char *)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_dataSource] = 0;
  v34 = v3;
  v97 = v14;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v35 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v35 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v34[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_observers] = v35;
  *(_QWORD *)&v34[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController____lazy_storage___bottomSeparatorLine] = 0;
  *(_QWORD *)&v34[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_viewModel] = a2;
  v34[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_faceToFaceSide] = (char)v119;
  v36 = a2;

  v37 = (objc_class *)type metadata accessor for ConversationListController();
  v131.receiver = v34;
  v131.super_class = v37;
  v38 = objc_msgSendSuper2(&v131, "initWithCollectionViewLayout:", a1);
  v119 = a1;
  v39 = v38;
  v105 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session;
  swift_beginAccess(*(_QWORD *)&v36[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session]+ OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__translations, &v130, 33, 0);
  v98 = v39;
  v40 = sub_100006DF4((uint64_t *)&unk_100295410);
  Published.projectedValue.getter(v40);
  swift_endAccess(&v130);
  swift_beginAccess(&v36[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__deviceOwnerLocale], &v130, 33, 0);
  v41 = sub_100006DF4(&qword_10028F270);
  Published.projectedValue.getter(v41);
  swift_endAccess(&v130);
  swift_beginAccess(&v36[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partnerLocale], &v130, 33, 0);
  Published.projectedValue.getter(v41);
  swift_endAccess(&v130);
  v42 = sub_100012334((unint64_t *)&unk_1002987D0, &qword_10028EF80, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v43 = sub_100012334(&qword_10028EFA8, &qword_100296BC0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v44 = v28;
  Publishers.CombineLatest3.init(_:_:_:)(v26, v24, v22, v96, v19, v19, v42, v43, v43);
  swift_beginAccess(&v36[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partialSpeechResult], &v130, 33, 0);
  v45 = sub_100006DF4(&qword_10028EFB0);
  v46 = v103;
  Published.projectedValue.getter(v45);
  swift_endAccess(&v130);
  swift_beginAccess(&v36[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__deviceOwnerText], &v130, 33, 0);
  v47 = sub_100006DF4(&qword_10028B5B8);
  v48 = v107;
  Published.projectedValue.getter(v47);
  swift_endAccess(&v130);
  v95 = v36;
  swift_beginAccess(&v36[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partnerText], &v130, 33, 0);
  v49 = v108;
  Published.projectedValue.getter(v47);
  swift_endAccess(&v130);
  v50 = sub_100012334(&qword_10028EFB8, &qword_10028EF88, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v51 = sub_100012334(&qword_10028EFC0, &qword_10028EF78, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v52 = sub_100012334(&qword_10028B5C0, &qword_10028B5A8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v93 = v51;
  v53 = v100;
  v54 = v106;
  v55 = v97;
  Publisher.combineLatest<A, B, C>(_:_:_:)(v46, v48, v49, v100, v106, v97, v97, v50, v93, v52, v52);
  v56 = *(void (**)(char *, uint64_t))(v109 + 8);
  v56(v49, v55);
  v56(v48, v55);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v46, v54);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v44, v53);
  swift_beginAccess(&v36[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__transactionalError], &v130, 33, 0);
  v57 = sub_100006DF4(&qword_10028DF18);
  v58 = v116;
  Published.projectedValue.getter(v57);
  swift_endAccess(&v130);
  v59 = sub_100012334(&qword_10028EFC8, &qword_10028EF90, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>);
  v60 = sub_100012334(&qword_10028EFD0, &qword_10028EF70, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v61 = v110;
  v62 = v102;
  v63 = v118;
  Publisher.combineLatest<A>(_:)(v58, v102, v118, v59, v60);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v58, v63);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v30, v62);
  v64 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v130 = (id)static OS_dispatch_queue.main.getter(v64);
  v65 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56);
  v67 = (uint64_t)v120;
  v66(v120, 1, 1, v65);
  v68 = sub_100012334(&qword_10028EFD8, &qword_10028EF98, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v69 = sub_10001D984();
  v70 = v113;
  v71 = v112;
  Publisher.receive<A>(on:options:)(&v130, v67, v112, v64, v68, v69);
  sub_100075660(v67);

  (*(void (**)(char *, uint64_t))(v111 + 8))(v61, v71);
  v72 = swift_allocObject(&unk_100266A40, 24, 7);
  v73 = v98;
  swift_unknownObjectWeakInit(v72 + 16, v98);
  v74 = sub_100012334(&qword_10028EFE0, &qword_10028EFA0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v75 = v115;
  v76 = Publisher<>.sink(receiveValue:)(sub_1000756C4, v72, v115, v74);
  swift_release(v72);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v70, v75);
  v77 = &v73[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_observers];
  swift_beginAccess(&v73[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_observers], &v130, 33, 0);
  AnyCancellable.store(in:)(v77);
  swift_endAccess(&v130);
  swift_release(v76);
  v78 = v95;
  swift_beginAccess(*(_QWORD *)&v95[v105] + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__currentID, &v130, 33, 0);
  v79 = sub_100006DF4(&qword_10028B5A0);
  v80 = v121;
  Published.projectedValue.getter(v79);
  v81 = swift_endAccess(&v130);
  v130 = (id)static OS_dispatch_queue.main.getter(v81);
  v66((char *)v67, 1, 1, v65);
  v82 = sub_100012334(&qword_10028DF80, &qword_10028DEA0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v83 = v122;
  v84 = v125;
  Publisher.receive<A>(on:options:)(&v130, v67, v125, v64, v82, v69);
  sub_100075660(v67);

  (*(void (**)(char *, uint64_t))(v123 + 8))(v80, v84);
  v85 = sub_100012334(&qword_10028EFE8, &qword_10028EF60, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v86 = v126;
  v87 = v127;
  Publisher.dropFirst(_:)(1, v126, v85);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v83, v86);
  v88 = swift_allocObject(&unk_100266A40, 24, 7);
  swift_unknownObjectWeakInit(v88 + 16, v73);
  v89 = sub_100012334(&qword_10028EFF0, &qword_10028EF68, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v90 = v129;
  v91 = Publisher<>.sink(receiveValue:)(sub_1000756CC, v88, v129, v89);
  swift_release(v88);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v87, v90);
  swift_beginAccess(v77, &v130, 33, 0);
  AnyCancellable.store(in:)(v77);
  swift_endAccess(&v130);
  swift_release(v91);

  return v73;
}

double sub_100071DF8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Strong;
  double result;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(void);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  _WORD *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  __n128 v40;
  void (*v41)(char *, uint64_t, __n128);
  char *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  void (*v46)(void);
  uint64_t v47;
  __int128 v48;
  uint64_t *v49;
  char *v50;
  __n128 v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  unint64_t v80;
  _QWORD *v81;
  void *v82;
  char v83;
  char v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  _UNKNOWN **v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void (*v98)(void);
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  char *v108;
  uint64_t *v109;
  char v110[32];

  v4 = sub_100006DF4(&qword_10028EFF8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v110, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v93 = (void *)Strong;
    v105 = sub_100006DF4(&qword_10028F000);
    v9 = *(int *)(v105 + 48);
    v101 = (unint64_t)v6 + v9;
    v10 = *(int *)(v105 + 64);
    v94 = (char *)v6 + v10;
    v11 = (int *)sub_100006DF4(&qword_10028F008);
    v12 = v11[12];
    v13 = (_QWORD *)((char *)v6 + v12);
    v14 = v11[20];
    v95 = v11[16];
    v96 = v14;
    v15 = *(int *)(v4 + 48);
    v99 = (unint64_t)v6 + v15;
    v16 = (_QWORD *)((char *)a1 + v12);
    v107 = (unsigned __int16 *)((char *)a1 + v15);
    v108 = (char *)a1 + v95;
    v109 = (_QWORD *)((char *)a1 + v14);
    v17 = (char *)a1 + v9;
    v18 = (char *)a1 + v10;
    v103 = (char *)a1 + v9;
    v104 = (char *)a1 + v10;
    *v6 = *a1;
    v19 = type metadata accessor for Locale(0);
    v97 = *(char **)(v19 - 8);
    v106 = v4;
    v20 = (void (*)(void))*((_QWORD *)v97 + 2);
    ((void (*)(unint64_t, char *, uint64_t))v20)(v101, v17, v19);
    v21 = v94;
    ((void (*)(char *, char *, uint64_t))v20)(v94, v18, v19);
    v22 = *v16;
    v23 = v16[1];
    v25 = v16[2];
    v24 = v16[3];
    v26 = v16[4];
    *v13 = *v16;
    v13[1] = v23;
    v13[2] = v25;
    v13[3] = v24;
    v27 = v25;
    v100 = v25;
    v13[4] = v26;
    v28 = v107;
    *(_OWORD *)((char *)v6 + v95) = *(_OWORD *)v108;
    *(_OWORD *)((char *)v6 + v96) = *(_OWORD *)v109;
    LOWORD(v25) = *v28;
    v29 = (_WORD *)v99;
    *(_BYTE *)(v99 + 2) = *((_BYTE *)v28 + 2);
    *v29 = v25;
    v92 = v22;
    v91 = v26;
    sub_1000756D4(v22, v23, v27, v24, v26);
    v30 = (void (*)(char *, uint64_t))*((_QWORD *)v97 + 1);
    v30(v21, v19);
    v30((char *)v101, v19);
    v101 = (unint64_t)v6 + *(int *)(v105 + 48);
    v102 = a1;
    v31 = (char *)v6 + *(int *)(v105 + 64);
    v32 = (char *)v6 + v11[12];
    v33 = (_QWORD *)((char *)v6 + v11[16]);
    v34 = v11[20];
    v98 = v20;
    v99 = v34;
    v35 = a1;
    v36 = (char *)v6 + *(int *)(v106 + 48);
    *v6 = *v35;
    v20();
    ((void (*)(char *, char *, uint64_t))v20)(v31, v104, v19);
    v37 = v16[4];
    v38 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v16;
    *((_OWORD *)v32 + 1) = v38;
    *((_QWORD *)v32 + 4) = v37;
    v39 = (char *)*((_QWORD *)v108 + 1);
    v95 = *(_QWORD *)v108;
    *v33 = v95;
    v33[1] = v39;
    *(_OWORD *)((char *)v6 + v99) = *(_OWORD *)v109;
    LOWORD(v37) = *v107;
    v36[2] = *((_BYTE *)v107 + 2);
    *(_WORD *)v36 = v37;
    v99 = (unint64_t)v39;
    v40 = swift_bridgeObjectRetain(v39);
    ((void (*)(char *, uint64_t, __n128))v30)(v31, v19, v40);
    v30((char *)v101, v19);
    v41 = (void (*)(char *, uint64_t, __n128))v30;
    v97 = (char *)v6 + *(int *)(v105 + 48);
    v42 = (char *)v6 + *(int *)(v105 + 64);
    v43 = (char *)v6 + v11[12];
    v101 = v11[16];
    v44 = (_QWORD *)((char *)v6 + v11[20]);
    v45 = (char *)v6 + *(int *)(v106 + 48);
    *v6 = *v102;
    v46 = v98;
    v98();
    ((void (*)(char *, char *, uint64_t))v46)(v42, v104, v19);
    v47 = v16[4];
    v48 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v43 = *(_OWORD *)v16;
    *((_OWORD *)v43 + 1) = v48;
    *((_QWORD *)v43 + 4) = v47;
    v49 = v109;
    *(_OWORD *)((char *)v6 + v101) = *(_OWORD *)v108;
    v50 = (char *)v49[1];
    v96 = *v49;
    *v44 = v96;
    v44[1] = v50;
    LOWORD(v47) = *v107;
    v45[2] = *((_BYTE *)v107 + 2);
    *(_WORD *)v45 = v47;
    v101 = (unint64_t)v50;
    v51 = swift_bridgeObjectRetain(v50);
    v41(v42, v19, v51);
    ((void (*)(char *, uint64_t))v41)(v97, v19);
    v52 = (char *)v6 + *(int *)(v105 + 48);
    v53 = (char *)v6 + *(int *)(v105 + 64);
    v54 = (char *)v6 + v11[12];
    v55 = v11[16];
    v105 = v11[20];
    v56 = (char *)v6 + *(int *)(v106 + 48);
    v57 = v103;
    *v6 = *v102;
    ((void (*)(char *, char *, uint64_t))v46)(v52, v57, v19);
    ((void (*)(char *, char *, uint64_t))v46)(v53, v104, v19);
    v58 = v16[4];
    v59 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v54 = *(_OWORD *)v16;
    *((_OWORD *)v54 + 1) = v59;
    *((_QWORD *)v54 + 4) = v58;
    *(_OWORD *)((char *)v6 + v55) = *(_OWORD *)v108;
    *(_OWORD *)((char *)v6 + v105) = *(_OWORD *)v109;
    v60 = *((unsigned __int8 *)v107 + 2);
    v61 = *v107;
    v56[2] = v60;
    *(_WORD *)v56 = v61;
    ((void (*)(char *, uint64_t))v41)(v53, v19);
    ((void (*)(char *, uint64_t))v41)(v52, v19);
    v62 = v100;
    if (v100)
    {
      v63 = v99;
      v64 = v101;
      if (!v99
        || !v95 && v99 == 0xE000000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v95, v99, 0, 0xE000000000000000, 0) & 1) != 0)
      {
        if (!v64)
        {
LABEL_12:
          swift_bridgeObjectRelease(v63);
LABEL_34:
          swift_bridgeObjectRelease(v62);
          swift_bridgeObjectRelease(v91);
          v80 = v92 & 1 | 2;
          v81 = sub_1000E2A04((uint64_t)&off_100261F50);
          swift_arrayDestroy(&unk_100261F70, 2, &type metadata for ConversationListController.ConversationCell);
          sub_100074B60(v80);
          v82 = v93;
          sub_100073A5C(v81, v80, 0);
          sub_100074B70(v80);
          swift_bridgeObjectRelease(v81);
          sub_100074B70(v80);
LABEL_35:

          return result;
        }
        if (!v96 && v64 == 0xE000000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v96, v64, 0, 0xE000000000000000, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(v64);
          goto LABEL_12;
        }
      }
      if (qword_10028A410 != -1)
        swift_once(&qword_10028A410, sub_100120F20);
      v75 = type metadata accessor for Logger(0);
      v76 = sub_10000F66C(v75, (uint64_t)qword_1002AA338);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v79 = 0;
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Partial speech result and any partial text result shouldn't happen at the same time", v79, 2u);
        swift_slowDealloc(v79, -1, -1);
      }
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v63);

      goto LABEL_34;
    }
    v65 = v99;
    v66 = v101;
    if (v99)
    {
      v67 = v95;
      if (v101)
      {
        v68 = HIBYTE(v99) & 0xF;
        if ((v99 & 0x2000000000000000) == 0)
          v68 = v95 & 0xFFFFFFFFFFFFLL;
        if (v68)
        {
          v69 = HIBYTE(v101) & 0xF;
          if ((v101 & 0x2000000000000000) == 0)
            v69 = v96 & 0xFFFFFFFFFFFFLL;
          if (v69)
          {
            if (qword_10028A410 != -1)
              swift_once(&qword_10028A410, sub_100120F20);
            v70 = type metadata accessor for Logger(0);
            v71 = sub_10000F66C(v70, (uint64_t)qword_1002AA338);
            v72 = Logger.logObject.getter(v71);
            v73 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v72, v73))
            {
              v74 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v74 = 0;
              _os_log_impl((void *)&_mh_execute_header, v72, v73, "Device owner and partner shouldn't have text at the same time", v74, 2u);
              swift_slowDealloc(v74, -1, -1);
            }

          }
        }
      }
      if (v67 || v65 != 0xE000000000000000)
      {
        v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v65, 0, 0xE000000000000000, 0);
        swift_bridgeObjectRelease(v65);
        if ((v83 & 1) == 0)
        {
          swift_bridgeObjectRelease(v66);
          v88 = &off_100261F90;
          goto LABEL_47;
        }
      }
      else
      {
        swift_bridgeObjectRelease(0xE000000000000000);
      }
    }
    if (!v66)
    {
LABEL_42:
      if (((v61 | (v60 << 16)) & 0xFF0000) == 0x80000)
      {
        v82 = v93;
        sub_100073A5C(0, 5uLL, 0);
        goto LABEL_35;
      }
      v85 = sub_1000E2A04((uint64_t)&off_100261FF0);
      swift_arrayDestroy(&unk_100262010, 2, &type metadata for ConversationListController.ConversationCell);
      v86 = v85;
      v87 = 4;
      goto LABEL_48;
    }
    if (!v96 && v66 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease(0xE000000000000000);
      goto LABEL_42;
    }
    v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v66, 0, 0xE000000000000000, 0);
    swift_bridgeObjectRelease(v66);
    if ((v84 & 1) != 0)
      goto LABEL_42;
    v88 = &off_100261FC0;
LABEL_47:
    v85 = sub_1000E2A04((uint64_t)v88);
    swift_arrayDestroy(v88 + 4, 1, &type metadata for ConversationListController.ConversationCell);
    v86 = v85;
    v87 = 5;
LABEL_48:
    v89 = v93;
    sub_100073A5C(v86, v87, 0);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v85).n128_u64[0];
  }
  return result;
}

void sub_100072638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  id v5;
  void *v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend(Strong, "view");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "endEditing:", 1);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1000726DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  objc_super v21;

  v1 = sub_100006DF4(&qword_10028EF20);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = __chkstk_darwin(v1);
  v5 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - v6;
  v8 = (objc_class *)type metadata accessor for ConversationListController();
  v21.receiver = v0;
  v21.super_class = v8;
  objc_msgSendSuper2(&v21, "viewDidLoad");
  sub_100072908();
  v9 = swift_allocObject(&unk_1002669C8, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  v10 = sub_10000A05C(0, &qword_100291CC0, UICollectionViewCell_ptr);
  v11 = v0;
  UICollectionView.CellRegistration.init(handler:)(sub_1000753D4, v9, v10, &type metadata for ConversationListController.ConversationCell);
  result = objc_msgSend(v11, "collectionView");
  if (result)
  {
    v13 = result;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
    v14 = *(unsigned __int8 *)(v2 + 80);
    v15 = (v14 + 16) & ~v14;
    v16 = swift_allocObject(&unk_1002669F0, v15 + v3, v14 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v16 + v15, v5, v1);
    v17 = swift_allocObject(&unk_100266A18, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_100075440;
    *(_QWORD *)(v17 + 24) = v16;
    v18 = objc_allocWithZone((Class)sub_100006DF4(&qword_10028EF28));
    v19 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v13, sub_1000754CC, v17);
    v20 = *(void **)&v11[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_dataSource];
    *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_dataSource] = v19;

    return (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100072908()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  id v42;
  id v43;
  id v44;

  v1 = v0;
  v2 = objc_msgSend(v0, "collectionView");
  if (!v2)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = v2;
  objc_msgSend(v2, "setDelegate:", v1);

  v4 = objc_msgSend(v1, "collectionView");
  if (!v4)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  objc_msgSend(v5, "setBackgroundColor:", v6);

  v7 = objc_msgSend(v1, "collectionView");
  if (!v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = v7;
  objc_msgSend(v7, "setAllowsSelection:", 0);

  v9 = sub_1000710E8();
  objc_msgSend(v9, "setHidden:", 1);

  v10 = objc_msgSend(v1, "view");
  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = v10;
  v12 = sub_1000710E8();
  v13 = objc_msgSend(v1, "collectionView");
  if (!v13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v14 = v13;
  objc_msgSend(v11, "insertSubview:aboveSubview:", v12, v13);

  v15 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v16 = swift_allocObject(v15, 64, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1001E7590;
  v17 = sub_1000710E8();
  v18 = objc_msgSend(v17, "leadingAnchor");

  v19 = objc_msgSend(v1, "view");
  if (!v19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20 = v19;
  v21 = objc_msgSend(v19, "leadingAnchor");

  v22 = objc_msgSend(v18, "constraintEqualToAnchor:", v21);
  *(_QWORD *)(v16 + 32) = v22;
  v23 = sub_1000710E8();
  v24 = objc_msgSend(v23, "trailingAnchor");

  v25 = objc_msgSend(v1, "view");
  if (!v25)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "trailingAnchor");

  v28 = objc_msgSend(v24, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v16 + 40) = v28;
  v29 = sub_1000710E8();
  v30 = objc_msgSend(v29, "bottomAnchor");

  v31 = objc_msgSend(v1, "view");
  if (!v31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v32 = v31;
  v33 = (void *)objc_opt_self(NSLayoutConstraint);
  v34 = objc_msgSend(v32, "bottomAnchor");

  v35 = objc_msgSend(v30, "constraintEqualToAnchor:", v34);
  *(_QWORD *)(v16 + 48) = v35;
  v36 = sub_1000710E8();
  v37 = objc_msgSend(v36, "heightAnchor");

  v38 = objc_msgSend(v37, "constraintEqualToConstant:", 0.5);
  *(_QWORD *)(v16 + 56) = v38;
  specialized Array._endMutation()(v39);
  v40 = v16;
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v33, "activateConstraints:", isa, swift_bridgeObjectRelease(v40).n128_f64[0]);

  v42 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v1, "dismissKeyboard");
  objc_msgSend(v42, "setCancelsTouchesInView:", 0);
  v43 = objc_msgSend(v1, "view");
  if (v43)
  {
    v44 = v43;
    objc_msgSend(v43, "addGestureRecognizer:", v42);

    return;
  }
LABEL_19:
  __break(1u);
}

unint64_t sub_100072DA0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t result;
  uint64_t ObjectType;
  uint64_t (*v23)(uint64_t, unint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v41 - v12;
  v14 = *a3;
  v15 = a3[1];
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v16 = UICollectionViewCell.contentConfiguration.setter(&v42);
  switch(v14)
  {
    case 0uLL:
      __chkstk_darwin(v16);
      v17 = &v41[-4];
      v41[-2] = a4;
      *((_QWORD *)&v43 + 1) = sub_100006DF4(&qword_10028EF48);
      v44 = sub_100012334(&qword_10028EF50, &qword_10028EF48, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      sub_1000122F8(&v42);
      v18 = type metadata accessor for ConversationEditorBubble(0);
      v19 = sub_100007D5C(&qword_10028EF58, type metadata accessor for ConversationEditorBubble, (uint64_t)&unk_1001EA6D0);
      v20 = sub_100075550;
      goto LABEL_7;
    case 1uLL:
      __chkstk_darwin(v16);
      v17 = &v41[-4];
      v41[-2] = a4;
      *((_QWORD *)&v43 + 1) = sub_100006DF4(&qword_10028EF48);
      v44 = sub_100012334(&qword_10028EF50, &qword_10028EF48, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      sub_1000122F8(&v42);
      v18 = type metadata accessor for ConversationEditorBubble(0);
      v19 = sub_100007D5C(&qword_10028EF58, type metadata accessor for ConversationEditorBubble, (uint64_t)&unk_1001EA6D0);
      v20 = sub_100075534;
      goto LABEL_7;
    case 2uLL:
      __chkstk_darwin(v16);
      v17 = &v41[-4];
      v41[-2] = a4;
      *((_QWORD *)&v43 + 1) = sub_100006DF4(&qword_10028EF30);
      v44 = sub_100012334(&qword_10028EF38, &qword_10028EF30, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      sub_1000122F8(&v42);
      v18 = type metadata accessor for ConversationDisplayBubble(0);
      v19 = sub_100007D5C(&qword_10028EF40, type metadata accessor for ConversationDisplayBubble, (uint64_t)&unk_1001EA3A8);
      v20 = sub_100075518;
      goto LABEL_7;
    case 3uLL:
      __chkstk_darwin(v16);
      v17 = &v41[-4];
      v41[-2] = a4;
      *((_QWORD *)&v43 + 1) = sub_100006DF4(&qword_10028EF30);
      v44 = sub_100012334(&qword_10028EF38, &qword_10028EF30, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      sub_1000122F8(&v42);
      v18 = type metadata accessor for ConversationDisplayBubble(0);
      v19 = sub_100007D5C(&qword_10028EF40, type metadata accessor for ConversationDisplayBubble, (uint64_t)&unk_1001EA3A8);
      v20 = sub_1000754FC;
      goto LABEL_7;
    case 4uLL:
      __chkstk_darwin(v16);
      v17 = &v41[-4];
      v41[-2] = a4;
      *((_QWORD *)&v43 + 1) = sub_100006DF4(&qword_10028EF30);
      v44 = sub_100012334(&qword_10028EF38, &qword_10028EF30, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      sub_1000122F8(&v42);
      v18 = type metadata accessor for ConversationDisplayBubble(0);
      v19 = sub_100007D5C(&qword_10028EF40, type metadata accessor for ConversationDisplayBubble, (uint64_t)&unk_1001EA3A8);
      v20 = sub_1000754F4;
LABEL_7:
      UIHostingConfiguration<>.init(content:)(v20, v17, v18, v19);
      result = UICollectionViewCell.contentConfiguration.setter(&v42);
      break;
    default:
      ObjectType = swift_getObjectType(v14);
      v41[1] = a1;
      v23 = *(uint64_t (**)(uint64_t, unint64_t, __n128))(v15 + 32);
      v24 = swift_unknownObjectRetain(v14);
      v25 = v23(ObjectType, v15, v24);
      v41[0] = Locale.identifier.getter(v25);
      v27 = v26;
      v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v13, v7);
      v29 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_viewModel);
      KeyPath = swift_getKeyPath(&unk_1001EAC88);
      v31 = swift_getKeyPath(&unk_1001EACB0);
      static Published.subscript.getter(v11, v29, KeyPath);
      swift_release(KeyPath);
      v32 = swift_release(v31);
      v33 = Locale.identifier.getter(v32);
      v35 = v34;
      v28(v11, v7);
      if (v41[0] == v33 && v27 == v35)
      {
        v37 = 1;
        v35 = v27;
      }
      else
      {
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v41[0], v27, v33, v35, 0);
      }
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v27);
      __chkstk_darwin(v38);
      v41[-4] = a4;
      v41[-3] = v14;
      v41[-2] = v15;
      LOBYTE(v41[-1]) = v37 & 1;
      *((_QWORD *)&v43 + 1) = sub_100006DF4(&qword_10028EF30);
      v44 = sub_100012334(&qword_10028EF38, &qword_10028EF30, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      sub_1000122F8(&v42);
      v39 = type metadata accessor for ConversationDisplayBubble(0);
      v40 = sub_100007D5C(&qword_10028EF40, type metadata accessor for ConversationDisplayBubble, (uint64_t)&unk_1001EA3A8);
      UIHostingConfiguration<>.init(content:)(sub_10007556C, &v41[-6], v39, v40);
      UICollectionViewCell.contentConfiguration.setter(&v42);
      result = sub_100074B70(v14);
      break;
  }
  return result;
}

uint64_t sub_100073354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  v9 = a4 & 1;
  v10 = sub_100006DF4(&qword_10028EA88);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100006DF4(&qword_10028EA80);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(char **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_viewModel);
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager];
  LOBYTE(a1) = *(_BYTE *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_faceToFaceSide);
  *v15 = swift_getKeyPath(&unk_1001EAD18);
  v18 = sub_100006DF4(&qword_1002969A0);
  swift_storeEnumTagMultiPayload(v15, v18, 0);
  *v12 = swift_getKeyPath(&unk_1001EAD48);
  v19 = sub_100006DF4(&qword_10028EA90);
  swift_storeEnumTagMultiPayload(v12, v19, 0);
  v20 = v16;
  swift_retain(v17);
  swift_unknownObjectRetain(a2);
  return sub_10006A040((uint64_t)v20, v17, a2, a3, v9, 2, a1, 2, a5, 0.0, 0.0, 0.0, (uint64_t)v15, (uint64_t)v12);
}

double sub_1000734E8@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t KeyPath;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;

  v5 = *(char **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_viewModel);
  v6 = *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_languagesService];
  v7 = *(_BYTE *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_faceToFaceSide);
  KeyPath = swift_getKeyPath(&unk_1001EAD48);
  v9 = (uint64_t *)(a3 + *(int *)(type metadata accessor for ConversationEditorBubble(0) + 40));
  *v9 = KeyPath;
  v10 = sub_100006DF4(&qword_10028EA90);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = type metadata accessor for ConversationViewModel(0);
  v12 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  v13 = v5;
  swift_retain(v6);
  *(_QWORD *)a3 = ObservedObject.init(wrappedValue:)(v13, v11, v12);
  *(_QWORD *)(a3 + 8) = v14;
  v15 = type metadata accessor for LanguagesService(0);
  v16 = sub_100007D5C((unint64_t *)&unk_100298710, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagesService, (uint64_t)&protocol conformance descriptor for LanguagesService);
  *(_QWORD *)(a3 + 16) = ObservedObject.init(wrappedValue:)(v6, v15, v16);
  *(_QWORD *)(a3 + 24) = v17;
  *(_BYTE *)(a3 + 32) = a2;
  *(_BYTE *)(a3 + 33) = v7;
  v21 = 0;
  State.init(wrappedValue:)(&v22, &v21, &type metadata for CGFloat);
  v18 = v23;
  *(double *)(a3 + 40) = v22;
  *(_QWORD *)(a3 + 48) = v18;
  v21 = 0;
  State.init(wrappedValue:)(&v22, &v21, &type metadata for CGFloat);
  result = v22;
  v20 = v23;
  *(double *)(a3 + 56) = v22;
  *(_QWORD *)(a3 + 64) = v20;
  return result;
}

uint64_t sub_100073674@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v6 = sub_100006DF4(&qword_10028EA88);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100006DF4(&qword_10028EA80);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(char **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_viewModel);
  v13 = *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager];
  LOBYTE(a1) = *(_BYTE *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_faceToFaceSide);
  *v11 = swift_getKeyPath(&unk_1001EAD18);
  v14 = sub_100006DF4(&qword_1002969A0);
  swift_storeEnumTagMultiPayload(v11, v14, 0);
  *v8 = swift_getKeyPath(&unk_1001EAD48);
  v15 = sub_100006DF4(&qword_10028EA90);
  swift_storeEnumTagMultiPayload(v8, v15, 0);
  v16 = v12;
  swift_retain(v13);
  return sub_10006A040((uint64_t)v16, v13, 0, 0, 2, a2, a1, 2, a3, 0.0, 0.0, 0.0, (uint64_t)v11, (uint64_t)v8);
}

uint64_t sub_1000737F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v4 = sub_100006DF4(&qword_10028EA88);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100006DF4(&qword_10028EA80);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for ConversationDisplayBubble(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(char **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_viewModel);
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager];
  v15 = ((*(_WORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation] & 0xFF00) != 512) & *(_WORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
  *v9 = swift_getKeyPath(&unk_1001EAD18);
  v16 = sub_100006DF4(&qword_1002969A0);
  swift_storeEnumTagMultiPayload(v9, v16, 0);
  *v6 = swift_getKeyPath(&unk_1001EAD48);
  v17 = sub_100006DF4(&qword_10028EA90);
  swift_storeEnumTagMultiPayload(v6, v17, 0);
  v18 = v13;
  swift_retain(v14);
  sub_10006A040((uint64_t)v18, v14, 0, 0, 2, 2, 2, v15, (uint64_t)v12, 0.0, 0.0, 0.0, (uint64_t)v9, (uint64_t)v6);
  return sub_10006B0B8((uint64_t)v12, a2);
}

uint64_t sub_1000739BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  sub_100074B60(a3);
  v8 = sub_10000A05C(0, &qword_100291CC0, UICollectionViewCell_ptr);
  v9 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(a5, a2, v11, v8, &type metadata for ConversationListController.ConversationCell);
  sub_100074B70(a3);
  return v9;
}

id sub_100073A5C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  id result;
  void *v58;
  Class isa;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  __int128 v68;
  char v69[24];
  char v70[24];
  _QWORD *v71;
  uint64_t v72;

  v62 = a3;
  v64 = a2;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v65 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028EF00);
  v63 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100074B80();
  v12 = sub_100074BC4();
  NSDiffableDataSourceSnapshot.init()(&type metadata for ConversationListController.ConversationListSection, &type metadata for ConversationListController.ConversationCell, v11, v12);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100261EE8);
  v66 = v3;
  v13 = *(char **)&v3[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_viewModel];
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session];
  KeyPath = swift_getKeyPath(&unk_1001EAC40);
  v16 = swift_getKeyPath(&unk_1001EAC68);
  static Published.subscript.getter(&v71, v14, KeyPath);
  swift_release(KeyPath);
  swift_release(v16);
  v17 = (uint64_t)v71;
  v18 = v13;
  v19 = sub_100074C10(v17, (uint64_t)v18);
  swift_bridgeObjectRelease(v17);

  v20 = sub_100074764((unint64_t)v19);
  v21 = sub_10012565C(v20);
  swift_bridgeObjectRelease(v20);
  v22 = v21[2];
  v67 = v8;
  if (v22)
  {
    v60 = 0;
    v61 = a1;
    v23 = v6;
    v24 = v5;
    v71 = _swiftEmptyArrayStorage;
    sub_1001DA308(0, v22, 0);
    v25 = 0;
    v26 = v71;
    do
    {
      v27 = *(_OWORD *)&v21[2 * v25 + 4];
      v71 = v26;
      v29 = v26[2];
      v28 = v26[3];
      v68 = v27;
      swift_unknownObjectRetain(v27);
      if (v29 >= v28 >> 1)
      {
        sub_1001DA308(v28 > 1, v29 + 1, 1);
        v26 = v71;
      }
      ++v25;
      v26[2] = v29 + 1;
      *(_OWORD *)&v26[2 * v29 + 4] = v68;
    }
    while (v22 != v25);
    swift_bridgeObjectRelease(v21);
    v5 = v24;
    v6 = v23;
    v8 = v67;
    a1 = v61;
  }
  else
  {
    swift_bridgeObjectRelease(v21);
    v26 = _swiftEmptyArrayStorage;
  }
  LOBYTE(v71) = 1;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v26, &v71, v8);
  swift_bridgeObjectRelease(v26);
  v30 = v64;
  if (v64 != 5)
  {
    v31 = sub_100006DF4(&qword_10028EF18);
    v32 = swift_allocObject(v31, 48, 7);
    *(_OWORD *)(v32 + 16) = xmmword_1001E64F0;
    v33 = v62;
    *(_QWORD *)(v32 + 32) = v30;
    *(_QWORD *)(v32 + 40) = v33;
    LOBYTE(v71) = 1;
    sub_100074B60(v30);
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v32, &v71, v8);
    swift_bridgeObjectRelease(v32);
  }
  if (a1)
  {
    swift_bridgeObjectRetain(a1);
    v34 = sub_100074F4C((uint64_t)&off_100261F10, a1);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v34 = &off_100261F10;
  }
  v35 = v66[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_faceToFaceSide];
  if (v35 != 2)
  {
    v36 = v34[2];
    if (v36)
    {
      v37 = v34 + 4;
      v38 = _swiftEmptyArrayStorage;
      while (1)
      {
        v42 = *v37;
        if ((v35 & 1) != 0)
        {
          if (v42)
          {
LABEL_24:
            v68 = *(_OWORD *)v37;
            sub_100074B60(v68);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
            v71 = v38;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001DA308(0, v38[2] + 1, 1);
              v38 = v71;
            }
            v40 = v38[2];
            v39 = v38[3];
            v41 = v68;
            if (v40 >= v39 >> 1)
            {
              sub_1001DA308(v39 > 1, v40 + 1, 1);
              v41 = v68;
              v38 = v71;
            }
            v38[2] = v40 + 1;
            *(_OWORD *)&v38[2 * v40 + 4] = v41;
          }
        }
        else if (v42 != 1)
        {
          goto LABEL_24;
        }
        v37 += 2;
        if (!--v36)
          goto LABEL_27;
      }
    }
    v38 = _swiftEmptyArrayStorage;
LABEL_27:
    swift_bridgeObjectRelease(v34);
    v34 = v38;
    v8 = v67;
  }
  LOBYTE(v71) = 1;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v34, &v71, v8);
  swift_bridgeObjectRelease(v34);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v44 = type metadata accessor for Logger(0);
  v45 = sub_10000F66C(v44, (uint64_t)qword_1002AA338);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v48 = 134217984;
    swift_beginAccess(v10, v69, 0, 0);
    v49 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v67);
    v50 = *(_QWORD **)(v49 + 16);
    swift_bridgeObjectRelease(v49);
    v71 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v48 + 4);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Snapshot identifiers count: %ld", v48, 0xCu);
    swift_slowDealloc(v48, -1, -1);
  }

  v51 = v65;
  v52 = *(void **)&v66[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_dataSource];
  if (v52)
  {
    swift_beginAccess(v10, &v71, 0, 0);
    v53 = v52;
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v10, 0, 0, 0);

  }
  swift_beginAccess(v10, v70, 0, 0);
  v54 = v67;
  if (NSDiffableDataSourceSnapshot.numberOfItems.getter(v67) < 1)
    return (id)(*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v10, v54);
  v55 = NSDiffableDataSourceSnapshot.numberOfItems.getter(v54);
  v56 = __OFSUB__(v55, 1);
  result = (id)(v55 - 1);
  if (v56)
  {
    __break(1u);
  }
  else
  {
    IndexPath.init(item:section:)(result, 0);
    result = objc_msgSend(v66, "collectionView");
    if (result)
    {
      v58 = result;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v58, "scrollToItemAtIndexPath:atScrollPosition:animated:", isa, 4, 0);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v51, v5);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v10, v54);
    }
  }
  __break(1u);
  return result;
}

id sub_100074190()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationListController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConversationListController()
{
  return objc_opt_self(_TtC17SequoiaTranslator26ConversationListController);
}

void sub_100074238(void *a1)
{
  double Height;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  CGRect v16;
  CGRect v17;

  objc_msgSend(a1, "bounds");
  Height = CGRectGetHeight(v16);
  objc_msgSend(a1, "contentSize");
  v4 = Height - v3;
  objc_msgSend(a1, "adjustedContentInset");
  v6 = v4 - v5;
  if (v6 > 0.0)
    v7 = v6;
  else
    v7 = 0.0;
  objc_msgSend(a1, "bounds");
  v8 = CGRectGetHeight(v17);
  objc_msgSend(a1, "adjustedContentInset");
  v10 = v8 - v9;
  objc_msgSend(a1, "contentSize");
  v12 = v7 + v11;
  objc_msgSend(a1, "contentOffset");
  v14 = v12 - v13;
  v15 = sub_1000710E8();
  objc_msgSend(v15, "setHidden:", v14 <= v10 + 1.0);

}

unint64_t destroy for ConversationListController.ConversationCell(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_unknownObjectRelease(result);
  return result;
}

uint64_t _s17SequoiaTranslator26ConversationListControllerC16ConversationCellOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = a2[1];
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    swift_unknownObjectRetain(v3);
  }
  return a1;
}

unint64_t *assignWithCopy for ConversationListController.ConversationCell(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      v7 = a2[1];
      *a1 = v5;
      a1[1] = v7;
      swift_unknownObjectRetain(v5);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_unknownObjectRelease(v4);
    goto LABEL_7;
  }
  v6 = a2[1];
  *a1 = v5;
  swift_unknownObjectRetain(v5);
  swift_unknownObjectRelease(v4);
  a1[1] = v6;
  return a1;
}

unint64_t *assignWithTake for ConversationListController.ConversationCell(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      v7 = a2[1];
      *a1 = v5;
      a1[1] = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_unknownObjectRelease(v4);
    goto LABEL_7;
  }
  v6 = a2[1];
  *a1 = v5;
  swift_unknownObjectRelease(v4);
  a1[1] = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationListController.ConversationCell(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConversationListController.ConversationCell(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

uint64_t sub_10007459C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000745B4(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationListController.ConversationCell()
{
  return &type metadata for ConversationListController.ConversationCell;
}

uint64_t getEnumTagSinglePayload for ConversationListController.ConversationListSection(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ConversationListController.ConversationListSection(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100074678 + 4 * byte_1001EAAA4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100074698 + 4 * byte_1001EAAA9[v4]))();
}

_BYTE *sub_100074678(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100074698(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000746A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000746A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000746B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000746B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConversationListController.ConversationListSection()
{
  return &type metadata for ConversationListController.ConversationListSection;
}

unint64_t sub_1000746D8()
{
  unint64_t result;

  result = qword_10028EEF0;
  if (!qword_10028EEF0)
  {
    result = swift_getWitnessTable(&unk_1001EABB0, &type metadata for ConversationListController.ConversationListSection);
    atomic_store(result, (unint64_t *)&qword_10028EEF0);
  }
  return result;
}

unint64_t sub_100074720()
{
  unint64_t result;

  result = qword_10028EEF8;
  if (!qword_10028EEF8)
  {
    result = swift_getWitnessTable(&unk_1001EAC18, &type metadata for ConversationListController.ConversationCell);
    atomic_store(result, (unint64_t *)&qword_10028EEF8);
  }
  return result;
}

uint64_t sub_100074764(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v21 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v1);
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    v19 = swift_retain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v1);
    swift_release(v2);
    v20 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v20 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v8 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        v9 = v21;
        if ((v21 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v21);
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - (v5 + 1), v21);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v10 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v10)
            goto LABEL_34;
          v11 = *(id *)(v21 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v10)
            goto LABEL_37;
          v12 = (uint64_t)v11;
          v13 = *(id *)(v21 + 32 + 8 * v1);
        }
        v14 = v13;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v9 = sub_1000808EC(v21);
          v21 = v9;
        }
        v15 = (v9 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v15 + 32) = v14;
        specialized Array._endMutation()(v16);
        v17 = v21;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v17 = sub_1000808EC(v21);
          v21 = v17;
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v6 = (v17 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(_QWORD *)(v6 + 32) = v12;
        specialized Array._endMutation()(v7);
      }
      v5 = v8;
      if (v4 == v8)
        return v21;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_1001C66E0(v1);
    v21 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t sub_10007497C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.sizeCategory.setter(v4);
}

uint64_t sub_1000749F8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  switch(a1)
  {
    case 0uLL:
      if (a3)
        goto LABEL_15;
      goto LABEL_9;
    case 1uLL:
      if (a3 == 1)
        goto LABEL_9;
      goto LABEL_15;
    case 2uLL:
      if (a3 != 2)
        goto LABEL_15;
      goto LABEL_9;
    case 3uLL:
      if (a3 != 3)
        goto LABEL_15;
      goto LABEL_9;
    case 4uLL:
      if (a3 != 4)
        goto LABEL_15;
LABEL_9:
      v17 = 1;
      break;
    default:
      if (a3 < 5)
      {
LABEL_15:
        v17 = 0;
      }
      else
      {
        ObjectType = swift_getObjectType(a1);
        v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
        sub_100074B60(a1);
        sub_100074B60(a3);
        v10 = v9(ObjectType, a2);
        v12 = v11;
        v13 = swift_getObjectType(a3);
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(v13, a4);
        v16 = v14;
        if (v10 == v15 && v12 == v14)
        {
          v17 = 1;
          v16 = v12;
        }
        else
        {
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v15, v14, 0);
        }
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v16);
        sub_100074B70(a3);
        sub_100074B70(a1);
      }
      break;
  }
  return v17 & 1;
}

unint64_t sub_100074B60(unint64_t result)
{
  if (result >= 5)
    return swift_unknownObjectRetain(result);
  return result;
}

unint64_t sub_100074B70(unint64_t result)
{
  if (result >= 5)
    return swift_unknownObjectRelease(result);
  return result;
}

unint64_t sub_100074B80()
{
  unint64_t result;

  result = qword_10028EF08;
  if (!qword_10028EF08)
  {
    result = swift_getWitnessTable(&unk_1001EAB38, &type metadata for ConversationListController.ConversationListSection);
    atomic_store(result, (unint64_t *)&qword_10028EF08);
  }
  return result;
}

unint64_t sub_100074BC4()
{
  unint64_t result;

  result = qword_10028EF10;
  if (!qword_10028EF10)
  {
    result = swift_getWitnessTable(&unk_1001EABD8, &type metadata for ConversationListController.ConversationCell);
    atomic_store(result, (unint64_t *)&qword_10028EF10);
  }
  return result;
}

_QWORD *sub_100074C10(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  Class isa;
  Class v17;
  id v18;
  void (*v19)(_QWORD *, void *);
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Class v26;
  Class v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  _QWORD *v43;

  v3 = v2;
  v40 = a2;
  v5 = type metadata accessor for Locale(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = (void *)v5;
  v6 = __chkstk_darwin(v5);
  v8 = (void **)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (void **)((char *)&v33 - v9);
  v43 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11)
  {
    while (1)
    {
      v33 = v3;
      v34 = v11;
      v12 = 0;
      v36 = a1 & 0xFFFFFFFFFFFFFF8;
      v37 = a1 & 0xC000000000000001;
      v35 = a1;
      while (v37)
      {
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a1);
LABEL_9:
        v3 = v13;
        if (__OFADD__(v12, 1))
          goto LABEL_15;
        v42 = v12 + 1;
        v14 = dispatch thunk of PersistedTranslation.sourceLocale.getter();
        dispatch thunk of PersistedTranslation.targetLocale.getter(v14);
        v15 = objc_allocWithZone((Class)_LTLocalePair);
        isa = Locale._bridgeToObjectiveC()().super.isa;
        v17 = Locale._bridgeToObjectiveC()().super.isa;
        v18 = objc_msgSend(v15, "initWithSourceLocale:targetLocale:", isa, v17);

        v19 = *(void (**)(_QWORD *, void *))(v38 + 8);
        v41 = v3;
        v3 = v39;
        v19(v8, v39);
        v19(v10, v3);
        KeyPath = swift_getKeyPath(&unk_1001EAC88);
        v21 = swift_getKeyPath(&unk_1001EACB0);
        v22 = v40;
        static Published.subscript.getter(v10, v40, KeyPath, v21);
        swift_release(KeyPath);
        swift_release(v21);
        v23 = swift_getKeyPath(&unk_1001EACD0);
        v24 = swift_getKeyPath(&unk_1001EACF8);
        static Published.subscript.getter(v8, v22, v23, v24);
        swift_release(v23);
        swift_release(v24);
        v25 = objc_allocWithZone((Class)_LTLocalePair);
        v26 = Locale._bridgeToObjectiveC()().super.isa;
        v27 = Locale._bridgeToObjectiveC()().super.isa;
        v28 = objc_msgSend(v25, "initWithSourceLocale:targetLocale:", v26, v27);

        v19(v8, v3);
        v19(v10, v3);
        LODWORD(v27) = objc_msgSend(v18, "isBidirectionalEqual:", v28);

        if ((_DWORD)v27)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v29 = v43[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
          v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v41);
          specialized ContiguousArray._endMutation()(v30);
        }
        else
        {

        }
        a1 = v35;
        ++v12;
        if (v42 == v34)
          return v43;
      }
      if (v12 < *(_QWORD *)(v36 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v32 = a1;
      else
        v32 = a1 & 0xFFFFFFFFFFFFFF8;
      v11 = _CocoaArrayWrapper.endIndex.getter(v32);
      if (!v11)
        return _swiftEmptyArrayStorage;
    }
    v13 = *(id *)(a1 + 8 * v12 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100074F4C(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, unint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  char isUniquelyReferenced_nonNull_native;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  __int128 v46;
  _QWORD *v47;
  _QWORD v48[10];
  _QWORD *v49;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v3 = 0;
  v41 = a1 + 32;
  v4 = _swiftEmptyArrayStorage;
  v5 = a2 + 7;
  v47 = a2;
  v42 = *(_QWORD *)(a1 + 16);
  v43 = a2 + 7;
  while (1)
  {
    v6 = v3 <= v2 ? v2 : v3;
    v44 = v4;
    v40 = v6;
LABEL_7:
    if (v3 == v6)
    {
      __break(1u);
      JUMPOUT(0x100075378);
    }
    v7 = *(_OWORD *)(v41 + 16 * v3);
    v8 = *(_QWORD *)(v41 + 16 * v3 + 8);
    v46 = v7;
    v45 = v3 + 1;
    if (a2[2])
      break;
    sub_100074B60(v7);
LABEL_42:
    v4 = v44;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
    v49 = v44;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1001DA308(0, v44[2] + 1, 1);
      v4 = v49;
    }
    v36 = v46;
    v38 = v4[2];
    v37 = v4[3];
    a2 = v47;
    if (v38 >= v37 >> 1)
    {
      sub_1001DA308(v37 > 1, v38 + 1, 1);
      a2 = v47;
      v36 = v46;
      v4 = v49;
    }
    v4[2] = v38 + 1;
    *(_OWORD *)&v4[2 * v38 + 4] = v36;
    v2 = v42;
    v3 = v45;
    if (v45 == v42)
      return v4;
  }
  Hasher.init(_seed:)(v48, a2[5]);
  v9 = v8;
  switch((uint64_t)v46)
  {
    case 0:
      v10 = 1;
      goto LABEL_16;
    case 1:
      v10 = 2;
      goto LABEL_16;
    case 2:
      v10 = 3;
      goto LABEL_16;
    case 3:
      v10 = 4;
      goto LABEL_16;
    case 4:
      v10 = 5;
LABEL_16:
      Hasher._combine(_:)(v10);
      break;
    default:
      ObjectType = swift_getObjectType(v46);
      v12 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
      swift_unknownObjectRetain_n(v46, 2);
      v13 = v12(ObjectType, v8);
      v15 = v14;
      String.hash(into:)(v48, v13, v14);
      swift_bridgeObjectRelease(v15);
      v9 = v8;
      sub_100074B70(v46);
      break;
  }
  v16 = Hasher._finalize()();
  a2 = v47;
  v17 = -1 << *((_BYTE *)v47 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)((char *)v5 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_42;
  v19 = v9;
  v20 = ~v17;
  while (2)
  {
    v21 = (unint64_t *)(a2[6] + 16 * v18);
    v22 = *v21;
    switch(*v21)
    {
      case 0uLL:
        if ((_QWORD)v46)
          goto LABEL_20;
        goto LABEL_38;
      case 1uLL:
        if ((_QWORD)v46 == 1)
          goto LABEL_39;
        goto LABEL_20;
      case 2uLL:
        if ((_QWORD)v46 == 2)
          goto LABEL_39;
        goto LABEL_20;
      case 3uLL:
        if ((_QWORD)v46 == 3)
          goto LABEL_39;
        goto LABEL_20;
      case 4uLL:
        if ((_QWORD)v46 == 4)
          goto LABEL_39;
        goto LABEL_20;
      default:
        if ((unint64_t)v46 < 5)
          goto LABEL_20;
        v23 = v21[1];
        v24 = swift_getObjectType(*v21);
        v25 = *(uint64_t (**)(uint64_t, unint64_t))(v23 + 24);
        sub_100074B60(v22);
        sub_100074B60(v46);
        sub_100074B60(v22);
        v26 = v25(v24, v23);
        v28 = v27;
        v29 = swift_getObjectType(v46);
        v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v29, v19);
        if (v26 != v30 || v28 != v31)
        {
          v33 = v31;
          v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v31, 0);
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v33);
          sub_100074B70(v46);
          sub_100074B70(v22);
          sub_100074B70(v22);
          v5 = v43;
          a2 = v47;
          if ((v34 & 1) != 0)
            goto LABEL_38;
LABEL_20:
          v18 = (v18 + 1) & v20;
          if (((*(_QWORD *)((char *)v5 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
            goto LABEL_42;
          continue;
        }
        swift_bridgeObjectRelease_n(v28, 2);
        sub_100074B70(v46);
        sub_100074B70(v22);
        sub_100074B70(v22);
        v5 = v43;
LABEL_38:
        sub_100074B70(v46);
        a2 = v47;
LABEL_39:
        v4 = v44;
        v3 = v45;
        v6 = v40;
        if (v45 != v42)
          goto LABEL_7;
        return v4;
    }
  }
}

uint64_t sub_1000753B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000753D4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;

  return sub_100072DA0(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000753DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100006DF4(&qword_10028EF20);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100075440(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_100006DF4(&qword_10028EF20) - 8) + 80);
  return sub_1000739BC(a1, a2, a3, a4, v4 + ((v9 + 16) & ~v9));
}

uint64_t sub_1000754A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000754CC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v3 + 16))(a1, a2, *a3, a3[1]);
}

uint64_t sub_1000754F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000737F0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000754FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100073674(*(_QWORD *)(v1 + 16), 1, a1);
}

uint64_t sub_100075518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100073674(*(_QWORD *)(v1 + 16), 0, a1);
}

double sub_100075534@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000734E8(*(_QWORD *)(v1 + 16), 1, a1);
}

double sub_100075550@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000734E8(*(_QWORD *)(v1 + 16), 0, a1);
}

uint64_t sub_10007556C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100073354(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), a1);
}

uint64_t sub_100075584()
{
  return EnvironmentValues.sizeCategory.getter();
}

void sub_1000755A8()
{
  char *v0;
  void *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_dataSource] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v1 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v1 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController_observers] = v1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator26ConversationListController____lazy_storage___bottomSeparatorLine] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/ConversationListController.swift", 50, 2, 176, 0);
  __break(1u);
}

uint64_t sub_100075660(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_100296BE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000756A0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000756C4(_QWORD *a1)
{
  uint64_t v1;

  return sub_100071DF8(a1, v1);
}

void sub_1000756CC(uint64_t a1)
{
  uint64_t v1;

  sub_100072638(a1, v1);
}

uint64_t sub_1000756D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_100075704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  double v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[5];
  char v21;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v20 - v7;
  KeyPath = swift_getKeyPath(&unk_1001EAD78);
  v10 = swift_getKeyPath(&unk_1001EADA0);
  static Published.subscript.getter(v20, v1, KeyPath);
  swift_release(KeyPath);
  *(_QWORD *)&v11 = swift_release(v10).n128_u64[0];
  if (v21 == 2)
  {
    v12 = (void *)v20[0];
    v13 = objc_msgSend(*(id *)(v20[0] + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request), "localePair", v11);
    v14 = objc_msgSend(v13, "sourceLocale");

    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v15 = swift_getKeyPath(&unk_1001EADC0);
    v16 = swift_getKeyPath(&unk_1001EADE8);
    static Published.subscript.getter(v6, v1, v15);
    swift_release(v15);
    swift_release(v16);
    v17 = static Locale.== infix(_:_:)(v8, v6);

    v18 = *(void (**)(char *, uint64_t))(v3 + 8);
    v18(v6, v2);
    v18(v8, v2);
  }
  else
  {
    sub_1000758CC((uint64_t)v20);
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1000758CC(uint64_t a1)
{
  destroy for ConversationState(a1);
  return a1;
}

uint64_t sub_100075908(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_100075934(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  Class isa;
  Class v40;
  id v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  void **v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  id v53;
  NSString v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  id v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  id v75;
  void **aBlock;
  uint64_t v77;
  void (*v78)(uint64_t, void *);
  void *v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  void *v82;
  char v83[24];

  v3 = v2;
  v72 = a2;
  v5 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v5);
  v73 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v72 - v12;
  KeyPath = swift_getKeyPath(&unk_1001EB168);
  v15 = swift_getKeyPath(&unk_1001EB190);
  v74 = v3;
  static Published.subscript.getter(&aBlock, v3, KeyPath);
  swift_release(KeyPath);
  swift_release(v15);
  v17 = aBlock;
  v16 = v77;
  v75 = a1;
  v18 = objc_msgSend(a1, "identifier");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  if (!v16)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_12;
  }
  if (v17 != (void **)v19 || v16 != v21)
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v16, v19, v21, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
LABEL_12:
    v29 = objc_msgSend(v75, "identifier", v72);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33 = swift_getKeyPath(&unk_1001EB168);
    v34 = swift_getKeyPath(&unk_1001EB190);
    aBlock = (void **)v30;
    v77 = v32;
    v35 = v74;
    v36 = static Published.subscript.setter(&aBlock, v35, v33, v34);
    v37 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v36);
    dispatch thunk of PersistedTranslation.targetLocale.getter(v37);
    v38 = objc_allocWithZone((Class)_LTSpeakRequest);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v40 = Locale._bridgeToObjectiveC()().super.isa;
    v41 = objc_msgSend(v38, "initWithSourceLocale:targetLocale:", isa, v40);

    v42 = *(void (**)(char *, uint64_t))(v8 + 8);
    v42(v11, v7);
    v42(v13, v7);
    v43 = *(_QWORD *)&v35[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session];
    if (v43)
    {
      v44 = v35;
      v45 = (void **)(v43 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID);
      swift_beginAccess(v43 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID, v83, 0, 0);
      v47 = v45[1];
      v48 = v45[3];
      v49 = v45[4];
      v82 = *v45;
      v46 = v82;
      v50 = v41;
      v51 = v46;
      swift_retain(v47);
      swift_bridgeObjectRetain(v48);
      swift_retain(v49);
      swift_retain(v43);
      swift_getAtKeyPath(&aBlock, &v82, v47);
      v52 = v77;
      if (v77)
      {
        swift_release(v47);

      }
      else
      {
        swift_bridgeObjectRetain(v48);
        swift_release(v47);

        v52 = (uint64_t)v48;
      }
      v55 = v72;
      swift_release(v43);
      swift_release(v49);
      swift_bridgeObjectRelease(v48);
      v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v52);
      v35 = v44;
    }
    else
    {
      v53 = v41;
      v54 = 0;
      v55 = v72;
    }
    objc_msgSend(v41, "setSessionID:", v54);

    v56 = v75;
    sub_1000811F4();
    v58 = v57;
    v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v58);
    objc_msgSend(v41, "setText:", v59);

    objc_msgSend(v56, "ttsPlaybackRateDouble");
    objc_msgSend(v41, "setTtsPlaybackRate:");
    sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
    v60 = v41;
    v61 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v60);
    LOBYTE(v58) = NSUserDefaults.onDeviceOnly.getter();

    objc_msgSend(v60, "setForcedOfflineTranslation:", v58 & 1);
    v62 = swift_allocObject(&unk_100266BC0, 32, 7);
    *(_QWORD *)(v62 + 16) = v35;
    *(_QWORD *)(v62 + 24) = v56;
    v80 = sub_1000820E8;
    v81 = v62;
    aBlock = _NSConcreteStackBlock;
    v77 = 1107296256;
    v78 = sub_100095424;
    v79 = &unk_100266BD8;
    v63 = _Block_copy(&aBlock);
    v64 = v81;
    v65 = v35;
    v66 = v56;
    swift_release(v64);
    objc_msgSend(v60, "setCompletionHandler:", v63);
    _Block_release(v63);
    v67 = type metadata accessor for TaskPriority(0);
    v68 = (uint64_t)v73;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v73, 1, 1, v67);
    v69 = (_QWORD *)swift_allocObject(&unk_100266C10, 56, 7);
    v69[2] = 0;
    v69[3] = 0;
    v69[4] = v65;
    v69[5] = v55;
    v69[6] = v60;
    v70 = v65;
    v71 = sub_100049DC0(v68, (uint64_t)&unk_10028F1A0, (uint64_t)v69);
    return (id)swift_release(v71);
  }
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v21);
LABEL_7:
  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10000F66C(v23, (uint64_t)qword_1002AA4A0);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "TTS currently playing is same as translation", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  return objc_msgSend(*(id *)&v74[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_translator], "cleanup", v72);
}

void sub_100075F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  char *v5;
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void **v30;
  id v31;
  id v32;
  Class isa;
  Class v34;
  id v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  void **v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  id v53;
  void *v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  void **v61;
  id v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void **aBlock;
  _QWORD v73[4];
  _QWORD *v74;
  void *v75;
  char v76[24];

  v6 = v5;
  v71 = a2;
  v68 = a1;
  v10 = type metadata accessor for Locale(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v67 = (void **)((char *)&v64 - v15);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v16 = type metadata accessor for Logger(0);
  sub_10000F66C(v16, (uint64_t)qword_1002AA338);
  swift_bridgeObjectRetain_n(a4, 2);
  v17 = a5;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v69 = a3;
  v70 = a4;
  if (v20)
  {
    v21 = swift_slowAlloc(22, -1);
    v65 = v10;
    v22 = v21;
    v23 = swift_slowAlloc(8, -1);
    v66 = v6;
    v64 = (_QWORD *)v23;
    *(_DWORD *)v22 = 134218242;
    v24 = String.count.getter(a3, a4);
    swift_bridgeObjectRelease(a4);
    aBlock = (void **)v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v73, v22 + 4);
    swift_bridgeObjectRelease(a4);
    *(_WORD *)(v22 + 12) = 2114;
    aBlock = v17;
    v25 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v73, v22 + 14);
    v26 = v64;
    *v64 = v17;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Retranslate text of length %ld with pair: %{public}@", (uint8_t *)v22, 0x16u);
    v27 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v26, 1, v27);
    v6 = v66;
    swift_slowDealloc(v26, -1, -1);
    v28 = v22;
    v10 = v65;
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v29 = objc_msgSend(v17, "sourceLocale");
  v30 = v67;
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v29);

  v31 = objc_msgSend(v17, "targetLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v31);

  v32 = objc_allocWithZone((Class)_LTCombinedRouteParagraphTranslationRequest);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v34 = Locale._bridgeToObjectiveC()().super.isa;
  v35 = objc_msgSend(v32, "initWithSourceLocale:targetLocale:", isa, v34);

  v36 = *(void (**)(char *, uint64_t))(v11 + 8);
  v36(v14, v10);
  v36((char *)v30, v10);
  v37 = *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session];
  if (v37)
  {
    v67 = v17;
    v38 = v6;
    v39 = (void **)(v37 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID);
    swift_beginAccess(v37 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID, v76, 0, 0);
    v41 = v39[1];
    v42 = v39[3];
    v43 = v39[4];
    v75 = *v39;
    v40 = v75;
    v44 = v35;
    v45 = v40;
    swift_retain(v41);
    swift_bridgeObjectRetain(v42);
    swift_retain(v43);
    swift_retain(v37);
    swift_getAtKeyPath(&aBlock, &v75, v41);
    v46 = (void *)v73[0];
    if (v73[0])
    {
      swift_release(v41);

    }
    else
    {
      swift_bridgeObjectRetain(v42);
      swift_release(v41);

      v46 = v42;
    }
    swift_release(v37);
    swift_release(v43);
    swift_bridgeObjectRelease(v42);
    v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46);
    v6 = v38;
    v17 = v67;
  }
  else
  {
    v47 = v35;
    v48 = 0;
  }
  objc_msgSend(v35, "setSessionID:", v48);

  v49 = v35;
  v51 = v69;
  v50 = v70;
  v52 = String._bridgeToObjectiveC()();
  objc_msgSend(v49, "setText:", v52);

  objc_msgSend(v49, "setCensorSpeech:", sub_100080FF8());
  sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v53 = v49;
  v54 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v53);
  v55 = NSUserDefaults.onDeviceOnly.getter();

  objc_msgSend(v53, "setForcedOfflineTranslation:", v55 & 1);
  v56 = (_QWORD *)swift_allocObject(&unk_100266B20, 64, 7);
  v57 = v68;
  v56[2] = v6;
  v56[3] = v57;
  v58 = v71;
  v56[4] = v71;
  v56[5] = v51;
  v56[6] = v50;
  v56[7] = v17;
  v73[3] = sub_10008116C;
  v74 = v56;
  aBlock = _NSConcreteStackBlock;
  v73[0] = 1107296256;
  v73[1] = sub_10007D3FC;
  v73[2] = &unk_100266B38;
  v59 = _Block_copy(&aBlock);
  v60 = v74;
  swift_bridgeObjectRetain(v50);
  v61 = v17;
  v62 = v53;
  v63 = v6;
  swift_bridgeObjectRetain(v58);
  swift_release(v60);
  objc_msgSend(v62, "setCompletionHandler:", v59);
  _Block_release(v59);

  objc_msgSend(*(id *)&v63[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_translator], "translate:", v62);
}

_QWORD *sub_100076530@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_10007653C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100076550@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100076564@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100076578(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000765A8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000765D4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000765F8(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10007660C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100076620(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100076634@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100076648(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10007665C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100076670(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100076684()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100076694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_1000766AC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void sub_1000766C0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = sub_100081344(a1);
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

uint64_t sub_1000766FC()
{
  return sub_100076758((uint64_t)&unk_1001EB120, (uint64_t)&unk_1001EB148);
}

uint64_t sub_100076720@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000768D8((uint64_t)&unk_1001EB120, (uint64_t)&unk_1001EB148, a1);
}

uint64_t sub_100076734()
{
  return sub_100076758((uint64_t)&unk_1001EB0D8, (uint64_t)&unk_1001EB100);
}

uint64_t sub_100076758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  NSString v16;
  uint64_t v18;

  v5 = v2;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(a1);
  v11 = swift_getKeyPath(a2);
  static Published.subscript.getter(v9, v5, KeyPath);
  swift_release(KeyPath);
  swift_release(v11);
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  Locale.identifier.getter(v12);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setObject:forKey:", v15, v16);

  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  return sub_100079F2C();
}

uint64_t sub_10007689C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000768D8((uint64_t)&unk_1001EB0D8, (uint64_t)&unk_1001EB100, a1);
}

uint64_t sub_1000768B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000768D8((uint64_t)&unk_1001EB288, (uint64_t)&unk_1001EB2B0, a1);
}

uint64_t sub_1000768C4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000768D8((uint64_t)&unk_1001EB240, (uint64_t)&unk_1001EB268, a1);
}

uint64_t sub_1000768D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  static Published.subscript.getter(a3, v3, KeyPath, v7);
  swift_release(KeyPath);
  return swift_release(v7);
}

uint64_t sub_100076934@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EB1F8);
  v4 = swift_getKeyPath(&unk_1001EB220);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100076998()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EB168);
  v2 = swift_getKeyPath(&unk_1001EB190);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100076A08()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EB1B0);
  v2 = swift_getKeyPath(&unk_1001EB1D8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

id sub_100076A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class isa;
  Class v14;
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v18;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v18 - v6);
  KeyPath = swift_getKeyPath(&unk_1001EB120);
  v9 = swift_getKeyPath(&unk_1001EB148);
  static Published.subscript.getter(v7, v0, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = swift_getKeyPath(&unk_1001EB0D8);
  v11 = swift_getKeyPath(&unk_1001EB100);
  static Published.subscript.getter(v5, v0, v10, v11);
  swift_release(v10);
  swift_release(v11);
  v12 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v14 = Locale._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v12, "initWithSourceLocale:targetLocale:", isa, v14);

  v16 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
  v16(v5, v1);
  v16(v7, v1);
  return v15;
}

id sub_100076BF4(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t KeyPath;
  void *v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  objc_class *v60;
  id v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  objc_super v87;
  _BYTE v88[48];
  char v89[8];
  _QWORD v90[2];

  v84 = a3;
  v82 = a2;
  v85 = a1;
  v4 = type metadata accessor for Locale(0);
  v86 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v83 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v81 = (char *)&v63 - v7;
  v80 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v77);
  v76 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v75 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100006DF4((uint64_t *)&unk_10028F230);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100006DF4(&qword_10028B5B8);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100006DF4((uint64_t *)&unk_10028F240);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100006DF4((uint64_t *)&unk_100292540);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v63 - v21;
  v23 = &v3[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__useCannedSpeech];
  KeyPath = swift_getKeyPath(&unk_1001EB2D0);
  v25 = (void *)objc_opt_self(NSUserDefaults);
  v26 = v3;
  v27 = objc_msgSend(v25, "standardUserDefaults");
  v28 = sub_100006DF4(&qword_10028F250);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = PassthroughSubject.init()();
  *(_QWORD *)v23 = v27;
  *((_QWORD *)v23 + 1) = KeyPath;
  v23[16] = 0;
  *((_QWORD *)v23 + 3) = v29;
  v30 = &v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__textTranslationLocale];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v22, 1, 1, v4);
  sub_100082758((uint64_t)v22, (uint64_t)v20);
  Published.init(initialValue:)(v20, v17);
  sub_10000A020((uint64_t)v22, (uint64_t *)&unk_10028FE50);
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v30, v16, v65);
  v31 = &v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__audioLevel];
  LODWORD(v90[0]) = 0;
  v32 = v66;
  Published.init(initialValue:)(v90, &type metadata for Float);
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v31, v32, v68);
  v33 = &v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__currentlyPlayingTTS];
  v90[0] = 0;
  v90[1] = 0;
  v34 = sub_100006DF4(&qword_10028D160);
  v35 = v69;
  Published.init(initialValue:)(v90, v34);
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v33, v35, v71);
  v36 = &v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__lastPlayingWord];
  v90[0] = 0;
  v37 = sub_100006DF4(&qword_10028F0D8);
  v38 = v72;
  Published.init(initialValue:)(v90, v37);
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v36, v38, v74);
  v39 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_queue;
  v40 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v41 = v75;
  static DispatchQoS.unspecified.getter(v40);
  v90[0] = _swiftEmptyArrayStorage;
  v42 = sub_100007D5C(&qword_10028F258, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v43 = sub_100006DF4(&qword_10028F260);
  v44 = sub_1000827A0(&qword_10028F268, &qword_10028F260);
  v45 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)(v90, v43, v44, v77, v42);
  v46 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v80);
  *(_QWORD *)&v26[v39] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x80000001001FAB50, v41, v45, v46, 0);
  *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData] = 0;
  *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session] = 0;
  *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_subscriptions] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_stateSubscription] = 0;
  v47 = v86;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
  v49 = v81;
  v50 = v82;
  v48(v81, (uint64_t)v82, v4);
  swift_beginAccess(&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__sourceLocale], v90, 33, 0);
  v51 = v83;
  v48(v83, (uint64_t)v49, v4);
  Published.init(initialValue:)(v51, v4);
  v52 = *(void (**)(char *, uint64_t))(v47 + 8);
  v52(v49, v4);
  swift_endAccess(v90);
  v53 = v84;
  v48(v49, (uint64_t)v84, v4);
  swift_beginAccess(&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__targetLocale], v90, 33, 0);
  v48(v51, (uint64_t)v49, v4);
  Published.init(initialValue:)(v51, v4);
  v52(v49, v4);
  swift_endAccess(v90);
  v48(v49, (uint64_t)v50, v4);
  swift_beginAccess(&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__visualTranslationLocale], v90, 33, 0);
  v48(v51, (uint64_t)v49, v4);
  Published.init(initialValue:)(v51, v4);
  v52(v49, v4);
  swift_endAccess(v90);
  v54 = type metadata accessor for DeviceHelper(0);
  swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  v55 = sub_10009ADE4();
  v56 = objc_allocWithZone((Class)type metadata accessor for RecordingHelper());
  v57 = sub_10014903C((uint64_t)v55);
  swift_release(v55);
  *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_recordingHelper] = v57;
  v58 = objc_msgSend(objc_allocWithZone((Class)_LTTranslator), "init");
  *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_translator] = v58;
  *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_ringer] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RingerSwitchObserver()), "init");
  v59 = v85;
  sub_1000821AC(v85, (uint64_t)v90);
  swift_beginAccess(&v26[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__state], v89, 33, 0);
  sub_1000821AC((uint64_t)v90, (uint64_t)v88);
  Published.init(initialValue:)(v88, &type metadata for ConversationState);
  sub_1000758CC((uint64_t)v90);
  swift_endAccess(v89);

  v60 = (objc_class *)type metadata accessor for ConversationManager(0);
  v87.receiver = v26;
  v87.super_class = v60;
  v61 = objc_msgSendSuper2(&v87, "init");
  sub_100077CA0(1);
  sub_10007753C();

  v52(v53, v4);
  v52(v50, v4);
  sub_1000758CC(v59);
  return v61;
}

void sub_10007753C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v4 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v1 = (void *)objc_opt_self(AVAudioSession);
  v2 = objc_msgSend(v1, "sharedInstance");
  objc_msgSend(v4, "addObserver:selector:name:object:", v0, "handleRouteChangeWithNotification:", AVAudioSessionRouteChangeNotification, v2);

  v3 = objc_msgSend(v1, "sharedInstance");
  objc_msgSend(v4, "addObserver:selector:name:object:", v0, "handleAudioInterruptionWithNotification:", AVAudioSessionInterruptionNotification, v3);

  objc_msgSend(v4, "addObserver:selector:name:object:", v0, "handleResignWithNotification:", UIApplicationWillResignActiveNotification, 0);
}

void sub_100077670(uint64_t a1)
{
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  Class isa;
  __n128 v6;
  _BYTE v7[24];

  v2 = a1 + 16;
  v3 = String._bridgeToObjectiveC()();
  swift_beginAccess(v2, v7, 0, 0);
  v4 = *(_QWORD *)(a1 + 16);
  sub_10000A05C(0, (unint64_t *)&qword_1002930B0, NSObject_ptr);
  swift_bridgeObjectRetain(v4);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v6 = swift_bridgeObjectRelease(v4);
  AnalyticsSendEvent(v3, isa, v6);

}

void sub_1000777B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;

  v1 = v0;
  v2 = Notification.userInfo.getter();
  if (!v2)
    return;
  v3 = v2;
  v24[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionInterruptionTypeKey);
  v24[1] = v4;
  AnyHashable.init<A>(_:)(v25, v24, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v5 = sub_1001A87EC((uint64_t)v25), (v6 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  swift_bridgeObjectRelease(v3);
  sub_10005DEC0((uint64_t)v25);
  if (!*((_QWORD *)&v27 + 1))
  {
    sub_10000A020((uint64_t)&v26, (uint64_t *)&unk_10028C0B0);
    return;
  }
  if ((swift_dynamicCast(v24, &v26, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) == 0)
    return;
  if (!v24[0])
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA440);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_27;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "Audio interruption ended";
    goto LABEL_26;
  }
  if (v24[0] != 1)
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10000F66C(v22, (uint64_t)qword_1002AA440);
    v18 = Logger.logObject.getter(v23);
    v19 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_27;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "Audio interruption with unhandled type";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc(v20, -1, -1);
LABEL_27:

    return;
  }
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA440);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Audio interruption began", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_100147478();
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
    v14 = objc_opt_self(_LTSpeechTranslationRequest);
    v15 = (void *)swift_dynamicCastObjCClass(v13, v14);
    if (v15)
      objc_msgSend(v15, "endAudio");
  }
}

void sub_100077CA0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class isa;
  Class v22;
  id v23;
  void (*v24)(_QWORD *, uint64_t);
  id v25;
  id v26;
  void *v27;
  id v28;
  Class v29;
  id v30;
  Class v31;
  void *v32;
  void *v33;
  void *v34;
  void **aBlock;
  uint64_t v36;
  void *v37;
  void *v38;
  void (*v39)(uint64_t);
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (void ***)((char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (void ***)((char *)&aBlock - v9);
  if (qword_10028A480 != -1)
    swift_once(&qword_10028A480, sub_10012112C);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000F66C(v11, (uint64_t)qword_1002AA488);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Preheating translation engine", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1001EB120);
  v17 = swift_getKeyPath(&unk_1001EB148);
  static Published.subscript.getter(v10, v2, KeyPath);
  swift_release(KeyPath);
  swift_release(v17);
  v18 = swift_getKeyPath(&unk_1001EB0D8);
  v19 = swift_getKeyPath(&unk_1001EB100);
  static Published.subscript.getter(v8, v2, v18);
  swift_release(v18);
  swift_release(v19);
  v20 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v22 = Locale._bridgeToObjectiveC()().super.isa;
  v23 = objc_msgSend(v20, "initWithSourceLocale:targetLocale:", isa, v22);

  v24 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v10, v4);
  v25 = objc_msgSend(objc_allocWithZone((Class)_LTSpeechTranslationRequest), "initWithLocalePair:", v23);
  objc_msgSend(v25, "setForcedOfflineTranslation:", a1 & 1);
  v26 = v25;
  objc_msgSend(v26, "setCensorSpeech:", sub_100080FF8());

  v27 = (void *)objc_opt_self(_LTTranslator);
  v28 = objc_msgSend(v23, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v28);

  v29 = Locale._bridgeToObjectiveC()().super.isa;
  v24(v10, v4);
  v30 = objc_msgSend(v23, "targetLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v30);

  v31 = Locale._bridgeToObjectiveC()().super.isa;
  v24(v10, v4);
  v39 = sub_10007809C;
  v40 = 0;
  aBlock = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_1001277CC;
  v38 = &unk_100266F48;
  v32 = _Block_copy(&aBlock);
  objc_msgSend(v27, "configInfoForLocale:otherLocale:completion:", v29, v31, v32);
  _Block_release(v32);

  v33 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_translator);
  v39 = sub_100078258;
  v40 = 0;
  aBlock = _NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_100095424;
  v38 = &unk_100266F70;
  v34 = _Block_copy(&aBlock);
  objc_msgSend(v33, "preheatForRequest:completion:", v26, v34);
  _Block_release(v34);

}

void sub_10007809C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (qword_10028A480 != -1)
    swift_once(&qword_10028A480, sub_10012112C);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA488);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = Dictionary.description.getter(a1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v10 = v9;
    v11 = sub_1001A7FE4(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Finished preheating asset updating if needed with config info: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
}

void sub_100078258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028A480 != -1)
      swift_once(&qword_10028A480, sub_10012112C);
    v2 = type metadata accessor for Logger(0);
    sub_10000F66C(v2, (uint64_t)qword_1002AA488);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      v7 = _convertErrorToNSError(_:)(a1);
      v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4);
      *v6 = v7;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to preheat translation engine: %@", v5, 0xCu);
      v8 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028A480 != -1)
      swift_once(&qword_10028A480, sub_10012112C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA488);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.info.getter(oslog);
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Finished preheating translation engine", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

uint64_t sub_1000784BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_1001EB120);
  v10 = swift_getKeyPath(&unk_1001EB148);
  static Published.subscript.getter(v8, v2, KeyPath, v10);
  swift_release(KeyPath);
  swift_release(v10);
  LOBYTE(a1) = static Locale.== infix(_:_:)(a1, v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((a1 & 1) != 0)
  {
    v11 = swift_getKeyPath(&unk_1001EB0D8);
    v12 = &unk_1001EB100;
  }
  else
  {
    v11 = swift_getKeyPath(&unk_1001EB120);
    v12 = &unk_1001EB148;
  }
  v13 = swift_getKeyPath(v12);
  static Published.subscript.getter(a2, v2, v11, v13);
  swift_release(v11);
  return swift_release(v13);
}

void sub_1000785F8(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  id v20;
  Class isa;
  id v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  NSString v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, uint64_t);
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79[24];
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  char v83[24];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v3 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v65 - v10;
  v12 = type metadata accessor for Locale(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
  if (!v18)
    return;
  v69 = (char *)&v65 - v17;
  v70 = v9;
  v19 = v18;
  v71 = v1;
  v20 = sub_100076A78();
  v72 = a1;
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v22 = objc_msgSend(v20, "oppositeToLocale:", isa);

  if (!v22)
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v24(v11, 1, 1, v12);
    goto LABEL_16;
  }
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v22);

  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v23(v11, v16, v12);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v24(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_16:
    sub_10000A020((uint64_t)v11, (uint64_t *)&unk_10028FE50);
    goto LABEL_22;
  }
  v68 = v24;
  v25 = v69;
  v23(v69, v11, v12);
  v26 = (uint64_t *)&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech];
  v27 = swift_beginAccess(&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech], v83, 0, 0);
  v28 = *v26;
  __chkstk_darwin(v27);
  swift_bridgeObjectRetain(v28);
  sub_1001708FC((uint64_t)sub_1000827E0, v28, (uint64_t)&v75);
  v29 = swift_bridgeObjectRelease();
  if (v76)
  {
    sub_10003E994(&v75, (uint64_t)&v84);
    v30 = (uint64_t *)&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation];
    v31 = swift_beginAccess(&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation], v79, 0, 0);
    v32 = *v30;
    __chkstk_darwin(v31);
    swift_bridgeObjectRetain(v32);
    sub_1001708FC((uint64_t)sub_10008269C, v32, (uint64_t)&v75);
    swift_bridgeObjectRelease();
    if (v76)
    {
      sub_10003E994(&v75, (uint64_t)v80);
      v33 = *(char **)&v71[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session];
      v24 = v68;
      if (!v33)
        goto LABEL_18;
      v67 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session;
      v34 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 1, 1, v34);
      v35 = v85;
      v66 = v86;
      v65 = (char *)sub_100023AF4(&v84, v85);
      v37 = v81;
      v36 = v82;
      v38 = sub_100023AF4(v80, v81);
      swift_retain(v33);
      sub_1001A4034(v65, (void (*)(uint64_t *, _QWORD))v38, 0, (uint64_t)v5, v33, v35, v37, v66, v36);
      v40 = v39;
      swift_release(v33);
      sub_10000A020((uint64_t)v5, (uint64_t *)&unk_10028F1B0);
      if (v40)
      {
        v41 = *(void **)&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request];
        v42 = v40;
        v43 = objc_msgSend(v41, "uniqueID");
        if (!v43)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v43 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v44 = swift_bridgeObjectRelease().n128_u64[0];
        }
        objc_msgSend(v42, "setRequestID:", v43, v44);

      }
      v45 = *(_QWORD *)&v71[v67];
      if (v45)
      {
        sub_100023AB0(v45 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)&v75);
        v46 = v76;
        v47 = v77;
        sub_100023AF4(&v75, v76);
        dispatch thunk of TranslationStore.save()(v46, v47);
        sub_100009C08(&v75);
      }
      if (v40)
      {
        *(_QWORD *)&v75 = v40;
        v78 = 4;
        KeyPath = swift_getKeyPath(&unk_1001EB1F8);
        v49 = swift_getKeyPath(&unk_1001EB220);
        sub_1000821AC((uint64_t)&v75, (uint64_t)&v73);
        v50 = v40;
        static Published.subscript.setter(&v73, v71, KeyPath, v49);
        sub_1000758CC((uint64_t)&v75);

      }
      else
      {
LABEL_18:
        *(_QWORD *)&v75 = 0;
        v78 = 0;
        v52 = swift_getKeyPath(&unk_1001EB1F8);
        v53 = swift_getKeyPath(&unk_1001EB220);
        sub_1000821AC((uint64_t)&v75, (uint64_t)&v73);
        static Published.subscript.setter(&v73, v71, v52, v53);
        sub_1000758CC((uint64_t)&v75);
      }
      sub_100009C08(v80);
      sub_100009C08(&v84);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v69, v12);
      v54 = v72;
      goto LABEL_25;
    }
    sub_100009C08(&v84);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v25, v12);
    v51 = (uint64_t *)&unk_10028F1C0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v25, v12, v29);
    v51 = (uint64_t *)&unk_100296450;
  }
  sub_10000A020((uint64_t)&v75, v51);
  v24 = v68;
LABEL_22:
  v55 = (uint64_t *)&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech];
  v56 = swift_beginAccess(&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech], &v84, 0, 0);
  v57 = *v55;
  __chkstk_darwin(v56);
  v54 = v72;
  swift_bridgeObjectRetain(v57);
  sub_1001708FC((uint64_t)sub_100082680, v57, (uint64_t)&v73);
  swift_bridgeObjectRelease();
  if (v74)
  {
    sub_10003E994(&v73, (uint64_t)&v75);
    v58 = v76;
    v59 = v77;
    sub_100023AF4(&v75, v76);
    v60 = dispatch thunk of FormattedString.formattedString.getter(v58, *(_QWORD *)(*(_QWORD *)(v59 + 16) + 8));
    sub_100078DD8(v60, v61, 0, 0, v54, *(_QWORD *)&v19[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_options], 0, 0);
    swift_bridgeObjectRelease();
    sub_100009C08(&v75);
  }
  else
  {
    sub_10000A020((uint64_t)&v73, (uint64_t *)&unk_100296450);
  }
LABEL_25:
  v62 = type metadata accessor for SpeechTurn();
  if (swift_dynamicCastClass(v19, v62))
  {
    v63 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v70, v54, v12);
    v24((char *)v63, 0, 1, v12);
    v64 = v19;
    sub_100085170(v63);
    sub_10000A020(v63, (uint64_t *)&unk_10028FE50);

  }
}

uint64_t sub_100078DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, uint64_t, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t (*v45)(_BYTE *, uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  id v54;
  id v55;
  _BYTE *v56;
  id v57;
  id v58;
  _BYTE *v59;
  void (*v60)(_BYTE *, void *);
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  id v85;
  Class isa;
  Class v87;
  id v88;
  id v89;
  uint64_t v90;
  NSString v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  _BYTE *v96;
  void (*v97)(_BYTE *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  char *v104;
  id v105;
  objc_class *v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  uint64_t v113;
  void *v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  _QWORD *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  void (*v123)(__int128 *);
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t (*v132)(_BYTE *, uint64_t);
  char v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  _BYTE v137[12];
  int v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(_BYTE *, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  _QWORD *v158;
  void *v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE v164[16];
  uint64_t v165;
  uint64_t v166;
  objc_super v167;
  __int128 aBlock;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;

  v143 = a8;
  v142 = a7;
  v155 = a6;
  v147 = a3;
  v161 = a1;
  v162 = a2;
  v145 = type metadata accessor for SpeechResultOrigin(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v146 = &v137[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for StoredSpeechResult(0);
  v150 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v149 = &v137[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for Locale(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v156 = &v137[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v157 = &v137[-v19];
  v20 = __chkstk_darwin(v18);
  v22 = &v137[-v21];
  v23 = __chkstk_darwin(v20);
  v25 = &v137[-v24];
  v26 = __chkstk_darwin(v23);
  v28 = &v137[-v27];
  v140 = v29;
  __chkstk_darwin(v26);
  v31 = &v137[-v30];
  v153 = a5;
  sub_1000784BC(a5, &v137[-v30]);
  v159 = v8;
  sub_1000784BC((uint64_t)v31, v28);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_10000F66C(v32, (uint64_t)qword_1002AA338);
  v34 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
  v158 = v28;
  v34(v25, (uint64_t)v28, v14);
  v160 = v31;
  v141 = v34;
  v34(v22, (uint64_t)v31, v14);
  swift_bridgeObjectRetain_n(a4, 2);
  v35 = swift_bridgeObjectRetain_n(v162, 2);
  v154 = v33;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter();
  v38 = v37;
  v39 = os_log_type_enabled(v36, v37);
  v151 = v12;
  v148 = a4;
  v152 = v15;
  if (v39)
  {
    v40 = swift_slowAlloc(38, -1);
    v41 = swift_slowAlloc(64, -1);
    v139 = v41;
    *(_QWORD *)&aBlock = v41;
    *(_DWORD *)v40 = 136446978;
    v42 = Locale.ltIdentifier.getter(v41);
    v163 = sub_1001A7FE4(v42, v43, (uint64_t *)&aBlock);
    v138 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v40 + 4);
    v44 = swift_bridgeObjectRelease();
    v45 = *(uint64_t (**)(_BYTE *, uint64_t, __n128))(v15 + 8);
    v46 = v45(v25, v14, v44);
    *(_WORD *)(v40 + 12) = 2082;
    v47 = Locale.ltIdentifier.getter(v46);
    v163 = sub_1001A7FE4(v47, v48, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v40 + 14);
    v49 = swift_bridgeObjectRelease();
    v45(v22, v14, v49);
    *(_WORD *)(v40 + 22) = 2048;
    v50 = String.count.getter(v161, v162);
    swift_bridgeObjectRelease();
    v163 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v40 + 24);
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 32) = 1024;
    swift_bridgeObjectRelease();
    LODWORD(v163) = a4 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, (char *)&v163 + 4, v40 + 34);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v138, "Requested text translation from '%{public}s'->'%{public}s' of length %ld has sanitized text: %{BOOL}d", (uint8_t *)v40, 0x26u);
    v51 = v139;
    swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    v52 = swift_bridgeObjectRelease();
    v45 = *(uint64_t (**)(_BYTE *, uint64_t, __n128))(v15 + 8);
    v45(v25, v14, v52);
    ((void (*)(_BYTE *, uint64_t))v45)(v22, v14);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v53 = v159;
  v54 = sub_100076A78();
  v55 = objc_msgSend(v54, "sourceLocale");

  v56 = v157;
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v55);

  v57 = sub_100076A78();
  v58 = objc_msgSend(v57, "targetLocale");

  v59 = v156;
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v58);

  LOBYTE(v57) = static Locale.== infix(_:_:)(v56, v59);
  ((void (*)(_BYTE *, uint64_t))v45)(v59, v14);
  ((void (*)(_BYTE *, uint64_t))v45)(v56, v14);
  if ((v57 & 1) != 0)
  {
    v60 = (void (*)(_BYTE *, void *))v45;
    v61 = v53;
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v159 = (void *)v14;
      v66 = v65;
      *(_QWORD *)&aBlock = v65;
      *(_DWORD *)v64 = 136446210;
      v156 = v64 + 4;
      v67 = sub_100076A78();
      v68 = objc_msgSend(v67, "sourceLocale");

      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v70 = Locale.ltIdentifier.getter(v69);
      v72 = v71;
      v60(v56, v159);
      v163 = sub_1001A7FE4(v70, v72, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v156);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Source and target locale are both '%{public}s', performing passthrough translation", v64, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      v73 = v66;
      v14 = (uint64_t)v159;
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {

    }
    sub_10007A628(v161, v162, v155);
    v60(v158, (void *)v14);
    return ((uint64_t (*)(_BYTE *, uint64_t))v60)(v160, v14);
  }
  KeyPath = swift_getKeyPath(&unk_1001EB1F8);
  v75 = swift_getKeyPath(&unk_1001EB220);
  static Published.subscript.getter(&aBlock, v53, KeyPath);
  swift_release(KeyPath);
  swift_release(v75);
  if (v171 == 3)
  {
    sub_10003E994(&aBlock, (uint64_t)&v163);
    v76 = v165;
    v77 = v166;
    sub_100023AF4(&v163, v165);
    v78 = dispatch thunk of FormattedString.formattedString.getter(v76, *(_QWORD *)(*(_QWORD *)(v77 + 16) + 8));
    v80 = v160;
    v81 = v158;
    v82 = v152;
    if (v78 == v161 && v79 == v162)
    {
      swift_bridgeObjectRelease();
LABEL_20:
      v134 = Logger.logObject.getter(v83);
      v135 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v134, v135))
      {
        v136 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v136 = 0;
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "Early returning and not translating because translation is in progress with the same text already", v136, 2u);
        swift_slowDealloc(v136, -1, -1);
      }

      ((void (*)(_QWORD *, uint64_t))v45)(v81, v14);
      ((void (*)(_BYTE *, uint64_t))v45)(v80, v14);
      return sub_100009C08(&v163);
    }
    v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, v161, v162, 0);
    swift_bridgeObjectRelease();
    if ((v133 & 1) != 0)
      goto LABEL_20;
    v156 = v45;
    sub_100009C08(&v163);
  }
  else
  {
    v156 = v45;
    sub_1000758CC((uint64_t)&aBlock);
    v80 = v160;
    v82 = v152;
  }
  v85 = objc_allocWithZone((Class)_LTTextTranslationRequest);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v87 = Locale._bridgeToObjectiveC()().super.isa;
  v88 = objc_msgSend(v85, "initWithSourceLocale:targetLocale:", isa, v87);

  objc_msgSend(v88, "setTaskHint:", 1);
  v89 = objc_allocWithZone((Class)NSAttributedString);
  v90 = v162;
  swift_bridgeObjectRetain(v162);
  v91 = String._bridgeToObjectiveC()();
  v92 = objc_msgSend(v89, "initWithString:", v91, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v88, "setText:", v92);
  v93 = v88;
  objc_msgSend(v93, "setCensorSpeech:", sub_100080FF8());

  sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v94 = v93;
  v95 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v94);
  LOBYTE(v93) = NSUserDefaults.onDeviceOnly.getter();

  objc_msgSend(v94, "setForcedOfflineTranslation:", v93 & 1);
  v96 = v80;
  v97 = v141;
  v141(v56, (uint64_t)v96, v14);
  v98 = *(unsigned __int8 *)(v82 + 80);
  v99 = (v98 + 32) & ~v98;
  v100 = swift_allocObject(&unk_100266C88, v99 + v140, v98 | 7);
  v101 = v159;
  *(_QWORD *)(v100 + 16) = v159;
  *(_QWORD *)(v100 + 24) = v94;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v82 + 32))(v100 + v99, v56, v14);
  v170 = (uint64_t)sub_1000822A4;
  v171 = v100;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v169 = sub_10007CAD0;
  *((_QWORD *)&v169 + 1) = &unk_100266CA0;
  v102 = _Block_copy(&aBlock);
  v103 = v171;
  v104 = v101;
  v105 = v94;
  objc_msgSend(v105, "setTextTranslationHandler:", v102, swift_release(v103).n128_f64[0]);
  _Block_release(v102);
  v106 = (objc_class *)type metadata accessor for ConversationTurn();
  v107 = (char *)objc_allocWithZone(v106);
  *(_QWORD *)&v107[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_lid] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v107[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v107[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v107[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request] = v105;
  *(_QWORD *)&v107[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_options] = v155;
  v108 = (uint64_t *)&v107[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_completion];
  v109 = v142;
  v110 = v143;
  *v108 = v142;
  v108[1] = v110;
  v111 = v105;
  sub_100016244(v109, v110);
  v167.receiver = v107;
  v167.super_class = v106;
  v112 = objc_msgSendSuper2(&v167, "init");
  v113 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData;
  v114 = *(void **)&v104[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
  *(_QWORD *)&v104[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData] = v112;

  v97(v56, v153, v14);
  v115 = v146;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v144 + 104))(v146, enum case for SpeechResultOrigin.text(_:), v145);
  swift_bridgeObjectRetain(v90);
  v116 = v148;
  swift_bridgeObjectRetain(v148);
  v117 = v149;
  StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v161, v90, v147, v116, v56, v115);
  v118 = *(_QWORD **)&v104[v113];
  v119 = v117;
  v120 = v151;
  v121 = v150;
  if (v118)
  {
    *((_QWORD *)&v169 + 1) = v151;
    v170 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
    v122 = sub_1000122F8(&aBlock);
    (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v121 + 16))(v122, v117, v120);
    v123 = *(void (**)(__int128 *))((swift_isaMask & *v118) + 0xE0);
    v124 = v118;
    v123(&aBlock);

    sub_100009C08(&aBlock);
  }
  v170 = 0;
  aBlock = 0u;
  v169 = 0u;
  LOBYTE(v171) = 5;
  v125 = swift_getKeyPath(&unk_1001EB1F8);
  v126 = swift_getKeyPath(&unk_1001EB220);
  sub_1000821AC((uint64_t)&aBlock, (uint64_t)&v163);
  v127 = v104;
  static Published.subscript.setter(&v163, v127, v125, v126);
  sub_1000758CC((uint64_t)&aBlock);
  *((_QWORD *)&v169 + 1) = v120;
  v170 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  v128 = sub_1000122F8(&aBlock);
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v121 + 16))(v128, v119, v120);
  LOBYTE(v171) = 3;
  v129 = swift_getKeyPath(&unk_1001EB1F8);
  v130 = swift_getKeyPath(&unk_1001EB220);
  sub_1000821AC((uint64_t)&aBlock, (uint64_t)&v163);
  v131 = v127;
  static Published.subscript.setter(&v163, v131, v129, v130);
  sub_1000758CC((uint64_t)&aBlock);
  sub_10007AAE4();
  objc_msgSend(*(id *)&v131[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_translator], "translate:", v111);

  (*(void (**)(_BYTE *, uint64_t))(v121 + 8))(v119, v120);
  v132 = (uint64_t (*)(_BYTE *, uint64_t))v156;
  ((void (*)(_QWORD *, uint64_t))v156)(v158, v14);
  return v132(v160, v14);
}

void sub_100079BF0(void *a1, void *a2, char a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t);
  char v14;
  uint64_t (*v15)(_QWORD *, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  _BYTE v40[48];
  void *v41;
  void *v42;
  char v43;

  v4 = v3;
  v39 = a2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter(v11);
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 104);
  v13(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v14 = _dispatchPreconditionTest(_:)(v10);
  v15 = *(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8);
  v16 = v15(v10, v7);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  *v10 = static OS_dispatch_queue.main.getter(v16);
  v13(v10, v12, v7);
  v17 = _dispatchPreconditionTest(_:)(v10);
  v15(v10, v7);
  if ((v17 & 1) == 0)
  {
LABEL_13:
    __break(1u);
    return;
  }
  sub_100147478();
  v18 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_stateSubscription;
  v19 = *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_stateSubscription];
  if (v19)
  {
    swift_retain(*(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_stateSubscription]);
    AnyCancellable.cancel()();
    swift_release(v19);
    v20 = *(_QWORD *)&v4[v18];
  }
  else
  {
    v20 = 0;
  }
  *(_QWORD *)&v4[v18] = 0;
  swift_release(v20);
  if ((a3 & 1) == 0)
  {
    sub_100147FD0();
    objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_translator], "cleanup");
    KeyPath = swift_getKeyPath(&unk_1001EB1B0);
    v22 = swift_getKeyPath(&unk_1001EB1D8);
    v41 = 0;
    v23 = v4;
    static Published.subscript.setter(&v41, v23, KeyPath, v22);
    v24 = swift_getKeyPath(&unk_1001EB168);
    v25 = swift_getKeyPath(&unk_1001EB190);
    v41 = 0;
    v42 = 0;
    static Published.subscript.setter(&v41, v23, v24, v25);
  }
  v26 = *(void **)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData] = 0;

  v27 = v39;
  if (a1)
  {
    v41 = a1;
    v42 = v39;
    v43 = 1;
    v28 = swift_getKeyPath(&unk_1001EB1F8);
    v29 = swift_getKeyPath(&unk_1001EB220);
    sub_1000821AC((uint64_t)&v41, (uint64_t)v40);
    v30 = v27;
    v31 = a1;
    v32 = v4;
    v33 = v31;
    static Published.subscript.setter(v40, v32, v28, v29);
    sub_1000758CC((uint64_t)&v41);

  }
  else
  {
    v41 = v39;
    v43 = 0;
    v34 = swift_getKeyPath(&unk_1001EB1F8);
    v35 = swift_getKeyPath(&unk_1001EB220);
    sub_1000821AC((uint64_t)&v41, (uint64_t)v40);
    v36 = v27;
    static Published.subscript.setter(v40, v4, v34, v35);
    sub_1000758CC((uint64_t)&v41);
  }
  v37 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v37, "setIdleTimerDisabled:", 0);

}

uint64_t sub_100079F2C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v25 - v7);
  KeyPath = swift_getKeyPath(&unk_1001EB240);
  v10 = swift_getKeyPath(&unk_1001EB268);
  static Published.subscript.getter(v8, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v10);
  v11 = swift_getKeyPath(&unk_1001EB120);
  v12 = swift_getKeyPath(&unk_1001EB148);
  static Published.subscript.getter(v6, v1, v11);
  swift_release(v11);
  swift_release(v12);
  v13 = sub_100007D5C(&qword_10028DE18, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  LOBYTE(v11) = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v13);
  v14 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v14(v6, v2);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v14)(v8, v2);
  if ((v11 & 1) == 0)
  {
    v16 = swift_getKeyPath(&unk_1001EB240);
    v17 = swift_getKeyPath(&unk_1001EB268);
    static Published.subscript.getter(v8, v1, v16);
    swift_release(v16);
    swift_release(v17);
    v18 = swift_getKeyPath(&unk_1001EB0D8);
    v19 = swift_getKeyPath(&unk_1001EB100);
    static Published.subscript.getter(v6, v1, v18);
    swift_release(v18);
    swift_release(v19);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v13);
    v14(v6, v2);
    result = ((uint64_t (*)(_QWORD *, uint64_t))v14)(v8, v2);
    if ((v20 & 1) == 0)
    {
      v21 = swift_getKeyPath(&unk_1001EB120);
      v22 = swift_getKeyPath(&unk_1001EB148);
      static Published.subscript.getter(v8, v1, v21);
      swift_release(v21);
      swift_release(v22);
      v23 = swift_getKeyPath(&unk_1001EB240);
      v24 = swift_getKeyPath(&unk_1001EB268);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v3 + 16))(v6, v8, v2);
      static Published.subscript.setter(v6, v1, v23, v24);
      return ((uint64_t (*)(_QWORD *, uint64_t))v14)(v8, v2);
    }
  }
  return result;
}

id sub_10007A1FC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10007A428()
{
  return type metadata accessor for ConversationManager(0);
}

uint64_t type metadata accessor for ConversationManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F088;
  if (!qword_10028F088)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationManager);
  return result;
}

void sub_10007A46C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[17];

  v15[0] = " ";
  sub_1000557A8(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v15[1] = v4;
    v15[2] = v4;
    sub_10001DFF8(319, (unint64_t *)&unk_10028F0A0, (uint64_t *)&unk_10028FE50);
    if (v6 <= 0x3F)
    {
      v15[3] = *(_QWORD *)(v5 - 8) + 64;
      v15[4] = v4;
      sub_10001D248(319, (unint64_t *)&unk_10028F0B0, (uint64_t)&type metadata for ConversationState);
      if (v8 <= 0x3F)
      {
        v15[5] = *(_QWORD *)(v7 - 8) + 64;
        sub_10001D248(319, &qword_10028B6A8, (uint64_t)&type metadata for Float);
        if (v10 <= 0x3F)
        {
          v15[6] = *(_QWORD *)(v9 - 8) + 64;
          sub_10001DFF8(319, (unint64_t *)&qword_10028F0C0, &qword_10028D160);
          if (v12 <= 0x3F)
          {
            v15[7] = *(_QWORD *)(v11 - 8) + 64;
            sub_10001DFF8(319, &qword_10028F0D0, &qword_10028F0D8);
            if (v14 <= 0x3F)
            {
              v15[8] = *(_QWORD *)(v13 - 8) + 64;
              v15[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
              v15[10] = &unk_1001EAE90;
              v15[11] = &unk_1001EAE90;
              v15[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
              v15[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
              v15[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
              v15[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
              v15[16] = &unk_1001EAE90;
              swift_updateClassMetadata2(a1, 256, 17, v15, a1 + 80);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10007A5EC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ConversationManager(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

void sub_10007A628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  NSString v25;
  NSString v26;
  id v27;
  id v28;
  void *v29;
  char v30;
  id v31;
  id v32;
  char *v33;
  void *v34;
  uint64_t KeyPath;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[6];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  char v57[32];

  v4 = v3;
  v49 = a1;
  v7 = type metadata accessor for SpeechResultOrigin(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100076A78();
  v15 = objc_msgSend(objc_allocWithZone((Class)_LTTextToSpeechTranslationRequest), "initWithLocalePair:", v14);

  v16 = *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session];
  v50 = v8;
  v51 = v7;
  if (v16)
  {
    v46 = a2;
    v47 = a3;
    v48 = v13;
    v17 = v16 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID;
    swift_beginAccess(v16 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID, v57, 0, 0);
    v18 = *(void **)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(_QWORD *)(v17 + 32);
    v52[0] = v18;
    v22 = v15;
    v23 = v18;
    swift_retain(v19);
    swift_bridgeObjectRetain(v20);
    swift_retain(v21);
    swift_retain(v16);
    swift_getAtKeyPath(&v53, v52, v19);
    if (!*((_QWORD *)&v53 + 1))
      swift_bridgeObjectRetain(v20);
    swift_release(v19);

    swift_release(v16);
    swift_release(v21);
    swift_bridgeObjectRelease();
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    a3 = v47;
    v13 = v48;
  }
  else
  {
    v24 = v15;
    v25 = 0;
  }
  objc_msgSend(v15, "setSessionID:", v25);

  objc_msgSend(v15, "setTaskHint:", 1);
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setText:", v26);

  v27 = v15;
  objc_msgSend(v27, "setCensorSpeech:", sub_100080FF8());

  objc_msgSend(v27, "setDelegate:", v4);
  sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v28 = v27;
  v29 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v28);
  v30 = NSUserDefaults.onDeviceOnly.getter();

  objc_msgSend(v28, "setForcedOfflineTranslation:", v30 & 1);
  v31 = objc_allocWithZone((Class)type metadata accessor for PassthroughTextTurn());
  v32 = v28;
  v33 = sub_1001403D4(v32, a3);

  v34 = *(void **)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData] = v33;

  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  v56 = 5;
  KeyPath = swift_getKeyPath(&unk_1001EB1F8);
  v36 = swift_getKeyPath(&unk_1001EB220);
  sub_1000821AC((uint64_t)&v53, (uint64_t)v52);
  v37 = v4;
  static Published.subscript.setter(v52, v37, KeyPath, v36);
  sub_1000758CC((uint64_t)&v53);
  v38 = objc_msgSend(v32, "text");
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  v42 = objc_msgSend(v32, "localePair");
  v43 = objc_msgSend(v42, "sourceLocale");

  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v43);
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v10, enum case for SpeechResultOrigin.text(_:), v51);
  *((_QWORD *)&v54 + 1) = type metadata accessor for StoredSpeechResult(0);
  v55 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  sub_1000122F8(&v53);
  StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v39, v41, 0, 0, v13, v10);
  v56 = 3;
  v44 = swift_getKeyPath(&unk_1001EB1F8);
  v45 = swift_getKeyPath(&unk_1001EB220);
  sub_1000821AC((uint64_t)&v53, (uint64_t)v52);
  static Published.subscript.setter(v52, v37, v44, v45);
  sub_1000758CC((uint64_t)&v53);
  sub_10007AAE4();

}

void sub_10007AAE4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int (**v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t KeyPath;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  NSObject *v65;
  double v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  NSObject *v80;
  os_log_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned int (**v117)(char *, uint64_t, uint64_t);
  NSObject *v118;
  NSObject *v119;
  NSString v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BOOL4 IsVoiceOverRunning;
  uint64_t v129;
  char *v130;
  NSObject *v131;
  os_log_type_t v132;
  int v133;
  uint64_t v134;
  _BOOL4 v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  NSString v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  NSString v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  NSObject *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  os_log_t v175;
  uint8_t *v176;
  int8x16_t *v177;
  char *v178;
  NSObject *v179;
  unsigned int (**v180)(char *, uint64_t, uint64_t);
  NSObject *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  _QWORD v185[3];
  uint64_t v186;
  uint64_t v187;
  char v188[24];
  _QWORD v189[3];
  uint64_t v190;
  NSObject *v191;
  uint64_t v192;
  int8x16_t v193[2];
  char v194;
  _BYTE v195[40];
  char v196;

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v173 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v7 = (char *)&v173 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v184 = (char *)&v173 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v173 - v12;
  v14 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v15 = *(v14 - 1);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v173 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *v17 = static OS_dispatch_queue.main.getter(v18);
  ((void (*)(_QWORD *, _QWORD, void *))v15[13].isa)(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = _dispatchPreconditionTest(_:)(v17);
  ((void (*)(_QWORD *, void *))v15[1].isa)(v17, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  KeyPath = swift_getKeyPath(&unk_1001EB1F8);
  v21 = swift_getKeyPath(&unk_1001EB220);
  static Published.subscript.getter(v195, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v21);
  sub_1000821AC((uint64_t)v195, (uint64_t)&v192);
  if (v194 == 4)
  {
    sub_1000758CC((uint64_t)&v192);
LABEL_17:
    sub_1000758CC((uint64_t)v195);
    return;
  }
  if (v194 == 5 && (v192 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    v22 = vorrq_s8(v193[0], v193[1]);
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)))
      goto LABEL_17;
  }
  sub_1000758CC((uint64_t)&v192);
  sub_1000758CC((uint64_t)v195);
  v14 = *(_QWORD **)&v1[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
  if (!v14)
    return;
  v183 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData;
  v182 = OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_options;
  v23 = *(_QWORD *)((char *)v14 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_options);
  v15 = v14;
  if ((v23 & 1) != 0 || (sub_100083BA0() & 1) == 0)
  {
    sub_10008398C((uint64_t)v7);
    if (v9[6](v7, 1, v8) == 1)
    {
      sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
      memset(v195, 0, sizeof(v195));
LABEL_40:
      sub_10000A020((uint64_t)v195, (uint64_t *)&unk_100296450);
      *(_QWORD *)v195 = v15;
      v196 = 2;
      v82 = swift_getKeyPath(&unk_1001EB1F8);
      v83 = swift_getKeyPath(&unk_1001EB220);
      sub_1000821AC((uint64_t)v195, (uint64_t)&v192);
      v84 = v15;
      static Published.subscript.setter(&v192, v1, v82, v83);
      sub_1000758CC((uint64_t)v195);

      return;
    }
    v9[4](v13, (uint64_t)v7, v8);
    v34 = (uint64_t *)((char *)v15 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech);
    v35 = swift_beginAccess((char *)v15 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech, v188, 0, 0);
    v181 = v15;
    v36 = *v34;
    __chkstk_darwin(v35);
    swift_bridgeObjectRetain(v36);
    sub_1001708FC((uint64_t)sub_1000822FC, v36, (uint64_t)v195);
    v37 = swift_bridgeObjectRelease(v36);
    v15 = v181;
    v9 = (unsigned int (**)(char *, uint64_t, uint64_t))v9[1];
    ((void (*)(char *, uint64_t, __n128))v9)(v13, v8, v37);
    if (!*(_QWORD *)&v195[24])
      goto LABEL_40;
    sub_10003E994((__int128 *)v195, (uint64_t)v189);
    v39 = v190;
    v38 = v191;
    sub_100023AF4(v189, v190);
    v40 = dispatch thunk of FormattedString.formattedString.getter(v39, *((_QWORD *)v38[2].isa + 1));
    v42 = v41;
    swift_bridgeObjectRelease(v41);
    v43 = HIBYTE(v42) & 0xF;
    if ((v42 & 0x2000000000000000) == 0)
      v43 = v40 & 0xFFFFFFFFFFFFLL;
    if (v43)
    {
      v44 = swift_getKeyPath(&unk_1001EB1F8);
      v45 = swift_getKeyPath(&unk_1001EB220);
      static Published.subscript.getter(v195, v1, v44);
      swift_release(v44);
      swift_release(v45);
      if (v196 != 2)
        goto LABEL_56;

      sub_100147478();
      v46 = *(_QWORD *)&v1[v183];
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
        v48 = objc_opt_self(_LTSpeechTranslationRequest);
        v49 = (void *)swift_dynamicCastObjCClass(v47, v48);
        if (v49)
          objc_msgSend(v49, "endAudio");
      }
      sub_100023AB0((uint64_t)v189, (uint64_t)v195);
      v50 = sub_100006DF4(&qword_100298130);
      v51 = sub_10000A05C(0, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr);
      if ((swift_dynamicCast(&v192, v195, v50, v51, 6) & 1) != 0)
      {
        v52 = (id)v192;
        v53 = objc_msgSend((id)v192, "bestTranscription");

        if (v53)
        {
          if (qword_10028A468 != -1)
            swift_once(&qword_10028A468, sub_1001210B8);
          v54 = type metadata accessor for Logger(0);
          v55 = (char *)sub_10000F66C(v54, (uint64_t)qword_1002AA440);
          v56 = v53;
          v178 = v55;
          v57 = Logger.logObject.getter(v56);
          v58 = static os_log_type_t.info.getter(v57);
          v59 = v58;
          v179 = v57;
          if (os_log_type_enabled(v57, v58))
          {
            v60 = swift_slowAlloc(32, -1);
            v175 = (os_log_t)swift_slowAlloc(64, -1);
            *(_QWORD *)v195 = v175;
            *(_DWORD *)v60 = 136446723;
            v61 = -[NSObject isLowConfidence](v56, "isLowConfidence");
            v62 = v61 == 0;
            if (v61)
              v63 = 7562617;
            else
              v63 = 28526;
            v180 = v9;
            if (v62)
              v64 = 0xE200000000000000;
            else
              v64 = 0xE300000000000000;
            v65 = v56;
            v192 = sub_1001A7FE4(v63, v64, (uint64_t *)v195);
            v177 = v193;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v60 + 4);

            *(_QWORD *)&v66 = swift_bridgeObjectRelease(v64).n128_u64[0];
            *(_WORD *)(v60 + 12) = 2048;
            v173 = v60 + 14;
            v67 = -[NSObject formattedString](v56, "formattedString", v66);
            v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
            LODWORD(v174) = v59;
            v70 = v69;

            v71 = String.count.getter(v68, v70);
            swift_bridgeObjectRelease(v70);
            v192 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v177, v173);

            v176 = (uint8_t *)v60;
            *(_WORD *)(v60 + 22) = 2085;
            v173 = v60 + 24;
            v15 = v181;
            v72 = -[NSObject formattedString](v65, "formattedString");
            v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
            v75 = v74;

            v56 = v65;
            v76 = v73;
            v9 = v180;
            v77 = v75;
            v78 = sub_1001A7FE4(v76, v75, (uint64_t *)v195);
            v79 = v176;
            v192 = v78;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v177, v173);

            swift_bridgeObjectRelease(v77);
            v80 = v179;
            _os_log_impl((void *)&_mh_execute_header, v179, (os_log_type_t)v174, "Finished recognition with low confidence: %{public}s of length %ld: %{sensitive}s", v79, 0x20u);
            v81 = v175;
            swift_arrayDestroy(v175, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v81, -1, -1);
            swift_slowDealloc(v176, -1, -1);

          }
          else
          {

          }
          v87 = -[NSObject sanitizedFormattedString](v56, "sanitizedFormattedString");
          if (v87)
          {
            v88 = v87;
            v179 = v56;
            v177 = (int8x16_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
            v90 = v89;

            swift_bridgeObjectRetain(v90);
            v92 = Logger.logObject.getter(v91);
            v93 = static os_log_type_t.info.getter(v92);
            v94 = v93;
            if (os_log_type_enabled(v92, v93))
            {
              v95 = swift_slowAlloc(22, -1);
              LODWORD(v176) = v94;
              v96 = v95;
              v178 = (char *)swift_slowAlloc(32, -1);
              *(_QWORD *)v195 = v178;
              *(_DWORD *)v96 = 134218243;
              v180 = v9;
              v174 = v96 + 4;
              v97 = (uint64_t)v177;
              v192 = String.count.getter(v177, v90);
              v175 = v92;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v174);
              *(_WORD *)(v96 + 12) = 2085;
              v174 = v96 + 14;
              swift_bridgeObjectRetain(v90);
              v192 = sub_1001A7FE4(v97, v90, (uint64_t *)v195);
              v9 = v180;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v174);
              swift_bridgeObjectRelease_n(v90, 3);
              v98 = v175;
              _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v176, "Finished recognition (sanitized) of length %ld: %{sensitive}s", (uint8_t *)v96, 0x16u);
              v99 = v178;
              swift_arrayDestroy(v178, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v99, -1, -1);
              swift_slowDealloc(v96, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v90, 2);
            }
            v56 = v179;
          }
          if ((*((_BYTE *)v14 + v182) & 1) == 0
            && (-[NSObject isLowConfidence](v56, "isLowConfidence") & 1) != 0)
          {
            *(_QWORD *)v195 = 3;
            memset(&v195[8], 0, 32);
            v196 = 5;
            v100 = swift_getKeyPath(&unk_1001EB1F8);
            v101 = swift_getKeyPath(&unk_1001EB220);
            sub_1000821AC((uint64_t)v195, (uint64_t)&v192);
            static Published.subscript.setter(&v192, v1, v100, v101);
            sub_1000758CC((uint64_t)v195);

            goto LABEL_93;
          }

        }
      }
      if (qword_10028A468 == -1)
      {
LABEL_53:
        v102 = type metadata accessor for Logger(0);
        v103 = sub_10000F66C(v102, (uint64_t)qword_1002AA440);
        v104 = Logger.logObject.getter(v103);
        v105 = static os_log_type_t.info.getter(v104);
        if (os_log_type_enabled(v104, v105))
        {
          v106 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v106 = 0;
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "Waiting for translation result", v106, 2u);
          swift_slowDealloc(v106, -1, -1);
        }

        sub_100023AB0((uint64_t)v189, (uint64_t)v195);
        v196 = 3;
        v107 = swift_getKeyPath(&unk_1001EB1F8);
        v108 = swift_getKeyPath(&unk_1001EB220);
        sub_1000821AC((uint64_t)v195, (uint64_t)&v192);
        static Published.subscript.setter(&v192, v1, v107, v108);
LABEL_56:
        sub_1000758CC((uint64_t)v195);
        sub_10008416C((uint64_t)v195);
        if (!*(_QWORD *)&v195[24])
        {
          sub_10000A020((uint64_t)v195, (uint64_t *)&unk_10028F1C0);
          if (qword_10028A468 != -1)
            swift_once(&qword_10028A468, sub_1001210B8);
          v142 = type metadata accessor for Logger(0);
          v143 = sub_10000F66C(v142, (uint64_t)qword_1002AA440);
          v144 = Logger.logObject.getter(v143);
          v145 = static os_log_type_t.info.getter(v144);
          if (os_log_type_enabled(v144, v145))
          {
            v146 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v146 = 0;
            _os_log_impl((void *)&_mh_execute_header, v144, v145, "Don't have a final translation yet", v146, 2u);
            swift_slowDealloc(v146, -1, -1);
            v147 = v15;
          }
          else
          {
            v147 = v144;
            v144 = v15;
          }

          goto LABEL_93;
        }
        sub_10003E994((__int128 *)v195, (uint64_t)v185);
        v109 = OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session;
        v110 = *(char **)&v1[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session];
        if (!v110)
          goto LABEL_75;
        v111 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v4, 1, 1, v111);
        v112 = v190;
        v179 = v191;
        v178 = (char *)sub_100023AF4(v189, v190);
        v180 = v9;
        v113 = v186;
        v114 = v187;
        v115 = sub_100023AF4(v185, v186);
        swift_retain(v110);
        v172 = v114;
        v15 = v181;
        v116 = v113;
        v117 = v180;
        sub_1001A4034(v178, (void (*)(uint64_t *, _QWORD))v115, 0, (uint64_t)v4, v110, v112, v116, (uint64_t)v179, v172);
        v119 = v118;
        swift_release(v110);
        sub_10000A020((uint64_t)v4, (uint64_t *)&unk_10028F1B0);
        if (!v119)
        {
LABEL_75:
          sub_100079BF0(0, 0, 0);
LABEL_92:
          (*(void (**)(void))((swift_isaMask & (uint64_t)v15->isa) + 0xF0))();
          v171 = *(void **)&v1[v183];
          *(_QWORD *)&v1[v183] = 0;

          sub_100009C08(v185);
          goto LABEL_93;
        }
        v120 = objc_msgSend(*(id *)((char *)&v15->isa + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request), "uniqueID");
        if (!v120)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v123 = v122;
          v120 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v121 = swift_bridgeObjectRelease(v123).n128_u64[0];
        }
        v179 = v119;
        -[NSObject setRequestID:](v119, "setRequestID:", v120, v121);

        v124 = *(_QWORD *)&v1[v109];
        if (v124)
        {
          sub_100023AB0(v124 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v195);
          v125 = *(_QWORD *)&v195[24];
          v126 = *(_QWORD *)&v195[32];
          sub_100023AF4(v195, *(uint64_t *)&v195[24]);
          dispatch thunk of TranslationStore.save()(v125, v126);
          sub_100009C08(v195);
        }
        v127 = *(_QWORD *)((char *)v14 + v182) & 8;
        IsVoiceOverRunning = UIAccessibilityIsVoiceOverRunning();
        if (qword_10028A468 != -1)
          swift_once(&qword_10028A468, sub_1001210B8);
        v129 = type metadata accessor for Logger(0);
        v130 = (char *)sub_10000F66C(v129, (uint64_t)qword_1002AA440);
        v131 = Logger.logObject.getter(v130);
        v132 = static os_log_type_t.info.getter(v131);
        v133 = v132;
        if (os_log_type_enabled(v131, v132))
        {
          v134 = swift_slowAlloc(20, -1);
          *(_DWORD *)v134 = 67240704;
          *(_DWORD *)v195 = v127 >> 3;
          LODWORD(v177) = v133;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, &v195[4], v134 + 4);
          *(_WORD *)(v134 + 8) = 1026;
          v178 = v130;
          v135 = IsVoiceOverRunning;
          v136 = !IsVoiceOverRunning;
          *(_DWORD *)v195 = v136;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, &v195[4], v134 + 10);
          *(_WORD *)(v134 + 14) = 1026;
          v15 = v181;
          if (v127)
            v137 = v136;
          else
            v137 = 0;
          IsVoiceOverRunning = v135;
          *(_DWORD *)v195 = v137;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, &v195[4], v134 + 16);
          _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v177, "TTS speak check (turnHasAutoPlayTTS: %{BOOL,public}d && !usingVoiceOver: %{BOOL,public}d: %{BOOL,public}d", (uint8_t *)v134, 0x14u);
          v138 = v134;
          v117 = v180;
          swift_slowDealloc(v138, -1, -1);
        }

        if (v127)
        {
          v140 = v179;
          if (!IsVoiceOverRunning)
          {
            v157 = type metadata accessor for SpeechTurn();
            v158 = swift_dynamicCastClass(v15, v157);
            if (v158)
            {
              v159 = v158;
              v160 = v15;
              v161 = Logger.logObject.getter(v160);
              v162 = static os_log_type_t.info.getter(v161);
              if (os_log_type_enabled(v161, v162))
              {
                v163 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v163 = 0;
                _os_log_impl((void *)&_mh_execute_header, v161, v162, "TTS Speak with turn", v163, 2u);
                swift_slowDealloc(v163, -1, -1);
              }

              sub_100075934(v140, *(_QWORD *)(v159 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_options) | 2);
              sub_100084C70();

            }
            else
            {
              v164 = Logger.logObject.getter(0);
              v165 = static os_log_type_t.info.getter(v164);
              if (os_log_type_enabled(v164, v165))
              {
                v166 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v166 = 0;
                _os_log_impl((void *)&_mh_execute_header, v164, v165, "TTS Speak without turn", v166, 2u);
                swift_slowDealloc(v166, -1, -1);
              }

              sub_100075934(v140, *(_QWORD *)((char *)v14 + v182));
            }
            goto LABEL_91;
          }
        }
        else
        {
          v140 = v179;
          if (!IsVoiceOverRunning)
          {
            if (!*(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_stateSubscription])
            {
              v141 = type metadata accessor for SpeechTurn();
              if (swift_dynamicCastClass(v181, v141))
                sub_100147FD0();
            }
            goto LABEL_91;
          }
        }
        dispatch thunk of PersistedTranslation.displayText.getter(v139);
        v149 = v148;
        v150 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v149);
        v151 = v184;
        v153 = dispatch thunk of PersistedTranslation.targetLocale.getter(v152);
        Locale.identifier.getter(v153);
        v155 = v154;
        ((void (*)(char *, uint64_t))v117)(v151, v8);
        v156 = String._bridgeToObjectiveC()();
        objc_msgSend(v1, "_accessbilityEvaluateTurnData:languageCode:", v150, v156, swift_bridgeObjectRelease(v155).n128_f64[0]);

LABEL_91:
        *(_QWORD *)v195 = v140;
        v196 = 4;
        v167 = swift_getKeyPath(&unk_1001EB1F8);
        v168 = swift_getKeyPath(&unk_1001EB220);
        sub_1000821AC((uint64_t)v195, (uint64_t)&v192);
        v169 = v1;
        v170 = v140;
        static Published.subscript.setter(&v192, v169, v167, v168);
        sub_1000758CC((uint64_t)v195);

        v15 = v181;
        goto LABEL_92;
      }
LABEL_97:
      swift_once(&qword_10028A468, sub_1001210B8);
      goto LABEL_53;
    }
    *(_QWORD *)v195 = 0;
    v196 = 0;
    v85 = swift_getKeyPath(&unk_1001EB1F8);
    v86 = swift_getKeyPath(&unk_1001EB220);
    sub_1000821AC((uint64_t)v195, (uint64_t)&v192);
    static Published.subscript.setter(&v192, v1, v85, v86);
    sub_1000758CC((uint64_t)v195);

LABEL_93:
    sub_100009C08(v189);
    return;
  }
  *(_QWORD *)v195 = 2;
  memset(&v195[8], 0, 32);
  v196 = 5;
  v24 = swift_getKeyPath(&unk_1001EB1F8);
  v8 = swift_getKeyPath(&unk_1001EB220);
  sub_1000821AC((uint64_t)v195, (uint64_t)&v192);
  v25 = v1;
  static Published.subscript.setter(&v192, v25, v24, v8);
  sub_1000758CC((uint64_t)v195);
  v26 = *(_QWORD *)&v25[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session];
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_lidDisambiguationCounter);
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      *(_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_lidDisambiguationCounter) = v29;
      goto LABEL_12;
    }
    goto LABEL_96;
  }
LABEL_12:
  sub_100147478();
  v30 = *(_QWORD *)&v1[v183];
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
    v32 = objc_opt_self(_LTSpeechTranslationRequest);
    v33 = (void *)swift_dynamicCastObjCClass(v31, v32);
    if (v33)
      objc_msgSend(v33, "endAudio");
  }

}

uint64_t sub_10007BF78(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void ***v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  void *v37;
  uint64_t v38;
  uint8_t *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  uint64_t v88;
  char *v89;
  void *v90;
  char *v91;
  id v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  void **v106;
  void *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  __int128 v120[2];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void **aBlock;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  void *v128;
  void (*v129)();
  uint64_t v130;

  v119 = a4;
  v11 = type metadata accessor for Locale(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for DispatchWorkItemFlags(0);
  v15 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v117 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v115 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v114 = v15;
    swift_errorRetain(a3);
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v19 = type metadata accessor for Logger(0);
    sub_10000F66C(v19, (uint64_t)qword_1002AA338);
    swift_errorRetain(a3);
    v20 = a1;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = v119;
    if (v23)
    {
      v25 = -1;
      v26 = a1;
      v27 = swift_slowAlloc(22, -1);
      v28 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 134218242;
      if (v26)
        v25 = (uint64_t)objc_msgSend(v20, "length");
      aBlock = (void **)v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v126, v27 + 4);

      *(_WORD *)(v27 + 12) = 2112;
      v29 = (void **)_convertErrorToNSError(_:)(a3);
      aBlock = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v126, v27 + 14);
      *v28 = v29;
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to translate text of length %ld: %@; resetting conversation",
        (uint8_t *)v27,
        0x16u);
      v30 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      v24 = v119;
    }
    else
    {

      swift_errorRelease(a3);
    }
    v48 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    v49 = (void *)static OS_dispatch_queue.main.getter(v48);
    v50 = swift_allocObject(&unk_100266D78, 32, 7);
    *(_QWORD *)(v50 + 16) = v24;
    *(_QWORD *)(v50 + 24) = a3;
    v129 = sub_1000823A8;
    v130 = v50;
    aBlock = _NSConcreteStackBlock;
    v126 = 1107296256;
    v127 = sub_100075908;
    v128 = &unk_100266D90;
    v51 = _Block_copy(&aBlock);
    v52 = v130;
    swift_errorRetain(a3);
    v53 = v24;
    swift_release(v52);
    v54 = v115;
    static DispatchQoS.unspecified.getter(v55);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v56 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v57 = sub_100006DF4(&qword_10028AC30);
    v58 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
    v59 = v116;
    v60 = v57;
    v61 = v118;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v60, v58, v118, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v54, v59, v51);
    _Block_release(v51);

    swift_errorRelease(a3);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v59, v61);
    return (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v54, v17);
  }
  else
  {
    v111 = v12;
    v112 = v11;
    v108 = a6;
    v109 = v14;
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10000F66C(v31, (uint64_t)qword_1002AA338);
    v33 = a5;
    v110 = v32;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v37 = a2;
    v38 = v15;
    v113 = v17;
    if (v36)
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = (void **)swift_slowAlloc(32, -1);
      aBlock = v106;
      v114 = v38;
      *(_DWORD *)v39 = 136446210;
      v105 = v39 + 4;
      v40 = objc_msgSend(v33, "uniqueID");
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v107 = a1;
      v43 = v42;

      v44 = v41;
      v45 = v119;
      v121 = sub_1001A7FE4(v44, v43, (uint64_t *)&aBlock);
      v38 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v105);

      a1 = v107;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Processing translation handler for request %{public}s", v39, 0xCu);
      v46 = v106;
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      v45 = v119;
    }
    v63 = v112;
    v64 = v111;
    if (a1)
    {
      v65 = objc_msgSend(a1, "string");
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      if (v37)
      {
        v123 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
        v124 = sub_100065E60((unint64_t *)&qword_10028F188, &qword_10028F180, _LTTranslationResult_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationResult);
        v121 = (uint64_t)v37;
      }
      else
      {
        v86 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
        v87 = v109;
        v86(v109, v108, v63);
        v123 = type metadata accessor for StoredTranslationResult(0);
        v124 = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
        sub_1000122F8(&v121);
        swift_bridgeObjectRetain(v68);
        StoredTranslationResult.init(text:locale:isOffline:romanization:)(v66, v68, v87, 1, 0, 0);
      }
      v89 = v116;
      v88 = v117;
      v90 = v37;
      v91 = v115;
      v92 = v90;
      swift_bridgeObjectRelease();
      v93 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
      v94 = (void *)static OS_dispatch_queue.main.getter(v93);
      sub_100023AB0((uint64_t)&v121, (uint64_t)v120);
      v95 = swift_allocObject(&unk_100266D28, 64, 7);
      *(_QWORD *)(v95 + 16) = v45;
      sub_10003E994(v120, v95 + 24);
      v129 = sub_100082370;
      v130 = v95;
      aBlock = _NSConcreteStackBlock;
      v126 = 1107296256;
      v127 = sub_100075908;
      v128 = &unk_100266D40;
      v96 = _Block_copy(&aBlock);
      v97 = v130;
      v98 = v45;
      swift_release(v97);
      static DispatchQoS.unspecified.getter(v99);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v100 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v101 = sub_100006DF4(&qword_10028AC30);
      v102 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
      v103 = v101;
      v104 = v118;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v103, v102, v118, v100);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v91, v89, v96);
      _Block_release(v96);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v89, v104);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v113);
      return sub_100009C08(&v121);
    }
    else
    {
      v69 = Logger.logObject.getter(v47);
      v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed to get text from result, resetting conversation", v71, 2u);
        swift_slowDealloc(v71, -1, -1);
      }

      v72 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
      v73 = (void *)static OS_dispatch_queue.main.getter(v72);
      v74 = swift_allocObject(&unk_100266CD8, 24, 7);
      *(_QWORD *)(v74 + 16) = v45;
      v129 = sub_100082318;
      v130 = v74;
      aBlock = _NSConcreteStackBlock;
      v126 = 1107296256;
      v127 = sub_100075908;
      v128 = &unk_100266CF0;
      v75 = _Block_copy(&aBlock);
      v76 = v130;
      v77 = v45;
      swift_release(v76);
      v78 = v115;
      static DispatchQoS.unspecified.getter(v79);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v80 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v81 = sub_100006DF4(&qword_10028AC30);
      v82 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
      v83 = v116;
      v84 = v81;
      v85 = v118;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v84, v82, v118, v80);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v78, v83, v75);
      _Block_release(v75);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v83, v85);
      return (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v78, v113);
    }
  }
}

void sub_10007CA1C(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = (id)_convertErrorToNSError(_:)(a2);
  sub_100079BF0(0, v2, 0);

}

void sub_10007CA60(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void (*v4)(uint64_t);
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData);
  if (v2)
  {
    v4 = *(void (**)(uint64_t))((swift_isaMask & *v2) + 0xE8);
    v5 = v2;
    v4(a2);

  }
  sub_10007AAE4();
}

void sub_10007CAD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(void *, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

void sub_10007CB60(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, NSObject *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  id v40;
  NSObject *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  void **aBlock;
  _QWORD v62[4];
  _QWORD *v63;

  v60 = a8;
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v20 = __chkstk_darwin(v19);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v24 = type metadata accessor for Logger(0);
    sub_10000F66C(v24, (uint64_t)qword_1002AA338);
    v25 = swift_errorRetain(a2);
    v60 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      v29 = _convertErrorToNSError(_:)(a2);
      aBlock = (void **)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v62, v27 + 4);
      *v28 = v29;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v60, v26, "Failed to retranslate text: %@", v27, 0xCu);
      v30 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      swift_errorRelease(a2);
      return;
    }
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    v57 = a4;
    v58 = v18;
    v56 = v15;
    v31 = v60;
    v59 = v16;
    if (a1)
    {
      v53 = v23;
      v54 = v21;
      v55 = v20;
      sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
      v32 = a1;
      v33 = (void *)static OS_dispatch_queue.main.getter(v32);
      v34 = (_QWORD *)swift_allocObject(&unk_100266B70, 72, 7);
      v35 = a3;
      v36 = v57;
      v34[2] = a3;
      v34[3] = v36;
      v34[4] = a5;
      v34[5] = a6;
      v37 = a7;
      v34[6] = a7;
      v34[7] = v31;
      v34[8] = v32;
      v62[3] = sub_1000811D8;
      v63 = v34;
      aBlock = _NSConcreteStackBlock;
      v62[0] = 1107296256;
      v62[1] = sub_100075908;
      v62[2] = &unk_100266B88;
      v38 = _Block_copy(&aBlock);
      v39 = v63;
      v57 = v32;
      v40 = v35;
      swift_bridgeObjectRetain(a5);
      swift_bridgeObjectRetain(v37);
      v41 = v31;
      v42 = swift_release(v39);
      v43 = v53;
      static DispatchQoS.unspecified.getter(v42);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v44 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v45 = sub_100006DF4(&qword_10028AC30);
      v46 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
      v47 = v58;
      v48 = v56;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v45, v46, v56, v44);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v43, v47, v38);
      _Block_release(v38);

      (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v48);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v55);
      return;
    }
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10000F66C(v49, (uint64_t)qword_1002AA338);
    v60 = Logger.logObject.getter(v50);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v51, "Failed to get translation result, but there's no error", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }
  }

}

void sub_10007D020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  char *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  v55 = a7;
  v56 = a4;
  v52 = a6;
  v53 = a5;
  v10 = type metadata accessor for Locale(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StoredSpeechResult(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v54 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4((uint64_t *)&unk_10028F170);
  __chkstk_darwin(v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SpeechResultOrigin(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  __chkstk_darwin(v21);
  v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session);
  if (v24)
  {
    v49 = (char *)&v47 - v22;
    v50 = v23;
    v51 = v14;
    KeyPath = swift_getKeyPath(&unk_1001EB090);
    v26 = swift_getKeyPath(&unk_1001EB0B8);
    v27 = swift_retain(v24);
    static Published.subscript.getter(v57, v27, KeyPath);
    swift_release(KeyPath);
    swift_release(v26);
    v28 = v57[0];
    swift_bridgeObjectRetain(a3);
    v29 = sub_100081F00(v28, a2, a3);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(a3);
    if (!v29)
    {
      swift_release(v24);
      return;
    }
    v30 = objc_msgSend(v29, "sourceInput");
    v48 = v29;
    if (v30)
    {
      v31 = v30;
      dispatch thunk of AnySpeechResult.value.getter(v57);

      v47 = v13;
      v32 = a2;
      v33 = v12;
      v34 = a3;
      v36 = v58;
      v35 = v59;
      sub_100023AF4(v57, v58);
      v37 = v36;
      a3 = v34;
      v12 = v33;
      a2 = v32;
      v13 = v47;
      dispatch thunk of SpeechResult.origin.getter(v37, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
      sub_100009C08(v57);
      v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
      v39 = v52;
      if (v38 != 1)
      {
        v40 = v49;
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v49, v18, v19);
LABEL_9:
        v41 = v53;
        v42 = objc_msgSend(v39, "sourceLocale", swift_bridgeObjectRetain(v53).n128_f64[0]);
        static Locale._unconditionallyBridgeFromObjectiveC(_:)(v42);

        v43 = v50;
        (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v50, v40, v19);
        v44 = v12;
        v45 = (uint64_t)v54;
        StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v56, v41, 0, 0, v44, v43);
        v46 = v55;
        sub_100080BDC(a2, a3, v45, v46, v24);

        swift_release(v24);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v45, v13);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v40, v19);

        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
      v39 = v52;
    }
    v40 = v49;
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v49, enum case for SpeechResultOrigin.text(_:), v19);
    sub_10000A020((uint64_t)v18, (uint64_t *)&unk_10028F170);
    goto LABEL_9;
  }
}

void sub_10007D3FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10007D470(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = (_QWORD *)swift_allocObject(&unk_100266C38, 40, 7);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  aBlock[4] = sub_10008221C;
  v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100266C50;
  v15 = _Block_copy(aBlock);
  v16 = v27;
  swift_errorRetain(a1);
  v17 = a2;
  v18 = a3;
  v19 = swift_release(v16);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100006DF4(&qword_10028AC30);
  v22 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v24);
}

void sub_10007D690(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63[6];
  uint64_t v64;
  _QWORD v65[4];
  char v66;

  v5 = &unk_10028A000;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v7 = type metadata accessor for Logger(0);
    sub_10000F66C(v7, (uint64_t)qword_1002AA4A0);
    v8 = swift_errorRetain(a1);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      v13 = _convertErrorToNSError(_:)(a1);
      v64 = v13;
      v5 = (_QWORD *)&unk_10028A000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v11 + 4);
      *v12 = v13;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to speak translation: %@", v11, 0xCu);
      v14 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(a1);
      goto LABEL_12;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10000F66C(v15, (uint64_t)qword_1002AA4A0);
    v9 = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v17, "TTS speak request complete", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
  }

LABEL_12:
  KeyPath = swift_getKeyPath(&unk_1001EB168);
  v20 = swift_getKeyPath(&unk_1001EB190);
  static Published.subscript.getter(&v64, a2, KeyPath);
  swift_release(KeyPath);
  swift_release(v20);
  v22 = v64;
  v21 = v65[0];
  v23 = objc_msgSend(a3, "identifier");
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  if (v21)
  {
    if (v22 == v24 && v21 == v26)
    {
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v26);
      goto LABEL_18;
    }
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, v24, v26, 0);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v26);
    if ((v27 & 1) != 0)
    {
LABEL_18:
      v28 = swift_getKeyPath(&unk_1001EB1B0);
      v29 = swift_getKeyPath(&unk_1001EB1D8);
      v64 = 0;
      v30 = a2;
      static Published.subscript.setter(&v64, v30, v28, v29);
      v31 = swift_getKeyPath(&unk_1001EB168);
      v32 = swift_getKeyPath(&unk_1001EB190);
      v64 = 0;
      v65[0] = 0;
      v33 = (char *)v30;
      static Published.subscript.setter(&v64, v33, v31, v32);
      if (*(_QWORD *)&v33[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_stateSubscription])
      {
        if (v5[145] != -1)
          swift_once(&qword_10028A488, sub_100121150);
        v34 = type metadata accessor for Logger(0);
        v35 = sub_10000F66C(v34, (uint64_t)qword_1002AA4A0);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "TTS Voice Activation Detection (VAD) is active", v38, 2u);
          swift_slowDealloc(v38, -1, -1);
        }

        v64 = 0;
        v66 = 0;
        v39 = swift_getKeyPath(&unk_1001EB1F8);
        v40 = swift_getKeyPath(&unk_1001EB220);
        sub_1000821AC((uint64_t)&v64, (uint64_t)v63);
        static Published.subscript.setter(v63, v33, v39, v40);
        sub_1000758CC((uint64_t)&v64);
      }
      else if (!*(_QWORD *)&v33[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData])
      {
        if (v5[145] != -1)
          swift_once(&qword_10028A488, sub_100121150);
        v58 = type metadata accessor for Logger(0);
        v59 = sub_10000F66C(v58, (uint64_t)qword_1002AA4A0);
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v62 = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "TTS turn data is nil", v62, 2u);
          swift_slowDealloc(v62, -1, -1);
        }

        sub_100147FD0();
      }
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v26);
  }
  if (v5[145] != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v41 = type metadata accessor for Logger(0);
  sub_10000F66C(v41, (uint64_t)qword_1002AA4A0);
  v42 = a2;
  v43 = a3;
  v44 = v42;
  v45 = v43;
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc(22, -1);
    v49 = swift_slowAlloc(64, -1);
    v63[0] = v49;
    *(_DWORD *)v48 = 136446466;
    v50 = swift_getKeyPath(&unk_1001EB168);
    v51 = swift_getKeyPath(&unk_1001EB190);
    static Published.subscript.getter(&v64, v44, v50);
    swift_release(v50);
    swift_release(v51);
    if (v65[0])
      v52 = v64;
    else
      v52 = 7104878;
    if (v65[0])
      v53 = v65[0];
    else
      v53 = 0xE300000000000000;
    v64 = sub_1001A7FE4(v52, v53, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v48 + 4);

    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v48 + 12) = 2082;
    v54 = objc_msgSend(v45, "identifier", v63[0]);
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v57 = v56;

    v64 = sub_1001A7FE4(v55, v57, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v48 + 14);

    swift_bridgeObjectRelease(v57);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "TTS currently playing is not for the translation. TTS id: %{public}s, translation id: %{public}s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10007DE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  return swift_task_switch(sub_10007DE68, 0, 0);
}

uint64_t sub_10007DE68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[20];
  v2 = *(_QWORD *)(v0[19] + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_recordingHelper);
  v3 = swift_task_alloc(32);
  v0[22] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[23] = v4;
  v5 = sub_100006DF4(&qword_10028F1A8);
  *v4 = v0;
  v4[1] = sub_10007DF24;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000022, 0x80000001001FAA80, sub_100082194, v3, v5);
}

uint64_t sub_10007DF24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10007DF80, 0, 0);
}

uint64_t sub_10007DF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t KeyPath;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = v0 + 64;
    v4 = v0 + 136;
    swift_errorRetain(*(_QWORD *)(v0 + 128));
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v5 = (_QWORD *)(v0 + 112);
    v6 = type metadata accessor for Logger(0);
    sub_10000F66C(v6, (uint64_t)qword_1002AA4A0);
    v7 = swift_errorRetain(v1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      v11 = _convertErrorToNSError(_:)(v1);
      *(_QWORD *)(v0 + 144) = v11;
      v5 = (_QWORD *)(v0 + 112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v10 + 4);
      *v30 = v11;
      v4 = v0 + 136;
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "TTS audio session config failed. Error: %@", v10, 0xCu);
      v12 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v30, 1, v12);
      v2 = v0 + 16;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
    }
    v20 = *(void **)(v0 + 152);

    KeyPath = swift_getKeyPath(&unk_1001EB1B0);
    v22 = swift_getKeyPath(&unk_1001EB1D8);
    *(_QWORD *)(v0 + 136) = 0;
    v23 = v20;
    static Published.subscript.setter(v4, v23, KeyPath, v22);
    v24 = swift_getKeyPath(&unk_1001EB168);
    v25 = swift_getKeyPath(&unk_1001EB190);
    *v5 = 0;
    v5[1] = 0;
    v26 = v23;
    static Published.subscript.setter(v5, v26, v24, v25);
    *(_QWORD *)(v0 + 16) = _convertErrorToNSError(_:)(v1);
    *(_BYTE *)(v0 + 56) = 0;
    v27 = swift_getKeyPath(&unk_1001EB1F8);
    v28 = swift_getKeyPath(&unk_1001EB220);
    sub_1000821AC(v2, v3);
    static Published.subscript.setter(v3, v26, v27, v28);
    sub_1000758CC(v2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  else
  {
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10000F66C(v13, (uint64_t)qword_1002AA4A0);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "TTS speak request starting", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 168);
    v19 = *(_QWORD *)(v0 + 152);

    objc_msgSend(*(id *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_translator), "translate:", v18);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E314()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA440);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Speech activity detected", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = swift_allocObject(&unk_100266F08, 24, 7);
  *(_QWORD *)(v16 + 16) = v1;
  aBlock[4] = sub_100082670;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100266F20;
  v17 = _Block_copy(aBlock);
  v18 = v28;
  v19 = v1;
  v20 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100006DF4(&qword_10028AC30);
  v23 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v2, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10007E5C8(char *a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  _BYTE v6[48];
  _QWORD v7[5];
  char v8;

  v1 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
  if (v1)
  {
    v7[0] = *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
    v8 = 2;
    KeyPath = swift_getKeyPath(&unk_1001EB1F8);
    v4 = swift_getKeyPath(&unk_1001EB220);
    sub_1000821AC((uint64_t)v7, (uint64_t)v6);
    v5 = v1;
    static Published.subscript.setter(v6, a1, KeyPath, v4);
    sub_1000758CC((uint64_t)v7);

  }
}

void sub_10007E6A0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  id v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  void *object;
  __n128 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  id v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String aBlock;
  uint64_t (*v98)(uint64_t);
  void *v99;
  void (*v100)();
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v86 = *(_QWORD *)(v2 - 8);
  v87 = v2;
  __chkstk_darwin(v2);
  v85 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for DispatchQoS(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v94 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v91 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028F1F8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v92 = (char *)&v78 - v11;
  v102 = 0;
  v103 = 0xE000000000000000;
  v80 = a1;
  v12 = objc_msgSend(a1, "confidences");
  v13 = sub_10000A05C(0, (unint64_t *)&qword_10028F200, NSNumber_ptr);
  v14 = sub_100007D5C(&qword_10028F208, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  v95 = v5;
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v12, v5, v13, v14);

  v93 = 0;
  v16 = *(_QWORD *)(v15 + 64);
  v88 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v89 = (unint64_t)(v17 + 63) >> 6;
  v90 = v15;
  v79 = v89 - 1;
  v21 = v94;
  v20 = v95;
  v22 = v91;
  if ((v18 & v16) == 0)
    goto LABEL_8;
LABEL_6:
  v37 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v38 = (uint64_t)v92;
  v39 = v37 | (v93 << 6);
LABEL_7:
  v40 = v90;
  (*(void (**)(char *, unint64_t, uint64_t))(v94 + 16))(v10, *(_QWORD *)(v90 + 48) + *(_QWORD *)(v94 + 72) * v39, v95);
  v41 = *(_QWORD *)(v40 + 56);
  v42 = sub_100006DF4(&qword_10028F210);
  v43 = *(void **)(v41 + 8 * v39);
  *(_QWORD *)&v10[*(int *)(v42 + 48)] = v43;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v10, 0, 1, v42);
  v44 = v43;
  while (1)
  {
    sub_1000825FC((uint64_t)v10, v38);
    v49 = sub_100006DF4(&qword_10028F210);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v38, 1, v49) == 1)
    {
      swift_release(v90);
      swift_bridgeObjectRelease(v103);
      if (qword_10028A438 != -1)
        goto LABEL_33;
      goto LABEL_28;
    }
    v23 = *(void **)(v38 + *(int *)(v49 + 48));
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 32))(v22, v38, v20);
    aBlock._countAndFlagsBits = Locale.identifier.getter(v24);
    aBlock._object = v25;
    v26._countAndFlagsBits = 32;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    v27 = objc_msgSend(v23, "description");
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v29 = v10;
    v31 = v30;

    v32._countAndFlagsBits = v28;
    v32._object = v31;
    String.append(_:)(v32);
    v33 = v31;
    v10 = v29;
    swift_bridgeObjectRelease(v33);
    v34._countAndFlagsBits = 10;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    object = aBlock._object;
    String.append(_:)(aBlock);

    v36 = swift_bridgeObjectRelease(object);
    (*(void (**)(char *, uint64_t, __n128))(v21 + 8))(v22, v20, v36);
    if (v19)
      goto LABEL_6;
LABEL_8:
    v38 = (uint64_t)v92;
    v45 = v93 + 1;
    if (__OFADD__(v93, 1))
      break;
    if (v45 < v89)
    {
      v46 = *(_QWORD *)(v88 + 8 * v45);
      if (v46)
        goto LABEL_11;
      v47 = v93 + 2;
      ++v93;
      if (v45 + 1 < v89)
      {
        v46 = *(_QWORD *)(v88 + 8 * v47);
        if (v46)
          goto LABEL_14;
        v93 = v45 + 1;
        if (v45 + 2 < v89)
        {
          v46 = *(_QWORD *)(v88 + 8 * (v45 + 2));
          if (v46)
          {
            v45 += 2;
            goto LABEL_11;
          }
          v47 = v45 + 3;
          v93 = v45 + 2;
          if (v45 + 3 < v89)
          {
            v46 = *(_QWORD *)(v88 + 8 * v47);
            if (!v46)
            {
              while (1)
              {
                v45 = v47 + 1;
                if (__OFADD__(v47, 1))
                  break;
                if (v45 >= v89)
                {
                  v93 = v79;
                  goto LABEL_25;
                }
                v46 = *(_QWORD *)(v88 + 8 * v45);
                ++v47;
                if (v46)
                  goto LABEL_11;
              }
              __break(1u);
              return;
            }
LABEL_14:
            v45 = v47;
LABEL_11:
            v19 = (v46 - 1) & v46;
            v39 = __clz(__rbit64(v46)) + (v45 << 6);
            v93 = v45;
            goto LABEL_7;
          }
        }
      }
    }
LABEL_25:
    v48 = sub_100006DF4(&qword_10028F210);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v10, 1, 1, v48);
    v19 = 0;
  }
  __break(1u);
LABEL_33:
  swift_once(&qword_10028A438, sub_100120FEC);
LABEL_28:
  v50 = type metadata accessor for Logger(0);
  sub_10000F66C(v50, (uint64_t)qword_1002AA3B0);
  v51 = v80;
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.info.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    v54 = swift_slowAlloc(24, -1);
    v55 = swift_slowAlloc(32, -1);
    aBlock._countAndFlagsBits = v55;
    *(_DWORD *)v54 = 67109634;
    LODWORD(v96) = objc_msgSend(v51, "isConfident");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 4, v54 + 4);
    *(_WORD *)(v54 + 8) = 1024;
    LODWORD(v96) = objc_msgSend(v51, "isFinal");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, (char *)&v96 + 4, v54 + 10);
    *(_WORD *)(v54 + 14) = 2082;
    v56 = objc_msgSend(v51, "dominantLanguage");
    v57 = v91;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v56);

    v59 = Locale.ltIdentifier.getter(v58);
    v61 = v60;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v57, v95);
    v96 = sub_1001A7FE4(v59, v61, &aBlock._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &aBlock, v54 + 16);

    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "LID result (confident: %{BOOL}d, final: %{BOOL}d): %{public}s", (uint8_t *)v54, 0x18u);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {

  }
  v62 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v63 = (void *)static OS_dispatch_queue.main.getter(v62);
  v64 = swift_allocObject(&unk_100266EB8, 32, 7);
  v65 = v81;
  *(_QWORD *)(v64 + 16) = v81;
  *(_QWORD *)(v64 + 24) = v51;
  v100 = sub_100082644;
  v101 = v64;
  aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  v98 = sub_100075908;
  v99 = &unk_100266ED0;
  v66 = _Block_copy(&aBlock);
  v67 = v101;
  v68 = v51;
  v69 = v65;
  v70 = swift_release(v67);
  v71 = v82;
  static DispatchQoS.unspecified.getter(v70);
  aBlock._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
  v72 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v73 = sub_100006DF4(&qword_10028AC30);
  v74 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  v75 = v85;
  v76 = v73;
  v77 = v87;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v76, v74, v87, v72);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v71, v75, v66);
  _Block_release(v66);

  (*(void (**)(char *, uint64_t))(v86 + 8))(v75, v77);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v71, v84);
}

void sub_10007EEF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void (*v4)(uint64_t);
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData);
  if (v2)
  {
    v4 = *(void (**)(uint64_t))((swift_isaMask & *v2) + 0xD8);
    v5 = v2;
    v4(a2);

  }
  sub_10007AAE4();
}

id sub_10007EFBC(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  unsigned int v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  id result;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t aBlock[5];
  uint64_t v60;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v57 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v56 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  __chkstk_darwin(v6);
  v53 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v12 = type metadata accessor for Logger(0);
  sub_10000F66C(v12, (uint64_t)qword_1002AA440);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  v16 = &selRef_scribbleInteractionDidFinishWriting_;
  if (os_log_type_enabled(v14, v15))
  {
    v17 = swift_slowAlloc(34, -1);
    v52 = v4;
    v18 = v17;
    v50 = swift_slowAlloc(64, -1);
    aBlock[0] = v50;
    *(_DWORD *)v18 = 136446979;
    v51 = v2;
    v19 = objc_msgSend(v13, "locale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v21 = Locale.ltIdentifier.getter(v20);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v58 = sub_1001A7FE4(v21, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock, v18 + 4);

    *(_QWORD *)&v24 = swift_bridgeObjectRelease(v23).n128_u64[0];
    *(_WORD *)(v18 + 12) = 1024;
    LODWORD(v21) = objc_msgSend(v13, "isStable", v24);

    LODWORD(v58) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 4, v18 + 14);

    *(_WORD *)(v18 + 18) = 1024;
    v25 = objc_msgSend(v13, "isFinal");

    LODWORD(v58) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, (char *)&v58 + 4, v18 + 20);

    *(_WORD *)(v18 + 24) = 2085;
    v26 = objc_msgSend(v13, "bestTranscription");
    v27 = objc_msgSend(v26, "formattedString");

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v31 = v28;
    v2 = v51;
    v58 = sub_1001A7FE4(v31, v30, aBlock);
    v16 = &selRef_scribbleInteractionDidFinishWriting_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock, v18 + 26);

    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Speech result (locale: %{public}s, isStable: %{BOOL}d, final: %{BOOL}d): %{sensitive}s", (uint8_t *)v18, 0x22u);
    v32 = v50;
    swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v33 = v18;
    v4 = v52;
    swift_slowDealloc(v33, -1, -1);

    v34 = &selRef_scribbleInteractionDidFinishWriting_;
  }
  else
  {

    v34 = &selRef_scribbleInteractionDidFinishWriting_;
  }
  if ((objc_msgSend(v13, v16[386]) & 1) != 0 || (result = objc_msgSend(v13, v34[385]), (_DWORD)result))
  {
    v36 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    v37 = (void *)static OS_dispatch_queue.main.getter(v36);
    v38 = swift_allocObject(&unk_100266E68, 32, 7);
    *(_QWORD *)(v38 + 16) = v2;
    *(_QWORD *)(v38 + 24) = v13;
    aBlock[4] = (uint64_t)sub_1000825F4;
    v60 = v38;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100075908;
    aBlock[3] = (uint64_t)&unk_100266E80;
    v39 = _Block_copy(aBlock);
    v40 = v60;
    v41 = v13;
    v42 = v2;
    v43 = swift_release(v40);
    v44 = v53;
    static DispatchQoS.unspecified.getter(v43);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    v45 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v46 = sub_100006DF4(&qword_10028AC30);
    v47 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
    v48 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v46, v47, v4, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v48, v39);
    _Block_release(v39);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v48, v4);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v44, v55);
  }
  return result;
}

void sub_10007F530(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void (*v4)(_QWORD *);
  _QWORD *v5;
  id v6;
  _QWORD v7[5];

  v2 = *(_QWORD **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData);
  if (v2)
  {
    v7[3] = sub_10000A05C(0, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr);
    v7[4] = sub_100065E60(&qword_10028F1F0, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
    v7[0] = a2;
    v4 = *(void (**)(_QWORD *))((swift_isaMask & *v2) + 0xE0);
    v5 = v2;
    v6 = a2;
    v4(v7);

    sub_100009C08(v7);
  }
  sub_10007AAE4();
}

uint64_t sub_10007F658(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)();
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 aBlock;
  __int128 v68;
  void (*v69)();
  uint64_t v70;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v64 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  __chkstk_darwin(v6);
  v61 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "translations");
  v13 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  v15 = sub_10012542C(v14);
  swift_bridgeObjectRelease(v14);
  if (*(_QWORD *)(v15 + 16))
  {
    sub_100023AB0(v15 + 32, (uint64_t)&aBlock);
    swift_bridgeObjectRelease(v15);
    v16 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v17 = v69;
      sub_100023AF4(&aBlock, *((uint64_t *)&v68 + 1));
      v18 = dispatch thunk of FormattedString.formattedString.getter(v16, *((_QWORD *)v17 + 2));
      v20 = v19;
      sub_100009C08(&aBlock);
      goto LABEL_6;
    }
  }
  else
  {
    v69 = 0;
    aBlock = 0u;
    v68 = 0u;
    swift_bridgeObjectRelease(v15);
  }
  sub_10000A020((uint64_t)&aBlock, &qword_100296440);
  v18 = 0;
  v20 = 0;
LABEL_6:
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v21 = type metadata accessor for Logger(0);
  sub_10000F66C(v21, (uint64_t)qword_1002AA338);
  swift_bridgeObjectRetain(v20);
  v22 = a1;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter(v23);
  v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    v26 = swift_slowAlloc(28, -1);
    v59 = v2;
    v27 = v26;
    v58 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v58;
    *(_DWORD *)v27 = 136446723;
    v56 = v18;
    v28 = objc_msgSend(v22, "locale");
    v57 = v25;
    v29 = v28;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v28);

    v31 = Locale.ltIdentifier.getter(v30);
    v60 = v4;
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v66 = sub_1001A7FE4(v31, v33, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &aBlock, v27 + 4);

    *(_QWORD *)&v34 = swift_bridgeObjectRelease(v33).n128_u64[0];
    *(_WORD *)(v27 + 12) = 1024;
    v35 = objc_msgSend(v22, "isFinal", v34);

    LODWORD(v66) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v27 + 14);

    *(_WORD *)(v27 + 18) = 2085;
    if (v20)
      v36 = v56;
    else
      v36 = 7104878;
    if (v20)
      v37 = v20;
    else
      v37 = 0xE300000000000000;
    swift_bridgeObjectRetain(v20);
    v66 = sub_1001A7FE4(v36, v37, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &aBlock, v27 + 20);
    swift_bridgeObjectRelease_n(v20, 2);
    v38 = v37;
    v4 = v60;
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v57, "Got translation result; locale: %{public}s; final: %{BOOL}d; formattedResult: %{sensitive}s",
      (uint8_t *)v27,
      0x1Cu);
    v39 = v58;
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v40 = v27;
    v2 = v59;
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
  }
  v41 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v42 = (void *)static OS_dispatch_queue.main.getter(v41);
  v43 = swift_allocObject(&unk_100266E18, 32, 7);
  *(_QWORD *)(v43 + 16) = v2;
  *(_QWORD *)(v43 + 24) = v22;
  v69 = sub_1000825EC;
  v70 = v43;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v68 = sub_100075908;
  *((_QWORD *)&v68 + 1) = &unk_100266E30;
  v44 = _Block_copy(&aBlock);
  v45 = v70;
  v46 = v22;
  v47 = v2;
  v48 = swift_release(v45);
  v49 = v61;
  static DispatchQoS.unspecified.getter(v48);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  v50 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v51 = sub_100006DF4(&qword_10028AC30);
  v52 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  v53 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v51, v52, v4, v50);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v53, v44);
  _Block_release(v44);

  (*(void (**)(char *, uint64_t))(v65 + 8))(v53, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v49, v63);
}

void sub_10007FC14(uint64_t a1, void *a2)
{
  _QWORD *v2;
  void (*v4)(_QWORD *);
  _QWORD *v5;
  id v6;
  _QWORD v7[5];

  v2 = *(_QWORD **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData);
  if (v2)
  {
    v7[3] = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
    v7[4] = sub_100065E60((unint64_t *)&qword_10028F188, &qword_10028F180, _LTTranslationResult_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationResult);
    v7[0] = a2;
    v4 = *(void (**)(_QWORD *))((swift_isaMask & *v2) + 0xE8);
    v5 = v2;
    v6 = a2;
    v4(v7);

    sub_100009C08(v7);
  }
  sub_10007AAE4();
}

uint64_t sub_10007FD3C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_100266DC8, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v1;
  aBlock[4] = sub_1000825E4;
  v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100266DE0;
  v13 = _Block_copy(aBlock);
  v14 = v24;
  swift_errorRetain(a1);
  v15 = v2;
  v16 = swift_release(v14);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100006DF4(&qword_10028AC30);
  v19 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v21);
}

void sub_10007FF54(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char v25;
  NSObject *v26;
  _BYTE v27[40];

  if (a1)
    v3 = (void *)_convertErrorToNSError(_:)(a1);
  else
    v3 = 0;
  KeyPath = swift_getKeyPath(&unk_1001EB1F8);
  v5 = swift_getKeyPath(&unk_1001EB220);
  static Published.subscript.getter(&v26, a2, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  sub_1000821AC((uint64_t)&v26, (uint64_t)&v22);
  if (v25 == 4)
  {
    sub_1000758CC((uint64_t)&v22);
  }
  else if (v25 != 5
         || (v22 & 0xFFFFFFFFFFFFFFFELL) != 2
         || (v6 = vorrq_s8(v23, v24),
             *(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL))))
  {
    sub_1000758CC((uint64_t)&v22);
    sub_1000758CC((uint64_t)&v26);
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v7 = type metadata accessor for Logger(0);
    sub_10000F66C(v7, (uint64_t)qword_1002AA338);
    v8 = v3;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      if (v3)
      {
        v26 = v8;
        v13 = v8;
      }
      else
      {
        v26 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v11 + 4);
      *v12 = v3;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Translation finished with error: %@", v11, 0xCu);
      v21 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v12, 1, v21);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {

      v9 = v8;
    }

    sub_100079BF0(0, v3, 0);
    goto LABEL_26;
  }
  sub_1000758CC((uint64_t)&v26);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v14 = type metadata accessor for Logger(0);
  sub_10000F66C(v14, (uint64_t)qword_1002AA338);
  v15 = v3;
  v8 = Logger.logObject.getter(v15);
  v16 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 138412290;
    if (v3)
    {
      v26 = v15;
      v19 = v15;
    }
    else
    {
      v26 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v17 + 4);
    *v18 = v3;

    _os_log_impl((void *)&_mh_execute_header, v8, v16, "Translation finished with error, but it's not a final translation: %@", v17, 0xCu);
    v20 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v18, 1, v20);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    v8 = v15;
  }
LABEL_26:

}

ValueMetadata *type metadata accessor for ConversationOptions()
{
  return &type metadata for ConversationOptions;
}

unint64_t sub_100080438()
{
  unint64_t result;

  result = qword_10028F140;
  if (!qword_10028F140)
  {
    result = swift_getWitnessTable(&unk_1001EAEF4, &type metadata for ConversationOptions);
    atomic_store(result, (unint64_t *)&qword_10028F140);
  }
  return result;
}

unint64_t sub_100080480()
{
  unint64_t result;

  result = qword_10028F148;
  if (!qword_10028F148)
  {
    result = swift_getWitnessTable(&unk_1001EAEC4, &type metadata for ConversationOptions);
    atomic_store(result, (unint64_t *)&qword_10028F148);
  }
  return result;
}

unint64_t sub_1000804C8()
{
  unint64_t result;

  result = qword_10028F150;
  if (!qword_10028F150)
  {
    result = swift_getWitnessTable(&unk_1001EAF1C, &type metadata for ConversationOptions);
    atomic_store(result, (unint64_t *)&qword_10028F150);
  }
  return result;
}

unint64_t sub_100080510()
{
  unint64_t result;

  result = qword_10028F158;
  if (!qword_10028F158)
  {
    result = swift_getWitnessTable(&unk_1001EAF54, &type metadata for ConversationOptions);
    atomic_store(result, (unint64_t *)&qword_10028F158);
  }
  return result;
}

void sub_100080554(_BYTE *a1, void **a2)
{
  void *v2;
  Class isa;
  NSString v4;

  v2 = *a2;
  if (*a1 == 2)
    isa = 0;
  else
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", isa, v4);
  swift_unknownObjectRelease(isa);

}

uint64_t sub_1000805DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EB1F8);
  v5 = swift_getKeyPath(&unk_1001EB220);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100080644(uint64_t a1, void **a2)
{
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  _BYTE v7[48];
  _BYTE v8[48];

  sub_1000821AC(a1, (uint64_t)v8);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EB1F8);
  v5 = swift_getKeyPath(&unk_1001EB220);
  sub_1000821AC((uint64_t)v8, (uint64_t)v7);
  static Published.subscript.setter(v7, v3, KeyPath, v5);
  return sub_1000758CC((uint64_t)v8);
}

double sub_1000806C8@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EB168);
  v5 = swift_getKeyPath(&unk_1001EB190);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_100080744(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  if (!v2)
  {
    KeyPath = swift_getKeyPath(&unk_1001EB1B0);
    v6 = swift_getKeyPath(&unk_1001EB1D8);
    v10[0] = 0;
    static Published.subscript.setter(v10, v4, KeyPath, v6);
  }
  v7 = swift_getKeyPath(&unk_1001EB168);
  v8 = swift_getKeyPath(&unk_1001EB190);
  v10[0] = v3;
  v10[1] = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(v10, v4, v7, v8);
}

uint64_t sub_100080800@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EB1B0);
  v5 = swift_getKeyPath(&unk_1001EB1D8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10008087C(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EB1B0);
  v5 = swift_getKeyPath(&unk_1001EB1D8);
  v8 = v2;
  v6 = v2;
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_1000808EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_100080954(_QWORD *a1)
{
  return sub_1001A7A50(0, a1[2], 0, a1);
}

uint64_t sub_100080968(unint64_t a1)
{
  return sub_1001A7B78(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10008097C(unint64_t a1)
{
  return sub_1001A7FD0(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void (*sub_100080990(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100080A90(v6, a2, a3);
  return sub_1000809E4;
}

void (*sub_1000809E8(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100080B04(v6, a2, a3);
  return sub_1000809E4;
}

void (*sub_100080A3C(void (**a1)(id *), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100080B70(v6, a2, a3);
  return sub_1000809E4;
}

void (*sub_100080A90(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for StaticImage;
  }
  __break(1u);
  return result;
}

void destroy for StaticImage(id *a1)
{

}

uint64_t *sub_100080B04(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for BroadcastPresentation;
  }
  __break(1u);
  return result;
}

void (*sub_100080B70(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return j__s17SequoiaTranslator11StaticImageOwxx;
  }
  __break(1u);
  return result;
}

uint64_t sub_100080BDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void (*v29)(_QWORD *, _QWORD);
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  _QWORD v51[5];

  v10 = type metadata accessor for StoredSpeechResult(0);
  v51[3] = v10;
  v51[4] = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  v11 = sub_1000122F8(v51);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v11, a3, v10);
  v50[3] = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
  v50[4] = sub_100065E60((unint64_t *)&qword_10028F188, &qword_10028F180, _LTTranslationResult_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationResult);
  v50[0] = a4;
  KeyPath = swift_getKeyPath(&unk_1001EB090);
  v13 = swift_getKeyPath(&unk_1001EB0B8);
  v14 = a4;
  static Published.subscript.getter(v47, a5, KeyPath);
  swift_release(KeyPath);
  swift_release(v13);
  v15 = v47[0];
  swift_bridgeObjectRetain(a2);
  v16 = sub_10003E0F4(v15, a1, a2);
  LOBYTE(KeyPath) = v17;
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(a2);
  if ((KeyPath & 1) != 0)
    goto LABEL_23;
  v18 = swift_getKeyPath(&unk_1001EB090);
  v19 = swift_getKeyPath(&unk_1001EB0B8);
  static Published.subscript.getter(v47, a5, v18);
  swift_release(v18);
  result = swift_release(v19);
  v21 = v47[0];
  if ((v47[0] & 0xC000000000000001) != 0)
  {
    v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v47[0]);
    goto LABEL_6;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v16 >= *(_QWORD *)((v47[0] & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v22 = *(id *)(v47[0] + 8 * v16 + 32);
LABEL_6:
  v23 = v22;
  swift_bridgeObjectRelease(v21);
  sub_100023AB0((uint64_t)v51, (uint64_t)v47);
  dispatch thunk of PersistedTranslation.speechResult.setter(v47);
  sub_100023AB0((uint64_t)v50, (uint64_t)v47);
  dispatch thunk of PersistedTranslation.translationResult.setter(v47);
  sub_100023AB0(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v47);
  v24 = v48;
  v25 = v49;
  sub_100023AF4(v47, v48);
  dispatch thunk of TranslationStore.save()(v24, v25);
  sub_100009C08(v47);
  v26 = swift_getKeyPath(&unk_1001EB090);
  v27 = swift_getKeyPath(&unk_1001EB0B8);
  v28 = v23;
  v29 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v47, a5, v26, v27);
  v31 = v30;
  v32 = *v30;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v30);
  *v31 = v32;
  if (!(_DWORD)result || v32 < 0 || (v32 & 0x4000000000000000) != 0)
  {
    result = sub_1000808EC(v32);
    v32 = result;
    *v31 = result;
  }
  if ((v16 & 0x8000000000000000) != 0)
    goto LABEL_27;
  if (v16 < *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v33 = *(void **)((v32 & 0xFFFFFFFFFFFFFF8) + 8 * v16 + 0x20);
    *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 8 * v16 + 0x20) = v28;

    specialized Array._endMutation()(v34);
    v29(v47, 0);
    swift_release(v26);
    swift_release(v27);
    v35 = OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation;
    v36 = *(void **)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation);
    if (v36)
    {
      v37 = objc_msgSend(v36, "identifier");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

    }
    else
    {
      v38 = 0;
      v40 = 0;
    }
    v41 = objc_msgSend(v28, "identifier");
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

    if (v40)
    {
      if (v38 == v42 && v40 == v44)
      {
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v44);
      }
      else
      {
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v42, v44, 0);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v44);
        if ((v45 & 1) == 0)
        {

          goto LABEL_23;
        }
      }
      v46 = *(void **)(a5 + v35);
      *(_QWORD *)(a5 + v35) = v28;

    }
    else
    {

      swift_bridgeObjectRelease(v44);
    }
LABEL_23:
    sub_100009C08(v51);
    return sub_100009C08(v50);
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL sub_100080FF8()
{
  id v0;
  void *v1;
  id v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v0 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (v0)
  {
    v1 = v0;
    v2 = MCFeatureAssistantProfanityFilterForced;
    v3 = objc_msgSend(v1, "effectiveBoolValueForSetting:", v2);

    return v3 == 1;
  }
  else
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA440);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "MCProfileConnection cannot be established", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    return 0;
  }
}

uint64_t sub_100081130()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void sub_10008116C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10007CB60(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(NSObject **)(v2 + 56));
}

uint64_t sub_10008117C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008118C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100081194()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 72, 7);
}

void sub_1000811D8()
{
  uint64_t v0;

  sub_10007D020(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void **)(v0 + 64));
}

uint64_t sub_1000811F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSString v16;
  id v17;
  uint64_t v19;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v19 - v6;
  v8 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v5);
  dispatch thunk of PersistedTranslation.targetLocale.getter(v8);
  v9 = static Locale.== infix(_:_:)(v7, v4);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v11 = ((uint64_t (*)(char *, uint64_t))v10)(v7, v0);
  if ((v9 & 1) != 0)
    return dispatch thunk of PersistedTranslation.displaySourceText.getter(v11);
  v12 = dispatch thunk of PersistedTranslation.displayText.getter(v11);
  v14 = v13;
  if (sub_100080FF8())
  {
    v15 = (void *)objc_opt_self(_LTTextToSpeechSanitizer);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    v17 = objc_msgSend(v15, "stringReplacingRedactionsWithBeepMarker:", v16);

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  }
  return v12;
}

uint64_t sub_100081344(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

id sub_10008137C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  _BYTE v24[48];

  v2 = type metadata accessor for Locale(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v24[-v6];
  sub_1000821AC(a1, (uint64_t)v24);
  v8 = (void *)objc_opt_self(NSUserDefaults);
  v9 = objc_msgSend(v8, "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "stringForKey:", v10);

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = 0xE500000000000000;
    v12 = 0x53555F6E65;
  }
  Locale.init(identifier:)(v12, v14);
  v15 = objc_msgSend(v8, "standardUserDefaults");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "stringForKey:", v16);

  if (v17)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

  }
  else
  {
    v20 = 0xE500000000000000;
    v18 = 0x53455F7365;
  }
  Locale.init(identifier:)(v18, v20);
  v21 = objc_allocWithZone((Class)type metadata accessor for ConversationManager(0));
  v22 = sub_100076BF4((uint64_t)v24, v7, v5);
  sub_1000758CC(a1);
  return v22;
}

void sub_100081594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  char *v24;
  char **v25;
  id v26;
  uint64_t v27;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  double v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char **v94;
  _QWORD *v95;
  id v96;
  uint64_t v97;
  id v98;
  uint64_t aBlock[3];
  void *v100;
  void (*v101)();
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char **)((char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Notification.object.getter(aBlock, v10);
  if (!v100)
  {
    v23 = aBlock;
LABEL_8:
    sub_10000A020((uint64_t)v23, (uint64_t *)&unk_10028C0B0);
    return;
  }
  v13 = sub_10000A05C(0, &qword_10028F218, AVAudioSession_ptr);
  if ((swift_dynamicCast(&v105, aBlock, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
    return;
  v97 = v9;
  v14 = v3;
  v15 = v0;
  v16 = (void *)v105;
  v17 = Notification.userInfo.getter();
  if (!v17)
  {

    return;
  }
  v18 = v17;
  v98 = v16;
  v103 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionRouteChangeReasonKey);
  v104 = v19;
  AnyHashable.init<A>(_:)(aBlock, &v103, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v18 + 16))
  {
    v20 = sub_1001A87EC((uint64_t)aBlock);
    v21 = v15;
    if ((v22 & 1) != 0)
    {
      sub_10000A0EC(*(_QWORD *)(v18 + 56) + 32 * v20, (uint64_t)&v105);
    }
    else
    {
      v105 = 0u;
      v106 = 0u;
    }
  }
  else
  {
    v105 = 0u;
    v106 = 0u;
    v21 = v15;
  }
  v24 = v14;
  swift_bridgeObjectRelease(v18);
  sub_10005DEC0((uint64_t)aBlock);
  if (!*((_QWORD *)&v106 + 1))
  {

    v23 = (uint64_t *)&v105;
    goto LABEL_8;
  }
  v25 = v7;
  if ((swift_dynamicCast(&v103, &v105, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) == 0)
  {

    return;
  }
  v91 = v24;
  v92 = v5;
  v93 = v4;
  v90 = v1;
  v26 = objc_msgSend(v98, "currentRoute");
  v27 = swift_allocObject(&unk_100266FA8, 24, 7);
  *(_QWORD *)(v27 + 16) = &_swiftEmptyDictionarySingleton;
  isa = UInt._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  aBlock[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v27 + 16) = 0x8000000000000000;
  sub_1001AAA14((uint64_t)isa, 0x6E6F73616572, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  v95 = (_QWORD *)(v27 + 16);
  *(_QWORD *)(v27 + 16) = aBlock[0];
  *(_QWORD *)&v30 = swift_bridgeObjectRelease(0x8000000000000000).n128_u64[0];
  v96 = v26;
  v31 = objc_msgSend(v26, "outputs", v30);
  v32 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);

  if ((unint64_t)v33 >> 62)
  {
    if (v33 < 0)
      v58 = v33;
    else
      v58 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v33);
    v34 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease(v33);
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v94 = v7;
  if (v34)
  {
    v89 = v27;
    if ((v33 & 0xC000000000000001) != 0)
    {
      v35 = v21;
      v36 = v32;
      v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v33);
    }
    else
    {
      if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_48;
      }
      v35 = v21;
      v36 = v32;
      v37 = *(id *)(v33 + 32);
    }
    v38 = v37;
    v25 = &selRef_scribbleInteractionDidFinishWriting_;
    v39 = objc_msgSend(v37, "portType", swift_bridgeObjectRelease(v33).n128_f64[0]);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v41 = v40;

    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    v43 = v95;
    v44 = *v95;
    v45 = swift_isUniquelyReferenced_nonNull_native(*v95);
    aBlock[0] = v44;
    *v43 = 0x8000000000000000;
    sub_1001AAA14((uint64_t)v42, 0x74757074756FLL, 0xE600000000000000, v45);
    *v43 = aBlock[0];

    v46 = swift_bridgeObjectRelease(0x8000000000000000).n128_u64[0];
    v32 = v36;
    v21 = v35;
    v27 = v89;
  }
  else
  {
    v25 = &selRef_scribbleInteractionDidFinishWriting_;
    v46 = swift_bridgeObjectRelease(v33).n128_u64[0];
  }
  v47 = objc_msgSend(v96, "inputs", *(double *)&v46);
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v32);

  if (!((unint64_t)v33 >> 62))
  {
    if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_26;
LABEL_38:
    v57 = v33;
    goto LABEL_39;
  }
  if (v33 < 0)
    v59 = v33;
  else
    v59 = v33 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v33);
  v60 = _CocoaArrayWrapper.endIndex.getter(v59);
  swift_bridgeObjectRelease(v33);
  if (!v60)
    goto LABEL_38;
LABEL_26:
  if ((v33 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v48 = *(id *)(v33 + 32);
    goto LABEL_29;
  }
LABEL_48:
  v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v33);
LABEL_29:
  v49 = v48;
  v50 = objc_msgSend(v48, v25[401], swift_bridgeObjectRelease(v33).n128_f64[0]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  v52 = v51;

  v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52);
  v54 = v95;
  v55 = *v95;
  v56 = swift_isUniquelyReferenced_nonNull_native(*v95);
  aBlock[0] = v55;
  *v54 = 0x8000000000000000;
  sub_1001AAA14((uint64_t)v53, 0x7475706E69, 0xE500000000000000, v56);
  *v54 = aBlock[0];

  v57 = 0x8000000000000000;
LABEL_39:
  swift_bridgeObjectRelease(v57);
  v61 = v94;
  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v89 = v21;
  v62 = type metadata accessor for Logger(0);
  sub_10000F66C(v62, (uint64_t)qword_1002AA4A0);
  v63 = swift_retain_n(v27, 2);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.info.getter(v64);
  v88 = v64;
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    aBlock[0] = swift_slowAlloc(32, -1);
    v67 = aBlock[0];
    *(_DWORD *)v66 = 136446210;
    v87 = v66 + 4;
    swift_beginAccess(v95, &v105, 0, 0);
    v68 = *(_QWORD *)(v27 + 16);
    v69 = sub_10000A05C(0, (unint64_t *)&qword_1002930B0, NSObject_ptr);
    swift_bridgeObjectRetain(v68);
    v71 = Dictionary.description.getter(v70, &type metadata for String, v69, &protocol witness table for String);
    v73 = v72;
    swift_bridgeObjectRelease(v68);
    v103 = (_QWORD *)sub_1001A7FE4(v71, v73, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v87);
    swift_release_n(v27, 2);
    swift_bridgeObjectRelease(v73);
    v74 = v88;
    _os_log_impl((void *)&_mh_execute_header, v88, v65, "Audio route change %{public}s", v66, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    v75 = v67;
    v61 = v94;
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v66, -1, -1);

  }
  else
  {

    swift_release_n(v27, 2);
  }
  v76 = v90;
  sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v77 = v97;
  (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v12, enum case for DispatchQoS.QoSClass.utility(_:), v8);
  v78 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v12, v8);
  v101 = sub_1000826E4;
  v102 = v27;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100075908;
  v100 = &unk_100266FC0;
  v79 = _Block_copy(aBlock);
  swift_retain(v27);
  static DispatchQoS.unspecified.getter(v80);
  v103 = _swiftEmptyArrayStorage;
  v81 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v82 = sub_100006DF4(&qword_10028AC30);
  v83 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  v84 = v91;
  v85 = v89;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v82, v83, v89, v81);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v61, v84, v79);

  _Block_release(v79);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v84, v85);
  (*(void (**)(char **, uint64_t))(v92 + 8))(v61, v93);
  v86 = v102;
  swift_release(v27);
  swift_release(v86);
}

void *sub_100081F00(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = v3;
  v7 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    v23 = v4;
    v24 = v7;
    v25 = v7 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v9 = v4 - 4;
      if (!v25)
        break;
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v7);
      v11 = v4 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_20;
LABEL_9:
      v12 = v8;
      v13 = v10;
      v14 = a3;
      v15 = objc_msgSend(v10, "identifier", v23);
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      a3 = v14;
      v19 = v16 == a2 && v18 == v14;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
LABEL_19:
        swift_bridgeObjectRelease(a3);
        return v13;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a2, v14, 0);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        a3 = v24;
        goto LABEL_19;
      }

      ++v4;
      v8 = v12;
      v19 = v11 == v12;
      v7 = v24;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
        return 0;
      }
    }
    v10 = *(id *)(v7 + 8 * v4);
    v11 = v4 - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_9;
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0)
      v21 = v7;
    else
      v21 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  swift_bridgeObjectRelease(v7);
  return 0;
}

uint64_t sub_1000820BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000820E8(uint64_t a1)
{
  uint64_t v1;

  return sub_10007D470(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000820F0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100082124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10028F19C);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10001D380;
  *(_QWORD *)(v3 + 168) = v2;
  *(_OWORD *)(v3 + 152) = v5;
  return swift_task_switch(sub_10007DE68, 0, 0);
}

uint64_t sub_100082194(uint64_t a1)
{
  uint64_t v1;

  return sub_1001488A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000821AC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ConversationState(a2, a1);
  return a2;
}

uint64_t sub_1000821E8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10008221C()
{
  uint64_t v0;

  sub_10007D690(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100082228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000822A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Locale(0) - 8) + 80);
  return sub_10007BF78(a1, a2, a3, *(void **)(v3 + 16), *(void **)(v3 + 24), v3 + ((v7 + 32) & ~v7));
}

uint64_t sub_1000822FC(_QWORD *a1)
{
  uint64_t v1;

  return sub_100083F54(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_100082318()
{
  sub_100079BF0(0, 0, 0);
}

uint64_t sub_100082344()
{
  uint64_t v0;

  sub_100009C08((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100082370()
{
  uint64_t v0;

  sub_10007CA60(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_10008237C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000823A8()
{
  uint64_t v0;

  sub_10007CA1C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000823B0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v8 = type metadata accessor for Logger(0);
  sub_10000F66C(v8, (uint64_t)qword_1002AA440);
  swift_bridgeObjectRetain_n(a2, 2);
  v9 = swift_bridgeObjectRetain_n(a4, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v15 = v13;
    *(_DWORD *)v12 = 136643075;
    swift_bridgeObjectRetain(a2);
    v14 = sub_1001A7FE4(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v12 + 12) = 2082;
    swift_bridgeObjectRetain(a4);
    v14 = sub_1001A7FE4(a3, a4, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 14);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Preparing accessibility announcement notification using text: '%{sensitive}s' for locale: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
}

uint64_t sub_1000825B8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000825E4()
{
  uint64_t v0;

  sub_10007FF54(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000825EC()
{
  uint64_t v0;

  sub_10007FC14(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1000825F4()
{
  uint64_t v0;

  sub_10007F530(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000825FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028F1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100082644()
{
  uint64_t v0;

  sub_10007EEF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10008264C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100082670()
{
  uint64_t v0;

  sub_10007E5C8(*(char **)(v0 + 16));
}

uint64_t sub_100082680(_QWORD *a1)
{
  uint64_t v1;

  return sub_100083E90(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10008269C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000840A8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1000826C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000826E4()
{
  uint64_t v0;

  sub_100077670(v0);
}

void sub_1000826EC(void **a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  NSString v4;

  v3 = *a1;
  v4 = String._bridgeToObjectiveC()();
  LOBYTE(v3) = objc_msgSend(v3, "BOOLForKey:", v4);

  *a2 = (_BYTE)v3;
}

uint64_t sub_100082758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000827A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000070BC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000827E0(_QWORD *a1)
{
  return sub_100082680(a1) & 1;
}

uint64_t destroy for ConversationPlayButton(_QWORD *a1)
{
  swift_release(a1[2]);
  swift_release(a1[5]);
  swift_release(a1[6]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for ConversationPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for ConversationPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for ConversationPlayButton(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ConversationPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(*(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v6);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationPlayButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationPlayButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationPlayButton()
{
  return &type metadata for ConversationPlayButton;
}

uint64_t sub_100082B54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100211AE0, 1);
}

uint64_t sub_100082B64@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v5 = sub_100006DF4(&qword_10028F288);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = sub_100006DF4(&qword_10028F290);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v31 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v31 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v31 - v21;
  v23 = *a1;
  if ((*a1 & 1) != 0 || a1[24] != 1)
  {
    v25 = sub_100006DF4(&qword_10028F298);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  }
  else
  {
    sub_100082E64(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
    v24 = sub_100006DF4(&qword_10028F298);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v22, 0, 1, v24);
  }
  v26 = sub_100006DF4(&qword_10028F2A0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v10, v32, v26);
  *(_QWORD *)&v10[*(int *)(v5 + 36)] = 0x3FF0000000000000;
  if ((v23 & 1) != 0 || (a1[24] & 1) != 0)
  {
    v27 = sub_100006DF4(&qword_10028F298);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 1, 1, v27);
  }
  else
  {
    sub_100082E64(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
    v28 = sub_100006DF4(&qword_10028F298);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v20, 0, 1, v28);
  }
  sub_10000B074((uint64_t)v22, (uint64_t)v17, &qword_10028F290);
  sub_10000B074((uint64_t)v10, (uint64_t)v8, &qword_10028F288);
  sub_10000B074((uint64_t)v20, (uint64_t)v14, &qword_10028F290);
  sub_10000B074((uint64_t)v17, a3, &qword_10028F290);
  v29 = sub_100006DF4(&qword_10028F2A8);
  sub_10000B074((uint64_t)v8, a3 + *(int *)(v29 + 48), &qword_10028F288);
  sub_10000B074((uint64_t)v14, a3 + *(int *)(v29 + 64), &qword_10028F290);
  sub_10000A020((uint64_t)v20, &qword_10028F290);
  sub_10000A020((uint64_t)v10, &qword_10028F288);
  sub_10000A020((uint64_t)v22, &qword_10028F290);
  sub_10000A020((uint64_t)v14, &qword_10028F290);
  sub_10000A020((uint64_t)v8, &qword_10028F288);
  return sub_10000A020((uint64_t)v17, &qword_10028F290);
}

uint64_t sub_100082E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = *(_BYTE *)(v3 + 1);
  v7 = *(_BYTE *)(v3 + 2);
  v8 = *(_QWORD *)(v3 + 40);
  v20[0] = 0;
  swift_retain(v8);
  swift_retain(a2);
  State.init(wrappedValue:)(&v21, v20, &type metadata for CGFloat);
  v9 = v21;
  v10 = v22;
  LOBYTE(v21) = v6;
  BYTE1(v21) = v7;
  v22 = a1;
  v23 = a2;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v11 = sub_100006DF4(&qword_10028F2B0);
  Binding.projectedValue.getter(v20, v11);
  v12 = v20[0];
  v13 = v20[1];
  v14 = *(double *)&v20[2];
  v15 = (_OWORD *)swift_allocObject(&unk_1002671D8, 96, 7);
  v16 = *(_OWORD *)(v3 + 48);
  v15[3] = *(_OWORD *)(v3 + 32);
  v15[4] = v16;
  v15[5] = *(_OWORD *)(v3 + 64);
  v17 = *(_OWORD *)(v3 + 16);
  v15[1] = *(_OWORD *)v3;
  v15[2] = v17;
  sub_1000830E4((_QWORD *)v3);
  v18 = sub_100083134();
  View.bindGeometry(to:reader:)(v12, v13, sub_1000830B4, v15, &type metadata for PlayButtonAndRates, v18, v14);
  swift_release(v13);
  swift_release(v15);
  swift_release(v12);
  swift_release(v23);
  swift_release(v24);
  return swift_release(v26);
}

uint64_t sub_100082FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[4];
  __int128 v11;

  v5 = v2[3];
  v10[2] = v2[2];
  v10[3] = v5;
  v11 = v2[4];
  v6 = v2[1];
  v10[0] = *v2;
  v10[1] = v6;
  if (qword_10028A3C8 != -1)
    swift_once(&qword_10028A3C8, sub_100066350);
  v7 = *((_QWORD *)&v11 + 1);
  *(_QWORD *)a2 = qword_1002AA138;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = 0;
  v8 = sub_100006DF4(&qword_10028F280);
  return sub_100082B64((char *)v10, a1, a2 + *(int *)(v8 + 44));
}

uint64_t sub_100083078()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 96, 7);
}

double sub_1000830B4()
{
  uint64_t v0;

  return GeometryProxy.size.getter() + *(double *)(v0 + 88) + *(double *)(v0 + 88);
}

_QWORD *sub_1000830E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = a1[5];
  v4 = a1[7];
  swift_retain(a1[6]);
  swift_retain(v4);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

unint64_t sub_100083134()
{
  unint64_t result;

  result = qword_10028F2B8;
  if (!qword_10028F2B8)
  {
    result = swift_getWitnessTable(&unk_1001F3014, &type metadata for PlayButtonAndRates);
    atomic_store(result, (unint64_t *)&qword_10028F2B8);
  }
  return result;
}

unint64_t sub_10008317C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F2C0;
  if (!qword_10028F2C0)
  {
    v1 = sub_1000070BC(&qword_10028F2C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F2C0);
  }
  return result;
}

void destroy for ConversationState(uint64_t a1)
{
  unsigned int v2;
  void *v3;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 5)
    v2 = *(_DWORD *)a1 + 5;
  switch(v2)
  {
    case 0u:
    case 2u:
    case 4u:
      v3 = *(void **)a1;
      goto LABEL_6;
    case 1u:

      v3 = *(void **)(a1 + 8);
LABEL_6:

      break;
    case 3u:
      sub_100009C08((_QWORD *)a1);
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for ConversationState(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  __int128 v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  __int128 v11;
  id v12;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 5)
    v3 = *(_DWORD *)a2 + 5;
  switch(v3)
  {
    case 0u:
      v4 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      goto LABEL_11;
    case 1u:
      v6 = *(void **)a2;
      v7 = *(void **)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 40) = 1;
      v8 = v6;
      v9 = v7;
      return a1;
    case 2u:
      v4 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = 2;
      goto LABEL_10;
    case 3u:
      v11 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v11;
      (**(void (***)(uint64_t))(v11 - 8))(a1);
      *(_BYTE *)(a1 + 40) = 3;
      return a1;
    case 4u:
      v4 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = 4;
LABEL_10:
      *(_BYTE *)(a1 + 40) = v10;
LABEL_11:
      v12 = v4;
      break;
    default:
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for ConversationState(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    switch(v4)
    {
      case 0u:
      case 2u:
      case 4u:
        v5 = *(void **)a1;
        goto LABEL_7;
      case 1u:

        v5 = *(void **)(a1 + 8);
LABEL_7:

        break;
      case 3u:
        sub_100009C08((_QWORD *)a1);
        break;
      default:
        break;
    }
    v6 = *((unsigned __int8 *)a2 + 40);
    if (v6 >= 5)
      v6 = *(_DWORD *)a2 + 5;
    switch(v6)
    {
      case 0u:
        v7 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 40) = 0;
        goto LABEL_19;
      case 1u:
        v10 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v11 = (void *)*((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 8) = v11;
        *(_BYTE *)(a1 + 40) = 1;
        v12 = v10;
        v13 = v11;
        return a1;
      case 2u:
        v7 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v14 = 2;
        goto LABEL_18;
      case 3u:
        v15 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v15 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 3;
        return a1;
      case 4u:
        v7 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v14 = 4;
LABEL_18:
        *(_BYTE *)(a1 + 40) = v14;
LABEL_19:
        v16 = v7;
        break;
      default:
        v8 = *a2;
        v9 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v8;
        *(_OWORD *)(a1 + 16) = v9;
        break;
    }
  }
  return a1;
}

__n128 initializeWithTake for ConversationState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ConversationState(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    switch(v4)
    {
      case 0u:
      case 2u:
      case 4u:
        v5 = *(void **)a1;
        goto LABEL_7;
      case 1u:

        v5 = *(void **)(a1 + 8);
LABEL_7:

        break;
      case 3u:
        sub_100009C08((_QWORD *)a1);
        break;
      default:
        break;
    }
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 >= 5)
      v6 = *(_DWORD *)a2 + 5;
    switch(v6)
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v8 = 1;
        goto LABEL_18;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = 2;
        goto LABEL_18;
      case 3u:
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v8 = 3;
        goto LABEL_18;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = 4;
LABEL_18:
        *(_BYTE *)(a1 + 40) = v8;
        break;
      default:
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 6)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConversationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_100083654(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 5)
    return (*(_DWORD *)a1 + 5);
  return result;
}

uint64_t sub_100083670(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationState()
{
  return &type metadata for ConversationState;
}

void sub_1000836A8()
{
  uint64_t v0;
  _QWORD v1[5];

  sub_1000821AC(v0, (uint64_t)v1);
  __asm { BR              X11 }
}

uint64_t sub_1000836E0()
{
  uint64_t v1;

  sub_1000758CC((uint64_t)&v1);
  return 0x696E4920656C6449;
}

uint64_t sub_100083820(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_lid);
  swift_beginAccess(v3, v9, 33, 0);
  v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v6 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v4);
  specialized Array._endMutation()(v7);
  return swift_endAccess(v9);
}

uint64_t sub_1000838BC(_QWORD *a1)
{
  return sub_1000838F4(a1, &OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech, (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))sub_1001A78FC, (uint64_t (*)(_QWORD *, uint64_t))sub_10003E994);
}

uint64_t sub_1000838D8(_QWORD *a1)
{
  return sub_1000838F4(a1, &OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation, (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))sub_1001A7910, (uint64_t (*)(_QWORD *, uint64_t))sub_10003E994);
}

uint64_t sub_1000838F4(_QWORD *a1, _QWORD *a2, uint64_t (*a3)(BOOL, unint64_t, uint64_t, uint64_t), uint64_t (*a4)(_QWORD *, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = a1[3];
  v9 = a1[4];
  v10 = sub_100023AF4(a1, v8);
  return sub_100085EE8((uint64_t)v10, v4, v8, v9, a2, a3, a4);
}

uint64_t sub_100083950()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t result;

  v1 = *(uint64_t (**)(uint64_t))(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_completion);
  if (v1)
    return v1(v0);
  return result;
}

unint64_t sub_10008398C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v3 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
  if ((objc_msgSend(v3, "autodetectLanguage") & 1) == 0)
  {
    v12 = objc_msgSend(v3, "localePair");
    v13 = objc_msgSend(v12, "sourceLocale");

    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v14 = type metadata accessor for Locale(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 0, 1, v14);
  }
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_lid);
  swift_beginAccess(v4, v17, 0, 0);
  v5 = *v4;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v15 = v5;
    else
      v15 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (v6)
    {
LABEL_4:
      result = v6 - 1;
      if (__OFSUB__(v6, 1))
      {
        __break(1u);
      }
      else if ((v5 & 0xC000000000000001) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (result < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v8 = *(id *)(v5 + 8 * result + 32);
LABEL_9:
          v9 = v8;
          swift_bridgeObjectRelease(v5);
          if ((objc_msgSend(v9, "isFinal") & 1) != 0)
          {
            v10 = objc_msgSend(v9, "dominantLanguage");
            static Locale._unconditionallyBridgeFromObjectiveC(_:)(v10);

            v11 = type metadata accessor for Locale(0);
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 0, 1, v11);
          }

          goto LABEL_18;
        }
        __break(1u);
        return result;
      }
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v5);
      goto LABEL_9;
    }
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (v6)
      goto LABEL_4;
  }
  swift_bridgeObjectRelease(v5);
LABEL_18:
  v16 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 1, 1, v16);
}

unint64_t sub_100083BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t result;
  id v24;
  void *v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v2);
  v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10008398C((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000A020((uint64_t)v4, (uint64_t *)&unk_10028FE50);
    v31 = 0u;
    v32 = 0u;
    v33 = 0;
LABEL_7:
    sub_10000A020((uint64_t)&v31, (uint64_t *)&unk_100296450);
    v19 = 1;
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech);
  v10 = swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech, v30, 0, 0);
  v11 = *v9;
  __chkstk_darwin(v10);
  *(&v29 - 2) = (uint64_t)v8;
  swift_bridgeObjectRetain(v11);
  sub_1001708FC((uint64_t)sub_1000861A0, v11, (uint64_t)&v31);
  v12 = swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v12);
  v13 = *((_QWORD *)&v32 + 1);
  if (!*((_QWORD *)&v32 + 1))
    goto LABEL_7;
  v14 = v33;
  sub_100023AF4(&v31, *((uint64_t *)&v32 + 1));
  v15 = dispatch thunk of FormattedString.formattedString.getter(v13, *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8));
  v17 = v16;
  swift_bridgeObjectRelease(v16);
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v15 & 0xFFFFFFFFFFFFLL;
  v19 = v18 == 0;
  sub_100009C08(&v31);
LABEL_8:
  v20 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_lid);
  swift_beginAccess(v20, &v31, 0, 0);
  v21 = *v20;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v28 = v21;
    else
      v28 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v22 = _CocoaArrayWrapper.endIndex.getter(v28);
    if (v22)
    {
LABEL_10:
      result = v22 - 1;
      if (__OFSUB__(v22, 1))
      {
        __break(1u);
      }
      else if ((v21 & 0xC000000000000001) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (result < *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v24 = *(id *)(v21 + 8 * result + 32);
LABEL_15:
          v25 = v24;
          *(_QWORD *)&v26 = swift_bridgeObjectRelease(v21).n128_u64[0];
          if (!v19)
          {
            v27 = objc_msgSend(v25, "isConfident", v26);

            return v27 ^ 1;
          }

          return 0;
        }
        __break(1u);
        return result;
      }
      v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v21);
      goto LABEL_15;
    }
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v21);
    if (v22)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease(v21);
  return 0;
}

uint64_t sub_100083E90(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100023AF4(a1, v8);
  dispatch thunk of AnnotatedResult.locale.getter(v8, *(_QWORD *)(v9 + 16));
  LOBYTE(a1) = static Locale.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

uint64_t sub_100083F54(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20[-1] - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_100023AF4(a1, v11);
  v13 = dispatch thunk of SpeechResult.isFinal.getter(v11, v12);
  sub_100023AB0((uint64_t)a1, (uint64_t)v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a2, v4);
  if ((v13 & 1) != 0)
  {
    v15 = v21;
    v14 = v22;
    sub_100023AF4(v20, v21);
    dispatch thunk of AnnotatedResult.locale.getter(v15, *(_QWORD *)(v14 + 16));
    v16 = static Locale.== infix(_:_:)(v8, v10);
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
  }
  else
  {
    v16 = 0;
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  }
  v17(v10, v4);
  sub_100009C08(v20);
  return v16 & 1;
}

uint64_t sub_1000840A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100023AF4(a1, v8);
  dispatch thunk of TranslationResult.locale.getter(v8, v9);
  LOBYTE(a1) = static Locale.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

uint64_t sub_10008416C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void (*v24)(char *, uint64_t, __n128);
  id v25;
  void (*v26)(char *, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  Class isa;
  id v30;
  void (*v31)(char *, char *, uint64_t);
  unsigned int v32;
  uint64_t v33;
  char *v34;
  id v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  id v46;
  void (*v47)(char *, uint64_t, __n128);
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  char v51[24];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for Locale(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v49 = (char *)&v45 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v45 - v17;
  sub_10008398C((uint64_t)v9);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v19(v9, 1, v10) == 1)
  {
    sub_10000A020((uint64_t)v9, (uint64_t *)&unk_10028FE50);
    v52 = 0u;
    v53 = 0u;
    v54 = 0;
LABEL_9:
    result = sub_10000A020((uint64_t)&v52, (uint64_t *)&unk_100296450);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  v48 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v48(v18, v9, v10);
  v20 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech);
  v21 = swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech, v51, 0, 0);
  v50 = a1;
  v22 = *v20;
  __chkstk_darwin(v21);
  *(&v45 - 2) = (uint64_t)v18;
  swift_bridgeObjectRetain(v22);
  sub_1001708FC((uint64_t)sub_1000822FC, v22, (uint64_t)&v52);
  v23 = swift_bridgeObjectRelease(v22);
  a1 = v50;
  v24 = *(void (**)(char *, uint64_t, __n128))(v11 + 8);
  v24(v18, v10, v23);
  if (!*((_QWORD *)&v53 + 1))
    goto LABEL_9;
  v45 = 0;
  sub_10003E994(&v52, (uint64_t)v55);
  v46 = *(id *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
  v25 = objc_msgSend(v46, "localePair");
  v26 = v24;
  v28 = v56;
  v27 = v57;
  sub_100023AF4(v55, v56);
  dispatch thunk of AnnotatedResult.locale.getter(v28, *(_QWORD *)(v27 + 16));
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v47 = v26;
  ((void (*)(char *, uint64_t))v26)(v14, v10);
  v30 = objc_msgSend(v25, "oppositeToLocale:", isa);

  if (v30)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v31 = v48;
    v48(v7, v14, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    v32 = v19(v7, 1, v10);
    v33 = v50;
    if (v32 != 1)
    {
      v34 = v49;
      v31(v49, v7, v10);
      v35 = objc_msgSend(v46, "localePair");
      v36 = objc_msgSend(v35, "isPassthrough");

      v37 = (uint64_t *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation);
      v38 = v2 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation;
      if (v36)
      {
        swift_beginAccess(v38, &v52, 0, 0);
        v39 = *(_QWORD *)(*v37 + 16);
        if (v39)
        {
          sub_100023AB0(*v37 + 40 * v39 - 8, v33);
        }
        else
        {
          *(_QWORD *)(v33 + 32) = 0;
          v40 = 0uLL;
          *(_OWORD *)v33 = 0u;
          *(_OWORD *)(v33 + 16) = 0u;
        }
        v47(v34, v10, v40);
      }
      else
      {
        v42 = swift_beginAccess(v38, &v52, 0, 0);
        v43 = *v37;
        __chkstk_darwin(v42);
        *(&v45 - 2) = (uint64_t)v34;
        swift_bridgeObjectRetain(v43);
        sub_1001708FC((uint64_t)sub_100086184, v43, v33);
        v44 = swift_bridgeObjectRelease(v43);
        v47(v34, v10, v44);
      }
      return sub_100009C08(v55);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
    v33 = v50;
  }
  sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_QWORD *)(v33 + 32) = 0;
  return sub_100009C08(v55);
}

uint64_t sub_1000845E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20[-1] - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_100023AF4(a1, v11);
  v13 = dispatch thunk of TranslationResult.isFinal.getter(v11, v12);
  sub_100023AB0((uint64_t)a1, (uint64_t)v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a2, v4);
  if ((v13 & 1) != 0)
  {
    v14 = v21;
    v15 = v22;
    sub_100023AF4(v20, v21);
    dispatch thunk of TranslationResult.locale.getter(v14, v15);
    v16 = static Locale.== infix(_:_:)(v8, v10);
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
  }
  else
  {
    v16 = 0;
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  }
  v17(v10, v4);
  sub_100009C08(v20);
  return v16 & 1;
}

id sub_100084768()
{
  return sub_100085B40(type metadata accessor for ConversationTurn);
}

uint64_t type metadata accessor for ConversationTurn()
{
  return objc_opt_self(_TtC17SequoiaTranslator16ConversationTurn);
}

uint64_t sub_100084800(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v20[24];
  _BYTE v21[24];

  v3 = sub_100006DF4(&qword_1002948B0);
  v4 = __chkstk_darwin(v3);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v20[-v7];
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator10SpeechTurn_instrumentation)
     + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstLID;
  swift_beginAccess(v9, v21, 0, 0);
  sub_10000B074(v9, (uint64_t)v8, &qword_1002948B0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  v13 = sub_10000A020((uint64_t)v8, &qword_1002948B0);
  if (v12 == 1)
  {
    Date.init()(v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    swift_beginAccess(v9, v20, 33, 0);
    sub_10002D560((uint64_t)v6, v9, &qword_1002948B0);
    swift_endAccess(v20);
  }
  v14 = (_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_lid);
  swift_beginAccess(v14, v20, 33, 0);
  v15 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v17 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v16 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v17 >= v16 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
  v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
  specialized Array._endMutation()(v18);
  return swift_endAccess(v20);
}

uint64_t sub_1000849D8(_QWORD *a1)
{
  return sub_100084A20(a1, &OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstResult, &OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech, (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))sub_1001A78FC, (uint64_t (*)(_QWORD *, uint64_t))sub_10003E994);
}

uint64_t sub_1000849FC(_QWORD *a1)
{
  return sub_100084A20(a1, &OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTranslation, &OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation, (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))sub_1001A7910, (uint64_t (*)(_QWORD *, uint64_t))sub_10003E994);
}

uint64_t sub_100084A20(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (*a4)(BOOL, unint64_t, uint64_t, uint64_t), uint64_t (*a5)(_QWORD *, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(BOOL, unint64_t, uint64_t, uint64_t);
  uint64_t (*v25)(_QWORD *, uint64_t);
  _BYTE v26[24];
  _BYTE v27[24];

  v24 = a4;
  v25 = a5;
  v9 = sub_100006DF4(&qword_1002948B0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v24 - v13;
  v15 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17SequoiaTranslator10SpeechTurn_instrumentation) + *a2;
  swift_beginAccess(v15, v27, 0, 0);
  sub_10000B074(v15, (uint64_t)v14, &qword_1002948B0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16);
  v19 = sub_10000A020((uint64_t)v14, &qword_1002948B0);
  if (v18 == 1)
  {
    Date.init()(v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
    swift_beginAccess(v15, v26, 33, 0);
    sub_10002D560((uint64_t)v12, v15, &qword_1002948B0);
    swift_endAccess(v26);
  }
  v20 = a1[3];
  v21 = a1[4];
  v22 = sub_100023AF4(a1, v20);
  return sub_100085EE8((uint64_t)v22, v5, v20, v21, a3, v24, v25);
}

uint64_t sub_100084BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  v1 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  sub_100085170((uint64_t)v3);
  result = sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028FE50);
  v6 = *(uint64_t (**)(uint64_t))(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_completion);
  if (v6)
    return v6(v0);
  return result;
}

uint64_t sub_100084C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  _BYTE v12[24];
  _BYTE v13[24];

  v1 = sub_100006DF4(&qword_1002948B0);
  v2 = __chkstk_darwin(v1);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v12[-v5];
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator10SpeechTurn_instrumentation)
     + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTTS;
  swift_beginAccess(v7, v13, 0, 0);
  sub_10000B074(v7, (uint64_t)v6, &qword_1002948B0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  result = sub_10000A020((uint64_t)v6, &qword_1002948B0);
  if (v10 == 1)
  {
    Date.init()(result);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    swift_beginAccess(v7, v12, 33, 0);
    sub_10002D560((uint64_t)v4, v7, &qword_1002948B0);
    return swift_endAccess(v12);
  }
  return result;
}

uint64_t sub_100084DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  id v23;
  Class isa;
  id v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t result;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  void (*v34)(char *, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  _QWORD v42[3];
  _BYTE v43[24];
  uint64_t v44;

  v3 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v37 - v7;
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v40 = (char *)&v37 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - v16;
  sub_10000B074(a1, (uint64_t)v8, (uint64_t *)&unk_10028FE50);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v8, 1, v9) == 1)
  {
    sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
    sub_10008416C((uint64_t)v43);
    if (v44)
    {
      v19 = sub_100006DF4(&qword_100298120);
      v20 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
      v21 = swift_dynamicCast(v42, v43, v19, v20, 6);
      v22 = v42[0];
      goto LABEL_8;
    }
LABEL_11:
    sub_10000A020((uint64_t)v43, (uint64_t *)&unk_10028F1C0);
    return 0;
  }
  v39 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v39(v17, v8, v9);
  v38 = v1;
  v23 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request), "localePair"));
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v25 = objc_msgSend(v23, "oppositeToLocale:", isa);

  if (!v25)
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
    goto LABEL_14;
  }
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v25);

  v26 = v13;
  v27 = v39;
  v39(v6, v26, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v6, 1, v9);
  if ((_DWORD)result == 1)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v29 = v40;
  v27(v40, v6, v9);
  v30 = (uint64_t *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation);
  v31 = swift_beginAccess(v38 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation, v42, 0, 0);
  v32 = *v30;
  __chkstk_darwin(v31);
  *(&v37 - 2) = (uint64_t)v29;
  swift_bridgeObjectRetain(v32);
  sub_1001708FC((uint64_t)sub_10008269C, v32, (uint64_t)v43);
  v33 = swift_bridgeObjectRelease(v32);
  v34 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
  v34(v29, v9, v33);
  ((void (*)(char *, uint64_t))v34)(v17, v9);
  if (!v44)
    goto LABEL_11;
  v35 = sub_100006DF4(&qword_100298120);
  v36 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
  v21 = swift_dynamicCast(&v41, v43, v35, v36, 6);
  v22 = v41;
LABEL_8:
  if (v21)
    return v22;
  else
    return 0;
}

void sub_100085170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  void *v13;
  id v14;
  void *v15;
  unsigned __int8 v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  void *v38;
  unsigned int v39;
  double v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Class isa;
  char *v47;
  id v48;
  id v49;
  id v50;
  Class v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  NSString v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  unsigned int v63;
  char *v64;
  Class v65;
  uint64_t v66;
  char *v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD aBlock[5];
  uint64_t v73;

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v5 = __chkstk_darwin(v4);
  v70 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v67 = (char *)&v66 - v7;
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_1000858F8();
  v12 = *(_BYTE **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator10SpeechTurn_instrumentation);
  v13 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
  v14 = objc_msgSend(v13, "localePair");
  v15 = *(void **)&v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_localePair];
  *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_localePair] = v14;

  v16 = objc_msgSend(v13, "censorSpeech");
  v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_censorSpeech] = v16;
  v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  v17 = v68(a1, 1, v8) != 1;
  v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_lidTriggered] = v17;
  v18 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v19 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v18);
  v20 = NSUserDefaults.onDeviceOnly.getter();

  v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_onDeviceModeEnabled] = v20 & 1;
  v69 = a1;
  v21 = (void *)sub_100084DCC(a1);
  if (!v21)
  {
    v42 = v71;
    goto LABEL_41;
  }
  v22 = v21;
  v23 = objc_msgSend(v21, "route") == (id)1;
  v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_offline] = v23;
  aBlock[0] = v22;
  v24 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
  v25 = sub_10008612C();
  v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_lowQualityMT] = TranslationResult.isLowConfidence.getter(v24, v25) & 1;
  v26 = objc_msgSend(v22, "translations");
  v27 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v43 = v28;
    else
      v43 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v29 = (void *)_CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v28);
    if (!v29)
      goto LABEL_31;
  }
  else
  {
    v29 = *(void **)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v29)
    {
LABEL_31:
      *(_QWORD *)&v40 = swift_bridgeObjectRelease(v28).n128_u64[0];
      goto LABEL_32;
    }
  }
  if ((v28 & 0xC000000000000001) != 0)
  {
    v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
  }
  else
  {
    if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_26;
    }
    v30 = *(id *)(v28 + 32);
  }
  v29 = v30;
  v31 = objc_msgSend(v30, "statistics", swift_bridgeObjectRelease(v28).n128_f64[0]);
  if (v31)
  {
    v32 = v31;
    v33 = objc_msgSend(v31, "inputTokenCount");
    *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_inputTokenCount] = v33;
    v34 = objc_msgSend(v32, "inputSubtokenCount");

    *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_inputSubtokenCount] = v34;
  }
  v35 = objc_msgSend(v29, "senses");
  v36 = sub_10000A05C(0, &qword_10028F360, _LTTranslationSense_ptr);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

  if ((unint64_t)v28 >> 62)
  {
LABEL_26:
    if (v28 < 0)
      v44 = v28;
    else
      v44 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v45 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease(v28);
    if (v45)
      goto LABEL_11;
    goto LABEL_30;
  }
  if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_30:

    goto LABEL_31;
  }
LABEL_11:
  if ((v28 & 0xC000000000000001) != 0)
  {
    v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
  }
  else
  {
    if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v37 = *(id *)(v28 + 32);
  }
  v38 = v37;
  v39 = objc_msgSend(v37, "isPhrasebookMatch", swift_bridgeObjectRelease(v28).n128_f64[0]);

  if (v39)
    v41 = &OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_nBestDisplay;
  else
    v41 = &OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_senseDisambiguation;
  v12[*v41] = 1;
LABEL_32:
  if (objc_msgSend(v22, "route", v40) == (id)1)
  {
    isa = (Class)v71;
    v71 = 0;
  }
  else
  {
    if (!v71)
    {
      v71 = 0;
      goto LABEL_37;
    }
    v47 = v71;
    v48 = objc_msgSend(v22, "locale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v48);

    isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    objc_msgSend(v47, "setTargetLocale:", isa);

  }
LABEL_37:
  v49 = objc_msgSend(v13, "localePair");
  v50 = objc_msgSend(v22, "locale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v50);

  v51 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v52 = objc_msgSend(v49, "oppositeToLocale:", v51);

  if (v52)
  {
    v53 = (uint64_t)v67;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v54 = 0;
    v42 = v71;
  }
  else
  {
    v54 = 1;
    v42 = v71;
    v53 = (uint64_t)v67;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v53, v54, 1, v8);
  v55 = (uint64_t)&v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_sourceLocale];
  swift_beginAccess(&v12[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_sourceLocale], aBlock, 33, 0);
  sub_10002D560(v53, v55, (uint64_t *)&unk_10028FE50);
  swift_endAccess(aBlock);

LABEL_41:
  v56 = v12;
  v57 = String._bridgeToObjectiveC()();
  v58 = swift_allocObject(&unk_1002672F0, 24, 7);
  *(_QWORD *)(v58 + 16) = v56;
  aBlock[4] = sub_10008610C;
  v73 = v58;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100170878;
  aBlock[3] = &unk_100267308;
  v59 = _Block_copy(aBlock);
  v60 = v73;
  v61 = v56;
  swift_release(v60);
  AnalyticsSendEventLazy(v57, v59);
  _Block_release(v59);

  if (v42)
  {
    v62 = v70;
    sub_10000B074(v69, v70, (uint64_t *)&unk_10028FE50);
    v63 = v68(v62, 1, v8);
    v64 = v42;
    if (v63 == 1)
    {
      v65 = 0;
    }
    else
    {
      v65 = Locale._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v62, v8);
    }
    objc_msgSend(v64, "setSelectedLocale:", v65);

    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator10SpeechTurn_translator), "log:", v64);
  }
}

char *sub_1000858F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  char *result;
  char *v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  char v14[24];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
  if (!objc_msgSend(v1, "autodetectLanguage")
    || (objc_msgSend(v1, "forcedOfflineTranslation") & 1) != 0)
  {
    return 0;
  }
  v2 = objc_msgSend(objc_allocWithZone((Class)_LTSpeechLIDLoggingRequest), "init");
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_lid);
  swift_beginAccess(v3, v14, 0, 0);
  v4 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
    if (v4 < 0)
      v13 = *v3;
    else
      v13 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = (char *)_CocoaArrayWrapper.endIndex.getter(v13);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v5 = *(char **)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
    if (!v5)
    {
LABEL_12:
      swift_bridgeObjectRelease(v4);
      objc_msgSend(v2, "setLidResult:", v5);

      v8 = objc_msgSend(v1, "uniqueID");
      if (!v8)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v10 = v9;
        v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v10);
      }
      objc_msgSend(v2, "setRequestID:", v8);

      v11 = objc_msgSend(v1, "sessionID");
      objc_msgSend(v2, "setConversationID:", v11);

      v12 = objc_msgSend(v1, "localePair");
      objc_msgSend(v2, "setLocalePair:", v12);

      return (char *)v2;
    }
  }
  result = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_22:
    v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v4);
    goto LABEL_11;
  }
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)result < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = (char *)*(id *)(v4 + 8 * (_QWORD)result + 32);
LABEL_11:
    v5 = v7;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_100085B08()
{
  uint64_t v0;

}

id sub_100085B34()
{
  return sub_100085B40(type metadata accessor for SpeechTurn);
}

id sub_100085B40(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for SpeechTurn()
{
  return objc_opt_self(_TtC17SequoiaTranslator10SpeechTurn);
}

unint64_t sub_100085C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  unint64_t v46;
  unint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = 0xD000000000000018;
  v47 = 0x80000001001FAD00;
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech);
  swift_beginAccess(v6, v45, 0, 0);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 16);
  if (v8)
  {
    v38 = *v6;
    v39 = v1;
    v9 = v7 + 32;
    swift_bridgeObjectRetain(v7);
    do
    {
      sub_100023AB0(v9, (uint64_t)v42);
      v11 = v43;
      v10 = v44;
      sub_100023AF4(v42, v43);
      v12 = dispatch thunk of AnnotatedResult.locale.getter(v11, *(_QWORD *)(v10 + 16));
      v13 = Locale.ltIdentifier.getter(v12);
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v41._countAndFlagsBits = 9;
      v41._object = (void *)0xE100000000000000;
      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v15);
      object = v41._object;
      swift_bridgeObjectRetain(v41._object);
      v18._countAndFlagsBits = 10;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      v19 = v41._object;
      String.append(_:)(v41);
      swift_bridgeObjectRelease(v19);
      sub_100009C08(v42);
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(v38);
    v1 = v39;
  }
  v20._countAndFlagsBits = 171594829;
  v20._object = (void *)0xE400000000000000;
  String.append(_:)(v20);
  v21 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation, &v41, 0, 0);
  v22 = *v21;
  v23 = *(_QWORD *)(*v21 + 16);
  if (v23)
  {
    v24 = v22 + 32;
    v39 = *v21;
    swift_bridgeObjectRetain(v22);
    do
    {
      sub_100023AB0(v24, (uint64_t)v42);
      v25 = v43;
      v26 = v44;
      sub_100023AF4(v42, v43);
      v27 = dispatch thunk of TranslationResult.locale.getter(v25, v26);
      v28 = Locale.ltIdentifier.getter(v27);
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v40._countAndFlagsBits = 9;
      v40._object = (void *)0xE100000000000000;
      v31._countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(v30);
      v32 = v40._object;
      swift_bridgeObjectRetain(v40._object);
      v33._countAndFlagsBits = 10;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(v32);
      v34 = v40._object;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v34);
      sub_100009C08(v42);
      v24 += 40;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease(v39);
  }
  v35._countAndFlagsBits = 2601;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  return v46;
}

uint64_t sub_100085EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(BOOL, unint64_t, uint64_t, uint64_t), uint64_t (*a7)(_QWORD *, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  void (*v18)(_BYTE *);
  uint64_t *v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v22)(BOOL, unint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v26)(_QWORD *, uint64_t);
  _BYTE v27[24];

  v26 = a7;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = __chkstk_darwin(a1);
  v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v13);
  v17 = &v27[-v16 - 8];
  v18 = *(void (**)(_BYTE *))(v12 + 16);
  v18(&v27[-v16 - 8]);
  v19 = (uint64_t *)(a2 + *a5);
  swift_beginAccess(v19, v27, 33, 0);
  v20 = *v19;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
  *v19 = v20;
  v22 = a6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v20 = a6(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
    *v19 = v20;
  }
  v24 = *(_QWORD *)(v20 + 16);
  v23 = *(_QWORD *)(v20 + 24);
  if (v24 >= v23 >> 1)
    *v19 = v22(v23 > 1, v24 + 1, 1, v20);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v18)(v15, v17, a3);
  sub_100086064(v24, (uint64_t)v15, v19, a3, a4, v26);
  swift_endAccess(v27);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v17, a3);
}

uint64_t sub_100086064(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t))
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[5];

  v14[3] = a4;
  v14[4] = a5;
  v11 = sub_1000122F8(v14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v11, a2, a4);
  v12 = *a3;
  *(_QWORD *)(v12 + 16) = a1 + 1;
  return a6(v14, v12 + 40 * a1 + 32);
}

uint64_t sub_1000860E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_10008610C()
{
  return sub_100172910();
}

uint64_t sub_100086114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100086124(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10008612C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F188;
  if (!qword_10028F188)
  {
    v1 = sub_10000A05C(255, &qword_10028F180, _LTTranslationResult_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for _LTTranslationResult, v1);
    atomic_store(result, (unint64_t *)&qword_10028F188);
  }
  return result;
}

uint64_t sub_100086184(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000845E8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1000861A0(_QWORD *a1)
{
  return sub_1000822FC(a1) & 1;
}

char *sub_1000861B8(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  id v50;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = a2[3];
    v9 = a3[6];
    v10 = &a1[v9];
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v4;
    swift_retain(v8);
    v13 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
      {
        v16 = sub_100006DF4(&qword_10028CE40);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        v17 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 16))(v10, v11, v14);
        v17 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
      }
    }
    else
    {
      v18 = *v11;
      *(_QWORD *)v10 = *v11;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v13, v17);
    v19 = a3[7];
    v20 = &v7[v19];
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = sub_100006DF4(&qword_10028F368);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *(_QWORD *)v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v26 = a3[8];
    v27 = a3[9];
    v28 = &v7[v26];
    v29 = (uint64_t *)((char *)a2 + v26);
    v31 = *v29;
    v30 = (void *)v29[1];
    *(_QWORD *)v28 = v31;
    *((_QWORD *)v28 + 1) = v30;
    v32 = &v7[v27];
    v33 = (char **)((char *)a2 + v27);
    v34 = v33[1];
    *(_QWORD *)v32 = *v33;
    *((_QWORD *)v32 + 1) = v34;
    v35 = a3[10];
    v36 = a3[11];
    v37 = &v7[v35];
    v38 = (char **)((char *)a2 + v35);
    v39 = v38[1];
    *(_QWORD *)v37 = *v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = &v7[v36];
    v41 = (char **)((char *)a2 + v36);
    v42 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v42;
    v43 = a3[12];
    v44 = a3[13];
    v45 = &v7[v43];
    v46 = (uint64_t)a2 + v43;
    *v45 = *(_BYTE *)v46;
    v47 = *(_QWORD *)(v46 + 8);
    *((_QWORD *)v45 + 1) = v47;
    v48 = &v7[v44];
    v49 = (char **)((char *)a2 + v44);
    v4 = (char *)v49[1];
    *(_QWORD *)v48 = *v49;
    *((_QWORD *)v48 + 1) = v4;
    v50 = v30;
    swift_retain(v34);
    swift_retain(v39);
    swift_retain(v42);
    swift_retain(v47);
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_100086424(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*(_QWORD *)(a1 + 16));
  v4 = (_QWORD *)(a1 + a2[6]);
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (_QWORD *)(a1 + a2[7]);
  v9 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }

  swift_release(*(_QWORD *)(a1 + a2[9] + 8));
  swift_release(*(_QWORD *)(a1 + a2[10] + 8));
  swift_release(*(_QWORD *)(a1 + a2[11] + 8));
  swift_release(*(_QWORD *)(a1 + a2[12] + 8));
  return swift_release(*(_QWORD *)(a1 + a2[13] + 8));
}

_QWORD *sub_10008657C(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  a1[2] = v9;
  a1[3] = v8;
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = v6;
  swift_retain(v9);
  v14 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v12, v14) == 1)
  {
    v15 = type metadata accessor for UserInterfaceSizeClass(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15))
    {
      v17 = sub_100006DF4(&qword_10028CE40);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(v11, v12, v15);
      v18 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
    }
  }
  else
  {
    v19 = *v12;
    *v11 = *v12;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v14, v18);
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for ScenePhase(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
    v25 = 1;
  }
  else
  {
    v26 = *v22;
    *v21 = *v22;
    swift_retain(v26);
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v23, v25);
  v27 = a3[8];
  v28 = a3[9];
  v29 = (_QWORD *)((char *)a1 + v27);
  v30 = (uint64_t *)(a2 + v27);
  v32 = *v30;
  v31 = (void *)v30[1];
  *v29 = v32;
  v29[1] = v31;
  v33 = (_QWORD *)((char *)a1 + v28);
  v34 = (_QWORD *)(a2 + v28);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = a3[10];
  v37 = a3[11];
  v38 = (_QWORD *)((char *)a1 + v36);
  v39 = (_QWORD *)(a2 + v36);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = (_QWORD *)((char *)a1 + v37);
  v42 = (_QWORD *)(a2 + v37);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = a3[12];
  v45 = a3[13];
  v46 = (char *)a1 + v44;
  v47 = (char *)(a2 + v44);
  *v46 = *v47;
  v48 = *((_QWORD *)v47 + 1);
  *((_QWORD *)v46 + 1) = v48;
  v49 = (_QWORD *)((char *)a1 + v45);
  v50 = (_QWORD *)(a2 + v45);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  v52 = v31;
  swift_retain(v35);
  swift_retain(v40);
  swift_retain(v43);
  swift_retain(v48);
  swift_retain(v51);
  return a1;
}

uint64_t sub_1000867C0(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  swift_retain(v10);
  swift_release(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (a1 != a2)
  {
    v11 = a3[6];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_10000A020(a1 + v11, (uint64_t *)&unk_100291470);
    v14 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for UserInterfaceSizeClass(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15))
      {
        v17 = sub_100006DF4(&qword_10028CE40);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        v18 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(v12, v13, v15);
        v18 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      }
    }
    else
    {
      v19 = *v13;
      *v12 = *v13;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v18);
    v20 = a3[7];
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    sub_10000A020(a1 + v20, &qword_10028F368);
    v23 = sub_100006DF4(&qword_10028F368);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  v27 = a3[8];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = (void *)v29[1];
  v31 = (void *)v28[1];
  v28[1] = v30;
  v32 = v30;

  v33 = a3[9];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  *v34 = *v35;
  v36 = v35[1];
  v37 = v34[1];
  v34[1] = v36;
  swift_retain(v36);
  swift_release(v37);
  v38 = a3[10];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  *v39 = *v40;
  v41 = v40[1];
  v42 = v39[1];
  v39[1] = v41;
  swift_retain(v41);
  swift_release(v42);
  v43 = a3[11];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  *v44 = *v45;
  v46 = v45[1];
  v47 = v44[1];
  v44[1] = v46;
  swift_retain(v46);
  swift_release(v47);
  v48 = a3[12];
  v49 = a1 + v48;
  v50 = a2 + v48;
  *(_BYTE *)v49 = *(_BYTE *)v50;
  v51 = *(_QWORD *)(v49 + 8);
  v52 = *(_QWORD *)(v50 + 8);
  *(_QWORD *)(v49 + 8) = v52;
  swift_retain(v52);
  swift_release(v51);
  v53 = a3[13];
  v54 = (_QWORD *)(a1 + v53);
  v55 = (_QWORD *)(a2 + v53);
  *v54 = *v55;
  v56 = v54[1];
  v57 = v55[1];
  v54[1] = v57;
  swift_retain(v57);
  swift_release(v56);
  return a1;
}

_OWORD *sub_100086AB0(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      v13 = sub_100006DF4(&qword_10028CE40);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ScenePhase(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)((char *)a2 + v19);
  v20 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  v21 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  return a1;
}

void **sub_100086C7C(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *a1;
  *a1 = *a2;

  v7 = a1[2];
  v8 = a2[2];
  a1[1] = a2[1];
  a1[2] = v8;
  swift_release(v7);
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_10000A020((uint64_t)a1 + v9, (uint64_t *)&unk_100291470);
    v12 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_100006DF4(&qword_10028CE40);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v10, v11, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    sub_10000A020((uint64_t)a1 + v16, &qword_10028F368);
    v19 = sub_100006DF4(&qword_10028F368);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload(v17, v19, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  v21 = a3[8];
  v22 = (void **)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = (void *)v22[1];
  *v22 = v25;
  v22[1] = v24;

  v27 = a3[9];
  v28 = (void **)((char *)a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_release(v32);
  v33 = a3[10];
  v34 = (void **)((char *)a1 + v33);
  v35 = (uint64_t *)((char *)a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  v38 = v34[1];
  *v34 = v37;
  v34[1] = v36;
  swift_release(v38);
  v39 = a3[11];
  v40 = (void **)((char *)a1 + v39);
  v41 = (uint64_t *)((char *)a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  v44 = v40[1];
  *v40 = v43;
  v40[1] = v42;
  swift_release(v44);
  v45 = a3[12];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  *v46 = *v47;
  v48 = *((_QWORD *)v46 + 1);
  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  swift_release(v48);
  v49 = a3[13];
  v50 = (void **)((char *)a1 + v49);
  v51 = (uint64_t *)((char *)a2 + v49);
  v52 = v50[1];
  v54 = *v51;
  v53 = v51[1];
  *v50 = v54;
  v50[1] = v53;
  swift_release(v52);
  return a1;
}

uint64_t sub_100086F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100086F10);
}

uint64_t sub_100086F10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_100006DF4(&qword_10028CE50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100006DF4(&qword_10028F370);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_100086FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100086FCC);
}

uint64_t sub_100086FCC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100006DF4(&qword_10028CE50);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100006DF4(&qword_10028F370);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ConversationView(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F3D0;
  if (!qword_10028F3D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationView);
  return result;
}

void sub_1000870B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  v6[0] = &unk_1001EB458;
  v6[1] = &unk_1001EB458;
  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100087158(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1001EB470;
      v6[5] = &unk_1001EB470;
      v6[6] = &unk_1001EB470;
      v6[7] = &unk_1001EB470;
      v6[8] = &unk_1001EB458;
      v6[9] = &unk_1001EB458;
      swift_initStructMetadata(a1, 256, 10, v6, a1 + 16);
    }
  }
}

void sub_100087158(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028F3E0)
  {
    v2 = type metadata accessor for ScenePhase(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028F3E0);
  }
}

uint64_t sub_1000871AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100211CF4, 1);
}

uint64_t sub_1000871BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *, uint64_t);
  _BYTE v32[12];
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;

  v36 = a1;
  v35 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v3 = &v32[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = (_QWORD *)sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v34);
  v5 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100006DF4(&qword_10028CE40);
  v7 = __chkstk_darwin(v6);
  v9 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v32[-v11];
  __chkstk_darwin(v10);
  v14 = &v32[-v13];
  v15 = type metadata accessor for ConversationView(0);
  __chkstk_darwin(v15);
  v17 = &v32[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v19 = objc_msgSend(v18, "userInterfaceIdiom");

  sub_100032D68((uint64_t)v37, (uint64_t)v17, type metadata accessor for ConversationView);
  if (v19 != (id)1)
  {
    v23 = sub_100032DAC((uint64_t)v17, type metadata accessor for ConversationView);
    return static ToolbarItemPlacement.navigationBarLeading.getter(v23);
  }
  v37 = v9;
  sub_1000D58EC(v14);
  v20 = v35;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v12, enum case for UserInterfaceSizeClass.compact(_:), v35);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v12, 0, 1, v20);
  v21 = (uint64_t)&v5[*((int *)v34 + 12)];
  sub_10000B074((uint64_t)v14, (uint64_t)v5, &qword_10028CE40);
  sub_10000B074((uint64_t)v12, v21, &qword_10028CE40);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v22((uint64_t)v5, 1, v20) == 1)
  {
    sub_10000A020((uint64_t)v12, &qword_10028CE40);
    sub_10000A020((uint64_t)v14, &qword_10028CE40);
    sub_100032DAC((uint64_t)v17, type metadata accessor for ConversationView);
    if (v22(v21, 1, v20) == 1)
    {
      v23 = sub_10000A020((uint64_t)v5, &qword_10028CE40);
      return static ToolbarItemPlacement.navigationBarLeading.getter(v23);
    }
    goto LABEL_9;
  }
  v34 = v14;
  v25 = (uint64_t)v37;
  sub_10000B074((uint64_t)v5, (uint64_t)v37, &qword_10028CE40);
  if (v22(v21, 1, v20) == 1)
  {
    sub_10000A020((uint64_t)v12, &qword_10028CE40);
    sub_10000A020((uint64_t)v34, &qword_10028CE40);
    sub_100032DAC((uint64_t)v17, type metadata accessor for ConversationView);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v25, v35);
LABEL_9:
    v23 = sub_10000A020((uint64_t)v5, &qword_10028CFE8);
    return static ToolbarItemPlacement.navigationBarTrailing.getter(v23);
  }
  v26 = v3;
  v27 = v3;
  v28 = v25;
  v29 = v35;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 32))(v27, v21, v35);
  v30 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v33 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v26, v29, v30);
  v31 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v31(v26, v29);
  sub_10000A020((uint64_t)v12, &qword_10028CE40);
  sub_10000A020((uint64_t)v34, &qword_10028CE40);
  sub_100032DAC((uint64_t)v17, type metadata accessor for ConversationView);
  v31((_BYTE *)v28, v29);
  v23 = sub_10000A020((uint64_t)v5, &qword_10028CE40);
  if ((v33 & 1) != 0)
    return static ToolbarItemPlacement.navigationBarLeading.getter(v23);
  return static ToolbarItemPlacement.navigationBarTrailing.getter(v23);
}

uint64_t sub_1000875C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  char v16;
  char v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  ValueMetadata *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;

  v1 = v0;
  v2 = type metadata accessor for ConversationView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v29 - v6;
  v8 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    v9 = *(void **)(v0 + *(int *)(v2 + 32) + 8);
    v10 = v8;
    v11 = v9;
    v12 = sub_10008C71C();

    v13 = *(_QWORD *)(v1 + *(int *)(v2 + 40) + 8);
    KeyPath = swift_getKeyPath(&unk_1001EB8D8);
    v15 = swift_getKeyPath(&unk_1001EB900);
    swift_retain(v13);
    static Published.subscript.getter(&v30, v10, KeyPath);
    swift_release(KeyPath);
    swift_release(v15);
    if ((v30 & 1) != 0)
    {
      v16 = sub_10015F5AC(v12);

      swift_release(v13);
      sub_100032D68(v1, (uint64_t)v7, type metadata accessor for ConversationView);
      if ((v16 & 1) != 0)
      {
        v33 = &type metadata for TranslateFeatures;
        v34 = sub_100009BC4();
        LOBYTE(v30) = 8;
        v17 = isFeatureEnabled(_:)(&v30);
        sub_100009C08(&v30);
        sub_100032D68((uint64_t)v7, (uint64_t)v5, type metadata accessor for ConversationView);
        if ((v17 & 1) != 0)
        {
          v18 = *(char **)&v5[*(int *)(v2 + 32) + 8];
          v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper];
          v20 = swift_getKeyPath(&unk_1001EB6B0);
          v21 = swift_getKeyPath(&unk_1001EB6D8);
          v22 = v18;
          static Published.subscript.getter(&v30, v19, v20);
          swift_release(v20);
          swift_release(v21);
          if (v31)
          {
            v23 = v37;
            sub_10001613C(v30, v31, v32, (uint64_t)v33, v34, v35, v36, v37, v38, v39, v40);

            v24 = (v23 & 0xFFFFFFFFFFFFFFFELL) == 2;
LABEL_11:
            sub_100032DAC((uint64_t)v5, type metadata accessor for ConversationView);
            goto LABEL_12;
          }

        }
        v24 = 0;
        goto LABEL_11;
      }
    }
    else
    {

      swift_release(v13);
      sub_100032D68(v1, (uint64_t)v7, type metadata accessor for ConversationView);
    }
    v24 = 1;
LABEL_12:
    sub_100032DAC((uint64_t)v7, type metadata accessor for ConversationView);
    return v24;
  }
  v26 = *(_QWORD *)(v0 + 8);
  v27 = type metadata accessor for SharedTranslationOptions(0);
  v28 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  result = EnvironmentObject.error()(0, v26, v27, v28);
  __break(1u);
  return result;
}

uint64_t sub_1000878C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;

  v1 = v0;
  v2 = type metadata accessor for ConversationView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v27 - v6;
  v8 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    v9 = *(void **)(v0 + *(int *)(v2 + 32) + 8);
    v10 = v8;
    v11 = v9;
    v12 = sub_10008C71C();

    v13 = *(_QWORD *)(v1 + *(int *)(v2 + 40) + 8);
    swift_retain(v13);
    v14 = sub_10015F5AC(v12);

    swift_release(v13);
    sub_100032D68(v1, (uint64_t)v7, type metadata accessor for ConversationView);
    if ((v14 & 1) == 0)
    {
      v22 = 1;
LABEL_10:
      sub_100032DAC((uint64_t)v7, type metadata accessor for ConversationView);
      return v22;
    }
    v31 = &type metadata for TranslateFeatures;
    v32 = sub_100009BC4();
    LOBYTE(v28) = 8;
    v15 = isFeatureEnabled(_:)(&v28);
    sub_100009C08(&v28);
    sub_100032D68((uint64_t)v7, (uint64_t)v5, type metadata accessor for ConversationView);
    if ((v15 & 1) != 0)
    {
      v16 = *(char **)&v5[*(int *)(v2 + 32) + 8];
      v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper];
      KeyPath = swift_getKeyPath(&unk_1001EB6B0);
      v19 = swift_getKeyPath(&unk_1001EB6D8);
      v20 = v16;
      static Published.subscript.getter(&v28, v17, KeyPath);
      swift_release(KeyPath);
      swift_release(v19);
      if (v29)
      {
        v21 = v35;
        sub_10001613C(v28, v29, v30, (uint64_t)v31, v32, v33, v34, v35, v36, v37, v38);

        v22 = (v21 & 0xFFFFFFFFFFFFFFFELL) == 2;
LABEL_9:
        sub_100032DAC((uint64_t)v5, type metadata accessor for ConversationView);
        goto LABEL_10;
      }

    }
    v22 = 0;
    goto LABEL_9;
  }
  v24 = *(_QWORD *)(v0 + 8);
  v25 = type metadata accessor for SharedTranslationOptions(0);
  v26 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  result = EnvironmentObject.error()(0, v24, v25, v26);
  __break(1u);
  return result;
}

uint64_t sub_100087B44@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for ConversationView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    KeyPath = swift_getKeyPath(&unk_1001EB740);
    v9 = swift_getKeyPath(&unk_1001EB768);
    swift_retain(v7);
    static Published.subscript.getter((uint64_t *)((char *)&v22 + 1), v10, KeyPath);
    swift_release(v7);
    swift_release(KeyPath);
    swift_release(v9);
    v11 = BYTE1(v22);
    sub_100032D68(a1, (uint64_t)v6, type metadata accessor for ConversationView);
    if ((v11 & 1) == 0)
    {
      v16 = 0;
      goto LABEL_6;
    }
    v12 = *((_QWORD *)v6 + 2);
    if (v12)
    {
      v13 = swift_getKeyPath(&unk_1001EB4D8);
      v14 = swift_getKeyPath(&unk_1001EB500);
      swift_retain(v12);
      static Published.subscript.getter(&v22, v15, v13);
      swift_release(v12);
      swift_release(v13);
      swift_release(v14);
      v16 = v22 ^ 1;
LABEL_6:
      result = sub_100032DAC((uint64_t)v6, type metadata accessor for ConversationView);
      *a2 = v16 & 1;
      return result;
    }
    v18 = *((_QWORD *)v6 + 3);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
  }
  v19 = type metadata accessor for SceneContext(0);
  v20 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  result = EnvironmentObject.error()(0, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_100087CF0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4)
  {
    v5 = *a1;
    KeyPath = swift_getKeyPath(&unk_1001EB740);
    v7 = swift_getKeyPath(&unk_1001EB768);
    v12 = v5;
    swift_retain(v4);
    return static Published.subscript.setter(&v12, v4, KeyPath, v7);
  }
  else
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = type metadata accessor for SceneContext(0);
    v11 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v9, v10, v11);
    __break(1u);
  }
  return result;
}

uint64_t sub_100087DA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  __n128 v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (**v72)(uint64_t);
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (**v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)();
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t KeyPath;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t result;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180[8];
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;

  v2 = v1;
  v170 = a1;
  v164 = type metadata accessor for ScenePhase(0);
  v165 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char **)((char *)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v175 = type metadata accessor for ConversationView(0);
  v177 = *(_QWORD *)(v175 - 8);
  v179 = *(_QWORD *)(v177 + 64);
  __chkstk_darwin(v175);
  v178 = (uint64_t)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v159 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v155 = (char *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v142 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v140 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028F430);
  __chkstk_darwin(v7);
  v9 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100006DF4(&qword_10028F438);
  v143 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v11 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100006DF4(&qword_10028F440);
  v146 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v138 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = (_QWORD *)sub_100006DF4(&qword_10028F448);
  v172 = *(v148 - 1);
  __chkstk_darwin(v148);
  v141 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100006DF4(&qword_10028F450);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v147 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100006DF4(&qword_10028F458);
  __chkstk_darwin(v150);
  v149 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100006DF4(&qword_10028F460);
  __chkstk_darwin(v154);
  v153 = (uint64_t)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100006DF4(&qword_10028F468);
  __chkstk_darwin(v157);
  v156 = (uint64_t)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_100006DF4(&qword_10028F470);
  __chkstk_darwin(v171);
  v158 = (uint64_t)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100006DF4(&qword_10028F478);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v174 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006DF4(&qword_10028F480);
  v168 = *(_QWORD *)(v20 - 8);
  v169 = v20;
  __chkstk_darwin(v20);
  v163 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100006DF4(&qword_10028F488);
  v22 = __chkstk_darwin(v166);
  v167 = (char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v24 = sub_100006DF4(&qword_10028F490);
  sub_100088CDC(v2, (uint64_t)&v9[*(int *)(v24 + 44)]);
  v25 = LocalizedStringKey.init(stringLiteral:)(0x41535245564E4F43, 0xEC0000004E4F4954);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = sub_100012334(&qword_10028F498, &qword_10028F430, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v33 = v25;
  v34 = v7;
  View.navigationTitle(_:)(v33, v27, v29 & 1, v31, v7, v32);
  v35 = v31;
  v36 = v178;
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v27);
  sub_10000A020((uint64_t)v9, &qword_10028F430);
  v37 = v142;
  v38 = v140;
  v39 = v144;
  (*(void (**)(char *, _QWORD, uint64_t))(v142 + 104))(v140, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v144);
  v183 = v34;
  v184 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v183, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v41 = v138;
  v42 = v139;
  View.navigationBarTitleDisplayMode(_:)(v38, v139, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v11, v42);
  v43 = v2;
  v181 = v2;
  v44 = sub_100006DF4(&qword_10028F4A0);
  v183 = v42;
  v184 = OpaqueTypeConformance2;
  v45 = swift_getOpaqueTypeConformance2(&v183, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v46 = sub_100012334(&qword_10028F4A8, &qword_10028F4A0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v47 = v141;
  v48 = v145;
  View.toolbar<A>(content:)(sub_10008B82C, v180, v145, v44, v45, v46);
  v49 = *(void (**)(char *, uint64_t))(v146 + 8);
  v50 = v41;
  v51 = v43;
  v176 = v43;
  v49(v50, v48);
  v52 = sub_100006DF4(&qword_10028F4B0);
  v53 = type metadata accessor for ToolbarPlacement(0);
  v54 = swift_allocObject(v52, ((*(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v53 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80) | 7);
  *(_OWORD *)(v54 + 16) = xmmword_1001E64F0;
  static ToolbarPlacement.tabBar.getter();
  v183 = v48;
  v184 = v44;
  v185 = v45;
  v186 = v46;
  v55 = swift_getOpaqueTypeConformance2(&v183, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v56 = v147;
  v57 = v148;
  View.toolbarBackground(_:for:)(2, v54, v148, v55);
  v58 = swift_bridgeObjectRelease(v54);
  (*(void (**)(char *, _QWORD *, __n128))(v172 + 8))(v47, v57, v58);
  v148 = (_QWORD *)objc_opt_self(NSNotificationCenter);
  v59 = objc_msgSend(v148, "defaultCenter");
  v60 = v155;
  NSNotificationCenter.publisher(for:object:)(UIKeyboardWillShowNotification, 0);

  sub_100032D68(v51, v36, type metadata accessor for ConversationView);
  v61 = *(unsigned __int8 *)(v177 + 80);
  v177 = ((v61 + 16) & ~v61) + v179;
  v62 = (v61 + 16) & ~v61;
  v172 = v62;
  v179 = v61 | 7;
  v63 = swift_allocObject(&unk_100267340, v177, v61 | 7);
  sub_10008B838(v36, v63 + v62);
  v64 = v151;
  v65 = (uint64_t)v149;
  v66 = v56;
  v67 = v152;
  (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v149, v56, v152);
  v68 = v150;
  v69 = v65 + *(int *)(v150 + 52);
  v70 = v159;
  v146 = *(_QWORD *)(v159 + 16);
  v71 = v173;
  ((void (*)(uint64_t, char *, uint64_t))v146)(v69, v60, v173);
  v72 = (void (**)(uint64_t))(v65 + *(int *)(v68 + 56));
  *v72 = sub_10008B87C;
  v72[1] = (void (*)(uint64_t))v63;
  v159 = *(_QWORD *)(v70 + 8);
  ((void (*)(char *, uint64_t))v159)(v60, v71);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v67);
  v73 = objc_msgSend(v148, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIKeyboardWillHideNotification, 0);

  v74 = v176;
  v75 = v178;
  sub_100032D68(v176, v178, type metadata accessor for ConversationView);
  v76 = v177;
  v77 = swift_allocObject(&unk_100267368, v177, v179);
  v78 = v172;
  sub_10008B838(v75, v77 + v172);
  v79 = v153;
  sub_10000B074(v65, v153, &qword_10028F458);
  v80 = v154;
  v81 = v173;
  ((void (*)(uint64_t, char *, uint64_t))v146)(v79 + *(int *)(v154 + 52), v60, v173);
  v82 = (void (**)(uint64_t))(v79 + *(int *)(v80 + 56));
  *v82 = sub_10008B888;
  v82[1] = (void (*)(uint64_t))v77;
  ((void (*)(char *, uint64_t))v159)(v60, v81);
  sub_10000A020(v65, &qword_10028F458);
  v83 = v74;
  sub_100032D68(v74, v75, type metadata accessor for ConversationView);
  v84 = v179;
  v85 = swift_allocObject(&unk_100267390, v76, v179);
  sub_10008B838(v75, v85 + v78);
  v86 = v156;
  sub_10000B074(v79, v156, &qword_10028F460);
  v87 = (uint64_t (**)())(v86 + *(int *)(v157 + 36));
  *v87 = sub_10008B8E4;
  v87[1] = (uint64_t (*)())v85;
  v87[2] = 0;
  v87[3] = 0;
  sub_10000A020(v79, &qword_10028F460);
  sub_100032D68(v74, v75, type metadata accessor for ConversationView);
  v88 = swift_allocObject(&unk_1002673B8, v76, v84);
  sub_10008B838(v75, v88 + v78);
  v89 = v158;
  sub_10000B074(v86, v158, &qword_10028F468);
  v90 = v171;
  v91 = (_QWORD *)(v89 + *(int *)(v171 + 36));
  *v91 = 0;
  v91[1] = 0;
  v91[2] = sub_10008B8F4;
  v91[3] = v88;
  sub_10000A020(v86, &qword_10028F468);
  v92 = v162;
  sub_1000D5B48(v162);
  sub_100032D68(v74, v75, type metadata accessor for ConversationView);
  v93 = swift_allocObject(&unk_1002673E0, v76, v179);
  sub_10008B838(v75, v93 + v78);
  v94 = sub_10008B950();
  v95 = sub_100007D5C(&qword_10028F4D0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v96 = v92;
  v97 = v92;
  v98 = v164;
  View.onChange<A>(of:initial:_:)(v96, 0, sub_10008B904, v93, v90, v164, v94, v95);
  swift_release(v93);
  (*(void (**)(_QWORD *, uint64_t))(v165 + 8))(v97, v98);
  sub_10000A020(v89, &qword_10028F470);
  v99 = *(_QWORD *)(v83 + 16);
  if (v99)
  {
    KeyPath = swift_getKeyPath(&unk_1001EB4D8);
    v101 = swift_getKeyPath(&unk_1001EB500);
    swift_retain(v99);
    static Published.subscript.getter(&v183, v102, KeyPath);
    swift_release(v99);
    swift_release(KeyPath);
    swift_release(v101);
    v182 = v183;
    sub_100032D68(v83, v75, type metadata accessor for ConversationView);
    v103 = v179;
    v104 = swift_allocObject(&unk_100267408, v177, v179);
    v105 = v172;
    sub_10008B838(v75, v104 + v172);
    v183 = v171;
    v184 = v98;
    v185 = v94;
    v186 = v95;
    v106 = swift_getOpaqueTypeConformance2(&v183, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v107 = v163;
    v108 = v161;
    v109 = v174;
    View.onChange<A>(of:initial:_:)(&v182, 0, sub_10008BA4C, v104, v161, &type metadata for Bool, v106, &protocol witness table for Bool);
    swift_release(v104);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v109, v108);
    v110 = (uint64_t *)(v83 + *(int *)(v175 + 32));
    v111 = (void *)v110[1];
    v112 = swift_getKeyPath(&unk_1001EB520);
    v113 = swift_getKeyPath(&unk_1001EB548);
    v114 = v111;
    static Published.subscript.getter(&v183, v114, v112);

    swift_release(v112);
    swift_release(v113);
    v115 = (unsigned __int16)v183 | (BYTE2(v183) << 16);
    v116 = v105;
    v117 = v177;
    if ((v115 & 0xFF0000) == 0x80000)
    {
      v118 = sub_1000093D0(objc_msgSend(objc_allocWithZone((Class)NSError), "init"));
      LOBYTE(v115) = v118;
      LODWORD(v175) = v118 >> 8;
      v119 = HIWORD(v118);
    }
    else
    {
      LODWORD(v175) = v115 >> 8;
      v119 = HIWORD(v115);
    }
    v120 = *v110;
    v121 = v110[1];
    v122 = type metadata accessor for ConversationViewModel(0);
    v123 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
    v124 = (void *)ObservedObject.projectedValue.getter(v120, v121, v122, v123);
    v125 = swift_getKeyPath(&unk_1001EB568);
    ObservedObject.Wrapper.subscript.getter(&v183, v125, v124, v123);
    swift_release(v125);

    v126 = v183;
    v127 = v184;
    LOBYTE(v122) = v185;
    v128 = v178;
    sub_100032D68(v176, v178, type metadata accessor for ConversationView);
    v129 = swift_allocObject(&unk_100267430, v117, v103);
    sub_10008B838(v128, v129 + v116);
    v131 = v168;
    v130 = v169;
    v132 = (uint64_t)v167;
    (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v167, v107, v169);
    v133 = v132 + *(int *)(v166 + 36);
    *(_BYTE *)v133 = v115;
    *(_BYTE *)(v133 + 1) = v175;
    *(_BYTE *)(v133 + 2) = v119;
    *(_QWORD *)(v133 + 8) = v126;
    *(_QWORD *)(v133 + 16) = v127;
    *(_BYTE *)(v133 + 24) = v122;
    *(_QWORD *)(v133 + 32) = sub_10008BA6C;
    *(_QWORD *)(v133 + 40) = v129;
    (*(void (**)(char *, uint64_t))(v131 + 8))(v107, v130);
    return sub_1000110A4(v132, v170, &qword_10028F488);
  }
  else
  {
    v135 = *(_QWORD *)(v83 + 24);
    v136 = type metadata accessor for SceneContext(0);
    v137 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v135, v136, v137);
    __break(1u);
  }
  return result;
}

uint64_t sub_100088CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v3 = sub_100006DF4(&qword_10028B308);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028B310);
  __chkstk_darwin(v6);
  v45 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100006DF4(&qword_10028F520);
  v8 = __chkstk_darwin(v47);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v46 = (uint64_t)&v45 - v11;
  v12 = type metadata accessor for ConversationList(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_10028F528);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v45 - v19;
  v21 = *(void **)(a1 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8);
  KeyPath = swift_getKeyPath(&unk_1001EB7D0);
  v23 = (uint64_t *)&v14[*(int *)(v12 + 24)];
  *v23 = KeyPath;
  v24 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  *(_QWORD *)v14 = v21;
  v14[8] = 2;
  v25 = static SafeAreaRegions.container.getter(v21);
  LOBYTE(v21) = static Edge.Set.all.getter(v25);
  sub_100032D68((uint64_t)v14, (uint64_t)v18, type metadata accessor for ConversationList);
  v26 = &v18[*(int *)(v15 + 36)];
  *(_QWORD *)v26 = v25;
  v26[8] = (char)v21;
  sub_100032DAC((uint64_t)v14, type metadata accessor for ConversationList);
  v27 = sub_1000110A4((uint64_t)v18, (uint64_t)v20, &qword_10028F528);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v27);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v28 = sub_100006DF4(&qword_10028F530);
  v29 = sub_1000890E8(a1, (uint64_t)&v5[*(int *)(v28 + 44)]);
  v30 = static Alignment.center.getter(v29);
  v31 = v45;
  sub_100018DD8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v45, 0.0, 1, 0.0, 1, v30, v32);
  sub_10000A020((uint64_t)v5, &qword_10028B308);
  v33 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v34 = Color.init(uiColor:)(v33);
  v35 = static SafeAreaRegions.all.getter();
  v36 = static Edge.Set.all.getter(v35);
  LOBYTE(v25) = v36;
  v37 = static Alignment.center.getter(v36);
  v39 = v38;
  sub_10000B074(v31, (uint64_t)v10, &qword_10028B310);
  v40 = &v10[*(int *)(v47 + 36)];
  *(_QWORD *)v40 = v34;
  *((_QWORD *)v40 + 1) = v35;
  v40[16] = v25;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  sub_10000A020(v31, &qword_10028B310);
  v41 = v46;
  sub_1000110A4((uint64_t)v10, v46, &qword_10028F520);
  sub_10000B074((uint64_t)v20, (uint64_t)v18, &qword_10028F528);
  sub_10000B074(v41, (uint64_t)v10, &qword_10028F520);
  v42 = v48;
  sub_10000B074((uint64_t)v18, v48, &qword_10028F528);
  v43 = sub_100006DF4(&qword_10028F538);
  sub_10000B074((uint64_t)v10, v42 + *(int *)(v43 + 48), &qword_10028F520);
  sub_10000A020(v41, &qword_10028F520);
  sub_10000A020((uint64_t)v20, &qword_10028F528);
  sub_10000A020((uint64_t)v10, &qword_10028F520);
  return sub_10000A020((uint64_t)v18, &qword_10028F528);
}

uint64_t sub_1000890E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  void *v23;
  uint64_t KeyPath;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  void (*v91)(char *, _QWORD *, uint64_t);
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void *(**v97)();
  void *(**v98)();
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  _BOOL4 v115;
  _BOOL4 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD v146[5];
  uint64_t v147;
  uint64_t v148;

  v137 = type metadata accessor for Locale(0);
  v135 = *(_QWORD *)(v137 - 8);
  v4 = __chkstk_darwin(v137);
  v136 = (uint64_t *)((char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v140 = (uint64_t *)((char *)&v114 - v6);
  v134 = type metadata accessor for SingleOrPairSpeakButton(0);
  __chkstk_darwin(v134);
  v8 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100006DF4(&qword_10028F540);
  v141 = *(_QWORD *)(v144 - 8);
  v9 = __chkstk_darwin(v144);
  v139 = (uint64_t)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v138 = (uint64_t)&v114 - v11;
  v12 = sub_100006DF4(&qword_10028F548);
  v13 = __chkstk_darwin(v12);
  v145 = (uint64_t)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v143 = (uint64_t)&v114 - v15;
  v16 = sub_100006DF4(&qword_10028D058);
  v17 = __chkstk_darwin(v16);
  v142 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v114 - v19;
  v21 = (int *)type metadata accessor for ConversationView(0);
  v22 = a1 + v21[8];
  v23 = *(void **)(v22 + 8);
  KeyPath = swift_getKeyPath(&unk_1001EB800);
  v25 = swift_getKeyPath(&unk_1001EB828);
  v26 = v23;
  static Published.subscript.getter(v146, v26, KeyPath);

  swift_release(KeyPath);
  swift_release(v25);
  if (LOBYTE(v146[0]) == 3)
  {
    v27 = type metadata accessor for ErrorStateView(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 1, 1, v27);
  }
  else
  {
    sub_100089C28(v146[0], (uint64_t)v20);
    v28 = type metadata accessor for ErrorStateView(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v20, 0, 1, v28);
  }
  v29 = (char *)(a1 + v21[12]);
  v30 = *v29;
  v31 = *((_QWORD *)v29 + 1);
  LOBYTE(v146[0]) = v30;
  *((_QWORD *)&v146[0] + 1) = v31;
  sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v148);
  if ((v148 & 1) == 0)
  {
    v130 = a1;
    v132 = v20;
    v133 = a2;
    v35 = v22;
    v36 = *(void **)(v22 + 8);
    v37 = swift_getKeyPath(&unk_1001EB848);
    v38 = swift_getKeyPath(&unk_1001EB870);
    v39 = v36;
    static Published.subscript.getter(v146, v39, v37);

    swift_release(v37);
    swift_release(v38);
    v40 = LOBYTE(v146[0]);
    v41 = swift_getKeyPath(&unk_1001EB848);
    v42 = swift_getKeyPath(&unk_1001EB870);
    v43 = (char *)v39;
    static Published.subscript.getter(v146, v43, v41);
    swift_release(v41);
    swift_release(v42);
    v131 = v40;
    if (LOBYTE(v146[0]) == 1)
    {
      v44 = *(_WORD *)&v43[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
      v116 = (v44 & 0xFF00) != 0x200
          && *(_WORD *)&v43[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation] != 2
          && (v44 & 1) != 0
          || (v44 & 0xFF00) == 512;
    }
    else
    {
      v116 = 0;
    }

    v45 = swift_getKeyPath(&unk_1001EB848);
    v46 = swift_getKeyPath(&unk_1001EB870);
    v47 = v43;
    static Published.subscript.getter(v146, v47, v45);
    swift_release(v45);
    swift_release(v46);
    if (LOBYTE(v146[0]) == 1)
    {
      v48 = *(_WORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
      if ((v48 & 0xFF00) == 0x200
        || *(_WORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation] == 2
        || (v48 & 1) != 0)
      {
        v49 = v130;
        v115 = (v48 & 0xFF00) == 512;
        goto LABEL_21;
      }
      v115 = 1;
    }
    else
    {
      v115 = 0;
    }
    v49 = v130;
LABEL_21:

    v50 = swift_getKeyPath(&unk_1001EB890);
    v51 = swift_getKeyPath(&unk_1001EB8B8);
    v52 = v47;
    static Published.subscript.getter(v146, v52, v50);

    swift_release(v50);
    swift_release(v51);
    LODWORD(v130) = LOBYTE(v146[0]);
    v53 = v49 + v21[9];
    v54 = *(_QWORD *)(v53 + 8);
    v55 = swift_getKeyPath(&unk_1001EB5D8);
    v56 = swift_getKeyPath(&unk_1001EB600);
    swift_retain(v54);
    static Published.subscript.getter(v146, v57, v55);
    swift_release(v54);
    swift_release(v55);
    swift_release(v56);
    v129 = LOBYTE(v146[0]);
    v58 = swift_getKeyPath(&unk_1001EB6F8);
    v59 = swift_getKeyPath(&unk_1001EB720);
    swift_retain(v54);
    static Published.subscript.getter(v146, v60, v58);
    swift_release(v54);
    swift_release(v58);
    swift_release(v59);
    v128 = *(_QWORD *)&v146[0];
    v127 = swift_allocObject(&unk_1002674F8, 24, 7);
    *(_QWORD *)(v127 + 16) = v52;
    v126 = swift_allocObject(&unk_100267520, 24, 7);
    *(_QWORD *)(v126 + 16) = v52;
    v61 = v52;
    LOBYTE(v52) = sub_1000875C8();
    v62 = *(void **)(v22 + 8);
    v63 = swift_getKeyPath(&unk_1001EB668);
    v64 = swift_getKeyPath(&unk_1001EB690);
    v65 = v62;
    static Published.subscript.getter(v140, v65, v63);

    swift_release(v63);
    swift_release(v64);
    v66 = *(void **)(v22 + 8);
    v67 = swift_getKeyPath(&unk_1001EB620);
    v68 = swift_getKeyPath(&unk_1001EB648);
    v69 = v66;
    v70 = v136;
    static Published.subscript.getter(v136, v69, v67);

    swift_release(v67);
    swift_release(v68);
    v71 = *(id *)(v22 + 8);
    v125 = sub_10008D348();
    v124 = v72;

    v73 = v71;
    v123 = sub_10008D128();
    v122 = v74;

    v75 = swift_allocObject(&unk_100267548, 24, 7);
    *(_QWORD *)(v75 + 16) = v73;
    v76 = *(void **)(v35 + 8);
    v77 = swift_allocObject(&unk_100267570, 24, 7);
    *(_QWORD *)(v77 + 16) = v76;
    v78 = *(_QWORD *)(v53 + 8);
    v79 = swift_getKeyPath(&unk_1001EB6B0);
    v80 = swift_getKeyPath(&unk_1001EB6D8);
    v81 = v73;
    v82 = v76;
    v83 = swift_retain_n(v78, 2);
    static Published.subscript.getter(v146, v83, v79);
    swift_release(v78);
    swift_release(v79);
    swift_release(v80);
    v121 = v146[0];
    v120 = v146[1];
    v119 = v146[2];
    v118 = v146[3];
    v117 = v146[4];
    v84 = v147;
    v85 = type metadata accessor for SharedTranslationOptions(0);
    v86 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
    *(_QWORD *)v8 = EnvironmentObject.init()(v85, v86);
    *((_QWORD *)v8 + 1) = v87;
    v8[16] = v131;
    v8[17] = v116;
    v8[18] = v115;
    v8[19] = v130;
    v8[20] = v129;
    *((_QWORD *)v8 + 3) = v128;
    *((_QWORD *)v8 + 4) = 0;
    v8[40] = 1;
    v88 = v127;
    *((_QWORD *)v8 + 6) = sub_10008BF88;
    *((_QWORD *)v8 + 7) = v88;
    v89 = v126;
    *((_QWORD *)v8 + 8) = sub_10008BF90;
    *((_QWORD *)v8 + 9) = v89;
    v8[80] = v52 & 1;
    v90 = (int *)v134;
    v91 = *(void (**)(char *, _QWORD *, uint64_t))(v135 + 32);
    v92 = v137;
    v91(&v8[*(int *)(v134 + 60)], v140, v137);
    v91(&v8[v90[16]], v70, v92);
    v93 = (uint64_t *)&v8[v90[17]];
    v94 = v124;
    *v93 = v125;
    v93[1] = v94;
    v95 = (uint64_t *)&v8[v90[18]];
    v96 = v122;
    *v95 = v123;
    v95[1] = v96;
    v97 = (void *(**)())&v8[v90[19]];
    *v97 = sub_10008BFB0;
    v97[1] = (void *(*)())v75;
    v98 = (void *(**)())&v8[v90[20]];
    *v98 = sub_10008BFD0;
    v98[1] = (void *(*)())v77;
    v99 = &v8[v90[21]];
    *(_QWORD *)v99 = 0;
    *((_QWORD *)v99 + 1) = 0;
    v100 = &v8[v90[22]];
    *(_QWORD *)v100 = 0;
    *((_QWORD *)v100 + 1) = 0;
    v101 = &v8[v90[23]];
    *(_QWORD *)v101 = sub_10008BFF0;
    *((_QWORD *)v101 + 1) = v78;
    v102 = &v8[v90[24]];
    v103 = v120;
    *(_OWORD *)v102 = v121;
    *((_OWORD *)v102 + 1) = v103;
    v104 = v118;
    *((_OWORD *)v102 + 2) = v119;
    *((_OWORD *)v102 + 3) = v104;
    *((_OWORD *)v102 + 4) = v117;
    *((_QWORD *)v102 + 10) = v84;
    v105 = static AnyTransition.move(edge:)(2);
    v106 = static AnyTransition.move(edge:)(2);
    v107 = static AnyTransition.asymmetric(insertion:removal:)(v105, v106);
    swift_release(v105);
    swift_release(v106);
    v108 = v139;
    sub_100032D68((uint64_t)v8, v139, type metadata accessor for SingleOrPairSpeakButton);
    v33 = v144;
    *(_QWORD *)(v108 + *(int *)(v144 + 36)) = v107;
    sub_100032DAC((uint64_t)v8, type metadata accessor for SingleOrPairSpeakButton);
    v109 = v138;
    sub_1000110A4(v108, v138, &qword_10028F540);
    v34 = v143;
    sub_1000110A4(v109, v143, &qword_10028F540);
    v32 = 0;
    a2 = v133;
    v20 = v132;
    goto LABEL_22;
  }
  v32 = 1;
  v34 = v143;
  v33 = v144;
LABEL_22:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v34, v32, 1, v33);
  v110 = v142;
  sub_10000B074((uint64_t)v20, v142, &qword_10028D058);
  v111 = v145;
  sub_10000B074(v34, v145, &qword_10028F548);
  sub_10000B074(v110, a2, &qword_10028D058);
  v112 = sub_100006DF4(&qword_10028F550);
  sub_10000B074(v111, a2 + *(int *)(v112 + 48), &qword_10028F548);
  sub_10000A020(v34, &qword_10028F548);
  sub_10000A020((uint64_t)v20, &qword_10028D058);
  sub_10000A020(v111, &qword_10028F548);
  return sub_10000A020(v110, &qword_10028D058);
}

uint64_t sub_100089C28@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void (*v24)(_QWORD *, uint64_t);
  _QWORD v26[2];

  v5 = type metadata accessor for ErrorStateView.Context(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (_QWORD *)((char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (_QWORD *)((char *)v26 - v14);
  if (a1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ErrorStateView.Context.conversation(_:), v5);
    if (a1 == 1)
      static ErrorStateView.noInternetConnection(context:)(v8);
    else
      static ErrorStateView.missingOfflineAssets(context:)(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v16 = v2 + *(int *)(type metadata accessor for ConversationView(0) + 32);
    v26[1] = a2;
    v17 = *(void **)(v16 + 8);
    KeyPath = swift_getKeyPath(&unk_1001EB620);
    v19 = swift_getKeyPath(&unk_1001EB648);
    v20 = v17;
    static Published.subscript.getter(v15, v20, KeyPath);

    swift_release(KeyPath);
    swift_release(v19);
    v21 = swift_getKeyPath(&unk_1001EB668);
    v22 = swift_getKeyPath(&unk_1001EB690);
    v23 = v20;
    static Published.subscript.getter(v13, v23, v21);

    swift_release(v21);
    swift_release(v22);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ErrorStateView.Context.conversation(_:), v5);
    static ErrorStateView.airplaneMode(sourceLocale:targetLocale:context:)(v15, v13, v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
    v24(v13, v9);
    return ((uint64_t (*)(_QWORD *, uint64_t))v24)(v15, v9);
  }
}

void sub_100089E80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v2 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  v3 = __chkstk_darwin(v2);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  UUID.init()(v3);
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  v7 = a1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId, v9, 33, 0);
  sub_10008BFFC((uint64_t)v5, v7);
  swift_endAccess(v9);
  sub_100092B90(0, 2);
}

uint64_t sub_100089F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  _QWORD v38[4];

  v35 = a2;
  v34 = sub_100006DF4(&qword_10028F4D8);
  __chkstk_darwin(v34);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028F4E0);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100006DF4(&qword_10028F4E8);
  v11 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000871BC((uint64_t)v10);
  v14 = type metadata accessor for ConversationViewsMenu(0);
  v15 = sub_100007D5C(&qword_10028F4F0, type metadata accessor for ConversationViewsMenu, (uint64_t)&unk_1001EC0C0);
  v16 = ToolbarItem<>.init(placement:content:)(v10, sub_10008A1F4, 0, v14, v15);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v16);
  v37 = a1;
  v17 = sub_100006DF4(&qword_10028B2E0);
  v18 = type metadata accessor for MoreOptionsMenu(255);
  v19 = sub_1000070BC(&qword_10028F4F8);
  v20 = sub_100007D5C(&qword_10028F500, type metadata accessor for MoreOptionsMenu, (uint64_t)&unk_1001F2078);
  v21 = sub_100012334(&qword_10028F508, &qword_10028F4F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v38[0] = v18;
  v38[1] = v19;
  v38[2] = v20;
  v38[3] = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v38, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)>>, 1);
  ToolbarItem<>.init(placement:content:)(v10, sub_10008BAD0, v36, v17, OpaqueTypeConformance2);
  v23 = v34;
  v24 = &v4[*(int *)(v34 + 48)];
  v25 = v31;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v4, v13, v31);
  v26 = v32;
  v27 = v24;
  v28 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v27, v7, v33);
  TupleToolbarContent.init(_:)(v4, v23);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
}

uint64_t sub_10008A1F4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  *a1 = swift_getKeyPath(&unk_1001EB7D0);
  v2 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(a1, v2, 0);
  v3 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for ConversationViewsMenu(0) + 20));
  v4 = type metadata accessor for SceneContext(0);
  v5 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  result = EnvironmentObject.init()(v4, v5);
  *v3 = result;
  v3[1] = v7;
  return result;
}

uint64_t sub_10008A284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD *, uint64_t);
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  _QWORD v91[4];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v107 = a2;
  v3 = (int *)type metadata accessor for ConversationView(0);
  v103 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v104 = v4;
  v105 = (uint64_t)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (_QWORD *)((char *)&v92 - v9);
  v106 = type metadata accessor for MoreOptionsMenu(0);
  __chkstk_darwin(v106);
  v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v100) = sub_1000878C4();
  v13 = *(_QWORD *)(a1 + v3[11] + 8);
  KeyPath = swift_getKeyPath(&unk_1001EB590);
  v15 = swift_getKeyPath(&unk_1001EB5B8);
  swift_retain(v13);
  static Published.subscript.getter(&v110, v16, KeyPath);
  swift_release(v13);
  swift_release(KeyPath);
  swift_release(v15);
  v17 = v110;
  if ((unint64_t)v110 >> 62)
  {
    if ((uint64_t)v110 < 0)
      v90 = v110;
    else
      v90 = v110 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v110);
    v18 = _CocoaArrayWrapper.endIndex.getter(v90);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v18 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v17);
  v99 = v18 != 0;
  v19 = a1 + v3[9];
  v20 = *(_QWORD *)(v19 + 8);
  v21 = swift_getKeyPath(&unk_1001EB5D8);
  v22 = swift_getKeyPath(&unk_1001EB600);
  swift_retain(v20);
  static Published.subscript.getter(&v110, v23, v21);
  swift_release(v20);
  swift_release(v21);
  swift_release(v22);
  v98 = v110;
  v24 = v3[8];
  v108 = a1;
  v25 = a1 + v24;
  v26 = *(void **)(v25 + 8);
  v27 = swift_getKeyPath(&unk_1001EB620);
  v28 = swift_getKeyPath(&unk_1001EB648);
  v29 = v26;
  static Published.subscript.getter(v10, v29, v27);

  swift_release(v27);
  swift_release(v28);
  v30 = *(void **)(v25 + 8);
  v31 = swift_getKeyPath(&unk_1001EB668);
  v32 = swift_getKeyPath(&unk_1001EB690);
  v33 = v30;
  static Published.subscript.getter(v8, v33, v31);

  swift_release(v31);
  swift_release(v32);
  v34 = *(_QWORD *)(v19 + 8);
  v35 = swift_getKeyPath(&unk_1001EB6B0);
  v36 = swift_getKeyPath(&unk_1001EB6D8);
  swift_retain(v34);
  static Published.subscript.getter(&v110, v37, v35);
  swift_release(v34);
  swift_release(v35);
  swift_release(v36);
  v96 = v110;
  v95 = v111;
  v94 = v112;
  v93 = v113;
  v92 = v114;
  v38 = v115;
  v39 = *(_QWORD *)(v19 + 8);
  v40 = swift_getKeyPath(&unk_1001EB6F8);
  v41 = swift_getKeyPath(&unk_1001EB720);
  swift_retain(v39);
  static Published.subscript.getter(&v110, v42, v40);
  swift_release(v39);
  swift_release(v40);
  swift_release(v41);
  v43 = v110;
  v44 = *(_QWORD *)(v19 + 8);
  v45 = type metadata accessor for SharedTranslationOptions(0);
  v46 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  swift_retain(v44);
  v47 = EnvironmentObject.init()(v45, v46);
  v49 = v48;
  v50 = type metadata accessor for SceneContext(0);
  v51 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v52 = EnvironmentObject.init()(v50, v51);
  *(_QWORD *)v12 = v47;
  *((_QWORD *)v12 + 1) = v49;
  *((_QWORD *)v12 + 2) = v52;
  *((_QWORD *)v12 + 3) = v53;
  *((_OWORD *)v12 + 2) = xmmword_1001EB430;
  v12[48] = v100 & 1;
  v12[49] = v99;
  v12[50] = v98;
  v54 = v12;
  v55 = (int *)v106;
  v56 = v102;
  v57 = *(void (**)(char *, _QWORD *, uint64_t))(v101 + 32);
  v57(&v54[*(int *)(v106 + 40)], v10, v102);
  v57(&v54[v55[11]], v8, v56);
  v58 = v55[12];
  v97 = (uint64_t)v54;
  v59 = &v54[v58];
  v60 = v95;
  *(_OWORD *)v59 = v96;
  *((_OWORD *)v59 + 1) = v60;
  v61 = v93;
  *((_OWORD *)v59 + 2) = v94;
  *((_OWORD *)v59 + 3) = v61;
  *((_OWORD *)v59 + 4) = v92;
  *((_QWORD *)v59 + 10) = v38;
  *(_QWORD *)&v54[v55[13]] = v43;
  v62 = &v54[v55[14]];
  *(_QWORD *)v62 = sub_10008C1A0;
  *((_QWORD *)v62 + 1) = v44;
  v63 = &v54[v55[15]];
  v109 = 0;
  State.init(wrappedValue:)(&v110, &v109, &type metadata for Bool);
  v64 = *((_QWORD *)&v110 + 1);
  *v63 = v110;
  *((_QWORD *)v63 + 1) = v64;
  v65 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001001FAD80);
  v101 = v66;
  v102 = v65;
  v99 = v67;
  v100 = v68;
  v69 = v108;
  v70 = v105;
  sub_100032D68(v108, v105, type metadata accessor for ConversationView);
  v71 = type metadata accessor for MainActor(0);
  v72 = static MainActor.shared.getter(v71);
  v73 = *(unsigned __int8 *)(v103 + 80);
  v74 = (v73 + 32) & ~v73;
  v75 = v74 + v104;
  v76 = v73 | 7;
  v77 = swift_allocObject(&unk_100267458, v74 + v104, v73 | 7);
  *(_QWORD *)(v77 + 16) = v72;
  *(_QWORD *)(v77 + 24) = &protocol witness table for MainActor;
  sub_10008B838(v70, v77 + v74);
  v78 = sub_100032D68(v69, v70, type metadata accessor for ConversationView);
  v79 = static MainActor.shared.getter(v78);
  v80 = swift_allocObject(&unk_100267480, v75, v76);
  *(_QWORD *)(v80 + 16) = v79;
  *(_QWORD *)(v80 + 24) = &protocol witness table for MainActor;
  sub_10008B838(v70, v80 + v74);
  v81 = Binding.init(get:set:)(&v110, sub_10008BB0C, v77, sub_10008BCF4, v80, &type metadata for Bool);
  v82 = v110;
  v83 = v111;
  __chkstk_darwin(v81);
  v84 = sub_100006DF4(&qword_10028F4F8);
  v91[2] = sub_100007D5C(&qword_10028F500, type metadata accessor for MoreOptionsMenu, (uint64_t)&unk_1001F2078);
  v91[3] = sub_100012334(&qword_10028F508, &qword_10028F4F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v91[0] = v55;
  v91[1] = v84;
  v85 = v101;
  v86 = v100;
  v87 = v83;
  v88 = v97;
  ((void (*)(uint64_t, uint64_t, _BOOL4, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t (*)@<X0>(_BYTE *@<X8>), _QWORD *))View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:))(v102, v101, v99, v100, v82, *((_QWORD *)&v82 + 1), v87, 1, sub_10008BD34, v91);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v85);
  swift_release(*((_QWORD *)&v82 + 1));
  swift_release(v82);
  return sub_100032DAC(v88, type metadata accessor for MoreOptionsMenu);
}

uint64_t sub_10008A9F8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  _BYTE v46[12];
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;

  v51 = a1;
  v57 = a2;
  v3 = type metadata accessor for ConversationView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100006DF4(&qword_10028E080);
  __chkstk_darwin(v7);
  v9 = &v46[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100006DF4(&qword_10028AEB8);
  v55 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v56 = &v46[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v11);
  v54 = &v46[-v14];
  v15 = __chkstk_darwin(v13);
  v53 = &v46[-v16];
  __chkstk_darwin(v15);
  v52 = &v46[-v17];
  v18 = LocalizedStringKey.init(stringLiteral:)(0x5241454C43, 0xE500000000000000);
  v49 = v19;
  v50 = v18;
  v47 = v20;
  v48 = v21;
  static ButtonRole.destructive.getter(v18);
  v22 = type metadata accessor for ButtonRole(0);
  v23 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v9, 0, 1, v22);
  sub_100032D68(a1, (uint64_t)v6, type metadata accessor for ConversationView);
  v24 = *(unsigned __int8 *)(v4 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = v25 + v5;
  v27 = v24 | 7;
  v28 = swift_allocObject(&unk_1002674A8, v26, v24 | 7);
  sub_10008B838((uint64_t)v6, v28 + v25);
  Button<>.init(_:role:action:)(v50, v49, v47 & 1, v48, v9, sub_10008BD40, v28);
  v29 = LocalizedStringKey.init(stringLiteral:)(0x4C45434E4143, 0xE600000000000000);
  v49 = v30;
  v50 = v29;
  v32 = v31;
  v34 = v33;
  static ButtonRole.cancel.getter();
  v23(v9, 0, 1, v22);
  sub_100032D68(v51, (uint64_t)v6, type metadata accessor for ConversationView);
  v35 = swift_allocObject(&unk_1002674D0, v26, v27);
  sub_10008B838((uint64_t)v6, v35 + v25);
  v36 = v53;
  Button<>.init(_:role:action:)(v50, v32, v34 & 1, v49, v9, sub_10008BEEC, v35);
  v37 = v54;
  v38 = v55;
  v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v55 + 16);
  v40 = v52;
  v39(v54, v52, v10);
  v41 = v56;
  v39(v56, v36, v10);
  v42 = v57;
  v39(v57, v37, v10);
  v43 = sub_100006DF4(&qword_10028F518);
  v39(&v42[*(int *)(v43 + 48)], v41, v10);
  v44 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
  v44(v36, v10);
  v44(v40, v10);
  v44(v41, v10);
  return ((uint64_t (*)(_BYTE *, uint64_t))v44)(v37, v10);
}

uint64_t sub_10008AD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8)
                 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  sub_100023AF4((_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v2);
  KeyPath = swift_getKeyPath(&unk_1001EB788);
  v5 = swift_getKeyPath(&unk_1001EB7B0);
  swift_retain(v1);
  static Published.subscript.getter(&v11, v6, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  v7 = v12;
  dispatch thunk of TranslationStore.clearHistory(sessionID:completion:)(v11, v12, nullsub_1, 0, v2, v3);
  swift_bridgeObjectRelease(v7);
  v8 = swift_getKeyPath(&unk_1001EB590);
  v9 = swift_getKeyPath(&unk_1001EB5B8);
  v11 = _swiftEmptyArrayStorage;
  swift_retain(v1);
  static Published.subscript.setter(&v11, v1, v8, v9);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  return swift_release(v1);
}

uint64_t sub_10008AE98(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001EB740);
    v3 = swift_getKeyPath(&unk_1001EB768);
    v8 = 0;
    swift_retain(v1);
    return static Published.subscript.setter(&v8, v1, KeyPath, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = type metadata accessor for SceneContext(0);
    v7 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
  return result;
}

void sub_10008AF4C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;

  v3 = v2;
  v5 = Notification.userInfo.getter();
  if (v5)
  {
    v6 = v5;
    v18[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationDurationUserInfoKey);
    v18[1] = v7;
    AnyHashable.init<A>(_:)(v19, v18, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v6 + 16) && (v8 = sub_1001A87EC((uint64_t)v19), (v9 & 1) != 0))
    {
      sub_10000A0EC(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)&v20);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
    }
    swift_bridgeObjectRelease(v6);
    sub_10005DEC0((uint64_t)v19);
    if (*((_QWORD *)&v21 + 1))
    {
      v10 = sub_10008BA78();
      if ((swift_dynamicCast(v18, &v20, (char *)&type metadata for Any + 8, v10, 6) & 1) != 0)
      {
        v11 = (void *)v18[0];
        if (*(_BYTE *)(*(_QWORD *)(v3 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8)
                      + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_isVisible) == 1)
        {
          v12 = static Animation.easeInOut(duration:)(objc_msgSend(v11, "doubleValue"));
          v13 = __chkstk_darwin(v12);
          withAnimation<A>(_:_:)(v13, sub_10008BAB4);
          swift_release(v12);

          return;
        }

      }
    }
    else
    {
      sub_10000A020((uint64_t)&v20, (uint64_t *)&unk_10028C0B0);
    }
  }
  v14 = (char *)(v3 + *(int *)(type metadata accessor for ConversationView(0) + 48));
  v15 = *v14;
  v16 = *((_QWORD *)v14 + 1);
  LOBYTE(v19[0]) = v15;
  v19[1] = v16;
  LOBYTE(v20) = a2 & 1;
  v17 = sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.setter(&v20, v17);
}

void sub_10008B138(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  char v3;
  _BYTE *v4;
  char v5;
  _QWORD v6[3];
  ValueMetadata *v7;
  unint64_t v8;

  v1 = *(_BYTE **)(a1 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8);
  v1[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_isVisible] = 1;
  v7 = &type metadata for TranslateFeatures;
  v2 = sub_100009BC4();
  v8 = v2;
  LOBYTE(v6[0]) = 8;
  v3 = isFeatureEnabled(_:)(v6);
  sub_100009C08(v6);
  if ((v3 & 1) != 0)
  {
    v7 = &type metadata for TranslateFeatures;
    v8 = v2;
    LOBYTE(v6[0]) = 8;
    v4 = v1;
    v5 = isFeatureEnabled(_:)(v6);
    sub_100009C08(v6);
    if ((v5 & 1) != 0)
      sub_10009B578();

  }
}

void sub_10008B20C(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  unint64_t v3;
  char v4;
  char *v5;
  char v6;
  uint64_t v7;
  char v8;
  char *v9;
  _QWORD v10[3];
  ValueMetadata *v11;
  unint64_t v12;

  v1 = *(_BYTE **)(a1 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8);
  v1[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_isVisible] = 0;
  v2 = v1;
  sub_100091874();

  v11 = &type metadata for TranslateFeatures;
  v3 = sub_100009BC4();
  v12 = v3;
  LOBYTE(v10[0]) = 8;
  v4 = isFeatureEnabled(_:)(v10);
  sub_100009C08(v10);
  if ((v4 & 1) != 0)
  {
    v11 = &type metadata for TranslateFeatures;
    v12 = v3;
    LOBYTE(v10[0]) = 8;
    v5 = v2;
    v6 = isFeatureEnabled(_:)(v10);
    sub_100009C08(v10);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper];
      v11 = &type metadata for TranslateFeatures;
      v12 = v3;
      LOBYTE(v10[0]) = 8;
      v8 = isFeatureEnabled(_:)(v10);
      sub_100009C08(v10);
      if ((v8 & 1) != 0)
      {
        v9 = *(char **)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;

        v5 = v9;
      }
    }

  }
}

void sub_10008B320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, _QWORD, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  unint64_t v15;
  char v16;
  void *v17;
  char *v18;
  char v19;
  char v20;
  char v21;
  id v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char *v28;
  _QWORD v30[3];
  ValueMetadata *v31;
  unint64_t v32;

  v5 = type metadata accessor for ScenePhase(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v30[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30[-1] - v10;
  v12 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v12((char *)&v30[-1] - v10, enum case for ScenePhase.active(_:), v5);
  v13 = static ScenePhase.== infix(_:_:)(a2, v11);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v11, v5);
  if ((v13 & 1) != 0)
  {
    v31 = &type metadata for TranslateFeatures;
    v15 = sub_100009BC4();
    v32 = v15;
    LOBYTE(v30[0]) = 8;
    v16 = isFeatureEnabled(_:)(v30);
    sub_100009C08(v30);
    if ((v16 & 1) == 0)
      return;
    v17 = *(void **)(a3 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8);
    v31 = &type metadata for TranslateFeatures;
    v32 = v15;
    LOBYTE(v30[0]) = 8;
    v18 = v17;
    v19 = isFeatureEnabled(_:)(v30);
    sub_100009C08(v30);
    if ((v19 & 1) != 0)
      sub_10009B578();
    goto LABEL_12;
  }
  v12(v11, enum case for ScenePhase.inactive(_:), v5);
  v20 = static ScenePhase.== infix(_:_:)(a2, v11);
  v14(v11, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v20 & 1) != 0)
  {
    v14(v9, v5);
  }
  else
  {
    v12(v11, enum case for ScenePhase.background(_:), v5);
    v21 = static ScenePhase.== infix(_:_:)(v9, v11);
    v14(v11, v5);
    v14(v9, v5);
    if ((v21 & 1) == 0)
      return;
  }
  v22 = *(id *)(a3 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8);
  sub_100091874();

  v31 = &type metadata for TranslateFeatures;
  v23 = sub_100009BC4();
  v32 = v23;
  LOBYTE(v30[0]) = 8;
  v24 = isFeatureEnabled(_:)(v30);
  sub_100009C08(v30);
  if ((v24 & 1) != 0)
  {
    v31 = &type metadata for TranslateFeatures;
    v32 = v23;
    LOBYTE(v30[0]) = 8;
    v18 = (char *)v22;
    v25 = isFeatureEnabled(_:)(v30);
    sub_100009C08(v30);
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper];
      v31 = &type metadata for TranslateFeatures;
      v32 = v23;
      LOBYTE(v30[0]) = 8;
      v27 = isFeatureEnabled(_:)(v30);
      sub_100009C08(v30);
      if ((v27 & 1) != 0)
      {
        v28 = *(char **)(v26 + 24);
        *(_QWORD *)(v26 + 24) = 0;

        v18 = v28;
      }
    }
LABEL_12:

  }
}

void sub_10008B5F8(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;

  v1 = *(_BYTE **)(a1 + *(int *)(type metadata accessor for ConversationView(0) + 32) + 8);
  v1[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_isVisible] = 0;
  v2 = v1;
  sub_100091874();

}

uint64_t sub_10008B654(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t KeyPath;
  uint64_t v11;
  __int16 v13;
  char v14;

  v2 = type metadata accessor for ConversationView(0);
  v3 = qword_10028A410;
  v4 = *(id *)(a1 + *(int *)(v2 + 32) + 8);
  if (v3 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA338);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Resetting ConversationViewModel", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  sub_10008FD60();
  sub_100090758(3, 1, 1);
  sub_1001D3410();
  KeyPath = swift_getKeyPath(&unk_1001EB520);
  v11 = swift_getKeyPath(&unk_1001EB548);
  v14 = 8;
  v13 = 0;
  return static Published.subscript.setter(&v13, v4, KeyPath, v11);
}

uint64_t sub_10008B7B0(uint64_t a1, char a2)
{
  uint64_t v3;
  char v5;

  type metadata accessor for ConversationView(0);
  v5 = a2;
  v3 = sub_100006DF4(&qword_10028CF50);
  return State.wrappedValue.setter(&v5, v3);
}

uint64_t sub_10008B82C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100089F50(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10008B838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10008B87C(uint64_t a1)
{
  sub_10008B890(a1, 1);
}

void sub_10008B888(uint64_t a1)
{
  sub_10008B890(a1, 0);
}

void sub_10008B890(uint64_t a1, char a2)
{
  type metadata accessor for ConversationView(0);
  sub_10008AF4C(a1, a2);
}

uint64_t sub_10008B8E4()
{
  return sub_10008BEF8((uint64_t (*)(uint64_t))sub_10008B138);
}

uint64_t sub_10008B8F4()
{
  return sub_10008BEF8((uint64_t (*)(uint64_t))sub_10008B20C);
}

void sub_10008B904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationView(0) - 8) + 80);
  sub_10008B320(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_10008B950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F4B8;
  if (!qword_10028F4B8)
  {
    v1 = sub_1000070BC(&qword_10028F470);
    sub_10008B9BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F4B8);
  }
  return result;
}

unint64_t sub_10008B9BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F4C0;
  if (!qword_10028F4C0)
  {
    v1 = sub_1000070BC(&qword_10028F468);
    sub_100012334(&qword_10028F4C8, &qword_10028F460, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F4C0);
  }
  return result;
}

uint64_t sub_10008BA4C()
{
  return sub_10008BEF8((uint64_t (*)(uint64_t))sub_10008B5F8);
}

uint64_t sub_10008BA6C()
{
  return sub_10008BEF8(sub_10008B654);
}

unint64_t sub_10008BA78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F200;
  if (!qword_10028F200)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028F200);
  }
  return result;
}

uint64_t sub_10008BAB4()
{
  uint64_t v0;

  return sub_10008B7B0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10008BAD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10008A284(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10008BB0C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationView(0) - 8) + 80);
  return sub_100087B44(v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t sub_10008BB50()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for ConversationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;

  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (_QWORD *)(v6 + v1[7]);
  v12 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }

  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  swift_release(*(_QWORD *)(v6 + v1[10] + 8));
  swift_release(*(_QWORD *)(v6 + v1[11] + 8));
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v6 + v1[13] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10008BCF4(char *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationView(0) - 8) + 80);
  return sub_100087CF0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_10008BD34@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10008A9F8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10008BD40()
{
  return sub_10008BEF8(sub_10008AD50);
}

uint64_t sub_10008BD50()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for ConversationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (_QWORD *)(v6 + v1[7]);
  v12 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }

  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  swift_release(*(_QWORD *)(v6 + v1[10] + 8));
  swift_release(*(_QWORD *)(v6 + v1[11] + 8));
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v6 + v1[13] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10008BEEC()
{
  return sub_10008BEF8(sub_10008AE98);
}

uint64_t sub_10008BEF8(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_10008BF64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10008BF88()
{
  uint64_t v0;

  sub_100089E80(*(_QWORD *)(v0 + 16));
}

void sub_10008BF90(char a1)
{
  sub_100092CA0(a1);
}

void *sub_10008BFB0()
{
  return sub_100092828();
}

void *sub_10008BFD0()
{
  return sub_1000926D8();
}

uint64_t sub_10008BFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10008C048()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;

  result = qword_10028F558;
  if (!qword_10028F558)
  {
    v1 = sub_1000070BC(&qword_10028F488);
    v2 = sub_1000070BC(&qword_10028F478);
    v4 = sub_1000070BC(&qword_10028F470);
    v5 = (void *)type metadata accessor for ScenePhase(255);
    v6 = sub_10008B950();
    v7 = (void *)sub_100007D5C(&qword_10028F4D0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v4 = v2;
    v5 = &type metadata for Bool;
    v6 = OpaqueTypeConformance2;
    v7 = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_10008C15C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F558);
  }
  return result;
}

unint64_t sub_10008C15C()
{
  unint64_t result;

  result = qword_10028F560;
  if (!qword_10028F560)
  {
    result = swift_getWitnessTable(&unk_1001ECB10, &type metadata for ErrorAlert);
    atomic_store(result, (unint64_t *)&qword_10028F560);
  }
  return result;
}

double sub_10008C1B0@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10008C1EC(a1, (uint64_t)&unk_1001EBE90, (uint64_t)&unk_1001EBEB8, a2);
}

uint64_t sub_10008C1C4(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C278(a1, a2, a3, a4, (uint64_t)&unk_1001EBE90, (uint64_t)&unk_1001EBEB8);
}

double sub_10008C1D8@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10008C1EC(a1, (uint64_t)&unk_1001EBED8, (uint64_t)&unk_1001EBF00, a2);
}

double sub_10008C1EC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  double result;
  __int128 v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(v8);
  swift_release(KeyPath);
  result = *(double *)&v10;
  *a4 = v10;
  return result;
}

uint64_t sub_10008C264(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C278(a1, a2, a3, a4, (uint64_t)&unk_1001EBED8, (uint64_t)&unk_1001EBF00);
}

uint64_t sub_10008C278(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t v11;
  _QWORD v13[2];

  v8 = *a1;
  v7 = a1[1];
  v9 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11 = swift_getKeyPath(a6);
  v13[0] = v8;
  v13[1] = v7;
  swift_bridgeObjectRetain(v7);
  return static Published.subscript.setter(v13, v9, KeyPath, v11);
}

uint64_t sub_10008C2F0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001EBAE8, (uint64_t)&unk_1001EBB10, a2);
}

uint64_t sub_10008C304(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C360(a1, a2, a3, a4, (uint64_t)&unk_1001EBAE8, (uint64_t)&unk_1001EBB10, 0x80000001001FAFC0);
}

uint64_t sub_10008C328@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001EBD28, (uint64_t)&unk_1001EBD50, a2);
}

uint64_t sub_10008C33C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C360(a1, a2, a3, a4, (uint64_t)&unk_1001EBD28, (uint64_t)&unk_1001EBD50, 0x80000001001FAFF0);
}

uint64_t sub_10008C360(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void *v19;
  uint64_t KeyPath;
  uint64_t v21;
  _QWORD v23[2];

  v23[1] = a7;
  v11 = type metadata accessor for Locale(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v23 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)v23 - v16, a1, v11);
  v19 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v21 = swift_getKeyPath(a6);
  v18(v15, (uint64_t)v17, v11);
  static Published.subscript.setter(v15, v19, KeyPath, v21);
  sub_10008C5CC(a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
}

uint64_t sub_10008C488@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001EBE48, (uint64_t)&unk_1001EBE70, a2);
}

uint64_t sub_10008C49C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000954C8(a1, a2, a3, a4, (uint64_t)&unk_1001EBE48, (uint64_t)&unk_1001EBE70);
}

char *sub_10008C4B0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel____lazy_storage___textManager;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel____lazy_storage___textManager];
  if (v2)
  {
    v3 = *(char **)&v0[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel____lazy_storage___textManager];
  }
  else
  {
    v4 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translator];
    v5 = type metadata accessor for TextStreamingTranslationManager(0);
    v6 = (char *)swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v7 = v4;
    v3 = sub_100097060(v7, (uint64_t)v0, v6, type metadata accessor for ConversationViewModel, (uint64_t)&off_1002676E0, (uint64_t)sub_100097B54, (uint64_t)&unk_100267868);

    v8 = *(_QWORD *)&v0[v1];
    *(_QWORD *)&v0[v1] = v3;
    swift_retain(v3);
    swift_release(v8);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10008C570()
{
  return sub_10008C5CC((uint64_t)&unk_1001EBAE8, (uint64_t)&unk_1001EBB10);
}

uint64_t sub_10008C594@<X0>(_QWORD *a1@<X8>)
{
  return sub_10004AA94((uint64_t)&unk_1001EBAE8, (uint64_t)&unk_1001EBB10, a1);
}

uint64_t sub_10008C5A8()
{
  return sub_10008C5CC((uint64_t)&unk_1001EBD28, (uint64_t)&unk_1001EBD50);
}

uint64_t sub_10008C5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  NSString v16;
  uint64_t v18;

  v5 = v2;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(a1);
  v11 = swift_getKeyPath(a2);
  static Published.subscript.getter(v9, v5, KeyPath, v11);
  swift_release(v11);
  swift_release(KeyPath);
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  Locale.identifier.getter(v12);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setObject:forKey:", v15, v16);

  return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10008C708@<X0>(_QWORD *a1@<X8>)
{
  return sub_10004AA94((uint64_t)&unk_1001EBD28, (uint64_t)&unk_1001EBD50, a1);
}

id sub_10008C71C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class isa;
  Class v14;
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v18;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v18 - v6);
  KeyPath = swift_getKeyPath(&unk_1001EBAE8);
  v9 = swift_getKeyPath(&unk_1001EBB10);
  static Published.subscript.getter(v7, v0, KeyPath, v9);
  swift_release(v9);
  swift_release(KeyPath);
  v10 = swift_getKeyPath(&unk_1001EBD28);
  v11 = swift_getKeyPath(&unk_1001EBD50);
  static Published.subscript.getter(v5, v0, v10, v11);
  swift_release(v11);
  swift_release(v10);
  v12 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v14 = Locale._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v12, "initWithSourceLocale:targetLocale:", isa, v14);

  v16 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
  v16(v5, v1);
  v16(v7, v1);
  return v15;
}

uint64_t sub_10008C898()
{
  return sub_10004AFC8((uint64_t)&unk_1001EBDB8, (uint64_t)&unk_1001EBDE0);
}

uint64_t sub_10008C8AC()
{
  return sub_10004AFC8((uint64_t)&unk_1001EBB30, (uint64_t)&unk_1001EBB58);
}

double sub_10008C8C0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1001EBC98);
  v4 = swift_getKeyPath(&unk_1001EBCC0);
  static Published.subscript.getter(v8, v1, KeyPath, v4);
  swift_release(v4);
  swift_release(KeyPath);
  v5 = v9;
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_10008C940()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EBCE0);
  v2 = swift_getKeyPath(&unk_1001EBD08);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10008C9B4()
{
  return sub_10004AE84((uint64_t)&unk_1001EBE90, (uint64_t)&unk_1001EBEB8);
}

uint64_t sub_10008C9C8()
{
  return sub_10004AE84((uint64_t)&unk_1001EBED8, (uint64_t)&unk_1001EBF00);
}

uint64_t sub_10008C9DC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EBD70);
  v2 = swift_getKeyPath(&unk_1001EBD98);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10008CA4C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EBC50);
  v2 = swift_getKeyPath(&unk_1001EBC78);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return (unsigned __int16)v4 | (BYTE2(v4) << 16);
}

uint64_t sub_10008CAC4()
{
  return sub_10004AFC8((uint64_t)&unk_1001EBE48, (uint64_t)&unk_1001EBE70);
}

void sub_10008CAD8(char *a1)
{
  sub_1001D597C(*a1);
}

void sub_10008CAE4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10008CB30()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6465766965636572, 0xED0000726F727245);
  swift_bridgeObjectRelease(0xED0000726F727245);
  return Hasher._finalize()();
}

void sub_10008CBBC()
{
  __asm { BR              X10 }
}

uint64_t sub_10008CBF8(uint64_t a1)
{
  String.hash(into:)(a1, 0x6465766965636572, 0xED0000726F727245);
  return swift_bridgeObjectRelease(0xED0000726F727245);
}

void sub_10008CC70(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10008CCB8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6465766965636572, 0xED0000726F727245);
  swift_bridgeObjectRelease(0xED0000726F727245);
  return Hasher._finalize()();
}

unint64_t sub_10008CD44@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000974A8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008CD70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10008CDA0 + 4 * byte_1001EB92F[*v0]))();
}

void sub_10008CDA0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "receivedError");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10008CDC8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "receivedFinal");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10008CDF0(_QWORD *a1@<X8>)
{
  *a1 = 0x7465736572;
  a1[1] = 0xE500000000000000;
}

void sub_10008CE08(_QWORD *a1@<X8>)
{
  *a1 = 0x69647541706F7473;
  a1[1] = 0xE90000000000006FLL;
}

uint64_t sub_10008CE28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v2 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter(&v13, v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  if ((v13 & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager);
    v4 = swift_getKeyPath(&unk_1001EBE00);
    v5 = swift_getKeyPath(&unk_1001EBE28);
    static Published.subscript.getter(&v13, v3, v4);
    swift_release(v5);
    swift_release(v4);
    v6 = v14;
    swift_bridgeObjectRelease(v14);
    if (!v6)
    {
      v9 = sub_10008C4B0();
      v10 = v9[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState];
      swift_release(v9);
      if (v10)
      {
        if (v10 == 1)
        {
          v7 = 1;
          v11 = 0xEB00000000676E69;
LABEL_11:
          swift_bridgeObjectRelease(v11);
          return v7 & 1;
        }
        v11 = 0xE500000000000000;
        v12 = 0x726F727265;
      }
      else
      {
        v11 = 0xE400000000000000;
        v12 = 1701602409;
      }
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, 0x74616C736E617274, 0xEB00000000676E69, 0);
      goto LABEL_11;
    }
  }
  v7 = 1;
  return v7 & 1;
}

id sub_10008CF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class isa;
  Class v14;
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  id v17;
  uint64_t v19;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v19 - v6);
  KeyPath = swift_getKeyPath(&unk_1001EBAE8);
  v9 = swift_getKeyPath(&unk_1001EBB10);
  static Published.subscript.getter(v7, v0, KeyPath, v9);
  swift_release(v9);
  swift_release(KeyPath);
  v10 = swift_getKeyPath(&unk_1001EBD28);
  v11 = swift_getKeyPath(&unk_1001EBD50);
  static Published.subscript.getter(v5, v0, v10, v11);
  swift_release(v11);
  swift_release(v10);
  v12 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v14 = Locale._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v12, "initWithSourceLocale:targetLocale:", isa, v14);

  v16 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
  v16(v5, v1);
  v16(v7, v1);
  v17 = objc_msgSend(v15, "isPassthrough");

  return v17;
}

uint64_t sub_10008D128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  __int16 v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;

  v1 = 0x6C69662E706F7473;
  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v3 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter(&v27, v0, KeyPath);
  swift_release(v3);
  swift_release(KeyPath);
  if (v27 != 1
    || (v4 = *(_WORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation),
        (v4 & 0xFF00) != 0x200)
    && ((v5 = v4 & 1,
         *(_WORD *)(v0
                                   + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) != 2)
      ? (v6 = v5 == 0)
      : (v6 = 0),
        !v6))
  {
    v7 = swift_getKeyPath(&unk_1001EBDB8);
    v8 = swift_getKeyPath(&unk_1001EBDE0);
    static Published.subscript.getter(&v27, v0, v7);
    swift_release(v8);
    swift_release(v7);
    if ((v27 & 1) == 0)
    {
      v1 = 0x6C6C69662E63696DLL;
      v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper);
      v10 = swift_getKeyPath(&unk_1001EBB78);
      v11 = swift_getKeyPath(&unk_1001EBBA0);
      static Published.subscript.getter(&v27, v9, v10);
      swift_release(v11);
      swift_release(v10);
      v12 = v28;
      if (v28)
      {
        v13 = v27;
        v14 = v29;
        v15 = v30;
        v16 = v31;
        v17 = v32;
        v18 = v33;
        v19 = v34;
        v20 = v35;
        v21 = v36;
        v22 = v37;
        if ((v33 == 4 || v33 == 1) && (v34 & 0xFFFFFFFFFFFFFFFELL) == 2)
        {
          v26 = v27;
          v23 = v29;
          v24 = v30;
          swift_bridgeObjectRetain(v32);
          v15 = v24;
          v14 = v23;
          v13 = v26;
          v1 = v16;
        }
        sub_10001613C(v13, v12, v14, v15, v16, v17, v18, v19, v20, v21, v22);
      }
    }
  }
  return v1;
}

uint64_t sub_10008D348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  __int16 v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = 0x6C69662E706F7473;
  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v4 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter((uint64_t *)((char *)&v11 + 1), v1, KeyPath, v4);
  swift_release(v4);
  swift_release(KeyPath);
  if (BYTE1(v11) != 1
    || (v5 = *(_WORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation),
        (v5 & 0xFF00) != 0x200)
    && ((v6 = v5 & 1,
         *(_WORD *)(v1
                                   + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) != 2)
      ? (v7 = v6 == 0)
      : (v7 = 1),
        v7))
  {
    v8 = swift_getKeyPath(&unk_1001EBDB8);
    v9 = swift_getKeyPath(&unk_1001EBDE0);
    static Published.subscript.getter(&v11, v1, v8, v9);
    swift_release(v9);
    swift_release(v8);
    if (!(_BYTE)v11)
      return 0x6C6C69662E63696DLL;
  }
  return v2;
}

void *sub_10008D480(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, _QWORD *);
  _QWORD *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  NSString v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  id v103;
  NSString v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  objc_class *v112;
  char *v113;
  uint64_t v114;
  uint64_t KeyPath;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  unint64_t v122;
  char *v123;
  void (*v124)(char *, uint64_t, uint64_t, char *);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  void (*v160)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __n128 v187;
  uint64_t v189;
  _QWORD *v190;
  void *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  void (**v207)(_QWORD, _QWORD, _QWORD);
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  id v250;
  objc_super v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;

  v9 = v8;
  v193 = a8;
  v248 = a6;
  v249 = a7;
  v192 = a5;
  v246 = a2;
  v247 = a4;
  v243 = a3;
  v191 = a1;
  v234 = sub_100006DF4(&qword_10028DEA0);
  v232 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v231 = (char *)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_100006DF4(&qword_10028EF60);
  v235 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v233 = (char *)&v189 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028EF68);
  v238 = *(_QWORD *)(v12 - 8);
  v239 = v12;
  __chkstk_darwin(v12);
  v237 = (char *)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = sub_100006DF4(&qword_10028DE90);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v223 = (char *)&v189 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_100006DF4(&qword_100296BC0);
  v222 = *(_QWORD *)(v224 - 8);
  v15 = __chkstk_darwin(v224);
  v221 = (char *)&v189 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v220 = (char *)&v189 - v17;
  v229 = sub_100006DF4(&qword_10028DE98);
  v228 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  v227 = (char *)&v189 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100006DF4(&qword_10028DEF8);
  v212 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v211 = (char *)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_100006DF4(&qword_10028F718);
  v215 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v214 = (char *)&v189 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = sub_100006DF4(&qword_10028F720);
  v218 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v216 = (char *)&v189 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v22);
  v230 = (char *)&v189 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100006DF4(&qword_10028B5A8);
  v205 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v204 = (char *)&v189 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100006DF4(&qword_10028B5B0);
  v209 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v208 = (char *)&v189 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = type metadata accessor for Locale(0);
  v190 = *(_QWORD **)(v245 - 8);
  v26 = __chkstk_darwin(v245);
  v201 = (char *)&v189 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v244 = (char *)&v189 - v29;
  v30 = __chkstk_darwin(v28);
  v242 = (char *)&v189 - v31;
  __chkstk_darwin(v30);
  v200 = (char *)&v189 - v32;
  v240 = (_QWORD *)sub_100006DF4(&qword_10028DF18);
  v207 = (void (**)(_QWORD, _QWORD, _QWORD))*(v240 - 1);
  __chkstk_darwin(v240);
  v203 = (char *)&v189 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_100006DF4(&qword_10028DF20);
  v199 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v198 = (char *)&v189 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = (_QWORD *)sub_100006DF4(&qword_10028B5B8);
  v197 = *(v241 - 1);
  __chkstk_darwin(v241);
  v36 = (char *)&v189 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100006DF4(&qword_10028F728);
  v195 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v38 = (char *)&v189 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100006DF4(&qword_10028EFB0);
  v39 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v41 = (char *)&v189 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v45 = (char *)&v189 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel____lazy_storage___textManager] = 0;
  v46 = &v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__disableMicrophone];
  LOBYTE(v252) = 0;
  v47 = v9;
  Published.init(initialValue:)(&v252, &type metadata for Bool);
  v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v48(v46, v45, v42);
  v49 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__isListening];
  LOBYTE(v252) = 0;
  Published.init(initialValue:)(&v252, &type metadata for Bool);
  v48(v49, v45, v42);
  v50 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partialSpeechResult];
  v254 = 0;
  v252 = 0u;
  v253 = 0u;
  v51 = sub_100006DF4(&qword_10028EBE8);
  Published.init(initialValue:)(&v252, v51);
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v50, v41, v194);
  v52 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partialTextResult];
  v252 = 0uLL;
  *(_QWORD *)&v253 = 0;
  v53 = sub_100006DF4(&qword_10028F690);
  Published.init(initialValue:)(&v252, v53);
  (*(void (**)(char *, char *, uint64_t))(v195 + 32))(v52, v38, v196);
  v54 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__deviceOwnerText];
  v252 = 0uLL;
  v55 = sub_100006DF4(&qword_10028D160);
  Published.init(initialValue:)(&v252, v55);
  v56 = *(void (**)(char *, char *, _QWORD *))(v197 + 32);
  v57 = v241;
  v56(v54, v36, v241);
  v58 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partnerText];
  v252 = 0uLL;
  Published.init(initialValue:)(&v252, v55);
  v56(v58, v36, v57);
  v59 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__stateError];
  LOBYTE(v252) = 3;
  v60 = sub_100006DF4(&qword_10028D350);
  v61 = v198;
  Published.init(initialValue:)(&v252, v60);
  (*(void (**)(char *, char *, uint64_t))(v199 + 32))(v59, v61, v202);
  v62 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__transactionalError];
  BYTE2(v252) = 8;
  LOWORD(v252) = 0;
  v63 = sub_100006DF4(&qword_10028D360);
  v64 = v203;
  Published.init(initialValue:)(&v252, v63);
  ((void (**)(char *, char *, _QWORD *))v207)[4](v62, v64, v240);
  v65 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__showErrorAlert];
  LOBYTE(v252) = 0;
  Published.init(initialValue:)(&v252, &type metadata for Bool);
  v202 = v42;
  v48(v65, v45, v42);
  v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_isVisible] = 0;
  v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_hasPerformedStopTone] = 0;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentRecordingStopTonePlaybackTask] = 0;
  *(_WORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation] = 512;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v66 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v66 = &_swiftEmptySetSingleton;
  }
  v67 = v193;
  v68 = v192;
  v69 = v191;
  v70 = v190;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_subscriptions] = v66;
  v71 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation;
  v72 = type metadata accessor for SELFLoggingInvocationWrapper(0);
  v73 = swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
  *(_QWORD *)(v73 + 16) = 0;
  v74 = v73 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters;
  v75 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 1, 1, v75);
  UUID.init()(v76);
  *(_BYTE *)(v73 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) = 0;
  *(_QWORD *)(v73 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabName) = 3;
  *(_QWORD *)&v47[v71] = v73;
  v77 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText];
  *(_QWORD *)v77 = 0;
  *((_QWORD *)v77 + 1) = 0;
  v78 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v70[7];
  v79 = v245;
  v78(&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale], 1, 1, v245);
  v80 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v78)(&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale], 1, 1, v79);
  v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_faceToFaceVisible] = 0;
  v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_redactTargetText] = 0;
  v81 = &v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId];
  UUID.init()(v80);
  v82 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 0, 1, v82);
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translator] = v69;
  v83 = v246;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_languagesService] = v246;
  v84 = v243;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session] = v243;
  v85 = objc_allocWithZone((Class)type metadata accessor for SpeechManager());
  v86 = v69;
  swift_retain(v83);
  swift_retain(v84);
  v87 = v68;
  v240 = v86;
  v207 = (void (**)(_QWORD, _QWORD, _QWORD))v87;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_speechManager] = sub_10016C6D8(v86, v87);
  v89 = v248;
  v88 = v249;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager] = v248;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_errorStateContext] = v88;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions] = v67;
  v90 = v247;
  *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper] = v247;
  v91 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain(v89);
  swift_retain(v88);
  v203 = v67;
  v92 = objc_msgSend(v91, "standardUserDefaults", swift_retain(v90).n128_f64[0]);
  v93 = String._bridgeToObjectiveC()();
  v94 = objc_msgSend(v92, "stringForKey:", v93);

  if (v94)
  {
    v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v97 = v96;

  }
  else
  {
    v97 = 0xE500000000000000;
    v95 = 0x53555F6E65;
  }
  v98 = v200;
  Locale.init(identifier:)(v95, v97);
  swift_beginAccess(&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__deviceOwnerLocale], &v252, 33, 0);
  v99 = (void (*)(char *, char *, uint64_t))v70[2];
  v100 = v242;
  v101 = v245;
  v99(v242, v98, v245);
  Published.init(initialValue:)(v100, v101);
  v102 = (void (*)(char *, uint64_t))v70[1];
  v102(v98, v101);
  swift_endAccess(&v252);
  v103 = objc_msgSend(v91, "standardUserDefaults");
  v104 = String._bridgeToObjectiveC()();
  v105 = objc_msgSend(v103, "stringForKey:", v104);

  if (v105)
  {
    v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
    v108 = v107;

  }
  else
  {
    v108 = 0xE500000000000000;
    v106 = 0x53455F7365;
  }
  v109 = v244;
  Locale.init(identifier:)(v106, v108);
  swift_beginAccess(&v47[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partnerLocale], &v252, 33, 0);
  v110 = v242;
  v111 = v245;
  v99(v242, v109, v245);
  Published.init(initialValue:)(v110, v111);
  v102(v109, v111);
  swift_endAccess(&v252);

  v112 = (objc_class *)type metadata accessor for ConversationViewModel(0);
  v251.receiver = v47;
  v251.super_class = v112;
  v113 = (char *)objc_msgSendSuper2(&v251, "init");
  v114 = *(_QWORD *)&v113[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_speechManager]
       + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
  *(_QWORD *)(v114 + 8) = &off_1002676F0;
  swift_unknownObjectWeakAssign(v114, v113);
  KeyPath = swift_getKeyPath(&unk_1001EBAE8);
  v116 = swift_getKeyPath(&unk_1001EBB10);
  v117 = v113;
  v244 = v117;
  static Published.subscript.getter(v110, v117, KeyPath);
  swift_release(KeyPath);
  swift_release(v116);
  v118 = swift_getKeyPath(&unk_1001EBD28);
  v119 = swift_getKeyPath(&unk_1001EBD50);
  v120 = v201;
  static Published.subscript.getter(v201, v117, v118);
  swift_release(v118);
  swift_release(v119);
  sub_100127838();
  v102(v120, v111);
  v102(v110, v111);
  swift_beginAccess(v248 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentlyPlayingTranslationID, &v252, 33, 0);
  v121 = v204;
  Published.projectedValue.getter(v241);
  swift_endAccess(&v252);
  v122 = sub_10001D948();
  *(_QWORD *)&v252 = static OS_dispatch_queue.main.getter(v122);
  v123 = (char *)type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v124 = *(_QWORD **)(*((_QWORD *)v123 - 1) + 56);
  v125 = (uint64_t)v230;
  v201 = v123;
  ((void (*)(char *, uint64_t, uint64_t, char *))v124)(v230, 1, 1, v123);
  v241 = v124;
  v126 = sub_100012334(&qword_10028B5C0, &qword_10028B5A8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v127 = sub_100007D5C((unint64_t *)&qword_100295550, (uint64_t (*)(uint64_t))sub_10001D948, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v128 = v208;
  v129 = v206;
  v242 = (char *)v127;
  Publisher.receive<A>(on:options:)(&v252, v125, v206, v122, v126, v127);
  sub_10000A020(v125, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v205 + 8))(v121, v129);
  v130 = swift_allocObject(&unk_100267850, 24, 7);
  v131 = v244;
  swift_unknownObjectWeakInit(v130 + 16, v244);
  v132 = sub_100012334(&qword_10028B5C8, &qword_10028B5B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v133 = v210;
  v134 = Publisher<>.sink(receiveValue:)(sub_1000979FC, v130, v210, v132);
  v135 = swift_release(v130);
  (*(void (**)(char *, uint64_t, __n128))(v209 + 8))(v128, v133, v135);
  v136 = (uint64_t)&v131[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_subscriptions];
  swift_beginAccess(&v131[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_subscriptions], &v252, 33, 0);
  AnyCancellable.store(in:)(v136);
  swift_endAccess(&v252);
  swift_release(v134);
  swift_beginAccess(v247 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper__isAnyHeadsetConnected, &v252, 33, 0);
  v137 = v211;
  Published.projectedValue.getter(v202);
  swift_endAccess(&v252);
  v138 = sub_100012334(&qword_10028DF40, &qword_10028DEF8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v139 = v214;
  v140 = v213;
  Publisher<>.removeDuplicates()(v213, v138, &protocol witness table for Bool);
  v141 = (*(uint64_t (**)(char *, uint64_t))(v212 + 8))(v137, v140);
  *(_QWORD *)&v252 = static OS_dispatch_queue.main.getter(v141);
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))v124)(v125, 1, 1, v123);
  v142 = sub_100012334(&qword_10028F730, &qword_10028F718, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v143 = v216;
  v144 = v217;
  Publisher.receive<A>(on:options:)(&v252, v125, v217, v122, v142, v127);
  sub_10000A020(v125, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v215 + 8))(v139, v144);
  v145 = sub_100012334(&qword_10028F738, &qword_10028F720, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v146 = v219;
  v147 = Publisher<>.sink(receiveValue:)(sub_10008EC5C, 0, v219, v145);
  (*(void (**)(char *, uint64_t))(v218 + 8))(v143, v146);
  v245 = v136;
  swift_beginAccess(v136, &v252, 33, 0);
  AnyCancellable.store(in:)(v136);
  swift_endAccess(&v252);
  swift_release(v147);
  v148 = v244;
  swift_beginAccess(&v244[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__deviceOwnerLocale], &v252, 33, 0);
  v149 = sub_100006DF4(&qword_10028F270);
  v150 = (uint64_t)v220;
  Published.projectedValue.getter(v149);
  swift_endAccess(&v252);
  swift_beginAccess(&v148[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partnerLocale], &v252, 33, 0);
  v151 = (uint64_t)v221;
  Published.projectedValue.getter(v149);
  swift_endAccess(&v252);
  v152 = (uint64_t)v223;
  LanguagesService.$models.getter(v153);
  v154 = sub_1000B054C(v150, v151, v152);
  (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v152, v226);
  v155 = *(void (**)(uint64_t, uint64_t))(v222 + 8);
  v156 = v224;
  v155(v151, v224);
  v157 = ((uint64_t (*)(uint64_t, uint64_t))v155)(v150, v156);
  *(_QWORD *)&v252 = v154;
  v158 = v122;
  v250 = (id)static OS_dispatch_queue.main.getter(v157);
  v159 = v201;
  v160 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD *))v241;
  ((void (*)(uint64_t, uint64_t, uint64_t, char *))v241)(v125, 1, 1, v201);
  v161 = sub_100006DF4(&qword_10028DFA0);
  v162 = sub_100012334(&qword_10028DFA8, &qword_10028DFA0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v163 = v227;
  v164 = v122;
  v165 = v242;
  Publisher.receive<A>(on:options:)(&v250, v125, v161, v164, v162, v242);
  sub_10000A020(v125, &qword_100296BE0);

  swift_release(v252);
  v166 = swift_allocObject(&unk_100267850, 24, 7);
  swift_unknownObjectWeakInit(v166 + 16, v148);
  v167 = sub_100012334(&qword_10028DFB0, &qword_10028DE98, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v168 = v229;
  v169 = Publisher<>.sink(receiveValue:)(sub_100097A04, v166, v229, v167);
  v170 = swift_release(v166);
  (*(void (**)(char *, uint64_t, __n128))(v228 + 8))(v163, v168, v170);
  v171 = v245;
  swift_beginAccess(v245, &v252, 33, 0);
  AnyCancellable.store(in:)(v171);
  swift_endAccess(&v252);
  swift_release(v169);
  v172 = v243;
  swift_beginAccess(v243 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__currentID, &v252, 33, 0);
  v173 = sub_100006DF4(&qword_10028B5A0);
  v174 = v231;
  Published.projectedValue.getter(v173);
  v175 = swift_endAccess(&v252);
  *(_QWORD *)&v252 = static OS_dispatch_queue.main.getter(v175);
  v160(v125, 1, 1, v159);
  v176 = sub_100012334(&qword_10028DF80, &qword_10028DEA0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v177 = v233;
  v178 = v234;
  Publisher.receive<A>(on:options:)(&v252, v125, v234, v158, v176, v165);
  sub_10000A020(v125, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v232 + 8))(v174, v178);
  v179 = sub_100012334(&qword_10028EFE8, &qword_10028EF60, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v180 = v237;
  v181 = v236;
  Publisher.dropFirst(_:)(1, v236, v179);
  (*(void (**)(char *, uint64_t))(v235 + 8))(v177, v181);
  v182 = swift_allocObject(&unk_100267850, 24, 7);
  v183 = v244;
  swift_unknownObjectWeakInit(v182 + 16, v244);
  v184 = sub_100012334(&qword_10028EFF0, &qword_10028EF68, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v185 = v239;
  v186 = Publisher<>.sink(receiveValue:)(sub_100097A0C, v182, v239, v184);
  v187 = swift_release(v182);
  (*(void (**)(char *, uint64_t, __n128))(v238 + 8))(v180, v185, v187);
  swift_beginAccess(v171, &v252, 33, 0);
  AnyCancellable.store(in:)(v171);
  swift_endAccess(&v252);
  swift_release(v186);

  swift_release(v246);
  swift_release(v172);
  swift_release(v247);

  swift_release(v248);
  swift_release(v249);

  return v183;
}

uint64_t sub_10008EBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t KeyPath;
  uint64_t v8;
  BOOL v9;
  _BYTE v10[24];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if (v2)
      v6 = sub_10008FEB8();
    else
      v6 = 0;
    KeyPath = swift_getKeyPath(&unk_1001EBDB8);
    v8 = swift_getKeyPath(&unk_1001EBDE0);
    v9 = v6;
    return static Published.subscript.setter(&v9, v5, KeyPath, v8);
  }
  return result;
}

uint64_t sub_10008EC5C(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[31];
  char v6;

  v1 = *a1;
  if (qword_10028A368 != -1)
    swift_once(&qword_10028A368, sub_100011954);
  v2 = sub_100006DF4(&qword_10028ACD8);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA018);
  v6 = v1;
  swift_beginAccess(v3, v5, 33, 0);
  Tips.Parameter.wrappedValue.setter(&v6, v2);
  return swift_endAccess(v5);
}

uint64_t sub_10008ECF8(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_1001EBD70);
    v7 = swift_getKeyPath(&unk_1001EBD98);
    v8 = v2;
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

void sub_10008ED80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  void *v9;
  _BYTE v10[24];

  v2 = a2 + 16;
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000F66C(v3, (uint64_t)qword_1002AA338);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Clearing input fields since the session timed out", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_beginAccess(v2, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v9 = (void *)Strong;
    sub_100091694(1);

  }
}

uint64_t sub_10008EE88(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v4 + 112) = a2;
  *(_QWORD *)(v4 + 120) = v3;
  *(_BYTE *)(v4 + 233) = a3;
  *(_QWORD *)(v4 + 104) = a1;
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  *(_QWORD *)(v4 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  *(_QWORD *)(v4 + 136) = v6;
  *(_QWORD *)(v4 + 144) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 152) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 160) = v8;
  *(_QWORD *)(v4 + 168) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  *(_QWORD *)(v4 + 176) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 184) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 200) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 208) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 216) = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 224) = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  return swift_task_switch(sub_10008EFBC, v13, v14);
}

void *sub_10008EFBC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __n128 v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 224));
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = v1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10000F66C(v11, (uint64_t)qword_1002AA338);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "TextView's text was empty or just whitespaces when trying to start text translation", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    *(_QWORD *)(v0 + 40) = &type metadata for TranslateFeatures;
    *(_QWORD *)(v0 + 48) = sub_100009BC4();
    *(_BYTE *)(v0 + 16) = 4;
    v16 = isFeatureEnabled(_:)(v0 + 16);
    sub_100009C08((_QWORD *)(v0 + 16));
    if ((v16 & 1) != 0)
      sub_10008FD60();
    goto LABEL_18;
  }
  v4 = *(_QWORD **)(v0 + 208);
  v5 = *(_QWORD **)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 120);
  v61 = v2;
  if ((*(_BYTE *)(v0 + 233) & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1001EBD28);
    v18 = swift_getKeyPath(&unk_1001EBD50);
    static Published.subscript.getter(v5, v6, KeyPath);
    swift_release(KeyPath);
    swift_release(v18);
    v9 = swift_getKeyPath(&unk_1001EBAE8);
    v10 = &unk_1001EBB10;
  }
  else
  {
    v7 = swift_getKeyPath(&unk_1001EBAE8);
    v8 = swift_getKeyPath(&unk_1001EBB10);
    static Published.subscript.getter(v5, v6, v7);
    swift_release(v7);
    swift_release(v8);
    v9 = swift_getKeyPath(&unk_1001EBD28);
    v10 = &unk_1001EBD50;
  }
  v19 = swift_getKeyPath(v10);
  static Published.subscript.getter(v4, v6, v9);
  v62 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 200);
  v67 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 192);
  v65 = v22;
  v23 = *(_QWORD *)(v0 + 176);
  v69 = v21;
  v70 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 144);
  v72 = *(_QWORD *)(v0 + 152);
  v25 = *(int **)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 120);
  swift_release(v9);
  swift_release(v19);
  v60 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation;
  v64 = *(_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  v27(v20, v62, v23);
  v27(v21, v67, v23);
  if (*(_BYTE *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_faceToFaceVisible))
    v28 = 1;
  else
    v28 = 2;
  v68 = v28;
  v63 = v26;
  v29 = *(_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions);
  v30 = swift_getKeyPath(&unk_1001EBAA0);
  v31 = swift_getKeyPath(&unk_1001EBAC8);
  swift_retain(v64);
  static Published.subscript.getter((_QWORD *)(v0 + 232), v29, v30);
  swift_release(v30);
  swift_release(v31);
  LOBYTE(v29) = *(_BYTE *)(v0 + 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v24 + v25[14], 1, 1, v72);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32);
  v32(v24, v20, v23);
  v32(v24 + v25[5], v69, v23);
  *(_QWORD *)(v24 + v25[6]) = 1;
  *(_QWORD *)(v24 + v25[7]) = 1;
  *(_QWORD *)(v24 + v25[8]) = v68;
  *(_BYTE *)(v24 + v25[9]) = v29;
  v33 = v24 + v25[10];
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  *(_BYTE *)(v24 + v25[11]) = 0;
  *(_QWORD *)(v24 + v25[12]) = 0;
  v34 = v24 + v25[13];
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  sub_10015AEE0(v24);
  result = *(void **)(v64 + 16);
  if (result)
  {
    v36 = *(_QWORD *)(v0 + 208);
    v74 = *(_QWORD *)(v0 + 216);
    v59 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 168);
    v66 = *(_QWORD *)(v0 + 176);
    v38 = *(_QWORD *)(v0 + 144);
    v71 = *(_QWORD *)(v0 + 160);
    v73 = *(_QWORD *)(v0 + 152);
    v39 = *(_QWORD *)(v0 + 120);
    v40 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 104);
    v42 = *(_QWORD *)(v0 + 112);
    v43 = objc_msgSend(result, "invocationId");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release(v64);

    sub_100097944(v38);
    v44 = sub_10008C4B0();
    sub_10018B338(v41, v42, v74, v36, 0, v37);
    swift_release(v44);
    v45 = *(_QWORD *)(v63 + v60);
    swift_retain(v45);
    sub_10015B1F4(v41, v61, v74, v36, 1);
    swift_release(v45);
    v46 = (_QWORD *)(v39 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText);
    v47 = *(_QWORD *)(v39 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText + 8);
    *v46 = 0;
    v46[1] = 0;
    v48 = swift_bridgeObjectRelease(v47);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v59 + 56);
    v49(v40, 1, 1, v66, v48);
    v50 = v39 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale;
    swift_beginAccess(v39 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale, v0 + 56, 33, 0);
    sub_10002D560(v40, v50, (uint64_t *)&unk_10028FE50);
    swift_endAccess(v0 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49)(v40, 1, 1, v66);
    v51 = v39 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale;
    swift_beginAccess(v39 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale, v0 + 80, 33, 0);
    sub_10002D560(v40, v51, (uint64_t *)&unk_10028FE50);
    swift_endAccess(v0 + 80);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v37, v73);
    v52 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v52(v36, v66);
    v52(v74, v66);
LABEL_18:
    v53 = *(_QWORD *)(v0 + 208);
    v55 = *(_QWORD *)(v0 + 192);
    v54 = *(_QWORD *)(v0 + 200);
    v56 = *(_QWORD *)(v0 + 168);
    v57 = *(_QWORD *)(v0 + 144);
    v58 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_10008F5D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v4 + 96) = a2;
  *(_QWORD *)(v4 + 104) = v3;
  *(_BYTE *)(v4 + 217) = a3;
  *(_QWORD *)(v4 + 88) = a1;
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  *(_QWORD *)(v4 + 112) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  *(_QWORD *)(v4 + 120) = v6;
  *(_QWORD *)(v4 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 136) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 144) = v8;
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  *(_QWORD *)(v4 + 160) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 168) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 200) = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 208) = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  return swift_task_switch(sub_10008F704, v13, v14);
}

void *sub_10008F704()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(__n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void *result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  __n128 v61;
  void (*v62)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(__n128);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 208));
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = v1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10000F66C(v11, (uint64_t)qword_1002AA338);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "TextView's text was empty or just whitespaces when trying to do streaming text translation", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    goto LABEL_22;
  }
  v4 = *(_QWORD **)(v0 + 192);
  v5 = *(_QWORD **)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 104);
  if ((*(_BYTE *)(v0 + 217) & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1001EBD28);
    v17 = swift_getKeyPath(&unk_1001EBD50);
    static Published.subscript.getter(v5, v6, KeyPath);
    swift_release(KeyPath);
    swift_release(v17);
    v9 = swift_getKeyPath(&unk_1001EBAE8);
    v10 = &unk_1001EBB10;
  }
  else
  {
    v7 = swift_getKeyPath(&unk_1001EBAE8);
    v8 = swift_getKeyPath(&unk_1001EBB10);
    static Published.subscript.getter(v5, v6, v7);
    swift_release(v7);
    swift_release(v8);
    v9 = swift_getKeyPath(&unk_1001EBD28);
    v10 = &unk_1001EBD50;
  }
  v18 = swift_getKeyPath(v10);
  static Published.subscript.getter(v4, v6, v9);
  swift_release(v9);
  swift_release(v18);
  v19 = sub_10008C4B0();
  v20 = sub_1001886C0();
  v22 = v21;
  swift_release(v19);
  v23 = swift_bridgeObjectRelease(v22);
  v24 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v24 = v20 & 0xFFFFFFFFFFFFLL;
  if (!v24 && (sub_10008CF94() & 1) == 0)
  {
    v26 = *(_QWORD *)(v0 + 96);
    v25 = *(_BYTE **)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 88);
    v28 = *(_BYTE *)(v0 + 217) & 1;
    v25[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_redactTargetText] = 1;
    v29 = swift_getKeyPath(&unk_1001EBCE0);
    v30 = swift_getKeyPath(&unk_1001EBD08);
    *(_QWORD *)(v0 + 64) = v28;
    *(_QWORD *)(v0 + 72) = v27;
    *(_QWORD *)(v0 + 80) = v2;
    swift_bridgeObjectRetain(v26);
    static Published.subscript.setter(v0 + 64, v25, v29, v30);
  }
  v74 = v2;
  v31 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 160);
  v33 = *(_QWORD *)(v0 + 168);
  v75 = *(_QWORD *)(v0 + 144);
  v76 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 128);
  v80 = *(_QWORD *)(v0 + 136);
  v36 = *(int **)(v0 + 120);
  v37 = *(_QWORD *)(v0 + 104);
  v38 = *(_QWORD *)(v37 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation);
  v39 = *(void (**)(__n128))(v33 + 16);
  v39(v23);
  v73 = v39;
  ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v32, v31, v34);
  if (*(_BYTE *)(v37 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_faceToFaceVisible))
    v40 = 1;
  else
    v40 = 2;
  v77 = v40;
  v41 = *(_QWORD *)(v37 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions);
  v42 = swift_getKeyPath(&unk_1001EBAA0);
  v43 = swift_getKeyPath(&unk_1001EBAC8);
  swift_retain(v38);
  static Published.subscript.getter((_QWORD *)(v0 + 216), v41, v42);
  swift_release(v42);
  swift_release(v43);
  LOBYTE(v43) = *(_BYTE *)(v0 + 216);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v35 + v36[14], 1, 1, v80);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v44(v35, v76, v34);
  v44(v35 + v36[5], v32, v34);
  *(_QWORD *)(v35 + v36[6]) = 1;
  *(_QWORD *)(v35 + v36[7]) = 1;
  *(_QWORD *)(v35 + v36[8]) = v77;
  *(_BYTE *)(v35 + v36[9]) = v43;
  v45 = v35 + v36[10];
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = 1;
  *(_BYTE *)(v35 + v36[11]) = 0;
  *(_QWORD *)(v35 + v36[12]) = 0;
  v46 = v35 + v36[13];
  *(_QWORD *)v46 = 0;
  *(_BYTE *)(v46 + 8) = 1;
  sub_10015AEE0(v35);
  v81 = v38;
  result = *(void **)(v38 + 16);
  if (result)
  {
    v48 = *(_QWORD *)(v0 + 192);
    v82 = *(_QWORD *)(v0 + 200);
    v49 = *(_QWORD *)(v0 + 160);
    v72 = *(_QWORD *)(v0 + 168);
    v50 = *(_QWORD *)(v0 + 152);
    v51 = *(_QWORD *)(v0 + 128);
    v78 = *(_QWORD *)(v0 + 144);
    v79 = *(_QWORD *)(v0 + 136);
    v52 = *(_QWORD *)(v0 + 104);
    v53 = *(_QWORD *)(v0 + 112);
    v54 = *(_QWORD *)(v0 + 88);
    v55 = *(_QWORD *)(v0 + 96);
    v56 = objc_msgSend(result, "invocationId");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release(v81);

    sub_100097944(v51);
    v57 = v52;
    v58 = sub_10008C4B0();
    sub_10018A910(v54, v55, v82, v48, v50);
    swift_release(v58);
    v59 = (uint64_t *)(v57 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText);
    v60 = *(_QWORD *)(v57 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText + 8);
    *v59 = v54;
    v59[1] = v74;
    swift_bridgeObjectRetain(v55);
    v61 = swift_bridgeObjectRelease(v60);
    ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v73)(v53, v82, v49, v61);
    v62 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56);
    v62(v53, 0, 1, v49);
    v63 = v57 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale;
    swift_beginAccess(v57 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale, v0 + 16, 33, 0);
    sub_10002D560(v53, v63, (uint64_t *)&unk_10028FE50);
    swift_endAccess(v0 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v73)(v53, v48, v49);
    v62(v53, 0, 1, v49);
    v64 = v57 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale;
    swift_beginAccess(v57 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale, v0 + 40, 33, 0);
    sub_10002D560(v53, v64, (uint64_t *)&unk_10028FE50);
    swift_endAccess(v0 + 40);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v50, v79);
    v65 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v65(v48, v49);
    v65(v82, v49);
LABEL_22:
    v66 = *(_QWORD *)(v0 + 192);
    v68 = *(_QWORD *)(v0 + 176);
    v67 = *(_QWORD *)(v0 + 184);
    v69 = *(_QWORD *)(v0 + 152);
    v70 = *(_QWORD *)(v0 + 128);
    v71 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

double sub_10008FD60()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t KeyPath;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  double result;
  _QWORD v14[3];

  v1 = v0;
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA338);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Resetting text streaming", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1001EBCE0);
  v8 = swift_getKeyPath(&unk_1001EBD08);
  memset(v14, 0, sizeof(v14));
  v9 = v1;
  static Published.subscript.setter(v14, v9, KeyPath, v8);
  v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_redactTargetText] = 0;
  v10 = sub_10008C4B0();
  sub_10018898C();
  swift_release(v10);
  v11 = &v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText];
  v12 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText + 8];
  *v11 = 0;
  v11[1] = 0;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

BOOL sub_10008FEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions);
  KeyPath = swift_getKeyPath(&unk_1001EBF20);
  v3 = swift_getKeyPath(&unk_1001EBF48);
  static Published.subscript.getter(&v12, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  if (v12 != 1)
    return 0;
  v4 = swift_getKeyPath(&unk_1001EBF68);
  v5 = swift_getKeyPath(&unk_1001EBF90);
  static Published.subscript.getter(&v12, v1, v4);
  swift_release(v4);
  swift_release(v5);
  if (v12 != 1)
    return 0;
  v15 = &type metadata for TranslateFeatures;
  v16 = sub_100009BC4();
  LOBYTE(v12) = 8;
  v6 = isFeatureEnabled(_:)(&v12);
  sub_100009C08(&v12);
  if ((v6 & 1) == 0)
    return 1;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper);
  v8 = swift_getKeyPath(&unk_1001EBB78);
  v9 = swift_getKeyPath(&unk_1001EBBA0);
  static Published.subscript.getter(&v12, v7, v8);
  swift_release(v8);
  swift_release(v9);
  if (!v13)
    return 1;
  v10 = v19;
  sub_10001613C(v12, v13, v14, (uint64_t)v15, v16, v17, v18, v19, v20, v21, v22);
  return (unint64_t)(v10 - 4) < 0xFFFFFFFFFFFFFFFELL;
}

void *sub_10009005C(int a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  void *result;
  char v52;
  int v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD v88[3];
  uint64_t v89;
  uint64_t v90;

  v3 = v2;
  v6 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v6);
  v81 = (uint64_t)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v82 = *(_QWORD *)(v11 - 8);
  v83 = v11;
  __chkstk_darwin(v11);
  v78 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  v87 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v86 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v85 = (char *)&v74 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (uint64_t *)((char *)&v74 - v19);
  __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v74 - v21);
  KeyPath = swift_getKeyPath(&unk_1001EBC50);
  v24 = swift_getKeyPath(&unk_1001EBC78);
  static Published.subscript.getter(v88, v3, KeyPath);
  swift_release(v24);
  swift_release(KeyPath);
  if (BYTE2(v88[0]) << 16 != 0x80000)
  {
    v25 = swift_getKeyPath(&unk_1001EBC50);
    v26 = swift_getKeyPath(&unk_1001EBC78);
    BYTE2(v88[0]) = 8;
    LOWORD(v88[0]) = 0;
    static Published.subscript.setter(v88, v3, v25, v26);
  }
  if ((a2 & 1) != 0)
    v27 = 256;
  else
    v27 = 0;
  *(_WORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation] = v27 & 0xFF00 | a1;
  v79 = a2;
  v75 = a1;
  if (a1 != 2 && (a1 & 1) != 0)
  {
    v32 = swift_getKeyPath(&unk_1001EBD28);
    v33 = swift_getKeyPath(&unk_1001EBD50);
    static Published.subscript.getter(v22, v3, v32);
    swift_release(v33);
    swift_release(v32);
    v30 = swift_getKeyPath(&unk_1001EBAE8);
    v31 = &unk_1001EBB10;
  }
  else
  {
    v28 = swift_getKeyPath(&unk_1001EBAE8);
    v29 = swift_getKeyPath(&unk_1001EBB10);
    static Published.subscript.getter(v22, v3, v28);
    swift_release(v29);
    swift_release(v28);
    v30 = swift_getKeyPath(&unk_1001EBD28);
    v31 = &unk_1001EBD50;
  }
  v34 = swift_getKeyPath(v31);
  static Published.subscript.getter(v20, v3, v30);
  swift_release(v34);
  swift_release(v30);
  v35 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation];
  v36 = *(void (**)(char *, _QWORD *, uint64_t))(v87 + 16);
  v76 = v22;
  v36(v85, v22, v13);
  v77 = v20;
  v84 = v13;
  v36(v86, v20, v13);
  swift_retain(v35);
  if (sub_10008FEB8())
    v37 = 11;
  else
    v37 = 2;
  v38 = 1;
  if (!v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_faceToFaceVisible])
    v38 = 2;
  v80 = v38;
  v39 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions];
  v40 = swift_getKeyPath(&unk_1001EBAA0);
  v41 = swift_getKeyPath(&unk_1001EBAC8);
  static Published.subscript.getter(v88, v39, v40);
  swift_release(v41);
  swift_release(v40);
  v42 = v88[0];
  v43 = sub_100093000();
  v44 = sub_10008FEB8();
  v74 = v39;
  if (v44)
  {
    v45 = (uint64_t)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId];
    swift_beginAccess(&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId], v88, 0, 0);
    v46 = v81;
    sub_10000B074(v45, v81, (uint64_t *)&unk_10028F1B0);
  }
  else
  {
    v46 = v81;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v81, 1, 1, v83);
  }
  v47 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
  v48 = v84;
  v47(v10, v85, v84);
  v47(&v10[v8[5]], v86, v48);
  *(_QWORD *)&v10[v8[6]] = v37;
  *(_QWORD *)&v10[v8[7]] = 2;
  *(_QWORD *)&v10[v8[8]] = v80;
  v10[v8[9]] = v42;
  v49 = &v10[v8[10]];
  *(_QWORD *)v49 = 0;
  v49[8] = 1;
  v10[v8[11]] = 0;
  *(_QWORD *)&v10[v8[12]] = v43;
  v50 = &v10[v8[13]];
  *(_QWORD *)v50 = 0;
  v50[8] = 1;
  sub_1000110A4(v46, (uint64_t)&v10[v8[14]], (uint64_t *)&unk_10028F1B0);
  sub_10015AEE0((uint64_t)v10);
  result = *(void **)(v35 + 16);
  if (result)
  {
    v52 = v75;
    v53 = v75;
    v54 = objc_msgSend(result, "invocationId");
    v55 = (uint64_t)v78;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_release(v35);
    sub_100097944((uint64_t)v10);
    v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_hasPerformedStopTone] = 0;
    v56 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentRecordingStopTonePlaybackTask];
    *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentRecordingStopTonePlaybackTask] = 0;
    swift_release(v56);
    v57 = sub_100097414(v74, v52);
    v58 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session];
    v59 = swift_getKeyPath(&unk_1001EBC08);
    v60 = swift_getKeyPath(&unk_1001EBC30);
    static Published.subscript.getter(&v89, v58, v59);
    swift_release(v60);
    swift_release(v59);
    if (v53 == 2)
    {
      v62 = v89;
      v61 = v90;
      v63 = sub_10008FEB8();
      v72 = v57;
      v64 = (sub_10008CF94() & 1) == 0;
      v65 = (uint64_t)v77;
      v66 = v62;
      v67 = (uint64_t)v76;
      sub_10016C848((uint64_t)v76, (uint64_t)v77, v66, v61, v63, v64, v79 & 1, 0, 1u, 0, v72, v55);
    }
    else
    {
      v61 = v90;
      v73 = v57;
      v67 = (uint64_t)v76;
      v65 = (uint64_t)v77;
      sub_10016C848((uint64_t)v76, (uint64_t)v77, v89, v90, 0, 0, v79 & 1, 0, 1u, 0, v73, v55);
    }
    v68 = v84;
    v69 = v87;
    v70 = swift_bridgeObjectRelease(v61);
    (*(void (**)(uint64_t, uint64_t, __n128))(v82 + 8))(v55, v83, v70);
    v71 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v71(v65, v68);
    return (void *)((uint64_t (*)(uint64_t, uint64_t))v71)(v67, v68);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100090758(char a1, char a2, char a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;

  v4 = v3;
  v7 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_speechManager];
  if ((a2 & 1) != 0)
  {
    sub_10016D1D0();
  }
  else
  {
    v8 = v7 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v7 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
    if (Strong)
    {
      v10 = Strong;
      v11 = *(_QWORD *)(v8 + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 16))(0, ObjectType, v11);
      swift_unknownObjectRelease(v10);
    }
    v13 = *(_QWORD *)(v7 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer);
    if (v13)
      objc_msgSend(*(id *)(v13 + 48), "endAudio");
    sub_100147478();
  }
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000F66C(v14, (uint64_t)qword_1002AA338);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v28 = v19;
    *(_DWORD *)v18 = 136315138;
    LOBYTE(v27) = a1;
    v20 = String.init<A>(describing:)(&v27, &type metadata for ConversationViewModel.ToggleSpeechActionOrigin);
    v22 = v21;
    v27 = sub_1001A7FE4(v20, v21, (uint64_t *)&v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v18 + 4);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "StopSpeech with source: %s.", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  *((_QWORD *)&v29 + 1) = &type metadata for TranslateFeatures;
  v30 = sub_100009BC4();
  LOBYTE(v28) = 9;
  v23 = isFeatureEnabled(_:)(&v28);
  result = sub_100009C08(&v28);
  if ((v23 & 1) != 0 && (v4[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_hasPerformedStopTone] & 1) == 0)
    __asm { BR              X10 }
  if ((a3 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1001EBC98);
    v26 = swift_getKeyPath(&unk_1001EBCC0);
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    return static Published.subscript.setter(&v28, v4, KeyPath, v26);
  }
  return result;
}

uint64_t sub_100090B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v7 + 80) = a6;
  *(_QWORD *)(v7 + 88) = a7;
  *(_BYTE *)(v7 + 193) = a5;
  *(_QWORD *)(v7 + 72) = a4;
  v8 = type metadata accessor for Locale(0);
  *(_QWORD *)(v7 + 96) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 104) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 112) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 120) = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 128) = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  *(_QWORD *)(v7 + 136) = v12;
  *(_QWORD *)(v7 + 144) = v13;
  return swift_task_switch(sub_100090C14, v12, v13);
}

uint64_t sub_100090C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _BOOL8 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, uint64_t);
  char v40;
  __n128 v41;
  uint64_t ObjectType;
  _QWORD *v43;
  char *v44;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions);
  KeyPath = swift_getKeyPath(&unk_1001EBAA0);
  v3 = swift_getKeyPath(&unk_1001EBAC8);
  static Published.subscript.getter((_QWORD *)(v0 + 192), v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  if (*(_BYTE *)(v0 + 192) == 1)
  {
    *(_QWORD *)(v0 + 40) = &type metadata for TranslateFeatures;
    v4 = sub_100009BC4();
    *(_BYTE *)(v0 + 16) = 9;
    *(_QWORD *)(v0 + 48) = v4;
    v5 = isFeatureEnabled(_:)(v0 + 16);
    sub_100009C08((_QWORD *)(v0 + 16));
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v0 + 72)
                     + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentRecordingStopTonePlaybackTask);
      *(_QWORD *)(v0 + 152) = v6;
      if (v6)
      {
        v7 = qword_10028A410;
        swift_retain(v6);
        if (v7 != -1)
          swift_once(&qword_10028A410, sub_100120F20);
        v8 = type metadata accessor for Logger(0);
        v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA338);
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.info.getter(v10);
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Waiting for existing recording stop task to finish.", v12, 2u);
          swift_slowDealloc(v12, -1, -1);
        }

        v13 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
        *(_QWORD *)(v0 + 160) = v13;
        *v13 = v0;
        v13[1] = sub_1000910C0;
        return Task<>.value.getter(v0 + 56, v6, &type metadata for String);
      }
    }
    if (*(_BYTE *)(v0 + 193) == 1)
    {
      v18 = *(_WORD *)(*(_QWORD *)(v0 + 72)
                     + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation);
      v19 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
      v21 = (v18 & 0xFF00) != 0x200 && v18 != 2 && (v18 & 1) == 0;
      goto LABEL_30;
    }
    v22 = *(_QWORD **)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD **)(v0 + 80);
    v27 = v25[3];
    v28 = v25[4];
    sub_100023AF4(v25, v27);
    v29 = dispatch thunk of TranslationResult.locale.getter(v27, v28);
    v30 = Locale.ltIdentifier.getter(v29);
    v32 = v31;
    v33 = swift_getKeyPath(&unk_1001EBAE8);
    v34 = swift_getKeyPath(&unk_1001EBB10);
    static Published.subscript.getter(v22, v26, v33);
    swift_release(v33);
    v35 = swift_release(v34);
    v36 = Locale.ltIdentifier.getter(v35);
    v38 = v37;
    v39 = *(void (**)(_QWORD *, uint64_t))(v24 + 8);
    v39(v22, v23);
    if (v30 == v36 && v32 == v38)
    {
      swift_bridgeObjectRelease_n(v32, 2);
    }
    else
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v36, v38, 0);
      swift_bridgeObjectRelease(v38);
      v41 = swift_bridgeObjectRelease(v32);
      if ((v40 & 1) == 0)
      {
        ((void (*)(_QWORD, _QWORD, __n128))v39)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96), v41);
        v19 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
        v21 = 1;
        goto LABEL_30;
      }
    }
    v39(*(_QWORD **)(v0 + 120), *(_QWORD *)(v0 + 96));
    v19 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
    v21 = 0;
LABEL_30:
    ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 88));
    v44 = (char *)&dword_10028F6D8 + dword_10028F6D8;
    v43 = (_QWORD *)swift_task_alloc(unk_10028F6DC);
    *(_QWORD *)(v0 + 184) = v43;
    *v43 = v0;
    v43[1] = sub_100091420;
    return ((uint64_t (*)(_QWORD, _QWORD, _BOOL8, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))v44)(*(_QWORD *)(v0 + 88), 0, v21, 0, 1, *(_QWORD *)(v0 + 72), ObjectType, v19);
  }
  swift_release(*(_QWORD *)(v0 + 128));
  if (*(_BYTE *)(v0 + 193) == 1 && sub_10008FEB8())
  {
    v15 = *(_QWORD *)(v0 + 72);
    if (*(_BYTE *)(v15 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_isVisible) == 1)
    {
      if ((*(_WORD *)(v15 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) & 0xFF00) == 0x200)
        v16 = 2;
      else
        v16 = *(unsigned __int16 *)(v15
                                  + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation);
      sub_10009005C(v16, 1);
    }
  }
  v17 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

