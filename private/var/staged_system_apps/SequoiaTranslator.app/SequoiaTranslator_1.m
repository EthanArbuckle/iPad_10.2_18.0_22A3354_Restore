uint64_t sub_1000910C0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  swift_bridgeObjectRelease(v1[8]);
  return swift_task_switch(sub_100091114, v1[17], v1[18]);
}

uint64_t sub_100091114()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(_QWORD *)(v0 + 168) = v1;
  *v1 = v0;
  v1[1] = sub_100091164;
  return static Task<>.sleep(nanoseconds:)(100000000);
}

uint64_t sub_100091164()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100091504;
  else
    v4 = sub_1000911C4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1000911C4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  _BOOL8 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t);
  char v23;
  __n128 v24;
  uint64_t ObjectType;
  _QWORD *v26;
  char *v28;

  swift_release(*(_QWORD *)(v0 + 152));
  if (*(_BYTE *)(v0 + 193) == 1)
  {
    v1 = *(_WORD *)(*(_QWORD *)(v0 + 72)
                  + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation);
    v2 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
    v4 = (v1 & 0xFF00) != 0x200 && v1 != 2 && (v1 & 1) == 0;
  }
  else
  {
    v5 = *(_QWORD **)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD **)(v0 + 80);
    v10 = v8[3];
    v11 = v8[4];
    sub_100023AF4(v8, v10);
    v12 = dispatch thunk of TranslationResult.locale.getter(v10, v11);
    v13 = Locale.ltIdentifier.getter(v12);
    v15 = v14;
    KeyPath = swift_getKeyPath(&unk_1001EBAE8);
    v17 = swift_getKeyPath(&unk_1001EBB10);
    static Published.subscript.getter(v5, v9, KeyPath);
    swift_release(KeyPath);
    v18 = swift_release(v17);
    v19 = Locale.ltIdentifier.getter(v18);
    v21 = v20;
    v22 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
    v22(v5, v6);
    if (v13 == v19 && v15 == v21)
    {
      swift_bridgeObjectRelease_n(v15, 2);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v19, v21, 0);
      swift_bridgeObjectRelease(v21);
      v24 = swift_bridgeObjectRelease(v15);
      if ((v23 & 1) == 0)
      {
        ((void (*)(_QWORD, _QWORD, __n128))v22)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96), v24);
        v2 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
        v4 = 1;
        goto LABEL_14;
      }
    }
    v22(*(_QWORD **)(v0 + 120), *(_QWORD *)(v0 + 96));
    v2 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
    v4 = 0;
  }
LABEL_14:
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 88));
  v28 = (char *)&dword_10028F6D8 + dword_10028F6D8;
  v26 = (_QWORD *)swift_task_alloc(unk_10028F6DC);
  *(_QWORD *)(v0 + 184) = v26;
  *v26 = v0;
  v26[1] = sub_100091420;
  return ((uint64_t (*)(_QWORD, _QWORD, _BOOL8, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))v28)(*(_QWORD *)(v0 + 88), 0, v4, 0, 1, *(_QWORD *)(v0 + 72), ObjectType, v2);
}

uint64_t sub_100091420()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  return swift_task_switch(sub_10009146C, *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
}

uint64_t sub_10009146C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 128));
  if (*(_BYTE *)(v0 + 193) == 1 && sub_10008FEB8())
  {
    v1 = *(_QWORD *)(v0 + 72);
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_isVisible) == 1)
    {
      if ((*(_WORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) & 0xFF00) == 0x200)
        v2 = 2;
      else
        v2 = *(unsigned __int16 *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation);
      sub_10009005C(v2, 1);
    }
  }
  v3 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000A020(a1, &qword_10028F190);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100091694(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = v1;
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA338);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Resetting ConversationViewModel", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_10008FD60();
  sub_100090758(3, 1, 1);
  sub_1001D3410();
  KeyPath = swift_getKeyPath(&unk_1001EBC50);
  v10 = swift_getKeyPath(&unk_1001EBC78);
  BYTE2(v18) = 8;
  LOWORD(v18) = 0;
  v11 = v2;
  result = static Published.subscript.setter(&v18, v11, KeyPath, v10);
  if ((a1 & 1) != 0)
  {
    v13 = swift_getKeyPath(&unk_1001EBE90);
    v14 = swift_getKeyPath(&unk_1001EBEB8);
    v18 = xmmword_1001EA640;
    v15 = v11;
    static Published.subscript.setter(&v18, v15, v13, v14);
    v16 = swift_getKeyPath(&unk_1001EBED8);
    v17 = swift_getKeyPath(&unk_1001EBF00);
    v18 = xmmword_1001EA640;
    return static Published.subscript.setter(&v18, v15, v16, v17);
  }
  return result;
}

void sub_100091874()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v2 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter(&v7, v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  if (v7 == 1)
    sub_100090758(4, 0, 1);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager);
  v4 = swift_getKeyPath(&unk_1001EBE00);
  v5 = swift_getKeyPath(&unk_1001EBE28);
  static Published.subscript.getter(&v7, v3, v4);
  swift_release(v5);
  swift_release(v4);
  v6 = v8;
  swift_bridgeObjectRelease(v8);
  if (v6)
    sub_1001D3410();
}

void sub_100091960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = type metadata accessor for PersistedTranslation(0);
  v4 = swift_dynamicCastClass(a1, v3);
  if (v4)
  {
    v5 = v4;
    v6 = (_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session)
                  + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store);
    v7 = v6[3];
    v8 = v6[4];
    sub_100023AF4(v6, v7);
    swift_unknownObjectRetain(a1);
    dispatch thunk of TranslationStore.toggleFavoriteBackground(_:)(v5, v7, v8);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v9 = type metadata accessor for Logger(0);
    sub_10000F66C(v9, (uint64_t)qword_1002AA338);
    v10 = swift_unknownObjectRetain_n(a1, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v20 = v14;
      *(_DWORD *)v13 = 136446210;
      ObjectType = swift_getObjectType(a1);
      v16 = _typeName(_:qualified:)(ObjectType, 0);
      v18 = v17;
      v19 = sub_1001A7FE4(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v13 + 4);
      swift_unknownObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Attempt to favorite an unknown translation type %{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(a1, 2);
    }
  }
}

void sub_100091B84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for PersistedTranslation(0);
  v3 = swift_dynamicCastClass(a1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    swift_unknownObjectRetain(a1);
    sub_1001C9FE8(v4);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v5 = type metadata accessor for Logger(0);
    sub_10000F66C(v5, (uint64_t)qword_1002AA338);
    v6 = swift_unknownObjectRetain_n(a1, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v16 = v10;
      *(_DWORD *)v9 = 136446210;
      ObjectType = swift_getObjectType(a1);
      v12 = _typeName(_:qualified:)(ObjectType, 0);
      v14 = v13;
      v15 = sub_1001A7FE4(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4);
      swift_unknownObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Attempt to delete an unknown translation type %{public}s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(a1, 2);
    }
  }
}

void sub_100091D80(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v3 = (id)_convertErrorToNSError(_:)(a1);
  v4 = sub_1000093D0(v3);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v5 = type metadata accessor for Logger(0);
  sub_10000F66C(v5, (uint64_t)qword_1002AA338);
  v6 = v3;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = HIWORD(v4);
    v46 = v1;
    v10 = swift_slowAlloc(22, -1);
    v45 = v4;
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v49 = v12;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v48) = v9;
    v13 = String.init<A>(describing:)(&v48, &type metadata for AlertReasonKey);
    v15 = v14;
    v48 = sub_1001A7FE4(v13, v14, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v10 + 4);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 12) = 2112;
    v48 = (uint64_t)v6;
    v16 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v10 + 14);
    *v11 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received error with reason '%{public}s': %@", (uint8_t *)v10, 0x16u);
    v17 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v11, 1, v17);
    v18 = v11;
    v4 = v45;
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    v19 = v10;
    v2 = v46;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {

  }
  switch(BYTE2(v4))
  {
    case 1u:
      goto LABEL_9;
    case 6u:
      KeyPath = swift_getKeyPath(&unk_1001EBC50);
      v23 = swift_getKeyPath(&unk_1001EBC78);
      BYTE2(v49) = 6;
      LOWORD(v49) = v4;
      v24 = v2;
      static Published.subscript.setter(&v49, v24, KeyPath, v23);
      v25 = swift_getKeyPath(&unk_1001EBE48);
      v26 = swift_getKeyPath(&unk_1001EBE70);
      LOBYTE(v49) = 1;
      static Published.subscript.setter(&v49, v24, v25, v26);

      break;
    case 5u:
LABEL_9:
      v20 = swift_getKeyPath(&unk_1001EBC50);
      v21 = swift_getKeyPath(&unk_1001EBC78);
      BYTE2(v49) = BYTE2(v4);
      LOWORD(v49) = v4;
      static Published.subscript.setter(&v49, v2, v20, v21);
      sub_100090758(1, 1, 0);

      return;
    default:
      v27 = v6;
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = swift_slowAlloc(22, -1);
        v31 = (_QWORD *)swift_slowAlloc(8, -1);
        v47 = v2;
        v32 = swift_slowAlloc(32, -1);
        v49 = v32;
        *(_DWORD *)v30 = 136446466;
        LOBYTE(v48) = BYTE2(v4);
        v33 = String.init<A>(describing:)(&v48, &type metadata for AlertReasonKey);
        v35 = v34;
        v48 = sub_1001A7FE4(v33, v34, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v30 + 4);
        swift_bridgeObjectRelease(v35);
        *(_WORD *)(v30 + 12) = 2112;
        v48 = (uint64_t)v27;
        v36 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v30 + 14);
        *v31 = v27;

        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Ignoring displaying an error because it's not allow-listed to display to the user: reason '%{public}s': %@", (uint8_t *)v30, 0x16u);
        v37 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v31, 1, v37);
        swift_slowDealloc(v31, -1, -1);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        v38 = v32;
        v2 = v47;
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {

      }
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Resetting ConversationViewModel", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }

      sub_10008FD60();
      sub_100090758(3, 1, 1);
      sub_1001D3410();
      v43 = swift_getKeyPath(&unk_1001EBC50);
      v44 = swift_getKeyPath(&unk_1001EBC78);
      BYTE2(v49) = 8;
      LOWORD(v49) = 0;
      static Published.subscript.setter(&v49, v2, v43, v44);

      break;
  }
}

void sub_100092358()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *oslog;
  id v22;
  uint64_t v23;

  static String._unconditionallyBridgeFromObjectiveC(_:)(_LTTranslationErrorDomain);
  v1 = v0;
  v2 = objc_allocWithZone((Class)NSError);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "initWithDomain:code:userInfo:", v3, 14, 0, swift_bridgeObjectRelease(v1).n128_f64[0]);

  if ((sub_10008CE28() & 1) != 0)
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v5 = type metadata accessor for Logger(0);
    sub_10000F66C(v5, (uint64_t)qword_1002AA338);
    v6 = v4;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      v22 = v6;
      v11 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4);
      *v10 = v6;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Conversation view was active during XPC interruption: %@", v9, 0xCu);
      v12 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {

    }
    v20 = v6;
    sub_100091D80((uint64_t)v20);

  }
  else
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v13 = type metadata accessor for Logger(0);
    sub_10000F66C(v13, (uint64_t)qword_1002AA338);
    v14 = v4;
    oslog = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v22 = v14;
      v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v16 + 4);
      *v17 = v14;

      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "Conversation view was idle during XPC interruption, ignoring XPC error: %@", v16, 0xCu);
      v19 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

    }
  }
}

void *sub_1000926D8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  BOOL v10;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v2 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter((uint64_t *)((char *)&v12 + 1), v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  if (BYTE1(v12) == 1)
  {
    v3 = *(_WORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation);
    if ((v3 & 0xFF00) == 0x200)
      return (void *)sub_100090758(0, 0, 1);
    v4 = v3 & 1;
    if (*(_WORD *)(v0
                                   + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) != 2
      && v4 == 0)
    {
      return (void *)sub_100090758(0, 0, 1);
    }
  }
  v6 = swift_getKeyPath(&unk_1001EBB30);
  v7 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter(&v12, v0, v6);
  swift_release(v7);
  swift_release(v6);
  if (v12 == 1)
  {
    v8 = *(_WORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation);
    if ((v8 & 0xFF00) == 0x200
      || ((v9 = v8 & 1,
           *(_WORD *)(v0
                                     + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) != 2)
        ? (v10 = v9 == 0)
        : (v10 = 1),
          !v10))
    {
      sub_100090758(0, 1, 1);
    }
  }
  return sub_10009005C(0, 1);
}

void *sub_100092828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  __int16 v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v3 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter((uint64_t *)((char *)&v28 + 1), v1, KeyPath);
  swift_release(v3);
  swift_release(KeyPath);
  if (BYTE1(v28) == 1
    && ((v4 = *(_WORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation),
         (v4 & 0xFF00) == 0x200)
     || ((v5 = v4 & 1,
          *(_WORD *)(v1
                                    + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) != 2)
       ? (v6 = v5 == 0)
       : (v6 = 1),
         !v6)))
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10000F66C(v23, (uint64_t)qword_1002AA338);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Ending speech recognition for partner in partner tap", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    return (void *)sub_100090758(0, 0, 1);
  }
  else
  {
    v7 = swift_getKeyPath(&unk_1001EBB30);
    v8 = swift_getKeyPath(&unk_1001EBB58);
    static Published.subscript.getter(&v28, v1, v7);
    swift_release(v8);
    swift_release(v7);
    if (v28 == 1)
    {
      v9 = *(_WORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation);
      if ((v9 & 0xFF00) == 0x200
        || ((v10 = v9 & 1,
             *(_WORD *)(v1
                                       + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation) != 2)
          ? (v11 = v10 == 0)
          : (v11 = 0),
            v11))
      {
        if (qword_10028A410 != -1)
          swift_once(&qword_10028A410, sub_100120F20);
        v12 = type metadata accessor for Logger(0);
        v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA338);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.info.getter(v14);
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ending speech recognition for owner in partner tap", v16, 2u);
          swift_slowDealloc(v16, -1, -1);
        }

        sub_100090758(0, 1, 1);
      }
    }
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10000F66C(v17, (uint64_t)qword_1002AA338);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Starting speech recognition for partner in partner tap", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    return sub_10009005C(1, 1);
  }
}

void sub_100092B90(char a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_ttsManager);
  KeyPath = swift_getKeyPath(&unk_1001EBE00);
  v7 = swift_getKeyPath(&unk_1001EBE28);
  static Published.subscript.getter(&v11, v5, KeyPath);
  swift_release(v7);
  swift_release(KeyPath);
  v8 = v12;
  swift_bridgeObjectRelease(v12);
  if (v8)
  {
    sub_100091874();
  }
  else
  {
    v9 = swift_getKeyPath(&unk_1001EBB30);
    v10 = swift_getKeyPath(&unk_1001EBB58);
    static Published.subscript.getter(&v11, v2, v9);
    swift_release(v10);
    swift_release(v9);
    if (v11 == 1)
      sub_100090758(a1, 0, 1);
    else
      sub_10009005C(a2, 1);
  }
}

void sub_100092CA0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v3 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  v4 = __chkstk_darwin(v3);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  UUID.init()(v4);
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  v8 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId, v10, 33, 0);
  sub_10002D560((uint64_t)v6, v8, (uint64_t *)&unk_10028F1B0);
  swift_endAccess(v10);
  if (sub_10008FEB8())
  {
    sub_100092B90(0, 2);
  }
  else if ((a1 & 1) != 0)
  {
    sub_10009005C(2, 0);
  }
  else
  {
    sub_100090758(0, 0, 1);
  }
}

uint64_t sub_100092DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void (*v24)(_BYTE *, uint64_t, __n128);
  _BYTE v25[24];
  _BYTE v26[24];

  v1 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v2 = __chkstk_darwin(v1);
  v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v25[-v5];
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v25[-v12];
  v14 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale, v26, 0, 0);
  sub_10000B074(v14, (uint64_t)v6, (uint64_t *)&unk_10028FE50);
  v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1, v7) == 1)
    return sub_10000A020((uint64_t)v6, (uint64_t *)&unk_10028FE50);
  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
  v17(v13, v6, v7);
  v18 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale, v25, 0, 0);
  sub_10000B074(v18, (uint64_t)v4, (uint64_t *)&unk_10028FE50);
  if (v15(v4, 1, v7) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
    return sub_10000A020((uint64_t)v4, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    v17(v11, v4, v7);
    v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation);
    v20 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText;
    v21 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText);
    v22 = *(_QWORD *)(v20 + 8);
    swift_bridgeObjectRetain(v22);
    swift_retain(v19);
    sub_10015B308(v21, v22, (uint64_t)v13, (uint64_t)v11);
    swift_release(v19);
    v23 = swift_bridgeObjectRelease(v22);
    v24 = *(void (**)(_BYTE *, uint64_t, __n128))(v8 + 8);
    v24(v11, v7, v23);
    return ((uint64_t (*)(_BYTE *, uint64_t))v24)(v13, v7);
  }
}

uint64_t sub_100093000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper);
  KeyPath = swift_getKeyPath(&unk_1001EBB78);
  v3 = swift_getKeyPath(&unk_1001EBBA0);
  static Published.subscript.getter(&v6, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  if (v7 && (v4 = v14, sub_10001613C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16), (v4 & 0xFC) == 0))
    return qword_1001EC070[v4];
  else
    return 1;
}

id sub_1000930F0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationViewModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000933FC()
{
  return type metadata accessor for ConversationViewModel(0);
}

uint64_t type metadata accessor for ConversationViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F660;
  if (!qword_10028F660)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationViewModel);
  return result;
}

void sub_100093440(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[9];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const char *v35;
  void *v36;
  char *v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;

  v21[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v21[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v21[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v21[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v21[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v21[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v21[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v21[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v21[8] = "\b";
  sub_10006598C(319, (unint64_t *)&qword_10028D310, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v3 <= 0x3F)
  {
    v22 = *(_QWORD *)(v2 - 8) + 64;
    v23 = v22;
    sub_1000936A0();
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v24 = v6;
      v25 = v6;
      sub_10001DFF8(319, &qword_10028F680, &qword_10028EBE8);
      if (v8 <= 0x3F)
      {
        v26 = *(_QWORD *)(v7 - 8) + 64;
        sub_10001DFF8(319, &qword_10028F688, &qword_10028F690);
        if (v10 <= 0x3F)
        {
          v27 = *(_QWORD *)(v9 - 8) + 64;
          sub_10001DFF8(319, (unint64_t *)&qword_10028F0C0, &qword_10028D160);
          if (v12 <= 0x3F)
          {
            v28 = *(_QWORD *)(v11 - 8) + 64;
            v29 = v28;
            sub_10001DFF8(319, &qword_10028D348, &qword_10028D350);
            if (v14 <= 0x3F)
            {
              v30 = *(_QWORD *)(v13 - 8) + 64;
              sub_10001DFF8(319, &qword_10028D358, &qword_10028D360);
              if (v16 <= 0x3F)
              {
                v31 = *(_QWORD *)(v15 - 8) + 64;
                v32 = v6;
                v33 = &unk_1001EB980;
                v34 = &unk_1001EB980;
                v35 = "\b";
                v36 = &unk_1001EB998;
                v37 = (char *)&value witness table for Builtin.BridgeObject + 64;
                v38 = (char *)&value witness table for Builtin.NativeObject + 64;
                v39 = &unk_1001EB9B0;
                sub_10006598C(319, (unint64_t *)&qword_100292A50, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                if (v18 <= 0x3F)
                {
                  v40 = *(_QWORD *)(v17 - 8) + 64;
                  v41 = v40;
                  v42 = &unk_1001EB980;
                  v43 = &unk_1001EB980;
                  sub_10006598C(319, (unint64_t *)&qword_10028F698, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                  if (v20 <= 0x3F)
                  {
                    v44 = *(_QWORD *)(v19 - 8) + 64;
                    swift_updateClassMetadata2(a1, 256, 32, v21, a1 + 80);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1000936A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100295C00)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100295C00);
  }
}

uint64_t storeEnumTagSinglePayload for ConversationViewModel.Side(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100093740 + 4 * byte_1001EB93E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100093774 + 4 * byte_1001EB939[v4]))();
}

uint64_t sub_100093774(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009377C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100093784);
  return result;
}

uint64_t sub_100093790(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100093798);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10009379C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000937A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationViewModel.Side()
{
  return &type metadata for ConversationViewModel.Side;
}

unint64_t sub_1000937C4()
{
  unint64_t result;

  result = qword_10028F6A0;
  if (!qword_10028F6A0)
  {
    result = swift_getWitnessTable(&unk_1001EBA10, &type metadata for ConversationViewModel.Side);
    atomic_store(result, &qword_10028F6A0);
  }
  return result;
}

uint64_t sub_100093808@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ConversationViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100093848(char a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for MainActor(0);
  v7 = v1;
  v8 = static MainActor.shared.getter(v7);
  v9 = swift_allocObject(&unk_1002677D8, 41, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v9 + 32) = v7;
  *(_BYTE *)(v9 + 40) = a1;
  v10 = sub_100049DC0((uint64_t)v5, (uint64_t)&unk_10028F6F8, v9);
  return swift_release(v10);
}

uint64_t sub_100093934(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[40];
  __int128 v15[2];

  v5 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v5);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_100023AB0(a1, (uint64_t)v15);
  sub_10000B074(a2, (uint64_t)v14, (uint64_t *)&unk_10028F1C0);
  type metadata accessor for MainActor(0);
  v9 = v2;
  v10 = static MainActor.shared.getter(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_1002677B0, 120, 7);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  sub_10003E994(v15, (uint64_t)(v11 + 4));
  sub_1000110A4((uint64_t)v14, (uint64_t)(v11 + 9), (uint64_t *)&unk_10028F1C0);
  v11[14] = v9;
  v12 = sub_100049DC0((uint64_t)v7, (uint64_t)&unk_10028F6E8, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_100093A68(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14[2];
  __int128 v15[2];

  v5 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_100023AB0(a1, (uint64_t)v15);
  sub_100023AB0(a2, (uint64_t)v14);
  type metadata accessor for MainActor(0);
  v9 = v2;
  v10 = static MainActor.shared.getter(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_100267760, 120, 7);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = v9;
  sub_10003E994(v15, (uint64_t)(v11 + 5));
  sub_10003E994(v14, (uint64_t)(v11 + 10));
  v12 = sub_100049DC0((uint64_t)v7, (uint64_t)&unk_10028F6C0, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_100093B84(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for MainActor(0);
  swift_errorRetain(a1);
  v7 = v1;
  v8 = static MainActor.shared.getter(v7);
  v9 = (_QWORD *)swift_allocObject(&unk_100267738, 48, 7);
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = a1;
  v9[5] = v7;
  v10 = sub_100049DC0((uint64_t)v5, (uint64_t)&unk_10028F6B0, (uint64_t)v9);
  return swift_release(v10);
}

uint64_t sub_100093C74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[4];
  int v25;
  _BYTE v26[40];

  v25 = a3;
  v8 = type metadata accessor for StreamingRequestInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *v4;
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  sub_10000B074(a2, (uint64_t)v26, (uint64_t *)&unk_10028F1C0);
  sub_10009761C(a1, (uint64_t)v11);
  type metadata accessor for MainActor(0);
  swift_errorRetain(a4);
  v17 = v15;
  v18 = static MainActor.shared.getter(v17);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 89) & ~v19;
  v21 = swift_allocObject(&unk_100267800, v20 + v10, v19 | 7);
  *(_QWORD *)(v21 + 16) = v18;
  *(_QWORD *)(v21 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v21 + 32) = a4;
  sub_1000110A4((uint64_t)v26, v21 + 40, (uint64_t *)&unk_10028F1C0);
  *(_QWORD *)(v21 + 80) = v17;
  *(_BYTE *)(v21 + 88) = v25;
  sub_100097770((uint64_t)v11, v21 + v20);
  v22 = sub_100049DC0((uint64_t)v14, (uint64_t)&unk_10028F708, v21);
  return swift_release(v22);
}

uint64_t sub_100093E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 33) = a5;
  *(_QWORD *)(v5 + 16) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 24) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100093E84, v7, v8);
}

uint64_t sub_100093E84()
{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 33);
  v2 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v4 = swift_getKeyPath(&unk_1001EBB58);
  *(_BYTE *)(v0 + 32) = v1;
  static Published.subscript.setter(v0 + 32, v2, KeyPath, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  v7 = type metadata accessor for Locale(0);
  v6[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[21] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[22] = swift_task_alloc(v9);
  v6[23] = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  v6[24] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_100093FB0, v11, v12);
}

uint64_t sub_100093FB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *, uint64_t);
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = *(_QWORD **)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 192));
  v3 = v2[3];
  v4 = v2[4];
  sub_100023AF4(v2, v3);
  v5 = AnnotatedResult.displayString.getter(v3, *(_QWORD *)(v4 + 16));
  v7 = v6;
  sub_10000B074(v1, v0 + 56, (uint64_t *)&unk_10028F1C0);
  v8 = *(_QWORD *)(v0 + 80);
  v45 = v7;
  v46 = v5;
  if (!v8)
  {
    v12 = (uint64_t *)&unk_10028F1C0;
    v13 = v0 + 56;
LABEL_9:
    sub_10000A020(v13, v12);
    v44 = 0;
    v17 = 0xE000000000000000;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v0 + 88);
  sub_100023AF4((_QWORD *)(v0 + 56), v8);
  v10 = dispatch thunk of TranslationResult.alternatives.getter(v8, v9);
  v11 = v10;
  if (*(_QWORD *)(v10 + 16))
  {
    sub_100023AB0(v10 + 32, v0 + 16);
  }
  else
  {
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  swift_bridgeObjectRelease(v11);
  v14 = *(_QWORD *)(v0 + 40);
  if (!v14)
  {
    sub_100009C08((_QWORD *)(v0 + 56));
    v12 = &qword_100296440;
    v13 = v0 + 16;
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(v0 + 48);
  sub_100023AF4((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v44 = TranslationAlternative.displayString.getter(v14, v15);
  v17 = v16;
  sub_100009C08((_QWORD *)(v0 + 16));
  sub_100009C08((_QWORD *)(v0 + 56));
LABEL_10:
  v19 = *(_QWORD **)(v0 + 176);
  v18 = *(_QWORD **)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 152);
  v24 = v2[3];
  v23 = v2[4];
  sub_100023AF4(*(_QWORD **)(v0 + 136), v24);
  v25 = dispatch thunk of AnnotatedResult.locale.getter(v24, *(_QWORD *)(v23 + 16));
  v26 = Locale.identifier.getter(v25);
  v28 = v27;
  v29 = *(void (**)(_QWORD *, uint64_t))(v20 + 8);
  v29(v18, v21);
  KeyPath = swift_getKeyPath(&unk_1001EBAE8);
  v31 = swift_getKeyPath(&unk_1001EBB10);
  static Published.subscript.getter(v19, v22, KeyPath);
  swift_release(v31);
  v32 = swift_release(KeyPath);
  v33 = Locale.identifier.getter(v32);
  v35 = v34;
  v29(v19, v21);
  if (v26 == v33 && v28 == v35)
  {
    swift_bridgeObjectRelease_n(v28, 2);
    v36 = 0;
  }
  else
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v33, v35, 0);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v35);
    v36 = ~v37 & 1;
  }
  v38 = *(_QWORD *)(v0 + 176);
  v39 = *(_QWORD *)(v0 + 184);
  v40 = *(void **)(v0 + 152);
  v41 = swift_getKeyPath(&unk_1001EBC98);
  v42 = swift_getKeyPath(&unk_1001EBCC0);
  *(_QWORD *)(v0 + 96) = v36;
  *(_QWORD *)(v0 + 104) = v46;
  *(_QWORD *)(v0 + 112) = v45;
  *(_QWORD *)(v0 + 120) = v44;
  *(_QWORD *)(v0 + 128) = v17;
  static Published.subscript.setter(v0 + 96, v40, v41, v42);
  swift_task_dealloc(v39);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_100094304, v8, v9);
}

uint64_t sub_100094304()
{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = *(char **)(v0 + 16);
  v3 = *(_QWORD **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100090758(2, 0, 1);
  v4 = v3[3];
  v5 = v3[4];
  v6 = sub_100023AF4(v3, v4);
  sub_100096950((uint64_t)v6, v1, 1, v2, v4, v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[5] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000943EC, v7, v8);
}

uint64_t sub_1000943EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;

  swift_release(*(_QWORD *)(v0 + 40));
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA338);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v9 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    *v12 = v9;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Speech manager failed to translate: %@", v8, 0xCu);
    v10 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v12, 1, v10);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 24));
    swift_errorRelease(v7);
  }

  sub_100091D80(*(_QWORD *)(v0 + 24));
  sub_100090758(1, 0, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000945CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)(v8 + 296) = a7;
  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 192) = a8;
  *(_QWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 176) = a5;
  v9 = type metadata accessor for SpeechResultOrigin(0);
  *(_QWORD *)(v8 + 200) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 208) = v10;
  *(_QWORD *)(v8 + 216) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  *(_QWORD *)(v8 + 224) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 232) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 248) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 256) = swift_task_alloc(v13);
  v14 = type metadata accessor for StoredSpeechResult(0);
  *(_QWORD *)(v8 + 264) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 272) = v15;
  *(_QWORD *)(v8 + 280) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 288) = static MainActor.shared.getter(v16);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000946D4, v17, v18);
}

uint64_t sub_1000946D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  double v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, uint64_t);
  char v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 288));
  if (v1)
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v2 = *(_QWORD *)(v0 + 168);
    v3 = type metadata accessor for Logger(0);
    sub_10000F66C(v3, (uint64_t)qword_1002AA338);
    swift_errorRetain(v2);
    v4 = swift_errorRetain(v2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v5, v6))
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);

      goto LABEL_34;
    }
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v74 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v2);
    v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 160) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v7 + 4);
    *v74 = v8;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Exception while creating partial translation: %@", v7, 0xCu);
    v9 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v74, 1, v9);
    swift_slowDealloc(v74, -1, -1);
    v10 = v7;
    goto LABEL_6;
  }
  sub_10000B074(*(_QWORD *)(v0 + 176), v0 + 56, (uint64_t *)&unk_10028F1C0);
  if (*(_QWORD *)(v0 + 80))
  {
    v11 = (_QWORD *)(v0 + 16);
    sub_10003E994((__int128 *)(v0 + 56), v0 + 16);
    v12 = sub_10008C4B0();
    v13 = sub_1001886C0();
    v15 = v14;
    swift_release(v12);
    swift_bridgeObjectRelease(v15);
    v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v16 = v13 & 0xFFFFFFFFFFFFLL;
    if (v16 || (sub_10008CF94() & 1) != 0)
      *(_BYTE *)(*(_QWORD *)(v0 + 184) + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_redactTargetText) = 0;
    if (*(_BYTE *)(v0 + 296) == 1)
    {
      v17 = *(_QWORD *)(v0 + 280);
      v18 = *(_QWORD *)(v0 + 256);
      v72 = *(_QWORD *)(v0 + 272);
      v75 = *(_QWORD *)(v0 + 264);
      v20 = *(_QWORD *)(v0 + 224);
      v19 = *(_QWORD *)(v0 + 232);
      v21 = *(_QWORD *)(v0 + 216);
      v22 = *(_QWORD *)(v0 + 192);
      v68 = *(_QWORD *)(v0 + 208);
      v69 = *(_QWORD *)(v0 + 200);
      v70 = *(char **)(v0 + 184);
      v23 = type metadata accessor for StreamingRequestInfo(0);
      v24 = (uint64_t *)(v22 + *(int *)(v23 + 20));
      v26 = *v24;
      v25 = v24[1];
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
      v11 = (_QWORD *)(v0 + 16);
      v27(v18, v22 + *(int *)(v23 + 24), v20);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 104))(v21, enum case for SpeechResultOrigin.text(_:), v69);
      swift_bridgeObjectRetain(v25);
      StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v26, v25, 0, 0, v18, v21);
      sub_100096568(v17, (_QWORD *)(v0 + 16), 0, v70);
      v28 = sub_10008FD60();
      (*(void (**)(uint64_t, uint64_t, double))(v72 + 8))(v17, v75, v28);
LABEL_33:
      sub_100009C08(v11);
      goto LABEL_34;
    }
    v33 = *(_QWORD *)(v0 + 40);
    v34 = *(_QWORD *)(v0 + 48);
    sub_100023AF4((_QWORD *)(v0 + 16), v33);
    v35 = dispatch thunk of TranslationResult.alternatives.getter(v33, v34);
    v36 = v35;
    if (*(_QWORD *)(v35 + 16))
    {
      sub_100023AB0(v35 + 32, v0 + 96);
    }
    else
    {
      *(_QWORD *)(v0 + 128) = 0;
      *(_OWORD *)(v0 + 96) = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_bridgeObjectRelease(v36);
    v37 = *(_QWORD *)(v0 + 120);
    if (!v37)
    {
      sub_10000A020(v0 + 96, &qword_100296440);
      goto LABEL_33;
    }
    v38 = *(_QWORD **)(v0 + 240);
    v39 = *(_QWORD *)(v0 + 232);
    v71 = *(_QWORD *)(v0 + 224);
    v40 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 128);
    sub_100023AF4((_QWORD *)(v0 + 96), v37);
    v73 = TranslationAlternative.displayString.getter(v37, v41);
    v43 = v42;
    sub_100009C08((_QWORD *)(v0 + 96));
    v44 = *(_QWORD *)(v0 + 40);
    v45 = *(_QWORD *)(v0 + 48);
    sub_100023AF4(v11, v44);
    v46 = dispatch thunk of TranslationResult.locale.getter(v44, v45);
    v47 = Locale.ltIdentifier.getter(v46);
    v49 = v48;
    KeyPath = swift_getKeyPath(&unk_1001EBAE8);
    v51 = swift_getKeyPath(&unk_1001EBB10);
    static Published.subscript.getter(v38, v40, KeyPath);
    swift_release(KeyPath);
    v52 = swift_release(v51);
    v53 = Locale.ltIdentifier.getter(v52);
    v55 = v54;
    v56 = *(void (**)(_QWORD *, uint64_t))(v39 + 8);
    v56(v38, v71);
    if (v47 == v53 && v49 == v55)
    {
      swift_bridgeObjectRelease_n(v49, 2);
    }
    else
    {
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v53, v55, 0);
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v49);
      if ((v57 & 1) == 0)
      {
        v58 = (_QWORD *)(v0 + 16);
        v59 = 0;
        goto LABEL_32;
      }
    }
    v58 = (_QWORD *)(v0 + 16);
    v59 = 1;
LABEL_32:
    v60 = *(void **)(v0 + 184);
    v56(*(_QWORD **)(v0 + 248), *(_QWORD *)(v0 + 224));
    v61 = swift_getKeyPath(&unk_1001EBCE0);
    v62 = swift_getKeyPath(&unk_1001EBD08);
    *(_QWORD *)(v0 + 136) = v59;
    *(_QWORD *)(v0 + 144) = v73;
    *(_QWORD *)(v0 + 152) = v43;
    static Published.subscript.setter(v0 + 136, v60, v61, v62);
    v11 = v58;
    goto LABEL_33;
  }
  sub_10000A020(v0 + 56, (uint64_t *)&unk_10028F1C0);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10000F66C(v29, (uint64_t)qword_1002AA338);
  v5 = Logger.logObject.getter(v30);
  v31 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v5, v31))
    goto LABEL_7;
  v32 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v32 = 0;
  _os_log_impl((void *)&_mh_execute_header, v5, v31, "Expected a translation result, but received nil instead", v32, 2u);
  v10 = v32;
LABEL_6:
  swift_slowDealloc(v10, -1, -1);
LABEL_7:

LABEL_34:
  v63 = *(_QWORD *)(v0 + 248);
  v64 = *(_QWORD *)(v0 + 256);
  v65 = *(_QWORD *)(v0 + 240);
  v66 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v64);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100094D00@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *result;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  id v54;
  char *v55;
  int *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v70[3];
  char v71[24];
  char v72[32];

  v3 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v3);
  v66 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  v68 = v9;
  __chkstk_darwin(v8);
  v65 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v58 - v15;
  v17 = type metadata accessor for Locale(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v23 = __chkstk_darwin(v22);
  __chkstk_darwin(v23);
  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText + 8);
  if (!v27)
    goto LABEL_7;
  v63 = v26;
  v64 = (char *)&v58 - v24;
  v61 = v27;
  v62 = v25;
  v69 = a1;
  v28 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastEnteredText);
  v29 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSourceLocale, v72, 0, 0);
  sub_10000B074(v29, (uint64_t)v16, (uint64_t *)&unk_10028FE50);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v30(v16, 1, v17) == 1)
  {
    v14 = v16;
LABEL_6:
    sub_10000A020((uint64_t)v14, (uint64_t *)&unk_10028FE50);
    a1 = v69;
LABEL_7:
    v34 = type metadata accessor for SELFLoggingInvocationDescription(0);
    return (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a1, 1, 1, v34);
  }
  v59 = v28;
  v60 = v21;
  v31 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v32 = v64;
  v31(v64, v16, v17);
  v33 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastTargetLocale, v71, 0, 0);
  sub_10000B074(v33, (uint64_t)v14, (uint64_t *)&unk_10028FE50);
  if (v30(v14, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v32, v17);
    goto LABEL_6;
  }
  v36 = v62;
  v58 = v31;
  v31(v62, v14, v17);
  v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation);
  v38 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 16);
  v38((uint64_t)v63, v32, v17);
  v38((uint64_t)v60, v36, v17);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_faceToFaceVisible))
    v39 = 1;
  else
    v39 = 2;
  v40 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions);
  KeyPath = swift_getKeyPath(&unk_1001EBAA0);
  v42 = swift_getKeyPath(&unk_1001EBAC8);
  swift_bridgeObjectRetain(v61);
  v43 = v37;
  swift_retain(v37);
  static Published.subscript.getter(v70, v40, KeyPath);
  swift_release(KeyPath);
  swift_release(v42);
  v44 = v70[0];
  if (sub_10008FEB8())
  {
    v45 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__selfAutoTranslateSessionId;
    swift_beginAccess(v45, v70, 0, 0);
    v46 = v45;
    v47 = v66;
    sub_10000B074(v46, v66, (uint64_t *)&unk_10028F1B0);
    v48 = (char *)v69;
    v49 = v67;
  }
  else
  {
    v49 = v67;
    v47 = v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v66, 1, 1, v67);
    v48 = (char *)v69;
  }
  v50 = v58;
  v58(v7, v63, v17);
  v50(&v7[v5[5]], v60, v17);
  *(_QWORD *)&v7[v5[6]] = 1;
  *(_QWORD *)&v7[v5[7]] = 1;
  *(_QWORD *)&v7[v5[8]] = v39;
  v7[v5[9]] = v44;
  v51 = &v7[v5[10]];
  *(_QWORD *)v51 = 0;
  v51[8] = 1;
  v7[v5[11]] = 0;
  *(_QWORD *)&v7[v5[12]] = 0;
  v52 = &v7[v5[13]];
  *(_QWORD *)v52 = 0;
  v52[8] = 1;
  sub_1000110A4(v47, (uint64_t)&v7[v5[14]], (uint64_t *)&unk_10028F1B0);
  v53 = v43;
  sub_10015AEE0((uint64_t)v7);
  result = *(void **)(v43 + 16);
  if (result)
  {
    v54 = objc_msgSend(result, "invocationId");
    v55 = v65;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release(v53);

    sub_100097944((uint64_t)v7);
    v56 = (int *)type metadata accessor for SELFLoggingInvocationDescription(0);
    v50(&v48[v56[6]], v64, v17);
    v50(&v48[v56[7]], v62, v17);
    v57 = v61;
    *(_QWORD *)v48 = v59;
    *((_QWORD *)v48 + 1) = v57;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v48[v56[5]], v55, v49);
    return (void *)(*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v56 - 1) + 56))(v48, 0, 1, v56);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_100095294@<X0>(_QWORD *a1@<X8>)
{
  return sub_100094D00(a1);
}

uint64_t sub_1000952B4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation);
  swift_retain(v1);
  sub_10015B4BC();
  return swift_release(v1);
}

uint64_t sub_1000952EC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100095320(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10028F6AC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100094380(a1, v4, v5, v7, v6);
}

uint64_t sub_100095398@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001EBAA0, (uint64_t)&unk_1001EBAC8, a2);
}

void sub_1000953AC(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EBAA0);
  v5 = swift_getKeyPath(&unk_1001EBAC8);
  v6 = v2;
  static Published.subscript.setter(&v6, v3, KeyPath, v5);
  sub_10015ED18();
}

void sub_100095424(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_100095478@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001EBDB8, (uint64_t)&unk_1001EBDE0, a2);
}

uint64_t sub_10009548C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000954C8(a1, a2, a3, a4, (uint64_t)&unk_1001EBDB8, (uint64_t)&unk_1001EBDE0);
}

uint64_t sub_1000954A0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001EBB30, (uint64_t)&unk_1001EBB58, a2);
}

uint64_t sub_1000954B4(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000954C8(a1, a2, a3, a4, (uint64_t)&unk_1001EBB30, (uint64_t)&unk_1001EBB58);
}

uint64_t sub_1000954C8(char *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

double sub_100095530@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EBC98);
  v5 = swift_getKeyPath(&unk_1001EBCC0);
  static Published.subscript.getter(v9, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = v10;
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_1000955B4(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[5];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EBC98);
  v9 = swift_getKeyPath(&unk_1001EBCC0);
  v11[0] = v2;
  v11[1] = v3;
  v11[2] = v4;
  v11[3] = v5;
  v11[4] = v6;
  sub_1000756D4(v2, v3, v4, v5, v6);
  return static Published.subscript.setter(v11, v7, KeyPath, v9);
}

double sub_100095658@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EBCE0);
  v5 = swift_getKeyPath(&unk_1001EBD08);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = v9;
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_1000956DC(uint64_t *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v9[3];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EBCE0);
  v7 = swift_getKeyPath(&unk_1001EBD08);
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  swift_bridgeObjectRetain(v4);
  return static Published.subscript.setter(v9, v5, KeyPath, v7);
}

uint64_t sub_100095760@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EBD70);
  v5 = swift_getKeyPath(&unk_1001EBD98);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1000957DC(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EBD70);
  v5 = swift_getKeyPath(&unk_1001EBD98);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100095848@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  __int16 v7;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EBC50);
  v5 = swift_getKeyPath(&unk_1001EBC78);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  v7 = v8;
  *(_BYTE *)(a2 + 2) = BYTE2(v8);
  *(_WORD *)a2 = v7;
  return result;
}

uint64_t sub_1000958CC(__int16 *a1, void **a2)
{
  __int16 v2;
  char v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  __int16 v8;
  char v9;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 2);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EBC50);
  v6 = swift_getKeyPath(&unk_1001EBC78);
  v9 = v3;
  v8 = v2;
  return static Published.subscript.setter(&v8, v4, KeyPath, v6);
}

uint64_t sub_100095948@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001EBBC0, (uint64_t)&unk_1001EBBE8, a2);
}

uint64_t sub_10009595C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EBBC0);
  v5 = swift_getKeyPath(&unk_1001EBBE8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

double sub_1000959CC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[5];
  uint64_t v13;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EBB78);
  v5 = swift_getKeyPath(&unk_1001EBBA0);
  static Published.subscript.getter(v12, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v13;
  result = *(double *)v12;
  v8 = v12[1];
  v9 = v12[2];
  v10 = v12[3];
  v11 = v12[4];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

uint64_t sub_100095A60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  _QWORD v17[11];

  v2 = a1[1];
  v13 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v10 = a1[8];
  v9 = (void *)a1[9];
  v11 = (void *)a1[10];
  v15 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EBB78);
  v14 = swift_getKeyPath(&unk_1001EBBA0);
  v17[0] = v13;
  v17[1] = v2;
  v17[2] = v3;
  v17[3] = v4;
  v17[4] = v5;
  v17[5] = v6;
  v17[6] = v7;
  v17[7] = v8;
  v17[8] = v10;
  v17[9] = v9;
  v17[10] = v11;
  sub_1000161E0(v13, v2, v3, v4, v5, v6, v7, v8, v10, v9, v11);
  swift_retain(v15);
  return static Published.subscript.setter(v17, v15, KeyPath, v14);
}

uint64_t sub_100095B48()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100009C08((_QWORD *)(v0 + 40));
  sub_100009C08((_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100095B84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10028F6BC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D380;
  return sub_100094294(a1, v4, v5, v6, (uint64_t)(v1 + 5), (uint64_t)(v1 + 10));
}

uint64_t sub_100095C08(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 232) = a7;
  *(_QWORD *)(v8 + 240) = a8;
  *(_BYTE *)(v8 + 353) = a5;
  *(_BYTE *)(v8 + 352) = a4;
  *(_BYTE *)(v8 + 351) = a3;
  *(_BYTE *)(v8 + 350) = a2;
  *(_QWORD *)(v8 + 216) = a1;
  *(_QWORD *)(v8 + 224) = a6;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 248) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 256) = v10;
  *(_QWORD *)(v8 + 264) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028F1B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 272) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 280) = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 288) = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 296) = v13;
  *(_QWORD *)(v8 + 304) = v14;
  return swift_task_switch(sub_100095CE4, v13, v14);
}

uint64_t sub_100095CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = *(_QWORD *)(v0 + 224);
  KeyPath = swift_getKeyPath(&unk_1001EBB30);
  v3 = swift_getKeyPath(&unk_1001EBB58);
  static Published.subscript.getter((_QWORD *)(v0 + 349), v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  if (*(_BYTE *)(v0 + 349) == 1)
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA338);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Resetting ConversationViewModel", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(void **)(v0 + 224);

    sub_10008FD60();
    sub_100090758(3, 1, 1);
    sub_1001D3410();
    v10 = swift_getKeyPath(&unk_1001EBC50);
    v11 = swift_getKeyPath(&unk_1001EBC78);
    *(_BYTE *)(v0 + 346) = 8;
    *(_WORD *)(v0 + 344) = 0;
    static Published.subscript.setter(v0 + 344, v9, v10, v11);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper);
  *(_QWORD *)(v0 + 312) = v12;
  v13 = swift_getKeyPath(&unk_1001EBB78);
  v14 = swift_getKeyPath(&unk_1001EBBA0);
  static Published.subscript.getter((_QWORD *)(v0 + 16), v12, v13);
  swift_release(v13);
  swift_release(v14);
  v15 = *(_QWORD *)(v0 + 24);
  if (v15)
  {
    v16 = *(_QWORD *)(v0 + 72);
    sub_10001613C(*(_QWORD *)(v0 + 16), v15, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v16, *(_QWORD *)(v0 + 80), *(void **)(v0 + 88), *(void **)(v0 + 96));
    v17 = *(_BYTE *)(v0 + 351);
    if (v16 == 2)
    {
      if (*(_BYTE *)(v0 + 351))
      {
LABEL_17:
        v24 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      if (v16 != 3)
        v17 = 0;
      if ((v17 & 1) != 0)
        goto LABEL_17;
    }
  }
  v18 = swift_getKeyPath(&unk_1001EBBC0);
  v19 = swift_getKeyPath(&unk_1001EBBE8);
  static Published.subscript.getter((_QWORD *)(v0 + 348), v12, v18);
  swift_release(v18);
  swift_release(v19);
  if (*(_BYTE *)(v0 + 348) != 1)
  {
    v24 = 0;
    goto LABEL_19;
  }
  v20 = swift_getKeyPath(&unk_1001EBB78);
  v21 = swift_getKeyPath(&unk_1001EBBA0);
  static Published.subscript.getter((_QWORD *)(v0 + 104), v12, v20);
  swift_release(v20);
  swift_release(v21);
  v22 = *(_QWORD *)(v0 + 112);
  if (!v22)
    goto LABEL_17;
  v23 = *(_QWORD *)(v0 + 160);
  sub_10001613C(*(_QWORD *)(v0 + 104), v22, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), v23, *(_QWORD *)(v0 + 168), *(void **)(v0 + 176), *(void **)(v0 + 184));
  v24 = (unint64_t)(v23 - 4) < 0xFFFFFFFFFFFFFFFELL;
LABEL_19:
  *(_BYTE *)(v0 + 354) = v24;
  v25 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session);
  v26 = swift_getKeyPath(&unk_1001EBC08);
  v27 = swift_getKeyPath(&unk_1001EBC30);
  static Published.subscript.getter((_QWORD *)(v0 + 192), v25, v26);
  swift_release(v26);
  swift_release(v27);
  v28 = *(_QWORD *)(v0 + 192);
  v29 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 320) = v29;
  v30 = (_QWORD *)swift_task_alloc(dword_100298DAC);
  *(_QWORD *)(v0 + 328) = v30;
  *v30 = v0;
  v30[1] = sub_1000960DC;
  return sub_1001D0ED8(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240), *(_BYTE *)(v0 + 350), v28, v29, 0, v24, 1);
}

uint64_t sub_1000960DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[37];
    v5 = v2[38];
    v6 = sub_10009638C;
  }
  else
  {
    swift_bridgeObjectRelease(v2[40]);
    v4 = v2[37];
    v5 = v2[38];
    v6 = sub_100096148;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100096148()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_BYTE *)(v0 + 354);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 288));
  KeyPath = swift_getKeyPath(&unk_1001EBBC0);
  v5 = swift_getKeyPath(&unk_1001EBBE8);
  static Published.subscript.getter((_QWORD *)(v0 + 347), v2, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_faceToFaceVisible) == 1)
  {
    if ((*(_BYTE *)(v0 + 347) & (v1 ^ 1) & 1) == 0)
    {
LABEL_3:
      v6 = 1;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(v0 + 347) & (v1 ^ 1) & *(_BYTE *)(v0 + 352) & 1) == 0)
  {
    goto LABEL_3;
  }
  v6 = sub_100093000();
LABEL_6:
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  v9 = *(unsigned __int8 *)(v0 + 350);
  (*(void (**)(uint64_t, uint64_t))(v7 + 128))(v8, v7);
  if (v9)
    v10 = 1;
  else
    v10 = 2;
  v11 = (*(double (**)(uint64_t, uint64_t))(v7 + 96))(v8, v7);
  v12 = 2;
  v13 = 3;
  v14 = 3;
  if (v11 == 1.25)
    v14 = 4;
  if (v11 != 1.0)
    v13 = v14;
  if (v11 != 0.75)
    v12 = v13;
  if (v11 == 0.5)
    v15 = 1;
  else
    v15 = v12;
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 256);
  sub_10000B074(*(_QWORD *)(v0 + 280), v16, (uint64_t *)&unk_10028F1B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10000A020(*(_QWORD *)(v0 + 272), (uint64_t *)&unk_10028F1B0);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 256);
    v22 = *(unsigned __int8 *)(v0 + 353);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 32))(v19, *(_QWORD *)(v0 + 272), v20);
    v23 = (void *)objc_opt_self(_LTSELFLoggingInvocation);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "translationTTSPlayedWithInvocationId:sourceOrTargetLanguage:isAutoplayTranslation:ttsPlaybackSpeed:audioChannel:", isa, v10, v22, v15, v6);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }
  sub_10000A020(*(_QWORD *)(v0 + 280), (uint64_t *)&unk_10028F1B0);
  v25 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009638C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 320);
  swift_release(*(_QWORD *)(v0 + 288));
  swift_bridgeObjectRelease(v1);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = type metadata accessor for Logger(0);
  sub_10000F66C(v3, (uint64_t)qword_1002AA338);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 336);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v11 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 208) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v9 + 4);
    *v10 = v11;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Exception while toggling TTS: %@", v9, 0xCu);
    v12 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 336));
    swift_errorRelease(v8);

  }
  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096568(uint64_t a1, _QWORD *a2, int a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  __int128 v56[2];
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  v54 = a3;
  v55 = a2;
  v6 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for StoredSpeechResult(0);
  v58 = v12;
  v13 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  v59 = v13;
  v14 = sub_1000122F8(v57);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v14, a1, v12);
  v15 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation;
  v16 = *(_QWORD *)&a4[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation];
  v17 = *(void **)(v16 + 16);
  if (v17)
  {
    v18 = objc_msgSend(v17, "invocationId", swift_retain(*(_QWORD *)&a4[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation]).n128_f64[0]);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 0, 1, v19);
    swift_release(v16);
  }
  else
  {
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v11, 1, 1, v20);
  }
  v21 = *(_QWORD *)&a4[v15];
  swift_retain(v21);
  sub_10015B614();
  swift_release(v21);
  v23 = v58;
  v22 = v59;
  sub_100023AF4(v57, v58);
  v24 = (uint64_t)v14;
  if ((dispatch thunk of SpeechResult.isEmpty()(v12, v13) & 1) == 0)
  {
    v25 = v8;
    v26 = v22;
    v27 = *(_QWORD *)&a4[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session];
    v52 = v13;
    v53 = (uint64_t)v25;
    v28 = a4;
    v29 = (uint64_t)v11;
    v31 = v55[3];
    v30 = v55[4];
    v32 = sub_100023AF4(v55, v31);
    v51 = v30;
    v11 = (char *)v29;
    v33 = v27;
    v22 = v26;
    v34 = v12;
    v35 = v31;
    v36 = v54;
    v37 = v53;
    v38 = sub_1001CC848(v24, (uint64_t)v32, 0, v29, v33, v34, v35, v52, v51);
    if (v38)
    {
      v39 = (void *)v38;
      v40 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v37, 1, 1, v40);
      sub_100023AB0((uint64_t)v55, (uint64_t)v56);
      type metadata accessor for MainActor(0);
      v41 = v28;
      v42 = v39;
      v43 = static MainActor.shared.getter(v42);
      v44 = swift_allocObject(&unk_100267828, 96, 7);
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = &protocol witness table for MainActor;
      *(_QWORD *)(v44 + 32) = v41;
      *(_BYTE *)(v44 + 40) = v36 & 1;
      sub_10003E994(v56, v44 + 48);
      *(_QWORD *)(v44 + 88) = v42;
      v45 = sub_100091560(v37, (uint64_t)&unk_10028F710, v44);
      swift_release(v45);
LABEL_12:

      goto LABEL_13;
    }
  }
  if ((dispatch thunk of SpeechResult.isEmpty()(v23, v22) & 1) != 0)
  {
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10000F66C(v46, (uint64_t)qword_1002AA338);
    v42 = Logger.logObject.getter(v47);
    v48 = static os_log_type_t.info.getter(v42);
    if (os_log_type_enabled(v42, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v48, "Not storing speech translation result, as speech result is empty.", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }
    goto LABEL_12;
  }
LABEL_13:
  sub_10000A020((uint64_t)v11, (uint64_t *)&unk_10028F1B0);
  return sub_100009C08(v57);
}

uint64_t sub_100096950(uint64_t a1, _QWORD *a2, int a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57[2];
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;

  v54 = a3;
  v56 = a2;
  v10 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a5;
  v60 = a6;
  v16 = a6;
  v17 = sub_1000122F8(v58);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v17, a1, a5);
  v18 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation;
  v19 = *(_QWORD *)&a4[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation];
  v20 = *(void **)(v19 + 16);
  if (v20)
  {
    v21 = objc_msgSend(v20, "invocationId", swift_retain(*(_QWORD *)&a4[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_currentSelfLoggingInvocation]).n128_f64[0]);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 0, 1, v22);
    swift_release(v19);
  }
  else
  {
    v23 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v15, 1, 1, v23);
  }
  v24 = *(_QWORD *)&a4[v18];
  swift_retain(v24);
  sub_10015B614();
  swift_release(v24);
  v25 = v59;
  v55 = v60;
  sub_100023AF4(v58, v59);
  v26 = (uint64_t)v17;
  v27 = v16;
  if ((dispatch thunk of SpeechResult.isEmpty()(a5, v16) & 1) != 0)
    goto LABEL_7;
  v28 = *(_QWORD *)&a4[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session];
  v53 = v27;
  v29 = v12;
  v30 = v15;
  v32 = v56[3];
  v31 = v56[4];
  v33 = sub_100023AF4(v56, v32);
  v52 = v31;
  v15 = v30;
  v34 = a4;
  v35 = v32;
  v36 = v54;
  v37 = (uint64_t)v29;
  v38 = sub_1001CC848(v26, (uint64_t)v33, 0, (uint64_t)v15, v28, a5, v35, v53, v52);
  if (!v38)
  {
LABEL_7:
    if ((dispatch thunk of SpeechResult.isEmpty()(v25, v55) & 1) != 0)
    {
      if (qword_10028A410 != -1)
        swift_once(&qword_10028A410, sub_100120F20);
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10000F66C(v46, (uint64_t)qword_1002AA338);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.info.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Not storing speech translation result, as speech result is empty.", v50, 2u);
        swift_slowDealloc(v50, -1, -1);
      }

    }
  }
  else
  {
    v39 = (void *)v38;
    v40 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v29, 1, 1, v40);
    sub_100023AB0((uint64_t)v56, (uint64_t)v57);
    type metadata accessor for MainActor(0);
    v41 = v34;
    v42 = v39;
    v43 = static MainActor.shared.getter(v42);
    v44 = swift_allocObject(&unk_100267788, 96, 7);
    *(_QWORD *)(v44 + 16) = v43;
    *(_QWORD *)(v44 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v44 + 32) = v41;
    *(_BYTE *)(v44 + 40) = v36 & 1;
    sub_10003E994(v57, v44 + 48);
    *(_QWORD *)(v44 + 88) = v42;
    v45 = sub_100091560(v37, (uint64_t)&unk_10028F6D0, v44);

    swift_release(v45);
  }
  sub_10000A020((uint64_t)v15, (uint64_t *)&unk_10028F1B0);
  return sub_100009C08(v58);
}

uint64_t sub_100096D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = v1 + 48;
  v9 = *(_QWORD *)(v1 + 88);
  v10 = (_QWORD *)swift_task_alloc(dword_10028F6CC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003EFA0;
  return sub_100090B68(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100096DBC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001EBAA0, (uint64_t)&unk_1001EBAC8, a2);
}

uint64_t sub_100096DE4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001EBAE8, (uint64_t)&unk_1001EBB10, a2);
}

uint64_t sub_100096E08(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C360(a1, a2, a3, a4, (uint64_t)&unk_1001EBAE8, (uint64_t)&unk_1001EBB10, 0x80000001001FAFC0);
}

uint64_t sub_100096E3C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001EBB30, (uint64_t)&unk_1001EBB58, a2);
}

uint64_t sub_100096E60(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000954C8(a1, a2, a3, a4, (uint64_t)&unk_1001EBB30, (uint64_t)&unk_1001EBB58);
}

uint64_t sub_100096E8C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001EBBC0, (uint64_t)&unk_1001EBBE8, a2);
}

uint64_t sub_100096EC4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100009C08((_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 96))
    sub_100009C08((_QWORD *)(v0 + 72));

  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100096F08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = (uint64_t)(v1 + 9);
  v8 = v1[14];
  v9 = (_QWORD *)swift_task_alloc(dword_10028F6E4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_100093F08(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100096F94()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100096FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10028F6F4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100093E14(a1, v4, v5, v6, v7);
}

char *sub_10009703C(void *a1, uint64_t a2, char *a3)
{
  return sub_100097060(a1, a2, a3, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&off_1002659E0, (uint64_t)sub_100097B54, (uint64_t)&unk_100267890);
}

char *sub_100097060(void *a1, uint64_t a2, char *a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 aBlock;
  __int128 v42;
  uint64_t v43;
  char *v44;
  _BYTE v45[24];
  _QWORD v46[5];

  v39 = a6;
  v40 = a7;
  v12 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_10028F740);
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = a4(0);
  v46[4] = a5;
  v46[0] = a2;
  *((_QWORD *)a3 + 2) = objc_msgSend(objc_allocWithZone((Class)_LTTextStreamingConfiguration), "init");
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0x3FF8000000000000;
  *((_QWORD *)a3 + 5) = 0;
  v22 = &a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale];
  v23 = type metadata accessor for Locale(0);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  v24(&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale], 1, 1, v23);
  v25 = &a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation];
  *((_QWORD *)v25 + 4) = 0;
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  v26 = &a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest];
  v27 = type metadata accessor for StreamingRequestInfo(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState] = 0;
  v28(&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest], 1, 1, v27);
  *(_QWORD *)&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_finalTranslationRequestsQueue] = _swiftEmptyArrayStorage;
  *(_QWORD *)&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_translator] = a1;
  sub_100023AB0((uint64_t)v46, (uint64_t)&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_delegate]);
  static Date.now.getter(a1);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp], v21, v18);
  v29 = &a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0xE000000000000000;
  v43 = 0;
  aBlock = 0u;
  v42 = 0u;
  v30 = (uint64_t)&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation];
  swift_beginAccess(&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation], v45, 33, 0);
  sub_10002D560((uint64_t)&aBlock, v30, (uint64_t *)&unk_10028F1C0);
  swift_endAccess(v45);
  v28(v17, 1, 1, v27);
  v31 = (uint64_t)&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest];
  swift_beginAccess(&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest], &aBlock, 33, 0);
  sub_10002D560((uint64_t)v17, v31, &qword_10028F740);
  v32 = swift_endAccess(&aBlock);
  UUID.init()(v32);
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&a3[OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId], v14, v38);
  sub_100188F90();
  v33 = (void *)objc_opt_self(_LTTranslator);
  v43 = v39;
  v44 = a3;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v42 = sub_100095424;
  *((_QWORD *)&v42 + 1) = v40;
  v34 = _Block_copy(&aBlock);
  v35 = v44;
  swift_retain(a3);
  swift_release(v35);
  objc_msgSend(v33, "textStreamingConfigurationWithCompletion:", v34);
  _Block_release(v34);
  sub_100009C08(v46);
  return a3;
}

uint64_t sub_100097414(uint64_t a1, char a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1001EBAA0);
  v5 = swift_getKeyPath(&unk_1001EBAC8);
  static Published.subscript.getter(&v9, a1, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = 8;
  if (!(_BYTE)v9)
    v6 = 0;
  v7 = 65;
  if ((a2 & 1) == 0)
    v7 = 1;
  return v6 | v7;
}

unint64_t sub_1000974A8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262030, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

void sub_1000974F0(float a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;
  double v7;
  uint64_t v8;

  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA338);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.info.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    v7 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v5 + 4);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Speech: input detected at %f level.", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10009761C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StreamingRequestInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097660()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for StreamingRequestInfo(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 64))
    sub_100009C08((_QWORD *)(v0 + 40));
  v5 = v3 | 7;
  v6 = (v3 + 89) & ~v3;
  v7 = v6 + v4;

  v8 = v0 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[5] + 8));
  v11 = v8 + v1[6];
  v12 = type metadata accessor for Locale(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v8 + v1[7], v12);
  v10(v8 + v1[10], v9);
  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_100097770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StreamingRequestInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000977B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StreamingRequestInfo(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = v1 + 40;
  v9 = *(_QWORD *)(v1 + 80);
  v10 = *(_BYTE *)(v1 + 88);
  v11 = v1 + ((v4 + 89) & ~v4);
  v12 = (_QWORD *)swift_task_alloc(dword_10028F704);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10003EFA0;
  return sub_1000945CC(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100097874()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100009C08((_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000978B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = v1 + 48;
  v9 = *(_QWORD *)(v1 + 88);
  v10 = (_QWORD *)swift_task_alloc(dword_10028F6CC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001D380;
  return sub_100090B68(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100097944(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100097980@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004A208(a1, (uint64_t)&unk_1001EBD28, (uint64_t)&unk_1001EBD50, a2);
}

uint64_t sub_1000979A4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C360(a1, a2, a3, a4, (uint64_t)&unk_1001EBD28, (uint64_t)&unk_1001EBD50, 0x80000001001FAFF0);
}

uint64_t sub_1000979D8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000979FC(uint64_t a1)
{
  uint64_t v1;

  return sub_10008EBBC(a1, v1);
}

uint64_t sub_100097A04(char *a1)
{
  uint64_t v1;

  return sub_10008ECF8(a1, v1);
}

void sub_100097A0C(uint64_t a1)
{
  uint64_t v1;

  sub_10008ED80(a1, v1);
}

uint64_t sub_100097A1C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001EBDB8, (uint64_t)&unk_1001EBDE0, a2);
}

uint64_t sub_100097A40(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000954C8(a1, a2, a3, a4, (uint64_t)&unk_1001EBDB8, (uint64_t)&unk_1001EBDE0);
}

uint64_t sub_100097A6C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100059FE8(a1, (uint64_t)&unk_1001EBE48, (uint64_t)&unk_1001EBE70, a2);
}

uint64_t sub_100097A90(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000954C8(a1, a2, a3, a4, (uint64_t)&unk_1001EBE48, (uint64_t)&unk_1001EBE70);
}

double sub_100097AB4@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10008C1EC(a1, (uint64_t)&unk_1001EBE90, (uint64_t)&unk_1001EBEB8, a2);
}

uint64_t sub_100097AD8(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C278(a1, a2, a3, a4, (uint64_t)&unk_1001EBE90, (uint64_t)&unk_1001EBEB8);
}

double sub_100097AFC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10008C1EC(a1, (uint64_t)&unk_1001EBED8, (uint64_t)&unk_1001EBF00, a2);
}

uint64_t sub_100097B20(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10008C278(a1, a2, a3, a4, (uint64_t)&unk_1001EBED8, (uint64_t)&unk_1001EBF00);
}

uint64_t sub_100097B54(void *a1)
{
  uint64_t v1;

  return sub_100188894(a1, v1);
}

uint64_t sub_100097B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100097B6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for ConversationViewModel.ToggleSpeechActionOrigin(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100097BC0 + 4 * byte_1001EB948[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100097BF4 + 4 * byte_1001EB943[v4]))();
}

uint64_t sub_100097BF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100097BFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100097C04);
  return result;
}

uint64_t sub_100097C10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100097C18);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100097C1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100097C24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationViewModel.ToggleSpeechActionOrigin()
{
  return &type metadata for ConversationViewModel.ToggleSpeechActionOrigin;
}

unint64_t sub_100097C44()
{
  unint64_t result;

  result = qword_10028F748;
  if (!qword_10028F748)
  {
    result = swift_getWitnessTable(&unk_1001EC044, &type metadata for ConversationViewModel.ToggleSpeechActionOrigin);
    atomic_store(result, (unint64_t *)&qword_10028F748);
  }
  return result;
}

uint64_t *sub_100097C90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for UserInterfaceSizeClass(0);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_100006DF4(&qword_10028CE40);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v13 = a1;
      v14 = v7;
      v15 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v13 = a1;
      v14 = v7;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v16 = *(int *)(a3 + 20);
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v11 = *v18;
    v19 = v18[1];
    *v17 = v11;
    v17[1] = v19;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_100097DD0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for UserInterfaceSizeClass(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
}

uint64_t *sub_100097E64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100006DF4(&qword_10028CE40);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a1;
    v12 = v6;
    v13 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v11 = a1;
    v12 = v6;
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v13);
  v14 = *(int *)(a3 + 20);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  *v15 = v17;
  v15[1] = v18;
  swift_retain(v17);
  return a1;
}

uint64_t *sub_100097F7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, (uint64_t *)&unk_100291470);
    v6 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100006DF4(&qword_10028CE40);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = v6;
      v13 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
      v11 = a1;
      v12 = v6;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = *(uint64_t *)((char *)a1 + v14);
  v18 = *v16;
  *(uint64_t *)((char *)a1 + v14) = *v16;
  swift_retain(v18);
  swift_release(v17);
  *((_QWORD *)v15 + 1) = v16[1];
  return a1;
}

char *sub_1000980C0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100006DF4(&qword_10028CE40);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000981C8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, (uint64_t *)&unk_100291470);
    v6 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100006DF4(&qword_10028CE40);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(_QWORD *)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)v12;
  swift_release(v13);
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  return a1;
}

uint64_t sub_100098300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009830C);
}

uint64_t sub_10009830C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100006DF4(&qword_10028CE50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100098398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000983A4);
}

uint64_t sub_1000983A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_10028CE50);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for ConversationViewsMenu(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F7A8;
  if (!qword_10028F7A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConversationViewsMenu);
  return result;
}

void sub_10009845C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1001EC0A8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1000984CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10021229C, 1);
}

uint64_t sub_1000984DC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  _QWORD v23[2];
  char v24;

  v2 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ConversationViewsMenu(0) + 20));
  v3 = *v2;
  v4 = v2[1];
  v5 = type metadata accessor for SceneContext(0);
  v6 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v7 = EnvironmentObject.projectedValue.getter(v3, v4, v5, v6);
  KeyPath = swift_getKeyPath(&unk_1001EC110);
  EnvironmentObject.Wrapper.subscript.getter(v23, KeyPath, v7, v6);
  swift_release(KeyPath);
  swift_release(v7);
  v21[0] = v23[0];
  v21[1] = v23[1];
  v22 = v24;
  v9 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x80000001001FB080);
  v18[0] = Text.init(_:tableName:bundle:comment:)(v9);
  v18[1] = v10;
  v19 = v11 & 1;
  v20 = v12;
  v17 = a1;
  v13 = sub_100006DF4(&qword_10028F800);
  v14 = sub_100012334(&qword_10028F808, &qword_10028F800, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return Picker.init(selection:label:content:)(v21, v18, sub_1000993FC, v16, &type metadata for Text, &type metadata for Bool, v13, &protocol witness table for Text, &protocol witness table for Bool, v14);
}

uint64_t sub_100098670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  unsigned int v53;
  _QWORD *v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD v96[2];
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD, uint64_t, uint64_t);
  void (*v108)(uint64_t, _QWORD, uint64_t);
  unsigned int v109;
  char *v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v122 = a2;
  v128 = sub_100006DF4(&qword_10028F810);
  __chkstk_darwin(v128);
  v4 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v100 = (char *)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028CFE8);
  v9 = __chkstk_darwin(v8);
  v124 = (uint64_t)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)v96 - v11;
  v13 = sub_100006DF4(&qword_10028CE40);
  v14 = __chkstk_darwin(v13);
  v99 = (uint64_t)v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v123 = (uint64_t)v96 - v17;
  v18 = __chkstk_darwin(v16);
  v115 = (char *)v96 - v19;
  v20 = __chkstk_darwin(v18);
  v106 = (uint64_t)v96 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)v96 - v23;
  __chkstk_darwin(v22);
  v26 = (_QWORD *)((char *)v96 - v25);
  v127 = sub_100006DF4(&qword_10028AB30);
  v112 = *(_QWORD *)(v127 - 8);
  v27 = __chkstk_darwin(v127);
  v119 = (char *)v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v105 = (char *)v96 - v29;
  v126 = sub_100006DF4(&qword_10028F818);
  v30 = __chkstk_darwin(v126);
  v118 = (uint64_t)v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v33 = (char *)v96 - v32;
  v34 = sub_100006DF4(&qword_10028F820);
  v35 = __chkstk_darwin(v34);
  v121 = (uint64_t)v96 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v120 = (uint64_t)v96 - v38;
  v39 = __chkstk_darwin(v37);
  v116 = (char *)v96 - v40;
  v41 = __chkstk_darwin(v39);
  v117 = (uint64_t)v96 - v42;
  v43 = __chkstk_darwin(v41);
  v110 = (char *)v96 - v44;
  __chkstk_darwin(v43);
  v125 = (uint64_t)v96 - v45;
  v46 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x80000001001FB0A0);
  v104 = v47;
  v102 = v48;
  v103 = v49;
  v114 = a1;
  sub_1000D58EC(v26);
  v50 = *(void (**)(_QWORD))(v6 + 104);
  v109 = enum case for UserInterfaceSizeClass.compact(_:);
  v108 = (void (*)(uint64_t, _QWORD, uint64_t))v50;
  v50(v24);
  v107 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56);
  v107(v24, 0, 1, v5);
  v113 = v8;
  v51 = (uint64_t)&v12[*(int *)(v8 + 48)];
  sub_10000B074((uint64_t)v26, (uint64_t)v12, &qword_10028CE40);
  sub_10000B074((uint64_t)v24, v51, &qword_10028CE40);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v53 = v52(v12, 1, v5);
  v101 = v6;
  v111 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
  if (v53 == 1)
  {
    sub_10000A020((uint64_t)v24, &qword_10028CE40);
    sub_10000A020((uint64_t)v26, &qword_10028CE40);
    if (v52((char *)v51, 1, v5) == 1)
    {
      sub_10000A020((uint64_t)v12, &qword_10028CE40);
      v54 = v115;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_10000B074((uint64_t)v12, v106, &qword_10028CE40);
  if (v52((char *)v51, 1, v5) == 1)
  {
    sub_10000A020((uint64_t)v24, &qword_10028CE40);
    sub_10000A020((uint64_t)v26, &qword_10028CE40);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v106, v5);
LABEL_6:
    sub_10000A020((uint64_t)v12, &qword_10028CFE8);
    v54 = v115;
    goto LABEL_8;
  }
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  v98 = v4;
  v56 = v100;
  v55(v100, v51, v5);
  v57 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v97 = v46;
  v58 = v106;
  v96[1] = dispatch thunk of static Equatable.== infix(_:_:)(v106, v56, v5, v57);
  v59 = *(void (**)(char *, uint64_t))(v6 + 8);
  v60 = v56;
  v4 = v98;
  v59(v60, v5);
  sub_10000A020((uint64_t)v24, &qword_10028CE40);
  sub_10000A020((uint64_t)v26, &qword_10028CE40);
  v61 = v58;
  v46 = v97;
  v59((char *)v61, v5);
  sub_10000A020((uint64_t)v12, &qword_10028CE40);
  v54 = v115;
LABEL_8:
  v62 = v105;
  Label<>.init(_:systemImage:)(v46);
  v63 = v112;
  v64 = v127;
  v115 = *(char **)(v112 + 16);
  ((void (*)(char *, char *, uint64_t))v115)(v4, v62, v127);
  v4[*(int *)(v128 + 36)] = 1;
  sub_10000B074((uint64_t)v4, (uint64_t)v33, &qword_10028F810);
  v65 = v126;
  v33[*(int *)(v126 + 36)] = 1;
  sub_10000A020((uint64_t)v4, &qword_10028F810);
  v112 = *(_QWORD *)(v63 + 8);
  ((void (*)(char *, uint64_t))v112)(v62, v64);
  v66 = sub_100099404();
  v67 = (uint64_t)v110;
  View.accessibilityIdentifier(_:)(0xD000000000000010, 0x80000001001FB0E0, v65, v66);
  sub_10000A020((uint64_t)v33, &qword_10028F818);
  sub_100099524(v67, v125);
  v110 = (char *)LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x80000001001FB100);
  v106 = v68;
  LODWORD(v104) = v69;
  v105 = v70;
  sub_1000D58EC(v54);
  v71 = v123;
  v108(v123, v109, v5);
  v107((char *)v71, 0, 1, v5);
  v72 = v124;
  v73 = v124 + *(int *)(v113 + 48);
  sub_10000B074((uint64_t)v54, v124, &qword_10028CE40);
  sub_10000B074(v71, v73, &qword_10028CE40);
  v74 = v111;
  if (v111(v72, 1, v5) != 1)
  {
    v75 = v99;
    sub_10000B074(v72, v99, &qword_10028CE40);
    if (v74(v73, 1, v5) != 1)
    {
      v76 = v101;
      v77 = (uint64_t)v54;
      v78 = v75;
      v79 = v4;
      v80 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v100, v73, v5);
      v81 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      dispatch thunk of static Equatable.== infix(_:_:)(v78, v80, v5, v81);
      v82 = *(void (**)(char *, uint64_t))(v76 + 8);
      v83 = v80;
      v4 = v79;
      v82(v83, v5);
      sub_10000A020(v123, &qword_10028CE40);
      sub_10000A020(v77, &qword_10028CE40);
      v82((char *)v78, v5);
      sub_10000A020(v72, &qword_10028CE40);
      goto LABEL_15;
    }
    sub_10000A020(v123, &qword_10028CE40);
    sub_10000A020((uint64_t)v54, &qword_10028CE40);
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v75, v5);
    goto LABEL_13;
  }
  sub_10000A020(v71, &qword_10028CE40);
  v72 = v124;
  sub_10000A020((uint64_t)v54, &qword_10028CE40);
  if (v74(v73, 1, v5) != 1)
  {
LABEL_13:
    sub_10000A020(v72, &qword_10028CFE8);
    goto LABEL_15;
  }
  sub_10000A020(v72, &qword_10028CE40);
LABEL_15:
  v84 = v119;
  Label<>.init(_:systemImage:)(v110);
  v85 = v127;
  ((void (*)(char *, char *, uint64_t))v115)(v4, v84, v127);
  v4[*(int *)(v128 + 36)] = 0;
  v86 = v118;
  sub_10000B074((uint64_t)v4, v118, &qword_10028F810);
  v87 = v126;
  *(_BYTE *)(v86 + *(int *)(v126 + 36)) = 0;
  sub_10000A020((uint64_t)v4, &qword_10028F810);
  ((void (*)(char *, uint64_t))v112)(v84, v85);
  v88 = (uint64_t)v116;
  View.accessibilityIdentifier(_:)(0xD000000000000010, 0x80000001001FB140, v87, v66);
  sub_10000A020(v86, &qword_10028F818);
  v89 = v117;
  sub_100099524(v88, v117);
  v90 = v125;
  v91 = v120;
  sub_10000B074(v125, v120, &qword_10028F820);
  v92 = v121;
  sub_10000B074(v89, v121, &qword_10028F820);
  v93 = v122;
  sub_10000B074(v91, v122, &qword_10028F820);
  v94 = sub_100006DF4(&qword_10028F858);
  sub_10000B074(v92, v93 + *(int *)(v94 + 48), &qword_10028F820);
  sub_10000A020(v89, &qword_10028F820);
  sub_10000A020(v90, &qword_10028F820);
  sub_10000A020(v92, &qword_10028F820);
  return sub_10000A020(v91, &qword_10028F820);
}

double sub_1000991EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  double result;

  v0 = LocalizedStringKey.init(stringLiteral:)(1464158550, 0xE400000000000000);
  v1 = Text.init(_:tableName:bundle:comment:)(v0);
  v3 = v2;
  v5 = v4;
  v7 = v6 & 1;
  View.accessibilityIdentifier(_:)(0x7474754277656976, 0xEA00000000006E6FLL, &type metadata for Text, &protocol witness table for Text);
  sub_10001B9E8(v1, v3, v7);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

uint64_t sub_1000992BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = sub_100006DF4(&qword_10028F7E0);
  v1 = sub_100006DF4(&qword_10028F7E8);
  v2 = sub_100099370();
  v3 = sub_100012334(&qword_10028F7F8, &qword_10028F7E8, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
  return Menu.init(content:label:)(sub_100099368, &v5, sub_1000991EC, 0, v0, v1, v2, v3);
}

uint64_t sub_100099368()
{
  uint64_t v0;

  return sub_1000984DC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100099370()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F7F0;
  if (!qword_10028F7F0)
  {
    v1 = sub_1000070BC(&qword_10028F7E0);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F7F0);
  }
  return result;
}

uint64_t sub_1000993FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100098670(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100099404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F828;
  if (!qword_10028F828)
  {
    v1 = sub_1000070BC(&qword_10028F818);
    sub_100099488();
    sub_100012334(&qword_10028F848, &qword_10028F850, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F828);
  }
  return result;
}

unint64_t sub_100099488()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F830;
  if (!qword_10028F830)
  {
    v1 = sub_1000070BC(&qword_10028F810);
    sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_100012334(&qword_10028F838, &qword_10028F840, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F830);
  }
  return result;
}

uint64_t sub_100099524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028F820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009956C()
{
  return sub_100012334(&qword_10028F860, &qword_10028F868, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
}

uint64_t initializeWithCopy for CopyButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for CopyButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a1[1];
  v5 = a2[1];
  a1[1] = v5;
  swift_retain(v5);
  swift_release(v4);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

_QWORD *assignWithTake for CopyButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_release(a1[1]);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CopyButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CopyButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CopyButton()
{
  return &type metadata for CopyButton;
}

uint64_t sub_100099728(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100212358, 1);
}

uint64_t sub_100099738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v26 = a3;
  WitnessTable = swift_getWitnessTable(&unk_1001EC26C, a2);
  v6 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v23 = type metadata accessor for _MaskAlignmentEffect(255, v8, v7);
  v9 = type metadata accessor for ModifiedContent(0, v6, v23);
  v24 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v23 - v14;
  v16 = static Alignment.leading.getter(v13);
  v18 = v17;
  v28 = v8;
  v29 = v7;
  v30 = v3;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v6);
  View.mask<A>(alignment:_:)(v16, v18, sub_10009AAB0, v27, v6, v8, v19, v7);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for _MaskAlignmentEffect<A>, v23);
  v31 = v19;
  v32 = v20;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  sub_10012B9C4((uint64_t)v12, v9, (uint64_t)v15);
  v21 = *(void (**)(char *, uint64_t))(v24 + 8);
  v21(v12, v9);
  sub_10012B654((uint64_t)v15, v9, v26);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, v9);
}

uint64_t sub_1000998E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012B9C4(v6, v9, (uint64_t)v8);
  sub_10012B654((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
}

void sub_100099978(_QWORD *a1@<X8>)
{
  *a1 = &off_1002620C8;
}

_QWORD *sub_100099988(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = a1;
  v11 = a2;
  swift_retain(a2);
  v6 = sub_100006DF4(&qword_10028F888);
  result = State.wrappedValue.getter(&v12);
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    v10 = a1;
    v11 = a2;
    v9 = v12 + 1;
    State.wrappedValue.setter(&v9, v6);
    v8 = swift_release(a2);
    return (_QWORD *)a3(v8);
  }
  return result;
}

uint64_t sub_100099A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  _UNKNOWN **v9;

  v9 = &off_1002620F0;
  v8[1] = a1;
  v8[2] = a2;
  sub_100006DF4(&qword_10028F888);
  State.wrappedValue.getter(v8);
  v2 = sub_100006DF4(&qword_10028F890);
  v3 = sub_100006DF4(&qword_10028F898);
  v4 = sub_10009A23C();
  v5 = sub_100012334(&qword_10028F8A8, &qword_10028F890, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v6 = sub_100012334(&qword_10028F8B0, &qword_10028F898, (uint64_t)&protocol conformance descriptor for [A]);
  return PhaseAnimator.init<A, B>(_:trigger:content:animation:)(&v9, v8, sub_100099B38, 0, sub_10009A05C, 0, &type metadata for CopyButton.CopyAnimationPhase, v2, v3, &type metadata for Int, v4, v5, v6, &protocol witness table for Int);
}

double sub_100099B38@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;
  _QWORD v14[4];
  __int128 v15;
  char v16;
  char v17;

  v3 = *a1;
  v4 = static Alignment.center.getter(a1);
  v6 = v5;
  sub_100099BBC(v3, (uint64_t)v14);
  v7 = v14[0];
  result = *(double *)&v14[1];
  v9 = v14[2];
  v10 = v14[3];
  v11 = v16;
  v12 = v17;
  v13 = v15;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(double *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v10;
  *(_OWORD *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 65) = v12;
  return result;
}

uint64_t sub_100099BBC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  __int128 v61;

  v4 = type metadata accessor for OpacityTransition(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v44 - v9;
  v11 = Image.init(systemName:)(0x642E6E6F2E636F64, 0xEA0000000000636FLL);
  v12 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  if (a1)
  {
    if (a1 != 1)
    {
      v27 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
      v28 = static Alignment.center.getter(v27);
      v30 = _FrameLayout.init(width:height:alignment:)(&v54, 0, 0, 0, 1, v28, v29);
      *(_QWORD *)&v50 = v54;
      BYTE8(v50) = BYTE8(v54);
      v51 = v55;
      v52 = v56;
      v53 = v57;
      v31 = static Alignment.center.getter(v30);
      _FrameLayout.init(width:height:alignment:)(&v58, 0, 1, 0, 1, v31, v32);
      v45 = v58;
      LOBYTE(v46) = BYTE8(v58);
      v47 = v59;
      v48 = v60;
      v49 = v61;
      v33 = sub_100006DF4(&qword_10028F8B8);
      v34 = sub_100012334(&qword_10028F8C0, &qword_10028F8B8, (uint64_t)&unk_1001EC26C);
      v35 = static AnyTransition.modifier<A>(active:identity:)(&v50, &v45, v33, v34);
      v36 = static AnyTransition.opacity.getter();
      v37 = static AnyTransition.asymmetric(insertion:removal:)(v35, v36);
      swift_release(v35);
      swift_release(v36);
      v45 = v27;
      v46 = v37;
      LOWORD(v47) = 256;
      v38 = sub_100006DF4(&qword_10028F8C8);
      v39 = sub_100006DF4(&qword_10028F8D0);
      v40 = sub_10009A280();
      v41 = sub_10009A2EC();
      _ConditionalContent<>.init(storage:)(&v45, v38, v39, v40, v41);
      v24 = v50;
      v25 = v51;
      v26 = BYTE1(v51);
      goto LABEL_7;
    }
    v54 = 0uLL;
    LOBYTE(v55) = 1;
    v13 = sub_100006DF4(&qword_10028F8D0);
    v14 = sub_10009A2EC();
    _ConditionalContent<>.init(storage:)(&v54, v13, &type metadata for EmptyView, v14, &protocol witness table for EmptyView);
    v54 = v58;
    LOWORD(v55) = v59;
    v15 = sub_100006DF4(&qword_10028F8C8);
    v16 = sub_10009A280();
    _ConditionalContent<>.init(storage:)(&v54, v15, v13, v16, v14);
  }
  else
  {
    v17 = Image.init(systemName:)(0x642E6E6F2E636F64, 0xEA0000000000636FLL);
    OpacityTransition.init()();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v18 = sub_10009A440();
    v19 = AnyTransition.init<A>(_:)(v8, v4, v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    *(_QWORD *)&v54 = v17;
    *((_QWORD *)&v54 + 1) = v19;
    LOBYTE(v55) = 0;
    swift_retain(v17);
    swift_retain(v19);
    v20 = sub_100006DF4(&qword_10028F8D0);
    v21 = sub_10009A2EC();
    _ConditionalContent<>.init(storage:)(&v54, v20, &type metadata for EmptyView, v21, &protocol witness table for EmptyView);
    v54 = v58;
    LOWORD(v55) = v59;
    v22 = sub_100006DF4(&qword_10028F8C8);
    v23 = sub_10009A280();
    _ConditionalContent<>.init(storage:)(&v54, v22, v20, v23, v21);
    swift_release(v19);
    swift_release(v17);
  }
  v24 = v58;
  v25 = v59;
  v26 = BYTE1(v59);
LABEL_7:
  v44 = v24;
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = v24;
  *(_BYTE *)(a2 + 48) = v25;
  *(_BYTE *)(a2 + 49) = v26;
  swift_retain(v11);
  swift_retain(v12);
  v42 = v44;
  sub_10009A370(v44, *((uint64_t *)&v44 + 1), v25, v26);
  sub_10009A3D8(v42, *((uint64_t *)&v42 + 1), v25, v26);
  swift_release(v11);
  return swift_release(v12);
}

uint64_t sub_10009A05C(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;

  v1 = *a1;
  v2 = static Animation.spring(response:dampingFraction:blendDuration:)(0.35, 1.0, 0.0);
  if (v1 == 2)
    v3.n128_f64[0] = 1.0;
  else
    v3.n128_f64[0] = 0.35;
  v4 = Animation.logicallyComplete(after:)(v3);
  swift_release(v2);
  return v4;
}

uint64_t sub_10009A0C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_100006DF4(&qword_10028F870);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *v1;
  v7 = v1[1];
  v10 = v1[2];
  v9 = v1[3];
  v11 = (_QWORD *)swift_allocObject(&unk_100267AE0, 48, 7);
  v11[2] = v8;
  v11[3] = v7;
  v11[4] = v10;
  v11[5] = v9;
  v16 = v8;
  v17 = v7;
  v18 = v10;
  v19 = v9;
  swift_retain(v7);
  swift_retain(v9);
  v12 = sub_100006DF4(&qword_10028F878);
  v13 = sub_100012334(&qword_10028F880, &qword_10028F878, (uint64_t)&protocol conformance descriptor for PhaseAnimator<A, B>);
  Button.init(action:label:)(sub_10009A224, v11, sub_10009A230, v15, v12, v13);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10009A1F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_10009A224()
{
  uint64_t v0;

  return sub_100099988(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_10009A230()
{
  uint64_t v0;

  return sub_100099A28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10009A23C()
{
  unint64_t result;

  result = qword_10028F8A0;
  if (!qword_10028F8A0)
  {
    result = swift_getWitnessTable(&unk_1001EC2BC, &type metadata for CopyButton.CopyAnimationPhase);
    atomic_store(result, (unint64_t *)&qword_10028F8A0);
  }
  return result;
}

unint64_t sub_10009A280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F8D8;
  if (!qword_10028F8D8)
  {
    v1 = sub_1000070BC(&qword_10028F8C8);
    sub_10009A2EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F8D8);
  }
  return result;
}

unint64_t sub_10009A2EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F8E0;
  if (!qword_10028F8E0)
  {
    v1 = sub_1000070BC(&qword_10028F8D0);
    sub_100012334(&qword_10028F8E8, &qword_10028F8F0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F8E0);
  }
  return result;
}

void sub_10009A370(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    swift_retain(a1);
    swift_retain(a2);
  }
  else
  {
    sub_10009A3AC(a1, a2, a3 & 1);
  }
}

uint64_t sub_10009A3AC(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_retain(result);
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10009A3D8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) == 0)
    return sub_10009A414(a1, a2, a3 & 1);
  swift_release(a1);
  return swift_release(a2);
}

uint64_t sub_10009A414(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_release(result);
    return swift_release(a2);
  }
  return result;
}

unint64_t sub_10009A440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F8F8[0];
  if (!qword_10028F8F8[0])
  {
    v1 = type metadata accessor for OpacityTransition(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OpacityTransition, v1);
    atomic_store(result, qword_10028F8F8);
  }
  return result;
}

uint64_t sub_10009A488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10009A490(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10009A4FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_10009A56C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_10009A57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_10009A5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_10009A5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_10009A60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_10009A63C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10009A6EC + 4 * byte_1001EC140[(v7 - 1)]))();
}

void sub_10009A73C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for MaskModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MaskModifier);
}

uint64_t storeEnumTagSinglePayload for CopyButton.CopyAnimationPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10009A944 + 4 * byte_1001EC153[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10009A978 + 4 * byte_1001EC14E[v4]))();
}

uint64_t sub_10009A978(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A980(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009A988);
  return result;
}

uint64_t sub_10009A994(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009A99CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10009A9A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A9A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CopyButton.CopyAnimationPhase()
{
  return &type metadata for CopyButton.CopyAnimationPhase;
}

unint64_t sub_10009A9C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F980;
  if (!qword_10028F980)
  {
    v1 = sub_1000070BC(&qword_10028F988);
    sub_100012334(&qword_10028F990, &qword_10028F870, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10028F980);
  }
  return result;
}

uint64_t sub_10009AA4C()
{
  return sub_100012334(&qword_10028F998, &qword_10028F898, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_10009AA7C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1002123A0, 1);
}

uint64_t sub_10009AAB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000998E4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10009AABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10009AAE8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for MaskModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_1001EC26C, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = type metadata accessor for _MaskAlignmentEffect(255, v4, v5);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for _MaskAlignmentEffect<A>, v9);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
}

uint64_t sub_10009ABB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EC438);
  v2 = swift_getKeyPath(&unk_1001EC460);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10009AC20()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EC3F0);
  v2 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

double sub_10009AC90@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[5];
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_1001EC3A8);
  v4 = swift_getKeyPath(&unk_1001EC3D0);
  static Published.subscript.getter(v11, v1, KeyPath, v4);
  swift_release(v4);
  swift_release(KeyPath);
  v5 = v12;
  result = *(double *)v11;
  v7 = v11[1];
  v8 = v11[2];
  v9 = v11[3];
  v10 = v11[4];
  *(_OWORD *)a1 = v11[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 80) = v5;
  return result;
}

void (*sub_10009AD20(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_1001EC3A8);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_1001EC3D0);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_10009AD98;
}

void sub_10009AD98(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

_QWORD *sub_10009ADE4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028FC50);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028FC58);
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  __chkstk_darwin(v4);
  v45 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = &_swiftEmptySetSingleton;
  v1[3] = 0;
  v41 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v41);
  *(_QWORD *)&v51 = _swiftEmptyArrayStorage;
  v17 = sub_100007D5C(&qword_10028F258, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_100006DF4(&qword_10028F260);
  v19 = sub_1000827A0(&qword_10028F268, &qword_10028F260);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v18, v19, v11, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x80000001001FB300, v16, v13, v10, 0);
  v1[5] = objc_msgSend(objc_allocWithZone((Class)AVAudioSession), "init");
  static Date.distantPast.getter();
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_minTimeIntervalDeviceDiscovery) = 0x3FB999999999999ALL;
  v20 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper__isAnyHeadsetConnected;
  LOBYTE(v51) = 0;
  v21 = v42;
  Published.init(initialValue:)(&v51, &type metadata for Bool);
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v20, v21, v44);
  v22 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper__audioDevices;
  *(_QWORD *)&v51 = _swiftEmptyArrayStorage;
  v23 = sub_100006DF4(&qword_10028AFD0);
  v24 = v45;
  Published.init(initialValue:)(&v51, v23);
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v22, v24, v47);
  v25 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper__ownerAudioDevice;
  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v51 = 0u;
  v26 = sub_100006DF4(&qword_10028AE38);
  v27 = v48;
  Published.init(initialValue:)(&v51, v26);
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v25, v27, v50);
  v28 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice;
  *(_OWORD *)v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  *((_OWORD *)v28 + 2) = 0u;
  *((_OWORD *)v28 + 3) = 0u;
  *((_OWORD *)v28 + 4) = 0u;
  *((_QWORD *)v28 + 10) = 0;
  *((_QWORD *)&v52 + 1) = &type metadata for TranslateFeatures;
  *(_QWORD *)&v53 = sub_100009BC4();
  LOBYTE(v51) = 8;
  LOBYTE(v25) = isFeatureEnabled(_:)(&v51);
  sub_100009C08(&v51);
  if ((v25 & 1) != 0)
  {
    v29 = (void *)v1[5];
    *(_QWORD *)&v51 = 0;
    v30 = objc_msgSend(v29, "setCategory:withOptions:error:", AVAudioSessionCategoryPlayAndRecord, 12, &v51);
    v31 = v51;
    if (v30)
    {
      v32 = (id)v51;
    }
    else
    {
      v33 = (id)v51;
      v34 = _convertNSErrorToError(_:)(v31);

      swift_willThrow();
      swift_errorRelease(v34);
    }
    v35 = (void *)objc_opt_self(NSNotificationCenter);
    v36 = objc_msgSend(v35, "defaultCenter");
    objc_msgSend(v36, "addObserver:selector:name:object:", v1, "handleRouteChangeWithNotification:", AVAudioSessionRouteChangeNotification, v1[5]);

    v37 = objc_msgSend(v35, "defaultCenter");
    objc_msgSend(v37, "addObserver:selector:name:object:", v1, "handlePickableRouteChangeWithNotification:", AVAudioSessionPickableRouteChangeNotification, v1[5]);

    v38 = objc_msgSend(v35, "defaultCenter");
    objc_msgSend(v38, "addObserver:selector:name:object:", v1, "availableOutputDeviceChangedWithNotification:", AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification, v1[3]);

  }
  sub_10009B578();
  return v1;
}

uint64_t sub_10009B37C()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  ValueMetadata *v15;
  unint64_t v16;

  v15 = &type metadata for TranslateFeatures;
  v1 = sub_100009BC4();
  v16 = v1;
  LOBYTE(v14[0]) = 8;
  v2 = isFeatureEnabled(_:)(v14);
  sub_100009C08(v14);
  if ((v2 & 1) != 0)
  {
    v15 = &type metadata for TranslateFeatures;
    v16 = v1;
    LOBYTE(v14[0]) = 8;
    v3 = isFeatureEnabled(_:)(v14);
    sub_100009C08(v14);
    if ((v3 & 1) != 0)
    {
      v4 = *(void **)(v0 + 24);
      *(_QWORD *)(v0 + 24) = 0;

    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  v5 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_lastDeviceDiscovery;
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper__isAnyHeadsetConnected;
  v8 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper__audioDevices;
  v10 = sub_100006DF4(&qword_10028FC58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper__ownerAudioDevice;
  v12 = sub_100006DF4(&qword_10028FC50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  sub_10001613C(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 56), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 64), *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 72), *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 80));
  return v0;
}

uint64_t sub_10009B510()
{
  uint64_t v0;

  sub_10009B37C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10009B534()
{
  return type metadata accessor for DeviceHelper(0);
}

uint64_t type metadata accessor for DeviceHelper(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F9E0;
  if (!qword_10028F9E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceHelper);
  return result;
}

id sub_10009B578()
{
  uint64_t v0;
  char v1;
  id result;
  id v3;
  void *v4;
  _QWORD v5[5];

  v5[3] = &type metadata for TranslateFeatures;
  v5[4] = sub_100009BC4();
  LOBYTE(v5[0]) = 8;
  v1 = isFeatureEnabled(_:)(v5);
  result = (id)sub_100009C08(v5);
  if ((v1 & 1) != 0)
  {
    result = *(id *)(v0 + 24);
    if (result)
      return objc_msgSend(result, "setDiscoveryMode:", 1);
    v3 = objc_msgSend(objc_allocWithZone((Class)AVOutputDeviceDiscoverySession), "initWithDeviceFeatures:", 1);
    v4 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v3;

    sub_10009D50C();
    result = *(id *)(v0 + 24);
    if (result)
      return objc_msgSend(result, "setDiscoveryMode:", 1);
  }
  return result;
}

uint64_t sub_10009B624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[3];
  void *v38;
  void (*v39)();
  uint64_t v40;
  void *v41;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Notification(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  Notification.object.getter(aBlock, v12);
  if (!v38)
    return sub_10000A020((uint64_t)aBlock, (uint64_t *)&unk_10028C0B0);
  v13 = sub_10000A05C(0, &qword_10028F218, AVAudioSession_ptr);
  result = swift_dynamicCast(&v41, aBlock, (char *)&type metadata for Any + 8, v13, 6);
  if ((result & 1) != 0)
  {
    v31 = v41;
    v15 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    v33 = static OS_dispatch_queue.main.getter(v15);
    v16 = swift_allocObject(&unk_100267D08, 24, 7);
    swift_weakInit(v16 + 16, v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    v17 = *(unsigned __int8 *)(v10 + 80);
    v34 = v3;
    v18 = (v17 + 32) & ~v17;
    v19 = swift_allocObject(&unk_100267D58, v18 + v11, v17 | 7);
    v32 = v2;
    v20 = v31;
    *(_QWORD *)(v19 + 16) = v16;
    *(_QWORD *)(v19 + 24) = v20;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + v18, (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    v39 = sub_1000A3868;
    v40 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100075908;
    v38 = &unk_100267D70;
    v21 = _Block_copy(aBlock);
    v22 = v40;
    v23 = v20;
    v24 = swift_release(v22);
    static DispatchQoS.unspecified.getter(v24);
    aBlock[0] = _swiftEmptyArrayStorage;
    v25 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_100006DF4(&qword_10028AC30);
    v27 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
    v28 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v32, v25);
    v29 = (void *)v33;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  }
  return result;
}

void sub_10009B944(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  const char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  char v101[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v101, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(a2, "currentRoute");
    if (qword_10028A3F8 != -1)
      swift_once(&qword_10028A3F8, sub_100120EB0);
    v7 = type metadata accessor for Logger(0);
    sub_10000F66C(v7, (uint64_t)qword_1002AA2F0);
    v8 = v6;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter(v9);
    v95 = v5;
    v93 = a2;
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v97 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = objc_msgSend(v8, "inputs");
      v14 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

      v17 = Array.description.getter(v16);
      v19 = v18;
      swift_bridgeObjectRelease(v15);
      *(_QWORD *)&v99 = sub_1001A7FE4(v17, v19, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8, v11 + 4);
      swift_bridgeObjectRelease(v19);

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Audio route change: current route inputs %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {

    }
    v20 = v8;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v97 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = objc_msgSend(v20, "outputs");
      v26 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
      v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

      v29 = Array.description.getter(v28);
      v31 = v30;
      swift_bridgeObjectRelease(v27);
      *(_QWORD *)&v99 = sub_1001A7FE4(v29, v31, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8, v23 + 4);
      swift_bridgeObjectRelease(v31);

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Audio route change current route outputs %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {

    }
    v32 = v95;
    v33 = v93;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      v38 = -[NSObject preferredInput](v33, "preferredInput");
      v39 = v38;
      if (v38)
        v97 = (uint64_t)v38;
      else
        v97 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v36 + 4);
      *v37 = v39;

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Audio preferred input: %@", v36, 0xCu);
      v40 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v37, 1, v40);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {

      v34 = v33;
    }

    v41 = Notification.userInfo.getter();
    if (v41)
    {
      v42 = v41;
      v96[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionRouteChangeReasonKey);
      v96[1] = v43;
      AnyHashable.init<A>(_:)(&v97, v96, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v42 + 16) && (v44 = sub_1001A87EC((uint64_t)&v97), (v45 & 1) != 0))
      {
        sub_10000A0EC(*(_QWORD *)(v42 + 56) + 32 * v44, (uint64_t)&v99);
      }
      else
      {
        v99 = 0u;
        v100 = 0u;
      }
      swift_bridgeObjectRelease(v42);
      sub_10005DEC0((uint64_t)&v97);
      if (!*((_QWORD *)&v100 + 1))
      {
        swift_release(v95);

        sub_10000A020((uint64_t)&v99, (uint64_t *)&unk_10028C0B0);
        return;
      }
      v46 = swift_dynamicCast(v96, &v99, (char *)&type metadata for Any + 8, &type metadata for UInt, 6);
      if ((v46 & 1) == 0)
      {
        swift_release(v95);

        return;
      }
      if (v96[0] == 2)
      {
        v51 = Logger.logObject.getter(v46);
        v52 = static os_log_type_t.info.getter(v51);
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Audio route change reason: old device unavailable", v53, 2u);
          swift_slowDealloc(v53, -1, -1);
        }

        v54 = objc_msgSend(v20, "outputs");
        v55 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
        v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v54, v55);

        v94 = v56;
        if (v56 >> 62)
          goto LABEL_65;
        v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v94);
        for (; v57; v57 = _CocoaArrayWrapper.endIndex.getter(v92))
        {
          v58 = 4;
          while (1)
          {
            v59 = (v94 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v58 - 4, v94)
                : *(id *)(v94 + 8 * v58);
            v60 = v59;
            v61 = v58 - 3;
            if (__OFADD__(v58 - 4, 1))
              break;
            v62 = objc_msgSend(v59, "portType");
            v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
            v65 = v64;
            v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionPortBluetoothHFP);
            if (v63 == v66 && v65 == v67)
              goto LABEL_57;
            v69 = v67;
            v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v66, v67, 0);
            swift_bridgeObjectRelease(v69);
            swift_bridgeObjectRelease(v65);

            if ((v70 & 1) != 0)
              goto LABEL_59;
            v62 = objc_msgSend(v60, "portType");
            v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
            v65 = v72;
            v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionPortHeadphones);
            v75 = v73;
            if (v71 == v74 && v65 == v73)
              goto LABEL_57;
            v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v65, v74, v73, 0);
            swift_bridgeObjectRelease(v75);
            swift_bridgeObjectRelease(v65);

            if ((v76 & 1) != 0)
              goto LABEL_59;
            v62 = objc_msgSend(v60, "portType");
            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
            v65 = v78;
            v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionPortBluetoothA2DP);
            v81 = v79;
            if (v77 == v80 && v65 == v79)
            {
LABEL_57:
              swift_bridgeObjectRelease_n(v65, 2);

LABEL_59:
LABEL_60:
              swift_bridgeObjectRelease_n(v94, 2);
              v32 = v95;
              goto LABEL_61;
            }
            v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v65, v80, v79, 0);
            swift_bridgeObjectRelease(v81);
            swift_bridgeObjectRelease(v65);

            if ((v82 & 1) != 0)
              goto LABEL_59;
            v83 = objc_msgSend(v60, "portType");
            v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
            v86 = v85;
            v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionPortHeadsetMic);
            v89 = v87;
            if (v84 == v88 && v86 == v87)
            {
              swift_bridgeObjectRelease_n(v86, 2);

              goto LABEL_59;
            }
            v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, v86, v88, v87, 0);
            swift_bridgeObjectRelease(v89);
            swift_bridgeObjectRelease(v86);

            if ((v90 & 1) != 0)
              goto LABEL_60;
            ++v58;
            if (v61 == v57)
              goto LABEL_53;
          }
          __break(1u);
LABEL_65:
          if (v94 < 0)
            v92 = v94;
          else
            v92 = v94 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v94);
        }
LABEL_53:
        v91 = swift_bridgeObjectRelease_n(v94, 2);
        v47 = Logger.logObject.getter(v91);
        v48 = static os_log_type_t.info.getter(v47);
        v32 = v95;
        if (!os_log_type_enabled(v47, v48))
          goto LABEL_56;
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        v50 = "Route outputs do not contain headphones";
        goto LABEL_55;
      }
      if (v96[0] == 1)
      {
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.info.getter(v47);
        if (!os_log_type_enabled(v47, v48))
          goto LABEL_56;
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        v50 = "Audio route change reason: new device available";
LABEL_55:
        _os_log_impl((void *)&_mh_execute_header, v47, v48, v50, v49, 2u);
        swift_slowDealloc(v49, -1, -1);
LABEL_56:

LABEL_61:
        sub_10009D50C();
      }
    }

    swift_release(v32);
  }
}

uint64_t sub_10009C498(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;

  v7 = type metadata accessor for Notification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = qword_10028A3F8;
  swift_retain(a1);
  if (v11 != -1)
    swift_once(&qword_10028A3F8, sub_100120EB0);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA2F0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, a4, v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  sub_10009D50C();
  swift_release(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_10009C5EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];

  v10[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[1] = "\b";
  v10[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v10[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v10[4] = *(_QWORD *)(v2 - 8) + 64;
    v10[5] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_1000936A0();
    if (v5 <= 0x3F)
    {
      v10[6] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001DFF8(319, &qword_10028F9F0, &qword_10028AFD0);
      if (v7 <= 0x3F)
      {
        v10[7] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001DFF8(319, (unint64_t *)&unk_10028F9F8, &qword_10028AE38);
        if (v9 <= 0x3F)
        {
          v10[8] = *(_QWORD *)(v8 - 8) + 64;
          v10[9] = &unk_1001EC358;
          swift_updateClassMetadata2(a1, 256, 10, v10, a1 + 80);
        }
      }
    }
  }
}

BOOL sub_10009C704()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;

  KeyPath = swift_getKeyPath(&unk_1001EC3F0);
  v2 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v26, v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v26;
  v4 = *(_QWORD *)(v26 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v26);
    v5 = 0;
    v6 = _swiftEmptyArrayStorage;
    v21 = v3;
    do
    {
      v8 = v3 + v5;
      v9 = *(_QWORD *)(v3 + v5 + 88);
      if (*(_QWORD *)(v3 + v5 + 80) == 1 && (v9 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        v11 = *(_QWORD *)(v8 + 40);
        v13 = *(_QWORD *)(v8 + 48);
        v12 = *(_QWORD *)(v8 + 56);
        v14 = *(_QWORD *)(v8 + 72);
        v22 = *(_QWORD *)(v8 + 64);
        v23 = *(_QWORD *)(v8 + 32);
        v24 = *(_BYTE *)(v8 + 96);
        v25 = *(_OWORD *)(v8 + 104);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        v15 = (id)v25;
        v16 = *((id *)&v25 + 1);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_1001A7A50(0, v6[2] + 1, 1, v6);
        v18 = v6[2];
        v17 = v6[3];
        if (v18 >= v17 >> 1)
          v6 = sub_1001A7A50((_QWORD *)(v17 > 1), v18 + 1, 1, v6);
        v6[2] = v18 + 1;
        v7 = &v6[11 * v18];
        v7[4] = v23;
        v7[5] = v11;
        v7[6] = v13;
        v7[7] = v12;
        v3 = v21;
        v7[8] = v22;
        v7[9] = v14;
        v7[10] = 1;
        v7[11] = v9;
        *((_BYTE *)v7 + 96) = v24;
        *(_OWORD *)(v7 + 13) = v25;
      }
      v5 += 88;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v6 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v3);
  v19 = v6[2];
  swift_bridgeObjectRelease(v6);
  return v19 < 2;
}

void sub_10009C8E8(void *a1, char a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  NSArray v89;
  NSArray v90;
  unsigned int v91;
  id v92;
  id v93;
  id v94;
  unsigned int v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint8_t *v106;
  uint8_t *v107;
  unsigned int v108;
  id v109;
  id v110;
  unsigned int v111;
  id v112;
  id v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  id v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;

  if ((a2 & 0x40) != 0)
  {
    v26 = (_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice);
    v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice);
    v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 8);
    v30 = v26[2];
    v29 = v26[3];
    v32 = v26[4];
    v31 = v26[5];
    v33 = (void *)v26[9];
    v34 = (void *)v26[10];
    v125 = v26[8];
    v127 = v26[7];
    v133 = v26[6];
    sub_1000161E0(v28, v27, v30, v29, v32, v31, v133, v127, v125, v33, v34);
    if (!v27)
      goto LABEL_50;
LABEL_15:
    v37 = v28;
    v38 = v30;
    v39 = v37;
    v40 = v31;
    v41 = v32;
    v115 = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v40);
    v122 = v33;
    v42 = v33;
    v120 = v34;
    v43 = v34;
    v44 = objc_msgSend(a1, "availableInputs");
    if (v44)
    {
      v45 = v44;
      v46 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
      v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

    }
    else
    {
      v47 = 0;
    }
    v48 = v38;
    v49 = sub_1000A2568(v38, v29, v133, v47);
    swift_bridgeObjectRelease(v47);
    v135 = v49;
    v50 = v49;
    v51 = objc_msgSend(a1, "availableOutputs");
    v117 = v41;
    if (v51)
    {
      v52 = v51;
      v53 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
      v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v53);

    }
    else
    {
      v54 = 0;
    }
    v55 = v48;
    v56 = v48;
    v57 = v29;
    v58 = sub_1000A2568(v56, v29, v133, v54);

    swift_bridgeObjectRelease(v54);
    v118 = v55;
    v130 = v39;
    if (!v49)
    {
      v135 = v58;
      if (!v58)
      {
        v65 = 0;
        v60 = 0;
        goto LABEL_28;
      }
      v50 = v58;
    }
    v59 = sub_100006DF4(&qword_10028A6C0);
    v60 = swift_allocObject(v59, 48, 7);
    *(_OWORD *)(v60 + 16) = xmmword_1001E64F0;
    v61 = objc_msgSend(v50, "UID");
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v64 = v63;

    *(_QWORD *)(v60 + 32) = v62;
    *(_QWORD *)(v60 + 40) = v64;
    if (v58)
    {
      v65 = swift_allocObject(v59, 48, 7);
      *(_OWORD *)(v65 + 16) = xmmword_1001E64F0;
      v66 = objc_msgSend(v58, "UID");
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v69 = v68;

      *(_QWORD *)(v65 + 32) = v67;
      *(_QWORD *)(v65 + 40) = v69;
    }
    else
    {
      v65 = 0;
    }
LABEL_28:
    v116 = v57;
    if (qword_10028A3F8 != -1)
      swift_once(&qword_10028A3F8, sub_100120EB0);
    v70 = type metadata accessor for Logger(0);
    sub_10000F66C(v70, (uint64_t)qword_1002AA2F0);
    v71 = v135;
    v72 = v135;
    swift_bridgeObjectRetain_n(v60, 2);
    swift_bridgeObjectRetain_n(v65, 2);
    v73 = v72;
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.info.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      v76 = swift_slowAlloc(32, -1);
      v114 = (void *)swift_slowAlloc(96, -1);
      v136 = v114;
      *(_DWORD *)v76 = 136315650;
      if (v60)
      {
        v77 = Array.debugDescription.getter(v60, &type metadata for String);
        v79 = v78;
      }
      else
      {
        v77 = 0;
        v79 = 0xE000000000000000;
      }
      v134 = (id)sub_1001A7FE4(v77, v79, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v76 + 4);
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease_n(v60, 2);
      *(_WORD *)(v76 + 12) = 2080;
      v134 = (id)v65;
      v80 = sub_100006DF4(&qword_10028FC68);
      v81 = Optional.debugDescription.getter(v80);
      v83 = v82;
      v134 = (id)sub_1001A7FE4(v81, v82, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v76 + 14);
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease_n(v65, 2);
      *(_WORD *)(v76 + 22) = 2080;
      v134 = v71;
      v84 = sub_100006DF4(&qword_10028FC70);
      v85 = Optional.debugDescription.getter(v84);
      v87 = v86;
      v134 = (id)sub_1001A7FE4(v85, v86, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v76 + 24);
      swift_bridgeObjectRelease(v87);

      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Preferred persistent input %s, and output %s with inputPort %s", (uint8_t *)v76, 0x20u);
      swift_arrayDestroy(v114, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v60, 2);
      swift_bridgeObjectRelease_n(v65, 2);

    }
    if (v60)
    {
      v89.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v88 = swift_bridgeObjectRelease(v60).n128_u64[0];
      if (v65)
      {
LABEL_38:
        v90.super.isa = Array._bridgeToObjectiveC()().super.isa;
        v88 = swift_bridgeObjectRelease(v65).n128_u64[0];
        goto LABEL_41;
      }
    }
    else
    {
      v89.super.isa = 0;
      if (v65)
        goto LABEL_38;
    }
    v90.super.isa = 0;
LABEL_41:
    v136 = 0;
    v91 = objc_msgSend(a1, "setPreferredPersistentInputUIDs:outputUIDs:error:", v89.super.isa, v90.super.isa, &v136, *(double *)&v88);

    v92 = v136;
    if (v91)
    {
      swift_beginAccess(&v135, &v136, 0, 0);
      v93 = v135;
      v134 = 0;
      v94 = v92;
      v95 = objc_msgSend(a1, "setPreferredInput:error:", v93, &v134);
      v96 = v134;
      if (v95)
      {
        v97 = v134;

        sub_10001613C(v130, v115, v118, v116, v117, v40, v133, v127, v125, v122, v120);
        sub_10001613C(v130, v115, v118, v116, v117, v40, v133, v127, v125, v122, v120);
      }
      else
      {
        v99 = v134;
        _convertNSErrorToError(_:)(v96);

        swift_willThrow();
        sub_10001613C(v130, v115, v118, v116, v117, v40, v133, v127, v125, v122, v120);

        sub_10001613C(v130, v115, v118, v116, v117, v40, v133, v127, v125, v122, v120);
      }
    }
    else
    {
      v98 = v136;
      _convertNSErrorToError(_:)(v92);

      swift_willThrow();
      sub_10001613C(v130, v115, v118, v116, v117, v40, v133, v127, v125, v122, v120);

      sub_10001613C(v130, v115, v118, v116, v117, v40, v133, v127, v125, v122, v120);
    }
    return;
  }
  KeyPath = swift_getKeyPath(&unk_1001EC3A8);
  v5 = swift_getKeyPath(&unk_1001EC3D0);
  if ((a2 & 1) != 0)
  {
    static Published.subscript.getter(&v136, v2, KeyPath);
    swift_release(v5);
    swift_release(KeyPath);
    v28 = (uint64_t)v136;
    v27 = v137;
    v30 = v138;
    v29 = v139;
    v32 = v140;
    v31 = v141;
    v133 = v142;
    v33 = v145;
    v125 = v144;
    v127 = v143;
    v34 = v146;
    if (!v137)
      goto LABEL_50;
    goto LABEL_15;
  }
  static Published.subscript.getter(&v136, v2, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  v7 = (uint64_t)v136;
  v6 = v137;
  v9 = v138;
  v8 = v139;
  v10 = v142;
  v11 = v144;
  v12 = v145;
  v13 = v146;
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 8);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 16);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 24);
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 32);
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 40);
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 48);
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 56);
  v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 64);
  v23 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 72);
  v24 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 80);
  if (!v137)
  {
    if (!v15)
    {
LABEL_49:
      v28 = 0;
      v30 = 0;
      v29 = 0;
      v32 = 0;
      v31 = 0;
      v133 = 0;
      v125 = 0;
      v127 = 0;
      v33 = 0;
      v34 = 0;
      goto LABEL_50;
    }
    goto LABEL_13;
  }
  if (!v15)
  {
LABEL_13:
    v147 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice);
    v148 = v15;
    v149 = v16;
    v150 = v17;
    v151 = v18;
    v152 = v19;
    v153 = v20;
    v154 = v21;
    v155 = v22;
    v156 = v23;
    v157 = v24;
    sub_1000161E0(v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
    sub_1000A24AC((uint64_t)&v136);
    goto LABEL_14;
  }
  v132 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 48);
  v129 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice + 56);
  if (v138 == v16 && v139 == v17)
  {
    v25 = v143;
    sub_10001613C((uint64_t)v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146);
  }
  else
  {
    v123 = v141;
    v126 = v143;
    v121 = v140;
    v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v138, v139, v16, v17, 0);
    v100 = v6;
    v25 = v126;
    sub_10001613C(v7, v100, v9, v8, v121, v123, v10, v126, v11, v12, v13);
    if ((v128 & 1) == 0)
      goto LABEL_14;
  }
  if (v10 == v132 && v25 == v129)
    goto LABEL_49;
LABEL_14:
  v35 = swift_getKeyPath(&unk_1001EC3A8);
  v36 = swift_getKeyPath(&unk_1001EC3D0);
  static Published.subscript.getter(&v136, v2, v35);
  swift_release(v36);
  swift_release(v35);
  v28 = (uint64_t)v136;
  v27 = v137;
  v30 = v138;
  v29 = v139;
  v32 = v140;
  v31 = v141;
  v133 = v142;
  v33 = v145;
  v125 = v144;
  v127 = v143;
  v34 = v146;
  if (v137)
    goto LABEL_15;
LABEL_50:
  v124 = v33;
  if (qword_10028A3F8 != -1)
    swift_once(&qword_10028A3F8, sub_100120EB0);
  v101 = type metadata accessor for Logger(0);
  v102 = sub_10000F66C(v101, (uint64_t)qword_1002AA2F0);
  v103 = Logger.logObject.getter(v102);
  v104 = static os_log_type_t.info.getter(v103);
  if (os_log_type_enabled(v103, v104))
  {
    v119 = v30;
    v105 = v31;
    v106 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v106 = 0;
    _os_log_impl((void *)&_mh_execute_header, v103, v104, "Preferred persistent reset, audioDevice is not defined", v106, 2u);
    v107 = v106;
    v31 = v105;
    v30 = v119;
    swift_slowDealloc(v107, -1, -1);
  }

  v136 = 0;
  v108 = objc_msgSend(a1, "setPreferredPersistentInputUIDs:outputUIDs:error:", 0, 0, &v136);
  v109 = v136;
  if (v108
    && (v136 = 0,
        v110 = v109,
        v111 = objc_msgSend(a1, "setPreferredInput:error:", 0, &v136),
        v109 = v136,
        v111))
  {
    v112 = v136;
  }
  else
  {
    v113 = v109;
    _convertNSErrorToError(_:)(v109);

    swift_willThrow();
  }
  sub_10001613C(v28, 0, v30, v29, v32, v31, v133, v127, v125, v124, v34);
}

uint64_t sub_10009D50C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *(_QWORD *)(v0 + 32);
  v8 = swift_allocObject(&unk_100267D08, 24, 7);
  swift_weakInit(v8 + 16, v0);
  aBlock[4] = sub_1000A37E4;
  v19 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100267D20;
  v9 = _Block_copy(aBlock);
  swift_retain(v8);
  static DispatchQoS.unspecified.getter(v10);
  v17 = _swiftEmptyArrayStorage;
  v11 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100006DF4(&qword_10028AC30);
  v13 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release(v19);
  return swift_release(v8);
}

void sub_10009D70C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35[3];
  _BYTE v36[24];
  _BYTE v37[24];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v37, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v7 = Strong;
    v8 = Strong + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_lastDeviceDiscovery;
    swift_beginAccess(Strong + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_lastDeviceDiscovery, v36, 0, 0);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    v10 = Date.timeIntervalSinceNow.getter(v9);
    v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v10 <= -0.1)
    {
      static Date.now.getter(v11);
      swift_beginAccess(v8, v35, 33, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v8, v5, v2);
      swift_endAccess(v35);
      v17 = objc_msgSend(objc_allocWithZone((Class)AVOutputDeviceDiscoverySession), "initWithDeviceFeatures:", 1);
      objc_msgSend(v17, "setDiscoveryMode:", 1);
      v18 = objc_msgSend(v17, "availableOutputDevices");
      v19 = sub_10000A05C(0, &qword_10028FC60, AVOutputDevice_ptr);
      v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

      if (qword_10028A3F8 != -1)
        swift_once(&qword_10028A3F8, sub_100120EB0);
      v21 = type metadata accessor for Logger(0);
      sub_10000F66C(v21, (uint64_t)qword_1002AA2F0);
      v22 = swift_bridgeObjectRetain_n(v20, 2);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.info.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v33 = v17;
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v35[0] = v26;
        *(_DWORD *)v25 = 136315138;
        v27 = swift_bridgeObjectRetain(v20);
        v28 = Array.description.getter(v27);
        v30 = v29;
        swift_bridgeObjectRelease(v20);
        v34 = sub_1001A7FE4(v28, v30, v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v25 + 4);
        v31 = v30;
        v17 = v33;
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease_n(v20, 2);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "availableOutputDevices: %s", v25, 0xCu);
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v20, 2);
      }

      sub_10009DB28(v20);
      swift_bridgeObjectRelease(v20);

    }
    else
    {
      if (qword_10028A3F8 != -1)
        swift_once(&qword_10028A3F8, sub_100120EB0);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA2F0);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.info.getter(v14);
      if (!os_log_type_enabled(v14, v15))
      {
        swift_release(v7);

        return;
      }
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Throttling device discovery", v16, 2u);
      swift_slowDealloc(v16, -1, -1);

    }
    swift_release(v7);
  }
}

uint64_t sub_10009DB28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_100267CB8, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_1000A248C;
  v23 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100267CD0;
  v13 = _Block_copy(aBlock);
  v14 = v23;
  swift_retain(v2);
  swift_bridgeObjectRetain(a1);
  v15 = swift_release(v14);
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100006DF4(&qword_10028AC30);
  v18 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v20);
}

uint64_t sub_10009DD44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  uint8_t *v45;
  unint64_t v46;
  unint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  void *v50;
  uint8_t *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  NSString *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t **v79;
  id v80;
  char isUniquelyReferenced_nonNull_native;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint8_t *v88;
  void *v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  id v134;
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  char v144;
  uint64_t v145;
  id v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  id v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v161;
  char v162;
  id v163;
  void *v164;
  void *v165;
  unsigned __int8 v166;
  uint64_t v167;
  id v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  id v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v183;
  char v184;
  id v185;
  void *v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint8_t *v190;
  id v191;
  id v192;
  char *v193;
  uint64_t v194;
  uint8_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t KeyPath;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  unint64_t v210;
  __int128 v211;
  id v212;
  id v213;
  id v214;
  uint8_t *v215;
  NSObject *v216;
  os_log_type_t v217;
  uint64_t v218;
  uint8_t *v219;
  uint8_t *v220;
  os_log_type_t v221;
  uint8_t *v222;
  uint8_t *v223;
  os_log_type_t v224;
  os_log_type_t v225;
  uint8_t *v226;
  uint64_t v227;
  uint64_t v228;
  id v229;
  id v230;
  char *v231;
  uint64_t v232;
  uint8_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  id v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  unint64_t v247;
  void *v248;
  id v249;
  id v250;
  uint8_t *v251;
  uint8_t *v252;
  NSObject *v253;
  os_log_type_t v254;
  uint64_t v255;
  uint8_t *v256;
  uint8_t *v257;
  void *v258;
  NSObject *v259;
  os_log_type_t v260;
  uint64_t v261;
  uint8_t *v262;
  id v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  uint8_t *v269;
  NSObject *v270;
  os_log_type_t v271;
  uint8_t *v272;
  void *v273;
  os_log_type_t v274;
  uint8_t *v275;
  void *v276;
  void *v277;
  os_log_type_t v278;
  BOOL v279;
  id v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  void *v285;
  NSObject *v286;
  os_log_type_t v287;
  uint64_t v288;
  uint8_t *v289;
  id v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  NSObject *v297;
  os_log_type_t v298;
  uint8_t *v299;
  uint8_t *v300;
  uint64_t v301;
  uint8_t *v302;
  uint8_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint8_t *v306;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint8_t *v314;
  NSString *v315;
  NSString *v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint8_t *v321;
  uint64_t v322;
  void *v323;
  void *v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  id v329;
  id v330;
  uint8_t *v331;
  uint64_t v332;
  __int128 v333;
  uint64_t v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  void *v338;
  void *v339;
  uint64_t v340;
  uint8_t **v341;
  void *v342;
  AVAudioSessionPort v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  void (*v355)(_QWORD *);
  __n128 v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint8_t *v366;
  uint8_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  NSString *v371;
  void *v372;
  NSString *v373;
  uint64_t v374;
  AVAudioSessionPort v375;
  void *v376;
  NSString *v377;
  NSString *v378;
  void *v379;
  uint64_t v380;
  NSString *v381;
  void *v382;
  void *v383;
  uint64_t v384;
  NSString *v385;
  char v386;
  AVAudioSessionPort v387;
  uint8_t *v388;
  uint8_t *v389;
  void *v390;
  uint8_t *v391;
  void *v392;
  id v393;
  NSString *v394;
  id v395;
  NSString *v396;
  unint64_t v397;
  id v398;
  NSString *v399;
  uint64_t v400;
  uint64_t v401;
  uint8_t *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint8_t *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  void *v410;
  void *v411;
  unint64_t v412;
  char v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  char *v423;
  uint64_t v424;
  unint64_t v425;
  __int128 v426;
  __int128 v427;
  uint64_t v428;
  uint8_t *v429;
  uint8_t *v430;
  uint8_t *v431;
  __int128 v432;
  __int128 v433;
  AVAudioSessionPort v434;
  __int128 v435;
  __n128 v436;
  __int128 v437;
  char *v438;
  uint8_t *v439;
  uint64_t v440;
  uint8_t **v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint8_t *v445;
  uint64_t v446;
  uint64_t v447;
  __int128 v448;
  uint8_t *v449;
  void *v450;
  AVAudioSessionPort v451;
  AVAudioSessionPort v452;
  AVAudioSessionPort v453;
  AVAudioSessionPort v454;
  __int128 v455;
  uint8_t *v456;
  unint64_t v457;
  uint64_t v458;
  uint8_t *v459;
  uint64_t v460;
  __int128 v461;
  uint8_t *v462;
  uint64_t v463;
  __int128 v464;
  _BYTE v465[24];
  uint8_t *v466;
  uint64_t v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  void *v472;
  uint8_t *v473;
  uint64_t v474;
  __int128 v475;
  uint64_t v476;
  NSString *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char v482;
  void *v483;
  id v484;
  _QWORD v485[2];
  __int128 v486;
  uint8_t *v487;
  uint64_t v488;
  __int128 v489;
  char v490;
  id v491;
  id v492;
  _QWORD v493[6];
  __int128 v494;
  char v495;
  NSString *v496;
  id v497;
  _QWORD v498[2];
  __int128 v499;
  uint8_t *v500;
  uint64_t v501;
  uint64_t v502;
  uint8_t *v503;
  char v504;
  id v505;
  id v506;

  v447 = a2;
  v3 = type metadata accessor for UUID(0);
  v439 = *(uint8_t **)(v3 - 8);
  v440 = v3;
  __chkstk_darwin(v3);
  v438 = (char *)&v420 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v456 = (uint8_t *)&v420 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A3F8 != -1)
    goto LABEL_160;
  while (1)
  {
    v7 = type metadata accessor for Logger(0);
    v449 = (uint8_t *)sub_10000F66C(v7, (uint64_t)qword_1002AA2F0);
    v8 = Logger.logObject.getter(v449);
    v9 = static os_log_type_t.info.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Updating available audio devices", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(void **)(a1 + 40);
    v12 = objc_msgSend(v11, "availableInputs");
    if (v12)
    {
      v13 = v12;
      v14 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
      v15 = (uint8_t *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    }
    else
    {
      v15 = (uint8_t *)_swiftEmptyArrayStorage;
    }
    v16 = objc_msgSend(v11, "availableOutputs");
    if (v16)
    {
      v17 = v16;
      v18 = sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
      v19 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

    }
    else
    {
      v19 = _swiftEmptyArrayStorage;
    }
    v459 = v15;
    sub_1001827B8((uint64_t)v19);
    v20 = (uint64_t)v459;
    v441 = (uint8_t **)(a1 + 16);
    swift_beginAccess(a1 + 16, &v474, 1, 0);
    v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v21);
    if ((unint64_t)v447 >> 62)
      break;
    v22 = *(_QWORD *)((v447 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = swift_bridgeObjectRetain(v447);
    v446 = a1;
    if (!v22)
      goto LABEL_165;
LABEL_12:
    DWORD2(v437) = 0;
    v24 = 0;
    v424 = a1 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice;
    *((_QWORD *)&v448 + 1) = v447 & 0xC000000000000001;
    v444 = v447 & 0xFFFFFFFFFFFFFF8;
    v454 = AVAudioSessionPortHeadsetMic;
    v25 = v20 & 0xFFFFFFFFFFFFFF8;
    v442 = v20 & 0xFFFFFFFFFFFFFF8;
    v443 = v447 + 32;
    if (v20 < 0)
      v25 = v20;
    v421 = v25;
    v457 = v20 & 0xC000000000000001;
    v452 = AVAudioSessionPortHeadphones;
    v422 = (char *)&v475 + 8;
    v434 = AVAudioSessionPortBuiltInMic;
    v453 = AVAudioSessionPortBluetoothA2DP;
    v451 = AVAudioSessionPortBluetoothHFP;
    v425 = (unint64_t)"er.DetailedDeviceDiscovery";
    v23.n128_u64[0] = 136315138;
    v436 = v23;
    v423 = (char *)&type metadata for Any + 8;
    v432 = xmmword_1001E64F0;
    v433 = xmmword_1001EC300;
    v426 = 0x8000100uLL;
    v458 = v20;
    v445 = (uint8_t *)v22;
    while (1)
    {
LABEL_18:
      if (*((_QWORD *)&v448 + 1))
      {
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v447);
      }
      else
      {
        if (v24 >= *(_QWORD *)(v444 + 16))
          goto LABEL_156;
        v26 = *(id *)(v443 + 8 * v24);
      }
      v27 = v26;
      if (__OFADD__(v24++, 1))
        goto LABEL_155;
      v29 = objc_msgSend(v26, "deviceType");
      if (v29 != (id)1)
      {
        if (v29 != (id)3)
        {
          if (v29 == (id)4)
          {
            if (objc_msgSend(v27, "deviceSubType") == (id)2 || (v30 = objc_msgSend(v27, "deviceSubType"), v30 == (id)3))
            {
              v450 = v27;
              v31 = objc_msgSend(v27, "deviceName");
              if (v31)
              {
                v32 = v31;
                v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
                v35 = v34;

              }
              else
              {
                v35 = 0xEA00000000007365;
                v33 = 0x6E6F687064616548;
              }
              v459 = (uint8_t *)v33;
              v460 = v35;
              *(_QWORD *)&v475 = 59;
              *((_QWORD *)&v475 + 1) = 0xE100000000000000;
              v121 = sub_10000B030();
              v122 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v475, &type metadata for String, &type metadata for String, v121, v121);
              if (!v122[2])
                goto LABEL_157;
              v123 = v122;
              v124 = v122[4];
              *((_QWORD *)&v455 + 1) = v122[5];
              swift_bridgeObjectRetain(*((_QWORD *)&v455 + 1));
              swift_bridgeObjectRelease(v35);
              swift_bridgeObjectRelease(v123);
              *(_QWORD *)&v448 = v24;
              *(_QWORD *)&v455 = v124;
              if (!((unint64_t)v20 >> 62))
              {
                v125 = *(_QWORD *)(v442 + 16);
                swift_bridgeObjectRetain_n(v20, 3);
                if (v125)
                  goto LABEL_67;
                goto LABEL_145;
              }
              swift_bridgeObjectRetain_n(v20, 3);
              v125 = _CocoaArrayWrapper.endIndex.getter(v421);
              if (!v125)
              {
LABEL_145:
                swift_bridgeObjectRelease_n(v20, 3);
                swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
                v285 = v450;
                v286 = Logger.logObject.getter(v285);
                v287 = static os_log_type_t.info.getter(v286);
                if (os_log_type_enabled(v286, v287))
                {
                  v288 = swift_slowAlloc(12, -1);
                  v289 = (uint8_t *)swift_slowAlloc(32, -1);
                  v459 = v289;
                  *(_DWORD *)v288 = v436.n128_u32[0];
                  v290 = objc_msgSend(v285, "debugDescription");
                  v291 = static String._unconditionallyBridgeFromObjectiveC(_:)(v290);
                  v293 = v292;

                  *(_QWORD *)(v288 + 4) = sub_1001A7FE4(v291, v293, (uint64_t *)&v459);
                  v294 = v293;
                  v20 = v458;
                  swift_bridgeObjectRelease(v294);
                  _os_log_impl((void *)&_mh_execute_header, v286, v287, "Found no port match for %s", (uint8_t *)v288, 0xCu);
                  swift_arrayDestroy(v289, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v289, -1, -1);
                  swift_slowDealloc(v288, -1, -1);

                }
                else
                {

                }
                a1 = v446;
                goto LABEL_16;
              }
LABEL_67:
              v126 = 4;
              while (1)
              {
                if (v457)
                  v134 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v126 - 4, v20);
                else
                  v134 = *(id *)(v20 + 8 * v126);
                v135 = v134;
                a1 = v126 - 3;
                if (__OFADD__(v126 - 4, 1))
                  goto LABEL_152;
                v136 = objc_msgSend(v134, "portType");
                v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
                v139 = v138;
                v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v454);
                if (v137 == v140 && v139 == v141)
                {

                  swift_bridgeObjectRelease_n(v139, 2);
                  v20 = v458;
                }
                else
                {
                  v143 = v141;
                  v144 = _stringCompareWithSmolCheck(_:_:expecting:)(v137, v139, v140, v141, 0);

                  swift_bridgeObjectRelease(v139);
                  swift_bridgeObjectRelease(v143);
                  v20 = v458;
                  if ((v144 & 1) == 0)
                    goto LABEL_70;
                }
                v127 = objc_msgSend(v135, "portName");
                v128 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
                v130 = v129;

                v459 = v128;
                v460 = v130;
                v475 = v455;
                v131 = type metadata accessor for Locale(0);
                v132 = (uint64_t)v456;
                (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v456, 1, 1, v131);
                StringProtocol.range<A>(of:options:range:locale:)(&v475, 0, 0, 0, 1, v132, &type metadata for String, &type metadata for String, v121, v121);
                LOBYTE(v127) = v133;
                sub_10000A020(v132, (uint64_t *)&unk_10028FE50);
                swift_bridgeObjectRelease(v460);
                if ((v127 & 1) == 0)
                {
LABEL_112:
                  swift_bridgeObjectRelease_n(v20, 3);
                  v185 = v135;
                  v186 = v450;
                  v187 = (uint8_t *)sub_1000A335C(v450);
                  v189 = v188;
                  v190 = (uint8_t *)objc_msgSend(v186, "deviceSubType");
                  v191 = objc_msgSend(v185, "portType");
                  v192 = v185;
                  v193 = v438;
                  v194 = UUID.init()(v192);
                  v195 = (uint8_t *)UUID.uuidString.getter(v194);
                  v197 = v196;
                  (*((void (**)(char *, uint64_t))v439 + 1))(v193, v440);
                  v429 = v195;
                  v430 = v190;
                  v498[0] = v195;
                  v498[1] = v197;
                  v198 = *((_QWORD *)&v455 + 1);
                  v499 = v455;
                  v431 = v187;
                  v500 = v187;
                  v501 = v189;
                  v502 = 4;
                  v503 = v190;
                  v504 = 1;
                  v505 = v191;
                  v506 = v192;
                  swift_beginAccess(v441, &v475, 33, 0);
                  *(_QWORD *)&v437 = v197;
                  swift_bridgeObjectRetain(v197);
                  swift_bridgeObjectRetain(v198);
                  *((_QWORD *)&v437 + 1) = v189;
                  swift_bridgeObjectRetain(v189);
                  *(_QWORD *)&v435 = v191;
                  *((_QWORD *)&v435 + 1) = v192;
                  sub_100151050((uint64_t)&v459, v498);
                  swift_endAccess(&v475);
                  v199 = v460;
                  v200 = *((_QWORD *)&v461 + 1);
                  v201 = v463;
                  v202 = *(void **)&v465[8];

                  swift_bridgeObjectRelease(v201);
                  swift_bridgeObjectRelease(v200);
                  swift_bridgeObjectRelease(v199);
                  KeyPath = swift_getKeyPath(&unk_1001EC438);
                  v204 = swift_getKeyPath(&unk_1001EC460);
                  LOBYTE(v459) = 1;
                  a1 = v446;
                  swift_retain(v446);
                  static Published.subscript.setter(&v459, a1, KeyPath, v204);
                  v205 = swift_getKeyPath(&unk_1001EC3A8);
                  v206 = swift_getKeyPath(&unk_1001EC3D0);
                  static Published.subscript.getter(&v459, a1, v205);
                  swift_release(v205);
                  swift_release(v206);
                  v207 = v460;
                  sub_10001613C((uint64_t)v459, v460, v461, *((uint64_t *)&v461 + 1), (uint64_t)v462, v463, v464, *((uint64_t *)&v464 + 1), *(uint64_t *)v465, *(void **)&v465[8], *(void **)&v465[16]);
                  v22 = (uint64_t)v445;
                  v24 = v448;
                  if (!v207)
                  {
                    v428 = swift_getKeyPath(&unk_1001EC3A8);
                    *(_QWORD *)&v427 = swift_getKeyPath(&unk_1001EC3D0);
                    v209 = v437;
                    v459 = v429;
                    v460 = v437;
                    v210 = *((_QWORD *)&v455 + 1);
                    v461 = v455;
                    v462 = v431;
                    v463 = *((_QWORD *)&v437 + 1);
                    *(_QWORD *)&v464 = 4;
                    *((_QWORD *)&v464 + 1) = v430;
                    *(_QWORD *)v465 = 1;
                    v211 = v435;
                    *(_OWORD *)&v465[8] = v435;
                    swift_retain(a1);
                    swift_bridgeObjectRetain(v209);
                    swift_bridgeObjectRetain(v210);
                    swift_bridgeObjectRetain(*((_QWORD *)&v209 + 1));
                    v212 = (id)v211;
                    v213 = *((id *)&v211 + 1);
                    static Published.subscript.setter(&v459, a1, v428, v427);
                    swift_bridgeObjectRetain(v209);
                    swift_bridgeObjectRetain(v210);
                    swift_bridgeObjectRetain(*((_QWORD *)&v209 + 1));
                    v214 = v212;
                    v215 = (uint8_t *)v213;
                    v216 = Logger.logObject.getter(v215);
                    v217 = static os_log_type_t.info.getter(v216);
                    if (os_log_type_enabled(v216, v217))
                    {
                      v218 = swift_slowAlloc(12, -1);
                      v429 = v215;
                      v219 = (uint8_t *)v218;
                      v220 = (uint8_t *)swift_slowAlloc(32, -1);
                      v430 = v219;
                      v431 = v220;
                      v459 = v220;
                      *(_DWORD *)v219 = v436.n128_u32[0];
                      swift_bridgeObjectRetain(v210);
                      *(_QWORD *)&v475 = sub_1001A7FE4(v455, v210, (uint64_t *)&v459);
                      v22 = (uint64_t)v445;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, v422, v219 + 4);

                      swift_bridgeObjectRelease(*((_QWORD *)&v437 + 1));
                      swift_bridgeObjectRelease(v437);
                      swift_bridgeObjectRelease_n(v210, 2);
                      v221 = v217;
                      v222 = v430;
                      _os_log_impl((void *)&_mh_execute_header, v216, v221, "Set ownerAudioDevice to %s", v430, 0xCu);
                      v223 = v431;
                      swift_arrayDestroy(v431, 1, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v223, -1, -1);
                      swift_slowDealloc(v222, -1, -1);

                    }
                    else
                    {

                      swift_bridgeObjectRelease(*((_QWORD *)&v437 + 1));
                      swift_bridgeObjectRelease(v210);
                      swift_bridgeObjectRelease(v437);
                    }
                  }
                  v270 = Logger.logObject.getter(v208);
                  v274 = static os_log_type_t.info.getter(v270);
                  if (os_log_type_enabled(v270, v274))
                  {
                    v275 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v275 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v270, v274, "Discovered wired headphones", v275, 2u);
                    swift_slowDealloc(v275, -1, -1);

                    v276 = (void *)*((_QWORD *)&v435 + 1);
                    v273 = (void *)v435;
LABEL_136:

                    swift_bridgeObjectRelease(*((_QWORD *)&v437 + 1));
                    swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
                    swift_bridgeObjectRelease(v437);

                  }
                  else
                  {

                    swift_bridgeObjectRelease(*((_QWORD *)&v437 + 1));
                    swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
                    swift_bridgeObjectRelease(v437);
                    v277 = (void *)*((_QWORD *)&v435 + 1);

                  }
                  goto LABEL_138;
                }
LABEL_70:

                ++v126;
                if (a1 == v125)
                {
                  swift_bridgeObjectRelease_n(v20, 2);
                  swift_bridgeObjectRetain_n(v20, 2);
                  v167 = 4;
                  while (1)
                  {
                    if (v457)
                      v175 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v167 - 4, v20);
                    else
                      v175 = *(id *)(v20 + 8 * v167);
                    v135 = v175;
                    a1 = v167 - 3;
                    if (__OFADD__(v167 - 4, 1))
                      goto LABEL_154;
                    v176 = objc_msgSend(v175, "portType");
                    v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v176);
                    v179 = v178;
                    v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v452);
                    if (v177 == v180 && v179 == v181)
                      break;
                    v183 = v181;
                    v184 = _stringCompareWithSmolCheck(_:_:expecting:)(v177, v179, v180, v181, 0);

                    swift_bridgeObjectRelease(v179);
                    swift_bridgeObjectRelease(v183);
                    v20 = v458;
                    if ((v184 & 1) != 0)
                      goto LABEL_100;
LABEL_101:

                    ++v167;
                    if (a1 == v125)
                      goto LABEL_145;
                  }

                  swift_bridgeObjectRelease_n(v179, 2);
                  v20 = v458;
LABEL_100:
                  v168 = objc_msgSend(v135, "portName");
                  v169 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
                  v171 = v170;

                  v459 = v169;
                  v460 = v171;
                  v475 = v455;
                  v172 = type metadata accessor for Locale(0);
                  v173 = (uint64_t)v456;
                  (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v172 - 8) + 56))(v456, 1, 1, v172);
                  StringProtocol.range<A>(of:options:range:locale:)(&v475, 0, 0, 0, 1, v173, &type metadata for String, &type metadata for String, v121, v121);
                  LOBYTE(v168) = v174;
                  sub_10000A020(v173, (uint64_t *)&unk_10028FE50);
                  swift_bridgeObjectRelease(v460);
                  if ((v168 & 1) == 0)
                    goto LABEL_112;
                  goto LABEL_101;
                }
              }
            }
            v48 = Logger.logObject.getter(v30);
            v225 = static os_log_type_t.info.getter(v48);
            if (!os_log_type_enabled(v48, v225))
            {
LABEL_119:

              goto LABEL_17;
            }
            v50 = v27;
            v51 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v51 = 0;
            v52 = v48;
            v53 = v225;
            v54 = "Discovered wired non-headphone device";
          }
          else
          {
            v48 = Logger.logObject.getter(v29);
            v49 = static os_log_type_t.info.getter(v48);
            if (!os_log_type_enabled(v48, v49))
              goto LABEL_119;
            v50 = v27;
            v51 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v51 = 0;
            v52 = v48;
            v53 = v49;
            v54 = "Discovered device that is not a headphone or builtIn";
          }
LABEL_39:
          _os_log_impl((void *)&_mh_execute_header, v52, v53, v54, v51, 2u);
          swift_slowDealloc(v51, -1, -1);

          goto LABEL_17;
        }
        if (objc_msgSend(v27, "deviceSubType"))
        {
          v36 = v27;
          v37 = Logger.logObject.getter(v36);
          v38 = static os_log_type_t.info.getter(v37);
          if (os_log_type_enabled(v37, v38))
          {
            v39 = v24;
            v40 = swift_slowAlloc(12, -1);
            *(_DWORD *)v40 = v426;
            *(_QWORD *)(v40 + 4) = objc_msgSend(v36, "deviceSubType");

            _os_log_impl((void *)&_mh_execute_header, v37, v38, "Discovered builtIn non-standard device subType: %ld", (uint8_t *)v40, 0xCu);
            v41 = v40;
            v24 = v39;
            swift_slowDealloc(v41, -1, -1);

          }
          else
          {

          }
          goto LABEL_17;
        }
        v55 = (uint8_t *)sub_1000A335C(v27);
        v57 = v56;
        v459 = v55;
        v460 = v56;
        *(_QWORD *)&v475 = 46;
        *((_QWORD *)&v475 + 1) = 0xE100000000000000;
        v58 = sub_10000B030();
        v59 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v475, &type metadata for String, &type metadata for String, v58, v58);
        if (!v59[2])
          goto LABEL_159;
        v60 = v59;
        v450 = v27;
        *(_QWORD *)&v448 = v24;
        v61 = v59[4];
        v62 = v59[5];
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRelease(v60);
        swift_bridgeObjectRetain(v20);
        v63 = sub_1000A2568(v61, v62, 3, v20);
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v62);
        if (v63)
        {
          v64 = (void *)objc_opt_self(UIDevice);
          v65 = v63;
          *((_QWORD *)&v455 + 1) = v63;
          v66 = v65;
          v67 = objc_msgSend(v64, "currentDevice");
          v68 = objc_msgSend(v67, "name");

          v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
          *(_QWORD *)&v455 = v69;
          v71 = v70;

          v72 = v66;
          v73 = v434;
          v74 = v438;
          v75 = UUID.init()(v73);
          v76 = UUID.uuidString.getter(v75);
          *(_QWORD *)&v437 = v76;
          v78 = v77;
          (*((void (**)(char *, uint64_t))v439 + 1))(v74, v440);
          v493[0] = v76;
          v493[1] = v78;
          v493[2] = v69;
          v493[3] = v71;
          v493[4] = v55;
          v493[5] = v57;
          v494 = v433;
          v495 = 3;
          v496 = v73;
          v497 = v72;
          v79 = v441;
          swift_beginAccess(v441, &v475, 33, 0);
          swift_bridgeObjectRetain(v78);
          swift_bridgeObjectRetain(v71);
          swift_bridgeObjectRetain(v57);
          *((_QWORD *)&v435 + 1) = v73;
          v80 = v72;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v79);
          v473 = *v79;
          *v79 = (uint8_t *)0x8000000000000000;
          sub_1000A1FF8((uint64_t)v493, isUniquelyReferenced_nonNull_native, (uint64_t)&v459);
          v82 = *v79;
          *v79 = v473;
          swift_bridgeObjectRelease(v82);
          swift_endAccess(&v475);
          sub_10001613C((uint64_t)v459, v460, v461, *((uint64_t *)&v461 + 1), (uint64_t)v462, v463, v464, *((uint64_t *)&v464 + 1), *(uint64_t *)v465, *(void **)&v465[8], *(void **)&v465[16]);
          v83 = v424;
          v84 = *(_QWORD *)v424;
          v85 = *(_QWORD *)(v424 + 8);
          v86 = *(_QWORD *)(v424 + 16);
          *(_QWORD *)&v435 = *(_QWORD *)(v424 + 24);
          v87 = *(uint8_t **)(v424 + 32);
          v430 = *(uint8_t **)(v424 + 40);
          v431 = v87;
          v88 = *(uint8_t **)(v424 + 48);
          v428 = *(_QWORD *)(v424 + 56);
          v429 = v88;
          v427 = *(_OWORD *)(v424 + 64);
          v89 = *(void **)(v424 + 80);
          *(_QWORD *)v424 = v437;
          *(_QWORD *)(v83 + 8) = v78;
          *(_QWORD *)(v83 + 16) = v455;
          *(_QWORD *)(v83 + 24) = v71;
          *(_QWORD *)(v83 + 32) = v55;
          *(_QWORD *)(v83 + 40) = v57;
          *(_OWORD *)(v83 + 48) = v433;
          *(_QWORD *)(v83 + 64) = 3;
          v90 = *((_QWORD *)&v455 + 1);
          *(_QWORD *)(v83 + 72) = v434;
          *(_QWORD *)(v83 + 80) = v90;
          *(_QWORD *)&v455 = v78;
          swift_bridgeObjectRetain(v78);
          *((_QWORD *)&v455 + 1) = v71;
          swift_bridgeObjectRetain(v71);
          swift_bridgeObjectRetain(v57);
          v91 = *((id *)&v435 + 1);
          v92 = v80;
          sub_10001613C(v84, v85, v86, v435, (uint64_t)v431, (uint64_t)v430, (uint64_t)v429, v428, v427, *((void **)&v427 + 1), v89);
          v94 = Logger.logObject.getter(v93);
          v95 = static os_log_type_t.info.getter(v94);
          if (os_log_type_enabled(v94, v95))
          {
            v96 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v96 = 0;
            _os_log_impl((void *)&_mh_execute_header, v94, v95, "Discovered builtIn device", v96, 2u);
            swift_slowDealloc(v96, -1, -1);

            swift_bridgeObjectRelease(v57);
            swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
            swift_bridgeObjectRelease(v455);

          }
          else
          {

            swift_bridgeObjectRelease(v57);
            swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
            swift_bridgeObjectRelease(v455);

          }
          a1 = v446;
          v20 = v458;
          goto LABEL_16;
        }
        swift_bridgeObjectRelease(v57);
        v258 = v450;
        v259 = Logger.logObject.getter(v258);
        v260 = static os_log_type_t.info.getter(v259);
        if (os_log_type_enabled(v259, v260))
        {
          v261 = swift_slowAlloc(12, -1);
          v262 = (uint8_t *)swift_slowAlloc(32, -1);
          v459 = v262;
          *(_DWORD *)v261 = v436.n128_u32[0];
          v263 = objc_msgSend(v258, "debugDescription");
          v264 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
          v266 = v265;

          *(_QWORD *)(v261 + 4) = sub_1001A7FE4(v264, v266, (uint64_t *)&v459);
          v267 = v266;
          v20 = v458;
          swift_bridgeObjectRelease(v267);
          _os_log_impl((void *)&_mh_execute_header, v259, v260, "Found no port match for %s", (uint8_t *)v261, 0xCu);
          v268 = (char *)&type metadata for Any + 8;
          v269 = v262;
LABEL_143:
          swift_arrayDestroy(v269, 1, v268);
          swift_slowDealloc(v262, -1, -1);
          swift_slowDealloc(v261, -1, -1);

          goto LABEL_16;
        }
        goto LABEL_15;
      }
      if (objc_msgSend(v27, "deviceSubType") != (id)2)
      {
        v42 = objc_msgSend(v27, "deviceSubType");
        if (v42 != (id)3)
        {
          v48 = Logger.logObject.getter(v42);
          v224 = static os_log_type_t.info.getter(v48);
          if (!os_log_type_enabled(v48, v224))
            goto LABEL_119;
          v50 = v27;
          v51 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v51 = 0;
          v52 = v48;
          v53 = v224;
          v54 = "Discovered Bluetooth non-headphone device";
          goto LABEL_39;
        }
      }
      v450 = v27;
      v43 = objc_msgSend(v27, "deviceName");
      if (v43)
      {
        v44 = v43;
        v45 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v47 = v46;

      }
      else
      {
        v47 = v425 | 0x8000000000000000;
        v45 = (uint8_t *)0xD000000000000014;
      }
      v459 = v45;
      v460 = v47;
      *(_QWORD *)&v475 = 59;
      *((_QWORD *)&v475 + 1) = 0xE100000000000000;
      v97 = sub_10000B030();
      v98 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v475, &type metadata for String, &type metadata for String, v97, v97);
      if (!v98[2])
        goto LABEL_158;
      v99 = v98;
      v100 = v98[4];
      *((_QWORD *)&v455 + 1) = v98[5];
      swift_bridgeObjectRetain(*((_QWORD *)&v455 + 1));
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v99);
      *(_QWORD *)&v448 = v24;
      *(_QWORD *)&v455 = v100;
      if ((unint64_t)v20 >> 62)
        break;
      v101 = *(_QWORD *)(v442 + 16);
      swift_bridgeObjectRetain_n(v20, 3);
      if (v101)
        goto LABEL_49;
LABEL_141:
      swift_bridgeObjectRelease_n(v20, 3);
      swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
      v258 = v450;
      v259 = Logger.logObject.getter(v258);
      v278 = static os_log_type_t.info.getter(v259);
      v279 = os_log_type_enabled(v259, v278);
      a1 = v446;
      if (v279)
      {
        v261 = swift_slowAlloc(12, -1);
        v262 = (uint8_t *)swift_slowAlloc(32, -1);
        v459 = v262;
        *(_DWORD *)v261 = v436.n128_u32[0];
        v280 = objc_msgSend(v258, "debugDescription");
        v281 = static String._unconditionallyBridgeFromObjectiveC(_:)(v280);
        v283 = v282;

        *(_QWORD *)(v261 + 4) = sub_1001A7FE4(v281, v283, (uint64_t *)&v459);
        v284 = v283;
        v20 = v458;
        swift_bridgeObjectRelease(v284);
        _os_log_impl((void *)&_mh_execute_header, v259, v278, "Found no port match for %s", (uint8_t *)v261, 0xCu);
        v269 = v262;
        v268 = v423;
        goto LABEL_143;
      }
LABEL_15:

LABEL_16:
      v22 = (uint64_t)v445;
      v24 = v448;
LABEL_17:
      if (v24 == v22)
      {
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v447);
        if ((BYTE8(v437) & 1) == 0)
          goto LABEL_166;
        goto LABEL_169;
      }
    }
    swift_bridgeObjectRetain_n(v20, 3);
    v101 = _CocoaArrayWrapper.endIndex.getter(v421);
    if (!v101)
      goto LABEL_141;
LABEL_49:
    v102 = 4;
    while (1)
    {
      v110 = v457
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v102 - 4, v20)
           : *(id *)(v20 + 8 * v102);
      v111 = v110;
      a1 = v102 - 3;
      if (__OFADD__(v102 - 4, 1))
        break;
      v112 = objc_msgSend(v110, "portType");
      v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
      v115 = v114;
      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v453);
      v118 = v113 == v116 && v115 == v117;
      if (v118)
      {

        swift_bridgeObjectRelease_n(v115, 2);
        v20 = v458;
      }
      else
      {
        v119 = v117;
        v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v115, v116, v117, 0);

        swift_bridgeObjectRelease(v115);
        swift_bridgeObjectRelease(v119);
        v20 = v458;
        if ((v120 & 1) == 0)
          goto LABEL_52;
      }
      v103 = objc_msgSend(v111, "portName");
      v104 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      v106 = v105;

      v459 = v104;
      v460 = v106;
      v475 = v455;
      v107 = type metadata accessor for Locale(0);
      v108 = (uint64_t)v456;
      (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v456, 1, 1, v107);
      StringProtocol.range<A>(of:options:range:locale:)(&v475, 0, 0, 0, 1, v108, &type metadata for String, &type metadata for String, v97, v97);
      LOBYTE(v103) = v109;
      sub_10000A020(v108, (uint64_t *)&unk_10028FE50);
      swift_bridgeObjectRelease(v460);
      if ((v103 & 1) == 0)
      {
LABEL_95:
        swift_bridgeObjectRelease_n(v20, 3);
        v163 = v111;
        v164 = (void *)MRAVOutputDeviceCreateFromAVOutputDevice(v450);
        v24 = v448;
        if (v164
          && (v165 = v164,
              v166 = objc_msgSend(v164, "isAirpodsDevice"),
              v165,
              (v166 & 1) != 0))
        {
          *(_QWORD *)&v435 = 0;
        }
        else
        {
          *(_QWORD *)&v435 = 2;
        }
        v226 = (uint8_t *)sub_1000A335C(v450);
        v228 = v227;
        v229 = objc_msgSend(v163, "portType");
        v230 = v163;
        v231 = v438;
        v232 = UUID.init()(v230);
        v233 = (uint8_t *)UUID.uuidString.getter(v232);
        v235 = v234;
        (*((void (**)(char *, uint64_t))v439 + 1))(v231, v440);
        v430 = v233;
        v431 = v226;
        v485[0] = v233;
        v485[1] = v235;
        v236 = *((_QWORD *)&v455 + 1);
        v486 = v455;
        v487 = v226;
        v488 = v228;
        v489 = v432;
        v490 = v435;
        v491 = v229;
        v492 = v230;
        swift_beginAccess(v441, &v475, 33, 0);
        *(_QWORD *)&v437 = v235;
        swift_bridgeObjectRetain(v235);
        swift_bridgeObjectRetain(v236);
        *((_QWORD *)&v437 + 1) = v228;
        swift_bridgeObjectRetain(v228);
        *((_QWORD *)&v435 + 1) = v229;
        v237 = v230;
        a1 = v446;
        v238 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v446 + 16));
        v473 = *(uint8_t **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0x8000000000000000;
        sub_1000A1FF8((uint64_t)v485, v238, (uint64_t)&v459);
        v239 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v473;
        swift_bridgeObjectRelease(v239);
        swift_endAccess(&v475);
        sub_10001613C((uint64_t)v459, v460, v461, *((uint64_t *)&v461 + 1), (uint64_t)v462, v463, v464, *((uint64_t *)&v464 + 1), *(uint64_t *)v465, *(void **)&v465[8], *(void **)&v465[16]);
        v240 = swift_getKeyPath(&unk_1001EC438);
        v241 = swift_getKeyPath(&unk_1001EC460);
        LOBYTE(v459) = 1;
        swift_retain(a1);
        static Published.subscript.setter(&v459, a1, v240, v241);
        v242 = swift_getKeyPath(&unk_1001EC3A8);
        v243 = swift_getKeyPath(&unk_1001EC3D0);
        static Published.subscript.getter(&v459, a1, v242);
        swift_release(v242);
        swift_release(v243);
        v244 = v460;
        sub_10001613C((uint64_t)v459, v460, v461, *((uint64_t *)&v461 + 1), (uint64_t)v462, v463, v464, *((uint64_t *)&v464 + 1), *(uint64_t *)v465, *(void **)&v465[8], *(void **)&v465[16]);
        v22 = (uint64_t)v445;
        if (!v244)
        {
          v429 = (uint8_t *)swift_getKeyPath(&unk_1001EC3A8);
          v428 = swift_getKeyPath(&unk_1001EC3D0);
          v246 = v437;
          v459 = v430;
          v460 = v437;
          v247 = *((_QWORD *)&v455 + 1);
          v461 = v455;
          v462 = v431;
          v463 = *((_QWORD *)&v437 + 1);
          v464 = v432;
          v248 = (void *)*((_QWORD *)&v435 + 1);
          *(_OWORD *)v465 = v435;
          *(_QWORD *)&v465[16] = v237;
          swift_bridgeObjectRetain(v437);
          swift_bridgeObjectRetain(v247);
          swift_bridgeObjectRetain(*((_QWORD *)&v246 + 1));
          v249 = v248;
          *(_QWORD *)&v435 = v237;
          v250 = v237;
          swift_retain(a1);
          static Published.subscript.setter(&v459, a1, v429, v428);
          swift_bridgeObjectRetain(v246);
          swift_bridgeObjectRetain(v247);
          swift_bridgeObjectRetain(*((_QWORD *)&v246 + 1));
          v251 = (uint8_t *)v249;
          v252 = (uint8_t *)v250;
          v253 = Logger.logObject.getter(v252);
          v254 = static os_log_type_t.info.getter(v253);
          if (os_log_type_enabled(v253, v254))
          {
            v255 = swift_slowAlloc(12, -1);
            v430 = v251;
            v256 = (uint8_t *)v255;
            v431 = (uint8_t *)swift_slowAlloc(32, -1);
            v459 = v431;
            v429 = v252;
            *(_DWORD *)v256 = v436.n128_u32[0];
            swift_bridgeObjectRetain(v247);
            *(_QWORD *)&v475 = sub_1001A7FE4(v455, v247, (uint64_t *)&v459);
            v22 = (uint64_t)v445;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, v422, v256 + 4);

            swift_bridgeObjectRelease(*((_QWORD *)&v437 + 1));
            swift_bridgeObjectRelease(v246);
            swift_bridgeObjectRelease_n(v247, 2);
            _os_log_impl((void *)&_mh_execute_header, v253, v254, "Set ownerAudioDevice to %s", v256, 0xCu);
            v257 = v431;
            swift_arrayDestroy(v431, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v257, -1, -1);
            swift_slowDealloc(v256, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease(*((_QWORD *)&v437 + 1));
            swift_bridgeObjectRelease(v247);
            swift_bridgeObjectRelease(v246);
          }
          a1 = v446;
          v237 = (id)v435;
        }
        v270 = Logger.logObject.getter(v245);
        v271 = static os_log_type_t.info.getter(v270);
        if (os_log_type_enabled(v270, v271))
        {
          v272 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v272 = 0;
          _os_log_impl((void *)&_mh_execute_header, v270, v271, "Discovered Bluetooth headphones", v272, 2u);
          swift_slowDealloc(v272, -1, -1);

          v273 = (void *)*((_QWORD *)&v435 + 1);
          goto LABEL_136;
        }

        swift_bridgeObjectRelease(*((_QWORD *)&v437 + 1));
        swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
        swift_bridgeObjectRelease(v437);

LABEL_138:
        DWORD2(v437) = 1;
        if (v24 == v22)
        {
          swift_bridgeObjectRelease(v20);
          swift_bridgeObjectRelease(v447);
          goto LABEL_169;
        }
        goto LABEL_18;
      }
LABEL_52:

      ++v102;
      if (a1 == v101)
      {
        swift_bridgeObjectRelease_n(v20, 2);
        swift_bridgeObjectRetain_n(v20, 2);
        v145 = 4;
        while (1)
        {
          if (v457)
            v153 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v145 - 4, v20);
          else
            v153 = *(id *)(v20 + 8 * v145);
          v111 = v153;
          a1 = v145 - 3;
          if (__OFADD__(v145 - 4, 1))
            goto LABEL_153;
          v154 = objc_msgSend(v153, "portType");
          v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
          v157 = v156;
          v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v451);
          if (v155 == v158 && v157 == v159)
            break;
          v161 = v159;
          v162 = _stringCompareWithSmolCheck(_:_:expecting:)(v155, v157, v158, v159, 0);

          swift_bridgeObjectRelease(v157);
          swift_bridgeObjectRelease(v161);
          v20 = v458;
          if ((v162 & 1) != 0)
            goto LABEL_83;
LABEL_84:

          ++v145;
          if (a1 == v101)
            goto LABEL_141;
        }

        swift_bridgeObjectRelease_n(v157, 2);
        v20 = v458;
LABEL_83:
        v146 = objc_msgSend(v111, "portName");
        v147 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
        v149 = v148;

        v459 = v147;
        v460 = v149;
        v475 = v455;
        v150 = type metadata accessor for Locale(0);
        v151 = (uint64_t)v456;
        (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v456, 1, 1, v150);
        StringProtocol.range<A>(of:options:range:locale:)(&v475, 0, 0, 0, 1, v151, &type metadata for String, &type metadata for String, v97, v97);
        LOBYTE(v146) = v152;
        sub_10000A020(v151, (uint64_t *)&unk_10028FE50);
        swift_bridgeObjectRelease(v460);
        if ((v146 & 1) == 0)
          goto LABEL_95;
        goto LABEL_84;
      }
    }
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    swift_once(&qword_10028A3F8, sub_100120EB0);
  }
  if (v447 < 0)
    v296 = v447;
  else
    v296 = v447 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v447);
  v22 = _CocoaArrayWrapper.endIndex.getter(v296);
  v446 = a1;
  if (v22)
    goto LABEL_12;
LABEL_165:
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v447);
LABEL_166:
  v297 = Logger.logObject.getter(v295);
  v298 = static os_log_type_t.info.getter(v297);
  if (os_log_type_enabled(v297, v298))
  {
    v299 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v299 = 0;
    _os_log_impl((void *)&_mh_execute_header, v297, v298, "Did not discover headphones", v299, 2u);
    swift_slowDealloc(v299, -1, -1);
  }

  sub_1000A0BDC();
LABEL_169:
  v300 = *v441;
  swift_bridgeObjectRetain(*v441);
  v302 = (uint8_t *)sub_1001C66EC(v301);
  swift_bridgeObjectRelease(v300);
  v459 = v302;
  swift_retain(v302);
  sub_1000A13BC((uint64_t *)&v459);
  swift_release(v302);
  v303 = v459;
  v304 = swift_getKeyPath(&unk_1001EC3F0);
  v305 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v459, a1, v304);
  swift_release(v304);
  swift_release(v305);
  v306 = v459;
  LOBYTE(v305) = sub_1000BFD30((uint64_t)v459, (uint64_t)v303);
  swift_bridgeObjectRelease(v306);
  if ((v305 & 1) != 0)
    return swift_release(v303);
  v308 = swift_getKeyPath(&unk_1001EC3F0);
  v309 = swift_getKeyPath(&unk_1001EC418);
  v459 = v303;
  swift_retain(a1);
  static Published.subscript.setter(&v459, a1, v308, v309);
  v310 = swift_getKeyPath(&unk_1001EC3A8);
  v311 = swift_getKeyPath(&unk_1001EC3D0);
  static Published.subscript.getter(&v459, a1, v310);
  swift_release(v310);
  swift_release(v311);
  if (!v460)
    goto LABEL_212;
  v436.n128_u64[0] = v460;
  v434 = (AVAudioSessionPort)v459;
  v435 = v461;
  v439 = v462;
  v440 = v463;
  v437 = v464;
  *(_QWORD *)&v433 = *(_QWORD *)v465;
  v431 = *(uint8_t **)&v465[16];
  *(_QWORD *)&v432 = *(_QWORD *)&v465[8];
  v312 = swift_getKeyPath(&unk_1001EC3F0);
  v313 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v459, a1, v312);
  swift_release(v312);
  swift_release(v313);
  v314 = v459;
  v315 = (NSString *)*((_QWORD *)v459 + 2);
  v438 = 0;
  if (!v315)
  {
    v389 = 0;
    v346 = 0;
    v456 = 0;
    v340 = 0;
    v449 = 0;
    v450 = 0;
    v345 = 0;
    v451 = 0;
    v351 = 0;
    *((_QWORD *)&v448 + 1) = 0;
    v350 = 0;
    goto LABEL_189;
  }
  swift_bridgeObjectRetain(v459);
  v316 = 0;
  v445 = v314;
  while (2)
  {
    v452 = v316;
    v453 = v315;
    v317 = (char *)v316 + (_QWORD)v314;
    v318 = *((_QWORD *)v317 + 4);
    v319 = *((_QWORD *)v317 + 5);
    v320 = *((_QWORD *)v317 + 7);
    v456 = (uint8_t *)*((_QWORD *)v317 + 6);
    v321 = (uint8_t *)*((_QWORD *)v317 + 8);
    v322 = *((_QWORD *)v317 + 9);
    v451 = (AVAudioSessionPort)*((_QWORD *)v317 + 10);
    v323 = (void *)*((_QWORD *)v317 + 11);
    v449 = v321;
    v450 = v323;
    v325 = (void *)*((_QWORD *)v317 + 13);
    v324 = (void *)*((_QWORD *)v317 + 14);
    v326 = v317[96];
    v447 = v318;
    *(_QWORD *)&v448 = v326;
    v327 = swift_getKeyPath(&unk_1001EC3A8);
    v328 = swift_getKeyPath(&unk_1001EC3D0);
    v457 = v319;
    swift_bridgeObjectRetain_n(v319, 2);
    v458 = v320;
    swift_bridgeObjectRetain_n(v320, 2);
    *((_QWORD *)&v455 + 1) = v322;
    swift_bridgeObjectRetain_n(v322, 2);
    *((_QWORD *)&v448 + 1) = v325;
    v329 = v325;
    v330 = v324;
    *(_QWORD *)&v455 = v329;
    v454 = (AVAudioSessionPort)v330;
    static Published.subscript.getter(&v459, a1, v327);
    swift_release(v327);
    swift_release(v328);
    v331 = v459;
    v332 = v460;
    v333 = v461;
    v335 = (uint64_t)v462;
    v334 = v463;
    v336 = v464;
    v337 = *(_QWORD *)v465;
    v338 = *(void **)&v465[8];
    v339 = *(void **)&v465[16];
    if (v460)
    {
      v444 = (uint64_t)v324;
      if (v461 == __PAIR128__(v458, (unint64_t)v456))
      {
        v340 = v458;
        v342 = (void *)*((_QWORD *)&v464 + 1);
        v341 = (uint8_t **)v464;
        sub_10001613C((uint64_t)v459, v460, (uint64_t)v456, v458, (uint64_t)v462, v463, v464, *((uint64_t *)&v464 + 1), *(uint64_t *)v465, *(void **)&v465[8], *(void **)&v465[16]);
        v343 = v454;

        v344 = (void *)v455;
        v345 = *((_QWORD *)&v455 + 1);
        swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
        swift_bridgeObjectRelease(v340);
        v346 = v457;
        swift_bridgeObjectRelease(v457);
        v314 = v445;
LABEL_181:
        v118 = v451 == (AVAudioSessionPort)v341;
        a1 = v446;
        if (v118 && v450 == v342)
        {
          v389 = (uint8_t *)v447;
          goto LABEL_187;
        }

        swift_bridgeObjectRelease(v345);
        swift_bridgeObjectRelease(v340);
        swift_bridgeObjectRelease(v346);
      }
      else
      {
        v348 = *((_QWORD *)&v464 + 1);
        v441 = (uint8_t **)v464;
        v442 = v463;
        LODWORD(v443) = _stringCompareWithSmolCheck(_:_:expecting:)(v456, v458, v461, *((_QWORD *)&v461 + 1), 0);
        v419 = v339;
        v341 = v441;
        v349 = v332;
        v342 = (void *)v348;
        sub_10001613C((uint64_t)v331, v349, v333, *((uint64_t *)&v333 + 1), v335, v442, (uint64_t)v441, v348, v337, v338, v419);
        v343 = v454;

        v344 = (void *)v455;
        v345 = *((_QWORD *)&v455 + 1);
        swift_bridgeObjectRelease(*((_QWORD *)&v455 + 1));
        v340 = v458;
        swift_bridgeObjectRelease(v458);
        v346 = v457;
        swift_bridgeObjectRelease(v457);
        v314 = v445;
        if ((v443 & 1) != 0)
          goto LABEL_181;

        swift_bridgeObjectRelease(v345);
        swift_bridgeObjectRelease(v340);
        swift_bridgeObjectRelease(v346);
        a1 = v446;
      }
    }
    else
    {
      v459 = (uint8_t *)v447;
      v460 = v457;
      v347 = *((_QWORD *)&v455 + 1);
      *(_QWORD *)&v461 = v456;
      *((_QWORD *)&v461 + 1) = v458;
      v462 = v449;
      v463 = *((_QWORD *)&v455 + 1);
      *(_QWORD *)&v464 = v451;
      *((_QWORD *)&v464 + 1) = v450;
      *(_OWORD *)v465 = v448;
      *(_QWORD *)&v465[16] = v324;
      v466 = v331;
      v467 = 0;
      v468 = v333;
      *(_QWORD *)&v469 = v335;
      *((_QWORD *)&v469 + 1) = v334;
      v470 = v336;
      *(_QWORD *)&v471 = v337;
      *((_QWORD *)&v471 + 1) = v338;
      v472 = v339;
      sub_1000A24AC((uint64_t)&v459);

      swift_bridgeObjectRelease(v347);
      swift_bridgeObjectRelease(v458);
      swift_bridgeObjectRelease(v457);
      v314 = v445;
      a1 = v446;
    }
    v316 = v452 + 11;
    v315 = (AVAudioSessionPort)((char *)v453 - 1);
    if (v453 != (AVAudioSessionPort)1)
      continue;
    break;
  }
  v389 = 0;
  v346 = 0;
  v456 = 0;
  v340 = 0;
  v449 = 0;
  v450 = 0;
  v345 = 0;
  v451 = 0;
  v448 = 0uLL;
  v444 = 0;
LABEL_187:
  swift_bridgeObjectRelease(v314);
  v350 = v444;
  v351 = v448;
LABEL_189:
  swift_bridgeObjectRelease(v314);
  v352 = swift_getKeyPath(&unk_1001EC3A8);
  v353 = swift_getKeyPath(&unk_1001EC3D0);
  v459 = v389;
  v460 = v346;
  *(_QWORD *)&v461 = v456;
  *((_QWORD *)&v461 + 1) = v340;
  v462 = v449;
  v463 = v345;
  *(_QWORD *)&v464 = v451;
  *((_QWORD *)&v464 + 1) = v450;
  *(_QWORD *)v465 = v351;
  *(_QWORD *)&v465[8] = *((_QWORD *)&v448 + 1);
  *(_QWORD *)&v465[16] = v350;
  swift_retain(a1);
  static Published.subscript.setter(&v459, a1, v352, v353);
  v355 = sub_10009AD20(&v459);
  if (v354[1])
  {
    v357 = v354[5];
    v358 = v440;
    v354[4] = v439;
    v354[5] = v358;
    swift_bridgeObjectRetain(v358);
    v356 = swift_bridgeObjectRelease(v357);
  }
  ((void (*)(uint8_t **, _QWORD, __n128))v355)(&v459, 0, v356);
  v359 = swift_getKeyPath(&unk_1001EC3A8);
  v360 = swift_getKeyPath(&unk_1001EC3D0);
  static Published.subscript.getter(&v459, a1, v359);
  swift_release(v359);
  swift_release(v360);
  v361 = v460;
  sub_10001613C((uint64_t)v459, v460, v461, *((uint64_t *)&v461 + 1), (uint64_t)v462, v463, v464, *((uint64_t *)&v464 + 1), *(uint64_t *)v465, *(void **)&v465[8], *(void **)&v465[16]);
  if (v361)
    goto LABEL_211;
  v362 = swift_getKeyPath(&unk_1001EC438);
  v363 = swift_getKeyPath(&unk_1001EC460);
  static Published.subscript.getter(&v459, a1, v362);
  swift_release(v362);
  swift_release(v363);
  if (v459 != 1)
    goto LABEL_211;
  v364 = swift_getKeyPath(&unk_1001EC3F0);
  v365 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v459, a1, v364);
  swift_release(v364);
  swift_release(v365);
  v366 = v459;
  v367 = (uint8_t *)*((_QWORD *)v459 + 2);
  if (!v367)
  {
    swift_bridgeObjectRelease(v459);
    v457 = 0;
    v458 = 0;
    v387 = 0;
    v450 = 0;
    v451 = 0;
    v388 = 0;
    v374 = 0;
    v377 = 0;
    v376 = 0;
    v375 = 0;
    goto LABEL_210;
  }
  v368 = 0;
  v369 = a1 + OBJC_IVAR____TtC17SequoiaTranslator12DeviceHelper_builtInAudioDevice;
  v456 = v459;
  while (2)
  {
    v370 = *(_QWORD *)&v366[v368 + 32];
    v371 = *(NSString **)&v366[v368 + 48];
    v457 = *(_QWORD *)&v366[v368 + 40];
    v372 = *(void **)&v366[v368 + 56];
    *(_QWORD *)&v455 = *(_QWORD *)&v366[v368 + 64];
    *((_QWORD *)&v455 + 1) = v370;
    v373 = *(NSString **)&v366[v368 + 80];
    v458 = *(_QWORD *)&v366[v368 + 72];
    v374 = *(_QWORD *)&v366[v368 + 88];
    v376 = *(void **)&v366[v368 + 104];
    v375 = *(AVAudioSessionPort *)&v366[v368 + 112];
    v377 = (NSString *)v366[v368 + 96];
    v378 = *(NSString **)(v369 + 16);
    v379 = *(void **)(v369 + 24);
    v381 = *(NSString **)(v369 + 48);
    v380 = *(_QWORD *)(v369 + 56);
    if (!*(_QWORD *)(v369 + 8))
    {
      v390 = *(void **)(v369 + 80);
      v391 = *(uint8_t **)v369;
      v367 = (uint8_t *)*((_QWORD *)&v455 + 1);
      v459 = (uint8_t *)*((_QWORD *)&v455 + 1);
      v388 = (uint8_t *)v455;
      v460 = v457;
      *(_QWORD *)&v461 = v371;
      *((_QWORD *)&v461 + 1) = v372;
      v462 = (uint8_t *)v455;
      v463 = v458;
      *(_QWORD *)&v464 = v373;
      *((_QWORD *)&v464 + 1) = v374;
      *(_QWORD *)v465 = v377;
      *(_QWORD *)&v465[8] = v376;
      *(_QWORD *)&v465[16] = v375;
      v466 = v391;
      v467 = 0;
      *(_QWORD *)&v468 = v378;
      *((_QWORD *)&v468 + 1) = v379;
      v469 = *(_OWORD *)(v369 + 32);
      *(_QWORD *)&v470 = v381;
      *((_QWORD *)&v470 + 1) = v380;
      v471 = *(_OWORD *)(v369 + 64);
      v472 = v390;
      v387 = v371;
      v392 = v372;
      v451 = v373;
      swift_bridgeObjectRetain_n(v457, 2);
      v450 = v392;
      swift_bridgeObjectRetain_n(v392, 2);
      swift_bridgeObjectRetain_n(v458, 2);
      v393 = v376;
      v394 = v375;
      v395 = v393;
      v396 = v394;
      sub_1000A24AC((uint64_t)&v459);
      swift_bridgeObjectRelease(v456);
      goto LABEL_206;
    }
    v452 = *(AVAudioSessionPort *)&v366[v368 + 112];
    v453 = v377;
    v454 = v371;
    if (v371 == v378 && v379 == v372)
    {
      v382 = v372;
    }
    else
    {
      v382 = v372;
      v383 = v376;
      v384 = v374;
      v385 = v373;
      v386 = _stringCompareWithSmolCheck(_:_:expecting:)(v371, v372, v378, v379, 0);
      v373 = v385;
      v374 = v384;
      v376 = v383;
      if ((v386 & 1) == 0)
        goto LABEL_207;
    }
    if (v373 != v381)
    {
LABEL_207:
      v451 = v373;
      v397 = v457;
      goto LABEL_209;
    }
    if (v374 == v380)
    {
      v368 += 88;
      --v367;
      v366 = v456;
      if (v367)
        continue;
      swift_bridgeObjectRelease(v456);
      v457 = 0;
      v458 = 0;
      v387 = 0;
      v450 = 0;
      v451 = 0;
      v388 = 0;
      v374 = 0;
      v377 = 0;
      v376 = 0;
      v375 = 0;
LABEL_206:
      a1 = v446;
      goto LABEL_210;
    }
    break;
  }
  v397 = v457;
  v451 = v373;
LABEL_209:
  swift_bridgeObjectRetain(v397);
  v450 = v382;
  swift_bridgeObjectRetain(v382);
  swift_bridgeObjectRetain(v458);
  v398 = v376;
  v375 = v452;
  v399 = v452;
  swift_bridgeObjectRelease(v456);
  a1 = v446;
  v367 = (uint8_t *)*((_QWORD *)&v455 + 1);
  v388 = (uint8_t *)v455;
  v377 = v453;
  v387 = v454;
LABEL_210:
  v456 = (uint8_t *)swift_getKeyPath(&unk_1001EC3A8);
  *((_QWORD *)&v455 + 1) = swift_getKeyPath(&unk_1001EC3D0);
  v459 = v367;
  v460 = v457;
  *(_QWORD *)&v461 = v387;
  *((_QWORD *)&v461 + 1) = v450;
  v462 = v388;
  v463 = v458;
  *(_QWORD *)&v464 = v451;
  *((_QWORD *)&v464 + 1) = v374;
  *(_QWORD *)v465 = v377;
  *(_QWORD *)&v465[8] = v376;
  *(_QWORD *)&v465[16] = v375;
  swift_retain(a1);
  static Published.subscript.setter(&v459, a1, v456, *((_QWORD *)&v455 + 1));
LABEL_211:
  sub_10001613C((uint64_t)v434, v436.n128_i64[0], v435, *((uint64_t *)&v435 + 1), (uint64_t)v439, v440, v437, *((uint64_t *)&v437 + 1), v433, (void *)v432, v431);
LABEL_212:
  v400 = swift_getKeyPath(&unk_1001EC3F0);
  v401 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v459, a1, v400);
  swift_release(v400);
  swift_release(v401);
  v402 = v459;
  v473 = v459;
  v403 = swift_getKeyPath(&unk_1001EC3A8);
  v404 = swift_getKeyPath(&unk_1001EC3D0);
  swift_bridgeObjectRetain(v402);
  static Published.subscript.getter(&v459, a1, v403);
  swift_release(v403);
  swift_release(v404);
  v405 = v460;
  if (v460)
  {
    v406 = v459;
    v407 = v461;
    v408 = *((_QWORD *)&v464 + 1);
    v410 = *(void **)&v465[8];
    v409 = *(_QWORD *)v465;
    v411 = *(void **)&v465[16];
    *((_QWORD *)&v455 + 1) = *((_QWORD *)&v461 + 1);
    v456 = v462;
    v457 = v463;
    v458 = v464;
    v412 = sub_1000A23CC((uint64_t)v402, (uint64_t)&v459);
    if ((v413 & 1) != 0)
    {
      sub_10001613C((uint64_t)v406, v405, v407, *((uint64_t *)&v455 + 1), (uint64_t)v456, v457, v458, v408, v409, v410, v411);
      swift_bridgeObjectRelease(v402);
    }
    else
    {
      *(_QWORD *)&v455 = v408;
      sub_1000A0AD8(v412, (uint64_t)&v475);
      v453 = v477;
      v454 = (AVAudioSessionPort)*((_QWORD *)&v475 + 1);
      v414 = v479;
      v415 = v483;

      swift_bridgeObjectRelease(v414);
      swift_bridgeObjectRelease(v453);
      swift_bridgeObjectRelease(v454);
      v416 = *((_QWORD *)v473 + 2);
      *(_QWORD *)&v475 = v406;
      *((_QWORD *)&v475 + 1) = v405;
      v476 = v407;
      v477 = (NSString *)*((_QWORD *)&v455 + 1);
      v478 = (uint64_t)v456;
      v479 = v457;
      v480 = v458;
      v481 = v455;
      v482 = v409;
      v483 = v410;
      v484 = v411;
      sub_1001CC1DC(v416, v416, (uint64_t)&v475);
      swift_bridgeObjectRelease(v402);
      v402 = v473;
    }
    a1 = v446;
  }
  else
  {
    swift_bridgeObjectRelease(v402);
  }
  v417 = swift_getKeyPath(&unk_1001EC3F0);
  v418 = swift_getKeyPath(&unk_1001EC418);
  v473 = v402;
  swift_retain(a1);
  return static Published.subscript.setter(&v473, a1, v417, v418);
}

void *sub_1000A0AD8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *result;
  char v16;

  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_100080954(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[11 * a1];
    v9 = *((_OWORD *)v7 + 2);
    v10 = *((_OWORD *)v7 + 3);
    v8 = v7 + 4;
    v11 = v6 - 1;
    v12 = v8[4];
    v13 = v8[5];
    v14 = *((_BYTE *)v8 + 64);
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 48) = *((_OWORD *)v8 + 3);
    *(_BYTE *)(a2 + 64) = v14;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(v8 + 9);
    if ((uint64_t)(v11 - a1) >= 0)
    {
      result = memmove(v8, v8 + 11, 88 * (v11 - a1));
      v5[2] = v11;
      *v2 = v5;
      return result;
    }
  }
  v16 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v16, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000A0BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[5];
  uint64_t v13;

  v1 = v0;
  if (qword_10028A3F8 != -1)
    swift_once(&qword_10028A3F8, sub_100120EB0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA2F0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Clearing headset connection", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1001EC438);
  v8 = swift_getKeyPath(&unk_1001EC460);
  LOBYTE(v12[0]) = 0;
  swift_retain(v1);
  static Published.subscript.setter(v12, v1, KeyPath, v8);
  v9 = swift_getKeyPath(&unk_1001EC3A8);
  v10 = swift_getKeyPath(&unk_1001EC3D0);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  swift_retain(v1);
  return static Published.subscript.setter(v12, v1, v9, v10);
}

uint64_t sub_1000A0D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;

  v2 = v1;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v54 = *(_QWORD *)(a1 + 32);
  v56 = *(_QWORD *)(a1 + 24);
  v50 = *(_QWORD *)(a1 + 48);
  v52 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a1 + 64);
  v46 = *(void **)(a1 + 72);
  v48 = *(_QWORD *)(a1 + 56);
  v45 = *(void **)(a1 + 80);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v8 = type metadata accessor for Logger(0);
  sub_10000F66C(v8, (uint64_t)qword_1002AA338);
  v9 = sub_1000A12F0((_QWORD *)a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  v58 = v2;
  if (os_log_type_enabled(v10, v11))
  {
    v44 = v7;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v70 = v13;
    *(_DWORD *)v12 = 136315138;
    v43 = v5;
    v14 = v6;
    v15 = v4;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v17);
    v18 = v16;
    v4 = v15;
    v6 = v14;
    v60 = sub_1001A7FE4(v18, v17, &v70);
    v7 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v12 + 4);
    v19 = v17;
    v5 = v43;
    swift_bridgeObjectRelease(v19);
    sub_1000A134C(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "setOwnerDevice: ownerAudioDevice set to %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_1000A134C(a1);
  }

  KeyPath = swift_getKeyPath(&unk_1001EC3A8);
  v21 = swift_getKeyPath(&unk_1001EC3D0);
  v70 = v4;
  v71 = v5;
  v72 = v6;
  v73 = v56;
  v74 = v54;
  v75 = v52;
  v76 = v50;
  v77 = v48;
  v78 = v7;
  v79 = v46;
  v80 = v45;
  sub_1000A12F0((_QWORD *)a1);
  swift_retain(v2);
  static Published.subscript.setter(&v70, v2, KeyPath, v21);
  v22 = swift_getKeyPath(&unk_1001EC3F0);
  v23 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v70, v2, v22);
  swift_release(v23);
  swift_release(v22);
  v24 = v70;
  v59 = v70;
  v25 = swift_getKeyPath(&unk_1001EC3A8);
  v26 = swift_getKeyPath(&unk_1001EC3D0);
  swift_bridgeObjectRetain(v24);
  static Published.subscript.getter(&v70, v2, v25);
  swift_release(v26);
  swift_release(v25);
  v27 = v71;
  if (v71)
  {
    v28 = v70;
    v29 = v72;
    v30 = v73;
    v31 = v77;
    v32 = v78;
    v33 = v79;
    v34 = v80;
    v53 = v74;
    v55 = v75;
    v57 = v76;
    v35 = sub_1000A23CC(v24, (uint64_t)&v70);
    if ((v36 & 1) != 0)
    {
      sub_10001613C(v28, v27, v29, v30, v53, v55, v57, v31, v32, v33, v34);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v51 = v31;
      sub_1000A0AD8(v35, (uint64_t)&v60);
      v37 = v62;
      v38 = v64;
      v47 = v68;
      v49 = v69;
      swift_bridgeObjectRelease(v61[0]);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v38);

      v39 = *(_QWORD *)(v59 + 16);
      v60 = v28;
      v61[0] = v27;
      v61[1] = v29;
      v62 = v30;
      v63 = v53;
      v64 = v55;
      v65 = v57;
      v66 = v51;
      v67 = v32;
      v68 = v33;
      v69 = v34;
      sub_1001CC1DC(v39, v39, (uint64_t)&v60);
      swift_bridgeObjectRelease(v24);
      v24 = v59;
    }
    v2 = v58;
  }
  else
  {
    swift_bridgeObjectRelease(v24);
  }
  v40 = swift_getKeyPath(&unk_1001EC3F0);
  v41 = swift_getKeyPath(&unk_1001EC418);
  v59 = v24;
  swift_retain(v2);
  return static Published.subscript.setter(&v59, v2, v40, v41);
}

uint64_t sub_1000A11C0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for DeviceHelper(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A11FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EC3F0);
  v5 = swift_getKeyPath(&unk_1001EC418);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1000A1278(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EC3F0);
  v5 = swift_getKeyPath(&unk_1001EC418);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

_QWORD *sub_1000A12F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v2 = a1[3];
  v3 = a1[5];
  v4 = (void *)a1[9];
  v5 = (void *)a1[10];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  v6 = v4;
  v7 = v5;
  return a1;
}

uint64_t sub_1000A134C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 72);

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_1000A13BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001DB5A4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1000A1424(v4);
  *a1 = v2;
}

void sub_1000A1424(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  int v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t *v44;
  Swift::Int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  Swift::Int v53;
  Swift::Int v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  Swift::Int v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;
  Swift::Int v128;
  char *v129;
  uint64_t v130;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1000A1C08(0, v3, 1, a1);
      return;
    }
    goto LABEL_158;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_166;
  v121 = v4;
  v118 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v129 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_124;
    }
    v120 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for AudioDevice);
    *(_QWORD *)(v7 + 16) = v6;
    v120 = (_QWORD *)v7;
    v129 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v119 = *a1 + 24;
  v117 = *a1 + 72;
  v11 = (char *)_swiftEmptyArrayStorage;
  v128 = v3;
  v130 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_23;
    v14 = v10 + 88 * v9;
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    v17 = v10 + 88 * v13;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    if (v18 == v15 && v19 == v16)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v3)
      {
        v9 = v13 + 2;
        goto LABEL_71;
      }
      v22 = 0;
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v15, v16, 1);
      v22 = v21;
      v23 = v13 + 2;
      if (v13 + 2 >= v3)
      {
        v9 = v13 + 2;
        if ((v21 & 1) == 0)
          goto LABEL_23;
        goto LABEL_60;
      }
    }
    v44 = (uint64_t *)(v119 + 88 * v23);
    while (1)
    {
      v46 = *(v44 - 1);
      v47 = *v44;
      v48 = v10 + 88 * v9;
      v49 = *(_QWORD *)(v48 + 16);
      v50 = *(_QWORD *)(v48 + 24);
      if (v49 != v46 || v50 != v47)
      {
        if (((v22 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, v46, v47, 1)) & 1) != 0)
          goto LABEL_59;
        goto LABEL_47;
      }
      if ((v22 & 1) != 0)
        break;
LABEL_47:
      v45 = v23 + 1;
      v44 += 11;
      v9 = v23;
      v23 = v45;
      if (v45 >= v128)
      {
        v23 = v45;
LABEL_59:
        v3 = v128;
        v9 = v23;
        if ((v22 & 1) == 0)
        {
LABEL_23:
          if (v9 >= v3)
            goto LABEL_71;
          goto LABEL_24;
        }
LABEL_60:
        if (v23 < v13)
          goto LABEL_161;
        goto LABEL_61;
      }
    }
    v3 = v128;
    if (v23 < v13)
    {
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
LABEL_61:
    if (v13 >= v23)
    {
      v9 = v23;
      if (v23 >= v3)
        goto LABEL_71;
LABEL_24:
      if (!__OFSUB__(v9, v13))
      {
        if (v9 - v13 >= v121)
          goto LABEL_71;
        if (!__OFADD__(v13, v121))
        {
          if (v13 + v121 >= v3)
            v24 = v3;
          else
            v24 = v13 + v121;
          if (v24 >= v13)
          {
            if (v9 != v24)
            {
              v25 = v117 + 88 * v9;
              do
              {
                v26 = v10 + 88 * v9;
                v27 = *(_QWORD *)(v26 + 16);
                v28 = *(_QWORD *)(v26 + 24);
                v29 = v13;
                v30 = v25;
                do
                {
                  v31 = *(_QWORD *)(v30 - 144);
                  v32 = *(_QWORD *)(v30 - 136);
                  v33 = v31 == v27 && v32 == v28;
                  if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v27, v28, 1) & 1) == 0)
                    break;
                  if (!v10)
                    goto LABEL_162;
                  v34 = (_OWORD *)(v30 - 72);
                  v35 = *(_QWORD *)(v30 - 72);
                  v36 = *(_QWORD *)(v30 - 64);
                  v27 = *(_QWORD *)(v30 - 56);
                  v28 = *(_QWORD *)(v30 - 48);
                  v37 = *(_QWORD *)(v30 - 40);
                  v38 = *(_QWORD *)(v30 - 32);
                  v39 = *(_BYTE *)(v30 - 8);
                  v40 = *(_OWORD *)v30;
                  v41 = *(_OWORD *)(v30 - 24);
                  v42 = *(_OWORD *)(v30 - 112);
                  v34[2] = *(_OWORD *)(v30 - 128);
                  v34[3] = v42;
                  v34[4] = *(_OWORD *)(v30 - 96);
                  *(_QWORD *)(v30 + 8) = *(_QWORD *)(v30 - 80);
                  v43 = *(_OWORD *)(v30 - 144);
                  *v34 = *(_OWORD *)(v30 - 160);
                  v34[1] = v43;
                  *(_OWORD *)(v30 - 88) = v40;
                  v30 -= 88;
                  *(_QWORD *)(v30 - 72) = v35;
                  *(_QWORD *)(v30 - 64) = v36;
                  *(_QWORD *)(v30 - 56) = v27;
                  *(_QWORD *)(v30 - 48) = v28;
                  *(_QWORD *)(v30 - 40) = v37;
                  *(_QWORD *)(v30 - 32) = v38;
                  *(_OWORD *)(v30 - 24) = v41;
                  ++v29;
                  *(_BYTE *)(v30 - 8) = v39;
                }
                while (v9 != v29);
                ++v9;
                v25 += 88;
              }
              while (v9 != v24);
              v9 = v24;
            }
            goto LABEL_71;
          }
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
      goto LABEL_157;
    }
    v52 = 88 * v23;
    v53 = v23;
    v54 = v13;
    v55 = 88 * v13;
    do
    {
      if (v54 != --v53)
      {
        if (!v10)
          goto LABEL_164;
        v56 = (_OWORD *)(v10 + v55);
        v57 = v130 + v52;
        v124 = v56[1];
        v125 = *v56;
        v58 = *((_QWORD *)v56 + 5);
        v123 = *((_QWORD *)v56 + 4);
        v127 = *((_BYTE *)v56 + 64);
        v126 = *(_OWORD *)((char *)v56 + 72);
        v122 = v56[3];
        memmove(v56, (const void *)(v130 + v52 - 88), 0x58uLL);
        *(_OWORD *)(v57 - 88) = v125;
        *(_OWORD *)(v57 - 72) = v124;
        *(_QWORD *)(v57 - 56) = v123;
        *(_QWORD *)(v57 - 48) = v58;
        *(_OWORD *)(v57 - 40) = v122;
        *(_BYTE *)(v57 - 24) = v127;
        *(_OWORD *)(v57 - 16) = v126;
        v10 = v130;
      }
      ++v54;
      v52 -= 88;
      v55 += 88;
    }
    while (v54 < v53);
    v9 = v23;
    v3 = v128;
    if (v23 < v128)
      goto LABEL_24;
LABEL_71:
    if (v9 < v13)
    {
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001D9E38(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v60 = *((_QWORD *)v11 + 2);
    v59 = *((_QWORD *)v11 + 3);
    v12 = v60 + 1;
    if (v60 >= v59 >> 1)
      v11 = sub_1001D9E38((char *)(v59 > 1), v60 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v61 = v11 + 32;
    v62 = &v11[16 * v60 + 32];
    *(_QWORD *)v62 = v13;
    *((_QWORD *)v62 + 1) = v9;
    if (v60)
      break;
    v12 = 1;
    v10 = v130;
LABEL_15:
    v3 = v128;
    if (v9 >= v128)
    {
      v8 = v120;
LABEL_124:
      v110 = v11;
      v120 = v8;
      if (v12 < 2)
        goto LABEL_121;
      v111 = *v118;
      while (1)
      {
        v112 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v111)
          goto LABEL_165;
        v109 = v110;
        v113 = *(_QWORD *)&v110[16 * v112 + 32];
        v114 = *(_QWORD *)&v110[16 * v12 + 24];
        sub_1000A1D1C((char *)(v111 + 88 * v113), (char *)(v111 + 88 * *(_QWORD *)&v110[16 * v12 + 16]), v111 + 88 * v114, v129);
        if (v1)
          goto LABEL_120;
        if (v114 < v113)
          goto LABEL_154;
        if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
          v109 = sub_1001DA1D4((uint64_t)v109);
        if (v112 >= *((_QWORD *)v109 + 2))
          goto LABEL_155;
        v115 = &v109[16 * v112 + 32];
        *(_QWORD *)v115 = v113;
        *((_QWORD *)v115 + 1) = v114;
        v116 = *((_QWORD *)v109 + 2);
        if (v12 > v116)
          goto LABEL_156;
        memmove(&v109[16 * v12 + 16], &v109[16 * v12 + 32], 16 * (v116 - v12));
        v110 = v109;
        *((_QWORD *)v109 + 2) = v116 - 1;
        v12 = v116 - 1;
        if (v116 <= 2)
          goto LABEL_121;
      }
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
  }
  v10 = v130;
  while (1)
  {
    v63 = v12 - 1;
    if (v12 >= 4)
    {
      v68 = &v61[16 * v12];
      v69 = *((_QWORD *)v68 - 8);
      v70 = *((_QWORD *)v68 - 7);
      v74 = __OFSUB__(v70, v69);
      v71 = v70 - v69;
      if (v74)
        goto LABEL_141;
      v73 = *((_QWORD *)v68 - 6);
      v72 = *((_QWORD *)v68 - 5);
      v74 = __OFSUB__(v72, v73);
      v66 = v72 - v73;
      v67 = v74;
      if (v74)
        goto LABEL_142;
      v75 = v12 - 2;
      v76 = &v61[16 * v12 - 32];
      v78 = *(_QWORD *)v76;
      v77 = *((_QWORD *)v76 + 1);
      v74 = __OFSUB__(v77, v78);
      v79 = v77 - v78;
      if (v74)
        goto LABEL_144;
      v74 = __OFADD__(v66, v79);
      v80 = v66 + v79;
      if (v74)
        goto LABEL_147;
      if (v80 >= v71)
      {
        v98 = &v61[16 * v63];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v74 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v74)
          goto LABEL_151;
        v91 = v66 < v101;
        goto LABEL_109;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v92 = *((_QWORD *)v11 + 4);
        v93 = *((_QWORD *)v11 + 5);
        v74 = __OFSUB__(v93, v92);
        v85 = v93 - v92;
        v86 = v74;
        goto LABEL_103;
      }
      v65 = *((_QWORD *)v11 + 4);
      v64 = *((_QWORD *)v11 + 5);
      v74 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      v67 = v74;
    }
    if ((v67 & 1) != 0)
      goto LABEL_143;
    v75 = v12 - 2;
    v81 = &v61[16 * v12 - 32];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v84 = __OFSUB__(v82, v83);
    v85 = v82 - v83;
    v86 = v84;
    if (v84)
      goto LABEL_146;
    v87 = &v61[16 * v63];
    v89 = *(_QWORD *)v87;
    v88 = *((_QWORD *)v87 + 1);
    v74 = __OFSUB__(v88, v89);
    v90 = v88 - v89;
    if (v74)
      goto LABEL_149;
    if (__OFADD__(v85, v90))
      goto LABEL_150;
    if (v85 + v90 >= v66)
    {
      v91 = v66 < v90;
LABEL_109:
      if (v91)
        v63 = v75;
      goto LABEL_111;
    }
LABEL_103:
    if ((v86 & 1) != 0)
      goto LABEL_145;
    v94 = &v61[16 * v63];
    v96 = *(_QWORD *)v94;
    v95 = *((_QWORD *)v94 + 1);
    v74 = __OFSUB__(v95, v96);
    v97 = v95 - v96;
    if (v74)
      goto LABEL_148;
    if (v97 < v85)
      goto LABEL_15;
LABEL_111:
    v102 = v63 - 1;
    if (v63 - 1 >= v12)
    {
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (!v10)
      goto LABEL_163;
    v103 = v10;
    v104 = &v61[16 * v102];
    v105 = *(_QWORD *)v104;
    v106 = &v61[16 * v63];
    v107 = *((_QWORD *)v106 + 1);
    sub_1000A1D1C((char *)(v103 + 88 * *(_QWORD *)v104), (char *)(v103 + 88 * *(_QWORD *)v106), v103 + 88 * v107, v129);
    if (v1)
      break;
    if (v107 < v105)
      goto LABEL_138;
    if (v63 > *((_QWORD *)v11 + 2))
      goto LABEL_139;
    *(_QWORD *)v104 = v105;
    *(_QWORD *)&v61[16 * v102 + 8] = v107;
    v108 = *((_QWORD *)v11 + 2);
    if (v63 >= v108)
      goto LABEL_140;
    v12 = v108 - 1;
    memmove(&v61[16 * v63], v106 + 16, 16 * (v108 - 1 - v63));
    *((_QWORD *)v11 + 2) = v108 - 1;
    v91 = v108 > 2;
    v10 = v130;
    if (!v91)
      goto LABEL_15;
  }
  v109 = v11;
LABEL_120:
  v110 = v109;
LABEL_121:
  swift_bridgeObjectRelease(v110);
  v120[2] = 0;
  swift_bridgeObjectRelease(v120);
}

uint64_t sub_1000A1C08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 88 * a3 + 72;
LABEL_5:
    v9 = v7 + 88 * v4;
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    v12 = v6;
    v13 = v8;
    while (1)
    {
      result = *(_QWORD *)(v13 - 144);
      v14 = *(_QWORD *)(v13 - 136);
      v15 = result == v10 && v14 == v11;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v10, v11, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 88;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v16 = (_OWORD *)(v13 - 72);
      v17 = *(_QWORD *)(v13 - 72);
      v18 = *(_QWORD *)(v13 - 64);
      v10 = *(_QWORD *)(v13 - 56);
      v11 = *(_QWORD *)(v13 - 48);
      v19 = *(_QWORD *)(v13 - 40);
      v20 = *(_QWORD *)(v13 - 32);
      v21 = *(_BYTE *)(v13 - 8);
      v22 = *(_OWORD *)v13;
      v23 = *(_OWORD *)(v13 - 24);
      v24 = *(_OWORD *)(v13 - 112);
      v16[2] = *(_OWORD *)(v13 - 128);
      v16[3] = v24;
      v16[4] = *(_OWORD *)(v13 - 96);
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v13 - 80);
      v25 = *(_OWORD *)(v13 - 144);
      *v16 = *(_OWORD *)(v13 - 160);
      v16[1] = v25;
      *(_OWORD *)(v13 - 88) = v22;
      v13 -= 88;
      *(_QWORD *)(v13 - 72) = v17;
      *(_QWORD *)(v13 - 64) = v18;
      *(_QWORD *)(v13 - 56) = v10;
      *(_QWORD *)(v13 - 48) = v11;
      *(_QWORD *)(v13 - 40) = v19;
      *(_QWORD *)(v13 - 32) = v20;
      *(_OWORD *)(v13 - 24) = v23;
      ++v12;
      *(_BYTE *)(v13 - 8) = v21;
      if (v4 == v12)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A1D1C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char *v29;
  uint64_t result;
  char *v31;
  const void *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 88;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 88;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -87)
    {
      if (__dst != a2 || &a2[88 * v11] <= __dst)
        memmove(__dst, a2, 88 * v11);
      v21 = &v4[88 * v11];
      v31 = v21;
      v33 = v6;
      if (v7 < v6 && v10 >= 88)
      {
        v22 = (char *)(a3 - 88);
        do
        {
          v23 = v22 + 88;
          v24 = *((_QWORD *)v21 - 9);
          v25 = *((_QWORD *)v21 - 8);
          v26 = *((_QWORD *)v6 - 9);
          v27 = *((_QWORD *)v6 - 8);
          v28 = v26 == v24 && v27 == v25;
          if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v24, v25, 1) & 1) == 0)
          {
            v31 = v21 - 88;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
              memmove(v22, v21 - 88, 0x58uLL);
            v29 = v6;
            v21 -= 88;
            if (v6 <= v7)
              break;
          }
          else
          {
            v29 = v6 - 88;
            if (v23 != v6 || v22 >= v6)
              memmove(v22, v6 - 88, 0x58uLL);
            v33 = v6 - 88;
            if (v29 <= v7)
              break;
          }
          v22 -= 88;
          v6 = v29;
        }
        while (v21 > v4);
      }
LABEL_48:
      sub_1001D9FD8((void **)&v33, &v32, &v31);
      return 1;
    }
  }
  else if (v8 >= -87)
  {
    if (__dst != __src || &__src[88 * v9] <= __dst)
      memmove(__dst, __src, 88 * v9);
    v12 = &v4[88 * v9];
    v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 88)
    {
      v13 = v4;
      while (1)
      {
        v14 = *((_QWORD *)v6 + 2);
        v15 = *((_QWORD *)v6 + 3);
        v16 = *((_QWORD *)v13 + 2);
        v17 = *((_QWORD *)v13 + 3);
        v18 = v16 == v14 && v17 == v15;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v14, v15, 1) & 1) == 0)
        {
          v4 = v13 + 88;
          v20 = v13;
          v19 = v6;
          if (v7 == v13)
          {
            v13 += 88;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v13 += 88;
          }
        }
        else
        {
          v19 = v6 + 88;
          v20 = v6;
          if (v7 == v6 && v7 < v19)
            goto LABEL_22;
        }
        memmove(v7, v20, 0x58uLL);
LABEL_22:
        v7 += 88;
        if (v13 < v12)
        {
          v6 = v19;
          if ((unint64_t)v19 < a3)
            continue;
        }
        v32 = v4;
        v33 = v7;
        goto LABEL_48;
      }
    }
    goto LABEL_48;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000A1FF8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::Int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  char v61;
  char v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  _QWORD v68[9];

  v4 = v3;
  v8 = *v3;
  Hasher.init(_seed:)(v68, *(_QWORD *)(*v3 + 40));
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(v68, v9, v10);
  swift_bridgeObjectRelease(v10);
  v67 = *(_QWORD *)(a1 + 48);
  Hasher._combine(_:)(v67);
  v11 = *(_QWORD *)(a1 + 56);
  Hasher._combine(_:)(v11);
  v12 = Hasher._finalize()();
  v13 = (_QWORD *)v8;
  v14 = -1 << *(_BYTE *)(v8 + 32);
  v15 = v12 & ~v14;
  v16 = v8 + 56;
  if (((*(_QWORD *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v61 = a2;
    v63 = v3;
    v66 = a3;
    v17 = ~v14;
    v60 = v13;
    v18 = v13[6];
    while (1)
    {
      v19 = (_QWORD *)(v18 + 88 * v15);
      v20 = v19[2];
      v21 = v19[3];
      v23 = v19[6];
      v22 = v19[7];
      v24 = v20 == v9 && v21 == v10;
      if ((v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v9, v10, 0) & 1) != 0)
        && v23 == v67
        && v22 == v11)
      {
        break;
      }
      v15 = (v15 + 1) & v17;
      if (((*(_QWORD *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        v26 = 0;
        a3 = v66;
        v4 = v63;
        a2 = v61;
        v13 = v60;
        goto LABEL_15;
      }
    }
    v27 = 0;
    v26 = 1;
    a3 = v66;
    v4 = v63;
    a2 = v61;
    v13 = v60;
  }
  else
  {
    v26 = 0;
LABEL_15:
    v27 = 1;
  }
  v28 = v13[2];
  result = v28 + v27;
  if (__OFADD__(v28, v27))
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v30 = v13[3];
  if (v30 < result || (a2 & 1) == 0)
  {
    if ((a2 & 1) != 0)
    {
      sub_1001519C0(result);
    }
    else
    {
      if (v30 >= result)
      {
        result = (uint64_t)sub_100152FC4();
        if ((v26 & 1) == 0)
          goto LABEL_21;
        goto LABEL_46;
      }
      sub_1001536C4(result);
    }
    v33 = *v4;
    Hasher.init(_seed:)(v68, *(_QWORD *)(*v4 + 40));
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(v68, v9, v10);
    swift_bridgeObjectRelease(v10);
    Hasher._combine(_:)(v67);
    Hasher._combine(_:)(v11);
    result = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v33 + 32);
    v15 = result & ~v34;
    v35 = v33 + 56;
    v31 = v15 >> 6;
    v32 = 1 << v15;
    if (((1 << v15) & *(_QWORD *)(v33 + 56 + 8 * (v15 >> 6))) == 0)
    {
      if ((v26 & 1) != 0)
      {
LABEL_50:
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AudioDevice);
        __break(1u);
        return result;
      }
      goto LABEL_43;
    }
    v62 = v26;
    v64 = v4;
    v65 = a1;
    v36 = ~v34;
    v37 = *(_QWORD *)(v33 + 48);
    while (1)
    {
      v38 = (_QWORD *)(v37 + 88 * v15);
      result = v38[2];
      v39 = v38[3];
      v41 = v38[6];
      v40 = v38[7];
      v42 = result == v9 && v39 == v10;
      if (v42 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v39, v9, v10, 0), (result & 1) != 0))
      {
        if (v41 == v67 && v40 == v11)
          break;
      }
      v15 = (v15 + 1) & v36;
      v31 = v15 >> 6;
      v32 = 1 << v15;
      if ((*(_QWORD *)(v35 + 8 * (v15 >> 6)) & (1 << v15)) == 0)
      {
        a1 = v65;
        v4 = v64;
        if ((v62 & 1) == 0)
          goto LABEL_43;
        goto LABEL_50;
      }
    }
    a1 = v65;
    v4 = v64;
    if ((v62 & 1) == 0)
      goto LABEL_50;
    goto LABEL_46;
  }
  if ((v26 & 1) == 0)
  {
LABEL_21:
    v31 = v15 >> 6;
    v32 = 1 << v15;
LABEL_43:
    v44 = *v4;
    *(_QWORD *)(*v4 + 8 * v31 + 56) |= v32;
    v45 = *(_QWORD *)(v44 + 48) + 88 * v15;
    v46 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v45 = *(_OWORD *)a1;
    *(_OWORD *)(v45 + 16) = v46;
    *(_QWORD *)(v45 + 80) = *(_QWORD *)(a1 + 80);
    v47 = *(_OWORD *)(a1 + 64);
    v48 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v45 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v45 + 64) = v47;
    *(_OWORD *)(v45 + 32) = v48;
    v49 = *(_QWORD *)(v44 + 16);
    v50 = __OFADD__(v49, 1);
    v51 = v49 + 1;
    if (!v50)
    {
      *(_QWORD *)(v44 + 16) = v51;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_QWORD *)(a3 + 80) = 0;
      return result;
    }
    goto LABEL_49;
  }
LABEL_46:
  v52 = *(_QWORD *)(*v4 + 48) + 88 * v15;
  v53 = *(_OWORD *)(v52 + 16);
  v54 = *(_QWORD *)(v52 + 32);
  v55 = *(_QWORD *)(v52 + 40);
  v56 = *(_BYTE *)(v52 + 64);
  *(_OWORD *)a3 = *(_OWORD *)v52;
  *(_OWORD *)(a3 + 16) = v53;
  *(_QWORD *)(a3 + 32) = v54;
  *(_QWORD *)(a3 + 40) = v55;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(v52 + 48);
  *(_BYTE *)(a3 + 64) = v56;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(v52 + 72);
  *(_QWORD *)(v52 + 80) = *(_QWORD *)(a1 + 80);
  v57 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v52 = *(_OWORD *)a1;
  *(_OWORD *)(v52 + 16) = v57;
  v58 = *(_OWORD *)(a1 + 64);
  v59 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v52 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v52 + 64) = v58;
  *(_OWORD *)(v52 + 32) = v59;
  return result;
}

uint64_t sub_1000A23CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  for (i = (uint64_t *)(a1 + 56); ; i += 11)
  {
    v7 = *(i - 1);
    v8 = *i;
    v9 = v7 == v4 && v8 == v5;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v4, v5, 0) & 1) != 0)
      break;
    if (v2 == ++v3)
      return 0;
  }
  return v3;
}

uint64_t sub_1000A2460()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A248C()
{
  uint64_t v0;

  return sub_10009DD44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A2494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A24A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A24AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 144);
  v12 = *(_OWORD *)(a1 + 152);
  v10 = *(void **)(a1 + 168);
  sub_10001613C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80));
  sub_10001613C(v2, v3, v4, v5, v6, v7, v8, v9, v12, *((void **)&v12 + 1), v10);
  return a1;
}

void *sub_1000A2568(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  AVAudioSessionPort v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  id v20;
  void *v21;
  NSString *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  NSString *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  NSString *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v60;
  char v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v69;
  char v70;
  uint64_t v71;
  NSString *v72;
  AVAudioSessionPort v73;
  NSString *v74;
  uint64_t v75;
  NSString *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  char v96;
  uint64_t v97;
  NSString *v98;
  uint64_t v99;
  NSString *v100;
  uint64_t v101;
  NSString *v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  char v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  NSString *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v129 = a1;
  v130 = a2;
  v6 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v6);
  v8 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a4)
    return 0;
  switch(a3)
  {
    case 4:
      v9 = AVAudioSessionPortHeadsetMic;
      v10 = (unint64_t)a4 >> 62;
      if ((unint64_t)a4 >> 62)
        goto LABEL_99;
      v31 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(a4, 2);
      swift_bridgeObjectRetain(v130);
      v32 = AVAudioSessionPortHeadsetMic;
      if (v31)
        goto LABEL_23;
LABEL_103:
      swift_bridgeObjectRelease(v130);
      swift_bridgeObjectRelease(a4);
LABEL_104:
      swift_bridgeObjectRelease(a4);

      v73 = AVAudioSessionPortHeadphones;
      if (v10)
      {
        if (a4 < 0)
          v101 = a4;
        else
          v101 = a4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(a4, 2);
        swift_bridgeObjectRetain(v130);
        v102 = AVAudioSessionPortHeadphones;
        v99 = _CocoaArrayWrapper.endIndex.getter(v101);
        if (!v99)
          goto LABEL_125;
      }
      else
      {
        v99 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(a4, 2);
        swift_bridgeObjectRetain(v130);
        v100 = AVAudioSessionPortHeadphones;
        if (!v99)
          goto LABEL_125;
      }
      v127 = (NSString *)(a4 & 0xC000000000000001);
      v128 = a4;
      v103 = 4;
      while (1)
      {
        v111 = v127
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v103 - 4, a4)
             : *(id *)(a4 + 8 * v103);
        v21 = v111;
        v112 = v103 - 3;
        if (__OFADD__(v103 - 4, 1))
          break;
        v113 = v99;
        v114 = objc_msgSend(v111, "portType");
        v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
        v117 = v116;
        v9 = v73;
        v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        if (v115 == v118 && v117 == v119)
        {

          swift_bridgeObjectRelease_n(v117, 2);
LABEL_113:
          v104 = objc_msgSend(v21, "portName", v125);
          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
          v107 = v106;

          v133 = v105;
          v134 = v107;
          v131 = v129;
          v132 = v130;
          v108 = type metadata accessor for Locale(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56))(v8, 1, 1, v108);
          v109 = sub_10000B030();
          StringProtocol.range<A>(of:options:range:locale:)(&v131, 0, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v109, v109);
          LOBYTE(v104) = v110;
          sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
          swift_bridgeObjectRelease(v134);
          if ((v104 & 1) == 0)
            goto LABEL_126;
          goto LABEL_114;
        }
        v121 = v119;
        v122 = _stringCompareWithSmolCheck(_:_:expecting:)(v115, v117, v118, v119, 0);

        swift_bridgeObjectRelease(v117);
        swift_bridgeObjectRelease(v121);
        if ((v122 & 1) != 0)
          goto LABEL_113;
LABEL_114:

        ++v103;
        v99 = v113;
        v29 = v112 == v113;
        v73 = v9;
        a4 = v128;
        if (v29)
          goto LABEL_125;
      }
      __break(1u);
LABEL_130:
      if (a4 >= 0)
        v124 = v50;
      else
        v124 = a4;
      swift_bridgeObjectRetain(a4);
      v51 = _CocoaArrayWrapper.endIndex.getter(v124);
      if (!v51)
        goto LABEL_61;
LABEL_39:
      v130 = a4 & 0xC000000000000001;
      v10 = (uint64_t)AVAudioSessionPortBuiltInMic;
      v52 = 4;
      while (1)
      {
        v53 = v130
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52 - 4, a4)
            : *(id *)(a4 + 8 * v52);
        v21 = v53;
        v9 = (AVAudioSessionPort)(v52 - 3);
        if (__OFADD__(v52 - 4, 1))
          break;
        v54 = objc_msgSend(v53, "portType");
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v8 = v56;
        v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionPortBuiltInMic);
        if (v55 == v57 && v8 == v58)
        {
LABEL_66:

          swift_bridgeObjectRelease_n(v8, 2);
LABEL_67:
          swift_bridgeObjectRelease(a4);
          return v21;
        }
        v60 = v58;
        v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v8, v57, v58, 0);

        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v60);
        if ((v61 & 1) != 0)
          goto LABEL_67;

        ++v52;
        if (v9 == (AVAudioSessionPort)v51)
        {
          swift_bridgeObjectRelease(a4);
          v10 = (uint64_t)AVAudioSessionPortBuiltInSpeaker;
          swift_bridgeObjectRetain(a4);
          v62 = 4;
          while (1)
          {
            v63 = v130
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v62 - 4, a4)
                : *(id *)(a4 + 8 * v62);
            v21 = v63;
            v9 = (AVAudioSessionPort)(v62 - 3);
            if (__OFADD__(v62 - 4, 1))
              goto LABEL_71;
            v54 = objc_msgSend(v63, "portType");
            v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
            v8 = v65;
            v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionPortBuiltInSpeaker);
            if (v64 == v66 && v8 == v67)
              goto LABEL_66;
            v69 = v67;
            v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v8, v66, v67, 0);

            swift_bridgeObjectRelease(v8);
            swift_bridgeObjectRelease(v69);
            if ((v70 & 1) != 0)
              goto LABEL_67;

            ++v62;
            if (v9 == (AVAudioSessionPort)v51)
              goto LABEL_61;
          }
        }
      }
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      if (a4 < 0)
        v71 = a4;
      else
        v71 = a4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(a4, 2);
      v72 = v9;
      swift_bridgeObjectRetain(v130);
      v11 = _CocoaArrayWrapper.endIndex.getter(v71);
      if (!v11)
        goto LABEL_76;
LABEL_7:
      v127 = v9;
      v125 = v10;
      v126 = a4 & 0xC000000000000001;
      v13 = 4;
      while (1)
      {
        if (v126)
          v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, a4);
        else
          v20 = *(id *)(a4 + 8 * v13);
        v21 = v20;
        v22 = (NSString *)(v13 - 3);
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v9 = (AVAudioSessionPort)v11;
        v23 = objc_msgSend(v20, "portType");
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
        v29 = v24 == v27 && v26 == v28;
        if (v29)
          break;
        v30 = v28;
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0);

        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(v30);
        if ((v10 & 1) != 0)
          goto LABEL_9;
LABEL_10:

        ++v13;
        v11 = (uint64_t)v9;
        if (v22 == v9)
        {
          swift_bridgeObjectRelease(v130);
          swift_bridgeObjectRelease(a4);
          v9 = v127;
          v10 = v125;
          goto LABEL_77;
        }
      }

      swift_bridgeObjectRelease_n(v26, 2);
LABEL_9:
      v14 = objc_msgSend(v21, "portName", v125);
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v16 = v15;

      v133 = v10;
      v134 = v16;
      v131 = v129;
      v132 = v130;
      v17 = type metadata accessor for Locale(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
      v18 = sub_10000B030();
      StringProtocol.range<A>(of:options:range:locale:)(&v131, 0, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v18, v18);
      LOBYTE(v14) = v19;
      sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
      swift_bridgeObjectRelease(v134);
      if ((v14 & 1) == 0)
        goto LABEL_63;
      goto LABEL_10;
    case 3:
      v50 = a4 & 0xFFFFFFFFFFFFFF8;
      if ((unint64_t)a4 >> 62)
        goto LABEL_130;
      v51 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a4);
      if (v51)
        goto LABEL_39;
LABEL_61:
      swift_bridgeObjectRelease(a4);
      break;
    case 1:
      v9 = AVAudioSessionPortBluetoothA2DP;
      v10 = (unint64_t)a4 >> 62;
      if ((unint64_t)a4 >> 62)
        goto LABEL_72;
      v11 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(a4, 2);
      v12 = AVAudioSessionPortBluetoothA2DP;
      swift_bridgeObjectRetain(v130);
      if (v11)
        goto LABEL_7;
LABEL_76:
      swift_bridgeObjectRelease(v130);
      swift_bridgeObjectRelease(a4);
LABEL_77:
      swift_bridgeObjectRelease(a4);

      v73 = AVAudioSessionPortBluetoothHFP;
      if (v10)
      {
        if (a4 < 0)
          v75 = a4;
        else
          v75 = a4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(a4, 2);
        swift_bridgeObjectRetain(v130);
        v76 = AVAudioSessionPortBluetoothHFP;
        v10 = _CocoaArrayWrapper.endIndex.getter(v75);
        if (!v10)
          goto LABEL_125;
      }
      else
      {
        v10 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(a4, 2);
        swift_bridgeObjectRetain(v130);
        v74 = AVAudioSessionPortBluetoothHFP;
        if (!v10)
        {
LABEL_125:
          swift_bridgeObjectRelease(v130);
          swift_bridgeObjectRelease(a4);
          v21 = 0;
LABEL_127:
          swift_bridgeObjectRelease(a4);

          return v21;
        }
      }
      v127 = (NSString *)(a4 & 0xC000000000000001);
      v128 = a4;
      v77 = 4;
      while (1)
      {
        if (v127)
          v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v77 - 4, a4);
        else
          v85 = *(id *)(a4 + 8 * v77);
        v21 = v85;
        v86 = v77 - 3;
        if (__OFADD__(v77 - 4, 1))
        {
          __break(1u);
LABEL_99:
          if (a4 < 0)
            v97 = a4;
          else
            v97 = a4 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(a4, 2);
          swift_bridgeObjectRetain(v130);
          v98 = v9;
          v31 = _CocoaArrayWrapper.endIndex.getter(v97);
          if (!v31)
            goto LABEL_103;
LABEL_23:
          v127 = v9;
          v125 = v10;
          v126 = a4 & 0xC000000000000001;
          v33 = 4;
          while (2)
          {
            if (v126)
              v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, a4);
            else
              v40 = *(id *)(a4 + 8 * v33);
            v21 = v40;
            v41 = (NSString *)(v33 - 3);
            if (__OFADD__(v33 - 4, 1))
              goto LABEL_69;
            v9 = (AVAudioSessionPort)v31;
            v42 = objc_msgSend(v40, "portType");
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
            v45 = v44;
            v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
            if (v43 == v46 && v45 == v47)
            {

              swift_bridgeObjectRelease_n(v45, 2);
            }
            else
            {
              v49 = v47;
              v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v46, v47, 0);

              swift_bridgeObjectRelease(v45);
              swift_bridgeObjectRelease(v49);
              if ((v10 & 1) == 0)
              {
LABEL_26:

                ++v33;
                v31 = (uint64_t)v9;
                if (v41 == v9)
                {
                  swift_bridgeObjectRelease(v130);
                  swift_bridgeObjectRelease(a4);
                  v9 = v127;
                  v10 = v125;
                  goto LABEL_104;
                }
                continue;
              }
            }
            break;
          }
          v34 = objc_msgSend(v21, "portName", v125);
          v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v36 = v35;

          v133 = v10;
          v134 = v36;
          v131 = v129;
          v132 = v130;
          v37 = type metadata accessor for Locale(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v8, 1, 1, v37);
          v38 = sub_10000B030();
          StringProtocol.range<A>(of:options:range:locale:)(&v131, 0, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v38, v38);
          LOBYTE(v34) = v39;
          sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
          swift_bridgeObjectRelease(v134);
          if ((v34 & 1) == 0)
          {
LABEL_63:

            swift_bridgeObjectRelease(v130);
            swift_bridgeObjectRelease_n(a4, 2);
            return v21;
          }
          goto LABEL_26;
        }
        v87 = v10;
        v88 = objc_msgSend(v85, "portType");
        v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        v91 = v90;
        v9 = v73;
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        if (v89 == v92 && v91 == v93)
        {

          swift_bridgeObjectRelease_n(v91, 2);
        }
        else
        {
          v95 = v93;
          v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v89, v91, v92, v93, 0);

          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(v95);
          if ((v96 & 1) == 0)
            goto LABEL_87;
        }
        v78 = objc_msgSend(v21, "portName", v125);
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        v81 = v80;

        v133 = v79;
        v134 = v81;
        v131 = v129;
        v132 = v130;
        v82 = type metadata accessor for Locale(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v8, 1, 1, v82);
        v83 = sub_10000B030();
        StringProtocol.range<A>(of:options:range:locale:)(&v131, 0, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v83, v83);
        LOBYTE(v78) = v84;
        sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
        swift_bridgeObjectRelease(v134);
        if ((v78 & 1) == 0)
        {
LABEL_126:
          swift_bridgeObjectRelease(v130);
          a4 = v128;
          swift_bridgeObjectRelease(v128);
          v73 = v9;
          goto LABEL_127;
        }
LABEL_87:

        ++v77;
        v10 = v87;
        v29 = v86 == v87;
        v73 = v9;
        a4 = v128;
        if (v29)
          goto LABEL_125;
      }
  }
  return 0;
}

uint64_t sub_1000A312C(void *a1)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  id v8;
  id v9;
  _BYTE v10[64];

  if (objc_msgSend(a1, "deviceType") == (id)1
    && (objc_msgSend(a1, "deviceSubType") == (id)2 || objc_msgSend(a1, "deviceSubType") == (id)3)
    || objc_msgSend(a1, "deviceType") == (id)4
    && (objc_msgSend(a1, "deviceSubType") == (id)2 || objc_msgSend(a1, "deviceSubType") == (id)3)
    || objc_msgSend(a1, "deviceType") == (id)3)
  {
    return 1;
  }
  if (qword_10028A3F8 != -1)
    swift_once(&qword_10028A3F8, sub_100120EB0);
  v3 = type metadata accessor for Logger(0);
  sub_10000F66C(v3, (uint64_t)qword_1002AA2F0);
  v4 = a1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    *(_DWORD *)v7 = 134218240;
    v8 = objc_msgSend(v4, "deviceType");
    Hasher.init(_seed:)(&v9, 0);
    Hasher._combine(_:)((Swift::UInt)v8);
    v9 = (id)Hasher._finalize()();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v7 + 4);
    *(_WORD *)(v7 + 12) = 2048;
    v9 = objc_msgSend(v4, "deviceSubType");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, v10, v7 + 14);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Invalid audio device: device type: %ld device subtype: %ld", (uint8_t *)v7, 0x16u);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_1000A335C(void *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSString v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;
  uint64_t v30[5];
  uint64_t v31;
  unint64_t v32;

  v2 = 0x6C6C69662E63696DLL;
  v31 = 0x6C6C69662E63696DLL;
  v32 = 0xE800000000000000;
  v30[3] = (uint64_t)&type metadata for TranslateFeatures;
  v30[4] = sub_100009BC4();
  LOBYTE(v30[0]) = 8;
  v3 = isFeatureEnabled(_:)(v30);
  sub_100009C08(v30);
  if ((v3 & 1) != 0)
  {
    if ((sub_1000A312C(a1) & 1) == 0)
    {
      if (qword_10028A3F8 != -1)
        swift_once(&qword_10028A3F8, sub_100120EB0);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10000F66C(v17, (uint64_t)qword_1002AA2F0);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Invalid audio device: returning generic symbol", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
      }

      return v31;
    }
    if ((objc_msgSend(a1, "deviceSubType") == (id)2 || objc_msgSend(a1, "deviceSubType") == (id)3)
      && (objc_msgSend(a1, "isAppleAccessory") & 1) == 0)
    {
      v2 = 0x6E6F687064616568;
      swift_bridgeObjectRelease(0xE800000000000000);
    }
    else
    {
      v4 = MRAVOutputDeviceCreateFromAVOutputDevice(a1);
      if (!v4)
      {
LABEL_20:
        swift_beginAccess(&v31, v30, 0, 0);
        return v31;
      }
      v5 = (void *)v4;
      swift_bridgeObjectRelease(0xE800000000000000);
      v6 = objc_msgSend((id)objc_opt_self(MRAVOutputDeviceSymbolProvider), "symbolNameForOutputDevice:", v5);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;

      v31 = v7;
      v32 = v9;
      v10 = qword_10028A3F8;
      swift_bridgeObjectRetain(v9);
      if (v10 != -1)
        swift_once(&qword_10028A3F8, sub_100120EB0);
      v11 = type metadata accessor for Logger(0);
      sub_10000F66C(v11, (uint64_t)qword_1002AA2F0);
      v12 = swift_bridgeObjectRetain_n(v9, 2);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = swift_slowAlloc(32, -1);
        v30[0] = v16;
        *(_DWORD *)v15 = 136315138;
        swift_bridgeObjectRetain(v9);
        v29 = sub_1001A7FE4(v7, v9, v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v15 + 4);
        swift_bridgeObjectRelease_n(v9, 3);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "MRAVOutputDeviceSymbolProvider found symbol %s", v15, 0xCu);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v9, 2);
      }
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      v23 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v22);

      if (v23)
      {

        goto LABEL_20;
      }
      swift_bridgeObjectRelease(v32);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.info.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid symbol: returning generic symbol.", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }
      v2 = 0x6E6F687064616568;

    }
  }
  return v2;
}

uint64_t sub_1000A37C0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A37E4()
{
  uint64_t v0;

  sub_10009D70C(v0);
}

uint64_t sub_1000A37EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000A3868()
{
  uint64_t v0;

  type metadata accessor for Notification(0);
  sub_10009B944(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_1000A38A8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  id result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;
  _QWORD *v24;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v21 = *(_QWORD *)(v1 - 8);
  v22 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_availableDictionaries] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability] = &_swiftEmptySetSingleton;
  v10 = (void *)objc_opt_self(DUDictionaryManager);
  v11 = v0;
  result = objc_msgSend(v10, "assetManager");
  if (result)
  {
    *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_dictionaryManager] = result;
    v13 = OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_dictionaryQueue;
    v14 = sub_10001D948();
    static DispatchQoS.unspecified.getter(v14);
    v24 = _swiftEmptyArrayStorage;
    v15 = sub_100007D5C(&qword_10028F258, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v16 = sub_100006DF4(&qword_10028F260);
    v17 = sub_1000827A0(&qword_10028F268, &qword_10028F260);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v4, v15);
    (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
    *(_QWORD *)&v11[v13] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x80000001001FB3E0, v9, v6, v3, 0);

    v18 = (objc_class *)type metadata accessor for DictionaryManager();
    v23.receiver = v11;
    v23.super_class = v18;
    v19 = objc_msgSendSuper2(&v23, "init");
    sub_1000A3B1C();

    return v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000A3B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id result;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = v0;
  if (qword_10028A420 != -1)
    swift_once(&qword_10028A420, sub_100120F74);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA368);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Update available dictionaries cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  result = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_dictionaryManager), "_allAvailableDefinitionDictionaries");
  if (result)
  {
    v7 = result;
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, (char *)&type metadata for Any + 8);

    v9 = sub_100121208(v8);
    result = (id)swift_bridgeObjectRelease(v8);
    if (v9)
    {
      v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_availableDictionaries);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_availableDictionaries) = v9;
      return (id)swift_bridgeObjectRelease(v10);
    }
  }
  return result;
}

void sub_1000A3C64(void *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  void *v15;
  id v16;
  void *v17;
  unsigned int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  uint64_t v25[3];
  _BYTE v26[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability, v26, 0, 0);
  v4 = *v3;
  swift_bridgeObjectRetain(*v3);
  v5 = objc_msgSend(a1, "canonicalIdentifier");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  LOBYTE(v5) = sub_1000CED6C(v6, v8, v4);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v4);
  if ((v5 & 1) == 0)
  {
    sub_1000A3B1C();
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_availableDictionaries);
    v10 = a1;
    v11 = swift_bridgeObjectRetain(v9);
    v12 = sub_1000A503C(v11, v10);
    v14 = v13;

    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = (void *)sub_1000A4FE4(v12, v9);
    swift_bridgeObjectRelease(v9);
    if (v15)
    {
      v16 = objc_msgSend(v15, "rawAsset");
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend(v16, "wasLocal");

        if (v18)
        {
          v19 = objc_msgSend(v10, "canonicalIdentifier");
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v22 = v21;

          swift_beginAccess(v3, v24, 33, 0);
          sub_100151298(v25, v20, v22);
          v23 = v25[1];
          swift_endAccess(v24);

          swift_bridgeObjectRelease(v23);
        }
        else
        {

        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1000A3E3C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_dictionaryQueue];
  v11 = swift_allocObject(&unk_100267EE0, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1000A5144;
  v29 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100267EF8;
  v12 = _Block_copy(aBlock);
  v13 = v10;
  v24 = v1;
  v25 = a1;
  static DispatchQoS.unspecified.getter(v25);
  v27 = _swiftEmptyArrayStorage;
  v14 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_100006DF4(&qword_10028AC30);
  v16 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release(v29);
  v17 = (uint64_t *)&v24[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability];
  swift_beginAccess(&v24[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability], aBlock, 0, 0);
  v18 = *v17;
  swift_bridgeObjectRetain(v18);
  v19 = objc_msgSend(v25, "canonicalIdentifier");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  LOBYTE(v19) = sub_1000CED6C(v20, v22, v18);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v18);
  return v19 & 1;
}

void sub_1000A40C4(uint64_t a1, void *a2)
{
  sub_1000A3C64(a2);
}

uint64_t sub_1000A40E8(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_dictionaryQueue];
  v11 = swift_allocObject(&unk_100267E90, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1000A4FDC;
  v22 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100267EA8;
  v12 = _Block_copy(aBlock);
  v13 = v10;
  v14 = v1;
  static DispatchQoS.unspecified.getter(a1);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100006DF4(&qword_10028AC30);
  v17 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v22);
}

void sub_1000A42E4(uint64_t a1, void *a2)
{
  uint64_t *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject **v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject **v34;
  char v35[24];
  NSObject *v36;
  uint64_t v37;

  sub_1000A3C64(a2);
  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability);
  swift_beginAccess(a1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_pairAvailability, v35, 0, 0);
  v5 = *v4;
  v6 = objc_msgSend(a2, "canonicalIdentifier", swift_bridgeObjectRetain(v5).n128_f64[0]);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  LOBYTE(v6) = sub_1000CED6C(v7, v9, v5);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v5);
  if ((v6 & 1) != 0)
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v10 = type metadata accessor for Logger(0);
    sub_10000F66C(v10, (uint64_t)qword_1002AA368);
    v11 = a2;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      v36 = v11;
      v16 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v14 + 4);
      *v15 = v11;

      v17 = "Dictionary already available for pair: %{public}@";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v17, v14, 0xCu);
      v33 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v15, 1, v33);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_availableDictionaries);
  v19 = a2;
  swift_bridgeObjectRetain(v18);
  v21 = sub_1000A503C(v20, v19);
  v23 = v22;

  if ((v23 & 1) != 0)
    v12 = 0;
  else
    v12 = sub_1000A4FE4(v21, v18);
  swift_bridgeObjectRelease(v18);
  if (!v12)
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v31 = type metadata accessor for Logger(0);
    sub_10000F66C(v31, (uint64_t)qword_1002AA368);
    v11 = v19;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      v36 = v11;
      v32 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v14 + 4);
      *v15 = v11;

      v17 = "Dictionary not available for: %{public}@";
      goto LABEL_18;
    }
LABEL_19:

    v12 = v11;
    goto LABEL_22;
  }
  if (qword_10028A420 != -1)
    swift_once(&qword_10028A420, sub_100120F74);
  v24 = type metadata accessor for Logger(0);
  sub_10000F66C(v24, (uint64_t)qword_1002AA368);
  v25 = v19;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 138543362;
    v36 = v25;
    v29 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v28 + 4);
    *v34 = v25;

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Starting download for dictionary: %{public}@", v28, 0xCu);
    v30 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v34, 1, v30);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {

    v26 = v25;
  }

  sub_1000A47C4(v12);
LABEL_22:

}

void sub_1000A47C4(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD aBlock[5];
  _QWORD *v14;

  v12 = objc_msgSend(objc_allocWithZone((Class)MADownloadOptions), "init");
  objc_msgSend(v12, "setAllowsCellularAccess:", 0);
  objc_msgSend(v12, "setDiscretionary:", 1);
  v3 = objc_msgSend(a1, "rawAsset");
  if (v3)
  {
    v4 = v3;
    v5 = swift_allocObject(&unk_100267DC8, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v1);
    v6 = (_QWORD *)swift_allocObject(&unk_100267DF0, 40, 7);
    v6[2] = v5;
    v6[3] = a1;
    v6[4] = v4;
    aBlock[4] = sub_1000A4F4C;
    v14 = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A4E10;
    aBlock[3] = &unk_100267E08;
    v7 = _Block_copy(aBlock);
    v8 = v14;
    v9 = v4;
    v10 = v12;
    v11 = a1;
    swift_release(v8);
    objc_msgSend(v9, "startDownload:then:", v10, v7);

    _Block_release(v7);
  }
  else
  {

  }
}

uint64_t sub_1000A4950(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  void *v15;
  id v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;
  _BYTE v30[24];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v30, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (result)
  {
    v15 = (void *)result;
    v16 = *(id *)(result + OBJC_IVAR____TtC17SequoiaTranslator17DictionaryManager_dictionaryQueue);

    v17 = (_QWORD *)swift_allocObject(&unk_100267E40, 40, 7);
    v17[2] = a3;
    v17[3] = a2;
    v17[4] = a4;
    aBlock[4] = sub_1000A4FA4;
    v29 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100075908;
    aBlock[3] = &unk_100267E58;
    v18 = _Block_copy(aBlock);
    v19 = a4;
    v20 = a3;
    v21 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v21);
    v27 = _swiftEmptyArrayStorage;
    v22 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_100006DF4(&qword_10028AC30);
    v24 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v23, v24, v7, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_release(v29);
  }
  return result;
}

void sub_1000A4B88(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Strong;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A420 != -1)
    swift_once(&qword_10028A420, sub_100120F74);
  v10 = sub_10000F66C(v6, (uint64_t)qword_1002AA368);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v25 = v7;
    v26 = a2;
    v27 = a3;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v29[0] = v24;
    *(_DWORD *)v14 = 136446210;
    v15 = objc_msgSend(v11, "localizedLanguageName");
    if (!v15)
    {

      __break(1u);
      return;
    }
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

    v28 = sub_1001A7FE4(v17, v19, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v14 + 4);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Finished downloading dictionary %{public}s; updating local dictionaries",
      v14,
      0xCu);
    v20 = v24;
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v6);
    a2 = v26;
    a3 = v27;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v21 = a2 + 16;
  swift_beginAccess(v21, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v21);
  if (Strong)
  {
    v23 = (void *)Strong;
    sub_1000A3B1C();

  }
  objc_msgSend(a3, "refreshState");
}

uint64_t sub_1000A4E10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

id sub_1000A4E4C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DictionaryManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DictionaryManager()
{
  return objc_opt_self(_TtC17SequoiaTranslator17DictionaryManager);
}

uint64_t sub_1000A4EF4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A4F18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A4F4C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A4950(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000A4F58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A4F68(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A4F70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000A4FA4()
{
  uint64_t v0;

  sub_1000A4B88(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000A4FB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A4FDC()
{
  uint64_t v0;

  sub_1000A42E4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_1000A4FE4(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
    return specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return (unint64_t)*(id *)(a2 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000A503C(uint64_t a1, void *a2)
{
  unint64_t v4;
  id v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    do
    {
      while (__OFSUB__(v4--, 1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        if (a1 < 0)
          v10 = a1;
        else
          v10 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v4 = _CocoaArrayWrapper.endIndex.getter(v10);
        swift_bridgeObjectRelease(a1);
        if (!v4)
          return v4;
      }
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        goto LABEL_9;
      }
      if ((v4 & 0x8000000000000000) != 0)
        goto LABEL_13;
      if (v4 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_14;
      v6 = *(id *)(a1 + 32 + 8 * v4);
LABEL_9:
      v7 = v6;
      sub_1000A56D4(a2);
      v9 = v8;

    }
    while ((v9 & 1) == 0 && v4);
  }
  return v4;
}

void sub_1000A5144()
{
  uint64_t v0;

  sub_1000A3C64(*(void **)(v0 + 24));
}

uint64_t sub_1000A5184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v64 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v65 = (char *)&v62 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v62 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v62 - v16;
  v18 = Locale.ltLanguageCode.getter(v15);
  v63 = a2;
  if (v19)
  {
    v20 = v19;
    if (v18 == a2 && v19 == a3)
    {
      v21 = a3;
      swift_bridgeObjectRelease(v19);
      v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v22(v17, a1, v6);
      goto LABEL_14;
    }
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v18, v19, 0);
    swift_bridgeObjectRelease(v20);
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v23 = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v17, a1, v6);
    if ((v24 & 1) != 0)
    {
      v21 = a3;
      goto LABEL_14;
    }
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v23 = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v17, a1, v6);
  }
  v25 = Locale.identifier.getter(v23);
  if (v25 != a2 || v26 != a3)
  {
    v28 = v25;
    v29 = v26;
    v30 = a2;
    v21 = a3;
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, a3, v28, v26, 0);
    swift_bridgeObjectRelease(v29);
    goto LABEL_15;
  }
  v21 = a3;
  swift_bridgeObjectRelease(a3);
LABEL_14:
  v31 = 1;
LABEL_15:
  v32 = *(void (**)(char *, uint64_t))(v7 + 8);
  v32(v17, v6);
  v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v14, a1, v6);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v32(v14, v6);
    v41 = v65;
    v22(v65, a1, v6);
LABEL_20:
    v32(v41, v6);
LABEL_21:
    v42 = v64;
    v22(v64, a1, v6);
LABEL_22:
    v32(v42, v6);
    v43 = 1;
    return v43 & 1;
  }
  v34 = Locale.identifier.getter(v33);
  v36 = v35;
  v70 = v34;
  v71 = v35;
  v68 = 45;
  v69 = 0xE100000000000000;
  v66 = 95;
  v67 = 0xE100000000000000;
  v37 = sub_10000B030();
  v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v37, v37, v37);
  v40 = v39;
  swift_bridgeObjectRelease(v36);
  if (v38 == v63 && v40 == v21)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_19;
  }
  v62 = v37;
  v45 = v63;
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v21, v38, v40, 0);
  swift_bridgeObjectRelease(v40);
  v32(v14, v6);
  v41 = v65;
  v22(v65, a1, v6);
  if ((v46 & 1) != 0)
    goto LABEL_20;
  v70 = v45;
  v71 = v21;
  v47 = v21;
  v68 = 0x736E61482DLL;
  v69 = 0xE500000000000000;
  v66 = 0;
  v67 = 0xE000000000000000;
  v48 = v62;
  v49 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v62, v62, v62);
  v51 = v50;
  v52 = Locale.ltLanguageCode.getter(v49);
  if (v53)
  {
    v54 = v53;
    if (v49 == v52 && v53 == v51)
    {
      swift_bridgeObjectRelease(v53);
      v32(v65, v6);
      swift_bridgeObjectRelease(v51);
      goto LABEL_21;
    }
    v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v52, v53, 0);
    swift_bridgeObjectRelease(v54);
    v32(v65, v6);
    swift_bridgeObjectRelease(v51);
    v42 = v64;
    v22(v64, a1, v6);
    if ((v55 & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v32(v41, v6);
    swift_bridgeObjectRelease(v51);
    v42 = v64;
    v22(v64, a1, v6);
  }
  v70 = v63;
  v71 = v47;
  v68 = 0x746E61482DLL;
  v69 = 0xE500000000000000;
  v66 = 0;
  v67 = 0xE000000000000000;
  v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v68, &v66, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v48, v48, v48);
  v58 = v57;
  v59 = Locale.ltLanguageCode.getter(v56);
  if (v60)
  {
    v61 = v60;
    if (v56 == v59 && v60 == v58)
      v43 = 1;
    else
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v59, v60, 0);
    swift_bridgeObjectRelease(v61);
    v32(v42, v6);
    swift_bridgeObjectRelease(v58);
  }
  else
  {
    v32(v42, v6);
    swift_bridgeObjectRelease(v58);
    v43 = 0;
  }
  return v43 & 1;
}

void sub_1000A56D4(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD v29[2];
  _QWORD v30[5];
  __int128 v31;
  __int128 v32;

  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, "rawAsset");
  if (!v7)
    goto LABEL_22;
  v8 = v7;
  v9 = objc_msgSend(v7, "attributes");

  if (!v9)
  {
LABEL_23:
    __break(1u);
    return;
  }
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  strcpy((char *)v29, "IndexLanguages");
  HIBYTE(v29[1]) = -18;
  AnyHashable.init<A>(_:)(v30, v29, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_1001A87EC((uint64_t)v30), (v12 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v31);
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  sub_10005DEC0((uint64_t)v30);
  if (!*((_QWORD *)&v32 + 1))
  {
    sub_1000110E8((uint64_t)&v31);
    return;
  }
  v13 = sub_100006DF4(&qword_10028A6C8);
  if ((swift_dynamicCast(v29, &v31, (char *)&type metadata for Any + 8, v13, 6) & 1) != 0)
  {
    v14 = (_QWORD *)v29[0];
    if (*(_QWORD *)(v29[0] + 16) < 2uLL)
    {
LABEL_18:
      swift_bridgeObjectRelease(v14);
      return;
    }
    v15 = *(_QWORD *)(v29[0] + 32);
    v16 = *(_QWORD *)(v29[0] + 40);
    swift_bridgeObjectRetain(v16);
    v17 = objc_msgSend(a1, "sourceLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v17);

    LOBYTE(v15) = sub_1000A5184((uint64_t)v6, v15, v16);
    swift_bridgeObjectRelease(v16);
    v18 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18(v6, v3);
    if ((v15 & 1) != 0)
    {
      if (v14[2] < 2uLL)
      {
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      v19 = v14[6];
      v20 = v14[7];
      swift_bridgeObjectRetain(v20);
      v21 = objc_msgSend(a1, "targetLocale");
      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v21);

      LOBYTE(v19) = sub_1000A5184((uint64_t)v6, v19, v20);
      swift_bridgeObjectRelease(v20);
      v18(v6, v3);
      if ((v19 & 1) != 0)
      {
        swift_bridgeObjectRelease(v14);
        return;
      }
    }
    if (v14[2] >= 2uLL)
    {
      v22 = v14[6];
      v23 = v14[7];
      swift_bridgeObjectRetain(v23);
      v24 = objc_msgSend(a1, "sourceLocale");
      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v24);

      LOBYTE(v22) = sub_1000A5184((uint64_t)v6, v22, v23);
      swift_bridgeObjectRelease(v23);
      v18(v6, v3);
      if ((v22 & 1) != 0)
      {
        v25 = v14[4];
        v26 = v14[5];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRelease(v14);
        v27 = objc_msgSend(a1, "targetLocale");
        static Locale._unconditionallyBridgeFromObjectiveC(_:)(v27);

        sub_1000A5184((uint64_t)v6, v25, v26);
        swift_bridgeObjectRelease(v26);
        v18(v6, v3);
        return;
      }
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_21;
  }
}

void sub_1000A5A58()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;

  v1 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v1);

  v2 = objc_msgSend(v0, "subviews");
  v3 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v4);
    return;
  }
  if (v4 < 0)
    v9 = v4;
  else
    v9 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_13;
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      else
        v7 = *(id *)(v4 + 8 * i + 32);
      v8 = v7;
      sub_1000A5A58();

    }
    goto LABEL_13;
  }
  __break(1u);
}

id sub_1000A5B98()
{
  return sub_1000A5BC0(&OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___webview, (Class *)WKWebView_ptr);
}

id sub_1000A5BAC()
{
  return sub_1000A5BC0(&OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___notFoundLabel, (Class *)UILabel_ptr);
}

id sub_1000A5BC0(uint64_t *a1, Class *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone(*a2), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1000A5C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___queue;
  v13 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___queue);
  if (v13)
  {
    v14 = *(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___queue);
  }
  else
  {
    v23 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    static DispatchQoS.unspecified.getter(v23);
    v24 = _swiftEmptyArrayStorage;
    v22 = sub_100007D5C(&qword_10028F258, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v15 = sub_100006DF4(&qword_10028F260);
    v16 = sub_1000827A0(&qword_10028F268, &qword_10028F260);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v15, v16, v6, v22);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
    v17 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x80000001001FB7E0, v11, v8, v5, 0);
    v18 = *(void **)(v1 + v12);
    *(_QWORD *)(v1 + v12) = v17;
    v14 = v17;

    v13 = 0;
  }
  v19 = v13;
  return v14;
}

id sub_1000A5E34()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id result;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___dictionaryManager;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___dictionaryManager);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___dictionaryManager);
LABEL_5:
    v6 = v2;
    return v3;
  }
  result = objc_msgSend((id)objc_opt_self(DUDictionaryManager), "assetManager");
  if (result)
  {
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = result;
    v3 = result;

    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_1000A5EB4(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  id v18;
  NSString v19;
  objc_class *v20;
  id v21;
  objc_super v23;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale];
  v11 = type metadata accessor for Locale(0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale], 1, 1, v11);
  v13 = &v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_delegate];
  *((_QWORD *)v14 + 1) = 0;
  swift_unknownObjectWeakInit(v14, 0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___webview] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___notFoundLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___queue] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___dictionaryManager] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_analytics] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordsInspected] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordCountNotFound] = 0;
  v15 = &v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_timeStamp];
  v16 = (void *)objc_opt_self(NSDate);
  v17 = v3;
  v18 = objc_msgSend(v16, "now");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v9, v6);
  *(_QWORD *)&v17[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_observer] = 0;

  if (a2)
  {
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v19 = 0;
  }
  v20 = (objc_class *)type metadata accessor for DictionaryViewController(0);
  v23.receiver = v17;
  v23.super_class = v20;
  v21 = objc_msgSendSuper2(&v23, "initWithNibName:bundle:", v19, a3);

  return v21;
}

id sub_1000A6130(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  id v15;
  objc_class *v16;
  id v17;
  objc_super v19;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale];
  v8 = type metadata accessor for Locale(0);
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v9(&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale], 1, 1, v8);
  v10 = &v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_delegate];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___webview] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___notFoundLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___queue] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController____lazy_storage___dictionaryManager] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_analytics] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordsInspected] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordCountNotFound] = 0;
  v12 = &v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_timeStamp];
  v13 = (void *)objc_opt_self(NSDate);
  v14 = v1;
  v15 = objc_msgSend(v13, "now");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v6, v3);
  *(_QWORD *)&v14[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_observer] = 0;

  v16 = (objc_class *)type metadata accessor for DictionaryViewController(0);
  v19.receiver = v14;
  v19.super_class = v16;
  v17 = objc_msgSendSuper2(&v19, "initWithCoder:", a1);

  return v17;
}

void sub_1000A63F8()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  NSString v9;
  uint64_t KeyPath;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  objc_super v17;
  Swift::String v18;

  v1 = v0;
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for DictionaryViewController(0);
  objc_msgSendSuper2(&v17, "viewDidLoad");
  v2 = objc_msgSend(v0, "view");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
    objc_msgSend(v3, "setBackgroundColor:", v4);

    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v18._object = (void *)0x80000001001FB860;
    v6._object = (void *)0x80000001001FB840;
    v6._countAndFlagsBits = 0xD000000000000010;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v18._countAndFlagsBits = 0xD000000000000010;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v18)._object;

    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setTitle:", v9, swift_bridgeObjectRelease(object).n128_f64[0]);

    sub_1000A69F0();
    sub_1000A6B80();
    v16 = sub_1000A5B98();
    KeyPath = swift_getKeyPath(&unk_1001EC560);
    v11 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_1000A6660, 0, &protocol witness table for NSObject);
    swift_release(KeyPath);

    v12 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_observer];
    *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_observer] = v11;

    v13 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 7);
    objc_msgSend(v13, "addTarget:action:forControlEvents:", v1, "closeActionWithSender:", 0x2000);
    v14 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v13);
    v15 = objc_msgSend(v1, "navigationItem");
    objc_msgSend(v15, "setRightBarButtonItem:", v14);

    sub_1000A7A90();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000A6660()
{
  sub_1000A5A58();
}

uint64_t sub_1000A66B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  double v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[24];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_analytics);
  swift_beginAccess(a1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_analytics, v22, 0, 0);
  v7 = *v6;
  v8 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordCountNotFound), swift_bridgeObjectRetain(v7).n128_f64[0]);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  v21 = v7;
  sub_1001AAA14((uint64_t)v8, 0xD000000000000011, 0x80000001001FB500, isUniquelyReferenced_nonNull_native);
  v10 = v21;
  swift_bridgeObjectRelease(0x8000000000000000);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordsInspected));
  v12 = swift_isUniquelyReferenced_nonNull_native(v10);
  v21 = v10;
  sub_1001AAA14((uint64_t)v11, 0x736E497364726F77, 0xEE00646574636570, v12);
  v13 = v21;
  v14 = swift_bridgeObjectRelease(0x8000000000000000);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, a1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_timeStamp, v2, v14);
  v16 = Date.timeIntervalSinceNow.getter(v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", -v16);
  v18 = swift_isUniquelyReferenced_nonNull_native(v13);
  v21 = v13;
  sub_1001AAA14((uint64_t)v17, 0x7275446C61746F74, 0xED00006E6F697461, v18);
  v19 = v21;
  swift_bridgeObjectRelease(0x8000000000000000);
  return v19;
}

void sub_1000A69F0()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v0 = sub_1000A5B98();
  objc_msgSend(v0, "setHidden:", 1);

  v1 = sub_1000A5B98();
  objc_msgSend(v1, "setOpaque:", 0);

  v2 = sub_1000A5B98();
  sub_1000A5A58();

  v3 = sub_1000A5B98();
  v4 = objc_msgSend(v3, "scrollView");

  v5 = (void *)objc_opt_self(UIColor);
  v6 = objc_msgSend(v5, "clearColor");
  objc_msgSend(v4, "setBackgroundColor:", v6);

  v7 = sub_1000A5BAC();
  objc_msgSend(v7, "setHidden:", 1);

  v8 = sub_1000A5BAC();
  objc_msgSend(v8, "setNumberOfLines:", 0);

  v9 = sub_1000A5BAC();
  objc_msgSend(v9, "setTextAlignment:", 1);

  v10 = sub_1000A5BAC();
  v11 = objc_msgSend(v5, "secondaryLabelColor");
  objc_msgSend(v10, "setTextColor:", v11);

}

void sub_1000A6B80()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  id v28;
  void *v29;
  id v30;

  v1 = v0;
  v2 = sub_1000A5B98();
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v3 = sub_1000A5BAC();
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v4 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v5 = swift_allocObject(v4, 56, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1001EC4B0;
  v6 = sub_1000A5BAC();
  v7 = objc_msgSend(v6, "leadingAnchor");

  v8 = objc_msgSend(v1, "view");
  if (!v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "leadingAnchor");

  v11 = objc_msgSend(v7, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", v10, 2.0);
  *(_QWORD *)(v5 + 32) = v11;
  v12 = objc_msgSend(v1, "view");
  if (!v12)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "trailingAnchor");

  v15 = sub_1000A5BAC();
  v16 = objc_msgSend(v15, "trailingAnchor");

  v17 = objc_msgSend(v14, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", v16, 2.0);
  *(_QWORD *)(v5 + 40) = v17;
  v18 = objc_msgSend(v1, "view");
  if (!v18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v19 = v18;
  v20 = (void *)objc_opt_self(NSLayoutConstraint);
  v21 = objc_msgSend(v19, "centerYAnchor");

  v22 = sub_1000A5BAC();
  v23 = objc_msgSend(v22, "centerYAnchor");

  v24 = objc_msgSend(v21, "constraintEqualToAnchor:", v23);
  *(_QWORD *)(v5 + 48) = v24;
  specialized Array._endMutation()(v25);
  v26 = v5;
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "activateConstraints:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

  v28 = objc_msgSend(v1, "view");
  if (v28)
  {
    v29 = v28;
    v30 = sub_1000A5B98();
    sub_1001DB5F8(v30);

    return;
  }
LABEL_9:
  __break(1u);
}

void sub_1000A6E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_delegate);
  if (Strong)
  {
    v3 = *(_QWORD *)(v1 + 8);
    oslog = Strong;
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
  }
  else
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA368);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.fault.getter(oslog);
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "User pressed dictionary close button but there's no delegate to handle dismissal", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
  }

}

void sub_1000A6FD8(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  char v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  id v34;
  Class isa;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  char v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  __n128 v63;
  void (*v64)(char *, uint64_t, __n128);
  uint64_t v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD aBlock[5];
  _QWORD *v78;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v71 = *(_QWORD *)(v6 - 8);
  v72 = v6;
  __chkstk_darwin(v6);
  v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  __chkstk_darwin(v8);
  v67 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v65 - v14;
  v16 = type metadata accessor for Locale(0);
  v75 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v73 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v74 = (char *)&v65 - v19;
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (id *)((char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v23 = sub_1000A5C38();
  (*(void (**)(id *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  v24 = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(id *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) != 0)
  {
    v26 = sub_1000A5E34();
    v27 = objc_msgSend(v26, "_allAvailableDefinitionDictionaries");

    if (!v27)
      return;
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, (char *)&type metadata for Any + 8);

    v20 = (uint64_t)sub_100121208(v28);
    swift_bridgeObjectRelease(v28);
    if (!v20)
      return;
    sub_100082758(a1, (uint64_t)v15);
    v29 = v75;
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
    if (v30(v15, 1, v16) == 1)
    {
      swift_bridgeObjectRelease(v20);
      v31 = (uint64_t)v15;
LABEL_8:
      sub_1000A8C7C(v31);
      return;
    }
    v32 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v33 = v74;
    v32(v74, v15, v16);
    sub_100082758(a2, (uint64_t)v13);
    if (v30(v13, 1, v16) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v16);
      swift_bridgeObjectRelease(v20);
      v31 = (uint64_t)v13;
      goto LABEL_8;
    }
    v32(v73, v13, v16);
    v34 = objc_allocWithZone((Class)_LTLocalePair);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v36 = Locale._bridgeToObjectiveC()().super.isa;
    v66 = objc_msgSend(v34, "initWithSourceLocale:targetLocale:", isa, v36);

    v25 = v20 & 0xFFFFFFFFFFFFFF8;
    if (!((unint64_t)v20 >> 62))
    {
      v37 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v37)
        goto LABEL_11;
LABEL_28:

      v63 = swift_bridgeObjectRelease(v20);
      v64 = *(void (**)(char *, uint64_t, __n128))(v75 + 8);
      v64(v73, v16, v63);
      ((void (*)(char *, uint64_t))v64)(v74, v16);
      return;
    }
  }
  else
  {
LABEL_23:
    __break(1u);
  }
  if (v20 >= 0)
    v62 = v25;
  else
    v62 = v20;
  swift_bridgeObjectRetain(v20);
  v37 = _CocoaArrayWrapper.endIndex.getter(v62);
  swift_bridgeObjectRelease(v20);
  if (!v37)
    goto LABEL_28;
LABEL_11:
  v38 = 4;
  while (1)
  {
    if ((v20 & 0xC000000000000001) != 0)
      v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38 - 4, v20);
    else
      v39 = *(id *)(v20 + 8 * v38);
    v40 = v39;
    v41 = v38 - 3;
    if (__OFADD__(v38 - 4, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (objc_msgSend(v39, "activated"))
    {
      sub_1000A56D4(v66);
      if ((v42 & 1) != 0)
        break;
    }

    ++v38;
    if (v41 == v37)
      goto LABEL_28;
  }
  v43 = objc_msgSend(v40, "rawAsset");
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "assetId");

    if (v45)
    {
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      swift_bridgeObjectRelease(v20);
      v49 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
      v50 = (void *)static OS_dispatch_queue.main.getter(v49);
      v51 = (_QWORD *)swift_allocObject(&unk_100267FF8, 48, 7);
      v52 = v66;
      v51[2] = v3;
      v51[3] = v52;
      v51[4] = v46;
      v51[5] = v48;
      aBlock[4] = sub_1000A8E80;
      v78 = v51;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100075908;
      aBlock[3] = &unk_100268010;
      v53 = _Block_copy(aBlock);
      v54 = v3;
      v66 = v52;
      v55 = v67;
      static DispatchQoS.unspecified.getter(v66);
      v76 = _swiftEmptyArrayStorage;
      v56 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v57 = sub_100006DF4(&qword_10028AC30);
      v58 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
      v59 = v70;
      v60 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v57, v58, v72, v56);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v53);
      _Block_release(v53);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v59, v60);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v69);
      v61 = *(void (**)(char *, uint64_t))(v75 + 8);
      v61(v73, v16);
      v61(v74, v16);
      swift_release(v78);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000A7608(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  NSString v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  char v29;
  uint64_t v30;
  NSString v31;
  char v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  _BYTE v37[24];

  v35[1] = a4;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a2, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v10);

  Locale.ltIdentifier.getter(v11);
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v16 = (_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_analytics);
  swift_beginAccess(v16, v37, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
  v36 = *v16;
  *v16 = 0x8000000000000000;
  sub_1001AAA14((uint64_t)v15, 0x6F4C656372756F73, 0xEC000000656C6163, isUniquelyReferenced_nonNull_native);
  v18 = *v16;
  *v16 = v36;
  swift_bridgeObjectRelease(v18);
  swift_endAccess(v37);
  v19 = objc_msgSend(a2, "targetLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v19);

  Locale.ltIdentifier.getter(v20);
  v22 = v21;
  v14(v9, v6);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  swift_beginAccess(v16, v37, 33, 0);
  v24 = swift_isUniquelyReferenced_nonNull_native(*v16);
  v36 = *v16;
  *v16 = 0x8000000000000000;
  sub_1001AAA14((uint64_t)v23, 0x6F4C746567726174, 0xEC000000656C6163, v24);
  v25 = *v16;
  *v16 = v36;
  swift_bridgeObjectRelease(v25);
  swift_endAccess(v37);
  sub_100005EC8();
  v27 = v26;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  swift_beginAccess(v16, v37, 33, 0);
  v29 = swift_isUniquelyReferenced_nonNull_native(*v16);
  v36 = *v16;
  *v16 = 0x8000000000000000;
  sub_1001AAA14((uint64_t)v28, 0x6150656C61636F6CLL, 0xEA00000000007269, v29);
  v30 = *v16;
  *v16 = v36;
  swift_bridgeObjectRelease(v30);
  swift_endAccess(v37);
  v31 = String._bridgeToObjectiveC()();
  swift_beginAccess(v16, v37, 33, 0);
  v32 = swift_isUniquelyReferenced_nonNull_native(*v16);
  v36 = *v16;
  *v16 = 0x8000000000000000;
  sub_1001AAA14((uint64_t)v31, 0x44497465737361, 0xE700000000000000, v32);
  v33 = *v16;
  *v16 = v36;
  swift_bridgeObjectRelease(v33);
  return swift_endAccess(v37);
}

uint64_t sub_1000A7928(uint64_t a1, NSString a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  char v11;
  uint64_t result;
  void *v13;
  void *v14;
  NSString v15;
  unsigned int v16;
  id v17;
  uint64_t v18;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (id *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = sub_1000A5C38();
  (*(void (**)(id *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v11 = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(id *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    sub_1000A6FD8(a3, a4);
    if (v13)
    {
      v14 = v13;
      if (a2)
        v15 = String._bridgeToObjectiveC()();
      else
        v15 = 0;
      v16 = objc_msgSend(v14, "_hasDefinitionForTerm:", v15);

      if (v16)
      {
        if (a2)
          a2 = String._bridgeToObjectiveC()();
        v17 = objc_msgSend(v14, "_definitionValueForTerm:", a2);

        return (uint64_t)v17;
      }

    }
    return 0;
  }
  __break(1u);
  return result;
}

void sub_1000A7A90()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  uint64_t v57[3];

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v53 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v53 + 64);
  v7 = __chkstk_darwin(v5);
  v54 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v47 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v47 - v11;
  if (qword_10028A420 != -1)
    swift_once(&qword_10028A420, sub_100120F74);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000F66C(v13, (uint64_t)qword_1002AA368);
  v15 = v1;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v49 = v14;
    v50 = v6;
    v48 = v10;
    v52 = v4;
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(32, -1);
    v57[0] = v19;
    *(_DWORD *)v18 = 136643075;
    v20 = (uint64_t *)&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
    v21 = *(_QWORD *)&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text + 8];
    v51 = v12;
    if (v21)
    {
      v22 = *v20;
      v23 = v21;
    }
    else
    {
      v23 = 0xE300000000000000;
      v22 = 7104878;
    }
    swift_bridgeObjectRetain(v21);
    v55 = sub_1001A7FE4(v22, v23, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v18 + 4);
    swift_bridgeObjectRelease(v23);

    *(_WORD *)(v18 + 12) = 2048;
    v24 = v20[1];
    if (v24)
    {
      v25 = *v20;
      swift_bridgeObjectRetain(v20[1]);
      v26 = String.count.getter(v25, v24);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v26 = 0;
    }
    v10 = v48;

    v55 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v18 + 14);

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Load dictionary item for: %{sensitive}s of length %ld", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v12 = v51;
    v4 = v52;
    v6 = v50;
  }
  else
  {

  }
  v27 = objc_msgSend(v15, "viewIfLoaded");

  if (v27)
  {
    v29 = *(_QWORD *)&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text + 8];
    v52 = *(char **)&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
    v30 = (uint64_t)&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale];
    swift_beginAccess(&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale], v57, 0, 0);
    sub_100082758(v30, (uint64_t)v12);
    v31 = (uint64_t)&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale];
    swift_beginAccess(&v15[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale], &v55, 0, 0);
    v32 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v4, 1, 1, v32);
    sub_100082758((uint64_t)v12, (uint64_t)v10);
    v33 = (uint64_t)v10;
    v34 = v54;
    sub_100082758(v31, v54);
    type metadata accessor for MainActor(0);
    swift_bridgeObjectRetain(v29);
    v35 = (uint64_t)v12;
    v36 = v15;
    v37 = static MainActor.shared.getter(v36);
    v38 = *(unsigned __int8 *)(v53 + 80);
    v39 = (v38 + 56) & ~v38;
    v40 = (v6 + v38 + v39) & ~v38;
    v41 = (_QWORD *)swift_allocObject(&unk_100267F30, v40 + v6, v38 | 7);
    v41[2] = v37;
    v41[3] = &protocol witness table for MainActor;
    v42 = v52;
    v41[4] = v36;
    v41[5] = v42;
    v41[6] = v29;
    sub_1000A8B70(v33, (uint64_t)v41 + v39);
    sub_1000A8B70(v34, (uint64_t)v41 + v40);
    v43 = sub_100049DC0((uint64_t)v4, (uint64_t)&unk_10028FD20, (uint64_t)v41);
    swift_release(v43);
    sub_1000A8C7C(v35);
  }
  else
  {
    v44 = Logger.logObject.getter(v28);
    v45 = static os_log_type_t.info.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Not updating currentText yet because view hasn't loaded yet; it will be updated when the view loads",
        v46,
        2u);
      swift_slowDealloc(v46, -1, -1);
    }

  }
}

uint64_t sub_1000A7F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[9] = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[15] = v10;
  v8[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[17] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[18] = v12;
  v8[19] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8);
  v8[20] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v8[21] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[22] = swift_task_alloc(v15);
  v8[23] = swift_task_alloc(v15);
  v16 = type metadata accessor for MainActor(0);
  v8[24] = static MainActor.shared.getter(v16);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000A8074, v17, v18);
}

uint64_t sub_1000A8074()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0[23];
  v3 = v0[21];
  v2 = v0[22];
  v4 = v0[20];
  v19 = v0[19];
  v24 = v0[18];
  v25 = v0[17];
  v23 = v0[15];
  v5 = v0[13];
  v21 = v0[16];
  v22 = v0[14];
  v7 = v0[11];
  v6 = v0[12];
  v8 = (void *)v0[9];
  v9 = v0[10];
  swift_release(v0[24]);
  v20 = sub_1000A5C38();
  sub_100082758(v6, v1);
  sub_100082758(v5, v2);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = (v3 + v10 + v11) & ~v10;
  v13 = (_QWORD *)swift_allocObject(&unk_100267F58, v12 + v3, v10 | 7);
  v13[2] = v8;
  v13[3] = v9;
  v13[4] = v7;
  sub_1000A8B70(v1, (uint64_t)v13 + v11);
  sub_1000A8B70(v2, (uint64_t)v13 + v12);
  v0[6] = sub_1000A8D98;
  v0[7] = v13;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100075908;
  v0[5] = &unk_100267F70;
  v14 = _Block_copy(v0 + 2);
  swift_bridgeObjectRetain(v7);
  static DispatchQoS.unspecified.getter(v8);
  v0[8] = _swiftEmptyArrayStorage;
  v15 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100006DF4(&qword_10028AC30);
  v17 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 8, v16, v17, v22, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v21, v14);
  _Block_release(v14);

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v19, v25);
  swift_release(v0[7]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1000A82B8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void *)sub_1000A7928(a2, a3, a4, a5);
  v17 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter(v17);
  v19 = swift_allocObject(&unk_100267FA8, 32, 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = v16;
  aBlock[4] = sub_1000A8E28;
  v32 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100267FC0;
  v20 = _Block_copy(aBlock);
  v21 = v32;
  v22 = v16;
  v23 = a1;
  v24 = swift_release(v21);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100006DF4(&qword_10028AC30);
  v27 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v10, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v29);
}

void sub_1000A84FC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  void *object;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[4];
  Swift::String v34;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordsInspected);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = v1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordsInspected) = v4;
  if (a1)
  {
    v6 = a1;
    v7 = objc_msgSend(v6, "longDefinition");
    if (v7)
    {
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

      v33[2] = v9;
      v33[3] = v11;
      v33[0] = 0x3E646165682F3CLL;
      v33[1] = 0xE700000000000000;
      v32[0] = 0xD000000000000262;
      v32[1] = 0x80000001001FB570;
      v12 = sub_10000B030();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v33, v32, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v12, v12, v12);
      v14 = v13;
      swift_bridgeObjectRelease(v11);
      v15 = sub_1000A5B98();
      v16 = String._bridgeToObjectiveC()();

      v17 = sub_1000A5B98();
      objc_msgSend(v17, "setHidden:", 0);

      v18 = sub_1000A5BAC();
      objc_msgSend(v18, "setHidden:", 1);

      v19 = sub_1000A5B98();
      sub_1001DB82C();

      return;
    }
    goto LABEL_10;
  }
  v20 = sub_1000A5B98();
  v21 = String._bridgeToObjectiveC()();

  v22 = sub_1000A5B98();
  objc_msgSend(v22, "setHidden:", 1);

  v23 = sub_1000A5BAC();
  objc_msgSend(v23, "setHidden:", 0);

  v24 = sub_1000A5BAC();
  v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v34._countAndFlagsBits = 0xD00000000000001ELL;
  v34._object = (void *)0x80000001001FB550;
  v26._object = (void *)0x80000001001FB530;
  v26._countAndFlagsBits = 0xD000000000000010;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v34)._object;

  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setText:", v29, swift_bridgeObjectRelease(object).n128_f64[0]);

  v30 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordCountNotFound);
  v3 = __OFADD__(v30, 1);
  v31 = v30 + 1;
  if (v3)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  *(_QWORD *)(v5 + OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_wordCountNotFound) = v31;
}

id sub_1000A8814()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DictionaryViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000A892C()
{
  return type metadata accessor for DictionaryViewController(0);
}

uint64_t type metadata accessor for DictionaryViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_10028FD08;
  if (!qword_10028FD08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DictionaryViewController);
  return result;
}

void sub_1000A8970(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  sub_1000A8A38(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = &unk_1001EC510;
    v6[3] = &unk_1001EC528;
    v6[4] = &unk_1001EC540;
    v6[5] = &unk_1001EC540;
    v6[6] = &unk_1001EC540;
    v6[7] = &unk_1001EC540;
    v6[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6[11] = *(_QWORD *)(v4 - 8) + 64;
      v6[12] = &unk_1001EC540;
      swift_updateClassMetadata2(a1, 256, 13, v6, a1 + 80);
    }
  }
}

void sub_1000A8A38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100292A50)
  {
    v2 = type metadata accessor for Locale(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100292A50);
  }
}

uint64_t sub_1000A8A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 56) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v6 = v0 + v3;
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (!v9(v0 + v5, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v5, v7);
  return swift_deallocObject(v0, v5 + v4, v2 | 7);
}

uint64_t sub_1000A8B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8BB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 56) & ~v5;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = v1[6];
  v12 = (uint64_t)v1 + v6;
  v13 = (uint64_t)v1 + ((*(_QWORD *)(v4 + 64) + v5 + v6) & ~v5);
  v14 = (_QWORD *)swift_task_alloc(dword_10028FD1C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10001D380;
  return sub_1000A7F74(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000A8C7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A8CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v6 = v0 + v3;
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (!v9(v0 + v5, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v5, v7);
  return swift_deallocObject(v0, v5 + v4, v2 | 7);
}

uint64_t sub_1000A8D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  return sub_1000A82B8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), v0 + ((v2 + 40) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 40) & ~v2)) & ~v2));
}

uint64_t sub_1000A8DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A8DF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A8DFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A8E28()
{
  uint64_t v0;

  sub_1000A84FC(*(void **)(v0 + 24));
}

uint64_t sub_1000A8E4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A8E80()
{
  uint64_t v0;

  return sub_1000A7608(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000A8E8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A8EB0()
{
  uint64_t v0;

  return sub_1000A66B4(*(_QWORD *)(v0 + 16));
}

const char *sub_1000A8EB8()
{
  return "isLoading";
}

id sub_1000A8EC4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isLoading");
  *a2 = (_BYTE)result;
  return result;
}

_BYTE *sub_1000A8F0C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  _BYTE *v3;
  _BYTE *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___cardCell;
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___cardCell];
  if (v2)
  {
    v3 = *(_BYTE **)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___cardCell];
  }
  else
  {
    v4 = sub_1000A8F6C(v0);
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

_BYTE *sub_1000A8F6C(void *a1)
{
  _BYTE *v2;
  char v3;
  char *v4;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  _BYTE v12[24];
  _QWORD v13[5];

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CardCollectionViewCell()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = v2[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded];
  v2[OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_isExpanded] = 1;
  if ((v3 & 1) == 0)
    sub_100024A80();
  v4 = sub_100023D30();
  v13[3] = type metadata accessor for DictionaryWordSelectionController();
  v13[4] = &off_100268098;
  v13[0] = a1;
  v5 = (uint64_t)&v4[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate];
  swift_beginAccess(&v4[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate], v12, 33, 0);
  v6 = a1;
  sub_10002D560((uint64_t)v13, v5, (uint64_t *)&unk_10028BEB0);
  swift_endAccess(v12);

  v7 = sub_100023D30();
  v8 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_enableSelectable;
  v7[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_enableSelectable] = 0;
  v9 = sub_1001AD668();
  objc_msgSend(v9, "setSelectable:", v7[v8]);

  v10 = sub_1001ADBD4();
  objc_msgSend(v10, "setSelectable:", v7[v8]);

  return v2;
}

id sub_1000A90B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___scrollView;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___scrollView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___scrollView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
    v5 = (void *)objc_opt_self(UIColor);
    v6 = v4;
    v7 = objc_msgSend(v5, "clearColor");
    objc_msgSend(v6, "setBackgroundColor:", v7);

    objc_msgSend(v6, "_setContentInsetAdjustmentBehavior:", 2);
    objc_msgSend(v6, "setContentSize:", *(double *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 16), *(double *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 24)+ *(double *)(v0+ OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_scrollViewAdditionalContentHeight));
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1000A91B8(double a1)
{
  _BYTE *v1;
  _OWORD *v3;
  _OWORD *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  char *v10;
  id v11;
  id v12;
  objc_super v14;

  v3 = &v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame];
  *v3 = 0u;
  v3[1] = 0u;
  v4 = &v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalVisibleScrollRect];
  *v4 = 0u;
  v4[1] = 0u;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___cardCell] = 0;
  v5 = &v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translationAlternativeSelectedHandler];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController] = 0;
  v6 = &v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initialTouchPointInTargetView];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initiallySetHighlightToFirstWord] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translation] = 0;
  v7 = &v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_word];
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_scrollViewAdditionalContentHeight] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___scrollView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_backgroundView] = 0;
  v8 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_cardBackgroundView;
  v9 = objc_allocWithZone((Class)UIView);
  v10 = v1;
  v11 = objc_msgSend(v9, "init");
  v12 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  objc_msgSend(v11, "setBackgroundColor:", v12);

  *(_QWORD *)&v1[v8] = v11;
  *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView] = 0;
  *(double *)&v10[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_cardBackgroundHeight] = a1;

  v14.receiver = v10;
  v14.super_class = (Class)type metadata accessor for DictionaryWordSelectionController();
  return objc_msgSendSuper2(&v14, "initWithNibName:bundle:", 0, 0);
}

void sub_1000A9408(char a1)
{
  char *v1;
  char *v2;
  CGFloat *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _BYTE *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString *v14;
  Class isa;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  char isEscapingClosureAtFileLocation;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  id v40;
  void *v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  id v51;
  _QWORD aBlock[5];
  uint64_t v53;
  void *v54;
  objc_super v55;

  v2 = v1;
  v55.receiver = v2;
  v55.super_class = (Class)type metadata accessor for DictionaryWordSelectionController();
  objc_msgSendSuper2(&v55, "viewDidAppear:", a1 & 1);
  v4 = (CGFloat *)&v2[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initialTouchPointInTargetView];
  if ((v2[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initialTouchPointInTargetView + 16] & 1) == 0)
  {
    sub_1000AB194(*v4, v4[1]);
    *v4 = 0.0;
    v4[1] = 0.0;
    *((_BYTE *)v4 + 16) = 1;
  }
  if (v2[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initiallySetHighlightToFirstWord] != 1)
    goto LABEL_16;
  v5 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView;
  v6 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView];
  if (v6)
  {
    v7 = v6;
    HighlightTextView.removeHighlights()();

  }
  v8 = sub_1000A8F0C();
  v9 = sub_100023D30();

  v10 = sub_1001ADBD4();
  v54 = 0;
  v11 = sub_100006DF4((uint64_t *)&unk_10028FE30);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v12 + 32) = NSLinguisticTagSchemeTokenType;
  v13 = objc_allocWithZone((Class)NSLinguisticTagger);
  type metadata accessor for NSLinguisticTagScheme(0);
  v14 = NSLinguisticTagSchemeTokenType;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v13, "initWithTagSchemes:options:", isa, 0, swift_bridgeObjectRelease(v12).n128_f64[0]);

  v17 = objc_msgSend(v10, "text");
  objc_msgSend(v16, "setString:", v17);

  v18 = objc_msgSend(v10, "text");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

    v23 = String.UTF16View.count.getter(v20, v22);
    swift_bridgeObjectRelease(v22);
    v24 = swift_allocObject(&unk_100268288, 32, 7);
    *(_QWORD *)(v24 + 16) = &v54;
    *(_QWORD *)(v24 + 24) = v10;
    v25 = swift_allocObject(&unk_1002682B0, 32, 7);
    *(_QWORD *)(v25 + 16) = sub_1000ABD58;
    *(_QWORD *)(v25 + 24) = v24;
    aBlock[4] = sub_10002D62C;
    v53 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000AB97C;
    aBlock[3] = &unk_1002682C8;
    v26 = _Block_copy(aBlock);
    v27 = v53;
    v28 = (char *)v10;
    swift_retain(v25);
    swift_release(v27);
    objc_msgSend(v16, "enumerateTagsInRange:unit:scheme:options:usingBlock:", 0, v23, 0, v14, 6, v26);

    _Block_release(v26);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v25, "", 102, 241, 92, 1);
    swift_release(v25);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      v30 = v54;
      swift_release(v24);
      if (v30)
      {
        HighlightTextView.removeHighlights()();
        HighlightTextView.addHighlight(to:)(v30);
        v31 = objc_msgSend(v28, "textInRange:", v30);
        if (v31)
        {
          v32 = v31;
          v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          v35 = v34;

        }
        else
        {
          v33 = 0;
          v35 = 0;
        }
        v36 = (uint64_t *)&v28[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
        v37 = *(_QWORD *)&v28[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8];
        *v36 = v33;
        v36[1] = v35;

        swift_bridgeObjectRelease(v37);
      }
      else
      {

      }
      v38 = sub_1000A8F0C();
      v39 = sub_100023D30();

      v40 = sub_1001ADBD4();
      v41 = *(void **)&v2[v5];
      *(_QWORD *)&v2[v5] = v40;

      v42 = *(void **)&v2[v5];
      if (v42)
      {
        objc_msgSend(v42, "frame");
        v44 = v43;
        v46 = v45;
        v48 = v47;
        v50 = v49;
        v51 = sub_1000A90B0();
        objc_msgSend(v51, "scrollRectToVisible:animated:", 0, v44, v46, v48, v50);

      }
LABEL_16:
      sub_1000A9888();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1000A9888()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  Class isa;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  NSString v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  Class v59;
  id v60;
  _QWORD aBlock[5];
  uint64_t v63;
  _BYTE v64[40];
  _QWORD v65[4];
  char v66;

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v2);
  v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DictionaryViewController(0);
  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v5)), "init");
  v7 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController;
  v8 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController];
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController] = v6;

  v9 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translation];
  if (v9)
  {
    v10 = *(void **)&v1[v7];
    if (v10)
    {
      v11 = v9;
      v12 = v10;
      dispatch thunk of PersistedTranslation.sourceLocale.getter(v12);
      v13 = type metadata accessor for Locale(0);
      v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
      v14(v4, 0, 1, v13);
      v15 = (uint64_t)&v12[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale];
      swift_beginAccess(&v12[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale], aBlock, 33, 0);
      sub_10002D560((uint64_t)v4, v15, (uint64_t *)&unk_10028FE50);
      v16 = swift_endAccess(aBlock);
      dispatch thunk of PersistedTranslation.targetLocale.getter(v16);
      v14(v4, 0, 1, v13);
      v17 = (uint64_t)&v12[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale];
      swift_beginAccess(&v12[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale], aBlock, 33, 0);
      sub_10002D560((uint64_t)v4, v17, (uint64_t *)&unk_10028FE50);
      swift_endAccess(aBlock);
      v18 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_word + 8];
      v19 = &v12[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
      v20 = *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text + 8];
      *(_QWORD *)v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_word];
      *((_QWORD *)v19 + 1) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v20);
      sub_1000A7A90();
      *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_delegate + 8] = &off_100268088;
      swift_unknownObjectWeakAssign();
      v21 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v12);
      objc_msgSend(v21, "setModalPresentationStyle:", 7);
      v22 = objc_msgSend(v21, "presentationController");
      if (v22)
      {
        v23 = v22;
        objc_msgSend(v22, "setDelegate:", v1);

      }
      v24 = objc_msgSend(v21, "popoverPresentationController");
      if (v24)
      {
        v25 = v24;
        objc_msgSend(v24, "setSourceView:", *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView]);

      }
      v26 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView];
      if (v26)
      {
        v27 = v26;
        HighlightTextView.currentHightlightFrame()((uint64_t)v64);

        sub_1000ABA4C((uint64_t)v64, (uint64_t)v65);
        if ((v66 & 1) == 0)
        {
          v28 = *(double *)v65;
          v29 = *(double *)&v65[1];
          v30 = *(double *)&v65[2];
          v31 = *(double *)&v65[3];
          v32 = objc_msgSend(v21, "popoverPresentationController");
          objc_msgSend(v32, "setSourceRect:", v28, v29, v30, v31);

        }
      }
      v33 = objc_msgSend(v21, "popoverPresentationController");
      if (v33)
      {
        v34 = v33;
        objc_msgSend(v33, "setPermittedArrowDirections:", 1);

      }
      v35 = objc_msgSend(v21, "popoverPresentationController");
      if (v35)
      {
        v36 = v35;
        v37 = sub_100006DF4((uint64_t *)&unk_10028C060);
        v38 = swift_allocObject(v37, 40, 7);
        *(_OWORD *)(v38 + 16) = xmmword_1001EA980;
        v39 = sub_1000A8F0C();
        v40 = sub_100023D30();

        *(_QWORD *)(v38 + 32) = v40;
        aBlock[0] = v38;
        specialized Array._endMutation()(v41);
        v42 = aBlock[0];
        sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v36, "setPassthroughViews:", isa, swift_bridgeObjectRelease(v42).n128_f64[0]);

      }
      v44 = objc_msgSend(v21, "popoverPresentationController");
      if (v44)
      {
        v45 = v44;
        objc_msgSend(v44, "setCanOverlapSourceViewRect:", 0);

      }
      v46 = objc_msgSend(v21, "popoverPresentationController");
      if (v46)
      {
        v47 = v46;
        v48 = objc_msgSend(v46, "adaptiveSheetPresentationController");

        if (v48)
        {
          v49 = (void *)objc_opt_self(UISheetPresentationControllerDetent);
          v50 = String._bridgeToObjectiveC()();
          v51 = swift_allocObject(&unk_1002681E8, 24, 7);
          swift_unknownObjectUnownedInit(v51 + 16, v1);
          aBlock[4] = sub_1000ABAEC;
          v63 = v51;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000AA0D8;
          aBlock[3] = &unk_100268200;
          v52 = _Block_copy(aBlock);
          swift_release(v63);
          v53 = objc_msgSend(v49, "_detentWithIdentifier:resolutionContextBlock:", v50, v52);
          _Block_release(v52);

          objc_msgSend(v48, "setDelegate:", v1);
          objc_msgSend(v48, "_setShouldDismissWhenTappedOutside:", 0);
          v54 = sub_100006DF4((uint64_t *)&unk_10028C060);
          v55 = swift_allocObject(v54, 48, 7);
          *(_OWORD *)(v55 + 16) = xmmword_1001E76E0;
          *(_QWORD *)(v55 + 32) = v53;
          v56 = v53;
          v57 = objc_msgSend(v49, "largeDetent");
          *(_QWORD *)(v55 + 40) = v57;
          aBlock[0] = v55;
          specialized Array._endMutation()(v57);
          v58 = aBlock[0];
          sub_10000A05C(0, &qword_1002986B0, UISheetPresentationControllerDetent_ptr);
          v59 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v48, "setDetents:", v59, swift_bridgeObjectRelease(v58).n128_f64[0]);

          v60 = objc_msgSend(v56, "_identifier");
          objc_msgSend(v48, "setLargestUndimmedDetentIdentifier:", v60);

          objc_msgSend(v48, "setPrefersGrabberVisible:", 1);
        }
      }
      objc_msgSend(v1, "presentViewController:animated:completion:", v21, 1, 0);

    }
  }
}

double sub_1000A9F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  _BYTE *v4;
  char *v5;
  id v6;
  id v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double Height;
  char *v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double MaxY;
  void *v23;
  _BYTE *v24;
  char *v25;
  id v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v2 = a2 + 16;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a2 + 16);
  v4 = sub_1000A8F0C();
  v5 = sub_100023D30();

  v6 = *(id *)&v5[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];
  objc_msgSend(v6, "setHidden:", 1);

  v7 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v7, "bounds");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;

  v36.origin.x = v9;
  v36.origin.y = v11;
  v36.size.width = v13;
  v36.size.height = v15;
  Height = CGRectGetHeight(v36);
  v17 = (char *)swift_unknownObjectUnownedLoadStrong(v2);
  v18 = *(double *)&v17[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame];
  v19 = *(double *)&v17[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 8];
  v20 = *(double *)&v17[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 16];
  v21 = *(double *)&v17[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 24];

  v37.origin.x = v18;
  v37.origin.y = v19;
  v37.size.width = v20;
  v37.size.height = v21;
  MaxY = CGRectGetMaxY(v37);
  v23 = (void *)swift_unknownObjectUnownedLoadStrong(v2);
  v24 = sub_1000A8F0C();
  v25 = sub_100023D30();

  v26 = *(id *)&v25[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];
  objc_msgSend(v26, "frame");
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;

  v38.origin.x = v28;
  v38.origin.y = v30;
  v38.size.width = v32;
  v38.size.height = v34;
  return Height - (MaxY - CGRectGetHeight(v38));
}

double sub_1000AA0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double (*v4)(uint64_t);
  uint64_t v5;
  double v6;

  v4 = *(double (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v6 = v4(v5);
  swift_release(v3);
  swift_unknownObjectRelease(a2);
  return v6;
}

id sub_1000AA134()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id result;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_backgroundView];
  if (v2)
  {
    v3 = v2;
    result = objc_msgSend(v1, "view");
    if (!result)
      goto LABEL_9;
    v5 = result;
    objc_msgSend(result, "addSubview:", v3);

  }
  result = objc_msgSend(v1, "view");
  if (result)
  {
    v6 = result;
    objc_msgSend(result, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_cardBackgroundView]);

    result = objc_msgSend(v1, "view");
    if (result)
    {
      v7 = result;
      v8 = sub_1000A90B0();
      objc_msgSend(v7, "addSubview:", v8);

      v9 = sub_1000A90B0();
      v10 = sub_1000A8F0C();
      v11 = sub_100023D30();

      objc_msgSend(v9, "addSubview:", v11);
      v12 = sub_100006DF4(&qword_10028FE40);
      v13 = swift_allocObject(v12, 48, 7);
      *(_OWORD *)(v13 + 16) = xmmword_1001E64F0;
      *(_QWORD *)(v13 + 32) = type metadata accessor for UITraitUserInterfaceIdiom(0);
      *(_QWORD *)(v13 + 40) = &protocol witness table for UITraitUserInterfaceIdiom;
      v14 = swift_allocObject(&unk_100268198, 24, 7);
      swift_unknownObjectWeakInit(v14 + 16, v1);
      v15 = sub_100006DF4(&qword_10028FE48);
      v16 = UIViewController.registerForTraitChanges<A>(_:handler:)(v13, sub_1000ABAB8, v14, v15);
      swift_unknownObjectRelease(v16);
      swift_bridgeObjectRelease(v13);
      return (id)swift_release(v14);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

void sub_1000AA300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *Strong;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD aBlock[5];
  uint64_t v11;
  _BYTE v12[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = objc_msgSend(Strong, "presentedViewController");

    if (v7)
    {
      aBlock[4] = sub_1000ABAC0;
      v11 = a3;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100075908;
      aBlock[3] = &unk_1002681B0;
      v8 = _Block_copy(aBlock);
      v9 = v11;
      swift_retain(a3);
      swift_release(v9);
      objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 1, v8);
      _Block_release(v8);

    }
  }
}

void sub_1000AA3F0(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 0, 0);

  }
}

void sub_1000AA450()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  _BYTE *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  _BYTE *v50;
  char *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  _BYTE *v56;
  char *v57;
  id v58;
  id v59;
  _BYTE *v60;
  char *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  _BYTE *v66;
  char *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  Class isa;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_backgroundView];
  if (!v2)
  {
LABEL_4:
    v6 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_cardBackgroundView;
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_cardBackgroundView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v7 = sub_1000A90B0();
    objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    v8 = sub_1000A8F0C();
    v9 = sub_100023D30();

    objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v10 = sub_1000A8F0C();
    v11 = sub_100023D30();

    v12 = objc_msgSend(v11, "layer");
    objc_msgSend(v12, "setCornerRadius:", 10.0);

    v13 = objc_msgSend(*(id *)&v1[v6], "layer");
    objc_msgSend(v13, "setCornerRadius:", 10.0);

    v14 = objc_msgSend(v1, "view");
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "convertRect:fromView:", 0, *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame], *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 8], *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 16], *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame + 24]);
      v17 = v16;
      v19 = v18;

      v20 = objc_msgSend(v1, "view");
      if (v20)
      {
        v21 = v20;
        objc_msgSend(v20, "convertRect:fromView:", 0, *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalVisibleScrollRect], *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalVisibleScrollRect+ 8], *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalVisibleScrollRect+ 16], *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalVisibleScrollRect+ 24]);
        v23 = v22;
        v25 = v24;
        v27 = v26;
        v29 = v28;

        v30 = sub_100006DF4((uint64_t *)&unk_10028C060);
        v31 = swift_allocObject(v30, 128, 7);
        *(_OWORD *)(v31 + 16) = xmmword_1001EC590;
        v32 = sub_1000A90B0();
        v33 = objc_msgSend(v32, "topAnchor");

        v34 = objc_msgSend(v1, "view");
        if (v34)
        {
          v35 = v34;
          v36 = objc_msgSend(v34, "topAnchor");

          v86.origin.x = v23;
          v86.origin.y = v25;
          v86.size.width = v27;
          v86.size.height = v29;
          v37 = objc_msgSend(v33, "constraintEqualToAnchor:constant:", v36, CGRectGetMinY(v86));

          *(_QWORD *)(v31 + 32) = v37;
          v38 = sub_1000A90B0();
          v39 = objc_msgSend(v38, "heightAnchor");

          v87.origin.x = v23;
          v87.origin.y = v25;
          v87.size.width = v27;
          v87.size.height = v29;
          v40 = objc_msgSend(v39, "constraintEqualToConstant:", CGRectGetHeight(v87));

          *(_QWORD *)(v31 + 40) = v40;
          v41 = sub_1000A90B0();
          v42 = objc_msgSend(v41, "leadingAnchor");

          v43 = objc_msgSend(v1, "view");
          if (v43)
          {
            v44 = v43;
            v45 = objc_msgSend(v43, "leadingAnchor");

            v88.origin.x = v23;
            v88.origin.y = v25;
            v88.size.width = v27;
            v88.size.height = v29;
            v46 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v45, CGRectGetMinX(v88));

            *(_QWORD *)(v31 + 48) = v46;
            v47 = sub_1000A90B0();
            v48 = objc_msgSend(v47, "widthAnchor");

            v89.origin.x = v23;
            v89.origin.y = v25;
            v89.size.width = v27;
            v89.size.height = v29;
            v49 = objc_msgSend(v48, "constraintEqualToConstant:", CGRectGetWidth(v89));

            *(_QWORD *)(v31 + 56) = v49;
            v50 = sub_1000A8F0C();
            v51 = sub_100023D30();

            v52 = objc_msgSend(v51, "topAnchor");
            v53 = sub_1000A90B0();
            v54 = objc_msgSend(v53, "topAnchor");

            v55 = objc_msgSend(v52, "constraintEqualToAnchor:", v54);
            *(_QWORD *)(v31 + 64) = v55;
            v56 = sub_1000A8F0C();
            v57 = sub_100023D30();

            v58 = objc_msgSend(v57, "heightAnchor");
            v59 = objc_msgSend(v58, "constraintEqualToConstant:", v19);

            *(_QWORD *)(v31 + 72) = v59;
            v60 = sub_1000A8F0C();
            v61 = sub_100023D30();

            v62 = objc_msgSend(v61, "centerXAnchor");
            v63 = sub_1000A90B0();
            v64 = objc_msgSend(v63, "centerXAnchor");

            v65 = objc_msgSend(v62, "constraintEqualToAnchor:", v64);
            *(_QWORD *)(v31 + 80) = v65;
            v66 = sub_1000A8F0C();
            v67 = sub_100023D30();

            v68 = objc_msgSend(v67, "widthAnchor");
            v69 = objc_msgSend(v68, "constraintEqualToConstant:", v17);

            *(_QWORD *)(v31 + 88) = v69;
            v70 = objc_msgSend(*(id *)&v1[v6], "topAnchor");
            v71 = objc_msgSend(v1, "view");
            if (v71)
            {
              v72 = v71;
              v73 = (void *)objc_opt_self(NSLayoutConstraint);
              v74 = objc_msgSend(v72, "topAnchor");

              v90.origin.x = v23;
              v90.origin.y = v25;
              v90.size.width = v27;
              v90.size.height = v29;
              v75 = objc_msgSend(v70, "constraintEqualToAnchor:constant:", v74, CGRectGetMinY(v90));

              *(_QWORD *)(v31 + 96) = v75;
              v76 = objc_msgSend(*(id *)&v1[v6], "heightAnchor");
              v77 = objc_msgSend(v76, "constraintEqualToConstant:", *(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_cardBackgroundHeight]);

              *(_QWORD *)(v31 + 104) = v77;
              v78 = objc_msgSend(*(id *)&v1[v6], "centerXAnchor");
              v79 = sub_1000A90B0();
              v80 = objc_msgSend(v79, "centerXAnchor");

              v81 = objc_msgSend(v78, "constraintEqualToAnchor:", v80);
              *(_QWORD *)(v31 + 112) = v81;
              v82 = objc_msgSend(*(id *)&v1[v6], "widthAnchor");
              v83 = objc_msgSend(v82, "constraintEqualToConstant:", v17);

              *(_QWORD *)(v31 + 120) = v83;
              specialized Array._endMutation()(v84);
              sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
              isa = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v73, "activateConstraints:", isa, swift_bridgeObjectRelease(v31).n128_f64[0]);

              return;
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  v3 = v2;
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = objc_msgSend(v0, "view");
  if (v4)
  {
    v5 = v4;
    sub_1001DB5F8(v3);

    goto LABEL_4;
  }
LABEL_15:
  __break(1u);
}

void sub_1000AAC54(uint64_t a1, double a2, double a3)
{
  void *v3;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;
  objc_super v15;

  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for DictionaryWordSelectionController();
  objc_msgSendSuper2(&v15, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v7 = objc_msgSend(v3, "presentedViewController");
  if (v7)
  {
    v8 = v7;
    v9 = swift_allocObject(&unk_100268238, 24, 7);
    *(_QWORD *)(v9 + 16) = v3;
    v13[4] = sub_1000ABD78;
    v14 = v9;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_100075908;
    v13[3] = &unk_100268250;
    v10 = _Block_copy(v13);
    v11 = v14;
    v12 = v3;
    swift_release(v11);
    objc_msgSend(v8, "dismissViewControllerAnimated:completion:", 1, v10);
    _Block_release(v10);

  }
}

void sub_1000AADD0(void *a1)
{
  char *v1;
  char *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  id v51;
  _BYTE v52[40];
  _QWORD v53[4];
  char v54;

  v2 = v1;
  v4 = objc_msgSend(a1, "view");
  if (v4)
  {
    v51 = v4;
    v5 = type metadata accessor for HighlightTextView();
    v6 = swift_dynamicCastClass(v51, v5);
    if (v6
      && (v7 = (char *)v6,
          objc_msgSend(a1, "locationInView:", v6),
          v9 = v8,
          v11 = v10,
          HighlightTextView.getWordAtPoint(_:)(v8, v10),
          v12))
    {
      swift_bridgeObjectRelease(v12);
      v13 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView;
      v14 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView];
      if (v14)
      {
        v15 = v14;
        HighlightTextView.removeHighlights()();

      }
      HighlightTextView.removeHighlights()();
      v16 = sub_1000D2CF0(v9, v11);
      if (v16)
      {
        v17 = v16;
        HighlightTextView.addHighlight(to:)(v16);
        v18 = objc_msgSend(v7, "textInRange:", v17);
        if (v18)
        {
          v19 = v18;
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          v22 = v21;

        }
        else
        {
          v20 = 0;
          v22 = 0;
        }
        v23 = (uint64_t *)&v7[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
        v24 = *(_QWORD *)&v7[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8];
        *v23 = v20;
        v23[1] = v22;

        swift_bridgeObjectRelease(v24);
      }
      v25 = *(void **)&v2[v13];
      *(_QWORD *)&v2[v13] = v7;
      v26 = v51;

      v27 = objc_msgSend(v2, "presentedViewController");
      if (v27)
      {
        v28 = v27;
        v29 = objc_msgSend(v27, "popoverPresentationController");

        if (v29)
        {
          objc_msgSend(v29, "setSourceView:", *(_QWORD *)&v2[v13]);

        }
      }
      v30 = *(void **)&v2[v13];
      if (v30)
      {
        v31 = v30;
        HighlightTextView.currentHightlightFrame()((uint64_t)v52);

        sub_1000ABA4C((uint64_t)v52, (uint64_t)v53);
        if ((v54 & 1) == 0)
        {
          v32 = *(double *)v53;
          v33 = *(double *)&v53[1];
          v34 = *(double *)&v53[2];
          v35 = *(double *)&v53[3];
          v36 = objc_msgSend(v2, "presentedViewController");
          v37 = objc_msgSend(v36, "popoverPresentationController");

          objc_msgSend(v37, "setSourceRect:", v32, v33, v34, v35);
        }
      }
      v38 = objc_msgSend(v2, "presentedViewController");
      if (v38)
      {
        v39 = v38;
        v40 = objc_msgSend(v38, "popoverPresentationController");

        if (v40)
        {
          v41 = objc_msgSend(v40, "containerView");

          objc_msgSend(v41, "setNeedsLayout");
        }
      }
      v42 = objc_msgSend(v2, "presentedViewController");
      if (v42)
      {
        v43 = v42;
        v44 = objc_msgSend(v42, "popoverPresentationController");

        if (v44)
        {
          v45 = objc_msgSend(v44, "containerView");

          objc_msgSend(v45, "layoutIfNeeded");
        }
      }
      v46 = *(char **)&v2[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController];
      if (v46)
      {
        v47 = *(_QWORD *)&v7[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8];
        v48 = &v46[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
        v49 = *(_QWORD *)&v46[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text + 8];
        *(_QWORD *)v48 = *(_QWORD *)&v7[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
        *((_QWORD *)v48 + 1) = v47;
        v50 = v46;
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRelease(v49);
        sub_1000A7A90();

      }
    }
    else
    {

    }
  }
}

void sub_1000AB194(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  id v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  id v23;
  void *v24;

  v3 = v2;
  v6 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView;
  v7 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView);
  if (v7)
  {
    v8 = v7;
    HighlightTextView.removeHighlights()();

  }
  v9 = sub_1000A8F0C();
  v10 = sub_100023D30();

  v11 = (char *)sub_1001ADBD4();
  HighlightTextView.removeHighlights()();
  v12 = sub_1000D2CF0(a1, a2);
  if (v12)
  {
    v13 = v12;
    HighlightTextView.addHighlight(to:)(v12);
    v14 = objc_msgSend(v11, "textInRange:", v13);
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

    }
    else
    {
      v16 = 0;
      v18 = 0;
    }
    v19 = (uint64_t *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
    v20 = *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8];
    *v19 = v16;
    v19[1] = v18;

    swift_bridgeObjectRelease(v20);
  }
  else
  {

  }
  v21 = sub_1000A8F0C();
  v22 = sub_100023D30();

  v23 = sub_1001ADBD4();
  v24 = *(void **)(v3 + v6);
  *(_QWORD *)(v3 + v6) = v23;

}

id sub_1000AB30C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DictionaryWordSelectionController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DictionaryWordSelectionController()
{
  return objc_opt_self(_TtC17SequoiaTranslator33DictionaryWordSelectionController);
}

void sub_1000AB40C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  _BYTE *v7;
  char *v8;
  id v9;
  id v10;
  char v11;
  _BYTE *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString *v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char isEscapingClosureAtFileLocation;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(uint64_t, __n128);
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  _QWORD aBlock[5];
  uint64_t v55;
  void *v56;

  v2 = v1;
  v4 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView);
  v6 = v5;
  v7 = sub_1000A8F0C();
  v8 = sub_100023D30();

  v9 = sub_1001ADBD4();
  if (!v5)
  {

    goto LABEL_15;
  }
  type metadata accessor for HighlightTextView();
  v10 = v6;
  v11 = static NSObject.== infix(_:_:)(v10, v9);

  if ((v11 & 1) == 0)
    goto LABEL_15;
  v53 = a1;
  v12 = sub_1000A8F0C();
  v13 = sub_100023D30();

  v14 = sub_1001ADBD4();
  v56 = 0;
  v15 = sub_100006DF4((uint64_t *)&unk_10028FE30);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v16 + 32) = NSLinguisticTagSchemeTokenType;
  v17 = objc_allocWithZone((Class)NSLinguisticTagger);
  type metadata accessor for NSLinguisticTagScheme(0);
  v18 = NSLinguisticTagSchemeTokenType;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v17, "initWithTagSchemes:options:", isa, 0, swift_bridgeObjectRelease(v16).n128_f64[0]);

  v21 = objc_msgSend(v14, "text");
  objc_msgSend(v20, "setString:", v21);

  v22 = objc_msgSend(v14, "text");
  if (!v22)
  {
LABEL_19:
    __break(1u);
    return;
  }
  v23 = v22;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v26 = v25;

  v27 = String.UTF16View.count.getter(v24, v26);
  swift_bridgeObjectRelease(v26);
  v28 = swift_allocObject(&unk_1002680D0, 32, 7);
  *(_QWORD *)(v28 + 16) = &v56;
  *(_QWORD *)(v28 + 24) = v14;
  v29 = swift_allocObject(&unk_1002680F8, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_1000ABA04;
  *(_QWORD *)(v29 + 24) = v28;
  aBlock[4] = sub_1000089A8;
  v55 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AB97C;
  aBlock[3] = &unk_100268110;
  v30 = _Block_copy(aBlock);
  v31 = v55;
  v32 = (char *)v14;
  swift_retain(v29);
  swift_release(v31);
  objc_msgSend(v20, "enumerateTagsInRange:unit:scheme:options:usingBlock:", 0, v27, 0, v18, 6, v30);

  _Block_release(v30);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v29, "", 102, 241, 92, 1);
  swift_release(v29);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v34 = v56;
  swift_release(v28);
  if (v34)
  {
    HighlightTextView.removeHighlights()();
    HighlightTextView.addHighlight(to:)(v34);
    v35 = objc_msgSend(v32, "textInRange:", v34);
    if (v35)
    {
      v36 = v35;
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v39 = v38;

    }
    else
    {
      v37 = 0;
      v39 = 0;
    }
    a1 = v53;
    v41 = (uint64_t *)&v32[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
    v42 = *(_QWORD *)&v32[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8];
    *v41 = v37;
    v41[1] = v39;

    swift_bridgeObjectRelease(v42);
    v40 = *(char **)(v2 + v4);
    if (!v40)
      goto LABEL_15;
    goto LABEL_13;
  }

  a1 = v53;
  v40 = *(char **)(v2 + v4);
  if (v40)
  {
LABEL_13:
    v43 = *(char **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController);
    if (v43)
    {
      v44 = *(_QWORD *)&v40[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8];
      v45 = &v43[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
      v46 = *(_QWORD *)&v43[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text + 8];
      *(_QWORD *)v45 = *(_QWORD *)&v40[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
      *((_QWORD *)v45 + 1) = v44;
      v47 = v40;
      v48 = v43;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v46);
      sub_1000A7A90();

    }
  }
LABEL_15:
  v49 = v2
      + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translationAlternativeSelectedHandler;
  v50 = *(void (**)(uint64_t, __n128))(v2
                                               + OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translationAlternativeSelectedHandler);
  if (v50)
  {
    v51 = *(_QWORD *)(v49 + 8);
    v52 = swift_retain(v51);
    v50(a1, v52);
    sub_10002BA44((uint64_t)v50, v51);
  }
}

void sub_1000AB850(uint64_t a1)
{
  sub_1000AB40C(a1);
}

void sub_1000AB870(void *a1)
{
  sub_1000AADD0(a1);
}

void sub_1000AB8A4()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v1 = objc_msgSend(v0, "presentedViewController");
  if (v1)
  {
    v2 = v1;
    v3 = swift_allocObject(&unk_100268148, 24, 7);
    *(_QWORD *)(v3 + 16) = v0;
    v7[4] = sub_1000ABA34;
    v8 = v3;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_100075908;
    v7[3] = &unk_100268160;
    v4 = _Block_copy(v7);
    v5 = v8;
    v6 = v0;
    swift_release(v5);
    objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, v4);
    _Block_release(v4);

  }
}

void sub_1000AB97C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(void *, uint64_t, uint64_t, uint64_t);
  id v10;

  v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v10 = a2;
  v9(a2, a3, a4, a5);

}

uint64_t sub_1000AB9E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000ABA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1000D39B8(a1, a2, a3, a4, *(void ***)(v4 + 16));
}

uint64_t sub_1000ABA0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000ABA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000ABA2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000ABA34()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "dismissViewControllerAnimated:completion:", 0, 0);
}

uint64_t sub_1000ABA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028B6D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ABA94()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000ABAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000AA300(a1, a2, v2);
}

void sub_1000ABAC0()
{
  uint64_t v0;

  sub_1000AA3F0(v0);
}

uint64_t sub_1000ABAC8()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000ABAEC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A9F28(a1, v1);
}

uint64_t sub_1000ABAF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ABB18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000ABB28()
{
  _BYTE *v0;
  _OWORD *v1;
  _OWORD *v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;

  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalCardFrame];
  *v1 = 0u;
  v1[1] = 0u;
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_originalVisibleScrollRect];
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___cardCell] = 0;
  v3 = &v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translationAlternativeSelectedHandler];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_dictionaryController] = 0;
  v4 = &v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initialTouchPointInTargetView];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_initiallySetHighlightToFirstWord] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_translation] = 0;
  v5 = &v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_word];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_scrollViewAdditionalContentHeight] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController____lazy_storage___scrollView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_backgroundView] = 0;
  v6 = OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_cardBackgroundView;
  v7 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v8 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  objc_msgSend(v7, "setBackgroundColor:", v8);

  *(_QWORD *)&v0[v6] = v7;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator33DictionaryWordSelectionController_highlightedView] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/DictionaryWordSelectionController.swift", 57, 2, 76, 0);
  __break(1u);
}

void sub_1000ABCAC()
{
  id v0;
  double v1;
  double v2;
  id v3;
  double v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;

  v0 = sub_1000A90B0();
  objc_msgSend(v0, "contentSize");
  v2 = v1;

  v3 = sub_1000A90B0();
  objc_msgSend(v3, "bounds");
  v5 = v4;

  v6 = v2 - v5;
  v7 = sub_1000A90B0();
  objc_msgSend(v7, "contentInset");
  v9 = v8;

  v10 = sub_1000A90B0();
  objc_msgSend(v10, "setContentOffset:animated:", 0, 0.0, v6 + v9);

}

uint64_t (**DisambiguationResultModel.defaultGlobalAttributeProvider.unsafeMutableAddressor())()
{
  return &static DisambiguationResultModel.defaultGlobalAttributeProvider;
}

unint64_t sub_1000ABD9C(uint64_t a1, uint64_t a2)
{
  return sub_1000ABDD4(a1, a2, (uint64_t (*)(void))&static UIColor.sourceTextColor.getter, (uint64_t (*)(void))&static UIColor.targetTextColor.getter);
}

unint64_t (*static DisambiguationResultModel.defaultGlobalAttributeProvider.getter())(uint64_t a1, uint64_t a2)
{
  return sub_1000ABD9C;
}

unint64_t sub_1000ABDC0(uint64_t a1, uint64_t a2)
{
  return sub_1000ABDD4(a1, a2, (uint64_t (*)(void))&static UIColor.sourceLinkColor.getter, (uint64_t (*)(void))&static UIColor.targetLinkColor.getter);
}

unint64_t sub_1000ABDD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  NSString *v16;
  _BYTE v19[72];

  v7 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DisambiguationResultModel.TextLocation.source(_:), v7);
  LOBYTE(a1) = static DisambiguationResultModel.TextLocation.== infix(_:_:)(a1, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v11 = sub_100048C48();
  if ((a1 & 1) != 0)
    v12 = a3;
  else
    v12 = a4;
  v13 = v12();
  v14 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v14, v19);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 40) = v13;
  v16 = NSForegroundColorAttributeName;
  return sub_1001A4A88(inited);
}

id sub_1000ABEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  Class isa;
  Class v13;
  id v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v11 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v13 = Locale._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v11, "initWithSourceLocale:targetLocale:", isa, v13);

  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  return v14;
}

uint64_t sub_1000AC00C(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = (*(double (**)(void))(a2 + 96))();
  if (v2 == 0.5)
    return 0;
  if (v2 == 0.75)
    return 1;
  if (v2 == 1.0)
    return 2;
  if (v2 == 1.25)
    return 3;
  return 4;
}

id sub_1000AC080(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = (void *)(*(uint64_t (**)(void))(a2 + 48))();
  v3 = objc_msgSend(v2, "isPassthrough");

  return v3;
}

uint64_t sub_1000AC0BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  dispatch thunk of PersistedTranslation.translationResult.getter(&v16);
  v0 = *((_QWORD *)&v17 + 1);
  v1 = v18;
  sub_100023AF4(&v16, *((uint64_t *)&v17 + 1));
  v2 = dispatch thunk of TranslationResult.disambiguableResult.getter(v0, v1);
  if (!v2)
  {
    sub_100009C08(&v16);
    dispatch thunk of PersistedTranslation.translationResult.getter(v13);
    v7 = v14;
    v8 = v15;
    sub_100023AF4(v13, v14);
    v9 = dispatch thunk of TranslationResult.alternatives.getter(v7, v8);
    if (*(_QWORD *)(v9 + 16))
    {
      sub_100023AB0(v9 + 32, (uint64_t)&v16);
    }
    else
    {
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
    }
    swift_bridgeObjectRelease();
    v10 = *((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v11 = v18;
      sub_100023AF4(&v16, *((uint64_t *)&v17 + 1));
      v6 = dispatch thunk of TranslationAlternative.romanization.getter(v10, v11);
      sub_100009C08(&v16);
      sub_100009C08(v13);
      return v6;
    }
    sub_100009C08(v13);
    sub_10000A020((uint64_t)&v16, &qword_100296440);
    return 0;
  }
  v3 = (void *)v2;
  sub_100009C08(&v16);
  v4 = objc_msgSend(v3, "romanization");
  if (!v4)
  {

    return 0;
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

uint64_t sub_1000AC230()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "identifier");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id sub_1000AC29C()
{
  void *v0;

  return objc_msgSend(v0, "ttsPlaybackRateDouble");
}

id sub_1000AC2AC()
{
  void *v0;

  return objc_msgSend(v0, "setTtsPlaybackRateDouble:");
}

uint64_t sub_1000AC2C0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007D5C(&qword_10028FED0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&protocol conformance descriptor for NSObject);
  result = sub_100007D5C(&qword_10028FED8, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&protocol conformance descriptor for PersistedTranslation);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AC31C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for PersistedTranslation(0);
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AC35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v14;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE v35[24];

  v20 = (_QWORD *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization);
  *v20 = 0;
  v20[1] = 0;
  v21 = OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble) = 0x3FF0000000000000;
  v22 = v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId;
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v24 = v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_sourceLocale;
  v25 = type metadata accessor for Locale(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
  v26(v24, a3, v25);
  v26(v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_targetLocale, a4, v25);
  *(_BYTE *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_isFavorite) = a5;
  v27 = (_QWORD *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText);
  *v27 = a6;
  v27[1] = a7;
  v28 = (_QWORD *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText);
  *v28 = a8;
  v28[1] = a10;
  v29 = v20[1];
  *v20 = a11;
  v20[1] = a12;
  swift_bridgeObjectRelease(v29);
  *(double *)(v14 + v21) = a9;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_showDisambiguation) = a13;
  swift_beginAccess(v22, v35, 33, 0);
  sub_10008BFFC(a14, v22);
  swift_endAccess(v35);
  return v14;
}

void sub_1000AC514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt64 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v2 + 16);
  v14 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  v15 = swift_bridgeObjectRelease(v14);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v17 = v16(v12, v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_sourceLocale, v9, v15);
  v18 = Locale.identifier.getter(v17);
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v12, v9);
  String.hash(into:)(a1, v18, v20);
  v22 = swift_bridgeObjectRelease(v20);
  v23 = v16(v12, v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_targetLocale, v9, v22);
  v24 = Locale.identifier.getter(v23);
  v26 = v25;
  v21(v12, v9);
  String.hash(into:)(a1, v24, v26);
  swift_bridgeObjectRelease(v26);
  Hasher._combine(_:)(*(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_isFavorite));
  v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText);
  v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText + 8);
  swift_bridgeObjectRetain(v28);
  String.hash(into:)(a1, v27, v28);
  swift_bridgeObjectRelease(v28);
  v29 = (uint64_t *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText);
  v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText);
  v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText + 8);
  swift_bridgeObjectRetain(v31);
  String.hash(into:)(a1, v30, v31);
  swift_bridgeObjectRelease(v31);
  v32 = *v29;
  v33 = v29[1];
  swift_bridgeObjectRetain(v33);
  String.hash(into:)(a1, v32, v33);
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization + 8);
  if (v34)
  {
    v35 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v34);
    String.hash(into:)(a1, v35, v34);
    swift_bridgeObjectRelease(v34);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if ((*(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v36 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble);
  else
    v36 = 0;
  Hasher._combine(_:)(v36);
  Hasher._combine(_:)(*(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_showDisambiguation));
  v37 = v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId;
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId, v44, 0, 0);
  sub_10001D3C8(v37, (uint64_t)v8);
  v38 = v43;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v8, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v42;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v42, v8, v4);
    Hasher._combine(_:)(1u);
    v40 = sub_100007D5C(&qword_100290100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v40);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v4);
  }
}

uint64_t sub_1000AC8A0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t);

  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_sourceLocale];
  v2 = type metadata accessor for Locale(0);
  v3 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(&v0[OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_targetLocale], v2);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText
                                         + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText
                                         + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization + 8]);
  sub_10000A020((uint64_t)&v0[OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId], (uint64_t *)&unk_10028F1B0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000AC96C()
{
  return type metadata accessor for TestableTranslation(0);
}

uint64_t type metadata accessor for TestableTranslation(uint64_t a1)
{
  uint64_t result;

  result = qword_10028FF08;
  if (!qword_10028FF08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TestableTranslation);
  return result;
}

void sub_1000AC9B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  uint64_t v15;

  v6 = &unk_1001EC6A8;
  v2 = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    v9 = &unk_1001EC6C0;
    v10 = &unk_1001EC6A8;
    v11 = &unk_1001EC6A8;
    v12 = &unk_1001EC6D8;
    v13 = (char *)&value witness table for Builtin.Int64 + 64;
    v14 = &unk_1001EC6C0;
    sub_1000ACA6C(319);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 10, &v6, a1 + 80);
    }
  }
}

void sub_1000ACA6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028F698)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028F698);
  }
}

uint64_t sub_1000ACAC0()
{
  return sub_100007D5C(&qword_1002900D8, type metadata accessor for TestableTranslation, (uint64_t)&unk_1001EC730);
}

uint64_t sub_1000ACAEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_1000ACB18@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACB30(&OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_sourceLocale, a1);
}

uint64_t sub_1000ACB24@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACB30(&OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_targetLocale, a1);
}

uint64_t sub_1000ACB30@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000ACB70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText
                                     + 8));
  return v1;
}

uint64_t sub_1000ACBA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText
                                     + 8));
  return v1;
}

double sub_1000ACBE0()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble);
}

void sub_1000ACBF0(double a1)
{
  uint64_t v1;

  *(double *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble) = a1;
}

uint64_t sub_1000ACC00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10001D3C8(v3, a1);
}

uint64_t sub_1000ACC50@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for TestableTranslation(0);
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000ACC90(uint64_t *a1, uint64_t *a2)
{
  return sub_1000ACD94(*a1, *a2);
}

Swift::Int sub_1000ACC9C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000AC514((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_1000ACCDC(uint64_t a1)
{
  sub_1000AC514(a1);
}

Swift::Int sub_1000ACCFC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000AC514((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1000ACD38(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007D5C(&qword_1002900E0, type metadata accessor for TestableTranslation, (uint64_t)&unk_1001EC6F0);
  result = sub_100007D5C(&qword_1002900E8, type metadata accessor for TestableTranslation, (uint64_t)&unk_1001EC758);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000ACD94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char v86[24];
  char v87[24];

  v82 = type metadata accessor for UUID(0);
  v80 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v76 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100006DF4(&qword_1002900F0);
  __chkstk_darwin(v78);
  v81 = (uint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  v7 = __chkstk_darwin(v6);
  v77 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v79 = (uint64_t)&v76 - v9;
  v10 = type metadata accessor for Locale(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v84 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v76 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v76 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v76 - v20;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 24);
  v85 = a1;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = *(_QWORD *)(a2 + 24);
  if (v22 == v24 && v23 == v25
    || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v24, v25, 0) & 1) != 0))
  {
    v27 = a2;
    v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v29 = v28(v21, v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_sourceLocale, v10);
    v30 = Locale.identifier.getter(v29);
    v32 = v31;
    v33 = *(void (**)(char *, uint64_t))(v11 + 8);
    v33(v21, v10);
    v83 = v27;
    v34 = v28(v19, v27 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_sourceLocale, v10);
    v35 = Locale.identifier.getter(v34);
    v37 = v36;
    v33(v19, v10);
    if (v30 != v35)
      goto LABEL_7;
    if (v32 == v37)
    {
      swift_bridgeObjectRelease_n(v32, 2);
      v38 = v83;
    }
    else
    {
LABEL_7:
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v35, v37, 0);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v32);
      v26 = 0;
      v38 = v83;
      if ((v39 & 1) == 0)
        return v26 & 1;
    }
    v40 = v28(v16, v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_targetLocale, v10);
    v41 = Locale.identifier.getter(v40);
    v43 = v42;
    v33(v16, v10);
    v44 = v84;
    v45 = v28(v84, v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_targetLocale, v10);
    v46 = Locale.identifier.getter(v45);
    v48 = v47;
    v33(v44, v10);
    if (v41 != v46)
      goto LABEL_11;
    if (v43 == v48)
    {
      swift_bridgeObjectRelease_n(v43, 2);
    }
    else
    {
LABEL_11:
      v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v46, v48, 0);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v43);
      v26 = 0;
      if ((v49 & 1) == 0)
        return v26 & 1;
    }
    if (*(unsigned __int8 *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_isFavorite) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_isFavorite))
    {
LABEL_13:
      v26 = 0;
      return v26 & 1;
    }
    if ((v51 = *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText),
          v52 = *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText + 8),
          v53 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText),
          v54 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displaySourceText + 8),
          v51 == v53)
      && v52 == v54
      || (v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, v53, v54, 0) & 1) != 0))
    {
      if ((v55 = *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText + 8),
            v56 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText),
            v57 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText + 8),
            *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText) == v56)
        && v55 == v57
        || (v26 = 0,
            (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_displayTargetText), v55, v56, v57, 0) & 1) != 0))
      {
        v58 = (_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization);
        v59 = *(_QWORD *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization + 8);
        v60 = (_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization);
        v61 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_romanization + 8);
        if (v59)
        {
          if (!v61)
            goto LABEL_13;
          if (*v58 != *v60 || v59 != v61)
          {
            v26 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v58, v59, *v60, v61, 0) & 1) == 0)
              return v26 & 1;
          }
        }
        else if (v61)
        {
          goto LABEL_13;
        }
        if (*(double *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble) != *(double *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_ttsPlaybackRateDouble)
          || *(unsigned __int8 *)(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_showDisambiguation) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_showDisambiguation))
        {
          goto LABEL_13;
        }
        v62 = v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId;
        swift_beginAccess(v85 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId, v87, 0, 0);
        v63 = v79;
        sub_10001D3C8(v62, v79);
        v64 = v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId;
        swift_beginAccess(v38 + OBJC_IVAR____TtC17SequoiaTranslator19TestableTranslation_selfLoggingInvocationId, v86, 0, 0);
        v65 = v81;
        v66 = v81 + *(int *)(v78 + 48);
        sub_10001D3C8(v63, v81);
        sub_10001D3C8(v64, v66);
        v67 = v80;
        v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
        v69 = v82;
        if (v68(v65, 1, v82) == 1)
        {
          sub_10000A020(v63, (uint64_t *)&unk_10028F1B0);
          v70 = v68(v66, 1, v69);
          if (v70 == 1)
            v71 = (uint64_t *)&unk_10028F1B0;
          else
            v71 = &qword_1002900F0;
          if (v70 == 1)
            v26 = -1;
          else
            v26 = 0;
        }
        else
        {
          v72 = v77;
          sub_10001D3C8(v65, v77);
          if (v68(v66, 1, v69) == 1)
          {
            sub_10000A020(v63, (uint64_t *)&unk_10028F1B0);
            v26 = 0;
            v71 = &qword_1002900F0;
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v72, v69);
          }
          else
          {
            v73 = v76;
            (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v76, v66, v69);
            v74 = sub_100007D5C((unint64_t *)&qword_1002900F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v26 = dispatch thunk of static Equatable.== infix(_:_:)(v72, v73, v69, v74);
            v75 = *(void (**)(char *, uint64_t))(v67 + 8);
            v75(v73, v69);
            v71 = (uint64_t *)&unk_10028F1B0;
            sub_10000A020(v63, (uint64_t *)&unk_10028F1B0);
            v75((char *)v72, v69);
          }
        }
        sub_10000A020(v65, v71);
      }
    }
  }
  return v26 & 1;
}

ValueMetadata *type metadata accessor for DownloadLanguagesButton()
{
  return &type metadata for DownloadLanguagesButton;
}

uint64_t sub_1000AD3E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100212C10, 1);
}

uint64_t sub_1000AD3F4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = type metadata accessor for MainActor(0);
  v5 = static MainActor.shared.getter(v4);
  v6 = swift_allocObject(&unk_1002684A8, 32, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = &protocol witness table for MainActor;
  v7 = sub_100049F28((uint64_t)v2, (uint64_t)&unk_100290110, v6);
  return swift_release(v7);
}

uint64_t sub_1000AD4B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = a1;
  v2 = type metadata accessor for URL(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000AD54C, v5, v6);
}

uint64_t sub_1000AD54C()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  Class isa;
  unsigned __int8 v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 48));
  v1 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v1)
  {
    v2 = v1;
    v4 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 24);
    static URL.downloadLanguagesURL.getter();
    URL._bridgeToObjectiveC()(v6);
    v8 = v7;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v9 = sub_1001A4954((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v11 = objc_msgSend(v2, "openSensitiveURL:withOptions:", v8, isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  }
  else
  {
    v11 = 2;
  }
  v12 = *(_QWORD *)(v0 + 40);
  **(_BYTE **)(v0 + 16) = v11;
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AD658()
{
  uint64_t v0;

  v0 = LocalizedStringKey.init(stringLiteral:)(0x43495645445F4E4FLL, 0xEE004B4E494C5F45);
  return Label<>.init(_:systemImage:)(v0);
}

uint64_t sub_1000AD6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_100006DF4(&qword_10028AD50);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028AB30);
  v5 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_1000AD3F4, 0, sub_1000AD658, 0, v4, v5);
  v6 = sub_100012334(&qword_10028AD58, &qword_10028AD50, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(0xD000000000000015, 0x80000001001FBCB0, v0, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000AD7CC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AD7F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10029010C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001D380;
  return sub_1000AD4B8(a1);
}

uint64_t sub_1000AD858(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  void *v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  void (*v51)(_BYTE *, _QWORD);
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD);
  uint64_t v54;
  uint64_t (*v55)(_BYTE *, _QWORD);
  _QWORD v57[2];
  _BYTE v58[32];
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v57 - v7;
  v9 = objc_msgSend(a1, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v9);

  static Locale.current.getter(v10);
  v11 = Locale.sqDisplayName(context:in:)(3, v6);
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  v14(v8, v2);
  v15 = 0x45474155474E414CLL;
  if (v13)
    v16 = v11;
  else
    v16 = 0x45474155474E414CLL;
  if (v13)
    v17 = v13;
  else
    v17 = 0xE800000000000000;
  v18 = objc_msgSend(a1, "targetLocale", v17, v16);
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v18);

  static Locale.current.getter(v19);
  v20 = Locale.sqDisplayName(context:in:)(3, v6);
  v22 = v21;
  v14(v6, v2);
  v23 = ((uint64_t (*)(char *, uint64_t))v14)(v8, v2);
  if (v22)
    v15 = v20;
  else
    v22 = 0xE800000000000000;
  static UIContentUnavailableConfiguration.empty()(v23);
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v24);

  UIContentUnavailableConfiguration.image.setter(v25);
  v26 = (void *)objc_opt_self(NSBundle);
  v27 = objc_msgSend(v26, "mainBundle");
  v28._countAndFlagsBits = 0xD000000000000010;
  v59._object = (void *)0xE000000000000000;
  v28._object = (void *)0x80000001001FBCF0;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v59._countAndFlagsBits = 0;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v59);

  UIContentUnavailableConfiguration.text.setter(v30._countAndFlagsBits, v30._object);
  v31 = objc_msgSend(v26, "mainBundle");
  v60._object = (void *)0xE000000000000000;
  v32._object = (void *)0x80000001001FBD10;
  v32._countAndFlagsBits = 0xD000000000000014;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v60._countAndFlagsBits = 0;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v60);

  v35 = sub_100006DF4(&qword_10028AA70);
  v36 = swift_allocObject(v35, 112, 7);
  *(_OWORD *)(v36 + 16) = xmmword_1001E4D60;
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  v37 = sub_10001244C();
  v38 = v57[0];
  *(_QWORD *)(v36 + 32) = v57[1];
  *(_QWORD *)(v36 + 40) = v38;
  *(_QWORD *)(v36 + 96) = &type metadata for String;
  *(_QWORD *)(v36 + 104) = v37;
  *(_QWORD *)(v36 + 64) = v37;
  *(_QWORD *)(v36 + 72) = v15;
  *(_QWORD *)(v36 + 80) = v22;
  v39 = String.init(format:_:)(v34._countAndFlagsBits, v34._object, v36);
  v41 = v40;
  swift_bridgeObjectRelease(v34._object);
  UIContentUnavailableConfiguration.secondaryText.setter(v39, v41);
  v42 = String._bridgeToObjectiveC()();
  v43 = (id)SFLocalizableWAPIStringKeyForKey();

  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  v47 = objc_msgSend(v26, "mainBundle");
  v61._object = (void *)0xE000000000000000;
  v48._countAndFlagsBits = v44;
  v48._object = v46;
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  v61._countAndFlagsBits = 0;
  v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)v47, v49, v61);
  swift_bridgeObjectRelease(v46);

  v51 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.button.modify(v58);
  UIButton.Configuration.title.setter(v50._countAndFlagsBits, v50._object);
  v51(v58, 0);
  sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  v52 = static UIColor.translateAccentColor.getter();
  v53 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.button.modify(v58);
  UIButton.Configuration.baseForegroundColor.setter(v52);
  v53(v58, 0);
  UIContentUnavailableConfiguration.directionalLayoutMargins.setter(0.0, 90.0, 0.0, 90.0);
  sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
  v54 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000ADEFC, 0);
  v55 = (uint64_t (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.buttonProperties.modify(v58);
  UIContentUnavailableConfiguration.ButtonProperties.primaryAction.setter(v54);
  return v55(v58, 0);
}

void sub_1000ADD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  id v8;
  void *v9;
  NSURL *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  Class isa;
  uint64_t KeyPath;
  uint64_t v16;
  _QWORD v18[5];

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[3] = &type metadata for TranslateFeatures;
  v18[4] = sub_100009BC4();
  LOBYTE(v18[0]) = 2;
  v7 = isFeatureEnabled(_:)(v18);
  sub_100009C08(v18);
  if ((v7 & 1) != 0)
  {
    v8 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
    if (v8)
    {
      v9 = v8;
      static URL.downloadLanguagesURL.getter();
      URL._bridgeToObjectiveC()(v10);
      v12 = v11;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v13 = sub_1001A4954((uint64_t)_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v9, "openSensitiveURL:withOptions:", v12, isa, swift_bridgeObjectRelease(v13).n128_f64[0]);

    }
  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_1001EC818);
    v16 = swift_getKeyPath(&unk_1001EC840);
    LOBYTE(v18[0]) = 1;
    swift_retain(a2);
    static Published.subscript.setter(v18, a2, KeyPath, v16);
  }
}

void sub_1000ADEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  Class isa;
  uint64_t v11;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v4)
  {
    v5 = v4;
    static URL.topLevelSettingsURL.getter();
    URL._bridgeToObjectiveC()(v6);
    v8 = v7;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v9 = sub_1001A4954((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v5, "openSensitiveURL:withOptions:", v8, isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  }
}

uint64_t sub_1000AE008()
{
  NSString v0;
  id v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v12;
  Swift::String v13;

  static UIContentUnavailableConfiguration.empty()();
  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  UIContentUnavailableConfiguration.image.setter(v1);
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v12._object = (void *)0x80000001001FBDE0;
  v4._countAndFlagsBits = 0x524F5641465F4F4ELL;
  v4._object = (void *)0xEC00000053455449;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v12._countAndFlagsBits = 0xD000000000000011;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v12);

  UIContentUnavailableConfiguration.text.setter(v6._countAndFlagsBits, v6._object);
  v7 = objc_msgSend(v2, "mainBundle");
  v13._countAndFlagsBits = 0xD000000000000013;
  v8._countAndFlagsBits = 0xD000000000000014;
  v13._object = (void *)0x80000001001FBE20;
  v8._object = (void *)0x80000001001FBE00;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v13);

  UIContentUnavailableConfiguration.secondaryText.setter(v10._countAndFlagsBits, v10._object);
  return UIContentUnavailableConfiguration.directionalLayoutMargins.setter(0.0, 90.0, 0.0, 90.0);
}

uint64_t sub_1000AE1C4(uint64_t a1)
{
  NSString v1;
  id v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD);
  _BYTE v27[32];
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;

  static UIContentUnavailableConfiguration.empty()(a1);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v1);

  UIContentUnavailableConfiguration.image.setter(v2);
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v5._countAndFlagsBits = 0xD000000000000016;
  v29._object = (void *)0xE000000000000000;
  v5._object = (void *)0x80000001001FBD30;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v29._countAndFlagsBits = 0;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v29);

  UIContentUnavailableConfiguration.text.setter(v7._countAndFlagsBits, v7._object);
  v8 = objc_msgSend(v3, "mainBundle");
  v9._countAndFlagsBits = 0xD00000000000001DLL;
  v30._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001001FBD50;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v30._countAndFlagsBits = 0;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v30);

  v28 = v11;
  v12._countAndFlagsBits = 10;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = objc_msgSend(v3, "mainBundle");
  v14._countAndFlagsBits = 0xD000000000000031;
  v31._object = (void *)0xE000000000000000;
  v14._object = (void *)0x80000001001FBD70;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v31);

  String.append(_:)(v16);
  swift_bridgeObjectRelease(v16._object);
  v17 = objc_msgSend(v3, "mainBundle", UIContentUnavailableConfiguration.secondaryText.setter(v11._countAndFlagsBits, v11._object).n128_f64[0]);
  v32._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0x45535F4F545F4F47;
  v18._object = (void *)0xEE0053474E495454;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v32);

  v21 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.button.modify(v27);
  UIButton.Configuration.title.setter(v20._countAndFlagsBits, v20._object);
  v21(v27, 0);
  sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  v22 = static UIColor.translateAccentColor.getter();
  v23 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.button.modify(v27);
  UIButton.Configuration.baseForegroundColor.setter(v22);
  v23(v27, 0);
  sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
  v24 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000AE548, 0);
  v25 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.buttonProperties.modify(v27);
  UIContentUnavailableConfiguration.ButtonProperties.primaryAction.setter(v24);
  v25(v27, 0);
  return UIContentUnavailableConfiguration.directionalLayoutMargins.setter(0.0, 90.0, 0.0, 90.0);
}

void sub_1000AE548()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSURL *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  Class isa;
  uint64_t v12;

  v0 = sub_100006DF4(&qword_10028BB80);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v3)
  {
    v4 = v3;
    URL.init(string:)(0xD000000000000028, 0x80000001001FBDB0);
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    v8 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) != 1)
    {
      URL._bridgeToObjectiveC()(v7);
      v8 = v9;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v2, v5);
    }
    v10 = sub_1001A4954((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "openSensitiveURL:withOptions:", v8, isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

  }
}

unint64_t sub_1000AE6A8()
{
  unint64_t result;

  result = qword_100290118;
  if (!qword_100290118)
  {
    result = swift_getWitnessTable(&unk_1001EC8A4, &type metadata for GenderTipManagerKey);
    atomic_store(result, (unint64_t *)&qword_100290118);
  }
  return result;
}

uint64_t sub_1000AE6EC(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  char v7;

  v7 = a1 & 1;
  v5 = sub_1000AEB88();
  return dispatch thunk of UIMutableTraits.subscript.setter(&v7, &type metadata for SequoiaAppLayoutTrait, &type metadata for SequoiaAppLayoutTrait, v5, a2, a3);
}

uint64_t sub_1000AE748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v7;

  v7 = a1;
  v5 = sub_1000AEBCC();
  return dispatch thunk of UIMutableTraits.subscript.setter(&v7, &type metadata for GenderTipManagerTrait, &type metadata for GenderTipManagerTrait, v5, a2, a3);
}

uint64_t sub_1000AE7A0()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_1000AEC10();
  EnvironmentValues.subscript.getter(&var1, &type metadata for SequoiaAppLayoutKey, &type metadata for SequoiaAppLayoutKey, v0);
  return var1;
}

void sub_1000AE7D8(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000AE7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1000AEB1C();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

_QWORD *sub_1000AE844@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000AEB88();
  result = UITraitCollection.subscript.getter(&v4, &type metadata for SequoiaAppLayoutTrait, &type metadata for SequoiaAppLayoutTrait, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000AE890(uint64_t a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  sub_1000AEB60(a1, v3);
  return sub_1000AE6EC(v2, v3, v4);
}

uint64_t sub_1000AE8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v0 = type metadata accessor for GenderTipManager(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v6[0] = 0;
  v6[1] = 0;
  v2 = sub_100006DF4(&qword_10028D160);
  Published.init(initialValue:)(v6, v2);
  v3 = v1 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager_mostRecentCreationDate;
  v4 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  qword_1002AA250 = v1;
  return result;
}

uint64_t sub_1000AE974@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000AE9F4(&qword_10028A3D0, &qword_1002AA250, (uint64_t)sub_1000AE8D8, a1);
}

double sub_1000AE990()
{
  double result;

  if (qword_10028A3D0 != -1)
    swift_once(&qword_10028A3D0, sub_1000AE8D8);
  qword_1002AA258 = qword_1002AA250;
  *(_QWORD *)&result = swift_retain(qword_1002AA250).n128_u64[0];
  return result;
}

uint64_t sub_1000AE9D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000AE9F4(&qword_10028A3D8, &qword_1002AA258, (uint64_t)sub_1000AE990, a1);
}

uint64_t sub_1000AE9F4@<X0>(_QWORD *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = *a2;
  *a4 = *a2;
  return swift_retain(v6);
}

_QWORD *sub_1000AEA3C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000AEBCC();
  result = UITraitCollection.subscript.getter(&v4, &type metadata for GenderTipManagerTrait, &type metadata for GenderTipManagerTrait, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000AEA88(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  sub_1000AEB60(a1, v3);
  swift_retain(v2);
  return sub_1000AE748(v5, v3, v4);
}

unint64_t sub_1000AEAD8()
{
  unint64_t result;

  result = qword_100290120;
  if (!qword_100290120)
  {
    result = swift_getWitnessTable(&unk_1001EC914, &type metadata for SequoiaAppLayoutKey);
    atomic_store(result, (unint64_t *)&qword_100290120);
  }
  return result;
}

unint64_t sub_1000AEB1C()
{
  unint64_t result;

  result = qword_100290128;
  if (!qword_100290128)
  {
    result = swift_getWitnessTable(&unk_1001ECAD4, &type metadata for SequoiaAppNavigationStyle);
    atomic_store(result, (unint64_t *)&qword_100290128);
  }
  return result;
}

uint64_t sub_1000AEB60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1000AEB88()
{
  unint64_t result;

  result = qword_100295570;
  if (!qword_100295570)
  {
    result = swift_getWitnessTable(&unk_1001ECA7C, &type metadata for SequoiaAppLayoutTrait);
    atomic_store(result, (unint64_t *)&qword_100295570);
  }
  return result;
}

unint64_t sub_1000AEBCC()
{
  unint64_t result;

  result = qword_1002986A0;
  if (!qword_1002986A0)
  {
    result = swift_getWitnessTable(&unk_1001ECA24, &type metadata for GenderTipManagerTrait);
    atomic_store(result, (unint64_t *)&qword_1002986A0);
  }
  return result;
}

unint64_t sub_1000AEC10()
{
  unint64_t result;

  result = qword_100290130;
  if (!qword_100290130)
  {
    result = swift_getWitnessTable(&unk_1001EC8DC, &type metadata for SequoiaAppLayoutKey);
    atomic_store(result, (unint64_t *)&qword_100290130);
  }
  return result;
}

ValueMetadata *type metadata accessor for GenderTipManagerTrait()
{
  return &type metadata for GenderTipManagerTrait;
}

ValueMetadata *type metadata accessor for SequoiaAppLayoutTrait()
{
  return &type metadata for SequoiaAppLayoutTrait;
}

uint64_t storeEnumTagSinglePayload for SequoiaAppNavigationStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000AECC0 + 4 * byte_1001EC865[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000AECF4 + 4 * byte_1001EC860[v4]))();
}

uint64_t sub_1000AECF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AECFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AED04);
  return result;
}

uint64_t sub_1000AED10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AED18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000AED1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AED24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SequoiaAppNavigationStyle()
{
  return &type metadata for SequoiaAppNavigationStyle;
}

ValueMetadata *type metadata accessor for SequoiaAppLayoutKey()
{
  return &type metadata for SequoiaAppLayoutKey;
}

ValueMetadata *type metadata accessor for GenderTipManagerKey()
{
  return &type metadata for GenderTipManagerKey;
}

uint64_t destroy for ErrorAlert(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for ErrorAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for ErrorAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

__n128 initializeWithTake for ErrorAlert(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ErrorAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ErrorAlert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorAlert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrorAlert()
{
  return &type metadata for ErrorAlert;
}

uint64_t sub_1000AEFA8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100212CE0, 1);
}

double sub_1000AEFB8()
{
  __int16 *v0;
  __int16 *v1;
  char v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double result;
  _BYTE v15[16];
  __int16 *v16;
  __int128 v17;
  char v18;
  _QWORD v19[2];
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = *((_BYTE *)v0 + 2);
  v3 = *v0;
  v21 = sub_100008D08(*v0);
  v22 = v4;
  v17 = *(_OWORD *)(v0 + 4);
  v18 = *((_BYTE *)v0 + 24);
  v5 = sub_100006DF4(&qword_100296C60);
  Binding.projectedValue.getter(v19, v5);
  v6 = v19[0];
  v7 = v19[1];
  v8 = v20;
  BYTE2(v19[0]) = v2;
  LOWORD(v19[0]) = v3;
  v16 = v1;
  v9 = sub_100006DF4(&qword_100290138);
  v10 = sub_100006DF4(&qword_10028AEB8);
  v11 = sub_100012334(&qword_100290140, &qword_100290138, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v12 = sub_10000B030();
  v13 = sub_100012334(&qword_10028AEC0, &qword_10028AEB8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:)(&v21, v6, v7, v8, v19, sub_1000AF26C, v15, sub_1000AF1DC, 0, v9, &type metadata for String, v10, &type metadata for Text, &type metadata for AlertModel, v11, v12, v13, &protocol witness table for Text);
  swift_release(v7);
  swift_release(v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v22).n128_u64[0];
  return result;
}

uint64_t sub_1000AF138(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;

  v3 = LocalizedStringKey.init(stringLiteral:)(19279, 0xE200000000000000);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (_OWORD *)swift_allocObject(&unk_100268760, 64, 7);
  v11 = *(_OWORD *)(a2 + 16);
  v10[1] = *(_OWORD *)a2;
  v10[2] = v11;
  v10[3] = *(_OWORD *)(a2 + 32);
  sub_1000AF2C8((_QWORD *)a2);
  return Button<>.init(_:action:)(v3, v5, v7 & 1, v9, sub_1000AF2A8, v10);
}

uint64_t sub_1000AF1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = sub_100008D08(*(_BYTE *)(a1 + 1));
  v9[1] = v3;
  v4 = sub_10000B030();
  result = Text.init<A>(_:)(v9, &type metadata for String, v4);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7 & 1;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

double sub_1000AF234()
{
  return sub_1000AEFB8();
}

uint64_t sub_1000AF26C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AF138(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000AF274()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000AF2A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

_QWORD *sub_1000AF2C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[5];
  swift_retain(a1[1]);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_1000AF310()
{
  _QWORD v1[9];

  v1[0] = sub_1000070BC(&qword_100290138);
  v1[1] = &type metadata for String;
  v1[2] = sub_1000070BC(&qword_10028AEB8);
  v1[3] = &type metadata for Text;
  v1[4] = &type metadata for AlertModel;
  v1[5] = sub_100012334(&qword_100290140, &qword_100290138, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v1[6] = sub_10000B030();
  v1[7] = sub_100012334(&qword_10028AEC0, &qword_10028AEB8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v1[8] = &protocol witness table for Text;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:)>>, 1);
}

uint64_t sub_1000AF3EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D5C9C(*a1, *a2);
}

Swift::Int sub_1000AF3F8()
{
  char *v0;

  return sub_1000CE050(*v0);
}

uint64_t sub_1000AF400(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xE90000000000006BLL;
  v3 = 0x726F7774654E6F6ELL;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x80000001001F7D40;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0xD000000000000013;
  if (*v1)
    v5 = v2;
  else
    v5 = 0x80000001001F7D20;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000AF480(uint64_t a1)
{
  char *v1;

  return sub_1000CE800(a1, *v1);
}

unint64_t sub_1000AF488@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000B12C8(*a1);
  *a2 = result;
  return result;
}

void sub_1000AF4B4(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000013;
  v3 = 0xE90000000000006BLL;
  v4 = 0x726F7774654E6F6ELL;
  if (*v1 != 1)
  {
    v4 = 0xD000000000000014;
    v3 = 0x80000001001F7D40;
  }
  if (*v1)
  {
    v2 = v4;
    v5 = v3;
  }
  else
  {
    v5 = 0x80000001001F7D20;
  }
  *a1 = v2;
  a1[1] = v5;
}

uint64_t sub_1000AF518()
{
  return sub_10001DA94((uint64_t)&unk_1001ECD08, (uint64_t)&unk_1001ECD30);
}

uint64_t sub_1000AF52C()
{
  return sub_10001DA94((uint64_t)&unk_1001ECC78, (uint64_t)&unk_1001ECCA0);
}

uint64_t sub_1000AF540()
{
  return sub_10001DA94((uint64_t)&unk_1001ECCC0, (uint64_t)&unk_1001ECCE8);
}

uint64_t sub_1000AF554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t KeyPath;
  uint64_t v49;
  void *v50;
  id v51;
  NSString v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  void *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  id v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119[3];
  id v120[2];

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v117 = *(_QWORD *)(v2 - 8);
  v118 = v2;
  __chkstk_darwin(v2);
  v116 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v115);
  v114 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v113 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028E9D0);
  v8 = *(_QWORD *)(v7 - 8);
  v111 = v7;
  v112 = v8;
  __chkstk_darwin(v7);
  v110 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v10);
  v105 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v13 = *(_QWORD *)(v12 - 8);
  v106 = v12;
  v107 = v13;
  __chkstk_darwin(v12);
  v97 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_10028E9B8);
  v16 = *(_QWORD *)(v15 - 8);
  v108 = v15;
  v109 = v16;
  __chkstk_darwin(v15);
  v104 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_10028E9C8);
  __chkstk_darwin(v18);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100006DF4(&qword_10028E9C0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v92 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AirplaneModeConfiguration(0)), "init");
  v29 = v1 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__airplaneModeEnabled;
  LOBYTE(v119[0]) = 0;
  Published.init(initialValue:)(v119, &type metadata for Bool);
  v30 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  v30(v29, v28, v25);
  v31 = v1 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__onDeviceModeEnabled;
  LOBYTE(v119[0]) = 0;
  Published.init(initialValue:)(v119, &type metadata for Bool);
  v30(v31, v28, v25);
  v32 = v1 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__noNetwork;
  LOBYTE(v119[0]) = 0;
  Published.init(initialValue:)(v119, &type metadata for Bool);
  v30(v32, v28, v25);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_subscriptions) = _swiftEmptyArrayStorage;
  v33 = OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_networkMonitor;
  v34 = type metadata accessor for NWPathMonitor(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_QWORD *)(v1 + v33) = NWPathMonitor.init()();
  v35 = *(id *)(v1 + 16);
  v36 = (void *)dispatch thunk of AirplaneModeConfiguration.isEnabled.getter();

  v119[0] = v36;
  v103 = (id)objc_opt_self(NSRunLoop);
  v120[0] = objc_msgSend(v103, "mainRunLoop");
  v102 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56);
  v98 = v20;
  v101(v20, 1, 1, v102);
  v37 = sub_100006DF4(&qword_10028EA30);
  v38 = sub_10000A05C(0, &qword_10028EA10, NSRunLoop_ptr);
  v99 = v38;
  v39 = sub_100012334(&qword_10028EA38, &qword_10028EA30, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v100 = sub_100065E60(&qword_10028EA18, &qword_10028EA10, NSRunLoop_ptr, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  Publisher.receive<A>(on:options:)(v120, v20, v37, v38, v39, v100);
  sub_10000A020((uint64_t)v20, &qword_10028E9C8);

  swift_release(v119[0]);
  v40 = swift_allocObject(&unk_100268858, 24, 7);
  swift_weakInit(v40 + 16, v1);
  v41 = sub_100012334(&qword_10028EA40, &qword_10028E9C0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v42 = Publisher<>.sink(receiveValue:)(sub_1000B1334, v40, v21, v41);
  v43 = swift_release(v40);
  (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v24, v21, v43);
  v44 = v1 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_subscriptions;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_subscriptions, v119, 33, 0);
  v45 = sub_100006DF4((uint64_t *)&unk_100295560);
  v95 = v45;
  v94 = sub_100012334(&qword_10028EA28, (uint64_t *)&unk_100295560, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v44, v45, v94);
  swift_endAccess(v119);
  swift_release(v42);
  v46 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v47 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v46);
  LOBYTE(v24) = NSUserDefaults.onDeviceOnly.getter();

  KeyPath = swift_getKeyPath(&unk_1001ECC78);
  v49 = swift_getKeyPath(&unk_1001ECCA0);
  LOBYTE(v119[0]) = v24 & 1;
  swift_retain(v1);
  static Published.subscript.setter(v119, v1, KeyPath, v49);
  v50 = (void *)objc_opt_self(NSNotificationCenter);
  v51 = objc_msgSend(v50, "defaultCenter");
  v52 = String._bridgeToObjectiveC()();
  v53 = v97;
  NSNotificationCenter.publisher(for:object:)(v52, 0);

  v54 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v96 = v54;
  v119[0] = (id)static OS_dispatch_queue.main.getter(v54);
  v55 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v56 = (uint64_t)v105;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v105, 1, 1, v55);
  v57 = sub_100007D5C(&qword_100296C40, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v93 = v57;
  v58 = sub_100065E60((unint64_t *)&qword_100295550, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v59 = v104;
  v60 = v106;
  Publisher.receive<A>(on:options:)(v119, v56, v106, v54, v57, v58);
  sub_10000A020(v56, &qword_100296BE0);

  v61 = *(void (**)(char *, uint64_t))(v107 + 8);
  v62 = v53;
  v61(v53, v60);
  v63 = sub_100012334(&qword_10028EA48, &qword_10028E9B8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v1);
  v64 = v108;
  v65 = v63;
  v66 = v59;
  v67 = Publisher<>.sink(receiveValue:)(sub_1000B1384, v1, v108, v65);
  v68 = swift_release(v1);
  (*(void (**)(char *, uint64_t, __n128))(v109 + 8))(v66, v64, v68);
  v69 = v44;
  swift_beginAccess(v44, v119, 33, 0);
  v70 = v44;
  v71 = v95;
  v72 = v94;
  AnyCancellable.store<A>(in:)(v70, v95, v94);
  swift_endAccess(v119);
  v73 = objc_msgSend(v50, "defaultCenter", swift_release(v67).n128_f64[0]);
  NSNotificationCenter.publisher(for:object:)(UIApplicationWillEnterForegroundNotification, 0);

  v119[0] = objc_msgSend(v103, "mainRunLoop");
  v74 = (uint64_t)v98;
  v101(v98, 1, 1, v102);
  v75 = v110;
  Publisher.receive<A>(on:options:)(v119, v74, v60, v99, v93, v100);
  sub_10000A020(v74, &qword_10028E9C8);

  v61(v62, v60);
  v76 = sub_100012334(&qword_10028EA20, &qword_10028E9D0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v1);
  v77 = v111;
  v78 = Publisher<>.sink(receiveValue:)(sub_1000B1384, v1, v111, v76);
  v79 = swift_release(v1);
  (*(void (**)(char *, uint64_t, __n128))(v112 + 8))(v75, v77, v79);
  swift_beginAccess(v69, v119, 33, 0);
  AnyCancellable.store<A>(in:)(v69, v71, v72);
  swift_endAccess(v119);
  swift_release(v78);
  v80 = OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_networkMonitor;
  v81 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_networkMonitor);
  swift_retain(v81);
  v82 = v113;
  static DispatchQoS.unspecified.getter(v83);
  v119[0] = _swiftEmptyArrayStorage;
  v84 = sub_100007D5C(&qword_10028F258, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v85 = sub_100006DF4(&qword_10028F260);
  v86 = sub_100012334(&qword_10028F268, &qword_10028F260, (uint64_t)&protocol conformance descriptor for [A]);
  v87 = v114;
  dispatch thunk of SetAlgebra.init<A>(_:)(v119, v85, v86, v115, v84);
  v88 = v116;
  (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v116, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v118);
  v89 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x4D6B726F7774654ELL, 0xEE00726F74696E6FLL, v82, v87, v88, 0);
  NWPathMonitor.start(queue:)();
  swift_release(v81);

  v90 = *(_QWORD *)(v1 + v80);
  swift_retain(v1);
  swift_retain(v90);
  sub_100016244((uint64_t)sub_1000B139C, v1);
  NWPathMonitor.pathUpdateHandler.setter(sub_1000B139C, v1);
  swift_release(v90);
  swift_release(v1);
  return v1;
}

uint64_t sub_1000B006C(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_1001ECD08);
    v7 = swift_getKeyPath(&unk_1001ECD30);
    v8 = v2;
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

uint64_t sub_1000B00F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  v3 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v4 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v3);
  v5 = NSUserDefaults.onDeviceOnly.getter();

  KeyPath = swift_getKeyPath(&unk_1001ECC78);
  v7 = swift_getKeyPath(&unk_1001ECCA0);
  v9 = v5 & 1;
  swift_retain(a2);
  return static Published.subscript.setter(&v9, a2, KeyPath, v7);
}

uint64_t sub_1000B0194(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v27 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_100268880, v17 + 8, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v16, v12, v9);
  v19 = v27;
  *(_QWORD *)(v18 + v17) = v27;
  aBlock[4] = sub_1000B1418;
  v32 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100268898;
  v20 = _Block_copy(aBlock);
  v21 = v32;
  swift_retain(v19);
  swift_release(v21);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100006DF4(&qword_10028AC30);
  v25 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v3, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v8, v29);
}

uint64_t sub_1000B042C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;

  v3 = type metadata accessor for NWPath.Status(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NWPath.status.getter(v5);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  v9 = enum case for NWPath.Status.unsatisfied(_:);
  KeyPath = swift_getKeyPath(&unk_1001ECCC0);
  v11 = swift_getKeyPath(&unk_1001ECCE8);
  if (v8 == v9)
  {
    v14 = 1;
    swift_retain(a2);
    return static Published.subscript.setter(&v14, a2, KeyPath, v11);
  }
  else
  {
    v15 = 0;
    swift_retain(a2);
    static Published.subscript.setter(&v15, a2, KeyPath, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

uint64_t sub_1000B054C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];

  v42 = a3;
  v45 = a1;
  v46 = a2;
  v48 = sub_100006DF4(&qword_100290348);
  v50 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100006DF4(&qword_100290350);
  v49 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028DEF8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__airplaneModeEnabled, v53, 33, 0);
  v11 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  Published.projectedValue.getter(v11);
  swift_endAccess(v53);
  v12 = sub_100012334(&qword_10028DF40, &qword_10028DEF8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v43 = Publisher.eraseToAnyPublisher()(v7, v12);
  v13 = *(void (**)(char *, uint64_t))(v8 + 8);
  v13(v10, v7);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__onDeviceModeEnabled, v53, 33, 0);
  Published.projectedValue.getter(v11);
  swift_endAccess(v53);
  v41 = Publisher.eraseToAnyPublisher()(v7, v12);
  v13(v10, v7);
  v14 = sub_100006DF4(&qword_10028DE90);
  v15 = sub_100012334(&qword_100290328, &qword_10028DE90, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v16 = Publisher.eraseToAnyPublisher()(v14, v15);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__noNetwork, v53, 33, 0);
  Published.projectedValue.getter(v11);
  swift_endAccess(v53);
  v17 = Publisher.eraseToAnyPublisher()(v7, v12);
  v13(v10, v7);
  v53[0] = v16;
  v18 = swift_allocObject(&unk_100268858, 24, 7);
  swift_weakInit(v18 + 16, v3);
  v19 = sub_100006DF4(&qword_100290330);
  v20 = sub_100006DF4(&qword_100296BC0);
  v21 = sub_100012334(&qword_100290338, &qword_100290330, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v22 = sub_100012334(&qword_10028EFA8, &qword_100296BC0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher.combineLatest<A, B, C>(_:_:_:)(v45, v46, sub_1000B1AD4, v18, v19, v20, v20, &type metadata for Bool, v21, v22, v22);
  swift_release(v18);
  v23 = v41;
  v24 = v43;
  v52 = v43;
  v53[0] = v41;
  v51 = v17;
  v25 = sub_100006DF4(&qword_10028EA30);
  v26 = sub_100006DF4(&qword_10028D350);
  v27 = sub_100012334(&qword_10028EA38, &qword_10028EA30, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_100012334(&qword_100290358, &qword_100290350, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v38 = v27;
  v39 = v27;
  v37 = v27;
  v29 = v44;
  v30 = v47;
  Publisher.combineLatest<A, B, C, D>(_:_:_:_:)(v6, &v52, &v51, sub_1000B0A5C, 0, v25, v47, v25, v25, v26, v37, v28, v38, v39);
  v31 = sub_100012334(&qword_100290360, &qword_100290348, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v32 = v48;
  v33 = v29;
  v34 = Publisher.eraseToAnyPublisher()(v48, v31);
  swift_release(v24);
  swift_release(v23);
  swift_release(v16);
  v35 = swift_release(v17);
  (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v33, v32, v35);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v30);
  return v34;
}

void sub_1000B09C8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  char v12;
  char v13;
  _BYTE v14[24];

  v8 = *a1;
  v9 = a4 + 16;
  swift_beginAccess(a4 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    v12 = sub_1000B1618(a2, a3, v8);
    swift_release(v11);
    v13 = v12 & 1;
  }
  else
  {
    v13 = 0;
  }
  *a5 = v13;
}

_BYTE *sub_1000B0A5C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X3>, char *a5@<X8>)
{
  char v5;

  v5 = 3;
  if ((*a2 & 1) == 0)
  {
    if (*a4)
      v5 = 1;
    else
      v5 = 3;
    if (*a3)
      v5 = 0;
    if ((*result & 1) != 0)
      v5 = 2;
  }
  *a5 = v5;
  return result;
}

uint64_t sub_1000B0A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];

  v4 = v3;
  v50 = a3;
  v55 = a1;
  v56 = a2;
  v54 = type metadata accessor for Locale(0);
  v52 = *(_QWORD *)(v54 - 8);
  v5 = *(_QWORD *)(v52 + 64);
  v6 = __chkstk_darwin(v54);
  v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v51 = (char *)&v47 - v7;
  v8 = sub_100006DF4(&qword_100290320);
  v9 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  v59 = v9;
  __chkstk_darwin(v8);
  v57 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028DEF8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__airplaneModeEnabled, v63, 33, 0);
  v15 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  Published.projectedValue.getter(v15);
  swift_endAccess(v63);
  v16 = sub_100012334(&qword_10028DF40, &qword_10028DEF8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v47 = Publisher.eraseToAnyPublisher()(v11, v16);
  v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  v17(v14, v11);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__onDeviceModeEnabled, v63, 33, 0);
  Published.projectedValue.getter(v15);
  swift_endAccess(v63);
  v18 = Publisher.eraseToAnyPublisher()(v11, v16);
  v48 = v18;
  v17(v14, v11);
  v19 = sub_100006DF4(&qword_10028DE90);
  v20 = sub_100012334(&qword_100290328, &qword_10028DE90, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v21 = Publisher.eraseToAnyPublisher()(v19, v20);
  v49 = v21;
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__noNetwork, v63, 33, 0);
  Published.projectedValue.getter(v15);
  swift_endAccess(v63);
  v22 = Publisher.eraseToAnyPublisher()(v11, v16);
  v50 = v22;
  v17(v14, v11);
  v62 = v21;
  v63[0] = v18;
  v23 = v47;
  v60 = v22;
  v61 = v47;
  v24 = swift_allocObject(&unk_100268858, 24, 7);
  swift_weakInit(v24 + 16, v4);
  v26 = v51;
  v25 = v52;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v28 = v54;
  v27(v51, v55, v54);
  v29 = v53;
  v27(v53, v56, v28);
  v30 = *(unsigned __int8 *)(v25 + 80);
  v31 = v25;
  v32 = (v30 + 24) & ~v30;
  v33 = (v5 + v30 + v32) & ~v30;
  v34 = swift_allocObject(&unk_1002688D0, v33 + v5, v30 | 7);
  *(_QWORD *)(v34 + 16) = v24;
  v35 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 32);
  v35(v34 + v32, v26, v28);
  v35(v34 + v33, v29, v28);
  v36 = sub_100006DF4(&qword_10028EA30);
  v37 = sub_100006DF4(&qword_100290330);
  v38 = sub_100006DF4(&qword_10028D350);
  v39 = sub_100012334(&qword_10028EA38, &qword_10028EA30, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v40 = sub_100012334(&qword_100290338, &qword_100290330, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v41 = v57;
  Publisher.combineLatest<A, B, C, D>(_:_:_:_:)(&v62, &v61, &v60, sub_1000B1594, v34, v36, v37, v36, v36, v38, v39, v40, v39, v39);
  swift_release(v34);
  v42 = sub_100012334(&qword_100290340, &qword_100290320, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v43 = v58;
  v44 = Publisher.eraseToAnyPublisher()(v58, v42);
  swift_release(v23);
  swift_release(v48);
  swift_release(v49);
  v45 = swift_release(v50);
  (*(void (**)(char *, uint64_t, __n128))(v59 + 8))(v41, v43, v45);
  return v44;
}

void sub_1000B0F18(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t Strong;
  char v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  _BYTE v22[24];

  v11 = *a1;
  v12 = *a2;
  v13 = *a3;
  v14 = *a4;
  v15 = a5 + 16;
  swift_beginAccess(a5 + 16, v22, 0, 0);
  Strong = swift_weakLoadStrong(v15);
  v17 = 3;
  if (Strong)
  {
    v18 = Strong;
    v19 = sub_1000B1618(a6, a7, v12);
    swift_release(v18);
    if ((v19 & 1) != 0)
      v20 = 3;
    else
      v20 = 2;
    if (v14)
      v21 = 1;
    else
      v21 = 3;
    if (v13)
      v21 = 0;
    if (((v19 | v11) & 1) != 0)
      v17 = v20;
    else
      v17 = v21;
  }
  *a8 = v17;
}

uint64_t sub_1000B0FE8()
{
  id *v0;
  char *v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t);

  v1 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__airplaneModeEnabled;
  v2 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v3 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__onDeviceModeEnabled, v2);
  v3((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext__noNetwork, v2);
  swift_bridgeObjectRelease(*(id *)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_subscriptions));
  swift_release(*(id *)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator17ErrorStateContext_networkMonitor));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1000B1098()
{
  return type metadata accessor for ErrorStateContext(0);
}

uint64_t type metadata accessor for ErrorStateContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100290190;
  if (!qword_100290190)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ErrorStateContext);
  return result;
}

void sub_1000B10DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;

  v4 = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000936A0();
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v9 = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 6, &v4, a1 + 80);
  }
}

uint64_t storeEnumTagSinglePayload for ErrorStateContext.StateError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000B11C4 + 4 * byte_1001ECB65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B11F8 + 4 * byte_1001ECB60[v4]))();
}

uint64_t sub_1000B11F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B1200(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B1208);
  return result;
}

uint64_t sub_1000B1214(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B121CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000B1220(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B1228(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ErrorStateContext.StateError()
{
  return &type metadata for ErrorStateContext.StateError;
}

unint64_t sub_1000B1248()
{
  unint64_t result;

  result = qword_100290318;
  if (!qword_100290318)
  {
    result = swift_getWitnessTable(&unk_1001ECC18, &type metadata for ErrorStateContext.StateError);
    atomic_store(result, (unint64_t *)&qword_100290318);
  }
  return result;
}

uint64_t sub_1000B128C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ErrorStateContext(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000B12C8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262140, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1000B1310()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B1334(char *a1)
{
  uint64_t v1;

  return sub_1000B006C(a1, v1);
}

uint64_t sub_1000B133C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001ECC78, (uint64_t)&unk_1001ECCA0, a2);
}

uint64_t sub_1000B1360(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001ECC78, (uint64_t)&unk_1001ECCA0);
}

uint64_t sub_1000B1384(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B00F4(a1, v1);
}

uint64_t sub_1000B139C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B0194(a1, v1);
}

uint64_t sub_1000B13A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for NWPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000B1418()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for NWPath(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000B042C(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000B1458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B1468(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B1470@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001ECCC0, (uint64_t)&unk_1001ECCE8, a2);
}

uint64_t sub_1000B1494(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001ECCC0, (uint64_t)&unk_1001ECCE8);
}

uint64_t sub_1000B14B8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001ECD08, (uint64_t)&unk_1001ECD30, a2);
}

uint64_t sub_1000B14DC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001ECD08, (uint64_t)&unk_1001ECD30);
}

uint64_t sub_1000B1500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_1000B1594(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(type metadata accessor for Locale(0) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  sub_1000B0F18(a1, a2, a3, a4, *(_QWORD *)(v5 + 16), v5 + ((v12 + 24) & ~v12), v5 + ((*(_QWORD *)(v11 + 64) + v12 + ((v12 + 24) & ~v12)) & ~v12), a5);
}

uint64_t sub_1000B1618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  void (*v40)(_QWORD, _BYTE *, uint64_t);
  void (*v41)(_QWORD, _QWORD, _QWORD);
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  void (*v45)(_QWORD);
  void (*v46)(_BYTE *, uint64_t);
  uint64_t result;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t (*v58)(_BYTE *, uint64_t);
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  void (*v66)(uint64_t, uint64_t);
  _BYTE v67[4];
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD, _QWORD);
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t (*v83)(_BYTE *, uint64_t, uint64_t);

  v5 = type metadata accessor for LanguageState(0);
  v78 = *(_QWORD **)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = &v67[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v67[-v9];
  v11 = type metadata accessor for LanguageModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v81 = &v67[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v13);
  v16 = __chkstk_darwin(v15);
  v17 = __chkstk_darwin(v16);
  v19 = &v67[-v18];
  v20 = __chkstk_darwin(v17);
  __chkstk_darwin(v20);
  v25 = *(_QWORD *)(a3 + 16);
  if (!v25)
    return 0;
  v72 = a2;
  v73 = v24;
  v70 = v23;
  v71 = v22;
  v76 = v5;
  v77 = &v67[-v21];
  v74 = v10;
  v75 = v8;
  v26 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v27 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
  v82 = *(_QWORD *)(v12 + 72);
  v83 = v27;
  v79 = a3;
  swift_bridgeObjectRetain(a3);
  v28 = v26;
  v80 = v25;
  while (1)
  {
    v29 = v83(v19, v28, v11);
    v30 = LanguageModel.id.getter(v29);
    v32 = v31;
    v34 = Locale.ltIdentifier.getter();
    v35 = v33;
    if (v30 == v34 && v32 == v33)
    {
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v32);
      goto LABEL_10;
    }
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v35);
    if ((v36 & 1) != 0)
      break;
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v19, v11);
    v28 += v82;
    if (!--v25)
    {
      swift_bridgeObjectRelease(v79);
      return 0;
    }
  }
  v32 = v79;
LABEL_10:
  v38 = v75;
  v37 = v76;
  v39 = v74;
  swift_bridgeObjectRelease(v32);
  v69 = v12;
  v40 = *(void (**)(_QWORD, _BYTE *, uint64_t))(v12 + 32);
  v41 = v73;
  v40(v73, v19, v11);
  v42 = v77;
  v43 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v40)(v77, v41, v11);
  LanguageModel.state.getter(v43);
  v44 = v78;
  v45 = (void (*)(_QWORD))v78[13];
  v68 = enum case for LanguageState.installed(_:);
  v73 = (void (*)(_QWORD, _QWORD, _QWORD))v45;
  v45(v38);
  LOBYTE(v41) = static LanguageState.== infix(_:_:)(v39, v38);
  v46 = (void (*)(_BYTE *, uint64_t))v44[1];
  v46(v38, v37);
  v46(v39, v37);
  if ((v41 & 1) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v42, v11);
    return 0;
  }
  v78 = v40;
  result = swift_bridgeObjectRetain(v79);
  for (i = 0; ; ++i)
  {
    v49 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      return result;
    }
    v50 = v83(v81, v26, v11);
    v51 = LanguageModel.id.getter(v50);
    v53 = v52;
    v55 = Locale.ltIdentifier.getter();
    v56 = v54;
    if (v51 == v55 && v53 == v54)
    {
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v53);
      goto LABEL_21;
    }
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v55, v54, 0);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v56);
    if ((v57 & 1) != 0)
      break;
    v58 = *(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8);
    result = v58(v81, v11);
    v26 += v82;
    if (v49 == v80)
    {
      swift_bridgeObjectRelease(v79);
      v58(v77, v11);
      return 0;
    }
  }
  v53 = v79;
LABEL_21:
  swift_bridgeObjectRelease(v53);
  v59 = v70;
  v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v78;
  ((void (*)(uint64_t, _BYTE *, uint64_t))v78)(v70, v81, v11);
  v61 = v71;
  v62 = v60(v71, v59, v11);
  v63 = v74;
  LanguageModel.state.getter(v62);
  v65 = v75;
  v64 = v76;
  v73(v75, v68, v76);
  LOBYTE(v59) = static LanguageState.== infix(_:_:)(v63, v65);
  v46(v65, v64);
  v46(v63, v64);
  v66 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v66(v61, v11);
  v66((uint64_t)v77, v11);
  return (v59 & 1) != 0;
}

void sub_1000B1AD4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;

  sub_1000B09C8(a1, a2, a3, v4, a4);
}

uint64_t sub_1000B1ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;

  v4 = sub_100006DF4(&qword_100290418);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = static Axis.Set.vertical.getter(v6);
  v20 = a2;
  v21 = a1;
  v10 = sub_100006DF4(&qword_100290420);
  v11 = sub_1000070BC(&qword_100290428);
  v12 = sub_1000070BC(&qword_100290430);
  v13 = sub_100012334(&qword_100290438, &qword_100290430, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v14 = sub_1000B3698();
  v22 = v12;
  v23 = &type metadata for UnitPoint;
  v24 = v13;
  v25 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v22 = v11;
  v23 = (void *)OpaqueTypeConformance2;
  v16 = swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  ScrollView.init(_:showsIndicators:content:)(v9, 0, sub_1000B3690, v19, v10, v16);
  v17 = sub_100012334(&qword_100290448, &qword_100290418, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  View.scrollDisabled(_:)(1, v4, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1000B1C68@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  void (*v54)(char *, uint64_t, __n128);
  __n128 v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t OpaqueTypeConformance2;
  uint64_t v76;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  unint64_t v103;
  int v104;
  _QWORD v105[3];

  v95 = a2;
  v96 = a3;
  v4 = type metadata accessor for ScrollViewProxy(0);
  v92 = *(_QWORD *)(v4 - 8);
  v93 = v4;
  v94 = *(_QWORD *)(v92 + 64);
  __chkstk_darwin(v4);
  v91 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for ExpandingLineLimitedTextView(0);
  v86 = *(_QWORD *)(v88 - 8);
  v99 = *(_QWORD *)(v86 + 64);
  __chkstk_darwin(v88);
  v98 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TranslateText(0);
  v8 = __chkstk_darwin(v7);
  v10 = (double **)((char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (char *)&v78 - v11;
  v81 = sub_100006DF4(&qword_10028B318);
  __chkstk_darwin(v81);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100006DF4(&qword_100290450);
  v80 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100006DF4(&qword_100290458);
  __chkstk_darwin(v79);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100006DF4(&qword_100290460);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100006DF4(&qword_100290430);
  __chkstk_darwin(v83);
  v97 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006DF4(&qword_100290428);
  v23 = *(_QWORD *)(v22 - 8);
  v89 = v22;
  v90 = v23;
  __chkstk_darwin(v22);
  v87 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *a1;
  v25 = *((_QWORD *)a1 + 1);
  *v10 = swift_getKeyPath(&unk_1001ECE40);
  v27 = sub_100006DF4(&qword_100291490);
  swift_storeEnumTagMultiPayload(v10, v27, 0);
  v28 = (double *)((char *)v10 + *(int *)(v7 + 20));
  *v28 = v26;
  *((_QWORD *)v28 + 1) = v25;
  sub_10005DDA8((uint64_t)v10, (uint64_t)v12, type metadata accessor for TranslateText);
  swift_bridgeObjectRetain(v25);
  v30 = static Alignment.topLeading.getter(v29);
  sub_100018E30(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v30, v31);
  sub_100032DAC((uint64_t)v12, type metadata accessor for TranslateText);
  v33 = a1[7];
  *(double *)v105 = a1[6];
  v32 = v105[0];
  *(double *)&v105[1] = v33;
  v34 = sub_100006DF4(&qword_10028B260);
  State.projectedValue.getter(&v100, v34);
  v35 = v100;
  v36 = v101;
  v37 = v102;
  v38 = sub_1000B36E4();
  View.bindGeometry(to:reader:)(v35, *(_QWORD *)&v36, sub_100061844, 0, v81, v38, v37);
  swift_release(*(_QWORD *)&v36);
  swift_release(v35);
  sub_10000A020((uint64_t)v14, &qword_10028B318);
  v39 = v80;
  v40 = v82;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v18, v16, v82);
  v41 = v79;
  *(_WORD *)&v18[*(int *)(v79 + 36)] = 256;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v40);
  v100 = v32;
  v101 = v33;
  State.wrappedValue.getter(v105);
  v42 = v98;
  sub_1000B35F4((uint64_t)a1, v98);
  v43 = *(unsigned __int8 *)(v86 + 80);
  v82 = ((v43 + 16) & ~v43) + v99;
  v86 = (v43 + 16) & ~v43;
  v81 = v43 | 7;
  v44 = swift_allocObject(&unk_100268998, v82, v43 | 7);
  sub_10005DDA8(v42, v44 + ((v43 + 16) & ~v43), type metadata accessor for ExpandingLineLimitedTextView);
  v45 = sub_1000B37B8();
  v46 = sub_1000B384C();
  View.onChange<A>(of:initial:_:)(v105, 0, sub_1000B376C, v44, v41, &type metadata for CGFloat, v45, v46);
  swift_release(v44);
  sub_10000A020((uint64_t)v18, &qword_100290458);
  v48 = *a1;
  v47 = *((_QWORD *)a1 + 1);
  v49 = v84;
  v50 = v97;
  v51 = v85;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v97, v20, v85);
  v52 = v83;
  v53 = (double *)&v50[*(int *)(v83 + 52)];
  *v53 = v48;
  *((_QWORD *)v53 + 1) = v47;
  v54 = *(void (**)(char *, uint64_t, __n128))(v49 + 8);
  v55 = swift_bridgeObjectRetain(v47);
  v54(v20, v51, v55);
  v56 = *(_QWORD *)((char *)a1 + *(int *)(v88 + 44));
  v78 = a1;
  KeyPath = swift_getKeyPath(&unk_1001ECE68);
  v100 = v56;
  v58 = sub_100007D5C(&qword_100290488, type metadata accessor for KaraokeProgressMonitor, (uint64_t)&unk_1001EEB14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v100, KeyPath, v58);
  swift_release(KeyPath);
  v104 = *(_DWORD *)(v56 + 16);
  v100 = 0x3F80000000000000;
  v59 = sub_1000B3898();
  BinaryFloatingPoint.clip(to:)(v105, &v100, &type metadata for Float, v59);
  v100 = 0x3FE0000000000000;
  v101 = *(float *)v105;
  v61 = v91;
  v60 = v92;
  v62 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v91, v95, v93);
  v63 = v98;
  sub_1000B35F4((uint64_t)a1, v98);
  v64 = *(unsigned __int8 *)(v60 + 80);
  v65 = v60;
  v66 = (v64 + 16) & ~v64;
  v67 = (v94 + v43 + v66) & ~v43;
  v68 = v81;
  v69 = swift_allocObject(&unk_1002689C0, v67 + v99, v81 | v64);
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v69 + v66, v61, v62);
  sub_10005DDA8(v63, v69 + v67, type metadata accessor for ExpandingLineLimitedTextView);
  v70 = sub_100012334(&qword_100290438, &qword_100290430, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v71 = sub_1000B3698();
  v72 = v87;
  v73 = (uint64_t)v97;
  View.onChange<A>(of:initial:_:)(&v100, 0, sub_1000B39EC, v69, v52, &type metadata for UnitPoint, v70, v71);
  swift_release(v69);
  sub_10000A020(v73, &qword_100290430);
  sub_1000B35F4((uint64_t)v78, v63);
  v74 = swift_allocObject(&unk_1002689E8, v82, v68);
  sub_10005DDA8(v63, v74 + v86, type metadata accessor for ExpandingLineLimitedTextView);
  v100 = v52;
  v101 = COERCE_DOUBLE(&type metadata for UnitPoint);
  v102 = *(double *)&v70;
  v103 = v71;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v76 = v89;
  View.onTapGesture(count:perform:)(1, sub_1000B3B30, v74, v89, OpaqueTypeConformance2);
  swift_release(v74);
  return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v72, v76);
}

void sub_1000B2458(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;

  v5 = type metadata accessor for ExpandingLineLimitedTextView(0);
  v6 = __chkstk_darwin(v5);
  v52 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v51 = (uint64_t)&v48 - v8;
  v9 = sub_100006DF4(&qword_100290498);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a2;
  v13 = a3 + *(int *)(v5 + 40);
  v14 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v55 = *(_QWORD *)a3;
  *((_QWORD *)&v55 + 1) = v14;
  v15 = sub_10000B030();
  swift_bridgeObjectRetain(v14);
  v49 = v15;
  v16 = Text.init<A>(_:)(&v55, &type metadata for String, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = type metadata accessor for Text.WritingMode(0);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v11, 1, 1, v23);
  v50 = v13;
  v25 = Text.Measurements.numberOfLines(of:in:writingMode:)(v16, v18, v22, v20, v11, v12, INFINITY);
  sub_10001B9E8(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  sub_10000A020((uint64_t)v11, &qword_100290498);
  if (v25 < 0)
  {
    __break(1u);
  }
  else
  {
    v55 = *(_OWORD *)(a3 + 32);
    v53 = v25;
    v26 = sub_100006DF4(&qword_10028F888);
    State.wrappedValue.setter(&v53, v26);
    v27 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)&v55 = *(_QWORD *)a3;
    *((_QWORD *)&v55 + 1) = v27;
    swift_bridgeObjectRetain(v27);
    v28 = Text.init<A>(_:)(&v55, &type metadata for String, v49);
    v30 = v29;
    v32 = v31;
    v34 = v33 & 1;
    v24(v11, 1, 1, v23);
    Text.Measurements.size(of:in:writingMode:)(v28, v30, v34, v32, v11, v12, INFINITY);
    v36 = v35;
    sub_10001B9E8(v28, v30, v34);
    swift_bridgeObjectRelease(v32);
    sub_10000A020((uint64_t)v11, &qword_100290498);
    v37 = *(_QWORD *)(a3 + 72);
    *(_QWORD *)&v55 = *(_QWORD *)(a3 + 64);
    *((_QWORD *)&v55 + 1) = v37;
    v53 = v36;
    v38 = sub_100006DF4(&qword_10028B260);
    State.wrappedValue.setter(&v53, v38);
    if (qword_10028A440 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_10028A440, sub_100121004);
LABEL_3:
  v39 = type metadata accessor for Logger(0);
  sub_10000F66C(v39, (uint64_t)qword_1002AA3C8);
  v40 = v51;
  sub_1000B35F4(a3, v51);
  v41 = v52;
  v42 = sub_1000B35F4(a3, v52);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc(32, -1);
    *(_DWORD *)v45 = 134218496;
    *(double *)&v55 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 8, v45 + 4);
    *(_WORD *)(v45 + 12) = 2048;
    v55 = *(_OWORD *)(v40 + 32);
    State.wrappedValue.getter(&v53);
    v46 = v53;
    sub_100032DAC(v40, type metadata accessor for ExpandingLineLimitedTextView);
    *(_QWORD *)&v55 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 8, v45 + 14);
    *(_WORD *)(v45 + 22) = 2048;
    v47 = *(_QWORD *)(v41 + 72);
    *(_QWORD *)&v55 = *(_QWORD *)(v41 + 64);
    *((_QWORD *)&v55 + 1) = v47;
    State.wrappedValue.getter(&v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v45 + 24);
    sub_100032DAC(v41, type metadata accessor for ExpandingLineLimitedTextView);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "availableWidth changed to %f, %ld lines, %f pt high", (uint8_t *)v45, 0x20u);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    sub_100032DAC(v40, type metadata accessor for ExpandingLineLimitedTextView);
    sub_100032DAC(v41, type metadata accessor for ExpandingLineLimitedTextView);
  }

}

void sub_1000B28C4(double *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  double v31;

  v6 = *a1;
  v5 = a1[1];
  v8 = *(_QWORD *)a2;
  v7 = *(double *)(a2 + 8);
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA3C8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v28 = v14;
    *(_DWORD *)v13 = 136315394;
    v30 = *(_QWORD *)&v6;
    v31 = v5;
    v15 = String.init<A>(describing:)(&v30, &type metadata for UnitPoint);
    v17 = v16;
    v30 = sub_1001A7FE4(v15, v16, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 4);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2080;
    v30 = v8;
    v31 = v7;
    v18 = String.init<A>(describing:)(&v30, &type metadata for UnitPoint);
    v20 = v19;
    v30 = sub_1001A7FE4(v18, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 14);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "monitor changed from %s to %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  v21 = round(v5);
  if (v7 != 0.0 || v21 != 1.0)
  {
    v23 = *((double *)a4 + 1);
    v30 = *a4;
    v31 = v23;
    v24 = *(uint64_t *)((char *)a4 + *(int *)(type metadata accessor for ExpandingLineLimitedTextView(0) + 44));
    KeyPath = swift_getKeyPath(&unk_1001ECE68);
    v28 = v24;
    v26 = sub_100007D5C(&qword_100290488, type metadata accessor for KaraokeProgressMonitor, (uint64_t)&unk_1001EEB14);
    swift_bridgeObjectRetain(*(_QWORD *)&v23);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v26);
    swift_release(KeyPath);
    v28 = 0x3F80000000000000;
    v27 = sub_1000B3898();
    BinaryFloatingPoint.clip(to:)(&v29, &v28, &type metadata for Float, v27);
    ScrollViewProxy.scrollTo<A>(_:anchor:)(&v30, 0x3FE0000000000000, v29, 0, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(*(_QWORD *)&v31);
  }
}

uint64_t sub_1000B2BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  v16 = 0;
  State.init(wrappedValue:)(&v18, &v16, &type metadata for Int);
  *(_OWORD *)(a5 + 32) = v18;
  v16 = 0;
  State.init(wrappedValue:)(&v18, &v16, &type metadata for CGFloat);
  v6 = *((_QWORD *)&v18 + 1);
  *(_QWORD *)(a5 + 48) = v18;
  *(_QWORD *)(a5 + 56) = v6;
  v16 = 0;
  State.init(wrappedValue:)(&v18, &v16, &type metadata for CGFloat);
  v7 = *((_QWORD *)&v18 + 1);
  *(_QWORD *)(a5 + 64) = v18;
  *(_QWORD *)(a5 + 72) = v7;
  v16 = 0;
  v17 = 1;
  v8 = sub_100006DF4(&qword_100290368);
  State.init(wrappedValue:)(&v18, &v16, v8);
  v9 = BYTE8(v18);
  v10 = v19;
  *(_QWORD *)(a5 + 80) = v18;
  *(_BYTE *)(a5 + 88) = v9;
  *(_QWORD *)(a5 + 96) = v10;
  v11 = type metadata accessor for ExpandingLineLimitedTextView(0);
  Text.Measurements.init()();
  v12 = *(int *)(v11 + 44);
  v13 = type metadata accessor for KaraokeProgressMonitor(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_DWORD *)(v14 + 16) = 0;
  result = ObservationRegistrar.init()();
  *(_QWORD *)(a5 + v12) = v14;
  return result;
}

uint64_t type metadata accessor for ExpandingLineLimitedTextView(uint64_t a1)
{
  uint64_t result;

  result = qword_1002903C8;
  if (!qword_1002903C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ExpandingLineLimitedTextView);
  return result;
}

uint64_t sub_1000B2D10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain(v7);
    if (v8)
    {
      v10 = a2[3];
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v10;
      swift_retain(v10);
    }
    else
    {
      *(_OWORD *)(a1 + 16) = *v9;
    }
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v12;
    v13 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v13;
    v14 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v15 = a2[12];
    v16 = *(int *)(a3 + 40);
    v22 = a1 + v16;
    v17 = (uint64_t)a2 + v16;
    *(_QWORD *)(a1 + 96) = v15;
    v18 = type metadata accessor for Text.Measurements(0);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_retain(v12);
    swift_retain(v13);
    swift_retain(v14);
    swift_retain(v15);
    v19(v22, v17, v18);
    v20 = *(int *)(a3 + 44);
    v11 = *(uint64_t *)((char *)a2 + v20);
    *(_QWORD *)(a1 + v20) = v11;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_1000B2E50(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  if (a1[2])
    swift_release(a1[3]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  swift_release(a1[12]);
  v4 = (char *)a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 44)));
}

uint64_t sub_1000B2EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v8 = (_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *v8;
  }
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(int *)(a3 + 40);
  v21 = a1 + v14;
  v15 = a2 + v14;
  *(_QWORD *)(a1 + 96) = v13;
  v16 = type metadata accessor for Text.Measurements(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  v17(v21, v15, v16);
  v18 = *(int *)(a3 + 44);
  v19 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v19;
  swift_retain(v19);
  return a1;
}

uint64_t sub_1000B2FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v8)
    {
      v11 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v11;
      swift_retain(v11);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v8)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v10);
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v15;
  swift_retain(v15);
  swift_release(v14);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v17;
  swift_retain(v17);
  swift_release(v16);
  v18 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v18;
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = *(int *)(a3 + 40);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = *(int *)(a3 + 44);
  v26 = *(_QWORD *)(a2 + v25);
  v27 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_retain(v26);
  swift_release(v27);
  return a1;
}

uint64_t sub_1000B3174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v13 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000B3228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v8)
    {
      v11 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v11;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v8)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  swift_release(v10);
LABEL_8:
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v13;
  swift_release(v12);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v14);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v15);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v16);
  v17 = *(int *)(a3 + 40);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = *(int *)(a3 + 44);
  v22 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_release(v22);
  return a1;
}

uint64_t sub_1000B335C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B3368);
}

uint64_t sub_1000B3368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Text.Measurements(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1000B33E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B33F0);
}

uint64_t sub_1000B33F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Text.Measurements(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000B3464(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1001ECD80;
  v4[1] = &unk_1001ECD98;
  v4[2] = &unk_1001ECD98;
  v4[3] = &unk_1001ECD98;
  v4[4] = &unk_1001ECD98;
  v4[5] = &unk_1001ECDB0;
  result = type metadata accessor for Text.Measurements(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B34FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100212E6C, 1);
}

double sub_1000B350C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  double result;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(a1);
  v8 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static Alignment.bottomTrailing.getter(v7);
  v11 = v10;
  sub_1000B35F4(v2, (uint64_t)v8);
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_100268970, v13 + v6, v12 | 7);
  sub_10005DDA8((uint64_t)v8, v14 + v13, type metadata accessor for ExpandingLineLimitedTextView);
  KeyPath = swift_getKeyPath(&unk_1001ECE18);
  v16 = *(_QWORD *)(v2 + *(int *)(a1 + 44));
  *a2 = v9;
  a2[1] = v11;
  a2[2] = (uint64_t)sub_1000B363C;
  a2[3] = v14;
  a2[4] = KeyPath;
  a2[5] = v16;
  *(_QWORD *)&result = swift_retain(v16).n128_u64[0];
  return result;
}

uint64_t sub_1000B35F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ExpandingLineLimitedTextView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B363C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ExpandingLineLimitedTextView(0) - 8) + 80);
  return sub_1000B1ADC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000B3690@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B1C68(*(double **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1000B3698()
{
  unint64_t result;

  result = qword_100290440;
  if (!qword_100290440)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnitPoint, &type metadata for UnitPoint);
    atomic_store(result, (unint64_t *)&qword_100290440);
  }
  return result;
}

unint64_t sub_1000B36E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290468;
  if (!qword_100290468)
  {
    v1 = sub_1000070BC(&qword_10028B318);
    sub_100007D5C(&qword_100290470, type metadata accessor for TranslateText, (uint64_t)&unk_1001F6398);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290468);
  }
  return result;
}

void sub_1000B376C(uint64_t a1, double *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ExpandingLineLimitedTextView(0) - 8) + 80);
  sub_1000B2458(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_1000B37B8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100290478;
  if (!qword_100290478)
  {
    v1 = sub_1000070BC(&qword_100290458);
    v2[0] = sub_1000070BC(&qword_10028B318);
    v2[1] = sub_1000B36E4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.bindGeometry(to:reader:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290478);
  }
  return result;
}

unint64_t sub_1000B384C()
{
  unint64_t result;

  result = qword_100290480;
  if (!qword_100290480)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100290480);
  }
  return result;
}

unint64_t sub_1000B3898()
{
  unint64_t result;

  result = qword_100290490;
  if (!qword_100290490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Float, &type metadata for Float);
    atomic_store(result, (unint64_t *)&qword_100290490);
  }
  return result;
}

uint64_t sub_1000B38DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ExpandingLineLimitedTextView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = (_QWORD *)(v0 + v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  if (*(_QWORD *)(v0 + v9 + 16))
    swift_release(v11[3]);
  v12 = v3 | v8 | 7;
  swift_release(v11[5]);
  swift_release(v11[7]);
  swift_release(v11[9]);
  swift_release(v11[12]);
  v13 = (char *)v11 + *(int *)(v6 + 40);
  v14 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release(*(_QWORD *)((char *)v11 + *(int *)(v6 + 44)));
  return swift_deallocObject(v0, v9 + v10, v12);
}

void sub_1000B39EC(double *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ExpandingLineLimitedTextView(0) - 8) + 80);
  sub_1000B28C4(a1, a2, v2 + v6, (uint64_t *)(v2 + ((v6 + v7 + v8) & ~v8)));
}

uint64_t sub_1000B3A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for ExpandingLineLimitedTextView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  if (*(_QWORD *)(v0 + v4 + 16))
    swift_release(v6[3]);
  v7 = v4 + v5;
  swift_release(v6[5]);
  swift_release(v6[7]);
  swift_release(v6[9]);
  swift_release(v6[12]);
  v8 = (char *)v6 + *(int *)(v1 + 40);
  v9 = type metadata accessor for Text.Measurements(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)((char *)v6 + *(int *)(v1 + 44)));
  return swift_deallocObject(v0, v7, v3 | 7);
}

uint64_t sub_1000B3B30()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(void);

  result = type metadata accessor for ExpandingLineLimitedTextView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  v3 = *(uint64_t (**)(void))(v0 + ((v2 + 16) & ~v2) + 16);
  if (v3)
    return v3();
  return result;
}

uint64_t sub_1000B3B74()
{
  return sub_100012334(&qword_1002904A0, &qword_1002904A8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_1000B3BA0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v20 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = (void *)a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = a3[8];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v14 = v7;
    swift_retain(v8);
    swift_retain(v10);
    v15 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v13, v15) == 1)
    {
      v16 = type metadata accessor for UserInterfaceSizeClass(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16))
      {
        v18 = sub_100006DF4(&qword_10028CE40);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        v19 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v12, v13, v16);
        v19 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
      }
    }
    else
    {
      v21 = *v13;
      *v12 = *v13;
      swift_retain(v21);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v15, v19);
    v22 = a3[9];
    v23 = a3[10];
    v24 = (_QWORD *)(v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = *v25;
    v27 = v25[1];
    *v24 = v26;
    v24[1] = v27;
    v28 = (_QWORD *)(v4 + v23);
    v29 = (uint64_t *)((char *)a2 + v23);
    v31 = *v29;
    v30 = v29[1];
    *v28 = v31;
    v28[1] = v30;
    v32 = a3[12];
    *(_QWORD *)(v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v33 = (_QWORD *)(v4 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v20 = v34[1];
    *v33 = *v34;
    v33[1] = v20;
    *(_QWORD *)(v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    swift_retain(v26);
    swift_retain(v31);
  }
  swift_retain(v20);
  return v4;
}

uint64_t sub_1000B3D70(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 40));
  v4 = (_QWORD *)(a1 + a2[8]);
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  swift_release(*(_QWORD *)(a1 + a2[9]));
  swift_release(*(_QWORD *)(a1 + a2[10]));
  return swift_release(*(_QWORD *)(a1 + a2[12] + 8));
}

uint64_t sub_1000B3E48(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = a3[8];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v13 = v6;
  swift_retain(v7);
  swift_retain(v9);
  v14 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v12, v14) == 1)
  {
    v15 = type metadata accessor for UserInterfaceSizeClass(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15))
    {
      v17 = sub_100006DF4(&qword_10028CE40);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(v11, v12, v15);
      v18 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
    }
  }
  else
  {
    v19 = *v12;
    *v11 = *v12;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v14, v18);
  v20 = a3[9];
  v21 = a3[10];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (uint64_t *)(a2 + v20);
  v24 = *v23;
  v25 = v23[1];
  *v22 = v24;
  v22[1] = v25;
  v26 = (_QWORD *)(a1 + v21);
  v27 = (uint64_t *)(a2 + v21);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  v30 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_retain(v24);
  swift_retain(v29);
  swift_retain(v33);
  return a1;
}

uint64_t sub_1000B3FF0(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_retain(v11);
  swift_release(v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (a1 != a2)
  {
    v13 = a3[8];
    v14 = (uint64_t *)(a1 + v13);
    v15 = (uint64_t *)(a2 + v13);
    sub_10000A020(a1 + v13, (uint64_t *)&unk_100291470);
    v16 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for UserInterfaceSizeClass(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      {
        v19 = sub_100006DF4(&qword_10028CE40);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        v20 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 16))(v14, v15, v17);
        v20 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
      }
    }
    else
    {
      v21 = *v15;
      *v14 = *v15;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v20);
  }
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a1 + v22);
  v26 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v26;
  swift_retain(v26);
  swift_release(v25);
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_QWORD *)(a1 + v27);
  v31 = *(_QWORD *)(a2 + v27);
  *(_QWORD *)(a1 + v27) = v31;
  swift_retain(v31);
  swift_release(v30);
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v32 = a3[12];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v35 = v33[1];
  v36 = v34[1];
  v33[1] = v36;
  swift_retain(v36);
  swift_release(v35);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000B421C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = a3[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
    {
      v13 = sub_100006DF4(&qword_10028CE40);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v14 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000B4378(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_release(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (a1 != a2)
  {
    v12 = a3[8];
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_10000A020(a1 + v12, (uint64_t *)&unk_100291470);
    v15 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for UserInterfaceSizeClass(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = sub_100006DF4(&qword_10028CE40);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v13, v14, v16);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release(v22);
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_release(v26);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  v27 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v28[1];
  v28[1] = v29[1];
  swift_release(v30);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000B4558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B4564);
}

uint64_t sub_1000B4564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_1000B45E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B45F0);
}

uint64_t sub_1000B45F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FaceToFaceHalfView(uint64_t a1)
{
  uint64_t result;

  result = qword_100290508;
  if (!qword_100290508)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FaceToFaceHalfView);
  return result;
}

void sub_1000B46A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_1001ECEA8;
  v4[1] = &unk_1001ECEA8;
  v4[2] = &unk_1001ECEA8;
  v4[3] = &unk_1001ECEC0;
  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_1001ECED8;
    v4[6] = &unk_1001ECED8;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = &unk_1001ECED8;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
  }
}

uint64_t sub_1000B4740(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100212EBC, 1);
}

uint64_t sub_1000B4750()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FaceToFaceHalfView(0) + 36));
  v2 = *v1;
  if (*v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001ED240);
    v4 = swift_getKeyPath(&unk_1001ED268);
    swift_retain(v2);
    static Published.subscript.getter(v13, v5, KeyPath);
    swift_release(v2);
    swift_release(KeyPath);
    swift_release(v4);
    v6 = swift_getKeyPath(&unk_1001ED240);
    v7 = swift_getKeyPath(&unk_1001ED268);
    swift_retain(v2);
    static Published.subscript.getter(v13, v8, v6);
    swift_release(v2);
    swift_release(v6);
    return swift_release(v7);
  }
  else
  {
    v10 = v1[1];
    v11 = type metadata accessor for ConversationContext(0);
    v12 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    result = EnvironmentObject.error()(0, v10, v11, v12);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B48A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char v12;
  uint64_t KeyPath;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[3];

  v2 = v1;
  v46 = a1;
  v3 = sub_100006DF4(&qword_100290560);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = sub_100006DF4(&qword_100290568);
  __chkstk_darwin(v45);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100290570);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v2 + 8);
  v12 = *(_BYTE *)(v2 + 48);
  KeyPath = swift_getKeyPath(&unk_1001ECF40);
  v14 = (uint64_t *)&v10[*(int *)(type metadata accessor for ConversationList(0) + 24)];
  *v14 = KeyPath;
  v15 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  *(_QWORD *)v10 = v11;
  v10[8] = v12;
  v16 = static HorizontalAlignment.center.getter(v11);
  v17 = (uint64_t)&v10[*(int *)(sub_100006DF4(&qword_100290578) + 36)];
  sub_1000B4BD8(v2, v17);
  v18 = VerticalEdge.rawValue.getter(1);
  v19 = Edge.init(rawValue:)((2 * v18));
  v20 = v19;
  v21 = static SafeAreaRegions.container.getter(v19);
  v22 = sub_100006DF4(&qword_100290580);
  v23 = v17 + *(int *)(v22 + 36);
  *(_QWORD *)v23 = v21;
  *(_QWORD *)(v23 + 8) = 0;
  *(_BYTE *)(v23 + 16) = 1;
  *(_BYTE *)(v23 + 17) = v20;
  *(_QWORD *)(v23 + 24) = v16;
  v24 = static HorizontalAlignment.center.getter(v22);
  v25 = (uint64_t)&v10[*(int *)(v8 + 36)];
  *v5 = ((uint64_t (*)(void))static Alignment.top.getter)();
  v5[1] = v26;
  v27 = sub_100006DF4(&qword_100290588);
  v28 = sub_1000B73D4(v2, (_QWORD *)((char *)v5 + *(int *)(v27 + 44)));
  v29 = static Alignment.top.getter(v28);
  _FrameLayout.init(width:height:alignment:)(v47, 0, 1, 0x4044000000000000, 0, v29, v30);
  sub_10000B074((uint64_t)v5, (uint64_t)v7, &qword_100290560);
  v31 = &v7[*(int *)(v45 + 36)];
  v32 = v47[1];
  *(_OWORD *)v31 = v47[0];
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v47[2];
  v33 = sub_10000A020((uint64_t)v5, &qword_100290560);
  v34 = static SafeAreaRegions.all.getter(v33);
  LOBYTE(v16) = static Edge.Set.all.getter(v34);
  sub_10000B074((uint64_t)v7, v25, &qword_100290568);
  v35 = v25 + *(int *)(sub_100006DF4(&qword_100290590) + 36);
  *(_QWORD *)v35 = v34;
  *(_BYTE *)(v35 + 8) = v16;
  sub_10000A020((uint64_t)v7, &qword_100290568);
  v36 = VerticalEdge.rawValue.getter(0);
  v37 = Edge.init(rawValue:)((2 * v36));
  LOBYTE(v34) = v37;
  v38 = static SafeAreaRegions.container.getter(v37);
  v39 = sub_100006DF4(&qword_100290598);
  v40 = v25 + *(int *)(v39 + 36);
  *(_QWORD *)v40 = v38;
  *(_QWORD *)(v40 + 8) = 0;
  *(_BYTE *)(v40 + 16) = 1;
  *(_BYTE *)(v40 + 17) = v34;
  *(_QWORD *)(v40 + 24) = v24;
  v41 = static SafeAreaRegions.all.getter(v39);
  LOBYTE(v25) = static Edge.Set.vertical.getter(v41);
  v42 = v46;
  sub_10000B074((uint64_t)v10, v46, &qword_100290570);
  v43 = v42 + *(int *)(sub_100006DF4(&qword_1002905A0) + 36);
  *(_QWORD *)v43 = v41;
  *(_BYTE *)(v43 + 8) = v25;
  return sub_10000A020((uint64_t)v10, &qword_100290570);
}

uint64_t sub_1000B4BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int16 v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  char v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  void *v159;
  id v160;
  Swift::String v161;
  Swift::String v162;
  Swift::String v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  char v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  double v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  double *v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  id v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  id v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int *v243;
  void (*v244)(uint64_t, _QWORD *, uint64_t);
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  double v268;
  uint64_t v269;
  char v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  _BYTE *v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t (*v277)(uint64_t, uint64_t, uint64_t);
  int v278;
  _BYTE *v279;
  double v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  BOOL v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  _BYTE *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  double v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t (*v329)(uint64_t, uint64_t, uint64_t);
  int v330;
  double v331;
  _BYTE *v332;
  int v333;
  _BYTE *v334;
  int v335;
  _BYTE *v336;
  uint64_t v337;
  char v338;
  void (*v339)(_BYTE *, uint64_t);
  double v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _BYTE *v348;
  uint64_t v349;
  double *v350;
  _BYTE *v351;
  _BYTE *v352;
  uint64_t v353;
  uint64_t v354;
  _BYTE *v355;
  uint64_t v356;
  char v357;
  void (*v358)(_BYTE *, uint64_t);
  double v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _BYTE *v367;
  double *v368;
  uint64_t v369;
  uint64_t v370;
  _BYTE *v371;
  _BYTE *v372;
  _BYTE *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v377;
  uint64_t v378;
  int *v379;
  uint64_t v380;
  uint64_t v381;
  _BYTE v382[4];
  _BOOL4 v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _BYTE *v389;
  uint64_t v390;
  _BYTE *v391;
  uint64_t v392;
  _BYTE *v393;
  _BYTE *v394;
  _BYTE *v395;
  _BYTE *v396;
  _BYTE *v397;
  _BYTE *v398;
  _BYTE *v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  _BYTE *v403;
  _BYTE *v404;
  uint64_t *v405;
  _BYTE *v406;
  _BYTE *v407;
  _BYTE *v408;
  _BYTE *v409;
  _BYTE *v410;
  __int128 v411;
  __int128 v412;
  _BYTE *v413;
  _QWORD *v414;
  uint64_t v415;
  __int128 v416;
  _QWORD *v417;
  __int128 v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _BYTE *v426;
  uint64_t v427;
  uint64_t v428;
  _BYTE *v429;
  __int128 v430;
  uint64_t v431;
  uint64_t v432;
  _BYTE *v433;
  uint64_t v434;
  uint64_t v435;
  _BYTE *v436;
  uint64_t v437;
  _BYTE *v438;
  uint64_t v439;
  _BYTE *v440;
  _QWORD v441[2];
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  _OWORD v460[6];
  Swift::String v461;

  v437 = a2;
  v428 = sub_100006DF4(&qword_1002905D8);
  __chkstk_darwin(v428);
  v429 = &v382[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v424 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v397 = &v382[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v423 = sub_100006DF4(&qword_10028CFE8);
  v6 = __chkstk_darwin(v423);
  v407 = &v382[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v410 = &v382[-v8];
  v9 = sub_100006DF4(&qword_10028CE40);
  v10 = __chkstk_darwin(v9);
  v395 = &v382[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v10);
  *(_QWORD *)&v411 = &v382[-v13];
  v14 = __chkstk_darwin(v12);
  *(_QWORD *)&v412 = &v382[-v15];
  v16 = __chkstk_darwin(v14);
  v396 = &v382[-v17];
  v18 = __chkstk_darwin(v16);
  v413 = &v382[-v19];
  __chkstk_darwin(v18);
  v414 = &v382[-v20];
  v402 = type metadata accessor for Locale(0);
  v400 = *(_QWORD *)(v402 - 8);
  v21 = __chkstk_darwin(v402);
  v401 = &v382[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v417 = &v382[-v23];
  v420 = type metadata accessor for MoreOptionsMenu(0);
  v24 = __chkstk_darwin(v420);
  v398 = &v382[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v405 = (uint64_t *)&v382[-v26];
  v27 = sub_100006DF4(&qword_10028B2E0);
  v421 = *(_QWORD *)(v27 - 8);
  v422 = v27;
  v28 = __chkstk_darwin(v27);
  v399 = &v382[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v28);
  v406 = &v382[-v30];
  v31 = sub_100006DF4(&qword_10028B2E8);
  v32 = __chkstk_darwin(v31);
  *(_QWORD *)&v418 = &v382[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v32);
  v419 = (uint64_t)&v382[-v34];
  v427 = sub_100006DF4(&qword_1002905E0);
  v35 = __chkstk_darwin(v427);
  v403 = &v382[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = __chkstk_darwin(v35);
  v404 = &v382[-v38];
  v39 = __chkstk_darwin(v37);
  v408 = &v382[-v40];
  __chkstk_darwin(v39);
  v409 = &v382[-v41];
  v42 = sub_100006DF4(&qword_1002905E8);
  v434 = *(_QWORD *)(v42 - 8);
  v435 = v42;
  __chkstk_darwin(v42);
  v426 = &v382[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = sub_100006DF4(&qword_1002905F0);
  v45 = __chkstk_darwin(v44);
  v436 = &v382[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v45);
  v438 = &v382[-v47];
  v431 = sub_100006DF4(&qword_1002905F8);
  __chkstk_darwin(v431);
  v49 = &v382[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v392 = sub_100006DF4(&qword_100290600);
  v390 = *(_QWORD *)(v392 - 8);
  __chkstk_darwin(v392);
  v389 = &v382[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v388 = sub_100006DF4(&qword_100290608);
  __chkstk_darwin(v388);
  v393 = &v382[-((v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v432 = sub_100006DF4(&qword_100290610);
  v52 = __chkstk_darwin(v432);
  v391 = &v382[-((v53 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v52);
  v394 = &v382[-v54];
  v439 = type metadata accessor for FaceToFaceHalfView(0);
  *(_QWORD *)&v430 = *(_QWORD *)(v439 - 8);
  v55 = *(_QWORD *)(v430 + 64);
  v56 = __chkstk_darwin(v439);
  v57 = &v382[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v58 = __chkstk_darwin(v56);
  v60 = &v382[-v59];
  __chkstk_darwin(v58);
  v62 = &v382[-v61];
  v63 = sub_100006DF4(&qword_100290618);
  v64 = __chkstk_darwin(v63);
  v433 = &v382[-((v65 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v64);
  v440 = &v382[-v66];
  *((_QWORD *)&v455 + 1) = &type metadata for TranslateFeatures;
  *(_QWORD *)&v416 = sub_100009BC4();
  *(_QWORD *)&v456 = v416;
  LOBYTE(v454) = 8;
  v67 = isFeatureEnabled(_:)(&v454);
  sub_100009C08(&v454);
  sub_1000B81D0(a1, (uint64_t)v62);
  v68 = a1;
  v425 = v4;
  if ((v67 & 1) == 0)
  {
    sub_100032DAC((uint64_t)v62, type metadata accessor for FaceToFaceHalfView);
    sub_1000B81D0(a1, (uint64_t)v60);
    goto LABEL_8;
  }
  v69 = *((_QWORD *)v62 + 3);
  KeyPath = swift_getKeyPath(&unk_1001ED100);
  v71 = swift_getKeyPath(&unk_1001ED128);
  swift_retain(v69);
  static Published.subscript.getter(&v454, v72, KeyPath);
  swift_release(v69);
  swift_release(KeyPath);
  v73 = v71;
  a1 = v68;
  swift_release(v73);
  LODWORD(v69) = v454;
  sub_100032DAC((uint64_t)v62, type metadata accessor for FaceToFaceHalfView);
  sub_1000B81D0(v68, (uint64_t)v60);
  if ((_DWORD)v69 != 1)
  {
LABEL_8:
    sub_100032DAC((uint64_t)v60, type metadata accessor for FaceToFaceHalfView);
LABEL_9:
    v80 = *(void **)(a1 + 8);
    v81 = swift_getKeyPath(&unk_1001ED000);
    v82 = swift_getKeyPath(&unk_1001ED028);
    v83 = v80;
    static Published.subscript.getter(&v454, v83, v81);

    swift_release(v81);
    swift_release(v82);
    v84 = v454;
    v85 = *(void **)(a1 + 8);
    v86 = swift_getKeyPath(&unk_1001ED048);
    v87 = swift_getKeyPath(&unk_1001ED070);
    v88 = v85;
    static Published.subscript.getter(&v454, v88, v86);

    swift_release(v86);
    swift_release(v87);
    v89 = v454;
    sub_1000B81D0(v68, (uint64_t)v57);
    v90 = *(unsigned __int8 *)(v430 + 80);
    v91 = (v90 + 16) & ~v90;
    v92 = v91 + v55;
    v93 = v90 | 7;
    v94 = swift_allocObject(&unk_100268AC0, v91 + v55, v90 | 7);
    sub_1000B8218((uint64_t)v57, v94 + v91);
    sub_1000B81D0(v68, (uint64_t)v57);
    v95 = swift_allocObject(&unk_100268AE8, v92, v93);
    v96 = sub_1000B8218((uint64_t)v57, v95 + v91);
    LOBYTE(v91) = static Edge.Set.top.getter(v96);
    v97 = EdgeInsets.init(_all:)(*(double *)(v68 + *(int *)(v439 + 52)));
    v99 = v98;
    v101 = v100;
    v103 = v102;
    LOBYTE(v442) = 0;
    LOBYTE(v93) = static Edge.Set.bottom.getter(v104);
    sub_1000B4750();
    v106 = EdgeInsets.init(_all:)(v105);
    v107 = v442;
    LOBYTE(v454) = 0;
    *v49 = v84;
    v49[1] = v89;
    v49[2] = 0;
    *((_QWORD *)v49 + 3) = 0;
    *((_QWORD *)v49 + 1) = _swiftEmptyArrayStorage;
    *((_QWORD *)v49 + 2) = 0;
    v49[32] = 0;
    *((_QWORD *)v49 + 5) = sub_1000B8380;
    *((_QWORD *)v49 + 6) = v94;
    *((_QWORD *)v49 + 7) = 0;
    *((_QWORD *)v49 + 8) = 0;
    *((_QWORD *)v49 + 9) = sub_1000B83BC;
    *((_QWORD *)v49 + 10) = v95;
    *((_QWORD *)v49 + 11) = 0x6C6C69662E63696DLL;
    *((_QWORD *)v49 + 12) = 0xE800000000000000;
    *((_QWORD *)v49 + 23) = 0;
    *(_OWORD *)(v49 + 168) = 0u;
    *(_OWORD *)(v49 + 152) = 0u;
    *(_OWORD *)(v49 + 136) = 0u;
    *(_OWORD *)(v49 + 120) = 0u;
    *(_OWORD *)(v49 + 104) = 0u;
    v49[192] = v91;
    *((double *)v49 + 25) = v97;
    *((_QWORD *)v49 + 26) = v99;
    *((_QWORD *)v49 + 27) = v101;
    *((_QWORD *)v49 + 28) = v103;
    v49[232] = v107;
    v49[240] = v93;
    *((double *)v49 + 31) = v106;
    *((_QWORD *)v49 + 32) = v108;
    *((_QWORD *)v49 + 33) = v109;
    *((_QWORD *)v49 + 34) = v110;
    v49[280] = v454;
    swift_storeEnumTagMultiPayload(v49, v431, 1);
    v111 = sub_100006DF4(&qword_100290620);
    v112 = sub_10001B6DC(&qword_100290628, &qword_100290610, (void (*)(void))sub_1000B83C4);
    v113 = sub_10001B6DC(&qword_100290640, &qword_100290620, (void (*)(void))sub_1000B84A8);
    _ConditionalContent<>.init(storage:)(v49, v432, v111, v112, v113);
    v114 = (uint64_t)v438;
    if ((*(_BYTE *)(v68 + 48) & 1) == 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  v74 = v60[48];
  sub_100032DAC((uint64_t)v60, type metadata accessor for FaceToFaceHalfView);
  if ((v74 & 1) != 0)
    goto LABEL_9;
  v75 = *(void **)(v68 + 8);
  v76 = swift_getKeyPath(&unk_1001ED000);
  v77 = swift_getKeyPath(&unk_1001ED028);
  v78 = v75;
  static Published.subscript.getter(&v454, v78, v76);
  swift_release(v76);
  swift_release(v77);
  if (v454 == 1)
  {
    v79 = *(_WORD *)&v78[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation];
    v383 = (v79 & 0xFF00) != 0x200
        && *(_WORD *)&v78[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_lastSpeechTranslation] != 2
        && (v79 & 1) == 0
        || (v79 & 0xFF00) == 512;
  }
  else
  {
    v383 = 0;
  }

  v116 = *(void **)(v68 + 8);
  v117 = swift_getKeyPath(&unk_1001ED048);
  v118 = swift_getKeyPath(&unk_1001ED070);
  v119 = v116;
  static Published.subscript.getter(&v454, v119, v117);

  swift_release(v117);
  swift_release(v118);
  LODWORD(v387) = v454;
  v120 = *(_QWORD *)(v68 + 24);
  v121 = swift_getKeyPath(&unk_1001ED100);
  v122 = swift_getKeyPath(&unk_1001ED128);
  swift_retain(v120);
  static Published.subscript.getter(&v454, v123, v121);
  swift_release(v120);
  swift_release(v121);
  swift_release(v122);
  LODWORD(v386) = v454;
  v124 = *(_QWORD *)(v68 + 24);
  v125 = swift_getKeyPath(&unk_1001ED190);
  v126 = swift_getKeyPath(&unk_1001ED1B8);
  swift_retain(v124);
  static Published.subscript.getter(&v454, v127, v125);
  swift_release(v124);
  swift_release(v125);
  swift_release(v126);
  v385 = v454;
  v128 = *(void **)(v68 + 8);
  v129 = swift_allocObject(&unk_100268B10, 24, 7);
  *(_QWORD *)(v129 + 16) = v128;
  v384 = *(_QWORD *)(v68 + 24);
  v130 = v384;
  sub_1000B81D0(v68, (uint64_t)v57);
  v131 = *(unsigned __int8 *)(v430 + 80);
  v132 = (v131 + 16) & ~v131;
  v133 = swift_allocObject(&unk_100268B38, v132 + v55, v131 | 7);
  sub_1000B8218((uint64_t)v57, v133 + v132);
  v134 = *(void **)(v68 + 8);
  v135 = v128;
  swift_retain(v130);
  v136 = v134;
  v137 = sub_10008D128();
  v139 = v138;

  v140 = *(_QWORD *)(v68 + 24);
  v141 = swift_getKeyPath(&unk_1001ED148);
  v142 = swift_getKeyPath(&unk_1001ED170);
  swift_retain(v140);
  static Published.subscript.getter(&v454, v143, v141);
  swift_release(v140);
  swift_release(v141);
  swift_release(v142);
  v144 = v459;
  v145 = v454;
  v146 = v455;
  v147 = v456;
  v148 = v457;
  v149 = v458;
  LOBYTE(v454) = v383;
  BYTE1(v454) = v387;
  BYTE2(v454) = v386;
  *((_QWORD *)&v454 + 1) = v385;
  v455 = 0uLL;
  LOBYTE(v456) = 0;
  *((_QWORD *)&v456 + 1) = sub_10008BFD0;
  *(_QWORD *)&v457 = v129;
  *((_QWORD *)&v457 + 1) = sub_10008C1A0;
  *(_QWORD *)&v458 = v384;
  *((_QWORD *)&v458 + 1) = sub_1000B83BC;
  *(_QWORD *)&v459 = v133;
  *((_QWORD *)&v459 + 1) = v137;
  *(_QWORD *)&v460[0] = v139;
  *(_OWORD *)((char *)v460 + 8) = v145;
  *(_OWORD *)((char *)&v460[1] + 8) = v146;
  *(_OWORD *)((char *)&v460[2] + 8) = v147;
  *(_OWORD *)((char *)&v460[3] + 8) = v148;
  *(_OWORD *)((char *)&v460[4] + 8) = v149;
  *((_QWORD *)&v460[5] + 1) = v144;
  v150 = *(_QWORD *)(v68 + 24);
  v151 = swift_getKeyPath(&unk_1001ED148);
  v152 = swift_getKeyPath(&unk_1001ED170);
  swift_retain(v150);
  static Published.subscript.getter(&v442, v153, v151);
  swift_release(v150);
  swift_release(v151);
  swift_release(v152);
  v154 = *((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    *(_QWORD *)&v430 = v442;
    v156 = *((_QWORD *)&v443 + 1);
    v155 = v443;
    v386 = *((_QWORD *)&v444 + 1);
    v387 = v444;
    v157 = *((_QWORD *)&v445 + 1);
    v385 = v445;
    v158 = v446;
    v159 = (void *)v447;
    swift_bridgeObjectRetain(*((_QWORD *)&v443 + 1));
    sub_10001613C(v430, v154, v155, v156, v387, v386, v385, v157, v158, *((void **)&v158 + 1), v159);
  }
  else
  {
    v160 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v461._object = (void *)0xE000000000000000;
    v161._countAndFlagsBits = 0x495645445F57454ELL;
    v161._object = (void *)0xEA00000000004543;
    v162._countAndFlagsBits = 0;
    v162._object = (void *)0xE000000000000000;
    v461._countAndFlagsBits = 0;
    v163 = NSLocalizedString(_:tableName:bundle:value:comment:)(v161, (Swift::String_optional)0, (NSBundle)v160, v162, v461);

    v155 = String.init(format:_:)(v163._countAndFlagsBits, v163._object, _swiftEmptyArrayStorage);
    v156 = v164;
    swift_bridgeObjectRelease(v163._object);
  }
  v114 = (uint64_t)v438;
  v441[0] = v155;
  v441[1] = v156;
  v165 = sub_1000B8464();
  v166 = sub_100012490();
  v167 = v389;
  View.popoverTip<A>(_:arrowEdge:action:)(v441, 0, nullsub_1, 0, &type metadata for SpeakButton, &type metadata for AudioDeviceTip, v165, v166);
  swift_bridgeObjectRelease(v156);
  v450 = v460[2];
  v451 = v460[3];
  v452 = v460[4];
  v453 = v460[5];
  v446 = v458;
  v447 = v459;
  v448 = v460[0];
  v449 = v460[1];
  v442 = v454;
  v443 = v455;
  v444 = v456;
  v445 = v457;
  v168 = sub_1000B867C((uint64_t)&v442);
  v169 = static Edge.Set.top.getter(v168);
  v170 = EdgeInsets.init(_all:)(*(double *)(v68 + *(int *)(v439 + 52)));
  v172 = v171;
  v174 = v173;
  v176 = v175;
  v177 = v390;
  v178 = v392;
  v179 = (uint64_t)v393;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v390 + 16))(v393, v167, v392);
  v180 = v179 + *(int *)(v388 + 36);
  *(_BYTE *)v180 = v169;
  *(double *)(v180 + 8) = v170;
  *(_QWORD *)(v180 + 16) = v172;
  *(_QWORD *)(v180 + 24) = v174;
  *(_QWORD *)(v180 + 32) = v176;
  *(_BYTE *)(v180 + 40) = 0;
  v181 = (*(uint64_t (**)(_BYTE *, uint64_t))(v177 + 8))(v167, v178);
  LOBYTE(v178) = static Edge.Set.bottom.getter(v181);
  sub_1000B4750();
  v183 = EdgeInsets.init(_all:)(v182);
  v185 = v184;
  v187 = v186;
  v189 = v188;
  v190 = v391;
  sub_10000B074(v179, (uint64_t)v391, &qword_100290608);
  v191 = v432;
  v192 = (double *)&v190[*(int *)(v432 + 36)];
  *(_BYTE *)v192 = v178;
  v192[1] = v183;
  *((_QWORD *)v192 + 2) = v185;
  *((_QWORD *)v192 + 3) = v187;
  *((_QWORD *)v192 + 4) = v189;
  *((_BYTE *)v192 + 40) = 0;
  sub_10000A020(v179, &qword_100290608);
  v193 = v394;
  sub_1000110A4((uint64_t)v190, (uint64_t)v394, &qword_100290610);
  sub_10000B074((uint64_t)v193, (uint64_t)v49, &qword_100290610);
  swift_storeEnumTagMultiPayload(v49, v431, 0);
  v194 = sub_100006DF4(&qword_100290620);
  v195 = sub_10001B6DC(&qword_100290628, &qword_100290610, (void (*)(void))sub_1000B83C4);
  v196 = sub_10001B6DC(&qword_100290640, &qword_100290620, (void (*)(void))sub_1000B84A8);
  _ConditionalContent<>.init(storage:)(v49, v191, v194, v195, v196);
  sub_10000A020((uint64_t)v193, &qword_100290610);
  if ((*(_BYTE *)(v68 + 48) & 1) == 0)
  {
LABEL_16:
    *((_QWORD *)&v455 + 1) = &type metadata for TranslateFeatures;
    *(_QWORD *)&v456 = v416;
    LOBYTE(v454) = 8;
    v197 = isFeatureEnabled(_:)(&v454);
    sub_100009C08(&v454);
    v415 = v68;
    if ((v197 & 1) != 0)
    {
      v198 = *(_QWORD *)(v68 + 24);
      v199 = swift_getKeyPath(&unk_1001ED100);
      v200 = swift_getKeyPath(&unk_1001ED128);
      swift_retain(v198);
      static Published.subscript.getter(&v454, v201, v199);
      swift_release(v198);
      swift_release(v199);
      swift_release(v200);
      LODWORD(v432) = v454;
      v202 = *(_QWORD *)(v68 + 40);
      v203 = swift_getKeyPath(&unk_1001ED090);
      v204 = swift_getKeyPath(&unk_1001ED0B8);
      swift_retain(v202);
      static Published.subscript.getter(&v454, v205, v203);
      swift_release(v202);
      swift_release(v203);
      swift_release(v204);
      v206 = v454;
      if ((unint64_t)v454 >> 62)
      {
        if ((uint64_t)v454 < 0)
          v377 = v454;
        else
          v377 = v454 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v454);
        v207 = _CocoaArrayWrapper.endIndex.getter(v377);
        swift_bridgeObjectRelease(v206);
      }
      else
      {
        v207 = *(_QWORD *)((v454 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v206);
      LODWORD(v431) = v207 != 0;
      v208 = *(_QWORD *)(v68 + 24);
      v209 = swift_getKeyPath(&unk_1001ED100);
      v210 = swift_getKeyPath(&unk_1001ED128);
      swift_retain(v208);
      static Published.subscript.getter(&v454, v211, v209);
      swift_release(v208);
      swift_release(v209);
      swift_release(v210);
      v212 = v454;
      v213 = *(void **)(v68 + 8);
      v214 = swift_getKeyPath(&unk_1001ECF70);
      v215 = swift_getKeyPath(&unk_1001ECF98);
      v216 = v213;
      static Published.subscript.getter(v417, v216, v214);

      swift_release(v214);
      swift_release(v215);
      v217 = *(void **)(v68 + 8);
      v218 = v68;
      v219 = swift_getKeyPath(&unk_1001ECFB8);
      v220 = swift_getKeyPath(&unk_1001ECFE0);
      v221 = v217;
      v222 = v401;
      static Published.subscript.getter(v401, v221, v219);

      swift_release(v219);
      swift_release(v220);
      v223 = *(_QWORD *)(v218 + 24);
      v224 = swift_getKeyPath(&unk_1001ED148);
      v225 = swift_getKeyPath(&unk_1001ED170);
      swift_retain(v223);
      static Published.subscript.getter(&v454, v226, v224);
      swift_release(v223);
      swift_release(v224);
      swift_release(v225);
      v430 = v454;
      v418 = v455;
      v416 = v456;
      v411 = v458;
      v412 = v457;
      v407 = (_BYTE *)v459;
      v227 = *(_QWORD *)(v218 + 24);
      v228 = swift_getKeyPath(&unk_1001ED190);
      v229 = swift_getKeyPath(&unk_1001ED1B8);
      swift_retain(v227);
      static Published.subscript.getter(&v454, v230, v228);
      swift_release(v227);
      swift_release(v228);
      swift_release(v229);
      v231 = v454;
      v232 = *(_QWORD *)(v218 + 24);
      v233 = type metadata accessor for SharedTranslationOptions(0);
      v234 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
      swift_retain(v232);
      v235 = EnvironmentObject.init()(v233, v234);
      v237 = v236;
      v238 = type metadata accessor for SceneContext(0);
      v239 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
      v240 = EnvironmentObject.init()(v238, v239);
      v241 = (uint64_t)v405;
      *v405 = v235;
      *(_QWORD *)(v241 + 8) = v237;
      *(_QWORD *)(v241 + 16) = v240;
      *(_QWORD *)(v241 + 24) = v242;
      *(_OWORD *)(v241 + 32) = xmmword_1001EB430;
      *(_BYTE *)(v241 + 48) = v432;
      *(_BYTE *)(v241 + 49) = v431;
      *(_BYTE *)(v241 + 50) = v212;
      v243 = (int *)v420;
      v244 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v400 + 32);
      v245 = v402;
      v244(v241 + *(int *)(v420 + 40), v417, v402);
      v244(v241 + v243[11], v222, v245);
      v246 = v241 + v243[12];
      v247 = v418;
      *(_OWORD *)v246 = v430;
      *(_OWORD *)(v246 + 16) = v247;
      v248 = v412;
      *(_OWORD *)(v246 + 32) = v416;
      *(_OWORD *)(v246 + 48) = v248;
      *(_OWORD *)(v246 + 64) = v411;
      *(_QWORD *)(v246 + 80) = v407;
      *(_QWORD *)(v241 + v243[13]) = v231;
      v249 = (_QWORD *)(v241 + v243[14]);
      *v249 = sub_10008BFF0;
      v249[1] = v232;
      v250 = v241 + v243[15];
      LOBYTE(v442) = 0;
      State.init(wrappedValue:)(&v454, &v442, &type metadata for Bool);
      v251 = *((_QWORD *)&v454 + 1);
      *(_BYTE *)v250 = v454;
      *(_QWORD *)(v250 + 8) = v251;
      v252 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001001FAD80);
      v431 = v253;
      v432 = v252;
      LODWORD(v418) = v254;
      *(_QWORD *)&v430 = v255;
      v256 = EnvironmentObject.projectedValue.getter(*(_QWORD *)(v415 + *(int *)(v439 + 40)), *(_QWORD *)(v415 + *(int *)(v439 + 40) + 8), v238, v239);
      v257 = swift_getKeyPath(&unk_1001ED0D8);
      EnvironmentObject.Wrapper.subscript.getter(&v454, v257, v256, v239);
      swift_release(v257);
      v258 = swift_release(v256);
      v417 = v382;
      v259 = v454;
      v260 = v455;
      __chkstk_darwin(v258);
      v261 = sub_100006DF4(&qword_10028F4F8);
      v461._object = (void *)sub_100007D5C(&qword_10028F500, type metadata accessor for MoreOptionsMenu, (uint64_t)&unk_1001F2078);
      v381 = sub_100012334(&qword_10028F508, &qword_10028F4F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v379 = v243;
      v380 = v261;
      v262 = v406;
      v263 = v431;
      v264 = v430;
      ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t (*)@<X0>(char *@<X8>), int **))View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:))(v432, v431, v418 & 1, v430, v259, *((_QWORD *)&v259 + 1), v260, 1, sub_1000B861C, &v379);
      swift_bridgeObjectRelease(v264);
      swift_bridgeObjectRelease(v263);
      swift_release(*((_QWORD *)&v259 + 1));
      swift_release(v259);
      v265 = sub_100032DAC(v241, type metadata accessor for MoreOptionsMenu);
      v266 = static Alignment.trailing.getter(v265);
      v268 = sub_100018FE4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v419, 0.0, 1, 0.0, 1, v266, v267);
      v269 = (*(uint64_t (**)(_BYTE *, uint64_t, double))(v421 + 8))(v262, v422, v268);
      v270 = static Edge.Set.trailing.getter(v269);
      v271 = v414;
      sub_1000D58EC(v414);
      v273 = v424;
      v272 = v425;
      v274 = v413;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v424 + 104))(v413, enum case for UserInterfaceSizeClass.compact(_:), v425);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v273 + 56))(v274, 0, 1, v272);
      v275 = v410;
      v276 = (uint64_t)&v410[*(int *)(v423 + 48)];
      sub_10000B074((uint64_t)v271, (uint64_t)v410, &qword_10028CE40);
      sub_10000B074((uint64_t)v274, v276, &qword_10028CE40);
      v277 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v273 + 48);
      if (v277((uint64_t)v275, 1, v272) == 1)
      {
        sub_10000A020((uint64_t)v274, &qword_10028CE40);
        sub_10000A020((uint64_t)v271, &qword_10028CE40);
        v278 = v277(v276, 1, v272);
        v114 = (uint64_t)v438;
        v279 = v409;
        if (v278 == 1)
        {
          sub_10000A020((uint64_t)v275, &qword_10028CE40);
          v280 = 18.0;
LABEL_35:
          v340 = EdgeInsets.init(_all:)(v280);
          v342 = v341;
          v344 = v343;
          v346 = v345;
          v347 = v419;
          v348 = v408;
          sub_10000B074(v419, (uint64_t)v408, &qword_10028B2E8);
          v349 = v427;
          v350 = (double *)&v348[*(int *)(v427 + 36)];
          *(_BYTE *)v350 = v270;
          v350[1] = v340;
          *((_QWORD *)v350 + 2) = v342;
          *((_QWORD *)v350 + 3) = v344;
          *((_QWORD *)v350 + 4) = v346;
          *((_BYTE *)v350 + 40) = 0;
          sub_10000A020(v347, &qword_10028B2E8);
          sub_1000110A4((uint64_t)v348, (uint64_t)v279, &qword_1002905E0);
          v351 = v429;
          sub_10000B074((uint64_t)v279, (uint64_t)v429, &qword_1002905E0);
          v352 = v351;
          v353 = v428;
          v354 = 0;
LABEL_39:
          swift_storeEnumTagMultiPayload(v352, v353, v354);
          v369 = sub_10001B6DC(&qword_100290660, &qword_1002905E0, (void (*)(void))sub_1000B8514);
          v370 = (uint64_t)v426;
          _ConditionalContent<>.init(storage:)(v351, v349, v349, v369, v369);
          sub_10000A020((uint64_t)v279, &qword_1002905E0);
          sub_1000110A4(v370, v114, &qword_1002905E8);
          v115 = 0;
          goto LABEL_40;
        }
      }
      else
      {
        v332 = v396;
        sub_10000B074((uint64_t)v275, (uint64_t)v396, &qword_10028CE40);
        v333 = v277(v276, 1, v272);
        v114 = (uint64_t)v438;
        if (v333 != 1)
        {
          v336 = v397;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v273 + 32))(v397, v276, v272);
          v337 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
          v338 = dispatch thunk of static Equatable.== infix(_:_:)(v332, v336, v272, v337);
          v339 = *(void (**)(_BYTE *, uint64_t))(v273 + 8);
          v339(v336, v272);
          sub_10000A020((uint64_t)v413, &qword_10028CE40);
          sub_10000A020((uint64_t)v414, &qword_10028CE40);
          v339(v332, v272);
          sub_10000A020((uint64_t)v275, &qword_10028CE40);
          v280 = 18.0;
          v279 = v409;
          if ((v338 & 1) != 0)
            goto LABEL_35;
LABEL_34:
          v280 = 72.0;
          goto LABEL_35;
        }
        sub_10000A020((uint64_t)v413, &qword_10028CE40);
        sub_10000A020((uint64_t)v414, &qword_10028CE40);
        (*(void (**)(_BYTE *, uint64_t))(v273 + 8))(v332, v272);
        v279 = v409;
      }
      sub_10000A020((uint64_t)v275, &qword_10028CFE8);
      goto LABEL_34;
    }
    v281 = *(_QWORD *)(v68 + 40);
    v282 = swift_getKeyPath(&unk_1001ED090);
    v283 = swift_getKeyPath(&unk_1001ED0B8);
    swift_retain(v281);
    static Published.subscript.getter(&v454, v284, v282);
    swift_release(v281);
    swift_release(v282);
    swift_release(v283);
    v285 = v454;
    if ((unint64_t)v454 >> 62)
    {
      if ((uint64_t)v454 < 0)
        v378 = v454;
      else
        v378 = v454 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v454);
      v286 = _CocoaArrayWrapper.endIndex.getter(v378);
      swift_bridgeObjectRelease(v285);
    }
    else
    {
      v286 = *(_QWORD *)((v454 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v285);
    v287 = v286 != 0;
    v288 = type metadata accessor for SharedTranslationOptions(0);
    v289 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
    v290 = EnvironmentObject.init()(v288, v289);
    v292 = v291;
    v293 = type metadata accessor for SceneContext(0);
    v294 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    v295 = EnvironmentObject.init()(v293, v294);
    v297 = v296;
    v298 = (int *)v420;
    v299 = (uint64_t)v398;
    Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
    Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
    *(_QWORD *)v299 = v290;
    *(_QWORD *)(v299 + 8) = v292;
    *(_QWORD *)(v299 + 16) = v295;
    *(_QWORD *)(v299 + 24) = v297;
    *(_OWORD *)(v299 + 32) = xmmword_1001EB430;
    *(_BYTE *)(v299 + 48) = 0;
    *(_BYTE *)(v299 + 49) = v287;
    *(_BYTE *)(v299 + 50) = 0;
    v300 = v299 + v298[12];
    *(_OWORD *)(v300 + 48) = 0u;
    *(_OWORD *)(v300 + 64) = 0u;
    *(_OWORD *)(v300 + 16) = 0u;
    *(_OWORD *)(v300 + 32) = 0u;
    *(_OWORD *)v300 = 0u;
    *(_QWORD *)(v300 + 80) = 0;
    *(_QWORD *)(v299 + v298[13]) = _swiftEmptyArrayStorage;
    v301 = (_QWORD *)(v299 + v298[14]);
    *v301 = 0;
    v301[1] = 0;
    v302 = v299 + v298[15];
    LOBYTE(v442) = 0;
    State.init(wrappedValue:)(&v454, &v442, &type metadata for Bool);
    v303 = *((_QWORD *)&v454 + 1);
    *(_BYTE *)v302 = v454;
    *(_QWORD *)(v302 + 8) = v303;
    v304 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001001FAD80);
    v431 = v305;
    v432 = v304;
    LODWORD(v419) = v306;
    *(_QWORD *)&v430 = v307;
    v308 = EnvironmentObject.projectedValue.getter(*(_QWORD *)(v415 + *(int *)(v439 + 40)), *(_QWORD *)(v415 + *(int *)(v439 + 40) + 8), v293, v294);
    v309 = swift_getKeyPath(&unk_1001ED0D8);
    EnvironmentObject.Wrapper.subscript.getter(&v454, v309, v308, v294);
    swift_release(v309);
    v310 = swift_release(v308);
    v417 = v382;
    v311 = v454;
    v312 = v455;
    __chkstk_darwin(v310);
    v313 = sub_100006DF4(&qword_10028F4F8);
    v461._object = (void *)sub_100007D5C(&qword_10028F500, type metadata accessor for MoreOptionsMenu, (uint64_t)&unk_1001F2078);
    v381 = sub_100012334(&qword_10028F508, &qword_10028F4F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v379 = v298;
    v380 = v313;
    v314 = v399;
    v315 = v431;
    v316 = v430;
    ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t (*)@<X0>(char *@<X8>), int **))View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:))(v432, v431, v419 & 1, v430, v311, *((_QWORD *)&v311 + 1), v312, 1, sub_1000B84DC, &v379);
    swift_bridgeObjectRelease(v316);
    swift_bridgeObjectRelease(v315);
    swift_release(*((_QWORD *)&v311 + 1));
    swift_release(v311);
    v317 = sub_100032DAC(v299, type metadata accessor for MoreOptionsMenu);
    v318 = static Alignment.trailing.getter(v317);
    v320 = sub_100018FE4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v418, 0.0, 1, 0.0, 1, v318, v319);
    v321 = (*(uint64_t (**)(_BYTE *, uint64_t, double))(v421 + 8))(v314, v422, v320);
    v322 = static Edge.Set.trailing.getter(v321);
    v323 = v412;
    sub_1000D58EC((_QWORD *)v412);
    v325 = v424;
    v324 = v425;
    v326 = v411;
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v424 + 104))(v411, enum case for UserInterfaceSizeClass.compact(_:), v425);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v325 + 56))(v326, 0, 1, v324);
    v327 = v407;
    v328 = (uint64_t)&v407[*(int *)(v423 + 48)];
    sub_10000B074(v323, (uint64_t)v407, &qword_10028CE40);
    sub_10000B074(v326, v328, &qword_10028CE40);
    v329 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v325 + 48);
    if (v329((uint64_t)v327, 1, v324) == 1)
    {
      sub_10000A020(v326, &qword_10028CE40);
      sub_10000A020(v323, &qword_10028CE40);
      v330 = v329(v328, 1, v324);
      v114 = (uint64_t)v438;
      if (v330 == 1)
      {
        sub_10000A020((uint64_t)v327, &qword_10028CE40);
        v331 = 18.0;
LABEL_38:
        v359 = EdgeInsets.init(_all:)(v331);
        v361 = v360;
        v363 = v362;
        v365 = v364;
        v366 = v418;
        v367 = v403;
        sub_10000B074(v418, (uint64_t)v403, &qword_10028B2E8);
        v349 = v427;
        v368 = (double *)&v367[*(int *)(v427 + 36)];
        *(_BYTE *)v368 = v322;
        v368[1] = v359;
        *((_QWORD *)v368 + 2) = v361;
        *((_QWORD *)v368 + 3) = v363;
        *((_QWORD *)v368 + 4) = v365;
        *((_BYTE *)v368 + 40) = 0;
        sub_10000A020(v366, &qword_10028B2E8);
        v279 = v404;
        sub_1000110A4((uint64_t)v367, (uint64_t)v404, &qword_1002905E0);
        v351 = v429;
        sub_10000B074((uint64_t)v279, (uint64_t)v429, &qword_1002905E0);
        v352 = v351;
        v353 = v428;
        v354 = 1;
        goto LABEL_39;
      }
    }
    else
    {
      v334 = v395;
      sub_10000B074((uint64_t)v327, (uint64_t)v395, &qword_10028CE40);
      v335 = v329(v328, 1, v324);
      v114 = (uint64_t)v438;
      if (v335 != 1)
      {
        v355 = v397;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v325 + 32))(v397, v328, v324);
        v356 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
        v357 = dispatch thunk of static Equatable.== infix(_:_:)(v334, v355, v324, v356);
        v358 = *(void (**)(_BYTE *, uint64_t))(v325 + 8);
        v358(v355, v324);
        sub_10000A020(v411, &qword_10028CE40);
        sub_10000A020(v412, &qword_10028CE40);
        v358(v334, v324);
        sub_10000A020((uint64_t)v327, &qword_10028CE40);
        v331 = 18.0;
        if ((v357 & 1) != 0)
          goto LABEL_38;
LABEL_37:
        v331 = 72.0;
        goto LABEL_38;
      }
      sub_10000A020(v411, &qword_10028CE40);
      sub_10000A020(v412, &qword_10028CE40);
      (*(void (**)(_BYTE *, uint64_t))(v325 + 8))(v334, v324);
    }
    sub_10000A020((uint64_t)v327, &qword_10028CFE8);
    goto LABEL_37;
  }
LABEL_10:
  v115 = 1;
LABEL_40:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v434 + 56))(v114, v115, 1, v435);
  v371 = v440;
  v372 = v433;
  sub_10000B074((uint64_t)v440, (uint64_t)v433, &qword_100290618);
  v373 = v436;
  sub_10000B074(v114, (uint64_t)v436, &qword_1002905F0);
  v374 = v437;
  sub_10000B074((uint64_t)v372, v437, &qword_100290618);
  v375 = sub_100006DF4(&qword_100290658);
  sub_10000B074((uint64_t)v373, v374 + *(int *)(v375 + 48), &qword_1002905F0);
  sub_10000A020(v114, &qword_1002905F0);
  sub_10000A020((uint64_t)v371, &qword_100290618);
  sub_10000A020((uint64_t)v373, &qword_1002905F0);
  return sub_10000A020((uint64_t)v372, &qword_100290618);
}

void sub_1000B6DD0()
{
  uint64_t v0;
  void *v1;
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  id v5;
  int v6;
  id v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 8);
  KeyPath = swift_getKeyPath(&unk_1001ED000);
  v3 = swift_getKeyPath(&unk_1001ED028);
  v4 = v1;
  static Published.subscript.getter(&v8, v4, KeyPath);

  swift_release(KeyPath);
  swift_release(v3);
  if (v8 == 1)
  {
    v5 = v4;
    sub_100090758(0, 0, 1);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v0 + 48);
    v7 = v4;
    sub_10009005C(v6, 1);
  }

}

uint64_t sub_1000B6E90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;

  v63 = a4;
  v64 = a5;
  v58 = a2;
  v59 = a3;
  v55 = a1;
  v65 = a6;
  v7 = type metadata accessor for FaceToFaceHalfView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028E080);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_10028AEB8);
  v61 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v62 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v60 = (char *)&v50 - v18;
  v19 = __chkstk_darwin(v17);
  v57 = (char *)&v50 - v20;
  __chkstk_darwin(v19);
  v56 = (char *)&v50 - v21;
  v22 = LocalizedStringKey.init(stringLiteral:)(0x5241454C43, 0xE500000000000000);
  v52 = v23;
  v53 = v22;
  v25 = v24;
  v51 = v26;
  static ButtonRole.destructive.getter(v22);
  v27 = type metadata accessor for ButtonRole(0);
  v54 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v54(v13, 0, 1, v27);
  sub_1000B81D0(a1, (uint64_t)v10);
  v28 = *(unsigned __int8 *)(v8 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = v29 + v9;
  v31 = v28 | 7;
  v32 = swift_allocObject(v58, v30, v28 | 7);
  sub_1000B8218((uint64_t)v10, v32 + v29);
  Button<>.init(_:role:action:)(v53, v52, v25 & 1, v51, v13, v59, v32);
  v59 = LocalizedStringKey.init(stringLiteral:)(0x4C45434E4143, 0xE600000000000000);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  static ButtonRole.cancel.getter();
  v54(v13, 0, 1, v27);
  sub_1000B81D0(v55, (uint64_t)v10);
  v39 = swift_allocObject(v63, v30, v31);
  sub_1000B8218((uint64_t)v10, v39 + v29);
  v40 = v57;
  Button<>.init(_:role:action:)(v59, v34, v36 & 1, v38, v13, v64, v39);
  v41 = v60;
  v42 = v61;
  v43 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  v44 = v56;
  v43(v60, v56, v14);
  v45 = v62;
  v43(v62, v40, v14);
  v46 = v65;
  v43(v65, v41, v14);
  v47 = sub_100006DF4(&qword_10028F518);
  v43(&v46[*(int *)(v47 + 48)], v45, v14);
  v48 = *(void (**)(char *, uint64_t))(v42 + 8);
  v48(v40, v14);
  v48(v44, v14);
  v48(v45, v14);
  return ((uint64_t (*)(char *, uint64_t))v48)(v41, v14);
}

uint64_t sub_1000B71D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  sub_100023AF4((_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v2);
  KeyPath = swift_getKeyPath(&unk_1001ED1F8);
  v5 = swift_getKeyPath(&unk_1001ED220);
  swift_retain(v1);
  static Published.subscript.getter(&v11, v6, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  v7 = v12;
  dispatch thunk of TranslationStore.clearHistory(sessionID:completion:)(v11, v12, nullsub_1, 0, v2, v3);
  swift_bridgeObjectRelease(v7);
  v8 = swift_getKeyPath(&unk_1001ED090);
  v9 = swift_getKeyPath(&unk_1001ED0B8);
  v11 = _swiftEmptyArrayStorage;
  swift_retain(v1);
  static Published.subscript.setter(&v11, v1, v8, v9);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  return swift_release(v1);
}

uint64_t sub_1000B730C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for FaceToFaceHalfView(0) + 40));
  v2 = *v1;
  if (*v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001ED0D8);
    v4 = swift_getKeyPath(&unk_1001ED1D8);
    v9 = 0;
    swift_retain(v2);
    return static Published.subscript.setter(&v9, v2, KeyPath, v4);
  }
  else
  {
    v6 = v1[1];
    v7 = type metadata accessor for SceneContext(0);
    v8 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B73D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t (*v36)();
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  unint64_t v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  int v60;
  double v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)();
  double v105[3];
  uint64_t v106;
  uint64_t (*v107)();
  uint64_t v108;
  char v109;
  uint64_t (*v110)();

  v91 = type metadata accessor for UserInterfaceSizeClass(0);
  v96 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v86 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v95);
  v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028CE40);
  v8 = __chkstk_darwin(v7);
  v87 = (uint64_t)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v99 = (uint64_t)&v82 - v11;
  __chkstk_darwin(v10);
  v94 = (char **)((char *)&v82 - v12);
  v92 = type metadata accessor for FaceToFaceHalfView(0);
  v13 = *(_QWORD *)(v92 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v92);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100006DF4(&qword_1002905A8);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100006DF4(&qword_1002905B0);
  __chkstk_darwin(v88);
  v93 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4(&qword_1002905B8);
  v101 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v98 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v97 = (uint64_t)&v82 - v22;
  v23 = sub_100006DF4(&qword_1002905C0);
  v24 = __chkstk_darwin(v23);
  v102 = (uint64_t)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v82 - v27;
  v100 = static Color.clear.getter(v26);
  v29 = a1;
  v30 = *(_BYTE *)(a1 + 48);
  v31 = 1;
  if ((v30 & 1) == 0)
  {
    v82 = v28;
    v83 = v19;
    v85 = a2;
    sub_1000B81D0(v29, (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    v32 = *(unsigned __int8 *)(v13 + 80);
    v33 = (v32 + 16) & ~v32;
    v34 = swift_allocObject(&unk_100268A48, v33 + v14, v32 | 7);
    sub_1000B8218((uint64_t)v15, v34 + v33);
    LOBYTE(v105[0]) = 0;
    State.init(wrappedValue:)(&v106, v105, &type metadata for Bool);
    v35 = v106;
    v84 = v6;
    v36 = v107;
    LOWORD(v106) = 257;
    BYTE2(v106) = 1;
    v107 = sub_1000B825C;
    v108 = v34;
    v109 = v35;
    v110 = v36;
    v37 = (uint64_t *)(v29 + *(int *)(v92 + 48));
    v39 = (uint64_t (*)())v37[1];
    v103 = *v37;
    v38 = v103;
    v104 = v39;
    v40 = sub_100006DF4(&qword_10028B260);
    State.projectedValue.getter(v105, v40);
    v42 = v105[0];
    v41 = v105[1];
    v43 = v105[2];
    v44 = sub_1000B8294();
    View.bindGeometry(to:reader:)(*(_QWORD *)&v42, *(_QWORD *)&v41, sub_10001AA2C, 0, &type metadata for LanguageFlipperView, v44, v43);
    swift_release(v34);
    swift_release(*(_QWORD *)&v41);
    swift_release(*(_QWORD *)&v42);
    v45 = v36;
    v46 = (uint64_t)v84;
    swift_release(v45);
    v106 = v38;
    v107 = v39;
    v47 = v91;
    State.wrappedValue.getter(v105);
    v48 = v105[0] * -0.5;
    v49 = v89;
    v50 = v93;
    v51 = v90;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v93, v17, v90);
    v52 = &v50[*(int *)(v88 + 36)];
    *(_QWORD *)v52 = 0;
    *((double *)v52 + 1) = v48;
    v53 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v17, v51);
    LODWORD(v90) = static Edge.Set.horizontal.getter(v53);
    v54 = v94;
    sub_1000D58EC(v94);
    v55 = v96;
    v56 = v99;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v96 + 104))(v99, enum case for UserInterfaceSizeClass.compact(_:), v47);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v47);
    v57 = v46 + *(int *)(v95 + 48);
    sub_10000B074((uint64_t)v54, v46, &qword_10028CE40);
    sub_10000B074(v56, v57, &qword_10028CE40);
    v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
    v59 = (uint64_t)v50;
    if (v58(v46, 1, v47) == 1)
    {
      sub_10000A020(v56, &qword_10028CE40);
      sub_10000A020((uint64_t)v54, &qword_10028CE40);
      v60 = v58(v57, 1, v47);
      a2 = v85;
      v28 = v82;
      if (v60 == 1)
      {
        sub_10000A020(v46, &qword_10028CE40);
        v61 = 18.0;
LABEL_10:
        v67 = EdgeInsets.init(_all:)(v61);
        v69 = v68;
        v71 = v70;
        v73 = v72;
        v74 = v98;
        sub_10000B074(v59, v98, &qword_1002905B0);
        v19 = v83;
        v75 = v74 + *(int *)(v83 + 36);
        *(_BYTE *)v75 = v90;
        *(double *)(v75 + 8) = v67;
        *(_QWORD *)(v75 + 16) = v69;
        *(_QWORD *)(v75 + 24) = v71;
        *(_QWORD *)(v75 + 32) = v73;
        *(_BYTE *)(v75 + 40) = 0;
        sub_10000A020(v59, &qword_1002905B0);
        v76 = v74;
        v77 = v97;
        sub_1000110A4(v76, v97, &qword_1002905B8);
        sub_1000110A4(v77, (uint64_t)v28, &qword_1002905B8);
        v31 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      v62 = v87;
      sub_10000B074(v46, v87, &qword_10028CE40);
      v63 = v58(v57, 1, v47);
      v28 = v82;
      if (v63 != 1)
      {
        v64 = v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v86, v57, v47);
        v65 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
        LODWORD(v95) = dispatch thunk of static Equatable.== infix(_:_:)(v62, v64, v47, v65);
        v66 = *(void (**)(char *, uint64_t))(v55 + 8);
        v66(v64, v47);
        sub_10000A020(v99, &qword_10028CE40);
        sub_10000A020((uint64_t)v54, &qword_10028CE40);
        v66((char *)v62, v47);
        sub_10000A020(v46, &qword_10028CE40);
        v61 = 18.0;
        a2 = v85;
        if ((v95 & 1) != 0)
          goto LABEL_10;
LABEL_9:
        v61 = 72.0;
        goto LABEL_10;
      }
      sub_10000A020(v56, &qword_10028CE40);
      sub_10000A020((uint64_t)v54, &qword_10028CE40);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v62, v47);
      a2 = v85;
    }
    sub_10000A020(v46, &qword_10028CFE8);
    goto LABEL_9;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v28, v31, 1, v19);
  v78 = v102;
  sub_10000B074((uint64_t)v28, v102, &qword_1002905C0);
  v79 = v100;
  *a2 = v100;
  v80 = sub_100006DF4(&qword_1002905C8);
  sub_10000B074(v78, (uint64_t)a2 + *(int *)(v80 + 48), &qword_1002905C0);
  swift_retain(v79);
  sub_10000A020((uint64_t)v28, &qword_1002905C0);
  sub_10000A020(v78, &qword_1002905C0);
  return swift_release(v79);
}

uint64_t sub_1000B7C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t KeyPath;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  id v32;
  void (*v33)(char *, uint64_t);
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD aBlock[5];
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)aBlock - v8;
  __chkstk_darwin(v7);
  v11 = (char *)aBlock - v10;
  v12 = type metadata accessor for FaceToFaceHalfView(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = String._bridgeToObjectiveC()();
  sub_1000B81D0(v1, (uint64_t)v15);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_100268A70, v18 + v14, v17 | 7);
  sub_1000B8218((uint64_t)v15, v19 + v18);
  aBlock[4] = sub_1000B82DC;
  v40 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100170878;
  aBlock[3] = &unk_100268A88;
  v20 = _Block_copy(aBlock);
  swift_release(v40);
  AnalyticsSendEventLazy(v16, v20);
  _Block_release(v20);

  v21 = *(void **)(v1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001ECF70);
  v23 = swift_getKeyPath(&unk_1001ECF98);
  v24 = v21;
  static Published.subscript.getter(v11, v24, KeyPath);

  swift_release(KeyPath);
  swift_release(v23);
  v25 = *(void **)(v1 + 8);
  v26 = swift_getKeyPath(&unk_1001ECFB8);
  v27 = swift_getKeyPath(&unk_1001ECFE0);
  v28 = v25;
  static Published.subscript.getter(v9, v28, v26);

  swift_release(v26);
  swift_release(v27);
  v29 = swift_getKeyPath(&unk_1001ECF70);
  v30 = swift_getKeyPath(&unk_1001ECF98);
  v31 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v31(v6, v9, v2);
  v32 = v28;
  static Published.subscript.setter(v6, v32, v29, v30);
  sub_10008C570();
  v33 = *(void (**)(char *, uint64_t))(v3 + 8);
  v33(v9, v2);

  v34 = *(void **)(v1 + 8);
  v31(v9, v11, v2);
  v35 = swift_getKeyPath(&unk_1001ECFB8);
  v36 = swift_getKeyPath(&unk_1001ECFE0);
  v31(v6, v9, v2);
  v37 = v34;
  static Published.subscript.setter(v6, v37, v35, v36);
  sub_10008C5A8();
  v33(v9, v2);

  return ((uint64_t (*)(char *, uint64_t))v33)(v11, v2);
}

unint64_t sub_1000B7F48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t inited;
  void *v11;
  uint64_t KeyPath;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, uint64_t);
  NSString v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  _BYTE v29[128];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v29[-v7];
  v9 = sub_100006DF4(&qword_10028DFD0);
  inited = swift_initStackObject(v9, v29);
  *(_OWORD *)(inited + 16) = xmmword_1001E6660;
  *(_QWORD *)(inited + 32) = 0x6D614E746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  sub_1000B8330();
  *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("swapLanguages", 13, 2);
  *(_QWORD *)(inited + 56) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  *(_QWORD *)(inited + 72) = NSString.init(stringLiteral:)("app/conversation/face_to_face", 29, 2);
  strcpy((char *)(inited + 80), "sourceLocale");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  v11 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001ECF70);
  v13 = swift_getKeyPath(&unk_1001ECF98);
  v14 = v11;
  static Published.subscript.getter(v8, v14, KeyPath);

  swift_release(KeyPath);
  v15 = swift_release(v13);
  Locale.ltIdentifier.getter(v15);
  v17 = v16;
  v18 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v18(v8, v2);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(inited + 96) = v19;
  strcpy((char *)(inited + 104), "targetLocale");
  *(_BYTE *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  v20 = *(void **)(a1 + 8);
  v21 = swift_getKeyPath(&unk_1001ECFB8);
  v22 = swift_getKeyPath(&unk_1001ECFE0);
  v23 = v20;
  static Published.subscript.getter(v6, v23, v21);

  swift_release(v21);
  v24 = swift_release(v22);
  Locale.ltIdentifier.getter(v24);
  v26 = v25;
  v18(v6, v2);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(inited + 120) = v27;
  return sub_1001A4D08(inited);
}

uint64_t sub_1000B81D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FaceToFaceHalfView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B8218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FaceToFaceHalfView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B825C()
{
  type metadata accessor for FaceToFaceHalfView(0);
  return sub_1000B7C08();
}

unint64_t sub_1000B8294()
{
  unint64_t result;

  result = qword_1002905D0;
  if (!qword_1002905D0)
  {
    result = swift_getWitnessTable(&unk_1001EFB54, &type metadata for LanguageFlipperView);
    atomic_store(result, (unint64_t *)&qword_1002905D0);
  }
  return result;
}

unint64_t sub_1000B82DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FaceToFaceHalfView(0) - 8) + 80);
  return sub_1000B7F48(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000B8308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B8318(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000B8330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AA68;
  if (!qword_10028AA68)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028AA68);
  }
  return result;
}

void sub_1000B8380()
{
  type metadata accessor for FaceToFaceHalfView(0);
  sub_1000B6DD0();
}

uint64_t sub_1000B83BC()
{
  return type metadata accessor for FaceToFaceHalfView(0);
}

unint64_t sub_1000B83C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100290630;
  if (!qword_100290630)
  {
    v1 = sub_1000070BC(&qword_100290608);
    v2[0] = &type metadata for SpeakButton;
    v2[1] = &type metadata for AudioDeviceTip;
    v2[2] = sub_1000B8464();
    v2[3] = sub_100012490();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.popoverTip<A>(_:arrowEdge:action:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290630);
  }
  return result;
}

unint64_t sub_1000B8464()
{
  unint64_t result;

  result = qword_100290638;
  if (!qword_100290638)
  {
    result = swift_getWitnessTable(&unk_1001F4430, &type metadata for SpeakButton);
    atomic_store(result, (unint64_t *)&qword_100290638);
  }
  return result;
}

uint64_t sub_1000B84A8()
{
  return sub_10001B6DC(&qword_100290648, &qword_100290650, (void (*)(void))sub_1000B8464);
}

uint64_t sub_1000B84DC@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B6E90(*(_QWORD *)(v1 + 16), (uint64_t)&unk_100268BB0, (uint64_t)sub_1000B876C, (uint64_t)&unk_100268BD8, (uint64_t)sub_1000B8774, a1);
}

unint64_t sub_1000B8514()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100290668;
  if (!qword_100290668)
  {
    v1 = sub_1000070BC(&qword_10028B2E8);
    v2[0] = type metadata accessor for MoreOptionsMenu(255);
    v2[1] = sub_1000070BC(&qword_10028F4F8);
    v2[2] = sub_100007D5C(&qword_10028F500, type metadata accessor for MoreOptionsMenu, (uint64_t)&unk_1001F2078);
    v2[3] = sub_100012334(&qword_10028F508, &qword_10028F4F8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290668);
  }
  return result;
}

uint64_t sub_1000B861C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B6E90(*(_QWORD *)(v1 + 16), (uint64_t)&unk_100268B60, (uint64_t)sub_1000B876C, (uint64_t)&unk_100268B88, (uint64_t)sub_1000B8774, a1);
}

uint64_t sub_1000B8654()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B867C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 152);
  v12 = *(_OWORD *)(a1 + 168);
  v10 = *(void **)(a1 + 184);
  swift_release(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10002BA44(v4, v5);
  sub_10002BA44(v6, v7);
  swift_bridgeObjectRelease(v8);
  sub_10001613C(v19, v9, v18, v17, v16, v15, v14, v13, v12, *((void **)&v12 + 1), v10);
  return a1;
}

uint64_t sub_1000B8778()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FaceToFaceHalfView(0) - 8) + 80);
  return sub_1000B730C(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000B87B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FaceToFaceHalfView(0) - 8) + 80);
  return sub_1000B71D8(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000B87E8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for FaceToFaceHalfView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40));
  v7 = (_QWORD *)(v0 + v4 + v1[8]);
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v6 + v1[9]));
  swift_release(*(_QWORD *)(v6 + v1[10]));
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000B890C()
{
  return sub_10001B6DC(&qword_100290670, &qword_1002905A0, (void (*)(void))sub_1000B8940);
}

unint64_t sub_1000B8940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290678;
  if (!qword_100290678)
  {
    v1 = sub_1000070BC(&qword_100290570);
    sub_1000B89C4();
    sub_100012334(&qword_100290690, &qword_100290598, (uint64_t)&protocol conformance descriptor for _InsetViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290678);
  }
  return result;
}

unint64_t sub_1000B89C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290680;
  if (!qword_100290680)
  {
    v1 = sub_1000070BC(&qword_100290578);
    sub_100007D5C(&qword_10028EE88, type metadata accessor for ConversationList, (uint64_t)&unk_1001EA9C0);
    sub_100012334(&qword_100290688, &qword_100290580, (uint64_t)&protocol conformance descriptor for _InsetViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290680);
  }
  return result;
}

uint64_t destroy for FaceToFacePresentation(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for FaceToFacePresentation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (void *)a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain(v3);
  v7 = v5;
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for FaceToFacePresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = (uint64_t)v6;
  v8 = v6;

  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v9 = a1[4];
  v10 = a2[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v9);
  return a1;
}

uint64_t *assignWithTake for FaceToFacePresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = (void *)a1[2];
  a1[1] = a2[1];
  a1[2] = v5;

  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v7 = a1[4];
  a1[4] = a2[4];
  swift_release(v7);
  return a1;
}

ValueMetadata *type metadata accessor for FaceToFacePresentation()
{
  return &type metadata for FaceToFacePresentation;
}

uint64_t sub_1000B8BD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100212F00, 1);
}

uint64_t sub_1000B8BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  id v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[5];
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  _OWORD v64[14];

  v3 = (uint64_t *)v2;
  v48 = a1;
  v50 = a2;
  v47 = sub_100006DF4(&qword_100290698);
  __chkstk_darwin(v47);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100006DF4(&qword_1002906A0);
  __chkstk_darwin(v49);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v2 + 16);
  v56 = *(_OWORD *)(v2 + 24);
  v64[0] = *(_OWORD *)(v2 + 24);
  v9 = v8;
  sub_100006DF4(&qword_1002906A8);
  State.wrappedValue.getter(v57);
  v10 = v57[0];
  v11 = type metadata accessor for ConversationContext(0);
  v45 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v46 = v11;
  v12 = EnvironmentObject.init()(v11, v45);
  v14 = v13;
  v15 = type metadata accessor for SceneContext(0);
  v16 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v17 = EnvironmentObject.init()(v15, v16);
  v19 = v18;
  v20 = static Alignment.center.getter(v17);
  v22 = _FrameLayout.init(width:height:alignment:)(&v51, 0, 1, 0, 0, v20, v21);
  v57[0] = v12;
  v57[1] = v14;
  v57[2] = v17;
  v57[3] = v19;
  v57[4] = v9;
  v58 = v10;
  v59 = v51;
  v60 = v52;
  v61 = v53;
  v62 = v54;
  v63 = v55;
  v23 = static Alignment.center.getter(v22);
  sub_100019218(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v64, 0.0, 1, 0.0, 1, v23, v24);

  swift_release(v12);
  v25 = swift_release(v17);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  v29 = sub_100006DF4(&qword_1002906B0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v5, v48, v29);
  v30 = &v5[*(int *)(v47 + 36)];
  v31 = v64[11];
  *((_OWORD *)v30 + 10) = v64[10];
  *((_OWORD *)v30 + 11) = v31;
  *((_OWORD *)v30 + 12) = v64[12];
  v32 = v64[7];
  *((_OWORD *)v30 + 6) = v64[6];
  *((_OWORD *)v30 + 7) = v32;
  v33 = v64[9];
  *((_OWORD *)v30 + 8) = v64[8];
  *((_OWORD *)v30 + 9) = v33;
  v34 = v64[3];
  *((_OWORD *)v30 + 2) = v64[2];
  *((_OWORD *)v30 + 3) = v34;
  v35 = v64[5];
  *((_OWORD *)v30 + 4) = v64[4];
  *((_OWORD *)v30 + 5) = v35;
  v36 = v64[1];
  *(_OWORD *)v30 = v64[0];
  *((_OWORD *)v30 + 1) = v36;
  *((_QWORD *)v30 + 26) = v26;
  *((_QWORD *)v30 + 27) = v28;
  v37 = *v3;
  if (*v3)
  {
    swift_retain(*v3);
    v38 = sub_10013B808((uint64_t)v9, v37);
    swift_release(v37);
    v39 = swift_allocObject(&unk_100268D20, 56, 7);
    v40 = *((_OWORD *)v3 + 1);
    *(_OWORD *)(v39 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(v39 + 32) = v40;
    *(_QWORD *)(v39 + 48) = v3[4];
    sub_1000B9010((uint64_t)v5, (uint64_t)v7);
    v41 = v49;
    *(_QWORD *)&v7[*(int *)(v49 + 52)] = v38;
    v42 = &v7[*(int *)(v41 + 56)];
    *(_QWORD *)v42 = sub_1000B9008;
    *((_QWORD *)v42 + 1) = v39;
    v43 = v9;
    swift_retain(v37);
    sub_10001B1E0((uint64_t)&v56);
    sub_1000B9058((uint64_t)v5);
    return sub_1000B9098((uint64_t)v7, v50);
  }
  else
  {
    result = EnvironmentObject.error()(0, v3[1], v46, v45);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000B8F50(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v1 = *a1;
  v2 = sub_100006DF4(&qword_1002906A8);
  result = State.wrappedValue.getter(&v4);
  if (v4 != v1)
  {
    LOBYTE(v4) = v1;
    return (_QWORD *)State.wrappedValue.setter(&v4, v2);
  }
  return result;
}

uint64_t sub_1000B8FD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

_QWORD *sub_1000B9008(unsigned __int8 *a1)
{
  return sub_1000B8F50(a1);
}

uint64_t sub_1000B9010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100290698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B9058(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_100290698);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B9098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002906A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B90E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002906B8;
  if (!qword_1002906B8)
  {
    v1 = sub_1000070BC(&qword_1002906A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002906B8);
  }
  return result;
}

void destroy for FaceToFacePresenter(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 16));

}

uint64_t initializeWithCopy for FaceToFacePresenter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = (void *)a2[4];
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_retain(v3);
  swift_retain(v6);
  v8 = v7;
  return a1;
}

uint64_t *assignWithCopy for FaceToFacePresenter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = (void *)a2[4];
  v9 = (void *)a1[4];
  a1[4] = (uint64_t)v8;
  v10 = v8;

  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t *assignWithTake for FaceToFacePresenter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a2[4];
  v8 = (void *)a1[4];
  a1[3] = a2[3];
  a1[4] = v7;

  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for FaceToFacePresenter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceToFacePresenter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FaceToFacePresenter()
{
  return &type metadata for FaceToFacePresenter;
}

void sub_1000B9340(void *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  int v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  const void *v31;
  id v32;
  int v33;
  uint64_t v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t (**v40)();
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD aBlock[5];
  uint64_t v62;
  __int128 v63;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *((_QWORD *)v1 + 2);
  if (!v10)
  {
    v50 = *((_QWORD *)v1 + 3);
    v51 = type metadata accessor for SceneContext(0);
    v52 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    EnvironmentObject.error()(0, v50, v51, v52);
    __break(1u);
    goto LABEL_21;
  }
  KeyPath = swift_getKeyPath(&unk_1001ED3E0);
  v12 = swift_getKeyPath(&unk_1001ED408);
  swift_retain(v10);
  static Published.subscript.getter(aBlock, v13, KeyPath);
  swift_release(v10);
  swift_release(KeyPath);
  swift_release(v12);
  v14 = LOBYTE(aBlock[0]);
  if (*((_BYTE *)v2 + 40))
  {
    if ((aBlock[0] & 1) != 0)
    {
      v15 = objc_msgSend(a1, "presentedViewController");
      if (v15)
      {
        v16 = v15;
        v17 = type metadata accessor for FaceToFaceViewController();
        v18 = swift_dynamicCastClass(v16, v17);

        if (v18)
        {
          v19 = sub_10001D948();
          v58 = static OS_dispatch_queue.main.getter(v19);
          v63 = *v2;
          v20 = (void *)*((_QWORD *)v2 + 4);
          v21 = swift_allocObject(&unk_100268E38, 72, 7);
          v22 = v2[1];
          *(_OWORD *)(v21 + 16) = *v2;
          *(_OWORD *)(v21 + 32) = v22;
          *(_OWORD *)(v21 + 41) = *(__int128 *)((char *)v2 + 25);
          *(_QWORD *)(v21 + 64) = a1;
          aBlock[4] = sub_1000B9C34;
          v62 = v21;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100075908;
          aBlock[3] = &unk_100268E50;
          v57 = _Block_copy(aBlock);
          v23 = v62;
          swift_retain(v10);
          sub_100018680(&v63);
          v24 = v20;
          v25 = a1;
          v26 = swift_release(v23);
          static DispatchQoS.unspecified.getter(v26);
          aBlock[0] = _swiftEmptyArrayStorage;
          v27 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v28 = sub_100006DF4(&qword_10028AC30);
          v29 = sub_10000F778();
          dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v4, v27);
          v31 = v57;
          v30 = (void *)v58;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v57);
          _Block_release(v31);

          (*(void (**)(char *, uint64_t))(v60 + 8))(v6, v4);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v59);
        }
      }
    }
  }
  v32 = objc_msgSend(a1, "presentedViewController");

  if (v32)
    v33 = 0;
  else
    v33 = v14;
  if (v33 != 1)
    goto LABEL_13;
  v6 = (char *)*((_QWORD *)v2 + 4);
  v34 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2)
  {
LABEL_21:
    v53 = *((_QWORD *)v2 + 1);
    v54 = type metadata accessor for ConversationContext(0);
    v55 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    v56 = v6;
    EnvironmentObject.error()(0, v53, v54, v55);
    __break(1u);
    return;
  }
  v35 = objc_allocWithZone((Class)type metadata accessor for FaceToFaceViewController());
  swift_retain(v10);
  v36 = v6;
  swift_retain(v34);
  v37 = sub_1000B9E94(v36, v34, v10);
  objc_msgSend(v37, "setModalPresentationStyle:", 5);
  objc_msgSend(v37, "setModalTransitionStyle:", 2);
  v38 = swift_allocObject(&unk_100268E10, 72, 7);
  v39 = v2[1];
  *(_OWORD *)(v38 + 16) = *v2;
  *(_OWORD *)(v38 + 32) = v39;
  *(_OWORD *)(v38 + 41) = *(__int128 *)((char *)v2 + 25);
  *(_QWORD *)(v38 + 64) = a1;
  v40 = (uint64_t (**)())&v37[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_onCloseTap];
  v41 = *(_QWORD *)&v37[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_onCloseTap];
  v42 = *(_QWORD *)&v37[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_onCloseTap + 8];
  *v40 = sub_1000B9C24;
  v40[1] = (uint64_t (*)())v38;
  swift_retain(v10);
  v43 = a1;
  v44 = v36;
  swift_retain(v34);
  sub_10002BA44(v41, v42);
  objc_msgSend(v43, "presentViewController:animated:completion:", v37, 1, 0);

LABEL_13:
  v45 = objc_msgSend(a1, "presentedViewController");
  if (v45)
  {
    v46 = v45;
    v47 = type metadata accessor for FaceToFaceViewController();
    v48 = swift_dynamicCastClass(v46, v47);

    if (v48)
      v49 = v14;
    else
      v49 = 1;
    if ((v49 & 1) == 0)
      objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);
  }
}

uint64_t sub_1000B981C(__int128 *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void *v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001D948();
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = *a1;
  v30 = a1[1];
  v31 = v13;
  v14 = (void *)*((_QWORD *)a1 + 4);
  v15 = swift_allocObject(&unk_100268E88, 72, 7);
  v16 = a1[1];
  *(_OWORD *)(v15 + 16) = *a1;
  *(_OWORD *)(v15 + 32) = v16;
  *(_OWORD *)(v15 + 41) = *(__int128 *)((char *)a1 + 25);
  *(_QWORD *)(v15 + 64) = a2;
  aBlock[4] = sub_1000B9CF4;
  v29 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100268EA0;
  v17 = _Block_copy(aBlock);
  v18 = v29;
  sub_100018680(&v31);
  sub_100018680(&v30);
  v19 = v14;
  v20 = a2;
  v21 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100006DF4(&qword_10028AC30);
  v24 = sub_10000F778();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

id sub_1000B9A38(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    KeyPath = swift_getKeyPath(&unk_1001ED3E0);
    v5 = swift_getKeyPath(&unk_1001ED408);
    v10 = 0;
    swift_retain(v2);
    static Published.subscript.setter(&v10, v2, KeyPath, v5);
    return objc_msgSend(a2, "dismissViewControllerAnimated:completion:", 1, 0);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = type metadata accessor for SceneContext(0);
    v9 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = (id)EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B9B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000B9CA8();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000B9B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000B9CA8();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000B9BAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B9CA8();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000B9BD4()
{
  unint64_t result;

  result = qword_1002906C0;
  if (!qword_1002906C0)
  {
    result = swift_getWitnessTable(&unk_1001ED314, &type metadata for FaceToFacePresenter);
    atomic_store(result, (unint64_t *)&qword_1002906C0);
  }
  return result;
}

uint64_t sub_1000B9C24()
{
  uint64_t v0;

  return sub_1000B981C((__int128 *)(v0 + 16), *(void **)(v0 + 64));
}

id sub_1000B9C34()
{
  uint64_t v0;

  return sub_1000B9A38(v0 + 16, *(void **)(v0 + 64));
}

uint64_t sub_1000B9C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B9C60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B9C6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_1000B9CA8()
{
  unint64_t result;

  result = qword_1002906C8;
  if (!qword_1002906C8)
  {
    result = swift_getWitnessTable(&unk_1001ED364, &type metadata for FaceToFacePresenter);
    atomic_store(result, (unint64_t *)&qword_1002906C8);
  }
  return result;
}

id sub_1000B9CF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController____lazy_storage___closeButton;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController____lazy_storage___closeButton);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController____lazy_storage___closeButton);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 7);
    objc_msgSend(v4, "addTarget:action:forControlEvents:", v0, "closeButtonPressed", 0x2000);
    v3 = v4;
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAccessibilityIdentifier:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

uint64_t sub_1000B9DD0()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v1 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2 != (id)1)
    return 1;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_conversationContext);
  KeyPath = swift_getKeyPath(&unk_1001ED498);
  v5 = swift_getKeyPath(&unk_1001ED4C0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

char *sub_1000B9E94(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  objc_class *v20;
  id v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37[3];
  objc_super v38;

  v7 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_1002907A0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_1002907A8);
  v36 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController____lazy_storage___closeButton] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint] = 0;
  v17 = v3;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v18 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v17[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_subscriptions] = v18;
  *(_QWORD *)&v17[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_transitionAnimationDuration] = 0x3FD0000000000000;
  *(_QWORD *)&v17[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_speakButtonMinimumBottomPadding] = 0x4040000000000000;
  v19 = &v17[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_onCloseTap];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_viewModel] = a1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_conversationContext] = a2;
  *(_QWORD *)&v17[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sceneContext] = a3;
  v35 = a1;
  swift_retain(a2);
  swift_retain(a3);

  v20 = (objc_class *)type metadata accessor for FaceToFaceViewController();
  v38.receiver = v17;
  v38.super_class = v20;
  v21 = objc_msgSendSuper2(&v38, "initWithNibName:bundle:", 0, 0);
  v34 = a3;
  v22 = v21;
  swift_beginAccess(a2 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__rootWindowSafeAreaInsets, v37, 33, 0);
  v23 = v22;
  v24 = sub_100006DF4(&qword_10028E9E0);
  Published.projectedValue.getter(v24);
  swift_endAccess(v37);
  v25 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v37[0] = (id)static OS_dispatch_queue.main.getter(v25);
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 1, 1, v26);
  v27 = sub_100012334(&qword_1002907B0, &qword_1002907A0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v28 = sub_10001D984();
  Publisher.receive<A>(on:options:)(v37, v9, v10, v25, v27, v28);
  sub_10000A020((uint64_t)v9, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v29 = swift_allocObject(&unk_100269068, 24, 7);
  swift_unknownObjectWeakInit(v29 + 16, v23);
  v30 = sub_100012334(&qword_1002907B8, &qword_1002907A8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v31 = Publisher<>.sink(receiveValue:)(sub_1000BD5D4, v29, v14, v30);
  swift_release(v29);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v14);
  v32 = &v23[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_subscriptions];
  swift_beginAccess(&v23[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_subscriptions], v37, 33, 0);
  AnyCancellable.store(in:)(v32);
  swift_endAccess(v37);
  swift_release(v31);

  swift_release(a2);
  swift_release(v34);
  return v23;
}

void sub_1000BA290(double *a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  void *v7;
  double v8;
  id v9;
  id v10;
  void *v11;
  _BYTE v12[24];

  v2 = *a1;
  v3 = a1[2];
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = *(void **)(Strong + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint);
    if (v7)
    {
      v8 = *(double *)(Strong
                     + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_speakButtonMinimumBottomPadding);
      if (v8 <= v2)
        v8 = v2;
      if (v8 > v3)
        v3 = v8;
      v9 = v7;
      objc_msgSend(v9, "setConstant:", v3);
      if (objc_msgSend(v9, "isActive"))
      {
        v10 = objc_msgSend(v6, "view");
        if (!v10)
        {
          __break(1u);
          return;
        }
        v11 = v10;
        objc_msgSend(v10, "setNeedsLayout");

      }
      v6 = v9;
    }

  }
}

uint64_t sub_1000BA3AC()
{
  char *v0;
  uint64_t result;
  void *v2;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for FaceToFaceViewController();
  objc_msgSendSuper2(&v3, "viewDidLoad");
  sub_1000BA958();
  result = sub_1000B9DD0();
  if ((result & 1) == 0)
  {
    v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow];
    if (v2)
      objc_msgSend(v2, "setAlpha:", 0.0);
    result = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow];
    if (result)
      return (uint64_t)objc_msgSend((id)result, "setAlpha:", 0.0);
  }
  return result;
}

void sub_1000BA55C(void *a1, double a2, double a3)
{
  void *v3;
  void *v4;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  id v19;
  void *v20;
  double v21;
  double v22;
  _BOOL4 v23;
  id v24;
  void *v25;
  double v26;
  double v27;
  id v28;
  double v29;
  double v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  double v41;
  double v42;
  char v43;
  _QWORD v44[5];
  uint64_t v45;
  objc_super v46;

  v4 = v3;
  v46.receiver = v3;
  v46.super_class = (Class)type metadata accessor for FaceToFaceViewController();
  objc_msgSendSuper2(&v46, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  objc_msgSend(v3, "setNeedsStatusBarAppearanceUpdate");
  v8 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v9 = sub_1001D73A0();

  v10 = objc_msgSend(v9, "windowScene");
  if (v10)
  {
    sub_1000BB370();
    v11 = (void *)objc_opt_self(UIScreen);
    v12 = objc_msgSend(v11, "mainScreen");
    objc_msgSend(v12, "bounds");
    v14 = v13;

    v15 = objc_msgSend(v4, "view");
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, "frame");
      v18 = v17;

      if (v14 != v18)
        goto LABEL_6;
      v19 = objc_msgSend(v4, "view");
      if (v19)
      {
        v20 = v19;
        objc_msgSend(v19, "frame");
        v22 = v21;

        if (v22 != a2)
        {
          v24 = objc_msgSend(v4, "view");
          if (!v24)
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
          v25 = v24;
          objc_msgSend(v24, "frame");
          v27 = v26;

          v23 = v27 == a3;
          goto LABEL_9;
        }
LABEL_6:
        v23 = 0;
LABEL_9:
        v28 = objc_msgSend(v11, "mainScreen");
        objc_msgSend(v28, "bounds");
        v30 = v29;

        if (v30 != a2)
          goto LABEL_12;
        v31 = objc_msgSend(v4, "view");
        if (v31)
        {
          v32 = v31;
          objc_msgSend(v31, "frame");
          v34 = v33;

          if (v34 == a2)
          {
LABEL_12:
            if (v23)
            {
LABEL_13:
              v35 = swift_allocObject(&unk_100268FC8, 24, 7);
              *(_QWORD *)(v35 + 16) = v4;
              v44[4] = sub_1000BD45C;
              v45 = v35;
              v44[0] = _NSConcreteStackBlock;
              v44[1] = 1107296256;
              v44[2] = sub_1001BAEA8;
              v44[3] = &unk_100268FE0;
              v36 = _Block_copy(v44);
              v37 = v45;
              v38 = v4;
              swift_release(v37);
              objc_msgSend(a1, "animateAlongsideTransition:completion:", 0, v36);
              _Block_release(v36);
              return;
            }
            goto LABEL_19;
          }
          v39 = objc_msgSend(v4, "view");
          if (v39)
          {
            v40 = v39;
            objc_msgSend(v39, "frame");
            v42 = v41;

            v43 = v42 == a3 || v23;
            if ((v43 & 1) != 0)
              goto LABEL_13;
LABEL_19:
            sub_1000BA958();
            return;
          }
LABEL_25:
          __break(1u);
          return;
        }
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
}

void sub_1000BA958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t *v34;
  uint64_t *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  id v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  Class v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v1 = type metadata accessor for FaceToFaceHalfView(0);
  v133 = (int *)v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v116 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100006DF4(&qword_100290760);
  __chkstk_darwin(v142);
  v137 = (uint64_t)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100006DF4(&qword_100290768);
  __chkstk_darwin(v143);
  v138 = (uint64_t)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100006DF4(&qword_100290770);
  __chkstk_darwin(v144);
  v139 = (uint64_t)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100006DF4(&qword_100290778);
  __chkstk_darwin(v145);
  v140 = (uint64_t)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100006DF4(&qword_100290780);
  __chkstk_darwin(v146);
  v141 = (uint64_t)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0;
  v134 = v0;
  v10 = *(char **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_viewModel);
  v132 = (char *)OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper;
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper];
  v131 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session;
  v12 = *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session];
  v13 = v10;
  v129 = v10;
  v14 = *(_QWORD *)(v9 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_speakButtonMinimumBottomPadding);
  KeyPath = swift_getKeyPath(&unk_1001ED528);
  v16 = (uint64_t *)&v3[*(int *)(v1 + 32)];
  *v16 = KeyPath;
  v130 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v16, v130, 0);
  v17 = type metadata accessor for ConversationContext(0);
  v135 = v17;
  v18 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v136 = v18;
  v19 = v13;
  swift_retain(v11);
  swift_retain(v12);
  v20 = EnvironmentObject.init()(v17, v18);
  v22 = v21;
  v23 = type metadata accessor for SceneContext(0);
  v148 = v23;
  v147 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v24 = EnvironmentObject.init()(v23, v147);
  v26 = v25;
  v27 = type metadata accessor for ConversationViewModel(0);
  v149 = v27;
  v118 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  *(_QWORD *)v3 = ObservedObject.init(wrappedValue:)(v19, v27, v118);
  *((_QWORD *)v3 + 1) = v28;
  v29 = type metadata accessor for DeviceHelper(0);
  v128 = v29;
  v127 = sub_100007D5C(&qword_100290788, type metadata accessor for DeviceHelper, (uint64_t)&unk_1001EC370);
  *((_QWORD *)v3 + 2) = ObservedObject.init(wrappedValue:)(v11, v29, v127);
  *((_QWORD *)v3 + 3) = v30;
  v31 = type metadata accessor for TranslationSession_RD(0);
  v126 = v31;
  v125 = sub_100007D5C(&qword_100290790, type metadata accessor for TranslationSession_RD, (uint64_t)"ŝ\a");
  *((_QWORD *)v3 + 4) = ObservedObject.init(wrappedValue:)(v12, v31, v125);
  *((_QWORD *)v3 + 5) = v32;
  v3[48] = 0;
  v33 = v133;
  v34 = (uint64_t *)&v3[v133[9]];
  *v34 = v20;
  v34[1] = v22;
  v35 = (uint64_t *)&v3[v33[10]];
  *v35 = v24;
  v35[1] = v26;
  *(_QWORD *)&v3[v33[11]] = v14;
  v36 = &v3[v33[12]];
  v150 = 0x4044000000000000;
  v37 = State.init(wrappedValue:)(&v151, &v150, &type metadata for CGFloat);
  v38 = v152;
  *(_QWORD *)v36 = v151;
  *((_QWORD *)v36 + 1) = v38;
  *(_QWORD *)&v3[v33[13]] = 0x4034000000000000;
  v39 = static Color.translateAccentColor.getter(v37);
  v40 = swift_getKeyPath(&unk_1001ED558);
  v41 = v137;
  sub_1000B81D0((uint64_t)v3, v137);
  v42 = (uint64_t *)(v41 + *(int *)(v142 + 36));
  *v42 = v40;
  v42[1] = v39;
  sub_1000BD420((uint64_t)v3);
  v124 = OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions;
  v43 = v19;
  v44 = *(void **)&v19[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_translationOptions];
  v45 = type metadata accessor for SharedTranslationOptions(0);
  v46 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  v123 = v46;
  v47 = v44;
  v122 = v45;
  v48 = static ObservableObject.environmentStore.getter(v45, v46);
  v49 = v138;
  sub_10000B074(v41, v138, &qword_100290760);
  v50 = (uint64_t *)(v49 + *(int *)(v143 + 36));
  *v50 = v48;
  v50[1] = (uint64_t)v47;
  sub_10000A020(v41, &qword_100290760);
  v51 = v134;
  v52 = *(_QWORD *)(v134 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sceneContext);
  v53 = static ObservableObject.environmentStore.getter(v148, v147);
  v54 = v139;
  sub_10000B074(v49, v139, &qword_100290768);
  v55 = (uint64_t *)(v54 + *(int *)(v144 + 36));
  *v55 = v53;
  v55[1] = v52;
  v121 = v52;
  swift_retain(v52);
  sub_10000A020(v49, &qword_100290768);
  v56 = v118;
  v57 = static ObservableObject.environmentStore.getter(v149, v118);
  v58 = v140;
  sub_10000B074(v54, v140, &qword_100290770);
  v59 = (uint64_t *)(v58 + *(int *)(v145 + 36));
  *v59 = v57;
  v59[1] = (uint64_t)v43;
  v117 = v43;
  v116 = v43;
  sub_10000A020(v54, &qword_100290770);
  v60 = *(_QWORD *)(v51 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_conversationContext);
  v62 = v135;
  v61 = v136;
  v63 = static ObservableObject.environmentStore.getter(v135, v136);
  v64 = v58;
  v65 = v58;
  v66 = v141;
  sub_10000B074(v64, v141, &qword_100290778);
  v67 = (uint64_t *)(v66 + *(int *)(v146 + 36));
  *v67 = v63;
  v67[1] = v60;
  v120 = v60;
  swift_retain(v60);
  sub_10000A020(v65, &qword_100290778);
  v119 = (Class)sub_100006DF4(&qword_100290798);
  v68 = objc_allocWithZone(v119);
  v69 = UIHostingController.init(rootView:)(v66);
  v70 = *(void **)(v51 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController);
  *(_QWORD *)(v51 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController) = v69;

  v71 = *(_QWORD *)&v132[(_QWORD)v129];
  v72 = *(_QWORD *)&v129[v131];
  v73 = swift_getKeyPath(&unk_1001ED528);
  v74 = v133;
  v75 = (uint64_t *)&v3[v133[8]];
  *v75 = v73;
  swift_storeEnumTagMultiPayload(v75, v130, 0);
  v76 = v116;
  v132 = v76;
  swift_retain(v71);
  swift_retain(v72);
  v77 = EnvironmentObject.init()(v62, v61);
  v79 = v78;
  v80 = EnvironmentObject.init()(v148, v147);
  v82 = v81;
  *(_QWORD *)v3 = ObservedObject.init(wrappedValue:)(v76, v149, v56);
  *((_QWORD *)v3 + 1) = v83;
  *((_QWORD *)v3 + 2) = ObservedObject.init(wrappedValue:)(v71, v128, v127);
  *((_QWORD *)v3 + 3) = v84;
  *((_QWORD *)v3 + 4) = ObservedObject.init(wrappedValue:)(v72, v126, v125);
  *((_QWORD *)v3 + 5) = v85;
  v3[48] = 1;
  v86 = (uint64_t *)&v3[v74[9]];
  *v86 = v77;
  v86[1] = v79;
  v87 = (uint64_t *)&v3[v74[10]];
  *v87 = v80;
  v87[1] = v82;
  *(_QWORD *)&v3[v74[11]] = v14;
  v88 = &v3[v74[12]];
  v150 = 0x4044000000000000;
  v89 = State.init(wrappedValue:)(&v151, &v150, &type metadata for CGFloat);
  v90 = v152;
  *(_QWORD *)v88 = v151;
  *((_QWORD *)v88 + 1) = v90;
  *(_QWORD *)&v3[v74[13]] = 0x4034000000000000;
  v91 = static Color.translateAccentColor.getter(v89);
  v92 = swift_getKeyPath(&unk_1001ED558);
  v93 = v137;
  sub_1000B81D0((uint64_t)v3, v137);
  v94 = (uint64_t *)(v93 + *(int *)(v142 + 36));
  *v94 = v92;
  v94[1] = v91;
  sub_1000BD420((uint64_t)v3);
  v95 = v117;
  v96 = *(id *)&v117[v124];
  v97 = static ObservableObject.environmentStore.getter(v122, v123);
  v98 = v138;
  sub_10000B074(v93, v138, &qword_100290760);
  v99 = (uint64_t *)(v98 + *(int *)(v143 + 36));
  *v99 = v97;
  v99[1] = (uint64_t)v96;
  sub_10000A020(v93, &qword_100290760);
  v100 = static ObservableObject.environmentStore.getter(v148, v147);
  v101 = v139;
  sub_10000B074(v98, v139, &qword_100290768);
  v102 = (uint64_t *)(v101 + *(int *)(v144 + 36));
  v103 = v121;
  *v102 = v100;
  v102[1] = v103;
  swift_retain(v103);
  sub_10000A020(v98, &qword_100290768);
  v104 = static ObservableObject.environmentStore.getter(v149, v56);
  v105 = v140;
  sub_10000B074(v101, v140, &qword_100290770);
  v106 = (uint64_t *)(v105 + *(int *)(v145 + 36));
  *v106 = v104;
  v106[1] = (uint64_t)v95;
  v107 = v132;
  sub_10000A020(v101, &qword_100290770);
  v108 = static ObservableObject.environmentStore.getter(v135, v136);
  v109 = v141;
  sub_10000B074(v105, v141, &qword_100290778);
  v110 = (uint64_t *)(v109 + *(int *)(v146 + 36));
  *v110 = v108;
  v111 = v134;
  v112 = v120;
  v110[1] = v120;
  swift_retain(v112);
  sub_10000A020(v105, &qword_100290778);
  v113 = objc_allocWithZone(v119);
  v114 = UIHostingController.init(rootView:)(v109);
  v115 = *(void **)(v111 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController);
  *(_QWORD *)(v111 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController) = v114;

  if ((sub_1000B9DD0() & 1) != 0)
    sub_1000BB4B4();
  else
    sub_1000BBFF4();
}

void sub_1000BB370()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow);
  if (v2)
    objc_msgSend(v2, "setHidden:", 1);
  v3 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow);
  if (v4)
    objc_msgSend(v4, "setHidden:", 1);
  v5 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  v6 = *(void **)(v0 + v3);
  *(_QWORD *)(v0 + v3) = 0;

  v7 = sub_1000B9CF8();
  objc_msgSend(v7, "removeFromSuperview");

  v8 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController), "removeFromParentViewController");
  v9 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController), "removeFromParentViewController");
  v10 = *(void **)(v0 + v8);
  if (v10)
  {
    v11 = objc_msgSend(v10, "view");
    if (!v11)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return;
    }
    v12 = v11;
    objc_msgSend(v11, "removeFromSuperview");

  }
  v13 = *(void **)(v0 + v9);
  if (v13)
  {
    v14 = objc_msgSend(v13, "view");
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "removeFromSuperview");

      return;
    }
    goto LABEL_13;
  }
}

void sub_1000BB4B4()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  double v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  double v44;
  double v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  id v96;
  id v97;
  void *v98;
  id v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  id v104;
  void *v105;
  id v106;
  id v107;
  void *v108;
  id v109;
  id v110;
  void *v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  Class isa;
  id v120;
  void *v121;
  id v122;
  void *v123;
  _QWORD v124[4];

  v1 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController];
  if (v1)
  {
    v2 = v0;
    v3 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController];
    if (v3)
    {
      v4 = v1;
      v5 = v3;
      v6 = objc_msgSend(v2, "view");
      if (v6)
      {
        v7 = v6;
        sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
        v8 = (void *)static UIColor.appBackgroundColor.getter();
        objc_msgSend(v7, "setBackgroundColor:", v8);

        v9 = objc_msgSend(v4, "view");
        if (v9)
        {
          v10 = v9;
          v11 = (void *)objc_opt_self(UIColor);
          v12 = objc_msgSend(v11, "clearColor");
          objc_msgSend(v10, "setBackgroundColor:", v12);

          v13 = objc_msgSend(v5, "view");
          if (v13)
          {
            v14 = v13;
            v15 = objc_msgSend(v11, "clearColor");
            objc_msgSend(v14, "setBackgroundColor:", v15);

            objc_msgSend(v2, "addChildViewController:", v4);
            v16 = objc_msgSend(v2, "view");
            if (v16)
            {
              v17 = v16;
              v18 = objc_msgSend(v4, "view");
              if (v18)
              {
                v19 = v18;
                objc_msgSend(v17, "addSubview:", v18);

                objc_msgSend(v4, "didMoveToParentViewController:", v2);
                objc_msgSend(v2, "addChildViewController:", v5);
                v20 = objc_msgSend(v2, "view");
                if (v20)
                {
                  v21 = v20;
                  v22 = objc_msgSend(v5, "view");
                  if (v22)
                  {
                    v23 = v22;
                    objc_msgSend(v21, "addSubview:", v22);

                    objc_msgSend(v5, "didMoveToParentViewController:", v2);
                    v24 = objc_msgSend(v2, "view");
                    if (v24)
                    {
                      v25 = v24;
                      v26 = sub_1000B9CF8();
                      objc_msgSend(v25, "addSubview:", v26);

                      v27 = objc_msgSend(v4, "view");
                      if (v27)
                      {
                        v28 = v27;
                        objc_msgSend(v27, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                        v29 = objc_msgSend(v5, "view");
                        if (v29)
                        {
                          v30 = v29;
                          objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                          v31 = sub_1000B9CF8();
                          objc_msgSend(v31, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                          v32 = *(double *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_speakButtonMinimumBottomPadding];
                          v33 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_conversationContext];
                          KeyPath = swift_getKeyPath(&unk_1001ED4E0);
                          v35 = swift_getKeyPath(&unk_1001ED508);
                          static Published.subscript.getter(v124, v33, KeyPath);
                          swift_release(KeyPath);
                          swift_release(v35);
                          v36 = *(double *)v124;
                          v37 = swift_getKeyPath(&unk_1001ED4E0);
                          v38 = swift_getKeyPath(&unk_1001ED508);
                          static Published.subscript.getter(v124, v33, v37);
                          swift_release(v37);
                          swift_release(v38);
                          v39 = *(double *)&v124[2];
                          v40 = sub_1000B9CF8();
                          v41 = objc_msgSend(v40, "topAnchor");

                          v42 = objc_msgSend(v2, "view");
                          if (v42)
                          {
                            v43 = v42;
                            if (v32 > v36)
                              v44 = v32;
                            else
                              v44 = v36;
                            if (v44 > v39)
                              v45 = v44;
                            else
                              v45 = v39;
                            v46 = objc_msgSend(v42, "topAnchor");

                            v47 = objc_msgSend(v41, "constraintEqualToAnchor:constant:", v46, v45);
                            v48 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint;
                            v49 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint];
                            *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint] = v47;

                            v50 = sub_100006DF4((uint64_t *)&unk_10028C060);
                            v51 = swift_allocObject(v50, 112, 7);
                            *(_OWORD *)(v51 + 16) = xmmword_1001ED430;
                            v52 = objc_msgSend(v4, "view");
                            if (v52)
                            {
                              v53 = v52;
                              v54 = objc_msgSend(v52, "heightAnchor");

                              v55 = objc_msgSend(v2, "view");
                              if (v55)
                              {
                                v56 = v55;
                                v57 = objc_msgSend(v55, "heightAnchor");

                                v58 = objc_msgSend(v54, "constraintEqualToAnchor:multiplier:", v57, 0.5);
                                *(_QWORD *)(v51 + 32) = v58;
                                v59 = objc_msgSend(v4, "view");
                                if (v59)
                                {
                                  v60 = v59;
                                  v61 = objc_msgSend(v59, "bottomAnchor");

                                  v62 = objc_msgSend(v2, "view");
                                  if (v62)
                                  {
                                    v63 = v62;
                                    v64 = objc_msgSend(v62, "bottomAnchor");

                                    v65 = objc_msgSend(v61, "constraintEqualToAnchor:", v64);
                                    *(_QWORD *)(v51 + 40) = v65;
                                    v66 = objc_msgSend(v4, "view");
                                    if (v66)
                                    {
                                      v67 = v66;
                                      v68 = objc_msgSend(v66, "leadingAnchor");

                                      v69 = objc_msgSend(v2, "view");
                                      if (v69)
                                      {
                                        v70 = v69;
                                        v71 = objc_msgSend(v69, "leadingAnchor");

                                        v72 = objc_msgSend(v68, "constraintEqualToAnchor:", v71);
                                        *(_QWORD *)(v51 + 48) = v72;
                                        v73 = objc_msgSend(v4, "view");
                                        if (v73)
                                        {
                                          v74 = v73;
                                          v75 = objc_msgSend(v73, "trailingAnchor");

                                          v76 = objc_msgSend(v2, "view");
                                          if (v76)
                                          {
                                            v77 = v76;
                                            v78 = objc_msgSend(v76, "trailingAnchor");

                                            v79 = objc_msgSend(v75, "constraintEqualToAnchor:", v78);
                                            *(_QWORD *)(v51 + 56) = v79;
                                            v80 = objc_msgSend(v5, "view");
                                            if (v80)
                                            {
                                              v81 = v80;
                                              v82 = objc_msgSend(v80, "heightAnchor");

                                              v83 = objc_msgSend(v2, "view");
                                              if (v83)
                                              {
                                                v84 = v83;
                                                v85 = objc_msgSend(v83, "heightAnchor");

                                                v86 = objc_msgSend(v82, "constraintEqualToAnchor:multiplier:", v85, 0.5);
                                                *(_QWORD *)(v51 + 64) = v86;
                                                v87 = objc_msgSend(v5, "view");
                                                if (v87)
                                                {
                                                  v88 = v87;
                                                  v89 = objc_msgSend(v87, "topAnchor");

                                                  v90 = objc_msgSend(v2, "view");
                                                  if (v90)
                                                  {
                                                    v91 = v90;
                                                    v92 = objc_msgSend(v90, "topAnchor");

                                                    v93 = objc_msgSend(v89, "constraintEqualToAnchor:", v92);
                                                    *(_QWORD *)(v51 + 72) = v93;
                                                    v94 = objc_msgSend(v5, "view");
                                                    if (v94)
                                                    {
                                                      v95 = v94;
                                                      v96 = objc_msgSend(v94, "leadingAnchor");

                                                      v97 = objc_msgSend(v2, "view");
                                                      if (v97)
                                                      {
                                                        v98 = v97;
                                                        v99 = objc_msgSend(v97, "leadingAnchor");

                                                        v100 = objc_msgSend(v96, "constraintEqualToAnchor:", v99);
                                                        *(_QWORD *)(v51 + 80) = v100;
                                                        v101 = objc_msgSend(v5, "view");
                                                        if (v101)
                                                        {
                                                          v102 = v101;
                                                          v103 = objc_msgSend(v101, "trailingAnchor");

                                                          v104 = objc_msgSend(v2, "view");
                                                          if (v104)
                                                          {
                                                            v105 = v104;
                                                            v106 = objc_msgSend(v104, "trailingAnchor");

                                                            v107 = objc_msgSend(v103, "constraintEqualToAnchor:", v106);
                                                            *(_QWORD *)(v51 + 88) = v107;
                                                            v108 = *(void **)&v2[v48];
                                                            if (v108)
                                                            {
                                                              *(_QWORD *)(v51 + 96) = v108;
                                                              v109 = v108;
                                                              v110 = objc_msgSend(v2, "view");
                                                              if (v110)
                                                              {
                                                                v111 = v110;
                                                                v112 = (void *)objc_opt_self(NSLayoutConstraint);
                                                                v113 = objc_msgSend(v111, "trailingAnchor");

                                                                v114 = sub_1000B9CF8();
                                                                v115 = objc_msgSend(v114, "trailingAnchor");

                                                                v116 = objc_msgSend(v113, "constraintEqualToAnchor:constant:", v115, 32.0);
                                                                *(_QWORD *)(v51 + 104) = v116;
                                                                v124[0] = v51;
                                                                specialized Array._endMutation()(v117);
                                                                v118 = v124[0];
                                                                sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
                                                                isa = Array._bridgeToObjectiveC()().super.isa;
                                                                objc_msgSend(v112, "activateConstraints:", isa, swift_bridgeObjectRelease(v118).n128_f64[0]);

                                                                v120 = objc_msgSend(v4, "view");
                                                                if (v120)
                                                                {
                                                                  v121 = v120;
                                                                  v122 = objc_msgSend(v5, "view");
                                                                  if (v122)
                                                                  {
                                                                    v123 = v122;
                                                                    sub_1000BCE88(v121, v122);

                                                                    return;
                                                                  }
LABEL_72:
                                                                  __break(1u);
                                                                  return;
                                                                }
LABEL_71:
                                                                __break(1u);
                                                                goto LABEL_72;
                                                              }
LABEL_70:
                                                              __break(1u);
                                                              goto LABEL_71;
                                                            }
LABEL_69:
                                                            __break(1u);
                                                            goto LABEL_70;
                                                          }
LABEL_68:
                                                          __break(1u);
                                                          goto LABEL_69;
                                                        }
LABEL_67:
                                                        __break(1u);
                                                        goto LABEL_68;
                                                      }
LABEL_66:
                                                      __break(1u);
                                                      goto LABEL_67;
                                                    }
LABEL_65:
                                                    __break(1u);
                                                    goto LABEL_66;
                                                  }
LABEL_64:
                                                  __break(1u);
                                                  goto LABEL_65;
                                                }
LABEL_63:
                                                __break(1u);
                                                goto LABEL_64;
                                              }
LABEL_62:
                                              __break(1u);
                                              goto LABEL_63;
                                            }
LABEL_61:
                                            __break(1u);
                                            goto LABEL_62;
                                          }
LABEL_60:
                                          __break(1u);
                                          goto LABEL_61;
                                        }
LABEL_59:
                                        __break(1u);
                                        goto LABEL_60;
                                      }
LABEL_58:
                                      __break(1u);
                                      goto LABEL_59;
                                    }
LABEL_57:
                                    __break(1u);
                                    goto LABEL_58;
                                  }
LABEL_56:
                                  __break(1u);
                                  goto LABEL_57;
                                }
LABEL_55:
                                __break(1u);
                                goto LABEL_56;
                              }
LABEL_54:
                              __break(1u);
                              goto LABEL_55;
                            }
LABEL_53:
                            __break(1u);
                            goto LABEL_54;
                          }
LABEL_52:
                          __break(1u);
                          goto LABEL_53;
                        }
LABEL_51:
                        __break(1u);
                        goto LABEL_52;
                      }
LABEL_50:
                      __break(1u);
                      goto LABEL_51;
                    }
LABEL_49:
                    __break(1u);
                    goto LABEL_50;
                  }
LABEL_48:
                  __break(1u);
                  goto LABEL_49;
                }
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_44;
    }
  }
}

void sub_1000BBFF4()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  NSString v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  double v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  id v85;
  void *v86;
  id v87;
  id v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  void *v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  Class isa;
  void *v105;
  uint64_t v106;
  id v107;
  id v108;
  _QWORD v109[2];
  double v110;

  v1 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController];
  if (v1)
  {
    v2 = v0;
    v3 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController];
    if (v3)
    {
      v4 = (void *)objc_opt_self(UIApplication);
      v5 = v1;
      v108 = v3;
      v6 = objc_msgSend(v4, "sharedApplication");
      v7 = sub_1001D73A0();

      if (v7 && (v107 = objc_msgSend(v7, "windowScene"), v7, v107))
      {
        v8 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "initWithWindowScene:", v107);
        v9 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow;
        v10 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow];
        *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow] = v8;

        v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for HitPassthroughWindow()), "initWithWindowScene:", v107);
        v12 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow;
        v13 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow];
        *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow] = v11;

        v14 = *(void **)&v2[v9];
        if (v14)
        {
          v15 = *(void **)&v2[v12];
          if (v15)
          {
            v16 = v14;
            v17 = v15;
            v18 = objc_msgSend(v2, "view");
            if (v18)
            {
              v19 = v18;
              v20 = String._bridgeToObjectiveC()();
              v21 = (void *)objc_opt_self(UIColor);
              v22 = objc_msgSend(v21, "colorNamed:", v20);

              objc_msgSend(v19, "setBackgroundColor:", v22);
              v23 = v16;
              v24 = objc_msgSend(v21, "clearColor");
              objc_msgSend(v23, "setBackgroundColor:", v24);

              v25 = v17;
              v26 = objc_msgSend(v21, "clearColor");
              objc_msgSend(v25, "setBackgroundColor:", v26);

              v27 = objc_msgSend(v5, "view");
              if (v27)
              {
                v28 = v27;
                v29 = objc_msgSend(v21, "clearColor");
                objc_msgSend(v28, "setBackgroundColor:", v29);

                v30 = objc_msgSend(v108, "view");
                if (v30)
                {
                  v31 = v30;
                  v32 = objc_msgSend(v21, "clearColor");
                  objc_msgSend(v31, "setBackgroundColor:", v32);

                  objc_msgSend(v23, "makeKeyAndVisible");
                  objc_msgSend(v25, "makeKeyAndVisible");
                  objc_msgSend(v23, "setRootViewController:", v5);
                  objc_msgSend(v25, "setRootViewController:", v108);
                  v33 = sub_1000B9CF8();
                  objc_msgSend(v25, "addSubview:", v33);

                  v34 = objc_msgSend(v5, "view");
                  if (v34)
                  {
                    v35 = v34;
                    objc_msgSend(v34, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                    v36 = objc_msgSend(v108, "view");
                    if (v36)
                    {
                      v37 = v36;
                      objc_msgSend(v36, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                      v38 = sub_1000B9CF8();
                      objc_msgSend(v38, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                      v39 = *(double *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_speakButtonMinimumBottomPadding];
                      v40 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_conversationContext];
                      KeyPath = swift_getKeyPath(&unk_1001ED4E0);
                      v42 = swift_getKeyPath(&unk_1001ED508);
                      static Published.subscript.getter(v109, v40, KeyPath);
                      swift_release(KeyPath);
                      swift_release(v42);
                      v43 = *(double *)v109;
                      v44 = swift_getKeyPath(&unk_1001ED4E0);
                      v45 = swift_getKeyPath(&unk_1001ED508);
                      static Published.subscript.getter(v109, v40, v44);
                      swift_release(v44);
                      swift_release(v45);
                      if (v39 > v43)
                        v46 = v39;
                      else
                        v46 = v43;
                      if (v46 > v110)
                        v47 = v46;
                      else
                        v47 = v110;
                      v48 = objc_msgSend(v25, "bottomAnchor", v110);
                      v49 = sub_1000B9CF8();
                      v50 = objc_msgSend(v49, "bottomAnchor");

                      v51 = objc_msgSend(v48, "constraintEqualToAnchor:constant:", v50, v47);
                      v52 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint];
                      v106 = OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint;
                      *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint] = v51;

                      v53 = sub_100006DF4((uint64_t *)&unk_10028C060);
                      v54 = swift_allocObject(v53, 112, 7);
                      *(_OWORD *)(v54 + 16) = xmmword_1001ED430;
                      v55 = objc_msgSend(v5, "view");
                      if (v55)
                      {
                        v56 = v55;
                        v57 = objc_msgSend(v55, "topAnchor");

                        v58 = objc_msgSend(v23, "topAnchor");
                        v59 = objc_msgSend(v57, "constraintEqualToAnchor:", v58);

                        *(_QWORD *)(v54 + 32) = v59;
                        v60 = objc_msgSend(v5, "view");
                        if (v60)
                        {
                          v61 = v60;
                          v62 = objc_msgSend(v60, "bottomAnchor");

                          v63 = objc_msgSend(v23, "bottomAnchor");
                          v64 = objc_msgSend(v62, "constraintEqualToAnchor:", v63);

                          *(_QWORD *)(v54 + 40) = v64;
                          v65 = objc_msgSend(v5, "view");
                          if (v65)
                          {
                            v66 = v65;
                            v67 = objc_msgSend(v65, "leadingAnchor");

                            v68 = objc_msgSend(v23, "leadingAnchor");
                            v69 = objc_msgSend(v67, "constraintEqualToAnchor:", v68);

                            *(_QWORD *)(v54 + 48) = v69;
                            v70 = objc_msgSend(v5, "view");
                            if (v70)
                            {
                              v71 = v70;
                              v72 = objc_msgSend(v70, "trailingAnchor");

                              v73 = objc_msgSend(v23, "trailingAnchor");
                              v74 = objc_msgSend(v72, "constraintEqualToAnchor:", v73);

                              *(_QWORD *)(v54 + 56) = v74;
                              v75 = objc_msgSend(v108, "view");
                              if (v75)
                              {
                                v76 = v75;
                                v77 = objc_msgSend(v75, "topAnchor");

                                v78 = objc_msgSend(v25, "topAnchor");
                                v79 = objc_msgSend(v77, "constraintEqualToAnchor:", v78);

                                *(_QWORD *)(v54 + 64) = v79;
                                v80 = objc_msgSend(v108, "view");
                                if (v80)
                                {
                                  v81 = v80;
                                  v82 = objc_msgSend(v80, "bottomAnchor");

                                  v83 = objc_msgSend(v25, "bottomAnchor");
                                  v84 = objc_msgSend(v82, "constraintEqualToAnchor:", v83);

                                  *(_QWORD *)(v54 + 72) = v84;
                                  v85 = objc_msgSend(v108, "view");
                                  if (v85)
                                  {
                                    v86 = v85;
                                    v87 = objc_msgSend(v85, "leadingAnchor");

                                    v88 = objc_msgSend(v25, "leadingAnchor");
                                    v89 = objc_msgSend(v87, "constraintEqualToAnchor:", v88);

                                    *(_QWORD *)(v54 + 80) = v89;
                                    v90 = objc_msgSend(v108, "view");
                                    if (v90)
                                    {
                                      v91 = v90;
                                      v92 = objc_msgSend(v90, "trailingAnchor");

                                      v93 = objc_msgSend(v25, "trailingAnchor");
                                      v94 = objc_msgSend(v92, "constraintEqualToAnchor:", v93);

                                      *(_QWORD *)(v54 + 88) = v94;
                                      v95 = *(void **)&v2[v106];
                                      if (v95)
                                      {
                                        v96 = (void *)objc_opt_self(NSLayoutConstraint);
                                        *(_QWORD *)(v54 + 96) = v95;
                                        v97 = v95;
                                        v98 = objc_msgSend(v25, "leadingAnchor");
                                        v99 = sub_1000B9CF8();
                                        v100 = objc_msgSend(v99, "leadingAnchor");

                                        v101 = objc_msgSend(v98, "constraintEqualToAnchor:constant:", v100, -32.0);
                                        *(_QWORD *)(v54 + 104) = v101;
                                        v109[0] = v54;
                                        specialized Array._endMutation()(v102);
                                        v103 = v109[0];
                                        sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
                                        isa = Array._bridgeToObjectiveC()().super.isa;
                                        objc_msgSend(v96, "activateConstraints:", isa, swift_bridgeObjectRelease(v103).n128_f64[0]);

                                        sub_1000BCA88();
                                        sub_1000BCE88(v23, v25);

                                        return;
                                      }
LABEL_45:
                                      __break(1u);
                                      return;
                                    }
LABEL_44:
                                    __break(1u);
                                    goto LABEL_45;
                                  }
LABEL_43:
                                  __break(1u);
                                  goto LABEL_44;
                                }
LABEL_42:
                                __break(1u);
                                goto LABEL_43;
                              }
LABEL_41:
                              __break(1u);
                              goto LABEL_42;
                            }
LABEL_40:
                            __break(1u);
                            goto LABEL_41;
                          }
LABEL_39:
                          __break(1u);
                          goto LABEL_40;
                        }
LABEL_38:
                        __break(1u);
                        goto LABEL_39;
                      }
LABEL_37:
                      __break(1u);
                      goto LABEL_38;
                    }
LABEL_36:
                    __break(1u);
                    goto LABEL_37;
                  }
LABEL_35:
                  __break(1u);
                  goto LABEL_36;
                }
LABEL_34:
                __break(1u);
                goto LABEL_35;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
            goto LABEL_34;
          }
        }

        v105 = v107;
      }
      else
      {

        v105 = v108;
      }

    }
  }
}

void sub_1000BCA88()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  double v23;
  id v24;
  double v25;
  double v26;
  id v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  id v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  id v46;
  id v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  CGFloat v56;
  id v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  id v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow);
  if (v1)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow);
    if (v2)
    {
      v3 = (void *)objc_opt_self(UIApplication);
      v4 = v1;
      v5 = v2;
      v6 = objc_msgSend(v3, "sharedApplication");
      v7 = sub_1001D73A0();

      if (v7
        && (v8 = objc_msgSend(v7, "windowScene"), v7, v8)
        && (v9 = objc_msgSend(v8, "interfaceOrientation"), v8, !sub_1000BD3F8((uint64_t)v9)))
      {
        v10 = (void *)objc_opt_self(UIScreen);
        v22 = objc_msgSend(v10, "mainScreen");
        objc_msgSend(v22, "bounds");
        v13 = v23;

        v24 = objc_msgSend(v10, "mainScreen");
        objc_msgSend(v24, "bounds");
        v26 = v25;

        v20 = 0.5;
        v18 = v26 * 0.5;
        objc_msgSend(v4, "setFrame:", 0.0, 0.0, v13, v18);
        v21 = 0.25;
        v17 = 0.75;
        v19 = 0.5;
      }
      else
      {
        v10 = (void *)objc_opt_self(UIScreen);
        v11 = objc_msgSend(v10, "mainScreen");
        objc_msgSend(v11, "bounds");
        v13 = v12;

        v14 = objc_msgSend(v10, "mainScreen");
        objc_msgSend(v14, "bounds");
        v16 = v15;

        v17 = 0.5;
        v18 = v16 * 0.5;
        objc_msgSend(v4, "setFrame:", 0.0, 0.0, v13, v18);
        v19 = 0.25;
        v20 = 0.75;
        v21 = 0.5;
      }
      objc_msgSend(v5, "setFrame:", 0.0, 0.0, v13, v18);
      v66 = v4;
      v27 = objc_msgSend(v10, "mainScreen");
      objc_msgSend(v27, "bounds");
      v29 = v28;
      v31 = v30;
      v33 = v32;
      v35 = v34;

      v67.origin.x = v29;
      v67.origin.y = v31;
      v67.size.width = v33;
      v67.size.height = v35;
      v36 = CGRectGetWidth(v67) * v20;
      v37 = objc_msgSend(v10, "mainScreen");
      objc_msgSend(v37, "bounds");
      v39 = v38;
      v41 = v40;
      v43 = v42;
      v45 = v44;

      v68.origin.x = v39;
      v68.origin.y = v41;
      v68.size.width = v43;
      v68.size.height = v45;
      objc_msgSend(v66, "setCenter:", v36, CGRectGetHeight(v68) * v17);

      v46 = v5;
      v47 = objc_msgSend(v10, "mainScreen");
      objc_msgSend(v47, "bounds");
      v49 = v48;
      v51 = v50;
      v53 = v52;
      v55 = v54;

      v69.origin.x = v49;
      v69.origin.y = v51;
      v69.size.width = v53;
      v69.size.height = v55;
      v56 = CGRectGetWidth(v69) * v19;
      v57 = objc_msgSend(v10, "mainScreen");
      objc_msgSend(v57, "bounds");
      v59 = v58;
      v61 = v60;
      v63 = v62;
      v65 = v64;

      v70.origin.x = v59;
      v70.origin.y = v61;
      v70.size.width = v63;
      v70.size.height = v65;
      objc_msgSend(v46, "setCenter:", v56, CGRectGetHeight(v70) * v21);

    }
  }
}

id sub_1000BCE88(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  CGFloat v13;
  CGAffineTransform v15;

  v3 = v2;
  *(_OWORD *)&v15.a = 0x3FF0000000000000uLL;
  v15.c = 0.0;
  v15.d = 1.0;
  *(_OWORD *)&v15.tx = 0uLL;
  objc_msgSend(a1, "setTransform:", &v15);
  *(_OWORD *)&v15.a = 0x3FF0000000000000uLL;
  v15.c = 0.0;
  v15.d = 1.0;
  *(_OWORD *)&v15.tx = 0uLL;
  objc_msgSend(a2, "setTransform:", &v15);
  v6 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v7 = sub_1001D73A0();

  if (v7)
  {
    v8 = objc_msgSend(v7, "windowScene");

    if (v8)
    {
      v9 = objc_msgSend(v8, "interfaceOrientation");

      if (!sub_1000BD3F8((uint64_t)v9))
        goto LABEL_5;
    }
  }
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_conversationContext);
  KeyPath = swift_getKeyPath(&unk_1001ED498);
  v12 = swift_getKeyPath(&unk_1001ED4C0);
  static Published.subscript.getter(&v15, v10, KeyPath);
  swift_release(KeyPath);
  swift_release(v12);
  if ((LOBYTE(v15.a) & 1) != 0)
  {
LABEL_5:
    CGAffineTransformMakeRotation(&v15, 0.0);
    objc_msgSend(a1, "setTransform:", &v15);
    v13 = 3.14159265;
  }
  else
  {
    CGAffineTransformMakeRotation(&v15, -1.57079633);
    objc_msgSend(a1, "setTransform:", &v15);
    v13 = 1.57079633;
  }
  CGAffineTransformMakeRotation(&v15, v13);
  return objc_msgSend(a2, "setTransform:", &v15);
}

void sub_1000BD070()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  void (*v6)(__n128);
  uint64_t v7;
  __n128 v8;
  _QWORD v9[5];
  uint64_t v10;

  v1 = (void *)objc_opt_self(UIView);
  v2 = swift_allocObject(&unk_100268F78, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v9[4] = sub_1000BD3BC;
  v10 = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100075908;
  v9[3] = &unk_100268F90;
  v3 = _Block_copy(v9);
  v4 = v10;
  v5 = v0;
  swift_release(v4);
  objc_msgSend(v1, "animateWithDuration:animations:", v3, 0.25);
  _Block_release(v3);
  v6 = *(void (**)(__n128))&v5[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_onCloseTap];
  if (v6)
  {
    v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_onCloseTap + 8];
    v8 = swift_retain(v7);
    v6(v8);
    sub_10002BA44((uint64_t)v6, v7);
  }
}

uint64_t sub_1000BD168(uint64_t a1, double a2)
{
  uint64_t result;
  void *v5;

  result = sub_1000B9DD0();
  if ((result & 1) == 0)
  {
    v5 = *(void **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow);
    if (v5)
      objc_msgSend(v5, "setAlpha:", a2);
    result = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow);
    if (result)
      return (uint64_t)objc_msgSend((id)result, "setAlpha:", a2);
  }
  return result;
}

id sub_1000BD244()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FaceToFaceViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FaceToFaceViewController()
{
  return objc_opt_self(_TtC17SequoiaTranslator24FaceToFaceViewController);
}

uint64_t sub_1000BD360@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for FaceToFaceViewController();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD398()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BD3BC()
{
  uint64_t v0;

  return sub_1000BD168(*(_QWORD *)(v0 + 16), 0.0);
}

uint64_t sub_1000BD3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BD3E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

BOOL sub_1000BD3F8(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

uint64_t sub_1000BD420(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FaceToFaceHalfView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000BD45C()
{
  sub_1000BA958();
}

uint64_t sub_1000BD47C()
{
  uint64_t v0;

  return sub_1000BD168(*(_QWORD *)(v0 + 16), 1.0);
}

void sub_1000BD498()
{
  char *v0;
  void *v1;
  char *v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceWindow] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetWindow] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_sourceViewController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_targetViewController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController____lazy_storage___closeButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_closeBottomConstraint] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v1 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v1 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_subscriptions] = v1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_transitionAnimationDuration] = 0x3FD0000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_speakButtonMinimumBottomPadding] = 0x4040000000000000;
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator24FaceToFaceViewController_onCloseTap];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/FaceToFaceViewController.swift", 48, 2, 68, 0);
  __break(1u);
}

uint64_t sub_1000BD5B0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000BD5D4(double *a1)
{
  uint64_t v1;

  sub_1000BA290(a1, v1);
}

void sub_1000BD764()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = v1;
  objc_msgSend(v1, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = swift_allocObject(&unk_100269160, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v0);
  v12 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  v26[4] = sub_1000C0E30;
  v27 = v11;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1107296256;
  v26[2] = sub_1001BAEF0;
  v26[3] = &unk_100269240;
  v13 = _Block_copy(v26);
  v14 = objc_msgSend(v12, "initWithSectionProvider:", v13);
  _Block_release(v13);
  swift_release(v27);
  v15 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v14, v4, v6, v8, v10);

  v16 = OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView;
  v17 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView] = v15;

  v18 = *(void **)&v0[v16];
  if (!v18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v19 = (void *)objc_opt_self(UIColor);
  v20 = v18;
  v21 = objc_msgSend(v19, "systemGroupedBackgroundColor");
  objc_msgSend(v20, "setBackgroundColor:", v21);

  v22 = *(void **)&v0[v16];
  if (!v22)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  objc_msgSend(v22, "setAutoresizingMask:", 18);
  v23 = *(void **)&v0[v16];
  if (!v23)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v23, "setAllowsSelection:", 0);
  v24 = objc_msgSend(v0, "view");
  if (!v24)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)&v0[v16])
  {
    v25 = v24;
    objc_msgSend(v24, "addSubview:");

    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1000BD9A0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;

  v3 = sub_100006DF4(&qword_1002908C8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_1002908B8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
  if (!v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_7;
  }
  v11 = v10;
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_7:
    sub_10000A020((uint64_t)v5, &qword_1002908C8);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  result = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v6);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = result;
    if (*(_QWORD *)(result + 16) > a1)
    {
      v14 = (_QWORD *)(result + 24 * a1);
      v15 = v14[4];
      v16 = v14[5];
      v17 = v14[6];
      sub_1000C0DFC(v15, v16, v17);
      swift_bridgeObjectRelease(v13);
      v18 = v16 != 0;
      sub_1000C0D70(v15, v16, v17);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return v18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BDB64(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v28 = a2;
  v5 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v13 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v9);
  UICollectionLayoutListConfiguration.init(appearance:)(v12);
  UICollectionLayoutListConfiguration.showsSeparators.setter(0);
  v16 = sub_1000BD9A0(a1);
  v17 = (unsigned int *)&enum case for UICollectionLayoutListConfiguration.HeaderMode.supplementary(_:);
  if ((v16 & 1) == 0)
    v17 = (unsigned int *)&enum case for UICollectionLayoutListConfiguration.HeaderMode.none(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *v17, v5);
  UICollectionLayoutListConfiguration.headerMode.setter(v8);
  v18 = swift_allocObject(&unk_100269160, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v3);
  UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter(sub_1000C0DEC, v18);
  sub_10000A05C(0, &qword_1002908C0, NSCollectionLayoutSection_ptr);
  result = static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v15, v28);
  v20 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView);
  if (v20)
  {
    v21 = (void *)result;
    v22 = v20;
    v23 = objc_msgSend(v22, "traitCollection");
    objc_msgSend(v23, "displayScale");
    v25 = v24;

    v26 = 16.0;
    if (v25 != 0.0)
      v26 = sub_1000C0DF4(v25 * 16.0) / v25;
    objc_msgSend(v21, "setInterGroupSpacing:", v26);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v27);
    return (uint64_t)v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000BDDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char v11;
  id v12;
  id v14;
  unint64_t v15;
  _BYTE v16[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(void **)(Strong + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
    if (v6)
    {
      v7 = v6;
      dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(&v15, a1);

      v8 = v15;
      if ((~v15 & 0xF000000000000007) != 0)
      {
        if (!(v15 >> 62))
        {
          v14 = (id)(v15 & 0x3FFFFFFFFFFFFFFFLL);
          v9 = (id)v8;
          v10 = a1;
          v11 = 1;
          goto LABEL_11;
        }
        if (v15 >> 62 == 1)
        {
          v9 = (id)(v15 & 0x3FFFFFFFFFFFFFFFLL);
          v10 = a1;
          v11 = 0;
LABEL_11:
          v12 = sub_1000BE79C(v9, v10, v11);
          sub_1000C0D48(v8);
          sub_1000C0D48(v8);

          return v12;
        }
      }
    }

  }
  return 0;
}

uint64_t sub_1000BDEB8(uint64_t a1, uint64_t a2)
{
  uint64_t countAndFlagsBits;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v8;

  countAndFlagsBits = 0;
  if (a2)
  {
    if (a2 == 1)
    {
      v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v8._countAndFlagsBits = 0xD000000000000015;
      v8._object = (void *)0x80000001001FC1E0;
      v5._object = (void *)0x80000001001FC1C0;
      v5._countAndFlagsBits = 0xD000000000000011;
      v6._countAndFlagsBits = 0;
      v6._object = (void *)0xE000000000000000;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v8)._countAndFlagsBits;

    }
    else if (a2 != 2)
    {
      swift_bridgeObjectRetain(a2);
      return a1;
    }
  }
  return countAndFlagsBits;
}

uint64_t sub_1000BDFA8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  _BYTE v10[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (!Strong)
    return 0;
  v7 = (void *)Strong;
  v8 = sub_1000BDB64(a1, a2);

  return v8;
}

uint64_t sub_1000BE024(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v5 = sub_100006DF4(&qword_1002908B8);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
  if (v10)
  {
    v11 = v10;
    dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
    v12 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v5);
    swift_bridgeObjectRetain(a2);
    v13 = sub_1000BFE94(v12, a1, a2);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(a2);
    if (v13[2])
    {
      if (qword_10028A430 != -1)
        swift_once(&qword_10028A430, sub_100120FC8);
      v14 = type metadata accessor for Logger(0);
      sub_10000F66C(v14, (uint64_t)qword_1002AA398);
      swift_bridgeObjectRetain_n(a2, 2);
      v15 = swift_bridgeObjectRetain_n(v13, 2);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(32, -1);
        v31 = v11;
        v20 = v19;
        v34[0] = v19;
        *(_DWORD *)v18 = 136446466;
        v32 = v6;
        swift_bridgeObjectRetain(a2);
        v33 = sub_1001A7FE4(a1, a2, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v18 + 4);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v18 + 12) = 2050;
        v21 = v13[2];
        swift_bridgeObjectRelease(v13);
        v33 = v21;
        v6 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v18 + 14);
        swift_bridgeObjectRelease(v13);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Forcing reload of item with identifier %{public}s; found in %{public}ld cells",
          (uint8_t *)v18,
          0x16u);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        v22 = v20;
        v11 = v31;
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
        swift_bridgeObjectRelease_n(v13, 2);
      }
      NSDiffableDataSourceSnapshot.reconfigureItems(_:)((Swift::OpaquePointer)v13);
      swift_bridgeObjectRelease(v13);
      dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v9, 0, 0, 0);
    }
    else
    {
      swift_bridgeObjectRelease(v13);
      if (qword_10028A430 != -1)
        swift_once(&qword_10028A430, sub_100120FC8);
      v23 = type metadata accessor for Logger(0);
      sub_10000F66C(v23, (uint64_t)qword_1002AA398);
      v24 = swift_bridgeObjectRetain_n(a2, 2);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v31 = v11;
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v32 = v6;
        v29 = v28;
        v34[0] = v28;
        *(_DWORD *)v27 = 136446210;
        swift_bridgeObjectRetain(a2);
        v33 = sub_1001A7FE4(a1, a2, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v27 + 4);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Received request to force reconfigure translation cell with identifier %{public}s, but it wasn't found in the data store; ignoring the request",
          v27,
          0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v9, v5);
      }
      swift_bridgeObjectRelease_n(a2, 2);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1000BE490(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = type metadata accessor for GenderTipManager.Registration(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_store];
  v10 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_ttsManager];
  swift_retain(a2);
  swift_retain(v9);
  swift_retain(v10);
  v11 = a1;
  v12 = objc_msgSend(v3, "traitCollection");
  v13 = sub_1000AEBCC();
  UITraitCollection.subscript.getter(&v22, &type metadata for GenderTipManagerTrait, &type metadata for GenderTipManagerTrait, v13);

  v14 = v22;
  v15 = type metadata accessor for CommittedTranslationViewModel(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v17 = sub_1000C003C(v11, a2, v9, v10, 0, 3, v14, 0, (uint64_t)nullsub_1, 0, (uint64_t)nullsub_1, 0, v16);

  swift_release(a2);
  swift_release(v10);
  swift_release(v14);
  v18 = objc_msgSend(v3, "traitCollection");
  UITraitCollection.subscript.getter(&v22, &type metadata for GenderTipManagerTrait, &type metadata for GenderTipManagerTrait, v13);

  v19 = v22;
  sub_1000CC8A4(v11, 0, v8);
  sub_1000CCD24(v8);
  sub_100032DAC((uint64_t)v8, type metadata accessor for GenderTipManager.Registration);
  swift_release(v19);
  return v17;
}

uint64_t sub_1000BE678(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  void *v12;

  v2 = sub_100006DF4((uint64_t *)&unk_1002908A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    v8 = type metadata accessor for UIContentUnavailableConfiguration(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
    goto LABEL_5;
  }
  sub_1000AE008();
  v5 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_10000A020((uint64_t)v4, (uint64_t *)&unk_1002908A0);
    v10 = 0u;
    v11 = 0u;
    v12 = 0;
    return UIViewController.contentUnavailableConfiguration.setter(&v10);
  }
  *((_QWORD *)&v11 + 1) = v5;
  v12 = &protocol witness table for UIContentUnavailableConfiguration;
  v7 = sub_1000122F8(&v10);
  (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 32))(v7, v4, v5);
  return UIViewController.contentUnavailableConfiguration.setter(&v10);
}

id sub_1000BE79C(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSString v20;
  void *v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class isa;
  id v30;
  _QWORD v32[2];
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v4 = v3;
  v32[0] = a2;
  v34 = a1;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = a3 & 1;
  if ((a3 & 1) != 0)
    v10 = &unk_100269188;
  else
    v10 = &unk_1002691D8;
  v11 = sub_1000C0B68;
  if ((a3 & 1) == 0)
    v11 = sub_1000C0C0C;
  v33 = v11;
  v32[1] = sub_1000BEAC8(a3 & 1);
  v13 = v12;
  v14 = swift_allocObject(&unk_100269160, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 16))((char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v32[0], v6);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = (v15 + 33) & ~v15;
  v17 = swift_allocObject(v10, v16 + v8, v15 | 7);
  v18 = v34;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = v18;
  *(_BYTE *)(v17 + 32) = v9;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v19 = v18;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  aBlock[4] = v33;
  v36 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BA88C;
  aBlock[3] = &unk_1002691A0;
  v21 = _Block_copy(aBlock);
  v22 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", 1, v20, v21);

  _Block_release(v21);
  swift_release(v36);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v23);

  objc_msgSend(v22, "setImage:", v24);
  v25 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v26 = swift_allocObject(v25, 40, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1001EA980;
  *(_QWORD *)(v26 + 32) = v22;
  aBlock[0] = v26;
  specialized Array._endMutation()(v26);
  v27 = aBlock[0];
  sub_10000A05C(0, &qword_100290890, UIContextualAction_ptr);
  v28 = v22;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  v30 = objc_msgSend((id)objc_opt_self(UISwipeActionsConfiguration), "configurationWithActions:", isa);

  objc_msgSend(v30, "_setSwipeActionsStyle:", 3);
  return v30;
}

uint64_t sub_1000BEAC8(char a1)
{
  objc_class *v2;
  uint64_t v3;
  unint64_t v4;
  NSBundle v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t countAndFlagsBits;
  unint64_t v11;

  v2 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((a1 & 1) != 0)
  {
    v8 = 0xD00000000000002BLL;
    v11 = 0x80000001001F9390;
    v3 = 0x49524F5641464E55;
    v4 = 0xEA00000000004554;
    v5.super.isa = v2;
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  else
  {
    v11 = 0x80000001001FC200;
    v3 = 0x4554454C4544;
    v4 = 0xE600000000000000;
    v5.super.isa = v2;
    v6 = 0;
    v7 = 0xE000000000000000;
    v8 = 0xD000000000000013;
  }
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, (Swift::String_optional)0, v5, *(Swift::String *)&v6, *(Swift::String *)&v8)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1000BEBC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t Strong;
  char *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void (__cdecl *v34)();
  char *v35;
  id v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42[48];
  char v43[24];

  v11 = a5 + 16;
  swift_beginAccess(a5 + 16, v43, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v11);
  if (!Strong)
    return a3();
  v13 = (char *)Strong;
  if (qword_10028A418 != -1)
    swift_once(&qword_10028A418, sub_100120F48);
  v14 = type metadata accessor for Logger(0);
  sub_10000F66C(v14, (uint64_t)qword_1002AA350);
  v15 = a6;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v38 = a8;
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = a3;
    v19 = swift_slowAlloc(32, -1);
    v41 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = objc_msgSend(v15, "identifier");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v39 = sub_1001A7FE4(v21, v23, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 4);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "User deleted card item %{public}s via swipe action", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v24 = v19;
    a3 = v37;
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  v26 = sub_100006DF4((uint64_t *)&unk_10028C060);
  inited = swift_initStackObject(v26, v42);
  *(_OWORD *)(inited + 16) = xmmword_1001E76E0;
  v28 = *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession];
  *(_QWORD *)(inited + 32) = v28;
  v29 = *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession];
  *(_QWORD *)(inited + 40) = v29;
  v41 = inited;
  specialized Array._endMutation()(inited);
  v30 = v41;
  v31 = v15;
  swift_retain(v28);
  swift_retain(v29);
  v32 = sub_1000C9A8C(v30, v31);
  swift_bridgeObjectRelease(v30);

  if (v32)
  {
    v33 = swift_allocObject(&unk_100269228, 32, 7);
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v33 + 24) = v31;
    v34 = sub_1000C0D24;
  }
  else
  {
    v33 = swift_allocObject(&unk_100269200, 32, 7);
    *(_QWORD *)(v33 + 16) = v13;
    *(_QWORD *)(v33 + 24) = v31;
    v35 = v13;
    v34 = (void (__cdecl *)())sub_1000C0CC0;
  }
  v36 = v31;
  sub_1000C0394(v38, (uint64_t)v13);
  ((void (*)(uint64_t))a3)(1);
  v34();

  return swift_release(v33);
}

void sub_1000BEEEC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t Strong;
  char *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(void);
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 v36;
  _DWORD *v37;
  uint8_t *buf;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];

  v11 = a5 + 16;
  swift_beginAccess(a5 + 16, v45, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v11);
  if (Strong)
  {
    v13 = (char *)Strong;
    if ((dispatch thunk of PersistedTranslation.isFavorite.getter() & 1) != 0)
    {
      if (qword_10028A430 != -1)
        swift_once(&qword_10028A430, sub_100120FC8);
      v14 = type metadata accessor for Logger(0);
      sub_10000F66C(v14, (uint64_t)qword_1002AA398);
      v15 = a6;
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v41 = a8;
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v44 = v39;
        *(_DWORD *)v18 = 136446210;
        v37 = v18 + 4;
        buf = v18;
        v19 = a3;
        v20 = objc_msgSend(v15, "identifier");
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

        a3 = v19;
        v24 = v21;
        a8 = v41;
        v43 = sub_1001A7FE4(v24, v23, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v37);

        swift_bridgeObjectRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unfavoriting translation with id %{public}s via swipe action", buf, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(buf, -1, -1);

      }
      else
      {

      }
      sub_1000C0394(a8, (uint64_t)v13);
      ((void (*)(uint64_t))a3)(1);
      v35 = *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_store];
      v36 = swift_retain(v35);
      TranslationStoreCoreData.toggleFavoriteBackground(_:)(v15, v36);

      swift_release(v35);
    }
    else
    {
      if (qword_10028A430 != -1)
        swift_once(&qword_10028A430, sub_100120FC8);
      v25 = type metadata accessor for Logger(0);
      sub_10000F66C(v25, (uint64_t)qword_1002AA398);
      v26 = a6;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.info.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v42 = a3;
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v44 = v40;
        *(_DWORD *)v29 = 136446210;
        v30 = objc_msgSend(v26, "identifier");
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        v43 = sub_1001A7FE4(v31, v33, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 4);

        v34 = v33;
        a3 = v42;
        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Translation %{public}s was already unfavorited, doing nothing", v29, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

      }
      ((void (*)(_QWORD))a3)(0);

    }
  }
  else
  {
    a3();
  }
}

id sub_1000BF334()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FavoritesCardListController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FavoritesCardListController()
{
  return objc_opt_self(_TtC17SequoiaTranslator27FavoritesCardListController);
}

void sub_1000BF3FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  Swift::UInt v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;

  if (a3 >= 3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, a2, a3);
    v8 = *(_QWORD *)(a4 + 16);
    Hasher._combine(_:)(v8);
    if (v8)
    {
      v9 = (uint64_t *)(a4 + 32);
      do
      {
        v10 = *v9++;
        v11 = (id)(v10 & 0x3FFFFFFFFFFFFFFFLL);
        FavoritesItem.hash(into:)(a1, v10);

        --v8;
      }
      while (v8);
    }
  }
  else
  {
    Hasher._combine(_:)(qword_1001ED6B0[a3]);
  }
}

Swift::Int sub_1000BF4A4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5, 0);
  sub_1000BF3FC((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_1000BF4FC(uint64_t a1)
{
  uint64_t v1;

  sub_1000BF3FC(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

Swift::Int sub_1000BF508(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  sub_1000BF3FC((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1000BF55C(uint64_t a1, uint64_t a2)
{
  return sub_1000BFDF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD **)(a2 + 16));
}

unint64_t destroy for FavoritesCardListController.FavoritesSection(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  }
  return result;
}

uint64_t _s17SequoiaTranslator27FavoritesCardListControllerC16FavoritesSectionOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
  }
  return a1;
}

_QWORD *assignWithCopy for FavoritesCardListController.FavoritesSection(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v9 = a2[1];
      a1[1] = v9;
      v10 = a2[2];
      a1[2] = v10;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      return a1;
    }
LABEL_7:
    v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  v7 = a2[2];
  v8 = a1[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for FavoritesCardListController.FavoritesSection(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for FavoritesCardListController.FavoritesSection(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FavoritesCardListController.FavoritesSection(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FavoritesCardListController.FavoritesSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

_QWORD *sub_1000BFA80(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FavoritesCardListController.FavoritesSection()
{
  return &type metadata for FavoritesCardListController.FavoritesSection;
}

unint64_t sub_1000BFAB8()
{
  unint64_t result;

  result = qword_100290878;
  if (!qword_100290878)
  {
    result = swift_getWitnessTable(&unk_1001ED5E4, &type metadata for FavoritesCardListController.FavoritesSection);
    atomic_store(result, (unint64_t *)&qword_100290878);
  }
  return result;
}

uint64_t sub_1000BFAFC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  char v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  BOOL v20;

  v2 = a1[2];
  if (v2 != a2[2])
    goto LABEL_7;
  if (!v2 || a1 == a2)
    goto LABEL_6;
  v5 = a1[4];
  v6 = a2[4];
  v7 = (id)(v6 & 0x3FFFFFFFFFFFFFFFLL);
  v8 = (id)(v5 & 0x3FFFFFFFFFFFFFFFLL);
  LOBYTE(v5) = static FavoritesItem.== infix(_:_:)(v5, v6);

  if ((v5 & 1) == 0)
  {
LABEL_7:
    v9 = 0;
    return v9 & 1;
  }
  if (v2 == 1)
  {
LABEL_6:
    v9 = 1;
    return v9 & 1;
  }
  v11 = v2 - 2;
  v12 = a1 + 5;
  v13 = a2 + 5;
  do
  {
    v15 = *v12++;
    v14 = v15;
    v16 = *v13++;
    v17 = (id)(v16 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = (id)(v14 & 0x3FFFFFFFFFFFFFFFLL);
    v9 = static FavoritesItem.== infix(_:_:)(v14, v16);

    v20 = v11-- != 0;
  }
  while ((v9 & 1) != 0 && v20);
  return v9 & 1;
}

uint64_t sub_1000BFBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for TranslateTip(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_1000C0E38(a1 + v12, (uint64_t)v10);
        sub_1000C0E38(a2 + v12, (uint64_t)v7);
        v15 = static UUID.== infix(_:_:)(v10, v7);
        sub_100032DAC((uint64_t)v7, type metadata accessor for TranslateTip);
        sub_100032DAC((uint64_t)v10, type metadata accessor for TranslateTip);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1000BFD30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 88);
    v4 = (uint64_t *)(a2 + 88);
    do
    {
      v6 = *(v3 - 5);
      v7 = *(v3 - 4);
      v9 = *(v3 - 1);
      v8 = *v3;
      v10 = *(v4 - 5);
      v11 = *(v4 - 4);
      v13 = *(v4 - 1);
      v12 = *v4;
      if (v6 == v10 && v7 == v11)
      {
        if (v9 != v13 || v8 != v12)
          return 0;
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v11, 0);
        result = 0;
        if ((v15 & 1) == 0)
          return result;
        if (v9 != v13 || v8 != v12)
          return result;
      }
      v4 += 11;
      v3 += 11;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_1000BFDF0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, _QWORD *a6)
{
  uint64_t result;
  char v9;

  switch(a2)
  {
    case 0:
      return !a5;
    case 1:
      return a5 == 1;
    case 2:
      return a5 == 2;
  }
  if (a5 < 3)
    return 0;
  if (a1 == a4 && a2 == a5)
    return sub_1000BFAFC(a3, a6);
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
  result = 0;
  if ((v9 & 1) != 0)
    return sub_1000BFAFC(a3, a6);
  return result;
}

_QWORD *sub_1000BFE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  do
  {
    v7 = *(_QWORD *)(a1 + 8 * v5 + 32);
    v8 = (id)(v7 & 0x3FFFFFFFFFFFFFFFLL);
    if ((static FavoritesItem.== infix(_:_:)(v7, 0x8000000000000000) & 1) != 0
      || (v9 = (void *)FavoritesItem.translation.getter(v7)) == 0)
    {
LABEL_3:

      goto LABEL_4;
    }
    v10 = v9;
    v11 = objc_msgSend(v9, "identifier");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    if (v12 == a2 && v14 == a3)
    {
      swift_bridgeObjectRelease(a3);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
      swift_bridgeObjectRelease(v14);
      if ((v16 & 1) == 0)
        goto LABEL_3;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      v6 = sub_1001A75C4(0, v6[2] + 1, 1, v6);
    v18 = v6[2];
    v17 = v6[3];
    if (v18 >= v17 >> 1)
      v6 = sub_1001A75C4((_QWORD *)(v17 > 1), v18 + 1, 1, v6);
    v6[2] = v18 + 1;
    v6[v18 + 4] = v7;
LABEL_4:
    ++v5;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_1000C003C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  void *v28;
  uint64_t v31;
  _QWORD v32[5];

  v32[3] = type metadata accessor for TranslationStoreCoreData(0);
  v32[4] = &protocol witness table for TranslationStoreCoreData;
  v32[0] = a3;
  *(_QWORD *)(a13 + 16) = 0;
  *(_QWORD *)(a13 + 136) = 0;
  *(_WORD *)(a13 + 144) = 0;
  *(_OWORD *)(a13 + 80) = 0u;
  *(_OWORD *)(a13 + 96) = 0u;
  *(_OWORD *)(a13 + 112) = 0u;
  *(_BYTE *)(a13 + 128) = 0;
  *(_BYTE *)(a13 + 146) = 4;
  *(_QWORD *)(a13 + 160) = 0;
  *(_QWORD *)(a13 + 168) = 0;
  *(_QWORD *)(a13 + 152) = 0;
  *(_DWORD *)(a13 + 175) = 0;
  *(_QWORD *)(a13 + 184) = 0;
  *(_QWORD *)(a13 + 192) = 0;
  *(_BYTE *)(a13 + 200) = 1;
  *(_QWORD *)(a13 + 208) = 0;
  *(_QWORD *)(a13 + 216) = 0;
  *(_BYTE *)(a13 + 224) = 1;
  *(_WORD *)(a13 + 225) = 1;
  *(_BYTE *)(a13 + 227) = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      v28 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
    else
      v28 = &_swiftEmptySetSingleton;
    *(_QWORD *)(a13 + 232) = v28;
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      v19 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
    else
      v19 = &_swiftEmptySetSingleton;
  }
  else
  {
    v19 = &_swiftEmptySetSingleton;
    *(_QWORD *)(a13 + 232) = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(a13 + 240) = v19;
  *(_QWORD *)(a13 + 296) = 0;
  *(_OWORD *)(a13 + 264) = 0u;
  *(_OWORD *)(a13 + 280) = 0u;
  ObservationRegistrar.init()();
  *(_QWORD *)(a13 + 72) = a1;
  v20 = *(_QWORD *)(a13 + 16);
  v21 = a1;
  swift_retain(a2);
  swift_release(v20);
  *(_QWORD *)(a13 + 16) = a2;
  sub_100023AB0((uint64_t)v32, a13 + 24);
  *(_QWORD *)(a13 + 64) = a4;
  v22 = *(void **)(a13 + 80);
  swift_retain(a4);
  v23 = a8;

  *(_QWORD *)(a13 + 80) = a8;
  v24 = *(_QWORD *)(a13 + 136);
  swift_retain(a7);
  swift_release(v24);
  *(_QWORD *)(a13 + 136) = a7;
  *(_QWORD *)(a13 + 248) = a5;
  *(_QWORD *)(a13 + 256) = a6;
  *(_QWORD *)(a13 + 304) = objc_msgSend(objc_allocWithZone((Class)_LTDisambiguationChangeManager), "init");
  sub_100036650(v21, 1);
  KeyPath = swift_getKeyPath(&unk_1001ED650);
  __chkstk_darwin(KeyPath);
  v31 = a13;
  sub_100016244(a9, a10);
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, KeyPath, sub_1000C0DAC);
  sub_10002BA44(a9, a10);
  swift_release(KeyPath);
  v26 = swift_getKeyPath(&unk_1001ED678);
  __chkstk_darwin(v26);
  v31 = a13;
  sub_100016244(a11, a12);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v26, sub_1000C0DD0);
  sub_10002BA44(a11, a12);
  swift_release(v26);
  sub_1000370B8();
  sub_100009C08(v32);
  return a13;
}

void sub_1000C0394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Swift::OpaquePointer v32;
  id v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100290898);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(a2 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
  if (v12)
  {
    v13 = v12;
    v14 = dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(&v35, a1);
    v15 = v35;
    if ((~v35 & 0xF000000000000007) != 0)
    {
      v16 = IndexPath.section.getter(v14);
      dispatch thunk of UICollectionViewDiffableDataSource.sectionIdentifier(for:)(&v35, v16);
      if (v36 != 3)
      {
        v28 = v37;
        v29 = v35;
        v30 = v36;
        UICollectionViewDiffableDataSource.snapshot(for:)(&v35);
        v31 = sub_100006DF4(&qword_100298760);
        v32._rawValue = (void *)swift_allocObject(v31, 40, 7);
        *((_OWORD *)v32._rawValue + 1) = xmmword_1001E64F0;
        *((_QWORD *)v32._rawValue + 4) = v15;
        v33 = (id)(v15 & 0x3FFFFFFFFFFFFFFFLL);
        NSDiffableDataSourceSectionSnapshot.delete(_:)(v32);
        v34 = swift_bridgeObjectRelease(v32._rawValue);
        v35 = v29;
        v36 = v30;
        v37 = v28;
        UICollectionViewDiffableDataSource.apply(_:to:animatingDifferences:completion:)(v11, &v35, 1, 0, 0, v34);

        sub_1000C0D48(v15);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        sub_1000C0D60(v29, v30, v28);
        return;
      }
      sub_1000C0D48(v15);
    }

  }
  if (qword_10028A430 != -1)
    swift_once(&qword_10028A430, sub_100120FC8);
  v17 = type metadata accessor for Logger(0);
  sub_10000F66C(v17, (uint64_t)qword_1002AA398);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v35 = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_100007D5C((unint64_t *)&qword_10028B080, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v4, v23);
    v26 = v25;
    v38 = sub_1001A7FE4(v24, v25, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4);
    v27 = swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to remove item at indexPath %{public}s from snapshot because it can't be found in the data source", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

}

void sub_1000C0708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  id v40;
  _BYTE v41[24];
  uint64_t v42;
  uint64_t v43[4];

  v6 = sub_100006DF4((uint64_t *)&unk_100290880);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v38 - v10;
  if (a3 == 4)
  {
    if (qword_10028A430 != -1)
      swift_once(&qword_10028A430, sub_100120FC8);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA398);
    v14 = sub_1000C0AF8(a2, (uint64_t)v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v38[1] = v13;
      v17 = swift_slowAlloc(12, -1);
      v39 = a1;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc(32, -1);
      v43[0] = v19;
      *(_DWORD *)v18 = 136446210;
      sub_1000C0AF8((uint64_t)v11, (uint64_t)v9);
      v20 = String.init<A>(describing:)(v9, v6);
      v22 = v21;
      v40 = (id)sub_1001A7FE4(v20, v21, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v18 + 4);
      swift_bridgeObjectRelease(v22);
      sub_10000A020((uint64_t)v11, (uint64_t *)&unk_100290880);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Got an update for item at indexPath %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v23 = v18;
      a1 = v39;
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_10000A020((uint64_t)v11, (uint64_t *)&unk_100290880);
    }

    sub_10000A0EC(a1, (uint64_t)v43);
    v24 = type metadata accessor for PersistedTranslation(0);
    if (swift_dynamicCast(&v40, v43, (char *)&type metadata for Any + 8, v24, 6))
    {
      v25 = v40;
      v26 = objc_msgSend(v40, "identifier");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      sub_1000BE024(v27, v29);
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v30 = sub_10000A0EC(a1, (uint64_t)v43);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v42 = v34;
        *(_DWORD *)v33 = 136380675;
        sub_10000A0EC((uint64_t)v43, (uint64_t)&v40);
        v35 = String.init<A>(describing:)(&v40, (char *)&type metadata for Any + 8);
        v37 = v36;
        v40 = (id)sub_1001A7FE4(v35, v36, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v33 + 4);
        swift_bridgeObjectRelease(v37);
        sub_100009C08(v43);
          v33,
          0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {
        sub_100009C08(v43);
      }

    }
  }
}

uint64_t sub_1000C0AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_100290880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C0B40()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C0B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C0C18(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))sub_1000BEEEC);
}

uint64_t sub_1000C0B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C0B84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000C0B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 33) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000C0C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C0C18(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))sub_1000BEBC4);
}

uint64_t sub_1000C0C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t v5;
  uint64_t v10;

  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath(0) - 8) + 80);
  return a5(a1, a2, a3, a4, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(unsigned __int8 *)(v5 + 32), v5 + ((v10 + 33) & ~v10));
}

uint64_t sub_1000C0C94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C0CC0()
{
  uint64_t v0;

  return TranslationStoreCoreData.deleteBackground(_:completion:)(*(_QWORD *)(v0 + 24), nullsub_1, 0);
}

uint64_t sub_1000C0CF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C0D24()
{
  uint64_t v0;

  sub_1001C9FE8(*(void **)(v0 + 24));
}

void sub_1000C0D48(uint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0)

}

uint64_t sub_1000C0D60(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 != 3)
    return sub_1000C0D70(a1, a2, a3);
  return a1;
}

uint64_t sub_1000C0D70(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2 >= 3)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1000C0DAC()
{
  uint64_t *v0;

  return sub_100033A88(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000C0DD0()
{
  uint64_t *v0;

  return sub_100033D54(v0[2], v0[3], v0[4]);
}

id sub_1000C0DEC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BDDC4(a1, v1);
}

double sub_1000C0DF4(double a1)
{
  return round(a1);
}

uint64_t sub_1000C0DFC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2 >= 3)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1000C0E30(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000BDFA8(a1, a2, v2);
}

uint64_t sub_1000C0E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranslateTip(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for FavoritesDetailList(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  return swift_release(a1[5]);
}

_QWORD *initializeWithCopy for FavoritesDetailList(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[4];
  v7 = a2[5];
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

_QWORD *assignWithCopy for FavoritesDetailList(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

_QWORD *assignWithTake for FavoritesDetailList(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  swift_release(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  v6 = a1[5];
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FavoritesDetailList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FavoritesDetailList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FavoritesDetailList()
{
  return &type metadata for FavoritesDetailList;
}

unint64_t sub_1000C10F0()
{
  unint64_t result;

  result = qword_1002908D0;
  if (!qword_1002908D0)
  {
    result = swift_getWitnessTable(&unk_1001ED75C, &type metadata for FavoritesDetailList);
    atomic_store(result, (unint64_t *)&qword_1002908D0);
  }
  return result;
}

id sub_1000C1134()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  v7 = objc_allocWithZone((Class)type metadata accessor for FavoritesDetailListController());
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v4);
  swift_retain(v6);
  return sub_1000C12D0(v1, v2, v3, v5, v4, v6);
}

uint64_t sub_1000C11C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C128C();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C1218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C128C();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000C1268(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C128C();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000C128C()
{
  unint64_t result;

  result = qword_1002908D8;
  if (!qword_1002908D8)
  {
    result = swift_getWitnessTable(&unk_1001ED6E4, &type metadata for FavoritesDetailList);
    atomic_store(result, (unint64_t *)&qword_1002908D8);
  }
  return result;
}

id sub_1000C12D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  objc_super v9;

  *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController____lazy_storage___favoritesLocalePairResultsController] = 1;
  v7 = &v6[OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController_displayLocalePairText];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_store] = a3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_ttsManager] = a4;
  *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession] = a5;
  *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession] = a6;
  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for FavoritesCardListController();
  return objc_msgSendSuper2(&v9, "initWithNibName:bundle:", 0, 0);
}

uint64_t sub_1000C14D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v1 = sub_100006DF4(&qword_100290928);
  v43 = *(_QWORD *)(v1 - 8);
  v44 = v1;
  v2 = *(_QWORD *)(v43 + 64);
  v3 = __chkstk_darwin(v1);
  v39 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)&v39 - v4;
  v5 = sub_100006DF4(&qword_100290930);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - v10;
  v12 = swift_allocObject(&unk_1002693D8, 24, 7);
  *(_QWORD *)(v12 + 16) = v0;
  v13 = sub_1000C274C();
  v14 = v0;
  v41 = v13;
  result = UICollectionView.CellRegistration.init(handler:)(sub_1000C2744, v12, v13, &type metadata for FavoritesItem);
  v16 = *(void **)&v14[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView];
  if (v16)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v17 = *(unsigned __int8 *)(v6 + 80);
    v18 = (v17 + 16) & ~v17;
    v19 = swift_allocObject(&unk_100269400, v18 + v7, v17 | 7);
    v20 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    v40 = v5;
    v20(v19 + v18, v9, v5);
    v21 = swift_allocObject(&unk_100269428, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1000C2794;
    *(_QWORD *)(v21 + 24) = v19;
    v22 = objc_allocWithZone((Class)sub_100006DF4(&qword_100290940));
    v23 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v16, sub_1000C2810, v21);
    v24 = OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource;
    v25 = *(void **)&v14[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource];
    *(_QWORD *)&v14[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource] = v23;

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
    v28 = v27;
    v29 = swift_allocObject(&unk_100269450, 24, 7);
    swift_unknownObjectWeakInit(v29 + 16, v14);
    v30 = v42;
    UICollectionView.SupplementaryRegistration.init(elementKind:handler:)(v26, v28, sub_1000C283C, v29, v41);
    v31 = *(void **)&v14[v24];
    v33 = v43;
    v32 = v44;
    if (v31)
    {
      v34 = v39;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v39, v30, v44);
      v35 = *(unsigned __int8 *)(v33 + 80);
      v36 = (v35 + 16) & ~v35;
      v37 = swift_allocObject(&unk_100269478, v36 + v2, v35 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v37 + v36, v34, v32);
      v38 = v31;
      dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter(sub_1000C28AC, v37);

    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v40);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C17E4(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[48];
  __int128 v32;
  __int128 v33;
  unint64_t v34;

  v6 = sub_100006DF4((uint64_t *)&unk_100298720);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (unint64_t)*a3;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  UICollectionViewCell.contentConfiguration.setter(&v32);
  if (v10 >> 62 == 2)
  {
    if (qword_10028A430 != -1)
      swift_once(&qword_10028A430, sub_100120FC8);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA398);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unsupported item in FavoritesDetailListController UICollectionView cell registration", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    return UICollectionViewCell.contentConfiguration.setter(&v32);
  }
  else
  {
    v11 = (void *)(v10 & 0x3FFFFFFFFFFFFFFFLL);
    if (v10 >> 62 == 1)
      v10 &= 0x3FFFFFFFFFFFFFFFuLL;
    v18 = sub_100006DF4((uint64_t *)&unk_10028C060);
    inited = swift_initStackObject(v18, v31);
    *(_OWORD *)(inited + 16) = xmmword_1001E76E0;
    v20 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession);
    *(_QWORD *)(inited + 32) = v20;
    v21 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession);
    *(_QWORD *)(inited + 40) = v21;
    *(_QWORD *)&v32 = inited;
    specialized Array._endMutation()(inited);
    v22 = v32;
    v23 = v11;
    swift_retain(v20);
    swift_retain(v21);
    v24 = sub_1000C9A8C(v22, (void *)v10);
    swift_bridgeObjectRelease(v22);

    v25 = sub_1000BE490((void *)v10, v24);
    swift_release(v24);
    v26 = type metadata accessor for TranslationCardView(0);
    v27 = sub_100007D5C(&qword_100290948, type metadata accessor for TranslationCardView, (uint64_t)&unk_1001F6898);
    v28 = UIHostingConfiguration<>.init(content:)(sub_1000C2910, v25, v26, v27);
    v29 = static Edge.Set.all.getter(v28);
    *((_QWORD *)&v33 + 1) = v6;
    v34 = sub_1000C2918();
    sub_1000122F8(&v32);
    UIHostingConfiguration.margins(_:_:)(v29, v6, 0.0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    UICollectionViewCell.contentConfiguration.setter(&v32);
    return swift_release(v25);
  }
}

uint64_t sub_1000C1AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t (**v29)(uint64_t, uint64_t, Swift::UInt);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char v33;
  _QWORD v34[2];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  UUID.init()(v8);
  v9 = type metadata accessor for SharedTranslationOptions(0);
  v10 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  v11 = EnvironmentObject.init()(v9, v10);
  v13 = v12;
  KeyPath = swift_getKeyPath(&unk_1001ED7D0);
  v15 = (int *)type metadata accessor for TranslationCardView(0);
  v16 = (uint64_t *)(a2 + v15[9]);
  *v16 = KeyPath;
  v17 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  v18 = type metadata accessor for CommittedTranslationViewModel(0);
  v19 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  Bindable<A>.init(wrappedValue:)(a1, v18, v19);
  v20 = (_QWORD *)(a2 + v15[6]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (_QWORD *)(a2 + v15[7]);
  *v21 = 0;
  v21[1] = 0;
  v22 = (uint64_t *)(a2 + v15[8]);
  *v22 = v11;
  v22[1] = v13;
  v23 = (_QWORD *)(a2 + v15[10]);
  v24 = type metadata accessor for SceneContext(0);
  v25 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  *v23 = EnvironmentObject.init()(v24, v25);
  v23[1] = v26;
  v27 = a2 + v15[11];
  v33 = 0;
  State.init(wrappedValue:)(v34, &v33, &type metadata for Bool);
  v28 = v34[1];
  *(_BYTE *)v27 = v34[0];
  *(_QWORD *)(v27 + 8) = v28;
  v29 = (unint64_t (**)(uint64_t, uint64_t, Swift::UInt))(a2 + v15[12]);
  *v29 = sub_1001B8750;
  v29[1] = 0;
  v30 = v15[13];
  result = Image.init(systemName:)(0xD000000000000010, 0x80000001001F8F60);
  *(_QWORD *)(a2 + v30) = result;
  return result;
}

uint64_t sub_1000C1CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a3;
  v6 = (void *)(a3 & 0x3FFFFFFFFFFFFFFFLL);
  v7 = sub_1000C274C();
  v8 = v6;
  v9 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(a4, a2, &v11, v7, &type metadata for FavoritesItem);

  return v9;
}

unint64_t sub_1000C1D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t result;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD v31[2];
  _QWORD v32[5];
  _BYTE v33[24];

  v31[1] = a4;
  v7 = type metadata accessor for UIListContentConfiguration(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v31 - v12;
  v14 = sub_100006DF4(&qword_1002908B8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5 += 16;
  swift_beginAccess(a5, v33, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a5);
  if (result)
  {
    v19 = (void *)result;
    v20 = *(void **)(result + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
    if (v20)
    {
      v31[0] = a1;
      v21 = v20;
      dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

      v22 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v14);
      v23 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      result = IndexPath.section.getter(v23);
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (result < *(_QWORD *)(v22 + 16))
      {
        v24 = (_QWORD *)(v22 + 24 * result);
        v25 = v24[4];
        v26 = v24[5];
        v27 = v24[6];
        sub_1000C0DFC(v25, v26, v27);
        v28 = swift_bridgeObjectRelease(v22);
        static UIListContentConfiguration.extraProminentInsetGroupedHeader()(v28);
        if (v26 != 3)
        {
          v29 = sub_1000BDEB8(v25, v26);
          UIListContentConfiguration.text.setter(v29);
        }
        goto LABEL_9;
      }
      __break(1u);
      return result;
    }
    ((void (*)(void))static UIListContentConfiguration.extraProminentInsetGroupedHeader())();
    v27 = 0;
    v25 = 0;
    v26 = 3;
LABEL_9:
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v7);
    sub_1000C0D60(v25, v26, v27);
    v32[3] = v7;
    v32[4] = &protocol witness table for UIListContentConfiguration;
    v30 = sub_1000122F8(v32);
    (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 16))(v30, v13, v7);
    UICollectionViewCell.contentConfiguration.setter(v32);

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  return result;
}

uint64_t sub_1000C1FC0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v2 = v1;
  v4 = sub_100006DF4(&qword_1002908B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000C2698();
  v9 = sub_1000C26DC();
  NSDiffableDataSourceSnapshot.init()(&type metadata for FavoritesCardListController.FavoritesSection, &type metadata for FavoritesItem, v8, v9);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_1002621A8);
  v10 = sub_1000C2278();
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, "fetchedObjects");

    if (v12)
    {
      v13 = type metadata accessor for PersistedTranslation(0);
      v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

      if ((unint64_t)v14 >> 62)
      {
        if (v14 < 0)
          v23 = v14;
        else
          v23 = v14 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v14);
        v15 = _CocoaArrayWrapper.endIndex.getter(v23);
        swift_bridgeObjectRelease(v14);
        if (v15)
          goto LABEL_5;
      }
      else
      {
        v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v15)
        {
LABEL_5:
          *(_QWORD *)&v31 = _swiftEmptyArrayStorage;
          result = sub_1001DA204(0, v15 & ~(v15 >> 63), 0);
          if (v15 < 0)
          {
            __break(1u);
            return result;
          }
          HIDWORD(v27) = a1;
          v28 = v5;
          v29 = v4;
          v30 = v2;
          v17 = 0;
          v18 = (_QWORD *)v31;
          do
          {
            if ((v14 & 0xC000000000000001) != 0)
              v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
            else
              v19 = *(id *)(v14 + 8 * v17 + 32);
            v20 = v19;
            *(_QWORD *)&v31 = v18;
            v22 = v18[2];
            v21 = v18[3];
            if (v22 >= v21 >> 1)
            {
              sub_1001DA204(v21 > 1, v22 + 1, 1);
              v18 = (_QWORD *)v31;
            }
            ++v17;
            v18[2] = v22 + 1;
            v18[v22 + 4] = v20;
          }
          while (v15 != v17);
          swift_bridgeObjectRelease(v14);
          v4 = v29;
          v2 = v30;
          v5 = v28;
          LOBYTE(a1) = BYTE4(v27);
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease(v14);
      v18 = _swiftEmptyArrayStorage;
LABEL_19:
      v31 = xmmword_1001EB430;
      v32 = 0;
      NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v18, &v31, v4);
      swift_bridgeObjectRelease(v18);
    }
  }
  v24 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
  if (v24)
  {
    v25 = v24;
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v7, a1 & 1, 0, 0);

  }
  v26 = NSDiffableDataSourceSnapshot.numberOfItems.getter(v4) < 1;
  sub_1000BE678(v26);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_1000C2278()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController____lazy_storage___favoritesLocalePairResultsController;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController____lazy_storage___favoritesLocalePairResultsController);
  v3 = v2;
  if (v2 == (void *)1)
  {
    v3 = sub_1000C22E4(v0);
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    v5 = v3;
    sub_1000C2688(v4);
  }
  sub_1000C296C(v2);
  return v3;
}

id sub_1000C22E4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  NSString v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  id v21;
  uint64_t v22;

  type metadata accessor for PersistedTranslation(0);
  v2 = (id)static PersistedTranslation.favoritedSortedByCreationDateFetchRequest(localePair:)(*(_QWORD *)(a1+ OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController_displayLocalePairText), *(_QWORD *)(a1+ OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController_displayLocalePairText+ 8));
  v3 = (void *)dispatch thunk of TranslationStoreCoreData.viewContext.getter();
  v4 = objc_allocWithZone((Class)NSFetchedResultsController);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v2, v3, v5, 0);

  objc_msgSend(v6, "setDelegate:", a1);
  v21 = 0;
  v7 = objc_msgSend(v6, "performFetch:", &v21);
  v8 = v21;
  if (v7)
  {
    v9 = v21;
  }
  else
  {
    v10 = v21;
    v11 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    if (qword_10028A418 != -1)
      swift_once(&qword_10028A418, sub_100120F48);
    v12 = type metadata accessor for Logger(0);
    sub_10000F66C(v12, (uint64_t)qword_1002AA350);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = (void *)_convertErrorToNSError(_:)(v11);
      v21 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v16 + 4);
      *v17 = v18;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed initial fetch of favorites data: %@", v16, 0xCu);
      v19 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v11);
    }
    else
    {

      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      v2 = v14;
    }
  }

  return v6;
}

void sub_1000C25CC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController_displayLocalePairText
                                      + 8));
  sub_1000C2688(*(id *)(v0
                      + OBJC_IVAR____TtC17SequoiaTranslator29FavoritesDetailListController____lazy_storage___favoritesLocalePairResultsController));
}

id sub_1000C25FC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FavoritesDetailListController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FavoritesDetailListController()
{
  return objc_opt_self(_TtC17SequoiaTranslator29FavoritesDetailListController);
}

void sub_1000C2688(id a1)
{
  if (a1 != (id)1)

}

unint64_t sub_1000C2698()
{
  unint64_t result;

  result = qword_100290918;
  if (!qword_100290918)
  {
    result = swift_getWitnessTable(&unk_1001ED60C, &type metadata for FavoritesCardListController.FavoritesSection);
    atomic_store(result, (unint64_t *)&qword_100290918);
  }
  return result;
}

unint64_t sub_1000C26DC()
{
  unint64_t result;

  result = qword_100290920;
  if (!qword_100290920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FavoritesItem, &type metadata for FavoritesItem);
    atomic_store(result, (unint64_t *)&qword_100290920);
  }
  return result;
}

uint64_t sub_1000C2720()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C2744(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v3;

  return sub_1000C17E4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

unint64_t sub_1000C274C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290938;
  if (!qword_100290938)
  {
    v1 = objc_opt_self(UICollectionViewListCell);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100290938);
  }
  return result;
}

uint64_t sub_1000C2788()
{
  return sub_1000C2850(&qword_100290930);
}

uint64_t sub_1000C2794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100006DF4(&qword_100290930) - 8) + 80);
  return sub_1000C1CF8(a1, a2, a3, v3 + ((v7 + 16) & ~v7));
}

uint64_t sub_1000C27EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C2810(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1000C5BDC(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 16));
}

uint64_t sub_1000C2818()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000C283C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000C1D7C(a1, a2, a3, a4, v4);
}

uint64_t sub_1000C2844()
{
  return sub_1000C2850(&qword_100290928);
}

uint64_t sub_1000C2850(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100006DF4(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000C28AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_100006DF4(&qword_100290928) - 8) + 80);
  v7 = v4 + ((v6 + 16) & ~v6);
  v8 = sub_1000C274C();
  return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)(v7, a4, v8);
}

uint64_t sub_1000C2910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C1AC4(v1, a1);
}

unint64_t sub_1000C2918()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298730;
  if (!qword_100298730)
  {
    v1 = sub_1000070BC((uint64_t *)&unk_100298720);
    result = swift_getWitnessTable(&protocol conformance descriptor for UIHostingConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298730);
  }
  return result;
}

id sub_1000C296C(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t *sub_1000C297C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v17);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[2];
    v7 = a2[3];
    a1[2] = v6;
    a1[3] = v7;
    v8 = a2[4];
    v9 = a2[5];
    v10 = *(int *)(a3 + 36);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    a1[4] = v8;
    a1[5] = v9;
    swift_bridgeObjectRetain(v5);
    swift_retain(v6);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    v13 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        v16 = sub_100006DF4(&qword_10028CE40);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(v11, v12, v14);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
      v19 = v11;
      v20 = v13;
      v21 = 1;
    }
    else
    {
      v18 = *v12;
      *v11 = *v12;
      swift_retain(v18);
      v19 = v11;
      v20 = v13;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

uint64_t sub_1000C2AF0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 36));
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  return result;
}

_QWORD *sub_1000C2BC0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for UserInterfaceSizeClass(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
    {
      v15 = sub_100006DF4(&qword_10028CE40);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      v16 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
      v16 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
  }
  else
  {
    v17 = *v11;
    *v10 = *v11;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v16);
  return a1;
}

_QWORD *sub_1000C2D08(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[5];
  v15 = a1[5];
  a1[5] = v14;
  swift_retain(v14);
  swift_release(v15);
  if (a1 != a2)
  {
    v16 = *(int *)(a3 + 36);
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    sub_10000A020((uint64_t)a1 + v16, (uint64_t *)&unk_100291470);
    v19 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for UserInterfaceSizeClass(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
      {
        v22 = sub_100006DF4(&qword_10028CE40);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        v23 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v21 + 16))(v17, v18, v20);
        v23 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
      }
    }
    else
    {
      v24 = *v18;
      *v17 = *v18;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v23);
  }
  return a1;
}

_OWORD *sub_1000C2EAC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 36);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      v11 = sub_100006DF4(&qword_10028CE40);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1000C2FBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_release(v9);
  v10 = a1[4];
  a1[4] = a2[4];
  swift_release(v10);
  v11 = a1[5];
  a1[5] = a2[5];
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 36);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_10000A020((uint64_t)a1 + v12, (uint64_t *)&unk_100291470);
    v15 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for UserInterfaceSizeClass(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = sub_100006DF4(&qword_10028CE40);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v13, v14, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000C312C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3138);
}

uint64_t sub_1000C3138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1000C31B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C31C4);
}

uint64_t sub_1000C31C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FavoritesDetailView(uint64_t a1)
{
  uint64_t result;

  result = qword_1002909A8;
  if (!qword_1002909A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FavoritesDetailView);
  return result;
}

void sub_1000C3278(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1001ED818;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_1000C3300(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10021326C, 1);
}

uint64_t sub_1000C3310@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028CE40);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v27 - v14;
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v27 - v16);
  type metadata accessor for FavoritesDetailView(0);
  sub_1000D58EC(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v15, enum case for UserInterfaceSizeClass.regular(_:), v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_100070CF4((uint64_t)v17, (uint64_t)v8);
  sub_100070CF4((uint64_t)v15, v18);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v19((uint64_t)v8, 1, v2) != 1)
  {
    sub_100070CF4((uint64_t)v8, (uint64_t)v12);
    if (v19(v18, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v18, v2);
      v20 = sub_1000C3C44();
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v5, v2, v20);
      v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      v22(v5, v2);
      sub_10000A020((uint64_t)v15, &qword_10028CE40);
      sub_10000A020((uint64_t)v17, &qword_10028CE40);
      v22(v12, v2);
      sub_10000A020((uint64_t)v8, &qword_10028CE40);
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v23 = (unsigned int *)&enum case for NavigationBarItem.TitleDisplayMode.automatic(_:);
      goto LABEL_10;
    }
    sub_10000A020((uint64_t)v15, &qword_10028CE40);
    sub_10000A020((uint64_t)v17, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
LABEL_6:
    sub_10000A020((uint64_t)v8, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v15, &qword_10028CE40);
  sub_10000A020((uint64_t)v17, &qword_10028CE40);
  if (v19(v18, 1, v2) != 1)
    goto LABEL_6;
  sub_10000A020((uint64_t)v8, &qword_10028CE40);
LABEL_8:
  v23 = (unsigned int *)&enum case for NavigationBarItem.TitleDisplayMode.inline(_:);
LABEL_10:
  v24 = *v23;
  v25 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(a1, v24, v25);
}

uint64_t sub_1000C3628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028CE40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v24 - v14);
  type metadata accessor for FavoritesDetailView(0);
  sub_1000D58EC(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100070CF4((uint64_t)v15, (uint64_t)v6);
  sub_100070CF4((uint64_t)v13, v16);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) != 1)
  {
    sub_100070CF4((uint64_t)v6, (uint64_t)v10);
    if (v17(v16, 1, v0) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      v18 = sub_1000C3C44();
      v19 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v18);
      v20 = *(void (**)(char *, uint64_t))(v1 + 8);
      v20(v3, v0);
      sub_10000A020((uint64_t)v13, &qword_10028CE40);
      sub_10000A020((uint64_t)v15, &qword_10028CE40);
      v20(v10, v0);
      sub_10000A020((uint64_t)v6, &qword_10028CE40);
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v21 = 0x455449524F564146;
      v22 = 0xE900000000000053;
      return LocalizedStringKey.init(stringLiteral:)(v21, v22);
    }
    sub_10000A020((uint64_t)v13, &qword_10028CE40);
    sub_10000A020((uint64_t)v15, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_6:
    sub_10000A020((uint64_t)v6, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v13, &qword_10028CE40);
  sub_10000A020((uint64_t)v15, &qword_10028CE40);
  if (v17(v16, 1, v0) != 1)
    goto LABEL_6;
  sub_10000A020((uint64_t)v6, &qword_10028CE40);
LABEL_8:
  v21 = 0;
  v22 = 0xE000000000000000;
  return LocalizedStringKey.init(stringLiteral:)(v21, v22);
}

uint64_t sub_1000C3930@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  char *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t (*v43)(char *, uint64_t, __n128);
  __n128 v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;

  v2 = v1;
  v53 = a1;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100006DF4(&qword_1002909F0);
  v52 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_1002909F8);
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  __chkstk_darwin(v8);
  v48 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v1;
  v10 = v1[1];
  v13 = v2[4];
  v12 = v2[5];
  v14 = v2[2];
  v15 = v2[3];
  swift_bridgeObjectRetain(v10);
  swift_retain(v14);
  swift_retain(v13);
  swift_retain(v12);
  swift_retain(v15);
  v17 = static SafeAreaRegions.container.getter(v16);
  v18 = static Edge.Set.all.getter(v17);
  v54 = v11;
  v55 = v10;
  v56 = v14;
  v57 = v13;
  v58 = v12;
  v59 = v15;
  v60 = v17;
  v61 = v18;
  sub_1000C3310((uint64_t)v5);
  v19 = sub_100006DF4(&qword_100290A00);
  v20 = sub_1000C3BD8();
  View.navigationBarTitleDisplayMode(_:)(v5, v19, v20);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v5, v47);
  v21 = v55;
  v22 = v56;
  v23 = v57;
  v24 = v58;
  swift_release(v59);
  swift_release(v24);
  swift_release(v23);
  swift_release(v22);
  swift_bridgeObjectRelease(v21);
  v25 = sub_1000C3628();
  v27 = v26;
  LOBYTE(v23) = v28;
  v30 = v29;
  v54 = v19;
  v55 = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v33 = v48;
  v32 = v49;
  View.navigationBarTitle(_:)(v25, v27, v23 & 1, v30, v49, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v30);
  v34 = swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v7, v32, v34);
  v36 = *v2;
  v35 = v2[1];
  v37 = v50;
  v38 = v53;
  v39 = v33;
  v40 = v33;
  v41 = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 16))(v53, v39, v51);
  v42 = (_QWORD *)(v38 + *(int *)(sub_100006DF4(&qword_100290A10) + 52));
  *v42 = v36;
  v42[1] = v35;
  v43 = *(uint64_t (**)(char *, uint64_t, __n128))(v37 + 8);
  v44 = swift_bridgeObjectRetain(v35);
  return v43(v40, v41, v44);
}

unint64_t sub_1000C3BD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290A08;
  if (!qword_100290A08)
  {
    v1 = sub_1000070BC(&qword_100290A00);
    sub_1000C10F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290A08);
  }
  return result;
}

unint64_t sub_1000C3C44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D028;
  if (!qword_10028D028)
  {
    v1 = type metadata accessor for UserInterfaceSizeClass(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInterfaceSizeClass, v1);
    atomic_store(result, (unint64_t *)&qword_10028D028);
  }
  return result;
}

unint64_t sub_1000C3C90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290A18;
  if (!qword_100290A18)
  {
    v1 = sub_1000070BC(&qword_100290A10);
    result = swift_getWitnessTable(&protocol conformance descriptor for IDView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290A18);
  }
  return result;
}

id sub_1000C3CDC(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  objc_super v19;

  v9 = OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_label;
  v10 = objc_allocWithZone((Class)UILabel);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_button;
  *(_QWORD *)&v11[v12] = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = &v11[OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_buttonAction];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;

  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for FavoritesHeaderView();
  v14 = objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
  v15 = (void *)objc_opt_self(UIColor);
  v16 = v14;
  v17 = objc_msgSend(v15, "clearColor");
  objc_msgSend(v16, "setBackgroundColor:", v17);

  sub_1000C3E88();
  sub_1000C4078();

  return v16;
}

id sub_1000C3E88()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  void *object;
  NSString v8;
  NSString v9;
  id v10;
  Swift::String v12;

  v1 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_label];
  objc_msgSend(v0, "addSubview:", v1);
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_button];
  objc_msgSend(v0, "addSubview:", v2);
  v3 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 22.0, UIFontWeightBold);
  objc_msgSend(v1, "setFont:", v3);

  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._countAndFlagsBits = 0xD000000000000011;
  v12._countAndFlagsBits = 0xD00000000000001BLL;
  v12._object = (void *)0x80000001001FC3E0;
  v5._object = (void *)0x80000001001FC3C0;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v12)._object;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v2, "setTitle:forState:", v8, 0);

  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v9);

  objc_msgSend(v2, "setTitleColor:forState:", v10, 0);
  return objc_msgSend(v2, "addTarget:action:forControlEvents:", v0, "buttonPressed", 64);
}

void sub_1000C4078()
{
  char *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  Class isa;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_label];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_button];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = objc_msgSend(v2, "bottomAnchor");
  v5 = objc_msgSend(v1, "bottomAnchor");
  v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, -17.0);

  LODWORD(v7) = 1148829696;
  objc_msgSend(v6, "setPriority:", v7);
  v27 = (void *)objc_opt_self(NSLayoutConstraint);
  v8 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v9 = swift_allocObject(v8, 80, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001E7580;
  v10 = objc_msgSend(v2, "leadingAnchor");
  v11 = objc_msgSend(v1, "leadingAnchor");
  v12 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v11, 17.0);

  *(_QWORD *)(v9 + 32) = v12;
  v13 = objc_msgSend(v2, "trailingAnchor");
  v14 = objc_msgSend(v3, "leadingAnchor");
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v14, -8.0);

  *(_QWORD *)(v9 + 40) = v15;
  v16 = objc_msgSend(v2, "topAnchor");
  v17 = objc_msgSend(v1, "topAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:constant:", v17, 17.0);

  *(_QWORD *)(v9 + 48) = v18;
  *(_QWORD *)(v9 + 56) = v6;
  v19 = v6;
  v20 = objc_msgSend(v3, "trailingAnchor");
  v21 = objc_msgSend(v1, "trailingAnchor");
  v22 = objc_msgSend(v20, "constraintEqualToAnchor:constant:", v21, -17.0);

  *(_QWORD *)(v9 + 64) = v22;
  v23 = objc_msgSend(v3, "firstBaselineAnchor");
  v24 = objc_msgSend(v2, "firstBaselineAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v9 + 72) = v25;
  specialized Array._endMutation()(v26);
  sub_100025254();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "activateConstraints:", isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

}

id sub_1000C444C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FavoritesHeaderView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FavoritesHeaderView()
{
  return objc_opt_self(_TtC17SequoiaTranslator19FavoritesHeaderView);
}

void sub_1000C44E8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_label;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_button;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = &v0[OBJC_IVAR____TtC17SequoiaTranslator19FavoritesHeaderView_buttonAction];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/FavoritesHeaderView.swift", 43, 2, 31, 0);
  __break(1u);
}

char *sub_1000C45C0(uint64_t a1)
{
  char *v1;
  char *v3;
  __n128 v4;
  char *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  id v9;
  objc_super v11;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator17FavoritesImporter_subscriptions] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator17FavoritesImporter_translationStore] = a1;
  type metadata accessor for SharedTranslations(0);
  v3 = v1;
  v4 = swift_retain(a1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator17FavoritesImporter_sharedFavorites] = static SharedTranslations.translationGroupSharedTranslations()(v4);

  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for FavoritesImporter();
  v5 = (char *)objc_msgSendSuper2(&v11, "init");
  v6 = *(void **)&v5[OBJC_IVAR____TtC17SequoiaTranslator17FavoritesImporter_sharedFavorites];
  v7 = swift_allocObject(&unk_100269500, 24, 7);
  *(_QWORD *)(v7 + 16) = v5;
  v8 = v5;
  v9 = v6;
  dispatch thunk of SharedTranslations.presentedItemChangedAction.setter(sub_1000C4E84, v7);

  swift_release(a1);
  return v8;
}

uint64_t sub_1000C46C0()
{
  return sub_1000C47FC("Running FavoritesImporter", (uint64_t)&unk_1002695A0, (uint64_t)&unk_100290AC0);
}

uint64_t sub_1000C46DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000C46F4, 0, 0);
}

uint64_t sub_1000C46F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of SharedTranslations.loadTranslations()
                         + async function pointer to dispatch thunk of SharedTranslations.loadTranslations());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of SharedTranslations.loadTranslations()
                                  + 1));
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1000C475C;
  return v3();
}

uint64_t sub_1000C475C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_1000C47B0, 0, 0);
}

uint64_t sub_1000C47B0()
{
  uint64_t v0;

  sub_1000C47E0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C47E0()
{
  return sub_1000C47FC("Running FavoritesImporter without loading first", (uint64_t)&unk_100269528, (uint64_t)&unk_100290AA8);
}

uint64_t sub_1000C47FC(const char *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;

  v7 = v3;
  v8 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A430 != -1)
    swift_once(&qword_10028A430, sub_100120FC8);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000F66C(v11, (uint64_t)qword_1002AA398);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a1, v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject(a2, 40, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v7;
  v18 = v7;
  v19 = sub_100049DC0((uint64_t)v10, a3, (uint64_t)v17);
  return swift_release(v19);
}

uint64_t sub_1000C4978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000C4990, 0, 0);
}

uint64_t sub_1000C4990()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17FavoritesImporter_translationStore);
  v0[3] = v2;
  v0[4] = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17FavoritesImporter_sharedFavorites);
  v3 = swift_retain(v2);
  v4 = dispatch thunk of SharedTranslations.translations.getter(v3);
  v0[5] = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_100290AB4);
  v0[6] = v5;
  *v5 = v0;
  v5[1] = sub_1000C4A24;
  v5[3] = v4;
  v5[4] = v2;
  return swift_task_switch(sub_1000C4B18, 0, 0);
}

uint64_t sub_1000C4A24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v3 = *(_QWORD *)(*v0 + 24);
  v7 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of SharedTranslations.clear()
                         + async function pointer to dispatch thunk of SharedTranslations.clear());
  v4 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of SharedTranslations.clear()
                                  + 1));
  *(_QWORD *)(v1 + 56) = v4;
  *v4 = v7;
  v4[1] = sub_1000C4AB8;
  return v6();
}

uint64_t sub_1000C4AB8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000C4B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_1000C4B18, 0, 0);
}

uint64_t sub_1000C4B18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (qword_10028A430 != -1)
    swift_once(&qword_10028A430, sub_100120FC8);
  v1 = v0[3];
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA398);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[3];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v0[2] = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4);
    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Importing %ld favorites", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v0[3]);
  }

  v9 = v0[3];
  v10 = v0[4];
  v0[5] = TranslationStoreCoreData.persistentContainer.getter();
  v11 = swift_allocObject(&unk_100269550, 24, 7);
  swift_weakInit(v11 + 16, v10);
  v12 = swift_allocObject(&unk_100269578, 32, 7);
  v0[6] = v12;
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = async function pointer to NSPersistentContainer.performBackgroundTask<A>(_:)[1];
  swift_bridgeObjectRetain(v9);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[7] = v14;
  *v14 = v0;
  v14[1] = sub_1000C4CF8;
  return NSPersistentContainer.performBackgroundTask<A>(_:)();
}

uint64_t sub_1000C4CF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v2 = *(void **)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release(v1);

  return swift_task_switch(sub_1000C4D5C, 0, 0);
}

uint64_t sub_1000C4D5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000C4D90()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FavoritesImporter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FavoritesImporter()
{
  return objc_opt_self(_TtC17SequoiaTranslator17FavoritesImporter);
}

uint64_t sub_1000C4E28@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for FavoritesImporter();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000C4E60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C4E84()
{
  return sub_1000C47E0();
}

void sub_1000C4EA4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  NSString v47;
  char *v48;
  uint64_t v49;
  Class isa;
  unsigned __int8 v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t Strong;
  id v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[5];
  id v94;
  _QWORD v95[4];
  char v96[8];

  v88 = a1;
  v79 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for UUID(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StoredTranslationResult(0);
  v9 = *(_QWORD *)(v8 - 8);
  v91 = v8;
  v92 = v9;
  __chkstk_darwin(v8);
  v90 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for SpeechResultOrigin(0);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v84 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12);
  v83 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for StoredSpeechResult(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v96, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v18 = *(char **)(a3 + 16);
    if (v18)
    {
      v73 = v3;
      v19 = *(_QWORD *)(type metadata accessor for SharedTranslations.Translation(0) - 8);
      v20 = a3 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      v81 = *(_QWORD *)(v19 + 72);
      v80 = enum case for SpeechResultOrigin.text(_:);
      v72 = a3;
      v21 = swift_bridgeObjectRetain(a3);
      v71 = v18;
      v89 = v14;
      v82 = v17;
      do
      {
        v22 = SharedTranslations.Translation.sourceText.getter(v21);
        v24 = v23;
        v25 = v15;
        v26 = v83;
        SharedTranslations.Translation.sourceLocale.getter();
        v27 = v84;
        (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, v80, v86);
        v28 = v27;
        v29 = v89;
        v30 = StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v22, v24, 0, 0, v26, v28);
        v31 = SharedTranslations.Translation.targetText.getter(v30);
        v33 = v32;
        SharedTranslations.Translation.targetLocale.getter();
        v34 = v17;
        v35 = v90;
        v36 = v26;
        v15 = v25;
        StoredTranslationResult.init(text:locale:isOffline:romanization:)(v31, v33, v36, 1, 0, 0);
        v95[2] = v29;
        v95[3] = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
        v37 = sub_1000122F8(&v94);
        (*(void (**)(_QWORD *, char *, uint64_t))(v25 + 16))(v37, v34, v29);
        v38 = v91;
        v93[3] = v91;
        v93[4] = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
        v39 = sub_1000122F8(v93);
        (*(void (**)(_QWORD *, char *, uint64_t))(v92 + 16))(v39, v35, v38);
        v40 = (void *)TranslationStoreCoreData.insert(speech:translationResult:context:isFavorite:)(&v94, v93, v88, 0);
        sub_100009C08(v93);
        v41 = sub_100009C08(&v94);
        if (v40)
        {
          v42 = v74;
          v43 = UUID.init()(v41);
          UUID.uuidString.getter(v43);
          v45 = v44;
          (*(void (**)(char *, uint64_t))(v75 + 8))(v42, v76);
          v29 = v89;
          v46 = String._bridgeToObjectiveC()();
          objc_msgSend(v40, "setRequestID:", v46, swift_bridgeObjectRelease(v45).n128_f64[0]);

          v47 = String._bridgeToObjectiveC()();
          objc_msgSend(v40, "setSessionID:", v47);

          v48 = v77;
          Date.init()(v49);
          isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v78 + 8))(v48, v79);
          objc_msgSend(v40, "setFavoriteDate:", isa);

        }
        (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v91);
        v17 = v82;
        (*(void (**)(char *, uint64_t))(v25 + 8))(v82, v29);
        v20 += v81;
        --v18;
      }
      while (v18);
      a3 = v72;
      swift_bridgeObjectRelease(v72);
      v18 = v71;
    }
    v94 = 0;
    v51 = objc_msgSend(v88, "save:", &v94);
    v52 = v94;
    if ((v51 & 1) != 0)
    {
      v53 = qword_10028A430;
      v54 = v94;
      if (v53 != -1)
        swift_once(&qword_10028A430, sub_100120FC8);
      v55 = type metadata accessor for Logger(0);
      sub_10000F66C(v55, (uint64_t)qword_1002AA398);
      swift_bridgeObjectRetain(a3);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.info.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v59 = 134217984;
        v94 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v59 + 4);
        swift_bridgeObjectRelease(a3);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Imported %ld favorites", v59, 0xCu);
        swift_slowDealloc(v59, -1, -1);

        swift_release(Strong);
      }
      else
      {

        swift_release(Strong);
        swift_bridgeObjectRelease(a3);
      }
    }
    else
    {
      v60 = v94;
      v61 = _convertNSErrorToError(_:)(v52);

      swift_willThrow();
      if (qword_10028A430 != -1)
        swift_once(&qword_10028A430, sub_100120FC8);
      v62 = type metadata accessor for Logger(0);
      sub_10000F66C(v62, (uint64_t)qword_1002AA398);
      v63 = swift_errorRetain(v61);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v66 = 138412290;
        v68 = (void *)_convertErrorToNSError(_:)(v61);
        v94 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v66 + 4);
        *v67 = v68;
        swift_errorRelease(v61);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed to import favorites: %@", v66, 0xCu);
        v69 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v67, 1, v69);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);
      }
      else
      {
        swift_errorRelease(v61);
      }

      objc_msgSend(v88, "reset");
      swift_release(Strong);
      swift_errorRelease(v61);
    }
  }
}

uint64_t sub_1000C56B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100290AA4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001D380;
  v3[2] = v2;
  return swift_task_switch(sub_1000C4990, 0, 0);
}

uint64_t sub_1000C5718()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C573C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C5768(void *a1)
{
  uint64_t v1;

  sub_1000C4EA4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C5784()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C57B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100290ABC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003EFA0;
  v3[2] = v2;
  return swift_task_switch(sub_1000C46F4, 0, 0);
}

uint64_t destroy for FavoritesList(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for FavoritesList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for FavoritesList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for FavoritesList(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FavoritesList(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FavoritesList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FavoritesList()
{
  return &type metadata for FavoritesList;
}

unint64_t sub_1000C5A18()
{
  unint64_t result;

  result = qword_100290AC8;
  if (!qword_100290AC8)
  {
    result = swift_getWitnessTable(&unk_1001ED978, &type metadata for FavoritesList);
    atomic_store(result, (unint64_t *)&qword_100290AC8);
  }
  return result;
}

id sub_1000C5A5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = objc_allocWithZone((Class)type metadata accessor for FavoritesListController());
  swift_retain(v1);
  swift_retain(v3);
  swift_retain(v2);
  swift_retain(v4);
  return sub_1000C95A4(v1, v3, v2, v4);
}

uint64_t sub_1000C5AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C5B98();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C5B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C5B98();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000C5B74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C5B98();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000C5B98()
{
  unint64_t result;

  result = qword_100290AD0;
  if (!qword_100290AD0)
  {
    result = swift_getWitnessTable(&unk_1001ED900, &type metadata for FavoritesList);
    atomic_store(result, (unint64_t *)&qword_100290AD0);
  }
  return result;
}

uint64_t sub_1000C5BDC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  return a4(a1, a2, *a3);
}

void sub_1000C5C00()
{
  uint64_t v0;

  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoriteTranslationsTip) == 1)
    *(_BYTE *)(v0
             + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoriteTranslationsTip) = 0;
}

uint64_t (*sub_1000C5C1C())()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip);
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip);
  v3 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip
                 + 8);
  if (v2)
  {
    v4 = *(uint64_t (**)())(v0
                         + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip);
  }
  else
  {
    v5 = swift_allocObject(&unk_100269780, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v6 = *v1;
    v7 = v1[1];
    v4 = sub_1000C9CA4;
    *v1 = (uint64_t)sub_1000C9CA4;
    v1[1] = v5;
    swift_retain(v5);
    sub_10002BA44(v6, v7);
  }
  sub_100016244(v2, v3);
  return v4;
}

uint64_t sub_1000C5CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  void *v7;
  unint64_t v8;
  _BYTE v10[24];

  v2 = type metadata accessor for Tips.InvalidationReason(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v7 = (void *)result;
    sub_1000C5C00();

    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Tips.InvalidationReason.actionPerformed(_:), v2);
    v8 = sub_1000C987C();
    Tip.invalidate(reason:)(v5, &type metadata for TipsHelper.FavoriteTranslationsTip, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

void *sub_1000C5DA0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  objc_class *v17;
  void *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36[3];
  objc_super v37;

  v1 = v0;
  v2 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028DEA0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = sub_100006DF4(&qword_100290BE0);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_100290BE8);
  v34 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (objc_class *)type metadata accessor for FavoritesListController();
  v37.receiver = v0;
  v37.super_class = v17;
  objc_msgSendSuper2(&v37, "viewDidLoad");
  result = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView];
  if (result)
  {
    objc_msgSend(result, "setTag:", 206);
    swift_beginAccess(*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession]+ OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__currentID, v36, 33, 0);
    v19 = sub_100006DF4(&qword_10028B5A0);
    Published.projectedValue.getter(v19);
    swift_endAccess(v36);
    swift_beginAccess(*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession]+ OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__currentID, v36, 33, 0);
    Published.projectedValue.getter(v19);
    swift_endAccess(v36);
    v20 = sub_100012334(&qword_10028DF80, &qword_10028DEA0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    Publishers.CombineLatest.init(_:_:)(v10, v8, v5, v5, v20, v20);
    v21 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    v36[0] = (id)static OS_dispatch_queue.main.getter(v21);
    v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v4, 1, 1, v22);
    v23 = sub_100012334(&qword_100290BF0, &qword_100290BE0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
    v24 = sub_10001D984();
    v25 = v33;
    Publisher.receive<A>(on:options:)(v36, v4, v33, v21, v23, v24);
    sub_10000A020((uint64_t)v4, &qword_100296BE0);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v25);
    v26 = swift_allocObject(&unk_100269780, 24, 7);
    swift_unknownObjectWeakInit(v26 + 16, v1);
    v27 = sub_100012334(&qword_100290BF8, &qword_100290BE8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v28 = v35;
    v29 = Publisher<>.sink(receiveValue:)(sub_1000C9D44, v26, v35, v27);
    swift_release(v26);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v28);
    v30 = &v1[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_subscriptions];
    swift_beginAccess(v30, v36, 33, 0);
    AnyCancellable.store(in:)(v30);
    swift_endAccess(v36);
    return (void *)swift_release(v29);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1000C6170(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  double result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = sub_100006DF4(&qword_10028A6C0);
    v11 = swift_allocObject(v10, 64, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1001E4D60;
    *(_QWORD *)(v11 + 32) = v3;
    *(_QWORD *)(v11 + 40) = v2;
    *(_QWORD *)(v11 + 48) = v5;
    *(_QWORD *)(v11 + 56) = v4;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v4);
    sub_1000C9238(v11);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C625C(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  objc_super v18;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (objc_class *)type metadata accessor for FavoritesListController();
  v18.receiver = v2;
  v18.super_class = v7;
  objc_msgSendSuper2(&v18, "viewWillAppear:", a1 & 1);
  v8 = OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_favoriteTranslationsTipUpdates;
  v9 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_favoriteTranslationsTipUpdates];
  v10 = v9;
  v11 = v9;
  if (!v9)
  {
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    v13 = swift_allocObject(&unk_100269780, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v2);
    sub_1000C5C00();
    type metadata accessor for MainActor(0);
    swift_retain(v13);
    v15 = static MainActor.shared.getter(v14);
    v16 = (_QWORD *)swift_allocObject(&unk_1002697F8, 40, 7);
    v16[2] = v15;
    v16[3] = &protocol witness table for MainActor;
    v16[4] = v13;
    swift_release(v13);
    v11 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100290BA0, (uint64_t)v16);
    v10 = *(_QWORD *)&v2[v8];
  }
  *(_QWORD *)&v2[v8] = v11;
  swift_retain(v9);
  return swift_release(v10);
}

uint64_t sub_1000C63CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[9] = a4;
  v5 = sub_100006DF4(&qword_100290BA8);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Tips.Status(0);
  v4[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[12] = v7;
  v4[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100290BB0);
  v4[14] = v8;
  v4[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100290BB8);
  v4[16] = v9;
  v4[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100290BC0);
  v4[18] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[19] = v11;
  v4[20] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100290BC8);
  v4[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[22] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v14);
  v4[24] = swift_task_alloc(v14);
  v15 = type metadata accessor for MainActor(0);
  v4[25] = v15;
  v4[26] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  v4[27] = v16;
  v4[28] = v17;
  return swift_task_switch(sub_1000C6540, v16, v17);
}

uint64_t sub_1000C6540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0[19];
  v2 = v0[20];
  v4 = v0[17];
  v3 = v0[18];
  v5 = v0[14];
  v18 = v0[9] + 16;
  v6 = sub_1000C987C();
  Tip.shouldDisplayUpdates.getter(&type metadata for TipsHelper.FavoriteTranslationsTip, v6);
  AsyncMapSequence.base.getter(v3);
  v7 = sub_100012334(&qword_100290BD0, &qword_100290BB0, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v5, v7);
  v8 = AsyncMapSequence.transform.getter(v3);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)(v4, v8, v10, v5, &type metadata for Bool, v7);
  v11 = swift_beginAccess(v18, v0 + 6, 0, 0);
  v12 = static MainActor.shared.getter(v11);
  v0[29] = v12;
  if (v12)
  {
    ObjectType = swift_getObjectType(v12);
    v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v0[30] = v14;
  v0[31] = v16;
  return swift_task_switch(sub_1000C66A0, v14, v16);
}

uint64_t sub_1000C66A0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[29];
  v0[32] = AsyncMapSequence.Iterator.baseIterator.modify(v0 + 2, v0[21]);
  sub_100012334(&qword_100290BD8, &qword_100290BB8, (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v2 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[33] = v2;
  *v2 = v0;
  v2[1] = sub_1000C6748;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[10], v1, &protocol witness table for MainActor);
}

uint64_t sub_1000C6748()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 264));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 240);
    v4 = *(_QWORD *)(v2 + 248);
    v5 = sub_1000C68FC;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v2 + 256))(v2 + 16, 0);
    v3 = *(_QWORD *)(v2 + 240);
    v4 = *(_QWORD *)(v2 + 248);
    v5 = sub_1000C67B8;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000C67B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[10];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = v0[29];
    sub_10000A020(v3, &qword_100290BA8);
    swift_release(v4);
    return swift_task_switch(sub_1000C6A4C, v0[27], v0[28]);
  }
  else
  {
    v7 = v0[23];
    v6 = v0[24];
    v8 = v0[21];
    v9 = v0[22];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(v0[13], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
    v10 = (int *)AsyncMapSequence.Iterator.transform.getter(v8);
    v0[34] = v11;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v13 = (int *)((char *)v10 + *v10);
    v12 = (_QWORD *)swift_task_alloc(v10[1]);
    v0[35] = v12;
    *v12 = v0;
    v12[1] = sub_1000C690C;
    return ((uint64_t (*)(_QWORD *, _QWORD))v13)(v0 + 36, v0[13]);
  }
}

uint64_t sub_1000C68FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 256))(v0 + 16, 1);
}

uint64_t sub_1000C690C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 272);
  v4 = *(_QWORD *)(*v0 + 96);
  v3 = *(_QWORD *)(*v0 + 104);
  v5 = *(_QWORD *)(*v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*v0 + 280));
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch(sub_1000C6988, *(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 248));
}

uint64_t sub_1000C6988()
{
  _QWORD *v0;

  swift_release(v0[29]);
  return swift_task_switch(sub_1000C69C0, v0[27], v0[28]);
}

uint64_t sub_1000C69C0()
{
  _QWORD *v0;
  uint64_t Strong;
  void *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Strong = swift_unknownObjectWeakLoadStrong(v0[9] + 16);
  if (Strong)
  {
    v2 = (void *)Strong;
    sub_1000C7F54(1);

  }
  v3 = static MainActor.shared.getter(Strong);
  v0[29] = v3;
  if (v3)
  {
    ObjectType = swift_getObjectType(v3);
    v5 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v0[30] = v5;
  v0[31] = v7;
  return swift_task_switch(sub_1000C66A0, v5, v7);
}

uint64_t sub_1000C6A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v2, *(_QWORD *)(v0 + 168));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6BE4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v1 = sub_100006DF4(&qword_100290928);
  v43 = *(_QWORD *)(v1 - 8);
  v44 = v1;
  v2 = *(_QWORD *)(v43 + 64);
  v3 = __chkstk_darwin(v1);
  v39 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)&v39 - v4;
  v5 = sub_100006DF4(&qword_100290930);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - v10;
  v12 = swift_allocObject(&unk_100269708, 24, 7);
  *(_QWORD *)(v12 + 16) = v0;
  v13 = sub_10000A05C(0, (unint64_t *)&qword_100290938, UICollectionViewListCell_ptr);
  v14 = v0;
  v41 = v13;
  result = UICollectionView.CellRegistration.init(handler:)(sub_1000C98E4, v12, v13, &type metadata for FavoritesItem);
  v16 = *(void **)&v14[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView];
  if (v16)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v17 = *(unsigned __int8 *)(v6 + 80);
    v18 = (v17 + 16) & ~v17;
    v19 = swift_allocObject(&unk_100269730, v18 + v7, v17 | 7);
    v20 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    v40 = v5;
    v20(v19 + v18, v9, v5);
    v21 = swift_allocObject(&unk_100269758, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1000C98F8;
    *(_QWORD *)(v21 + 24) = v19;
    v22 = objc_allocWithZone((Class)sub_100006DF4(&qword_100290940));
    v23 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v16, sub_1000C9974, v21);
    v24 = OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource;
    v25 = *(void **)&v14[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource];
    *(_QWORD *)&v14[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource] = v23;

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
    v28 = v27;
    v29 = swift_allocObject(&unk_100269780, 24, 7);
    swift_unknownObjectWeakInit(v29 + 16, v14);
    v30 = v42;
    UICollectionView.SupplementaryRegistration.init(elementKind:handler:)(v26, v28, sub_1000C99BC, v29, v41);
    v31 = *(void **)&v14[v24];
    v33 = v43;
    v32 = v44;
    if (v31)
    {
      v34 = v39;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v39, v30, v44);
      v35 = *(unsigned __int8 *)(v33 + 80);
      v36 = (v35 + 16) & ~v35;
      v37 = swift_allocObject(&unk_1002697A8, v36 + v2, v35 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v37 + v36, v34, v32);
      v38 = v31;
      dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter(sub_1000C99D0, v37);

    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v40);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C6F04(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  _BYTE v38[48];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v6 = sub_100006DF4((uint64_t *)&unk_100298720);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100006DF4(&qword_100290B70);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (unint64_t)*a3;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v15 = UICollectionViewCell.contentConfiguration.setter(&v39);
  if (v14 >> 62 == 2)
  {
    __chkstk_darwin(v15);
    *(_QWORD *)&v37[-16] = a4;
    v17 = sub_100006DF4(&qword_100290B78);
    v18 = sub_1000070BC(&qword_100290B80);
    v19 = sub_100012334(&qword_100290B88, &qword_100290B80, (uint64_t)&protocol conformance descriptor for TipView<A>);
    *(_QWORD *)&v39 = v18;
    *((_QWORD *)&v39 + 1) = &type metadata for Color;
    *(_QWORD *)&v40 = v19;
    *((_QWORD *)&v40 + 1) = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v39, &opaque type descriptor for <<opaque return type of View.tipBackground<A>(_:)>>, 1);
    v21 = UIHostingConfiguration<>.init(content:)(sub_1000C9C8C, &v37[-32], v17, OpaqueTypeConformance2);
    v22 = static Edge.Set.all.getter(v21);
    *((_QWORD *)&v40 + 1) = v10;
    v41 = sub_100012334(&qword_100290B90, &qword_100290B70, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    sub_1000122F8(&v39);
    UIHostingConfiguration.margins(_:_:)(v22, v10, 0.0);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    return UICollectionViewCell.contentConfiguration.setter(&v39);
  }
  else
  {
    v16 = (void *)(v14 & 0x3FFFFFFFFFFFFFFFLL);
    if (v14 >> 62 == 1)
      v14 &= 0x3FFFFFFFFFFFFFFFuLL;
    v24 = sub_100006DF4((uint64_t *)&unk_10028C060);
    inited = swift_initStackObject(v24, v38);
    *(_OWORD *)(inited + 16) = xmmword_1001E76E0;
    v26 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession);
    *(_QWORD *)(inited + 32) = v26;
    v27 = *(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession);
    *(_QWORD *)(inited + 40) = v27;
    *(_QWORD *)&v39 = inited;
    specialized Array._endMutation()(inited);
    v28 = v39;
    v29 = v16;
    swift_retain(v26);
    swift_retain(v27);
    v30 = sub_1000C9A8C(v28, (void *)v14);
    swift_bridgeObjectRelease(v28);

    v31 = sub_1000BE490((void *)v14, v30);
    v32 = swift_release(v30);
    __chkstk_darwin(v32);
    *(_QWORD *)&v37[-16] = v31;
    *(_QWORD *)&v37[-8] = a4;
    v33 = type metadata accessor for TranslationCardView(0);
    v34 = sub_100007D5C(&qword_100290948, type metadata accessor for TranslationCardView, (uint64_t)&unk_1001F6898);
    v35 = UIHostingConfiguration<>.init(content:)(sub_1000C9C84, &v37[-32], v33, v34);
    v36 = static Edge.Set.all.getter(v35);
    *((_QWORD *)&v40 + 1) = v6;
    v41 = sub_100012334((unint64_t *)&qword_100298730, (uint64_t *)&unk_100298720, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    sub_1000122F8(&v39);
    UIHostingConfiguration.margins(_:_:)(v36, v6, 0.0);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    UICollectionViewCell.contentConfiguration.setter(&v39);
    return swift_release(v31);
  }
}

uint64_t sub_1000C72B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100006DF4(&qword_100290B80);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C5C00();
  v4 = sub_1000C987C();
  TipView.init(_:arrowEdge:action:)(v4, 4, nullsub_1, 0, &type metadata for TipsHelper.FavoriteTranslationsTip, v4);
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemGroupedBackgroundColor");
  v6 = Color.init(_:)(v5);
  v10 = v6;
  v7 = sub_100012334(&qword_100290B88, &qword_100290B80, (uint64_t)&protocol conformance descriptor for TipView<A>);
  View.tipBackground<A>(_:)(&v10, v0, &type metadata for Color, v7, &protocol witness table for Color);
  swift_release(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000C73E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (**v22)();
  uint64_t (*v23)();
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t (**v31)(uint64_t, uint64_t, Swift::UInt);
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t (*v36)();
  char v37;
  _QWORD v38[2];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  v8 = sub_1000C5C1C();
  v35 = v9;
  v36 = v8;
  UUID.init()(v8);
  v10 = type metadata accessor for SharedTranslationOptions(0);
  v11 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  v12 = EnvironmentObject.init()(v10, v11);
  v14 = v13;
  KeyPath = swift_getKeyPath(&unk_1001EDA00);
  v16 = (int *)type metadata accessor for TranslationCardView(0);
  v17 = (uint64_t *)(a2 + v16[9]);
  *v17 = KeyPath;
  v18 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  v19 = type metadata accessor for CommittedTranslationViewModel(0);
  v20 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  Bindable<A>.init(wrappedValue:)(a1, v19, v20);
  v21 = (_QWORD *)(a2 + v16[6]);
  *v21 = 0;
  v21[1] = 0;
  v22 = (uint64_t (**)())(a2 + v16[7]);
  v23 = v35;
  *v22 = v36;
  v22[1] = v23;
  v24 = (uint64_t *)(a2 + v16[8]);
  *v24 = v12;
  v24[1] = v14;
  v25 = (_QWORD *)(a2 + v16[10]);
  v26 = type metadata accessor for SceneContext(0);
  v27 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  *v25 = EnvironmentObject.init()(v26, v27);
  v25[1] = v28;
  v29 = a2 + v16[11];
  v37 = 0;
  State.init(wrappedValue:)(v38, &v37, &type metadata for Bool);
  v30 = v38[1];
  *(_BYTE *)v29 = v38[0];
  *(_QWORD *)(v29 + 8) = v30;
  v31 = (unint64_t (**)(uint64_t, uint64_t, Swift::UInt))(a2 + v16[12]);
  *v31 = sub_1001B8750;
  v31[1] = 0;
  v32 = v16[13];
  result = Image.init(systemName:)(0xD000000000000010, 0x80000001001F8F60);
  *(_QWORD *)(a2 + v32) = result;
  return result;
}

uint64_t sub_1000C7628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a3;
  v6 = (void *)(a3 & 0x3FFFFFFFFFFFFFFFLL);
  v7 = sub_10000A05C(0, (unint64_t *)&qword_100290938, UICollectionViewListCell_ptr);
  v8 = v6;
  v9 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(a4, a2, &v11, v7, &type metadata for FavoritesItem);

  return v9;
}

unint64_t sub_1000C76BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t result;
  __n128 v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  id v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t (**v57)();
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  NSString v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  _QWORD v90[5];
  char v91[32];
  Swift::String v92;

  v7 = type metadata accessor for UICellAccessory(0);
  v84 = *(_QWORD *)(v7 - 8);
  v85 = v7;
  __chkstk_darwin(v7);
  v83 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100290B50);
  __chkstk_darwin(v9);
  v79 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for UICellAccessory.Placement(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v78 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UICellAccessory.CustomViewConfiguration(0);
  v81 = *(_QWORD *)(v12 - 8);
  v82 = v12;
  __chkstk_darwin(v12);
  v80 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UIButton.Configuration(0);
  v87 = *(_QWORD *)(v14 - 8);
  v88 = v14;
  v15 = __chkstk_darwin(v14);
  v75 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v86 = (char *)&v73 - v17;
  v18 = type metadata accessor for UIListContentConfiguration(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v73 - v23;
  v25 = sub_100006DF4(&qword_1002908B8);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5 += 16;
  swift_beginAccess(a5, v91, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a5);
  if (result)
  {
    v89 = (id)result;
    v31 = *(void **)(result + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
    if (v31)
    {
      v74 = a1;
      v32 = v31;
      dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

      v33 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v25);
      v34 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
      result = IndexPath.section.getter(v34);
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (result < *(_QWORD *)(v33 + 16))
      {
        v35 = (_QWORD *)(v33 + 24 * result);
        v37 = v35[4];
        v36 = v35[5];
        v38 = v35[6];
        sub_1000C0DFC(v37, v36, v38);
        v39 = swift_bridgeObjectRelease(v33);
        static UIListContentConfiguration.extraProminentInsetGroupedHeader()(v39);
        a1 = v74;
        if (v36 != 3)
        {
          v40 = sub_1000BDEB8(v37, v36);
          UIListContentConfiguration.text.setter(v40);
          v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v24, v22, v18);
          if (v36)
          {
            if (v36 == 1)
            {
              v42 = v37;
              v43 = 1;
            }
            else if (v36 == 2)
            {
              v42 = v37;
              v43 = 2;
            }
            else
            {
              if (*(_QWORD *)(v38 + 16) > 3uLL)
              {
                v44 = v86;
                static UIButton.Configuration.plain()(v41);
                v45 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                v92._countAndFlagsBits = 0xD00000000000001BLL;
                v92._object = (void *)0x80000001001FC3E0;
                v46._object = (void *)0x80000001001FC3C0;
                v46._countAndFlagsBits = 0xD000000000000011;
                v47._countAndFlagsBits = 0;
                v47._object = (void *)0xE000000000000000;
                v48 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, (Swift::String_optional)0, (NSBundle)v45, v47, v92);

                v49 = v44;
                UIButton.Configuration.title.setter(v48._countAndFlagsBits, v48._object);
                sub_10000A05C(0, &qword_100290B58, UIButton_ptr);
                v50 = v75;
                (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v75, v49, v88);
                sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
                v51 = swift_allocObject(&unk_100269780, 24, 7);
                swift_unknownObjectWeakInit(v51 + 16, v89);
                v52 = (_QWORD *)swift_allocObject(&unk_1002697D0, 48, 7);
                v52[2] = v51;
                v52[3] = v37;
                a1 = v74;
                v52[4] = v36;
                v52[5] = v38;
                v53 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000C9A80, v52);
                v54 = (void *)UIButton.init(configuration:primaryAction:)(v50, v53);
                v55 = sub_100006DF4(&qword_100290B60);
                v56 = v78;
                v57 = (uint64_t (**)())&v78[*(int *)(v55 + 48)];
                v58 = enum case for UICellAccessory.DisplayedState.always(_:);
                v59 = type metadata accessor for UICellAccessory.DisplayedState(0);
                (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v56, v58, v59);
                *v57 = variable initialization expression of PlaceholderTextView.placeholderColor;
                v57[1] = 0;
                (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v56, enum case for UICellAccessory.Placement.trailing(_:), v77);
                v60 = type metadata accessor for UICellAccessory.LayoutDimension(0);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v79, 1, 1, v60);
                v61 = v54;
                v62 = v80;
                UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)();
                v63 = v83;
                static UICellAccessory.customView(configuration:)(v62);
                v64 = sub_100006DF4(&qword_100290B68);
                v65 = v84;
                v66 = *(unsigned __int8 *)(v84 + 80);
                v67 = (v66 + 32) & ~v66;
                v68 = swift_allocObject(v64, v67 + *(_QWORD *)(v84 + 72), v66 | 7);
                *(_OWORD *)(v68 + 16) = xmmword_1001E64F0;
                v69 = v68 + v67;
                v70 = v85;
                (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v69, v63, v85);
                UICollectionViewListCell.accessories.setter(v68);

                (*(void (**)(char *, uint64_t))(v65 + 8))(v63, v70);
                (*(void (**)(char *, uint64_t))(v81 + 8))(v62, v82);
                (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
LABEL_19:
                v90[3] = v18;
                v90[4] = &protocol witness table for UIListContentConfiguration;
                v71 = sub_1000122F8(v90);
                (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 16))(v71, v24, v18);
                UICollectionViewCell.contentConfiguration.setter(v90);
                v72 = String._bridgeToObjectiveC()();
                objc_msgSend(a1, "setAccessibilityIdentifier:", v72);

                return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v24, v18);
              }
              v42 = v37;
              v43 = v36;
            }
          }
          else
          {
            v42 = v37;
            v43 = 0;
          }
          sub_1000C0D60(v42, v43, v38);
LABEL_18:
          UICollectionViewListCell.accessories.setter(_swiftEmptyArrayStorage);
          goto LABEL_19;
        }
LABEL_11:
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v22, v18);
        goto LABEL_18;
      }
      __break(1u);
      return result;
    }
    static UIListContentConfiguration.extraProminentInsetGroupedHeader()(v30);
    goto LABEL_11;
  }
  return result;
}

void sub_1000C7DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Strong;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  _BYTE v20[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (char *)Strong;
    v9 = sub_1000BDEB8(a3, a4);
    v11 = *(_QWORD *)&v8[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_store];
    if (v10)
      v12 = v9;
    else
      v12 = 0;
    v13 = *(_QWORD *)&v8[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_ttsManager];
    v14 = *(_QWORD *)&v8[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession];
    if (v10)
      v15 = v10;
    else
      v15 = 0xE000000000000000;
    v16 = *(_QWORD *)&v8[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession];
    objc_allocWithZone((Class)type metadata accessor for FavoritesDetailListController());
    swift_retain(v11);
    swift_retain(v13);
    swift_retain(v14);
    swift_retain(v16);
    v17 = sub_1000C12D0(v12, v15, v11, v13, v14, v16);
    v18 = objc_msgSend(v8, "navigationController");
    if (v18)
    {
      v19 = v18;
      objc_msgSend(v18, "pushViewController:animated:", v17, 1);

    }
  }
}

uint64_t sub_1000C7F54(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char **v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  BOOL v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::OpaquePointer v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  char v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  _BYTE v104[32];
  __int128 v105;
  _QWORD *v106;
  _QWORD v107[4];

  v2 = v1;
  LODWORD(v3) = a1;
  v103 = sub_100006DF4(&qword_1002908B8);
  v95 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v5 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000C2698();
  v7 = sub_1000C26DC();
  NSDiffableDataSourceSnapshot.init()(&type metadata for FavoritesCardListController.FavoritesSection, &type metadata for FavoritesItem, v6, v7);
  sub_1000C5C00();
  v8 = sub_1000C987C();
  if ((Tip.shouldDisplay.getter(&type metadata for TipsHelper.FavoriteTranslationsTip, v8) & 1) != 0)
  {
    v9 = sub_1000C8D2C();
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(v9, "fetchedObjects");

      if (v11)
      {
        v12 = type metadata accessor for PersistedTranslation(0);
        v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

        if ((unint64_t)v13 >> 62)
        {
          v91 = v13 < 0 ? v13 : v13 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v13);
          v14 = _CocoaArrayWrapper.endIndex.getter(v91);
          swift_bridgeObjectRelease(v13);
        }
        else
        {
          v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v13);
        if (v14)
        {
          v15 = v103;
          NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100261CD0);
          v105 = 0uLL;
          v106 = 0;
          NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_100261D08, &v105, v15);
        }
      }
    }
  }
  v16 = sub_1000C8A40();
  v17 = &selRef_initWithWindowScene_;
  if (v16)
  {
    v18 = v16;
    v19 = objc_msgSend(v16, "sections");

    if (v19)
    {
      v20 = sub_100006DF4(&qword_100290B38);
      v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

      v94 = v2;
      v102 = v5;
      HIDWORD(v93) = v3;
      if ((unint64_t)v21 >> 62)
        goto LABEL_44;
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v21);
      while (v22)
      {
        v23 = 0;
        v101 = v21 & 0xC000000000000001;
        v96 = v21 + 32;
        v98 = (char *)&type metadata for Any + 8;
        v97 = xmmword_1001E64F0;
        v99 = v22;
        v100 = v21;
        while (v101)
        {
          v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v21);
          v26 = __OFADD__(v23++, 1);
          if (v26)
            goto LABEL_43;
LABEL_20:
          v27 = objc_msgSend(v25, "objects");
          if (v27)
          {
            v28 = v27;
            v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v98);

            v30 = *(_QWORD *)(v29 + 16);
            if (v30)
            {
              v31 = v29 + 32;
              swift_bridgeObjectRetain(v29);
              v32 = _swiftEmptyArrayStorage;
              do
              {
                sub_10000A0EC(v31, (uint64_t)&v105);
                sub_10000A0EC((uint64_t)&v105, (uint64_t)v104);
                v33 = type metadata accessor for PersistedTranslation(0);
                if ((swift_dynamicCast(v107, v104, (char *)&type metadata for Any + 8, v33, 6) & 1) != 0)
                {
                  v34 = v107[0];
                  sub_100009C08(&v105);
                  if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
                    v32 = sub_1001A75C4(0, v32[2] + 1, 1, v32);
                  v36 = v32[2];
                  v35 = v32[3];
                  if (v36 >= v35 >> 1)
                    v32 = sub_1001A75C4((_QWORD *)(v35 > 1), v36 + 1, 1, v32);
                  v32[2] = v36 + 1;
                  v32[v36 + 4] = v34;
                }
                else
                {
                  sub_100009C08(&v105);
                }
                v31 += 32;
                --v30;
              }
              while (v30);
              swift_bridgeObjectRelease_n(v29, 2);
            }
            else
            {
              swift_bridgeObjectRelease(v29);
              v32 = _swiftEmptyArrayStorage;
            }
            v37 = objc_msgSend(v25, "name");
            v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
            v40 = v39;

            v41 = sub_100006DF4(&qword_100290B48);
            v42._rawValue = (void *)swift_allocObject(v41, 56, 7);
            *((_OWORD *)v42._rawValue + 1) = v97;
            *((_QWORD *)v42._rawValue + 4) = v38;
            *((_QWORD *)v42._rawValue + 5) = v40;
            *((_QWORD *)v42._rawValue + 6) = v32;
            swift_bridgeObjectRetain_n(v32, 2);
            swift_bridgeObjectRetain(v40);
            NSDiffableDataSourceSnapshot.appendSections(_:)(v42);
            swift_bridgeObjectRelease(v42._rawValue);
            if (v32[2] >= 3uLL)
              v43 = 3;
            else
              v43 = v32[2];
            v44 = type metadata accessor for __ContiguousArrayStorageBase(0);
            v45 = swift_unknownObjectRetain_n(v32, 2);
            v46 = (_QWORD *)swift_dynamicCastClass(v45, v44);
            if (!v46)
            {
              swift_bridgeObjectRelease(v32);
              v46 = _swiftEmptyArrayStorage;
            }
            v47 = v46[2];
            swift_release(v46);
            if (v47 == v43)
            {
              v24 = (_QWORD *)swift_dynamicCastClass(v32, v44);
              if (!v24)
              {
                swift_bridgeObjectRelease(v32);
                v24 = _swiftEmptyArrayStorage;
              }
            }
            else
            {
              swift_bridgeObjectRelease(v32);
              v24 = sub_1001C6570((uint64_t)v32, (uint64_t)(v32 + 4), 0, (2 * v43) | 1);
            }
            swift_bridgeObjectRelease(v32);
            *(_QWORD *)&v105 = v38;
            *((_QWORD *)&v105 + 1) = v40;
            v106 = v32;
            NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v24, &v105, v103);
            swift_unknownObjectRelease(v25);
            swift_bridgeObjectRelease(v32);
            swift_bridgeObjectRelease(v40);
            swift_release(v24);
            v22 = v99;
            v21 = v100;
            if (v23 == v99)
              goto LABEL_48;
          }
          else
          {
            swift_unknownObjectRelease(v25);
            if (v23 == v22)
              goto LABEL_48;
          }
        }
        v25 = *(void **)(v96 + 8 * v23);
        swift_unknownObjectRetain(v25);
        v26 = __OFADD__(v23++, 1);
        if (!v26)
          goto LABEL_20;
LABEL_43:
        __break(1u);
LABEL_44:
        if (v21 < 0)
          v48 = v21;
        else
          v48 = v21 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v21);
        v22 = _CocoaArrayWrapper.endIndex.getter(v48);
      }
LABEL_48:
      swift_bridgeObjectRelease_n(v21, 2);
      v2 = v94;
      v5 = v102;
      LODWORD(v3) = HIDWORD(v93);
      v17 = &selRef_initWithWindowScene_;
    }
  }
  v49 = sub_1000C8D2C();
  if (!v49
    || (v50 = v49, v51 = objc_msgSend(v49, "fetchedObjects"),
                   v50,
                   !v51))
  {
LABEL_61:
    if ((v3 & 1) != 0)
      goto LABEL_75;
    goto LABEL_62;
  }
  v52 = type metadata accessor for PersistedTranslation(0);
  v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v51, v52);

  v94 = v2;
  HIDWORD(v93) = v3;
  if ((unint64_t)v53 >> 62)
  {
    if (v53 < 0)
      v67 = v53;
    else
      v67 = v53 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v53);
    v54 = _CocoaArrayWrapper.endIndex.getter(v67);
    swift_bridgeObjectRelease(v53);
    if (v54 >= 1)
    {
LABEL_53:
      NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100261D30);
      *(_QWORD *)&v105 = _swiftEmptyArrayStorage;
      sub_1001DA204(0, v54, 0);
      v55 = 0;
      v3 = v105;
      do
      {
        if ((v53 & 0xC000000000000001) != 0)
          v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v53);
        else
          v56 = *(id *)(v53 + 8 * v55 + 32);
        v57 = (unint64_t)v56;
        *(_QWORD *)&v105 = v3;
        v59 = *(_QWORD *)(v3 + 16);
        v58 = *(_QWORD *)(v3 + 24);
        if (v59 >= v58 >> 1)
        {
          sub_1001DA204(v58 > 1, v59 + 1, 1);
          v3 = v105;
        }
        ++v55;
        *(_QWORD *)(v3 + 16) = v59 + 1;
        *(_QWORD *)(v3 + 8 * v59 + 32) = v57 | 0x4000000000000000;
      }
      while (v54 != v55);
      swift_bridgeObjectRelease(v53);
      v105 = xmmword_1001ED9D0;
      v106 = 0;
      NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v3, &v105, v103);
      swift_bridgeObjectRelease(v3);
      v2 = v94;
      LOBYTE(v3) = BYTE4(v93);
      v17 = &selRef_initWithWindowScene_;
      goto LABEL_61;
    }
  }
  else
  {
    v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v54 >= 1)
      goto LABEL_53;
  }
  swift_bridgeObjectRelease(v53);
  v2 = v94;
  LOBYTE(v3) = BYTE4(v93);
  if ((v93 & 0x100000000) != 0)
    goto LABEL_75;
LABEL_62:
  v60 = sub_1000C8D2C();
  if (v60)
  {
    v61 = v60;
    v62 = objc_msgSend(v60, "fetchedObjects");

    if (v62)
    {
      v63 = type metadata accessor for PersistedTranslation(0);
      v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v62, v63);

      if ((unint64_t)v64 >> 62)
      {
        v92 = v64 < 0 ? v64 : v64 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v64);
        v65 = _CocoaArrayWrapper.endIndex.getter(v92);
        swift_bridgeObjectRelease(v64);
      }
      else
      {
        v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v64);
      if (v65)
      {
        if (qword_10028A4E8 != -1)
          swift_once(&qword_10028A4E8, sub_100192030);
        v66 = sub_100006DF4(&qword_100290B40);
        sub_10000F66C(v66, (uint64_t)qword_1002AA5C0);
        Tips.Event.sendDonation<>(_:)(0, 0);
      }
    }
  }
LABEL_75:
  v68 = sub_1000C8A40();
  if (v68 && (v69 = v68, v70 = objc_msgSend(v68, v17[22]), v69, v70))
  {
    v71 = sub_100006DF4(&qword_100290B38);
    v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, v71);

    if ((unint64_t)v72 >> 62)
    {
      if (v72 < 0)
        v90 = v72;
      else
        v90 = v72 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v72);
      v73 = _CocoaArrayWrapper.endIndex.getter(v90);
      swift_bridgeObjectRelease(v72);
    }
    else
    {
      v73 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v72);
    v74 = v73 != 0;
  }
  else
  {
    v74 = 0;
  }
  if (qword_10028A4F0 != -1)
    swift_once(&qword_10028A4F0, sub_100192094);
  v75 = sub_100006DF4(&qword_10028ACD8);
  v76 = sub_10000F66C(v75, (uint64_t)qword_1002AA5D8);
  v104[0] = v74;
  swift_beginAccess(v76, &v105, 33, 0);
  Tips.Parameter.wrappedValue.setter(v104, v75);
  swift_endAccess(&v105);
  if (qword_10028A430 != -1)
    swift_once(&qword_10028A430, sub_100120FC8);
  v77 = type metadata accessor for Logger(0);
  v78 = sub_10000F66C(v77, (uint64_t)qword_1002AA398);
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v79, v80))
  {
    v81 = v3;
    v3 = swift_slowAlloc(12, -1);
    *(_DWORD *)v3 = 134217984;
    swift_beginAccess(v5, v107, 0, 0);
    v82 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v103);
    v83 = *(_QWORD *)(v82 + 16);
    swift_bridgeObjectRelease(v82);
    *(_QWORD *)&v105 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, (char *)&v105 + 8, v3 + 4);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "Snapshot identifiers count: %ld", (uint8_t *)v3, 0xCu);
    v84 = v3;
    LOBYTE(v3) = v81;
    swift_slowDealloc(v84, -1, -1);
  }

  v85 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource);
  if (v85)
  {
    swift_beginAccess(v5, &v105, 0, 0);
    v86 = v85;
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v5, v3 & 1, 0, 0);

  }
  swift_beginAccess(v5, v104, 0, 0);
  v87 = v103;
  v88 = NSDiffableDataSourceSnapshot.numberOfSections.getter(v103) < 1;
  sub_1000BE678(v88);
  return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v5, v87);
}

void *sub_1000C8A40()
{
  return sub_1000C8D40(&OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoritesResultsController, (uint64_t (*)(uint64_t))sub_1000C8A54);
}

id sub_1000C8A54(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  NSString v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  id v21;
  uint64_t v22;

  type metadata accessor for PersistedTranslation(0);
  v2 = (id)static PersistedTranslation.favoritedSortedByLocalePairAndCreationDateFetchRequest()();
  v3 = (void *)dispatch thunk of TranslationStoreCoreData.viewContext.getter();
  v4 = objc_allocWithZone((Class)NSFetchedResultsController);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v2, v3, v5, 0);

  objc_msgSend(v6, "setDelegate:", a1);
  v21 = 0;
  v7 = objc_msgSend(v6, "performFetch:", &v21);
  v8 = v21;
  if (v7)
  {
    v9 = v21;
  }
  else
  {
    v10 = v21;
    v11 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    if (qword_10028A430 != -1)
      swift_once(&qword_10028A430, sub_100120FC8);
    v12 = type metadata accessor for Logger(0);
    sub_10000F66C(v12, (uint64_t)qword_1002AA398);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = (void *)_convertErrorToNSError(_:)(v11);
      v21 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v16 + 4);
      *v17 = v18;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to do initial fetch of favorites results: %@", v16, 0xCu);
      v19 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v11);
    }
    else
    {

      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      v2 = v14;
    }
  }

  return v6;
}

void *sub_1000C8D2C()
{
  return sub_1000C8D40(&OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___recentsResultsController, (uint64_t (*)(uint64_t))sub_1000C8DA8);
}

void *sub_1000C8D40(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  v5 = v4;
  if (v4 == (void *)1)
  {
    v5 = (void *)a2(v2);
    v6 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v5;
    v7 = v5;
    sub_1000C2688(v6);
  }
  sub_1000C296C(v4);
  return v5;
}

id sub_1000C8DA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  id v25;
  unsigned int v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  id v40;
  uint64_t v41;
  _QWORD *v42;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession);
  v42 = _swiftEmptyArrayStorage;
  swift_retain(v2);
  swift_retain(v3);
  sub_1001DA1E8(0, 2, 0);
  KeyPath = swift_getKeyPath(&unk_1001EDA30);
  v5 = swift_getKeyPath(&unk_1001EDA58);
  v6 = swift_retain(v2);
  static Published.subscript.getter(&v40, v6, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  swift_release(v5);
  v7 = v40;
  v8 = v41;
  v9 = v42;
  if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
  {
    sub_1001DA1E8(0, v9[2] + 1, 1);
    v9 = v42;
  }
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
  {
    sub_1001DA1E8(v10 > 1, v11 + 1, 1);
    v9 = v42;
  }
  v9[2] = v11 + 1;
  v12 = &v9[2 * v11];
  v12[4] = v7;
  v12[5] = v8;
  v13 = swift_getKeyPath(&unk_1001EDA30);
  v14 = swift_getKeyPath(&unk_1001EDA58);
  v15 = swift_retain(v3);
  static Published.subscript.getter(&v40, v15, v13);
  swift_release(v3);
  swift_release(v13);
  swift_release(v14);
  v16 = v40;
  v17 = v41;
  if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
    sub_1001DA1E8(0, v9[2] + 1, 1);
  v18 = v42;
  v20 = v42[2];
  v19 = v42[3];
  if (v20 >= v19 >> 1)
  {
    sub_1001DA1E8(v19 > 1, v20 + 1, 1);
    v18 = v42;
  }
  v18[2] = v20 + 1;
  v21 = &v18[2 * v20];
  v21[4] = v16;
  v21[5] = v17;
  swift_release(v2);
  swift_release(v3);
  type metadata accessor for PersistedTranslation(0);
  v22 = (void *)static PersistedTranslation.sortedByCreationDateFetchRequest(sessionIDs:)(v18);
  swift_release(v18);
  v23 = v22;
  v24 = (void *)dispatch thunk of TranslationStoreCoreData.viewContext.getter();
  v25 = objc_msgSend(objc_allocWithZone((Class)NSFetchedResultsController), "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v23, v24, 0, 0);

  objc_msgSend(v25, "setDelegate:", a1);
  v40 = 0;
  v26 = objc_msgSend(v25, "performFetch:", &v40);
  v27 = v40;
  if (v26)
  {
    v28 = v40;
  }
  else
  {
    v29 = v40;
    v30 = _convertNSErrorToError(_:)(v27);

    swift_willThrow();
    if (qword_10028A430 != -1)
      swift_once(&qword_10028A430, sub_100120FC8);
    v31 = type metadata accessor for Logger(0);
    sub_10000F66C(v31, (uint64_t)qword_1002AA398);
    swift_errorRetain(v30);
    v32 = swift_errorRetain(v30);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      v37 = (void *)_convertErrorToNSError(_:)(v30);
      v40 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v35 + 4);
      *v36 = v37;
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed initial fetch of recents: %@", v35, 0xCu);
      v38 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      swift_errorRelease(v30);
    }
    else
    {

      swift_errorRelease(v30);
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      v23 = v33;
    }
  }

  return v25;
}

void sub_1000C9238(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v2 = sub_1000C8D2C();
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "fetchRequest");
    type metadata accessor for PersistedTranslation(0);
    v5 = (void *)static PersistedTranslation.sortedByCreationDateFetchRequest(sessionIDs:)(a1);
    v6 = objc_msgSend(v5, "predicate");

    objc_msgSend(v4, "setPredicate:", v6);
    v27 = 0;
    v7 = objc_msgSend(v3, "performFetch:", &v27);
    v8 = v27;
    if (v7)
    {
      v9 = v27;

    }
    else
    {
      v10 = v27;
      v11 = _convertNSErrorToError(_:)(v8);

      swift_willThrow();
      if (qword_10028A430 != -1)
        swift_once(&qword_10028A430, sub_100120FC8);
      v12 = type metadata accessor for Logger(0);
      sub_10000F66C(v12, (uint64_t)qword_1002AA398);
      swift_bridgeObjectRetain(a1);
      swift_errorRetain(v11);
      swift_bridgeObjectRetain(a1);
      v13 = swift_errorRetain(v11);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = swift_slowAlloc(22, -1);
        v17 = (uint64_t *)swift_slowAlloc(8, -1);
        v24 = (void *)swift_slowAlloc(32, -1);
        v27 = v24;
        *(_DWORD *)v16 = 136446466;
        v18 = swift_bridgeObjectRetain(a1);
        v19 = Array.description.getter(v18);
        v21 = v20;
        swift_bridgeObjectRelease(a1);
        v25 = sub_1001A7FE4(v19, v21, (uint64_t *)&v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_bridgeObjectRelease(v21);
        *(_WORD *)(v16 + 12) = 2112;
        v22 = _convertErrorToNSError(_:)(v11);
        v25 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 14);
        *v17 = v22;
        swift_errorRelease(v11);
        swift_errorRelease(v11);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to update recent query for session IDs %{public}s: %@", (uint8_t *)v16, 0x16u);
        v23 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v17, 1, v23);
        swift_slowDealloc(v17, -1, -1);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v16, -1, -1);

        swift_errorRelease(v11);
      }
      else
      {

        swift_errorRelease(v11);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_errorRelease(v11);
        swift_errorRelease(v11);

      }
    }
  }
}

id sub_1000C95A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _QWORD *v5;
  objc_super v7;

  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_subscriptions] = &_swiftEmptySetSingleton;
  v4[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoriteTranslationsTip] = 1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_favoriteTranslationsTipUpdates] = 0;
  v5 = &v4[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoritesResultsController] = 1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___recentsResultsController] = 1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_collectionView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_dataSource] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_store] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_ttsManager] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_translationSession] = a3;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator27FavoritesCardListController_conversationSession] = a4;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for FavoritesCardListController();
  return objc_msgSendSuper2(&v7, "initWithNibName:bundle:", 0, 0);
}

id sub_1000C9698(void *a1)
{
  _BYTE *v1;
  _QWORD *v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_subscriptions] = &_swiftEmptySetSingleton;
  v1[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoriteTranslationsTip] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_favoriteTranslationsTipUpdates] = 0;
  v3 = &v1[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoritesResultsController] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___recentsResultsController] = 1;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for FavoritesListController();
  v4 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);

  return v4;
}

void sub_1000C9760()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_subscriptions));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController_favoriteTranslationsTipUpdates));
  sub_10002BA44(*(_QWORD *)(v0+ OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip), *(_QWORD *)(v0+ OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___invalidateFavoriteTranslationsTip+ 8));
  sub_1000C2688(*(id *)(v0
                      + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___favoritesResultsController));
  sub_1000C2688(*(id *)(v0
                      + OBJC_IVAR____TtC17SequoiaTranslator23FavoritesListController____lazy_storage___recentsResultsController));
}

id sub_1000C97C0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FavoritesListController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FavoritesListController()
{
  return objc_opt_self(_TtC17SequoiaTranslator23FavoritesListController);
}

unint64_t sub_1000C987C()
{
  unint64_t result;

  result = qword_100290B30;
  if (!qword_100290B30)
  {
    result = swift_getWitnessTable(&unk_1001F5A58, &type metadata for TipsHelper.FavoriteTranslationsTip);
    atomic_store(result, (unint64_t *)&qword_100290B30);
  }
  return result;
}

uint64_t sub_1000C98C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C98E4(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v3;

  return sub_1000C6F04(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000C98EC()
{
  return sub_1000C2850(&qword_100290930);
}

uint64_t sub_1000C98F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100006DF4(&qword_100290930) - 8) + 80);
  return sub_1000C7628(a1, a2, a3, v3 + ((v7 + 16) & ~v7));
}

uint64_t sub_1000C9950()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C9974(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(a1, a2, *a3);
}

uint64_t sub_1000C9998()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000C99BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000C76BC(a1, a2, a3, a4, v4);
}

uint64_t sub_1000C99C4()
{
  return sub_1000C2850(&qword_100290928);
}

uint64_t sub_1000C99D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_100006DF4(&qword_100290928) - 8) + 80);
  v7 = v4 + ((v6 + 16) & ~v6);
  v8 = sub_10000A05C(0, (unint64_t *)&qword_100290938, UICollectionViewListCell_ptr);
  return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)(v7, a4, v8);
}

uint64_t sub_1000C9A44()
{
  _QWORD *v0;
  unint64_t v1;

  swift_release(v0[2]);
  v1 = v0[4];
  if (v1 >= 3)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
  }
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000C9A80(uint64_t a1)
{
  uint64_t *v1;

  sub_1000C7DF4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000C9A8C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  _QWORD v22[2];
  uint64_t v23;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    v4 = 4;
    while (1)
    {
      v5 = v4 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1);
      v7 = v4 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_19;
LABEL_9:
      v23 = v7;
      KeyPath = swift_getKeyPath(&unk_1001EDA30);
      v9 = swift_getKeyPath(&unk_1001EDA58);
      v10 = v6;
      static Published.subscript.getter(v22, v6, KeyPath, v9);
      swift_release(KeyPath);
      swift_release(v9);
      v12 = v22[0];
      v11 = v22[1];
      v13 = objc_msgSend(a2, "sessionID");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      if (v12 == v14 && v11 == v16)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v11);
LABEL_18:
        swift_bridgeObjectRelease(v11);
        return v10;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v14, v16, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        v11 = a1;
        goto LABEL_18;
      }
      swift_release(v10);
      ++v4;
      if (v23 == v3)
        goto LABEL_24;
    }
    v6 = *(_QWORD *)(a1 + 8 * v4);
    swift_retain(v6);
    v7 = v4 - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_9;
LABEL_19:
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1000C9C84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C73E0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000C9C8C()
{
  return sub_1000C72B0();
}

uint64_t sub_1000C9CA4()
{
  uint64_t v0;

  return sub_1000C5CC8(v0);
}

uint64_t sub_1000C9CAC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C9CD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100290B9C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D380;
  return sub_1000C63CC(a1, v4, v5, v6);
}

double sub_1000C9D44(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000C6170(a1, v1);
}

char *sub_1000C9D4C(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v13[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v13);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    sub_1000C9DFC(*a2, v8);
    *(_QWORD *)a1 = v7;
    a1[8] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = (uint64_t)a2 + v9;
    v12 = sub_100006DF4(&qword_100290C00);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

id sub_1000C9DFC(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain(a1);
}

uint64_t sub_1000C9E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1000C9E58(*(id *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_100006DF4(&qword_100290C00);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

void sub_1000C9E58(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release(a1);
}

uint64_t sub_1000C9E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(id *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1000C9DFC(*(id *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_100006DF4(&qword_100290C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000C9EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(id *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1000C9DFC(*(id *)a2, v7);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000C9E58(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_100006DF4(&qword_100290C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000C9F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_100006DF4(&qword_100290C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000C9FE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000C9E58(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = sub_100006DF4(&qword_100290C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000CA05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CA068);
}

uint64_t sub_1000CA068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100006DF4(&qword_100290C00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000CA0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CA0EC);
}

uint64_t sub_1000CA0EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_100006DF4(&qword_100290C00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FavoritesSideBarListView(uint64_t a1)
{
  uint64_t result;

  result = qword_100290C60;
  if (!qword_100290C60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FavoritesSideBarListView);
  return result;
}

void sub_1000CA19C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  sub_1000CA210(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1000CA210(uint64_t a1)
{
  uint64_t v2;
  unint64_t Request;
  uint64_t v4;

  if (!qword_100290C70)
  {
    v2 = type metadata accessor for PersistedTranslation(255);
    Request = type metadata accessor for FetchRequest(a1, v2);
    if (!v4)
      atomic_store(Request, (unint64_t *)&qword_100290C70);
  }
}

uint64_t sub_1000CA264(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002134AC, 1);
}

_QWORD *sub_1000CA274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  void (*v10)(_QWORD *, _QWORD);
  id *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;
  _QWORD *v27;

  v0 = sub_100006DF4(&qword_100290D10);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FavoritesSideBarListView(0);
  v4 = sub_100006DF4(&qword_100290C00);
  FetchRequest.wrappedValue.getter(v4);
  v5 = sub_100012334(&qword_100290D18, &qword_100290D10, (uint64_t)&protocol conformance descriptor for FetchedResults<A>);
  v6 = dispatch thunk of Collection.count.getter(v0, v5);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v25[0] = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(v7);
    sub_1000CAFF8(v20);
    v22 = v21;
    swift_bridgeObjectRelease(v7);
    v23 = v25[0];
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v23);
    return (_QWORD *)v22;
  }
  v8 = v6;
  v27 = _swiftEmptyArrayStorage;
  sub_1001DA1E8(0, v6 & ~(v6 >> 63), 0);
  v7 = v27;
  result = dispatch thunk of Collection.startIndex.getter(&v26, v0, v5);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v24 = v1;
    do
    {
      v10 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v25, &v26, v0, v5);
      v12 = *v11;
      v10(v25, 0);
      v13 = objc_msgSend(v12, "displayLocalePairText");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v27 = v7;
      v18 = v7[2];
      v17 = v7[3];
      if (v18 >= v17 >> 1)
      {
        sub_1001DA1E8(v17 > 1, v18 + 1, 1);
        v7 = v27;
      }
      v7[2] = v18 + 1;
      v19 = &v7[2 * v18];
      v19[4] = v14;
      v19[5] = v16;
      dispatch thunk of Collection.formIndex(after:)(&v26, v0, v5);
      --v8;
    }
    while (v8);
    v1 = v24;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CA4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = sub_100006DF4(&qword_10028F7E0);
  __chkstk_darwin(v1);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = LocalizedStringKey.init(stringLiteral:)(0x455449524F564146, 0xE900000000000053);
  v5 = Text.init(_:tableName:bundle:comment:)(v4);
  v7 = v6;
  v9 = v8;
  v18 = v5;
  v19 = v6;
  v11 = v10 & 1;
  v20 = v10 & 1;
  v21 = v8;
  View.accessibilityIdentifier(_:)(0xD000000000000015, 0x80000001001FC610, &type metadata for Text, &protocol witness table for Text);
  sub_10001B9E8(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  v17 = v0;
  v12 = sub_100006DF4(&qword_100290CA0);
  v13 = sub_100099370();
  v14 = sub_100012334(&qword_100290CA8, &qword_100290CA0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return Section<>.init(header:content:)(v3, sub_1000CAE00, v16, v1, v12, v13, v14);
}

uint64_t sub_1000CA640@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;

  v35 = a1;
  v32 = sub_100006DF4(&qword_100290CB0);
  v34 = *(_QWORD *)(v32 - 8);
  v1 = __chkstk_darwin(v32);
  v33 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v4 = (char *)&v30 - v3;
  v5 = sub_100006DF4(&qword_100290CB8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v31 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - v9;
  v36 = xmmword_1001E6600;
  v11 = sub_100006DF4(&qword_100290CC0);
  v12 = sub_1000CAE08();
  v13 = sub_10000B694();
  v30 = v10;
  NavigationLink<>.init<A>(value:label:)(&v36, sub_1000CA8E8, 0, v11, &type metadata for AppSection, v12, v13);
  *(_QWORD *)&v36 = sub_1000CA274();
  KeyPath = swift_getKeyPath(&unk_1001EDB08);
  v15 = sub_100006DF4(&qword_10028A6C8);
  v16 = sub_100006DF4(&qword_100290CF0);
  v17 = sub_100012334(&qword_100290CF8, &qword_10028A6C8, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = sub_100012334(&qword_100290D00, &qword_100290CF0, (uint64_t)&protocol conformance descriptor for NavigationLink<A, B>);
  ForEach<>.init(_:id:content:)(&v36, KeyPath, sub_1000CAB20, 0, v15, v16, v17, &protocol witness table for Int, v18);
  v19 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v20 = v31;
  v19(v31, v10, v5);
  v21 = v33;
  v22 = v34;
  v23 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  v24 = v32;
  v23(v33, v4, v32);
  v25 = v35;
  v19(v35, v20, v5);
  v26 = sub_100006DF4(&qword_100290D08);
  v23(&v25[*(int *)(v26 + 48)], v21, v24);
  v27 = *(void (**)(char *, uint64_t))(v22 + 8);
  v27(v4, v24);
  v28 = *(void (**)(char *, uint64_t))(v6 + 8);
  v28(v30, v5);
  v27(v21, v24);
  return ((uint64_t (*)(char *, uint64_t))v28)(v20, v5);
}

uint64_t sub_1000CA8E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v20[2];

  v20[1] = a1;
  v1 = sub_100006DF4(&qword_100290D20);
  __chkstk_darwin(v1);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028AB30);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100290CD8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v20 - v12;
  v14 = LocalizedStringKey.init(stringLiteral:)(0x455449524F564146, 0xED00004C4C415F53);
  Label<>.init(_:systemImage:)(v14);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v7, v4);
  swift_storeEnumTagMultiPayload(v3, v1, 0);
  v15 = sub_100006DF4(&qword_100290CE8);
  v16 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v17 = sub_1000CAF10(&qword_100290CE0, &qword_100290CE8, (void (*)(void))sub_10000AE84);
  _ConditionalContent<>.init(storage:)(v3, v4, v15, v16, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000CB160((uint64_t)v11, (uint64_t)v13);
  v18 = sub_1000CAE74();
  View.accessibilityIdentifier(_:)(0xD000000000000015, 0x80000001001FC630, v8, v18);
  return sub_10000A020((uint64_t)v13, &qword_100290CD8);
}

uint64_t sub_1000CAB20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];
  _QWORD v8[2];

  v2 = *a1;
  v1 = a1[1];
  v8[0] = v2;
  v8[1] = v1;
  v7[2] = v2;
  v7[3] = v1;
  swift_bridgeObjectRetain(v1);
  v3 = sub_100006DF4(&qword_100290CE8);
  v4 = sub_1000CAF10(&qword_100290CE0, &qword_100290CE8, (void (*)(void))sub_10000AE84);
  v5 = sub_10000B694();
  return NavigationLink<>.init<A>(value:label:)(v8, sub_1000CAFA8, v7, v3, &type metadata for AppSection, v4, v5);
}

uint64_t sub_1000CABBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  _QWORD v25[2];

  v24[1] = a3;
  v5 = sub_100006DF4(&qword_10028AB38);
  __chkstk_darwin(v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028AB20);
  __chkstk_darwin(v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = sub_100006DF4(&qword_10028AB28);
  __chkstk_darwin(v24[0]);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028AB30);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a1;
  v25[1] = a2;
  v17 = sub_10000B030();
  v18 = swift_bridgeObjectRetain(a2);
  Label<>.init<A>(_:systemImage:)(v25, 1918989427, 0xE400000000000000, &type metadata for String, v17, v18);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v16, v13);
  swift_storeEnumTagMultiPayload(v10, v8, 0);
  v19 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  _ConditionalContent<>.init(storage:)(v10, v13, v13, v19, v19);
  sub_1000CAFB0((uint64_t)v12, (uint64_t)v7);
  swift_storeEnumTagMultiPayload(v7, v5, 1);
  v20 = sub_100006DF4(&qword_10028AB58);
  v21 = sub_10000AE84();
  v22 = sub_10000AFBC();
  _ConditionalContent<>.init(storage:)(v7, v20, v24[0], v21, v22);
  sub_10000A020((uint64_t)v12, &qword_10028AB28);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_1000CAE00@<X0>(char *a1@<X8>)
{
  return sub_1000CA640(a1);
}

unint64_t sub_1000CAE08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290CC8;
  if (!qword_100290CC8)
  {
    v1 = sub_1000070BC(&qword_100290CC0);
    sub_1000CAE74();
    sub_1000129EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290CC8);
  }
  return result;
}

unint64_t sub_1000CAE74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290CD0;
  if (!qword_100290CD0)
  {
    v1 = sub_1000070BC(&qword_100290CD8);
    sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_1000CAF10(&qword_100290CE0, &qword_100290CE8, (void (*)(void))sub_10000AE84);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290CD0);
  }
  return result;
}

uint64_t sub_1000CAF10(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    a3();
    sub_10000AFBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CAF7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = String.hashValue.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000CAFA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CABBC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000CAFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028AB28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000CAFF8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18[2];
  _QWORD *v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = a1 + 40;
    v4 = -(uint64_t)v1;
    v5 = _swiftEmptyArrayStorage;
    v16 = a1 + 40;
    v17 = *(_QWORD *)(a1 + 16);
    do
    {
      if (v2 <= v1)
        v6 = v1;
      else
        v6 = v2;
      v7 = -(uint64_t)v6;
      for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
      {
        if (v7 + v2 == 1)
        {
          __break(1u);
          return;
        }
        v10 = *(i - 1);
        v9 = *i;
        swift_bridgeObjectRetain_n(*i, 2);
        v11 = sub_100151298(v18, v10, v9);
        swift_bridgeObjectRelease(v18[1]);
        if ((v11 & 1) != 0)
          break;
        swift_bridgeObjectRelease(v9);
        ++v2;
        if (v4 + v2 == 1)
          return;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      v19 = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001DA1E8(0, v5[2] + 1, 1);
        v5 = v19;
      }
      v14 = v5[2];
      v13 = v5[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001DA1E8(v13 > 1, v14 + 1, 1);
        v5 = v19;
      }
      v5[2] = v14 + 1;
      v15 = &v5[2 * v14];
      v15[4] = v10;
      v15[5] = v9;
      v3 = v16;
      v1 = v17;
    }
    while (v4 + v2);
  }
}

uint64_t sub_1000CB160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100290CD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000CB1AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290D28;
  if (!qword_100290D28)
  {
    v1 = sub_1000070BC(&qword_100290D30);
    sub_100099370();
    sub_100012334(&qword_100290CA8, &qword_100290CA0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100290D28);
  }
  return result;
}

uint64_t *sub_1000CB23C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    v7 = a2[2];
    a1[1] = v6;
    a1[2] = v7;
    v8 = a2[3];
    a1[3] = v8;
    v9 = *(int *)(a3 + 32);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v5);
    swift_retain(v6);
    swift_retain(v7);
    swift_retain(v8);
    v12 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_100006DF4(&qword_10028CE40);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
      v17 = v10;
      v18 = v12;
      v19 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v17 = v10;
      v18 = v12;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_1000CB398(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  return result;
}

uint64_t *sub_1000CB460(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  v11 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      v14 = sub_100006DF4(&qword_10028CE40);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      v15 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v9, v10, v12);
      v15 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  else
  {
    v16 = *v10;
    *v9 = *v10;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v15);
  return a1;
}

uint64_t *sub_1000CB590(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[3];
  v13 = a1[3];
  a1[3] = v12;
  swift_retain(v12);
  swift_release(v13);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 32);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_10000A020((uint64_t)a1 + v14, (uint64_t *)&unk_100291470);
    v17 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for UserInterfaceSizeClass(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        v20 = sub_100006DF4(&qword_10028CE40);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        v21 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 16))(v15, v16, v18);
        v21 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v21);
  }
  return a1;
}

_OWORD *sub_1000CB714(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      v11 = sub_100006DF4(&qword_10028CE40);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1000CB81C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_release(v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 32);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_10000A020((uint64_t)a1 + v10, (uint64_t *)&unk_100291470);
    v13 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        v16 = sub_100006DF4(&qword_10028CE40);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v11, v12, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000CB97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CB988);
}

uint64_t sub_1000CB988(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t sub_1000CBA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CBA14);
}

char *sub_1000CBA14(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028CE50);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FavoritesView(uint64_t a1)
{
  uint64_t result;

  result = qword_100290D90;
  if (!qword_100290D90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FavoritesView);
  return result;
}

void sub_1000CBAC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_1000CBB44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002134FC, 1);
}

uint64_t sub_1000CBB54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028CE40);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v27 - v14;
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v27 - v16);
  type metadata accessor for FavoritesView(0);
  sub_1000D58EC(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v15, enum case for UserInterfaceSizeClass.regular(_:), v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_100070CF4((uint64_t)v17, (uint64_t)v8);
  sub_100070CF4((uint64_t)v15, v18);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v19((uint64_t)v8, 1, v2) != 1)
  {
    sub_100070CF4((uint64_t)v8, (uint64_t)v12);
    if (v19(v18, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v18, v2);
      v20 = sub_1000C3C44();
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v5, v2, v20);
      v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      v22(v5, v2);
      sub_10000A020((uint64_t)v15, &qword_10028CE40);
      sub_10000A020((uint64_t)v17, &qword_10028CE40);
      v22(v12, v2);
      sub_10000A020((uint64_t)v8, &qword_10028CE40);
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v23 = (unsigned int *)&enum case for NavigationBarItem.TitleDisplayMode.automatic(_:);
      goto LABEL_10;
    }
    sub_10000A020((uint64_t)v15, &qword_10028CE40);
    sub_10000A020((uint64_t)v17, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
LABEL_6:
    sub_10000A020((uint64_t)v8, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v15, &qword_10028CE40);
  sub_10000A020((uint64_t)v17, &qword_10028CE40);
  if (v19(v18, 1, v2) != 1)
    goto LABEL_6;
  sub_10000A020((uint64_t)v8, &qword_10028CE40);
LABEL_8:
  v23 = (unsigned int *)&enum case for NavigationBarItem.TitleDisplayMode.inline(_:);
LABEL_10:
  v24 = *v23;
  v25 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(a1, v24, v25);
}

uint64_t sub_1000CBE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028CE40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v24 - v14);
  type metadata accessor for FavoritesView(0);
  sub_1000D58EC(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100070CF4((uint64_t)v15, (uint64_t)v6);
  sub_100070CF4((uint64_t)v13, v16);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) != 1)
  {
    sub_100070CF4((uint64_t)v6, (uint64_t)v10);
    if (v17(v16, 1, v0) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      v18 = sub_1000C3C44();
      v19 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v18);
      v20 = *(void (**)(char *, uint64_t))(v1 + 8);
      v20(v3, v0);
      sub_10000A020((uint64_t)v13, &qword_10028CE40);
      sub_10000A020((uint64_t)v15, &qword_10028CE40);
      v20(v10, v0);
      sub_10000A020((uint64_t)v6, &qword_10028CE40);
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v21 = 0x455449524F564146;
      v22 = 0xE900000000000053;
      return LocalizedStringKey.init(stringLiteral:)(v21, v22);
    }
    sub_10000A020((uint64_t)v13, &qword_10028CE40);
    sub_10000A020((uint64_t)v15, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_6:
    sub_10000A020((uint64_t)v6, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v13, &qword_10028CE40);
  sub_10000A020((uint64_t)v15, &qword_10028CE40);
  if (v17(v16, 1, v0) != 1)
    goto LABEL_6;
  sub_10000A020((uint64_t)v6, &qword_10028CE40);
LABEL_8:
  v21 = 0;
  v22 = 0xE000000000000000;
  return LocalizedStringKey.init(stringLiteral:)(v21, v22);
}

uint64_t sub_1000CC174@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  __n128 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v2 = v1;
  v33 = a1;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100290DD8);
  v8 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  v32 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v1;
  v12 = v2[1];
  v13 = v2[2];
  v14 = v2[3];
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  v16 = static SafeAreaRegions.container.getter(v15);
  v17 = static Edge.Set.all.getter(v16);
  v34 = v11;
  v35 = v12;
  v36 = v13;
  v37 = v14;
  v38 = v16;
  v39 = v17;
  sub_1000CBB54((uint64_t)v6);
  v18 = sub_100006DF4(&qword_100290DE0);
  v19 = sub_1000CC364();
  View.navigationBarTitleDisplayMode(_:)(v6, v18, v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_release(v34);
  swift_release(v35);
  swift_release(v36);
  swift_release(v37);
  v20 = sub_1000CBE6C();
  v22 = v21;
  LOBYTE(v3) = v23;
  v25 = v24;
  v34 = v18;
  v35 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v27 = v31;
  View.navigationBarTitle(_:)(v20, v22, v3 & 1, v25, v31, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v25);
  v28 = swift_bridgeObjectRelease(v22);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v32 + 8))(v10, v27, v28);
}

unint64_t sub_1000CC364()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290DE8;
  if (!qword_100290DE8)
  {
    v1 = sub_1000070BC(&qword_100290DE0);
    sub_1000C5A18();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100290DE8);
  }
  return result;
}

uint64_t sub_1000CC3D0()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  unint64_t v4;

  v0 = sub_1000070BC(&qword_100290DD8);
  v3 = sub_1000070BC(&qword_100290DE0);
  v4 = sub_1000CC364();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
}

uint64_t storeEnumTagSinglePayload for VisualIntelligenceFeatures(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000CC484 + 4 * byte_1001EDBA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000CC4A4 + 4 * byte_1001EDBA5[v4]))();
}

_BYTE *sub_1000CC484(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000CC4A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CC4AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CC4B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CC4BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CC4C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VisualIntelligenceFeatures()
{
  return &type metadata for VisualIntelligenceFeatures;
}

uint64_t getEnumTagSinglePayload for TranslateFeatures(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TranslateFeatures(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1000CC5BC + 4 * byte_1001EDBAF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000CC5F0 + 4 * byte_1001EDBAA[v4]))();
}

uint64_t sub_1000CC5F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC5F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CC600);
  return result;
}

uint64_t sub_1000CC60C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CC614);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000CC618(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC620(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranslateFeatures()
{
  return &type metadata for TranslateFeatures;
}

unint64_t sub_1000CC640()
{
  unint64_t result;

  result = qword_100290DF0;
  if (!qword_100290DF0)
  {
    result = swift_getWitnessTable(&unk_1001EDC34, &type metadata for TranslateFeatures);
    atomic_store(result, (unint64_t *)&qword_100290DF0);
  }
  return result;
}

const char *sub_1000CC684()
{
  return "VisualIntelligence";
}

const char *sub_1000CC698()
{
  return "OpticalFlowTracking";
}

uint64_t sub_1000CC6AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000CC6D8 + 4 * byte_1001EDBB4[a1]))("camera_input", 12);
}

const char *sub_1000CC6D8()
{
  return "kakapo";
}

const char *sub_1000CC6EC()
{
  return "refresh_translate_app";
}

const char *sub_1000CC700()
{
  return "refresh_system_translation";
}

const char *sub_1000CC714()
{
  return "refresh_streaming";
}

const char *sub_1000CC728()
{
  return "genderDisambiguation";
}

const char *sub_1000CC770()
{
  return "recordingTonesAndHaptics";
}

unint64_t sub_1000CC788()
{
  unint64_t result;

  result = qword_100290DF8;
  if (!qword_100290DF8)
  {
    result = swift_getWitnessTable(&unk_1001EDC9C, &type metadata for VisualIntelligenceFeatures);
    atomic_store(result, (unint64_t *)&qword_100290DF8);
  }
  return result;
}

const char *sub_1000CC7CC()
{
  return "Translate";
}

uint64_t sub_1000CC7E0()
{
  unsigned __int8 *v0;

  return sub_1000CC6AC(*v0);
}

id sub_1000CC854()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlamesView.Coordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FlamesView.Coordinator()
{
  return objc_opt_self(_TtCV17SequoiaTranslator10FlamesView11Coordinator);
}

void sub_1000CC8A4(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;

  v6 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *a3 = v10;
  a3[1] = v12;
  v13 = objc_msgSend(a1, "creationDate");
  if (v13)
  {
    v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v8, 0, 1, v15);
  }
  else
  {
    v16 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  }
  v17 = (int *)type metadata accessor for GenderTipManager.Registration(0);
  v18 = sub_1000CD500((uint64_t)v8, (uint64_t)a3 + v17[5]);
  v19 = (void *)dispatch thunk of PersistedTranslation.disambiguableResult.getter(v18);
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, "hasDisambiguationsOfType:", 1);

  }
  else
  {
    v21 = 0;
  }

  *((_BYTE *)a3 + v17[6]) = v21;
  *((_BYTE *)a3 + v17[7]) = a2 & 1;
}

uint64_t sub_1000CCA18()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EDDB0);
  v2 = swift_getKeyPath(&unk_1001EDDD8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000CCA88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  double v26;
  void (*v27)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v3 = sub_100006DF4(&qword_1002948B0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v29 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  v16 = type metadata accessor for GenderTipManager.Registration(0);
  if (*((_BYTE *)a1 + *(int *)(v16 + 24)) == 1)
  {
    v17 = v16;
    v29 = v6;
    KeyPath = swift_getKeyPath(&unk_1001EDDB0);
    v19 = swift_getKeyPath(&unk_1001EDDD8);
    static Published.subscript.getter(&v30, v1, KeyPath, v19);
    swift_release(KeyPath);
    swift_release(v19);
    v20 = v31;
    if (v31)
    {
      v21 = a1[1];
      if (v30 == *a1 && v31 == v21)
      {
        swift_bridgeObjectRelease(v31);
        v22 = 1;
      }
      else
      {
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, *a1, v21, 0);
        swift_bridgeObjectRelease(v20);
      }
    }
    else
    {
      v23 = v1 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager_mostRecentCreationDate;
      swift_beginAccess(v23, &v30, 0, 0);
      sub_100065FD0(v23, (uint64_t)v8);
      v24 = (unsigned int (*)(char *, uint64_t, uint64_t))v10[6];
      if (v24(v8, 1, v9) != 1)
      {
        v25 = (void (*)(char *, char *, uint64_t))v10[4];
        v25(v15, v8, v9);
        v8 = v29;
        sub_100065FD0((uint64_t)a1 + *(int *)(v17 + 20), (uint64_t)v29);
        if (v24(v8, 1, v9) != 1)
        {
          v25(v13, v8, v9);
          v26 = Date.timeIntervalSince(_:)(v15);
          v27 = (void (*)(char *, uint64_t))v10[1];
          v27(v13, v9);
          v27(v15, v9);
          v22 = v26 > 0.0;
          return v22 & 1;
        }
        ((void (*)(char *, uint64_t))v10[1])(v15, v9);
      }
      sub_1000CD548((uint64_t)v8);
      v22 = 1;
    }
  }
  else
  {
    v22 = 0;
  }
  return v22 & 1;
}

uint64_t sub_1000CCD24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, __n128);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73[24];

  v2 = type metadata accessor for Date(0);
  v70 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v68 = (char *)&v63 - v6;
  v7 = (int *)type metadata accessor for GenderTipManager.Registration(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_1002948B0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v66 = (char *)&v63 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v63 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v63 - v20;
  result = __chkstk_darwin(v19);
  v24 = (char *)&v63 - v23;
  v25 = v7[6];
  v69 = a1;
  if (*((_BYTE *)a1 + v25) == 1)
  {
    v64 = v5;
    v26 = (uint64_t)v69;
    v27 = (uint64_t)v69 + v7[5];
    sub_100065FD0(v27, (uint64_t)&v63 - v23);
    v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
    v65 = v2;
    v29 = v28(v24, 1, v2);
    sub_1000CD548((uint64_t)v24);
    sub_1000CD588(v26, (uint64_t)v9);
    if (v29 == 1)
    {
      v30 = v9[v7[7]];
      result = sub_10003ED24((uint64_t)v9);
      v31 = v64;
      v32 = v65;
      if ((v30 & 1) == 0)
        return result;
    }
    else
    {
      sub_10003ED24((uint64_t)v9);
      v31 = v64;
      v32 = v65;
    }
    sub_100065FD0(v27, (uint64_t)v21);
    v33 = v28(v21, 1, v32);
    v34 = v68;
    if ((_DWORD)v33 == 1)
    {
      static Date.now.getter(v33);
      sub_1000CD548((uint64_t)v21);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v68, v21, v32);
    }
    v35 = v67;
    v36 = v67 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager_mostRecentCreationDate;
    swift_beginAccess(v67 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager_mostRecentCreationDate, v73, 0, 0);
    sub_100065FD0(v36, (uint64_t)v18);
    if (v28(v18, 1, v32) == 1)
    {
      sub_1000CD548((uint64_t)v18);
      v37 = v70;
      v38 = (uint64_t)v66;
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v66, v34, v32);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v32);
      sub_1000CD500(v38, (uint64_t)v13);
      swift_beginAccess(v36, &v71, 33, 0);
      sub_10005DEF4((uint64_t)v13, v36);
      swift_endAccess(&v71);
      KeyPath = swift_getKeyPath(&unk_1001EDDB0);
      v40 = swift_getKeyPath(&unk_1001EDDD8);
      static Published.subscript.getter(&v71, v35, KeyPath);
      swift_release(KeyPath);
      swift_release(v40);
      v41 = v72;
      v42 = *v69;
      v43 = v69[1];
      if (v72)
      {
        if (v71 == v42 && v72 == v43)
        {
          swift_bridgeObjectRelease(v72);
          v44 = v65;
          return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v68, v44);
        }
        v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, *v69, v69[1], 0);
        swift_bridgeObjectRelease(v41);
        v44 = v65;
        if ((v55 & 1) != 0)
          return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v68, v44);
      }
      else
      {
        v44 = v65;
      }
      v56 = swift_getKeyPath(&unk_1001EDDB0);
      v57 = swift_getKeyPath(&unk_1001EDDD8);
      v71 = v42;
      v72 = v43;
      swift_retain(v35);
      swift_bridgeObjectRetain(v43);
      static Published.subscript.setter(&v71, v35, v56, v57);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v68, v44);
    }
    v45 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v31, v18, v32);
    if (Date.timeIntervalSince(_:)(v31) <= 0.0)
    {
      v54 = *(void (**)(char *, uint64_t))(v45 + 8);
      v54(v31, v32);
      return ((uint64_t (*)(char *, uint64_t))v54)(v34, v32);
    }
    v46 = (uint64_t)v66;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v66, v34, v32);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v32);
    sub_1000CD500(v46, (uint64_t)v13);
    swift_beginAccess(v36, &v71, 33, 0);
    sub_10005DEF4((uint64_t)v13, v36);
    swift_endAccess(&v71);
    v47 = swift_getKeyPath(&unk_1001EDDB0);
    v48 = swift_getKeyPath(&unk_1001EDDD8);
    static Published.subscript.getter(&v71, v67, v47);
    swift_release(v47);
    swift_release(v48);
    v49 = v72;
    v50 = *v69;
    v51 = v69[1];
    if (v72)
    {
      if (v71 == v50 && v72 == v51)
      {
        v52 = swift_bridgeObjectRelease(v72);
        v53 = v64;
LABEL_27:
        v62 = *(void (**)(char *, uint64_t, __n128))(v45 + 8);
        v62(v53, v32, v52);
        return ((uint64_t (*)(char *, uint64_t))v62)(v68, v32);
      }
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, *v69, v69[1], 0);
      v52 = swift_bridgeObjectRelease(v49);
      v53 = v64;
      if ((v58 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v53 = v64;
    }
    v59 = swift_getKeyPath(&unk_1001EDDB0);
    v60 = swift_getKeyPath(&unk_1001EDDD8);
    v71 = v50;
    v72 = v51;
    swift_bridgeObjectRetain(v51);
    v61 = v67;
    swift_retain(v67);
    static Published.subscript.setter(&v71, v61, v59, v60);
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1000CD2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager__allowedTranslationID;
  v2 = sub_100006DF4(&qword_10028B5B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000CD548(v0 + OBJC_IVAR____TtC17SequoiaTranslator16GenderTipManager_mostRecentCreationDate);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000CD360()
{
  return type metadata accessor for GenderTipManager(0);
}

uint64_t type metadata accessor for GenderTipManager(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100290EC8, (uint64_t)&nominal type descriptor for GenderTipManager);
}

void sub_1000CD37C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1000CD404(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000CD45C(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_1000CD404(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028F0C0)
  {
    v2 = sub_1000070BC(&qword_10028D160);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028F0C0);
  }
}

void sub_1000CD45C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028E960)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028E960);
  }
}

uint64_t sub_1000CD4B0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for GenderTipManager(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for GenderTipManager.Registration(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100291028, (uint64_t)&nominal type descriptor for GenderTipManager.Registration);
}

uint64_t sub_1000CD500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002948B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CD548(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_1002948B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CD588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenderTipManager.Registration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_1000CD5CC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EDDB0);
  v5 = swift_getKeyPath(&unk_1001EDDD8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1000CD64C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EDDB0);
  v6 = swift_getKeyPath(&unk_1001EDDD8);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

_QWORD *sub_1000CD6D0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_100006DF4(&qword_1002948B0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
  }
  return v4;
}

uint64_t sub_1000CD7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_1000CD868(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_100006DF4(&qword_1002948B0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

_QWORD *sub_1000CD958(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100006DF4(&qword_1002948B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_OWORD *sub_1000CDAA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100006DF4(&qword_1002948B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  return a1;
}

_QWORD *sub_1000CDB80(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100006DF4(&qword_1002948B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  return a1;
}

uint64_t sub_1000CDCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CDCC0);
}

uint64_t sub_1000CDCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_1002948B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000CDD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CDD4C);
}

uint64_t sub_1000CDD4C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_1002948B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1000CDDC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001EDE08;
  sub_1000CD45C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1001EDE20;
    v4[3] = &unk_1001EDE20;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t storeEnumTagSinglePayload for GenderTipManager.Registration.Location(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000CDE90 + 4 * byte_1001EDD55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CDEC4 + 4 * asc_1001EDD50[v4]))();
}

uint64_t sub_1000CDEC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CDECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CDED4);
  return result;
}

uint64_t sub_1000CDEE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CDEE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000CDEEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CDEF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenderTipManager.Registration.Location()
{
  return &type metadata for GenderTipManager.Registration.Location;
}

unint64_t sub_1000CDF14()
{
  unint64_t result;

  result = qword_100291068;
  if (!qword_100291068)
  {
    result = swift_getWitnessTable(&unk_1001EDE84, &type metadata for GenderTipManager.Registration.Location);
    atomic_store(result, (unint64_t *)&qword_100291068);
  }
  return result;
}

void sub_1000CDF58(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000CDFA0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6554746567726174, 0xEA00000000007478);
  swift_bridgeObjectRelease(0xEA00000000007478);
  return Hasher._finalize()();
}

Swift::Int sub_1000CE050(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000013;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0x726F7774654E6F6ELL;
    else
      v2 = 0xD000000000000014;
    if (a1 == 1)
      v3 = 0xE90000000000006BLL;
    else
      v3 = 0x80000001001F7D40;
  }
  else
  {
    v3 = 0x80000001001F7D20;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000CE0F8(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000CE148()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x74786554646E6966, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1000CE1D8(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000CE22C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x697461636F766E69, 0xEC00000064496E6FLL);
  swift_bridgeObjectRelease(0xEC00000064496E6FLL);
  return Hasher._finalize()();
}

void sub_1000CE2A4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000CE2F4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6974696E69666564, 0xEA00000000006E6FLL);
  swift_bridgeObjectRelease(0xEA00000000006E6FLL);
  return Hasher._finalize()();
}

void sub_1000CE398(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000CE3F4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x657474616D726F66, 0xEF676E6972745364);
  swift_bridgeObjectRelease(0xEF676E6972745364);
  return Hasher._finalize()();
}

void sub_1000CE498(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000CE4D8(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000012, 0x80000001001F7E30);
  return swift_bridgeObjectRelease(0x80000001001F7E30);
}

void sub_1000CE598(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000CE5D8(uint64_t a1)
{
  String.hash(into:)(a1, 0x6974696E69666564, 0xEA00000000006E6FLL);
  return swift_bridgeObjectRelease(0xEA00000000006E6FLL);
}

void sub_1000CE668(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000CE6A8(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x74786554646E6966, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1000CE724(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000CE770()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x74786554646E6966, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1000CE800(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000013;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x726F7774654E6F6ELL;
    else
      v3 = 0xD000000000000014;
    if (a2 == 1)
      v4 = 0xE90000000000006BLL;
    else
      v4 = 0x80000001001F7D40;
  }
  else
  {
    v4 = 0x80000001001F7D20;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000CE8A4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000CE8E8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6554746567726174, 0xEA00000000007478);
  swift_bridgeObjectRelease(0xEA00000000007478);
  return Hasher._finalize()();
}

void sub_1000CE998(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000CE9E8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x697461636F766E69, 0xEC00000064496E6FLL);
  swift_bridgeObjectRelease(0xEC00000064496E6FLL);
  return Hasher._finalize()();
}

void sub_1000CEA60(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000CEAAC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6974696E69666564, 0xEA00000000006E6FLL);
  swift_bridgeObjectRelease(0xEA00000000006E6FLL);
  return Hasher._finalize()();
}

void sub_1000CEB50(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000CEBA8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x657474616D726F66, 0xEF676E6972745364);
  swift_bridgeObjectRelease(0xEF676E6972745364);
  return Hasher._finalize()();
}

void sub_1000CEC4C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000CEC98()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x80000001001F7E30);
  swift_bridgeObjectRelease(0x80000001001F7E30);
  return Hasher._finalize()();
}

uint64_t sub_1000CED6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000CEEA0(char a1, uint64_t a2)
{
  _QWORD v4[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v4, *(_QWORD *)(a2 + 40));
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_1000CF190(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD v18[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v18, *(_QWORD *)(a3 + 40));
    switch(a2)
    {
      case 0uLL:
        v6 = 0x74616C736E617274;
        v7 = 0xEB000000006E6F69;
        break;
      case 1uLL:
        v6 = 0x6C6175736976;
        v7 = 0xE600000000000000;
        break;
      case 2uLL:
        v6 = 0x61737265766E6F63;
        v7 = 0xEC0000006E6F6974;
        break;
      case 3uLL:
        v6 = 0x657469726F766166;
        v7 = 0xE900000000000073;
        break;
      case 4uLL:
        v6 = 1701736302;
        v7 = 0xE400000000000000;
        break;
      default:
        String.hash(into:)(v18, 0x657469726F766166, 0xE900000000000073);
        v6 = a1;
        v7 = a2;
        break;
    }
    String.hash(into:)(v18, v6, v7);
    v8 = Hasher._finalize()();
    v9 = -1 << *(_BYTE *)(a3 + 32);
    v10 = v8 & ~v9;
    v11 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
    {
      v12 = ~v9;
      v13 = *(_QWORD *)(a3 + 48);
      while (1)
      {
        v14 = (_QWORD *)(v13 + 16 * v10);
        v15 = v14[1];
        switch(v15)
        {
          case 0:
            if (a2)
              goto LABEL_12;
            return 1;
          case 1:
            if (a2 == 1)
              return 1;
            goto LABEL_12;
          case 2:
            if (a2 == 2)
              return 1;
            goto LABEL_12;
          case 3:
            if (a2 == 3)
              return 1;
            goto LABEL_12;
          case 4:
            if (a2 != 4)
              goto LABEL_12;
            return 1;
          default:
            if (a2 >= 5)
            {
              v16 = *v14 == a1 && v15 == a2;
              if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) != 0)
                return 1;
            }
LABEL_12:
            v10 = (v10 + 1) & v12;
            if (((*(_QWORD *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
              return 0;
            break;
        }
      }
    }
  }
  return 0;
}

void sub_1000CF3B8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000CF3FC()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  Swift::String v6;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6._object = (void *)0xE000000000000000;
  v2._countAndFlagsBits = 0x74786554646E6966;
  v2._object = v0;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v6)._countAndFlagsBits;
  swift_bridgeObjectRelease(v0);

  return countAndFlagsBits;
}

uint64_t sub_1000CF4F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000CF528 + 4 * byte_1001EDF16[a1]))(0x6E776F44776F6C73, 0xE800000000000000);
}

uint64_t sub_1000CF528()
{
  return 0x74786554646E6966;
}

unint64_t sub_1000CF53C()
{
  return 0xD000000000000013;
}

unint64_t sub_1000CF558()
{
  return 0xD000000000000018;
}

void sub_1000CF590(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000CF5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[8];

  v5[0] = 6580575;
  v5[1] = 0xE300000000000000;
  v3 = 0x74786554646E6966;
  v4 = v0;
  swift_bridgeObjectRetain(v0);
  v3 = ((uint64_t (*)(uint64_t *, void *, void *, void *))String.init<A>(_:))(&v3, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v4 = v1;
  ((void (*)(_QWORD *, void *, void *))String.append<A>(contentsOf:))(v5, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v0);
  return v3;
}

void sub_1000CF6B4(char *a1)
{
  sub_1001D5E38(*a1);
}

void sub_1000CF6C0()
{
  char *v0;

  sub_1000CE0F8(*v0);
}

void sub_1000CF6C8(uint64_t a1)
{
  char *v1;

  sub_1000CE668(a1, *v1);
}

void sub_1000CF6D0(uint64_t a1)
{
  char *v1;

  sub_1000CE724(a1, *v1);
}

unint64_t sub_1000CF6D8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000D1FDC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000CF704@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000CF4F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_1000CF72C(char *a1, char *a2)
{
  return qword_1001EE120[*a1] < qword_1001EE120[*a2];
}

BOOL sub_1000CF750(char *a1, char *a2)
{
  return qword_1001EE120[*a2] >= qword_1001EE120[*a1];
}

BOOL sub_1000CF774(char *a1, char *a2)
{
  return qword_1001EE120[*a1] >= qword_1001EE120[*a2];
}

BOOL sub_1000CF798(char *a1, char *a2)
{
  return qword_1001EE120[*a2] < qword_1001EE120[*a1];
}

uint64_t sub_1000CF7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for GuidanceModel(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000D0EEC();
  qword_1002AA268 = v1;
  return result;
}

uint64_t sub_1000CF7F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EE0D0);
  v2 = swift_getKeyPath(&unk_1001EE0F8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_1000CF868(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t KeyPath;
  uint64_t v21;
  double v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t aBlock[5];
  uint64_t v36;
  _BYTE v37[24];

  v3 = v2;
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances);
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances, v37, 0, 0);
  v7 = *v6;
  swift_bridgeObjectRetain(*v6);
  v8 = sub_1000CEEA0(a1, v7);
  swift_bridgeObjectRelease(v7);
  if ((v8 & 1) == 0)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA320);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = a2;
      v14 = swift_slowAlloc(32, -1);
      aBlock[0] = v14;
      *(_DWORD *)v13 = 136446210;
      LOBYTE(v34) = a1;
      v15 = String.init<A>(describing:)(&v34, &type metadata for CameraGuidance);
      v17 = v16;
      v34 = sub_1001A7FE4(v15, v16, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, aBlock, v13 + 4);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Adding guidance: %{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      v18 = v14;
      a2 = v33;
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    swift_beginAccess(v6, aBlock, 33, 0);
    sub_100151444((uint64_t)&v34, a1);
    swift_endAccess(aBlock);
  }
  if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer))
  {
    v19 = (void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer);
    if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer))
    {
      KeyPath = swift_getKeyPath(&unk_1001EE0D0);
      v21 = swift_getKeyPath(&unk_1001EE0F8);
      static Published.subscript.getter(aBlock, v3, KeyPath);
      swift_release(KeyPath);
      swift_release(v21);
      if (LOBYTE(aBlock[0]) == 5)
      {
        if ((a2 & 1) != 0)
          v22 = 3.0;
        else
          v22 = 0.0;
        v23 = (void *)objc_opt_self(NSTimer);
        v24 = swift_allocObject(&unk_100269BB0, 24, 7);
        swift_weakInit(v24 + 16, v3);
        aBlock[4] = (uint64_t)sub_1000D2050;
        v36 = v24;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100187FE4;
        aBlock[3] = (uint64_t)&unk_100269BC8;
        v25 = _Block_copy(aBlock);
        swift_release(v36);
        v26 = objc_msgSend(v23, "scheduledTimerWithTimeInterval:repeats:block:", 0, v25, v22);
        _Block_release(v25);
        v27 = *v19;
        *v19 = v26;

      }
      else
      {
        v28 = swift_getKeyPath(&unk_1001EE0D0);
        v29 = swift_getKeyPath(&unk_1001EE0F8);
        static Published.subscript.getter(aBlock, v3, v28);
        swift_release(v28);
        swift_release(v29);
        if (LOBYTE(aBlock[0]) == 5)
        {
          __break(1u);
          JUMPOUT(0x1000CFD80);
        }
        sub_1001D5E38(aBlock[0]);
        if ((v30 & 1) == 0)
        {
          v31 = swift_getKeyPath(&unk_1001EE0D0);
          v32 = swift_getKeyPath(&unk_1001EE0F8);
          static Published.subscript.getter(aBlock, v3, v31);
          swift_release(v31);
          swift_release(v32);
          __asm { BR              X11 }
        }
      }
    }
  }
}

void sub_1000CFD9C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  char v47[24];
  uint64_t aBlock[5];
  uint64_t v49;
  char v50[24];
  char v51[24];
  uint64_t v52;
  uint64_t v53;
  char v54[24];
  char v55[24];
  char v56[32];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v56, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    swift_beginAccess(v4, v55, 0, 0);
    v7 = swift_weakLoadStrong(v4);
    if (v7)
    {
      v8 = v7;
      v9 = (uint64_t *)(v7 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances);
      swift_beginAccess(v7 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances, v54, 0, 0);
      v10 = *v9;
      swift_bridgeObjectRetain(v10);
      swift_release(v8);
      swift_bridgeObjectRetain(v10);
      v12 = sub_1001C68F0(v11);
      swift_bridgeObjectRelease(v10);
      aBlock[0] = (uint64_t)v12;
      sub_1000D1080(aBlock);
      swift_bridgeObjectRelease(v10);
      v13 = *(_QWORD *)(aBlock[0] + 16);
      if (v13)
        v14 = *(_BYTE *)(v13 + aBlock[0] + 31);
      else
        v14 = 5;
      swift_release(aBlock[0]);
    }
    else
    {
      v14 = 5;
    }
    KeyPath = swift_getKeyPath(&unk_1001EE0D0);
    v16 = swift_getKeyPath(&unk_1001EE0F8);
    LOBYTE(aBlock[0]) = v14;
    static Published.subscript.setter(aBlock, v6, KeyPath, v16);
  }
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v17 = type metadata accessor for Logger(0);
  sub_10000F66C(v17, (uint64_t)qword_1002AA320);
  v18 = swift_retain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    aBlock[0] = v22;
    *(_DWORD *)v21 = 136446210;
    swift_beginAccess(v4, v47, 0, 0);
    v23 = swift_weakLoadStrong(v4);
    if (v23)
    {
      v24 = v23;
      v25 = swift_getKeyPath(&unk_1001EE0D0);
      v26 = swift_getKeyPath(&unk_1001EE0F8);
      static Published.subscript.getter(&v52, v24, v25);
      swift_release(v24);
      swift_release(v25);
      swift_release(v26);
      v27 = v52;
    }
    else
    {
      v27 = 5;
    }
    LOBYTE(v52) = v27;
    v28 = sub_100006DF4((uint64_t *)&unk_1002910E0);
    v29 = String.init<A>(describing:)(&v52, v28);
    v31 = v30;
    v52 = sub_1001A7FE4(v29, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v21 + 4);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Current guidance set: %{public}s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
  swift_beginAccess(v4, &v52, 0, 0);
  v32 = swift_weakLoadStrong(v4);
  if (v32)
  {
    v33 = v32;
    v34 = swift_getKeyPath(&unk_1001EE0D0);
    v35 = swift_getKeyPath(&unk_1001EE0F8);
    static Published.subscript.getter(aBlock, v33, v34);
    swift_release(v33);
    swift_release(v34);
    swift_release(v35);
    if (LOBYTE(aBlock[0]) != 5)
    {
      swift_beginAccess(v4, v51, 0, 0);
      v36 = swift_weakLoadStrong(v4);
      if (v36)
      {
        v37 = v36;
        swift_beginAccess(v4, v50, 0, 0);
        v38 = swift_weakLoadStrong(v4);
        if (v38)
        {
          v39 = v38;
          v40 = (void *)objc_opt_self(NSTimer);
          aBlock[4] = (uint64_t)sub_1000D2070;
          v49 = v39;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_100187FE4;
          aBlock[3] = (uint64_t)&unk_100269C40;
          v41 = _Block_copy(aBlock);
          v42 = v49;
          swift_retain(v39);
          swift_release(v42);
          v43 = objc_msgSend(v40, "scheduledTimerWithTimeInterval:repeats:block:", 0, v41, 2.0);
          _Block_release(v41);
          swift_release(v39);
        }
        else
        {
          v43 = 0;
        }
        v44 = *(void **)(v37 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer);
        *(_QWORD *)(v37 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer) = v43;
        swift_release(v37);

      }
    }
  }
  objc_msgSend(a1, "invalidate");
  swift_beginAccess(v4, aBlock, 0, 0);
  v45 = swift_weakLoadStrong(v4);
  if (v45)
  {
    v46 = *(void **)(v45 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer);
    *(_QWORD *)(v45 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer) = 0;
    swift_release(v45);

  }
}

void sub_1000D02B8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[4];
  _BYTE v24[24];

  v2 = v1;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances, v24, 0, 0);
  v5 = *v4;
  swift_bridgeObjectRetain(*v4);
  v6 = sub_1000CEEA0(a1, v5);
  swift_bridgeObjectRelease(v5);
  if ((v6 & 1) != 0)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA320);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v23[0] = v12;
      *(_DWORD *)v11 = 136446210;
      LOBYTE(v22) = a1;
      v13 = String.init<A>(describing:)(&v22, &type metadata for CameraGuidance);
      v15 = v14;
      v22 = sub_1001A7FE4(v13, v14, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v11 + 4);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Dropping guidance: %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    swift_beginAccess(v4, v23, 33, 0);
    sub_1000D1A08(a1);
    swift_endAccess(v23);
  }
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer)
    && !*(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer))
  {
    v16 = *v4;
    swift_bridgeObjectRetain_n(*v4, 2);
    v17 = sub_1001C68F0(v16);
    swift_bridgeObjectRelease(v16);
    v23[0] = (uint64_t)v17;
    sub_1000D1080(v23);
    swift_bridgeObjectRelease(v16);
    v18 = *(_QWORD *)(v23[0] + 16);
    if (v18)
      v19 = *(_BYTE *)(v18 + v23[0] + 31);
    else
      v19 = 5;
    swift_release(v23[0]);
    KeyPath = swift_getKeyPath(&unk_1001EE0D0);
    v21 = swift_getKeyPath(&unk_1001EE0F8);
    LOBYTE(v23[0]) = v19;
    swift_retain(v2);
    static Published.subscript.setter(v23, v2, KeyPath, v21);
  }
}

void sub_1000D057C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char v14;
  _BYTE v15[24];

  v1 = OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer), "invalidate");
  v2 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  v3 = OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer), "invalidate");
  v4 = *(void **)(v0 + v3);
  *(_QWORD *)(v0 + v3) = 0;

  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances, v15, 1, 0);
  v6 = *v5;
  *v5 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v6);
  KeyPath = swift_getKeyPath(&unk_1001EE0D0);
  v8 = swift_getKeyPath(&unk_1001EE0F8);
  v14 = 5;
  swift_retain(v0);
  static Published.subscript.setter(&v14, v0, KeyPath, v8);
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA320);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Resetting all guidance", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

}

void sub_1000D070C(void *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t KeyPath;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t aBlock[5];
  uint64_t v38;
  _BYTE v39[24];

  objc_msgSend(a1, "invalidate");
  v3 = OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer;
  v4 = *(void **)(a2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer) = 0;

  v5 = (uint64_t *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances);
  swift_beginAccess(a2 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances, v39, 0, 0);
  v6 = *v5;
  swift_bridgeObjectRetain_n(v6, 2);
  v7 = sub_1001C68F0(v6);
  swift_bridgeObjectRelease(v6);
  aBlock[0] = (uint64_t)v7;
  sub_1000D1080(aBlock);
  swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(aBlock[0] + 16);
  if (v8)
    v9 = *(unsigned __int8 *)(v8 + aBlock[0] + 31);
  else
    v9 = 5;
  swift_release(aBlock[0]);
  KeyPath = swift_getKeyPath(&unk_1001EE0D0);
  v11 = swift_getKeyPath(&unk_1001EE0F8);
  static Published.subscript.getter(aBlock, a2, KeyPath);
  swift_release(KeyPath);
  swift_release(v11);
  if (LOBYTE(aBlock[0]) == 5)
  {
    if (v9 != 5)
      goto LABEL_13;
LABEL_9:
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10000F66C(v13, (uint64_t)qword_1002AA320);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Dwell timer fired, but guidance hasn't changed", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    goto LABEL_19;
  }
  if (v9 != 5)
  {
    sub_1001D5E38(aBlock[0]);
    if ((v12 & 1) != 0)
      goto LABEL_9;
  }
LABEL_13:
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10000F66C(v18, (uint64_t)qword_1002AA320);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    aBlock[0] = v23;
    *(_DWORD *)v22 = 136446210;
    LOBYTE(v36) = v9;
    v24 = sub_100006DF4((uint64_t *)&unk_1002910E0);
    v25 = String.init<A>(describing:)(&v36, v24);
    v27 = v26;
    v36 = sub_1001A7FE4(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, aBlock, v22 + 4);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Dwell timer fired and guidance should change; displaying new guidance: %{public}s",
      v22,
      0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  v28 = swift_getKeyPath(&unk_1001EE0D0);
  v29 = swift_getKeyPath(&unk_1001EE0F8);
  LOBYTE(aBlock[0]) = v9;
  swift_retain(a2);
  static Published.subscript.setter(aBlock, a2, v28, v29);
  v30 = swift_getKeyPath(&unk_1001EE0D0);
  v31 = swift_getKeyPath(&unk_1001EE0F8);
  static Published.subscript.getter(aBlock, a2, v30);
  swift_release(v30);
  swift_release(v31);
  if (LOBYTE(aBlock[0]) != 5)
  {
    v32 = (void *)objc_opt_self(NSTimer);
    aBlock[4] = (uint64_t)sub_1000D2070;
    v38 = a2;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100187FE4;
    aBlock[3] = (uint64_t)&unk_100269C18;
    v33 = _Block_copy(aBlock);
    v34 = v38;
    swift_retain(a2);
    swift_release(v34);
    v35 = objc_msgSend(v32, "scheduledTimerWithTimeInterval:repeats:block:", 0, v33, 2.0);
    _Block_release(v33);
    v15 = *(NSObject **)(a2 + v3);
    *(_QWORD *)(a2 + v3) = v35;
LABEL_19:

  }
}

uint64_t sub_1000D0B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances));
  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel__current;
  v4 = sub_100006DF4(&qword_100291230);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D0C40()
{
  return type metadata accessor for GuidanceModel(0);
}

uint64_t type metadata accessor for GuidanceModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002910C8;
  if (!qword_1002910C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GuidanceModel);
  return result;
}

void sub_1000D0C84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_1000D0D34(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = "\b";
      v6[6] = "\b";
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

void sub_1000D0D34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002910D8)
  {
    v2 = sub_1000070BC((uint64_t *)&unk_1002910E0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002910D8);
  }
}

uint64_t storeEnumTagSinglePayload for CameraGuidance(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000D0DD8 + 4 * byte_1001EDF25[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000D0E0C + 4 * byte_1001EDF20[v4]))();
}

uint64_t sub_1000D0E0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D0E14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D0E1CLL);
  return result;
}

uint64_t sub_1000D0E28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D0E30);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000D0E34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D0E3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraGuidance()
{
  return &type metadata for CameraGuidance;
}

unint64_t sub_1000D0E5C()
{
  unint64_t result;

  result = qword_100291228;
  if (!qword_100291228)
  {
    result = swift_getWitnessTable(&unk_1001EDFF0, &type metadata for CameraGuidance);
    atomic_store(result, (unint64_t *)&qword_100291228);
  }
  return result;
}

unint64_t sub_1000D0EA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290100;
  if (!qword_100290100)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, &qword_100290100);
  }
  return result;
}

uint64_t sub_1000D0EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v1 = sub_100006DF4(&qword_100291230);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v3);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delaySeconds) = 0x4008000000000000;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellSeconds) = 0x4000000000000000;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_guidances) = &_swiftEmptySetSingleton;
  v6 = v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel__current;
  v10 = 5;
  v7 = sub_100006DF4((uint64_t *)&unk_1002910E0);
  Published.init(initialValue:)(&v10, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v6, v5, v1);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_dwellTimer) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_delayTimer) = 0;
  return v0;
}

uint64_t sub_1000D0FFC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for GuidanceModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D1038@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC17SequoiaTranslator13GuidanceModel_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_1000D1080(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001DB5CC(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1000D10E8(v4);
  *a1 = v2;
}

void sub_1000D10E8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  char v19;
  Swift::Int v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  Swift::Int v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v80 = 0;
      v81 = *v2;
      v82 = 1;
      while (1)
      {
        v83 = *(_BYTE *)(v81 + v82);
        v84 = qword_1001EE120[v83];
        v85 = v80;
        do
        {
          v86 = *(char *)(v81 + v85);
          if (v84 >= qword_1001EE120[v86])
            break;
          if (!v81)
            goto LABEL_142;
          *(_BYTE *)(v81 + v85 + 1) = v86;
          *(_BYTE *)(v81 + v85--) = v83;
        }
        while (v85 != -1);
        ++v82;
        ++v80;
        if (v82 == v3)
          return;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v95 = v4;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for CameraGuidance);
    *(_QWORD *)(v7 + 16) = v6;
    v94 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v93 = v2;
  v10 = *v2;
  v11 = (char *)_swiftEmptyArrayStorage;
  v96 = v3;
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(char *)(v10 + v9);
      v15 = qword_1001EE120[v14];
      v16 = qword_1001EE120[*(char *)(v10 + v13)];
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        while (v15 < v16 != qword_1001EE120[*(char *)(v10 + v9)] >= qword_1001EE120[(char)v14])
        {
          LOBYTE(v14) = *(_BYTE *)(v10 + v9++);
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v9 < v13)
          goto LABEL_139;
        if (v13 < v9)
        {
          v17 = v9 - 1;
          v18 = v13;
          do
          {
            if (v18 != v17)
            {
              if (!v10)
                goto LABEL_145;
              v19 = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = *(_BYTE *)(v10 + v17);
              *(_BYTE *)(v10 + v17) = v19;
            }
            v59 = ++v18 < v17--;
          }
          while (v59);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_137;
      if (v9 - v13 < v95)
      {
        v20 = v13 + v95;
        if (__OFADD__(v13, v95))
          goto LABEL_140;
        if (v20 >= v3)
          v20 = v3;
        if (v20 < v13)
          goto LABEL_141;
        if (v9 != v20)
        {
          v21 = (_BYTE *)(v10 + v9);
          do
          {
            v22 = *(_BYTE *)(v10 + v9);
            v23 = qword_1001EE120[v22];
            v24 = v13;
            v25 = v21;
            do
            {
              v26 = (char)*(v25 - 1);
              if (v23 >= qword_1001EE120[v26])
                break;
              if (!v10)
                goto LABEL_143;
              *v25 = v26;
              *--v25 = v22;
              ++v24;
            }
            while (v9 != v24);
            ++v9;
            ++v21;
          }
          while (v9 != v20);
          v9 = v20;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001D9E38(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1001D9E38((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v2 = v93;
      v8 = v94;
LABEL_104:
      v79 = v11;
      v94 = v8;
      if (v12 < 2)
        goto LABEL_95;
      v87 = *v2;
      while (1)
      {
        v88 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v87)
          goto LABEL_146;
        v78 = v79;
        v89 = *(_QWORD *)&v79[16 * v88 + 32];
        v90 = *(_QWORD *)&v79[16 * v12 + 24];
        sub_1000D17A4((char *)(v87 + v89), (char *)(v87 + *(_QWORD *)&v79[16 * v12 + 16]), v87 + v90, __dst);
        if (v1)
          goto LABEL_94;
        if (v90 < v89)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_1001DA1D4((uint64_t)v78);
        if (v88 >= *((_QWORD *)v78 + 2))
          goto LABEL_135;
        v91 = &v78[16 * v88 + 32];
        *(_QWORD *)v91 = v89;
        *((_QWORD *)v91 + 1) = v90;
        v92 = *((_QWORD *)v78 + 2);
        if (v12 > v92)
          goto LABEL_136;
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        v79 = v78;
        *((_QWORD *)v78 + 2) = v92 - 1;
        v12 = v92 - 1;
        if (v92 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_121;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_122;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_124;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_127;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_131;
        v59 = v34 < v69;
        goto LABEL_83;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v11 + 4);
        v61 = *((_QWORD *)v11 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_77;
      }
      v33 = *((_QWORD *)v11 + 4);
      v32 = *((_QWORD *)v11 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_123;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_126;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_129;
    if (__OFADD__(v53, v58))
      goto LABEL_130;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_83:
      if (v59)
        v31 = v43;
      goto LABEL_85;
    }
LABEL_77:
    if ((v54 & 1) != 0)
      goto LABEL_125;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_128;
    if (v65 < v53)
      goto LABEL_15;
LABEL_85:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v10)
      goto LABEL_144;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    v75 = *((_QWORD *)v74 + 1);
    sub_1000D17A4((char *)(v10 + *(_QWORD *)v71), (char *)(v10 + *(_QWORD *)v74), v10 + v75, __dst);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_118;
    if (v31 > *((_QWORD *)v11 + 2))
      goto LABEL_119;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v11 + 2);
    if (v31 >= v76)
      goto LABEL_120;
    v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    v29 = v73;
    *((_QWORD *)v11 + 2) = v76 - 1;
    v10 = v97;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v78 = v11;
LABEL_94:
  v79 = v78;
LABEL_95:
  swift_bridgeObjectRelease(v79);
  v94[2] = 0;
  swift_bridgeObjectRelease(v94);
}

uint64_t sub_1000D17A4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  char *v20;
  char *v21;
  char *v22;

  v22 = __src;
  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a3 - (_QWORD)a2;
  v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (_QWORD)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst)
        memmove(__dst, a2, a3 - (_QWORD)a2);
      v14 = &v4[v9];
      v20 = &v4[v9];
      v22 = v6;
      if (v7 < v6 && (char *)a3 != v6)
      {
        v15 = (char *)(a3 - 1);
        while (1)
        {
          v16 = v6 - 1;
          v17 = *(v6 - 1);
          v18 = v15 + 1;
          if (qword_1001EE120[*(v14 - 1)] >= qword_1001EE120[v17])
          {
            v20 = v14 - 1;
            if (v18 < v14 || v15 >= v14 || v18 != v14)
              *v15 = *(v14 - 1);
            --v14;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v18 != v6 || v15 >= v6)
              *v15 = v17;
            v22 = --v6;
            if (v16 <= v7)
              goto LABEL_38;
          }
          --v15;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v10 = &v4[v8];
    v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        v11 = *v6;
        v12 = *v4;
        if (qword_1001EE120[v11] >= qword_1001EE120[v12])
        {
          if (v7 != v4)
            *v7 = v12;
          v21 = ++v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            *v7 = v11;
        }
        ++v7;
        if (v4 >= v10)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    sub_1001DA144((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1000D1A08(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(*(_QWORD *)v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_1000D1A74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  swift_bridgeObjectRetain(v0);
  String.hash(into:)(&v4, 0x74786554646E6966, v1);
  swift_bridgeObjectRelease(v1);
  v2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v0 + 32));
  if (((*(_QWORD *)(v0 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v0);
  return 5;
}

unint64_t sub_1000D1D6C(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
      Hasher.init(_seed:)(v12, *(_QWORD *)(v3 + 40));
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = __OFSUB__(v9, 1);
  v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1000D1FC8);
  }
  *(_QWORD *)(v3 + 16) = v11;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_1000D1FDC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002621E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1000D202C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D2050(void *a1)
{
  uint64_t v1;

  sub_1000CFD9C(a1, v1);
}

uint64_t sub_1000D2058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D2068(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000D2070(void *a1)
{
  uint64_t v1;

  sub_1000D070C(a1, v1);
}

uint64_t sub_1000D2090()
{
  char *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v1 = (uint64_t *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights];
  swift_beginAccess(&v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights], v24, 0, 0);
  v2 = *v1;
  if ((unint64_t)v2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v2, 2);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v23 = OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightAddsBlendMode;
    v22 = kCAFilterPlusD;
    v4 = 4;
    v21 = kCAFilterPlusL;
    while (1)
    {
      v5 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2)
         : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = v0[v23];
      v9 = objc_msgSend(v0, "traitCollection");
      v10 = objc_msgSend(v9, "userInterfaceStyle");

      if (v10 == (id)2)
        v11 = v21;
      else
        v11 = v22;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v13 = v12;
      v14 = objc_msgSend(v6, "layer");
      if (v8 == 1)
        v15 = String._bridgeToObjectiveC()();
      else
        v15 = 0;
      swift_bridgeObjectRelease(v13);
      objc_msgSend(v14, "setCompositingFilter:", v15);

      swift_unknownObjectRelease(v15);
      v16 = objc_msgSend(v6, "superview");
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend(v16, "layer");

        objc_msgSend(v18, "setAllowsGroupBlending:", v8 ^ 1u);
        if (v7 == v3)
          return swift_bridgeObjectRelease_n(v2, 2);
      }
      else
      {

        if (v7 == v3)
          return swift_bridgeObjectRelease_n(v2, 2);
      }
      ++v4;
    }
    __break(1u);
LABEL_20:
    if (v2 < 0)
      v19 = v2;
    else
      v19 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v2, 2);
  }
  return swift_bridgeObjectRelease_n(v2, 2);
}

id sub_1000D22E0(void *a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  char *v11;
  _QWORD *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[5];
  uint64_t v34;
  objc_super v35;

  v11 = &v5[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightDelegate];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges] = _swiftEmptyArrayStorage;
  v12 = &v5[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightColor] = 0;
  v5[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightAddsBlendMode] = 0;
  v35.receiver = v5;
  v35.super_class = (Class)type metadata accessor for HighlightTextView();
  v13 = objc_msgSendSuper2(&v35, "initWithFrame:textContainer:", a1, a2, a3, a4, a5);
  v14 = (void *)objc_opt_self(UIColor);
  v15 = v13;
  v16 = objc_msgSend(v14, "clearColor");
  objc_msgSend(v15, "setBackgroundColor:", v16);

  v17 = objc_msgSend(v15, "textLayoutManager");
  if (v17)
  {
    v18 = v17;
    v19 = _UITextViewportLayoutControllerDidLayoutNotification;
    v20 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v21 = objc_msgSend(v18, "textViewportLayoutController");
    v22 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
    v23 = swift_allocObject(&unk_100269D40, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16, v15);
    v33[4] = sub_1000D3CE0;
    v34 = v23;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 1107296256;
    v33[2] = sub_10014BC70;
    v33[3] = &unk_100269D58;
    v24 = _Block_copy(v33);
    swift_release(v34);
    v25 = objc_msgSend(v20, "addObserverForName:object:queue:usingBlock:", v19, v21, v22, v24);
    _Block_release(v24);

    swift_unknownObjectRelease(v25);
  }
  v26 = sub_100006DF4(&qword_10028FE40);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v27 + 32) = type metadata accessor for UITraitUserInterfaceStyle(0);
  *(_QWORD *)(v27 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  v28 = swift_allocObject(&unk_100269D40, 24, 7);
  swift_unknownObjectWeakInit(v28 + 16, v15);
  v29 = v15;
  v30 = sub_100006DF4(&qword_10028FE48);
  v31 = UIView.registerForTraitChanges<A>(_:handler:)(v27, sub_1000D3CD8, v28, v30);
  swift_unknownObjectRelease(v31);
  swift_bridgeObjectRelease(v27);
  swift_release(v28);

  return v29;
}

void sub_1000D261C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    HighlightTextView.updateHighlightsForNewTextLayoutIfNeeded()();

  }
}

void sub_1000D266C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  unsigned __int8 *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  int v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (unsigned __int8 *)Strong;
    v6 = (uint64_t *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights);
    swift_beginAccess(Strong + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights, v28, 0, 0);
    v7 = *v6;
    if ((unint64_t)*v6 >> 62)
      goto LABEL_21;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*v6, 2);
    for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v24))
    {
      v27 = OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightAddsBlendMode;
      v26 = kCAFilterPlusD;
      v9 = 4;
      v25 = kCAFilterPlusL;
      while (1)
      {
        v10 = (v7 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7)
            : *(id *)(v7 + 8 * v9);
        v11 = v10;
        if (__OFADD__(v9 - 4, 1))
          break;
        v12 = v8;
        v13 = v5[v27];
        v14 = objc_msgSend(v5, "traitCollection");
        v15 = objc_msgSend(v14, "userInterfaceStyle");

        if (v15 == (id)2)
          v16 = v25;
        else
          v16 = v26;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v18 = v17;
        v19 = objc_msgSend(v11, "layer");
        if (v13 == 1)
          v20 = String._bridgeToObjectiveC()();
        else
          v20 = 0;
        swift_bridgeObjectRelease(v18);
        objc_msgSend(v19, "setCompositingFilter:", v20);

        swift_unknownObjectRelease(v20);
        v21 = objc_msgSend(v11, "superview");
        if (v21)
        {
          v22 = v21;
          v23 = objc_msgSend(v21, "layer");

          objc_msgSend(v23, "setAllowsGroupBlending:", v13 ^ 1u);
        }
        else
        {

        }
        v8 = v12;
        if (v9 - 3 == v12)
          goto LABEL_25;
        ++v9;
      }
      __break(1u);
LABEL_21:
      if (v7 < 0)
        v24 = v7;
      else
        v24 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v7, 2);
    }
LABEL_25:
    swift_bridgeObjectRelease_n(v7, 2);

  }
}

id TranslateCalloutDisabledTextView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

Swift::Void __swiftcall HighlightTextView.setHighlights(toRange:)(__C::_NSRange_optional toRange)
{
  char *v1;
  Swift::Bool is_nil;
  Swift::Int length;
  Swift::Int location;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  NSString *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  NSRange v41;

  is_nil = toRange.is_nil;
  length = toRange.value.length;
  location = toRange.value.location;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  HighlightTextView.removeHighlights()();
  if (!is_nil && length >= 1)
  {
    v9 = HighlightTextView.convertToTextRange(_:)(location, length);
    if (v9)
    {
      v10 = v9;
      HighlightTextView.addHighlight(to:)(v9);
      v11 = objc_msgSend(v1, "textInRange:", v10);
      if (v11)
      {
        v12 = v11;
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v15 = v14;

      }
      else
      {
        v13 = 0;
        v15 = 0;
      }
      v33 = (uint64_t *)&v1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
      v34 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8];
      *v33 = v13;
      v33[1] = v15;

      swift_bridgeObjectRelease(v34);
    }
    else
    {
      if (qword_10028A478 != -1)
        swift_once(&qword_10028A478, sub_100121100);
      v16 = sub_10000F66C(v5, (uint64_t)qword_1002AA470);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v16, v5);
      v17 = v1;
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, (os_log_type_t)v19))
      {
        v37 = v19;
        v38 = v18;
        v20 = swift_slowAlloc(22, -1);
        v36 = swift_slowAlloc(32, -1);
        v40 = v36;
        *(_DWORD *)v20 = 136446466;
        v41.location = location;
        v41.length = length;
        v21 = NSStringFromRange(v41);
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        v39 = sub_1001A7FE4(v22, v24, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v20 + 4);
        *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
        *(_WORD *)(v20 + 12) = 2050;
        v26 = -[NSObject text](v17, "text", v25);
        if (!v26)
        {

          __break(1u);
          return;
        }
        v27 = v26;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v30 = v29;

        v31 = String.count.getter(v28, v30);
        swift_bridgeObjectRelease(v30);
        v39 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v20 + 14);

        v17 = v38;
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v37, "Unable to find valid text range for NSRange %{public}s in text view of length %{public}ld, not highlighting any range", (uint8_t *)v20, 0x16u);
        v32 = v36;
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v20, -1, -1);
      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

id sub_1000D2CF0(CGFloat a1, CGFloat a2)
{
  void *v2;
  id v5;
  void *v6;
  id v7;
  id v8;
  BOOL v9;
  CGPoint v11;
  CGRect v12;

  v5 = objc_msgSend(v2, "closestPositionToPoint:");
  if (!v5)
    return 0;
  v6 = v5;
  v7 = objc_msgSend(v2, "tokenizer");
  v8 = objc_msgSend(v7, "rangeEnclosingPosition:withGranularity:inDirection:", v6, 1, 1);
  swift_unknownObjectRelease(v7);
  if (!v8
    || (objc_msgSend(v2, "firstRectForRange:", v8),
        v11.x = a1,
        v11.y = a2,
        v9 = CGRectContainsPoint(v12, v11),
        v6,
        v6 = v8,
        !v9))
  {

    return 0;
  }
  return v8;
}

void HighlightTextView.addHighlight(to:)(void *a1)
{
  char *v1;
  char *v2;
  double v4;
  double x;
  double y;
  double width;
  double height;
  id v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  int v24;
  id v25;
  void *v26;
  char **v27;
  char *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t Strong;
  char *v39;
  void *v40;
  char *v41;
  double *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  _BYTE v51[24];
  CGRect v52;
  CGRect v53;

  v2 = v1;
  objc_msgSend(v1, "firstRectForRange:", a1);
  v4 = 0.0;
  v53 = CGRectInset(v52, -4.0, 0.0);
  x = v53.origin.x;
  y = v53.origin.y;
  width = v53.size.width;
  height = v53.size.height;
  v9 = objc_msgSend(v1, "superview");
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  if (v9)
  {
    v13 = v9;
    objc_msgSend(v9, "convertRect:fromCoordinateSpace:", v2, x, y, width, height);
    v11 = v14;
    v12 = v15;
    v4 = v16;
    v10 = v17;

  }
  v18 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", v11, v12, v4, v10);
  v19 = objc_msgSend(v18, "layer");
  objc_msgSend(v19, "setCornerRadius:", 5.0);

  v20 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightColor];
  if (v20)
  {
    v21 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightColor];
  }
  else
  {
    sub_100048C48();
    v21 = (void *)static UIColor.dictionaryHighlightColor.getter();
    v20 = 0;
  }
  v22 = v20;
  objc_msgSend(v18, "setBackgroundColor:", v21);

  v23 = OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightAddsBlendMode;
  v24 = v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightAddsBlendMode];
  v25 = objc_msgSend(v2, "superview");
  v26 = v25;
  v27 = &selRef_insertSubview_aboveSubview_;
  if (!v24)
    v27 = &selRef_insertSubview_belowSubview_;
  objc_msgSend(v25, *v27, v18, v2);

  if (v2[v23] == 1)
    HighlightTextView.setBlendMode(_:on:)(1, v18);
  v28 = &v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights];
  swift_beginAccess(&v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights], v51, 33, 0);
  v29 = v18;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v31 = *(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v30 = *(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v31 >= v30 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
  v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
  specialized Array._endMutation()(v32);
  swift_endAccess(v51);
  v33 = &v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges];
  swift_beginAccess(&v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges], v51, 33, 0);
  v34 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v36 = *(_QWORD *)((*(_QWORD *)v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v35 = *(_QWORD *)((*(_QWORD *)v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v36 >= v35 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
  v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
  specialized Array._endMutation()(v37);
  swift_endAccess(v51);
  Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightDelegate]);
  if (Strong)
  {
    v39 = (char *)Strong;
    v40 = *(void **)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryTextView);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryTextView) = v2;
    v41 = v2;

    v42 = (double *)&v39[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryHighlightRect];
    *v42 = v11;
    v42[1] = v12;
    v42[2] = v4;
    v42[3] = v10;
    *((_BYTE *)v42 + 32) = 0;
    v43 = objc_msgSend(v39, "presentedViewController");
    if (v43)
    {
      v44 = v43;
      v45 = objc_msgSend(v43, "popoverPresentationController");

      if (v45)
      {
        objc_msgSend(v45, "setSourceView:", v41);

      }
    }
    v46 = objc_msgSend(v39, "presentedViewController");
    v47 = objc_msgSend(v46, "popoverPresentationController");

    objc_msgSend(v47, "setSourceRect:", v11, v12, v4, v10);
    v48 = objc_msgSend(v39, "presentedViewController");
    if (v48
      && (v49 = v48,
          v50 = objc_msgSend(v48, "popoverPresentationController"),
          v49,
          v50))
    {
      objc_msgSend(v50, "setPermittedArrowDirections:", 3);

      swift_unknownObjectRelease(v39);
    }
    else
    {

      swift_unknownObjectRelease(v39);
    }
  }
  else
  {

  }
}

Swift::Void __swiftcall HighlightTextView.removeHighlights()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights, v14, 1, 0);
  v2 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*v1, 2);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease_n(v2, 2);
    v8 = *v1;
    *v1 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v8);
    v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges);
    swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges, &v13, 1, 0);
    v10 = *v9;
    *v9 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v10);
    v11 = (_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord);
    v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8);
    *v11 = 0;
    v11[1] = 0;
    swift_bridgeObjectRelease(v12);
    return;
  }
  if (v2 < 0)
    v7 = *v1;
  else
    v7 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(*v1, 2);
  v3 = _CocoaArrayWrapper.endIndex.getter(v7);
  if (!v3)
    goto LABEL_13;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      objc_msgSend(v5, "removeFromSuperview");

    }
    goto LABEL_13;
  }
  __break(1u);
}

void HighlightTextView.setBlendMode(_:on:)(char a1, void *a2)
{
  void *v2;
  void *v3;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  void *v14;
  id v15;

  v3 = v2;
  v6 = objc_msgSend(v3, "traitCollection");
  v7 = objc_msgSend(v6, "userInterfaceStyle");

  v8 = &kCAFilterPlusL;
  if (v7 != (id)2)
    v8 = &kCAFilterPlusD;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v8);
  v10 = v9;
  v11 = objc_msgSend(a2, "layer");
  if ((a1 & 1) != 0)
    v12 = String._bridgeToObjectiveC()();
  else
    v12 = 0;
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v11, "setCompositingFilter:", v12);

  swift_unknownObjectRelease(v12);
  v13 = objc_msgSend(a2, "superview");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "layer");

    objc_msgSend(v15, "setAllowsGroupBlending:", (a1 & 1) == 0);
  }
}

void HighlightTextView.updateHighlightsForNewTextLayoutIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = v0;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightDelegate);
  if (Strong)
  {
    v3 = Strong;
    v4 = sub_1001BD250();
    swift_unknownObjectRelease(v3);
    if ((v4 & 1) != 0)
    {
      v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges);
      swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges, v15, 0, 0);
      v6 = *v5;
      if (!((unint64_t)*v5 >> 62))
      {
        if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
          return;
LABEL_5:
        v7 = *v5;
        swift_bridgeObjectRetain(*v5);
        HighlightTextView.removeHighlights()();
        if ((unint64_t)v7 >> 62)
        {
          if (v7 < 0)
            v14 = v7;
          else
            v14 = v7 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v7);
          v8 = _CocoaArrayWrapper.endIndex.getter(v14);
          if (v8)
            goto LABEL_7;
        }
        else
        {
          v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v7);
          if (v8)
          {
LABEL_7:
            if (v8 < 1)
            {
              __break(1u);
              return;
            }
            for (i = 0; i != v8; ++i)
            {
              if ((v7 & 0xC000000000000001) != 0)
                v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
              else
                v10 = *(id *)(v7 + 8 * i + 32);
              v11 = v10;
              HighlightTextView.addHighlight(to:)(v10);

            }
          }
        }
        swift_bridgeObjectRelease_n(v7, 2);
        return;
      }
      if (v6 < 0)
        v12 = *v5;
      else
        v12 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v5);
      v13 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v6);
      if (v13)
        goto LABEL_5;
    }
  }
}

void HighlightTextView.currentHightlightFrame()(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double x;
  double y;
  double width;
  double height;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  uint64_t v33;
  char v34[24];
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v3 = (uint64_t *)&v1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights];
  swift_beginAccess(&v1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights], v34, 0, 0);
  v4 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
    if (v4 < 0)
      v33 = *v3;
    else
      v33 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v33);
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
  }
  v6 = 0;
  x = 0.0;
  y = 0.0;
  width = 0.0;
  height = 0.0;
  if (v5)
  {
    if (v5 < 1)
    {
      __break(1u);
      goto LABEL_23;
    }
    if ((v4 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    else
      v11 = *(id *)(v4 + 32);
    v12 = v11;
    objc_msgSend(v11, "frame");
    x = v13;
    y = v14;
    width = v15;
    height = v16;

    if (v5 != 1)
    {
      v26 = 0;
      do
      {
        if ((v4 & 0xC000000000000001) != 0)
          v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26 + 1, v4);
        else
          v27 = *(id *)(v4 + 8 * v26 + 40);
        v28 = v27;
        objc_msgSend(v27, "frame");
        v37.origin.x = v29;
        v37.origin.y = v30;
        v37.size.width = v31;
        v37.size.height = v32;
        v35.origin.x = x;
        v35.origin.y = y;
        v35.size.width = width;
        v35.size.height = height;
        v36 = CGRectUnion(v35, v37);
        x = v36.origin.x;
        y = v36.origin.y;
        width = v36.size.width;
        height = v36.size.height;

        ++v26;
      }
      while (v5 - 1 != v26);
    }
  }
  swift_bridgeObjectRelease(v4);
  v17 = objc_msgSend(v1, "superview");
  v18 = v17;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  if (!v17)
  {
LABEL_12:
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v19;
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(a1 + 24) = v21;
    *(_BYTE *)(a1 + 32) = v18 == 0;
    return;
  }
  if (v5)
  {
    objc_msgSend(v17, "convertRect:toCoordinateSpace:", v1, x, y, width, height);
    v6 = v22;
    v19 = v23;
    v20 = v24;
    v21 = v25;

    goto LABEL_12;
  }
LABEL_23:
  __break(1u);
}

uint64_t HighlightTextView.getWordAtPoint(_:)(CGFloat a1, CGFloat a2)
{
  void *v2;
  id v5;
  id v6;
  id v7;
  BOOL v8;
  id v9;
  void *v10;
  uint64_t v11;
  CGPoint v13;
  CGRect v14;

  v5 = objc_msgSend(v2, "closestPositionToPoint:");
  if (!v5)
    return 0;
  v6 = objc_msgSend(v2, "tokenizer");
  v7 = objc_msgSend(v6, "rangeEnclosingPosition:withGranularity:inDirection:", v5, 1, 1);
  swift_unknownObjectRelease(v6);
  if (!v7)
  {

    return 0;
  }
  objc_msgSend(v2, "firstRectForRange:", v7);
  v13.x = a1;
  v13.y = a2;
  v8 = CGRectContainsPoint(v14, v13);

  if (!v8 || (v9 = objc_msgSend(v2, "textInRange:", v7)) == 0)
  {

    return 0;
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);

  return v11;
}

void sub_1000D39B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  id v6;
  void *v7;

  if (!*a5)
  {
    v6 = HighlightTextView.convertToTextRange(_:)(a2, a3);
    v7 = *a5;
    *a5 = v6;

  }
}

id HighlightTextView.convertToTextRange(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v5 = objc_msgSend(v2, "beginningOfDocument");
  v6 = objc_msgSend(v2, "positionFromPosition:offset:", v5, a1);
  if (!v6)
    goto LABEL_5;
  v7 = v6;
  v8 = objc_msgSend(v2, "positionFromPosition:offset:", v6, a2);
  if (!v8)
  {

LABEL_5:
    return 0;
  }
  v9 = v8;
  v10 = objc_msgSend(v2, "textRangeFromPosition:toPosition:", v7, v8);

  return v10;
}

void sub_1000D3ADC()
{
  uint64_t v0;

  sub_100011194(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightDelegate);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord + 8));

}

id HighlightTextView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HighlightTextView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void _s17SequoiaTranslator17HighlightTextViewC5coderACSgSo7NSCoderC_tcfc_0()
{
  _BYTE *v0;
  _QWORD *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightRanges] = _swiftEmptyArrayStorage;
  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightedWord];
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightColor] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightAddsBlendMode] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/HighlightTextView.swift", 41, 2, 81, 0);
  __break(1u);
}

uint64_t type metadata accessor for HighlightTextView()
{
  return objc_opt_self(_TtC17SequoiaTranslator17HighlightTextView);
}

uint64_t sub_1000D3CB4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D3CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000D266C(a1, a2, v2);
}

void sub_1000D3CE0(uint64_t a1)
{
  uint64_t v1;

  sub_1000D261C(a1, v1);
}

uint64_t sub_1000D3CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D3CF8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000D3D18()
{
  return sub_100085B40(type metadata accessor for HitPassthroughView);
}

uint64_t type metadata accessor for HitPassthroughView()
{
  return objc_opt_self(_TtC17SequoiaTranslator18HitPassthroughView);
}

id sub_1000D3E60(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t (*a7)(void))
{
  objc_super v12;

  v12.receiver = a1;
  v12.super_class = (Class)a7();
  return objc_msgSendSuper2(&v12, "initWithFrame:", a2, a3, a4, a5);
}

id sub_1000D3ED8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  objc_super v6;

  v6.receiver = a1;
  v6.super_class = (Class)a4();
  return objc_msgSendSuper2(&v6, "initWithCoder:", a3);
}

id sub_1000D3F1C()
{
  return sub_100085B40(type metadata accessor for HitPassthroughWindow);
}

uint64_t type metadata accessor for HitPassthroughWindow()
{
  return objc_opt_self(_TtC17SequoiaTranslator20HitPassthroughWindow);
}

uint64_t sub_1000D3F48()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v0 = sub_100006DF4(&qword_100291440);
  __chkstk_darwin(v0);
  v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PHPickerConfiguration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v26 - v8;
  v10 = objc_msgSend((id)objc_opt_self(PHPhotoLibrary), "sharedPhotoLibrary");
  PHPickerConfiguration.init(photoLibrary:)(v10);
  PHPickerConfiguration.selectionLimit.setter(1);
  v11 = sub_100006DF4(&qword_100291448);
  v12 = type metadata accessor for PHPickerFilter(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = swift_allocObject(v11, ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72), *(unsigned __int8 *)(v13 + 80) | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001E64F0;
  static PHPickerFilter.images.getter();
  static PHPickerFilter.any(of:)(v14);
  v15 = swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v13 + 56))(v2, 0, 1, v12, v15);
  PHPickerConfiguration.filter.setter(v2);
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA320);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Presenting image picker to the user", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  sub_1000D6B04();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v21 = PHPickerViewController.init(configuration:)(v7);
  v22 = sub_100006DF4(&qword_100291458);
  UIViewControllerRepresentableContext.coordinator.getter(&v27, v22);
  v23 = v27;
  v24 = sub_100007D5C(&qword_100291460, type metadata accessor for ImagePicker.Coordinator, (uint64_t)&unk_1001EE2D0);
  PHPickerViewController.delegate.setter(v23, v24);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return v21;
}

uint64_t sub_1000D4210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;

  v0 = type metadata accessor for DismissAction(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA320);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Dismissing photo picker", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_1000D56B4(&qword_10028AD78, (uint64_t (*)(_QWORD))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, v3);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_1000D4388(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v19;
  Class isa;
  id v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  NSObject *oslog;
  uint64_t v42;
  _BYTE v43[8];
  __int128 v44;
  uint64_t v45;
  char v46;

  if (a3)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v5 = type metadata accessor for Logger(0);
    sub_10000F66C(v5, (uint64_t)qword_1002AA320);
    swift_errorRetain(a3);
    v6 = swift_errorRetain(a3);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      swift_errorRetain(a3);
      v10 = _swift_stdlib_bridgeErrorToNSError(a3);
      *(_QWORD *)&v44 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v8 + 4);
      *v9 = v10;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Representation failed to load with error: %@", v8, 0xCu);
      v11 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      return;
    }
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    goto LABEL_12;
  }
  if (a2 >> 60 == 15)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10000F66C(v13, (uint64_t)qword_1002AA320);
    oslog = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "No image data provided, with no accompanying error.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    goto LABEL_12;
  }
  v19 = objc_allocWithZone((Class)UIImage);
  sub_1000D69D4(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v21 = objc_msgSend(v19, "initWithData:", isa);

  if (!v21)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v33 = type metadata accessor for Logger(0);
    sub_10000F66C(v33, (uint64_t)qword_1002AA320);
    sub_1000D6A18(a1, a2);
    v34 = sub_1000D69D4(a1, a2);
    oslog = Logger.logObject.getter(v34);
    v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v35))
    {
      sub_1000D6A2C(a1, a2);
      sub_1000D6A2C(a1, a2);
      sub_1000D6A40(a1, a2);
LABEL_12:

      return;
    }
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v44 = v37;
    *(_DWORD *)v36 = 136315138;
    sub_1000D69D4(a1, a2);
    v38 = Data.description.getter(a1, a2);
    v40 = v39;
    sub_1000D6A2C(a1, a2);
    v42 = sub_1001A7FE4(v38, v40, (uint64_t *)&v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v36 + 4);
    swift_bridgeObjectRelease(v40);
    sub_1000D6A2C(a1, a2);
    sub_1000D6A2C(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v35, "Unable to coerce data into an instance of UIImage (using UIImage(data:%s)", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    goto LABEL_22;
  }
  v22 = a4 + OBJC_IVAR____TtCV17SequoiaTranslator11ImagePicker11Coordinator_parent;
  v23 = (__int128 *)(v22 + *(int *)(type metadata accessor for ImagePicker(0) + 20));
  v24 = *v23;
  v25 = *((_QWORD *)v23 + 2);
  LOBYTE(v23) = *((_BYTE *)v23 + 24);
  v44 = v24;
  v45 = v25;
  v46 = (char)v23;
  v42 = (uint64_t)v21;
  v43[0] = 0;
  v26 = v21;
  v27 = sub_100006DF4(&qword_100291428);
  Binding.wrappedValue.setter(&v42, v27);
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10000F66C(v28, (uint64_t)qword_1002AA320);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Successfully picked image, dismissing photo picker", v32, 2u);
    swift_slowDealloc(v32, -1, -1);

LABEL_22:
    sub_1000D6A2C(a1, a2);
    return;
  }
  sub_1000D6A2C(a1, a2);

}

id sub_1000D4988()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImagePicker.Coordinator(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000D49CC()
{
  return type metadata accessor for ImagePicker.Coordinator(0);
}

uint64_t type metadata accessor for ImagePicker.Coordinator(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100291368, (uint64_t)&nominal type descriptor for ImagePicker.Coordinator);
}

uint64_t sub_1000D49E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ImagePicker(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ImagePicker(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_1002913E0, (uint64_t)&nominal type descriptor for ImagePicker);
}

uint64_t *sub_1000D4A68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  void *v21;
  id v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028AD78);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v18;
    v19 = v16 + 16;
    v20 = v16[24];
    swift_retain(v17);
    swift_retain(v18);
    if (v20 == 255)
    {
      *((_QWORD *)v15 + 2) = *(_QWORD *)v19;
      v15[24] = v19[8];
    }
    else
    {
      v21 = *(void **)v19;
      *((_QWORD *)v15 + 2) = *(_QWORD *)v19;
      v15[24] = v20;
      v22 = v21;
    }
  }
  return a1;
}

void sub_1000D4B94(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v4 = sub_100006DF4(&qword_10028AD78);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  swift_release(*(_QWORD *)v6);
  swift_release(*((_QWORD *)v6 + 1));
  if (v6[24] != 255)

}

uint64_t *sub_1000D4C30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  void *v19;
  id v20;

  v6 = sub_100006DF4(&qword_10028AD78);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v16;
  v17 = v14 + 16;
  v18 = v14[24];
  swift_retain(v15);
  swift_retain(v16);
  if (v18 == 255)
  {
    *((_QWORD *)v13 + 2) = *(_QWORD *)v17;
    v13[24] = v17[8];
  }
  else
  {
    v19 = *(void **)v17;
    *((_QWORD *)v13 + 2) = *(_QWORD *)v17;
    v13[24] = v18;
    v20 = v19;
  }
  return a1;
}

uint64_t *sub_1000D4D30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void **v20;
  int v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  char v27;
  void *v28;

  if (a1 != a2)
  {
    sub_1000D4EA8((uint64_t)a1);
    v6 = sub_100006DF4(&qword_10028AD78);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t *)((char *)a1 + v12);
  v16 = *(_QWORD *)v14;
  *(uint64_t *)((char *)a1 + v12) = *(_QWORD *)v14;
  swift_retain(v16);
  swift_release(v15);
  v17 = *((_QWORD *)v14 + 1);
  v18 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = (void **)(v13 + 16);
  v20 = (void **)(v14 + 16);
  v21 = v14[24];
  if (v13[24] == 255)
  {
    if (v21 == 255)
    {
      v28 = *v20;
      v13[24] = v14[24];
      *v19 = v28;
    }
    else
    {
      v25 = *v20;
      *((_QWORD *)v13 + 2) = *v20;
      v13[24] = v21;
      v26 = v25;
    }
  }
  else if (v21 == 255)
  {
    sub_1000D4EE8((id *)v13 + 2);
    v27 = v14[24];
    *v19 = *v20;
    v13[24] = v27;
  }
  else
  {
    v22 = *v20;
    v23 = (void *)*((_QWORD *)v13 + 2);
    *((_QWORD *)v13 + 2) = *v20;
    v13[24] = v21;
    v24 = v22;

  }
  return a1;
}

uint64_t sub_1000D4EA8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_10028AD78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id *sub_1000D4EE8(id *a1)
{
  destroy for StaticImage(a1);
  return a1;
}

char *sub_1000D4F1C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = sub_100006DF4(&qword_10028AD78);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 9) = *(_OWORD *)(v10 + 9);
  return a1;
}

char *sub_1000D4FD4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  void *v15;

  if (a1 != a2)
  {
    sub_1000D4EA8((uint64_t)a1);
    v6 = sub_100006DF4(&qword_10028AD78);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v11);
  v12 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v12);
  v13 = v10 + 16;
  if (v9[24] == 255)
    goto LABEL_9;
  v14 = v10[24];
  if (v14 == 255)
  {
    sub_1000D4EE8((id *)v9 + 2);
LABEL_9:
    *((_QWORD *)v9 + 2) = *v13;
    v9[24] = v10[24];
    return a1;
  }
  v15 = (void *)*((_QWORD *)v9 + 2);
  *((_QWORD *)v9 + 2) = *v13;
  v9[24] = v14;

  return a1;
}

uint64_t sub_1000D5104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D5110);
}

uint64_t sub_1000D5110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100006DF4(&qword_100291380);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000D5194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D51A0);
}

uint64_t sub_1000D51A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_100291380);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_1000D5220(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100013F90(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1001EE1F0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1000D5290(uint64_t a1, uint64_t a2)
{
  return sub_1000D6684(a2);
}

uint64_t sub_1000D5298()
{
  return sub_1000D3F48();
}

uint64_t sub_1000D52AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  id v7;
  id v8;
  uint64_t result;
  objc_super v10;

  __chkstk_darwin(a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D6A84(v2, (uint64_t)v5);
  v6 = (objc_class *)type metadata accessor for ImagePicker.Coordinator(0);
  v7 = objc_allocWithZone(v6);
  sub_1000D6A84((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtCV17SequoiaTranslator11ImagePicker11Coordinator_parent);
  v10.receiver = v7;
  v10.super_class = v6;
  v8 = objc_msgSendSuper2(&v10, "init");
  result = sub_1000D6AC8((uint64_t)v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1000D535C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C(&qword_100291468, type metadata accessor for ImagePicker, (uint64_t)&unk_1001EE258);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000D53C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C(&qword_100291468, type metadata accessor for ImagePicker, (uint64_t)&unk_1001EE258);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000D542C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_100291468, type metadata accessor for ImagePicker, (uint64_t)&unk_1001EE258);
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_1000D5468()
{
  return sub_100007D5C(&qword_100291420, type metadata accessor for ImagePicker, (uint64_t)&unk_1001EE208);
}

uint64_t sub_1000D5494@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000D56B4(&qword_10028AD78, (uint64_t (*)(_QWORD))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_1000D54C8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1001A7FE4(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_10001F470(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_1000D5680@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000D56B4((uint64_t *)&unk_1002914A0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_1000D56B4@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000B074(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v28 = a4;
      v23 = swift_slowAlloc(12, -1);
      v29 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v32 = v25;
      *(_DWORD *)v24 = 136315138;
      v31 = sub_1001A7FE4(v30, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v24 + 4);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      v26 = v24;
      a5 = v29;
      swift_slowDealloc(v26, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1000D58EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000B074(v2, (uint64_t)v10, (uint64_t *)&unk_100291470);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return sub_1000D6B40((uint64_t)v10, (uint64_t)a1);
  v13 = *v10;
  v14 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
  v15 = static Log.runtimeIssuesLog.getter();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v22 = a1;
    v19 = v18;
    v24 = v18;
    *(_DWORD *)v17 = 136315138;
    v23 = sub_1001A7FE4(0xD000000000000020, 0x80000001001FCA80, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v17 + 4);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a1 = v22;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(a1, v7, v13);
  swift_release(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000D5B14@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000D56B4(&qword_1002969A0, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_1000D5B48@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000D56B4(&qword_10028F368, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, 0x616850656E656353, 0xEA00000000006573, a1);
}

uint64_t sub_1000D5B74(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1);
  }
  else
  {
    swift_retain(a1);
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_1001A7FE4(0xD00000000000001ELL, 0x80000001001FCB10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v16, v7, a1);
    sub_1000D6B88(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  return a1;
}

double sub_1000D5D3C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1001A7FE4(0x656C62756F44, 0xE600000000000000, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_10001F470(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_1000D5EF8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v17 = v13;
      *(_DWORD *)v12 = 136315138;
      v16 = sub_1001A7FE4(0xD000000000000020, 0x80000001001FCB30, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v17, v7, a1);
    v14 = j__swift_release(a1);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v14);
    return v17;
  }
  return a1;
}

uint64_t sub_1000D60B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000D56B4(&qword_100291490, (uint64_t (*)(_QWORD))&type metadata accessor for Locale.Language, 0x65676175676E614CLL, 0xE800000000000000, a1);
}

uint64_t sub_1000D60E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000D56B4((uint64_t *)&unk_100291480, (uint64_t (*)(_QWORD))&type metadata accessor for OpenURLAction, 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_1000D6114(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v17 = v13;
      *(_DWORD *)v12 = 136315138;
      v16 = sub_1001A7FE4(0xD000000000000015, 0x80000001001FCAD0, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v17, v7, a1);
    v14 = swift_release(a1);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v14);
    return v17;
  }
  return a1;
}

uint64_t sub_1000D62D0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1001A7FE4(0xD000000000000019, 0x80000001001FCAF0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_10001F470(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_1000D6494@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000D56B4(&qword_100291498, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

double sub_1000D64C4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1001A7FE4(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_10001F470(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_1000D6684(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  Class isa;
  void (*v10)(char *, uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for UTType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for PHPickerResult(0);
    v8 = (void *)PHPickerResult.itemProvider.getter();
    ((void (*)(void))static UTType.image.getter)();
    isa = UTType._bridgeToObjectiveC()().super.isa;
    v10 = *(void (**)(char *, uint64_t))(v5 + 8);
    v10(v7, v4);
    v11 = objc_msgSend(v8, "registeredContentTypesConformingToContentType:", isa);

    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v4);
    v13 = *(_QWORD *)(v12 + 16);
    v14 = swift_bridgeObjectRelease(v12);
    if (v13)
    {
      static UTType.image.getter(v14);
      v15 = swift_allocObject(&unk_100269D90, 24, 7);
      *(_QWORD *)(v15 + 16) = v2;
      v16 = v2;
      v17 = (void *)NSItemProvider.loadDataRepresentation(for:completionHandler:)(v7, sub_1000D69CC, v15);

      swift_release(v15);
      v10(v7, v4);
    }
    else
    {
      if (qword_10028A408 != -1)
        swift_once(&qword_10028A408, sub_100120F04);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_10000F66C(v23, (uint64_t)qword_1002AA320);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to load image; item provider has no images",
          v27,
          2u);
        swift_slowDealloc(v27, -1, -1);
      }

    }
  }
  else
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v18 = type metadata accessor for Logger(0);
    sub_10000F66C(v18, (uint64_t)qword_1002AA320);
    swift_bridgeObjectRetain(a1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v30 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4);
      swift_bridgeObjectRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Can't load itemProvider from %ld results; the user likely cancelled the picker",
        v22,
        0xCu);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(a1);
    }
  }
  return sub_1000D4210();
}

uint64_t sub_1000D69A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D69CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000D4388(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000D69D4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000D6A18(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000D69D4(result, a2);
  return result;
}

uint64_t sub_1000D6A2C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000D6A40(result, a2);
  return result;
}

uint64_t sub_1000D6A40(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000D6A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImagePicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6AC8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ImagePicker(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000D6B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291450;
  if (!qword_100291450)
  {
    v1 = objc_opt_self(PHPickerViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100291450);
  }
  return result;
}

uint64_t sub_1000D6B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028CE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6B88(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease(a1);
  else
    return swift_release(a1);
}

_QWORD *sub_1000D6B98(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void (*v71)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v72;
  uint64_t v73;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v47 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v47);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[1];
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[3];
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    v10 = a2[5];
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = a2[7];
    *(_QWORD *)(a1 + 56) = v11;
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v12 = a2[9];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v14 = a2[11];
    v13 = a2[12];
    *(_QWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 96) = v13;
    v15 = a3[11];
    v72 = (uint64_t)a2 + v15;
    v73 = a1 + v15;
    *(_QWORD *)(a1 + 72) = v12;
    v16 = type metadata accessor for Date(0);
    v71 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
    swift_retain(v7);
    swift_retain(v9);
    swift_retain(v10);
    swift_retain(v11);
    swift_retain(v12);
    v17 = swift_retain(v14);
    v71(v73, v72, v16, v17);
    v18 = *(int *)(sub_100006DF4(&qword_1002914B0) + 28);
    v19 = *(_QWORD *)(v72 + v18);
    *(_QWORD *)(v73 + v18) = v19;
    v20 = a3[12];
    v21 = a3[13];
    v22 = (_QWORD *)((char *)v4 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (_QWORD *)((char *)v4 + v21);
    v26 = (uint64_t *)((char *)a2 + v21);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = a3[14];
    v29 = a3[15];
    v30 = (_QWORD *)((char *)v4 + v28);
    v31 = (uint64_t)a2 + v28;
    v33 = *(void **)v31;
    v32 = *(_QWORD *)(v31 + 8);
    *v30 = v33;
    v30[1] = v32;
    v34 = (_QWORD *)((char *)v4 + v29);
    v35 = (uint64_t *)((char *)a2 + v29);
    v37 = *v35;
    v36 = v35[1];
    *v34 = v37;
    v34[1] = v36;
    v38 = a3[16];
    v39 = (_QWORD *)((char *)v4 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    swift_retain(v19);
    swift_retain(v24);
    swift_retain(v27);
    v41 = v33;
    swift_retain(v37);
    v42 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v40, v42) == 1)
    {
      v43 = type metadata accessor for UserInterfaceSizeClass(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v44 + 48))(v40, 1, v43))
      {
        v45 = sub_100006DF4(&qword_10028CE40);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        v46 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v44 + 16))(v39, v40, v43);
        v46 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v39, 0, 1, v43);
      }
    }
    else
    {
      v48 = *v40;
      *v39 = *v40;
      swift_retain(v48);
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v39, v42, v46);
    v49 = a3[17];
    v50 = (char *)v4 + v49;
    v51 = (uint64_t)a2 + v49;
    v52 = *(_QWORD *)v51;
    v53 = *(_QWORD *)(v51 + 8);
    v54 = *(_BYTE *)(v51 + 16);
    sub_1000D6EC8(*(_QWORD *)v51, v53);
    *(_QWORD *)v50 = v52;
    *((_QWORD *)v50 + 1) = v53;
    v50[16] = v54;
    v55 = a3[18];
    v56 = a3[19];
    v57 = (_QWORD *)((char *)v4 + v55);
    v58 = (uint64_t *)((char *)a2 + v55);
    v59 = *v58;
    v60 = v58[1];
    *v57 = *v58;
    v57[1] = v60;
    v61 = (char *)v4 + v56;
    v62 = (char *)a2 + v56;
    *v61 = *v62;
    v63 = *((_QWORD *)v62 + 1);
    *((_QWORD *)v61 + 1) = v63;
    v64 = a3[20];
    v65 = (char *)v4 + v64;
    v66 = (uint64_t)a2 + v64;
    v67 = *(_QWORD *)v66;
    v68 = *(_QWORD *)(v66 + 8);
    v69 = *(_BYTE *)(v66 + 16);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v63);
    sub_1000D6EC8(v67, v68);
    *(_QWORD *)v65 = v67;
    *((_QWORD *)v65 + 1) = v68;
    v65[16] = v69;
  }
  return v4;
}

uint64_t sub_1000D6EC8(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_1000D6ED0(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  swift_release(a1[11]);
  v4 = (char *)a1 + a2[11];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = sub_100006DF4(&qword_1002914B0);
  swift_release(*(_QWORD *)&v4[*(int *)(v6 + 28)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[13] + 8));

  swift_release(*(_QWORD *)((char *)a1 + a2[15]));
  v7 = (_QWORD *)((char *)a1 + a2[16]);
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_1000D705C(*(_QWORD *)((char *)a1 + a2[17]), *(_QWORD *)((char *)a1 + a2[17] + 8));
  v11 = (_QWORD *)((char *)a1 + a2[18]);
  swift_release(*v11);
  swift_release(v11[1]);
  swift_release(*(_QWORD *)((char *)a1 + a2[19] + 8));
  return sub_1000D705C(*(_QWORD *)((char *)a1 + a2[20]), *(_QWORD *)((char *)a1 + a2[20] + 8));
}

uint64_t sub_1000D705C(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_1000D7064(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v68)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v70;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v11;
  v13 = a3[11];
  v70 = a1 + v13;
  v14 = a2 + v13;
  *(_QWORD *)(a1 + 72) = v10;
  v15 = type metadata accessor for Date(0);
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  v16 = swift_retain(v12);
  v68(v70, v14, v15, v16);
  v17 = *(int *)(sub_100006DF4(&qword_1002914B0) + 28);
  v18 = *(_QWORD *)(v14 + v17);
  *(_QWORD *)(v70 + v17) = v18;
  v19 = a3[12];
  v20 = a3[13];
  v21 = (_QWORD *)(a1 + v19);
  v22 = (_QWORD *)(a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = (_QWORD *)(a1 + v20);
  v25 = (_QWORD *)(a2 + v20);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = a3[14];
  v28 = a3[15];
  v29 = (_QWORD *)(a1 + v27);
  v30 = a2 + v27;
  v32 = *(void **)v30;
  v31 = *(_QWORD *)(v30 + 8);
  *v29 = v32;
  v29[1] = v31;
  v33 = (_QWORD *)(a1 + v28);
  v34 = (uint64_t *)(a2 + v28);
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  v37 = a3[16];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  swift_retain(v18);
  swift_retain(v23);
  swift_retain(v26);
  v40 = v32;
  swift_retain(v36);
  v41 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v39, v41) == 1)
  {
    v42 = type metadata accessor for UserInterfaceSizeClass(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v39, 1, v42))
    {
      v44 = sub_100006DF4(&qword_10028CE40);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      v45 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 16))(v38, v39, v42);
      v45 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v38, 0, 1, v42);
    }
  }
  else
  {
    v46 = *v39;
    *v38 = *v39;
    swift_retain(v46);
    v45 = 0;
  }
  swift_storeEnumTagMultiPayload(v38, v41, v45);
  v47 = a3[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_QWORD *)v49;
  v51 = *(_QWORD *)(v49 + 8);
  v52 = *(_BYTE *)(v49 + 16);
  sub_1000D6EC8(*(_QWORD *)v49, v51);
  *(_QWORD *)v48 = v50;
  *(_QWORD *)(v48 + 8) = v51;
  *(_BYTE *)(v48 + 16) = v52;
  v53 = a3[18];
  v54 = a3[19];
  v55 = (uint64_t *)(a1 + v53);
  v56 = (uint64_t *)(a2 + v53);
  v57 = *v56;
  v58 = v56[1];
  *v55 = *v56;
  v55[1] = v58;
  v59 = a1 + v54;
  v60 = a2 + v54;
  *(_BYTE *)v59 = *(_BYTE *)v60;
  v61 = *(_QWORD *)(v60 + 8);
  *(_QWORD *)(v59 + 8) = v61;
  v62 = a3[20];
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = *(_QWORD *)v64;
  v66 = *(_QWORD *)(v64 + 8);
  LOBYTE(v48) = *(_BYTE *)(v64 + 16);
  swift_retain(v57);
  swift_retain(v58);
  swift_retain(v61);
  sub_1000D6EC8(v65, v66);
  *(_QWORD *)v63 = v65;
  *(_QWORD *)(v63 + 8) = v66;
  *(_BYTE *)(v63 + 16) = v48;
  return a1;
}

uint64_t sub_1000D736C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v6);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_retain(v15);
  swift_release(v14);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  swift_retain(v17);
  swift_release(v16);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v18 = a3[11];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v22 = *(int *)(sub_100006DF4(&qword_1002914B0) + 28);
  v23 = *(_QWORD *)(v19 + v22);
  v24 = *(_QWORD *)(v20 + v22);
  *(_QWORD *)(v19 + v22) = v24;
  swift_retain(v24);
  swift_release(v23);
  v25 = a3[12];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v26[1];
  v29 = v27[1];
  v26[1] = v29;
  swift_retain(v29);
  swift_release(v28);
  v30 = a3[13];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  *v31 = *v32;
  v33 = v31[1];
  v34 = v32[1];
  v31[1] = v34;
  swift_retain(v34);
  swift_release(v33);
  v35 = a3[14];
  v36 = (_QWORD *)(a1 + v35);
  v37 = a2 + v35;
  v38 = *(void **)(a1 + v35);
  v39 = *(void **)(a2 + v35);
  *v36 = v39;
  v40 = v39;

  v36[1] = *(_QWORD *)(v37 + 8);
  v41 = a3[15];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = *(_QWORD *)(a1 + v41);
  v45 = *(_QWORD *)(a2 + v41);
  *(_QWORD *)(a1 + v41) = v45;
  swift_retain(v45);
  swift_release(v44);
  *(_QWORD *)(v42 + 8) = *(_QWORD *)(v43 + 8);
  if (a1 != a2)
  {
    v46 = a3[16];
    v47 = (uint64_t *)(a1 + v46);
    v48 = (uint64_t *)(a2 + v46);
    sub_10000A020(a1 + v46, (uint64_t *)&unk_100291470);
    v49 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
    {
      v50 = type metadata accessor for UserInterfaceSizeClass(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50))
      {
        v52 = sub_100006DF4(&qword_10028CE40);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        v53 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v51 + 16))(v47, v48, v50);
        v53 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v47, 0, 1, v50);
      }
    }
    else
    {
      v54 = *v48;
      *v47 = *v48;
      swift_retain(v54);
      v53 = 0;
    }
    swift_storeEnumTagMultiPayload(v47, v49, v53);
  }
  v55 = a3[17];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = *(_QWORD *)v57;
  v59 = *(_QWORD *)(v57 + 8);
  v60 = *(_BYTE *)(v57 + 16);
  sub_1000D6EC8(*(_QWORD *)v57, v59);
  v61 = *(_QWORD *)v56;
  v62 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)v56 = v58;
  *(_QWORD *)(v56 + 8) = v59;
  *(_BYTE *)(v56 + 16) = v60;
  sub_1000D705C(v61, v62);
  v63 = a3[18];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = *(_QWORD *)(a2 + v63);
  v67 = *(_QWORD *)(a1 + v63);
  *(_QWORD *)(a1 + v63) = v66;
  swift_retain(v66);
  swift_release(v67);
  v68 = *(_QWORD *)(v64 + 8);
  v69 = *(_QWORD *)(v65 + 8);
  *(_QWORD *)(v64 + 8) = v69;
  swift_retain(v69);
  swift_release(v68);
  v70 = a3[19];
  v71 = a1 + v70;
  v72 = a2 + v70;
  *(_BYTE *)v71 = *(_BYTE *)v72;
  v73 = *(_QWORD *)(v71 + 8);
  v74 = *(_QWORD *)(v72 + 8);
  *(_QWORD *)(v71 + 8) = v74;
  swift_retain(v74);
  swift_release(v73);
  v75 = a3[20];
  v76 = a1 + v75;
  v77 = a2 + v75;
  v78 = *(_QWORD *)v77;
  v79 = *(_QWORD *)(v77 + 8);
  LOBYTE(v73) = *(_BYTE *)(v77 + 16);
  sub_1000D6EC8(*(_QWORD *)v77, v79);
  v80 = *(_QWORD *)v76;
  v81 = *(_QWORD *)(v76 + 8);
  *(_QWORD *)v76 = v78;
  *(_QWORD *)(v76 + 8) = v79;
  *(_BYTE *)(v76 + 16) = v73;
  sub_1000D705C(v80, v81);
  return a1;
}

uint64_t sub_1000D7738(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = a3[11];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = sub_100006DF4(&qword_1002914B0);
  *(_QWORD *)(v11 + *(int *)(v14 + 28)) = *(_QWORD *)(v12 + *(int *)(v14 + 28));
  v15 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[16];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for UserInterfaceSizeClass(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
    {
      v23 = sub_100006DF4(&qword_10028CE40);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v18, v19, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    }
    swift_storeEnumTagMultiPayload(v18, v20, 1);
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  v24 = a3[17];
  v25 = a3[18];
  v26 = a1 + v24;
  v27 = (__int128 *)(a2 + v24);
  v28 = *v27;
  *(_BYTE *)(v26 + 16) = *((_BYTE *)v27 + 16);
  *(_OWORD *)v26 = v28;
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  v29 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
  return a1;
}

uint64_t sub_1000D791C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v6);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_release(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v10);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v11);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release(v12);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v13 = a3[11];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = *(int *)(sub_100006DF4(&qword_1002914B0) + 28);
  v18 = *(_QWORD *)(v14 + v17);
  *(_QWORD *)(v14 + v17) = *(_QWORD *)(v15 + v17);
  swift_release(v18);
  v19 = a3[12];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v20[1];
  v20[1] = v21[1];
  swift_release(v22);
  v23 = a3[13];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v26 = v24[1];
  v24[1] = v25[1];
  swift_release(v26);
  v27 = a3[14];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = *(void **)(a1 + v27);
  *v28 = *v29;

  v28[1] = v29[1];
  v31 = a3[15];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  swift_release(v34);
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  if (a1 != a2)
  {
    v35 = a3[16];
    v36 = (void *)(a1 + v35);
    v37 = (const void *)(a2 + v35);
    sub_10000A020(a1 + v35, (uint64_t *)&unk_100291470);
    v38 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for UserInterfaceSizeClass(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
      {
        v41 = sub_100006DF4(&qword_10028CE40);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v36, v37, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
      }
      swift_storeEnumTagMultiPayload(v36, v38, 1);
    }
    else
    {
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
  }
  v42 = a3[17];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_BYTE *)(v44 + 16);
  v46 = *(_QWORD *)v43;
  v47 = *(_QWORD *)(v43 + 8);
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *(_BYTE *)(v43 + 16) = v45;
  sub_1000D705C(v46, v47);
  v48 = a3[18];
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = *(_QWORD *)(a1 + v48);
  *(_QWORD *)(a1 + v48) = *(_QWORD *)(a2 + v48);
  swift_release(v51);
  v52 = *(_QWORD *)(v49 + 8);
  *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
  swift_release(v52);
  v53 = a3[19];
  v54 = a1 + v53;
  v55 = a2 + v53;
  *(_BYTE *)v54 = *(_BYTE *)v55;
  v56 = *(_QWORD *)(v54 + 8);
  *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
  swift_release(v56);
  v57 = a3[20];
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = *(_BYTE *)(v59 + 16);
  v61 = *(_QWORD *)v58;
  v62 = *(_QWORD *)(v58 + 8);
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *(_BYTE *)(v58 + 16) = v60;
  sub_1000D705C(v61, v62);
  return a1;
}

uint64_t sub_1000D7C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D7C5C);
}

uint64_t sub_1000D7C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_1002914B0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 44);
    }
    else
    {
      v10 = sub_100006DF4(&qword_10028CE50);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000D7D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7D10);
}

uint64_t sub_1000D7D10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_1002914B0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = sub_100006DF4(&qword_10028CE50);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ImageTranslationView(uint64_t a1)
{
  uint64_t result;

  result = qword_100291510;
  if (!qword_100291510)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ImageTranslationView);
  return result;
}

void sub_1000D7DF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[17];

  v6[0] = &unk_1001EE328;
  v6[1] = &unk_1001EE328;
  v6[2] = &unk_1001EE340;
  v6[3] = &unk_1001EE328;
  v6[4] = &unk_1001EE328;
  v6[5] = &unk_1001EE328;
  v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000D7EC0(319);
  if (v3 <= 0x3F)
  {
    v6[7] = *(_QWORD *)(v2 - 8) + 64;
    v6[8] = &unk_1001EE328;
    v6[9] = &unk_1001EE328;
    v6[10] = &unk_1001EE328;
    v6[11] = &unk_1001EE328;
    sub_100048160(319);
    if (v5 <= 0x3F)
    {
      v6[12] = *(_QWORD *)(v4 - 8) + 64;
      v6[13] = &unk_1001EE358;
      v6[14] = &unk_1001EE340;
      v6[15] = &unk_1001EE328;
      v6[16] = &unk_1001EE358;
      swift_initStructMetadata(a1, 256, 17, v6, a1 + 16);
    }
  }
}

void sub_1000D7EC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100291520)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100291520);
  }
}

uint64_t storeEnumTagSinglePayload for ImageTranslationView.UIState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D7F60 + 4 * byte_1001EE305[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D7F94 + 4 * byte_1001EE300[v4]))();
}

uint64_t sub_1000D7F94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7F9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D7FA4);
  return result;
}

uint64_t sub_1000D7FB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D7FB8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D7FBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7FC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageTranslationView.UIState()
{
  return &type metadata for ImageTranslationView.UIState;
}

unint64_t sub_1000D7FE4()
{
  unint64_t result;

  result = qword_100291590;
  if (!qword_100291590)
  {
    result = swift_getWitnessTable(&unk_1001EE3B8, &type metadata for ImageTranslationView.UIState);
    atomic_store(result, (unint64_t *)&qword_100291590);
  }
  return result;
}

uint64_t sub_1000D8028(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100213AA4, 1);
}

uint64_t sub_1000D8038()
{
  return sub_1000D88CC(type metadata accessor for CameraConfiguration, sub_10001EBE8);
}

uint64_t sub_1000D804C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[4];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v23 = a1 & 1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ImageTranslationView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10001D948();
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  sub_100032D68(v1, (uint64_t)&v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for ImageTranslationView);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10026A080, v14 + v10 + 1, v13 | 7);
  sub_10005DDA8((uint64_t)&v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v15 + v14, type metadata accessor for ImageTranslationView);
  *(_BYTE *)(v15 + v14 + v10) = v23;
  aBlock[4] = sub_1000E347C;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026A098;
  v16 = _Block_copy(aBlock);
  v17 = swift_release(v28);
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100006DF4(&qword_10028AC30);
  v20 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v16);
  _Block_release(v16);

  (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v4, v2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v24 + 8))(v7, v25);
}

uint64_t sub_1000D82C0(uint64_t a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ImageTranslationView(0) + 60));
  v4 = *v3;
  if (*v3)
  {
    v5 = a2 & 1;
    KeyPath = swift_getKeyPath(&unk_1001EE4F0);
    v7 = swift_getKeyPath(&unk_1001EE518);
    v12 = v5;
    swift_retain(v4);
    return static Published.subscript.setter(&v12, v4, KeyPath, v7);
  }
  else
  {
    v9 = v3[1];
    v10 = type metadata accessor for ConversationContext(0);
    v11 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    result = EnvironmentObject.error()(0, v9, v10, v11);
    __break(1u);
  }
  return result;
}

BOOL sub_1000D8390()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  int v12;
  id v14;
  unsigned __int8 v15;
  _QWORD v16[3];
  char v17;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ImageTranslationView(0) + 60));
  v2 = *v1;
  v3 = v1[1];
  v4 = type metadata accessor for ConversationContext(0);
  v5 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v6 = EnvironmentObject.projectedValue.getter(v2, v3, v4, v5);
  KeyPath = swift_getKeyPath(&unk_1001EE430);
  EnvironmentObject.Wrapper.subscript.getter(v16, KeyPath, v6, v5);
  swift_release(KeyPath);
  swift_release(v6);
  v8 = v16[0];
  v9 = v16[1];
  v10 = (void *)v16[2];
  v11 = v17;
  sub_100006DF4(&qword_100291428);
  Binding.wrappedValue.getter(&v14);
  swift_release(v9);
  swift_release(v8);
  sub_1000E05B8(v10, v11);
  v12 = v15;
  if (v15 != 255)
    sub_1000E05B8(v14, v15);
  return v12 != 255;
}

uint64_t sub_1000D84B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  char v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EE430);
  v5 = swift_getKeyPath(&unk_1001EE458);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  v7 = v9;
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_1000D8538(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  uint64_t v6;
  void *v8;
  char v9;

  v2 = *(void **)a1;
  v3 = *a2;
  v4 = *(_BYTE *)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001EE430);
  v6 = swift_getKeyPath(&unk_1001EE458);
  v8 = v2;
  v9 = v4;
  sub_1000E05CC(v2, v4);
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_1000D85C4@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1 + *(int *)(type metadata accessor for ImageTranslationView(0) + 56);
  v4 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    KeyPath = swift_getKeyPath(&unk_1001EE5F8);
    v6 = swift_getKeyPath(&unk_1001EE620);
    v7 = v4;
    static Published.subscript.getter(a2, v7, KeyPath);

    swift_release(KeyPath);
    swift_release(v6);
    v8 = enum case for LanguageOption.locale(_:);
    v9 = type metadata accessor for LanguageOption(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a2, v8, v9);
  }
  else
  {
    v11 = *(_QWORD *)(v3 + 8);
    v12 = type metadata accessor for ConversationManager(0);
    v13 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    result = EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
  return result;
}

void sub_1000D86BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t KeyPath;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v23 - v13;
  v15 = a4 + *(int *)(type metadata accessor for ImageTranslationView(0) + 56);
  if (*(_QWORD *)v15)
  {
    v16 = *(id *)v15;
    LanguageOption.locale.getter(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
      sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    }
    KeyPath = swift_getKeyPath(&unk_1001EE5F8);
    v18 = swift_getKeyPath(&unk_1001EE620);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v19 = v16;
    static Published.subscript.setter(v12, v19, KeyPath, v18);
    sub_1000766FC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);

  }
  else
  {
    v20 = *(_QWORD *)(v15 + 8);
    v21 = type metadata accessor for ConversationManager(0);
    v22 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
}

uint64_t sub_1000D88B8()
{
  return sub_1000D88CC((uint64_t (*)(_QWORD))&type metadata accessor for VisualTranslationObservable, (uint64_t (*)(void))&VisualTranslationObservable.init());
}

uint64_t sub_1000D88CC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(void))
{
  uint64_t v3;

  v3 = a1(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return a2();
}

uint64_t sub_1000D8908@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  uint64_t v68;
  ValueMetadata *v69;
  unint64_t v70;

  v2 = v1;
  v61 = a1;
  v3 = type metadata accessor for ImageTranslationView(0);
  v53 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v54 = v4;
  v55 = (uint64_t)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006DF4(&qword_100291598);
  __chkstk_darwin(v52);
  v6 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100006DF4(&qword_1002915A0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  __chkstk_darwin(v7);
  v51 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_1002915A8);
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  v10 = __chkstk_darwin(v9);
  v56 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Alignment.center.getter(v10);
  v6[1] = v12;
  v13 = sub_100006DF4(&qword_1002915B0);
  sub_1000D8DB8(v2, (uint64_t)v6 + *(int *)(v13 + 44));
  v14 = sub_100006DF4(&qword_1002915B8);
  v15 = type metadata accessor for UTType(0);
  v16 = swift_allocObject(v14, ((*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80) | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1001E64F0;
  static UTType.jpeg.getter();
  v17 = (uint64_t *)(v2 + *(int *)(v3 + 60));
  v18 = *v17;
  v19 = v17[1];
  v20 = type metadata accessor for ConversationContext(0);
  v21 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v49 = v20;
  v22 = EnvironmentObject.projectedValue.getter(v18, v19, v20, v21);
  KeyPath = swift_getKeyPath(&unk_1001EE430);
  EnvironmentObject.Wrapper.subscript.getter(&v67, KeyPath, v22, v21);
  swift_release(KeyPath);
  swift_release(v22);
  v50 = v67;
  v24 = v68;
  v25 = (char)v69;
  v26 = *(_QWORD *)(v2 + 88);
  v62 = *(_BYTE *)(v2 + 80);
  v63 = v26;
  v27 = sub_100006DF4(&qword_10028CF50);
  State.projectedValue.getter(&v64, v27);
  v28 = v64;
  v29 = v65;
  LOBYTE(v20) = v66;
  v69 = &type metadata for ImageDropDelegate;
  v70 = sub_1000E04B8();
  v30 = swift_allocObject(&unk_100269EF0, 65, 7);
  *(_QWORD *)&v67 = v30;
  *(_OWORD *)(v30 + 16) = v50;
  *(_QWORD *)(v30 + 32) = v24;
  *(_BYTE *)(v30 + 40) = v25;
  *(_QWORD *)(v30 + 48) = v28;
  *(_QWORD *)(v30 + 56) = v29;
  *(_BYTE *)(v30 + 64) = v20;
  v32 = v51;
  v31 = v52;
  v33 = sub_100012334(&qword_1002915C8, &qword_100291598, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.onDrop(of:delegate:)(v16, &v67, v31, v33);
  swift_bridgeObjectRelease(v16);
  sub_10000A020((uint64_t)v6, &qword_100291598);
  sub_100009C08(&v67);
  v34 = *v17;
  if (*v17)
  {
    v35 = swift_getKeyPath(&unk_1001EE430);
    v36 = swift_getKeyPath(&unk_1001EE458);
    swift_retain(v34);
    static Published.subscript.getter(&v67, v37, v35);
    swift_release(v34);
    swift_release(v35);
    swift_release(v36);
    v64 = (id)v67;
    LOBYTE(v65) = BYTE8(v67);
    v38 = v55;
    sub_100032D68(v2, v55, type metadata accessor for ImageTranslationView);
    v39 = *(unsigned __int8 *)(v53 + 80);
    v40 = (v39 + 16) & ~v39;
    v41 = swift_allocObject(&unk_100269F18, v40 + v54, v39 | 7);
    sub_10005DDA8(v38, v41 + v40, type metadata accessor for ImageTranslationView);
    v42 = sub_100006DF4(&qword_10028E2C8);
    *(_QWORD *)&v67 = v31;
    *((_QWORD *)&v67 + 1) = v33;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.onDrop(of:delegate:)>>, 1);
    v44 = sub_1000E0510();
    v45 = v56;
    v46 = v60;
    View.onChange<A>(of:initial:_:)(&v64, 0, sub_1000E0504, v41, v60, v42, OpaqueTypeConformance2, v44);
    swift_release(v41);
    sub_1000E05B8(v64, v65);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v32, v46);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 32))(v61, v45, v58);
  }
  else
  {
    result = EnvironmentObject.error()(0, v17[1], v49, v21);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D8DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void (*v193)(char *, uint64_t);
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  int *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _BYTE v233[281];
  _QWORD v234[36];
  _OWORD v235[18];
  _QWORD v236[37];

  v232 = a1;
  v227 = a2;
  v2 = sub_100006DF4(&qword_1002915E8);
  __chkstk_darwin(v2);
  v219 = (uint64_t *)((char *)&v195 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v221 = sub_100006DF4(&qword_1002915F0);
  __chkstk_darwin(v221);
  v222 = (uint64_t)&v195 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = sub_100006DF4(&qword_1002915F8);
  v224 = *(_QWORD *)(v226 - 8);
  v5 = __chkstk_darwin(v226);
  v225 = (char *)&v195 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v223 = (char *)&v195 - v7;
  v8 = type metadata accessor for ImageTranslationView(0);
  v230 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v229 = v9;
  v218 = (uint64_t)&v195 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100291600);
  __chkstk_darwin(v10);
  v215 = (uint64_t *)((char *)&v195 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100006DF4(&qword_100291608);
  v216 = *(_QWORD *)(v12 - 8);
  v217 = v12;
  __chkstk_darwin(v12);
  v214 = (uint64_t)&v195 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UserInterfaceSizeClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v213 = (char *)&v195 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v17);
  v19 = (char *)&v195 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006DF4(&qword_10028CE40);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v195 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v195 - v25;
  __chkstk_darwin(v24);
  v28 = (uint64_t *)((char *)&v195 - v27);
  v29 = sub_100006DF4(&qword_100291610);
  v30 = __chkstk_darwin(v29);
  v220 = (uint64_t)&v195 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v231 = (uint64_t)&v195 - v32;
  v228 = (int *)v8;
  sub_1000D58EC(v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v26, enum case for UserInterfaceSizeClass.regular(_:), v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v26, 0, 1, v14);
  v33 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_10000B074((uint64_t)v28, (uint64_t)v19, &qword_10028CE40);
  sub_10000B074((uint64_t)v26, v33, &qword_10028CE40);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v34((uint64_t)v19, 1, v14) == 1)
  {
    sub_10000A020((uint64_t)v26, &qword_10028CE40);
    sub_10000A020((uint64_t)v28, &qword_10028CE40);
    v35 = v34(v33, 1, v14);
    v36 = v230;
    if (v35 == 1)
    {
      v37 = sub_10000A020((uint64_t)v19, &qword_10028CE40);
      v38 = v232;
      v39 = v217;
LABEL_8:
      v46 = static VerticalAlignment.center.getter(v37);
      v47 = (uint64_t)v215;
      *v215 = v46;
      *(_QWORD *)(v47 + 8) = 0;
      *(_BYTE *)(v47 + 16) = 1;
      v48 = sub_100006DF4(&qword_1002916B8);
      sub_1000DA010(v47 + *(int *)(v48 + 44));
      v49 = v214;
      sub_10000B074(v47, v214, &qword_100291600);
      *(_QWORD *)(v49 + *(int *)(v39 + 36)) = 0x3FF0000000000000;
      sub_10000A020(v47, &qword_100291600);
      v41 = v231;
      sub_1000110A4(v49, v231, &qword_100291608);
      v40 = 0;
      goto LABEL_10;
    }
LABEL_6:
    sub_10000A020((uint64_t)v19, &qword_10028CFE8);
    v40 = 1;
    v41 = v231;
    v38 = v232;
    v39 = v217;
    goto LABEL_10;
  }
  sub_10000B074((uint64_t)v19, (uint64_t)v23, &qword_10028CE40);
  if (v34(v33, 1, v14) == 1)
  {
    sub_10000A020((uint64_t)v26, &qword_10028CE40);
    sub_10000A020((uint64_t)v28, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
    v36 = v230;
    goto LABEL_6;
  }
  v42 = v213;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v213, v33, v14);
  v43 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v44 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v42, v14, v43);
  v45 = *(void (**)(char *, uint64_t))(v15 + 8);
  v45(v42, v14);
  sub_10000A020((uint64_t)v26, &qword_10028CE40);
  sub_10000A020((uint64_t)v28, &qword_10028CE40);
  v45(v23, v14);
  v37 = sub_10000A020((uint64_t)v19, &qword_10028CE40);
  v38 = v232;
  v36 = v230;
  v39 = v217;
  if ((v44 & 1) != 0)
    goto LABEL_8;
  v40 = 1;
  v41 = v231;
LABEL_10:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v216 + 56))(v41, v40, 1, v39);
  if (sub_1000D8390())
  {
    v50 = v228;
    v51 = v38 + v228[20];
    v52 = *(_QWORD *)v51;
    v53 = *(_QWORD *)(v51 + 8);
    v54 = *(unsigned __int8 *)(v51 + 16);
    v55 = type metadata accessor for VisualTranslationObservable(0);
    v206 = v55;
    v56 = sub_100007D5C(&qword_1002915E0, (uint64_t (*)(uint64_t))&type metadata accessor for VisualTranslationObservable, (uint64_t)&protocol conformance descriptor for VisualTranslationErrorViewModel);
    v205 = StateObject.wrappedValue.getter(v52, v53, v54, v55, v56);
    v57 = (uint64_t *)(v38 + v50[15]);
    v58 = *v57;
    v59 = v57[1];
    v60 = type metadata accessor for ConversationContext(0);
    v61 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    v62 = EnvironmentObject.projectedValue.getter(v58, v59, v60, v61);
    KeyPath = swift_getKeyPath(&unk_1001EE430);
    EnvironmentObject.Wrapper.subscript.getter(v236, KeyPath, v62, v61);
    swift_release(KeyPath);
    swift_release(v62);
    v214 = v236[1];
    v215 = (uint64_t *)v236[0];
    v213 = (char *)v236[2];
    LODWORD(v212) = LOBYTE(v236[3]);
    v64 = *(_QWORD *)(v38 + 72);
    LOBYTE(v234[0]) = *(_BYTE *)(v38 + 64);
    v234[1] = v64;
    v65 = sub_100006DF4(&qword_10028CF50);
    State.projectedValue.getter(v235, v65);
    v210 = *((_QWORD *)&v235[0] + 1);
    v211 = *(_QWORD *)&v235[0];
    LODWORD(v209) = LOBYTE(v235[1]);
    v66 = v38 + v50[17];
    v67 = *(_QWORD *)v66;
    v68 = *(_QWORD *)(v66 + 8);
    v69 = *(unsigned __int8 *)(v66 + 16);
    v70 = type metadata accessor for CameraConfiguration(0);
    v71 = sub_100007D5C(&qword_1002916A8, type metadata accessor for CameraConfiguration, (uint64_t)&unk_1001E72EC);
    v72 = StateObject.wrappedValue.getter(v67, v68, v69, v70, v71);
    v73 = (uint64_t *)(v232 + v50[12]);
    v74 = *v73;
    v75 = v73[1];
    v234[0] = v74;
    v234[1] = v75;
    v76 = sub_100006DF4(&qword_10028B260);
    State.projectedValue.getter(v235, v76);
    v207 = *((_QWORD *)&v235[0] + 1);
    v208 = *(_QWORD *)&v235[0];
    v77 = *(_QWORD *)&v235[1];
    v78 = (uint64_t *)(v232 + v50[13]);
    v79 = *v78;
    v80 = v78[1];
    v234[0] = v79;
    v234[1] = v80;
    v81 = v76;
    v82 = v232;
    State.projectedValue.getter(v235, v81);
    v203 = *((_QWORD *)&v235[0] + 1);
    v204 = *(_QWORD *)&v235[0];
    v83 = *(_QWORD *)&v235[1];
    v84 = (uint64_t *)(v82 + v50[18]);
    v86 = *v84;
    v85 = v84[1];
    v234[0] = v86;
    v234[1] = v85;
    v87 = sub_100006DF4(&qword_100291618);
    State.projectedValue.getter(v235, v87);
    v201 = *(_QWORD *)&v235[0];
    v202 = *(_OWORD *)((char *)v235 + 8);
    v88 = type metadata accessor for ConversationManager(0);
    v89 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    v90 = EnvironmentObject.init()(v88, v89);
    v216 = v91;
    v217 = v90;
    v92 = EnvironmentObject.init()(v60, v61);
    v199 = v93;
    v200 = v92;
    v94 = type metadata accessor for FavoritesImporter();
    v95 = sub_100007D5C(&qword_1002916B0, (uint64_t (*)(uint64_t))type metadata accessor for FavoritesImporter, (uint64_t)&unk_1001ED8B4);
    v198 = EnvironmentObject.init()(v94, v95);
    *(_QWORD *)&v197 = v96;
    v97 = ObservedObject.init(wrappedValue:)(v205, v206, v56);
    v99 = v98;
    v206 = ObservedObject.init(wrappedValue:)(v72, v70, v71);
    v101 = v100;
    if (qword_10028A3E0 != -1)
      swift_once(&qword_10028A3E0, sub_1000CF7BC);
    v102 = qword_1002AA268;
    swift_retain(qword_1002AA268);
    v104 = static Edge.Set.all.getter(v103);
    v105 = Edge.Set.init(rawValue:)(0);
    v106 = v105;
    v107 = Edge.Set.init(rawValue:)(v105);
    v108 = Edge.Set.init(rawValue:)(v107 & v104);
    v109 = v229;
    if (v108 != v104)
      LOBYTE(v106) = Edge.Set.init(rawValue:)(v106 | v104);
    v110 = v218;
    sub_100032D68(v82, v218, type metadata accessor for ImageTranslationView);
    v111 = *(unsigned __int8 *)(v230 + 80);
    v112 = (v111 + 16) & ~v111;
    v113 = swift_allocObject(&unk_100269F90, v112 + v109, v111 | 7);
    v114 = v113 + v112;
    v115 = v110;
    sub_10005DDA8(v110, v114, type metadata accessor for ImageTranslationView);
    *(_QWORD *)&v235[0] = v217;
    *((_QWORD *)&v235[0] + 1) = v216;
    *(_QWORD *)&v235[1] = v200;
    *((_QWORD *)&v235[1] + 1) = v199;
    *(_QWORD *)&v235[2] = v198;
    *((_QWORD *)&v235[2] + 1) = v197;
    *(_QWORD *)&v235[3] = v97;
    *((_QWORD *)&v235[3] + 1) = v99;
    *(_QWORD *)&v235[4] = v215;
    *((_QWORD *)&v235[4] + 1) = v214;
    *(_QWORD *)&v235[5] = v213;
    BYTE8(v235[5]) = v212;
    *(_QWORD *)&v235[6] = v211;
    *((_QWORD *)&v235[6] + 1) = v210;
    LOBYTE(v235[7]) = v209;
    *((_QWORD *)&v235[7] + 1) = v206;
    *(_QWORD *)&v235[8] = v101;
    *((_QWORD *)&v235[8] + 1) = v208;
    *(_QWORD *)&v235[9] = v207;
    *((_QWORD *)&v235[9] + 1) = v77;
    *(_QWORD *)&v235[10] = v204;
    *((_QWORD *)&v235[10] + 1) = v203;
    *(_QWORD *)&v235[11] = v83;
    *((_QWORD *)&v235[11] + 1) = v102;
    *(_QWORD *)&v235[12] = v201;
    *(_OWORD *)((char *)&v235[12] + 8) = v202;
    BYTE8(v235[13]) = v106;
    v235[14] = 0uLL;
    *(_QWORD *)&v235[15] = sub_1000E1ED0;
    *((_QWORD *)&v235[15] + 1) = v113;
    sub_1000E1EDC((uint64_t)v235);
  }
  else
  {
    v116 = v228;
    v117 = (uint64_t *)(v38 + v228[15]);
    v118 = *v117;
    v119 = v117[1];
    v120 = type metadata accessor for ConversationContext(0);
    v121 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    v122 = EnvironmentObject.projectedValue.getter(v118, v119, v120, v121);
    v123 = swift_getKeyPath(&unk_1001EE430);
    EnvironmentObject.Wrapper.subscript.getter(v236, v123, v122, v121);
    swift_release(v123);
    swift_release(v122);
    v216 = v236[1];
    v217 = v236[0];
    v215 = (uint64_t *)v236[2];
    LODWORD(v214) = LOBYTE(v236[3]);
    v124 = *(_QWORD *)(v38 + 24);
    LOBYTE(v234[0]) = *(_BYTE *)(v38 + 16);
    v234[1] = v124;
    v125 = sub_100006DF4(&qword_10028CF50);
    State.projectedValue.getter(v235, v125);
    v212 = *((_QWORD *)&v235[0] + 1);
    v213 = *(char **)&v235[0];
    LODWORD(v211) = LOBYTE(v235[1]);
    v126 = *(_QWORD *)(v38 + 8);
    LOBYTE(v234[0]) = *(_BYTE *)v38;
    v234[1] = v126;
    State.projectedValue.getter(v235, v125);
    v209 = *((_QWORD *)&v235[0] + 1);
    v210 = *(_QWORD *)&v235[0];
    LODWORD(v208) = LOBYTE(v235[1]);
    v127 = *(_QWORD *)(v38 + 56);
    LOBYTE(v234[0]) = *(_BYTE *)(v38 + 48);
    v234[1] = v127;
    State.projectedValue.getter(v235, v125);
    v206 = *((_QWORD *)&v235[0] + 1);
    v207 = *(_QWORD *)&v235[0];
    LODWORD(v205) = LOBYTE(v235[1]);
    v128 = *(_QWORD *)(v38 + 88);
    LOBYTE(v234[0]) = *(_BYTE *)(v38 + 80);
    v234[1] = v128;
    State.projectedValue.getter(v235, v125);
    v203 = *((_QWORD *)&v235[0] + 1);
    v204 = *(_QWORD *)&v235[0];
    LODWORD(v202) = LOBYTE(v235[1]);
    v129 = (uint64_t *)(v38 + v116[12]);
    v130 = *v129;
    v131 = v129[1];
    v234[0] = v130;
    v234[1] = v131;
    v132 = sub_100006DF4(&qword_10028B260);
    State.projectedValue.getter(v235, v132);
    v200 = *((_QWORD *)&v235[0] + 1);
    v201 = *(_QWORD *)&v235[0];
    v133 = *(_QWORD *)&v235[1];
    v134 = (uint64_t *)(v38 + v116[13]);
    v135 = *v134;
    v136 = v134[1];
    v234[0] = v135;
    v234[1] = v136;
    State.projectedValue.getter(v235, v132);
    v198 = *((_QWORD *)&v235[0] + 1);
    v199 = *(_QWORD *)&v235[0];
    v137 = *(_QWORD *)&v235[1];
    v138 = (uint64_t *)(v38 + v116[18]);
    v140 = *v138;
    v139 = v138[1];
    v234[0] = v140;
    v234[1] = v139;
    v141 = sub_100006DF4(&qword_100291618);
    State.projectedValue.getter(v235, v141);
    v196 = *(_QWORD *)&v235[0];
    v197 = *(_OWORD *)((char *)v235 + 8);
    v142 = type metadata accessor for ConversationManager(0);
    v143 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    v195 = EnvironmentObject.init()(v142, v143);
    v145 = v144;
    v146 = EnvironmentObject.init()(v120, v121);
    v148 = v147;
    if (qword_10028A3E0 != -1)
      swift_once(&qword_10028A3E0, sub_1000CF7BC);
    v149 = qword_1002AA268;
    swift_retain(qword_1002AA268);
    v151 = static Edge.Set.all.getter(v150);
    v152 = Edge.Set.init(rawValue:)(0);
    v153 = v152;
    v154 = Edge.Set.init(rawValue:)(v152);
    if (Edge.Set.init(rawValue:)(v154 & v151) != v151)
      LOBYTE(v153) = Edge.Set.init(rawValue:)(v153 | v151);
    v115 = v218;
    sub_100032D68(v232, v218, type metadata accessor for ImageTranslationView);
    v155 = *(unsigned __int8 *)(v36 + 80);
    v156 = (v155 + 16) & ~v155;
    v157 = swift_allocObject(&unk_100269F40, v156 + v229, v155 | 7);
    sub_10005DDA8(v115, v157 + v156, type metadata accessor for ImageTranslationView);
    *(_QWORD *)&v235[0] = v195;
    *((_QWORD *)&v235[0] + 1) = v145;
    *(_QWORD *)&v235[1] = v146;
    *((_QWORD *)&v235[1] + 1) = v148;
    *(_QWORD *)&v235[2] = v217;
    *((_QWORD *)&v235[2] + 1) = v216;
    *(_QWORD *)&v235[3] = v215;
    BYTE8(v235[3]) = v214;
    *(_QWORD *)&v235[4] = v213;
    *((_QWORD *)&v235[4] + 1) = v212;
    LOBYTE(v235[5]) = v211;
    *((_QWORD *)&v235[5] + 1) = v210;
    *(_QWORD *)&v235[6] = v209;
    BYTE8(v235[6]) = v208;
    *(_QWORD *)&v235[7] = v149;
    *((_QWORD *)&v235[7] + 1) = v207;
    *(_QWORD *)&v235[8] = v206;
    BYTE8(v235[8]) = v205;
    *(_QWORD *)&v235[9] = v204;
    *((_QWORD *)&v235[9] + 1) = v203;
    LOBYTE(v235[10]) = v202;
    *((_QWORD *)&v235[10] + 1) = v201;
    *(_QWORD *)&v235[11] = v200;
    *((_QWORD *)&v235[11] + 1) = v133;
    *(_QWORD *)&v235[12] = v199;
    *((_QWORD *)&v235[12] + 1) = v198;
    *(_QWORD *)&v235[13] = v137;
    *((_QWORD *)&v235[13] + 1) = v196;
    v235[14] = v197;
    LOBYTE(v235[15]) = v153;
    *(_QWORD *)&v235[16] = 0;
    *((_QWORD *)&v235[15] + 1) = 0;
    *((_QWORD *)&v235[16] + 1) = sub_1000E1738;
    *(_QWORD *)&v235[17] = v157;
    sub_1000E1744((uint64_t)v235);
  }
  sub_1000110A4((uint64_t)v235, (uint64_t)v234, &qword_100291620);
  v158 = sub_100006DF4(&qword_100291628);
  v159 = sub_100006DF4(&qword_100291630);
  v160 = sub_10001B6DC(&qword_100291638, &qword_100291628, (void (*)(void))sub_1000E1750);
  v161 = sub_10001B6DC(&qword_100291658, &qword_100291630, (void (*)(void))sub_1000E17B8);
  v162 = _ConditionalContent<>.init(storage:)(v234, v158, v159, v160, v161);
  v163 = static HorizontalAlignment.center.getter(v162);
  v164 = (uint64_t)v219;
  *v219 = v163;
  *(_QWORD *)(v164 + 8) = 0;
  *(_BYTE *)(v164 + 16) = 1;
  v165 = sub_100006DF4(&qword_100291678);
  v166 = v232;
  v167 = sub_1000DCE14(v232, v164 + *(int *)(v165 + 44));
  v168 = static SafeAreaRegions.keyboard.getter(v167);
  LOBYTE(v158) = static Edge.Set.all.getter(v168);
  v169 = v222;
  sub_10000B074(v164, v222, &qword_1002915E8);
  v170 = v221;
  v171 = v169 + *(int *)(v221 + 36);
  *(_QWORD *)v171 = v168;
  *(_BYTE *)(v171 + 8) = v158;
  sub_10000A020(v164, &qword_1002915E8);
  v172 = v166 + v228[19];
  v173 = *(_BYTE *)v172;
  v174 = *(_QWORD *)(v172 + 8);
  LOBYTE(v234[0]) = v173;
  v234[1] = v174;
  v175 = sub_100006DF4(&qword_10028CF50);
  State.projectedValue.getter(v235, v175);
  v176 = v235[0];
  v177 = LOBYTE(v235[1]);
  sub_100032D68(v166, v115, type metadata accessor for ImageTranslationView);
  v178 = *(unsigned __int8 *)(v230 + 80);
  v179 = (v178 + 16) & ~v178;
  v180 = swift_allocObject(&unk_100269F68, v179 + v229, v178 | 7);
  sub_10005DDA8(v115, v180 + v179, type metadata accessor for ImageTranslationView);
  v181 = sub_100006DF4(&qword_100291680);
  v182 = sub_1000E1860();
  v183 = sub_1000E18E4();
  v184 = v225;
  View.sheet<A>(isPresented:onDismiss:content:)(v176, *((_QWORD *)&v176 + 1), v177, 0, 0, sub_1000E1824, v180, v170, v181, v182, v183);
  swift_release(*((_QWORD *)&v176 + 1));
  swift_release(v180);
  swift_release(v176);
  sub_10000A020(v169, &qword_1002915F0);
  v186 = v223;
  v185 = v224;
  v187 = v226;
  (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v223, v184, v226);
  v188 = v220;
  sub_10000B074(v231, v220, &qword_100291610);
  memcpy(v233, v236, sizeof(v233));
  v189 = *(void (**)(char *, char *, uint64_t))(v185 + 16);
  v189(v184, v186, v187);
  v190 = v227;
  sub_10000B074(v188, v227, &qword_100291610);
  v191 = sub_100006DF4(&qword_1002916A0);
  v192 = (void *)(v190 + *(int *)(v191 + 48));
  memcpy(v234, v233, 0x119uLL);
  memcpy(v192, v233, 0x119uLL);
  v189((char *)(v190 + *(int *)(v191 + 64)), v184, v187);
  sub_1000E1BDC((uint64_t)v234, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000E1968);
  v193 = *(void (**)(char *, uint64_t))(v185 + 8);
  v193(v186, v187);
  sub_10000A020(v231, &qword_100291610);
  v193(v184, v187);
  memcpy(v235, v233, 0x119uLL);
  sub_1000E1BDC((uint64_t)v235, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000E1C68);
  return sub_10000A020(v188, &qword_100291610);
}

uint64_t sub_1000DA010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v2 = sub_100006DF4(&qword_1002916C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_1002916C8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v25 - v10;
  *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v4 + 1) = 0x403E000000000000;
  v4[16] = 0;
  v12 = sub_100006DF4(&qword_1002916D0);
  v13 = sub_1000DA1D8(&v4[*(int *)(v12 + 44)]);
  v14 = static Edge.Set.trailing.getter(v13);
  v15 = EdgeInsets.init(_all:)(20.0);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_10000B074((uint64_t)v4, (uint64_t)v8, &qword_1002916C0);
  v22 = &v8[*(int *)(v5 + 36)];
  *v22 = v14;
  *((double *)v22 + 1) = v15;
  *((_QWORD *)v22 + 2) = v17;
  *((_QWORD *)v22 + 3) = v19;
  *((_QWORD *)v22 + 4) = v21;
  v22[40] = 0;
  sub_10000A020((uint64_t)v4, &qword_1002916C0);
  sub_1000110A4((uint64_t)v8, (uint64_t)v11, &qword_1002916C8);
  sub_10000B074((uint64_t)v11, (uint64_t)v8, &qword_1002916C8);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v23 = sub_100006DF4(&qword_1002916D8);
  sub_10000B074((uint64_t)v8, a1 + *(int *)(v23 + 48), &qword_1002916C8);
  sub_10000A020((uint64_t)v11, &qword_1002916C8);
  return sub_10000A020((uint64_t)v8, &qword_1002916C8);
}

uint64_t sub_1000DA1D8@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v34 = a1;
  v1 = sub_100006DF4(&qword_1002916E0);
  v2 = __chkstk_darwin(v1);
  v33 = (uint64_t)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - v4;
  v6 = sub_100006DF4(&qword_1002916E8);
  v31 = *(_QWORD *)(v6 - 8);
  v7 = v31;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v13 = sub_100006DF4(&qword_1002916F0);
  v32 = *(_QWORD *)(v13 - 8);
  v14 = v32;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v29 - v18;
  sub_1000DA438((uint64_t)&v29 - v18);
  sub_1000DAB64((uint64_t)v12);
  v30 = v5;
  sub_1000DB340((uint64_t)v5);
  v20 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v20(v17, v19, v13);
  v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v21(v10, v12, v6);
  v22 = (uint64_t)v5;
  v23 = v33;
  sub_10000B074(v22, v33, &qword_1002916E0);
  v24 = v34;
  v20(v34, v17, v13);
  v25 = sub_100006DF4(&qword_1002916F8);
  v21(&v24[*(int *)(v25 + 48)], v10, v6);
  sub_10000B074(v23, (uint64_t)&v24[*(int *)(v25 + 64)], &qword_1002916E0);
  sub_10000A020((uint64_t)v30, &qword_1002916E0);
  v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26(v12, v6);
  v27 = *(void (**)(char *, uint64_t))(v32 + 8);
  v27(v19, v13);
  sub_10000A020(v23, &qword_1002916E0);
  v26(v10, v6);
  return ((uint64_t (*)(char *, uint64_t))v27)(v17, v13);
}

uint64_t sub_1000DA438@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t OpaqueTypeConformance2;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v2 = v1;
  v84 = a1;
  v3 = type metadata accessor for DynamicTypeSize(0);
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  __chkstk_darwin(v3);
  v81 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for ImageTranslationButtonStyle.Style(0);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for ImageTranslationButtonStyle(0);
  v72 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ImageTranslationView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100006DF4(&qword_10028BCA0);
  v65 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100006DF4(&qword_100291700);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100006DF4(&qword_100291708);
  __chkstk_darwin(v69);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100006DF4(&qword_100291710);
  v19 = __chkstk_darwin(v76);
  v70 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v74 = (char *)&v63 - v21;
  v77 = sub_100006DF4(&qword_100291718);
  __chkstk_darwin(v77);
  v75 = (uint64_t)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100006DF4(&qword_100291720);
  v24 = *(_QWORD *)(v23 - 8);
  v79 = v23;
  v80 = v24;
  __chkstk_darwin(v23);
  v78 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032D68(v2, (uint64_t)v12, type metadata accessor for ImageTranslationView);
  v26 = *(unsigned __int8 *)(v10 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = swift_allocObject(&unk_10026A0D0, v27 + v11, v26 | 7);
  sub_10005DDA8((uint64_t)v12, v28 + v27, type metadata accessor for ImageTranslationView);
  Button.init(action:label:)(sub_1000E36A8, v28, sub_1000DF054, 0, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v6, enum case for ImageTranslationButtonStyle.Style.secondary(_:), v68);
  ImageTranslationButtonStyle.init(style:highlighted:)(v6, 0);
  v29 = sub_100012334(&qword_10028BCB8, &qword_10028BCA0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v30 = sub_100007D5C(&qword_100291778, (uint64_t (*)(uint64_t))&type metadata accessor for ImageTranslationButtonStyle, (uint64_t)&protocol conformance descriptor for ImageTranslationButtonStyle);
  v31 = v64;
  v32 = v67;
  View.buttonStyle<A>(_:)(v8, v64, v67, v29, v30);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v8, v32);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v14, v31);
  v33 = *(_QWORD *)(v2 + 88);
  LOBYTE(v85) = *(_BYTE *)(v2 + 80);
  v86 = v33;
  sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v87);
  LOBYTE(v32) = v87;
  KeyPath = swift_getKeyPath(&unk_1001EE478);
  v35 = swift_allocObject(&unk_10026A0F8, 17, 7);
  *(_BYTE *)(v35 + 16) = v32;
  v36 = v71;
  v37 = v73;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v18, v16, v73);
  v38 = v69;
  v39 = (uint64_t *)&v18[*(int *)(v69 + 36)];
  *v39 = KeyPath;
  v39[1] = (uint64_t)sub_1000E4F98;
  v39[2] = v35;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
  v40 = LocalizedStringKey.init(stringLiteral:)(0x505F45534F4F4843, 0xEC0000004F544F48);
  v42 = v41;
  LOBYTE(v16) = v43;
  v45 = v44;
  v46 = sub_1000E30D4(&qword_100291780, &qword_100291708, &qword_10028BCA0, &qword_10028BCB8);
  v47 = (uint64_t)v70;
  View.accessibilityLabel(_:)(v40, v42, v16 & 1, v45, v38, v46);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v42);
  sub_10000A020((uint64_t)v18, &qword_100291708);
  v48 = (uint64_t)v74;
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000011, 0x80000001001FCCA0, v76);
  sub_10000A020(v47, &qword_100291710);
  v49 = *(_QWORD *)(v2 + 88);
  LOBYTE(v85) = *(_BYTE *)(v2 + 80);
  v86 = v49;
  State.wrappedValue.getter(&v87);
  if ((_BYTE)v87)
    v50 = 0.6;
  else
    v50 = 1.0;
  v51 = v75;
  sub_10000B074(v48, v75, &qword_100291710);
  v52 = v77;
  *(double *)(v51 + *(int *)(v77 + 36)) = v50;
  sub_10000A020(v48, &qword_100291710);
  v54 = v81;
  v53 = v82;
  v55 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, enum case for DynamicTypeSize.large(_:), v83);
  v56 = sub_10001B6DC(&qword_100291798, &qword_100291718, (void (*)(void))sub_1000E2488);
  v57 = v78;
  View.dynamicTypeSize(_:)(v54, v52, v56);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  sub_10000A020(v51, &qword_100291718);
  v58 = sub_100006DF4(&qword_10028AB30);
  v85 = v52;
  v86 = v56;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v85, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v60 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v61 = v79;
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1000DF090, 0, v79, v58, OpaqueTypeConformance2, v60);
  return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v57, v61);
}

uint64_t sub_1000DAB64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t OpaqueTypeConformance2;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96[16];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v2 = v1;
  v95 = a1;
  v3 = type metadata accessor for DynamicTypeSize(0);
  v93 = *(_QWORD *)(v3 - 8);
  v94 = v3;
  __chkstk_darwin(v3);
  v92 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for ImageTranslationButtonStyle.Style(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v75 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for ImageTranslationButtonStyle(0);
  v82 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImageTranslationView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_1002917F8);
  v77 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100006DF4(&qword_100291800);
  v81 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100006DF4(&qword_100291808);
  __chkstk_darwin(v76);
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100006DF4(&qword_100291810);
  v19 = __chkstk_darwin(v85);
  v84 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v86 = (char *)&v74 - v21;
  v88 = sub_100006DF4(&qword_100291818);
  __chkstk_darwin(v88);
  v87 = (uint64_t)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100006DF4(&qword_100291820);
  v90 = *(_QWORD *)(v23 - 8);
  v91 = v23;
  __chkstk_darwin(v23);
  v89 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032D68(v2, (uint64_t)v11, type metadata accessor for ImageTranslationView);
  v25 = *(unsigned __int8 *)(v9 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_10026A030, v26 + v10, v25 | 7);
  sub_10005DDA8((uint64_t)v11, v27 + v26, type metadata accessor for ImageTranslationView);
  v97 = v2;
  v28 = sub_100006DF4(&qword_100291828);
  v29 = sub_1000E3068();
  Button.init(action:label:)(sub_1000E3054, v27, sub_1000E3060, v96, v28, v29);
  v30 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v75, enum case for ImageTranslationButtonStyle.Style.primary(_:), v79);
  ImageTranslationButtonStyle.init(style:highlighted:)(v30, 0);
  v31 = sub_100012334(&qword_100291838, &qword_1002917F8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v32 = sub_100007D5C(&qword_100291778, (uint64_t (*)(uint64_t))&type metadata accessor for ImageTranslationButtonStyle, (uint64_t)&protocol conformance descriptor for ImageTranslationButtonStyle);
  v33 = v80;
  View.buttonStyle<A>(_:)(v7, v12, v80, v31, v32);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v7, v33);
  v34 = v12;
  v35 = v76;
  (*(void (**)(char *, uint64_t))(v77 + 8))(v14, v34);
  v36 = *(_QWORD *)(v2 + 88);
  LOBYTE(v98) = *(_BYTE *)(v2 + 80);
  v99 = v36;
  sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v100);
  LOBYTE(v7) = v100;
  KeyPath = swift_getKeyPath(&unk_1001EE478);
  v38 = swift_allocObject(&unk_10026A058, 17, 7);
  *(_BYTE *)(v38 + 16) = (_BYTE)v7;
  v39 = v81;
  v40 = v83;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v18, v16, v83);
  v41 = (uint64_t *)&v18[*(int *)(v35 + 36)];
  *v41 = KeyPath;
  v41[1] = (uint64_t)sub_1000E4F98;
  v41[2] = v38;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v40);
  if (sub_1000D8390())
  {
    v42 = 0xD000000000000013;
    v43 = 0x80000001001FCC80;
  }
  else
  {
    v42 = 0x4349505F454B4154;
    v43 = 0xEC00000045525554;
  }
  v44 = LocalizedStringKey.init(stringLiteral:)(v42, v43);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = sub_1000E30D4(&qword_100291840, &qword_100291808, &qword_1002917F8, &qword_100291838);
  v52 = v48 & 1;
  v53 = (uint64_t)v84;
  View.accessibilityLabel(_:)(v44, v46, v52, v50, v35, v51);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v46);
  sub_10000A020((uint64_t)v18, &qword_100291808);
  v54 = sub_1000D8390();
  v55 = !v54;
  if (v54)
    v56 = 0xD000000000000017;
  else
    v56 = 0xD000000000000011;
  if (v55)
    v57 = 0x80000001001FCC40;
  else
    v57 = 0x80000001001FCC60;
  v58 = (uint64_t)v86;
  ModifiedContent<>.accessibilityIdentifier(_:)(v56, v57, v85);
  swift_bridgeObjectRelease(v57);
  sub_10000A020(v53, &qword_100291810);
  v59 = *(_QWORD *)(v2 + 88);
  LOBYTE(v98) = *(_BYTE *)(v2 + 80);
  v99 = v59;
  State.wrappedValue.getter(&v100);
  if ((_BYTE)v100)
    v60 = 0.6;
  else
    v60 = 1.0;
  v61 = v87;
  sub_10000B074(v58, v87, &qword_100291810);
  v62 = v88;
  *(double *)(v61 + *(int *)(v88 + 36)) = v60;
  sub_10000A020(v58, &qword_100291810);
  v64 = v92;
  v63 = v93;
  v65 = v94;
  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v92, enum case for DynamicTypeSize.large(_:), v94);
  v66 = sub_10001B6DC(&qword_100291848, &qword_100291818, (void (*)(void))sub_1000E31D4);
  v67 = v89;
  View.dynamicTypeSize(_:)(v64, v62, v66);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  v68 = sub_10000A020(v61, &qword_100291818);
  __chkstk_darwin(v68);
  *(&v74 - 2) = v2;
  v69 = sub_100006DF4(&qword_10028AB30);
  v98 = v62;
  v99 = v66;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v71 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v72 = v91;
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1000E3278, &v74 - 4, v91, v69, OpaqueTypeConformance2, v71);
  return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v67, v72);
}

uint64_t sub_1000DB340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  void (**v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void (**v75)(_QWORD, _QWORD, _QWORD);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  __n128 v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t result;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t OpaqueTypeConformance2;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  void (**v195)(_QWORD, _QWORD, _QWORD);
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  void (**v250)(_QWORD, _QWORD, _QWORD);
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void (**v270)(_QWORD, _QWORD, _QWORD);
  uint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  char v277;
  id v278;
  unsigned __int8 v279;

  v2 = v1;
  v267 = a1;
  v236 = sub_100006DF4(&qword_10028BCA0);
  v235 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v234 = (char *)&v209 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_100006DF4(&qword_100291700);
  v238 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v237 = (char *)&v209 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = sub_100006DF4(&qword_100291708);
  __chkstk_darwin(v240);
  v241 = (char *)&v209 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = sub_100006DF4(&qword_100291710);
  v6 = __chkstk_darwin(v243);
  v242 = (char *)&v209 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v244 = (char *)&v209 - v8;
  v263 = sub_100006DF4(&qword_100291718);
  __chkstk_darwin(v263);
  v245 = (uint64_t)&v209 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = sub_100006DF4(&qword_100291720);
  v248 = *(_QWORD *)(v265 - 8);
  __chkstk_darwin(v265);
  v247 = (char *)&v209 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_100006DF4(&qword_1002916F0);
  v250 = *(void (***)(_QWORD, _QWORD, _QWORD))(v266 - 8);
  v11 = __chkstk_darwin(v266);
  v246 = (char *)&v209 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v249 = (char *)&v209 - v13;
  v262 = sub_100006DF4(&qword_100291728);
  __chkstk_darwin(v262);
  v264 = (char *)&v209 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = type metadata accessor for DynamicTypeSize(0);
  v258 = *(_QWORD *)(v259 - 8);
  __chkstk_darwin(v259);
  v257 = (char *)&v209 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = type metadata accessor for ImageTranslationButtonStyle.Style(0);
  v251 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v253 = (char *)&v209 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ImageTranslationButtonStyle(0);
  v255 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v254 = (char *)&v209 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4(&qword_100291730);
  __chkstk_darwin(v19);
  v210 = (char *)&v209 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100006DF4(&qword_100291738);
  v212 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v211 = (char *)&v209 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100006DF4(&qword_100291740);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v214 = (char *)&v209 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = sub_100006DF4(&qword_100291748);
  v218 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v217 = (char *)&v209 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_100006DF4(&qword_100291750);
  __chkstk_darwin(v220);
  v221 = (char *)&v209 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_100006DF4(&qword_100291758);
  v25 = __chkstk_darwin(v223);
  v222 = (char *)&v209 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v224 = (char *)&v209 - v27;
  v256 = sub_100006DF4(&qword_100291760);
  __chkstk_darwin(v256);
  v225 = (uint64_t)&v209 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = sub_100006DF4(&qword_100291768);
  v228 = *(_QWORD *)(v260 - 8);
  __chkstk_darwin(v260);
  v227 = (char *)&v209 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_100006DF4(&qword_100291770);
  v230 = *(_QWORD *)(v261 - 8);
  v30 = __chkstk_darwin(v261);
  v226 = (char *)&v209 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v229 = (char *)&v209 - v32;
  v33 = type metadata accessor for ImageTranslationView(0);
  v231 = *(_QWORD *)(v33 - 8);
  v34 = *(_QWORD *)(v231 + 64);
  v35 = __chkstk_darwin(v33);
  v232 = (uint64_t)&v209 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v209 - v37;
  v39 = __chkstk_darwin(v36);
  v41 = (char *)&v209 - v40;
  v42 = __chkstk_darwin(v39);
  v44 = (char *)&v209 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v209 - v45;
  v47 = *(_QWORD *)(v1 + 88);
  LOBYTE(v270) = *(_BYTE *)(v1 + 80);
  v271 = v47;
  v268 = sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v274);
  v48 = v274;
  sub_100032D68(v2, (uint64_t)v46, type metadata accessor for ImageTranslationView);
  v269 = v2;
  v233 = v33;
  if (v48 == 1)
  {
    sub_100032DAC((uint64_t)v46, type metadata accessor for ImageTranslationView);
    v49 = 1;
  }
  else
  {
    v209 = v17;
    v50 = &v46[*(int *)(v33 + 60)];
    v51 = *(_QWORD *)v50;
    v52 = *((_QWORD *)v50 + 1);
    v53 = type metadata accessor for ConversationContext(0);
    v54 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    v55 = EnvironmentObject.projectedValue.getter(v51, v52, v53, v54);
    KeyPath = swift_getKeyPath(&unk_1001EE430);
    EnvironmentObject.Wrapper.subscript.getter(&v270, KeyPath, v55, v54);
    swift_release(KeyPath);
    swift_release(v55);
    v57 = v270;
    v58 = v271;
    v59 = v272;
    v60 = v273;
    v274 = (uint64_t)v270;
    v275 = v271;
    v276 = v272;
    v277 = v273;
    sub_100006DF4(&qword_100291428);
    Binding.wrappedValue.getter(&v278);
    swift_release(v58);
    swift_release(v57);
    sub_1000E05B8(v59, v60);
    if (v279 == 255)
    {
      sub_100032D68((uint64_t)v46, (uint64_t)v44, type metadata accessor for ImageTranslationView);
      sub_100032DAC((uint64_t)v44, type metadata accessor for ImageTranslationView);
      sub_100032DAC((uint64_t)v46, type metadata accessor for ImageTranslationView);
      v49 = 0;
    }
    else
    {
      sub_1000E05B8(v278, v279);
      sub_100032D68((uint64_t)v46, (uint64_t)v44, type metadata accessor for ImageTranslationView);
      v61 = *((_QWORD *)v44 + 9);
      LOBYTE(v270) = v44[64];
      v271 = v61;
      State.wrappedValue.getter(&v274);
      sub_100032DAC((uint64_t)v44, type metadata accessor for ImageTranslationView);
      sub_100032DAC((uint64_t)v46, type metadata accessor for ImageTranslationView);
      v49 = v274 ^ 1;
    }
    v2 = v269;
    v17 = v209;
  }
  v62 = sub_1000D8390();
  sub_100032D68(v2, (uint64_t)v41, type metadata accessor for ImageTranslationView);
  if (v62)
  {
    sub_100032DAC((uint64_t)v41, type metadata accessor for ImageTranslationView);
    LODWORD(v268) = 0;
  }
  else
  {
    v63 = *((_QWORD *)v41 + 1);
    LOBYTE(v270) = *v41;
    v271 = v63;
    State.wrappedValue.getter(&v274);
    sub_100032DAC((uint64_t)v41, type metadata accessor for ImageTranslationView);
    LODWORD(v268) = v274;
  }
  v64 = sub_1000D8390();
  sub_100032D68(v2, (uint64_t)v38, type metadata accessor for ImageTranslationView);
  if (v64)
  {
    sub_100032DAC((uint64_t)v38, type metadata accessor for ImageTranslationView);
  }
  else
  {
    v65 = *((_QWORD *)v38 + 3);
    LOBYTE(v270) = v38[16];
    v271 = v65;
    State.wrappedValue.getter(&v274);
    sub_100032DAC((uint64_t)v38, type metadata accessor for ImageTranslationView);
    v66 = 0.0;
    if (v274 != 1)
      goto LABEL_16;
  }
  if ((v49 & 1) != 0)
    v66 = 0.6;
  else
    v66 = 1.0;
LABEL_16:
  if (!sub_1000D8390())
  {
    v154 = v232;
    sub_100032D68(v2, v232, type metadata accessor for ImageTranslationView);
    v155 = *(unsigned __int8 *)(v231 + 80);
    v156 = (v155 + 16) & ~v155;
    v157 = swift_allocObject(&unk_100269FB8, v156 + v34, v155 | 7);
    v158 = sub_10005DDA8(v154, v157 + v156, type metadata accessor for ImageTranslationView);
    __chkstk_darwin(v158);
    v208 = v2;
    v159 = v234;
    Button.init(action:label:)(sub_1000E1EE8, v157, sub_1000E1EF4, &v207, &type metadata for Image, &protocol witness table for Image);
    v160 = v253;
    (*(void (**)(char *, _QWORD, uint64_t))(v251 + 104))(v253, enum case for ImageTranslationButtonStyle.Style.secondary(_:), v252);
    v161 = v254;
    ImageTranslationButtonStyle.init(style:highlighted:)(v160, v268);
    v162 = sub_100012334(&qword_10028BCB8, &qword_10028BCA0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v163 = sub_100007D5C(&qword_100291778, (uint64_t (*)(uint64_t))&type metadata accessor for ImageTranslationButtonStyle, (uint64_t)&protocol conformance descriptor for ImageTranslationButtonStyle);
    v164 = v237;
    v165 = v236;
    View.buttonStyle<A>(_:)(v161, v236, v17, v162, v163);
    (*(void (**)(char *, uint64_t))(v255 + 8))(v161, v17);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v159, v165);
    v166 = swift_getKeyPath(&unk_1001EE478);
    v167 = swift_allocObject(&unk_100269FE0, 17, 7);
    *(_BYTE *)(v167 + 16) = v49 & 1;
    v168 = v238;
    v169 = (uint64_t)v241;
    v170 = v239;
    (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v241, v164, v239);
    v171 = v240;
    v172 = (uint64_t *)(v169 + *(int *)(v240 + 36));
    *v172 = v166;
    v172[1] = (uint64_t)sub_1000E2470;
    v172[2] = v167;
    (*(void (**)(char *, uint64_t))(v168 + 8))(v164, v170);
    v173 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001001FCB60);
    v175 = v174;
    LOBYTE(v170) = v176;
    v178 = v177;
    v179 = sub_1000E30D4(&qword_100291780, &qword_100291708, &qword_10028BCA0, &qword_10028BCB8);
    v180 = (uint64_t)v242;
    View.accessibilityLabel(_:)(v173, v175, v170 & 1, v178, v171, v179);
    swift_bridgeObjectRelease(v178);
    swift_bridgeObjectRelease(v175);
    sub_10000A020(v169, &qword_100291708);
    v181 = (uint64_t)v244;
    ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000016, 0x80000001001FCB80, v243);
    sub_10000A020(v180, &qword_100291710);
    v182 = v245;
    sub_10000B074(v181, v245, &qword_100291710);
    v183 = v263;
    *(double *)(v182 + *(int *)(v263 + 36)) = v66;
    sub_10000A020(v181, &qword_100291710);
    v184 = v258;
    v185 = v257;
    v186 = v259;
    (*(void (**)(char *, _QWORD, uint64_t))(v258 + 104))(v257, enum case for DynamicTypeSize.large(_:), v259);
    v187 = sub_10001B6DC(&qword_100291798, &qword_100291718, (void (*)(void))sub_1000E2488);
    v188 = v247;
    View.dynamicTypeSize(_:)(v185, v183, v187);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v185, v186);
    v189 = sub_10000A020(v182, &qword_100291718);
    __chkstk_darwin(v189);
    v208 = v269;
    v190 = sub_100006DF4(&qword_10028AB30);
    v270 = (void (**)(_QWORD, _QWORD, _QWORD))v183;
    v271 = v187;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    v192 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v193 = v246;
    v194 = v265;
    View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1000E252C, &v207, v265, v190, OpaqueTypeConformance2, v192);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v188, v194);
    v195 = v250;
    v196 = v249;
    v197 = v266;
    ((void (**)(char *, char *, uint64_t))v250)[4](v249, v193, v266);
    v198 = v264;
    ((void (**)(char *, char *, uint64_t))v195)[2](v264, v196, v197);
    swift_storeEnumTagMultiPayload(v198, v262, 1);
    v199 = sub_10001B6DC(&qword_1002917A8, &qword_100291760, (void (*)(void))sub_1000E2534);
    v270 = (void (**)(_QWORD, _QWORD, _QWORD))v256;
    v271 = v199;
    v200 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    v270 = (void (**)(_QWORD, _QWORD, _QWORD))v260;
    v271 = v190;
    v272 = (void *)v200;
    v273 = v192;
    v201 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v270 = (void (**)(_QWORD, _QWORD, _QWORD))v194;
    v271 = v190;
    v272 = (void *)OpaqueTypeConformance2;
    v273 = v192;
    v202 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v198, v261, v197, v201, v202);
    return ((uint64_t (*)(char *, uint64_t))v195[1])(v196, v197);
  }
  v67 = v233;
  v68 = (uint64_t *)(v2 + *(int *)(v233 + 60));
  v69 = *v68;
  if (*v68)
  {
    v70 = v17;
    v71 = swift_getKeyPath(&unk_1001EE430);
    v72 = swift_getKeyPath(&unk_1001EE458);
    swift_retain(v69);
    static Published.subscript.getter(&v270, v73, v71);
    swift_release(v69);
    swift_release(v71);
    swift_release(v72);
    v74 = v271;
    if (v271 == 255)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v75 = v270;
    v76 = v2 + *(int *)(v67 + 80);
    v77 = *(_QWORD *)v76;
    v78 = *(_QWORD *)(v76 + 8);
    v79 = *(unsigned __int8 *)(v76 + 16);
    v80 = type metadata accessor for VisualTranslationObservable(0);
    v81 = sub_100007D5C(&qword_1002915E0, (uint64_t (*)(uint64_t))&type metadata accessor for VisualTranslationObservable, (uint64_t)&protocol conformance descriptor for VisualTranslationErrorViewModel);
    v82 = StateObject.wrappedValue.getter(v77, v78, v79, v80, v81);
    v270 = v75;
    v271 = v82;
    swift_retain(v82);
    v250 = v75;
    LODWORD(v269) = v74;
    sub_1000E05CC(v75, v74);
    v83 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001001FCBA0);
    v87 = *v68;
    if (*v68)
    {
      v88 = v83;
      v89 = v84;
      v90 = v85;
      v91 = v86;
      v249 = (char *)v82;
      v68 = (uint64_t *)swift_getKeyPath(&unk_1001EE430);
      v92 = swift_getKeyPath(&unk_1001EE458);
      swift_retain(v87);
      static Published.subscript.getter(&v274, v93, v68);
      swift_release(v87);
      swift_release(v68);
      swift_release(v92);
      if (v275 != 255)
      {
        v274 = Image.init(uiImage:)(v274);
        v94 = sub_1000E26E8();
        v95 = v210;
        SharePreview<>.init(_:image:)(v88, v89, v90 & 1, v91, &v274, &type metadata for Image, v94);
        v96 = sub_1000E272C();
        v206 = v95;
        v97 = v211;
        ShareLink.init<A>(item:subject:message:preview:label:)(&v270, 0, 0, 0, 0, 0, 0, 0, 0, v206, sub_1000DFD68, 0, &type metadata for Image, &type metadata for Never, &type metadata for Image, &type metadata for ImageTranslationView.SharedImageTranslation, v94, &protocol witness table for Never, &protocol witness table for Image,
          v96);
        v98 = sub_100006DF4(&qword_1002917D8);
        v99 = type metadata accessor for PresentationDetent(0);
        v100 = *(_QWORD *)(v99 - 8);
        v101 = *(_QWORD *)(v100 + 72);
        v102 = *(unsigned __int8 *)(v100 + 80);
        v103 = (v102 + 32) & ~v102;
        v104 = swift_allocObject(v98, v103 + 2 * v101, v102 | 7);
        *(_OWORD *)(v104 + 16) = xmmword_1001E4D60;
        v105 = static PresentationDetent.medium.getter();
        static PresentationDetent.large.getter(v105);
        v106 = sub_1000E2DD8(v104);
        swift_setDeallocating(v104);
        swift_arrayDestroy(v104 + v103, 2, v99);
        swift_deallocClassInstance(v104, 32, 7);
        v107 = sub_100012334(&qword_1002917C0, &qword_100291738, (uint64_t)&protocol conformance descriptor for ShareLink<A, B, C, D>);
        v108 = v214;
        v109 = v213;
        View.presentationDetents(_:)(v106, v213, v107);
        v110 = swift_bridgeObjectRelease(v106);
        (*(void (**)(char *, uint64_t, __n128))(v212 + 8))(v97, v109, v110);
        v111 = v253;
        (*(void (**)(char *, _QWORD, uint64_t))(v251 + 104))(v253, enum case for ImageTranslationButtonStyle.Style.secondary(_:), v252);
        v112 = v254;
        ImageTranslationButtonStyle.init(style:highlighted:)(v111, v268);
        v270 = (void (**)(_QWORD, _QWORD, _QWORD))v109;
        v271 = v107;
        v113 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
        v114 = sub_100007D5C(&qword_100291778, (uint64_t (*)(uint64_t))&type metadata accessor for ImageTranslationButtonStyle, (uint64_t)&protocol conformance descriptor for ImageTranslationButtonStyle);
        v115 = v217;
        v116 = v216;
        View.buttonStyle<A>(_:)(v112, v216, v70, v113, v114);
        (*(void (**)(char *, uint64_t))(v255 + 8))(v112, v70);
        (*(void (**)(char *, uint64_t))(v215 + 8))(v108, v116);
        v117 = swift_getKeyPath(&unk_1001EE478);
        v118 = swift_allocObject(&unk_10026A008, 17, 7);
        *(_BYTE *)(v118 + 16) = v49 & 1;
        v119 = v218;
        v120 = (uint64_t)v221;
        v121 = v219;
        (*(void (**)(char *, char *, uint64_t))(v218 + 16))(v221, v115, v219);
        v122 = v220;
        v123 = (uint64_t *)(v120 + *(int *)(v220 + 36));
        *v123 = v117;
        v123[1] = (uint64_t)sub_1000E4F98;
        v123[2] = v118;
        (*(void (**)(char *, uint64_t))(v119 + 8))(v115, v121);
        v124 = LocalizedStringKey.init(stringLiteral:)(0x4D495F4552414853, 0xEB00000000454741);
        v126 = v125;
        LOBYTE(v118) = v127;
        v129 = v128;
        v130 = sub_1000E25B8();
        v131 = (uint64_t)v222;
        View.accessibilityLabel(_:)(v124, v126, v118 & 1, v129, v122, v130);
        swift_bridgeObjectRelease(v129);
        swift_bridgeObjectRelease(v126);
        sub_10000A020(v120, &qword_100291750);
        v132 = (uint64_t)v224;
        ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000010, 0x80000001001FCBC0, v223);
        sub_10000A020(v131, &qword_100291758);
        v133 = v225;
        sub_10000B074(v132, v225, &qword_100291758);
        v134 = v256;
        *(double *)(v133 + *(int *)(v256 + 36)) = v66;
        sub_10000A020(v132, &qword_100291758);
        v135 = v258;
        v136 = v257;
        v137 = v259;
        (*(void (**)(char *, _QWORD, uint64_t))(v258 + 104))(v257, enum case for DynamicTypeSize.large(_:), v259);
        v138 = sub_10001B6DC(&qword_1002917A8, &qword_100291760, (void (*)(void))sub_1000E2534);
        v139 = v227;
        View.dynamicTypeSize(_:)(v136, v134, v138);
        (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v137);
        sub_10000A020(v133, &qword_100291760);
        v140 = sub_100006DF4(&qword_10028AB30);
        v270 = (void (**)(_QWORD, _QWORD, _QWORD))v134;
        v271 = v138;
        v141 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
        v142 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
        v143 = v226;
        v144 = v260;
        View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1000DFDA4, 0, v260, v140, v141, v142);
        (*(void (**)(char *, uint64_t))(v228 + 8))(v139, v144);
        v145 = v230;
        v146 = v229;
        v147 = v261;
        (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v229, v143, v261);
        v148 = v264;
        (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v264, v146, v147);
        swift_storeEnumTagMultiPayload(v148, v262, 0);
        v270 = (void (**)(_QWORD, _QWORD, _QWORD))v144;
        v271 = v140;
        v272 = (void *)v141;
        v273 = v142;
        v149 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
        v150 = sub_10001B6DC(&qword_100291798, &qword_100291718, (void (*)(void))sub_1000E2488);
        v270 = (void (**)(_QWORD, _QWORD, _QWORD))v263;
        v271 = v150;
        v151 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
        v270 = (void (**)(_QWORD, _QWORD, _QWORD))v265;
        v271 = v140;
        v272 = (void *)v151;
        v273 = v142;
        v152 = swift_getOpaqueTypeConformance2(&v270, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
        _ConditionalContent<>.init(storage:)(v148, v147, v266, v149, v152);
        sub_1000E05B8(v250, v269);
        swift_release(v249);
        return (*(uint64_t (**)(char *, uint64_t))(v145 + 8))(v146, v147);
      }
      goto LABEL_24;
    }
  }
LABEL_25:
  v203 = v68[1];
  v204 = type metadata accessor for ConversationContext(0);
  v205 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  result = EnvironmentObject.error()(0, v203, v204, v205);
  __break(1u);
  return result;
}

void sub_1000DCBB0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000F66C(v0, (uint64_t)qword_1002AA320);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Camera preview is going away, removing guidance", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_1000D057C();
}

uint64_t sub_1000DCC88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[9];
  uint64_t v15;

  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA320);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Camera preview is going away, removing guidance", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_1000D057C();
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Camera preview is going away, turning off flashlight", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(_QWORD *)(a1 + 8);
  v14[1] = *(_BYTE *)a1;
  v15 = v11;
  v14[0] = 0;
  v12 = sub_100006DF4(&qword_10028CF50);
  return State.wrappedValue.setter(v14, v12);
}

uint64_t sub_1000DCE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD);
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t KeyPath;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  int *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _QWORD *v165;
  __int128 v166;
  char v167;
  _QWORD *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char v200;
  void (*v201)(char *, uint64_t);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _OWORD *v210;
  __int128 v211;
  uint64_t v212;
  char v213;
  double v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  double v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  double v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  double v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  uint64_t result;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  char *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t (*v316)(char *, uint64_t, uint64_t);
  unsigned int v317;
  void (*v318)(char *, _QWORD, uint64_t);
  void (*v319)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  int *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  double v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t v357;

  v332 = a2;
  v3 = sub_100006DF4(&qword_100291858);
  __chkstk_darwin(v3);
  v279 = (uint64_t *)((char *)&v276 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v277 = sub_100006DF4(&qword_100291860);
  __chkstk_darwin(v277);
  v281 = (uint64_t)&v276 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = sub_100006DF4(&qword_100291868);
  __chkstk_darwin(v278);
  v283 = (uint64_t)&v276 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = sub_100006DF4(&qword_100291870);
  __chkstk_darwin(v280);
  v284 = (uint64_t)&v276 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = sub_100006DF4(&qword_100291878);
  __chkstk_darwin(v282);
  v287 = (uint64_t)&v276 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = sub_100006DF4(&qword_100291880);
  __chkstk_darwin(v285);
  v286 = (uint64_t)&v276 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v289 = sub_100006DF4(&qword_100291888);
  __chkstk_darwin(v289);
  v290 = (uint64_t)&v276 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = sub_100006DF4(&qword_100291890);
  v329 = *(_QWORD *)(v330 - 8);
  __chkstk_darwin(v330);
  v288 = (char *)&v276 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100291898);
  v13 = __chkstk_darwin(v12);
  v331 = (uint64_t)&v276 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v335 = (char *)&v276 - v15;
  v16 = sub_100006DF4(&qword_10028C290);
  __chkstk_darwin(v16);
  v298 = (uint64_t *)((char *)&v276 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for ImageTranslationView(0);
  v291 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v292 = v19;
  v293 = (uint64_t)&v276 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006DF4(&qword_10028C288);
  __chkstk_darwin(v20);
  v295 = (uint64_t *)((char *)&v276 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v336 = type metadata accessor for CombinedLanguagePickerPill(0);
  v324 = *(_QWORD *)(v336 - 8);
  v22 = __chkstk_darwin(v336);
  v300 = (uint64_t)&v276 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v299 = (uint64_t)&v276 - v24;
  v25 = sub_100006DF4(&qword_1002918A0);
  v26 = __chkstk_darwin(v25);
  v328 = (uint64_t)&v276 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v327 = (uint64_t)&v276 - v28;
  v309 = sub_100006DF4(&qword_10028AB30);
  v305 = *(_QWORD *)(v309 - 8);
  __chkstk_darwin(v309);
  v304 = (char *)&v276 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v308 = sub_100006DF4(&qword_10028E098);
  __chkstk_darwin(v308);
  v307 = (char *)&v276 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v311 = sub_100006DF4(&qword_1002918A8);
  v310 = *(_QWORD *)(v311 - 8);
  __chkstk_darwin(v311);
  v306 = (char *)&v276 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = sub_100006DF4(&qword_1002918B0);
  __chkstk_darwin(v303);
  v313 = (char *)&v276 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = sub_100006DF4(&qword_1002918B8);
  __chkstk_darwin(v312);
  v316 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v276 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v315 = sub_100006DF4(&qword_1002918C0);
  v34 = __chkstk_darwin(v315);
  v326 = (uint64_t)&v276 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v314 = (uint64_t)&v276 - v37;
  __chkstk_darwin(v36);
  v338 = (uint64_t)&v276 - v38;
  v302 = type metadata accessor for Material(0);
  __chkstk_darwin(v302);
  v301 = (char *)&v276 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for UserInterfaceSizeClass(0);
  v41 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v296 = (char *)&v276 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100006DF4(&qword_10028CFE8);
  v44 = __chkstk_darwin(v43);
  v323 = (uint64_t)&v276 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v47 = (char *)&v276 - v46;
  v48 = sub_100006DF4(&qword_10028CE40);
  v49 = __chkstk_darwin(v48);
  v294 = (uint64_t)&v276 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v49);
  v322 = (char *)&v276 - v52;
  v53 = __chkstk_darwin(v51);
  v333 = (uint64_t *)((char *)&v276 - v54);
  v55 = __chkstk_darwin(v53);
  v57 = (char *)&v276 - v56;
  v58 = __chkstk_darwin(v55);
  v60 = (char *)&v276 - v59;
  __chkstk_darwin(v58);
  v62 = (uint64_t *)((char *)&v276 - v61);
  v63 = sub_100006DF4(&qword_1002918C8);
  v64 = __chkstk_darwin(v63);
  v325 = (uint64_t)&v276 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  v337 = (uint64_t)&v276 - v66;
  v334 = (int *)v18;
  v67 = *(int *)(v18 + 64);
  v339 = a1;
  v320 = a1 + v67;
  sub_1000D58EC(v62);
  v68 = *(void (**)(_QWORD))(v41 + 104);
  v317 = enum case for UserInterfaceSizeClass.compact(_:);
  v318 = (void (*)(char *, _QWORD, uint64_t))v68;
  v68(v60);
  v319 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
  v319(v60, 0, 1, v40);
  v321 = v43;
  v69 = (uint64_t)&v47[*(int *)(v43 + 48)];
  sub_10000B074((uint64_t)v62, (uint64_t)v47, &qword_10028CE40);
  sub_10000B074((uint64_t)v60, v69, &qword_10028CE40);
  v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v71 = v70(v47, 1, v40);
  v297 = v41;
  if (v71 != 1)
  {
    sub_10000B074((uint64_t)v47, (uint64_t)v57, &qword_10028CE40);
    if (v70((char *)v69, 1, v40) != 1)
    {
      v75 = v296;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v296, v69, v40);
      v76 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v77 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v75, v40, v76);
      v78 = *(void (**)(char *, uint64_t))(v41 + 8);
      v78(v75, v40);
      sub_10000A020((uint64_t)v60, &qword_10028CE40);
      sub_10000A020((uint64_t)v62, &qword_10028CE40);
      v78(v57, v40);
      v72 = sub_10000A020((uint64_t)v47, &qword_10028CE40);
      if ((v77 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      v73 = sub_100006DF4(&qword_1002918D0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v337, 1, 1, v73);
      v74 = v339;
      goto LABEL_10;
    }
    sub_10000A020((uint64_t)v60, &qword_10028CE40);
    sub_10000A020((uint64_t)v62, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v57, v40);
LABEL_6:
    sub_10000A020((uint64_t)v47, &qword_10028CFE8);
    goto LABEL_7;
  }
  sub_10000A020((uint64_t)v60, &qword_10028CE40);
  sub_10000A020((uint64_t)v62, &qword_10028CE40);
  if (v70((char *)v69, 1, v40) != 1)
    goto LABEL_6;
  v72 = sub_10000A020((uint64_t)v47, &qword_10028CE40);
LABEL_9:
  v79 = static Color.clear.getter(v72);
  v80 = static Alignment.center.getter(v79);
  v82 = _FrameLayout.init(width:height:alignment:)(&v352, 0, 1, 0x4055800000000000, 0, v80, v81);
  v83 = v352;
  v84 = v353;
  v85 = v354;
  v86 = v355;
  v88 = v356;
  v87 = v357;
  v89 = v301;
  static Material.bar.getter(v82);
  v90 = AnyShapeStyle.init<A>(_:)(v89, v302, &protocol witness table for Material);
  v91 = static Edge.Set.all.getter(v90);
  *(_QWORD *)&v340 = v79;
  WORD4(v340) = 256;
  *(_QWORD *)&v341 = v83;
  BYTE8(v341) = v84;
  *(_QWORD *)&v342 = v85;
  BYTE8(v342) = v86;
  v343 = v88;
  v344 = v87;
  v345 = v90;
  v346 = v91;
  v74 = v339;
  v92 = (uint64_t *)(v339 + v334[12]);
  v93 = *v92;
  v94 = v92[1];
  v347 = v93;
  v348 = v94;
  v95 = sub_100006DF4(&qword_10028B260);
  State.projectedValue.getter(&v349, v95);
  v96 = v349;
  v97 = v350;
  v98 = v351;
  v99 = sub_100006DF4(&qword_100291938);
  v100 = sub_1000E3B8C();
  v101 = v337;
  View.bindGeometry(to:reader:)(v96, v97, sub_1000DE9A0, 0, v99, v100, v98);
  swift_release(v90);
  swift_release(v79);
  swift_release(v97);
  swift_release(v96);
  v102 = sub_100006DF4(&qword_1002918D0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v101, 0, 1, v102);
LABEL_10:
  v103 = v304;
  v104 = *(_QWORD *)(v74 + 40);
  KeyPath = swift_getKeyPath(&unk_1001EE568);
  v106 = swift_getKeyPath(&unk_1001EE590);
  static Published.subscript.getter(&v340, v104, KeyPath);
  swift_release(KeyPath);
  swift_release(v106);
  v107 = v74;
  v108 = (int *)v336;
  if (v340 == 5)
  {
    v109 = 0;
    v110 = 0xE000000000000000;
  }
  else
  {
    sub_1000CF3B8(v340);
  }
  *(_QWORD *)&v340 = v109;
  *((_QWORD *)&v340 + 1) = v110;
  v111 = sub_10000B030();
  Label<>.init<A>(_:systemImage:)(&v340, 0x7269632E6F666E69, 0xEB00000000656C63, &type metadata for String, v111, v112);
  v113 = *(_QWORD *)(v74 + 40);
  v114 = swift_getKeyPath(&unk_1001EE568);
  v115 = swift_getKeyPath(&unk_1001EE590);
  static Published.subscript.getter(&v340, v113, v114);
  swift_release(v114);
  swift_release(v115);
  if (v340 == 5)
  {
    v116 = 0;
    v117 = 0xE000000000000000;
  }
  else
  {
    sub_1000CF590(v340);
    v116 = v118;
    v117 = v119;
  }
  v120 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v121 = (uint64_t)v307;
  v122 = v309;
  View.accessibilityIdentifier(_:)(v116, v117, v309, v120);
  v123 = swift_bridgeObjectRelease(v117);
  (*(void (**)(char *, uint64_t, __n128))(v305 + 8))(v103, v122, v123);
  v124 = sub_1000607B8();
  v125 = sub_1000E3728();
  v126 = v306;
  View.labelStyle<A>(_:)(v125, v308, &type metadata for GuidanceLabelStyle, v124, v125);
  sub_10000A020(v121, &qword_10028E098);
  v127 = v310;
  v128 = (uint64_t)v313;
  v129 = v311;
  (*(void (**)(char *, char *, uint64_t))(v310 + 16))(v313, v126, v311);
  *(_OWORD *)(v128 + *(int *)(v303 + 36)) = xmmword_1001EE850;
  (*(void (**)(char *, uint64_t))(v127 + 8))(v126, v129);
  v130 = *(_QWORD *)(v107 + 40);
  v131 = swift_getKeyPath(&unk_1001EE568);
  v132 = swift_getKeyPath(&unk_1001EE590);
  static Published.subscript.getter(&v340, v130, v131);
  swift_release(v131);
  swift_release(v132);
  if (v340 == 5)
    v133 = 0.0;
  else
    v133 = 1.0;
  v134 = (uint64_t)v316;
  sub_10000B074(v128, (uint64_t)v316, &qword_1002918B0);
  *(double *)(v134 + *(int *)(v312 + 36)) = v133;
  v135 = sub_10000A020(v128, &qword_1002918B0);
  v136 = static Animation.easeInOut.getter(v135);
  v137 = *(_QWORD *)(v107 + 40);
  v138 = swift_getKeyPath(&unk_1001EE568);
  v139 = swift_getKeyPath(&unk_1001EE590);
  static Published.subscript.getter(&v340, v137, v138);
  swift_release(v138);
  swift_release(v139);
  v140 = v340;
  v141 = v314;
  sub_10000B074(v134, v314, &qword_1002918B8);
  v142 = v141 + *(int *)(v315 + 36);
  *(_QWORD *)v142 = v136;
  *(_BYTE *)(v142 + 8) = v140;
  sub_10000A020(v134, &qword_1002918B8);
  sub_1000110A4(v141, v338, &qword_1002918C0);
  *((_QWORD *)&v341 + 1) = &type metadata for TranslateFeatures;
  *(_QWORD *)&v342 = sub_100009BC4();
  LOBYTE(v340) = 2;
  LOBYTE(v136) = isFeatureEnabled(_:)(&v340);
  sub_100009C08(&v340);
  if ((v136 & 1) == 0)
  {
    v185 = 1;
    v184 = v327;
LABEL_23:
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v324 + 56))(v184, v185, 1, v108);
    v186 = v333;
    sub_1000D58EC(v333);
    v187 = (uint64_t)v322;
    v318(v322, v317, v40);
    v319((char *)v187, 0, 1, v40);
    v188 = v323;
    v189 = v323 + *(int *)(v321 + 48);
    sub_10000B074((uint64_t)v186, v323, &qword_10028CE40);
    sub_10000B074(v187, v189, &qword_10028CE40);
    if (v70((char *)v188, 1, v40) == 1)
    {
      sub_10000A020(v187, &qword_10028CE40);
      sub_10000A020((uint64_t)v186, &qword_10028CE40);
      if (v70((char *)v189, 1, v40) == 1)
      {
        v190 = sub_10000A020(v188, &qword_10028CE40);
LABEL_31:
        v203 = static VerticalAlignment.center.getter(v190);
        v204 = (uint64_t)v279;
        *v279 = v203;
        *(_QWORD *)(v204 + 8) = 0;
        *(_BYTE *)(v204 + 16) = 1;
        v205 = sub_100006DF4(&qword_1002918E8);
        v206 = sub_1000DEA94((char *)(v204 + *(int *)(v205 + 44)));
        v207 = static Alignment.center.getter(v206);
        _FrameLayout.init(width:height:alignment:)(&v340, 0, 1, 0x4051000000000000, 0, v207, v208);
        v209 = v281;
        sub_10000B074(v204, v281, &qword_100291858);
        v210 = (_OWORD *)(v209 + *(int *)(v277 + 36));
        v211 = v341;
        *v210 = v340;
        v210[1] = v211;
        v210[2] = v342;
        v212 = sub_10000A020(v204, &qword_100291858);
        v213 = static Edge.Set.horizontal.getter(v212);
        v214 = EdgeInsets.init(_all:)(34.0);
        v216 = v215;
        v218 = v217;
        v220 = v219;
        v221 = v283;
        sub_10000B074(v209, v283, &qword_100291860);
        v222 = v221 + *(int *)(v278 + 36);
        *(_BYTE *)v222 = v213;
        *(double *)(v222 + 8) = v214;
        *(_QWORD *)(v222 + 16) = v216;
        *(_QWORD *)(v222 + 24) = v218;
        *(_QWORD *)(v222 + 32) = v220;
        *(_BYTE *)(v222 + 40) = 0;
        v223 = sub_10000A020(v209, &qword_100291860);
        v224 = static Edge.Set.bottom.getter(v223);
        v225 = EdgeInsets.init(_all:)(36.0);
        v227 = v226;
        v229 = v228;
        v231 = v230;
        v232 = v284;
        sub_10000B074(v221, v284, &qword_100291868);
        v233 = v232 + *(int *)(v280 + 36);
        *(_BYTE *)v233 = v224;
        *(double *)(v233 + 8) = v225;
        *(_QWORD *)(v233 + 16) = v227;
        *(_QWORD *)(v233 + 24) = v229;
        *(_QWORD *)(v233 + 32) = v231;
        *(_BYTE *)(v233 + 40) = 0;
        v234 = sub_10000A020(v221, &qword_100291868);
        v235 = static Edge.Set.top.getter(v234);
        v236 = EdgeInsets.init(_all:)(15.0);
        v238 = v237;
        v240 = v239;
        v242 = v241;
        v243 = v287;
        sub_10000B074(v232, v287, &qword_100291870);
        v244 = v243 + *(int *)(v282 + 36);
        *(_BYTE *)v244 = v235;
        *(double *)(v244 + 8) = v236;
        *(_QWORD *)(v244 + 16) = v238;
        *(_QWORD *)(v244 + 24) = v240;
        *(_QWORD *)(v244 + 32) = v242;
        *(_BYTE *)(v244 + 40) = 0;
        v245 = sub_10000A020(v232, &qword_100291870);
        v246 = v301;
        static Material.bar.getter(v245);
        v247 = AnyShapeStyle.init<A>(_:)(v246, v302, &protocol witness table for Material);
        LOBYTE(v204) = static Edge.Set.all.getter(v247);
        v248 = v286;
        sub_10000B074(v243, v286, &qword_100291878);
        v249 = v248 + *(int *)(v285 + 36);
        *(_QWORD *)v249 = v247;
        *(_BYTE *)(v249 + 8) = v204;
        sub_10000A020(v243, &qword_100291878);
        v250 = v290;
        sub_10000B074(v248, v290, &qword_100291880);
        v251 = v289;
        *(_WORD *)(v250 + *(int *)(v289 + 36)) = 256;
        sub_10000A020(v248, &qword_100291880);
        v252 = (uint64_t *)(v107 + v334[13]);
        v253 = *v252;
        v254 = v252[1];
        v347 = v253;
        v348 = v254;
        v255 = sub_100006DF4(&qword_10028B260);
        State.projectedValue.getter(&v349, v255);
        v256 = v349;
        v257 = v350;
        v258 = v351;
        v259 = sub_10001B6DC(&qword_1002918F0, &qword_100291888, (void (*)(void))sub_1000E376C);
        v260 = v288;
        View.bindGeometry(to:reader:)(v256, v257, sub_1000DED24, 0, v251, v259, v258);
        swift_release(v257);
        swift_release(v256);
        sub_10000A020(v250, &qword_100291888);
        v194 = v329;
        v193 = v330;
        (*(void (**)(char *, char *, uint64_t))(v329 + 32))(v335, v260, v330);
        v192 = 0;
        goto LABEL_32;
      }
    }
    else
    {
      v191 = v294;
      sub_10000B074(v188, v294, &qword_10028CE40);
      if (v70((char *)v189, 1, v40) != 1)
      {
        v195 = v297;
        v196 = v107;
        v197 = v187;
        v198 = v296;
        (*(void (**)(char *, uint64_t, uint64_t))(v297 + 32))(v296, v189, v40);
        v199 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
        v200 = dispatch thunk of static Equatable.== infix(_:_:)(v191, v198, v40, v199);
        v201 = *(void (**)(char *, uint64_t))(v195 + 8);
        v201(v198, v40);
        v202 = v197;
        v107 = v196;
        sub_10000A020(v202, &qword_10028CE40);
        sub_10000A020((uint64_t)v333, &qword_10028CE40);
        v201((char *)v191, v40);
        v190 = sub_10000A020(v188, &qword_10028CE40);
        if ((v200 & 1) != 0)
          goto LABEL_31;
LABEL_29:
        v192 = 1;
        v193 = v330;
        v194 = v329;
LABEL_32:
        v261 = (uint64_t)v335;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v194 + 56))(v335, v192, 1, v193);
        v262 = v337;
        v263 = v325;
        sub_10000B074(v337, v325, &qword_1002918C8);
        v264 = v338;
        v265 = v326;
        sub_10000B074(v338, v326, &qword_1002918C0);
        v266 = v328;
        sub_10000B074(v184, v328, &qword_1002918A0);
        v267 = v331;
        sub_10000B074(v261, v331, &qword_100291898);
        v268 = v184;
        v269 = v332;
        sub_10000B074(v263, v332, &qword_1002918C8);
        v270 = (int *)sub_100006DF4(&qword_1002918E0);
        sub_10000B074(v265, v269 + v270[12], &qword_1002918C0);
        v271 = v269 + v270[16];
        *(_QWORD *)v271 = 0;
        *(_BYTE *)(v271 + 8) = 1;
        sub_10000B074(v266, v269 + v270[20], &qword_1002918A0);
        sub_10000B074(v267, v269 + v270[24], &qword_100291898);
        sub_10000A020(v261, &qword_100291898);
        sub_10000A020(v268, &qword_1002918A0);
        sub_10000A020(v264, &qword_1002918C0);
        sub_10000A020(v262, &qword_1002918C8);
        sub_10000A020(v267, &qword_100291898);
        sub_10000A020(v266, &qword_1002918A0);
        sub_10000A020(v265, &qword_1002918C0);
        return sub_10000A020(v263, &qword_1002918C8);
      }
      sub_10000A020(v187, &qword_10028CE40);
      sub_10000A020((uint64_t)v186, &qword_10028CE40);
      (*(void (**)(uint64_t, uint64_t))(v297 + 8))(v191, v40);
    }
    sub_10000A020(v188, &qword_10028CFE8);
    goto LABEL_29;
  }
  v315 = v40;
  v316 = v70;
  v143 = v293;
  sub_100032D68(v107, v293, type metadata accessor for ImageTranslationView);
  v144 = type metadata accessor for MainActor(0);
  v145 = static MainActor.shared.getter(v144);
  v146 = *(unsigned __int8 *)(v291 + 80);
  v147 = (v146 + 32) & ~v146;
  v148 = v147 + v292;
  v149 = v146 | 7;
  v150 = swift_allocObject(&unk_10026A120, v147 + v292, v146 | 7);
  *(_QWORD *)(v150 + 16) = v145;
  *(_QWORD *)(v150 + 24) = &protocol witness table for MainActor;
  sub_10005DDA8(v143, v150 + v147, type metadata accessor for ImageTranslationView);
  v151 = sub_100032D68(v339, v143, type metadata accessor for ImageTranslationView);
  v152 = static MainActor.shared.getter(v151);
  v153 = swift_allocObject(&unk_10026A148, v148, v149);
  *(_QWORD *)(v153 + 16) = v152;
  *(_QWORD *)(v153 + 24) = &protocol witness table for MainActor;
  v154 = v339;
  sub_10005DDA8(v143, v153 + v147, type metadata accessor for ImageTranslationView);
  v155 = type metadata accessor for LanguageOption(0);
  v156 = v295;
  Binding.init(get:set:)(v295, sub_1000E38E0, v150, sub_1000E3AFC, v153, v155);
  v157 = v334;
  v158 = (uint64_t *)(v154 + v334[14]);
  v159 = *v158;
  v160 = v158[1];
  v161 = type metadata accessor for ConversationManager(0);
  v162 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
  v163 = (void *)EnvironmentObject.projectedValue.getter(v159, v160, v161, v162);
  v164 = swift_getKeyPath(&unk_1001EE5B0);
  v165 = v298;
  EnvironmentObject.Wrapper.subscript.getter(v298, v164, v163, v162);

  swift_release(v164);
  LOBYTE(v349) = 0;
  static Binding.constant(_:)(&v340, &v349, &type metadata for Bool);
  v166 = v340;
  v167 = v341;
  LOBYTE(v347) = 0;
  static Binding.constant(_:)(&v349, &v347, &type metadata for Bool);
  v168 = (_QWORD *)(v154 + v157[15]);
  if (*v168)
  {
    v169 = LOBYTE(v351);
    v171 = v349;
    v170 = v350;
    v172 = *(_QWORD *)(*v168 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_languagesService);
    v173 = (uint64_t)v156;
    v174 = v300;
    sub_1000110A4(v173, v300, &qword_10028C288);
    v175 = (uint64_t)v165;
    v108 = (int *)v336;
    sub_1000110A4(v175, v174 + *(int *)(v336 + 20), &qword_10028C290);
    v176 = v174 + v108[6];
    *(_OWORD *)v176 = v166;
    *(_BYTE *)(v176 + 16) = v167;
    v177 = v174 + v108[7];
    *(_QWORD *)v177 = v171;
    *(_QWORD *)(v177 + 8) = v170;
    *(_BYTE *)(v177 + 16) = v169;
    *(_BYTE *)(v174 + v108[8]) = 0;
    *(_BYTE *)(v174 + v108[9]) = 1;
    v178 = (_QWORD *)(v174 + v108[10]);
    v179 = type metadata accessor for LanguagesService(0);
    v180 = sub_100007D5C((unint64_t *)&unk_100298710, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagesService, (uint64_t)&protocol conformance descriptor for LanguagesService);
    swift_retain(v172);
    *v178 = ObservedObject.init(wrappedValue:)(v181, v179, v180);
    v178[1] = v182;
    v183 = v299;
    sub_10005DDA8(v174, v299, type metadata accessor for CombinedLanguagePickerPill);
    v184 = v327;
    sub_10005DDA8(v183, v327, type metadata accessor for CombinedLanguagePickerPill);
    v185 = 0;
    v70 = v316;
    v107 = v339;
    v40 = v315;
    goto LABEL_23;
  }
  v273 = v168[1];
  v274 = type metadata accessor for ConversationContext(0);
  v275 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  result = EnvironmentObject.error()(0, v273, v274, v275);
  __break(1u);
  return result;
}

double sub_1000DE9A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  CGFloat v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  uint64_t v13;
  CGRect v14;

  v0 = type metadata accessor for GlobalCoordinateSpace(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.global.getter(v2);
  v5 = GeometryProxy.frame<A>(in:)(v4, v0, &protocol witness table for GlobalCoordinateSpace);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v14.origin.x = v5;
  v14.origin.y = v7;
  v14.size.width = v9;
  v14.size.height = v11;
  return v7 + CGRectGetHeight(v14);
}

uint64_t sub_1000DEA64@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000E2108(a1, (uint64_t)&unk_1001EE5B0, (uint64_t)&unk_1001EE5D8, a2);
}

uint64_t sub_1000DEA78(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E2188(a1, a2, a3, a4, (uint64_t)&unk_1001EE5B0, (uint64_t)&unk_1001EE5D8, (void (*)(uint64_t))sub_100076734);
}

uint64_t sub_1000DEA94@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  int *v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v37 = a1;
  v1 = sub_100006DF4(&qword_1002916E0);
  v2 = __chkstk_darwin(v1);
  v36 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - v4;
  v6 = sub_100006DF4(&qword_1002916E8);
  v33 = *(_QWORD *)(v6 - 8);
  v7 = v33;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - v11;
  v13 = sub_100006DF4(&qword_1002916F0);
  v35 = *(_QWORD *)(v13 - 8);
  v14 = v35;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v30 - v18;
  sub_1000DA438((uint64_t)&v30 - v18);
  sub_1000DAB64((uint64_t)v12);
  v32 = v5;
  sub_1000DB340((uint64_t)v5);
  v20 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v34 = v17;
  v20(v17, v19, v13);
  v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v31 = v10;
  v21(v10, v12, v6);
  v22 = v36;
  sub_10000B074((uint64_t)v5, v36, &qword_1002916E0);
  v23 = v37;
  v20(v37, v17, v13);
  v24 = (int *)sub_100006DF4(&qword_100291968);
  v25 = &v23[v24[12]];
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  v21(&v23[v24[16]], v10, v6);
  v26 = &v23[v24[20]];
  *(_QWORD *)v26 = 0;
  v26[8] = 1;
  sub_10000B074(v22, (uint64_t)&v23[v24[24]], &qword_1002916E0);
  sub_10000A020((uint64_t)v32, &qword_1002916E0);
  v27 = *(void (**)(char *, uint64_t))(v33 + 8);
  v27(v12, v6);
  v28 = *(void (**)(char *, uint64_t))(v35 + 8);
  v28(v19, v13);
  sub_10000A020(v22, &qword_1002916E0);
  v27(v31, v6);
  return ((uint64_t (*)(char *, uint64_t))v28)(v34, v13);
}

double sub_1000DED24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v9;

  v0 = type metadata accessor for GlobalCoordinateSpace(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.global.getter(v2);
  v5 = GeometryProxy.frame<A>(in:)(v4, v0, &protocol witness table for GlobalCoordinateSpace);
  v7 = v6;
  (*(void (**)(char *, uint64_t, double))(v1 + 8))(v4, v0, v5);
  return v7;
}

uint64_t sub_1000DEDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;

  v4 = type metadata accessor for ImagePicker(0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ImageTranslationView(0) + 60));
  v8 = *v7;
  v9 = v7[1];
  v10 = type metadata accessor for ConversationContext(0);
  v11 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v12 = EnvironmentObject.projectedValue.getter(v8, v9, v10, v11);
  KeyPath = swift_getKeyPath(&unk_1001EE430);
  EnvironmentObject.Wrapper.subscript.getter(&v22, KeyPath, v12, v11);
  swift_release(KeyPath);
  swift_release(v12);
  v21 = v22;
  v14 = v23;
  LOBYTE(KeyPath) = v24;
  *v6 = swift_getKeyPath(&unk_1001EE538);
  v15 = sub_100006DF4(&qword_10028AD78);
  v16 = swift_storeEnumTagMultiPayload(v6, v15, 0);
  v17 = (char *)v6 + *(int *)(v4 + 20);
  *(_OWORD *)v17 = v21;
  *((_QWORD *)v17 + 2) = v14;
  v17[24] = KeyPath;
  v18 = static SafeAreaRegions.keyboard.getter(v16);
  LOBYTE(v14) = static Edge.Set.all.getter(v18);
  sub_100032D68((uint64_t)v6, a2, type metadata accessor for ImagePicker);
  v19 = a2 + *(int *)(sub_100006DF4(&qword_100291680) + 36);
  *(_QWORD *)v19 = v18;
  *(_BYTE *)(v19 + 8) = v14;
  return sub_100032DAC((uint64_t)v6, type metadata accessor for ImagePicker);
}

uint64_t sub_1000DEF64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ImageTranslationView(0) + 80));
  v2 = *v1;
  v3 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  v5 = type metadata accessor for VisualTranslationObservable(0);
  v6 = sub_100007D5C(&qword_1002915E0, (uint64_t (*)(uint64_t))&type metadata accessor for VisualTranslationObservable, (uint64_t)&protocol conformance descriptor for VisualTranslationErrorViewModel);
  v7 = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  dispatch thunk of VisualTranslationObservable.removeAll()();
  return swift_release(v7);
}

uint64_t sub_1000DEFEC(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for ImageTranslationView(0) + 76));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100006DF4(&qword_10028CF50);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_1000DF054@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD00000000000001CLL, 0x80000001001FCCC0);
  *a1 = result;
  return result;
}

uint64_t sub_1000DF090()
{
  return sub_1000DFDDC(0x505F45534F4F4843, 0xEC0000004F544F48);
}

uint64_t sub_1000DF0C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  double v17;
  uint64_t (*v18)(_QWORD *, uint64_t);
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD v60[3];
  char v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char v65;

  v2 = sub_100006DF4(&qword_10028B6B8);
  v3 = __chkstk_darwin(v2);
  v57 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v56 = (char *)&v52 - v5;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (uint64_t (**)(_QWORD *, uint64_t))((char *)&v52 - v11);
  v13 = (int *)type metadata accessor for ImageTranslationView(0);
  v14 = a1 + v13[11];
  v15 = sub_100006DF4(&qword_1002914B0);
  v16 = State.wrappedValue.getter(v12);
  v17 = Date.timeIntervalSinceNow.getter(v16);
  v18 = *(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8);
  result = v18(v12, v6);
  if (v17 <= -*(double *)(a1 + 96))
  {
    if (sub_1000D8390())
    {
      sub_1000D804C(1);
      v20 = (uint64_t *)(a1 + v13[15]);
      v54 = v14;
      v21 = *v20;
      v22 = v20[1];
      v23 = type metadata accessor for ConversationContext(0);
      v53 = v15;
      v24 = v23;
      v25 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
      v52 = v18;
      v26 = v25;
      v27 = EnvironmentObject.projectedValue.getter(v21, v22, v24, v25);
      KeyPath = swift_getKeyPath(&unk_1001EE430);
      EnvironmentObject.Wrapper.subscript.getter(&v62, KeyPath, v27, v26);
      swift_release(KeyPath);
      swift_release(v27);
      v29 = v62;
      v30 = v63;
      v31 = v64;
      v55 = v10;
      v32 = v65;
      v60[0] = v62;
      v60[1] = v63;
      v60[2] = v64;
      v61 = v65;
      v58 = 0;
      v59 = -1;
      v33 = sub_100006DF4(&qword_100291428);
      Binding.wrappedValue.setter(&v58, v33);
      swift_release(v30);
      swift_release(v29);
      v34 = v31;
      v18 = v52;
      sub_1000E05B8(v34, v32);
      v35 = (uint64_t *)(a1 + v13[17]);
      v36 = *v35;
      v37 = v35[1];
      v38 = *((unsigned __int8 *)v35 + 16);
      v39 = type metadata accessor for CameraConfiguration(0);
      v40 = sub_100007D5C(&qword_1002916A8, type metadata accessor for CameraConfiguration, (uint64_t)&unk_1001E72EC);
      v41 = StateObject.wrappedValue.getter(v36, v37, v38, v39, v40);
      v42 = type metadata accessor for CameraConfiguration.StaticImage(0);
      v43 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v56, 1, 1, v42);
      v44 = swift_getKeyPath(&unk_1001EE4A8);
      v45 = swift_getKeyPath(&unk_1001EE4D0);
      v46 = v57;
      sub_10000B074(v43, v57, &qword_10028B6B8);
      swift_retain(v41);
      v47 = v44;
      v10 = v55;
      static Published.subscript.setter(v46, v41, v47, v45);
      v48 = v43;
      v15 = v53;
      sub_10000A020(v48, &qword_10028B6B8);
      swift_release(v41);
      v49 = *(_QWORD *)(a1 + 56);
      LOBYTE(v62) = *(_BYTE *)(a1 + 48);
      v63 = v49;
      LOBYTE(v60[0]) = 0;
      v50 = sub_100006DF4(&qword_10028CF50);
      v51 = State.wrappedValue.setter(v60, v50);
    }
    else
    {
      v51 = sub_1000D804C(0);
    }
    static Date.now.getter(v51);
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v10, v12, v6);
    State.wrappedValue.setter(v10, v15);
    return v18(v12, v6);
  }
  return result;
}

uint64_t sub_1000DF490@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  if (sub_1000D8390())
  {
    v4 = Image.init(systemName:)(0x6B72616D78, 0xE500000000000000);
    v5 = 0;
  }
  else
  {
    v4 = Image.init(systemName:)(0x656C63726963, 0xE600000000000000);
    v5 = 1;
  }
  result = _ConditionalContent<>.init(storage:)(&v4, &type metadata for Image, &type metadata for Image, &protocol witness table for Image, &protocol witness table for Image);
  v3 = v7;
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_1000DF534@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_100006DF4(&qword_10028AB30);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000D8390())
  {
    v6 = 0x80000001001FCC80;
    v7 = 0xD000000000000013;
  }
  else
  {
    v7 = 0x4349505F454B4154;
    v6 = 0xEC00000045525554;
  }
  v8 = LocalizedStringKey.init(stringLiteral:)(v7, v6);
  sub_1000D8390();
  Label<>.init(_:systemImage:)(v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_1000DF664@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;

  v41 = a3;
  v42 = a4;
  v44 = a5;
  v43 = sub_100006DF4(&qword_100291A90);
  __chkstk_darwin(v43);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for VisualTranslationOptions(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = type metadata accessor for VisualTranslationView(0);
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1;
  v15 = Image.init(uiImage:)(v14);
  v16 = sub_100006DF4(&qword_100291A98);
  v17 = swift_allocObject(v16, ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72), *(unsigned __int8 *)(v10 + 80) | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1001E64F0;
  v18 = swift_retain(a2);
  static VisualTranslationOptions.backgroundRendering.getter(v18);
  v45 = v17;
  v19 = sub_100007D5C(&qword_100291AA0, (uint64_t (*)(uint64_t))&type metadata accessor for VisualTranslationOptions, (uint64_t)&protocol conformance descriptor for VisualTranslationOptions);
  v20 = sub_100006DF4((uint64_t *)&unk_100296CF0);
  v21 = sub_100012334(&qword_100291AA8, (uint64_t *)&unk_100296CF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v20, v21, v9, v19);
  v22 = (_QWORD *)swift_allocObject(&unk_10026A3B0, 48, 7);
  v22[2] = v14;
  v22[3] = a2;
  v23 = v41;
  v24 = v42;
  v22[4] = v41;
  v22[5] = v24;
  v25 = v23;
  v26 = v14;
  v27 = swift_retain(a2);
  v28 = VisualTranslationView.init(observable:options:systemTranslationDismissHandler:)(v27);
  v29 = static Alignment.center.getter(v28);
  v31 = v30;
  v33 = v39;
  v32 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v8, v13, v40);
  v34 = (uint64_t *)&v8[*(int *)(v43 + 36)];
  *v34 = v29;
  v34[1] = v31;
  v35 = sub_100006DF4(&qword_100291AB0);
  v36 = v44;
  sub_10000B074((uint64_t)v8, (uint64_t)v44 + *(int *)(v35 + 36), &qword_100291A90);
  *v36 = v15;
  swift_retain(v15);
  sub_10000A020((uint64_t)v8, &qword_100291A90);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v32);
  return swift_release(v15);
}

void sub_1000DF904(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (a3)
  {
    v7 = a3;
    sub_1000C46C0();

  }
  else
  {
    v5 = type metadata accessor for FavoritesImporter();
    v6 = sub_100007D5C(&qword_1002916B0, (uint64_t (*)(uint64_t))type metadata accessor for FavoritesImporter, (uint64_t)&unk_1001ED8B4);
    EnvironmentObject.error()(0, a4, v5, v6);
    __break(1u);
  }
}

uint64_t sub_1000DF980@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000DF664(*(void **)v1, *(_QWORD *)(v1 + 8), *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000DF98C(_OWORD *a1)
{
  uint64_t v1;

  *(_OWORD *)(v1 + 48) = *a1;
  return swift_task_switch(sub_1000DF9A8, 0, 0);
}

uint64_t sub_1000DF9A8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (void *)v0[6];
  v1 = v0[7];
  v3 = type metadata accessor for FavoritesImporter();
  v4 = sub_100007D5C(&qword_1002916B0, (uint64_t (*)(uint64_t))type metadata accessor for FavoritesImporter, (uint64_t)&unk_1001ED8B4);
  v5 = v2;
  swift_retain(v1);
  v0[8] = EnvironmentObject.init()(v3, v4);
  v0[9] = v6;
  v7 = type metadata accessor for MainActor(0);
  v0[10] = v7;
  v0[11] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000DFA68, v8, v9);
}

uint64_t sub_1000DFA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v5 = *(_OWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 88));
  *(_OWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v1;
  v3 = sub_100006DF4(&qword_1002919A0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 96) = ImageRenderer.init(content:)(v0 + 16);
  return swift_task_switch(sub_1000DFAF4, 0, 0);
}

uint64_t sub_1000DFAF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 104) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000DFB54, v3, v4);
}

uint64_t sub_1000DFB54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 104));
  *(_QWORD *)(v0 + 112) = ImageRenderer.uiImage.getter(v1);
  return swift_task_switch(sub_1000DFB98, 0, 0);
}

uint64_t sub_1000DFB98()
{
  uint64_t v0;
  void *v1;
  NSData *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint8_t *v13;

  v1 = *(void **)(v0 + 112);
  if (v1
    && (v2 = UIImagePNGRepresentation(*(UIImage **)(v0 + 112)), v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 96);
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

    swift_release(v3);
  }
  else
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA320);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 96);
    if (v11)
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to create image data for sharing", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    swift_release(v12);
    v4 = 0;
    v6 = 0xC000000000000000;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v4, v6);
}

uint64_t sub_1000DFCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for UTType(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType.png.getter(v5);
  return DataRepresentation.init(exportedContentType:exporting:)(v7, &unk_100291998, 0, a1, a2);
}

uint64_t sub_1000DFD68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000013, 0x80000001001FCBE0);
  *a1 = result;
  return result;
}

uint64_t sub_1000DFDA4()
{
  return sub_1000DFDDC(0x4D495F4552414853, 0xEB00000000454741);
}

uint64_t sub_1000DFDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  return Label<>.init(_:systemImage:)(v2);
}

uint64_t sub_1000DFE1C(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  swift_retain(v2);
  v3 = sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v7);
  v5[1] = v1;
  v6 = v2;
  v5[0] = (v7 & 1) == 0;
  State.wrappedValue.setter(v5, v3);
  return swift_release(v2);
}

uint64_t sub_1000DFEA8@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v5);
  if ((_BYTE)v5)
    v2 = 0xD000000000000012;
  else
    v2 = 0xD000000000000013;
  if ((_BYTE)v5)
    v3 = 0x80000001001FCC20;
  else
    v3 = 0x80000001001FCC00;
  result = Image.init(systemName:)(v2, v3);
  *a1 = result;
  return result;
}

uint64_t sub_1000DFF38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100006DF4(&qword_10028AB30);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001001FCB60);
  v9 = *(_QWORD *)(a1 + 8);
  v11[8] = *(_BYTE *)a1;
  v12 = v9;
  sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v13);
  Label<>.init(_:systemImage:)(v8);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(a2, v7, v4);
}

_QWORD *sub_1000E0078@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v47 - v7;
  LOBYTE(v48) = 0;
  State.init(wrappedValue:)(&v49, &v48, &type metadata for Bool);
  v9 = v50;
  *(_BYTE *)a1 = v49;
  *(_QWORD *)(a1 + 8) = v9;
  LOBYTE(v48) = 0;
  State.init(wrappedValue:)(&v49, &v48, &type metadata for Bool);
  v10 = v50;
  *(_BYTE *)(a1 + 16) = v49;
  *(_QWORD *)(a1 + 24) = v10;
  if (qword_10028A3E0 != -1)
    swift_once(&qword_10028A3E0, sub_1000CF7BC);
  v11 = qword_1002AA268;
  v12 = type metadata accessor for GuidanceModel(0);
  v13 = sub_100007D5C(&qword_100291A88, type metadata accessor for GuidanceModel, (uint64_t)&unk_1001EE050);
  swift_retain(v11);
  *(_QWORD *)(a1 + 32) = ObservedObject.init(wrappedValue:)(v14, v12, v13);
  *(_QWORD *)(a1 + 40) = v15;
  LOBYTE(v48) = 0;
  State.init(wrappedValue:)(&v49, &v48, &type metadata for Bool);
  v16 = v50;
  *(_BYTE *)(a1 + 48) = v49;
  *(_QWORD *)(a1 + 56) = v16;
  LOBYTE(v48) = 0;
  State.init(wrappedValue:)(&v49, &v48, &type metadata for Bool);
  v17 = v50;
  *(_BYTE *)(a1 + 64) = v49;
  *(_QWORD *)(a1 + 72) = v17;
  LOBYTE(v48) = 0;
  State.init(wrappedValue:)(&v49, &v48, &type metadata for Bool);
  v18 = v50;
  *(_BYTE *)(a1 + 80) = v49;
  *(_QWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 96) = 0x3FB999999999999ALL;
  v19 = (int *)type metadata accessor for ImageTranslationView(0);
  v20 = (_QWORD *)(a1 + v19[11]);
  static Date.distantPast.getter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  State.init(wrappedValue:)(v20, v6, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  v21 = (_QWORD *)(a1 + v19[12]);
  v48 = 0;
  State.init(wrappedValue:)(&v49, &v48, &type metadata for CGFloat);
  v22 = v50;
  *v21 = v49;
  v21[1] = v22;
  v23 = (_QWORD *)(a1 + v19[13]);
  v48 = 0;
  State.init(wrappedValue:)(&v49, &v48, &type metadata for CGFloat);
  v24 = v50;
  *v23 = v49;
  v23[1] = v24;
  v25 = (_QWORD *)(a1 + v19[14]);
  v26 = type metadata accessor for ConversationManager(0);
  v27 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
  *v25 = EnvironmentObject.init()(v26, v27);
  v25[1] = v28;
  v29 = (_QWORD *)(a1 + v19[15]);
  v30 = type metadata accessor for ConversationContext(0);
  v31 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  *v29 = EnvironmentObject.init()(v30, v31);
  v29[1] = v32;
  v33 = (_QWORD *)(a1 + v19[16]);
  *v33 = swift_getKeyPath(&unk_1001EE818);
  v34 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  v35 = a1 + v19[17];
  *(_QWORD *)v35 = sub_1000D8038;
  *(_QWORD *)(v35 + 8) = 0;
  *(_BYTE *)(v35 + 16) = 0;
  v36 = (_QWORD *)(a1 + v19[18]);
  v37 = type metadata accessor for SELFLoggingInvocationWrapper(0);
  v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  *(_QWORD *)(v38 + 16) = 0;
  v39 = v38 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters;
  v40 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  UUID.init()(v41);
  *(_BYTE *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) = 0;
  *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabName) = 2;
  v48 = v38;
  State.init(wrappedValue:)(&v49, &v48, v37);
  v42 = v50;
  *v36 = v49;
  v36[1] = v42;
  v43 = a1 + v19[19];
  LOBYTE(v48) = 0;
  result = State.init(wrappedValue:)(&v49, &v48, &type metadata for Bool);
  v45 = v50;
  *(_BYTE *)v43 = v49;
  *(_QWORD *)(v43 + 8) = v45;
  v46 = a1 + v19[20];
  *(_QWORD *)v46 = sub_1000D88B8;
  *(_QWORD *)(v46 + 8) = 0;
  *(_BYTE *)(v46 + 16) = 0;
  return result;
}

unint64_t sub_1000E04B8()
{
  unint64_t result;

  result = qword_1002915C0;
  if (!qword_1002915C0)
  {
    result = swift_getWitnessTable(&unk_1001EE708, &type metadata for ImageDropDelegate);
    atomic_store(result, (unint64_t *)&qword_1002915C0);
  }
  return result;
}

uint64_t sub_1000E0504()
{
  return sub_1000E36B4(sub_1000DEF64);
}

unint64_t sub_1000E0510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002915D0;
  if (!qword_1002915D0)
  {
    v1 = sub_1000070BC(&qword_10028E2C8);
    sub_1000E0574();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002915D0);
  }
  return result;
}

unint64_t sub_1000E0574()
{
  unint64_t result;

  result = qword_1002915D8;
  if (!qword_1002915D8)
  {
    result = swift_getWitnessTable(&unk_1001F5060, &type metadata for StaticImage);
    atomic_store(result, (unint64_t *)&qword_1002915D8);
  }
  return result;
}

void sub_1000E05B8(id a1, char a2)
{
  if (a2 != -1)

}

id sub_1000E05CC(id result, char a2)
{
  if (a2 != -1)
    return result;
  return result;
}

void sub_1000E05E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::OpaquePointer v9;
  Swift::Bool v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  id v14;
  void *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _QWORD aBlock[5];
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  _BYTE v37[16];
  uint64_t v38;

  v1 = v0;
  v31 = type metadata accessor for UTType(0);
  v2 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_1002915B8);
  v6 = *(unsigned __int8 *)(v2 + 80);
  v7 = ((v6 + 32) & ~v6) + *(_QWORD *)(v2 + 72);
  v8 = v6 | 7;
  v9._rawValue = (void *)swift_allocObject(v5, v7, v6 | 7);
  v32 = xmmword_1001E64F0;
  *((_OWORD *)v9._rawValue + 1) = xmmword_1001E64F0;
  static UTType.image.getter((__n128)xmmword_1001E64F0);
  v10 = DropInfo.hasItemsConforming(to:)(v9);
  swift_bridgeObjectRelease(v9._rawValue);
  if (!v10)
    return;
  v11 = swift_allocObject(v5, v7, v8);
  v12 = (__n128)v32;
  *(_OWORD *)(v11 + 16) = v32;
  static UTType.image.getter(v12);
  v13 = DropInfo.itemProviders(for:)(v11);
  swift_bridgeObjectRelease(v11);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v28 = v13;
    else
      v28 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v13);
    if (v29)
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease(v13);
    return;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_12;
LABEL_4:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v13 + 32);
LABEL_7:
    v15 = v14;
    v16 = swift_bridgeObjectRelease(v13);
    v17 = static UTType.image.getter(v16);
    UTType.identifier.getter(v17);
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v31);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v36[0] = *(_OWORD *)v1;
    *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(v1 + 9);
    v21 = *((_QWORD *)&v36[0] + 1);
    v38 = *(_QWORD *)&v36[0];
    sub_1000110A4((uint64_t)&v36[1], (uint64_t)v37, &qword_10028E2C8);
    v22 = *(_QWORD *)(v1 + 40);
    v35 = *(_QWORD *)(v1 + 32);
    v23 = swift_allocObject(&unk_10026A290, 65, 7);
    v24 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v23 + 32) = v24;
    *(_OWORD *)(v23 + 48) = *(_OWORD *)(v1 + 32);
    *(_BYTE *)(v23 + 64) = *(_BYTE *)(v1 + 48);
    aBlock[4] = sub_1000E4508;
    v34 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E0C5C;
    aBlock[3] = &unk_10026A2A8;
    v25 = _Block_copy(aBlock);
    v26 = v34;
    sub_100018680(&v38);
    swift_retain(v21);
    sub_1000E4510((uint64_t)v37);
    sub_100018680(&v35);
    swift_retain(v22);
    swift_release(v26);
    v27 = objc_msgSend(v15, "loadDataRepresentationForTypeIdentifier:completionHandler:", v20, v25);

    _Block_release(v25);
    return;
  }
  __break(1u);
}

uint64_t sub_1000E08E4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  _BYTE v35[16];
  uint64_t v36;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 != 15)
  {
    v30 = result;
    sub_10001D948();
    v29 = v8;
    v16 = sub_1000D69D4(a1, a2);
    v28 = static OS_dispatch_queue.main.getter(v16);
    v34[0] = *(_OWORD *)a4;
    *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)(a4 + 9);
    v17 = *((_QWORD *)&v34[0] + 1);
    v36 = *(_QWORD *)&v34[0];
    sub_1000110A4((uint64_t)&v34[1], (uint64_t)v35, &qword_10028E2C8);
    v18 = *(_QWORD *)(a4 + 40);
    v33 = *(_QWORD *)(a4 + 32);
    v19 = swift_allocObject(&unk_10026A2E0, 81, 7);
    *(_QWORD *)(v19 + 16) = a1;
    *(_QWORD *)(v19 + 24) = a2;
    v20 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v19 + 32) = *(_OWORD *)a4;
    *(_OWORD *)(v19 + 48) = v20;
    *(_OWORD *)(v19 + 64) = *(_OWORD *)(a4 + 32);
    *(_BYTE *)(v19 + 80) = *(_BYTE *)(a4 + 48);
    aBlock[4] = sub_1000E4594;
    v32 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100075908;
    aBlock[3] = &unk_10026A2F8;
    v21 = _Block_copy(aBlock);
    v22 = v32;
    sub_1000D6A18(a1, a2);
    sub_100018680(&v36);
    swift_retain(v17);
    sub_1000E4510((uint64_t)v35);
    sub_100018680(&v33);
    swift_retain(v18);
    v23 = swift_release(v22);
    static DispatchQoS.unspecified.getter(v23);
    aBlock[0] = _swiftEmptyArrayStorage;
    v24 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_100006DF4(&qword_10028AC30);
    v26 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v7, v24);
    v27 = (void *)v28;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v21);
    _Block_release(v21);

    sub_1000D6A2C(a1, a2);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v30);
  }
  return result;
}

void sub_1000E0B90(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  id v6;
  Class isa;
  id v8;
  uint64_t v9;
  id v10;
  char v11;
  _OWORD v12[2];

  v6 = objc_allocWithZone((Class)UIImage);
  sub_1000D69D4(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v6, "initWithData:", isa);
  sub_1000D6A40(a1, a2);

  if (v8)
  {
    v12[0] = *a3;
    *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a3 + 9);
    v10 = v8;
    v11 = 1;
    v9 = sub_100006DF4(&qword_100291428);
    Binding.wrappedValue.setter(&v10, v9);
  }
}

uint64_t sub_1000E0C5C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void (*v6)(void *, unint64_t, void *);
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v4 = a2;
  v6 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain(v5);
    v7 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;

  }
  else
  {
    swift_retain(v5);
    v9 = 0xF000000000000000;
  }
  v10 = a3;
  v6(v4, v9, a3);

  sub_1000D6A2C((uint64_t)v4, v9);
  return swift_release(v5);
}

BOOL sub_1000E0CF0()
{
  Swift::Bool v0;
  uint64_t v1;
  uint64_t v2;
  Swift::OpaquePointer v3;
  uint64_t v5;

  sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v5);
  if ((v5 & 1) != 0)
  {
    return 0;
  }
  else
  {
    v1 = sub_100006DF4(&qword_1002915B8);
    v2 = type metadata accessor for UTType(0);
    v3._rawValue = (void *)swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v2 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) | 7);
    *((_OWORD *)v3._rawValue + 1) = xmmword_1001E64F0;
    static UTType.image.getter((__n128)xmmword_1001E64F0);
    v0 = DropInfo.hasItemsConforming(to:)(v3);
    swift_bridgeObjectRelease(v3._rawValue);
  }
  return v0;
}

uint64_t sub_1000E0DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char v71[16];
  uint64_t v72;

  v70 = a2;
  v69 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v69);
  v68 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TitleOnlyLabelStyle(0);
  v66 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_1002919A8);
  v63 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100006DF4(&qword_1002919B0);
  v10 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100006DF4(&qword_1002919B8);
  __chkstk_darwin(v62);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100006DF4(&qword_1002919C0);
  __chkstk_darwin(v65);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100006DF4(&qword_1002919C8);
  __chkstk_darwin(v67);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = a1;
  v19 = sub_100006DF4(&qword_1002919D0);
  v20 = sub_1000E45A8();
  v21 = Label.init(title:icon:)(sub_1000E45A0, v71, nullsub_1, 0, v19, &type metadata for EmptyView, v20, &protocol witness table for EmptyView);
  TitleOnlyLabelStyle.init()(v21);
  v22 = sub_100012334(&qword_100291A28, &qword_1002919A8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v23 = sub_100007D5C(&qword_100291A30, (uint64_t (*)(uint64_t))&type metadata accessor for TitleOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for TitleOnlyLabelStyle);
  View.labelStyle<A>(_:)(v6, v7, v4, v22, v23);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v6, v4);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v9, v7);
  LOBYTE(v9) = static Edge.Set.vertical.getter(v24);
  v25 = EdgeInsets.init(_all:)(3.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = v64;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v64);
  v33 = &v14[*(int *)(v62 + 36)];
  *v33 = (char)v9;
  *((double *)v33 + 1) = v25;
  *((_QWORD *)v33 + 2) = v27;
  *((_QWORD *)v33 + 3) = v29;
  *((_QWORD *)v33 + 4) = v31;
  v33[40] = 0;
  v34 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v32);
  LOBYTE(v10) = static Edge.Set.horizontal.getter(v34);
  v35 = EdgeInsets.init(_all:)(10.0);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_10000B074((uint64_t)v14, (uint64_t)v16, &qword_1002919B8);
  v42 = &v16[*(int *)(v65 + 36)];
  *v42 = v10;
  *((double *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  v43 = sub_10000A020((uint64_t)v14, &qword_1002919B8);
  v44 = static Color.black.getter(v43);
  v45 = Color.opacity(_:)(v44, 0.5);
  v46 = swift_release(v44);
  LOBYTE(v44) = static Edge.Set.all.getter(v46);
  sub_10000B074((uint64_t)v16, (uint64_t)v18, &qword_1002919C0);
  v47 = &v18[*(int *)(v67 + 36)];
  *(_QWORD *)v47 = v45;
  v47[8] = v44;
  sub_10000A020((uint64_t)v16, &qword_1002919C0);
  v48 = v68;
  v49 = &v68[*(int *)(v69 + 20)];
  v50 = enum case for RoundedCornerStyle.continuous(_:);
  v51 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v49, v50, v51);
  __asm { FMOV            V0.2D, #2.0 }
  *v48 = _Q0;
  v57 = sub_100006DF4(&qword_100291A38);
  v58 = v70;
  v59 = v70 + *(int *)(v57 + 36);
  sub_100032D68((uint64_t)v48, v59, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v59 + *(int *)(sub_100006DF4(&qword_10028CFC8) + 36)) = 256;
  sub_10000B074((uint64_t)v18, v58, &qword_1002919C8);
  sub_100032DAC((uint64_t)v48, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_10000A020((uint64_t)v18, &qword_1002919C8);
}

uint64_t sub_1000E1284@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a1;
  v56 = type metadata accessor for AccessibilityTraits(0);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v53 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100006DF4(&qword_10028BCF8);
  __chkstk_darwin(v49);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LabelStyleConfiguration.Title(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100291A00);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_100291A40);
  v47 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  __chkstk_darwin(v11);
  v45 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100006DF4(&qword_1002919F8);
  __chkstk_darwin(v44);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100006DF4(&qword_1002919E8);
  __chkstk_darwin(v51);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100006DF4(&qword_1002919D0);
  v17 = __chkstk_darwin(v50);
  v52 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = LabelStyleConfiguration.title.getter(v17);
  v20 = static Font.footnote.getter(v19);
  KeyPath = swift_getKeyPath(&unk_1001EE750);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
  v46 = v8;
  v22 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *v22 = KeyPath;
  v22[1] = v20;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v23 = enum case for DynamicTypeSize.accessibility1(_:);
  v24 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v3, v23, v24);
  v25 = sub_100007D5C(&qword_10028BD30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v3, v3, v24, v25);
  if ((result & 1) != 0)
  {
    v27 = sub_1000E473C();
    v28 = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v29 = v45;
    View.dynamicTypeSize<A>(_:)(v3, v46, v49, v27, v28);
    sub_10000A020((uint64_t)v3, &qword_10028BCF8);
    sub_10000A020((uint64_t)v10, &qword_100291A00);
    v30 = swift_getKeyPath(&unk_1001EE780);
    v32 = v47;
    v31 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v14, v29, v48);
    v33 = &v14[*(int *)(v44 + 36)];
    *(_QWORD *)v33 = v30;
    v33[8] = 1;
    v34 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v29, v31);
    v35 = static Color.black.getter(v34);
    v36 = Color.opacity(_:)(v35, 0.75);
    swift_release(v35);
    sub_10000B074((uint64_t)v14, (uint64_t)v16, &qword_1002919F8);
    v37 = v51;
    v38 = (uint64_t *)&v16[*(int *)(v51 + 36)];
    *v38 = v36;
    v38[1] = 0x4008000000000000;
    v38[2] = 0;
    v38[3] = 0;
    sub_10000A020((uint64_t)v14, &qword_1002919F8);
    v39 = sub_10001B6DC(&qword_1002919E0, &qword_1002919E8, (void (*)(void))sub_1000E464C);
    v40 = (uint64_t)v52;
    View.accessibilityIdentifier(_:)(0x75476172656D6143, 0xEE0065636E616469, v37, v39);
    v41 = sub_10000A020((uint64_t)v16, &qword_1002919E8);
    v42 = v53;
    static AccessibilityTraits.updatesFrequently.getter(v41);
    ModifiedContent<>.accessibility(addTraits:)(v42, v50);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v56);
    return sub_10000A020(v40, &qword_1002919D0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E1738()
{
  return sub_1000E36B4(sub_1000DCC88);
}

uint64_t sub_1000E1744(uint64_t result)
{
  *(_BYTE *)(result + 280) = 1;
  return result;
}

uint64_t sub_1000E1750()
{
  return sub_10001B6DC(&qword_100291640, &qword_100291648, (void (*)(void))sub_1000E1774);
}

unint64_t sub_1000E1774()
{
  unint64_t result;

  result = qword_100291650;
  if (!qword_100291650)
  {
    result = swift_getWitnessTable(&unk_1001F50C4, &type metadata for StaticImageView);
    atomic_store(result, (unint64_t *)&qword_100291650);
  }
  return result;
}

uint64_t sub_1000E17B8()
{
  return sub_10001B6DC(&qword_100291660, &qword_100291668, (void (*)(void))sub_1000E17DC);
}

unint64_t sub_1000E17DC()
{
  unint64_t result;

  result = qword_100291670;
  if (!qword_100291670)
  {
    result = swift_getWitnessTable(&unk_1001F08D4, &type metadata for CameraPreviewView);
    atomic_store(result, (unint64_t *)&qword_100291670);
  }
  return result;
}

uint64_t sub_1000E1824@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageTranslationView(0) - 8) + 80);
  return sub_1000DEDC0(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_1000E1860()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291688;
  if (!qword_100291688)
  {
    v1 = sub_1000070BC(&qword_1002915F0);
    sub_100012334(&qword_100291690, &qword_1002915E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291688);
  }
  return result;
}

unint64_t sub_1000E18E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291698;
  if (!qword_100291698)
  {
    v1 = sub_1000070BC(&qword_100291680);
    sub_100007D5C(&qword_100291420, type metadata accessor for ImagePicker, (uint64_t)&unk_1001EE208);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291698);
  }
  return result;
}

uint64_t sub_1000E1968(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  id v42;
  id v45;
  id v46;

  if ((a36 & 1) != 0)
  {
    swift_retain(a5);
    swift_retain(a6);
    v42 = a1;
    swift_retain(a3);
    sub_1000E05CC(a7, a8);
    swift_retain(a28);
    swift_retain(a29);
    swift_retain(a30);
    swift_retain(a9);
    swift_retain(a10);
    swift_retain(a12);
    swift_retain(a13);
    swift_retain(a15);
    swift_retain(a16);
    swift_retain(a17);
    swift_retain(a19);
    swift_retain(a20);
    swift_retain(a22);
    swift_retain(a23);
    swift_retain(a25);
    swift_retain(a26);
    sub_100016244(a32, a33);
  }
  else
  {
    swift_retain(a9);
    swift_retain(a10);
    v45 = a1;
    swift_retain(a3);
    v46 = a5;
    swift_retain(a8);
    sub_1000E05CC(a11, a12);
    swift_retain(a25);
    swift_retain(a26);
    swift_retain(a27);
    swift_retain(a13);
    swift_retain(a14);
    swift_retain(a17);
    swift_retain(a18);
    swift_retain(a19);
    swift_retain(a21);
    swift_retain(a22);
    swift_retain(a24);
    sub_100016244(a29, a30);
    a34 = a31;
    a35 = a32;
  }
  return sub_100016244(a34, a35);
}

uint64_t sub_1000E1BDC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  char v6;

  v6 = *(_BYTE *)(a1 + 280);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    *(_QWORD *)(a1 + 272),
    v6);
  return a1;
}

uint64_t sub_1000E1C68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  char v36;

  v36 = a8;
  if ((a36 & 1) != 0)
  {
    swift_release(a6);

    swift_release(a3);
    swift_release(a5);
    sub_1000E05B8(a7, v36);
    swift_release(a30);
    swift_release(a29);
    swift_release(a26);
    swift_release(a23);
    swift_release(a20);
    swift_release(a17);
    swift_release(a15);
    swift_release(a13);
    swift_release(a10);
    swift_release(a9);
    swift_release(a12);
    swift_release(a16);
    swift_release(a19);
    swift_release(a22);
    swift_release(a25);
    swift_release(a28);
    sub_10002BA44(a32, a33);
  }
  else
  {
    swift_release(a8);
    swift_release(a10);

    swift_release(a3);
    swift_release(a9);
    sub_1000E05B8(a11, a12);
    swift_release(a27);
    swift_release(a26);
    swift_release(a24);
    swift_release(a22);
    swift_release(a19);
    swift_release(a17);
    swift_release(a14);
    swift_release(a13);
    swift_release(a18);
    swift_release(a21);
    swift_release(a25);
    sub_10002BA44(a29, a30);
    a34 = a31;
    a35 = a32;
  }
  return sub_10002BA44(a34, a35);
}

uint64_t sub_1000E1ED0()
{
  return sub_1000E36B4((uint64_t (*)(uint64_t))sub_1000DCBB0);
}

uint64_t sub_1000E1EDC(uint64_t result)
{
  *(_BYTE *)(result + 280) = 0;
  return result;
}

uint64_t sub_1000E1EE8()
{
  return sub_1000E36B4((uint64_t (*)(uint64_t))sub_1000DFE1C);
}

uint64_t sub_1000E1EF4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000DFEA8(a1);
}

uint64_t sub_1000E1EFC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000E2108(a1, (uint64_t)&unk_1001EE4A8, (uint64_t)&unk_1001EE4D0, a2);
}

uint64_t sub_1000E1F10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100006DF4(&qword_10028B6B8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_10000B074(a1, (uint64_t)&v14 - v8, &qword_10028B6B8);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EE4A8);
  v12 = swift_getKeyPath(&unk_1001EE4D0);
  sub_10000B074((uint64_t)v9, (uint64_t)v7, &qword_10028B6B8);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_10000A020((uint64_t)v9, &qword_10028B6B8);
}

uint64_t sub_1000E2008@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EE4F0);
  v5 = swift_getKeyPath(&unk_1001EE518);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000E2084(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EE4F0);
  v5 = swift_getKeyPath(&unk_1001EE518);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000E20F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000E2108(a1, (uint64_t)&unk_1001EE5F8, (uint64_t)&unk_1001EE620, a2);
}

uint64_t sub_1000E2108@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(a4, v6, KeyPath, v8);
  swift_release(KeyPath);
  return swift_release(v8);
}

uint64_t sub_1000E216C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E2188(a1, a2, a3, a4, (uint64_t)&unk_1001EE5F8, (uint64_t)&unk_1001EE620, (void (*)(uint64_t))sub_1000766FC);
}

uint64_t sub_1000E2188(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void *v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v12 = type metadata accessor for Locale(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v25 - v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v19((char *)&v25 - v17, a1, v12);
  v20 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v22 = swift_getKeyPath(a6);
  v19(v16, (uint64_t)v18, v12);
  v23 = static Published.subscript.setter(v16, v20, KeyPath, v22);
  a7(v23);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t sub_1000E22A0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EE568);
  v5 = swift_getKeyPath(&unk_1001EE590);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000E231C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EE568);
  v5 = swift_getKeyPath(&unk_1001EE590);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000E238C()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_1000E23AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000E23D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000E2404(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_1000E2428(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

_BYTE *sub_1000E244C(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_1000E2460()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000E2470(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

unint64_t sub_1000E2488()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002917A0;
  if (!qword_1002917A0)
  {
    v1 = sub_1000070BC(&qword_100291710);
    sub_1000E30D4(&qword_100291780, &qword_100291708, &qword_10028BCA0, &qword_10028BCB8);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002917A0);
  }
  return result;
}

uint64_t sub_1000E252C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000DFF38(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000E2534()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002917B0;
  if (!qword_1002917B0)
  {
    v1 = sub_1000070BC(&qword_100291758);
    sub_1000E25B8();
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002917B0);
  }
  return result;
}

unint64_t sub_1000E25B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_1002917B8;
  if (!qword_1002917B8)
  {
    v1 = sub_1000070BC(&qword_100291750);
    v2 = sub_1000070BC(&qword_100291740);
    v3 = type metadata accessor for ImageTranslationButtonStyle(255);
    v6 = sub_1000070BC(&qword_100291738);
    v7 = sub_100012334(&qword_1002917C0, &qword_100291738, (uint64_t)&protocol conformance descriptor for ShareLink<A, B, C, D>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
    v5 = sub_100007D5C(&qword_100291778, (uint64_t (*)(uint64_t))&type metadata accessor for ImageTranslationButtonStyle, (uint64_t)&protocol conformance descriptor for ImageTranslationButtonStyle);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100012334(&qword_100291788, &qword_100291790, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002917B8);
  }
  return result;
}

unint64_t sub_1000E26E8()
{
  unint64_t result;

  result = qword_1002917C8;
  if (!qword_1002917C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Image, &type metadata for Image);
    atomic_store(result, (unint64_t *)&qword_1002917C8);
  }
  return result;
}

unint64_t sub_1000E272C()
{
  unint64_t result;

  result = qword_1002917D0;
  if (!qword_1002917D0)
  {
    result = swift_getWitnessTable(&unk_1001EE6D0, &type metadata for ImageTranslationView.SharedImageTranslation);
    atomic_store(result, (unint64_t *)&qword_1002917D0);
  }
  return result;
}

uint64_t sub_1000E2770(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = result;
  v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v6 = result;
    else
      v6 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    result = swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100006DF4(&qword_100291970);
      result = static _SetStorage.allocate(capacity:)(v3);
      v4 = (_QWORD *)result;
      v24 = v1;
      if (!v2)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v24 = v1;
  if (!v2)
  {
LABEL_4:
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      return (uint64_t)v4;
    goto LABEL_15;
  }
LABEL_11:
  if (v1 < 0)
    v7 = v1;
  else
    v7 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  result = swift_bridgeObjectRelease(v1);
  if (!v5)
    return (uint64_t)v4;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v23 = v5;
  while ((v24 & 0xC000000000000001) != 0)
  {
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v24);
    v10 = __OFADD__(v8++, 1);
    if (v10)
      goto LABEL_32;
LABEL_24:
    v25 = result;
    v27 = result;
    v11 = v4[5];
    v12 = type metadata accessor for AnyCancellable(0);
    v13 = sub_100007D5C(&qword_10028CDD8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v12, v13);
    v14 = -1 << *((_BYTE *)v4 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
    v18 = 1 << v15;
    if (((1 << v15) & v17) != 0)
    {
      v19 = ~v14;
      v20 = sub_100007D5C(&qword_100291978, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v26 = *(_QWORD *)(v4[6] + 8 * v15);
        result = dispatch thunk of static Equatable.== infix(_:_:)(&v26, &v27, v12, v20);
        if ((result & 1) != 0)
        {
          result = swift_release(v25);
          v5 = v23;
          goto LABEL_17;
        }
        v15 = (v15 + 1) & v19;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
        v18 = 1 << v15;
      }
      while ((v17 & (1 << v15)) != 0);
      v5 = v23;
    }
    *(_QWORD *)&v9[8 * v16] = v18 | v17;
    *(_QWORD *)(v4[6] + 8 * v15) = v25;
    v21 = v4[2];
    v10 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v10)
      goto LABEL_33;
    v4[2] = v22;
LABEL_17:
    if (v8 == v5)
      return (uint64_t)v4;
  }
  if (v8 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  result = swift_retain(*(_QWORD *)(v24 + 32 + 8 * v8));
  v10 = __OFADD__(v8++, 1);
  if (!v10)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void *sub_1000E2A04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, unint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, unint64_t);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char v37;
  unint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100006DF4(&qword_100291AB8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v43 = v1;
    v44 = a1 + 32;
    while (1)
    {
      v5 = (unint64_t *)(v44 + 16 * v4);
      v7 = *v5;
      v6 = v5[1];
      Hasher.init(_seed:)(v46, *(_QWORD *)(v3 + 40));
      switch(v7)
      {
        case 0uLL:
          v8 = v6;
          v9 = 1;
          goto LABEL_13;
        case 1uLL:
          v8 = v6;
          v9 = 2;
          goto LABEL_13;
        case 2uLL:
          v8 = v6;
          v9 = 3;
          goto LABEL_13;
        case 3uLL:
          v8 = v6;
          v9 = 4;
          goto LABEL_13;
        case 4uLL:
          v8 = v6;
          v9 = 5;
LABEL_13:
          Hasher._combine(_:)(v9);
          break;
        default:
          ObjectType = swift_getObjectType(v7);
          v11 = *(uint64_t (**)(uint64_t, unint64_t))(v6 + 24);
          swift_unknownObjectRetain_n(v7, 2);
          v12 = v11(ObjectType, v6);
          v14 = v13;
          String.hash(into:)(v46, v12, v13);
          swift_bridgeObjectRelease(v14);
          v8 = v6;
          sub_100074B70(v7);
          break;
      }
      v15 = v3 + 56;
      v16 = Hasher._finalize()();
      v17 = ~(-1 << *(_BYTE *)(v3 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v3 + 56 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) == 0)
      {
        v22 = v8;
LABEL_35:
        *(_QWORD *)(v15 + 8 * v19) = v21 | v20;
        v38 = (unint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v18);
        *v38 = v7;
        v38[1] = v22;
        v39 = *(_QWORD *)(v3 + 16);
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
        {
          __break(1u);
          JUMPOUT(0x1000E2DB0);
        }
        *(_QWORD *)(v3 + 16) = v41;
        goto LABEL_5;
      }
      v22 = v8;
      v45 = v4;
      while (2)
      {
        v23 = (unint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v18);
        v24 = *v23;
        switch(*v23)
        {
          case 0uLL:
            if (!v7)
              goto LABEL_4;
            goto LABEL_17;
          case 1uLL:
            if (v7 == 1)
              goto LABEL_5;
            goto LABEL_17;
          case 2uLL:
            if (v7 == 2)
              goto LABEL_5;
            goto LABEL_17;
          case 3uLL:
            if (v7 == 3)
              goto LABEL_5;
            goto LABEL_17;
          case 4uLL:
            if (v7 == 4)
              goto LABEL_5;
            goto LABEL_17;
          default:
            if (v7 < 5)
              goto LABEL_17;
            v25 = v23[1];
            v26 = swift_getObjectType(*v23);
            v27 = *(uint64_t (**)(uint64_t, unint64_t))(v25 + 24);
            sub_100074B60(v24);
            sub_100074B60(v7);
            sub_100074B60(v24);
            v28 = v22;
            v29 = v27(v26, v25);
            v31 = v30;
            v32 = swift_getObjectType(v7);
            v33 = (*(uint64_t (**)(uint64_t, unint64_t))(v28 + 24))(v32, v28);
            if (v29 != v33 || v31 != v34)
            {
              v36 = v34;
              v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v34, 0);
              swift_bridgeObjectRelease(v31);
              swift_bridgeObjectRelease(v36);
              sub_100074B70(v7);
              sub_100074B70(v24);
              sub_100074B70(v24);
              v1 = v43;
              v22 = v28;
              v4 = v45;
              v15 = v3 + 56;
              if ((v37 & 1) != 0)
                goto LABEL_4;
LABEL_17:
              v18 = (v18 + 1) & v17;
              v19 = v18 >> 6;
              v20 = *(_QWORD *)(v15 + 8 * (v18 >> 6));
              v21 = 1 << v18;
              if ((v20 & (1 << v18)) == 0)
                goto LABEL_35;
              continue;
            }
            swift_bridgeObjectRelease_n(v31, 2);
            sub_100074B70(v7);
            sub_100074B70(v24);
            sub_100074B70(v24);
            v1 = v43;
            v4 = v45;
LABEL_4:
            sub_100074B70(v7);
LABEL_5:
            if (++v4 == v1)
              return (void *)v3;
            break;
        }
        break;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000E2DD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for PresentationDetent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100006DF4(&qword_1002917E0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100007D5C(&qword_1002917E8, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100007D5C(&qword_1002917F0, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_1000E3040()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000E3054()
{
  return sub_1000E36B4(sub_1000DF0C8);
}

uint64_t sub_1000E3060@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DF490(a1);
}

unint64_t sub_1000E3068()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291830;
  if (!qword_100291830)
  {
    v1 = sub_1000070BC(&qword_100291828);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291830);
  }
  return result;
}

uint64_t sub_1000E30C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000E30D4(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[4];

  result = *a1;
  if (!result)
  {
    v8 = sub_1000070BC(a2);
    v9[0] = sub_1000070BC(a3);
    v9[1] = type metadata accessor for ImageTranslationButtonStyle(255);
    v9[2] = sub_100012334(a4, a3, (uint64_t)&protocol conformance descriptor for Button<A>);
    v9[3] = sub_100007D5C(&qword_100291778, (uint64_t (*)(uint64_t))&type metadata accessor for ImageTranslationButtonStyle, (uint64_t)&protocol conformance descriptor for ImageTranslationButtonStyle);
    swift_getOpaqueTypeConformance2(v9, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100012334(&qword_100291788, &qword_100291790, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E31D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291850;
  if (!qword_100291850)
  {
    v1 = sub_1000070BC(&qword_100291810);
    sub_1000E30D4(&qword_100291840, &qword_100291808, &qword_1002917F8, &qword_100291838);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291850);
  }
  return result;
}

uint64_t sub_1000E3278@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DF534(a1);
}

uint64_t sub_1000E3280@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000E2108(a1, (uint64_t)&unk_1001EE4A8, (uint64_t)&unk_1001EE4D0, a2);
}

uint64_t sub_1000E32A8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = (int *)type metadata accessor for ImageTranslationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40));
  swift_release(*(_QWORD *)(v0 + v4 + 56));
  swift_release(*(_QWORD *)(v0 + v4 + 72));
  swift_release(*(_QWORD *)(v0 + v4 + 88));
  v7 = v0 + v4 + v1[11];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = sub_100006DF4(&qword_1002914B0);
  swift_release(*(_QWORD *)(v7 + *(int *)(v9 + 28)));
  swift_release(*(_QWORD *)(v0 + v4 + v1[12] + 8));
  swift_release(*(_QWORD *)(v0 + v4 + v1[13] + 8));

  swift_release(*(_QWORD *)(v0 + v4 + v1[15]));
  v10 = (_QWORD *)(v0 + v4 + v1[16]);
  v11 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v14 = v3 | 7;
  sub_1000D705C(*(_QWORD *)(v6 + v1[17]), *(_QWORD *)(v6 + v1[17] + 8));
  v15 = (_QWORD *)(v6 + v1[18]);
  swift_release(*v15);
  swift_release(v15[1]);
  swift_release(*(_QWORD *)(v6 + v1[19] + 8));
  sub_1000D705C(*(_QWORD *)(v6 + v1[20]), *(_QWORD *)(v6 + v1[20] + 8));
  return swift_deallocObject(v0, v5 + v4 + 1, v14);
}

uint64_t sub_1000E347C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for ImageTranslationView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000D82C0(v0 + v2, *(_BYTE *)(v0 + v2 + *(_QWORD *)(v1 + 64)));
}

uint64_t sub_1000E34B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E34C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E34D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = (int *)type metadata accessor for ImageTranslationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40));
  swift_release(*(_QWORD *)(v0 + v4 + 56));
  swift_release(*(_QWORD *)(v0 + v4 + 72));
  swift_release(*(_QWORD *)(v0 + v4 + 88));
  v7 = v0 + v4 + v1[11];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = sub_100006DF4(&qword_1002914B0);
  swift_release(*(_QWORD *)(v7 + *(int *)(v9 + 28)));
  swift_release(*(_QWORD *)(v0 + v4 + v1[12] + 8));
  swift_release(*(_QWORD *)(v0 + v4 + v1[13] + 8));

  swift_release(*(_QWORD *)(v0 + v4 + v1[15]));
  v10 = (_QWORD *)(v0 + v4 + v1[16]);
  v11 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v14 = v3 | 7;
  sub_1000D705C(*(_QWORD *)(v6 + v1[17]), *(_QWORD *)(v6 + v1[17] + 8));
  v15 = (_QWORD *)(v6 + v1[18]);
  swift_release(*v15);
  swift_release(v15[1]);
  swift_release(*(_QWORD *)(v6 + v1[19] + 8));
  sub_1000D705C(*(_QWORD *)(v6 + v1[20]), *(_QWORD *)(v6 + v1[20] + 8));
  return swift_deallocObject(v0, v4 + v5, v14);
}

uint64_t sub_1000E36A8()
{
  return sub_1000E36B4(sub_1000DEFEC);
}

uint64_t sub_1000E36B4(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageTranslationView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1000E36F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000E3700()
{
  return EnvironmentValues.dismiss.getter();
}

unint64_t sub_1000E3728()
{
  unint64_t result;

  result = qword_1002918D8;
  if (!qword_1002918D8)
  {
    result = swift_getWitnessTable(&unk_1001EE698, &type metadata for GuidanceLabelStyle);
    atomic_store(result, (unint64_t *)&qword_1002918D8);
  }
  return result;
}

unint64_t sub_1000E376C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002918F8;
  if (!qword_1002918F8)
  {
    v1 = sub_1000070BC(&qword_100291880);
    sub_10001B6DC(&qword_100291900, &qword_100291878, (void (*)(void))sub_1000E3810);
    sub_100012334(&qword_100291928, &qword_100291930, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002918F8);
  }
  return result;
}

uint64_t sub_1000E3810()
{
  return sub_10001B6DC(&qword_100291908, &qword_100291870, (void (*)(void))sub_1000E3834);
}

uint64_t sub_1000E3834()
{
  return sub_10001B6DC(&qword_100291910, &qword_100291868, (void (*)(void))sub_1000E3858);
}

unint64_t sub_1000E3858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291918;
  if (!qword_100291918)
  {
    v1 = sub_1000070BC(&qword_100291860);
    sub_100012334(&qword_100291920, &qword_100291858, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291918);
  }
  return result;
}

uint64_t sub_1000E38E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageTranslationView(0) - 8) + 80);
  return sub_1000D85C4(v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t sub_1000E3924()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = (int *)type metadata accessor for ImageTranslationView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40));
  swift_release(*(_QWORD *)(v0 + v4 + 56));
  swift_release(*(_QWORD *)(v0 + v4 + 72));
  swift_release(*(_QWORD *)(v0 + v4 + 88));
  v7 = v0 + v4 + v1[11];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = sub_100006DF4(&qword_1002914B0);
  swift_release(*(_QWORD *)(v7 + *(int *)(v9 + 28)));
  swift_release(*(_QWORD *)(v0 + v4 + v1[12] + 8));
  swift_release(*(_QWORD *)(v0 + v4 + v1[13] + 8));

  swift_release(*(_QWORD *)(v0 + v4 + v1[15]));
  v10 = (_QWORD *)(v0 + v4 + v1[16]);
  v11 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v14 = v3 | 7;
  sub_1000D705C(*(_QWORD *)(v6 + v1[17]), *(_QWORD *)(v6 + v1[17] + 8));
  v15 = (_QWORD *)(v6 + v1[18]);
  swift_release(*v15);
  swift_release(v15[1]);
  swift_release(*(_QWORD *)(v6 + v1[19] + 8));
  sub_1000D705C(*(_QWORD *)(v6 + v1[20]), *(_QWORD *)(v6 + v1[20] + 8));
  return swift_deallocObject(v0, v4 + v5, v14);
}

void sub_1000E3AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ImageTranslationView(0) - 8) + 80);
  sub_1000D86BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1000E3B3C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000E2108(a1, (uint64_t)&unk_1001EE5B0, (uint64_t)&unk_1001EE5D8, a2);
}

uint64_t sub_1000E3B60(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E2188(a1, a2, a3, a4, (uint64_t)&unk_1001EE5B0, (uint64_t)&unk_1001EE5D8, (void (*)(uint64_t))sub_100076734);
}

unint64_t sub_1000E3B8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291940;
  if (!qword_100291940)
  {
    v1 = sub_1000070BC(&qword_100291938);
    sub_1000E3C10();
    sub_100012334(&qword_100291928, &qword_100291930, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291940);
  }
  return result;
}

unint64_t sub_1000E3C10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291948;
  if (!qword_100291948)
  {
    v1 = sub_1000070BC(&qword_100291950);
    sub_100012334(&qword_100291958, &qword_100291960, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291948);
  }
  return result;
}

uint64_t sub_1000E3C94@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000E2108(a1, (uint64_t)&unk_1001EE5F8, (uint64_t)&unk_1001EE620, a2);
}

uint64_t sub_1000E3CB8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E2188(a1, a2, a3, a4, (uint64_t)&unk_1001EE5F8, (uint64_t)&unk_1001EE620, (void (*)(uint64_t))sub_1000766FC);
}

void *sub_1000E3CE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for DataScannerViewController.RecognizedDataType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100006DF4(&qword_100291980);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100007D5C(&qword_100291988, (uint64_t (*)(uint64_t))&type metadata accessor for DataScannerViewController.RecognizedDataType, (uint64_t)&protocol conformance descriptor for DataScannerViewController.RecognizedDataType);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100007D5C(&qword_100291990, (uint64_t (*)(uint64_t))&type metadata accessor for DataScannerViewController.RecognizedDataType, (uint64_t)&protocol conformance descriptor for DataScannerViewController.RecognizedDataType);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t destroy for ImageDropDelegate(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 8));
  if (*(unsigned __int8 *)(a1 + 24) != 255)

  swift_release(*(_QWORD *)(a1 + 32));
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for ImageDropDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = *((unsigned __int8 *)a2 + 24);
  swift_retain(v4);
  swift_retain(v5);
  if (v7 == 255)
  {
    *(_QWORD *)(a1 + 16) = *v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)v6 + 8);
  }
  else
  {
    v8 = (void *)*v6;
    *(_QWORD *)(a1 + 16) = *v6;
    *(_BYTE *)(a1 + 24) = v7;
    v9 = v8;
  }
  v10 = a2[4];
  v11 = a2[5];
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t *assignWithCopy for ImageDropDelegate(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  int v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = (void **)(a1 + 2);
  v9 = (void **)(a2 + 2);
  v10 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned __int8 *)a1 + 24) == 255)
  {
    if (v10 == 255)
    {
      v17 = *v9;
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *v8 = v17;
    }
    else
    {
      v14 = *v9;
      a1[2] = (uint64_t)*v9;
      *((_BYTE *)a1 + 24) = v10;
      v15 = v14;
    }
  }
  else if (v10 == 255)
  {
    sub_1000D4EE8((id *)a1 + 2);
    v16 = *((_BYTE *)a2 + 24);
    *v8 = *v9;
    *((_BYTE *)a1 + 24) = v16;
  }
  else
  {
    v11 = *v9;
    v12 = (void *)a1[2];
    a1[2] = (uint64_t)*v9;
    *((_BYTE *)a1 + 24) = v10;
    v13 = v11;

  }
  v18 = a1[4];
  v19 = a2[4];
  a1[4] = v19;
  swift_retain(v19);
  swift_release(v18);
  v20 = a2[5];
  v21 = a1[5];
  a1[5] = v20;
  swift_retain(v20);
  swift_release(v21);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 initializeWithTake for ImageDropDelegate(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

id *assignWithTake for ImageDropDelegate(id *a1, uint64_t *a2)
{
  id v4;
  id v5;
  uint64_t *v6;
  int v7;
  id v8;
  id v9;
  id v10;

  v4 = *a1;
  *a1 = (id)*a2;
  swift_release(v4);
  v5 = a1[1];
  a1[1] = (id)a2[1];
  swift_release(v5);
  v6 = a2 + 2;
  if (*((unsigned __int8 *)a1 + 24) == 255)
    goto LABEL_5;
  v7 = *((unsigned __int8 *)a2 + 24);
  if (v7 == 255)
  {
    sub_1000D4EE8(a1 + 2);
LABEL_5:
    a1[2] = (id)*v6;
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    goto LABEL_6;
  }
  v8 = a1[2];
  a1[2] = (id)*v6;
  *((_BYTE *)a1 + 24) = v7;

LABEL_6:
  v9 = a1[4];
  a1[4] = (id)a2[4];
  swift_release(v9);
  v10 = a1[5];
  a1[5] = (id)a2[5];
  swift_release(v10);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageDropDelegate(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageDropDelegate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageDropDelegate()
{
  return &type metadata for ImageDropDelegate;
}

ValueMetadata *type metadata accessor for GuidanceLabelStyle()
{
  return &type metadata for GuidanceLabelStyle;
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageTranslationView.SharedImageTranslation(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_retain(v4);
  return a1;
}

uint64_t destroy for ImageTranslationView.SharedImageTranslation(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for ImageTranslationView.SharedImageTranslation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for ImageTranslationView.SharedImageTranslation(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for ImageTranslationView.SharedImageTranslation()
{
  return &type metadata for ImageTranslationView.SharedImageTranslation;
}

uint64_t sub_1000E43E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_1000070BC(&qword_1002915A0);
  v1 = sub_1000070BC(&qword_10028E2C8);
  v5 = sub_1000070BC(&qword_100291598);
  v6 = sub_100012334(&qword_1002915C8, &qword_100291598, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onDrop(of:delegate:)>>, 1);
  v3 = sub_1000E0510();
  v5 = v0;
  v6 = v1;
  v7 = OpaqueTypeConformance2;
  v8 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_1000E4494(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100213B10, 1);
}

uint64_t sub_1000E44A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100213AE8, 1);
}

uint64_t sub_1000E44B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  if (*(unsigned __int8 *)(v0 + 40) != 255)

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_1000E4508(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000E08E4(a1, a2, a3, v3 + 16);
}

uint64_t sub_1000E4510(uint64_t a1)
{
  sub_1000E05CC(*(id *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

uint64_t sub_1000E453C()
{
  uint64_t v0;

  sub_1000D6A40(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  if (*(unsigned __int8 *)(v0 + 56) != 255)

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 81, 7);
}

void sub_1000E4594()
{
  uint64_t v0;

  sub_1000E0B90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (_OWORD *)(v0 + 32));
}

uint64_t sub_1000E45A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E1284(a1);
}

unint64_t sub_1000E45A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002919D8;
  if (!qword_1002919D8)
  {
    v1 = sub_1000070BC(&qword_1002919D0);
    sub_10001B6DC(&qword_1002919E0, &qword_1002919E8, (void (*)(void))sub_1000E464C);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002919D8);
  }
  return result;
}

unint64_t sub_1000E464C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1002919F0;
  if (!qword_1002919F0)
  {
    v1 = sub_1000070BC(&qword_1002919F8);
    v2[0] = sub_1000070BC(&qword_100291A00);
    v2[1] = sub_1000070BC(&qword_10028BCF8);
    v2[2] = sub_1000E473C();
    v2[3] = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_100012334(&qword_100291A18, &qword_100291A20, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002919F0);
  }
  return result;
}

unint64_t sub_1000E473C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291A08;
  if (!qword_100291A08)
  {
    v1 = sub_1000070BC(&qword_100291A00);
    sub_100007D5C(&qword_100291A10, (uint64_t (*)(uint64_t))&type metadata accessor for LabelStyleConfiguration.Title, (uint64_t)&protocol conformance descriptor for LabelStyleConfiguration.Title);
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291A08);
  }
  return result;
}

uint64_t sub_1000E47E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000E4808(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

void *sub_1000E482C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptySetSingleton;
  sub_100006DF4(&qword_100291A48);
  v3 = static _SetStorage.allocate(capacity:)(v1);
  v4 = 0;
  v5 = v3 + 56;
  v26 = v1;
  v27 = a1 + 32;
  do
  {
    v6 = (uint64_t *)(v27 + 16 * v4);
    v7 = *v6;
    v8 = v6[1];
    Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
    switch(v8)
    {
      case 0uLL:
        v9 = 0x74616C736E617274;
        v10 = 0xEB000000006E6F69;
        break;
      case 1uLL:
        v9 = 0x6C6175736976;
        v10 = 0xE600000000000000;
        break;
      case 2uLL:
        v9 = 0x61737265766E6F63;
        v10 = 0xEC0000006E6F6974;
        break;
      case 3uLL:
        v9 = 0x657469726F766166;
        v10 = 0xE900000000000073;
        break;
      case 4uLL:
        v9 = 1701736302;
        v10 = 0xE400000000000000;
        break;
      default:
        swift_bridgeObjectRetain(v8);
        String.hash(into:)(v28, 0x657469726F766166, 0xE900000000000073);
        v9 = v7;
        v10 = v8;
        break;
    }
    String.hash(into:)(v28, v9, v10);
    v11 = Hasher._finalize()();
    v12 = ~(-1 << *(_BYTE *)(v3 + 32));
    v13 = v11 & v12;
    v14 = (v11 & (unint64_t)v12) >> 6;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    v16 = 1 << (v11 & v12);
    v17 = *(_QWORD *)(v3 + 48);
    if ((v16 & v15) != 0)
    {
      while (2)
      {
        v18 = (_QWORD *)(v17 + 16 * v13);
        v19 = v18[1];
        switch(v19)
        {
          case 0:
            if (v8)
              goto LABEL_15;
            break;
          case 1:
            if (v8 != 1)
              goto LABEL_15;
            break;
          case 2:
            if (v8 != 2)
              goto LABEL_15;
            break;
          case 3:
            if (v8 != 3)
              goto LABEL_15;
            break;
          case 4:
            if (v8 != 4)
              goto LABEL_15;
            break;
          default:
            if (v8 < 5
              || (*v18 == v7 ? (v20 = v19 == v8) : (v20 = 0),
                  !v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, v7, v8, 0) & 1) == 0))
            {
LABEL_15:
              v13 = (v13 + 1) & v12;
              v14 = v13 >> 6;
              v15 = *(_QWORD *)(v5 + 8 * (v13 >> 6));
              v16 = 1 << v13;
              if ((v15 & (1 << v13)) != 0)
                continue;
              v17 = *(_QWORD *)(v3 + 48);
              goto LABEL_33;
            }
            sub_10000B900(v7, v8);
            break;
        }
        break;
      }
    }
    else
    {
LABEL_33:
      *(_QWORD *)(v5 + 8 * v14) = v16 | v15;
      v21 = (uint64_t *)(v17 + 16 * v13);
      *v21 = v7;
      v21[1] = v8;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        JUMPOUT(0x1000E4AE4);
      }
      *(_QWORD *)(v3 + 16) = v24;
    }
    ++v4;
  }
  while (v4 != v26);
  return (void *)v3;
}

void destroy for ImageTranslationView.ExportedImageView(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *initializeWithCopy for ImageTranslationView.ExportedImageView(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  v7 = v3;
  swift_retain(v4);
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for ImageTranslationView.ExportedImageView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = *(void **)(a1 + 16);
  v10 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ImageTranslationView.ExportedImageView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ImageTranslationView.ExportedImageView()
{
  return &type metadata for ImageTranslationView.ExportedImageView;
}

uint64_t sub_1000E4C5C()
{
  return sub_100012334(&qword_100291A50, &qword_100291A58, (uint64_t)&protocol conformance descriptor for DataRepresentation<A>);
}

unint64_t sub_1000E4C8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291A60;
  if (!qword_100291A60)
  {
    v1 = sub_1000070BC(&qword_100291A38);
    sub_1000E4D10();
    sub_100012334(&qword_100291A80, &qword_10028CFC8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291A60);
  }
  return result;
}

unint64_t sub_1000E4D10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291A68;
  if (!qword_100291A68)
  {
    v1 = sub_1000070BC(&qword_1002919C8);
    sub_10001B6DC(&qword_100291A70, &qword_1002919C0, (void (*)(void))sub_1000E4DB4);
    sub_100012334(&qword_10028E158, &qword_10028E160, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291A68);
  }
  return result;
}

unint64_t sub_1000E4DB4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100291A78;
  if (!qword_100291A78)
  {
    v1 = sub_1000070BC(&qword_1002919B8);
    v2[0] = sub_1000070BC(&qword_1002919A8);
    v2[1] = type metadata accessor for TitleOnlyLabelStyle(255);
    v2[2] = sub_100012334(&qword_100291A28, &qword_1002919A8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v2[3] = sub_100007D5C(&qword_100291A30, (uint64_t (*)(uint64_t))&type metadata accessor for TitleOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for TitleOnlyLabelStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291A78);
  }
  return result;
}

uint64_t sub_1000E4EA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100213B38, 1);
}

uint64_t sub_1000E4EBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000E4EF0()
{
  uint64_t v0;

  sub_1000DF904(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_1000E4F00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291AC0;
  if (!qword_100291AC0)
  {
    v1 = sub_1000070BC(&qword_100291AB0);
    sub_100012334(&qword_100291AC8, &qword_100291A90, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100291AC0);
  }
  return result;
}

_QWORD *sub_1000E4F9C()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v0[3] = 0;
  swift_unknownObjectWeakInit(v0 + 2, 0);
  v0[5] = 0;
  swift_unknownObjectWeakInit(v0 + 4, 0);
  v0[6] = 0;
  v1 = objc_msgSend((id)objc_opt_self(_LTTranslator), "interruptionController");
  v2 = swift_allocObject(&unk_10026A518, 24, 7);
  swift_weakInit(v2 + 16, v0);
  v7[4] = sub_1000E5630;
  v8 = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100075908;
  v7[3] = &unk_10026A530;
  v3 = _Block_copy(v7);
  swift_release(v8);
  v4 = objc_msgSend(v1, "addObservationBlock:", v3);
  _Block_release(v3);

  v5 = v0[6];
  v0[6] = v4;
  swift_unknownObjectRelease(v5);
  return v0;
}

uint64_t sub_1000E50B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD aBlock[5];
  uint64_t v19;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D948();
  v10 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1000E5650;
  v19 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026A558;
  v11 = _Block_copy(aBlock);
  v12 = v19;
  swift_retain(a1);
  v13 = swift_release(v12);
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_10000F730();
  v15 = sub_100006DF4(&qword_10028AC30);
  v16 = sub_10000F778();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000E526C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1000E52C0();
    return swift_release(v3);
  }
  return result;
}

void sub_1000E52C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *oslog;

  v1 = v0;
  if (qword_10028A480 != -1)
    swift_once(&qword_10028A480, sub_10012112C);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA488);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "There was a connection issue with translationd; finding code to handle it",
      v5,
      2u);
    swift_slowDealloc(v5, -1, -1);
  }

  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(v1 + 24);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Asking main scene to handle XPC interruption", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    ObjectType = swift_getObjectType(v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v1, ObjectType, v8);
    swift_unknownObjectRelease(v7);
    v13 = swift_unknownObjectWeakLoadStrong(v1 + 32);
    if (!v13)
      return;
LABEL_11:
    v14 = *(_QWORD *)(v1 + 40);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Asking live activity scene to handle XPC interruption", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = swift_getObjectType(v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 8))(v1, v18, v14);
    swift_unknownObjectRelease(v13);
    return;
  }
  v13 = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (v13)
    goto LABEL_11;
  oslog = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v19, "There was a connection issue with translationd; this issue is not surfaced in the app because no handlers were registered",
      v20,
      2u);
    swift_slowDealloc(v20, -1, -1);
  }

}

uint64_t sub_1000E55B8()
{
  uint64_t v0;

  sub_100011194(v0 + 16);
  sub_100011194(v0 + 32);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for InterruptionController()
{
  return objc_opt_self(_TtC17SequoiaTranslator22InterruptionController);
}

uint64_t sub_1000E560C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E5630()
{
  uint64_t v0;

  return sub_1000E50B8(v0);
}

uint64_t sub_1000E5638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E5648(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E5650()
{
  uint64_t v0;

  return sub_1000E526C(v0);
}

BOOL sub_1000E5660(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t, __n128);
  int v17;
  BOOL v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t, __n128);
  _BOOL8 v32;
  uint64_t (*v33)(char *);
  uint64_t v34;

  v4 = v3;
  v32 = a2;
  v33 = a1;
  v34 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v29 = *(_QWORD *)(v6 + 72);
    v30 = v8;
    v31 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
    v27 = a3;
    v14 = swift_bridgeObjectRetain(a3);
    while (1)
    {
      v15 = v34;
      v31(v11, v13, v34, v14);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v16)(v11, 0, 1, v15);
      v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v15);
      v18 = v17 != 1;
      if (v17 == 1)
      {
        a3 = v27;
        goto LABEL_13;
      }
      v28 = 1;
      v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v20 = v6;
      v21 = v30;
      v19(v30, v11, v15);
      v18 = v32;
      v22 = v33(v21);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v15);
        swift_bridgeObjectRelease(v27);
        return v18;
      }
      v23 = v22;
      v24 = v16;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v15);
      if ((v23 & 1) != 0)
        break;
      v13 += v29;
      --v12;
      v4 = 0;
      v6 = v20;
      if (!v12)
      {
        a3 = v27;
        goto LABEL_9;
      }
    }
    a3 = v27;
    v18 = v28;
  }
  else
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    v14 = swift_bridgeObjectRetain(a3);
LABEL_9:
    v24(v11, 1, 1, v34, v14);
    v18 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease(a3);
  return v18;
}

id sub_1000E5888()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout____lazy_storage___swipeController;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout____lazy_storage___swipeController);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout____lazy_storage___swipeController);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UISwipeActionController), "initWithSwipeActionHost:style:", v0, 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1000E5900(double a1, double a2, double a3, double a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  objc_class *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  void *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  Class isa;
  id v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  __int128 v42;
  _QWORD *v43;
  objc_super v44;

  v9 = type metadata accessor for IndexPath(0);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (objc_class *)type metadata accessor for InvertedCollectionViewLayout();
  v41 = v4;
  v44.receiver = v4;
  v44.super_class = v12;
  v13 = objc_msgSendSuper2(&v44, "layoutAttributesForElementsInRect:", a1, a2, a3, a4);
  if (!v13)
    return 0;
  v14 = v13;
  v15 = sub_10000A05C(0, (unint64_t *)&qword_10028B088, UICollectionViewLayoutAttributes_ptr);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v26 = v16;
    else
      v26 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v17 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v16);
    if (v17)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease(v16);
    v20 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
    goto LABEL_18;
LABEL_4:
  v43 = _swiftEmptyArrayStorage;
  sub_1001DA2A4(0, v17 & ~(v17 >> 63), 0);
  if (v17 < 0)
    goto LABEL_34;
  v19 = 0;
  v20 = v43;
  do
  {
    if ((v16 & 0xC000000000000001) != 0)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v16);
    else
      v21 = *(id *)(v16 + 8 * v19 + 32);
    v22 = v21;
    v23 = objc_msgSend(v21, "copy");
    _bridgeAnyObjectToAny(_:)(&v42, v23);

    swift_unknownObjectRelease(v23);
    v43 = v20;
    v25 = v20[2];
    v24 = v20[3];
    if (v25 >= v24 >> 1)
    {
      sub_1001DA2A4(v24 > 1, v25 + 1, 1);
      v20 = v43;
    }
    ++v19;
    v20[2] = v25 + 1;
    sub_10003EA2C(&v42, &v20[4 * v25 + 4]);
  }
  while (v17 != v19);
  swift_bridgeObjectRelease(v16);
LABEL_19:
  v16 = (uint64_t)sub_10012121C((uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  if (v16)
  {
    v18 = v16 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v16 >> 62)
      goto LABEL_35;
    v27 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v16, 2);
    for (; v27; v27 = _CocoaArrayWrapper.endIndex.getter(v36))
    {
      v28 = 4;
      v29 = 0;
      if ((v16 & 0xC000000000000001) != 0)
      {
LABEL_23:
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v16);
        goto LABEL_25;
      }
      while (1)
      {
        v30 = *(id *)(v16 + 8 * v28);
LABEL_25:
        v31 = v30;
        v32 = v29 + 1;
        if (__OFADD__(v29, 1))
          break;
        if (objc_msgSend(v30, "representedElementCategory")
          || (v33 = objc_msgSend(v31, "indexPath"),
              static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v33),
              v33,
              isa = IndexPath._bridgeToObjectiveC()().super.isa,
              (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v40),
              v35 = objc_msgSend(v41, "layoutAttributesForItemAtIndexPath:", isa),
              isa,
              !v35))
        {

          if (v32 == v27)
            goto LABEL_39;
        }
        else
        {
          objc_msgSend(v35, "frame");
          objc_msgSend(v31, "setFrame:");
          objc_msgSend(v35, "transform");
          objc_msgSend(v31, "setTransform:", &v42);

          if (v32 == v27)
            goto LABEL_39;
        }
        v29 = ++v28 - 4;
        if ((v16 & 0xC000000000000001) != 0)
          goto LABEL_23;
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      if (v16 >= 0)
        v36 = v18;
      else
        v36 = v16;
      swift_bridgeObjectRetain_n(v16, 2);
    }
LABEL_39:
    swift_bridgeObjectRelease_n(v16, 2);
  }
  return v16;
}

id sub_1000E5D80(uint64_t a1)
{
  void *v1;
  void *v2;
  Class isa;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double Height;
  double v32;
  double v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v39;
  _QWORD v40[5];
  id v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  CGAffineTransform v45;
  objc_super v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v2 = v1;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v46.receiver = v2;
  v46.super_class = (Class)type metadata accessor for InvertedCollectionViewLayout();
  v5 = objc_msgSendSuper2(&v46, "layoutAttributesForItemAtIndexPath:", isa);

  if (!v5)
    return v5;
  v6 = objc_msgSend(v2, "collectionView");
  if (!v6)
    return v5;
  v7 = v6;
  CGAffineTransformMakeScale(&v45, 1.0, -1.0);
  objc_msgSend(v5, "setTransform:", &v45);
  v8 = objc_msgSend(v7, "indexPathsForSelectedItems");
  if (!v8)
    goto LABEL_17;
  v9 = v8;
  v10 = type metadata accessor for IndexPath(0);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  __chkstk_darwin(v12);
  v40[2] = a1;
  LOBYTE(v9) = sub_1000E5660((uint64_t (*)(char *))sub_1000E7270, (_BOOL8)v40, v11);
  swift_bridgeObjectRelease(v11);
  if ((v9 & 1) == 0)
  {
LABEL_17:

    return v5;
  }
  v13 = IndexPath._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v7, "cellForItemAtIndexPath:", v13);

  if (!v14
    || (v41 = v14,
        v15 = sub_10000A05C(0, &qword_100291CC0, UICollectionViewCell_ptr),
        v16 = sub_100006DF4(&qword_100291CC8),
        (swift_dynamicCast(&v42, &v41, v15, v16, 6) & 1) == 0))
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    goto LABEL_19;
  }
  if (!*((_QWORD *)&v43 + 1))
  {
LABEL_19:

    sub_10000A020((uint64_t)&v42, &qword_100291CB8);
    return v5;
  }
  sub_10003E994(&v42, (uint64_t)&v45);
  objc_msgSend(v7, "contentOffset");
  v18 = v17;
  objc_msgSend(v7, "adjustedContentInset");
  v20 = v19;
  objc_msgSend(v5, "frame");
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27 - v18;
  sub_100023AF4(&v45, *(uint64_t *)&v45.d);
  v29 = sub_100023EF0();
  v47.origin.x = v22;
  v47.origin.y = v28;
  v47.size.width = v24;
  v47.size.height = v26;
  if (CGRectGetMinY(v47) >= v20)
  {
    v39 = *(void **)(*sub_100023AF4(&v45, *(uint64_t *)&v45.d)
                   + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight);
    if (v39)
      objc_msgSend(v39, "setActive:", 0);
  }
  else
  {
    v48.origin.x = v22;
    v48.origin.y = v28;
    v48.size.width = v24;
    v48.size.height = v26;
    v30 = v20 - CGRectGetMinY(v48);
    objc_msgSend(v5, "frame");
    Height = CGRectGetHeight(v49);
    objc_msgSend(v5, "frame");
    v32 = CGRectGetHeight(v50) - v30;
    if (v32 <= v29)
      v32 = v29;
    if (v32 >= Height)
      v33 = Height;
    else
      v33 = v32;
    v34 = sub_100023AF4(&v45, *(uint64_t *)&v45.d);
    v35 = *v34;
    v36 = OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight;
    v37 = *(void **)(*v34 + OBJC_IVAR____TtC17SequoiaTranslator22CardCollectionViewCell_cardHeight);
    if (v37)
    {
      objc_msgSend(v37, "setActive:", 1);
      v37 = *(void **)(v35 + v36);
    }
    objc_msgSend(v37, "setConstant:", v33);
  }

  sub_100009C08(&v45);
  return v5;
}

void sub_1000E6250(void *a1, uint64_t a2, void *a3, char a4)
{
  id v6;
  id v7;
  id v8;
  objc_super v9;

  v9.receiver = a1;
  v9.super_class = (Class)type metadata accessor for InvertedCollectionViewLayout();
  v6 = a3;
  v7 = v9.receiver;
  objc_msgSendSuper2(&v9, "prepareForTransitionFromLayout:", v6);
  v8 = sub_1000E5888();
  objc_msgSend(v8, "setSwipeEnabled:", a4 & 1, v9.receiver, v9.super_class);

}

id sub_1000E63E8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  id v7;
  objc_super v9;
  _QWORD aBlock[5];
  uint64_t v11;

  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  v4 = &v2[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout_swipeDelegate];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout____lazy_storage___swipeController] = 0;
  aBlock[4] = a1;
  v11 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAEF0;
  aBlock[3] = &unk_10026A5F8;
  v5 = _Block_copy(aBlock);
  v6 = v11;
  swift_retain(a2);
  swift_release(v6);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for InvertedCollectionViewLayout();
  v7 = objc_msgSendSuper2(&v9, "initWithSectionProvider:", v5);
  swift_release(a2);
  _Block_release(v5);
  return v7;
}

id sub_1000E6520(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v6;
  void *v7;
  uint64_t v8;
  id v9;
  objc_super v11;
  _QWORD aBlock[5];
  uint64_t v13;

  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout_cachedAttributes] = _swiftEmptyArrayStorage;
  v6 = &v3[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout_swipeDelegate];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout____lazy_storage___swipeController] = 0;
  aBlock[4] = a1;
  v13 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAEF0;
  aBlock[3] = &unk_10026A5A8;
  v7 = _Block_copy(aBlock);
  v8 = v13;
  swift_retain(a2);
  swift_release(v8);
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for InvertedCollectionViewLayout();
  v9 = objc_msgSendSuper2(&v11, "initWithSectionProvider:configuration:", v7, a3);
  swift_release(a2);

  _Block_release(v7);
  return v9;
}

id sub_1000E6700()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InvertedCollectionViewLayout();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for InvertedCollectionViewLayout()
{
  return objc_opt_self(_TtC17SequoiaTranslator28InvertedCollectionViewLayout);
}

id sub_1000E688C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id result;

  v6 = a3;
  v7 = a1;
  v8 = objc_msgSend(v7, "collectionView");
  if (v8)
  {
    v9 = v8;

    return v9;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001001FCE70, "SequoiaTranslator/InvertedCollectionViewLayout.swift", 52, 2, a4, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E6948@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = v3;
  v8 = sub_100006DF4((uint64_t *)&unk_100290880);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  v14 = objc_msgSend(v4, "collectionView");
  if (!v14)
  {
    v18 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
LABEL_7:
    v20 = sub_10000A020((uint64_t)v13, (uint64_t *)&unk_100290880);
    return IndexPath.init()(v20);
  }
  v15 = v14;
  v16 = objc_msgSend(v14, "indexPathForItemAtPoint:", a2, a3);

  if (v16)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v17 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 0, 1, v17);
  }
  else
  {
    v17 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  }
  sub_1000E71EC((uint64_t)v11, (uint64_t)v13);
  type metadata accessor for IndexPath(0);
  v19 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, v17) == 1)
    goto LABEL_7;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a1, v13, v17);
}

id sub_1000E6C58(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  v15 = (void *)a5(v12);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

uint64_t sub_1000E6E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = type metadata accessor for IndexPath(0);
  v5 = sub_1000E72CC();
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1;
}

void sub_1000E6E5C()
{
  void *v0;
  id v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  id v11;
  unint64_t v12;
  unint64_t v13;

  v1 = objc_msgSend(v0, "collectionView");
  if (v1)
  {
    v2 = v1;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v4 = objc_msgSend(v2, "cellForItemAtIndexPath:", isa);

    if (v4)
    {
      v5 = type metadata accessor for CardCollectionViewCell();
      if (swift_dynamicCastClass(v4, v5))
      {
        v6 = v4;
        v7 = sub_100023D30();
        objc_msgSend(v7, "safeAreaInsets");

        return;
      }
    }
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(0xE000000000000000);
    v12 = 0xD000000000000017;
    v13 = 0x80000001001FCEA0;
    v11 = v4;
    v8 = sub_100006DF4(&qword_100291CB0);
    v9._countAndFlagsBits = String.init<A>(describing:)(&v11, v8);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v12, v13, "SequoiaTranslator/InvertedCollectionViewLayout.swift", 52, 2, 129, 0);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001001FCE70, "SequoiaTranslator/InvertedCollectionViewLayout.swift", 52, 2, 123, 0);
  }
  __break(1u);
}

char *sub_1000E7020()
{
  void *v0;
  id v1;
  void *v2;
  Class isa;
  char *v4;
  uint64_t v5;
  char *v6;

  v1 = objc_msgSend(v0, "collectionView");
  if (!v1)
    return 0;
  v2 = v1;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v4 = (char *)objc_msgSend(v2, "cellForItemAtIndexPath:", isa);

  if (!v4)
  {

    return v4;
  }
  v5 = type metadata accessor for CardCollectionViewCell();
  if (!swift_dynamicCastClass(v4, v5))
  {

    return 0;
  }
  v6 = v4;
  v4 = sub_100023D30();

  return v4;
}

uint64_t sub_1000E70F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  _BYTE v7[24];
  _BYTE v8[24];
  uint64_t v9;

  v3 = v1 + OBJC_IVAR____TtC17SequoiaTranslator28InvertedCollectionViewLayout_swipeDelegate;
  swift_beginAccess(v3, v7, 0, 0);
  sub_1000E71A4(v3, (uint64_t)v8);
  if (v9)
  {
    sub_100023AB0((uint64_t)v8, (uint64_t)v6);
    sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028C0A0);
    sub_100023AF4(v6, v6[3]);
    v4 = sub_10002C8B4(a1);
    sub_100009C08(v6);
  }
  else
  {
    sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028C0A0);
    return 0;
  }
  return v4;
}

uint64_t sub_1000E71A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028C0A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E71EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_100290880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E7234()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E7258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E7268(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E7270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for IndexPath(0);
  v5 = sub_1000E72CC();
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1;
}

unint64_t sub_1000E72CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291CD0;
  if (!qword_100291CD0)
  {
    v1 = type metadata accessor for IndexPath(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IndexPath, v1);
    atomic_store(result, (unint64_t *)&qword_100291CD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for KaraokeRenderer.TimingInfo()
{
  return &type metadata for KaraokeRenderer.TimingInfo;
}

Swift::Int sub_1000E7330()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000E7378()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000E73A8(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_1000E73EC(double *a1, double *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1000E7404()
{
  unint64_t result;

  result = qword_100291CE0;
  if (!qword_100291CE0)
  {
    result = swift_getWitnessTable("ռ\a", &type metadata for KaraokeRenderer.TimingInfo);
    atomic_store(result, (unint64_t *)&qword_100291CE0);
  }
  return result;
}

unint64_t sub_1000E744C()
{
  unint64_t result;

  result = qword_100291CE8;
  if (!qword_100291CE8)
  {
    result = swift_getWitnessTable(&unk_1001EE99C, &type metadata for KaraokeRenderer.TimingInfo);
    atomic_store(result, (unint64_t *)&qword_100291CE8);
  }
  return result;
}

uint64_t *sub_1000E7490(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1000E7518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for LayoutDirection(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_1000E7550(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for LayoutDirection(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *sub_1000E75AC(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for LayoutDirection(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1000E7610(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for LayoutDirection(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1000E766C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for LayoutDirection(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000E76C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E76D4);
}

uint64_t sub_1000E76D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for LayoutDirection(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1000E7714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7720);
}

uint64_t sub_1000E7720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for LayoutDirection(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for KaraokeRenderer(uint64_t a1)
{
  uint64_t result;

  result = qword_100291D48;
  if (!qword_100291D48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KaraokeRenderer);
  return result;
}

uint64_t sub_1000E77A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for LayoutDirection(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void *sub_1000E7818()
{
  return &protocol witness table for Float;
}

void sub_1000E7824(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(CGFloat *, _QWORD);
  void (*v60)(char *);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  double v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  unint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  double v76;
  CGFloat v77;
  char *v78;
  CGFloat v79;
  CGFloat v80;
  double v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  double *v88;
  float *v89;
  char *v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  int v93;
  double v94;
  double v95;
  char *v96;
  double v97;
  CGFloat v98;
  CGFloat *v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  void (*v110)(double *, _QWORD);
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  CGFloat v115;
  CGFloat v116;
  double v117;
  double v118;
  double MaxX;
  double v120;
  double MinX;
  unint64_t v122;
  _QWORD *v123;
  double v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  __n128 v162;
  uint64_t v163;
  double *v164;
  char *v165;
  int v166;
  char *v167;
  void (*v168)(char *, char *, uint64_t);
  char *v169;
  double v170;
  double MidY;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  float v176;
  uint64_t v177;
  char *v178;
  __n128 v179;
  char *v180;
  __n128 v181;
  double v182;
  __n128 v183;
  int v184;
  CGFloat *v185;
  CGFloat v186;
  CGFloat v187;
  CGFloat v188;
  CGFloat v189;
  double v190;
  double v191;
  double v192;
  float v193;
  double v194;
  CGFloat v195;
  CGFloat v196;
  CGFloat v197;
  CGFloat v198;
  int v199;
  _QWORD **v200;
  double v201;
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  void (*v204)(char *, uint64_t, uint64_t);
  char *v205;
  uint64_t v206;
  double v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  void (*v212)(uint64_t, char *, uint64_t);
  char *v213;
  uint64_t v214;
  void (*v215)(char *, uint64_t);
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  double *v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  float *v232;
  uint64_t v233;
  uint64_t v234;
  CGFloat Width;
  char *v236;
  char *v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  double v245;
  double v246;
  char *v247;
  char *v248;
  CGFloat v249;
  CGFloat v250;
  CGFloat v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  __int128 v257;
  double v258;
  char v259;
  double v260;
  _QWORD *v261;
  _QWORD v262[3];
  double v263;
  double v264;
  CGFloat v265;
  double v266;
  CGFloat v267;
  double v268;
  double v269;
  CGRect v270;
  CGRect v271;
  CGRect v272;
  CGRect v273;
  CGRect v274;
  CGRect v275;
  CGRect v276;
  CGRect v277;

  v233 = a1;
  v223 = type metadata accessor for ShaderFunction(0);
  v222 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v221 = (char *)&v201 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = type metadata accessor for Shader(0);
  v219 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v218 = (char *)&v201 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_100006DF4(&qword_100291D90);
  v206 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v231 = (char *)&v201 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100291D98);
  __chkstk_darwin(v6);
  v236 = (char *)&v201 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UnitCurve(0);
  __chkstk_darwin(v8);
  v240 = (char *)&v201 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = sub_100006DF4((uint64_t *)&unk_1002981B0);
  v242 = *(_QWORD *)(v244 - 8);
  v10 = __chkstk_darwin(v244);
  v205 = (char *)&v201 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v237 = (char *)&v201 - v13;
  __chkstk_darwin(v12);
  v243 = (char *)&v201 - v14;
  v241 = type metadata accessor for Text.Layout.Run(0);
  *(_QWORD *)&v257 = *(_QWORD *)(v241 - 8);
  v15 = __chkstk_darwin(v241);
  v254 = (char *)&v201 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v247 = (char *)&v201 - v17;
  v214 = sub_100006DF4(&qword_100291DA0);
  v18 = __chkstk_darwin(v214);
  v213 = (char *)&v201 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v201 - v20;
  v22 = sub_100006DF4(&qword_100291DA8);
  v23 = __chkstk_darwin(v22);
  v227 = (char *)&v201 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v225 = (char *)&v201 - v25;
  v234 = type metadata accessor for Text.Layout(0);
  v251 = *(double *)(v234 - 8);
  __chkstk_darwin(v234);
  v210 = (char *)&v201 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100006DF4(&qword_100291DB0);
  __chkstk_darwin(v27);
  v208 = (char *)&v201 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_100006DF4(&qword_100291DB8);
  v29 = __chkstk_darwin(v209);
  v230 = (uint64_t)&v201 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v229 = (uint64_t)&v201 - v31;
  v250 = COERCE_DOUBLE(type metadata accessor for LayoutDirection(0));
  v249 = *(double *)(*(_QWORD *)&v250 - 8);
  __chkstk_darwin(*(_QWORD *)&v250);
  v248 = (char *)&v201 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Text.Layout.Line(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v226 = (char *)&v201 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v39 = (uint64_t)&v201 - v38;
  __chkstk_darwin(v37);
  v253 = (char *)&v201 - v40;
  v41 = type metadata accessor for GraphicsContext.Filter(0);
  v42 = *(char **)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v216 = (char *)&v201 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v201 - v46;
  v48 = GraphicsContext.rbDrawingState.getter(v45);
  if (qword_10028A3E8 != -1)
    goto LABEL_79;
  while (1)
  {
    v49 = RBDrawingStateSetTransition(v48, qword_100291CD8);
    v50 = static Color.translateAccentColor.getter(v49);
    v51 = Color.opacity(_:)(v50, 1.0 - ((float)(v232[1] + -0.5) + (float)(v232[1] + -0.5)));
    swift_release(v50);
    static GraphicsContext.Filter.shadow(color:radius:x:y:blendMode:options:)(v51, 0, 0, 3.0, 0.0, 0.0);
    v52 = swift_release(v51);
    v224 = (double *)a2;
    GraphicsContext.addFilter(_:options:)(v47, 0, v52);
    v215 = (void (*)(char *, uint64_t))*((_QWORD *)v42 + 1);
    v215(v47, v41);
    v53 = sub_100007D5C(&qword_100291DC0, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, (uint64_t)&protocol conformance descriptor for Text.Layout);
    v54 = v233;
    v55 = v234;
    v56 = dispatch thunk of Collection.count.getter(v234, v53);
    v217 = v41;
    if (v56)
    {
      v57 = v56;
      v258 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      sub_1001DA324(0, v56 & ~(v56 >> 63), 0);
      dispatch thunk of Collection.startIndex.getter(&v261, v55, v53);
      if (v57 < 0)
      {
        __break(1u);
LABEL_81:
        LOBYTE(v199) = 2;
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v199, 1046, 0);
        __break(1u);
        return;
      }
      v58 = v234;
      do
      {
        v59 = (uint64_t (*)(CGFloat *, _QWORD))dispatch thunk of Collection.subscript.read(&v265, &v261, v58, v53);
        v60 = *(void (**)(char *))(v34 + 16);
        v61 = v34;
        v62 = v253;
        v60(v253);
        v63 = v59(&v265, 0);
        Text.Layout.Line.typographicBounds.getter(v262, v63);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v33);
        v64 = v258;
        if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v258) & 1) == 0)
        {
          sub_1001DA324(0, *(_QWORD *)(*(_QWORD *)&v64 + 16) + 1, 1);
          v64 = v258;
        }
        v66 = *(_QWORD *)(*(_QWORD *)&v64 + 16);
        v65 = *(_QWORD *)(*(_QWORD *)&v64 + 24);
        v34 = v61;
        if (v66 >= v65 >> 1)
        {
          sub_1001DA324(v65 > 1, v66 + 1, 1);
          v64 = v258;
        }
        v67 = v262[0];
        v68 = v262[2];
        v69 = *(double *)&v262[1] - v263;
        v70 = v263 + v264;
        *(_QWORD *)(*(_QWORD *)&v64 + 16) = v66 + 1;
        v71 = *(_QWORD *)&v64 + 32 * v66;
        *(_QWORD *)(v71 + 32) = v67;
        *(double *)(v71 + 40) = v69;
        *(_QWORD *)(v71 + 48) = v68;
        *(double *)(v71 + 56) = v70;
        v54 = v233;
        v72 = v64;
        v58 = v234;
        dispatch thunk of Collection.formIndex(after:)(&v261, v234, v53);
        --v57;
      }
      while (v57);
    }
    else
    {
      v72 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    }
    v73 = *(_QWORD *)(*(_QWORD *)&v72 + 16);
    v74 = v241;
    v207 = v72;
    if (v73)
    {
      swift_bridgeObjectRetain(*(_QWORD *)&v72);
      v75 = (_QWORD *)(*(_QWORD *)&v72 + 56);
      v76 = 100.0;
      do
      {
        v76 = v76 + CGRectGetWidth(*(CGRect *)(v75 - 3));
        v75 += 4;
        --v73;
      }
      while (v73);
      v72 = v207;
      swift_bridgeObjectRelease(*(_QWORD *)&v207);
    }
    else
    {
      v76 = 100.0;
    }
    v252 = (uint64_t)v232 + *(int *)(type metadata accessor for KaraokeRenderer(0) + 24);
    v77 = v249;
    v78 = v248;
    v79 = v250;
    (*(void (**)(char *, _QWORD, CGFloat))(*(_QWORD *)&v249 + 104))(v248, enum case for LayoutDirection.rightToLeft(_:), COERCE_CGFLOAT(*(_QWORD *)&v250));
    LODWORD(v252) = static LayoutDirection.== infix(_:_:)(v252, v78);
    (*(void (**)(char *, CGFloat))(*(_QWORD *)&v77 + 8))(v78, COERCE_CGFLOAT(*(_QWORD *)&v79));
    v261 = _swiftEmptyArrayStorage;
    v80 = v251;
    v81 = 50.0 / v76;
    v82 = v208;
    v83 = v234;
    v204 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v251 + 16);
    v204(v208, v54, v234);
    v203 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v80 + 32);
    v203(v210, v82, v83);
    v84 = sub_100007D5C(&qword_100291DC8, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, (uint64_t)&protocol conformance descriptor for Text.Layout);
    v85 = swift_bridgeObjectRetain(*(_QWORD *)&v72);
    v86 = v229;
    v202 = v84;
    dispatch thunk of Sequence.makeIterator()(v83, v84, v85);
    v87 = v209;
    v88 = (double *)(v86 + *(int *)(v209 + 52));
    *v88 = v72;
    v88[1] = 0.0;
    v89 = v232;
    *(_BYTE *)(v86 + *(int *)(v87 + 56)) = 0;
    v90 = v225;
    sub_1000E9074(v225);
    v91 = sub_100006DF4(&qword_100291DD0);
    v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48);
    v93 = v92(v90, 1, v91);
    v255 = v34;
    v246 = v76;
    if (v93 == 1)
      break;
    v212 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 32);
    v48 = 1;
    v201 = 50.0 / v76;
    v245 = 50.0 / v76;
    v94 = 0.0;
    v95 = 0.0;
    v96 = v225;
    v256 = v21;
    v211 = v39;
    while (1)
    {
      v99 = (CGFloat *)&v96[*(int *)(v91 + 48)];
      v100 = *v99;
      v101 = v99[1];
      v103 = v99[2];
      v102 = v99[3];
      v212(v39, v96, v33);
      v251 = v100;
      v270.origin.x = v100;
      v250 = v101;
      v270.origin.y = v101;
      v249 = v103;
      v270.size.width = v103;
      v270.size.height = v102;
      Width = CGRectGetWidth(v270);
      v104 = v213;
      v248 = *(char **)(v34 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v248)(v213, v39, v33);
      v47 = (char *)sub_100007D5C(&qword_100291DF8, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout.Line, (uint64_t)&protocol conformance descriptor for Text.Layout.Line);
      dispatch thunk of Collection.startIndex.getter(&v258, v33, v47);
      v105 = v214;
      *(double *)&v104[*(int *)(v214 + 36)] = v258;
      v106 = (uint64_t)v104;
      v21 = v256;
      sub_1000E9868(v106, (uint64_t)v256);
      v42 = &v21[*(int *)(v105 + 36)];
      v107 = *(_QWORD *)v42;
      dispatch thunk of Collection.endIndex.getter(&v258, v33, v47);
      if (v107 != *(_QWORD *)&v258)
        break;
      v97 = v95;
LABEL_21:
      v98 = Width / v246;
      sub_10000A020((uint64_t)v21, &qword_100291DA0);
      v34 = v255;
      (*(void (**)(uint64_t, uint64_t))(v255 + 8))(v39, v33);
      v245 = v245 + v98;
      v96 = v225;
      sub_1000E9074(v225);
      v91 = sub_100006DF4(&qword_100291DD0);
      v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48);
      v95 = v97;
      if (v92(v96, 1, v91) == 1)
      {
        v89 = v232;
        v76 = v246;
        v81 = v201;
        goto LABEL_65;
      }
    }
    v108 = v94;
    while (1)
    {
      v34 = v39;
      v110 = (void (*)(double *, _QWORD))dispatch thunk of Collection.subscript.read(&v258, v42, v33, v47);
      v41 = v257;
      v111 = v247;
      (*(void (**)(char *))(v257 + 16))(v247);
      v110(&v258, 0);
      v112 = v253;
      ((void (*)(char *, char *, uint64_t))v248)(v253, v21, v33);
      dispatch thunk of Collection.formIndex(after:)(v42, v33, v47);
      (*(void (**)(char *, uint64_t))(v255 + 8))(v112, v33);
      v113 = v254;
      v114 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v254, v111, v74);
      Text.Layout.Run.typographicBounds.getter(&v265, v114);
      v115 = v265;
      v116 = v267;
      v117 = v266 - v268;
      v118 = v268 + v269;
      if ((v252 & 1) != 0)
      {
        v271.origin.x = v251;
        v271.origin.y = v250;
        v271.size.width = v249;
        v271.size.height = v102;
        MaxX = CGRectGetMaxX(v271);
        v272.origin.x = v115;
        v272.origin.y = v117;
        v272.size.width = v116;
        v272.size.height = v118;
        v120 = MaxX - CGRectGetMaxX(v272);
      }
      else
      {
        v273.origin.x = v265;
        v273.origin.y = v266 - v268;
        v273.size.width = v267;
        v273.size.height = v268 + v269;
        MinX = CGRectGetMinX(v273);
        v274.origin.x = v251;
        v274.origin.y = v250;
        v274.size.width = v249;
        v274.size.height = v102;
        v120 = MinX - CGRectGetMinX(v274);
      }
      v122 = sub_1000E98B0();
      v123 = Text.Layout.Run.subscript.getter(&v258, &type metadata for KaraokeRenderer.TimingInfo, &type metadata for KaraokeRenderer.TimingInfo, v122);
      v21 = v256;
      v39 = v34;
      if ((v259 & 1) == 0)
        break;
      (*(void (**)(char *, uint64_t))(v257 + 8))(v113, v74);
      v97 = v95;
      v94 = v108;
LABEL_25:
      v109 = *(_QWORD *)v42;
      dispatch thunk of Collection.endIndex.getter(&v258, v33, v47);
      v108 = v94;
      v95 = v97;
      if (v109 == *(_QWORD *)&v258)
        goto LABEL_21;
    }
    v94 = v258;
    v97 = v258 - v108;
    if ((v48 & 1) != 0)
      v124 = 0.0;
    else
      v124 = v245 + v120 / v246;
    if ((v97 > 0.0) | v48 & 1)
    {
      v258 = v124;
      v125 = v240;
      static UnitCurve.linear.getter(v123);
      v126 = sub_1000E981C();
      LinearKeyframe.init(_:duration:timingCurve:)(&v258, v125, &type metadata for CGFloat, v126, v94 - v108);
      v127 = (unint64_t)v261;
      if ((swift_isUniquelyReferenced_nonNull_native(v261) & 1) == 0)
        v127 = sub_1001A7B78(0, *(_QWORD *)(v127 + 16) + 1, 1, v127);
      v129 = *(_QWORD *)(v127 + 16);
      v128 = *(_QWORD *)(v127 + 24);
      if (v129 >= v128 >> 1)
        v127 = sub_1001A7B78(v128 > 1, v129 + 1, 1, v127);
      *(_QWORD *)(v127 + 16) = v129 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v242 + 32))(v127+ ((*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80))+ *(_QWORD *)(v242 + 72) * v129, v243, v244);
      v261 = (_QWORD *)v127;
      v74 = v241;
      (*(void (**)(char *, uint64_t))(v257 + 8))(v113, v241);
      v48 = 0;
      goto LABEL_25;
    }
    if (v95 <= 0.0)
    {
      (*(void (**)(char *, uint64_t))(v257 + 8))(v113, v74);
LABEL_61:
      v48 = 0;
      v97 = v95;
      goto LABEL_25;
    }
    a2 = (unint64_t)v261;
    if (v261[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v261) & 1) != 0)
      {
        v130 = *(_QWORD *)(a2 + 16);
        if (!v130)
          goto LABEL_77;
      }
      else
      {
        a2 = sub_100080968(a2);
        v130 = *(_QWORD *)(a2 + 16);
        if (!v130)
          goto LABEL_77;
      }
      v131 = v130 - 1;
      v132 = v242;
      v238 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
      v239 = *(_QWORD *)(v242 + 72);
      v34 = *(_QWORD *)(v242 + 32);
      v133 = (uint64_t)v236;
      v134 = v244;
      ((void (*)(char *, unint64_t, uint64_t))v34)(v236, a2 + v238 + v239 * (v130 - 1), v244);
      *(_QWORD *)(a2 + 16) = v131;
      v261 = (_QWORD *)a2;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v132 + 56))(v133, 0, 1, v134);
      LODWORD(v131) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v133, 1, v134);
      v135 = sub_10000A020(v133, &qword_100291D98);
      if ((_DWORD)v131 == 1)
      {
        v48 = *(_QWORD *)(a2 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
        v261 = (_QWORD *)a2;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          a2 = sub_100080968(a2);
          v261 = (_QWORD *)a2;
        }
        v21 = v256;
        v41 = v48 - 1;
        v137 = *(_QWORD *)(a2 + 16);
        v39 = v239;
        if (v48 - 1 >= v137)
          goto LABEL_78;
        v138 = v137 - 1;
        v139 = a2 + v238 + v41 * v239;
        v135 = (*(uint64_t (**)(unint64_t, uint64_t))(v242 + 8))(v139, v244);
        v140 = v138 - v41;
        if ((uint64_t)(v138 - v41) < 0)
          goto LABEL_81;
        v141 = v139 + v39;
        v142 = v254;
        if (v39 > 0 || v139 >= v141 + v140 * v39)
        {
          v135 = swift_arrayInitWithTakeFrontToBack(v139, v141, v140, v244);
        }
        else if (v39)
        {
          v135 = swift_arrayInitWithTakeBackToFront(v139);
        }
        *(_QWORD *)(a2 + 16) = v138;
        v261 = (_QWORD *)a2;
        v39 = v211;
      }
      else
      {
        v21 = v256;
        v142 = v254;
      }
      v258 = v124;
      v143 = v240;
      static UnitCurve.linear.getter(v135);
      v144 = sub_1000E981C();
      LinearKeyframe.init(_:duration:timingCurve:)(&v258, v143, &type metadata for CGFloat, v144, v95);
      if ((swift_isUniquelyReferenced_nonNull_native(a2) & 1) == 0)
        a2 = sub_1001A7B78(0, *(_QWORD *)(a2 + 16) + 1, 1, a2);
      v146 = *(_QWORD *)(a2 + 16);
      v145 = *(_QWORD *)(a2 + 24);
      v147 = v239;
      if (v146 >= v145 >> 1)
      {
        v148 = sub_1001A7B78(v145 > 1, v146 + 1, 1, a2);
        v147 = v239;
        a2 = v148;
      }
      *(_QWORD *)(a2 + 16) = v146 + 1;
      ((void (*)(unint64_t, char *, uint64_t))v34)(a2 + v238 + v146 * v147, v237, v244);
      v261 = (_QWORD *)a2;
      v74 = v241;
      (*(void (**)(char *, uint64_t))(v257 + 8))(v142, v241);
      goto LABEL_61;
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    swift_once(&qword_10028A3E8, sub_1000E95D0);
  }
  v94 = 0.0;
LABEL_65:
  v149 = sub_10000A020(v229, &qword_100291DB8);
  v258 = 1.0;
  v150 = v240;
  static UnitCurve.linear.getter(v149);
  v151 = sub_1000E981C();
  v152 = v205;
  LinearKeyframe.init(_:duration:timingCurve:)(&v258, v150, &type metadata for CGFloat, v151, 1.0 - v94);
  v153 = (unint64_t)v261;
  if ((swift_isUniquelyReferenced_nonNull_native(v261) & 1) == 0)
    v153 = sub_1001A7B78(0, *(_QWORD *)(v153 + 16) + 1, 1, v153);
  v155 = *(_QWORD *)(v153 + 16);
  v154 = *(_QWORD *)(v153 + 24);
  if (v155 >= v154 >> 1)
    v153 = sub_1001A7B78(v154 > 1, v155 + 1, 1, v153);
  *(_QWORD *)(v153 + 16) = v155 + 1;
  v156 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v242 + 32))(v153+ ((*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80))+ *(_QWORD *)(v242 + 72) * v155, v152, v244);
  v261 = (_QWORD *)v153;
  v258 = 0.0;
  __chkstk_darwin(v156);
  v200 = &v261;
  v157 = sub_100006DF4(&qword_100291DE0);
  v158 = sub_100012334(&qword_100291DE8, &qword_100291DE0, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  KeyframeTimeline.init<A>(initialValue:content:)(&v258, sub_1000E9860, &v199, &type metadata for CGFloat, v157, v158);
  v159 = v208;
  v160 = v234;
  v204(v208, v233, v234);
  v203(v210, v159, v160);
  v161 = v230;
  dispatch thunk of Sequence.makeIterator()(v160, v202, v162);
  v163 = v209;
  v164 = (double *)(v161 + *(int *)(v209 + 52));
  *v164 = v207;
  v164[1] = 0.0;
  *(_BYTE *)(v161 + *(int *)(v163 + 56)) = 0;
  v165 = v227;
  sub_1000E9074(v227);
  v166 = v92(v165, 1, v91);
  v167 = v226;
  if (v166 != 1)
  {
    v168 = *(void (**)(char *, char *, uint64_t))(v255 + 32);
    v257 = xmmword_1001E4D60;
    v169 = v221;
    do
    {
      v185 = (CGFloat *)&v165[*(int *)(v91 + 48)];
      v186 = *v185;
      v187 = v185[1];
      v188 = v185[2];
      v189 = v185[3];
      v168(v167, v165, v33);
      v258 = *v224;
      swift_retain(*(_QWORD *)&v258);
      v276.origin.x = v186;
      v276.origin.y = v187;
      v276.size.width = v188;
      v276.size.height = v189;
      v190 = CGRectGetWidth(v276) / v76;
      KeyframeTimeline.value(progress:)(&v260, v228, *v89);
      v191 = v81;
      v192 = (v260 - v81) / v190;
      v193 = v89[1];
      v277.origin.x = v186;
      v277.origin.y = v187;
      v277.size.width = v188;
      v277.size.height = v189;
      v194 = v192 * CGRectGetWidth(v277);
      v195 = v186;
      v196 = v187;
      v197 = v188;
      v198 = v189;
      if ((v252 & 1) != 0)
        v170 = CGRectGetMaxX(*(CGRect *)&v195) - v194;
      else
        v170 = v194 + CGRectGetMinX(*(CGRect *)&v195);
      v275.origin.x = v186;
      v275.origin.y = v187;
      v275.size.width = v188;
      v275.size.height = v189;
      MidY = CGRectGetMidY(v275);
      static ShaderLibrary.subscript.getter(0x656B6F6172616BLL, 0xE700000000000000);
      v172 = sub_100006DF4(&qword_100291DF0);
      v173 = *(_QWORD *)(type metadata accessor for Shader.Argument(0) - 8);
      v174 = swift_allocObject(v172, ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ 2 * *(_QWORD *)(v173 + 72), *(unsigned __int8 *)(v173 + 80) | 7);
      *(_OWORD *)(v174 + 16) = v257;
      v175 = v170;
      v176 = MidY;
      v177 = static Shader.Argument._float2(_:_:)(v175, v176);
      static Shader.Argument._float(_:)(v177, v193);
      v178 = v218;
      ShaderFunction.dynamicallyCall(withArguments:)(v174);
      v179 = swift_bridgeObjectRelease(v174);
      (*(void (**)(char *, uint64_t, __n128))(v222 + 8))(v169, v223, v179);
      v180 = v216;
      static GraphicsContext.Filter.layerShader(_:maxSampleOffset:)(v178, 8.0, 8.0);
      (*(void (**)(char *, uint64_t))(v219 + 8))(v178, v220);
      GraphicsContext.addFilter(_:options:)(v180, 0, v181);
      v215(v180, v217);
      v182 = v258;
      v183 = swift_retain(*(_QWORD *)&v258);
      v167 = v226;
      GraphicsContext.draw(_:options:)(v226, 0, *(_QWORD *)&v182, v183);
      swift_release_n(*(_QWORD *)&v182, 2);
      (*(void (**)(char *, uint64_t))(v255 + 8))(v167, v33);
      v81 = v191 + v190;
      v165 = v227;
      sub_1000E9074(v227);
      v184 = v92(v165, 1, v91);
      v89 = v232;
      v76 = v246;
    }
    while (v184 != 1);
  }
  sub_10000A020(v230, &qword_100291DB8);
  (*(void (**)(char *, uint64_t))(v206 + 8))(v231, v228);
  swift_bridgeObjectRelease(v261);
}

uint64_t sub_1000E9074@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t);
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;
  _QWORD v43[4];

  v2 = v1;
  v4 = type metadata accessor for Text.Layout(0);
  *(_QWORD *)&v42 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Text.Layout.Line(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v38 - v12;
  v14 = sub_100006DF4(&qword_100291DB8);
  v15 = *(int *)(v14 + 56);
  if (*(_BYTE *)(v2 + v15) == 1)
  {
    v16 = sub_100006DF4(&qword_100291DD0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 1, 1, v16);
  }
  v18 = v14;
  v38 = v13;
  v39 = a1;
  v41 = v7;
  v40 = (uint64_t *)(v2 + *(int *)(sub_100006DF4(&qword_100291E18) + 36));
  v19 = *v40;
  v20 = sub_100007D5C(&qword_100291DC0, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, (uint64_t)&protocol conformance descriptor for Text.Layout);
  dispatch thunk of Collection.endIndex.getter(v43, v4, v20);
  if (v19 == v43[0])
    goto LABEL_6;
  v21 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v43, v40, v4, v20);
  (*(void (**)(char *))(v8 + 16))(v11);
  v21(v43, 0);
  v22 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v6, v2, v4);
  dispatch thunk of Collection.formIndex(after:)(v40, v4, v20);
  v23 = v4;
  v24 = v41;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
  v25 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
  v26 = v38;
  result = v25(v38, v11, v24);
  v27 = (_QWORD *)(v2 + *(int *)(v18 + 52));
  v28 = v27[1];
  v29 = *(_QWORD *)(*v27 + 16);
  if (v28 == v29)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v26, v24);
LABEL_6:
    *(_BYTE *)(v2 + v15) = 1;
    v30 = sub_100006DF4(&qword_100291DD0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v39, 1, 1, v30);
  }
  if (v28 >= v29)
  {
    __break(1u);
  }
  else
  {
    v31 = v28 + 1;
    v32 = *v27 + 32 * v28;
    v34 = *(_QWORD *)(v32 + 48);
    v33 = *(_QWORD *)(v32 + 56);
    v42 = *(_OWORD *)(v32 + 32);
    v27[1] = v31;
    v35 = sub_100006DF4(&qword_100291DD0);
    v36 = v39;
    v37 = &v39[*(int *)(v35 + 48)];
    v25(v39, v38, v24);
    *(_OWORD *)v37 = v42;
    *((_QWORD *)v37 + 2) = v34;
    *((_QWORD *)v37 + 3) = v33;
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v36, 0, 1, v35);
  }
  return result;
}

uint64_t sub_1000E9378(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  void (*v13)(char *, uint64_t);
  _QWORD v16[3];

  v2 = sub_100006DF4(&qword_100291E08);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16[-1] - v7;
  v9 = *a1;
  swift_bridgeObjectRetain(v9);
  v10 = sub_100006DF4((uint64_t *)&unk_1002981B0);
  v11 = sub_100012334(&qword_100291E10, (uint64_t *)&unk_1002981B0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  static KeyframesBuilder.buildArray<A>(_:)(v9, &type metadata for CGFloat, v10, v11);
  swift_bridgeObjectRelease(v9);
  v16[0] = &type metadata for CGFloat;
  v16[1] = v10;
  v16[2] = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v16, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildArray<A>(_:)>>, 1);
  static KeyframesBuilder.buildExpression<A>(_:)(v6, &type metadata for CGFloat, v2, OpaqueTypeConformance2);
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v8, &type metadata for CGFloat, v2, OpaqueTypeConformance2);
  static KeyframesBuilder.buildFinalResult<A>(_:)(v6, &type metadata for CGFloat, v2, OpaqueTypeConformance2);
  v13(v6, v2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, v2);
}

uint64_t sub_1000E9510(uint64_t a1, char a2)
{
  return TextProxy.sizeThatFits(_:)(a1, a2 & 1);
}

double sub_1000E9548()
{
  return 0.0;
}

float sub_1000E955C@<S0>(float *a1@<X8>)
{
  uint64_t v1;
  float result;

  result = *(float *)(v1 + 4);
  *a1 = result;
  return result;
}

float sub_1000E9568(float *a1)
{
  uint64_t v1;
  float result;

  result = *a1;
  *(float *)(v1 + 4) = *a1;
  return result;
}

float (*sub_1000E9574(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return sub_1000E9590;
}

float sub_1000E9590(float *a1)
{
  float result;

  result = a1[2];
  *(float *)(*(_QWORD *)a1 + 4) = result;
  return result;
}

uint64_t sub_1000E95A4()
{
  return sub_100007D5C(&qword_100291D88, type metadata accessor for KaraokeRenderer, (uint64_t)&unk_1001EEA04);
}

id sub_1000E95D0()
{
  id result;

  result = sub_1000E95EC();
  qword_100291CD8 = (uint64_t)result;
  return result;
}

id sub_1000E95EC()
{
  id v0;
  id v1;
  double v2;
  double v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  double v14;

  v0 = objc_msgSend(objc_allocWithZone((Class)RBTransition), "init");
  objc_msgSend(v0, "setMethod:", 8);
  v1 = objc_msgSend(objc_allocWithZone((Class)RBTransitionEffect), "init");
  objc_msgSend(v1, "setType:", 19);
  LODWORD(v2) = 1022739087;
  objc_msgSend(v1, "setBeginTime:", v2);
  LODWORD(v3) = 1000593162;
  objc_msgSend(v1, "setDuration:", v3);
  objc_msgSend(v0, "addEffect:", v1);

  v4 = objc_msgSend(objc_allocWithZone((Class)RBTransitionEffect), "init");
  objc_msgSend(v4, "setType:", 1);
  LODWORD(v5) = 0;
  objc_msgSend(v4, "setBeginTime:", v5);
  LODWORD(v6) = 1.0;
  objc_msgSend(v4, "setDuration:", v6);
  objc_msgSend(v0, "addEffect:", v4);

  v7 = objc_msgSend(objc_allocWithZone((Class)RBTransitionEffect), "init");
  objc_msgSend(v7, "setType:", 4);
  LODWORD(v8) = 10.0;
  objc_msgSend(v7, "setArgumentValue:atIndex:", 0, v8);
  LODWORD(v9) = 1051260355;
  objc_msgSend(v7, "setBeginTime:", v9);
  LODWORD(v10) = 1059816735;
  objc_msgSend(v7, "setDuration:", v10);
  objc_msgSend(v0, "addEffect:", v7);

  v11 = objc_msgSend(objc_allocWithZone((Class)RBTransitionEffect), "init");
  objc_msgSend(v11, "setType:", 2);
  LODWORD(v12) = 1061997773;
  objc_msgSend(v11, "setArgumentValue:atIndex:", 0, v12);
  LODWORD(v13) = 1051260355;
  objc_msgSend(v11, "setBeginTime:", v13);
  LODWORD(v14) = 1059816735;
  objc_msgSend(v11, "setDuration:", v14);
  objc_msgSend(v0, "addEffect:", v11);

  return v0;
}

unint64_t sub_1000E981C()
{
  unint64_t result;

  result = qword_100291DD8;
  if (!qword_100291DD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100291DD8);
  }
  return result;
}

uint64_t sub_1000E9860()
{
  uint64_t v0;

  return sub_1000E9378(*(uint64_t **)(v0 + 16));
}

uint64_t sub_1000E9868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100291DA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E98B0()
{
  unint64_t result;

  result = qword_100291E00;
  if (!qword_100291E00)
  {
    result = swift_getWitnessTable(&unk_1001EE9DC, &type metadata for KaraokeRenderer.TimingInfo);
    atomic_store(result, (unint64_t *)&qword_100291E00);
  }
  return result;
}

uint64_t sub_1000E98F4()
{
  return sub_1000E9AD0((uint64_t (*)(void))sub_1000EDE94, (uint64_t)&type metadata for KaraokeProgress);
}

_QWORD *sub_1000E9908@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000EDE94();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for KaraokeProgress, &type metadata for KaraokeProgress, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000E9954(uint64_t *a1)
{
  unint64_t v1;
  __n128 v2;
  uint64_t v4;

  v4 = *a1;
  v1 = sub_1000EDE94();
  v2 = swift_retain(v4);
  return EnvironmentValues.subscript.setter(&v4, &type metadata for KaraokeProgress, &type metadata for KaraokeProgress, v1, v2);
}

BOOL sub_1000E99B0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_1000ED6EC((double *)v5, (uint64_t)v7);
}

uint64_t sub_1000E9A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Double);
}

uint64_t sub_1000E9A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000165A4(&qword_1002921B8, &qword_1002921C0, (void (*)(void))sub_1000EDDB0, (uint64_t)&protocol conformance descriptor for <A> A?);
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

double sub_1000E9A84()
{
  unint64_t v0;
  double v2;

  v0 = sub_1000EDD4C();
  EnvironmentValues.subscript.getter(&v2, &type metadata for KaraokeDuration, &type metadata for KaraokeDuration, v0);
  return v2;
}

uint64_t sub_1000E9ABC()
{
  return sub_1000E9AD0((uint64_t (*)(void))sub_1000EDD08, (uint64_t)&type metadata for KaraokeTimingInfo);
}

uint64_t sub_1000E9AD0(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = a1();
  EnvironmentValues.subscript.getter(&v5, a2, a2, v3);
  return v5;
}

uint64_t sub_1000E9B10(_QWORD *a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(_BYTE *, _QWORD);
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(_QWORD *, uint64_t);
  void (*v62)(_BYTE *, _QWORD);
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t KeyPath;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v72;
  uint64_t i;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[32];
  double v98[2];

  v86 = a1;
  v3 = sub_100006DF4(&qword_100292138);
  __chkstk_darwin(v3);
  v76 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_100292168);
  v6 = __chkstk_darwin(v5);
  v75 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v93 = (uint64_t)&v72 - v8;
  v9 = type metadata accessor for Text.CustomAttributes(0);
  v95 = *(_QWORD *)(v9 - 8);
  v96 = v9;
  __chkstk_darwin(v9);
  v91 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for AttributedString.Runs.Run(0);
  v94 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v92 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100292170);
  __chkstk_darwin(v12);
  v88 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString.Runs.Index(0);
  v89 = *(_QWORD *)(v14 - 8);
  v90 = v14;
  v15 = __chkstk_darwin(v14);
  v87 = (uint64_t *)((char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v72 - v17);
  v19 = type metadata accessor for AttributedString.Runs(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AttributedSubstring(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100006DF4(&qword_100292178);
  v27 = __chkstk_darwin(v83);
  v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v72 - v30;
  v98[0] = a2;
  v32 = sub_100012334(&qword_100292180, &qword_100292138, (uint64_t)&protocol conformance descriptor for Range<A>);
  v77 = v3;
  v74 = v32;
  v33 = AttributedString.subscript.getter(v86, v3);
  AttributedSubstring.runs.getter(v33);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  v79 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v79(v29, v22, v19);
  v84 = sub_100007D5C(&qword_100292188, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs, (uint64_t)&protocol conformance descriptor for AttributedString.Runs);
  dispatch thunk of Collection.startIndex.getter(v18, v19, v84);
  v34 = *(void (**)(char *, uint64_t))(v20 + 8);
  v80 = v22;
  v35 = (uint64_t)v31;
  v85 = v19;
  v78 = v34;
  v34(v22, v19);
  v36 = v83;
  v37 = &v29[*(int *)(v83 + 36)];
  v38 = v89;
  v39 = *(void (**)(char *, _QWORD *, uint64_t))(v89 + 32);
  v86 = v18;
  v39(v37, v18, v90);
  sub_1000110A4((uint64_t)v29, v35, &qword_100292178);
  v40 = v35 + *(int *)(v36 + 36);
  v83 = *(_QWORD *)(v38 + 16);
  v41 = v82;
  v81 = v35;
  for (i = v40; ; v40 = i)
  {
    v53 = v86;
    v54 = v90;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v83)(v86, v40, v90);
    v55 = v87;
    v56 = v35;
    v58 = v84;
    v57 = v85;
    dispatch thunk of Collection.endIndex.getter(v87, v85, v84);
    v59 = sub_100007D5C(&qword_100292190, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Runs.Index);
    v60 = dispatch thunk of static Equatable.== infix(_:_:)(v53, v55, v54, v59);
    v61 = *(void (**)(_QWORD *, uint64_t))(v89 + 8);
    v61(v55, v54);
    v61(v53, v54);
    if ((v60 & 1) != 0)
      break;
    v62 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v97, v40, v57, v58);
    v63 = v94;
    v64 = v88;
    (*(void (**)(char *))(v94 + 16))(v88);
    v62(v97, 0);
    v65 = v80;
    v79(v80, (char *)v56, v57);
    dispatch thunk of Collection.formIndex(after:)(v40, v57, v58);
    v78(v65, v57);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v41);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v64, 1, v41) == 1)
      return sub_10000A020(v81, &qword_100292178);
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v92, v64, v41);
    KeyPath = swift_getKeyPath(&unk_1001EEC20);
    *(&v72 - 2) = __chkstk_darwin(KeyPath);
    v67 = swift_getKeyPath(&unk_1001EEC50);
    v68 = sub_1000EDA24();
    v69 = v93;
    AttributedString.Runs.Run.subscript.getter(v67, v68);
    v70 = swift_release(v67);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v95 + 48))(v69, 1, v96, v70) == 1)
    {
      Text.CustomAttributes.init()();
      sub_10000A020(v93, &qword_100292168);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v91, v93, v96);
    }
    v42 = sub_1000E98B0();
    v43 = v91;
    v44 = Text.CustomAttributes.add<A>(_:)(v98, &type metadata for KaraokeRenderer.TimingInfo, v42);
    v45 = (uint64_t)v76;
    v46 = v92;
    AttributedString.Runs.Run.range.getter(v44);
    v47 = swift_getKeyPath(&unk_1001EEC20);
    *(&v72 - 2) = __chkstk_darwin(v47);
    v48 = swift_getKeyPath(&unk_1001EEC50);
    v49 = v95;
    v50 = v96;
    v51 = v75;
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v75, v43, v96);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v50);
    v52 = (void (*)(_BYTE *, _QWORD))AttributedString.subscript.modify(v97, v45, v77, v74);
    AttributedSubstring.subscript.setter(v51, v48, v68);
    v52(v97, 0);
    sub_10000A020(v45, &qword_100292138);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v43, v50);
    v41 = v82;
    (*(void (**)(char *))(v94 + 8))(v46);
    v35 = v81;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v88, 1, 1, v41);
  return sub_10000A020(v81, &qword_100292178);
}

uint64_t sub_1000EA2C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_100006DF4(&qword_1002921A0);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_1000EA318@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_1001EEBD0);
  v8[0] = v1;
  v4 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText, v8, 0, 0);
  v6 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_1000EA3DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EEBD0);
  v9[0] = v3;
  v5 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText;
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText, v9, 0, 0);
  v7 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_1000EA4A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  __n128 v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = type metadata accessor for AttributedString(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EEBD0);
  v13 = v8;
  v14 = v7;
  v15 = v8;
  sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_1000EED30);
  v10 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v10);
}

uint64_t sub_1000EA5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText, v6, 33, 0);
  v4 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

uint64_t sub_1000EA628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1001EEBA8);
  v7[0] = v1;
  v4 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart, v7, 0, 0);
  return sub_10000B074(v5, a1, &qword_1002948B0);
}

uint64_t sub_1000EA6E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EEBA8);
  v8[0] = v3;
  v5 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart;
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart, v8, 0, 0);
  return sub_10000B074(v6, a2, &qword_1002948B0);
}

uint64_t sub_1000EA798(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v4 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B074(a1, (uint64_t)v6, &qword_1002948B0);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EEBA8);
  v11 = v7;
  v12 = v6;
  v13 = v7;
  sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_1000EED1C);
  swift_release(KeyPath);
  return sub_10000A020((uint64_t)v6, &qword_1002948B0);
}

uint64_t sub_1000EA8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart, v5, 33, 0);
  sub_1000ED8CC(a2, v3);
  return swift_endAccess(v5);
}

double sub_1000EA908()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EEBF8);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackDuration);
}

double sub_1000EA994@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EEBF8);
  v7 = v3;
  v5 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackDuration);
  *a2 = result;
  return result;
}

void sub_1000EAA28(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EEBF8);
  v4 = v2;
  sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v4, KeyPath, sub_1000EDB00);
  swift_release(KeyPath);
}

void *sub_1000EAAD8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1001EEB80);
  v6 = v0;
  v2 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__stopAnimationTimer);
  v4 = v3;
  return v3;
}

id sub_1000EAB6C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EEB80);
  v8 = v3;
  v5 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__stopAnimationTimer);
  *a2 = v6;
  return v6;
}

void sub_1000EAC00(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EEB80);
  v6 = v3;
  sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_1000ED844);
  swift_release(KeyPath);

}

uint64_t sub_1000EACB4(uint64_t a1, uint64_t a2, char *a3, double a4)
{
  double *v4;
  double *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t KeyPath;
  double v73;
  uint64_t v74;
  __n128 v75;
  uint64_t (*v76)(uint64_t, uint64_t, __n128);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  double *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD v103[2];
  double v104;
  _QWORD v105[2];

  v5 = v4;
  v90 = sub_100006DF4(&qword_100292130);
  v10 = __chkstk_darwin(v90);
  v89 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v88 = (char *)&v81 - v12;
  v87 = sub_100006DF4(&qword_100292138);
  v13 = __chkstk_darwin(v87);
  v86 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v85 = (uint64_t *)((char *)&v81 - v15);
  v16 = type metadata accessor for AttributedString.Index(0);
  v91 = *(char **)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v94 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v100 = (char *)&v81 - v19;
  v20 = type metadata accessor for AttributedString.CharacterView(0);
  v98 = *(_QWORD *)(v20 - 8);
  v99 = v20;
  __chkstk_darwin(v20);
  v97 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for AttributedString(0);
  v25 = __chkstk_darwin(v93);
  result = __chkstk_darwin(v25);
  v30 = (char *)&v81 - v29;
  v31 = *((unint64_t *)a3 + 2);
  if (*(double *)&v31 == 0.0)
    return result;
  v81 = v28;
  v82 = v27;
  v32 = swift_bridgeObjectRetain(a2);
  AttributeContainer.init()(v32);
  AttributedString.init(_:attributes:)(a1, a2, v24);
  if (qword_10028A488 != -1)
LABEL_26:
    swift_once(&qword_10028A488, sub_100121150);
  v33 = type metadata accessor for Logger(0);
  sub_10000F66C(v33, (uint64_t)qword_1002AA4A0);
  swift_bridgeObjectRetain(a3);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter(v35);
  v37 = os_log_type_enabled(v35, v36);
  v84 = v5;
  if (v37)
  {
    v38 = swift_slowAlloc(22, -1);
    *(_DWORD *)v38 = 134349312;
    v104 = *(double *)&v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v38 + 4);
    swift_bridgeObjectRelease(a3);
    *(_WORD *)(v38 + 12) = 2050;
    v104 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v38 + 14);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Animation started. wordTimingInfo.count: %{public}ld. totalDuration: %{public}f", (uint8_t *)v38, 0x16u);
    swift_slowDealloc(v38, -1, -1);

    if (v31 < 2)
      goto LABEL_5;
  }
  else
  {

    swift_bridgeObjectRelease(a3);
    if (v31 < 2)
    {
LABEL_5:
      if (a4 < 0.0)
        a4 = 0.0;
      goto LABEL_11;
    }
  }
  v39 = *(double *)&a3[56 * v31 + 8];
  v40 = v39 + v39 / (double)(uint64_t)(v31 - 1);
  if (v40 > a4)
    a4 = v40;
LABEL_11:
  swift_bridgeObjectRetain(a3);
  v83 = a3;
  v5 = (double *)(a3 + 80);
  a3 = v94;
  v92 = v30;
  do
  {
    v41 = *((_QWORD *)v5 - 5);
    v42 = *((_QWORD *)v5 - 3);
    v43 = *(v5 - 2);
    v44 = *((_QWORD *)v5 - 1);
    v45 = *v5;
    swift_bridgeObjectRetain(v42);
    v46 = swift_bridgeObjectRetain(v41);
    if (v44 == NSNotFound.getter(v46))
    {
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v41);
    }
    else
    {
      if (__OFADD__(v44, *(_QWORD *)&v45))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v101 = v41;
      v102 = v31;
      v31 = (unint64_t)v97;
      v47 = AttributedString.characters.getter();
      v48 = AttributedString.CharacterView._count.getter(v47);
      (*(void (**)(unint64_t, uint64_t))(v98 + 8))(v31, v99);
      if (v48 < 0)
        goto LABEL_24;
      v104 = 0.0;
      v105[0] = v48;
      v103[0] = v44;
      v103[1] = v44 + *(_QWORD *)&v45;
      v49 = sub_100006DF4(&qword_100292140);
      v50 = sub_1000ED914();
      if ((Collection<>.contains<A>(_:)(v103, v49, v49, v50, v50, &protocol witness table for Int) & 1) != 0)
      {
        AttributedString.startIndex.getter();
        v51 = sub_100007D5C(&qword_100292158, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
        v31 = (unint64_t)v100;
        v52 = v44;
        v53 = v93;
        AttributedStringProtocol.index(_:offsetByCharacters:)(a3, v52, v93, v51);
        v30 = v91;
        v96 = (void (*)(char *, uint64_t))*((_QWORD *)v91 + 1);
        v96(a3, v16);
        AttributedStringProtocol.index(_:offsetByCharacters:)(v31, *(_QWORD *)&v45, v53, v51);
        v54 = sub_100007D5C(&qword_100292160, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
        if ((dispatch thunk of static Comparable.<= infix(_:_:)(v31, a3, v16, v54) & 1) == 0)
          goto LABEL_25;
        v55 = v90;
        v56 = v88;
        v57 = &v88[*(int *)(v90 + 48)];
        v58 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v30 + 2);
        v58(v88, v100, v16);
        v58(v57, a3, v16);
        v59 = v89;
        v60 = &v89[*(int *)(v55 + 48)];
        v58(v89, v56, v16);
        v58(v60, v57, v16);
        v61 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v30 + 4);
        v62 = (uint64_t)v86;
        v61(v86, v59, v16);
        v95 = v42;
        v63 = v96;
        v96(v60, v16);
        v64 = &v59[*(int *)(v55 + 48)];
        v61(v59, v56, v16);
        v61(v64, v57, v16);
        v61((char *)(v62 + *(int *)(v87 + 36)), v64, v16);
        v63(v59, v16);
        v65 = v85;
        sub_1000110A4(v62, (uint64_t)v85, &qword_100292138);
        swift_bridgeObjectRelease(v95);
        swift_bridgeObjectRelease(v101);
        v30 = v92;
        sub_1000E9B10(v65, v43 / a4);
        v66 = (uint64_t)v65;
        a3 = v94;
        sub_10000A020(v66, &qword_100292138);
        v63(a3, v16);
        v63(v100, v16);
        v31 = v102;
      }
      else
      {
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v101);
        v31 = v102;
      }
    }
    v5 += 7;
    --v31;
  }
  while (*(double *)&v31 != 0.0);
  v67 = swift_bridgeObjectRelease(v83);
  v68 = v82;
  v69 = v81;
  v70 = v30;
  v71 = v93;
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v82 + 16))(v81, v70, v93, v67);
  KeyPath = swift_getKeyPath(&unk_1001EEBD0);
  __chkstk_darwin(KeyPath);
  v73 = *(double *)&v84;
  *(&v81 - 2) = (uint64_t)v84;
  *(&v81 - 1) = v69;
  v104 = v73;
  v74 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v104, KeyPath, sub_1000ED9CC);
  v75 = swift_release(KeyPath);
  v76 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v68 + 8);
  v77 = v76(v69, v71, v75);
  v78 = static Animation.easeInOut(duration:)(v77);
  v79 = __chkstk_darwin(v78);
  *((double *)&v81 - 2) = v73;
  *((double *)&v81 - 1) = a4;
  withAnimation<A>(_:_:)(v79, sub_1000ED9E4);
  swift_release(v78);
  v80 = swift_getKeyPath(&unk_1001EEBF8);
  v104 = v73;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v80, v74);
  swift_release(v80);
  sub_1000EB96C((uint64_t)sub_1000EB6DC, 0, *(double *)(*(_QWORD *)&v73 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackDuration));
  return ((uint64_t (*)(char *, uint64_t))v76)(v92, v71);
}

void sub_1000EB54C(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v4 = sub_100006DF4(&qword_1002948B0);
  v5 = __chkstk_darwin(v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Date.init()(v5);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  KeyPath = swift_getKeyPath(&unk_1001EEBA8);
  v14 = a1;
  v15 = v7;
  v16 = a1;
  sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, KeyPath, sub_1000EED1C);
  swift_release(KeyPath);
  sub_10000A020((uint64_t)v7, &qword_1002948B0);
  v10 = swift_getKeyPath(&unk_1001EEBF8);
  v12 = a1;
  v13 = a2;
  v16 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, v10, sub_1000EED44);
  swift_release(v10);
}

double sub_1000EB6DC()
{
  return sub_1000EB6FC();
}

double sub_1000EB6FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1001EEB80);
  v9 = v0;
  v2 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v2);
  swift_release(KeyPath);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__stopAnimationTimer);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v5, "invalidate");
    v6 = swift_getKeyPath(&unk_1001EEB80);
    __chkstk_darwin(v6);
    v9 = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, v6, sub_1000ED844);

    swift_release(v6);
  }
  v7 = static Animation.easeInOut(duration:)(v3);
  withAnimation<A>(_:_:)(v7, sub_1000ED858);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_1000EB84C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t KeyPath;
  _BYTE v8[16];
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v2 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v2);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  KeyPath = swift_getKeyPath(&unk_1001EEBA8);
  v9 = a1;
  v10 = v4;
  v11 = a1;
  sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, KeyPath, sub_1000ED8B4);
  swift_release(KeyPath);
  return sub_10000A020((uint64_t)v4, &qword_1002948B0);
}

void sub_1000EB96C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD aBlock[5];
  _QWORD *v17;

  KeyPath = swift_getKeyPath(&unk_1001EEB80);
  aBlock[0] = v3;
  v8 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, KeyPath, v8);
  swift_release(KeyPath);
  if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__stopAnimationTimer))
  {
    v9 = (void *)objc_opt_self(NSTimer);
    v10 = swift_allocObject(&unk_10026A700, 24, 7);
    swift_weakInit(v10 + 16, v3);
    v11 = (_QWORD *)swift_allocObject(&unk_10026A728, 40, 7);
    v11[2] = v10;
    v11[3] = a1;
    v11[4] = a2;
    aBlock[4] = sub_1000ED820;
    v17 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100187FE4;
    aBlock[3] = &unk_10026A740;
    v12 = _Block_copy(aBlock);
    v13 = v17;
    swift_retain(a2);
    swift_release(v13);
    v14 = objc_msgSend(v9, "scheduledTimerWithTimeInterval:repeats:block:", 0, v12, a3);
    _Block_release(v12);
    v15 = swift_getKeyPath(&unk_1001EEB80);
    __chkstk_darwin(v15);
    aBlock[0] = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(aBlock, v15, sub_1000ED844);
    swift_release(v15);

  }
}

double sub_1000EBB6C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, __n128))
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t KeyPath;
  __n128 v9;
  uint64_t v10;
  char v11[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    KeyPath = swift_getKeyPath(&unk_1001EEB80);
    __chkstk_darwin(KeyPath);
    v10 = v7;
    sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_1000ED844);
    v9 = swift_release(KeyPath);
    a3(v7, v9);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000EBC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText;
  v2 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10000A020(v0 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart, &qword_1002948B0);

  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel___observationRegistrar;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000EBD20()
{
  return type metadata accessor for KaraokeAnimationModel(0);
}

uint64_t type metadata accessor for KaraokeAnimationModel(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100291E70, (uint64_t)&nominal type descriptor for KaraokeAnimationModel);
}

void sub_1000EBD3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v2 = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006598C(319, (unint64_t *)&qword_10028E960, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[3] = "\b";
      v6 = type metadata accessor for ObservationRegistrar(319);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 5, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1000EBE0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t result;
  uint64_t v20;

  v6 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a3 + 32) = swift_getKeyPath(&unk_1001EED38);
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = swift_getKeyPath(&unk_1001EED60);
  *(_BYTE *)(a3 + 56) = 0;
  v9 = type metadata accessor for KaraokeView(0);
  v10 = (_QWORD *)(a3 + *(int *)(v9 + 32));
  *v10 = swift_getKeyPath(&unk_1001EED88);
  v11 = sub_100006DF4(&qword_1002969A0);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  v12 = a3 + *(int *)(v9 + 36);
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1001EEDB8);
  *(_BYTE *)(v12 + 8) = 0;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  v13 = type metadata accessor for KaraokeAnimationModel(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v15 = v14 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackDuration) = 0;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__stopAnimationTimer) = 0;
  swift_bridgeObjectRetain(a2);
  ObservationRegistrar.init()(v17);
  AttributeContainer.init()(v18);
  result = AttributedString.init(_:attributes:)(a1, a2, v8);
  *(_QWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_1000EBFA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  __n128 v67;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD v97[4];

  v2 = v1;
  v88 = a1;
  v3 = type metadata accessor for ColorRenderingMode(0);
  v79 = *(_QWORD *)(v3 - 8);
  v80 = v3;
  __chkstk_darwin(v3);
  v78 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for KaraokeView(0);
  v74 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v74 + 64);
  __chkstk_darwin(v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v8);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AnimationTimelineSchedule(0);
  v73 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v72 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v69 - v14;
  v75 = sub_100006DF4(&qword_100292290);
  v76 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_100292298);
  v19 = *(_QWORD *)(v18 - 8);
  v81 = v18;
  v82 = v19;
  __chkstk_darwin(v18);
  v90 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100006DF4(&qword_1002922A0);
  v87 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v77 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006DF4(&qword_1002922A8);
  v85 = *(_QWORD *)(v22 - 8);
  v86 = v22;
  __chkstk_darwin(v22);
  v83 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v1 + 16);
  v25 = *(_QWORD *)(v1 + 24);
  v89 = v1;
  v91 = v24;
  v92 = v25;
  sub_100006DF4(&qword_1002922B0);
  State.wrappedValue.getter(v97);
  v26 = v97[0];
  KeyPath = swift_getKeyPath(&unk_1001EEBA8);
  v91 = v26;
  v28 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v91, KeyPath, v28);
  swift_release(KeyPath);
  v29 = v26 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart;
  swift_beginAccess(v26 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart, v97, 0, 0);
  sub_10000B074(v29, (uint64_t)v10, &qword_1002948B0);
  swift_release(v26);
  v30 = type metadata accessor for Date(0);
  v31 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v10, 1, v30) == 1;
  sub_10000A020((uint64_t)v10, &qword_1002948B0);
  AnimationTimelineSchedule.init(minimumInterval:paused:)(0, 1, v31);
  v70 = v7;
  sub_100032D68(v2, (uint64_t)v7, type metadata accessor for KaraokeView);
  v32 = *(unsigned __int8 *)(v74 + 80);
  v71 = ((v32 + 16) & ~v32) + v6;
  v33 = (v32 + 16) & ~v32;
  v74 = v33;
  v34 = v32 | 7;
  v69 = v32 | 7;
  v35 = swift_allocObject(&unk_10026A880, v71, v32 | 7);
  sub_1000EE7FC((uint64_t)v7, v35 + v33);
  v36 = v73;
  v37 = v72;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v72, v15, v11);
  v38 = swift_allocObject(&unk_10026A8A8, 32, 7);
  *(_QWORD *)(v38 + 16) = sub_1000EE840;
  *(_QWORD *)(v38 + 24) = v35;
  v39 = sub_100006DF4(&qword_1002922B8);
  v40 = sub_100007D5C(&qword_1002922C0, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
  v41 = sub_1000EE8B8();
  TimelineView<>.init(_:content:)(v37, sub_1000EE8B0, v38, v11, v39, v40, v41);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v11);
  v43 = v79;
  v42 = v80;
  v44 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for ColorRenderingMode.nonLinear(_:), v80);
  v45 = sub_1000165A4(&qword_100292300, &qword_100292290, (void (*)(void))sub_1000EE8B8, (uint64_t)&protocol conformance descriptor for <> TimelineView<A, B>);
  v46 = v75;
  View.drawingGroup(opaque:colorMode:)(0, v44, v75, v45);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v46);
  v47 = v89;
  v48 = *(_QWORD *)(v89 + 32);
  LOBYTE(v39) = *(_BYTE *)(v89 + 40);
  sub_1000EE04C(v48, v39);
  v49 = sub_1000D5B74(v48, v39);
  sub_1000D6B88(v48, v39);
  v50 = _swiftEmptyArrayStorage;
  if (v49)
    v50 = (_QWORD *)v49;
  v95 = v50;
  v51 = (uint64_t)v70;
  sub_100032D68(v47, (uint64_t)v70, type metadata accessor for KaraokeView);
  v52 = v71;
  v53 = swift_allocObject(&unk_10026A8D0, v71, v34);
  v54 = v74;
  sub_1000EE7FC(v51, v53 + v74);
  v55 = sub_100006DF4(&qword_1002921D0);
  v91 = v46;
  v92 = v45;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.drawingGroup(opaque:colorMode:)>>, 1);
  v57 = sub_1000EDDB0();
  v58 = v77;
  v59 = v81;
  v60 = v90;
  View.onChange<A>(of:initial:_:)(&v95, 0, sub_1000EEAC0, v53, v81, v55, OpaqueTypeConformance2, v57);
  swift_release(v53);
  v61 = swift_bridgeObjectRelease(v95);
  (*(void (**)(char *, uint64_t, __n128))(v82 + 8))(v60, v59, v61);
  v62 = *(_QWORD *)(v89 + 8);
  v95 = *(_QWORD **)v89;
  v96 = v62;
  sub_100032D68(v89, v51, type metadata accessor for KaraokeView);
  v63 = swift_allocObject(&unk_10026A8F8, v52, v69);
  sub_1000EE7FC(v51, v63 + v54);
  swift_bridgeObjectRetain(v62);
  v91 = v59;
  v92 = v55;
  v93 = OpaqueTypeConformance2;
  v94 = v57;
  v64 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v66 = v83;
  v65 = v84;
  View.onChange<A>(of:initial:_:)(&v95, 0, sub_1000EEB10, v63, v84, &type metadata for String, v64, &protocol witness table for String);
  swift_release(v63);
  v67 = swift_bridgeObjectRelease(v96);
  (*(void (**)(char *, uint64_t, __n128))(v87 + 8))(v58, v65, v67);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v85 + 32))(v88, v66, v86);
}

uint64_t sub_1000EC6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  _QWORD v69[4];
  uint64_t v70;
  uint64_t v71;

  v55 = a1;
  v64 = a3;
  v4 = sub_100006DF4(&qword_1002922F8);
  __chkstk_darwin(v4);
  v63 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for KaraokeRenderer(0);
  __chkstk_darwin(v62);
  v61 = (float *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for AttributedString(0);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100006DF4(&qword_1002922B8);
  __chkstk_darwin(v60);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_1002948B0);
  v11 = __chkstk_darwin(v10);
  v59 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v53 - v13;
  v16 = *(_QWORD *)(a2 + 24);
  v70 = *(_QWORD *)(a2 + 16);
  v15 = v70;
  v71 = v16;
  sub_100006DF4(&qword_1002922B0);
  State.wrappedValue.getter(v69);
  v17 = v69[0];
  KeyPath = swift_getKeyPath(&unk_1001EEBF8);
  v70 = v17;
  v19 = sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v70, KeyPath, v19);
  swift_release(KeyPath);
  v20 = *(_QWORD *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackDuration);
  swift_release(v17);
  v70 = v15;
  v71 = v16;
  State.wrappedValue.getter(v69);
  v21 = v69[0];
  v22 = swift_getKeyPath(&unk_1001EEBA8);
  v70 = v21;
  v23 = v19;
  v54 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v70, v22, v19);
  swift_release(v22);
  v24 = v21 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart;
  swift_beginAccess(v21 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart, &v70, 0, 0);
  sub_10000B074(v24, (uint64_t)v14, &qword_1002948B0);
  swift_release(v21);
  v65 = v55;
  v66 = v20;
  v25 = sub_1000ECD94((void (*)(uint64_t *__return_ptr, _BYTE *))sub_1000EEB74);
  sub_10000A020((uint64_t)v14, &qword_1002948B0);
  v26 = 1.0;
  if ((v25 & (unint64_t)&_mh_execute_header) != 0)
    v27 = 1.0;
  else
    v27 = *(float *)&v25;
  v28 = a2;
  sub_1000ECF00(a2);
  v29 = *(_QWORD *)(a2 + 24);
  v69[0] = *(_QWORD *)(a2 + 16);
  v69[1] = v29;
  State.wrappedValue.getter(v67);
  v30 = v67[0];
  v31 = swift_getKeyPath(&unk_1001EEBD0);
  v69[0] = v30;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v69, v31, v23);
  swift_release(v31);
  v32 = v30 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText;
  swift_beginAccess(v30 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__animationText, v69, 0, 0);
  v33 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v32, v58);
  v34 = swift_release(v30);
  v35 = Text.init(_:)(v33, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v42 = swift_getKeyPath(&unk_1001EEEB8);
  v43 = *(_QWORD *)(v28 + 24);
  v67[0] = *(_QWORD *)(v28 + 16);
  v67[1] = v43;
  State.wrappedValue.getter(&v68);
  v44 = v68;
  v45 = swift_getKeyPath(&unk_1001EEBA8);
  v67[0] = v44;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v67, v45, v54);
  swift_release(v45);
  v46 = v44 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart;
  swift_beginAccess(v44 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackStart, v67, 0, 0);
  v47 = v46;
  v48 = v59;
  sub_10000B074(v47, v59, &qword_1002948B0);
  v49 = type metadata accessor for Date(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49) != 1)
    v26 = 0.5;
  sub_10000A020(v48, &qword_1002948B0);
  swift_release(v44);
  type metadata accessor for KaraokeView(0);
  v50 = v61;
  sub_1000D5B14((float *)((char *)v61 + *(int *)(v62 + 24)));
  *v50 = v27;
  v50[1] = v26;
  v51 = v63;
  sub_100032D68((uint64_t)v50, v63, type metadata accessor for KaraokeRenderer);
  sub_10000B074(v51, (uint64_t)&v9[*(int *)(v60 + 36)], &qword_1002922F8);
  *(_QWORD *)v9 = v35;
  *((_QWORD *)v9 + 1) = v37;
  v9[16] = v41;
  *((_QWORD *)v9 + 3) = v39;
  *((_QWORD *)v9 + 4) = v42;
  v9[40] = 0;
  sub_10001B9D8(v35, v37, v41);
  swift_bridgeObjectRetain(v39);
  swift_retain(v42);
  sub_10000A020(v51, &qword_1002922F8);
  sub_1000EEBE4((uint64_t)v50);
  sub_10001B9E8(v35, v37, v41);
  swift_release(v42);
  swift_bridgeObjectRelease(v39);
  return sub_1000110A4((uint64_t)v9, v64, &qword_1002922B8);
}

float sub_1000ECCC8@<S0>(uint64_t a1@<X0>, float *a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  float result;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100292308);
  TimelineView.Context.date.getter(v10);
  v11 = Date.timeIntervalSince(_:)(a1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = v11 / a3;
  *a2 = result;
  return result;
}

unint64_t sub_1000ECD94(void (*a1)(uint64_t *__return_ptr, _BYTE *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  _BYTE v14[12];
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v8);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B074(v1, (uint64_t)v10, &qword_1002948B0);
  v11 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (v11 == 1)
  {
    v12 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    a1(&v15, v7);
    if (v2)
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    v12 = v15;
  }
  return v12 | ((unint64_t)(v11 == 1) << 32);
}

BOOL sub_1000ECF00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v7;

  v1 = (_QWORD *)(a1 + *(int *)(type metadata accessor for KaraokeView(0) + 36));
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  j__swift_retain(*v1);
  v4 = sub_1000D5EF8(v2, v3);
  j__swift_release(v2);
  if (v4)
  {
    KeyPath = swift_getKeyPath(&unk_1001EEB58);
    __chkstk_darwin(KeyPath);
    v7 = v4;
    sub_100007D5C(&qword_100290488, type metadata accessor for KaraokeProgressMonitor, (uint64_t)&unk_1001EEB14);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000EED58);
    swift_release(v4);
    swift_release(KeyPath);
  }
  return v4 == 0;
}

void sub_1000ED040(uint64_t a1, char **a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  v3 = *a2;
  if (*((_QWORD *)*a2 + 2))
  {
    sub_100006DF4(&qword_1002922B0);
    State.wrappedValue.getter(&v10);
    v5 = v10;
    v6 = *(_QWORD *)a3;
    v7 = *(_QWORD *)(a3 + 8);
    v8 = *(_QWORD *)(a3 + 48);
    LOBYTE(a3) = *(_BYTE *)(a3 + 56);
    sub_10001F410(v8, a3);
    v9 = sub_1000D5D3C(v8, a3);
    sub_10001F470(v8, a3);
    sub_1000EACB4(v6, v7, v3, v9);
  }
  else
  {
    sub_100006DF4(&qword_1002922B0);
    State.wrappedValue.getter(&v10);
    v5 = v10;
    sub_1000EB6FC();
  }
  swift_release(v5);
}

double sub_1000ED124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a3 + 32);
  v4 = *(_BYTE *)(a3 + 40);
  sub_1000EE04C(v3, v4);
  v5 = sub_1000D5B74(v3, v4);
  sub_1000D6B88(v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  if (!v5)
  {
    v8 = __chkstk_darwin(v6);
    v9 = static Animation.default.getter(v8);
    withAnimation<A>(_:_:)(v9, sub_1000EEB5C);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

double sub_1000ED1E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t KeyPath;
  __n128 v15;
  double result;
  _BYTE v17[16];
  uint64_t v18;
  _BYTE *v19;
  _QWORD v20[2];
  uint64_t v21;

  v2 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v20[0] = a1[2];
  v20[1] = v9;
  sub_100006DF4(&qword_1002922B0);
  State.wrappedValue.getter(&v21);
  v10 = v21;
  v11 = *a1;
  v12 = a1[1];
  v13 = swift_bridgeObjectRetain(v12);
  AttributeContainer.init()(v13);
  AttributedString.init(_:attributes:)(v11, v12, v4);
  KeyPath = swift_getKeyPath(&unk_1001EEBD0);
  v18 = v10;
  v19 = v8;
  v20[0] = v10;
  sub_100007D5C(&qword_100292128, type metadata accessor for KaraokeAnimationModel, (uint64_t)&unk_1001EEAF8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v20, KeyPath, sub_1000EED30);
  v15 = swift_release(KeyPath);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v6 + 8))(v8, v5, v15);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

float sub_1000ED374()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001EEB58);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100290488, type metadata accessor for KaraokeProgressMonitor, (uint64_t)&unk_1001EEB14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(float *)(v0 + 16);
}

float sub_1000ED3F8@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  float result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EEB58);
  v7 = v3;
  v5 = sub_100007D5C(&qword_100290488, type metadata accessor for KaraokeProgressMonitor, (uint64_t)&unk_1001EEB14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(float *)(v3 + 16);
  *a2 = result;
  return result;
}

void sub_1000ED484(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EEB58);
  v4 = v2;
  sub_100007D5C(&qword_100290488, type metadata accessor for KaraokeProgressMonitor, (uint64_t)&unk_1001EEB14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v4, KeyPath, sub_1000ED7B8);
  swift_release(KeyPath);
}

uint64_t sub_1000ED534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator22KaraokeProgressMonitor___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000ED584()
{
  return type metadata accessor for KaraokeProgressMonitor(0);
}

uint64_t type metadata accessor for KaraokeProgressMonitor(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100292050, (uint64_t)&nominal type descriptor for KaraokeProgressMonitor);
}

uint64_t sub_1000ED5A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000ED61C(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = sub_100006DF4(&qword_100292308);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  result = sub_100006DF4((uint64_t *)&unk_100292310);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_1000ED6EC(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)&v4 != *(_QWORD *)a2 || v5 != v6)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v6, 0);
    result = 0;
    if ((v8 & 1) == 0)
      return result;
  }
  v10 = *((_QWORD *)a1 + 3);
  v11 = *(_QWORD *)(a2 + 24);
  if (!v10)
  {
    if (!v11)
      goto LABEL_15;
    return 0;
  }
  if (!v11)
    return 0;
  v12 = *((_QWORD *)a1 + 2);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = v12 == v13 && v10 == v11;
  if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0), result = 0, (v15 & 1) != 0))
  {
LABEL_15:
    if (*((_QWORD *)a1 + 5) == *(_QWORD *)(a2 + 40) && *((_QWORD *)a1 + 6) == *(_QWORD *)(a2 + 48))
      return a1[4] == *(double *)(a2 + 32);
    return 0;
  }
  return result;
}

float sub_1000ED7B8()
{
  uint64_t v0;
  float result;

  result = *(float *)(v0 + 24);
  *(float *)(*(_QWORD *)(v0 + 16) + 16) = result;
  return result;
}

uint64_t sub_1000ED7D0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ED7F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_1000ED820(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EBB6C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, __n128))(v1 + 24));
}

uint64_t sub_1000ED82C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000ED83C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000ED844()
{
  sub_1000ED870();
}

uint64_t sub_1000ED858()
{
  uint64_t v0;

  return sub_1000EB84C(v0);
}

void sub_1000ED870()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__stopAnimationTimer);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__stopAnimationTimer) = v2;
  v4 = v2;

}

uint64_t sub_1000ED8B4()
{
  uint64_t v0;

  return sub_1000EA8A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000ED8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002948B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000ED914()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292148;
  if (!qword_100292148)
  {
    v1 = sub_1000070BC(&qword_100292140);
    sub_1000ED980();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100292148);
  }
  return result;
}

unint64_t sub_1000ED980()
{
  unint64_t result;

  result = qword_100292150;
  if (!qword_100292150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100292150);
  }
  return result;
}

uint64_t sub_1000ED9CC()
{
  uint64_t v0;

  return sub_1000EA5AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000ED9E4()
{
  uint64_t v0;

  sub_1000EB54C(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

void sub_1000EDA08()
{
  AttributeScopes.SwiftUIAttributes.customAttributes.getter();
  __break(1u);
}

unint64_t sub_1000EDA24()
{
  unint64_t result;

  result = qword_100292198;
  if (!qword_100292198)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.CustomContainerAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.CustomContainerAttribute);
    atomic_store(result, (unint64_t *)&qword_100292198);
  }
  return result;
}

void sub_1000EDA68(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1000EDA24();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1000EDA8C()
{
  return 8;
}

uint64_t sub_1000EDA98(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000EDAA0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EDAB0()
{
  uint64_t v0;

  v0 = sub_100006DF4(&qword_1002921A0);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_1000EDAF4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

double sub_1000EDB00()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC17SequoiaTranslator21KaraokeAnimationModel__playbackDuration) = result;
  return result;
}

uint64_t destroy for KaraokeTiming(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for KaraokeTiming(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for KaraokeTiming(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for KaraokeTiming(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for KaraokeTiming(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KaraokeTiming(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KaraokeTiming()
{
  return &type metadata for KaraokeTiming;
}

unint64_t sub_1000EDD08()
{
  unint64_t result;

  result = qword_1002921A8;
  if (!qword_1002921A8)
  {
    result = swift_getWitnessTable(&unk_1001EECFC, &type metadata for KaraokeTimingInfo);
    atomic_store(result, (unint64_t *)&qword_1002921A8);
  }
  return result;
}

unint64_t sub_1000EDD4C()
{
  unint64_t result;

  result = qword_1002921B0;
  if (!qword_1002921B0)
  {
    result = swift_getWitnessTable(&unk_1001EECC4, &type metadata for KaraokeDuration);
    atomic_store(result, (unint64_t *)&qword_1002921B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for KaraokeDuration()
{
  return &type metadata for KaraokeDuration;
}

ValueMetadata *type metadata accessor for KaraokeTimingInfo()
{
  return &type metadata for KaraokeTimingInfo;
}

uint64_t sub_1000EDDB0()
{
  return sub_1000165A4(&qword_1002921C8, &qword_1002921D0, (void (*)(void))sub_1000EDDD4, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_1000EDDD4()
{
  unint64_t result;

  result = qword_1002921D8;
  if (!qword_1002921D8)
  {
    result = swift_getWitnessTable(&unk_1001EEB30, &type metadata for KaraokeTiming);
    atomic_store(result, (unint64_t *)&qword_1002921D8);
  }
  return result;
}

uint64_t type metadata accessor for KaraokeView(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100292240, (uint64_t)&nominal type descriptor for KaraokeView);
}

_QWORD *sub_1000EDE44@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000EDE94();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for KaraokeProgress, &type metadata for KaraokeProgress, v2);
  *a1 = v4;
  return result;
}

unint64_t sub_1000EDE94()
{
  unint64_t result;

  result = qword_1002921E0;
  if (!qword_1002921E0)
  {
    result = swift_getWitnessTable(&unk_1001EEE30, &type metadata for KaraokeProgress);
    atomic_store(result, (unint64_t *)&qword_1002921E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for KaraokeProgress()
{
  return &type metadata for KaraokeProgress;
}

uint64_t sub_1000EDEE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v19);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[2];
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    v10 = a2[4];
    v11 = *((_BYTE *)a2 + 40);
    swift_bridgeObjectRetain(v7);
    swift_retain(v8);
    swift_retain(v9);
    sub_1000EE04C(v10, v11);
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = v11;
    v12 = a2[6];
    LOBYTE(v9) = *((_BYTE *)a2 + 56);
    sub_10001F410(v12, v9);
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = v9;
    v13 = *(int *)(a3 + 32);
    v14 = (uint64_t *)(a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      v20 = *v15;
      *v14 = *v15;
      swift_retain(v20);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
    v21 = *(int *)(a3 + 36);
    v22 = a1 + v21;
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = *v23;
    v25 = *((_BYTE *)v23 + 8);
    j__swift_retain(*v23);
    *(_QWORD *)v22 = v24;
    *(_BYTE *)(v22 + 8) = v25;
  }
  return a1;
}

uint64_t sub_1000EE04C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain(a1);
  else
    return swift_retain(a1);
}

double sub_1000EE05C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 24));
  sub_1000D6B88(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  sub_10001F470(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 32));
  v5 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  *(_QWORD *)&result = j__swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 36))).n128_u64[0];
  return result;
}

uint64_t sub_1000EE114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  swift_retain(v8);
  sub_1000EE04C(v9, v10);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  LOBYTE(v8) = *(_BYTE *)(a2 + 56);
  sub_10001F410(v11, v8);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v8;
  v12 = *(int *)(a3 + 32);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = 1;
  }
  else
  {
    v18 = *v14;
    *v13 = *v14;
    swift_retain(v18);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  v19 = *(int *)(a3 + 36);
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  v23 = *((_BYTE *)v21 + 8);
  j__swift_retain(*v21);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v23;
  return a1;
}

uint64_t sub_1000EE24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  sub_1000EE04C(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  sub_1000D6B88(v14, v15);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_BYTE *)(a2 + 56);
  sub_10001F410(v16, v17);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 56) = v17;
  sub_10001F470(v18, v19);
  if (a1 != a2)
  {
    v20 = *(int *)(a3 + 32);
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    sub_10000A020(a1 + v20, &qword_1002969A0);
    v23 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  v27 = *(int *)(a3 + 36);
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  v31 = *((_BYTE *)v29 + 8);
  j__swift_retain(*v29);
  v32 = *v28;
  *v28 = v30;
  *((_BYTE *)v28 + 8) = v31;
  j__swift_release(v32);
  return a1;
}

uint64_t sub_1000EE3E4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  v11 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = *(int *)(a3 + 36);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_1000EE4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v9);
  v10 = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v10;
  sub_1000D6B88(v11, v12);
  v13 = *(_BYTE *)(a2 + 56);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v13;
  sub_10001F470(v14, v15);
  if (a1 != a2)
  {
    v16 = *(int *)(a3 + 32);
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    sub_10000A020(a1 + v16, &qword_1002969A0);
    v19 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload(v17, v19, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  v21 = *(int *)(a3 + 36);
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  v25 = *v22;
  *v22 = v24;
  *((_BYTE *)v22 + 8) = (_BYTE)v23;
  j__swift_release(v25);
  return a1;
}

uint64_t sub_1000EE630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE63C);
}

uint64_t sub_1000EE63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028EA80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_1000EE6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EE6C8);
}

uint64_t sub_1000EE6C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028EA80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_1000EE740(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1001EEE00;
  v4[1] = &unk_1001EEE00;
  v4[2] = &unk_1001EEE18;
  v4[3] = &unk_1001EEE18;
  sub_10006598C(319, (unint64_t *)&qword_10028EB00, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_1001EEE18;
    v4[6] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t sub_1000EE7E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100213FE8, 1);
}

uint64_t sub_1000EE7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KaraokeView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EE840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KaraokeView(0) - 8) + 80);
  return sub_1000EC6EC(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1000EE88C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EE8B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000ED61C(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_1000EE8B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002922C8;
  if (!qword_1002922C8)
  {
    v1 = sub_1000070BC(&qword_1002922B8);
    sub_1000EE93C();
    sub_100012334(&qword_1002922F0, &qword_1002922F8, (uint64_t)&protocol conformance descriptor for _TextRendererViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002922C8);
  }
  return result;
}

unint64_t sub_1000EE93C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002922D0;
  if (!qword_1002922D0)
  {
    v1 = sub_1000070BC(&qword_1002922D8);
    sub_100012334(&qword_1002922E0, &qword_1002922E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002922D0);
  }
  return result;
}

uint64_t sub_1000EE9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for KaraokeView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  sub_1000D6B88(*(_QWORD *)(v6 + 32), *(_BYTE *)(v6 + 40));
  sub_10001F470(*(_QWORD *)(v6 + 48), *(_BYTE *)(v6 + 56));
  v7 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v8 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  j__swift_release(*(_QWORD *)(v6 + *(int *)(v1 + 36)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1000EEAC0(uint64_t a1, char **a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KaraokeView(0) - 8) + 80);
  sub_1000ED040(a1, a2, v2 + ((v5 + 16) & ~v5));
}

double sub_1000EEB10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KaraokeView(0) - 8) + 80);
  return sub_1000ED124(a1, a2, v2 + ((v5 + 16) & ~v5));
}

double sub_1000EEB5C()
{
  uint64_t v0;

  return sub_1000ED1E4(*(uint64_t **)(v0 + 16));
}

float sub_1000EEB74@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;

  return sub_1000ECCC8(a1, a2, *(double *)(v2 + 24));
}

uint64_t sub_1000EEB94@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.avoidsOrphans.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000EEBC0(unsigned __int8 *a1)
{
  return EnvironmentValues.avoidsOrphans.setter(*a1);
}

uint64_t sub_1000EEBE4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KaraokeRenderer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000EEC20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;

  v0 = sub_1000070BC(&qword_1002922A0);
  v1 = sub_1000070BC(&qword_100292298);
  v2 = sub_1000070BC(&qword_1002921D0);
  v7 = sub_1000070BC(&qword_100292290);
  v8 = (_QWORD *)sub_1000165A4(&qword_100292300, &qword_100292290, (void (*)(void))sub_1000EE8B8, (uint64_t)&protocol conformance descriptor for <> TimelineView<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.drawingGroup(opaque:colorMode:)>>, 1);
  v4 = sub_1000EDDB0();
  v7 = v1;
  v8 = (_QWORD *)v2;
  v9 = OpaqueTypeConformance2;
  v10 = (void *)v4;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v7 = v0;
  v8 = &type metadata for String;
  v9 = v5;
  v10 = &protocol witness table for String;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_1000EED1C()
{
  return sub_1000ED8B4();
}

uint64_t sub_1000EED30()
{
  return sub_1000ED9CC();
}

double sub_1000EED44()
{
  return sub_1000EDB00();
}

float sub_1000EED58()
{
  return sub_1000ED7B8();
}

char *sub_1000EED6C(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  objc_class *v13;
  char *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  id v28[3];
  objc_super v29;

  v3 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v3);
  v5 = (char *)&v28[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100292530);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100292538);
  v27 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v28[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_textTranslationLocaleSubscription] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_allowKeyboardLocaleChange] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_conversation] = a1;
  v13 = (objc_class *)type metadata accessor for KeyboardUpdatingTextViewUIKit();
  v29.receiver = v1;
  v29.super_class = v13;
  v14 = a1;
  v15 = objc_msgSendSuper2(&v29, "initWithFrame:textContainer:", 0, 0.0, 0.0, 0.0, 0.0);
  swift_beginAccess(&v14[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__textTranslationLocale], v28, 33, 0);
  v16 = (char *)v15;
  v17 = sub_100006DF4((uint64_t *)&unk_100292540);
  Published.projectedValue.getter(v17);
  swift_endAccess(v28);
  v18 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v28[0] = (id)static OS_dispatch_queue.main.getter(v18);
  v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  v20 = sub_100012334((unint64_t *)&unk_100292550, &qword_100292530, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v21 = sub_10001D984();
  Publisher.receive<A>(on:options:)(v28, v5, v6, v18, v20, v21);
  sub_10000A020((uint64_t)v5, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = swift_allocObject(&unk_10026A9B0, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v16);
  v23 = sub_100012334(&qword_100292560, &qword_100292538, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v24 = Publisher<>.sink(receiveValue:)(sub_1000F1C08, v22, v10, v23);

  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  v25 = *(_QWORD *)&v16[OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_textTranslationLocaleSubscription];
  *(_QWORD *)&v16[OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_textTranslationLocaleSubscription] = v24;
  swift_release(v25);
  return v16;
}

void sub_1000EF060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "reloadInputViews");

  }
}

uint64_t sub_1000EF37C(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  __n128 v20;
  char v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  unint64_t v55;
  __n128 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(*a1, "primaryLanguage");
  if (!v12)
  {
    v21 = 0;
    return v21 & 1;
  }
  v13 = v12;
  v60 = v2;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v16 = v15;

  v17 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_conversation);
  KeyPath = swift_getKeyPath(&unk_1001EF0B0);
  v19 = swift_getKeyPath(&unk_1001EF0D8);
  static Published.subscript.getter(v7, v17, KeyPath);
  swift_release(KeyPath);
  v20 = swift_release(v19);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v9 + 48))(v7, 1, v8, v20) != 1)
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 32))(v11, v7, v8);
    v22 = sub_1001A6334(45, 0xE100000000000000, v14, v16);
    if ((v23 & 1) != 0)
    {
      v35 = Locale.languageCode.getter(v22);
      if (v36)
      {
        v38 = v36;
        if (v14 == v35 && v36 == v16)
          v21 = 1;
        else
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v35, v36, 0);
        v37 = swift_bridgeObjectRelease(v38);
      }
      else
      {
        v21 = 0;
      }
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v37);
      v55 = v16;
      goto LABEL_34;
    }
    v24 = v22;
    swift_bridgeObjectRetain(v16);
    v59 = v24;
    v25 = String.subscript.getter(15, v24, v14, v16);
    v27 = v26;
    swift_bridgeObjectRelease(v16);
    v28 = static String._fromSubstring(_:)(v25);
    v30 = v29;
    swift_bridgeObjectRelease(v27);
    v32 = Locale.languageCode.getter(v31);
    if (v33)
    {
      v34 = v33;
      if (v32 == 26746 && v33 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease(0xE200000000000000);
        goto LABEL_16;
      }
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, 26746, 0xE200000000000000, 0);
      swift_bridgeObjectRelease(v34);
      if ((v39 & 1) != 0)
      {
LABEL_16:
        if (v28 == 26746 && v30 == 0xE200000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 26746, 0xE200000000000000, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(v30);
          v40 = String.index(_:offsetBy:)(v59, 1, v14, v16);
          v41 = sub_10019BCFC(v40, v14, v16);
          v43 = v42;
          swift_bridgeObjectRelease(v16);
          v44 = static String._fromSubstring(_:)(v41);
          v46 = v45;
          swift_bridgeObjectRelease(v43);
          if (Locale.isTraditionalChinese()())
          {
            if (v44 != 1953390920 || v46 != 0xE400000000000000)
            {
              v47 = v44;
              v48 = v46;
              v49 = 1953390920;
LABEL_40:
              v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v49, 0xE400000000000000, 0);
              v57 = swift_bridgeObjectRelease(v46);
              goto LABEL_41;
            }
          }
          else if (v44 != 1936613704 || v46 != 0xE400000000000000)
          {
            v47 = v44;
            v48 = v46;
            v49 = 1936613704;
            goto LABEL_40;
          }
          v57 = swift_bridgeObjectRelease(0xE400000000000000);
          v21 = 1;
LABEL_41:
          (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v57);
          return v21 & 1;
        }
      }
    }
    swift_bridgeObjectRelease(v16);
    v51 = Locale.languageCode.getter(v50);
    if (v52)
    {
      v54 = v52;
      if (v28 == v51 && v52 == v30)
        v21 = 1;
      else
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v51, v52, 0);
      v53 = swift_bridgeObjectRelease(v54);
    }
    else
    {
      v21 = 0;
    }
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v53);
    v55 = v30;
LABEL_34:
    swift_bridgeObjectRelease(v55);
    return v21 & 1;
  }
  swift_bridgeObjectRelease(v16);
  sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
  v21 = 0;
  return v21 & 1;
}

uint64_t sub_1000EF83C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_textTranslationLocaleSubscription));
}

id sub_1000EF868(uint64_t a1)
{
  return sub_1000F0B14(a1, type metadata accessor for KeyboardUpdatingTextViewUIKit);
}

uint64_t type metadata accessor for KeyboardUpdatingTextViewUIKit()
{
  return objc_opt_self(_TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit);
}

uint64_t sub_1000EF8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  __n128 v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t countAndFlagsBits;
  id v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    KeyPath = swift_getKeyPath(&unk_1001EF0B0);
    v10 = swift_getKeyPath(&unk_1001EF0D8);
    v11 = v8;
    static Published.subscript.getter(v7, v11, KeyPath);

    swift_release(KeyPath);
    v12 = swift_release(v10);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v2 + 48))(v7, 1, v1, v12))
    {
      sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
      v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v25._object = (void *)0xE000000000000000;
      v14._countAndFlagsBits = 0x545F4F545F504154;
      v14._object = (void *)0xEB00000000455059;
      v15._countAndFlagsBits = 0;
      v15._object = (void *)0xE000000000000000;
      v25._countAndFlagsBits = 0;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v25)._countAndFlagsBits;

    }
    else
    {
      (*(void (**)(char *, _QWORD *, uint64_t))(v2 + 16))(v4, v7, v1);
      sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
      v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v18._countAndFlagsBits = 0x545F4F545F504154;
      v18._object = (void *)0xEB00000000455059;
      v19._countAndFlagsBits = 0x617A696C61636F4CLL;
      v19._object = (void *)0xEB00000000656C62;
      countAndFlagsBits = Locale.ltLocalizedAppString(_:table:bundle:)(v18, v19, (NSBundle)v17)._countAndFlagsBits;

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    return countAndFlagsBits;
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 8);
    v22 = type metadata accessor for ConversationManager(0);
    v23 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    result = EnvironmentObject.error()(0, v21, v22, v23);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EFB58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  void *v9;
  char *v10;
  id v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v1 = v0;
  v2 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    v3 = objc_allocWithZone((Class)type metadata accessor for KeyboardUpdatingTextViewUIKit());
    v4 = sub_1000EED6C(v2);
    sub_1000EF8CC();
    v6 = v5;
    v7 = sub_100190DF0();
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setText:", v8, swift_bridgeObjectRelease(v6).n128_f64[0]);

    objc_msgSend(v4, "setFont:", *(_QWORD *)(v1 + *(int *)(type metadata accessor for KeyboardUpdatingTextView(0) + 28)));
    v9 = (void *)objc_opt_self(UIColor);
    v10 = v4;
    v11 = objc_msgSend(v9, "clearColor");
    objc_msgSend(v10, "setBackgroundColor:", v11);

    v12 = v10;
    sub_100006DF4((uint64_t *)&unk_100292520);
    UIViewRepresentableContext.coordinator.getter(&v23);
    v13 = v23;
    objc_msgSend(v12, "setDelegate:", v23);

    v14 = v12;
    UIViewRepresentableContext.coordinator.getter(&v23);
    v15 = v23;
    objc_msgSend(v14, "setTextDropDelegate:", v23);

    objc_msgSend(v14, "setReturnKeyType:", 0);
    objc_msgSend(v14, "setForceDisableDictation:", 1);
    objc_msgSend(v14, "setShowsVerticalScrollIndicator:", 0);
    objc_msgSend(v14, "setTextContainerInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
    objc_msgSend(v14, "setAdjustsFontForContentSizeCategory:", 1);
    UIViewRepresentableContext.coordinator.getter(&v23);
    v16 = v23;
    v17 = *(void **)&v23[OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_keyboardUpdatingTextViewUIKit];
    *(_QWORD *)&v23[OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_keyboardUpdatingTextViewUIKit] = v14;
    v18 = v14;

    return (uint64_t)v18;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 8);
    v21 = type metadata accessor for ConversationManager(0);
    v22 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    result = EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000EFDE0(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  _QWORD *result;
  uint64_t v9;

  v2 = type metadata accessor for KeyboardUpdatingTextViewUIKit();
  if (swift_dynamicCastClass(a1, v2))
  {
    v3 = a1;
    sub_1000EF8CC();
    v5 = v4;
    v6 = sub_100190DF0();
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setText:", v7, swift_bridgeObjectRelease(v5).n128_f64[0]);

  }
  type metadata accessor for KeyboardUpdatingTextView(0);
  sub_100006DF4(&qword_100296C60);
  result = Binding.wrappedValue.getter(&v9);
  if (v9 == 1)
    return objc_msgSend(a1, "becomeFirstResponder");
  return result;
}

id sub_1000EFEF0(uint64_t a1)
{
  _BYTE *v1;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  objc_super v10;

  *(_QWORD *)&v1[OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_keyboardUpdatingTextViewUIKit] = 0;
  v1[OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_isReturnKeyChangeReloadInputViews] = 0;
  v3 = &v1[OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator__horizontalSizeClass];
  *v3 = swift_getKeyPath(&unk_1001EF080);
  v4 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v3, v4, 0);
  sub_1000F193C(a1, (uint64_t)&v1[OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_keyboardUpdatingTextView]);
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for KeyboardUpdatingTextView.Coordinator(0);
  v5 = objc_msgSendSuper2(&v10, "init");
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  v7 = v5;
  v8 = objc_msgSend(v6, "defaultCenter");
  objc_msgSend(v8, "addObserver:selector:name:object:", v7, "preferredContentSizeChanged:", UIContentSizeCategoryDidChangeNotification, 0);

  sub_1000F1A44(a1);
  return v7;
}

uint64_t sub_1000F0010(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  id v16;
  id v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  id v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;

  if (a4 == 10 && a5 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, 10, 0xE100000000000000, 0) & 1) != 0)
  {
    v11 = type metadata accessor for KeyboardUpdatingTextViewUIKit();
    v12 = swift_dynamicCastClass(a1, v11);
    if (v12)
    {
      v13 = v12;
      v14 = v5 + OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_keyboardUpdatingTextView;
      v15 = *(void (**)(uint64_t))(v14
                                           + *(int *)(type metadata accessor for KeyboardUpdatingTextView(0) + 36));
      v16 = a1;
      v15(v13);

    }
    return 0;
  }
  v17 = objc_msgSend(a1, "text");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0xE000000000000000;
  }
  v22 = Range<>.init(_:in:)(a2, a3, v19, v21);
  if ((v24 & 1) != 0)
  {
    swift_bridgeObjectRelease(v21);
    return 0;
  }
  sub_1000F0244(v22, v23, a4, a5, v19, v21);
  v26 = v25;
  v28 = v27;
  swift_bridgeObjectRelease(v21);
  v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v29 = v26 & 0xFFFFFFFFFFFFLL;
  if (!v29)
  {
    v30 = v28;
    goto LABEL_20;
  }
  if (!v26 && v28 == 0xE000000000000000)
  {
    v30 = 0xE000000000000000;
LABEL_20:
    v33 = swift_bridgeObjectRelease(v30).n128_u64[0];
    v34 = 0;
    goto LABEL_22;
  }
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, 0, 0xE000000000000000, 0);
  v33 = swift_bridgeObjectRelease(v28).n128_u64[0];
  v34 = (id)(~v35 & 1);
LABEL_22:
  if (v34 == objc_msgSend(a1, "returnKeyType", *(double *)&v33))
    return 1;
  objc_msgSend(a1, "setReturnKeyType:", v34);
  v36 = type metadata accessor for KeyboardUpdatingTextViewUIKit();
  v37 = swift_dynamicCastClass(a1, v36);
  v31 = 1;
  if (v37)
  {
    v38 = (void *)v37;
    v39 = OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_allowKeyboardLocaleChange;
    *(_BYTE *)(v37 + OBJC_IVAR____TtC17SequoiaTranslator29KeyboardUpdatingTextViewUIKit_allowKeyboardLocaleChange) = 0;
    v40 = a1;
    objc_msgSend(v38, "reloadInputViews");
    *((_BYTE *)v38 + v39) = 1;

  }
  return v31;
}

void sub_1000F0244(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  v62 = 0;
  v63 = 0xE000000000000000;
  v58 = a5;
  v59 = a6;
  v12 = swift_bridgeObjectRetain(a6);
  Substring.init<A>(_:)(&v58, &type metadata for String, &protocol witness table for String, v12);
  v14 = v13;
  swift_bridgeObjectRelease(v13);
  if ((v14 & 0x1000000000000000) != 0)
    goto LABEL_25;
  v58 = a3;
  v59 = a4;
  v15 = swift_bridgeObjectRetain(a4);
  Substring.init<A>(_:)(&v58, &type metadata for String, &protocol witness table for String, v15);
  v17 = v16;
  swift_bridgeObjectRelease(v16);
  if ((v17 & 0x1000000000000000) != 0)
    goto LABEL_25;
  v18 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v18) = 1;
  v19 = 4 << v18;
  v20 = a1;
  if ((a1 & 0xC) == 4 << v18)
    v20 = sub_1001A84D8(a1, a5, a6);
  v56 = a1;
  v57 = a3;
  v21 = a2;
  v22 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v24 = a6 & 0x2000000000000000;
    v26 = a5 & 0xFFFFFFFFFFFFLL;
    v25 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0)
      v45 = HIBYTE(a6) & 0xF;
    else
      v45 = a5 & 0xFFFFFFFFFFFFLL;
    if (v45 < v20 >> 16)
      goto LABEL_43;
    v23 = String.UTF8View._foreignDistance(from:to:)(15);
    if (v22)
      v27 = 7;
    else
      v27 = 11;
  }
  else
  {
    v23 = v20 >> 16;
    v24 = a6 & 0x2000000000000000;
    v25 = HIBYTE(a6) & 0xF;
    v26 = a5 & 0xFFFFFFFFFFFFLL;
    v27 = 7;
  }
  if (!v24)
    v25 = v26;
  v28 = 4 << (v22 >> 59);
  v29 = v27 | (v25 << 16);
  a2 = v21;
  if ((a6 & 0x1000000000000000) == 0)
    v28 = 8;
  v30 = v21;
  if ((v21 & 0xC) == v28)
  {
    v46 = v21;
    v47 = v23;
    v48 = sub_1001A84D8(v46, a5, a6);
    v23 = v47;
    v30 = v48;
  }
  if ((v27 & 0xC) == v19)
  {
    v49 = v27 | (v25 << 16);
    v50 = v23;
    v51 = sub_1001A84D8(v49, a5, a6);
    v23 = v50;
    v29 = v51;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      v31 = (v29 >> 16) - (v30 >> 16);
      if ((a4 & 0x1000000000000000) == 0)
        goto LABEL_18;
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v25 < v30 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v25 >= v29 >> 16)
  {
    v52 = v23;
    v53 = String.UTF8View._foreignDistance(from:to:)(v30);
    v23 = v52;
    v31 = v53;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      a3 = v57;
      if ((a4 & 0x2000000000000000) != 0)
      {
        v33 = HIBYTE(a4) & 0xF;
        v32 = v23 + v33;
        if (!__OFADD__(v23, v33))
          goto LABEL_23;
      }
      else
      {
        v32 = v23 + (v57 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v23, v57 & 0xFFFFFFFFFFFFLL))
          goto LABEL_23;
      }
      goto LABEL_39;
    }
LABEL_37:
    a3 = v57;
    v54 = v23;
    v55 = String.UTF8View._foreignCount()();
    v32 = v54 + v55;
    if (!__OFADD__(v54, v55))
    {
LABEL_23:
      if (!__OFADD__(v32, v31))
      {
        String.reserveCapacity(_:)(v32 + v31);
        a1 = v56;
LABEL_25:
        v34 = String.subscript.getter(15, a1, a5, a6);
        v36 = v35;
        v58 = v34;
        v59 = v37;
        v60 = v38;
        v61 = v35;
        v39 = sub_1000F1D30();
        String.append<A>(contentsOf:)(&v58, &type metadata for Substring, v39);
        swift_bridgeObjectRelease(v36);
        v58 = a3;
        v59 = a4;
        String.append<A>(contentsOf:)(&v58, &type metadata for String, &protocol witness table for String);
        v40 = sub_10019BCFC(a2, a5, a6);
        v42 = v41;
        v58 = v40;
        v59 = v43;
        v60 = v44;
        v61 = v41;
        String.append<A>(contentsOf:)(&v58, &type metadata for Substring, v39);
        swift_bridgeObjectRelease(v42);
        return;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

void sub_1000F0848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028CE50);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028CE40);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for UserInterfaceSizeClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v1
                 + OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_keyboardUpdatingTextViewUIKit);
  if (v12)
  {
    sub_10000B074(v1 + OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator__horizontalSizeClass, (uint64_t)v4, &qword_10028CE50);
    v13 = v12;
    sub_1000D58EC(v7);
    sub_10000A020((uint64_t)v4, &qword_10028CE50);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for UserInterfaceSizeClass.compact(_:), v8);
      sub_10000A020((uint64_t)v7, &qword_10028CE40);
    }
    else
    {
      (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 32))(v11, v7, v8);
    }
    v14 = sub_1001D8F64((uint64_t)v11, 0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    objc_msgSend(v13, "setFont:", v14);

    v15 = v1 + OBJC_IVAR____TtCV17SequoiaTranslator24KeyboardUpdatingTextView11Coordinator_keyboardUpdatingTextView;
    v16 = type metadata accessor for KeyboardUpdatingTextView(0);
    (*(void (**)(id))(v15 + *(int *)(v16 + 32)))(v13);

  }
}

id sub_1000F0B04()
{
  return sub_1000F0B14(0, (uint64_t (*)(void))type metadata accessor for KeyboardUpdatingTextView.Coordinator);
}

id sub_1000F0B14(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1000F0B98()
{
  return type metadata accessor for KeyboardUpdatingTextView.Coordinator(0);
}

uint64_t type metadata accessor for KeyboardUpdatingTextView.Coordinator(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_100292450, (uint64_t)&nominal type descriptor for KeyboardUpdatingTextView.Coordinator);
}

void sub_1000F0BB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for KeyboardUpdatingTextView(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v6[2] = &unk_1001EEF38;
    sub_100048160(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for KeyboardUpdatingTextView(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_1002924C8, (uint64_t)&nominal type descriptor for KeyboardUpdatingTextView);
}

char *sub_1000F0C64(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  id v32;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v4;
    v12 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v10, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13))
      {
        v15 = sub_100006DF4(&qword_10028CE40);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 16))(v9, v10, v13);
        v16 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
      }
    }
    else
    {
      v17 = *v10;
      *(_QWORD *)v9 = *v10;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v12, v16);
    v18 = a3[6];
    v19 = a3[7];
    v20 = &v7[v18];
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    *(_QWORD *)v20 = *v21;
    *((_QWORD *)v20 + 1) = v23;
    v20[16] = *((_BYTE *)v21 + 16);
    v24 = *(char **)((char *)a2 + v19);
    *(_QWORD *)&v7[v19] = v24;
    v25 = a3[8];
    v26 = a3[9];
    v27 = &v7[v25];
    v28 = (char **)((char *)a2 + v25);
    v29 = v28[1];
    *(_QWORD *)v27 = *v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = &v7[v26];
    v31 = (char **)((char *)a2 + v26);
    v4 = (char *)v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v4;
    swift_retain(v22);
    swift_retain(v23);
    v32 = v24;
    swift_retain(v29);
  }
  swift_retain(v4);
  return v7;
}

double sub_1000F0E14(id *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double result;

  v4 = (id *)((char *)a1 + a2[5]);
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (id *)((char *)a1 + a2[6]);
  swift_release(*v8);
  swift_release(v8[1]);

  swift_release(*(id *)((char *)a1 + a2[8] + 8));
  *(_QWORD *)&result = swift_release(*(id *)((char *)a1 + a2[9] + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_1000F0EF8(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = v6;
  v12 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v10, v12) == 1)
  {
    v13 = type metadata accessor for UserInterfaceSizeClass(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13))
    {
      v15 = sub_100006DF4(&qword_10028CE40);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      v16 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v9, v10, v13);
      v16 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
    }
  }
  else
  {
    v17 = *v10;
    *v9 = *v10;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v12, v16);
  v18 = a3[6];
  v19 = a3[7];
  v20 = (char *)a1 + v18;
  v21 = (uint64_t *)(a2 + v18);
  v22 = *v21;
  v23 = v21[1];
  *(_QWORD *)v20 = *v21;
  *((_QWORD *)v20 + 1) = v23;
  v20[16] = *((_BYTE *)v21 + 16);
  v24 = *(void **)(a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v24;
  v25 = a3[8];
  v26 = a3[9];
  v27 = (_QWORD *)((char *)a1 + v25);
  v28 = (_QWORD *)(a2 + v25);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = (_QWORD *)((char *)a1 + v26);
  v31 = (_QWORD *)(a2 + v26);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_retain(v22);
  swift_retain(v23);
  v33 = v24;
  swift_retain(v29);
  swift_retain(v32);
  return a1;
}

uint64_t sub_1000F1080(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    sub_10000A020(a1 + v9, (uint64_t *)&unk_100291470);
    v12 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_100006DF4(&qword_10028CE40);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
        v16 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v16);
  }
  v18 = a3[6];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a1 + v18);
  v22 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = *(_QWORD *)(v20 + 8);
  v24 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v23;
  swift_retain(v23);
  swift_release(v24);
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  v25 = a3[7];
  v26 = *(void **)(a2 + v25);
  v27 = *(void **)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  v28 = v26;

  v29 = a3[8];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  v32 = v31[1];
  v33 = v30[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = a3[9];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  v37 = v36[1];
  v38 = v35[1];
  *v35 = *v36;
  v35[1] = v37;
  swift_retain(v37);
  swift_release(v38);
  return a1;
}

_OWORD *sub_1000F126C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      v12 = sub_100006DF4(&qword_10028CE40);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v17 = *(_OWORD *)v16;
  v15[16] = v16[16];
  *(_OWORD *)v15 = v17;
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v18 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  return a1;
}

void **sub_1000F13BC(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  *a1 = *a2;

  a1[1] = a2[1];
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_10000A020((uint64_t)a1 + v7, (uint64_t *)&unk_100291470);
    v10 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for UserInterfaceSizeClass(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        v13 = sub_100006DF4(&qword_10028CE40);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(uint64_t *)((char *)a1 + v14);
  *(void **)((char *)a1 + v14) = *(void **)((char *)a2 + v14);
  swift_release(v17);
  v18 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release(v18);
  v15[16] = v16[16];
  v19 = a3[7];
  v20 = *(void **)((char *)a1 + v19);
  *(void **)((char *)a1 + v19) = *(void **)((char *)a2 + v19);

  v21 = a3[8];
  v22 = *(uint64_t *)((char *)a1 + v21 + 8);
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  swift_release(v22);
  v23 = a3[9];
  v24 = *(uint64_t *)((char *)a1 + v23 + 8);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  swift_release(v24);
  return a1;
}

uint64_t sub_1000F1574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F1580);
}

uint64_t sub_1000F1580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100006DF4(&qword_10028CE50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000F1608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F1614);
}

uint64_t sub_1000F1614(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_10028CE50);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_1000F1698(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1001EEF70;
  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1001EEF88;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for () + 64;
    v4[5] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

id sub_1000F1744@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  id v6;
  id result;
  uint64_t v8;

  __chkstk_darwin(a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F193C(v2, (uint64_t)v5);
  v6 = objc_allocWithZone((Class)type metadata accessor for KeyboardUpdatingTextView.Coordinator(0));
  result = sub_1000EFEF0((uint64_t)v5);
  *a2 = result;
  return result;
}

uint64_t sub_1000F17C4(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_1000F1804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C(&qword_100292568, type metadata accessor for KeyboardUpdatingTextView, (uint64_t)&unk_1001EEFF0);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000F186C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C(&qword_100292568, type metadata accessor for KeyboardUpdatingTextView, (uint64_t)&unk_1001EEFF0);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000F18D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C(&qword_100292568, type metadata accessor for KeyboardUpdatingTextView, (uint64_t)&unk_1001EEFF0);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_1000F1910()
{
  return sub_100007D5C((unint64_t *)&unk_100292510, type metadata accessor for KeyboardUpdatingTextView, (uint64_t)&unk_1001EEFA0);
}

uint64_t sub_1000F193C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyboardUpdatingTextView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F1980()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1000F19A0()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1000F19C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100006DF4(&qword_10028CE40);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B074(a1, (uint64_t)v4, &qword_10028CE40);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

uint64_t sub_1000F1A44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyboardUpdatingTextView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F1A80@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001EF0B0);
  v5 = swift_getKeyPath(&unk_1001EF0D8);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_1000F1AEC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_10000B074(a1, (uint64_t)&v14 - v8, (uint64_t *)&unk_10028FE50);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001EF0B0);
  v12 = swift_getKeyPath(&unk_1001EF0D8);
  sub_10000B074((uint64_t)v9, (uint64_t)v7, (uint64_t *)&unk_10028FE50);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_10000A020((uint64_t)v9, (uint64_t *)&unk_10028FE50);
}

uint64_t sub_1000F1BE4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F1C08(uint64_t a1)
{
  uint64_t v1;

  sub_1000EF060(a1, v1);
}

void *sub_1000F1C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  id v14;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v14 = v8;
      v11 = sub_1000EF37C(&v14, a2);
      if (v3)
      {
        swift_bridgeObjectRelease(a1);

        return v9;
      }
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_11:
  swift_bridgeObjectRelease(a1);
  return 0;
}

unint64_t sub_1000F1D30()
{
  unint64_t result;

  result = qword_100292570;
  if (!qword_100292570)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100292570);
  }
  return result;
}

uint64_t sub_1000F1D84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a2[2];
    v10 = a2[3];
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v12 = a2 + 5;
    v11 = a2[5];
    swift_retain(v7);
    swift_retain(v9);
    swift_retain(v10);
    if (v11)
    {
      v13 = a2[6];
      *(_QWORD *)(a1 + 40) = v11;
      *(_QWORD *)(a1 + 48) = v13;
      swift_retain(v13);
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *v12;
    }
    v15 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v15;
    v16 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v16;
    v17 = *(int *)(a3 + 36);
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = type metadata accessor for Locale(0);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    v21(v18, v19, v20);
    *(_BYTE *)(a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  }
  return a1;
}

uint64_t sub_1000F1EB0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  if (a1[5])
    swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1000F1F28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a2[2];
  v9 = a2[3];
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v11 = a2 + 5;
  v10 = a2[5];
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  if (v10)
  {
    v12 = a2[6];
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v12;
    swift_retain(v12);
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v11;
  }
  v13 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v13;
  v14 = a2[10];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = v14;
  v15 = *(int *)(a3 + 36);
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = type metadata accessor for Locale(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v19(v16, v17, v18);
  *(_BYTE *)(a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t *sub_1000F2028(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  v9 = a1[2];
  v10 = a2[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v9);
  v11 = a2[3];
  v12 = a1[3];
  a1[3] = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = a1[5];
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v14 = a2[5];
  if (!v13)
  {
    if (v14)
    {
      v17 = a2[6];
      a1[5] = v14;
      a1[6] = v17;
      swift_retain(v17);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    goto LABEL_8;
  }
  if (!v14)
  {
    swift_release(a1[6]);
    goto LABEL_7;
  }
  v15 = a2[6];
  v16 = a1[6];
  a1[5] = v14;
  a1[6] = v15;
  swift_retain(v15);
  swift_release(v16);
LABEL_8:
  a1[7] = a2[7];
  v18 = a2[8];
  v19 = a1[8];
  a1[8] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[9] = a2[9];
  v20 = a2[10];
  v21 = a1[10];
  a1[10] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(int *)(a3 + 36);
  v23 = (uint64_t)a1 + v22;
  v24 = (uint64_t)a2 + v22;
  v25 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  *((_BYTE *)a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_1000F2188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_BYTE *)(a1 + *(int *)(a3 + 40)) = *(_BYTE *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t *sub_1000F224C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  if (!v11)
  {
    if (v10)
    {
      v14 = a2[6];
      a1[5] = v10;
      a1[6] = v14;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    goto LABEL_8;
  }
  if (!v10)
  {
    swift_release(a1[6]);
    goto LABEL_7;
  }
  v12 = a2[6];
  v13 = a1[6];
  a1[5] = v10;
  a1[6] = v12;
  swift_release(v13);
LABEL_8:
  v15 = a2[8];
  v16 = a1[8];
  a1[7] = a2[7];
  a1[8] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = a2[10];
  v18 = a1[10];
  a1[9] = a2[9];
  a1[10] = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(int *)(a3 + 36);
  v20 = (uint64_t)a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  *((_BYTE *)a1 + *(int *)(a3 + 40)) = *((_BYTE *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_1000F2368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F2374);
}

uint64_t sub_1000F2374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Locale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1000F23F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F23FC);
}

uint64_t sub_1000F23FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Locale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LabeledExpandingTextView(uint64_t a1)
{
  uint64_t result;

  result = qword_1002925E8;
  if (!qword_1002925E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LabeledExpandingTextView);
  return result;
}

uint64_t sub_1000F24AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "\t";
  v4[1] = &unk_1001EF1C8;
  v4[2] = &unk_1001EF1E0;
  v4[3] = &unk_1001EF1F8;
  v4[4] = &unk_1001EF1F8;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_1001EF210;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000F2548(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100214174, 1);
}

void sub_1000F2558(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  double *v64;
  uint64_t v65;
  Swift::Bool v66;
  unsigned int *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[4];
  int v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  _QWORD v105[3];

  v104 = a2;
  v3 = type metadata accessor for LayoutDirection(0);
  v102 = *(_QWORD *)(v3 - 8);
  v103 = v3;
  __chkstk_darwin(v3);
  v101 = &v82[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v94 = type metadata accessor for RedactionReasons(0);
  v97 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v95 = &v82[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ExpandingLineLimitedTextView(0);
  __chkstk_darwin(v6);
  v8 = &v82[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100006DF4(&qword_100292650);
  __chkstk_darwin(v9);
  v11 = &v82[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v92 = sub_100006DF4(&qword_100292658);
  v88 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v87 = &v82[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v84 = sub_100006DF4(&qword_100292660);
  __chkstk_darwin(v84);
  v86 = &v82[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v85 = sub_100006DF4(&qword_100292668);
  __chkstk_darwin(v85);
  v98 = &v82[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v89 = sub_100006DF4(&qword_100292670);
  v15 = __chkstk_darwin(v89);
  v100 = &v82[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v15);
  v96 = &v82[-v18];
  __chkstk_darwin(v17);
  v99 = &v82[-v19];
  v20 = a1[8];
  v105[0] = a1[7];
  v105[1] = v20;
  v21 = sub_10000B030();
  swift_bridgeObjectRetain(v20);
  v22 = Text.init<A>(_:)(v105, &type metadata for String, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = static Font.footnote.getter(v22);
  static Font.Weight.semibold.getter();
  v30 = Font.weight(_:)(v29);
  v31 = swift_release(v29);
  v91 = Text.font(_:)(v30, v22, v24, v28, v26, v31);
  v90 = v32;
  v83 = v33;
  v93 = v34;
  swift_release(v30);
  sub_10001B9E8(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  v35 = a1[9];
  v36 = a1[10];
  v37 = a1[5];
  v38 = a1[6];
  swift_bridgeObjectRetain(v36);
  sub_100016244(v37, v38);
  v39 = sub_1000B2BA4(v35, v36, v37, v38, (uint64_t)v8);
  v40 = static Font.body.getter(v39);
  static Font.Weight.bold.getter(v40);
  v41 = Font.weight(_:)(v40);
  swift_release(v40);
  KeyPath = swift_getKeyPath(&unk_1001EF278);
  sub_1000B35F4((uint64_t)v8, (uint64_t)v11);
  v43 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v43 = KeyPath;
  v43[1] = v41;
  sub_1000F2D68((uint64_t)v8);
  v44 = *(int *)(type metadata accessor for LabeledExpandingTextView(0) + 40);
  if (*((_BYTE *)a1 + v44) == 1)
  {
    v45 = v95;
    static RedactionReasons.placeholder.getter();
    v46 = v94;
  }
  else
  {
    v105[0] = _swiftEmptyArrayStorage;
    v47 = sub_100007D5C(&qword_100292678, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v48 = sub_100006DF4(&qword_100292680);
    v49 = sub_100012334(&qword_100292688, &qword_100292680, (uint64_t)&protocol conformance descriptor for [A]);
    v50 = v94;
    v45 = v95;
    dispatch thunk of SetAlgebra.init<A>(_:)(v105, v48, v49, v94, v47);
    v46 = v50;
  }
  v51 = sub_1000F2DA4();
  v52 = v87;
  View.redacted(reason:)(v45, v9, v51);
  (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v45, v46);
  sub_10000A020((uint64_t)v11, &qword_100292650);
  v53 = *((unsigned __int8 *)a1 + v44);
  v54 = v88;
  v55 = (uint64_t)v86;
  v56 = v92;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v88 + 16))(v86, v52, v92);
  v57 = 0.4;
  if (!v53)
    v57 = 0.0;
  *(double *)(v55 + *(int *)(v84 + 36)) = v57;
  if (v53)
    v58 = 1.4;
  else
    v58 = 1.0;
  v59 = (*(uint64_t (**)(_BYTE *, uint64_t))(v54 + 8))(v52, v56);
  v60 = static UnitPoint.leading.getter(v59);
  v62 = v61;
  v63 = v98;
  sub_10000B074(v55, (uint64_t)v98, &qword_100292660);
  v64 = (double *)&v63[*(int *)(v85 + 36)];
  *v64 = v58;
  v64[1] = v58;
  v64[2] = v60;
  *((_QWORD *)v64 + 3) = v62;
  sub_10000A020(v55, &qword_100292660);
  v65 = swift_getKeyPath(&unk_1001EF2A8);
  v66 = Locale.isRTL()();
  v67 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v69 = v101;
  v68 = v102;
  if (!v66)
    v67 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v70 = v103;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v102 + 104))(v101, *v67, v103);
  v71 = v83 & 1;
  v72 = (uint64_t)v96;
  v73 = (uint64_t *)&v96[*(int *)(v89 + 36)];
  v74 = sub_100006DF4(&qword_10028B258);
  (*(void (**)(char *, _BYTE *, uint64_t))(v68 + 16))((char *)v73 + *(int *)(v74 + 28), v69, v70);
  *v73 = v65;
  sub_10000B074((uint64_t)v63, v72, &qword_100292668);
  (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v69, v70);
  sub_10000A020((uint64_t)v63, &qword_100292668);
  v75 = v99;
  sub_1000F2E48(v72, (uint64_t)v99);
  v76 = v100;
  sub_10000B074((uint64_t)v75, (uint64_t)v100, &qword_100292670);
  v77 = v104;
  v78 = v91;
  v79 = v90;
  *v104 = v91;
  v77[1] = v79;
  *((_BYTE *)v77 + 16) = v71;
  v80 = v93;
  v77[3] = v93;
  v81 = sub_100006DF4(&qword_1002926A0);
  sub_10000B074((uint64_t)v76, (uint64_t)v77 + *(int *)(v81 + 48), &qword_100292670);
  sub_10001B9D8(v78, v79, v71);
  swift_bridgeObjectRetain(v80);
  sub_10000A020((uint64_t)v75, &qword_100292670);
  sub_10000A020((uint64_t)v76, &qword_100292670);
  sub_10001B9E8(v78, v79, v71);
  swift_bridgeObjectRelease(v80);
}

uint64_t sub_1000F2C5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = sub_100006DF4(&qword_100292638);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v5);
  *((_QWORD *)v7 + 1) = 0x4000000000000000;
  v7[16] = 0;
  v8 = sub_100006DF4(&qword_100292640);
  sub_1000F2558(v2, (uint64_t *)&v7[*(int *)(v8 + 44)]);
  LOBYTE(v2) = static Edge.Set.all.getter(v9);
  v10 = EdgeInsets.init(_all:)(4.0);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_10000B074((uint64_t)v7, a1, &qword_100292638);
  v17 = a1 + *(int *)(sub_100006DF4(&qword_100292648) + 36);
  *(_BYTE *)v17 = (_BYTE)v2;
  *(double *)(v17 + 8) = v10;
  *(_QWORD *)(v17 + 16) = v12;
  *(_QWORD *)(v17 + 24) = v14;
  *(_QWORD *)(v17 + 32) = v16;
  *(_BYTE *)(v17 + 40) = 0;
  return sub_10000A020((uint64_t)v7, &qword_100292638);
}

uint64_t sub_1000F2D68(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ExpandingLineLimitedTextView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000F2DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292690;
  if (!qword_100292690)
  {
    v1 = sub_1000070BC(&qword_100292650);
    sub_100007D5C(&qword_100292698, type metadata accessor for ExpandingLineLimitedTextView, (uint64_t)&unk_1001ECDC8);
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292690);
  }
  return result;
}

uint64_t sub_1000F2E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100292670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000F2E94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002926A8;
  if (!qword_1002926A8)
  {
    v1 = sub_1000070BC(&qword_100292648);
    sub_100012334(&qword_1002926B0, &qword_100292638, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002926A8);
  }
  return result;
}

uint64_t sub_1000F2F18(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    v10 = a2 + 5;
    v9 = a2[5];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      v11 = a2[6];
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v11;
      swift_retain(v11);
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *v10;
    }
    v13 = a3[9];
    v14 = (uint64_t *)(a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = sub_100006DF4(&qword_100291490);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for Locale.Language(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      v19 = *v15;
      *v14 = *v15;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
    v20 = a3[10];
    v21 = a1 + v20;
    v22 = (uint64_t)a2 + v20;
    v23 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    sub_10001F410(*(_QWORD *)v22, v24);
    *(_QWORD *)v21 = v23;
    *(_BYTE *)(v21 + 8) = v24;
    v25 = a3[11];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = v26;
      v31 = v28;
      v32 = 1;
    }
    else
    {
      v33 = *v27;
      *v26 = *v27;
      swift_retain(v33);
      v30 = v26;
      v31 = v28;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
  }
  return a1;
}

double sub_1000F30E0(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  if (a1[5])
    swift_release(a1[6]);
  v4 = (_QWORD *)((char *)a1 + a2[9]);
  v5 = sub_100006DF4(&qword_100291490);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for Locale.Language(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  sub_10001F470(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
  v7 = (_QWORD *)((char *)a1 + a2[11]);
  v8 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000F31E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v9 = (_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v10;
    swift_retain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v9;
  }
  v11 = a3[9];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = sub_100006DF4(&qword_100291490);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for Locale.Language(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = a3[10];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  sub_10001F410(*(_QWORD *)v20, v22);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v22;
  v23 = a3[11];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = 1;
  }
  else
  {
    v29 = *v25;
    *v24 = *v25;
    swift_retain(v29);
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v28);
  return a1;
}

uint64_t sub_1000F3374(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v11 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 48);
      v13 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v11;
      *(_QWORD *)(a1 + 48) = v12;
      swift_retain(v12);
      swift_release(v13);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 48));
  }
  else if (v11)
  {
    v14 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v14;
    swift_retain(v14);
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_8:
  if (a1 != a2)
  {
    v15 = a3[9];
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_10000A020(a1 + v15, &qword_100291490);
    v18 = sub_100006DF4(&qword_100291490);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for Locale.Language(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  v22 = a3[10];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_10001F410(*(_QWORD *)v24, v26);
  v27 = *(_QWORD *)v23;
  v28 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v26;
  sub_10001F470(v27, v28);
  if (a1 != a2)
  {
    v29 = a3[11];
    v30 = (uint64_t *)(a1 + v29);
    v31 = (uint64_t *)(a2 + v29);
    sub_10000A020(a1 + v29, &qword_1002969A0);
    v32 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = 1;
    }
    else
    {
      v35 = *v31;
      *v30 = *v31;
      swift_retain(v35);
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v34);
  }
  return a1;
}

uint64_t sub_1000F35A0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  v9 = a3[9];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_100006DF4(&qword_100291490);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for Locale.Language(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
    swift_storeEnumTagMultiPayload(v10, v12, 1);
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v14 = a3[10];
  v15 = a3[11];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload(v18, v20, 1);
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000F3714(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (v11)
  {
    if (v10)
    {
      v12 = *(_QWORD *)(a2 + 48);
      v13 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v12;
      swift_release(v13);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 48));
  }
  else if (v10)
  {
    v14 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v14;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_8:
  if (a1 != a2)
  {
    v15 = a3[9];
    v16 = (void *)(a1 + v15);
    v17 = (const void *)(a2 + v15);
    sub_10000A020(a1 + v15, &qword_100291490);
    v18 = sub_100006DF4(&qword_100291490);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for Locale.Language(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v20 = a3[10];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = (_BYTE)v22;
  sub_10001F470(v24, v25);
  if (a1 != a2)
  {
    v26 = a3[11];
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    sub_10000A020(a1 + v26, &qword_1002969A0);
    v29 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000F3910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F391C);
}

uint64_t sub_1000F391C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_1002926B8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = sub_100006DF4(&qword_10028EA80);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000F39C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F39D0);
}

uint64_t sub_1000F39D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_1002926B8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = sub_100006DF4(&qword_10028EA80);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for LabeledTextView(uint64_t a1)
{
  uint64_t result;

  result = qword_100292718;
  if (!qword_100292718)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LabeledTextView);
  return result;
}

void sub_1000F3AB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = &unk_1001EF308;
  v6[1] = &unk_1001EF308;
  v6[2] = &unk_1001EF320;
  v6[3] = &unk_1001EF338;
  v6[4] = &unk_1001EF350;
  sub_10006AEDC(319, (unint64_t *)&qword_100292728, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Language);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v6[6] = &unk_1001EF368;
    sub_10006AEDC(319, (unint64_t *)&qword_10028EB00, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000F3B88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002141E0, 1);
}

uint64_t sub_1000F3B98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;

  v2 = v1;
  v4 = sub_100006DF4(&qword_100292770);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100292778);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(v2 + 32);
  if (v11 != 2 && (v11 & 1) != 0)
    v12 = static HorizontalAlignment.trailing.getter(v8);
  else
    v12 = static HorizontalAlignment.leading.getter(v8);
  *(_QWORD *)v6 = v12;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v13 = sub_100006DF4(&qword_100292780);
  sub_1000F3D04((_QWORD *)v2, (uint64_t *)&v6[*(int *)(v13 + 44)]);
  v15 = static Edge.Set.all.getter(v14);
  v16 = EdgeInsets.init(_all:)(4.0);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  sub_10000B074((uint64_t)v6, (uint64_t)v10, &qword_100292770);
  v23 = &v10[*(int *)(v7 + 36)];
  *v23 = v15;
  *((double *)v23 + 1) = v16;
  *((_QWORD *)v23 + 2) = v18;
  *((_QWORD *)v23 + 3) = v20;
  *((_QWORD *)v23 + 4) = v22;
  v23[40] = 0;
  sub_10000A020((uint64_t)v6, &qword_100292770);
  return sub_1000110A4((uint64_t)v10, a1, &qword_100292778);
}

double sub_1000F3D04@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  double result;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD v68[2];

  v67 = a2;
  v3 = type metadata accessor for LayoutDirection(0);
  v65 = *(_QWORD *)(v3 - 8);
  v66 = v3;
  __chkstk_darwin(v3);
  v64 = (_QWORD **)((char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006DF4(&qword_100292788);
  __chkstk_darwin(v5);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100006DF4(&qword_100292790);
  __chkstk_darwin(v62);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100006DF4(&qword_100292798);
  __chkstk_darwin(v60);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100006DF4(&qword_1002927A0);
  v12 = __chkstk_darwin(v61);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v63 = (uint64_t)&v55 - v15;
  v55 = a1;
  v16 = a1[1];
  v68[0] = *a1;
  v68[1] = v16;
  v17 = sub_10000B030();
  swift_bridgeObjectRetain(v16);
  v18 = Text.init<A>(_:)(v68, &type metadata for String, v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v25 = static Font.footnote.getter(v18);
  static Font.Weight.semibold.getter();
  v26 = Font.weight(_:)(v25);
  v27 = swift_release(v25);
  v28 = Text.font(_:)(v26, v18, v20, v24, v22, v27);
  v57 = v29;
  v58 = v28;
  LOBYTE(v25) = v30;
  v59 = v31;
  swift_release(v26);
  v56 = v25 & 1;
  sub_10001B9E8(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v32);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v33 = sub_100006DF4(&qword_1002927A8);
  v34 = sub_1000F4184((uint64_t)v55, (uint64_t)&v7[*(int *)(v33 + 44)]);
  v35 = static Font.body.getter(v34);
  static Font.Weight.bold.getter(v35);
  v36 = Font.weight(_:)(v35);
  swift_release(v35);
  KeyPath = swift_getKeyPath(&unk_1001EF3D0);
  sub_10000B074((uint64_t)v7, (uint64_t)v9, &qword_100292788);
  v38 = (uint64_t *)&v9[*(int *)(v62 + 36)];
  *v38 = KeyPath;
  v38[1] = v36;
  sub_10000A020((uint64_t)v7, &qword_100292788);
  sub_10000B074((uint64_t)v9, (uint64_t)v11, &qword_100292790);
  *(_WORD *)&v11[*(int *)(v60 + 36)] = 256;
  sub_10000A020((uint64_t)v9, &qword_100292790);
  v39 = swift_getKeyPath(&unk_1001EF400);
  v40 = v64;
  sub_1000F4844(v64);
  v41 = (uint64_t *)&v14[*(int *)(v61 + 36)];
  v42 = sub_100006DF4(&qword_10028B258);
  v43 = v65;
  v44 = v40;
  v45 = v40;
  v46 = v66;
  (*(void (**)(char *, _QWORD *, uint64_t))(v65 + 16))((char *)v41 + *(int *)(v42 + 28), v44, v66);
  *v41 = v39;
  sub_10000B074((uint64_t)v11, (uint64_t)v14, &qword_100292798);
  (*(void (**)(_QWORD *, uint64_t))(v43 + 8))(v45, v46);
  sub_10000A020((uint64_t)v11, &qword_100292798);
  v47 = v63;
  sub_1000110A4((uint64_t)v14, v63, &qword_1002927A0);
  sub_10000B074(v47, (uint64_t)v14, &qword_1002927A0);
  v48 = v67;
  v50 = v57;
  v49 = v58;
  *v67 = v58;
  v48[1] = v50;
  LOBYTE(v20) = v56;
  *((_BYTE *)v48 + 16) = v56;
  v51 = v59;
  v48[3] = v59;
  v48[4] = (uint64_t)sub_1000F4160;
  v48[5] = 0;
  v52 = v48;
  v53 = sub_100006DF4(&qword_1002927B0);
  sub_10000B074((uint64_t)v14, (uint64_t)v52 + *(int *)(v53 + 48), &qword_1002927A0);
  sub_10001B9D8(v49, v50, v20);
  swift_bridgeObjectRetain(v51);
  sub_10000A020(v47, &qword_1002927A0);
  sub_10000A020((uint64_t)v14, &qword_1002927A0);
  sub_10001B9E8(v49, v50, v20);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v51).n128_u64[0];
  return result;
}

uint64_t sub_1000F4160()
{
  return Transaction.animation.setter(0);
}

uint64_t sub_1000F4184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  char v62;
  double v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD v97[2];
  unsigned __int8 v98;

  v95 = a2;
  v3 = type metadata accessor for OpacityTransition(0);
  v86 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v87 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v79 - v6;
  v81 = type metadata accessor for TranslateText(0);
  v8 = __chkstk_darwin(v81);
  v10 = (uint64_t *)((char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v83 = (uint64_t)&v79 - v11;
  v82 = sub_100006DF4(&qword_1002927B8);
  __chkstk_darwin(v82);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100006DF4(&qword_1002927C0);
  v14 = __chkstk_darwin(v94);
  v84 = (uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v85 = (uint64_t)&v79 - v16;
  v92 = sub_100006DF4(&qword_1002927C8);
  __chkstk_darwin(v92);
  v93 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v18);
  v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for ExpandingText(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006DF4(&qword_1002927D0);
  v23 = __chkstk_darwin(v89);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v79 - v26;
  v28 = sub_100006DF4(&qword_1002927D8);
  v29 = __chkstk_darwin(v28);
  v91 = (uint64_t)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v90 = (char *)&v79 - v31;
  v32 = *(unsigned __int8 *)(a1 + 33);
  v88 = *(_QWORD *)(a1 + 16);
  v33 = a1;
  v34 = *(_QWORD *)(a1 + 24);
  if (v32 == 1)
  {
    v96 = 0;
    swift_bridgeObjectRetain(v34);
    static Binding.constant(_:)(v97, &v96, &type metadata for Bool);
    v35 = v97[0];
    v36 = v97[1];
    v37 = v98;
    v38 = type metadata accessor for Locale(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v20, 1, 1, v38);
    v39 = *(_QWORD *)(v33 + 40);
    v40 = *(_QWORD *)(v33 + 48);
    sub_100016244(v39, v40);
    v41 = ExpandingText.init(_:isExpanded:_:buttonAction:)(v88, v34, v35, v36, v37, v20, v39, v40);
    v42 = static Color.gray.getter(v41);
    KeyPath = swift_getKeyPath(&unk_1001EF458);
    v44 = v79;
    v45 = v80;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v25, v22, v80);
    v46 = v89;
    v47 = (uint64_t *)&v25[*(int *)(v89 + 36)];
    *v47 = KeyPath;
    v47[1] = v42;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v45);
    v48 = &qword_1002927D0;
    sub_1000110A4((uint64_t)v25, (uint64_t)v27, &qword_1002927D0);
    v49 = v93;
    sub_10000B074((uint64_t)v27, v93, &qword_1002927D0);
    swift_storeEnumTagMultiPayload(v49, v92, 0);
    v50 = sub_1000F4B1C();
    v51 = sub_1000F4BB8();
    v52 = (uint64_t)v90;
    _ConditionalContent<>.init(storage:)(v49, v46, v94, v50, v51);
    v53 = (uint64_t)v27;
  }
  else
  {
    *v10 = swift_getKeyPath(&unk_1001EF430);
    v54 = sub_100006DF4(&qword_100291490);
    swift_storeEnumTagMultiPayload(v10, v54, 0);
    v55 = (_QWORD *)((char *)v10 + *(int *)(v81 + 20));
    *v55 = v88;
    v55[1] = v34;
    v56 = v83;
    sub_1000F4A9C((uint64_t)v10, v83);
    v57 = v33 + *(int *)(type metadata accessor for LabeledTextView(0) + 40);
    v58 = v3;
    v59 = *(_QWORD *)v57;
    v60 = *(_BYTE *)(v57 + 8);
    swift_bridgeObjectRetain(v34);
    sub_10001F410(v59, v60);
    v61 = v7;
    v62 = sub_1000D54C8(v59, v60);
    sub_10001F470(v59, v60);
    if ((v62 & 1) != 0)
      v63 = 1.0;
    else
      v63 = 0.65;
    sub_10001BBB8(v56, (uint64_t)v13);
    *(double *)&v13[*(int *)(v82 + 36)] = v63;
    v64 = sub_1000F4AE0(v56);
    OpacityTransition.init()(v64);
    v66 = v86;
    v65 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v87, v61, v58);
    v67 = sub_100007D5C(qword_10028F8F8, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
    v68 = AnyTransition.init<A>(_:)(v65, v58, v67);
    v69 = v84;
    sub_10000B074((uint64_t)v13, v84, &qword_1002927B8);
    v70 = v94;
    *(_QWORD *)(v69 + *(int *)(v94 + 36)) = v68;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v58);
    sub_10000A020((uint64_t)v13, &qword_1002927B8);
    v48 = &qword_1002927C0;
    v71 = v85;
    sub_1000110A4(v69, v85, &qword_1002927C0);
    v72 = v93;
    sub_10000B074(v71, v93, &qword_1002927C0);
    swift_storeEnumTagMultiPayload(v72, v92, 1);
    v73 = sub_1000F4B1C();
    v74 = sub_1000F4BB8();
    v52 = (uint64_t)v90;
    _ConditionalContent<>.init(storage:)(v72, v89, v70, v73, v74);
    v53 = v71;
  }
  sub_10000A020(v53, v48);
  v75 = v91;
  sub_10000B074(v52, v91, &qword_1002927D8);
  v76 = v95;
  sub_10000B074(v75, v95, &qword_1002927D8);
  v77 = v76 + *(int *)(sub_100006DF4(&qword_100292800) + 48);
  *(_QWORD *)v77 = 0;
  *(_BYTE *)(v77 + 8) = 1;
  sub_10000A020(v52, &qword_1002927D8);
  return sub_10000A020(v75, &qword_1002927D8);
}

uint64_t sub_1000F4844@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  char v18;
  unsigned int *v19;
  int v21;
  void (*v22)(_QWORD);
  uint64_t v23;
  _QWORD *v24;

  v24 = a1;
  v2 = type metadata accessor for Locale.Language(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for LayoutDirection(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v23 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v23 - v14);
  v16 = *(unsigned __int8 *)(v1 + 32);
  if (v16 == 2)
  {
    type metadata accessor for LabeledTextView(0);
    v17 = sub_1000D60B8(v5);
    v18 = Locale.Language.isRTL.getter(v17);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
    if ((v18 & 1) != 0)
      v19 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
    else
      v19 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v24, *v19, v6);
  }
  else
  {
    type metadata accessor for LabeledTextView(0);
    if ((v16 & 1) != 0)
    {
      sub_1000D5B14(v15);
      (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v10, v15, v6);
      v21 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
      if (v21 == enum case for LayoutDirection.leftToRight(_:))
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v13, enum case for LayoutDirection.rightToLeft(_:), v6);
      }
      else
      {
        v22 = *(void (**)(_QWORD))(v7 + 104);
        if (v21 == enum case for LayoutDirection.rightToLeft(_:))
        {
          ((void (*)(char *, _QWORD, uint64_t))v22)(v13, enum case for LayoutDirection.leftToRight(_:), v6);
        }
        else
        {
          v22(v13);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        }
      }
      (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 32))(v24, v13, v6);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v15, v6);
    }
    else
    {
      return sub_1000D5B14(v24);
    }
  }
}

uint64_t sub_1000F4A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranslateText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F4AE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TranslateText(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000F4B1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002927E0;
  if (!qword_1002927E0)
  {
    v1 = sub_1000070BC(&qword_1002927D0);
    sub_100007D5C(&qword_1002927E8, (uint64_t (*)(uint64_t))&type metadata accessor for ExpandingText, (uint64_t)&protocol conformance descriptor for ExpandingText);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002927E0);
  }
  return result;
}

unint64_t sub_1000F4BB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002927F0;
  if (!qword_1002927F0)
  {
    v1 = sub_1000070BC(&qword_1002927C0);
    sub_1000F4C3C();
    sub_100012334(&qword_10028F8E8, &qword_10028F8F0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002927F0);
  }
  return result;
}

unint64_t sub_1000F4C3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002927F8;
  if (!qword_1002927F8)
  {
    v1 = sub_1000070BC(&qword_1002927B8);
    sub_100007D5C(&qword_100290470, type metadata accessor for TranslateText, (uint64_t)&unk_1001F6398);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002927F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LabeledTextView.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000F4D14 + 4 * byte_1001EF2E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F4D48 + 4 * byte_1001EF2E0[v4]))();
}

uint64_t sub_1000F4D48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F4D50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F4D58);
  return result;
}

uint64_t sub_1000F4D64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F4D6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000F4D70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F4D78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LabeledTextView.Alignment()
{
  return &type metadata for LabeledTextView.Alignment;
}

unint64_t sub_1000F4D98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292808;
  if (!qword_100292808)
  {
    v1 = sub_1000070BC(&qword_100292778);
    sub_100012334(&qword_100292810, &qword_100292770, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292808);
  }
  return result;
}

unint64_t sub_1000F4E20()
{
  unint64_t result;

  result = qword_100292818;
  if (!qword_100292818)
  {
    result = swift_getWitnessTable(&unk_1001EF4D4, &type metadata for LabeledTextView.Alignment);
    atomic_store(result, (unint64_t *)&qword_100292818);
  }
  return result;
}

id sub_1000F4E90()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LandscapeErrorModel(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000F4F50()
{
  return type metadata accessor for LandscapeErrorModel(0);
}

uint64_t type metadata accessor for LandscapeErrorModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100292860;
  if (!qword_100292860)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LandscapeErrorModel);
  return result;
}

void sub_1000F4F94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000936A0();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = "\b";
    v4[3] = &unk_1001EF530;
    v4[4] = &unk_1001EF530;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

uint64_t sub_1000F5024@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for LandscapeErrorModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

char *sub_1000F5060()
{
  char *v0;
  char *v1;
  void *v2;
  char *v3;
  void *v4;
  void *v6;

  v0 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LanguageAwareTextView(0)), "init");
  sub_1000F512C(v0);
  v1 = v0;
  sub_100006DF4(&qword_100292988);
  UIViewRepresentableContext.coordinator.getter(&v6);
  v2 = v6;
  objc_msgSend(v1, "setDelegate:", v6);

  v3 = v1;
  UIViewRepresentableContext.coordinator.getter(&v6);
  v4 = v6;
  objc_msgSend(v3, "setTextDropDelegate:", v6);

  return v3;
}

id sub_1000F512C(char *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void **v31;
  void *v32;
  id v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v5 = __chkstk_darwin(v4);
  v43 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - v7;
  v9 = objc_msgSend(a1, "text");
  if (v9)
  {
    v10 = v9;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v42 = 0;
    v12 = 0;
  }
  v13 = *v2;
  v14 = v2[1];
  v15 = v2[2];
  v16 = v2[3];
  v46 = *v2;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  sub_100006DF4(&qword_100292980);
  Binding.wrappedValue.getter(&v44);
  v17 = v45;
  if (!v12)
  {
    if (!v45)
      goto LABEL_18;
    goto LABEL_12;
  }
  if (!v45)
  {
    v17 = v12;
LABEL_12:
    swift_bridgeObjectRelease(v17);
    goto LABEL_14;
  }
  if (v42 == v44 && v12 == v45)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v17);
    goto LABEL_18;
  }
  LODWORD(v42) = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v12, v44, v45, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v17);
  if ((v42 & 1) != 0)
    goto LABEL_18;
LABEL_14:
  v46 = v13;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  Binding.wrappedValue.getter(&v44);
  v19 = v45;
  if (v45)
  {
    v20 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v19).n128_u64[0];
  }
  else
  {
    v20 = 0;
  }
  objc_msgSend(a1, "setText:", v20, v18);

LABEL_18:
  v21 = v2[5];
  v22 = &a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey];
  v23 = *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey + 8];
  *(_QWORD *)v22 = v2[4];
  *((_QWORD *)v22 + 1) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v23);
  sub_1000FBD64();
  v24 = (int *)type metadata accessor for LanguageAwareEditor(0);
  v25 = (char *)v2 + v24[6];
  v26 = type metadata accessor for Locale(0);
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v8, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v8, 0, 1, v26);
  v28 = (uint64_t)&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale];
  swift_beginAccess(&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale], &v46, 0, 0);
  v29 = v43;
  sub_100082758(v28, v43);
  swift_beginAccess(v28, &v44, 33, 0);
  sub_1000F6D38((uint64_t)v8, v28);
  swift_endAccess(&v44);
  sub_1000FB024(v29);
  sub_1000A8C7C((uint64_t)v8);
  sub_1000A8C7C(v29);
  objc_msgSend(a1, "setFont:", *(uint64_t *)((char *)v2 + v24[9]));
  objc_msgSend(a1, "setReturnKeyType:", *(uint64_t *)((char *)v2 + v24[10]));
  objc_msgSend(a1, "setTextColor:", *(uint64_t *)((char *)v2 + v24[7]));
  v30 = *(void **)((char *)v2 + v24[8]);
  v31 = (void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor];
  swift_beginAccess(&a1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor], &v44, 1, 0);
  v32 = *v31;
  *v31 = v30;
  v33 = v30;

  PlaceholderTextView.updatePlaceholderProperties()();
  v34 = (uint64_t *)((char *)v2 + v24[17]);
  v35 = *v34;
  v36 = v34[1];
  v37 = (uint64_t *)&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_willResignFirstResponder];
  v38 = *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_willResignFirstResponder];
  v39 = *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_willResignFirstResponder + 8];
  *v37 = v35;
  v37[1] = v36;
  sub_100016244(v35, v36);
  sub_10002BA44(v38, v39);
  objc_msgSend(a1, "setEditable:", *((unsigned __int8 *)v2 + v24[11]));
  return objc_msgSend(a1, "setTag:", *(uint64_t *)((char *)v2 + v24[18]));
}

void sub_1000F54FC(uint64_t a1, char a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  int *v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  char v38;
  _BYTE v39[24];

  v6 = v5;
  v12 = (int *)type metadata accessor for LanguageAwareEditor(0);
  v13 = *(unsigned __int8 *)(v6 + v12[13]);
  v14 = *(double *)(v6 + v12[12]);
  v15 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache.Condition();
  v16 = swift_allocObject(v15, 73, 7);
  *(_BYTE *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = a1;
  *(_BYTE *)(v16 + 32) = a2 & 1;
  *(double *)(v16 + 40) = *(double *)&a3;
  v38 = a4;
  *(_BYTE *)(v16 + 48) = a4 & 1;
  *(_QWORD *)(v16 + 56) = a5;
  *(double *)(v16 + 64) = v14;
  *(_BYTE *)(v16 + 72) = 0;
  v17 = (_QWORD *)(*(_QWORD *)(v6 + v12[19]) + 16);
  swift_beginAccess(v17, v39, 0, 0);
  v18 = *v17;
  v19 = *(_QWORD *)(*v17 + 16);
  v20 = a5;
  if (v19)
  {
    swift_bridgeObjectRetain(v18);
    sub_1001A884C(v16);
    v22 = v21;
    swift_bridgeObjectRelease(v18);
    if ((v22 & 1) != 0)
    {
      v23 = *v17;
      if (*(_QWORD *)(*v17 + 16))
      {
        swift_retain(v16);
        swift_bridgeObjectRetain(v23);
        sub_1001A884C(v16);
        v25 = v24;
        swift_release(v16);
        swift_bridgeObjectRelease(v23);
        if ((v25 & 1) == 0)
        {
LABEL_23:
          __break(1u);
LABEL_24:
          swift_release(v16);
          swift_bridgeObjectRelease(v23);
          __break(1u);
          return;
        }
        v26 = *v17;
        if (!*(_QWORD *)(*v17 + 16)
          || (swift_bridgeObjectRetain(*v17),
              sub_1001A884C(v16),
              v28 = v27,
              swift_bridgeObjectRelease(v26),
              (v28 & 1) == 0))
        {
          swift_release(v16);
          return;
        }
        v23 = *v17;
        if (*(_QWORD *)(*v17 + 16))
        {
          swift_retain(v16);
          swift_bridgeObjectRetain(v23);
          sub_1001A884C(v16);
          if ((v29 & 1) != 0)
          {
            swift_release_n(v16, 2);
            swift_bridgeObjectRelease(v23);
            return;
          }
          goto LABEL_24;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_23;
    }
  }
  if (v13)
  {
    v30 = sub_1000F6DC0(a1, v14);
    v32 = v31;
    LOBYTE(v13) = v33 & 1;
  }
  else
  {
    v34 = *(double *)&a1;
    v35 = 0.0;
    if ((a2 & 1) != 0)
      v34 = 0.0;
    if ((v38 & 1) == 0)
      v35 = *(double *)&a3;
    objc_msgSend(v20, "systemLayoutSizeFittingSize:", v34, v35);
    if (v14 > v36)
      v36 = v14;
    v30 = *(_QWORD *)&v36;
    v32 = v37;
  }
  sub_1000FC764(v30, v32, v13, v16);
  swift_release(v16);
}

uint64_t sub_1000F58C0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *);
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  __int128 v23;

  v3 = type metadata accessor for LanguageAwareEditor(0);
  __chkstk_darwin(v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LanguageAwareTextView(0);
  result = swift_dynamicCastClass(a1, v6);
  if (result)
  {
    v8 = (void *)result;
    v9 = v1 + OBJC_IVAR____TtCV17SequoiaTranslator19LanguageAwareEditor11Coordinator_languageAwareEditor;
    v10 = v1
        + OBJC_IVAR____TtCV17SequoiaTranslator19LanguageAwareEditor11Coordinator_languageAwareEditor
        + *(int *)(v3 + 56);
    v11 = *(void (**)(void *))v10;
    if (*(_QWORD *)v10)
    {
      v12 = *(_QWORD *)(v10 + 8);
      v13 = a1;
      sub_100016244((uint64_t)v11, v12);
      v11(v8);
      sub_10002BA44((uint64_t)v11, v12);
    }
    else
    {
      v14 = a1;
    }
    sub_1000F6CB8(v9, (uint64_t)v5);
    v15 = objc_msgSend(v8, "text");
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    v20 = *((_QWORD *)v5 + 1);
    v22[2] = *(_QWORD *)v5;
    v22[3] = v20;
    v23 = *((_OWORD *)v5 + 1);
    v22[0] = v17;
    v22[1] = v19;
    v21 = sub_100006DF4(&qword_100292980);
    Binding.wrappedValue.setter(v22, v21);

    return sub_1000F6CFC((uint64_t)v5);
  }
  return result;
}

id sub_1000F5C90()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LanguageAwareEditor.Coordinator(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000F5CD4()
{
  return type metadata accessor for LanguageAwareEditor.Coordinator(0);
}

uint64_t type metadata accessor for LanguageAwareEditor.Coordinator(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_100292898, (uint64_t)&nominal type descriptor for LanguageAwareEditor.Coordinator);
}

uint64_t sub_1000F5CF0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for LanguageAwareEditor(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LanguageAwareEditor(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100292900, (uint64_t)&nominal type descriptor for LanguageAwareEditor);
}

_QWORD *sub_1000F5D70(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    a1[1] = v9;
    a1[2] = v8;
    v11 = a2[3];
    v10 = a2[4];
    a1[3] = v11;
    a1[4] = v10;
    v12 = a2[5];
    v13 = a3[6];
    v47 = (char *)a1 + v13;
    v14 = (char *)a2 + v13;
    a1[5] = v12;
    v15 = type metadata accessor for Locale(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain(v4);
    swift_retain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    v16(v47, v14, v15);
    v17 = a3[7];
    v18 = a3[8];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)v7 + v17) = v19;
    v20 = *(void **)((char *)a2 + v18);
    *(_QWORD *)((char *)v7 + v18) = v20;
    v21 = a3[9];
    v22 = a3[10];
    v23 = *(void **)((char *)a2 + v21);
    *(_QWORD *)((char *)v7 + v21) = v23;
    *(_QWORD *)((char *)v7 + v22) = *(_QWORD *)((char *)a2 + v22);
    v24 = a3[12];
    *((_BYTE *)v7 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(_QWORD *)((char *)v7 + v24) = *(_QWORD *)((char *)a2 + v24);
    v25 = a3[14];
    *((_BYTE *)v7 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    v26 = (_QWORD *)((char *)v7 + v25);
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)((char *)a2 + v25);
    v29 = v19;
    v30 = v20;
    v31 = v23;
    if (v28)
    {
      v32 = *((_QWORD *)v27 + 1);
      *v26 = v28;
      v26[1] = v32;
      swift_retain(v32);
    }
    else
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
    }
    v33 = a3[15];
    v34 = (_QWORD *)((char *)v7 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    if (*v35)
    {
      v36 = v35[1];
      *v34 = *v35;
      v34[1] = v36;
      swift_retain(v36);
    }
    else
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
    }
    v37 = a3[16];
    v38 = (_QWORD *)((char *)v7 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    if (*v39)
    {
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      swift_retain(v40);
    }
    else
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
    }
    v41 = a3[17];
    v42 = (_QWORD *)((char *)v7 + v41);
    v43 = (_QWORD *)((char *)a2 + v41);
    if (*v43)
    {
      v44 = v43[1];
      *v42 = *v43;
      v42[1] = v44;
      swift_retain(v44);
    }
    else
    {
      *(_OWORD *)v42 = *(_OWORD *)v43;
    }
    v45 = a3[19];
    *(_QWORD *)((char *)v7 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
    v4 = *(_QWORD *)((char *)a2 + v45);
    *(_QWORD *)((char *)v7 + v45) = v4;
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_1000F5F70(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  v6 = (_QWORD *)((char *)a1 + a2[14]);
  if (*v6)
    swift_release(v6[1]);
  v7 = (_QWORD *)((char *)a1 + a2[15]);
  if (*v7)
    swift_release(v7[1]);
  v8 = (_QWORD *)((char *)a1 + a2[16]);
  if (*v8)
    swift_release(v8[1]);
  v9 = (_QWORD *)((char *)a1 + a2[17]);
  if (*v9)
    swift_release(v9[1]);
  return swift_release(*(_QWORD *)((char *)a1 + a2[19]));
}

_QWORD *sub_1000F6068(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = a2[5];
  v10 = a3[6];
  v45 = (char *)a1 + v10;
  v11 = (char *)a2 + v10;
  a1[4] = a2[4];
  a1[5] = v9;
  v12 = type metadata accessor for Locale(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_retain(v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v45, v11, v12);
  v14 = a3[7];
  v15 = a3[8];
  v16 = *(void **)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v16;
  v17 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  v18 = a3[9];
  v19 = a3[10];
  v20 = *(void **)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v20;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v21 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  v22 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)((char *)a2 + v22);
  v26 = v16;
  v27 = v17;
  v28 = v20;
  if (v25)
  {
    v29 = *((_QWORD *)v24 + 1);
    *v23 = v25;
    v23[1] = v29;
    swift_retain(v29);
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  v30 = a3[15];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  if (*v32)
  {
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    swift_retain(v33);
  }
  else
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  v34 = a3[16];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  if (*v36)
  {
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    swift_retain(v37);
  }
  else
  {
    *(_OWORD *)v35 = *(_OWORD *)v36;
  }
  v38 = a3[17];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  if (*v40)
  {
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    swift_retain(v41);
  }
  else
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
  }
  v42 = a3[19];
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  v43 = *(_QWORD *)((char *)a2 + v42);
  *(_QWORD *)((char *)a1 + v42) = v43;
  swift_retain(v43);
  return a1;
}

_QWORD *sub_1000F623C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[2] = a2[2];
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[4] = a2[4];
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Locale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[7];
  v19 = *(void **)((char *)a2 + v18);
  v20 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = v19;
  v21 = v19;

  v22 = a3[8];
  v23 = *(void **)((char *)a2 + v22);
  v24 = *(void **)((char *)a1 + v22);
  *(_QWORD *)((char *)a1 + v22) = v23;
  v25 = v23;

  v26 = a3[9];
  v27 = *(void **)((char *)a2 + v26);
  v28 = *(void **)((char *)a1 + v26);
  *(_QWORD *)((char *)a1 + v26) = v27;
  v29 = v27;

  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v30 = a3[14];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a1 + v30);
  v34 = *(_QWORD *)((char *)a2 + v30);
  if (v33)
  {
    if (v34)
    {
      v35 = *((_QWORD *)v32 + 1);
      v36 = v31[1];
      *v31 = v34;
      v31[1] = v35;
      swift_retain(v35);
      swift_release(v36);
      goto LABEL_8;
    }
    swift_release(v31[1]);
  }
  else if (v34)
  {
    v37 = *((_QWORD *)v32 + 1);
    *v31 = v34;
    v31[1] = v37;
    swift_retain(v37);
    goto LABEL_8;
  }
  *(_OWORD *)v31 = *(_OWORD *)v32;
LABEL_8:
  v38 = a3[15];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (char *)a2 + v38;
  v41 = *(_QWORD *)((char *)a1 + v38);
  v42 = *(_QWORD *)((char *)a2 + v38);
  if (v41)
  {
    if (v42)
    {
      v43 = *((_QWORD *)v40 + 1);
      v44 = v39[1];
      *v39 = v42;
      v39[1] = v43;
      swift_retain(v43);
      swift_release(v44);
      goto LABEL_15;
    }
    swift_release(v39[1]);
  }
  else if (v42)
  {
    v45 = *((_QWORD *)v40 + 1);
    *v39 = v42;
    v39[1] = v45;
    swift_retain(v45);
    goto LABEL_15;
  }
  *(_OWORD *)v39 = *(_OWORD *)v40;
LABEL_15:
  v46 = a3[16];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)((char *)a1 + v46);
  v50 = *(_QWORD *)((char *)a2 + v46);
  if (v49)
  {
    if (v50)
    {
      v51 = *((_QWORD *)v48 + 1);
      v52 = v47[1];
      *v47 = v50;
      v47[1] = v51;
      swift_retain(v51);
      swift_release(v52);
      goto LABEL_22;
    }
    swift_release(v47[1]);
  }
  else if (v50)
  {
    v53 = *((_QWORD *)v48 + 1);
    *v47 = v50;
    v47[1] = v53;
    swift_retain(v53);
    goto LABEL_22;
  }
  *(_OWORD *)v47 = *(_OWORD *)v48;
LABEL_22:
  v54 = a3[17];
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (char *)a2 + v54;
  v57 = *(_QWORD *)((char *)a1 + v54);
  v58 = *(_QWORD *)((char *)a2 + v54);
  if (!v57)
  {
    if (v58)
    {
      v61 = *((_QWORD *)v56 + 1);
      *v55 = v58;
      v55[1] = v61;
      swift_retain(v61);
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)v55 = *(_OWORD *)v56;
    goto LABEL_29;
  }
  if (!v58)
  {
    swift_release(v55[1]);
    goto LABEL_28;
  }
  v59 = *((_QWORD *)v56 + 1);
  v60 = v55[1];
  *v55 = v58;
  v55[1] = v59;
  swift_retain(v59);
  swift_release(v60);
LABEL_29:
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  v62 = a3[19];
  v63 = *(_QWORD *)((char *)a2 + v62);
  v64 = *(_QWORD *)((char *)a1 + v62);
  *(_QWORD *)((char *)a1 + v62) = v63;
  swift_retain(v63);
  swift_release(v64);
  return a1;
}

_OWORD *sub_1000F6520(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = *v16;
  if (*v16)
  {
    v18 = v16[1];
    *v15 = v17;
    v15[1] = v18;
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  v19 = a3[15];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = *v21;
  if (*v21)
  {
    v23 = v21[1];
    *v20 = v22;
    v20[1] = v23;
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  v24 = a3[16];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = *v26;
  if (*v26)
  {
    v28 = v26[1];
    *v25 = v27;
    v25[1] = v28;
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
  }
  v29 = a3[17];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (uint64_t *)((char *)a2 + v29);
  v32 = *v31;
  if (*v31)
  {
    v33 = v31[1];
    *v30 = v32;
    v30[1] = v33;
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  v34 = a3[19];
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  *(_QWORD *)((char *)a1 + v34) = *(_QWORD *)((char *)a2 + v34);
  return a1;
}

_QWORD *sub_1000F668C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Locale(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  v17 = *(void **)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);

  v18 = a3[8];
  v19 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);

  v20 = a3[9];
  v21 = *(void **)((char *)a1 + v20);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);

  v22 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
  v23 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  v24 = a3[14];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)((char *)a1 + v24);
  v28 = *(_QWORD *)((char *)a2 + v24);
  if (v27)
  {
    if (v28)
    {
      v29 = *((_QWORD *)v26 + 1);
      v30 = v25[1];
      *v25 = v28;
      v25[1] = v29;
      swift_release(v30);
      goto LABEL_8;
    }
    swift_release(v25[1]);
  }
  else if (v28)
  {
    v31 = *((_QWORD *)v26 + 1);
    *v25 = v28;
    v25[1] = v31;
    goto LABEL_8;
  }
  *(_OWORD *)v25 = *(_OWORD *)v26;
LABEL_8:
  v32 = a3[15];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a1 + v32);
  v36 = *(_QWORD *)((char *)a2 + v32);
  if (v35)
  {
    if (v36)
    {
      v37 = *((_QWORD *)v34 + 1);
      v38 = v33[1];
      *v33 = v36;
      v33[1] = v37;
      swift_release(v38);
      goto LABEL_15;
    }
    swift_release(v33[1]);
  }
  else if (v36)
  {
    v39 = *((_QWORD *)v34 + 1);
    *v33 = v36;
    v33[1] = v39;
    goto LABEL_15;
  }
  *(_OWORD *)v33 = *(_OWORD *)v34;
LABEL_15:
  v40 = a3[16];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (char *)a2 + v40;
  v43 = *(_QWORD *)((char *)a1 + v40);
  v44 = *(_QWORD *)((char *)a2 + v40);
  if (v43)
  {
    if (v44)
    {
      v45 = *((_QWORD *)v42 + 1);
      v46 = v41[1];
      *v41 = v44;
      v41[1] = v45;
      swift_release(v46);
      goto LABEL_22;
    }
    swift_release(v41[1]);
  }
  else if (v44)
  {
    v47 = *((_QWORD *)v42 + 1);
    *v41 = v44;
    v41[1] = v47;
    goto LABEL_22;
  }
  *(_OWORD *)v41 = *(_OWORD *)v42;
LABEL_22:
  v48 = a3[17];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (char *)a2 + v48;
  v51 = *(_QWORD *)((char *)a1 + v48);
  v52 = *(_QWORD *)((char *)a2 + v48);
  if (!v51)
  {
    if (v52)
    {
      v55 = *((_QWORD *)v50 + 1);
      *v49 = v52;
      v49[1] = v55;
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)v49 = *(_OWORD *)v50;
    goto LABEL_29;
  }
  if (!v52)
  {
    swift_release(v49[1]);
    goto LABEL_28;
  }
  v53 = *((_QWORD *)v50 + 1);
  v54 = v49[1];
  *v49 = v52;
  v49[1] = v53;
  swift_release(v54);
LABEL_29:
  v56 = a3[19];
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  v57 = *(_QWORD *)((char *)a1 + v56);
  *(_QWORD *)((char *)a1 + v56) = *(_QWORD *)((char *)a2 + v56);
  swift_release(v57);
  return a1;
}

uint64_t sub_1000F68F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F68FC);
}

uint64_t sub_1000F68FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Locale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1000F6978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F6984);
}

uint64_t sub_1000F6984(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Locale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000F69F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[16];

  v4[0] = " ";
  v4[1] = &unk_1001EF5C0;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_1001EF5D8;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = &unk_1001EF5D8;
    v4[10] = &unk_1001EF5C0;
    v4[11] = &unk_1001EF5C0;
    v4[12] = &unk_1001EF5C0;
    v4[13] = &unk_1001EF5C0;
    v4[14] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[15] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 16, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000F6AC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  id v7;
  id v8;
  uint64_t result;
  objc_super v10;

  __chkstk_darwin(a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F6CB8(v2, (uint64_t)v5);
  v6 = (objc_class *)type metadata accessor for LanguageAwareEditor.Coordinator(0);
  v7 = objc_allocWithZone(v6);
  sub_1000F6CB8((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtCV17SequoiaTranslator19LanguageAwareEditor11Coordinator_languageAwareEditor);
  v10.receiver = v7;
  v10.super_class = v6;
  v8 = objc_msgSendSuper2(&v10, "init");
  result = sub_1000F6CFC((uint64_t)v5);
  *a2 = v8;
  return result;
}

void sub_1000F6B70(uint64_t a1, char a2, uint64_t a3, char a4, void *a5)
{
  sub_1000F54FC(a1, a2 & 1, a3, a4 & 1, a5);
}

uint64_t sub_1000F6BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000F6D80((unint64_t *)&unk_100292990, (uint64_t)&unk_1001EF640);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000F6C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000F6D80((unint64_t *)&unk_100292990, (uint64_t)&unk_1001EF640);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000F6C60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000F6D80((unint64_t *)&unk_100292990, (uint64_t)&unk_1001EF640);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_1000F6C94()
{
  return sub_1000F6D80((unint64_t *)&unk_100292970, (uint64_t)&unk_1001EF5F0);
}

uint64_t sub_1000F6CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LanguageAwareEditor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F6CFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LanguageAwareEditor(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F6D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F6D80(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LanguageAwareEditor(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

double sub_1000F6DC4(unint64_t a1, char a2, uint64_t a3, char a4, id a5, double a6)
{
  int v9;
  double v10;
  double v11;
  double result;
  uint64_t v13;
  double v14;

  v9 = a2 & 1;
  v10 = INFINITY;
  if ((a2 & 1) != 0)
    v11 = INFINITY;
  else
    v11 = *(double *)&a1;
  if ((a4 & 1) == 0)
    v10 = *(double *)&a3;
  objc_msgSend(a5, "systemLayoutSizeFittingSize:", v11, v10);
  if (!v9)
  {
    v13 = (a1 >> 52) & 0x7FF;
    if (v13)
    {
      v14 = result < *(double *)&a1 ? *(double *)&a1 : result;
      if (v13 != 2047)
        result = v14;
    }
  }
  if (result < a6)
    return a6;
  return result;
}

char *sub_1000F6E88(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  void *v18;
  char *v19;
  void *v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v25 = a1;
  v23 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v23);
  v2 = (char *)v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LayoutDirection(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v22 - v8;
  v10 = type metadata accessor for EnvironmentValues(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LanguageAwareTextView(0)), "init");
  v22[1] = sub_100006DF4((uint64_t *)&unk_100292AD0);
  v15 = UIViewRepresentableContext.environment.getter();
  EnvironmentValues.layoutDirection.getter(v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for LayoutDirection.leftToRight(_:), v3);
  LOBYTE(v13) = static LayoutDirection.== infix(_:_:)(v9, v7);
  v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  v17 = ((uint64_t (*)(char *, uint64_t))v16)(v9, v3);
  UIView.traitOverrides.getter(v17);
  UIMutableTraits.layoutDirection.setter((v13 & 1) == 0, v23, &protocol witness table for UITraitOverrides);
  UIView.traitOverrides.setter(v2);
  *(_QWORD *)&v14[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightDelegate + 8] = *(_QWORD *)(v24 + *(int *)(type metadata accessor for LanguageAwareText(0) + 52) + 8);
  swift_unknownObjectWeakAssign();
  UIViewRepresentableContext.coordinator.getter(&v26);
  v18 = v26;
  *(_QWORD *)&v14[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_languageAwareTextViewDelegate + 8] = &off_10026ACC8;
  swift_unknownObjectWeakAssign();

  sub_1000F7134(v14);
  objc_msgSend(v14, "setEditable:", 0);
  v19 = v14;
  UIViewRepresentableContext.coordinator.getter(&v26);
  v20 = v26;
  objc_msgSend(v19, "setDelegate:", v26);

  return v19;
}

void sub_1000F7134(char *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  int v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void **v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  BOOL v45;
  char **v46;
  id v47;
  id v48;
  int *v49;
  uint64_t v50;
  char v51[24];
  _BYTE v52[24];
  char v53[24];

  v2 = (uint64_t)v1;
  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v48 - v8;
  v10 = (int *)type metadata accessor for LanguageAwareText(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  if (*v1)
    v14 = *v1;
  else
    v14 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
  if (*(_BYTE *)(v2 + v10[8]) == 1)
  {
    v15 = *(_QWORD *)(v2 + v10[9]);
    v16 = v13;
    v17 = sub_10013AC30(v15);

    v14 = v17;
  }
  else
  {
    v18 = v13;
  }
  objc_msgSend(a1, "setAttributedText:", v14);

  objc_msgSend(a1, "setFont:", *(_QWORD *)(v2 + v10[7]));
  v19 = *(unsigned __int8 *)(v2 + v10[20]);
  sub_1000F93F8(v2, (uint64_t)v12);
  if (v19 == 1)
    v20 = v12[v10[8]] ^ 1;
  else
    v20 = 0;
  sub_1000F943C((uint64_t)v12);
  objc_msgSend(a1, "setSelectable:", v20 & 1);
  v21 = *(_QWORD *)(v2 + 16);
  v22 = &a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey];
  v23 = *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey + 8];
  *(_QWORD *)v22 = *(_QWORD *)(v2 + 8);
  *((_QWORD *)v22 + 1) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v23);
  sub_1000FBD64();
  sub_100082758(v2 + v10[6], (uint64_t)v9);
  v24 = (uint64_t)&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale];
  swift_beginAccess(&a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale], v53, 0, 0);
  sub_100082758(v24, (uint64_t)v7);
  swift_beginAccess(v24, v52, 33, 0);
  sub_1000F6D38((uint64_t)v9, v24);
  swift_endAccess(v52);
  sub_1000FB024((uint64_t)v7);
  sub_10000A020((uint64_t)v9, (uint64_t *)&unk_10028FE50);
  sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
  v25 = *(void **)(v2 + v10[9]);
  if (v25)
  {
    v26 = (void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor];
    swift_beginAccess(&a1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor], v51, 1, 0);
    v27 = *v26;
    *v26 = v25;
    v28 = v25;

    PlaceholderTextView.updatePlaceholderProperties()();
  }
  v29 = *(void **)(v2 + v10[14]);
  v30 = OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightColor;
  v31 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightColor];
  *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightColor] = v29;
  v48 = v29;

  v32 = (uint64_t *)&a1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights];
  swift_beginAccess(&a1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlights], v52, 0, 0);
  v33 = *v32;
  v34 = (unint64_t)*v32 >> 62;
  v49 = v10;
  v50 = v2;
  if (v34)
  {
    if (v33 < 0)
      v42 = v33;
    else
      v42 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v33, 2);
    v35 = _CocoaArrayWrapper.endIndex.getter(v42);
    if (!v35)
      goto LABEL_27;
  }
  else
  {
    v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v33, 2);
    if (!v35)
      goto LABEL_27;
  }
  if (v35 < 1)
  {
    __break(1u);
    return;
  }
  v36 = 0;
  do
  {
    if ((v33 & 0xC000000000000001) != 0)
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v33);
    else
      v40 = *(id *)(v33 + 8 * v36 + 32);
    v41 = v40;
    v38 = *(void **)&a1[v30];
    if (v38)
    {
      v37 = *(void **)&a1[v30];
    }
    else
    {
      sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
      v37 = (void *)static UIColor.dictionaryHighlightColor.getter();
      v38 = 0;
    }
    ++v36;
    v39 = v38;
    objc_msgSend(v41, "setBackgroundColor:", v37);

  }
  while (v35 != v36);
LABEL_27:
  swift_bridgeObjectRelease_n(v33, 2);

  v44 = v49;
  v43 = v50;
  a1[OBJC_IVAR____TtC17SequoiaTranslator17HighlightTextView_highlightAddsBlendMode] = *(_BYTE *)(v50 + v49[15]);
  sub_1000D2090();
  HighlightTextView.setHighlights(toRange:)(*(__C::_NSRange_optional *)(v43 + v44[12]));
  v45 = sub_1000F7A7C();
  a1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_hasTapGestureRecognizer] = v45;
  if (v45)
    v46 = &selRef_addGestureRecognizer_;
  else
    v46 = &selRef_removeGestureRecognizer_;
  v47 = sub_1000FB2FC();
  objc_msgSend(a1, *v46, v47);

}

id sub_1000F75EC(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v21;

  v21 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v21);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LayoutDirection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4((uint64_t *)&unk_100292AD0);
  v16 = UIViewRepresentableContext.environment.getter(v15);
  EnvironmentValues.layoutDirection.getter(v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for LayoutDirection.leftToRight(_:), v4);
  v17 = static LayoutDirection.== infix(_:_:)(v10, v8);
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v19 = ((uint64_t (*)(char *, uint64_t))v18)(v10, v4);
  UIView.traitOverrides.getter(v19);
  UIMutableTraits.layoutDirection.setter((v17 & 1) == 0, v21, &protocol witness table for UITraitOverrides);
  UIView.traitOverrides.setter(v3);
  sub_1000F7134(a1);
  return objc_msgSend(a1, "layoutIfNeeded");
}

void sub_1000F77C8(unint64_t a1, char a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  int *v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  char v39;
  _BYTE v40[24];

  v6 = v5;
  v12 = (int *)type metadata accessor for LanguageAwareText(0);
  v13 = *(unsigned __int8 *)(v6 + v12[11]);
  v14 = *(double *)(v6 + v12[10]);
  v15 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache.Condition();
  v16 = swift_allocObject(v15, 73, 7);
  *(_BYTE *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = a1;
  *(_BYTE *)(v16 + 32) = a2 & 1;
  *(double *)(v16 + 40) = *(double *)&a3;
  v39 = a4;
  *(_BYTE *)(v16 + 48) = a4 & 1;
  *(_QWORD *)(v16 + 56) = a5;
  *(double *)(v16 + 64) = v14;
  *(_BYTE *)(v16 + 72) = 0;
  v17 = (_QWORD *)(*(_QWORD *)(v6 + v12[22]) + 16);
  swift_beginAccess(v17, v40, 0, 0);
  v18 = *v17;
  v19 = *(_QWORD *)(*v17 + 16);
  v20 = a5;
  if (v19)
  {
    swift_bridgeObjectRetain(v18);
    sub_1001A884C(v16);
    v22 = v21;
    swift_bridgeObjectRelease(v18);
    if ((v22 & 1) != 0)
    {
      v23 = *v17;
      if (*(_QWORD *)(*v17 + 16))
      {
        swift_retain(v16);
        swift_bridgeObjectRetain(v23);
        sub_1001A884C(v16);
        v25 = v24;
        swift_release(v16);
        swift_bridgeObjectRelease(v23);
        if ((v25 & 1) == 0)
        {
LABEL_23:
          __break(1u);
LABEL_24:
          swift_release(v16);
          swift_bridgeObjectRelease(v23);
          __break(1u);
          return;
        }
        v26 = *v17;
        if (!*(_QWORD *)(*v17 + 16)
          || (swift_bridgeObjectRetain(*v17),
              sub_1001A884C(v16),
              v28 = v27,
              swift_bridgeObjectRelease(v26),
              (v28 & 1) == 0))
        {
          swift_release(v16);
          return;
        }
        v23 = *v17;
        if (*(_QWORD *)(*v17 + 16))
        {
          swift_retain(v16);
          swift_bridgeObjectRetain(v23);
          sub_1001A884C(v16);
          if ((v29 & 1) != 0)
          {
            swift_release_n(v16, 2);
            swift_bridgeObjectRelease(v23);
            return;
          }
          goto LABEL_24;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_23;
    }
  }
  if (v13)
  {
    sub_1000F6DC4(a1, a2 & 1, a3, v39 & 1, v20, v14);
    v31 = v30;
    v33 = v32;
    LOBYTE(v13) = v34 & 1;
  }
  else
  {
    v35 = *(double *)&a1;
    v36 = 0.0;
    if ((a2 & 1) != 0)
      v35 = 0.0;
    if ((v39 & 1) == 0)
      v36 = *(double *)&a3;
    objc_msgSend(v20, "systemLayoutSizeFittingSize:", v35, v36);
    if (v14 > v37)
      v37 = v14;
    v31 = *(_QWORD *)&v37;
    v33 = v38;
  }
  sub_1000FC764(v31, v33, v13, v16);
  swift_release(v16);
}

BOOL sub_1000F7A7C()
{
  id *v0;
  uint64_t v1;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for LanguageAwareText(0);
  if (*(id *)((char *)v0 + *(int *)(v1 + 76)))
    return 1;
  if (!*(id *)((char *)v0 + *(int *)(v1 + 72)))
    return 0;
  if (!*v0)
    return 1;
  v3 = objc_msgSend(*v0, "string");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  swift_bridgeObjectRelease(v6);
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  return v7 == 0;
}

uint64_t sub_1000F7BA0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(_QWORD, char *, __n128);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;

  v6 = sub_100006DF4(&qword_10028CD90);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + OBJC_IVAR____TtCV17SequoiaTranslator17LanguageAwareText11Coordinator_languageAwareText;
  result = type metadata accessor for LanguageAwareText(0);
  v11 = v9 + *(int *)(result + 84);
  v12 = *(void (**)(_QWORD, char *, __n128))v11;
  if (*(_QWORD *)v11)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = type metadata accessor for DisambiguationLinkInfo(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v8, a2, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
    v16 = swift_retain(v13);
    v12(a3 & 1, v8, v16);
    sub_10002BA44((uint64_t)v12, v13);
    return sub_10000A020((uint64_t)v8, &qword_10028CD90);
  }
  return result;
}

void sub_1000F7CBC(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, uint64_t))
{
  id v10;
  id v11;
  id v12;

  v10 = a3;
  v11 = a4;
  swift_unknownObjectRetain(a5);
  v12 = a1;
  a6(v11, a5);

  swift_unknownObjectRelease(a5);
}

void sub_1000F7D44(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, __n128);
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;

  v5 = v2 + OBJC_IVAR____TtCV17SequoiaTranslator17LanguageAwareText11Coordinator_languageAwareText;
  v6 = type metadata accessor for LanguageAwareText(0);
  v7 = *(void **)(v5 + *(int *)(v6 + 76));
  if (v7)
  {
    v26 = v7;
    if ((sub_1000105E8(a2) & 1) != 0)
    {
      if (qword_10028A478 != -1)
        swift_once(&qword_10028A478, sub_100121100);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA470);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully handled gesture recognizer with ASRAlternativesBehaviour object", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

      goto LABEL_19;
    }
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10000F66C(v13, (uint64_t)qword_1002AA470);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Tap on text view wasn't handled by ASRAlternativesBehaviour object", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  v18 = v5 + *(int *)(v6 + 72);
  v19 = *(void (**)(uint64_t, void *, __n128))v18;
  if (*(_QWORD *)v18)
  {
    v20 = *(_QWORD *)(v18 + 8);
    v21 = swift_retain(v20);
    v19(a1, a2, v21);
    sub_10002BA44((uint64_t)v19, v20);
    return;
  }
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10000F66C(v22, (uint64_t)qword_1002AA470);
  v26 = Logger.logObject.getter(v23);
  v24 = static os_log_type_t.info.getter(v26);
  if (os_log_type_enabled(v26, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v24, "There's no handler for emptyTapGestureHandler, so not doing anything with tap gesture recognizer", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }
LABEL_19:

}

id sub_1000F8040()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LanguageAwareText.Coordinator(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000F8084()
{
  return type metadata accessor for LanguageAwareText.Coordinator(0);
}

uint64_t type metadata accessor for LanguageAwareText.Coordinator(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_1002929D0, (uint64_t)&nominal type descriptor for LanguageAwareText.Coordinator);
}

uint64_t sub_1000F80A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for LanguageAwareText(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LanguageAwareText(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_100292A40, (uint64_t)&nominal type descriptor for LanguageAwareText);
}

char *sub_1000F8120(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v57;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    v9 = a3[6];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Locale(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    v15 = v4;
    v16 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12, v16))
    {
      v17 = sub_100006DF4((uint64_t *)&unk_10028FE50);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[7];
    v19 = a3[8];
    v20 = *(char **)((char *)a2 + v18);
    *(_QWORD *)&v7[v18] = v20;
    v7[v19] = *((_BYTE *)a2 + v19);
    v21 = a3[9];
    v22 = a3[10];
    v23 = *(char **)((char *)a2 + v21);
    *(_QWORD *)&v7[v21] = v23;
    *(_QWORD *)&v7[v22] = *(char **)((char *)a2 + v22);
    v24 = a3[12];
    v7[a3[11]] = *((_BYTE *)a2 + a3[11]);
    v25 = &v7[v24];
    v26 = (uint64_t)a2 + v24;
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v25[16] = *(_BYTE *)(v26 + 16);
    v27 = a3[13];
    v28 = a3[14];
    v57 = *(_OWORD *)((char *)a2 + v27);
    *(_OWORD *)&v7[v27] = v57;
    v29 = *(char **)((char *)a2 + v28);
    *(_QWORD *)&v7[v28] = v29;
    v30 = a3[16];
    v7[a3[15]] = *((_BYTE *)a2 + a3[15]);
    v31 = &v7[v30];
    v32 = (uint64_t)a2 + v30;
    v33 = *(uint64_t *)((char *)a2 + v30);
    v34 = v20;
    v35 = v23;
    swift_unknownObjectRetain(v57);
    v36 = v29;
    if (v33)
    {
      v37 = *(_QWORD *)(v32 + 8);
      *(_QWORD *)v31 = v33;
      *((_QWORD *)v31 + 1) = v37;
      swift_retain(v37);
    }
    else
    {
      *(_OWORD *)v31 = *(_OWORD *)v32;
    }
    v38 = a3[17];
    v39 = &v7[v38];
    v40 = (char **)((char *)a2 + v38);
    if (*v40)
    {
      v41 = v40[1];
      *(_QWORD *)v39 = *v40;
      *((_QWORD *)v39 + 1) = v41;
      swift_retain(v41);
    }
    else
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    v42 = a3[18];
    v43 = &v7[v42];
    v44 = (char **)((char *)a2 + v42);
    if (*v44)
    {
      v45 = v44[1];
      *(_QWORD *)v43 = *v44;
      *((_QWORD *)v43 + 1) = v45;
      swift_retain(v45);
    }
    else
    {
      *(_OWORD *)v43 = *(_OWORD *)v44;
    }
    v46 = a3[19];
    v47 = a3[20];
    v48 = *(char **)((char *)a2 + v46);
    *(_QWORD *)&v7[v46] = v48;
    v7[v47] = *((_BYTE *)a2 + v47);
    v49 = a3[21];
    v50 = &v7[v49];
    v51 = (uint64_t)a2 + v49;
    v52 = *(uint64_t *)((char *)a2 + v49);
    v53 = v48;
    if (v52)
    {
      v54 = *(_QWORD *)(v51 + 8);
      *(_QWORD *)v50 = v52;
      *((_QWORD *)v50 + 1) = v54;
      swift_retain(v54);
    }
    else
    {
      *(_OWORD *)v50 = *(_OWORD *)v51;
    }
    v55 = a3[22];
    v4 = *(char **)((char *)a2 + v55);
    *(_QWORD *)&v7[v55] = v4;
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_1000F8390(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[13]));
  v7 = (_QWORD *)(a1 + a2[16]);
  if (*v7)
    swift_release(v7[1]);
  v8 = (_QWORD *)(a1 + a2[17]);
  if (*v8)
    swift_release(v8[1]);
  v9 = (_QWORD *)(a1 + a2[18]);
  if (*v9)
    swift_release(v9[1]);

  v10 = (_QWORD *)(a1 + a2[21]);
  if (*v10)
    swift_release(v10[1]);
  return swift_release(*(_QWORD *)(a1 + a2[22]));
}

_QWORD *sub_1000F84B4(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t, __n128);
  id v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v58;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v8 = *(_QWORD *)(a2 + 16);
  a1[2] = v8;
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Locale(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v13 + 48);
  v15 = v7;
  v16 = swift_bridgeObjectRetain(v8);
  if (v14(v11, 1, v12, v16))
  {
    v17 = sub_100006DF4((uint64_t *)&unk_10028FE50);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = *(void **)(a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v20;
  *((_BYTE *)a1 + v19) = *(_BYTE *)(a2 + v19);
  v21 = a3[9];
  v22 = a3[10];
  v23 = *(void **)(a2 + v21);
  *(_QWORD *)((char *)a1 + v21) = v23;
  *(_QWORD *)((char *)a1 + v22) = *(_QWORD *)(a2 + v22);
  v24 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v25 = (char *)a1 + v24;
  v26 = a2 + v24;
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = *(_BYTE *)(v26 + 16);
  v27 = a3[13];
  v28 = a3[14];
  v58 = *(_OWORD *)(a2 + v27);
  *(_OWORD *)((char *)a1 + v27) = v58;
  v29 = *(void **)(a2 + v28);
  *(_QWORD *)((char *)a1 + v28) = v29;
  v30 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = a2 + v30;
  v33 = *(_QWORD *)(a2 + v30);
  v34 = v20;
  v35 = v23;
  swift_unknownObjectRetain(v58);
  v36 = v29;
  if (v33)
  {
    v37 = *(_QWORD *)(v32 + 8);
    *v31 = v33;
    v31[1] = v37;
    swift_retain(v37);
  }
  else
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  v38 = a3[17];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  if (*v40)
  {
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    swift_retain(v41);
  }
  else
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
  }
  v42 = a3[18];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)(a2 + v42);
  if (*v44)
  {
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    swift_retain(v45);
  }
  else
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
  }
  v46 = a3[19];
  v47 = a3[20];
  v48 = *(void **)(a2 + v46);
  *(_QWORD *)((char *)a1 + v46) = v48;
  *((_BYTE *)a1 + v47) = *(_BYTE *)(a2 + v47);
  v49 = a3[21];
  v50 = (_QWORD *)((char *)a1 + v49);
  v51 = a2 + v49;
  v52 = *(_QWORD *)(a2 + v49);
  v53 = v48;
  if (v52)
  {
    v54 = *(_QWORD *)(v51 + 8);
    *v50 = v52;
    v50[1] = v54;
    swift_retain(v54);
  }
  else
  {
    *(_OWORD *)v50 = *(_OWORD *)v51;
  }
  v55 = a3[22];
  v56 = *(_QWORD *)(a2 + v55);
  *(_QWORD *)((char *)a1 + v55) = v56;
  swift_retain(v56);
  return a1;
}

uint64_t sub_1000F8700(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for Locale(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_100006DF4((uint64_t *)&unk_10028FE50);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  v20 = a3[7];
  v21 = *(void **)(a2 + v20);
  v22 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  v23 = v21;

  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v24 = a3[9];
  v25 = *(void **)(a1 + v24);
  v26 = *(void **)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v26;
  v27 = v26;

  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v28 = a3[12];
  v29 = a1 + v28;
  v30 = (__int128 *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 16) = *((_BYTE *)v30 + 16);
  *(_OWORD *)v29 = v31;
  v32 = a3[13];
  v33 = (uint64_t *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v35 = *v34;
  v36 = v34[1];
  v37 = *v33;
  *v33 = *v34;
  swift_unknownObjectRetain(v35);
  swift_unknownObjectRelease(v37);
  v33[1] = v36;
  v38 = a3[14];
  v39 = *(void **)(a1 + v38);
  v40 = *(void **)(a2 + v38);
  *(_QWORD *)(a1 + v38) = v40;
  v41 = v40;

  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v42 = a3[16];
  v43 = (_QWORD *)(a1 + v42);
  v44 = a2 + v42;
  v45 = *(_QWORD *)(a1 + v42);
  v46 = *(_QWORD *)(a2 + v42);
  if (v45)
  {
    if (v46)
    {
      v47 = *(_QWORD *)(v44 + 8);
      v48 = v43[1];
      *v43 = v46;
      v43[1] = v47;
      swift_retain(v47);
      swift_release(v48);
      goto LABEL_14;
    }
    swift_release(v43[1]);
  }
  else if (v46)
  {
    v49 = *(_QWORD *)(v44 + 8);
    *v43 = v46;
    v43[1] = v49;
    swift_retain(v49);
    goto LABEL_14;
  }
  *(_OWORD *)v43 = *(_OWORD *)v44;
LABEL_14:
  v50 = a3[17];
  v51 = (_QWORD *)(a1 + v50);
  v52 = a2 + v50;
  v53 = *(_QWORD *)(a1 + v50);
  v54 = *(_QWORD *)(a2 + v50);
  if (v53)
  {
    if (v54)
    {
      v55 = *(_QWORD *)(v52 + 8);
      v56 = v51[1];
      *v51 = v54;
      v51[1] = v55;
      swift_retain(v55);
      swift_release(v56);
      goto LABEL_21;
    }
    swift_release(v51[1]);
  }
  else if (v54)
  {
    v57 = *(_QWORD *)(v52 + 8);
    *v51 = v54;
    v51[1] = v57;
    swift_retain(v57);
    goto LABEL_21;
  }
  *(_OWORD *)v51 = *(_OWORD *)v52;
LABEL_21:
  v58 = a3[18];
  v59 = (_QWORD *)(a1 + v58);
  v60 = a2 + v58;
  v61 = *(_QWORD *)(a1 + v58);
  v62 = *(_QWORD *)(a2 + v58);
  if (v61)
  {
    if (v62)
    {
      v63 = *(_QWORD *)(v60 + 8);
      v64 = v59[1];
      *v59 = v62;
      v59[1] = v63;
      swift_retain(v63);
      swift_release(v64);
      goto LABEL_28;
    }
    swift_release(v59[1]);
  }
  else if (v62)
  {
    v65 = *(_QWORD *)(v60 + 8);
    *v59 = v62;
    v59[1] = v65;
    swift_retain(v65);
    goto LABEL_28;
  }
  *(_OWORD *)v59 = *(_OWORD *)v60;
LABEL_28:
  v66 = a3[19];
  v67 = *(void **)(a1 + v66);
  v68 = *(void **)(a2 + v66);
  *(_QWORD *)(a1 + v66) = v68;
  v69 = v68;

  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v70 = a3[21];
  v71 = (_QWORD *)(a1 + v70);
  v72 = a2 + v70;
  v73 = *(_QWORD *)(a1 + v70);
  v74 = *(_QWORD *)(a2 + v70);
  if (!v73)
  {
    if (v74)
    {
      v77 = *(_QWORD *)(v72 + 8);
      *v71 = v74;
      v71[1] = v77;
      swift_retain(v77);
      goto LABEL_35;
    }
LABEL_34:
    *(_OWORD *)v71 = *(_OWORD *)v72;
    goto LABEL_35;
  }
  if (!v74)
  {
    swift_release(v71[1]);
    goto LABEL_34;
  }
  v75 = *(_QWORD *)(v72 + 8);
  v76 = v71[1];
  *v71 = v74;
  v71[1] = v75;
  swift_retain(v75);
  swift_release(v76);
LABEL_35:
  v78 = a3[22];
  v79 = *(_QWORD *)(a2 + v78);
  v80 = *(_QWORD *)(a1 + v78);
  *(_QWORD *)(a1 + v78) = v79;
  swift_retain(v79);
  swift_release(v80);
  return a1;
}

uint64_t sub_1000F8AB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100006DF4((uint64_t *)&unk_10028FE50);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  if (*v20)
  {
    v22 = v20[1];
    *v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  v23 = a3[17];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  if (*v25)
  {
    v27 = v25[1];
    *v24 = v26;
    v24[1] = v27;
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  v28 = a3[18];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v31 = *v30;
  if (*v30)
  {
    v32 = v30[1];
    *v29 = v31;
    v29[1] = v32;
  }
  else
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  v33 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  v34 = a3[21];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v37 = *v36;
  if (*v36)
  {
    v38 = v36[1];
    *v35 = v37;
    v35[1] = v38;
  }
  else
  {
    *(_OWORD *)v35 = *(_OWORD *)v36;
  }
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  return a1;
}

uint64_t sub_1000F8CAC(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = a2[2];
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Locale(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100006DF4((uint64_t *)&unk_10028FE50);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = a3[7];
  v19 = *(void **)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)((char *)a2 + v18);

  v20 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v21 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)((char *)a2 + v20);

  v22 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_BYTE *)(a1 + v22) = *((_BYTE *)a2 + v22);
  v23 = a3[12];
  v24 = a3[13];
  v25 = a1 + v23;
  v26 = (char *)a2 + v23;
  *(_BYTE *)(v25 + 16) = v26[16];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v27 = a1 + v24;
  v28 = *(_QWORD *)((char *)a2 + v24 + 8);
  v29 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  swift_unknownObjectRelease(v29);
  *(_QWORD *)(v27 + 8) = v28;
  v30 = a3[14];
  v31 = *(void **)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)((char *)a2 + v30);

  v32 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v33 = (_QWORD *)(a1 + v32);
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a2 + v32);
  if (*(_QWORD *)(a1 + v32))
  {
    if (v35)
    {
      v36 = *((_QWORD *)v34 + 1);
      v37 = v33[1];
      *v33 = v35;
      v33[1] = v36;
      swift_release(v37);
      goto LABEL_14;
    }
    swift_release(v33[1]);
  }
  else if (v35)
  {
    v38 = *((_QWORD *)v34 + 1);
    *v33 = v35;
    v33[1] = v38;
    goto LABEL_14;
  }
  *(_OWORD *)v33 = *(_OWORD *)v34;
LABEL_14:
  v39 = a3[17];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)(a1 + v39);
  v43 = *(_QWORD *)((char *)a2 + v39);
  if (v42)
  {
    if (v43)
    {
      v44 = *((_QWORD *)v41 + 1);
      v45 = v40[1];
      *v40 = v43;
      v40[1] = v44;
      swift_release(v45);
      goto LABEL_21;
    }
    swift_release(v40[1]);
  }
  else if (v43)
  {
    v46 = *((_QWORD *)v41 + 1);
    *v40 = v43;
    v40[1] = v46;
    goto LABEL_21;
  }
  *(_OWORD *)v40 = *(_OWORD *)v41;
LABEL_21:
  v47 = a3[18];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (char *)a2 + v47;
  v50 = *(_QWORD *)(a1 + v47);
  v51 = *(_QWORD *)((char *)a2 + v47);
  if (v50)
  {
    if (v51)
    {
      v52 = *((_QWORD *)v49 + 1);
      v53 = v48[1];
      *v48 = v51;
      v48[1] = v52;
      swift_release(v53);
      goto LABEL_28;
    }
    swift_release(v48[1]);
  }
  else if (v51)
  {
    v54 = *((_QWORD *)v49 + 1);
    *v48 = v51;
    v48[1] = v54;
    goto LABEL_28;
  }
  *(_OWORD *)v48 = *(_OWORD *)v49;
LABEL_28:
  v55 = a3[19];
  v56 = *(void **)(a1 + v55);
  *(_QWORD *)(a1 + v55) = *(_QWORD *)((char *)a2 + v55);

  v57 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  v58 = (_QWORD *)(a1 + v57);
  v59 = (char *)a2 + v57;
  v60 = *(_QWORD *)((char *)a2 + v57);
  if (!*(_QWORD *)(a1 + v57))
  {
    if (v60)
    {
      v63 = *((_QWORD *)v59 + 1);
      *v58 = v60;
      v58[1] = v63;
      goto LABEL_35;
    }
LABEL_34:
    *(_OWORD *)v58 = *(_OWORD *)v59;
    goto LABEL_35;
  }
  if (!v60)
  {
    swift_release(v58[1]);
    goto LABEL_34;
  }
  v61 = *((_QWORD *)v59 + 1);
  v62 = v58[1];
  *v58 = v60;
  v58[1] = v61;
  swift_release(v62);
LABEL_35:
  v64 = a3[22];
  v65 = *(_QWORD *)(a1 + v64);
  *(_QWORD *)(a1 + v64) = *(_QWORD *)((char *)a2 + v64);
  swift_release(v65);
  return a1;
}

uint64_t sub_1000F8FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F8FF0);
}

uint64_t sub_1000F8FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000F9074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F9080);
}

uint64_t sub_1000F9080(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_1000F9100(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[19];

  v4[0] = "\b";
  v4[1] = &unk_1001EF720;
  sub_1000A8A38(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_1001EF738;
    v4[5] = "\b";
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_1001EF738;
    v4[8] = &unk_1001EF750;
    v4[9] = &unk_1001EF720;
    v4[10] = "\b";
    v4[11] = &unk_1001EF738;
    v4[12] = &unk_1001EF720;
    v4[13] = &unk_1001EF720;
    v4[14] = &unk_1001EF720;
    v4[15] = "\b";
    v4[16] = &unk_1001EF738;
    v4[17] = &unk_1001EF720;
    v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 19, v4, a1 + 16);
  }
}

uint64_t sub_1000F91E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  id v7;
  id v8;
  uint64_t result;
  objc_super v10;

  __chkstk_darwin(a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F93F8(v2, (uint64_t)v5);
  v6 = (objc_class *)type metadata accessor for LanguageAwareText.Coordinator(0);
  v7 = objc_allocWithZone(v6);
  sub_1000F93F8((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtCV17SequoiaTranslator17LanguageAwareText11Coordinator_languageAwareText);
  v10.receiver = v7;
  v10.super_class = v6;
  v8 = objc_msgSendSuper2(&v10, "init");
  result = sub_1000F943C((uint64_t)v5);
  *a2 = v8;
  return result;
}

void sub_1000F9290(unint64_t a1, char a2, uint64_t a3, char a4, void *a5)
{
  sub_1000F77C8(a1, a2 & 1, a3, a4 & 1, a5);
}

uint64_t sub_1000F92C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C((unint64_t *)&unk_100292AE0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF7B8);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000F9328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100007D5C((unint64_t *)&unk_100292AE0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF7B8);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000F9390(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D5C((unint64_t *)&unk_100292AE0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF7B8);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_1000F93CC()
{
  return sub_100007D5C(&qword_10028D0F0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF768);
}

uint64_t sub_1000F93F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LanguageAwareText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F943C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LanguageAwareText(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000F9478(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t (*v28)(char *, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  Swift::String v32;
  void *object;
  Swift::Bool v34;
  uint64_t v35;
  double v36;
  id v37;
  NSUInteger v38;
  NSUInteger v39;
  id result;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  NSString *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(id, id, uint64_t, unint64_t, unint64_t, __n128);
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  __n128 v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t);
  uint64_t v93;
  __n128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  char *v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  __n128 v114;
  void (*v115)(char *, uint64_t, __n128);
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  __n128 v128;
  void (*v129)(char *, uint64_t, __n128);
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  NSRange v155;

  v150 = a1;
  v3 = sub_100006DF4(&qword_100292AF0);
  __chkstk_darwin(v3);
  v137 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v141 = *(_QWORD *)(v5 - 8);
  v142 = v5;
  __chkstk_darwin(v5);
  v140 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028CD90);
  __chkstk_darwin(v7);
  v144 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DisambiguationLinkInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  v145 = v9;
  v146 = v10;
  v11 = __chkstk_darwin(v9);
  v139 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v138 = (char *)&v136 - v14;
  __chkstk_darwin(v13);
  v143 = (char *)&v136 - v15;
  v16 = type metadata accessor for String.Encoding(0);
  v148 = *(_QWORD *)(v16 - 8);
  v149 = (id)v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UITextItem.Content(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (uint64_t *)((char *)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v136 - v25;
  v27 = a2;
  UITextItem.content.getter(v24);
  v28 = *(uint64_t (**)(char *, uint64_t))(v20 + 88);
  v29 = v28(v26, v19);
  v30 = enum case for UITextItem.Content.tag(_:);
  if (v29 != enum case for UITextItem.Content.tag(_:))
  {
    v35 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v26, v19);
LABEL_15:
    UITextItem.content.getter(v35);
    if (v28((char *)v23, v19) == v30)
    {
      v61 = (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 96))(v23, v19);
      v62 = *v23;
      v63 = v23[1];
      static String.Encoding.utf8.getter(v61);
      v64 = String.data(using:allowLossyConversion:)(v18, 0, v62, v63);
      v66 = v65;
      v67 = swift_bridgeObjectRelease(v63);
      (*(void (**)(char *, id, __n128))(v148 + 8))(v18, v149, v67);
      if (v66 >> 60 != 15)
      {
        v68 = type metadata accessor for JSONDecoder(0);
        swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
        v69 = JSONDecoder.init()();
        v70 = sub_100007D5C((unint64_t *)&unk_1002980D0, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
        v71 = v144;
        v72 = v145;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(v145, v64, v66, v145, v70);
        v87 = swift_release(v69);
        v88 = v146;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v146 + 56))(v71, 0, 1, v72, v87);
        v89 = v143;
        (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v143, v71, v72);
        v90 = v147 + OBJC_IVAR____TtCV17SequoiaTranslator17LanguageAwareText11Coordinator_languageAwareText;
        v91 = v90 + *(int *)(type metadata accessor for LanguageAwareText(0) + 64);
        v92 = *(uint64_t (**)(char *, uint64_t))v91;
        if (*(_QWORD *)v91)
        {
          v93 = *(_QWORD *)(v91 + 8);
          v94 = swift_retain(v93);
          v95 = v140;
          v96 = DisambiguationLinkInfo.sentenceUUID.getter(v94);
          v97 = DisambiguationLinkInfo.linkIndex.getter(v96);
          v98 = (void *)v92(v95, v97);
          sub_10002BA44((uint64_t)v92, v93);
          (*(void (**)(char *, uint64_t))(v141 + 8))(v95, v142);
          if (v98)
          {
            v149 = (id)v64;
            if (qword_10028A428 != -1)
              swift_once(&qword_10028A428, sub_100120F9C);
            v150 = (id)v66;
            v99 = type metadata accessor for Logger(0);
            sub_10000F66C(v99, (uint64_t)qword_1002AA380);
            v100 = v138;
            (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v138, v89, v72);
            v101 = v98;
            v102 = Logger.logObject.getter(v101);
            v103 = static os_log_type_t.info.getter(v102);
            if (os_log_type_enabled(v102, v103))
            {
              v104 = swift_slowAlloc(22, -1);
              v148 = swift_slowAlloc(32, -1);
              v153 = v148;
              *(_DWORD *)v104 = 134349314;
              v105 = objc_msgSend(v101, "children");
              v106 = sub_10000A05C(0, &qword_10028BDF8, UIMenuElement_ptr);
              v107 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v105, v106);

              if ((unint64_t)v107 >> 62)
              {
                if (v107 < 0)
                  v135 = v107;
                else
                  v135 = v107 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v107);
                v108 = _CocoaArrayWrapper.endIndex.getter(v135);

                swift_bridgeObjectRelease(v107);
              }
              else
              {
                v108 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);

              }
              swift_bridgeObjectRelease(v107);
              v151 = v108;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v104 + 4);

              *(_WORD *)(v104 + 12) = 2082;
              v109 = sub_100007D5C(&qword_100292AF8, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
              v110 = v138;
              v111 = dispatch thunk of CustomStringConvertible.description.getter(v72, v109);
              v113 = v112;
              v151 = sub_1001A7FE4(v111, v112, &v153);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v104 + 14);
              v114 = swift_bridgeObjectRelease(v113);
              v115 = *(void (**)(char *, uint64_t, __n128))(v146 + 8);
              v115(v110, v72, v114);
              _os_log_impl((void *)&_mh_execute_header, v102, v103, "Presenting menu with %{public}ld section(s) from link: %{public}s", (uint8_t *)v104, 0x16u);
              v116 = v148;
              swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v116, -1, -1);
              swift_slowDealloc(v104, -1, -1);
            }
            else
            {

              v115 = *(void (**)(char *, uint64_t, __n128))(v88 + 8);
              ((void (*)(char *, uint64_t))v115)(v100, v72);
            }

            sub_10000A05C(0, &qword_100292B00, UITextItemMenuConfiguration_ptr);
            v131 = enum case for UITextItemMenuConfiguration.Preview.default(_:);
            v132 = type metadata accessor for UITextItemMenuConfiguration.Preview(0);
            v133 = *(_QWORD *)(v132 - 8);
            v134 = v137;
            (*(void (**)(char *, uint64_t, uint64_t))(v133 + 104))(v137, v131, v132);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v134, 0, 1, v132);
            v86 = UITextItemMenuConfiguration.init(preview:menu:)(v134, v101);
            sub_1000D6A2C((uint64_t)v149, (unint64_t)v150);
            ((void (*)(char *, uint64_t))v115)(v89, v72);
            return (id)v86;
          }
        }
        if (qword_10028A428 != -1)
          swift_once(&qword_10028A428, sub_100120F9C);
        v117 = type metadata accessor for Logger(0);
        sub_10000F66C(v117, (uint64_t)qword_1002AA380);
        v118 = v139;
        v119 = (*(uint64_t (**)(char *, char *, uint64_t))(v88 + 16))(v139, v89, v72);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.info.getter(v120);
        if (os_log_type_enabled(v120, v121))
        {
          v122 = (uint8_t *)swift_slowAlloc(12, -1);
          v123 = swift_slowAlloc(32, -1);
          v153 = v123;
          v149 = (id)v64;
          v150 = (id)v66;
          *(_DWORD *)v122 = 136446210;
          v124 = sub_100007D5C(&qword_100292AF8, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
          v125 = dispatch thunk of CustomStringConvertible.description.getter(v72, v124);
          v127 = v126;
          v151 = sub_1001A7FE4(v125, v126, &v153);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v122 + 4);
          v128 = swift_bridgeObjectRelease(v127);
          v129 = *(void (**)(char *, uint64_t, __n128))(v88 + 8);
          v129(v118, v72, v128);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Client didn't return a menu from the disambiguationAction block; won't show menu for link with info %{public}s",
            v122,
            0xCu);
          swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          swift_slowDealloc(v122, -1, -1);
          sub_1000D6A2C((uint64_t)v149, (unint64_t)v150);

          ((void (*)(char *, uint64_t))v129)(v143, v72);
        }
        else
        {
          sub_1000D6A2C(v64, v66);

          v130 = *(void (**)(char *, uint64_t))(v88 + 8);
          v130(v118, v72);
          v130(v89, v72);
        }
        return 0;
      }
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v23, v19);
    }
    if (qword_10028A428 != -1)
      swift_once(&qword_10028A428, sub_100120F9C);
    v73 = type metadata accessor for Logger(0);
    sub_10000F66C(v73, (uint64_t)qword_1002AA380);
    v74 = v27;
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v77 = 138543362;
      v153 = (uint64_t)v74;
      v79 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v77 + 4);
      *v78 = v74;

      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed to decode link info from textItemRequest %{public}@; won't present menu",
        v77,
        0xCu);
      v80 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v78, 1, v80);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v20 + 96))(v26, v19);
  v31 = *((_QWORD *)v26 + 1);
  type metadata accessor for DisambiguationResultModel(0);
  v32._countAndFlagsBits = static DisambiguationResultModel.dictionaryItemKey.getter();
  object = v32._object;
  v34 = String.hasPrefix(_:)(v32);
  swift_bridgeObjectRelease(object);
  *(_QWORD *)&v36 = swift_bridgeObjectRelease(v31).n128_u64[0];
  if (!v34)
    goto LABEL_15;
  v37 = objc_msgSend(v27, "range", v36);
  v39 = v38;
  result = objc_msgSend(v150, "text");
  if (result)
  {
    v41 = result;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v44 = v43;

    v45 = sub_10018337C((unint64_t)v37, v39, v42, v44);
    v47 = v46;
    swift_bridgeObjectRelease(v44);
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v48 = type metadata accessor for Logger(0);
    sub_10000F66C(v48, (uint64_t)qword_1002AA368);
    v49 = swift_bridgeObjectRetain_n(v47, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.info.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v148 = v39;
    v149 = v37;
    v146 = v45;
    if (v52)
    {
      v53 = swift_slowAlloc(22, -1);
      v54 = swift_slowAlloc(64, -1);
      v153 = v54;
      *(_DWORD *)v53 = 136643075;
      if (v47)
        v55 = v45;
      else
        v55 = 0x6E776F6E6B6E75;
      if (v47)
        v56 = v47;
      else
        v56 = 0xE700000000000000;
      swift_bridgeObjectRetain(v47);
      v151 = sub_1001A7FE4(v55, v56, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v53 + 4);
      swift_bridgeObjectRelease_n(v47, 2);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v53 + 12) = 2082;
      v155.location = (NSUInteger)v37;
      v155.length = v39;
      v57 = NSStringFromRange(v155);
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v60 = v59;

      v151 = sub_1001A7FE4(v58, v60, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v53 + 14);
      swift_bridgeObjectRelease(v60);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Presenting dictionary from word: %{sensitive}s; range: %{public}s",
        (uint8_t *)v53,
        0x16u);
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
    }
    v81 = v147 + OBJC_IVAR____TtCV17SequoiaTranslator17LanguageAwareText11Coordinator_languageAwareText;
    v82 = v81 + *(int *)(type metadata accessor for LanguageAwareText(0) + 68);
    v83 = *(void (**)(id, id, uint64_t, unint64_t, unint64_t, __n128))v82;
    if (*(_QWORD *)v82)
    {
      v84 = *(_QWORD *)(v82 + 8);
      v85 = swift_retain(v84);
      v83(v150, v149, v148, v146, v47, v85);
      sub_10002BA44((uint64_t)v83, v84);
    }
    swift_bridgeObjectRelease(v47);
    return 0;
  }
  __break(1u);
  return result;
}

void sub_1000FA1DC(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  Swift::Bool v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void ***v39;
  void **v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  double v54;
  uint64_t v55;
  char *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void **aBlock;
  _QWORD v63[4];
  uint64_t v64;

  v58 = a2;
  v3 = sub_100006DF4(&qword_10028CD90);
  __chkstk_darwin(v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DisambiguationLinkInfo(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  v7 = *(_QWORD *)(v59 + 64);
  v8 = __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v56 = (char *)&v55 - v10;
  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UITextItem.Content(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = a1;
  UITextItem.content.getter(v17);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 88))(v19, v15) == enum case for UITextItem.Content.tag(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v19, v15);
    v21 = *v19;
    v20 = v19[1];
    type metadata accessor for DisambiguationResultModel(0);
    v22._countAndFlagsBits = static DisambiguationResultModel.dictionaryItemKey.getter();
    object = v22._object;
    v24 = String.hasPrefix(_:)(v22);
    swift_bridgeObjectRelease(object);
    if (v24)
    {
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      static String.Encoding.utf8.getter(v25);
      v26 = (void *)String.data(using:allowLossyConversion:)(v14, 0, v21, v20);
      v28 = v27;
      v29 = swift_bridgeObjectRelease(v20);
      (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v29);
      if (v28 >> 60 == 15)
      {
        if (qword_10028A428 != -1)
          swift_once(&qword_10028A428, sub_100120F9C);
        v34 = type metadata accessor for Logger(0);
        sub_10000F66C(v34, (uint64_t)qword_1002AA380);
        v35 = (void **)v61;
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v39 = (void ***)swift_slowAlloc(8, -1);
          *(_DWORD *)v38 = 138543362;
          aBlock = v35;
          v40 = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v63, v38 + 4);
          *v39 = v35;

          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to decode link info from textItemRequest %{public}@; won't display extra highlight",
            v38,
            0xCu);
          v41 = sub_100006DF4((uint64_t *)&unk_100291430);
          swift_arrayDestroy(v39, 1, v41);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v38, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        v30 = type metadata accessor for JSONDecoder(0);
        swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
        v31 = JSONDecoder.init()();
        v32 = sub_100007D5C((unint64_t *)&unk_1002980D0, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
        v33 = v60;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(v60, v26, v28, v60, v32);
        v42 = swift_release(v31);
        v43 = v59;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v59 + 56))(v5, 0, 1, v33, v42);
        v44 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
        v61 = v26;
        v45 = v56;
        v44(v56, v5, v33);
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v9, v45, v33);
        v46 = *(unsigned __int8 *)(v43 + 80);
        v47 = (v46 + 24) & ~v46;
        v48 = swift_allocObject(&unk_10026AD38, v47 + v7, v46 | 7);
        v49 = v28;
        v50 = v57;
        *(_QWORD *)(v48 + 16) = v57;
        v44((char *)(v48 + v47), v9, v33);
        v63[3] = sub_1000FAD94;
        v64 = v48;
        aBlock = _NSConcreteStackBlock;
        v63[0] = 1107296256;
        v63[1] = sub_100075908;
        v63[2] = &unk_10026AD50;
        v51 = _Block_copy(&aBlock);
        v52 = v64;
        v53 = v50;
        *(_QWORD *)&v54 = swift_release(v52).n128_u64[0];
        objc_msgSend(v58, "addAnimations:", v51, v54);
        sub_1000D6A2C((uint64_t)v61, v49);
        _Block_release(v51);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v33);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v19, v15);
  }
}

uint64_t sub_1000FA718(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *object;
  Swift::Bool v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  char *v30;
  void (*v31)(_QWORD, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  void ***v48;
  void **v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  id v61;
  double v62;
  char *v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void **aBlock;
  _QWORD v71[4];
  uint64_t v72;

  v64 = a2;
  v3 = sub_100006DF4(&qword_10028CD90);
  v4 = __chkstk_darwin(v3);
  v66 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v63 - v6;
  v8 = type metadata accessor for DisambiguationLinkInfo(0);
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  v9 = *(_QWORD *)(v67 + 64);
  v10 = __chkstk_darwin(v8);
  v11 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v63 = (char *)&v63 - v12;
  v13 = type metadata accessor for String.Encoding(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UITextItem.Content(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = a1;
  UITextItem.content.getter(v19);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v18 + 88))(v21, v17) == enum case for UITextItem.Content.tag(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v21, v17);
    v23 = *v21;
    v22 = v21[1];
    type metadata accessor for DisambiguationResultModel(0);
    v24._countAndFlagsBits = static DisambiguationResultModel.dictionaryItemKey.getter();
    object = v24._object;
    v26 = String.hasPrefix(_:)(v24);
    swift_bridgeObjectRelease(object);
    if (v26)
    {
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      static String.Encoding.utf8.getter(v27);
      v35 = String.data(using:allowLossyConversion:)(v16, 0, v23, v22);
      v37 = v36;
      v38 = swift_bridgeObjectRelease(v22);
      (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v16, v13, v38);
      v39 = v68;
      if (v37 >> 60 != 15)
      {
        v40 = type metadata accessor for JSONDecoder(0);
        swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
        v41 = JSONDecoder.init()();
        v42 = sub_100007D5C((unint64_t *)&unk_1002980D0, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(v39, v35, v37, v39, v42);
        v51 = swift_release(v41);
        v52 = v67;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v67 + 56))(v7, 0, 1, v39, v51);
        v53 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
        v66 = v35;
        v54 = v63;
        v53(v63, v7, v39);
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v11, v54, v39);
        v55 = *(unsigned __int8 *)(v52 + 80);
        v56 = (v55 + 24) & ~v55;
        v57 = swift_allocObject(&unk_10026ACE8, v56 + v9, v55 | 7);
        v58 = v69;
        *(_QWORD *)(v57 + 16) = v69;
        v53((char *)(v57 + v56), v11, v39);
        v71[3] = sub_1000FACFC;
        v72 = v57;
        aBlock = _NSConcreteStackBlock;
        v71[0] = 1107296256;
        v71[1] = sub_100075908;
        v71[2] = &unk_10026AD00;
        v59 = _Block_copy(&aBlock);
        v60 = v72;
        v61 = v58;
        *(_QWORD *)&v62 = swift_release(v60).n128_u64[0];
        objc_msgSend(v64, "addAnimations:", v59, v62);
        sub_1000D6A2C(v66, v37);
        _Block_release(v59);
        return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v54, v39);
      }
      if (qword_10028A428 != -1)
        swift_once(&qword_10028A428, sub_100120F9C);
      v43 = type metadata accessor for Logger(0);
      sub_10000F66C(v43, (uint64_t)qword_1002AA380);
      v44 = (void **)v65;
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(12, -1);
        v48 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v47 = 138543362;
        aBlock = v44;
        v49 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v71, v47 + 4);
        *v48 = v44;

        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to decode link info from textItemRequest %{public}@; won't display extra highlight",
          v47,
          0xCu);
        v50 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v48, 1, v50);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v21, v17);
  }
  v28 = &v69[OBJC_IVAR____TtCV17SequoiaTranslator17LanguageAwareText11Coordinator_languageAwareText];
  result = type metadata accessor for LanguageAwareText(0);
  v30 = &v28[*(int *)(result + 84)];
  v31 = *(void (**)(_QWORD, uint64_t, __n128))v30;
  if (*(_QWORD *)v30)
  {
    v32 = *((_QWORD *)v30 + 1);
    v33 = v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v66, 1, 1, v68);
    v34 = swift_retain(v32);
    v31(0, v33, v34);
    sub_10002BA44((uint64_t)v31, v32);
    return sub_10000A020(v33, &qword_10028CD90);
  }
  return result;
}

uint64_t sub_1000FACFC()
{
  return sub_1000FAD9C(0);
}

uint64_t sub_1000FAD04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FAD14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000FAD20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DisambiguationLinkInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000FAD94()
{
  return sub_1000FAD9C(1);
}

uint64_t sub_1000FAD9C(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DisambiguationLinkInfo(0) - 8) + 80);
  return sub_1000F7BA0(*(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

double sub_1000FB024(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char *v31;
  Swift::Bool v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36[24];

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v11 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  sub_100082758(a1, (uint64_t)&v33 - v15);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v18 = v17(v16, 1, v4);
  v35 = v8;
  if ((_DWORD)v18 == 1)
  {
    sub_10000A020((uint64_t)v16, (uint64_t *)&unk_10028FE50);
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v19 = Locale.identifier.getter(v18);
    v20 = v21;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
  }
  v22 = (uint64_t)&v2[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale];
  swift_beginAccess(&v2[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale], v36, 0, 0);
  if (v17((char *)v22, 1, v4))
  {
    if (!v20)
      return result;
    goto LABEL_6;
  }
  v34 = v19;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v22, v4);
  v27 = Locale.identifier.getter(v26);
  v24 = v28;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  if (!v20)
  {
    if (!v24)
      return result;
    goto LABEL_7;
  }
  if (!v24)
  {
LABEL_6:
    v24 = v20;
LABEL_7:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v24).n128_u64[0];
LABEL_8:
    objc_msgSend(v2, "reloadInputViews", result);
    sub_1000FBD64();
    sub_100082758(v22, (uint64_t)v14);
    if (v17(v14, 1, v4) == 1)
    {
      sub_10000A020((uint64_t)v14, (uint64_t *)&unk_10028FE50);
      v25 = 4;
    }
    else
    {
      v31 = v35;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v35, v14, v4);
      v32 = Locale.isRTL()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v4);
      if (v32)
        v25 = 2;
      else
        v25 = 0;
    }
    objc_msgSend(v2, "setTextAlignment:", v25);
    return result;
  }
  if (v34 == v27 && v20 == v24)
  {
    swift_bridgeObjectRelease(v20);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v24).n128_u64[0];
    return result;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v20, v27, v24, 0);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v24).n128_u64[0];
  if ((v30 & 1) == 0)
    goto LABEL_8;
  return result;
}

id sub_1000FB2FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView____lazy_storage___tapGestureRecognizer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView____lazy_storage___tapGestureRecognizer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView____lazy_storage___tapGestureRecognizer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "textViewTapped:");
    objc_msgSend(v4, "setNumberOfTapsRequired:", 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

char *sub_1000FB390()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char *v8;
  id v9;
  void **v10;
  void *v11;
  id v12;
  char *v13;
  id v14;
  id v15;
  char v17[24];
  objc_super v18;

  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_willResignFirstResponder];
  *v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_hasTapGestureRecognizer] = 0;
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_languageAwareTextViewDelegate];
  *((_QWORD *)v2 + 1) = 0;
  swift_unknownObjectWeakInit(v2, 0);
  v3 = &v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale];
  v4 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_inputModeBeforeReloadWithoutLocaleChange] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView____lazy_storage___tapGestureRecognizer] = 0;
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for LanguageAwareTextView(0);
  v6 = objc_msgSendSuper2(&v18, "initWithFrame:textContainer:", 0, 0.0, 0.0, 0.0, 0.0);
  v7 = (void *)objc_opt_self(UIColor);
  v8 = (char *)v6;
  v9 = objc_msgSend(v7, "quaternaryLabelColor");
  v10 = (void **)&v8[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor];
  swift_beginAccess(&v8[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor], v17, 1, 0);
  v11 = *v10;
  *v10 = v9;
  v12 = v9;

  PlaceholderTextView.updatePlaceholderProperties()();
  v13 = v8;
  v14 = objc_msgSend(v7, "clearColor");
  objc_msgSend(v13, "setBackgroundColor:", v14);

  objc_msgSend(v13, "setTextContainerInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  v15 = objc_msgSend(v13, "textContainer");
  objc_msgSend(v15, "setLineFragmentPadding:", 0.0);

  objc_msgSend(v13, "setAlwaysBounceVertical:", 0);
  objc_msgSend(v13, "setShowsVerticalScrollIndicator:", 0);
  objc_msgSend(v13, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityExtraLarge);
  objc_msgSend(v13, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v13, "setScrollEnabled:", 0);
  objc_msgSend(v13, "setForceDisableDictation:", 1);

  return v13;
}

_QWORD *sub_1000FB6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v1 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale;
  swift_beginAccess(v8, v17, 0, 0);
  sub_100082758(v8, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028FE50);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v10 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v10(v7, v3, v4);
    v11 = sub_100006DF4((uint64_t *)&unk_100292580);
    v12 = *(_QWORD *)(v5 + 72);
    v13 = *(unsigned __int8 *)(v5 + 80);
    v14 = (v13 + 32) & ~v13;
    v9 = swift_allocObject(v11, v14 + v12, v13 | 7);
    *(_OWORD *)(v9 + 16) = xmmword_1001E64F0;
    v10((char *)(v9 + v14), v7, v4);
  }
  return (_QWORD *)v9;
}

id sub_1000FB848()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  objc_class *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  objc_class *v26;
  id v27;
  _QWORD v29[2];
  objc_super v30;
  __int128 aBlock;
  __int128 v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  objc_super v35;
  char v36[24];

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v2);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_inputModeBeforeReloadWithoutLocaleChange];
  v10 = v9;
  if (!v9)
  {
    v11 = (uint64_t)&v1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale];
    swift_beginAccess(&v1[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale], v36, 0, 0);
    sub_100082758(v11, (uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_10000A020((uint64_t)v4, (uint64_t *)&unk_10028FE50);
      v12 = (objc_class *)type metadata accessor for LanguageAwareTextView(0);
      v35.receiver = v1;
      v35.super_class = v12;
      v10 = objc_msgSendSuper2(&v35, "textInputMode");
      goto LABEL_16;
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v13 = (void *)objc_opt_self(TIInputModeController);
    Locale.identifier.getter(v13);
    v15 = v14;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    Locale.identifier.getter(v17);
    v19 = v18;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v33 = sub_1000FBB7C;
    v34 = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v32 = sub_1000FBBEC;
    *((_QWORD *)&v32 + 1) = &unk_10026AE30;
    v21 = _Block_copy(&aBlock);
    v22 = objc_msgSend(v13, "_inputModesForLocale:language:modeFetcher:", v16, v20, v21);
    _Block_release(v21);

    if (v22
      && (v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, (char *)&type metadata for Any + 8),
          v22,
          v23))
    {
      if (*(_QWORD *)(v23 + 16))
      {
        sub_10000A0EC(v23 + 32, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v32 = 0u;
      }
      swift_bridgeObjectRelease(v23);
      if (*((_QWORD *)&v32 + 1))
      {
        if ((swift_dynamicCast(v29, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v24 = v29[1];
          v25 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v24);
          v10 = objc_msgSend((id)objc_opt_self(UIKeyboardInputMode), "keyboardInputModeWithIdentifier:", v25);

LABEL_15:
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          goto LABEL_16;
        }
LABEL_14:
        v26 = (objc_class *)type metadata accessor for LanguageAwareTextView(0);
        v30.receiver = v1;
        v30.super_class = v26;
        v10 = objc_msgSendSuper2(&v30, "textInputMode");
        goto LABEL_15;
      }
    }
    else
    {
      aBlock = 0u;
      v32 = 0u;
    }
    sub_10000A020((uint64_t)&aBlock, (uint64_t *)&unk_10028C0B0);
    goto LABEL_14;
  }
LABEL_16:
  v27 = v9;
  return v10;
}

uint64_t sub_1000FBB7C(uint64_t a1, uint64_t a2)
{
  NSString v2;
  id v3;
  uint64_t v4;

  if (a2)
    v2 = String._bridgeToObjectiveC()();
  else
    v2 = 0;
  v3 = (id)TIGetDefaultInputModesForLanguage(v2);

  if (!v3)
    return 0;
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);

  return v4;
}

Class sub_1000FBBEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSArray v8;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  swift_retain(v2);
  v7 = v3(v4, v6);
  swift_release(v2);
  swift_bridgeObjectRelease(v6);
  if (v7)
  {
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v8.super.isa = 0;
  }
  return v8.super.isa;
}

void sub_1000FBD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t countAndFlagsBits;
  void *object;
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  NSString v29;
  _BYTE v30[24];
  char v31[24];
  Swift::String v32;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v6);
  v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey);
    v11 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey + 8);
  }
  else
  {
    v11 = (void *)0xEB00000000455059;
    v10 = 0x545F4F545F504154;
  }
  v12 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale, v31, 0, 0);
  sub_100082758(v12, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    swift_bridgeObjectRetain(v9);
    sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
    v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v32._object = (void *)0xE000000000000000;
    v14._countAndFlagsBits = v10;
    v14._object = v11;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v32._countAndFlagsBits = 0;
    v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v32);
    countAndFlagsBits = v16._countAndFlagsBits;
    object = v16._object;

  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v8, v2);
    swift_bridgeObjectRetain(v9);
    sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
    v19 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v20._countAndFlagsBits = v10;
    v20._object = v11;
    v21._countAndFlagsBits = 0x617A696C61636F4CLL;
    v21._object = (void *)0xEB00000000656C62;
    v22 = Locale.ltLocalizedAppString(_:table:bundle:)(v20, v21, (NSBundle)v19);
    countAndFlagsBits = v22._countAndFlagsBits;
    object = v22._object;

    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
  swift_bridgeObjectRelease(v11);
  v23 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder, v30, 1, 0);
  v24 = (void *)v23[1];
  if (v24)
  {
    if (*v23 == countAndFlagsBits && v24 == object
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, countAndFlagsBits, object, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(object);
      return;
    }
    v25 = v23[1];
  }
  else
  {
    v25 = 0;
  }
  *v23 = countAndFlagsBits;
  v23[1] = (uint64_t)object;
  v26 = swift_bridgeObjectRelease(v25).n128_u64[0];
  v27 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView);
  v28 = v23[1];
  if (v28)
  {
    swift_bridgeObjectRetain(v28);
    v29 = String._bridgeToObjectiveC()();
    v26 = swift_bridgeObjectRelease(v28).n128_u64[0];
  }
  else
  {
    v29 = 0;
  }
  objc_msgSend(v27, "setText:", v29, *(double *)&v26);

}

uint64_t sub_1000FC084(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t result;
  uint64_t v10;

  v2 = v1;
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA440);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Tap gesture recognizer for ASR Alts or focusing fired, informing delegate", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_languageAwareTextViewDelegate);
  if (result)
  {
    v10 = result;
    sub_1000F7D44(v2, a1);
    return swift_unknownObjectRelease(v10);
  }
  return result;
}

void sub_1000FC220()
{
  uint64_t v0;

  sub_10002BA44(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_willResignFirstResponder), *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_willResignFirstResponder + 8));
  sub_100011194(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_languageAwareTextViewDelegate);
  sub_10000A020(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale, (uint64_t *)&unk_10028FE50);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey
                                      + 8));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_inputModeBeforeReloadWithoutLocaleChange));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView____lazy_storage___tapGestureRecognizer));
}

id sub_1000FC29C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LanguageAwareTextView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000FC358()
{
  return type metadata accessor for LanguageAwareTextView(0);
}

uint64_t type metadata accessor for LanguageAwareTextView(uint64_t a1)
{
  uint64_t result;

  result = qword_100292B58;
  if (!qword_100292B58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LanguageAwareTextView);
  return result;
}

void sub_1000FC39C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1001EF898;
  v4[1] = &unk_1001EF8B0;
  v4[2] = &unk_1001EF8C8;
  sub_1000A8A38(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1001EF898;
    v4[5] = &unk_1001EF8E0;
    v4[6] = &unk_1001EF8E0;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 528);
  }
}

uint64_t sub_1000FC434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FC444(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000FC44C()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_willResignFirstResponder];
  *v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_hasTapGestureRecognizer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_languageAwareTextViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_locale];
  v3 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = &v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_placeholderLocalizableKey];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView_inputModeBeforeReloadWithoutLocaleChange] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator21LanguageAwareTextView____lazy_storage___tapGestureRecognizer] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/LanguageAwareTextView.swift", 45, 2, 85, 0);
  __break(1u);
}

void sub_1000FC538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  id v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)(v1 + 16));
  if (*(_BYTE *)(v1 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 24);
    Hasher._combine(_:)(1u);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = v4;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
  }
  if (*(_BYTE *)(v1 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 40);
    Hasher._combine(_:)(1u);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v6;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
  v8 = *(id *)(v1 + 56);
  NSObject.hash(into:)(a1);

  if (*(_BYTE *)(v2 + 72) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 64);
    Hasher._combine(_:)(1u);
    if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v10 = v9;
    else
      v10 = 0;
    Hasher._combine(_:)(v10);
  }
}

uint64_t sub_1000FC62C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 73, 7);
}

Swift::Int sub_1000FC650()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000FC538((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_1000FC690(uint64_t a1)
{
  sub_1000FC538(a1);
}

Swift::Int sub_1000FC6B0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000FC538((uint64_t)v2);
  return Hasher._finalize()();
}

BOOL sub_1000FC6EC()
{
  Swift::Int v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  sub_1000FC538((uint64_t)v2);
  v0 = Hasher._finalize()();
  Hasher.init(_seed:)(v2, 0);
  sub_1000FC538((uint64_t)v2);
  return v0 == Hasher._finalize()();
}

void sub_1000FC764(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];

  v5 = v4;
  v10 = (_QWORD *)(v4 + 16);
  swift_beginAccess(v4 + 16, v34, 0, 0);
  v11 = *(_QWORD *)(v4 + 16);
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain(v11);
    sub_1001A884C(a4);
    v13 = v12;
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) != 0)
      return;
  }
  v14 = (uint64_t *)(v5 + 24);
  swift_beginAccess(v5 + 24, v33, 0, 0);
  v15 = *(_QWORD *)(v5 + 24);
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v24 = *(_QWORD *)(v5 + 24);
    else
      v24 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease(v15);
    if (v25 < 100)
      goto LABEL_15;
LABEL_5:
    swift_beginAccess(v14, v32, 33, 0);
    v16 = *v14;
    if ((unint64_t)*v14 >> 62)
    {
      if (v16 < 0)
        v26 = *v14;
      else
        v26 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v14);
      v27 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(v16);
      if (v27)
      {
LABEL_7:
        v16 = *v14;
        if (!((unint64_t)*v14 >> 62))
        {
          v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v17)
            goto LABEL_9;
          goto LABEL_33;
        }
LABEL_29:
        if (v16 < 0)
          v28 = v16;
        else
          v28 = v16 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v16);
        v17 = _CocoaArrayWrapper.endIndex.getter(v28);
        swift_bridgeObjectRelease(v16);
        if (v17)
        {
LABEL_9:
          if ((v16 & 0xC000000000000001) == 0)
          {
            if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_36;
            }
            v17 = *(_QWORD *)(v16 + 32);
            swift_retain(v17);
LABEL_12:
            v16 = *v14;
            if (!((unint64_t)*v14 >> 62))
            {
              if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_14:
                sub_1001CCB44(0, 1);
                swift_endAccess(v32);
                swift_beginAccess(v10, v32, 33, 0);
                sub_1001C7FE4(v17);
                swift_endAccess(v32);
                swift_release(v17);
                goto LABEL_15;
              }
LABEL_40:
              __break(1u);
              return;
            }
LABEL_36:
            if (v16 < 0)
              v29 = v16;
            else
              v29 = v16 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v16);
            v30 = _CocoaArrayWrapper.endIndex.getter(v29);
            swift_bridgeObjectRelease(v16);
            if (v30)
              goto LABEL_14;
            goto LABEL_40;
          }
LABEL_34:
          v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
          goto LABEL_12;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    else if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_29;
  }
  if (*(uint64_t *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10) >= 100)
    goto LABEL_5;
LABEL_15:
  swift_beginAccess(v10, v32, 33, 0);
  swift_retain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  v31 = *v10;
  *v10 = 0x8000000000000000;
  sub_1001AAA20(a1, a2, a3 & 1, a4, isUniquelyReferenced_nonNull_native);
  v19 = *v10;
  *v10 = v31;
  swift_release(a4);
  swift_bridgeObjectRelease(v19);
  swift_endAccess(v32);
  swift_beginAccess(v14, v32, 33, 0);
  v20 = swift_retain(a4);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v22 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v22 >= v21 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
  v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, a4);
  specialized Array._endMutation()(v23);
  swift_endAccess(v32);
}

uint64_t sub_1000FCAB8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for LanguageAwareTextViewSizeThatFitsCache()
{
  return objc_opt_self(_TtC17SequoiaTranslator38LanguageAwareTextViewSizeThatFitsCache);
}

uint64_t type metadata accessor for LanguageAwareTextViewSizeThatFitsCache.Condition()
{
  return objc_opt_self(_TtCC17SequoiaTranslator38LanguageAwareTextViewSizeThatFitsCache9Condition);
}

unint64_t sub_1000FCB28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292D20;
  if (!qword_100292D20)
  {
    v1 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache.Condition();
    result = swift_getWitnessTable(&unk_1001EF974, v1);
    atomic_store(result, (unint64_t *)&qword_100292D20);
  }
  return result;
}

double sub_1000FCB6C@<D0>(uint64_t a1@<X8>)
{
  __int16 *v1;
  __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v25 - v8;
  v31 = *(_OWORD *)(v1 + 12);
  v27 = *(_OWORD *)(v1 + 12);
  v10 = sub_100006DF4(&qword_10028CF50);
  State.projectedValue.getter(&v28, v10);
  v11 = v28;
  v12 = v29;
  v13 = v30;
  v14 = *v1;
  v15 = *((_BYTE *)v1 + 2);
  v25 = *((_QWORD *)v2 + 2);
  v16 = swift_allocObject(&unk_10026AFC0, 56, 7);
  v17 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 48) = *((_QWORD *)v2 + 4);
  *(double *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v13;
  *(_WORD *)(a1 + 17) = v14;
  *(_BYTE *)(a1 + 19) = v15;
  *(_QWORD *)(a1 + 24) = sub_1000FEA3C;
  *(_QWORD *)(a1 + 32) = v16;
  v18 = type metadata accessor for LanguageFlipperBindingView(0);
  v19 = (_QWORD *)(a1 + *(int *)(v18 + 36));
  swift_retain(v25);
  v20 = sub_10001B1E0((uint64_t)&v31);
  UUID.init()(v20);
  v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v7, v9, v4);
  State.init(wrappedValue:)(v19, v7, v4);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v4);
  v22 = (double *)(a1 + *(int *)(v18 + 40));
  *(_QWORD *)&v27 = 0;
  State.init(wrappedValue:)(&v28, &v27, &type metadata for Angle);
  result = v28;
  v24 = v29;
  *v22 = v28;
  *((_QWORD *)v22 + 1) = v24;
  return result;
}

uint64_t sub_1000FCD20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v5;
  __int128 v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  v8 = *(_OWORD *)(a1 + 24);
  sub_1000110A4((uint64_t)&v8 + 8, (uint64_t)&v9, &qword_100292E38);
  sub_100018680(&v9);
  v2 = sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v7);
  v6 = v8;
  v5 = (v7 & 1) == 0;
  State.wrappedValue.setter(&v5, v2);
  v3 = sub_10001B5BC((uint64_t)&v8);
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v3);
}

uint64_t sub_1000FCDD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v1 = type metadata accessor for LanguageFlipperBindingView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v1);
  v4 = sub_100006DF4(&qword_100292F00);
  v5 = __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = static Alignment.center.getter(v5);
  v7[1] = v8;
  v9 = sub_100006DF4(&qword_100292F08);
  sub_1000FCF84(v0, (_QWORD *)((char *)v7 + *(int *)(v9 + 44)));
  v10 = *(_QWORD *)(v0 + 8);
  v11 = *(_BYTE *)(v0 + 16);
  v18[0] = *(_QWORD *)v0;
  v18[1] = v10;
  v19 = v11;
  sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v20);
  LOBYTE(v18[0]) = v20;
  sub_1000FF1C0(v0, (uint64_t)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(unsigned __int8 *)(v2 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_10026AFE8, v13 + v3, v12 | 7);
  sub_1000FF2C8((uint64_t)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  v15 = sub_100012334(&qword_100292F10, &qword_100292F00, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.onChange<A>(of:initial:_:)(v18, 0, sub_1000FF30C, v14, v4, &type metadata for Bool, v15, &protocol witness table for Bool);
  swift_release(v14);
  return sub_10000A020((uint64_t)v7, &qword_100292F00);
}

uint64_t sub_1000FCF84@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  id v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[7];
  unsigned __int8 v100;
  _BYTE v101[7];
  unsigned __int8 v102;
  _BYTE v103[7];
  unsigned __int8 v104;
  _BYTE v105[7];
  unsigned __int8 v106;
  _BYTE v107[7];
  unsigned __int8 v108;
  _BYTE v109[7];
  unsigned __int8 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  _BYTE v125[7];
  uint64_t v126;
  char v127;
  _BYTE v128[7];
  uint64_t v129;
  char v130;
  _BYTE v131[7];
  uint64_t v132;
  char v133;
  _BYTE v134[7];
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  unsigned __int8 v143;
  uint64_t v144;
  unsigned __int8 v145;
  uint64_t v146;
  unsigned __int8 v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;

  v94 = a2;
  v82 = type metadata accessor for RoundTranslationActionButtonStyle(0);
  __chkstk_darwin(v82);
  v4 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100006DF4(&qword_100292F20);
  v77 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v76 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100292F28);
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  __chkstk_darwin(v6);
  v78 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100006DF4(&qword_100292F30);
  v8 = __chkstk_darwin(v84);
  v85 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v86 = (char *)&v75 - v10;
  v83 = sub_100006DF4(&qword_100292F38);
  v11 = __chkstk_darwin(v83);
  v93 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v92 = (char *)&v75 - v14;
  if (*(_BYTE *)(a1 + 17))
    v15 = INFINITY;
  else
    v15 = 1.5;
  if (*(_BYTE *)(a1 + 17))
    v16 = 1.5;
  else
    v16 = INFINITY;
  v17 = static Alignment.center.getter(v13);
  v20 = sub_1000193C4(0.0, 1, 0.0, 1, v15, 0, 0.0, 1, (uint64_t)&v138, 0.0, 1, v16, 0, v17, v18);
  v21 = v139;
  v96 = v138;
  v97 = v140;
  v22 = v141;
  v98 = v142;
  v23 = v143;
  v24 = v145;
  v87 = v144;
  v88 = v146;
  v25 = v147;
  v26 = v149;
  v91 = v150;
  v89 = v148;
  v90 = v151;
  if (*(_BYTE *)(a1 + 18))
  {
    if (*(_BYTE *)(a1 + 18) == 1)
    {
      v27 = objc_msgSend((id)objc_opt_self(UIColor), "separatorColor");
      *((_QWORD *)&v95 + 1) = Color.init(uiColor:)(v27);
    }
    else
    {
      v28 = v139;
      v29 = static Color.translateAccentColor.getter(v19);
      *((_QWORD *)&v95 + 1) = Color.opacity(_:)(v29, 0.35);
      v30 = v29;
      v21 = v28;
      swift_release(v30);
    }
  }
  else
  {
    *((_QWORD *)&v95 + 1) = static Color.appBackgroundColor.getter(v20);
  }
  *(_QWORD *)&v95 = swift_getKeyPath(&unk_1001EFA00);
  v110 = v21;
  v108 = v22;
  v106 = v23;
  v104 = v24;
  v102 = v25;
  v100 = v26;
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(_QWORD *)(a1 + 32);
  __chkstk_darwin(v95);
  v73 = a1;
  swift_retain(v32);
  v33 = sub_100006DF4(&qword_100292F40);
  v34 = sub_10001B6DC(&qword_100292F48, &qword_100292F40, (void (*)(void))sub_1000FF378);
  v35 = v76;
  Button.init(action:label:)(v31, v32, sub_1000FF370, &v72, v33, v34);
  LOBYTE(v33) = *(_BYTE *)(a1 + 18);
  v36 = *(_BYTE *)(a1 + 19);
  v119 = 0x3FF0000000000000;
  v37 = sub_100048210();
  ScaledMetric.init(wrappedValue:)(&v119, &type metadata for CGFloat, v37);
  v38 = v82;
  v4[*(int *)(v82 + 20)] = v33;
  v4[*(int *)(v38 + 24)] = v36;
  v39 = sub_100012334(&qword_100292F60, &qword_100292F20, (uint64_t)&protocol conformance descriptor for Button<A>);
  v40 = sub_100007D5C(&qword_100292F68, type metadata accessor for RoundTranslationActionButtonStyle, (uint64_t)&protocol conformance descriptor for RoundTranslationActionButtonStyle);
  v42 = v78;
  v41 = v79;
  View.buttonStyle<A>(_:)(v4, v79, v38, v39, v40);
  sub_1000FF3DC((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v35, v41);
  v119 = v41;
  v120 = v38;
  v121 = v39;
  v122 = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v119, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v44 = (uint64_t)v85;
  v45 = v81;
  View.accessibilityIdentifier(_:)(0xD000000000000017, 0x80000001001FD630, v81, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v45);
  v46 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001001FD650);
  LOWORD(v74) = 256;
  v73 = 0;
  v47 = Text.init(_:tableName:bundle:comment:)(v46);
  v49 = v48;
  v51 = v50;
  v53 = v52 & 1;
  v54 = (uint64_t)v86;
  ModifiedContent<>.accessibility(label:)();
  sub_10001B9E8(v47, v49, v53);
  swift_bridgeObjectRelease(v51);
  sub_10000A020(v44, &qword_100292F30);
  type metadata accessor for LanguageFlipperBindingView(0);
  v55 = (uint64_t)v92;
  v56 = &v92[*(int *)(v83 + 52)];
  sub_100006DF4(&qword_100292E40);
  State.wrappedValue.getter(v56);
  sub_1000110A4(v54, v55, &qword_100292F30);
  LOBYTE(v44) = v110;
  LODWORD(v81) = v110;
  v57 = v108;
  LODWORD(v82) = v108;
  LOBYTE(v51) = v106;
  LODWORD(v83) = v106;
  LOBYTE(v56) = v104;
  LODWORD(v84) = v104;
  LOBYTE(v54) = v102;
  LODWORD(v85) = v102;
  LOBYTE(v33) = v100;
  LODWORD(v86) = v100;
  v58 = v93;
  sub_10000B074(v55, v93, &qword_100292F38);
  *(_QWORD *)&v111 = v96;
  BYTE8(v111) = v44;
  *(_DWORD *)((char *)&v111 + 9) = *(_DWORD *)v109;
  HIDWORD(v111) = *(_DWORD *)&v109[3];
  *(_QWORD *)&v112 = v97;
  BYTE8(v112) = v57;
  *(_DWORD *)((char *)&v112 + 9) = *(_DWORD *)v107;
  HIDWORD(v112) = *(_DWORD *)&v107[3];
  *(_QWORD *)&v113 = v98;
  BYTE8(v113) = v51;
  HIDWORD(v113) = *(_DWORD *)&v105[3];
  *(_DWORD *)((char *)&v113 + 9) = *(_DWORD *)v105;
  v60 = v87;
  v59 = v88;
  *(_QWORD *)&v114 = v87;
  BYTE8(v114) = (_BYTE)v56;
  HIDWORD(v114) = *(_DWORD *)&v103[3];
  *(_DWORD *)((char *)&v114 + 9) = *(_DWORD *)v103;
  *(_QWORD *)&v115 = v88;
  BYTE8(v115) = v54;
  *(_DWORD *)((char *)&v115 + 9) = *(_DWORD *)v101;
  HIDWORD(v115) = *(_DWORD *)&v101[3];
  v61 = v89;
  *(_QWORD *)&v116 = v89;
  BYTE8(v116) = v33;
  *(_DWORD *)((char *)&v116 + 9) = *(_DWORD *)v99;
  HIDWORD(v116) = *(_DWORD *)&v99[3];
  v62 = v90;
  v63 = v91;
  *(_QWORD *)&v117 = v91;
  *((_QWORD *)&v117 + 1) = v90;
  v64 = v94;
  v118 = v95;
  v65 = v114;
  v94[2] = v113;
  v64[3] = v65;
  v66 = v112;
  *v64 = v111;
  v64[1] = v66;
  v67 = v115;
  v68 = v116;
  v69 = v118;
  v64[6] = v117;
  v64[7] = v69;
  v64[4] = v67;
  v64[5] = v68;
  v70 = sub_100006DF4(&qword_100292F70);
  sub_10000B074(v58, (uint64_t)v64 + *(int *)(v70 + 48), &qword_100292F38);
  sub_1000FF418((uint64_t)&v111);
  sub_10000A020(v55, &qword_100292F38);
  sub_10000A020(v58, &qword_100292F38);
  v119 = v96;
  LOBYTE(v120) = v81;
  *(_DWORD *)((char *)&v120 + 1) = *(_DWORD *)v109;
  HIDWORD(v120) = *(_DWORD *)&v109[3];
  v121 = v97;
  LOBYTE(v122) = v82;
  *(_DWORD *)((char *)&v122 + 1) = *(_DWORD *)v107;
  HIDWORD(v122) = *(_DWORD *)&v107[3];
  v123 = v98;
  v124 = v83;
  *(_DWORD *)&v125[3] = *(_DWORD *)&v105[3];
  *(_DWORD *)v125 = *(_DWORD *)v105;
  v126 = v60;
  v127 = v84;
  *(_DWORD *)&v128[3] = *(_DWORD *)&v103[3];
  *(_DWORD *)v128 = *(_DWORD *)v103;
  v129 = v59;
  v130 = (char)v85;
  *(_DWORD *)&v131[3] = *(_DWORD *)&v101[3];
  *(_DWORD *)v131 = *(_DWORD *)v101;
  v132 = v61;
  v133 = (char)v86;
  *(_DWORD *)v134 = *(_DWORD *)v99;
  *(_DWORD *)&v134[3] = *(_DWORD *)&v99[3];
  v135 = v63;
  v136 = v62;
  v137 = v95;
  return sub_1000FF448((uint64_t)&v119);
}

double sub_1000FD7A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v4 = Image.init(systemName:)(0xD000000000000013, 0x80000001001FD670);
  v5 = *(unsigned __int8 *)(a1 + 17);
  v6 = ((double (*)(void))static UnitPoint.center.getter)();
  v8 = v7;
  type metadata accessor for LanguageFlipperBindingView(0);
  sub_100006DF4(&qword_100292F18);
  v9 = State.wrappedValue.getter(&v17);
  if (v5)
    v10 = 0.0;
  else
    v10 = 1.57079633;
  v11 = v17;
  if (v5)
    v12 = 0.0;
  else
    v12 = 1.0;
  if (v5)
    v13 = 1.0;
  else
    v13 = 0.0;
  v14 = static UnitPoint.center.getter(v9);
  *(_QWORD *)a2 = v4;
  *(double *)(a2 + 8) = v10;
  *(double *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v11;
  *(double *)(a2 + 40) = v13;
  *(double *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = 0;
  *(double *)(a2 + 64) = v14;
  *(_QWORD *)(a2 + 72) = v15;
  result = 0.0;
  *(_OWORD *)(a2 + 80) = xmmword_1001EF9E0;
  return result;
}

double sub_1000FD8A4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v14 = &v19[-v13];
  if (*a1 != *a2)
  {
    UUID.init()(v11);
    type metadata accessor for LanguageFlipperBindingView(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v14, v6);
    v15 = sub_100006DF4(&qword_100292E40);
    State.wrappedValue.setter(v10, v15);
    v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v14, v6);
    v17 = __chkstk_darwin(v16);
    *(_QWORD *)&v19[-16] = a3;
    v18 = static Animation.default.getter(v17);
    withAnimation<A>(_:_:)(v18, sub_1000FF358);
    *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  }
  return result;
}

void sub_1000FD9F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  uint64_t v7;
  double v8;
  _QWORD v9[3];
  double v10;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for LanguageFlipperBindingView(0) + 40));
  v2 = *v1;
  v3 = v1[1];
  swift_retain(v3);
  v4 = sub_100006DF4(&qword_100292F18);
  v5 = State.wrappedValue.getter(&v10);
  v6 = Angle.animatableData.getter(v5, 3.14159265);
  v8 = Angle.animatableData.getter(v7, v10);
  Angle.animatableData.setter(v6 + v8);
  *(double *)v9 = v10;
  v9[1] = v2;
  v9[2] = v3;
  State.wrappedValue.setter(v9, v4);
  swift_release(v3);
}

uint64_t property wrapper backing initializer of RoundTranslationActionButtonStyle.scale(double a1)
{
  unint64_t v1;
  double v3;

  v3 = a1;
  v1 = sub_100048210();
  return ScaledMetric.init(wrappedValue:)(&v3, &type metadata for CGFloat, v1);
}

uint64_t RoundTranslationActionButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  _QWORD *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  double v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[3];

  v61 = a1;
  v53 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100006DF4(&qword_100292D28);
  __chkstk_darwin(v50);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006DF4(&qword_100292D30);
  __chkstk_darwin(v52);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100006DF4(&qword_100292D38);
  __chkstk_darwin(v56);
  v54 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100006DF4(&qword_100292D40);
  __chkstk_darwin(v58);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100006DF4(&qword_100292D48);
  __chkstk_darwin(v57);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100006DF4(&qword_100292D50);
  v13 = __chkstk_darwin(v60);
  v59 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v13);
  v55 = type metadata accessor for RoundTranslationActionButtonStyle(0);
  v15 = *(int *)(v55 + 20);
  if (*(_BYTE *)(v1 + v15) == 2)
    v16 = 32.0;
  else
    v16 = 36.0;
  v17 = sub_100006DF4(&qword_10028CE48);
  ScaledMetric.wrappedValue.getter(v62, v17);
  v18 = v16 * *(double *)v62;
  v19 = ScaledMetric.wrappedValue.getter(v62, v17);
  v20 = v16 * *(double *)v62;
  v21 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(v62, *(_QWORD *)&v18, 0, *(_QWORD *)&v20, 0, v21, v22);
  v23 = v51;
  v24 = v53;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v5, v3, v53);
  v25 = &v5[*(int *)(v50 + 36)];
  v26 = v62[1];
  *(_OWORD *)v25 = v62[0];
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v62[2];
  v27 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v3, v24);
  v28 = static Color.translateAccentColor.getter(v27);
  KeyPath = swift_getKeyPath(&unk_1001EFA00);
  sub_10000B074((uint64_t)v5, (uint64_t)v7, &qword_100292D28);
  v30 = (uint64_t *)&v7[*(int *)(v52 + 36)];
  *v30 = KeyPath;
  v30[1] = v28;
  v31 = v15;
  v32 = sub_10000A020((uint64_t)v5, &qword_100292D28);
  if (*(_BYTE *)(v1 + v15))
  {
    if (*(_BYTE *)(v1 + v15) == 1)
    {
      v34 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemGroupedBackgroundColor");
      v35 = Color.init(uiColor:)(v34);
      v36 = v35;
    }
    else
    {
      v37 = static Color.translateAccentColor.getter(v32);
      v36 = Color.opacity(_:)(v37, 0.35);
      swift_release(v37);
    }
  }
  else
  {
    v35 = static Color.appBackgroundColor.getter(v33);
    v36 = v35;
  }
  v38 = (uint64_t)v54;
  v39 = static Edge.Set.all.getter(v35);
  sub_10000B074((uint64_t)v7, v38, &qword_100292D30);
  v40 = v38 + *(int *)(v56 + 36);
  *(_QWORD *)v40 = v36;
  *(_BYTE *)(v40 + 8) = v39;
  v41 = sub_10000A020((uint64_t)v7, &qword_100292D30);
  if (*(_BYTE *)(v1 + v31) == 2)
    v42 = static Color.black.getter(v41);
  else
    v42 = static Color.clear.getter(v41);
  v43 = v42;
  v44 = static Edge.Set.all.getter(v42);
  sub_10000B074(v38, (uint64_t)v10, &qword_100292D38);
  v45 = &v10[*(int *)(v58 + 36)];
  *(_QWORD *)v45 = v43;
  v45[8] = v44;
  sub_10000A020(v38, &qword_100292D38);
  sub_10000B074((uint64_t)v10, (uint64_t)v12, &qword_100292D40);
  *(_WORD *)&v12[*(int *)(v57 + 36)] = 256;
  sub_10000A020((uint64_t)v10, &qword_100292D40);
  if (*(_BYTE *)(v1 + *(int *)(v55 + 24)))
    v46 = 1.0;
  else
    v46 = 0.0;
  v47 = v59;
  sub_10000B074((uint64_t)v12, v59, &qword_100292D48);
  *(double *)(v47 + *(int *)(v60 + 36)) = v46;
  sub_10000A020((uint64_t)v12, &qword_100292D48);
  return sub_1000110A4(v47, v61, &qword_100292D50);
}

uint64_t type metadata accessor for RoundTranslationActionButtonStyle(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100292DB0, (uint64_t)&nominal type descriptor for RoundTranslationActionButtonStyle);
}

uint64_t sub_1000FDFF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000FE020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000FE048(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000FE070(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000FE098(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of RoundTranslationActionButtonStyle.makeBody(configuration:)>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for RoundTranslationActionButtonStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028CE48);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t destroy for RoundTranslationActionButtonStyle(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_10028CE48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for RoundTranslationActionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for RoundTranslationActionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for RoundTranslationActionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for RoundTranslationActionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100006DF4(&qword_10028CE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoundTranslationActionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FE324);
}

uint64_t sub_1000FE324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100006DF4(&qword_10028CE48);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RoundTranslationActionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FE3C0);
}

uint64_t sub_1000FE3C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_10028CE48);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

void sub_1000FE43C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000481B8(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1001EFA98;
    v4[2] = &unk_1001EFAB0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1000FE4B8()
{
  return sub_10001B6DC(&qword_100292DF0, &qword_100292D50, (void (*)(void))sub_1000FE4EC);
}

unint64_t sub_1000FE4EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292DF8;
  if (!qword_100292DF8)
  {
    v1 = sub_1000070BC(&qword_100292D48);
    sub_1000FE570();
    sub_100012334(&qword_100292E20, &qword_100292E28, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292DF8);
  }
  return result;
}

unint64_t sub_1000FE570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292E00;
  if (!qword_100292E00)
  {
    v1 = sub_1000070BC(&qword_100292D40);
    sub_1000FE5F4();
    sub_100012334(&qword_10028E158, &qword_10028E160, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292E00);
  }
  return result;
}

unint64_t sub_1000FE5F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292E08;
  if (!qword_100292E08)
  {
    v1 = sub_1000070BC(&qword_100292D38);
    sub_1000FE678();
    sub_100012334(&qword_10028E158, &qword_10028E160, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292E08);
  }
  return result;
}

unint64_t sub_1000FE678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292E10;
  if (!qword_100292E10)
  {
    v1 = sub_1000070BC(&qword_100292D30);
    sub_1000FE6FC();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292E10);
  }
  return result;
}

unint64_t sub_1000FE6FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292E18;
  if (!qword_100292E18)
  {
    v1 = sub_1000070BC(&qword_100292D28);
    sub_100007D5C((unint64_t *)&qword_10028BD48, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292E18);
  }
  return result;
}

uint64_t destroy for LanguageFlipperView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 16));
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for LanguageFlipperView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for LanguageFlipperView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t assignWithTake for LanguageFlipperView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for LanguageFlipperView()
{
  return &type metadata for LanguageFlipperView;
}

uint64_t storeEnumTagSinglePayload for LanguageFlipperView.Context(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000FE938 + 4 * byte_1001EF9F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000FE96C + 4 * byte_1001EF9F0[v4]))();
}

uint64_t sub_1000FE96C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FE974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FE97CLL);
  return result;
}

uint64_t sub_1000FE988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FE990);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000FE994(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FE99C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LanguageFlipperView.Context()
{
  return &type metadata for LanguageFlipperView.Context;
}

unint64_t sub_1000FE9BC()
{
  unint64_t result;

  result = qword_100292E30;
  if (!qword_100292E30)
  {
    result = swift_getWitnessTable(&unk_1001EFB2C, &type metadata for LanguageFlipperView.Context);
    atomic_store(result, (unint64_t *)&qword_100292E30);
  }
  return result;
}

uint64_t sub_1000FEA00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002146D4, 1);
}

uint64_t sub_1000FEA10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000FEA3C()
{
  uint64_t v0;

  return sub_1000FCD20(v0 + 16);
}

uint64_t type metadata accessor for LanguageFlipperBindingView(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_100292EA0, (uint64_t)&nominal type descriptor for LanguageFlipperBindingView);
}

uint64_t sub_1000FEA58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *(_QWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v9 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v9;
    v10 = *(int *)(a3 + 36);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    swift_retain(v4);
    swift_retain(v8);
    v15 = swift_retain(v9);
    v14(v11, v12, v13, v15);
    v16 = *(int *)(sub_100006DF4(&qword_100292E40) + 28);
    v17 = *(_QWORD *)(v12 + v16);
    *(_QWORD *)(v11 + v16) = v17;
    v18 = *(int *)(a3 + 40);
    v19 = (_QWORD *)(v7 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v4 = v20[1];
    *v19 = *v20;
    v19[1] = v4;
    swift_retain(v17);
  }
  swift_retain(v4);
  return v7;
}

double sub_1000FEB60(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[4]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = sub_100006DF4(&qword_100292E40);
  swift_release(*(_QWORD *)&v4[*(int *)(v6 + 28)]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 40) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000FEBE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
  swift_retain(v6);
  swift_retain(v7);
  v14 = swift_retain(v8);
  v13(v10, v11, v12, v14);
  v15 = *(int *)(sub_100006DF4(&qword_100292E40) + 28);
  v16 = *(_QWORD *)(v11 + v15);
  *(_QWORD *)(v10 + v15) = v16;
  v17 = *(int *)(a3 + 40);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain(v16);
  swift_retain(v20);
  return a1;
}

uint64_t *sub_1000FECC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a1 + 18) = *((_BYTE *)a2 + 18);
  *((_BYTE *)a1 + 19) = *((_BYTE *)a2 + 19);
  v10 = a2[4];
  v11 = a1[4];
  a1[3] = a2[3];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(int *)(a3 + 36);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(sub_100006DF4(&qword_100292E40) + 28);
  v17 = *(_QWORD *)(v13 + v16);
  v18 = *(_QWORD *)(v14 + v16);
  *(_QWORD *)(v13 + v16) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *(int *)(a3 + 40);
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v20[1];
  v23 = v21[1];
  v20[1] = v23;
  swift_retain(v23);
  swift_release(v22);
  return a1;
}

uint64_t sub_1000FEDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = sub_100006DF4(&qword_100292E40);
  *(_QWORD *)(v7 + *(int *)(v10 + 28)) = *(_QWORD *)(v8 + *(int *)(v10 + 28));
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t *sub_1000FEE88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a1 + 18) = *((_BYTE *)a2 + 18);
  *((_BYTE *)a1 + 19) = *((_BYTE *)a2 + 19);
  v8 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_release(v8);
  v9 = *(int *)(a3 + 36);
  v10 = (uint64_t)a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(sub_100006DF4(&qword_100292E40) + 28);
  v14 = *(_QWORD *)(v10 + v13);
  *(_QWORD *)(v10 + v13) = *(_QWORD *)(v11 + v13);
  swift_release(v14);
  v15 = *(int *)(a3 + 40);
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v16[1];
  v16[1] = v17[1];
  swift_release(v18);
  return a1;
}

uint64_t sub_1000FEF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FEF8C);
}

uint64_t sub_1000FEF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_100292E40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_1000FF00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FF018);
}

uint64_t sub_1000FF018(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_100292E40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

void sub_1000FF090(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1001EFBD0;
  v4[1] = &unk_1001EFAB0;
  v4[2] = &unk_1001EFA98;
  v4[3] = &unk_1001EFAB0;
  v4[4] = (char *)&value witness table for () + 64;
  sub_1000FF130(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = &unk_1001EFBE8;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_1000FF130(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100292EB0)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100292EB0);
  }
}

uint64_t sub_1000FF184()
{
  return sub_100007D5C(&qword_100292EF8, type metadata accessor for LanguageFlipperBindingView, (uint64_t)&unk_1001EFC00);
}

uint64_t sub_1000FF1B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002146FC, 1);
}

uint64_t sub_1000FF1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LanguageFlipperBindingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FF204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for LanguageFlipperBindingView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 8));
  swift_release(*(_QWORD *)(v7 + 32));
  v8 = v7 + *(int *)(v1 + 36);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100006DF4(&qword_100292E40);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 40) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000FF2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LanguageFlipperBindingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1000FF30C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LanguageFlipperBindingView(0) - 8) + 80);
  return sub_1000FD8A4(a1, a2, v2 + ((v5 + 16) & ~v5));
}

void sub_1000FF358()
{
  uint64_t v0;

  sub_1000FD9F8(*(_QWORD *)(v0 + 16));
}

double sub_1000FF370@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000FD7A8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000FF378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100292F50;
  if (!qword_100292F50)
  {
    v1 = sub_1000070BC(&qword_100292F58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100292F50);
  }
  return result;
}

uint64_t sub_1000FF3DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundTranslationActionButtonStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FF418(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 112);
  swift_retain(*(_QWORD *)(a1 + 120));
  swift_retain(v2);
  return a1;
}

uint64_t sub_1000FF448(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 120);
  swift_release(*(_QWORD *)(a1 + 112));
  swift_release(v2);
  return a1;
}

uint64_t sub_1000FF47C()
{
  _QWORD v1[4];

  v1[0] = sub_1000070BC(&qword_100292F00);
  v1[1] = &type metadata for Bool;
  v1[2] = sub_100012334(&qword_100292F10, &qword_100292F00, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

id sub_1000FF4F4(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  char *v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  objc_super v19;

  v9 = &v4[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType];
  *(_QWORD *)v9 = 0;
  v9[8] = -1;
  v10 = &v4[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_languageDownloadPresenter];
  *((_QWORD *)v10 + 1) = 0;
  swift_unknownObjectWeakInit(v10, 0);
  v11 = objc_allocWithZone((Class)UIStackView);
  v12 = v4;
  v13 = objc_msgSend(v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_stack] = v13;
  v14 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_titleLabel] = v14;
  v15 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_descriptionLabel] = v15;
  v16 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_button] = v16;

  v19.receiver = v12;
  v19.super_class = (Class)type metadata accessor for LegacyInlineTranslationTabErrorView();
  v17 = objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
  sub_1000FF734();

  return v17;
}

id sub_1000FF734()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSString *v9;
  id v10;
  id v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSString *v22;
  id v23;
  id v24;
  double v25;
  double v26;
  id v27;
  id v28;
  id v29;
  id v30;
  NSString v31;
  id v32;
  id v33;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_stack;
  v38 = OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_stack;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_stack], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_titleLabel;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_titleLabel], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v41 = OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_descriptionLabel;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_descriptionLabel], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v39 = OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_button;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_button], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v0[v1], "setAxis:", 1);
  objc_msgSend(*(id *)&v0[v1], "setDistribution:", 3);
  objc_msgSend(*(id *)&v0[v1], "setAlignment:", 3);
  objc_msgSend(*(id *)&v0[v1], "setSpacing:", 8.0);
  objc_msgSend(*(id *)&v0[v1], "setLayoutMarginsRelativeArrangement:", 1);
  objc_msgSend(*(id *)&v0[v1], "setLayoutMargins:", 0.0, 8.0, 0.0, 8.0);
  objc_msgSend(*(id *)&v0[v1], "setInsetsLayoutMarginsFromSafeArea:", 0);
  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[v1]);
  objc_msgSend(*(id *)&v0[v2], "setTextAlignment:", 1);
  v40 = v2;
  objc_msgSend(*(id *)&v0[v2], "setNumberOfLines:", 0);
  v3 = *(void **)&v0[v2];
  v4 = (void *)objc_opt_self(UIFontDescriptor);
  v5 = v3;
  v6 = objc_msgSend(v4, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle3, 0);
  v37 = (id)objc_opt_self(UIFont);
  objc_msgSend(v6, "pointSize");
  v7 = objc_msgSend(v37, "systemFontOfSize:weight:");
  v8 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle3);
  v36 = (id)objc_opt_self(UITraitCollection);
  v9 = UIContentSizeCategoryExtraExtraLarge;
  v10 = objc_msgSend(v36, "traitCollectionWithPreferredContentSizeCategory:", v9);
  v11 = objc_msgSend(v4, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle3, v10);

  objc_msgSend(v11, "pointSize");
  v13 = v12;

  v14 = objc_msgSend(v8, "scaledFontForFont:maximumPointSize:", v7, v13);
  objc_msgSend(v5, "setFont:", v14);

  v15 = *(void **)&v0[v40];
  v35 = (id)objc_opt_self(UIColor);
  v16 = v15;
  v17 = objc_msgSend(v35, "labelColor");
  objc_msgSend(v16, "setTextColor:", v17);

  objc_msgSend(*(id *)&v0[v40], "setAdjustsFontSizeToFitWidth:", 1);
  objc_msgSend(*(id *)&v0[v41], "setTextAlignment:", 1);
  objc_msgSend(*(id *)&v0[v41], "setNumberOfLines:", 0);
  v18 = *(id *)&v0[v41];
  v19 = objc_msgSend(v4, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, 0);
  objc_msgSend(v19, "pointSize");
  v20 = objc_msgSend(v37, "systemFontOfSize:weight:");
  v21 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  v22 = v9;
  v23 = objc_msgSend(v36, "traitCollectionWithPreferredContentSizeCategory:", v22);
  v24 = objc_msgSend(v4, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, v23);

  objc_msgSend(v24, "pointSize");
  v26 = v25;

  v27 = objc_msgSend(v21, "scaledFontForFont:maximumPointSize:", v20, v26);
  objc_msgSend(v18, "setFont:", v27);

  v28 = *(id *)&v0[v41];
  v29 = objc_msgSend(v35, "secondaryLabelColor");
  objc_msgSend(v28, "setTextColor:", v29);

  objc_msgSend(*(id *)&v0[v41], "setAdjustsFontSizeToFitWidth:", 1);
  objc_msgSend(*(id *)&v0[v41], "setMinimumScaleFactor:", 0.01);
  objc_msgSend(*(id *)&v0[v39], "setHidden:", 1);
  v30 = *(id *)&v0[v39];
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v35, "colorNamed:", v31);

  objc_msgSend(v30, "setTitleColor:forState:", v32, 0);
  v33 = *(id *)&v0[v38];
  sub_1001DB5F8(v33);

  objc_msgSend(*(id *)&v0[v38], "addArrangedSubview:", *(_QWORD *)&v0[v40]);
  objc_msgSend(*(id *)&v0[v38], "addArrangedSubview:", *(_QWORD *)&v0[v41]);
  return objc_msgSend(*(id *)&v0[v38], "addArrangedSubview:", *(_QWORD *)&v0[v39]);
}

void sub_1000FFD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  NSString v41;
  id v42;
  NSString v43;
  id v44;
  char v45;
  void *v46;
  id v47;
  id v48;
  Swift::String v49;
  Swift::String v50;
  id v51;
  Swift::String v52;
  Swift::String v53;
  id v54;
  Swift::String v55;
  Swift::String v56;
  id v57;
  NSString v58;
  void *v59;
  id v60;
  NSString v61;
  uint64_t v62;
  id v63;
  NSString v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  void *object;
  uint64_t countAndFlagsBits;
  id v71;
  int v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v65 - v7;
  v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType + 8);
  if (v9 != 255)
  {
    v10 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType);
    v72 = *(unsigned __int8 *)(v1
                             + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType
                             + 8);
    if ((v9 & 1) != 0)
    {
      v46 = (void *)objc_opt_self(NSBundle);
      v47 = v10;
      v48 = objc_msgSend(v46, "mainBundle");
      v75._countAndFlagsBits = 0xD000000000000019;
      v75._object = (void *)0x80000001001FD730;
      v49._countAndFlagsBits = 0x43495645445F4E4FLL;
      v49._object = (void *)0xEF454C5449545F45;
      v50._countAndFlagsBits = 0;
      v50._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v49, (Swift::String_optional)0, (NSBundle)v48, v50, v75);

      v51 = objc_msgSend(v46, "mainBundle");
      v52._countAndFlagsBits = 0xD000000000000015;
      v76._object = (void *)0xE000000000000000;
      v52._object = (void *)0x80000001001FD750;
      v53._countAndFlagsBits = 0;
      v53._object = (void *)0xE000000000000000;
      v76._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v52, (Swift::String_optional)0, (NSBundle)v51, v53, v76);

      v54 = objc_msgSend(v46, "mainBundle");
      v77._object = (void *)0xE000000000000000;
      v55._countAndFlagsBits = 0x43495645445F4E4FLL;
      v55._object = (void *)0xEE004B4E494C5F45;
      v56._countAndFlagsBits = 0;
      v56._object = (void *)0xE000000000000000;
      v77._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v55, (Swift::String_optional)0, (NSBundle)v54, v56, v77);

      v57 = *(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_titleLabel);
      v58 = String._bridgeToObjectiveC()();
      v59 = v10;
      objc_msgSend(v57, "setText:", v58, swift_bridgeObjectRelease().n128_f64[0]);

      v60 = objc_retain(*(id *)(v1
                              + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_descriptionLabel));
      v61 = String._bridgeToObjectiveC()();
      objc_msgSend(v60, "setText:", v61, swift_bridgeObjectRelease().n128_f64[0]);

      v62 = OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_button;
      v63 = *(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_button);
      v64 = String._bridgeToObjectiveC()();
      objc_msgSend(v63, "setTitle:forState:", v64, 0, swift_bridgeObjectRelease().n128_f64[0]);

      objc_msgSend(*(id *)(v1 + v62), "addTarget:action:forControlEvents:", v1, "onDeviceLinkTapped", 0x2000);
      objc_msgSend(*(id *)(v1 + v62), "setHidden:", 0);
      sub_1000E05B8(v59, v72);
    }
    else
    {
      v11 = (void *)objc_opt_self(NSBundle);
      v68 = v11;
      v12 = v10;
      v13 = objc_msgSend(v11, "mainBundle");
      v73._countAndFlagsBits = 0xD000000000000018;
      v73._object = (void *)0x80000001001FD770;
      v14._object = (void *)0x80000001001FBCF0;
      v14._countAndFlagsBits = 0xD000000000000010;
      v15._countAndFlagsBits = 0;
      v15._object = (void *)0xE000000000000000;
      v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v73);
      object = v16._object;
      countAndFlagsBits = v16._countAndFlagsBits;

      v17 = objc_msgSend(v12, "sourceLocale");
      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v17);

      static Locale.current.getter(v18);
      v19 = Locale.sqDisplayName(context:in:)(3, v6);
      v21 = v20;
      v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      v22(v6, v2);
      v22(v8, v2);
      if (v21)
        v23 = v19;
      else
        v23 = 0x45474155474E414CLL;
      v71 = v10;
      if (v21)
        v24 = v21;
      else
        v24 = 0xE800000000000000;
      v66 = v24;
      v67 = v23;
      v25 = objc_msgSend(v12, "targetLocale");
      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v25);

      static Locale.current.getter(v26);
      v27 = Locale.sqDisplayName(context:in:)(3, v6);
      v29 = v28;
      v22(v6, v2);
      v22(v8, v2);
      if (v29)
        v30 = v27;
      else
        v30 = 0x45474155474E414CLL;
      if (v29)
        v31 = v29;
      else
        v31 = 0xE800000000000000;
      v32 = objc_msgSend(v68, "mainBundle");
      v33._countAndFlagsBits = 0xD000000000000014;
      v74._countAndFlagsBits = 0xD00000000000001FLL;
      v74._object = (void *)0x80000001001FD790;
      v33._object = (void *)0x80000001001FBD10;
      v34._countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v74);

      v36 = sub_100006DF4(&qword_10028AA70);
      v37 = swift_allocObject(v36, 112, 7);
      *(_OWORD *)(v37 + 16) = xmmword_1001E4D60;
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      v38 = sub_10001244C();
      v39 = v66;
      *(_QWORD *)(v37 + 32) = v67;
      *(_QWORD *)(v37 + 40) = v39;
      *(_QWORD *)(v37 + 96) = &type metadata for String;
      *(_QWORD *)(v37 + 104) = v38;
      *(_QWORD *)(v37 + 64) = v38;
      *(_QWORD *)(v37 + 72) = v30;
      *(_QWORD *)(v37 + 80) = v31;
      String.init(format:_:)(v35._countAndFlagsBits, v35._object, v37);
      swift_bridgeObjectRelease();
      v40 = *(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_titleLabel);
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v40, "setText:", v41, swift_bridgeObjectRelease().n128_f64[0]);

      v42 = objc_retain(*(id *)(v1
                              + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_descriptionLabel));
      v43 = String._bridgeToObjectiveC()();
      objc_msgSend(v42, "setText:", v43, swift_bridgeObjectRelease().n128_f64[0]);

      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_button), "setHidden:", 1);
      v44 = v71;
      v45 = v72;
      sub_1000E05B8(v71, v72);
      sub_1000E05B8(v44, v45);
    }
  }
}

id sub_1001004A0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LegacyInlineTranslationTabErrorView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LegacyInlineTranslationTabErrorView()
{
  return objc_opt_self(_TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView);
}

uint64_t initializeBufferWithCopyOfBuffer for StaticImage(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for StaticImage(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t assignWithTake for StaticImage(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t sub_100100618(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100100620(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyInlineTranslationTabErrorView.ErrorType()
{
  return &type metadata for LegacyInlineTranslationTabErrorView.ErrorType;
}

id sub_100100640(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  NSString v16;
  id v17;
  id v18;
  id v19;
  objc_super v21;

  v6 = OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_confirmationView;
  v7 = objc_allocWithZone((Class)type metadata accessor for ConfirmationView());
  v8 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9 = OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_hintButton;
  *(_QWORD *)&v8[v9] = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 0);
  v10 = OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_layoutContainer;
  *(_QWORD *)&v8[v10] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11 = &v8[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_speakButtonFrame];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[32] = 1;
  swift_unknownObjectWeakInit(&v8[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_delegate], 0);
  v8[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_showsSettingsButton] = 0;
  v12 = &v8[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_languageDownloadPresenter];
  *((_QWORD *)v12 + 1) = 0;
  swift_unknownObjectWeakInit(v12, 0);
  v13 = &v8[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_sourceLocale];
  v14 = type metadata accessor for Locale(0);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(&v8[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_targetLocale], 1, 1, v14);

  if (a2)
  {
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v16 = 0;
  }
  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for LIDConfirmationController(0);
  v17 = objc_msgSendSuper2(&v21, "initWithNibName:bundle:", v16, a3);

  v18 = v17;
  objc_msgSend(v18, "setModalPresentationStyle:", 6);
  v19 = v18;
  objc_msgSend(v19, "setModalTransitionStyle:", 2);

  return v19;
}

void sub_100100940()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  void *object;
  NSString v20;
  void *v21;
  uint64_t v22;
  id v23;
  NSString v24;
  uint64_t v25;
  id v26;
  NSString v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  NSString *v40;
  id v41;
  NSString *v42;
  id v43;
  unint64_t v44;
  id v45;
  NSString v46;
  Class isa;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  uint64_t v70;
  id v71;
  uint64_t countAndFlagsBits;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  char v77[24];
  char v78[24];
  char v79[120];
  Swift::String v80;
  Swift::String v81;

  v1 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v1);
  v3 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(v0, "view");
  if (!v4)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = v4;
  v6 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.11372549, 0.11372549, 0.11372549, 0.49);
  objc_msgSend(v5, "setBackgroundColor:", v6);

  v7 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_layoutContainer];
  v76 = (id)objc_opt_self(UIColor);
  v8 = objc_msgSend(v76, "clearColor");
  objc_msgSend(v7, "setBackgroundColor:", v8);

  objc_msgSend(v7, "setAxis:", 1);
  objc_msgSend(v7, "setDistribution:", 3);
  objc_msgSend(v7, "setAlignment:", 0);
  v75 = v7;
  objc_msgSend(v7, "setSpacing:", 1.17549435e-38);
  v9 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "backgroundTappedWithRecognizer:");
  objc_msgSend(v9, "setDelegate:", v0);
  v10 = objc_msgSend(v0, "view");
  if (!v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = v10;
  v71 = v9;
  objc_msgSend(v10, "addGestureRecognizer:", v9);

  v12 = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_confirmationView];
  v13 = *(void **)(v12 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_titleLabel);
  v14 = (void *)objc_opt_self(NSBundle);
  v15 = v13;
  v16 = objc_msgSend(v14, "mainBundle");
  v80._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0x474E494B41455053;
  v17._object = (void *)0xEE0048434948575FLL;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v80._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v80)._object;

  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setText:", v20, swift_bridgeObjectRelease(object).n128_f64[0]);

  v21 = *(void **)(v12 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button);
  v22 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button;
  v74 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button;
  v23 = v21;
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setTitle:forState:", v24, 0);

  objc_msgSend(*(id *)(v12 + v22), "addTarget:action:forControlEvents:", v0, "optionButtonPressedWithSender:", 64);
  v25 = OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option2Button;
  v26 = *(id *)(v12 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option2Button);
  v27 = String._bridgeToObjectiveC()();
  objc_msgSend(v26, "setTitle:forState:", v27, 0);

  objc_msgSend(*(id *)(v12 + v25), "addTarget:action:forControlEvents:", v0, "optionButtonPressedWithSender:", 64);
  v73 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "init");
  v28 = objc_msgSend(v14, "mainBundle");
  v81._countAndFlagsBits = 0xD00000000000002CLL;
  v81._object = (void *)0x80000001001FD8C0;
  v29._object = (void *)0x80000001001FD8A0;
  v29._countAndFlagsBits = 0xD000000000000010;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v81);
  countAndFlagsBits = v31._countAndFlagsBits;

  v32 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleFootnote, 0);
  v33 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v32, "pointSize");
  v34 = objc_msgSend(v33, "systemFontOfSize:weight:");
  v35 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleFootnote);
  v36 = objc_msgSend(v35, "scaledFontForFont:maximumPointSize:", v34, 1.79769313e308);

  v37 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v37, v79);
  *(_OWORD *)(inited + 16) = xmmword_1001E4D60;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v39 = sub_10000A05C(0, (unint64_t *)&qword_10028C090, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v36;
  *(_QWORD *)(inited + 64) = v39;
  *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
  v40 = NSFontAttributeName;
  v41 = v36;
  v42 = NSForegroundColorAttributeName;
  v43 = objc_msgSend(v76, "lightTextColor");
  *(_QWORD *)(inited + 104) = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  *(_QWORD *)(inited + 80) = v43;
  v44 = sub_1001A4A88(inited);
  v45 = objc_allocWithZone((Class)NSAttributedString);
  v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31._object);
  type metadata accessor for Key(0);
  sub_100101CA4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v48 = objc_msgSend(v45, "initWithString:attributes:", v46, isa, swift_bridgeObjectRelease(v44).n128_f64[0]);

  v49 = v73;
  objc_msgSend(v73, "appendAttributedString:", v48);

  v50 = *(void **)(v12 + v74);
  v51 = (uint64_t)&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_sourceLocale];
  swift_beginAccess(&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_sourceLocale], v78, 0, 0);
  sub_100082758(v51, (uint64_t)v3);
  v52 = v50;
  sub_100101E88(v52, (uint64_t)v3);

  sub_1000A8C7C((uint64_t)v3);
  v53 = *(void **)(v12 + v25);
  v54 = (uint64_t)&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_targetLocale];
  swift_beginAccess(&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_targetLocale], v77, 0, 0);
  sub_100082758(v54, (uint64_t)v3);
  v55 = v53;
  sub_100101E88(v55, (uint64_t)v3);

  sub_1000A8C7C((uint64_t)v3);
  v56 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_hintButton];
  v57 = objc_msgSend(v56, "titleLabel");
  if (v57)
  {
    v58 = v57;
    objc_msgSend(v57, "setTextAlignment:", 1);

  }
  v59 = objc_msgSend(v56, "titleLabel");
  if (v59)
  {
    v60 = v59;
    objc_msgSend(v59, "setNumberOfLines:", 0);

  }
  v61 = objc_msgSend(v56, "titleLabel");
  if (v61)
  {
    v62 = v61;
    objc_msgSend(v61, "setAdjustsFontForContentSizeCategory:", 1);

  }
  objc_msgSend(v56, "setAttributedTitle:forState:", v49, 0);
  v63 = objc_msgSend(v56, "titleLabel");
  if (v63)
  {
    v64 = v63;
    objc_msgSend(v63, "setAdjustsFontSizeToFitWidth:", 1);

  }
  v65 = objc_msgSend(v56, "titleLabel");
  if (v65)
  {
    v66 = v65;
    objc_msgSend(v65, "setMinimumScaleFactor:", 0.1);

  }
  objc_msgSend(v56, "setHidden:", (v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_showsSettingsButton] & 1) == 0);
  objc_msgSend(v56, "addTarget:action:forControlEvents:", v0, "hintTapped", 64);
  v67 = objc_msgSend(v0, "view");
  if (v67)
  {
    v68 = v67;
    v69 = v75;
    objc_msgSend(v67, "addSubview:", v75);

    objc_msgSend(v69, "addArrangedSubview:", v12);
    objc_msgSend(v69, "addArrangedSubview:", v56);
    objc_msgSend(v69, "setCustomSpacing:afterView:", v12, 12.0);

    return;
  }
LABEL_17:
  __break(1u);
}

void sub_100101280()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  Class isa;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_layoutContainer];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_hintButton];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_confirmationView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = objc_msgSend(v3, "titleLabel");
  if (v4)
  {
    v5 = v4;
    sub_1001DB5F8(v4);

  }
  v6 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001E7590;
  v8 = objc_msgSend(v1, "view");
  if (!v8)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "widthAnchor");

  v11 = objc_msgSend(v10, "constraintGreaterThanOrEqualToConstant:", 220.0);
  *(_QWORD *)(v7 + 32) = v11;
  v12 = objc_msgSend(v2, "centerYAnchor");
  v13 = objc_msgSend(v1, "view");
  if (!v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "centerYAnchor");

  v16 = objc_msgSend(v12, "constraintEqualToAnchor:", v15);
  *(_QWORD *)(v7 + 40) = v16;
  v17 = objc_msgSend(v2, "leadingAnchor");
  v18 = objc_msgSend(v1, "view");
  if (!v18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "leadingAnchor");

  v21 = objc_msgSend(v17, "constraintEqualToAnchor:constant:", v20, 24.0);
  *(_QWORD *)(v7 + 48) = v21;
  v22 = objc_msgSend(v1, "view");
  if (v22)
  {
    v23 = v22;
    v24 = (void *)objc_opt_self(NSLayoutConstraint);
    v25 = objc_msgSend(v23, "trailingAnchor");

    v26 = objc_msgSend(v2, "trailingAnchor");
    v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, 24.0);

    *(_QWORD *)(v7 + 56) = v27;
    specialized Array._endMutation()(v28);
    sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v24, "activateConstraints:", isa, swift_bridgeObjectRelease(v7).n128_f64[0]);

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_1001015C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  void *v21;
  Class isa;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  Class v30;
  char *v31;
  uint64_t v32;
  char v33[24];
  char v34[24];

  v3 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v31 - v7;
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v31 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - v13;
  sub_10000A05C(0, (unint64_t *)&qword_1002930B0, NSObject_ptr);
  v32 = v1;
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_confirmationView);
  v16 = *(id *)(v15 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option1Button);
  v17 = static NSObject.== infix(_:_:)(a1, v16);

  if ((v17 & 1) != 0)
  {
    v18 = v32;
    v19 = v32 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_sourceLocale;
    swift_beginAccess(v32 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_sourceLocale, v33, 0, 0);
    sub_100082758(v19, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_1000A8C7C((uint64_t)v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v8, v9);
      Strong = swift_unknownObjectWeakLoadStrong(v18 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_delegate);
      if (Strong)
      {
        v21 = (void *)Strong;
        isa = Locale._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v21, "lidConfirmedWithLocale:", isa);
        swift_unknownObjectRelease(v21);

      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    }
  }
  v23 = *(id *)(v15 + OBJC_IVAR____TtC17SequoiaTranslator16ConfirmationView_option2Button);
  v24 = static NSObject.== infix(_:_:)(a1, v23);

  if ((v24 & 1) != 0)
  {
    v25 = v32;
    v26 = v32 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_targetLocale;
    swift_beginAccess(v32 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_targetLocale, v34, 0, 0);
    sub_100082758(v26, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
    {
      sub_1000A8C7C((uint64_t)v6);
    }
    else
    {
      v27 = v31;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v6, v9);
      v28 = swift_unknownObjectWeakLoadStrong(v25 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_delegate);
      if (v28)
      {
        v29 = (void *)v28;
        v30 = Locale._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v29, "lidConfirmedWithLocale:", v30);
        swift_unknownObjectRelease(v29);

      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v9);
    }
  }
}

uint64_t sub_100101998()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_delegate);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "cancelConfirmation");
    swift_unknownObjectRelease(v2);
  }
  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_languageDownloadPresenter;
  result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_languageDownloadPresenter);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

id sub_100101A50()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LIDConfirmationController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100101B0C()
{
  return type metadata accessor for LIDConfirmationController(0);
}

uint64_t type metadata accessor for LIDConfirmationController(uint64_t a1)
{
  uint64_t result;

  result = qword_100293030;
  if (!qword_100293030)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LIDConfirmationController);
  return result;
}

void sub_100101B50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t v6;

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = "!";
  v4[4] = L"\b";
  v4[5] = &unk_1001EFD10;
  v4[6] = &unk_1001EFD28;
  sub_1000A8A38(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

unint64_t sub_100101CA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028A960;
  if (!qword_10028A960)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1001E6244, v1);
    atomic_store(result, (unint64_t *)&qword_10028A960);
  }
  return result;
}

void sub_100101CEC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);

  v1 = OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_confirmationView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConfirmationView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_hintButton;
  *(_QWORD *)&v0[v2] = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 0);
  v3 = OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_layoutContainer;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v4 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_speakButtonFrame];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_delegate], 0);
  v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_showsSettingsButton] = 0;
  v5 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_languageDownloadPresenter];
  *((_QWORD *)v5 + 1) = 0;
  swift_unknownObjectWeakInit(v5, 0);
  v6 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_sourceLocale];
  v7 = type metadata accessor for Locale(0);
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v8(&v0[OBJC_IVAR____TtC17SequoiaTranslator25LIDConfirmationController_targetLocale], 1, 1, v7);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/LIDConfirmationController.swift", 49, 2, 54, 0);
  __break(1u);
}

uint64_t sub_100101E88(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  void *object;
  __n128 v22;
  void (*v23)(char *, uint64_t, __n128);
  double v24;
  NSString v25;
  uint64_t v26;

  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v26 - v12;
  sub_100082758(a2, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_1000A8C7C((uint64_t)v6);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  v16 = Locale.languageCode.getter(v15);
  if (!v17)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v18 = v16;
  v19 = v17;
  static Locale.current.getter(v16);
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  object = Locale.localizedString(forLanguageCode:)(v20).value._object;
  v22 = swift_bridgeObjectRelease(v19);
  v23 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
  v23(v11, v7, v22);
  if (object)
  {
    v25 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v24 = swift_bridgeObjectRelease(object).n128_u64[0];
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend(a1, "setTitle:forState:", v25, 0, v24);

  return ((uint64_t (*)(char *, uint64_t))v23)(v13, v7);
}

id sub_100102240()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LIDDisambiguationView.Coordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LIDDisambiguationView.Coordinator()
{
  return objc_opt_self(_TtCV17SequoiaTranslator21LIDDisambiguationView11Coordinator);
}

uint64_t sub_1001022A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v15);
  }
  else
  {
    v5 = *a2;
    v6 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain(v5);
    v10 = sub_100006DF4((uint64_t *)&unk_100291480);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v16 = *v9;
      *v8 = *v9;
      swift_retain(v16);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

double sub_100102388(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100006DF4((uint64_t *)&unk_100291480);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_100102400(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)(a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  v9 = sub_100006DF4((uint64_t *)&unk_100291480);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_1001024B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000A020((uint64_t)a1 + v9, (uint64_t *)&unk_100291480);
    v12 = sub_100006DF4((uint64_t *)&unk_100291480);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  return a1;
}

uint64_t sub_10010258C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100006DF4((uint64_t *)&unk_100291480);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_10010263C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000A020((uint64_t)a1 + v8, (uint64_t *)&unk_100291480);
    v11 = sub_100006DF4((uint64_t *)&unk_100291480);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100102714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100102720);
}

uint64_t sub_100102720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100006DF4(&qword_1002930F8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100102798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001027A4);
}

uint64_t sub_1001027A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_100006DF4(&qword_1002930F8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LiveActivityErrorView(uint64_t a1)
{
  uint64_t result;

  result = qword_100293158;
  if (!qword_100293158)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LiveActivityErrorView);
  return result;
}

void sub_100102854(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  sub_1001028C8(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1001028C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100293168)
  {
    v2 = type metadata accessor for OpenURLAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100293168);
  }
}

uint64_t sub_10010291C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002149BC, 1);
}

void sub_10010292C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v4 = *v0;
  v5 = *((_BYTE *)v0 + 8);
  swift_retain(*v0);
  v7 = sub_1000D6114(v6, v5);
  swift_release(v4);
  v8 = sub_10010DC7C();
  swift_release(v7);
  __asm { BR              X10 }
}

uint64_t sub_100102A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(unint64_t, unint64_t))String.LocalizationValue.init(stringLiteral:))(0xD000000000000019, 0x80000001001FDA60);
  static Locale.current.getter(v2);
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))String.init(localized:table:bundle:locale:comment:))(v1, 0, 0, 0, v0, 0, 0, 256);
}

uint64_t sub_100102DD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v17[16];

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *v0;
  v8 = *((_BYTE *)v0 + 8);
  swift_retain(v7);
  v10 = sub_1000D6114(v9, v8);
  swift_release(v7);
  v11 = sub_10010DC7C();
  v12 = swift_release(v10);
  if (v11 == 6)
  {
    v14 = 0x43495645445F4E4FLL;
    v15 = 0xEE004B4E494C5F45;
  }
  else if (v11 == 4)
  {
    v14 = 0x5445535F4E45504FLL;
    v15 = 0xED000053474E4954;
  }
  else
  {
    result = 0;
    if (v11)
      return result;
    v14 = 0x5050415F4E45504FLL;
    v15 = 0xE800000000000000;
  }
  v16 = String.LocalizationValue.init(stringLiteral:)(v14, v15, v12);
  static Locale.current.getter(v16);
  return String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
}

double (*sub_100102F54())()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  double (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for LiveActivityErrorView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = *v0;
  v6 = *(_BYTE *)(v1 + 8);
  swift_retain(v5);
  v8 = sub_1000D6114(v7, v6);
  swift_release(v5);
  v9 = sub_10010DC7C();
  swift_release(v8);
  if (v9 == 6)
  {
    sub_100104140(v1, (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v12 = swift_allocObject(&unk_10026B138, ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4, *(unsigned __int8 *)(v3 + 80) | 7)+ ((v13 + 16) & ~v13);
    v10 = sub_1001041CC;
    goto LABEL_7;
  }
  if (v9 == 4)
  {
    sub_100104140(v1, (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v12 = swift_allocObject(&unk_10026B160, ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4, *(unsigned __int8 *)(v3 + 80) | 7)+ ((v14 + 16) & ~v14);
    v10 = sub_1001041DC;
    goto LABEL_7;
  }
  v10 = 0;
  if (!v9)
  {
    sub_100104140(v1, (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v12 = swift_allocObject(&unk_10026B188, ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4, *(unsigned __int8 *)(v3 + 80) | 7)+ ((v11 + 16) & ~v11);
    v10 = sub_1001042DC;
LABEL_7:
    sub_100104188((uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  }
  return v10;
}

double sub_1001030DC(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OpenURLAction(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for LiveActivityErrorView(0);
  v12 = sub_1000D60E0(v11);
  a2(v12);
  OpenURLAction.callAsFunction(_:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  v13 = *a1;
  LOBYTE(a1) = *((_BYTE *)a1 + 8);
  swift_retain(v13);
  v15 = sub_1000D6114(v14, (char)a1);
  swift_release(v13);
  sub_10010F764(0);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_100103214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  v1 = sub_100006DF4(&qword_100293198);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_1002931A0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v3 = static HorizontalAlignment.center.getter(v5);
  *((_QWORD *)v3 + 1) = 0x4034000000000000;
  v3[16] = 0;
  v8 = sub_100006DF4(&qword_1002931A8);
  v9 = sub_10010338C(v0, &v3[*(int *)(v8 + 44)]);
  v10 = static Edge.Set.top.getter(v9);
  v11 = EdgeInsets.init(_all:)(5.0);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_10000B074((uint64_t)v3, (uint64_t)v7, &qword_100293198);
  v18 = &v7[*(int *)(v4 + 36)];
  *v18 = v10;
  *((double *)v18 + 1) = v11;
  *((_QWORD *)v18 + 2) = v13;
  *((_QWORD *)v18 + 3) = v15;
  *((_QWORD *)v18 + 4) = v17;
  v18[40] = 0;
  v19 = sub_10000A020((uint64_t)v3, &qword_100293198);
  v20 = static Edge.Set.top.getter(v19);
  v21 = sub_100103D40();
  View.scenePadding(_:)(v20, v4, v21);
  return sub_10000A020((uint64_t)v7, &qword_1002931A0);
}

uint64_t sub_10010338C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD v105[13];
  _OWORD v106[13];
  uint64_t v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;

  v104 = a1;
  v101 = a2;
  v2 = type metadata accessor for ButtonBorderShape(0);
  v93 = *(_QWORD *)(v2 - 8);
  v94 = v2;
  __chkstk_darwin(v2);
  v92 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BorderedButtonStyle(0);
  v90 = *(_QWORD *)(v4 - 8);
  v91 = v4;
  __chkstk_darwin(v4);
  v88 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100006DF4(&qword_1002931C0);
  __chkstk_darwin(v80);
  v83 = (uint64_t *)((char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = type metadata accessor for ControlSize(0);
  v95 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v81 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100006DF4(&qword_1002931C8);
  __chkstk_darwin(v96);
  v84 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006DF4(&qword_1002931D0);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v86 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_1002931D8);
  v97 = *(_QWORD *)(v10 - 8);
  v98 = v10;
  __chkstk_darwin(v10);
  v85 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_1002931E0);
  v13 = __chkstk_darwin(v12);
  v100 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v99 = (uint64_t)&v79 - v16;
  v17 = static VerticalAlignment.center.getter(v15);
  sub_100103B64((uint64_t)&v116);
  v18 = v116;
  v19 = v117;
  v20 = v118;
  v21 = v119;
  v22 = BYTE8(v119);
  v102 = *((_QWORD *)&v118 + 1);
  v103 = v120;
  v107 = v17;
  v108 = 0;
  v23 = 1;
  v109 = 1;
  v110 = v116;
  v111 = v117;
  v112 = v118;
  v113 = v119;
  v114 = BYTE8(v119);
  v115 = v120;
  v25 = static Alignment.leading.getter(v24);
  sub_10001954C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v116, 0.0, 1, 0.0, 1, v25, v26);
  swift_release(*((_QWORD *)&v19 + 1));
  swift_release(*((_QWORD *)&v18 + 1));
  swift_release(v18);
  swift_release(v19);
  swift_release(v20);
  sub_10001B9E8(v102, v21, v22);
  swift_bridgeObjectRelease(v103);
  v27 = sub_100102DD8();
  if (!v28)
    goto LABEL_5;
  v29 = v27;
  v30 = v28;
  v31 = sub_100102F54();
  if (!v31)
  {
    swift_bridgeObjectRelease(v30);
LABEL_5:
    v64 = (uint64_t)v100;
    v63 = v101;
    v54 = v98;
    v62 = v99;
    goto LABEL_6;
  }
  v103 = v32;
  v104 = (uint64_t)v31;
  swift_retain(v32);
  v34 = static Color.primary.getter(v33);
  KeyPath = swift_getKeyPath(&unk_1001EFE00);
  v36 = v95;
  v37 = v81;
  v38 = v82;
  (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v81, enum case for ControlSize.large(_:), v82);
  v39 = v29;
  v40 = swift_getKeyPath(&unk_1001EFE30);
  v41 = v83;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))((char *)v83 + *(int *)(v80 + 28), v37, v38);
  *v41 = v40;
  v42 = (uint64_t *)v84;
  sub_10000B074((uint64_t)v41, (uint64_t)&v84[*(int *)(v96 + 36)], &qword_1002931C0);
  *v42 = v39;
  v42[1] = v30;
  v44 = v103;
  v43 = v104;
  v42[2] = v104;
  v42[3] = v44;
  v42[4] = KeyPath;
  v42[5] = v34;
  sub_100016244(v43, v44);
  swift_bridgeObjectRetain(v30);
  swift_retain(KeyPath);
  swift_retain(v34);
  sub_10000A020((uint64_t)v41, &qword_1002931C0);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v37, v38);
  swift_bridgeObjectRelease(v30);
  sub_10002BA44(v43, v44);
  swift_release(v34);
  v45 = swift_release(KeyPath);
  v46 = v88;
  BorderedButtonStyle.init()(v45);
  v47 = sub_100103EA4();
  v48 = sub_100103FF0();
  v49 = v86;
  v50 = v91;
  View.buttonStyle<A>(_:)(v46, v96, v91, v47, v48);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v46, v50);
  v51 = sub_10000A020((uint64_t)v42, &qword_1002931C8);
  v52 = v92;
  static ButtonBorderShape.capsule.getter(v51);
  v53 = swift_getKeyPath(&unk_1001EFE60);
  v54 = v98;
  v55 = (uint64_t)v85;
  v56 = (uint64_t *)&v85[*(int *)(v98 + 36)];
  v57 = sub_100006DF4(&qword_100293220);
  v59 = v93;
  v58 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))((char *)v56 + *(int *)(v57 + 28), v52, v94);
  *v56 = v53;
  v60 = v87;
  v61 = v89;
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 16))(v55, v49, v89);
  sub_10002BA44(v104, v44);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v52, v58);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v61);
  v62 = v99;
  sub_1001040F8(v55, v99);
  v23 = 0;
  v64 = (uint64_t)v100;
  v63 = v101;
LABEL_6:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v62, v23, 1, v54);
  sub_10000B074(v62, v64, &qword_1002931E0);
  v65 = v127;
  v105[10] = v126;
  v105[11] = v127;
  v66 = v128;
  v105[12] = v128;
  v67 = v122;
  v68 = v123;
  v105[6] = v122;
  v105[7] = v123;
  v69 = v125;
  v70 = v124;
  v105[8] = v124;
  v105[9] = v125;
  v71 = v118;
  v72 = v119;
  v105[2] = v118;
  v105[3] = v119;
  v73 = v121;
  v74 = v120;
  v105[4] = v120;
  v105[5] = v121;
  v75 = v117;
  v76 = v116;
  v105[0] = v116;
  v105[1] = v117;
  v63[10] = v126;
  v63[11] = v65;
  v63[12] = v66;
  v63[6] = v67;
  v63[7] = v68;
  v63[8] = v70;
  v63[9] = v69;
  v63[2] = v71;
  v63[3] = v72;
  v63[4] = v74;
  v63[5] = v73;
  *v63 = v76;
  v63[1] = v75;
  v77 = sub_100006DF4(&qword_1002931E8);
  sub_10000B074(v64, (uint64_t)v63 + *(int *)(v77 + 48), &qword_1002931E0);
  sub_10001BAE0((uint64_t)v105);
  sub_10000A020(v62, &qword_1002931E0);
  sub_10000A020(v64, &qword_1002931E0);
  v106[10] = v126;
  v106[11] = v127;
  v106[12] = v128;
  v106[6] = v122;
  v106[7] = v123;
  v106[8] = v124;
  v106[9] = v125;
  v106[2] = v118;
  v106[3] = v119;
  v106[4] = v120;
  v106[5] = v121;
  v106[0] = v116;
  v106[1] = v117;
  return sub_100103DC4((uint64_t)v106);
}

double sub_100103B64@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v27 = Image.init(_internalSystemName:)(0x74616C736E617274, 0xE900000000000065);
  v26 = static Font.title.getter();
  KeyPath = swift_getKeyPath(&unk_1001EFE90);
  v24 = static Color.translateAccentColor.getter(KeyPath);
  v23 = swift_getKeyPath(&unk_1001EFE00);
  sub_10010292C();
  v28[0] = v2;
  v28[1] = v3;
  v4 = sub_10000B030();
  v5 = Text.init<A>(_:)(v28, &type metadata for String, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.body.getter(v5);
  static Font.Weight.semibold.getter();
  v13 = Font.weight(_:)(v12);
  v14 = swift_release(v12);
  v15 = Text.font(_:)(v13, v5, v7, v11, v9, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v13);
  sub_10001B9E8(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 56) = v19 & 1;
  *(_QWORD *)(a1 + 64) = v21;
  swift_retain(v27);
  swift_retain(KeyPath);
  swift_retain(v26);
  swift_retain(v23);
  swift_retain(v24);
  sub_10001B9D8(v15, v17, v19 & 1);
  swift_bridgeObjectRetain(v21);
  sub_10001B9E8(v15, v17, v19 & 1);
  swift_release(v24);
  swift_release(v23);
  swift_release(v26);
  swift_release(KeyPath);
  swift_release(v27);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

unint64_t sub_100103D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002931B0;
  if (!qword_1002931B0)
  {
    v1 = sub_1000070BC(&qword_1002931A0);
    sub_100012334(&qword_1002931B8, &qword_100293198, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002931B0);
  }
  return result;
}

uint64_t sub_100103DC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  swift_release(v5);
  sub_10001B9E8(v6, v7, v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100103E60()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_100103E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100104058(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ControlSize, (uint64_t (*)(char *))&EnvironmentValues.controlSize.setter);
}

unint64_t sub_100103EA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002931F0;
  if (!qword_1002931F0)
  {
    v1 = sub_1000070BC(&qword_1002931C8);
    sub_100103F28();
    sub_100012334(&qword_100293210, &qword_1002931C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002931F0);
  }
  return result;
}

unint64_t sub_100103F28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002931F8;
  if (!qword_1002931F8)
  {
    v1 = sub_1000070BC(&qword_100293200);
    sub_100103FAC();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002931F8);
  }
  return result;
}

unint64_t sub_100103FAC()
{
  unint64_t result;

  result = qword_100293208;
  if (!qword_100293208)
  {
    result = swift_getWitnessTable(&unk_1001F5598, &type metadata for SystemApertureButton);
    atomic_store(result, (unint64_t *)&qword_100293208);
  }
  return result;
}

unint64_t sub_100103FF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293218;
  if (!qword_100293218)
  {
    v1 = type metadata accessor for BorderedButtonStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for BorderedButtonStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100293218);
  }
  return result;
}

uint64_t sub_100104038()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t sub_100104058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_1001040D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100104058(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ButtonBorderShape, (uint64_t (*)(char *))&EnvironmentValues._buttonBorderShape.setter);
}

uint64_t sub_1001040F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002931D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100104140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LiveActivityErrorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100104188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LiveActivityErrorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1001041CC()
{
  return sub_1001041E8((void (*)(uint64_t))&static URL.downloadLanguagesURL.getter);
}

double sub_1001041DC()
{
  return sub_1001041E8((void (*)(uint64_t))&static URL.topLevelSettingsURL.getter);
}

double sub_1001041E8(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LiveActivityErrorView(0) - 8) + 80);
  return sub_1001030DC((uint64_t *)(v1 + ((v3 + 16) & ~v3)), a1);
}

uint64_t sub_10010422C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LiveActivityErrorView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100006DF4((uint64_t *)&unk_100291480);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_1001042DC()
{
  return sub_1001041E8((void (*)(uint64_t))&static URL.translateAppURL.getter);
}

uint64_t sub_1001042F0()
{
  _QWORD v1[2];

  v1[0] = sub_1000070BC(&qword_1002931A0);
  v1[1] = sub_100103D40();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.scenePadding(_:)>>, 1);
}

uint64_t destroy for LiveActivityResultsView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[3]);
  swift_release(a1[5]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for LiveActivityResultsView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v6 = a2[5];
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v7 = a2[7];
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for LiveActivityResultsView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  a1[2] = a2[2];
  v7 = a2[3];
  v8 = a1[3];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v8);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v9 = a1[5];
  v10 = a2[5];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v9);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v11 = a1[7];
  v12 = a2[7];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for LiveActivityResultsView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for LiveActivityResultsView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_release(v7);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v8 = a1[5];
  a1[5] = a2[5];
  swift_release(v8);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v9 = a1[7];
  a1[7] = a2[7];
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveActivityResultsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveActivityResultsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveActivityResultsView()
{
  return &type metadata for LiveActivityResultsView;
}

uint64_t sub_1001045D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100214A00, 1);
}

uint64_t sub_1001045E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t countAndFlagsBits;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];

  v1 = type metadata accessor for Locale(0);
  v51 = *(_QWORD *)(v1 - 8);
  v52 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_100293370);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100293378);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v46 - v11;
  v13 = *v0;
  v14 = *((_BYTE *)v0 + 8);
  swift_retain(*v0);
  v16 = sub_1000D6114(v15, v14);
  swift_release(v13);
  KeyPath = swift_getKeyPath(&unk_1001EFF28);
  v53[0] = v16;
  v18 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v53, KeyPath, v18);
  swift_release(KeyPath);
  v20 = *(_QWORD *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  v19 = *(_QWORD *)(v16 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation + 8);
  swift_unknownObjectRetain(v20);
  swift_release(v16);
  if (v20)
  {
    ObjectType = swift_getObjectType(v20);
    countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
    swift_unknownObjectRelease(v20);
  }
  else
  {
    v47 = v12;
    v48 = v10;
    swift_retain(v13);
    v24 = sub_1000D6114(v23, v14);
    swift_release(v13);
    v25 = swift_getKeyPath(&unk_1001F0150);
    v53[0] = v24;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v53, v25, v18);
    swift_release(v25);
    v26 = v24 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult;
    swift_beginAccess(v24 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, v53, 0, 0);
    sub_10000B074(v26, (uint64_t)v6, &qword_100293370);
    v27 = swift_release(v24);
    v28 = v50;
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v49 + 48))(v6, 1, v50, v27);
    v31 = v51;
    v30 = v52;
    if (v29 == 1)
    {
      sub_10000A020((uint64_t)v6, &qword_100293370);
      swift_retain(v13);
      v33 = sub_1000D6114(v32, v14);
      swift_release(v13);
      sub_10010C178((uint64_t)v3);
      swift_release(v33);
      v34 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v35._object = (void *)0x80000001001FDA80;
      v35._countAndFlagsBits = 0xD000000000000011;
      v36._countAndFlagsBits = 0x617A696C61636F4CLL;
      v36._object = (void *)0xEB00000000656C62;
      countAndFlagsBits = Locale.ltLocalizedAppString(_:table:bundle:)(v35, v36, (NSBundle)v34)._countAndFlagsBits;

      (*(void (**)(char *, uint64_t))(v31 + 8))(v3, v30);
    }
    else
    {
      v37 = *(int *)(v28 + 48);
      v38 = v47;
      v39 = (uint64_t *)&v47[v37];
      v40 = (uint64_t *)&v6[v37];
      v41 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v41(v47, v6, v52);
      countAndFlagsBits = *v40;
      v42 = v40[1];
      *v39 = *v40;
      v39[1] = v42;
      v43 = v48;
      v44 = (uint64_t *)&v48[*(int *)(v28 + 48)];
      v41(v48, v38, v30);
      *v44 = countAndFlagsBits;
      v44[1] = v42;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v43, v30);
    }
  }
  return countAndFlagsBits;
}

uint64_t sub_100104988()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 8);
  swift_retain(*v0);
  v4 = sub_1000D6114(v3, v2);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1001EFF28);
  v15 = v4;
  v6 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation + 8);
  swift_unknownObjectRetain(v7);
  swift_release(v4);
  if (v7)
  {
    ObjectType = swift_getObjectType(v7);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 72))(ObjectType, v8);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    swift_retain(v1);
    v12 = sub_1000D6114(v11, v2);
    swift_release(v1);
    v13 = swift_getKeyPath(&unk_1001EFF50);
    v15 = v12;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, v13, v6);
    swift_release(v13);
    LODWORD(v13) = *(unsigned __int8 *)(v12
                                      + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
    swift_release(v12);
    if ((_DWORD)v13)
      return 0;
    else
      return 0x6161616161;
  }
  return v10;
}

uint64_t sub_100104B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;

  v22 = *(_OWORD *)(v0 + 16);
  v1 = *((_QWORD *)&v22 + 1);
  KeyPath = swift_getKeyPath(&unk_1001F0108);
  v3 = swift_getKeyPath(&unk_1001F0130);
  swift_retain(*((_QWORD *)&v22 + 1));
  static Published.subscript.getter(&v20, v4, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  sub_10001B5BC((uint64_t)&v22);
  v5 = v20;
  if (!v20)
    goto LABEL_5;
  if ((unint64_t)v20 >> 62)
  {
    v19 = v20 >= 0 ? v20 & 0xFFFFFFFFFFFFFF8 : v20;
    swift_bridgeObjectRetain(v20);
    v6 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v5);
  if (!v6)
  {
    v12 = sub_100006DF4(&qword_100293328);
    v11 = swift_allocObject(v12, 88, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1001E64F0;
    v13 = swift_getKeyPath(&unk_1001F00C0);
    v14 = swift_getKeyPath(&unk_1001F00E8);
    swift_retain(v1);
    static Published.subscript.getter(&v20, v15, v13);
    swift_release(v13);
    swift_release(v14);
    sub_10001B5BC((uint64_t)&v22);
    v16 = v20;
    v17 = v21;
    if (!v21)
    {
      v16 = 0;
      v17 = 0xE000000000000000;
    }
    *(_QWORD *)(v11 + 32) = v16;
    *(_QWORD *)(v11 + 40) = v17;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_QWORD *)(v11 + 80) = 0;
  }
  else
  {
LABEL_5:
    v7 = swift_getKeyPath(&unk_1001F0108);
    v8 = swift_getKeyPath(&unk_1001F0130);
    swift_retain(v1);
    static Published.subscript.getter(&v20, v9, v7);
    swift_release(v7);
    swift_release(v8);
    sub_10001B5BC((uint64_t)&v22);
    v10 = v20;
    if (v20)
    {
      sub_100107EB0((uint64_t *)v0);
      v11 = sub_1001081EC(v10, v0);
      sub_100108460((uint64_t *)v0);
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

uint64_t sub_100104D18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v1 = sub_100006DF4(&qword_100296470);
  __chkstk_darwin(v1);
  v3 = (char *)&v25[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_100293300);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  v9 = *((_BYTE *)v0 + 8);
  swift_retain(*v0);
  v11 = sub_1000D6114(v10, v9);
  swift_release(v8);
  KeyPath = swift_getKeyPath(&unk_1001F0000);
  v25[0] = v11;
  v13 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v25, KeyPath, v13);
  swift_release(KeyPath);
  v14 = v11 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult;
  swift_beginAccess(v11 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult, v25, 0, 0);
  sub_10000B074(v14, (uint64_t)v3, &qword_100296470);
  v15 = swift_release(v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v3, 1, v4, v15) == 1)
  {
    sub_10000A020((uint64_t)v3, &qword_100296470);
    return 0;
  }
  else
  {
    v17 = *(int *)(v4 + 48);
    v18 = type metadata accessor for Locale(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v7, v3, v18);
    v19 = v3[v17];
    v7[v17] = v19;
    swift_retain(v8);
    v21 = sub_1000D6114(v20, v9);
    swift_release(v8);
    v22 = swift_getKeyPath(&unk_1001EFF28);
    v24 = v21;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v22, v13);
    swift_release(v22);
    v23 = *(_QWORD *)(v21 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
    swift_unknownObjectRetain(v23);
    swift_release(v21);
    sub_10000A020((uint64_t)v7, &qword_100293300);
    swift_unknownObjectRelease(v23);
    if (v23)
      return v19 ^ 1u;
    else
      return 0;
  }
}

uint64_t sub_100104F78()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 8);
  swift_retain(*v0);
  v4 = sub_1000D6114(v3, v2);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1001EFF50);
  v13 = v4;
  v6 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_BYTE *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
  swift_release(v4);
  if ((v7 & 1) != 0)
    return 0;
  swift_retain(v1);
  v9 = sub_1000D6114(v8, v2);
  swift_release(v1);
  v10 = swift_getKeyPath(&unk_1001EFF28);
  v13 = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, v10, v6);
  swift_release(v10);
  v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  swift_unknownObjectRetain(v11);
  swift_release(v9);
  if (v11)
  {
    swift_unknownObjectRelease(v11);
    return 0;
  }
  return 1;
}

uint64_t sub_1001050C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = v1;
  v53 = a1;
  v3 = type metadata accessor for OpacityTransition(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v49 - v8;
  v10 = sub_100006DF4(&qword_10028B290);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028B298);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100006DF4(&qword_100293228);
  __chkstk_darwin(v50);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100006DF4(&qword_100293230);
  __chkstk_darwin(v51);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006DF4(&qword_100293238);
  v20 = __chkstk_darwin(v52);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static HorizontalAlignment.leading.getter(v20);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  v23 = sub_100006DF4(&qword_100293240);
  v24 = sub_100105528(v2, (uint64_t)&v12[*(int *)(v23 + 44)]);
  v25 = static Alignment.leading.getter(v24);
  sub_1000196F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v25, v26);
  v27 = sub_10000A020((uint64_t)v12, &qword_10028B290);
  OpacityTransition.init()(v27);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v28 = sub_100007D5C(qword_10028F8F8, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v29 = AnyTransition.init<A>(_:)(v7, v3, v28);
  sub_10000B074((uint64_t)v15, (uint64_t)v17, &qword_10028B298);
  *(_QWORD *)&v17[*(int *)(v50 + 36)] = v29;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  sub_10000A020((uint64_t)v15, &qword_10028B298);
  v30 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v31 = v2;
  v32 = sub_100104988();
  v34 = v33;
  swift_bridgeObjectRelease(v33);
  v35 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) == 0)
    v35 = v32 & 0xFFFFFFFFFFFFLL;
  v36 = v35 != 0;
  sub_10000B074((uint64_t)v17, (uint64_t)v19, &qword_100293228);
  v37 = &v19[*(int *)(v51 + 36)];
  *(_QWORD *)v37 = v30;
  v37[8] = v36;
  sub_10000A020((uint64_t)v17, &qword_100293228);
  v38 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v39 = v31;
  v40 = *v31;
  v41 = *((_BYTE *)v39 + 8);
  swift_retain(v40);
  v43 = sub_1000D6114(v42, v41);
  swift_release(v40);
  KeyPath = swift_getKeyPath(&unk_1001EFF28);
  v54 = v43;
  v45 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, KeyPath, v45);
  swift_release(KeyPath);
  v46 = *(_QWORD *)(v43 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  swift_unknownObjectRetain(v46);
  swift_release(v43);
  if (v46)
    swift_unknownObjectRelease(v46);
  sub_10000B074((uint64_t)v19, (uint64_t)v22, &qword_100293230);
  v47 = &v22[*(int *)(v52 + 36)];
  *(_QWORD *)v47 = v38;
  v47[8] = v46 != 0;
  sub_10000A020((uint64_t)v19, &qword_100293230);
  return sub_1000110A4((uint64_t)v22, v53, &qword_100293238);
}

uint64_t sub_100105528@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  unsigned __int8 v78;
  char v79;
  _OWORD *v80;
  uint64_t *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  __int128 v110;
  unint64_t v111;
  char *v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  unsigned __int8 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  _OWORD *v134;
  __int128 v135;
  __int128 v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void (*v182)(char *, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t *v210;
  char v211;
  _QWORD v212[2];

  v200 = a2;
  v3 = sub_100006DF4(&qword_100293250);
  v4 = __chkstk_darwin(v3);
  v186 = (char *)&v173 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v185 = (uint64_t *)((char *)&v173 - v6);
  v7 = sub_100006DF4(&qword_100293258);
  __chkstk_darwin(v7);
  v177 = (uint64_t)&v173 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100293260);
  __chkstk_darwin(v9);
  v176 = (char *)&v173 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100006DF4(&qword_100293268);
  v183 = *(_QWORD *)(v184 - 8);
  v11 = __chkstk_darwin(v184);
  v175 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v174 = (uint64_t)&v173 - v13;
  v14 = sub_100006DF4(&qword_100293270);
  v15 = __chkstk_darwin(v14);
  v187 = (uint64_t)&v173 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v209 = (uint64_t)&v173 - v17;
  v18 = sub_100006DF4(&qword_100293278);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v173 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v199 = (char *)&v173 - v22;
  v23 = type metadata accessor for Locale.Language(0);
  v197 = *(_QWORD *)(v23 - 8);
  v198 = v23;
  __chkstk_darwin(v23);
  v196 = (char *)&v173 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006DF4(&qword_1002926B8);
  __chkstk_darwin(v25);
  v190 = (uint64_t *)((char *)&v173 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v207 = type metadata accessor for Locale(0);
  v27 = *(_QWORD *)(v207 - 8);
  v28 = __chkstk_darwin(v207);
  v30 = (char *)&v173 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v173 - v31;
  v188 = type metadata accessor for LabeledTextView(0);
  __chkstk_darwin(v188);
  v34 = (char *)&v173 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100006DF4(&qword_100293280);
  __chkstk_darwin(v189);
  v191 = (uint64_t)&v173 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100006DF4(&qword_100293288);
  __chkstk_darwin(v194);
  v195 = (char *)&v173 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100006DF4(&qword_100293290);
  v201 = *(_QWORD *)(v37 - 8);
  v202 = v37;
  v38 = __chkstk_darwin(v37);
  v193 = (char *)&v173 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v192 = (char *)&v173 - v40;
  v41 = sub_100006DF4(&qword_100293298);
  v42 = __chkstk_darwin(v41);
  v203 = (uint64_t)&v173 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v206 = (char *)&v173 - v44;
  v45 = *a1;
  v210 = a1;
  LODWORD(v46) = *((unsigned __int8 *)a1 + 8);
  swift_retain(v45);
  v48 = sub_1000D6114(v47, v46);
  swift_release(v45);
  KeyPath = swift_getKeyPath(&unk_1001EFF28);
  v212[0] = v48;
  v205 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v212, KeyPath, v205);
  swift_release(KeyPath);
  v50 = *(_QWORD *)(v48 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  swift_unknownObjectRetain(v50);
  swift_release(v48);
  v204 = v21;
  v208 = v46;
  if (!v50)
    goto LABEL_4;
  swift_unknownObjectRelease(v50);
  swift_retain(v45);
  v52 = sub_1000D6114(v51, v46);
  swift_release(v45);
  v53 = sub_10010BF8C();
  v54 = objc_msgSend(v53, "isPassthrough");
  swift_release(v52);

  if ((v54 & 1) != 0)
  {
    v55 = 1;
    v56 = (uint64_t)v206;
    v57 = v210;
    v59 = v201;
    v58 = v202;
  }
  else
  {
LABEL_4:
    swift_retain(v45);
    v61 = sub_1000D6114(v60, v46);
    swift_release(v45);
    v62 = sub_10010C178((uint64_t)v32);
    static Locale.current.getter(v62);
    v63 = Locale.sqDisplayName(context:in:)(1, v30);
    v65 = v64;
    v66 = *(void (**)(char *, uint64_t))(v27 + 8);
    v67 = v207;
    v66(v30, v207);
    v182 = v66;
    v66(v32, v67);
    swift_release(v61);
    if (v65)
      v68 = v63;
    else
      v68 = 0;
    v181 = v68;
    v69 = 0xE000000000000000;
    if (v65)
      v69 = v65;
    v180 = v69;
    v179 = sub_1001045E4();
    v178 = v70;
    swift_retain(v45);
    v72 = sub_1000D6114(v71, v46);
    swift_release(v45);
    v73 = swift_getKeyPath(&unk_1001EFF28);
    v212[0] = v72;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v212, v73, v205);
    swift_release(v73);
    v74 = *(_QWORD *)(v72 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
    swift_unknownObjectRetain(v74);
    swift_release(v72);
    if (v74)
    {
      swift_unknownObjectRelease(v74);
      swift_retain(v45);
      v76 = sub_1000D6114(v75, v46);
      swift_release(v45);
      v77 = sub_10010BF8C();
      v78 = objc_msgSend(v77, "isPassthrough");
      swift_release(v76);

      v79 = v78 ^ 1;
    }
    else
    {
      v79 = 0;
    }
    v80 = (_OWORD *)swift_allocObject(&unk_10026B290, 80, 7);
    v81 = v210;
    v82 = *((_OWORD *)v210 + 1);
    v80[1] = *(_OWORD *)v210;
    v80[2] = v82;
    v83 = *((_OWORD *)v81 + 3);
    v80[3] = *((_OWORD *)v81 + 2);
    v80[4] = v83;
    v84 = swift_getKeyPath(&unk_1001EFF78);
    v85 = (uint64_t)v190;
    *v190 = v84;
    v86 = sub_100006DF4(&qword_100291490);
    swift_storeEnumTagMultiPayload(v85, v86, 0);
    v87 = swift_getKeyPath(&unk_1001EFFA0);
    v88 = swift_getKeyPath(&unk_1001EFFD0);
    v89 = v188;
    v90 = (uint64_t *)&v34[*(int *)(v188 + 44)];
    *v90 = v88;
    v91 = sub_100006DF4(&qword_1002969A0);
    swift_storeEnumTagMultiPayload(v90, v91, 0);
    v92 = v180;
    *(_QWORD *)v34 = v181;
    *((_QWORD *)v34 + 1) = v92;
    v93 = v178;
    *((_QWORD *)v34 + 2) = v179;
    *((_QWORD *)v34 + 3) = v93;
    v34[32] = 2;
    v34[33] = v79;
    *((_QWORD *)v34 + 5) = sub_100107E70;
    *((_QWORD *)v34 + 6) = v80;
    sub_1000110A4(v85, (uint64_t)&v34[*(int *)(v89 + 36)], &qword_1002926B8);
    v94 = &v34[*(int *)(v89 + 40)];
    *(_QWORD *)v94 = v87;
    v94[8] = 0;
    v95 = sub_100107EB0(v81);
    v96 = static Color.sourceTextColor.getter(v95);
    v46 = v191;
    sub_100032D68((uint64_t)v34, v191, type metadata accessor for LabeledTextView);
    *(_QWORD *)(v46 + *(int *)(v189 + 36)) = v96;
    v57 = v81;
    sub_100032DAC((uint64_t)v34, type metadata accessor for LabeledTextView);
    v97 = swift_getKeyPath(&unk_1001EFF78);
    swift_retain(v45);
    v99 = sub_1000D6114(v98, v208);
    swift_release(v45);
    sub_10010C178((uint64_t)v32);
    v100 = swift_release(v99);
    v101 = v196;
    Locale.language.getter(v100);
    v182(v32, v207);
    v103 = v194;
    v102 = (uint64_t)v195;
    v104 = (uint64_t *)&v195[*(int *)(v194 + 36)];
    v105 = sub_100006DF4(&qword_1002932A0);
    v107 = v197;
    v106 = v198;
    (*(void (**)(char *, char *, uint64_t))(v197 + 16))((char *)v104 + *(int *)(v105 + 28), v101, v198);
    *v104 = v97;
    sub_10000B074(v46, v102, &qword_100293280);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v101, v106);
    sub_10000A020(v46, &qword_100293280);
    v108 = (_OWORD *)swift_allocObject(&unk_10026B2B8, 80, 7);
    v109 = *((_OWORD *)v57 + 1);
    v108[1] = *(_OWORD *)v57;
    v108[2] = v109;
    v110 = *((_OWORD *)v57 + 3);
    v108[3] = *((_OWORD *)v57 + 2);
    v108[4] = v110;
    sub_100107EB0(v57);
    v111 = sub_100107F30();
    v112 = v193;
    View.onTapGesture(count:perform:)(1, sub_100107F08, v108, v103, v111);
    swift_release(v108);
    sub_10000A020(v102, &qword_100293288);
    v59 = v201;
    v58 = v202;
    v113 = *(void (**)(char *, char *, uint64_t))(v201 + 32);
    v114 = v192;
    v113(v192, v112, v202);
    v56 = (uint64_t)v206;
    v113(v206, v114, v58);
    v55 = 0;
    v21 = v204;
    LOBYTE(v46) = v208;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v56, v55, 1, v58);
  v115 = sub_100104988();
  v117 = v116;
  swift_bridgeObjectRelease(v116);
  v118 = HIBYTE(v117) & 0xF;
  if ((v117 & 0x2000000000000000) == 0)
    v118 = v115 & 0xFFFFFFFFFFFFLL;
  v119 = v209;
  if (v118)
  {
    swift_retain(v45);
    v121 = sub_1000D6114(v120, v46);
    swift_release(v45);
    v122 = sub_10010BF8C();
    v123 = objc_msgSend(v122, "isPassthrough");
    swift_release(v121);

    if ((v123 & 1) != 0)
    {
      v124 = 1;
      v125 = v184;
      v126 = v183;
    }
    else
    {
      swift_retain(v45);
      v131 = sub_1000D6114(v130, v46);
      swift_release(v45);
      v132 = swift_getKeyPath(&unk_1001EFF50);
      v212[0] = v131;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v212, v132, v205);
      swift_release(v132);
      v133 = *(unsigned __int8 *)(v131 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
      swift_release(v131);
      if (v133 == 1)
        LODWORD(v207) = sub_100104D18();
      else
        LODWORD(v207) = 1;
      v134 = (_OWORD *)swift_allocObject(&unk_10026B2E0, 80, 7);
      v135 = *((_OWORD *)v57 + 1);
      v134[1] = *(_OWORD *)v57;
      v134[2] = v135;
      v136 = *((_OWORD *)v57 + 3);
      v134[3] = *((_OWORD *)v57 + 2);
      v134[4] = v136;
      v211 = 0;
      sub_100107EB0(v57);
      State.init(wrappedValue:)(v212, &v211, &type metadata for Bool);
      v137 = v212[0];
      v138 = v212[1];
      v139 = enum case for ColorScheme.dark(_:);
      v140 = type metadata accessor for ColorScheme(0);
      v141 = *(_QWORD *)(v140 - 8);
      v142 = (uint64_t)v176;
      (*(void (**)(char *, uint64_t, uint64_t))(v141 + 104))(v176, v139, v140);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v141 + 56))(v142, 0, 1, v140);
      v143 = v177;
      sub_10000B074(v142, v177, &qword_100293260);
      v144 = v184;
      v145 = (uint64_t)v175;
      sub_10000B074(v143, (uint64_t)&v175[*(int *)(v184 + 36)], &qword_100293258);
      *(_WORD *)v145 = 513;
      *(_BYTE *)(v145 + 2) = v207 & 1;
      *(_QWORD *)(v145 + 8) = sub_100108054;
      *(_QWORD *)(v145 + 16) = v134;
      *(_BYTE *)(v145 + 24) = v137;
      v57 = v210;
      *(_QWORD *)(v145 + 32) = v138;
      swift_retain(v138);
      swift_retain(v134);
      sub_10000A020(v143, &qword_100293258);
      sub_10000A020(v142, &qword_100293260);
      swift_release(v138);
      swift_release(v134);
      v146 = v174;
      sub_1000110A4(v145, v174, &qword_100293268);
      v119 = v209;
      sub_1000110A4(v146, v209, &qword_100293268);
      v125 = v144;
      v124 = 0;
      v21 = v204;
      v56 = (uint64_t)v206;
      v126 = v183;
      LOBYTE(v46) = v208;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v126 + 56))(v119, v124, 1, v125);
    swift_retain(v45);
    v148 = sub_1000D6114(v147, v46);
    swift_release(v45);
    v149 = sub_10010BF8C();
    v150 = objc_msgSend(v149, "isPassthrough");
    swift_release(v148);

    if (v150)
    {
      swift_retain(v45);
      v153 = sub_1000D6114(v152, v46);
      swift_release(v45);
      v154 = sub_10010BF8C();
      v155 = objc_msgSend(v154, "isPassthrough");
      swift_release(v153);

      if (!v155)
        goto LABEL_28;
      swift_retain(v45);
      v157 = sub_1000D6114(v156, v46);
      swift_release(v45);
      v158 = swift_getKeyPath(&unk_1001EFF28);
      v212[0] = v157;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v212, v158, v205);
      swift_release(v158);
      v159 = *(_QWORD *)(v157 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
      swift_unknownObjectRetain(v159);
      swift_release(v157);
      if (!v159)
      {
LABEL_28:
        v164 = sub_100006DF4(&qword_1002932E0);
        v161 = (uint64_t)v185;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(v185, 1, 1, v164);
        goto LABEL_29;
      }
      v151 = swift_unknownObjectRelease(v159);
    }
    v160 = static VerticalAlignment.bottom.getter(v151);
    v161 = (uint64_t)v185;
    *v185 = v160;
    *(_QWORD *)(v161 + 8) = 0;
    *(_BYTE *)(v161 + 16) = 1;
    v162 = sub_100006DF4(&qword_1002932D8);
    sub_10010713C(v57, v161 + *(int *)(v162 + 44));
    v163 = sub_100006DF4(&qword_1002932E0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v161, 0, 1, v163);
LABEL_29:
    v128 = (uint64_t)v199;
    v129 = v200;
    v165 = (uint64_t)v186;
    v166 = v209;
    v167 = v187;
    sub_10000B074(v209, v187, &qword_100293270);
    sub_10000B074(v161, v165, &qword_100293250);
    sub_10000B074(v167, (uint64_t)v21, &qword_100293270);
    v168 = sub_100006DF4(&qword_1002932E8);
    sub_10000B074(v165, (uint64_t)&v21[*(int *)(v168 + 48)], &qword_100293250);
    sub_10000A020(v161, &qword_100293250);
    sub_10000A020(v166, &qword_100293270);
    sub_10000A020(v165, &qword_100293250);
    sub_10000A020(v167, &qword_100293270);
    v169 = sub_100006DF4(&qword_1002932F0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 56))(v21, 0, 1, v169);
    sub_1000110A4((uint64_t)v21, v128, &qword_100293278);
    goto LABEL_30;
  }
  v127 = sub_100006DF4(&qword_1002932F0);
  v128 = (uint64_t)v199;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v199, 1, 1, v127);
  v129 = v200;
LABEL_30:
  v170 = v203;
  sub_10000B074(v56, v203, &qword_100293298);
  sub_10000B074(v128, (uint64_t)v21, &qword_100293278);
  sub_10000B074(v170, v129, &qword_100293298);
  v171 = sub_100006DF4(&qword_1002932F8);
  sub_10000B074((uint64_t)v21, v129 + *(int *)(v171 + 48), &qword_100293278);
  sub_10000A020(v128, &qword_100293278);
  sub_10000A020(v56, &qword_100293298);
  sub_10000A020((uint64_t)v21, &qword_100293278);
  return sub_10000A020(v170, &qword_100293298);
}

uint64_t sub_100106544()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_100293344);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_1001065AC;
  return sub_10010661C(1);
}

uint64_t sub_1001065AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100108864, v2, v3);
}

uint64_t sub_10010661C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v2 + 104) = v1;
  *(_BYTE *)(v2 + 216) = a1;
  v3 = type metadata accessor for URL(0);
  *(_QWORD *)(v2 + 112) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 120) = v4;
  *(_QWORD *)(v2 + 128) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  *(_QWORD *)(v2 + 136) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 144) = v6;
  *(_QWORD *)(v2 + 152) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLQueryItem(0);
  *(_QWORD *)(v2 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 200) = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 208) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_100106760, v11, v12);
}

uint64_t sub_100106760()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  int v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(unint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  NSURL *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  Class isa;
  double v72;
  unsigned __int8 v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t ObjectType;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v103 = v0 + 96;
  swift_release(*(_QWORD *)(v0 + 208));
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v1 = type metadata accessor for Logger(0);
  v102 = sub_10000F66C(v1, (uint64_t)qword_1002AA3C8);
  v2 = Logger.logObject.getter(v102);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(unsigned __int8 *)(v0 + 216);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136315138;
    v106 = v6;
    if (v4)
      v7 = 7562617;
    else
      v7 = 28526;
    if (v4)
      v8 = 0xE300000000000000;
    else
      v8 = 0xE200000000000000;
    *(_QWORD *)(v0 + 96) = sub_1001A7FE4(v7, v8, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v0 + 104, v5 + 4);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Opening Staccato translation in Translate app (editable: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v9 = *(_QWORD *)(v0 + 168);
  v10 = *(uint64_t **)(v0 + 104);
  v11 = sub_100006DF4(&qword_100293348);
  inited = swift_initStackObject(v11, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
  *(_QWORD *)(inited + 40) = v13;
  *(_BYTE *)(inited + 48) = 1;
  v14 = sub_1001A4D14(inited);
  v15 = sub_100006DF4(&qword_1002981A0);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 32) & ~v16;
  v105 = *(_QWORD *)(v9 + 72);
  v18 = swift_allocObject(v15, v17 + v105, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_1001E64F0;
  v104 = v17;
  v19 = sub_1001045E4();
  v21 = v20;
  URLQueryItem.init(name:value:)(1954047348, 0xE400000000000000, v19, v20);
  swift_bridgeObjectRelease(v21);
  v22 = *v10;
  LOBYTE(v10) = *((_BYTE *)v10 + 8);
  swift_retain(v22);
  v100 = (char)v10;
  v24 = sub_1000D6114(v23, (char)v10);
  v101 = v22;
  swift_release(v22);
  KeyPath = swift_getKeyPath(&unk_1001EFF28);
  *(_QWORD *)(v0 + 72) = v24;
  v26 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 72, KeyPath, v26);
  swift_release(KeyPath);
  v27 = *(_QWORD *)(v24 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  v28 = *(_QWORD *)(v24 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation + 8);
  swift_unknownObjectRetain(v27);
  swift_release(v24);
  if (v27)
  {
    v97 = v14;
    v29 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v31 = *(_QWORD *)(v0 + 136);
    ObjectType = swift_getObjectType(v27);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(ObjectType, v28);
    v33 = Locale.ltIdentifier.getter(v32);
    v35 = v34;
    v36 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v36(v30, v31);
    URLQueryItem.init(name:value:)(0x6F4C656372756F73, 0xEC000000656C6163, v33, v35);
    swift_bridgeObjectRelease(v35);
    v38 = *(_QWORD *)(v18 + 16);
    v37 = *(_QWORD *)(v18 + 24);
    v98 = v36;
    if (v38 >= v37 >> 1)
      v18 = sub_1001A7D88(v37 > 1, v38 + 1, 1, v18);
    v39 = *(_QWORD *)(v0 + 200);
    v40 = *(_QWORD *)(v0 + 160);
    v41 = *(_QWORD *)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 152);
    v43 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v18 + 16) = v38 + 1;
    v44 = v18 + v104 + v38 * v105;
    v45 = *(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32);
    v45(v44, v39, v40);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 40))(ObjectType, v28);
    v47 = Locale.ltIdentifier.getter(v46);
    v49 = v48;
    v98(v42, v43);
    URLQueryItem.init(name:value:)(0x6F4C746567726174, 0xEC000000656C6163, v47, v49);
    swift_bridgeObjectRelease(v49);
    v51 = *(_QWORD *)(v18 + 16);
    v50 = *(_QWORD *)(v18 + 24);
    if (v51 >= v50 >> 1)
      v18 = sub_1001A7D88(v50 > 1, v51 + 1, 1, v18);
    v14 = v97;
    v52 = *(_QWORD *)(v0 + 192);
    v53 = *(_QWORD *)(v0 + 160);
    *(_QWORD *)(v18 + 16) = v51 + 1;
    v45(v18 + v104 + v51 * v105, v52, v53);
    swift_unknownObjectRelease(v27);
  }
  if ((*(_BYTE *)(v0 + 216) & 1) != 0)
  {
    v54 = (uint64_t *)(v0 + 176);
    URLQueryItem.init(name:value:)(6517363, 0xE300000000000000, 0x697463416576696CLL, 0xEC00000079746976);
  }
  else
  {
    v54 = (uint64_t *)(v0 + 184);
    v56 = sub_100104988();
    v58 = v57;
    URLQueryItem.init(name:value:)(0x6554746567726174, 0xEA00000000007478, v56, v57);
    v55 = swift_bridgeObjectRelease(v58);
  }
  v60 = *(_QWORD *)(v18 + 16);
  v59 = *(_QWORD *)(v18 + 24);
  v61 = *v54;
  if (v60 >= v59 >> 1)
    v18 = sub_1001A7D88(v59 > 1, v60 + 1, 1, v18);
  v62 = *(_QWORD *)(v0 + 160);
  v63 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v18 + 16) = v60 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t, __n128))(v63 + 32))(v18 + v104 + v60 * v105, v61, v62, v55);
  static URL.translateAppURL(with:)(v18);
  swift_bridgeObjectRelease(v18);
  v64 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v64)
  {
    v66 = v64;
    URL._bridgeToObjectiveC()(v65);
    v68 = v67;
    sub_100130660(v14);
    v70 = v69;
    swift_bridgeObjectRelease(v14);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v72 = swift_bridgeObjectRelease(v70).n128_u64[0];
    *(_QWORD *)(v0 + 80) = 0;
    v73 = objc_msgSend(v66, "openSensitiveURL:withOptions:error:", v68, isa, v0 + 80, v72);

    v74 = *(void **)(v0 + 80);
    v76 = *(_QWORD *)(v0 + 120);
    v75 = *(_QWORD *)(v0 + 128);
    v77 = *(_QWORD *)(v0 + 112);
    if ((v73 & 1) != 0)
    {
      v78 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
      v79 = v74;
      v78(v75, v77);
      swift_retain(v101);
      v81 = sub_1000D6114(v80, v100);
      swift_release(v101);
      sub_10010F764(0);
      swift_release(v81);
    }
    else
    {
      v82 = v74;
      v83 = _convertNSErrorToError(_:)(v74);

      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
      v84 = swift_errorRetain(v83);
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = (uint8_t *)swift_slowAlloc(12, -1);
        v88 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v87 = 138412290;
        v89 = _convertErrorToNSError(_:)(v83);
        *(_QWORD *)(v0 + 88) = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v103, v87 + 4);
        *v88 = v89;
        swift_errorRelease(v83);
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Failed to open URL with LaunchServices: %@", v87, 0xCu);
        v90 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v88, 1, v90);
        swift_slowDealloc(v88, -1, -1);
        swift_slowDealloc(v87, -1, -1);

        swift_errorRelease(v83);
      }
      else
      {
        swift_errorRelease(v83);
        swift_errorRelease(v83);

      }
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    swift_bridgeObjectRelease(v14);
  }
  v91 = *(_QWORD *)(v0 + 192);
  v93 = *(_QWORD *)(v0 + 176);
  v92 = *(_QWORD *)(v0 + 184);
  v94 = *(_QWORD *)(v0 + 152);
  v95 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100106FF0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_100293344);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_100107058;
  return sub_10010661C(1);
}

uint64_t sub_100107058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001070C8, v2, v3);
}

uint64_t sub_1001070C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1001070F8(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 8);
  swift_retain(*a1);
  v4 = sub_1000D6114(v3, v2);
  swift_release(v1);
  sub_1001106CC();
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_10010713C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  double (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  unsigned __int8 v126;

  v121 = a2;
  v116 = type metadata accessor for Locale.Language(0);
  v112 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v110 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for Locale(0);
  v106 = *(_QWORD *)(v123 - 8);
  v4 = __chkstk_darwin(v123);
  v6 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v98 - v7;
  v105 = type metadata accessor for LabeledExpandingTextView(0);
  __chkstk_darwin(v105);
  v10 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100006DF4(&qword_100293308);
  __chkstk_darwin(v109);
  v108 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100006DF4(&qword_100293310);
  __chkstk_darwin(v117);
  v111 = (uint64_t)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100006DF4(&qword_100293318);
  __chkstk_darwin(v118);
  v113 = (uint64_t)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100006DF4(&qword_10028B2A0);
  __chkstk_darwin(v119);
  v114 = (uint64_t)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_10028B2A8);
  v16 = __chkstk_darwin(v15);
  v120 = (uint64_t)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v115 = (uint64_t)&v98 - v19;
  __chkstk_darwin(v18);
  v107 = (char *)&v98 - v20;
  v124 = *((_OWORD *)a1 + 3);
  v21 = sub_100006DF4(&qword_10028CF50);
  State.projectedValue.getter(&v125, v21);
  v103 = *((_QWORD *)&v125 + 1);
  v104 = v125;
  v102 = v126;
  v22 = (_OWORD *)swift_allocObject(&unk_10026B308, 80, 7);
  v23 = *((_OWORD *)a1 + 1);
  v22[1] = *(_OWORD *)a1;
  v22[2] = v23;
  v24 = *((_OWORD *)a1 + 3);
  v22[3] = *((_OWORD *)a1 + 2);
  v22[4] = v24;
  v25 = *a1;
  v26 = *((_BYTE *)a1 + 8);
  v122 = v26;
  sub_100107EB0(a1);
  swift_retain(v25);
  v28 = sub_1000D6114(v27, v26);
  swift_release(v25);
  v29 = sub_10010C44C((uint64_t)v8);
  static Locale.current.getter(v29);
  v101 = v8;
  v30 = Locale.sqDisplayName(context:in:)(1, v6);
  v32 = v31;
  v33 = *(void (**)(char *, uint64_t))(v106 + 8);
  v34 = v6;
  v35 = v123;
  v33(v34, v123);
  v33(v8, v35);
  swift_release(v28);
  if (v32)
    v36 = v30;
  else
    v36 = 0;
  v100 = v36;
  v37 = 0xE000000000000000;
  if (v32)
    v37 = v32;
  v99 = v37;
  v98 = sub_100104988();
  v39 = v38;
  swift_retain(v25);
  v40 = v122;
  v42 = sub_1000D6114(v41, v122);
  swift_release(v25);
  v43 = v105;
  sub_10010C44C((uint64_t)&v10[*(int *)(v105 + 36)]);
  swift_release(v42);
  LOBYTE(v42) = sub_100104F78();
  v44 = type metadata accessor for LiveActivityViewModel(0);
  v106 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  *(_QWORD *)v10 = Environment.init<A>(_:)(v44, v44, v106);
  v10[8] = v45 & 1;
  v46 = v103;
  *((_QWORD *)v10 + 2) = v104;
  *((_QWORD *)v10 + 3) = v46;
  v10[32] = v102;
  *((_QWORD *)v10 + 5) = sub_100108068;
  *((_QWORD *)v10 + 6) = v22;
  v47 = v99;
  *((_QWORD *)v10 + 7) = v100;
  *((_QWORD *)v10 + 8) = v47;
  *((_QWORD *)v10 + 9) = v98;
  *((_QWORD *)v10 + 10) = v39;
  v10[*(int *)(v43 + 40)] = v42 & 1;
  KeyPath = swift_getKeyPath(&unk_1001EFF78);
  swift_retain(v25);
  v50 = sub_1000D6114(v49, v40);
  swift_release(v25);
  v51 = (uint64_t)v101;
  sub_10010C44C((uint64_t)v101);
  v52 = swift_release(v50);
  v53 = v110;
  Locale.language.getter(v52);
  v33((char *)v51, v123);
  v54 = (uint64_t)v108;
  v55 = (uint64_t *)&v108[*(int *)(v109 + 36)];
  v56 = sub_100006DF4(&qword_1002932A0);
  v57 = v112;
  v58 = v53;
  v59 = v53;
  v60 = v116;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))((char *)v55 + *(int *)(v56 + 28), v58, v116);
  *v55 = KeyPath;
  sub_100032D68((uint64_t)v10, v54, type metadata accessor for LabeledExpandingTextView);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v60);
  sub_100032DAC((uint64_t)v10, type metadata accessor for LabeledExpandingTextView);
  v61 = swift_getKeyPath(&unk_1001F0028);
  v125 = *((_OWORD *)a1 + 1);
  v62 = *((_QWORD *)&v125 + 1);
  v63 = swift_getKeyPath(&unk_1001F0050);
  v64 = swift_getKeyPath(&unk_1001F0078);
  swift_retain(v62);
  static Published.subscript.getter(&v124, v65, v63);
  swift_release(v63);
  v66 = v64;
  v67 = (uint64_t)v107;
  swift_release(v66);
  sub_10001B5BC((uint64_t)&v125);
  v68 = v124;
  v69 = v111;
  sub_10000B074(v54, v111, &qword_100293308);
  v70 = (uint64_t *)(v69 + *(int *)(v117 + 36));
  *v70 = v61;
  v70[1] = v68;
  sub_10000A020(v54, &qword_100293308);
  v71 = swift_getKeyPath(&unk_1001F0098);
  v72 = sub_100104B14();
  v73 = v113;
  sub_10000B074(v69, v113, &qword_100293310);
  v74 = (uint64_t *)(v73 + *(int *)(v118 + 36));
  *v74 = v71;
  v74[1] = v72;
  v75 = sub_10000A020(v69, &qword_100293310);
  v76 = static Color.translateAccentColor.getter(v75);
  v77 = v114;
  sub_10000B074(v73, v114, &qword_100293318);
  *(_QWORD *)(v77 + *(int *)(v119 + 36)) = v76;
  v78 = sub_10000A020(v73, &qword_100293318);
  v79 = static Alignment.leading.getter(v78);
  v80 = v115;
  sub_100019750(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v115, 0.0, 1, 0.0, 1, v79, v81);
  sub_10000A020(v77, &qword_10028B2A0);
  sub_1000110A4(v80, v67, &qword_10028B2A8);
  swift_retain(v25);
  v83 = sub_1000D6114(v82, v122);
  swift_release(v25);
  v84 = swift_getKeyPath(&unk_1001EFF28);
  *(_QWORD *)&v124 = v83;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v124, v84, v106);
  swift_release(v84);
  v85 = *(_QWORD *)(v83 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  swift_unknownObjectRetain(v85);
  swift_release(v83);
  if (v85)
  {
    swift_unknownObjectRelease(v85);
    v86 = swift_getKeyPath(&unk_1001F00C0);
    v87 = swift_getKeyPath(&unk_1001F00E8);
    swift_retain(v62);
    static Published.subscript.getter(&v124, v88, v86);
    swift_release(v86);
    swift_release(v87);
    sub_10001B5BC((uint64_t)&v125);
    v89 = *((_QWORD *)&v124 + 1);
    if (*((_QWORD *)&v124 + 1))
      swift_bridgeObjectRelease(*((_QWORD *)&v124 + 1));
    v85 = v89 != 0;
    v90 = (_OWORD *)swift_allocObject(&unk_10026B330, 80, 7);
    v91 = *((_OWORD *)a1 + 1);
    v90[1] = *(_OWORD *)a1;
    v90[2] = v91;
    v92 = *((_OWORD *)a1 + 3);
    v90[3] = *((_OWORD *)a1 + 2);
    v90[4] = v92;
    sub_100107EB0(a1);
    v93 = sub_1001081E4;
  }
  else
  {
    v93 = 0;
    v90 = 0;
  }
  v94 = v120;
  sub_10000B074(v67, v120, &qword_10028B2A8);
  v95 = v121;
  sub_10000B074(v94, v121, &qword_10028B2A8);
  v96 = (uint64_t *)(v95 + *(int *)(sub_100006DF4(&qword_100293320) + 48));
  *v96 = v85;
  v96[1] = (uint64_t)v93;
  v96[2] = (uint64_t)v90;
  sub_10010817C(v85, (uint64_t)v93, (uint64_t)v90);
  sub_10000A020(v67, &qword_10028B2A8);
  sub_10010818C(v85, (uint64_t)v93, (uint64_t)v90);
  return sub_10000A020(v94, &qword_10028B2A8);
}

double sub_100107A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v6 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor(0);
  v10 = sub_100107EB0((uint64_t *)a1);
  v11 = static MainActor.shared.getter(v10);
  v12 = swift_allocObject(a2, 96, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = &protocol witness table for MainActor;
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 48) = v13;
  v14 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v12 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v12 + 80) = v14;
  v15 = sub_100049DC0((uint64_t)v8, a3, v12);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_100107B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[3] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  v4[5] = v7;
  return swift_task_switch(sub_100107BB0, v6, v7);
}

uint64_t sub_100107BB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  _QWORD *v8;

  v1 = *(uint64_t **)(v0 + 16);
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  swift_retain(*v1);
  v5 = sub_1000D6114(v4, v3);
  swift_release(v2);
  v6 = sub_10010BF8C();
  v7 = objc_msgSend(v6, "isPassthrough");

  swift_release(v5);
  v8 = (_QWORD *)swift_task_alloc(dword_100293344);
  *(_QWORD *)(v0 + 48) = v8;
  *v8 = v0;
  v8[1] = sub_100107C54;
  return sub_10010661C(v7);
}

uint64_t sub_100107C54()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return swift_task_switch(sub_1001070C8, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

double sub_100107CA0@<D0>(double *a1@<X8>)
{
  unint64_t v2;
  double result;
  double v4;

  v2 = sub_1000EDD4C();
  EnvironmentValues.subscript.getter(&v4, &type metadata for KaraokeDuration, &type metadata for KaraokeDuration, v2);
  result = v4;
  *a1 = v4;
  return result;
}

uint64_t sub_100107CEC(uint64_t *a1)
{
  unint64_t v1;
  __n128 v2;
  uint64_t v4;

  v4 = *a1;
  v1 = sub_1000EDD4C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for KaraokeDuration, &type metadata for KaraokeDuration, v1, v2);
}

_QWORD *sub_100107D34@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000EDD08();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for KaraokeTimingInfo, &type metadata for KaraokeTimingInfo, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_100107D80(uint64_t *a1)
{
  unint64_t v1;
  __n128 v2;
  uint64_t v4;

  v4 = *a1;
  v1 = sub_1000EDD08();
  v2 = swift_bridgeObjectRetain(v4);
  return EnvironmentValues.subscript.setter(&v4, &type metadata for KaraokeTimingInfo, &type metadata for KaraokeTimingInfo, v1, v2);
}

double sub_100107DDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = *a2;
  v3 = *((_BYTE *)a2 + 8);
  swift_retain(*a2);
  v5 = sub_1000D6114(v4, v3);
  swift_release(v2);
  sub_100113A54(0);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_100107E24@<X0>(uint64_t a1@<X8>)
{
  return sub_1001050C8(a1);
}

double sub_100107E70()
{
  uint64_t v0;

  return sub_100107A54(v0 + 16, (uint64_t)&unk_10026B3A8, (uint64_t)&unk_100293368);
}

uint64_t *sub_100107EB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[5];
  swift_retain(a1[7]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

double sub_100107F08()
{
  uint64_t v0;

  return sub_100107A54(v0 + 16, (uint64_t)&unk_10026B380, (uint64_t)&unk_100293358);
}

unint64_t sub_100107F30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002932A8;
  if (!qword_1002932A8)
  {
    v1 = sub_1000070BC(&qword_100293288);
    sub_100107FB4();
    sub_100012334(&qword_1002932D0, &qword_1002932A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002932A8);
  }
  return result;
}

unint64_t sub_100107FB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002932B0;
  if (!qword_1002932B0)
  {
    v1 = sub_1000070BC(&qword_100293280);
    sub_100007D5C(&qword_1002932B8, type metadata accessor for LabeledTextView, (uint64_t)&unk_1001EF380);
    sub_100012334(&qword_1002932C0, &qword_1002932C8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002932B0);
  }
  return result;
}

double sub_100108054()
{
  uint64_t v0;

  return sub_1001070F8((uint64_t *)(v0 + 16));
}

double sub_100108068()
{
  uint64_t v0;

  return sub_100107A54(v0 + 16, (uint64_t)&unk_10026B358, (uint64_t)&unk_100293338);
}

double sub_100108090@<D0>(double *a1@<X8>)
{
  unint64_t v2;
  double result;
  double v4;

  v2 = sub_1000EDD4C();
  EnvironmentValues.subscript.getter(&v4, &type metadata for KaraokeDuration, &type metadata for KaraokeDuration, v2);
  result = v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1001080DC(uint64_t *a1)
{
  unint64_t v1;
  __n128 v2;
  uint64_t v4;

  v4 = *a1;
  v1 = sub_1000EDD4C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for KaraokeDuration, &type metadata for KaraokeDuration, v1, v2);
}

_QWORD *sub_10010812C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000EDD08();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for KaraokeTimingInfo, &type metadata for KaraokeTimingInfo, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10010817C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
    return swift_retain(a3);
  return result;
}

uint64_t sub_10010818C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
    return swift_release(a3);
  return result;
}

uint64_t sub_1001081A8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

double sub_1001081E4(uint64_t a1)
{
  uint64_t v1;

  return sub_100107DDC(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_1001081EC(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  __int128 v36;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_24;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = _swiftEmptyArrayStorage;
    if (!v4)
      return (uint64_t)v5;
    v35 = _swiftEmptyArrayStorage;
    result = sub_1001DA340(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v35;
    v29 = v3 & 0xC000000000000001;
    v30 = v4;
    v36 = *(_OWORD *)(a2 + 16);
    v28 = *((_QWORD *)&v36 + 1);
    v31 = v3;
    while (v4 != v7)
    {
      if (v29)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v3);
      else
        v8 = *(id *)(v3 + 8 * v7 + 32);
      v9 = v8;
      KeyPath = swift_getKeyPath(&unk_1001F00C0);
      v11 = swift_getKeyPath(&unk_1001F00E8);
      swift_retain(v28);
      static Published.subscript.getter(&v33, v12, KeyPath);
      swift_release(KeyPath);
      swift_release(v11);
      sub_10001B5BC((uint64_t)&v36);
      if (v34)
        v13 = v33;
      else
        v13 = 0;
      if (v34)
        v14 = v34;
      else
        v14 = 0xE000000000000000;
      v15 = objc_msgSend(v9, "word");
      v32 = v14;
      if (v15)
      {
        v16 = v15;
        a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

      }
      else
      {
        a2 = 0;
        v18 = 0;
      }
      objc_msgSend(v9, "startTime");
      v20 = v19;
      v21 = objc_msgSend(v9, "textRange");
      v23 = v22;

      v35 = v5;
      v25 = v5[2];
      v24 = v5[3];
      if (v25 >= v24 >> 1)
      {
        sub_1001DA340(v24 > 1, v25 + 1, 1);
        v5 = v35;
      }
      v5[2] = v25 + 1;
      v26 = (double *)&v5[7 * v25];
      v3 = v31;
      *((_QWORD *)v26 + 4) = v13;
      *((_QWORD *)v26 + 5) = v32;
      *((_QWORD *)v26 + 6) = a2;
      *((_QWORD *)v26 + 7) = v18;
      v26[8] = v20 / 1000.0;
      ++v7;
      *((_QWORD *)v26 + 9) = v21;
      *((_QWORD *)v26 + 10) = v23;
      v4 = v30;
      if (v30 == v7)
        return (uint64_t)v5;
    }
    __break(1u);
LABEL_24:
    if (v3 < 0)
      v27 = v3;
    else
      v27 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v3);
  }
  __break(1u);
  return result;
}

uint64_t *sub_100108460(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[5];
  v4 = a1[7];
  swift_release(a1[3]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_1001084B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100293334);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10001D380;
  return sub_100107B44(a1, v4, v5, v1 + 32);
}

uint64_t sub_100108528()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100293354);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003EFA0;
  return sub_100106FF0();
}

uint64_t sub_100108598()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001085DC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100293364);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003EFA0;
  return sub_100106544();
}

unint64_t sub_100108654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293380;
  if (!qword_100293380)
  {
    v1 = sub_1000070BC(&qword_100293238);
    sub_1001086D8();
    sub_100012334(&qword_1002933A8, &qword_1002933B0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293380);
  }
  return result;
}

unint64_t sub_1001086D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293388;
  if (!qword_100293388)
  {
    v1 = sub_1000070BC(&qword_100293230);
    sub_10010875C();
    sub_100012334(&qword_1002933A8, &qword_1002933B0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293388);
  }
  return result;
}

unint64_t sub_10010875C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293390;
  if (!qword_100293390)
  {
    v1 = sub_1000070BC(&qword_100293228);
    sub_1001087E0();
    sub_100012334(&qword_10028F8E8, &qword_10028F8F0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293390);
  }
  return result;
}

unint64_t sub_1001087E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293398;
  if (!qword_100293398)
  {
    v1 = sub_1000070BC(&qword_10028B298);
    sub_100012334(&qword_1002933A0, &qword_10028B290, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293398);
  }
  return result;
}

uint64_t destroy for LiveActivityTTSButton(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t _s17SequoiaTranslator21LiveActivityTTSButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for LiveActivityTTSButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for LiveActivityTTSButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveActivityTTSButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveActivityTTSButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveActivityTTSButton()
{
  return &type metadata for LiveActivityTTSButton;
}

uint64_t sub_1001089C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100214A44, 1);
}

uint64_t sub_1001089D8@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a4;
  v7 = sub_100006DF4(&qword_1002933B8);
  v32 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100006DF4(&qword_1002933C0);
  __chkstk_darwin(v33);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100006DF4(&qword_1002933C8);
  v12 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100006DF4(&qword_1002933D0);
  __chkstk_darwin(v31);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_10026B4B8, 40, 7);
  *(_BYTE *)(v17 + 16) = a1 & 1;
  *(_BYTE *)(v17 + 17) = HIBYTE(a1) & 1;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  v37 = a1 & 0x101;
  v38 = a2;
  v39 = a3;
  swift_retain(a3);
  v18 = sub_100006DF4(&qword_1002933D8);
  v19 = sub_1001092F4();
  Button.init(action:label:)(sub_1001092B0, v17, sub_1001092D4, v36, v18, v19);
  v20 = sub_100012334(&qword_100293418, &qword_1002933B8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(0x6F74747542535454, 0xE90000000000006ELL, v7, v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  v21 = sub_1001093FC();
  v22 = sub_100109498();
  View.buttonStyle<A>(_:)(v22, v33, &type metadata for ScaleButtonStyle, v21, v22);
  v23 = sub_10000A020((uint64_t)v11, &qword_1002933C0);
  v24 = static AnyTransition.blur(radius:)(v23, 4.0);
  v25 = v34;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v14, v34);
  *(_QWORD *)&v16[*(int *)(v31 + 36)] = v24;
  v26 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  v27 = static Color.translateAccentColor.getter(v26);
  v28 = v35;
  sub_10000B074((uint64_t)v16, v35, &qword_1002933D0);
  *(_QWORD *)(v28 + *(int *)(sub_100006DF4(&qword_100293430) + 36)) = v27;
  return sub_10000A020((uint64_t)v16, &qword_1002933D0);
}

uint64_t sub_100108CB0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v4 = sub_100006DF4(&qword_100293400);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100006DF4(&qword_1002933F0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Alignment.center.getter(v8);
  v6[1] = v11;
  v12 = sub_100006DF4(&qword_100293438);
  v13 = sub_100108E4C(a1 & 1, (uint64_t)v6 + *(int *)(v12 + 44));
  v14 = static Edge.Set.all.getter(v13);
  v15 = EdgeInsets.init(_all:)(10.0);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_10000B074((uint64_t)v6, (uint64_t)v10, &qword_100293400);
  v22 = &v10[*(int *)(v7 + 36)];
  *v22 = v14;
  *((double *)v22 + 1) = v15;
  *((_QWORD *)v22 + 2) = v17;
  *((_QWORD *)v22 + 3) = v19;
  *((_QWORD *)v22 + 4) = v21;
  v22[40] = 0;
  sub_10000A020((uint64_t)v6, &qword_100293400);
  sub_10000B074((uint64_t)v10, a2, &qword_1002933F0);
  v23 = a2 + *(int *)(sub_100006DF4(&qword_1002933D8) + 36);
  *(_DWORD *)v23 = 1056964608;
  *(_WORD *)(v23 + 4) = 256;
  return sub_10000A020((uint64_t)v10, &qword_1002933F0);
}

uint64_t sub_100108E4C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = a2;
  v50 = sub_100006DF4(&qword_100293440);
  __chkstk_darwin(v50);
  v4 = (uint64_t *)((char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for SymbolEffectOptions(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AutomaticSymbolEffect(0);
  v44 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for ContentTransition(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006DF4(&qword_100293448);
  v13 = __chkstk_darwin(v42);
  v51 = (uint64_t)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v41 - v16);
  __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  v20 = 0x69662E6573756170;
  if ((a1 & 1) != 0)
    v21 = 0x69662E6573756170;
  else
    v21 = 0x6C69662E79616C70;
  if ((a1 & 1) != 0)
    v22 = 0xEA00000000006C6CLL;
  else
    v22 = 0xE90000000000006CLL;
  if ((a1 & 1) != 0)
    v20 = 0x6C69662E79616C70;
  v47 = v20;
  if ((a1 & 1) != 0)
    v23 = 0xE90000000000006CLL;
  else
    v23 = 0xEA00000000006C6CLL;
  v46 = v23;
  v24 = Image.init(systemName:)(v21, v22);
  v25 = static Font.body.getter(v24);
  static Font.Weight.bold.getter(v25);
  v26 = Font.weight(_:)(v25);
  swift_release(v25);
  KeyPath = swift_getKeyPath(&unk_1001F01E8);
  v28 = AutomaticSymbolEffect.init()();
  static SymbolEffectOptions.default.getter(v28);
  v29 = sub_100007D5C(&qword_100293450, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticSymbolEffect, (uint64_t)&protocol conformance descriptor for AutomaticSymbolEffect);
  static ContentTransition.symbolEffect<A>(_:options:)(v10, v7, v8, v29);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v49);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v8);
  v30 = swift_getKeyPath(&unk_1001F0218);
  v31 = v43;
  v32 = v45;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))((char *)v4 + *(int *)(v50 + 28), v12, v45);
  *v4 = v30;
  sub_10000B074((uint64_t)v4, (uint64_t)v17 + *(int *)(v42 + 36), &qword_100293440);
  *v17 = v24;
  v17[1] = KeyPath;
  v17[2] = v26;
  swift_retain(v24);
  swift_retain(KeyPath);
  swift_retain(v26);
  sub_10000A020((uint64_t)v4, &qword_100293440);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
  swift_release(v26);
  swift_release(KeyPath);
  swift_release(v24);
  sub_100109584((uint64_t)v17, (uint64_t)v19);
  v33 = Image.init(systemName:)(v47, v46);
  v34 = static Font.body.getter(v33);
  static Font.Weight.bold.getter(v34);
  v35 = Font.weight(_:)(v34);
  swift_release(v34);
  v36 = swift_getKeyPath(&unk_1001F01E8);
  v37 = v51;
  sub_10000B074((uint64_t)v19, v51, &qword_100293448);
  v38 = v52;
  sub_10000B074(v37, v52, &qword_100293448);
  v39 = (uint64_t *)(v38 + *(int *)(sub_100006DF4(&qword_100293458) + 48));
  *v39 = v33;
  v39[1] = v36;
  v39[2] = v35;
  swift_retain(v33);
  swift_retain(v36);
  swift_retain(v35);
  sub_10000A020((uint64_t)v19, &qword_100293448);
  swift_release(v35);
  swift_release(v36);
  swift_release(v33);
  return sub_10000A020(v37, &qword_100293448);
}

uint64_t sub_10010926C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  __int16 v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_1001089D8(v2 | *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), a1);
}

uint64_t sub_10010928C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001092B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 24))(*(unsigned __int8 *)(v0 + 17));
}

uint64_t sub_1001092D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100108CB0(*(_BYTE *)(v1 + 16), a1);
}

unint64_t sub_1001092F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002933E0;
  if (!qword_1002933E0)
  {
    v1 = sub_1000070BC(&qword_1002933D8);
    sub_100109378();
    sub_100012334(&qword_100293408, &qword_100293410, (uint64_t)&protocol conformance descriptor for _InsettableBackgroundShapeModifier<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002933E0);
  }
  return result;
}

unint64_t sub_100109378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002933E8;
  if (!qword_1002933E8)
  {
    v1 = sub_1000070BC(&qword_1002933F0);
    sub_100012334(&qword_1002933F8, &qword_100293400, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002933E8);
  }
  return result;
}

unint64_t sub_1001093FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293420;
  if (!qword_100293420)
  {
    v1 = sub_1000070BC(&qword_1002933C0);
    sub_100012334(&qword_100293418, &qword_1002933B8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293420);
  }
  return result;
}

unint64_t sub_100109498()
{
  unint64_t result;

  result = qword_100293428;
  if (!qword_100293428)
  {
    result = swift_getWitnessTable(&unk_1001F3524, &type metadata for ScaleButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100293428);
  }
  return result;
}

uint64_t sub_1001094DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentTransition(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.contentTransition.setter(v4);
}

uint64_t sub_100109560()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_100109584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100293448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001095D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293460;
  if (!qword_100293460)
  {
    v1 = sub_1000070BC(&qword_100293430);
    sub_100109654();
    sub_100012334(&qword_1002932C0, &qword_1002932C8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293460);
  }
  return result;
}

unint64_t sub_100109654()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100293468;
  if (!qword_100293468)
  {
    v1 = sub_1000070BC(&qword_1002933D0);
    v2[0] = sub_1000070BC(&qword_1002933C0);
    v2[1] = &type metadata for ScaleButtonStyle;
    v2[2] = sub_1001093FC();
    v2[3] = sub_100109498();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100012334(&qword_10028F8E8, &qword_10028F8F0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293468);
  }
  return result;
}

uint64_t *sub_10010971C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain(v5);
    swift_retain(v6);
    v10 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

double sub_100109800(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t *sub_100109880(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  swift_retain(v5);
  v9 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_100109930(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000A020((uint64_t)a1 + v10, &qword_1002969A0);
    v13 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

_OWORD *sub_100109A1C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100006DF4(&qword_1002969A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100109AC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000A020((uint64_t)a1 + v8, &qword_1002969A0);
    v11 = sub_100006DF4(&qword_1002969A0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100109BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100109BB0);
}

uint64_t sub_100109BB0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028EA80);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100109C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100109C3C);
}

char *sub_100109C3C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028EA80);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LiveActivityView(uint64_t a1)
{
  uint64_t result;

  result = qword_1002934C8;
  if (!qword_1002934C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LiveActivityView);
  return result;
}

void sub_100109CF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1001F0268;
  sub_100109D64(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_100109D64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028EB00)
  {
    v2 = type metadata accessor for LayoutDirection(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028EB00);
  }
}

uint64_t sub_100109DB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100214A94, 1);
}

uint64_t sub_100109DC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (uint64_t)v0;
  v2 = sub_100006DF4(&qword_100293370);
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LiveActivityView(0);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v6);
  v11 = (uint64_t *)((char *)&v33 - v10);
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v33 - v12);
  v14 = v0[1];
  v33 = *v0;
  v34 = v14;
  sub_100006DF4((uint64_t *)&unk_100297A90);
  State.wrappedValue.getter(&v35);
  v15 = v35;
  KeyPath = swift_getKeyPath(&unk_1001F0320);
  v33 = v15;
  v17 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, KeyPath, v17);
  swift_release(KeyPath);
  v18 = *(_QWORD *)(v15 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  swift_release(v15);
  sub_100032D68(v1, (uint64_t)v13, type metadata accessor for LiveActivityView);
  if (v18)
  {
    sub_100032DAC((uint64_t)v13, type metadata accessor for LiveActivityView);
    sub_100032D68(v1, (uint64_t)v11, type metadata accessor for LiveActivityView);
LABEL_6:
    sub_100032DAC((uint64_t)v11, type metadata accessor for LiveActivityView);
    sub_100032D68(v1, (uint64_t)v8, type metadata accessor for LiveActivityView);
    goto LABEL_7;
  }
  v19 = v13[1];
  v33 = *v13;
  v34 = v19;
  State.wrappedValue.getter(&v35);
  v20 = v35;
  v21 = swift_getKeyPath(&unk_1001F02F8);
  v33 = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, v21, v17);
  swift_release(v21);
  v22 = v20 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult;
  swift_beginAccess(v20 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, &v33, 0, 0);
  sub_10000B074(v22, (uint64_t)v4, &qword_100293370);
  swift_release(v20);
  sub_100032DAC((uint64_t)v13, type metadata accessor for LiveActivityView);
  v23 = sub_100006DF4(&qword_100293378);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v4, 1, v23);
  sub_10000A020((uint64_t)v4, &qword_100293370);
  sub_100032D68(v1, (uint64_t)v11, type metadata accessor for LiveActivityView);
  if (v24 != 1)
    goto LABEL_6;
  v25 = v11[1];
  v35 = *v11;
  v36 = v25;
  State.wrappedValue.getter(&v37);
  v26 = v37;
  v27 = sub_10010DC7C();
  swift_release(v26);
  sub_100032DAC((uint64_t)v11, type metadata accessor for LiveActivityView);
  sub_100032D68(v1, (uint64_t)v8, type metadata accessor for LiveActivityView);
  if (v27 != 7)
  {
LABEL_7:
    v31 = 0;
    goto LABEL_8;
  }
  v28 = v8[1];
  v35 = *v8;
  v36 = v28;
  State.wrappedValue.getter(&v37);
  v29 = v37;
  v30 = swift_getKeyPath(&unk_1001F02D0);
  v35 = v29;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v35, v30, v17);
  swift_release(v30);
  v31 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
  swift_release(v29);
LABEL_8:
  sub_100032DAC((uint64_t)v8, type metadata accessor for LiveActivityView);
  return v31;
}

BOOL sub_10010A170()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (uint64_t)v0;
  v2 = sub_100006DF4(&qword_100293370);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LiveActivityView(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = v0[1];
  v20 = *v0;
  v21 = v8;
  sub_100006DF4((uint64_t *)&unk_100297A90);
  State.wrappedValue.getter(&v22);
  v9 = v22;
  KeyPath = swift_getKeyPath(&unk_1001F02D0);
  v20 = v9;
  v11 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
  swift_release(v9);
  sub_100032D68(v1, (uint64_t)v7, type metadata accessor for LiveActivityView);
  if (v12 == 1)
  {
    v13 = v7[1];
    v20 = *v7;
    v21 = v13;
    State.wrappedValue.getter(&v22);
    v14 = v22;
    v15 = swift_getKeyPath(&unk_1001F02F8);
    v20 = v14;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v15, v11);
    swift_release(v15);
    v16 = v14 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult;
    swift_beginAccess(v14 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, &v20, 0, 0);
    sub_10000B074(v16, (uint64_t)v4, &qword_100293370);
    swift_release(v14);
    sub_100032DAC((uint64_t)v7, type metadata accessor for LiveActivityView);
    v17 = sub_100006DF4(&qword_100293378);
    v18 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v4, 1, v17) == 1;
    sub_10000A020((uint64_t)v4, &qword_100293370);
  }
  else
  {
    sub_100032DAC((uint64_t)v7, type metadata accessor for LiveActivityView);
    return 0;
  }
  return v18;
}

uint64_t sub_10010A3C8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v56;
  __int128 v57;
  _QWORD *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v72 = a1;
  *(_QWORD *)&v59 = sub_100006DF4(&qword_100293500);
  __chkstk_darwin(v59);
  v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v63 = sub_100006DF4(&qword_100293508);
  *(_QWORD *)&v65 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100293510);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = sub_100006DF4(&qword_100293518);
  __chkstk_darwin(v64);
  v61 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100293520);
  v68 = *(_QWORD *)(v10 - 8);
  v69 = v10;
  __chkstk_darwin(v10);
  v62 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100006DF4(&qword_100293528);
  __chkstk_darwin(v67);
  v66 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100006DF4(&qword_100293530);
  v13 = __chkstk_darwin(v71);
  v70 = (uint64_t)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v8 = static Alignment.center.getter(v13);
  v8[1] = v15;
  *(_QWORD *)&v57 = (char *)v8 + *(int *)(sub_100006DF4(&qword_100293538) + 44);
  sub_10010A980(v1, (uint64_t)v3);
  v58 = v1;
  v16 = v1[1];
  *(_QWORD *)&v73 = *v1;
  *((_QWORD *)&v73 + 1) = v16;
  v60 = sub_100006DF4((uint64_t *)&unk_100297A90);
  State.wrappedValue.getter(&v79);
  v17 = v79;
  v18 = type metadata accessor for LiveActivityViewModel(0);
  v19 = sub_10010B46C(&qword_100293540, &qword_100293500, (void (*)(void))sub_10010B318);
  v20 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  v21 = v59;
  View.environment<A>(_:)(v17, v59, v18, v19, v20);
  swift_release(v17);
  v22 = sub_10000A020((uint64_t)v3, &qword_100293500);
  v23 = static Edge.Set.all.getter(v22);
  *(_QWORD *)&v73 = v21;
  *((_QWORD *)&v73 + 1) = v18;
  *(_QWORD *)&v74 = v19;
  *((_QWORD *)&v74 + 1) = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v73, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v25 = v63;
  View.scenePadding(_:)(v23, v63, OpaqueTypeConformance2);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v5, v25);
  v27 = static Alignment.top.getter(v26);
  v29 = v28;
  v30 = v58;
  sub_10010B010(v58, (uint64_t *)&v73);
  v65 = v73;
  v63 = v74;
  v59 = v75;
  v57 = v76;
  v56 = v77;
  v31 = v78;
  v32 = v61;
  sub_10000B074((uint64_t)v8, v61, &qword_100293510);
  v33 = v64;
  v34 = v32 + *(int *)(v64 + 36);
  v35 = v63;
  *(_OWORD *)v34 = v65;
  *(_OWORD *)(v34 + 16) = v35;
  v36 = v57;
  *(_OWORD *)(v34 + 32) = v59;
  *(_OWORD *)(v34 + 48) = v36;
  *(_OWORD *)(v34 + 64) = v56;
  *(_QWORD *)(v34 + 80) = v31;
  *(_QWORD *)(v34 + 88) = v27;
  *(_QWORD *)(v34 + 96) = v29;
  sub_10000A020((uint64_t)v8, &qword_100293510);
  v37 = sub_10010B5C4();
  v38 = v62;
  View.allowsSecureDrawing()(v33, v37);
  sub_10000A020(v32, &qword_100293518);
  v39 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v40 = v30;
  LOBYTE(v27) = sub_100109DC8();
  v41 = v68;
  v42 = (uint64_t)v66;
  v43 = v38;
  v44 = v38;
  v45 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v66, v43, v69);
  v46 = v42 + *(int *)(v67 + 36);
  *(_QWORD *)v46 = v39;
  *(_BYTE *)(v46 + 8) = v27 & 1;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v45);
  v47 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  v48 = v40[1];
  *(_QWORD *)&v73 = *v40;
  *((_QWORD *)&v73 + 1) = v48;
  State.wrappedValue.getter(&v79);
  v49 = v79;
  LODWORD(v29) = sub_10010DC7C();
  swift_release(v49);
  v50 = v70;
  sub_10000B074(v42, v70, &qword_100293528);
  v51 = v50 + *(int *)(v71 + 36);
  *(_QWORD *)v51 = v47;
  *(_BYTE *)(v51 + 8) = (_DWORD)v29 != 7;
  sub_10000A020(v42, &qword_100293528);
  v52 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 1.0, 0.0);
  LOBYTE(v49) = sub_10010A170();
  v53 = v72;
  sub_10000B074(v50, v72, &qword_100293530);
  v54 = v53 + *(int *)(sub_100006DF4(&qword_1002935E0) + 36);
  *(_QWORD *)v54 = v52;
  *(_BYTE *)(v54 + 8) = v49 & 1;
  return sub_10000A020(v50, &qword_100293530);
}

uint64_t sub_10010A980@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  char v39;
  char v40;
  __int128 v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  _BYTE v72[7];
  _BYTE v73[7];
  char v74;
  char v75;
  uint64_t v76;

  v66 = a2;
  v3 = type metadata accessor for OpacityTransition(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v61 - v8;
  v64 = sub_100006DF4(&qword_1002935F0);
  __chkstk_darwin(v64);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for LiveActivityErrorView(0);
  v12 = __chkstk_darwin(v65);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v61 - v15;
  v17 = a1[1];
  *(_QWORD *)&v67[0] = *a1;
  *((_QWORD *)&v67[0] + 1) = v17;
  sub_100006DF4((uint64_t *)&unk_100297A90);
  State.wrappedValue.getter(&v76);
  v18 = v76;
  v19 = sub_10010DC7C();
  swift_release(v18);
  if (v19 == 7)
  {
    sub_10010AE00(a1, (uint64_t)v67);
    v63 = v67[0];
    v62 = v67[1];
    v61 = v67[2];
    v20 = v68;
    v21 = v69;
    v22 = v70;
    OpacityTransition.init()(v23);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    v24 = sub_100007D5C(qword_10028F8F8, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
    v25 = AnyTransition.init<A>(_:)(v7, v3, v24);
    LOBYTE(v76) = v22;
    v26 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    v27 = v76;
    v28 = static Edge.Set.vertical.getter(v26);
    v29 = EdgeInsets.init(_all:)(4.0);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    v74 = v27;
    v71 = 0;
    v37 = static Edge.Set.horizontal.getter(v36);
    v38 = EdgeInsets.init(_all:)(12.0);
    v39 = v74;
    v40 = v71;
    v75 = 0;
    v41 = v62;
    *(_OWORD *)v11 = v63;
    *((_OWORD *)v11 + 1) = v41;
    *((_OWORD *)v11 + 2) = v61;
    *((_QWORD *)v11 + 6) = v20;
    *((_QWORD *)v11 + 7) = v21;
    v11[64] = v39;
    *((_DWORD *)v11 + 17) = *(_DWORD *)&v73[3];
    *(_DWORD *)(v11 + 65) = *(_DWORD *)v73;
    *((_QWORD *)v11 + 9) = v25;
    v11[80] = v28;
    v42 = *(_DWORD *)v72;
    *((_DWORD *)v11 + 21) = *(_DWORD *)&v72[3];
    *(_DWORD *)(v11 + 81) = v42;
    *((double *)v11 + 11) = v29;
    *((_QWORD *)v11 + 12) = v31;
    *((_QWORD *)v11 + 13) = v33;
    *((_QWORD *)v11 + 14) = v35;
    v11[120] = v40;
    v43 = v67[0];
    *((_DWORD *)v11 + 31) = *(_DWORD *)((char *)v67 + 3);
    *(_DWORD *)(v11 + 121) = v43;
    v11[128] = v37;
    v44 = v76;
    *((_DWORD *)v11 + 33) = *(_DWORD *)((char *)&v76 + 3);
    *(_DWORD *)(v11 + 129) = v44;
    *((double *)v11 + 17) = v38;
    *((_QWORD *)v11 + 18) = v45;
    *((_QWORD *)v11 + 19) = v46;
    *((_QWORD *)v11 + 20) = v47;
    v11[168] = v75;
    swift_storeEnumTagMultiPayload(v11, v64, 1);
    v48 = sub_100006DF4(&qword_100293568);
    v49 = sub_100007D5C(&qword_100293558, type metadata accessor for LiveActivityErrorView, (uint64_t)&unk_1001EFDB0);
    v50 = sub_1000612F8(&qword_100293560, &qword_100293568, (void (*)(void))sub_10010B3B4);
    return _ConditionalContent<>.init(storage:)(v11, v65, v48, v49, v50);
  }
  else
  {
    v52 = type metadata accessor for LiveActivityViewModel(0);
    v53 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    *(_QWORD *)v14 = Environment.init<A>(_:)(v52, v52, v53);
    v14[8] = v54 & 1;
    v55 = v65;
    v56 = &v14[*(int *)(v65 + 20)];
    *(_QWORD *)v56 = swift_getKeyPath(&unk_1001F03A0);
    v57 = sub_100006DF4((uint64_t *)&unk_100291480);
    swift_storeEnumTagMultiPayload(v56, v57, 0);
    sub_100104188((uint64_t)v14, (uint64_t)v16);
    sub_100032D68((uint64_t)v16, (uint64_t)v11, type metadata accessor for LiveActivityErrorView);
    swift_storeEnumTagMultiPayload(v11, v64, 0);
    v58 = sub_100006DF4(&qword_100293568);
    v59 = sub_100007D5C(&qword_100293558, type metadata accessor for LiveActivityErrorView, (uint64_t)&unk_1001EFDB0);
    v60 = sub_1000612F8(&qword_100293560, &qword_100293568, (void (*)(void))sub_10010B3B4);
    _ConditionalContent<>.init(storage:)(v11, v55, v58, v59, v60);
    return sub_100032DAC((uint64_t)v16, type metadata accessor for LiveActivityErrorView);
  }
}

double sub_10010AE00@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  _OWORD v35[4];
  char v36;

  if (sub_10010A170())
  {
    v4 = type metadata accessor for LiveActivityViewModel(0);
    v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    v29 = Environment.init<A>(_:)(v4, v4, v5);
    v30 = v6 & 1;
    v7 = sub_10010B53C();
    v8 = sub_10010B580();
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0;
  }
  else
  {
    v9 = a1[1];
    *(_QWORD *)&v35[0] = *a1;
    *((_QWORD *)&v35[0] + 1) = v9;
    sub_100006DF4((uint64_t *)&unk_100297A90);
    State.wrappedValue.getter(&v29);
    v10 = v29;
    v11 = *(_QWORD *)(v29 + 56);
    swift_retain(v11);
    swift_release(v10);
    v12 = type metadata accessor for LiveActivityViewModel(0);
    v13 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    v14 = Environment.init<A>(_:)(v12, v12, v13);
    v16 = v15 & 1;
    v17 = type metadata accessor for TTSManager(0);
    v18 = sub_100007D5C(&qword_10028EA78, type metadata accessor for TTSManager, (uint64_t)&unk_1001F75B4);
    v19 = ObservedObject.init(wrappedValue:)(v11, v17, v18);
    v21 = v20;
    LOBYTE(v29) = 1;
    State.init(wrappedValue:)(v35, &v29, &type metadata for Bool);
    v22 = LOBYTE(v35[0]);
    v23 = *((_QWORD *)&v35[0] + 1);
    LOBYTE(v29) = 1;
    State.init(wrappedValue:)(v35, &v29, &type metadata for Bool);
    v29 = v14;
    v30 = v16;
    *(_QWORD *)&v31 = v19;
    *((_QWORD *)&v31 + 1) = v21;
    *(_QWORD *)&v32 = v22;
    *((_QWORD *)&v32 + 1) = v23;
    *(_QWORD *)&v33 = LOBYTE(v35[0]);
    *((_QWORD *)&v33 + 1) = *((_QWORD *)&v35[0] + 1);
    v34 = 1;
    v7 = sub_10010B53C();
    v8 = sub_10010B580();
  }
  _ConditionalContent<>.init(storage:)(&v29, &type metadata for LiveActivityWithLIDListeningView, &type metadata for LiveActivityResultsView, v7, v8);
  result = *(double *)v35;
  v25 = v35[1];
  v26 = v35[2];
  v27 = v35[3];
  v28 = v36;
  *(_OWORD *)a2 = v35[0];
  *(_OWORD *)(a2 + 16) = v25;
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v27;
  *(_BYTE *)(a2 + 64) = v28;
  return result;
}

uint64_t sub_10010B010@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD v48[2];
  uint64_t v49;

  v4 = type metadata accessor for ScaleTransition(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - v8;
  v10 = type metadata accessor for LayoutDirection(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v43 - v15);
  result = sub_100109DC8();
  if ((result & 1) != 0)
  {
    v18 = a1[1];
    v48[0] = *a1;
    v48[1] = v18;
    sub_100006DF4((uint64_t *)&unk_100297A90);
    State.wrappedValue.getter(&v49);
    v46 = v5;
    v19 = v49;
    KeyPath = swift_getKeyPath(&unk_1001F0348);
    v44 = v4;
    v21 = KeyPath;
    v48[0] = v19;
    v22 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v48, v21, v22);
    swift_release(v21);
    v45 = *(unsigned int *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__speechAudioLevel);
    swift_release(v19);
    v23 = swift_getKeyPath(&unk_1001F0370);
    type metadata accessor for LiveActivityView(0);
    sub_1000D5B14(v16);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for LayoutDirection.leftToRight(_:), v10);
    v24 = static LayoutDirection.== infix(_:_:)(v16, v14);
    v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    v25(v14, v10);
    v26 = ((uint64_t (*)(_QWORD *, uint64_t))v25)(v16, v10);
    v27 = static UnitPoint.center.getter(v26);
    v29 = v28;
    v31 = static UnitPoint.center.getter(v30);
    ScaleTransition.init(_:anchor:)(0.00001, v31, v32);
    v34 = v46;
    v33 = v47;
    v35 = v44;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v47, v9, v44);
    v36 = sub_100007D5C(&qword_1002935E8, (uint64_t (*)(uint64_t))&type metadata accessor for ScaleTransition, (uint64_t)&protocol conformance descriptor for ScaleTransition);
    v37 = v33;
    v38 = v35;
    v39 = AnyTransition.init<A>(_:)(v37, v35, v36);
    LOBYTE(v48[0]) = 0;
    result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v9, v38);
    v40 = LOBYTE(v48[0]) | (unint64_t)(v45 << 32);
    if ((v24 & 1) != 0)
      v41 = 0;
    else
      v41 = 0x400921FB54442D18;
    v42 = 0x3FF0000000000000;
  }
  else
  {
    v23 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v27 = 0.0;
    v29 = 0;
  }
  *a2 = v23;
  a2[1] = v40;
  a2[2] = v41;
  a2[3] = 0;
  a2[4] = v42;
  a2[5] = 0;
  *((double *)a2 + 6) = v27;
  a2[7] = v29;
  a2[8] = 0;
  a2[9] = v42;
  a2[10] = v39;
  return result;
}

unint64_t sub_10010B318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293548;
  if (!qword_100293548)
  {
    v1 = sub_1000070BC(&qword_100293550);
    sub_100007D5C(&qword_100293558, type metadata accessor for LiveActivityErrorView, (uint64_t)&unk_1001EFDB0);
    sub_1000612F8(&qword_100293560, &qword_100293568, (void (*)(void))sub_10010B3B4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293548);
  }
  return result;
}

uint64_t sub_10010B3B4()
{
  return sub_1000612F8(&qword_100293570, &qword_100293578, (void (*)(void))sub_10010B3D0);
}

unint64_t sub_10010B3D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293580;
  if (!qword_100293580)
  {
    v1 = sub_1000070BC(&qword_100293588);
    sub_10010B46C(&qword_100293590, &qword_100293598, (void (*)(void))sub_10010B4D0);
    sub_100012334(&qword_10028F8E8, &qword_10028F8F0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293580);
  }
  return result;
}

uint64_t sub_10010B46C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010B4D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002935A0;
  if (!qword_1002935A0)
  {
    v1 = sub_1000070BC(&qword_1002935A8);
    sub_10010B53C();
    sub_10010B580();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002935A0);
  }
  return result;
}

unint64_t sub_10010B53C()
{
  unint64_t result;

  result = qword_1002935B0;
  if (!qword_1002935B0)
  {
    result = swift_getWitnessTable(&unk_1001F0714, &type metadata for LiveActivityWithLIDListeningView);
    atomic_store(result, (unint64_t *)&qword_1002935B0);
  }
  return result;
}

unint64_t sub_10010B580()
{
  unint64_t result;

  result = qword_1002935B8;
  if (!qword_1002935B8)
  {
    result = swift_getWitnessTable(&unk_1001EFED8, &type metadata for LiveActivityResultsView);
    atomic_store(result, (unint64_t *)&qword_1002935B8);
  }
  return result;
}

unint64_t sub_10010B5C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002935C0;
  if (!qword_1002935C0)
  {
    v1 = sub_1000070BC(&qword_100293518);
    sub_100012334(&qword_1002935C8, &qword_100293510, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100012334(&qword_1002935D0, &qword_1002935D8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002935C0);
  }
  return result;
}

void sub_10010B660(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F02D0);
  v6 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
}

double sub_10010B6F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F02D0);
  v5 = v2;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_10010B7AC);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10010B7AC()
{
  uint64_t v0;

  return sub_10010CD88(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10010B7D8(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_10010B800(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_10010B824()
{
  return EnvironmentValues.unlockAndOpenURL.getter();
}

uint64_t sub_10010B844(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for OpenURLAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.unlockAndOpenURL.setter(v4);
}

uint64_t sub_10010B8C4()
{
  return sub_10010B8F0(&qword_1002935F8, &qword_1002935E0, (void (*)(void))sub_10010B974);
}

uint64_t sub_10010B8F0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    a3();
    sub_100012334(&qword_1002933A8, &qword_1002933B0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010B974()
{
  return sub_10010B8F0(&qword_100293600, &qword_100293530, (void (*)(void))sub_10010B990);
}

unint64_t sub_10010B990()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100293608;
  if (!qword_100293608)
  {
    v1 = sub_1000070BC(&qword_100293528);
    v2[0] = sub_1000070BC(&qword_100293518);
    v2[1] = sub_10010B5C4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.allowsSecureDrawing()>>, 1);
    sub_100012334(&qword_1002933A8, &qword_1002933B0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293608);
  }
  return result;
}

uint64_t sub_10010BA3C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

char *sub_10010BAA0()
{
  _QWORD *v0;
  void *v1;
  char *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  char *v7;
  void *v8;
  id v9;

  v1 = (void *)v0[6];
  if (v1)
  {
    v2 = (char *)v0[6];
  }
  else
  {
    v3 = v0;
    v4 = (void *)v0[2];
    v5 = (void *)v0[3];
    v6 = objc_allocWithZone((Class)type metadata accessor for SpeechManager());
    v7 = (char *)sub_10016C6D8(v4, v5);
    *(_QWORD *)&v7[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate + 8] = &off_10026B570;
    swift_unknownObjectWeakAssign();
    v8 = (void *)v3[6];
    v3[6] = v7;
    v2 = v7;

    v1 = 0;
  }
  v9 = v1;
  return v2;
}

uint64_t sub_10010BB48@<X0>(uint64_t a1@<X8>)
{
  return sub_10010BC7C((uint64_t)&unk_1001F05D0, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, a1);
}

uint64_t sub_10010BB5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  __n128 v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F05D0);
  v13 = v8;
  v14 = v7;
  v15 = v8;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_1001143C0);
  v10 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v10);
}

uint64_t sub_10010BC68@<X0>(uint64_t a1@<X8>)
{
  return sub_10010BC7C((uint64_t)&unk_1001F05F8, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, a1);
}

uint64_t sub_10010BC7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  KeyPath = swift_getKeyPath(a1);
  v11[0] = v3;
  v7 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v11, KeyPath, v7);
  swift_release(KeyPath);
  v8 = v3 + *a2;
  swift_beginAccess(v8, v11, 0, 0);
  v9 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a3, v8, v9);
}

uint64_t sub_10010BD40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12[0] = v6;
  v8 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v8);
  swift_release(KeyPath);
  v9 = v6 + *a3;
  swift_beginAccess(v9, v12, 0, 0);
  v10 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4, v9, v10);
}

uint64_t sub_10010BE08(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  __n128 v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F05F8);
  v13 = v8;
  v14 = v7;
  v15 = v8;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_1001143A0);
  v10 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v10);
}

uint64_t sub_10010BF14(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = a1 + *a3;
  swift_beginAccess(v4, v7, 33, 0);
  v5 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v4, a2, v5);
  return swift_endAccess(v7);
}

id sub_10010BF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  id v14;
  Class isa;
  Class v16;
  id v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[3];
  _QWORD v21[3];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v20 - v6;
  KeyPath = swift_getKeyPath(&unk_1001F05D0);
  v21[0] = v0;
  v9 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v21, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, v21, 0, 0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v11(v7, v10, v1);
  v12 = swift_getKeyPath(&unk_1001F05F8);
  v20[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v20, v12, v9);
  swift_release(v12);
  v13 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale;
  swift_beginAccess(v13, v20, 0, 0);
  v11(v5, v13, v1);
  v14 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v16 = Locale._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v14, "initWithSourceLocale:targetLocale:", isa, v16);

  v18 = *(void (**)(char *, uint64_t))(v2 + 8);
  v18(v5, v1);
  v18(v7, v1);
  return v17;
}

uint64_t sub_10010C178@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  __n128 v31;
  _QWORD v32[3];
  _QWORD v33[3];

  v2 = v1;
  v4 = sub_100006DF4(&qword_100293370);
  __chkstk_darwin(v4);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100293378);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v32 - v12;
  KeyPath = swift_getKeyPath(&unk_1001F04E0);
  v33[0] = v1;
  v15 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v33, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  if (v16)
  {
    v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation + 8);
    ObjectType = swift_getObjectType(v16);
    v19 = *(void (**)(uint64_t, uint64_t, __n128))(v17 + 32);
    v20 = swift_unknownObjectRetain(v16);
    v19(ObjectType, v17, v20);
    return swift_unknownObjectRelease(v16);
  }
  else
  {
    v22 = swift_getKeyPath(&unk_1001F0508);
    v33[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v33, v22, v15);
    swift_release(v22);
    v23 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult;
    swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, v33, 0, 0);
    sub_10000B074(v23, (uint64_t)v6, &qword_100293370);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_10000A020((uint64_t)v6, &qword_100293370);
      v24 = swift_getKeyPath(&unk_1001F05D0);
      v32[0] = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v32, v24, v15);
      swift_release(v24);
      v25 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale;
      swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, v32, 0, 0);
      v26 = type metadata accessor for Locale(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, v25, v26);
    }
    else
    {
      v27 = &v6[*(int *)(v7 + 48)];
      v28 = type metadata accessor for Locale(0);
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
      v29(v13, v6, v28);
      v30 = *((_QWORD *)v27 + 1);
      v29(v11, v13, v28);
      v31 = swift_bridgeObjectRelease(v30);
      return ((uint64_t (*)(uint64_t, char *, uint64_t, __n128))v29)(a1, v11, v28, v31);
    }
  }
}

uint64_t sub_10010C44C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  Class isa;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[3];

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v4);
  v6 = (char *)&v25[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10010BF8C();
  sub_10010C178((uint64_t)v10);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v13 = objc_msgSend(v11, "oppositeToLocale:", isa);

  if (v13)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v14 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v14(v6, v10, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v6, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_10000A020((uint64_t)v6, (uint64_t *)&unk_10028FE50);
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA3C8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Cannot resolve target locale", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1001F05F8);
  v25[0] = v2;
  v22 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v25, KeyPath, v22);
  swift_release(KeyPath);
  v23 = v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale;
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, v25, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v23, v7);
}

double sub_10010C724()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F04E0);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_unknownObjectRetain(*(_QWORD *)(v0
                                                           + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation)).n128_u64[0];
  return result;
}

double sub_10010C7BC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __int128 v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F04E0);
  v8 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_OWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  *a2 = v6;
  *(_QWORD *)&result = swift_unknownObjectRetain(v6).n128_u64[0];
  return result;
}

double sub_10010C858(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F04E0);
  v6 = v3;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  swift_unknownObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_10011373C);
  swift_unknownObjectRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10010C914@<X0>(uint64_t a1@<X8>)
{
  return sub_10010CA70((uint64_t)&unk_1001F0530, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult, &qword_100296470, a1);
}

uint64_t sub_10010C930@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010CB44(a1, (uint64_t)&unk_1001F0530, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult, &qword_100296470, a2);
}

uint64_t sub_10010C94C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v4 = sub_100006DF4(&qword_100296470);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B074(a1, (uint64_t)v6, &qword_100296470);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F0530);
  v11 = v7;
  v12 = v6;
  v13 = v7;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_10011466C);
  swift_release(KeyPath);
  return sub_10000A020((uint64_t)v6, &qword_100296470);
}

uint64_t sub_10010CA54@<X0>(uint64_t a1@<X8>)
{
  return sub_10010CA70((uint64_t)&unk_1001F0508, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, &qword_100293370, a1);
}

uint64_t sub_10010CA70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  KeyPath = swift_getKeyPath(a1);
  v12[0] = v4;
  v9 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v4 + *a2;
  swift_beginAccess(v10, v12, 0, 0);
  return sub_10000B074(v10, a4, a3);
}

uint64_t sub_10010CB28@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010CB44(a1, (uint64_t)&unk_1001F0508, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, &qword_100293370, a2);
}

uint64_t sub_10010CB44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  v8 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v13[0] = v8;
  v10 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v10);
  swift_release(KeyPath);
  v11 = v8 + *a3;
  swift_beginAccess(v11, v13, 0, 0);
  return sub_10000B074(v11, a5, a4);
}

uint64_t sub_10010CC00(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v4 = sub_100006DF4(&qword_100293370);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B074(a1, (uint64_t)v6, &qword_100293370);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F0508);
  v11 = v7;
  v12 = v6;
  v13 = v7;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_100114658);
  swift_release(KeyPath);
  return sub_10000A020((uint64_t)v6, &qword_100293370);
}

uint64_t sub_10010CD08(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  _BYTE v8[24];

  v6 = a1 + *a3;
  swift_beginAccess(v6, v8, 33, 0);
  sub_100114064(a2, v6, a4);
  return swift_endAccess(v8);
}

uint64_t sub_10010CD74()
{
  return sub_10010CDAC((uint64_t)&unk_1001F0698, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
}

uint64_t sub_10010CD88(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable) = a2;
  return result;
}

uint64_t sub_10010CD98()
{
  return sub_10010CDAC((uint64_t)&unk_1001F0558, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListening);
}

uint64_t sub_10010CDAC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + *a2);
}

void sub_10010CE30(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F0558);
  v6 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListening);
}

double sub_10010CEC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F0558);
  v5 = v2;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_1001146A8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10010CF6C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F06C0);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0
                                              + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock)).n128_u64[0];
  return result;
}

double sub_10010CFFC@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F06C0);
  v8 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_10010D094(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F06C0);
  v6 = v3;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_100114500);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_10010D14C(char a1)
{
  uint64_t v1;
  int v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1 & 1;
  KeyPath = swift_getKeyPath(&unk_1001F06C0);
  v11 = v1;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath);
  v6 = OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock;
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock);
  swift_retain(v7);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 20));
  v8 = *(unsigned __int8 *)(v7 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 20));
  swift_release(v7);
  v9 = swift_getKeyPath(&unk_1001F06C0);
  v11 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v9, v5);
  swift_release(v9);
  v10 = *(_QWORD *)(v1 + v6);
  swift_retain(v10);
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 20));
  *(_BYTE *)(v10 + 16) = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 20));
  swift_release(v10);
  if (v8 != v3)
    sub_10015E298(v3);
}

float sub_10010D294()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F05A8);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(float *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__speechAudioLevel);
}

float sub_10010D320@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  float result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F05A8);
  v7 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(float *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__speechAudioLevel);
  *a2 = result;
  return result;
}

void sub_10010D3B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F05A8);
  v4 = v2;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v4, KeyPath, sub_1001146D0);
  swift_release(KeyPath);
}

double sub_10010D464()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  double result;
  _QWORD v5[3];

  KeyPath = swift_getKeyPath(&unk_1001F0620);
  v5[0] = v0;
  v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions, v5, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*v3).n128_u64[0];
  return result;
}

double sub_10010D50C@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  double result;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F0620);
  v9[0] = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = (uint64_t *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions, v9, 0, 0);
  v7 = *v6;
  *a2 = *v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

double sub_10010D5BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F0620);
  v6 = v3;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_100114368);
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10010D674(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions);
  swift_beginAccess(a1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions, v6, 1, 0);
  v4 = *v3;
  *v3 = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10010D6E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F0670);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__stateError);
}

void sub_10010D76C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F0670);
  v6 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__stateError);
}

double sub_10010D800(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F0670);
  v5 = v2;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_1001146E4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10010D8A8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  int v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_1001F0648);
  v5 = v0;
  v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported + 1))
    v3 = 256;
  else
    v3 = 0;
  return v3 | *(unsigned __int8 *)(v0
                                               + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported);
}

void sub_10010D94C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F0648);
  v7 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_BYTE *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported + 1);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported);
  a2[1] = v6;
}

double sub_10010D9EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F0648);
  v5 = v2;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_1001142F0);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10010DA9C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F0580);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0
                                              + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__currentRecordingStopTonePlaybackTask)).n128_u64[0];
  return result;
}

double sub_10010DB2C@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F0580);
  v8 = v3;
  v5 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__currentRecordingStopTonePlaybackTask);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_10010DBC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F0580);
  v6 = v3;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_100114154);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10010DC7C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel_appRunForTheFirstTime) == 1)
  {
    KeyPath = swift_getKeyPath(&unk_1001F0670);
    v4 = v0;
    v2 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
    swift_release(KeyPath);
    __asm { BR              X10 }
  }
  return 0;
}

void sub_10010DD54()
{
  JUMPOUT(0x10010DD3CLL);
}

void sub_10010DD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t KeyPath;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = sub_10010BF8C();
  v13 = objc_msgSend(v12, "isPassthrough");

  if (!v13
    || (v14 = swift_getKeyPath(&unk_1001F0648),
        a10 = v10,
        ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, v14, v11),
        swift_release(v14),
        *(_BYTE *)(v10 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported) == 1))
  {
    KeyPath = swift_getKeyPath(&unk_1001F0648);
    a10 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, KeyPath, v11);
    swift_release(KeyPath);
    v16 = (_BYTE *)(v10 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported);
    if ((*(_BYTE *)(v10 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported) & 1) != 0
      || (v17 = swift_getKeyPath(&unk_1001F0648),
          a10 = v10,
          ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, v17, v11),
          swift_release(v17),
          v16[1] == 1))
    {
      v18 = swift_getKeyPath(&unk_1001F0648);
      a10 = v10;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, v18, v11);
      swift_release(v18);
      if (*v16 == 1)
      {
        v19 = swift_getKeyPath(&unk_1001F0648);
        a10 = v10;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, v19, v11);
        swift_release(v19);
      }
    }
  }
  JUMPOUT(0x10010DD3CLL);
}

_QWORD *sub_10010DED4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  NSString v43;
  unsigned __int8 v44;
  id v45;
  NSString v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  char *v64;
  double (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  void *v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  __n128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119[3];
  id v120;
  _QWORD v121[3];
  _QWORD v122[4];

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028DE80);
  v114 = *(_QWORD *)(v2 - 8);
  v115 = v2;
  __chkstk_darwin(v2);
  v113 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028DE88);
  v117 = *(_QWORD *)(v4 - 8);
  v118 = v4;
  __chkstk_darwin(v4);
  v116 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v6);
  v112 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100006DF4(&qword_10028DE90);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v106 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028DE98);
  v110 = *(_QWORD *)(v9 - 8);
  v111 = v9;
  __chkstk_darwin(v9);
  v109 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v11);
  v103 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  v105 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v104 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v102 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v102 - v19;
  v22 = type metadata accessor for TranslationTaskHint(0, v21);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[2] = objc_msgSend(objc_allocWithZone((Class)_LTTranslator), "init");
  v26 = type metadata accessor for DeviceHelper(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = sub_10009ADE4();
  v28 = objc_allocWithZone((Class)type metadata accessor for RecordingHelper());
  v29 = sub_10014903C((uint64_t)v27);
  swift_release(v27);
  v1[3] = v29;
  v30 = type metadata accessor for ErrorStateContext(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v1[4] = sub_1000AF554();
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for TranslationTaskHint.speech(_:), v22);
  v31 = type metadata accessor for LanguagesService(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v1[5] = LanguagesService.init(task:)(v25);
  v1[6] = 0;
  v32 = OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel_ringer;
  *(_QWORD *)((char *)v1 + v32) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RingerSwitchObserver()), "init");
  v33 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  *v33 = 0;
  v33[1] = 0;
  v34 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult;
  v35 = sub_100006DF4(&qword_100293300);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  v36 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult;
  v37 = sub_100006DF4(&qword_100293378);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  *((_BYTE *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable) = 1;
  *((_BYTE *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListening) = 0;
  v38 = sub_100006DF4(&qword_100293BA8);
  v39 = swift_allocObject(v38, 24, 7);
  *(_DWORD *)(v39 + 20) = 0;
  *(_BYTE *)(v39 + 16) = 0;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock) = v39;
  *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__speechAudioLevel) = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v40 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v40 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions) = v40;
  *((_BYTE *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__stateError) = 3;
  *(_WORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported) = 257;
  *(_QWORD *)((char *)v1
            + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__currentRecordingStopTonePlaybackTask) = 0;
  ObservationRegistrar.init()(v40);
  v41 = (void *)objc_opt_self(NSUserDefaults);
  v42 = objc_msgSend(v41, "standardUserDefaults");
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend(v42, "BOOLForKey:", v43);

  *((_BYTE *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel_appRunForTheFirstTime) = v44;
  v45 = objc_msgSend(v41, "standardUserDefaults");
  v46 = String._bridgeToObjectiveC()();
  v47 = objc_msgSend(v45, "stringForKey:", v46);

  if (v47)
  {
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;

  }
  else
  {
    v50 = 0xE500000000000000;
    v48 = 0x53555F6E65;
  }
  Locale.init(identifier:)(v48, v50);
  v51 = v105;
  v52 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
  v52((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, v20, v13);
  sub_10015D9EC();
  v52((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, v18, v13);
  v53 = (void *)v1[2];
  v54 = (void *)v1[3];
  v55 = type metadata accessor for TTSManager(0);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v1[7] = sub_1001D0BE8(v53, v54);
  v56 = type metadata accessor for TaskPriority(0);
  v57 = (uint64_t)v103;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v103, 1, 1, v56);
  type metadata accessor for MainActor(0);
  swift_retain(v1);
  v59 = static MainActor.shared.getter(v58);
  v60 = (_QWORD *)swift_allocObject(&unk_10026B770, 40, 7);
  v60[2] = v59;
  v60[3] = &protocol witness table for MainActor;
  v60[4] = v1;
  v61 = sub_100049DC0(v57, (uint64_t)&unk_100293BB8, (uint64_t)v60);
  swift_release(v61);
  v103 = (char *)v1[4];
  KeyPath = swift_getKeyPath(&unk_1001F05D0);
  v122[0] = v1;
  v63 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v122, KeyPath, v63);
  swift_release(KeyPath);
  v64 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, v122, 0, 0);
  v65 = *(double (**)(char *, char *, uint64_t))(v51 + 16);
  v65(v18, v64, v13);
  v66 = swift_getKeyPath(&unk_1001F05F8);
  v121[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v121, v66, v63);
  swift_release(v66);
  v67 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, v121, 0, 0);
  v68 = (uint64_t)v104;
  v69.n128_f64[0] = v65(v104, v67, v13);
  v70 = (uint64_t)v106;
  LanguagesService.$models.getter(v69);
  v71 = (void *)sub_1000B0A98((uint64_t)v18, v68, v70);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v70, v108);
  v72 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v72(v68, v13);
  v72((uint64_t)v18, v13);
  v119[0] = v71;
  v73 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v120 = (id)static OS_dispatch_queue.main.getter(v73);
  v108 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v107 = *(_QWORD *)(*(_QWORD *)(v108 - 8) + 56);
  v74 = (uint64_t)v112;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v112, 1, 1, v108);
  v75 = sub_100006DF4(&qword_10028DFA0);
  v76 = sub_100012334(&qword_10028DFA8, &qword_10028DFA0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v106 = (char *)sub_10001D984();
  v77 = v109;
  Publisher.receive<A>(on:options:)(&v120, v74, v75, v73, v76, v106);
  sub_10000A020(v74, &qword_100296BE0);

  swift_release(v119[0]);
  v78 = swift_allocObject(&unk_10026B608, 24, 7);
  swift_weakInit(v78 + 16, v1);
  v79 = sub_100012334(&qword_10028DFB0, &qword_10028DE98, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v80 = v111;
  v81 = Publisher<>.sink(receiveValue:)(sub_1001142D0, v78, v111, v79);
  v82 = swift_release(v78);
  (*(void (**)(char *, uint64_t, __n128))(v110 + 8))(v77, v80, v82);
  v83 = swift_getKeyPath(&unk_1001F0620);
  v119[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v119, v83, v63);
  swift_release(v83);
  v119[0] = v1;
  v84 = swift_getKeyPath(&unk_1001F0620);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v119, v84, v63);
  swift_release(v84);
  v85 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions, v119, 33, 0);
  AnyCancellable.store(in:)(v85);
  swift_endAccess(v119);
  swift_release(v81);
  v119[0] = v1;
  v86 = swift_getKeyPath(&unk_1001F0620);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v119, v86, v63);
  v87 = swift_release(v86);
  v88 = v113;
  v89 = LanguagesService.$localeModalities.getter(v87);
  v119[0] = (id)static OS_dispatch_queue.main.getter(v89);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v107)(v74, 1, 1, v108);
  v90 = sub_100012334(&qword_10028DFB8, &qword_10028DE80, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v92 = v115;
  v91 = v116;
  Publisher.receive<A>(on:options:)(v119, v74, v115, v73, v90, v106);
  sub_10000A020(v74, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v114 + 8))(v88, v92);
  v93 = swift_allocObject(&unk_10026B608, 24, 7);
  swift_weakInit(v93 + 16, v1);
  v94 = sub_100012334(&qword_10028DFC0, &qword_10028DE88, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v95 = v118;
  v96 = Publisher<>.sink(receiveValue:)(sub_1001142E0, v93, v118, v94);
  v97 = swift_release(v93);
  (*(void (**)(char *, uint64_t, __n128))(v117 + 8))(v91, v95, v97);
  v98 = swift_getKeyPath(&unk_1001F0620);
  v119[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v119, v98, v63);
  swift_release(v98);
  v119[0] = v1;
  v99 = swift_getKeyPath(&unk_1001F0620);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v119, v99, v63);
  swift_release(v99);
  swift_beginAccess(v85, v119, 33, 0);
  AnyCancellable.store(in:)(v85);
  swift_endAccess(v119);
  swift_release(v96);
  v119[0] = v1;
  v100 = swift_getKeyPath(&unk_1001F0620);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v119, v100, v63);
  swift_release(v100);
  return v1;
}

uint64_t sub_10010EB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[16] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[17] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[18] = v6;
  v4[19] = v7;
  return swift_task_switch(sub_10010EB80, v6, v7);
}

uint64_t sub_10010EB80()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = v0;
  v2 = v0 + 2;
  v3 = sub_10010BF8C();
  v4 = objc_msgSend(v3, "canonicalIdentifier");

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v1[20] = v5;
  v1[21] = v7;
  v8 = (void *)objc_opt_self(_LTTranslator);
  v1[7] = v1 + 15;
  v1[2] = v1;
  v1[3] = sub_10010EC74;
  v9 = swift_continuation_init(v2, 0);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000;
  v1[2] = sub_10010EDD4;
  v1[3] = &unk_10026B788;
  v1[4] = v9;
  objc_msgSend(v8, "autoDetectSpeechUnsupportedPairsWithCompletion:", v1);
  return swift_continuation_await(v2);
}

uint64_t sub_10010EC74()
{
  uint64_t v0;

  return swift_task_switch(sub_10010ECB8, *(_QWORD *)(*(_QWORD *)v0 + 144), *(_QWORD *)(*(_QWORD *)v0 + 152));
}

uint64_t sub_10010ECB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t KeyPath;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 136));
  v4 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(v2);
  v5 = sub_100113758(v4, v1, v2);
  swift_bridgeObjectRelease_n(v2, 2);
  swift_bridgeObjectRelease(v4);

  LOBYTE(v2) = v5 == 0;
  KeyPath = swift_getKeyPath(&unk_1001F0698);
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v2;
  *(_QWORD *)(v0 + 80) = v3;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 80, KeyPath, sub_1001143E8);
  swift_release(KeyPath);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010EDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = sub_10000A05C(0, (unint64_t *)&qword_100295470, _LTLocalePair_ptr);
  **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  return swift_continuation_resume(v3);
}

double sub_10010EE28(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  char v20[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    KeyPath = swift_getKeyPath(&unk_1001F0670);
    v19 = v6;
    v8 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v8);
    swift_release(KeyPath);
    v9 = *(_BYTE *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__stateError) != 3 && v2 == 3;
    if (v9
      && (v10 = swift_getKeyPath(&unk_1001F0558),
          v19 = v6,
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v10, v8),
          swift_release(v10),
          (*(_BYTE *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListening) & 1) == 0))
    {
      v12 = swift_getKeyPath(&unk_1001F04E0);
      v19 = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v12, v8);
      swift_release(v12);
      v11 = *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation) == 0;
    }
    else
    {
      v11 = 0;
    }
    v13 = swift_getKeyPath(&unk_1001F0670);
    __chkstk_darwin(v13);
    v19 = v6;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, v13, sub_100114388);
    swift_release(v13);
    if (v11)
    {
      if (qword_10028A440 != -1)
        swift_once(&qword_10028A440, sub_100121004);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10000F66C(v14, (uint64_t)qword_1002AA3C8);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting speech translation after change in error state from error to no error", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      sub_10010F3D0();
      sub_1001100B8();
    }
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

double sub_10010F0B4(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t Strong;
  double result;
  uint64_t v11;
  id v12;
  Class isa;
  void (*v14)(_BYTE *, uint64_t);
  unsigned int v15;
  Class v16;
  unsigned __int8 v17;
  uint64_t KeyPath;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24[24];

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v24, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v11 = Strong;
    if (v8)
    {
      v12 = v8;
      sub_10010C178((uint64_t)v7);
      isa = Locale._bridgeToObjectiveC()().super.isa;
      v14 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v14(v7, v4);
      v15 = objc_msgSend(v12, "locale:supportsModality:", isa, 1);

      sub_10010C44C((uint64_t)v7);
      v16 = Locale._bridgeToObjectiveC()().super.isa;
      v14(v7, v4);
      v17 = objc_msgSend(v12, "locale:supportsModality:", v16, 1);

      KeyPath = swift_getKeyPath(&unk_1001F0648);
      __chkstk_darwin(KeyPath);
      *(_QWORD *)&v22[-16] = v11;
      v22[-8] = v15;
      v22[-7] = v17;
      v23 = v11;
      sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, KeyPath, sub_1001142F0);
      swift_release(KeyPath);
      if (!v15 || (v17 & 1) == 0)
      {
        v19 = swift_getKeyPath(&unk_1001F0580);
        __chkstk_darwin(v19);
        *(_QWORD *)&v22[-16] = v11;
        *(_QWORD *)&v22[-8] = 0;
        v23 = v11;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v19, sub_100114154);
        swift_release(v19);
        v20 = sub_10010BAA0();
        sub_10016D1D0();

      }
      swift_release(v11);

    }
    else
    {
      v21 = swift_getKeyPath(&unk_1001F0648);
      __chkstk_darwin(v21);
      *(_QWORD *)&v22[-16] = v11;
      *(_WORD *)&v22[-8] = 257;
      v23 = v11;
      sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v21, sub_1001142F0);
      swift_release(v11);
      *(_QWORD *)&result = swift_release(v21).n128_u64[0];
    }
  }
  return result;
}

double sub_10010F3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  _BYTE v25[16];
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v1 = v0;
  v2 = sub_100006DF4(&qword_100293370);
  __chkstk_darwin(v2);
  v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100006DF4(&qword_100296470);
  __chkstk_darwin(v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v8);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = swift_allocObject(&unk_10026B608, 24, 7);
  swift_weakInit(v12 + 16, v0);
  type metadata accessor for MainActor(0);
  swift_retain(v12);
  v14 = static MainActor.shared.getter(v13);
  v15 = (_QWORD *)swift_allocObject(&unk_10026B850, 40, 7);
  v15[2] = v14;
  v15[3] = &protocol witness table for MainActor;
  v15[4] = v12;
  swift_release(v12);
  v16 = sub_100049DC0((uint64_t)v10, (uint64_t)&unk_100293BF0, (uint64_t)v15);
  swift_release(v16);
  KeyPath = swift_getKeyPath(&unk_1001F04E0);
  v35 = 0;
  v36 = 0;
  v34 = v1;
  v37[0] = v1;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v37, KeyPath, sub_10011373C);
  swift_release(KeyPath);
  v18 = sub_100006DF4(&qword_100293300);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
  v19 = swift_getKeyPath(&unk_1001F0530);
  v32 = v1;
  v33 = v7;
  v37[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v37, v19, sub_10011466C);
  swift_release(v19);
  sub_10000A020((uint64_t)v7, &qword_100296470);
  v20 = sub_100006DF4(&qword_100293378);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v4, 1, 1, v20);
  v21 = swift_getKeyPath(&unk_1001F0508);
  v30 = v1;
  v31 = v4;
  v37[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v37, v21, sub_100114658);
  swift_release(v21);
  sub_10000A020((uint64_t)v4, &qword_100293370);
  v22 = swift_getKeyPath(&unk_1001F0698);
  v28 = v1;
  v29 = 1;
  v37[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v37, v22, sub_1001146BC);
  swift_release(v22);
  v23 = swift_getKeyPath(&unk_1001F0558);
  v26 = v1;
  v27 = 0;
  v37[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v37, v23, sub_1001146A8);
  *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  return result;
}

double sub_10010F764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v9 = swift_allocObject(&unk_10026B608, 24, 7);
  swift_weakInit(v9 + 16, v1);
  type metadata accessor for MainActor(0);
  swift_retain(v9);
  v11 = static MainActor.shared.getter(v10);
  v12 = (_QWORD *)swift_allocObject(&unk_10026B800, 40, 7);
  v12[2] = v11;
  v12[3] = &protocol witness table for MainActor;
  v12[4] = v9;
  swift_release(v9);
  v13 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100293BE0, (uint64_t)v12);
  v14 = swift_release(v13);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v8)(v6, 1, 1, v7, v14);
  swift_retain(a1);
  swift_retain(v1);
  v16 = static MainActor.shared.getter(v15);
  v17 = (_QWORD *)swift_allocObject(&unk_10026B828, 56, 7);
  v17[2] = v16;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = 0;
  v17[5] = v2;
  v17[6] = a1;
  v18 = sub_100091560((uint64_t)v6, (uint64_t)&unk_100293BE8, (uint64_t)v17);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

uint64_t sub_10010F8F4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + 88) = a5;
  *(_QWORD *)(v6 + 96) = a6;
  *(double *)(v6 + 80) = a1;
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 104) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  *(_QWORD *)(v6 + 112) = v8;
  *(_QWORD *)(v6 + 120) = v9;
  return swift_task_switch(sub_10010F964, v8, v9);
}

void sub_10010F964()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 80) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 128) = v3;
    *v3 = v0;
    v3[1] = sub_10010FA00;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10010FA00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10010FE44;
  else
    v4 = sub_10010FA60;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_10010FA60()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  double v19;

  *(_QWORD *)(v0 + 40) = &type metadata for TranslateFeatures;
  v1 = sub_100009BC4();
  *(_BYTE *)(v0 + 16) = 9;
  *(_QWORD *)(v0 + 48) = v1;
  v2 = isFeatureEnabled(_:)(v0 + 16);
  sub_100009C08((_QWORD *)(v0 + 16));
  if ((v2 & 1) != 0)
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10000F66C(v3, (uint64_t)qword_1002AA3C8);
    *(_QWORD *)(v0 + 144) = v4;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Waiting for existing recording stop task to finish", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 88);

    KeyPath = swift_getKeyPath(&unk_1001F0580);
    *(_QWORD *)(v0 + 72) = v8;
    v10 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 72, KeyPath, v10);
    swift_release(KeyPath);
    v11 = *(_QWORD *)(v8
                    + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__currentRecordingStopTonePlaybackTask);
    *(_QWORD *)(v0 + 152) = v11;
    if (v11)
    {
      v12 = async function pointer to Task<>.value.getter[1];
      swift_retain(v11);
      v13 = (_QWORD *)swift_task_alloc(v12);
      *(_QWORD *)(v0 + 160) = v13;
      *v13 = v0;
      v13[1] = sub_10010FD04;
      return Task<>.value.getter(v0 + 56, v11, &type metadata for String);
    }
    swift_release(*(_QWORD *)(v0 + 104));
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Done waiting for existing recording stop task to finish. Continue to endActivity", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 104));
  }
  if (qword_10028A4D8 != -1)
    swift_once(&qword_10028A4D8, sub_100173130);
  v19 = sub_100173974(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(double))(v0 + 8))(v19);
}

uint64_t sub_10010FD04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  swift_release(v2);
  return swift_task_switch(sub_10010FD58, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_10010FD58()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  double v5;

  swift_release(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Done waiting for existing recording stop task to finish. Continue to endActivity", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  if (qword_10028A4D8 != -1)
    swift_once(&qword_10028A4D8, sub_100173130);
  v5 = sub_100173974(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(double))(v0 + 8))(v5);
}

uint64_t sub_10010FE44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010FE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 48) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 56) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10010FEE4, v6, v7);
}

uint64_t sub_10010FEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  __n128 v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 56));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    KeyPath = swift_getKeyPath(&unk_1001F05A8);
    v6 = swift_task_alloc(32);
    *(_QWORD *)(v6 + 16) = v4;
    *(_DWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v0 + 40) = v4;
    v7 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, KeyPath, sub_1001146D0);
    swift_release(KeyPath);
    swift_task_dealloc(v6);
    v8 = swift_getKeyPath(&unk_1001F0558);
    *(_QWORD *)(v0 + 40) = v4;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, v8, v7);
    swift_release(v8);
    if (*(_BYTE *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListening) == 1)
    {
      v9 = sub_10010BAA0();
      v10 = &v9[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate];
      v11 = swift_unknownObjectWeakLoadStrong(&v9[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate]);
      if (v11)
      {
        v12 = v11;
        v13 = *((_QWORD *)v10 + 1);
        ObjectType = swift_getObjectType(v11);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v13 + 16))(0, ObjectType, v13);
        swift_unknownObjectRelease(v12);
      }
      v15 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer];
      if (v15)
        objc_msgSend(*(id *)(v15 + 48), "endAudio");
      sub_100147478();

    }
    v3 = swift_release(v4);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

void sub_1001100B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  _QWORD v59[3];

  v1 = v0;
  v55 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v55 - 8);
  v2 = __chkstk_darwin(v55);
  v54 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v50 - v4;
  v6 = type metadata accessor for Locale(0);
  v56 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v50 - v10;
  KeyPath = swift_getKeyPath(&unk_1001F06C0);
  v59[0] = v0;
  v13 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v59, KeyPath, v13);
  swift_release(KeyPath);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock);
  swift_retain(v14);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 20));
  v15 = *(_BYTE *)(v14 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 20));
  swift_release(v14);
  if ((v15 & 1) != 0)
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA3C8);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_23;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "Already listening to the user";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc(v20, -1, -1);
LABEL_23:

    return;
  }
  v22 = swift_getKeyPath(&unk_1001F0670);
  v59[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v59, v22, v13);
  swift_release(v22);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__stateError) != 3
    || *(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel_appRunForTheFirstTime) != 1)
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10000F66C(v31, (uint64_t)qword_1002AA3C8);
    v18 = Logger.logObject.getter(v32);
    v19 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_23;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "State error present: not starting speech translation";
    goto LABEL_22;
  }
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10000F66C(v23, (uint64_t)qword_1002AA3C8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Starting speech translation", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  if (qword_10028A4D8 != -1)
    swift_once(&qword_10028A4D8, sub_100173130);
  v28 = *(_QWORD *)(qword_1002AA528
                  + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity);
  if (v28)
  {
    v29 = swift_retain(*(_QWORD *)(qword_1002AA528
                                 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity));
    Activity.attributes.getter(v59, v29);
    swift_release(v28);
    v30 = 2;
    if (LOBYTE(v59[0]))
      v30 = 4;
    v51 = v30;
  }
  else
  {
    v51 = 0;
  }
  v52 = sub_10010BAA0();
  v33 = swift_getKeyPath(&unk_1001F05D0);
  v59[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v59, v33, v13);
  swift_release(v33);
  v34 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, v59, 0, 0);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  v35(v11, v34, v6);
  v36 = swift_getKeyPath(&unk_1001F05F8);
  v58[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v58, v36, v13);
  swift_release(v36);
  v37 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, v58, 0, 0);
  v38 = ((uint64_t (*)(char *, uint64_t, uint64_t))v35)(v9, v37, v6);
  v39 = UUID.init()(v38);
  v50 = UUID.uuidString.getter(v39);
  v41 = v40;
  v53 = *(_QWORD *)(v53 + 8);
  v42 = v55;
  ((void (*)(char *, uint64_t))v53)(v5, v55);
  v43 = swift_getKeyPath(&unk_1001F0698);
  v57 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v57, v43, v13);
  swift_release(v43);
  v44 = *(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable);
  v45 = (uint64_t)v54;
  UUID.init()(v46);
  v47 = (v44 & 1) == 0;
  v48 = v52;
  sub_10016C848((uint64_t)v11, (uint64_t)v9, v50, v41, 0, 1, 1, v47, 1u, v51, 0, v45);
  swift_bridgeObjectRelease();

  ((void (*)(uint64_t, uint64_t))v53)(v45, v42);
  v49 = *(void (**)(char *, uint64_t))(v56 + 8);
  v49(v9, v6);
  v49(v11, v6);
}

uint64_t sub_1001106CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void (*v18)(char *, uint64_t, __n128);
  char *v19;
  uint64_t v20;
  __n128 v21;
  _QWORD v23[2];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD v32[4];

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v24 = *(_QWORD *)(v2 - 8);
  v3 = v24;
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v23 - v7;
  v25 = (char *)v23 - v7;
  v9 = sub_10010BAA0();
  sub_10016D284();

  KeyPath = swift_getKeyPath(&unk_1001F05D0);
  v32[0] = v1;
  v11 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v32, KeyPath, v11);
  swift_release(KeyPath);
  v12 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, v32, 0, 0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13(v8, v12, v2);
  v14 = swift_getKeyPath(&unk_1001F05F8);
  v31[0] = v1;
  v23[1] = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v31, v14, v11);
  swift_release(v14);
  v15 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, v31, 0, 0);
  v13(v6, v15, v2);
  v16 = swift_getKeyPath(&unk_1001F05D0);
  v28 = v1;
  v29 = v6;
  v30 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v30, v16, sub_100114680);
  v17 = swift_release(v16);
  v18 = *(void (**)(char *, uint64_t, __n128))(v24 + 8);
  v18(v6, v2, v17);
  v19 = v25;
  v13(v6, (uint64_t)v25, v2);
  v20 = swift_getKeyPath(&unk_1001F05F8);
  v26 = v1;
  v27 = v6;
  v30 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v30, v20, sub_100114694);
  v21 = swift_release(v20);
  v18(v6, v2, v21);
  return ((uint64_t (*)(char *, uint64_t))v18)(v19, v2);
}

uint64_t sub_10011093C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  *(_BYTE *)(v7 + 64) = a7;
  *(_QWORD *)(v7 + 32) = a5;
  *(_QWORD *)(v7 + 40) = a6;
  *(_QWORD *)(v7 + 24) = a4;
  return swift_task_switch(sub_10011095C, 0, 0);
}

uint64_t sub_10011095C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100298DAC);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1001109C8;
  return sub_1001D0ED8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), 0, 0, 0, *(_BYTE *)(v0 + 64), 0, 0);
}

uint64_t sub_1001109C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100110A34, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100110A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA3C8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Exception while toggling TTS: %@", v8, 0xCu);
    v11 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100110C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v7 = type metadata accessor for Logger(0);
  sub_10000F66C(v7, (uint64_t)qword_1002AA3C8);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(a1);
    v13 = _swift_stdlib_bridgeErrorToNSError(a1);
    v40 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v11 + 4);
    *v12 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Speech manager failed to translate: %@", v11, 0xCu);
    v14 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v40 = a1;
  swift_errorRetain(a1);
  v15 = sub_100006DF4((uint64_t *)&unk_100296430);
  type metadata accessor for _LTTranslationError(0);
  v17 = v16;
  if ((swift_dynamicCast(&v39, &v40, v15, v16, 6) & 1) != 0)
  {
    v18 = v39;
    v19 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100);
    _BridgedStoredNSError.code.getter(&v40, v17, v19);
    if ((sub_10010BA3C(v40, (uint64_t)&off_100262278) & 1) != 0)
    {
      KeyPath = swift_getKeyPath(&unk_1001F0648);
      v40 = v2;
      v21 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v40, KeyPath, v21);
      swift_release(KeyPath);
      v22 = v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported;
      if (*(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported) == 1)
      {
        v23 = swift_getKeyPath(&unk_1001F0648);
        v40 = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v40, v23, v21);
        swift_release(v23);
        if ((*(_BYTE *)(v22 + 1) & 1) != 0)
        {
          sub_10010F764(0);

          return result;
        }
      }
    }

  }
  v40 = a1;
  swift_errorRetain(a1);
  if ((swift_dynamicCast(&v39, &v40, v15, v17, 6) & 1) == 0
    || (v25 = v39,
        v26 = sub_100007D5C(&qword_10028A8E8, (uint64_t (*)(uint64_t))type metadata accessor for _LTTranslationError, (uint64_t)&unk_1001E6100), _BridgedStoredNSError.code.getter(&v40, v17, v26), v25, v40 != 11))
  {
    v27 = type metadata accessor for TaskPriority(0);
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
    v28(v6, 1, 1, v27);
    v29 = swift_allocObject(&unk_10026B608, 24, 7);
    swift_weakInit(v29 + 16, v2);
    type metadata accessor for MainActor(0);
    swift_retain(v29);
    v31 = static MainActor.shared.getter(v30);
    v32 = (_QWORD *)swift_allocObject(&unk_10026B7B0, 40, 7);
    v32[2] = v31;
    v32[3] = &protocol witness table for MainActor;
    v32[4] = v29;
    swift_release(v29);
    v33 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100293BC8, (uint64_t)v32);
    v34 = swift_release(v33);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v28)(v6, 1, 1, v27, v34);
    swift_retain(v2);
    v36 = static MainActor.shared.getter(v35);
    v37 = (_QWORD *)swift_allocObject(&unk_10026B7D8, 56, 7);
    v37[2] = v36;
    v37[3] = &protocol witness table for MainActor;
    v37[4] = 0x4000000000000000;
    v37[5] = v2;
    v37[6] = 0;
    v38 = sub_100091560((uint64_t)v6, (uint64_t)&unk_100293BD8, (uint64_t)v37);
    *(_QWORD *)&result = swift_release(v38).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001110B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale;
  v2 = type metadata accessor for Locale(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, v2);

  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation));
  sub_10000A020(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult, &qword_100296470);
  sub_10000A020(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, &qword_100293370);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__subscriptions));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__currentRecordingStopTonePlaybackTask));
  v4 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel___observationRegistrar;
  v5 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t sub_1001111EC()
{
  uint64_t v0;

  sub_1001110B0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100111210()
{
  return type metadata accessor for LiveActivityViewModel(0);
}

uint64_t type metadata accessor for LiveActivityViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002936B8;
  if (!qword_1002936B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LiveActivityViewModel);
  return result;
}

void sub_100111254(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;

  v10[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v10[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v10[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[4] = "\b";
  v10[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v11 = *(_QWORD *)(v2 - 8) + 64;
    v12 = v11;
    v13 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v14 = &unk_1001F0440;
    sub_1001113B4(319, &qword_1002936C8, &qword_100293300);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      sub_1001113B4(319, (unint64_t *)&unk_1002936D0, &qword_100293378);
      if (v7 <= 0x3F)
      {
        v16 = *(_QWORD *)(v6 - 8) + 64;
        v17 = &unk_1001F0458;
        v18 = &unk_1001F0458;
        v19 = (char *)&value witness table for Builtin.NativeObject + 64;
        v20 = (char *)&value witness table for Builtin.Int32 + 64;
        v21 = (char *)&value witness table for Builtin.BridgeObject + 64;
        v22 = &unk_1001F0470;
        v23 = &unk_1001F0458;
        v24 = &unk_1001F0488;
        v25 = "\b";
        v8 = type metadata accessor for ObservationRegistrar(319);
        if (v9 <= 0x3F)
        {
          v26 = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 22, v10, a1 + 80);
        }
      }
    }
  }
}

void sub_1001113B4(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_1000070BC(a3);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_100111404(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA3C8);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134349056;
    v19 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Speech: input detected at %{public}f level", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = swift_allocObject(&unk_10026B608, 24, 7);
  swift_weakInit(v13 + 16, v2);
  type metadata accessor for MainActor(0);
  swift_retain(v13);
  v15 = static MainActor.shared.getter(v14);
  v16 = swift_allocObject(&unk_10026B748, 44, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v16 + 32) = v13;
  *(float *)(v16 + 40) = a1;
  swift_release(v13);
  v17 = sub_100049F0C((uint64_t)v6, (uint64_t)&unk_100293BA0, v16);
  swift_release(v17);
}

double sub_100111604(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010D14C(a1);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  type metadata accessor for MainActor(0);
  swift_retain(v1);
  v9 = static MainActor.shared.getter(v8);
  v10 = swift_allocObject(&unk_10026B720, 41, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v10 + 32) = v2;
  *(_BYTE *)(v10 + 40) = a1;
  v11 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100293B90, v10);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_1001116F0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double result;
  uint64_t v22;

  v3 = v2;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  type metadata accessor for MainActor(0);
  swift_retain(v3);
  v15 = static MainActor.shared.getter(v14);
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = v17 + v8;
  v19 = (char *)swift_allocObject(&unk_10026B6F8, v17 + v8 + 1, v16 | 7);
  *((_QWORD *)v19 + 2) = v15;
  *((_QWORD *)v19 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v19 + 4) = v3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v19[v17], v9, v6);
  v19[v18] = a2;
  v20 = sub_100049DC0((uint64_t)v12, (uint64_t)&unk_100293B80, (uint64_t)v19);
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

double sub_100111864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  __int128 v14[2];

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  sub_100023AB0(a1, (uint64_t)v14);
  type metadata accessor for MainActor(0);
  swift_retain(v2);
  v9 = static MainActor.shared.getter(v8);
  v10 = (_QWORD *)swift_allocObject(&unk_10026B6D0, 80, 7);
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  sub_10003E994(v14, (uint64_t)(v10 + 4));
  v10[9] = v2;
  v11 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100293B70, (uint64_t)v10);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_100111964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double result;
  __int128 v15[2];
  __int128 v16[2];

  v3 = v2;
  v6 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_100023AB0(a1, (uint64_t)v16);
  sub_100023AB0(a2, (uint64_t)v15);
  type metadata accessor for MainActor(0);
  swift_retain(v3);
  v11 = static MainActor.shared.getter(v10);
  v12 = (_QWORD *)swift_allocObject(&unk_10026B5E0, 120, 7);
  v12[2] = v11;
  v12[3] = &protocol witness table for MainActor;
  v12[4] = v3;
  sub_10003E994(v16, (uint64_t)(v12 + 5));
  sub_10003E994(v15, (uint64_t)(v12 + 10));
  v13 = sub_100049DC0((uint64_t)v8, (uint64_t)&unk_100293B50, (uint64_t)v12);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

double sub_100111A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  type metadata accessor for MainActor(0);
  swift_retain(v1);
  v8 = swift_errorRetain(a1);
  v9 = static MainActor.shared.getter(v8);
  v10 = (_QWORD *)swift_allocObject(&unk_10026B5B8, 48, 7);
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v2;
  v10[5] = a1;
  v11 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100293B40, (uint64_t)v10);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

uint64_t sub_100111B68(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(float *)(v5 + 72) = a2;
  *(_QWORD *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 56) = a5;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 64) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100111BD8, v7, v8);
}

uint64_t sub_100111BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  int v3;
  uint64_t KeyPath;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = *(_DWORD *)(v0 + 72);
    KeyPath = swift_getKeyPath(&unk_1001F05A8);
    v5 = swift_task_alloc(32);
    *(_QWORD *)(v5 + 16) = Strong;
    *(_DWORD *)(v5 + 24) = v3;
    *(_QWORD *)(v0 + 40) = Strong;
    sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, KeyPath, sub_1001141F4);
    swift_release(Strong);
    swift_release(KeyPath);
    swift_task_dealloc(v5);
  }
  **(_BYTE **)(v0 + 48) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100111CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 72) = a5;
  *(_QWORD *)(v5 + 56) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 64) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100111D68, v7, v8);
}

uint64_t sub_100111D68()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 40) = &type metadata for TranslateFeatures;
  v1 = sub_100009BC4();
  *(_BYTE *)(v0 + 16) = 9;
  *(_QWORD *)(v0 + 48) = v1;
  v2 = isFeatureEnabled(_:)(v0 + 16);
  sub_100009C08((_QWORD *)(v0 + 16));
  if ((v2 & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 56);
    KeyPath = swift_getKeyPath(&unk_1001F0558);
    *(_QWORD *)(v0 + 16) = v4;
    v6 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v6);
    swift_release(KeyPath);
    if (v3 != *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListening))
    {
      if (qword_10028A4D8 != -1)
        swift_once(&qword_10028A4D8, sub_100173130);
      if (*(_QWORD *)(qword_1002AA528
                     + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity)
        && (*(_BYTE *)(v0 + 72) & 1) == 0
        && sub_10010DC7C() == 7)
      {
        v7 = *(_QWORD *)(v0 + 56);
        v15 = sub_100149364();
        v8 = swift_getKeyPath(&unk_1001F0580);
        v9 = swift_task_alloc(32);
        *(_QWORD *)(v9 + 16) = v7;
        *(_QWORD *)(v9 + 24) = v15;
        *(_QWORD *)(v0 + 16) = v7;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v8, sub_100114154);
        swift_release(v8);
        swift_release(v15);
        swift_task_dealloc(v9);
      }
    }
  }
  v10 = *(_BYTE *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = swift_getKeyPath(&unk_1001F0558);
  v13 = swift_task_alloc(32);
  *(_QWORD *)(v13 + 16) = v11;
  *(_BYTE *)(v13 + 24) = v10;
  *(_QWORD *)(v0 + 16) = v11;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v12, sub_100114134);
  swift_release(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100111FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v6 + 56) = a6;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a5;
  v7 = sub_100006DF4(&qword_100296470);
  *(_QWORD *)(v6 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 48) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_100112068, v9, v10);
}

uint64_t sub_100112068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 48));
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000F66C(v1, (uint64_t)qword_1002AA3C8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received final LID result", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_BYTE *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 24);

  v10 = sub_100006DF4(&qword_100293300);
  v11 = *(int *)(v10 + 48);
  v12 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v6, v7, v12);
  *(_BYTE *)(v6 + v11) = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 0, 1, v10);
  KeyPath = swift_getKeyPath(&unk_1001F0530);
  v14 = swift_task_alloc(32);
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v6;
  *(_QWORD *)(v0 + 16) = v9;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_10011403C);
  swift_release(KeyPath);
  swift_task_dealloc(v14);
  sub_10000A020(v6, &qword_100296470);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[3] = a4;
  v5[4] = a5;
  v6 = sub_100006DF4(&qword_100293370);
  v5[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[7] = v8;
  v5[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v5[9] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100112318, v10, v11);
}

uint64_t sub_100112318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t KeyPath;
  uint64_t v22;

  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000F66C(v1, (uint64_t)qword_1002AA3C8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received partial speech result", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD **)(v0 + 24);
  v11 = *(_QWORD *)(v0 + 32);

  v13 = v10[3];
  v12 = v10[4];
  sub_100023AF4(v10, v13);
  dispatch thunk of AnnotatedResult.locale.getter(v13, *(_QWORD *)(v12 + 16));
  v14 = v10[3];
  v15 = v10[4];
  sub_100023AF4(v10, v14);
  v16 = AnnotatedResult.displayString.getter(v14, *(_QWORD *)(v15 + 16));
  v18 = v17;
  v19 = sub_100006DF4(&qword_100293378);
  v20 = (uint64_t *)(v8 + *(int *)(v19 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v6, v9);
  *v20 = v16;
  v20[1] = v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 0, 1, v19);
  KeyPath = swift_getKeyPath(&unk_1001F0508);
  v22 = swift_task_alloc(32);
  *(_QWORD *)(v22 + 16) = v11;
  *(_QWORD *)(v22 + 24) = v8;
  *(_QWORD *)(v0 + 16) = v11;
  sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100113EC0);
  swift_release(KeyPath);
  swift_task_dealloc(v22);
  sub_10000A020(v8, &qword_100293370);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v9);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6[15] = a5;
  v6[16] = a6;
  v6[14] = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v6[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[18] = v8;
  v6[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v6[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[21] = v10;
  v6[22] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v6[23] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[24] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[25] = swift_task_alloc(v13);
  v6[26] = swift_task_alloc(v13);
  v14 = type metadata accessor for Locale(0);
  v6[27] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[28] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v6[29] = v16;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[30] = swift_task_alloc(v17);
  v6[31] = swift_task_alloc(v17);
  v6[32] = swift_task_alloc(v17);
  v6[33] = swift_task_alloc(v17);
  v18 = type metadata accessor for MainActor(0);
  v6[34] = static MainActor.shared.getter(v18);
  v19 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001126C4, v19, v20);
}

uint64_t sub_1001126C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  char *v6;
  char *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t *v51;
  uint64_t *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  void (*v65)(uint64_t, uint64_t, __n128);
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  void (*v69)(uint64_t, uint64_t, __n128);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;

  swift_release(*(_QWORD *)(v0 + 272));
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000F66C(v1, (uint64_t)qword_1002AA3C8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received final translation", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = sub_10010BAA0();
  v7 = &v6[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate]);
  if (Strong)
  {
    v9 = Strong;
    v10 = *((_QWORD *)v7 + 1);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v10 + 16))(0, ObjectType, v10);
    swift_unknownObjectRelease(v9);
  }
  v12 = *(_QWORD *)&v6[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer];
  if (v12)
    objc_msgSend(*(id *)(v12 + 48), "endAudio");
  v14 = *(_QWORD **)(v0 + 120);
  v13 = *(_QWORD **)(v0 + 128);
  sub_100147478();

  v15 = v14[3];
  v16 = v14[4];
  sub_100023AF4(v14, v15);
  dispatch thunk of AnnotatedResult.locale.getter(v15, *(_QWORD *)(v16 + 16));
  v18 = v14[3];
  v17 = v14[4];
  sub_100023AF4(v14, v18);
  v19 = AnnotatedResult.displayString.getter(v18, *(_QWORD *)(v17 + 16));
  v97 = v20;
  v21 = v13[3];
  v22 = v13[4];
  sub_100023AF4(v13, v21);
  dispatch thunk of TranslationResult.locale.getter(v21, v22);
  v23 = v13[3];
  v24 = v13[4];
  sub_100023AF4(v13, v23);
  v25 = dispatch thunk of TranslationResult.alternatives.getter(v23, v24);
  v26 = v25;
  if (*(_QWORD *)(v25 + 16))
  {
    sub_100023AB0(v25 + 32, v0 + 64);
    swift_bridgeObjectRelease(v26);
    v27 = *(_QWORD *)(v0 + 88);
    if (v27)
    {
      v28 = *(_QWORD *)(v0 + 96);
      sub_100023AF4((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
      v29 = TranslationAlternative.displayString.getter(v27, v28);
      v31 = v30;
      sub_100009C08((_QWORD *)(v0 + 64));
      goto LABEL_14;
    }
  }
  else
  {
    *(_QWORD *)(v0 + 96) = 0;
    *(_OWORD *)(v0 + 64) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    swift_bridgeObjectRelease(v25);
  }
  sub_10000A020(v0 + 64, &qword_100296440);
  v29 = 0;
  v31 = 0xE000000000000000;
LABEL_14:
  v32 = HIBYTE(v97) & 0xF;
  if ((v97 & 0x2000000000000000) == 0)
    v32 = v19 & 0xFFFFFFFFFFFFLL;
  if (v32)
  {
    v94 = v19;
    v33 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v33 = v29 & 0xFFFFFFFFFFFFLL;
    v35 = *(_QWORD *)(v0 + 256);
    v34 = *(_QWORD *)(v0 + 264);
    if (v33)
    {
      v82 = v31;
      v37 = *(_QWORD *)(v0 + 240);
      v36 = *(_QWORD *)(v0 + 248);
      v85 = *(_QWORD *)(v0 + 264);
      v80 = *(_QWORD *)(v0 + 232);
      v96 = *(_QWORD *)(v0 + 224);
      v95 = *(_QWORD *)(v0 + 216);
      v84 = *(_QWORD *)(v0 + 208);
      v38 = *(_QWORD *)(v0 + 192);
      v39 = *(_QWORD *)(v0 + 200);
      v40 = *(_QWORD *)(v0 + 184);
      v90 = v40;
      v83 = *(_QWORD *)(v0 + 176);
      v92 = *(_QWORD *)(v0 + 168);
      v93 = *(_QWORD *)(v0 + 160);
      v91 = *(_QWORD *)(v0 + 144);
      v87 = *(_QWORD *)(v0 + 152);
      v88 = *(_QWORD *)(v0 + 136);
      v79 = *(_QWORD *)(v0 + 112);
      v41 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
      v81 = v29;
      v86 = (void *)static OS_dispatch_queue.main.getter(v41);
      static DispatchTime.now()();
      + infix(_:_:)(v39, 0.5);
      v89 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
      v89(v39, v40);
      v78 = swift_allocObject(&unk_10026B608, 24, 7);
      swift_weakInit(v78 + 16, v79);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16);
      v42(v36, v34, v95);
      v42(v37, v35, v95);
      v43 = *(unsigned __int8 *)(v96 + 80);
      v44 = (v43 + 24) & ~v43;
      v45 = (v80 + v43 + v44) & ~v43;
      v46 = (v80 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
      v47 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
      v48 = swift_allocObject(&unk_10026B630, v47 + 16, v43 | 7);
      *(_QWORD *)(v48 + 16) = v78;
      v49 = v48 + v44;
      v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32);
      v50(v49, v36, v95);
      v50(v48 + v45, v37, v95);
      v51 = (uint64_t *)(v48 + v46);
      *v51 = v94;
      v51[1] = v97;
      v52 = (uint64_t *)(v48 + v47);
      *v52 = v81;
      v52[1] = v82;
      *(_QWORD *)(v0 + 48) = sub_1001136B4;
      *(_QWORD *)(v0 + 56) = v48;
      *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 24) = 1107296256;
      *(_QWORD *)(v0 + 32) = sub_100075908;
      *(_QWORD *)(v0 + 40) = &unk_10026B648;
      v53 = _Block_copy((const void *)(v0 + 16));
      swift_retain(v78);
      static DispatchQoS.unspecified.getter(v54);
      *(_QWORD *)(v0 + 104) = _swiftEmptyArrayStorage;
      v55 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v56 = sub_100006DF4(&qword_10028AC30);
      v57 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 104, v56, v57, v88, v55);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v84, v83, v87, v53);
      _Block_release(v53);

      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v87, v88);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v83, v93);
      v89(v84, v90);
      v58 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
      v58(v35, v95);
      v58(v85, v95);
      v59 = *(_QWORD *)(v0 + 56);
      swift_release(v78);
      swift_release(v59);
    }
    else
    {
      v66 = *(_QWORD *)(v0 + 216);
      v67 = *(_QWORD *)(v0 + 224);
      swift_bridgeObjectRelease(v31);
      v68 = swift_bridgeObjectRelease(v97);
      v69 = *(void (**)(uint64_t, uint64_t, __n128))(v67 + 8);
      v69(v35, v66, v68);
      ((void (*)(uint64_t, uint64_t))v69)(v34, v66);
    }
  }
  else
  {
    v61 = *(_QWORD *)(v0 + 256);
    v60 = *(_QWORD *)(v0 + 264);
    v62 = *(_QWORD *)(v0 + 216);
    v63 = *(_QWORD *)(v0 + 224);
    swift_bridgeObjectRelease(v31);
    v64 = swift_bridgeObjectRelease(v97);
    v65 = *(void (**)(uint64_t, uint64_t, __n128))(v63 + 8);
    v65(v61, v62, v64);
    ((void (*)(uint64_t, uint64_t))v65)(v60, v62);
  }
  v70 = *(_QWORD *)(v0 + 256);
  v72 = *(_QWORD *)(v0 + 240);
  v71 = *(_QWORD *)(v0 + 248);
  v74 = *(_QWORD *)(v0 + 200);
  v73 = *(_QWORD *)(v0 + 208);
  v75 = *(_QWORD *)(v0 + 176);
  v76 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100112D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  double result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD aBlock[5];
  uint64_t v78;
  char v79[32];
  char v80[24];

  v62 = a7;
  v65 = a6;
  v64 = a5;
  v63 = a4;
  v61 = a3;
  v60 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  __chkstk_darwin(v8);
  v73 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v71 = *(_QWORD *)(v10 - 8);
  v72 = v10;
  __chkstk_darwin(v10);
  v70 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for DispatchTime(0);
  v67 = *(_QWORD *)(v69 - 8);
  v12 = __chkstk_darwin(v69);
  v66 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v68 = (char *)&v57 - v14;
  v15 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v57 - v23;
  v25 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1 + 16;
  swift_beginAccess(v29, v80, 0, 0);
  Strong = swift_weakLoadStrong(v29);
  if (Strong)
  {
    v31 = Strong;
    v32 = UUID.init()(Strong);
    v59 = UUID.uuidString.getter(v32);
    v58 = v33;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v34(v24, v60, v18);
    v34(v22, v61, v18);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v17, 1, 1, v25);
    v35 = type metadata accessor for TestableTranslation(0);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v36 = v64;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v62);
    v38 = sub_1000AC35C(v59, v58, (uint64_t)v24, (uint64_t)v22, 0, v63, v36, v65, 1.0, v37, 0, 0, 0, (uint64_t)v17);
    sub_100007D5C(&qword_10028DFD8, type metadata accessor for TestableTranslation, (uint64_t)&unk_1001EC790);
    KeyPath = swift_getKeyPath(&unk_1001F04E0);
    __chkstk_darwin(KeyPath);
    aBlock[0] = v31;
    sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(aBlock, KeyPath, sub_10011373C);
    swift_release(v38);
    swift_release(KeyPath);
    swift_release(v31);
  }
  v40 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v41 = (void *)static OS_dispatch_queue.main.getter(v40);
  v42 = v66;
  static DispatchTime.now()();
  v43 = v68;
  + infix(_:_:)(v42, 1.0);
  v67 = *(_QWORD *)(v67 + 8);
  v44 = v69;
  ((void (*)(char *, uint64_t))v67)(v42, v69);
  v45 = swift_allocObject(&unk_10026B608, 24, 7);
  swift_beginAccess(v29, v79, 0, 0);
  v46 = swift_weakLoadStrong(v29);
  swift_weakInit(v45 + 16, v46);
  swift_release(v46);
  aBlock[4] = sub_100113750;
  v78 = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026B670;
  v47 = _Block_copy(aBlock);
  swift_retain(v45);
  v48 = v70;
  static DispatchQoS.unspecified.getter(v49);
  v76 = _swiftEmptyArrayStorage;
  v50 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v51 = sub_100006DF4(&qword_10028AC30);
  v52 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
  v53 = v73;
  v54 = v51;
  v55 = v75;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v54, v52, v75, v50);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v43, v48, v53, v47);
  _Block_release(v47);

  (*(void (**)(char *, uint64_t))(v74 + 8))(v53, v55);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v48, v72);
  ((void (*)(char *, uint64_t))v67)(v43, v44);
  swift_release(v78);
  *(_QWORD *)&result = swift_release(v45).n128_u64[0];
  return result;
}

double sub_10011337C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_100113A54(1);
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001133D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100113440, v7, v8);
}

uint64_t sub_100113440()
{
  uint64_t v0;
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  v2 = sub_100110C00(v1);
  return (*(uint64_t (**)(double))(v0 + 8))(v2);
}

uint64_t sub_100113480()
{
  return sub_100113D1C((void (*)(_QWORD))&_swift_errorRelease, 48);
}

uint64_t sub_100113490(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100293B3C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_1001133D4(a1, v4, v5, v7, v6);
}

uint64_t sub_100113508()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  sub_100009C08(v0 + 5);
  sub_100009C08(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100113544(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100293B4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D380;
  return sub_100112578(a1, v4, v5, v6, (uint64_t)(v1 + 5), (uint64_t)(v1 + 10));
}

uint64_t sub_1001135C8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001135EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  v10(v0 + v7, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v6);
}

double sub_1001136B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for Locale(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;
  return sub_100112D6C(*(_QWORD *)(v0 + 16), v0 + v3, v0 + v5, *(_QWORD *)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011371C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011372C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011373C()
{
  return sub_100114608();
}

double sub_100113750()
{
  uint64_t v0;

  return sub_10011337C(v0);
}

void *sub_100113758(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = v3;
  v7 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    v23 = v4;
    v24 = v7;
    v25 = v7 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v9 = v4 - 4;
      if (!v25)
        break;
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v7);
      v11 = v4 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_20;
LABEL_9:
      v12 = v8;
      v13 = v10;
      v14 = a3;
      v15 = objc_msgSend(v10, "canonicalIdentifier", v23);
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      a3 = v14;
      v19 = v16 == a2 && v18 == v14;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
LABEL_19:
        swift_bridgeObjectRelease(a3);
        return v13;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a2, v14, 0);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        a3 = v24;
        goto LABEL_19;
      }

      ++v4;
      v8 = v12;
      v19 = v11 == v12;
      v7 = v24;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);
        return 0;
      }
    }
    v10 = *(id *)(v7 + 8 * v4);
    v11 = v4 - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_9;
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0)
      v21 = v7;
    else
      v21 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  swift_bridgeObjectRelease(v7);
  return 0;
}

void sub_1001138FC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;

  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000F66C(v0, (uint64_t)qword_1002AA3C8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "translationd crashed while showing live activity, ending the activity now", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(_LTTranslationErrorDomain);
  v6 = v5;
  v7 = objc_allocWithZone((Class)NSError);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, 14, 0, swift_bridgeObjectRelease(v6).n128_f64[0]);

  v10 = v9;
  sub_100110C00((uint64_t)v10);

}

void sub_100113A54(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001F04E0);
  v26 = v1;
  v8 = sub_100007D5C(&qword_100293248, type metadata accessor for LiveActivityViewModel, (uint64_t)&unk_1001F04A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  if (v9)
  {
    v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation + 8);
    v11 = qword_10028A440;
    swift_unknownObjectRetain(*(_QWORD *)(v2
                                        + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation));
    if (v11 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA3C8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Toggling TTS", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
    v18 = swift_allocObject(&unk_10026B6A8, 57, 7);
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = v2;
    *(_QWORD *)(v18 + 40) = v9;
    *(_QWORD *)(v18 + 48) = v10;
    *(_BYTE *)(v18 + 56) = a1 & 1;
    swift_retain(v2);
    v19 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100293B60, v18);
    swift_release(v19);
  }
  else
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000F66C(v20, (uint64_t)qword_1002AA3C8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Cannot toggle TTS because there is no final translation", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
}

uint64_t sub_100113D0C()
{
  return sub_100113D1C((void (*)(_QWORD))&_swift_unknownObjectRelease, 57);
}

uint64_t sub_100113D1C(void (*a1)(_QWORD), uint64_t a2)
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2]);
  swift_release(v2[4]);
  a1(v2[5]);
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_100113D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 56);
  v4 = swift_task_alloc(dword_100293B5C);
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10003EFA0;
  *(_BYTE *)(v4 + 64) = v3;
  *(_QWORD *)(v4 + 40) = v2;
  *(_OWORD *)(v4 + 24) = v5;
  return swift_task_switch(sub_10011095C, 0, 0);
}

uint64_t sub_100113DE0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_100009C08(v0 + 4);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100113E14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[9];
  v8 = (_QWORD *)swift_task_alloc(dword_100293B6C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100112260(a1, v4, v5, v6, v7);
}

uint64_t sub_100113E90@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010CB44(a1, (uint64_t)&unk_1001F0508, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, &qword_100293370, a2);
}

uint64_t sub_100113EC0()
{
  uint64_t v0;

  return sub_10010CD08(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__partialSpeechResult, &qword_100293370);
}

uint64_t sub_100113EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100113F68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for Locale(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v11 = (_QWORD *)swift_task_alloc(dword_100293B7C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10003EFA0;
  return sub_100111FD4(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10011400C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010CB44(a1, (uint64_t)&unk_1001F0530, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult, &qword_100296470, a2);
}

uint64_t sub_10011403C()
{
  uint64_t v0;

  return sub_10010CD08(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalLIDResult, &qword_100296470);
}

uint64_t sub_100114064(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100006DF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001140A8()
{
  return sub_10003EC10(41);
}

uint64_t sub_1001140B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_100293B8C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100111CF8(a1, v4, v5, v6, v7);
}

void sub_100114134()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListening) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100114154()
{
  return sub_100114304();
}

uint64_t sub_100114168()
{
  return sub_10003EC10(44);
}

uint64_t sub_100114170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(float *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_100293B9C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100111B68(a1, v7, v4, v5, v6);
}

float sub_1001141F4()
{
  uint64_t v0;
  float result;

  result = *(float *)(v0 + 24);
  *(float *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__speechAudioLevel) = result;
  return result;
}

uint64_t sub_10011420C()
{
  return sub_10003EC10(40);
}

uint64_t sub_100114214(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100293BB4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_10010EB14(a1, v4, v5, v6);
}

uint64_t sub_100114280@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010BD40(a1, (uint64_t)&unk_1001F05D0, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale, a2);
}

uint64_t sub_1001142A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010BD40(a1, (uint64_t)&unk_1001F05F8, &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale, a2);
}

double sub_1001142D0(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_10010EE28(a1, v1);
}

double sub_1001142E0(void **a1)
{
  uint64_t v1;

  return sub_10010F0B4(a1, v1);
}

void sub_1001142F0()
{
  sub_100114344();
}

uint64_t sub_100114304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__currentRecordingStopTonePlaybackTask);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__currentRecordingStopTonePlaybackTask) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

void sub_100114344()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;

  v1 = *(_BYTE *)(v0 + 25);
  v2 = (_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isASRSupported);
  *v2 = *(_BYTE *)(v0 + 24);
  v2[1] = v1;
}

uint64_t sub_100114368()
{
  uint64_t v0;

  return sub_10010D674(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100114388()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__stateError) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1001143A0()
{
  uint64_t v0;

  return sub_10010BF14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedTargetLocale);
}

uint64_t sub_1001143C0()
{
  uint64_t v0;

  return sub_10010BF14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__selectedSourceLocale);
}

void sub_1001143E8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__languageIDAvailable) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100114400()
{
  return sub_10003EC10(40);
}

uint64_t sub_100114408(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100293BC4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_10010FE78(a1, v4, v5, v6);
}

uint64_t sub_100114478(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v8 = *((_QWORD *)v1 + 5);
  v7 = *((_QWORD *)v1 + 6);
  v9 = (_QWORD *)swift_task_alloc(dword_100293BD4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_10010F8F4(v6, a1, v4, v5, v8, v7);
}

uint64_t sub_100114500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__isListeningLock) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_100114540()
{
  return sub_10003EC10(40);
}

uint64_t sub_10011454C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100114580(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v8 = *((_QWORD *)v1 + 5);
  v7 = *((_QWORD *)v1 + 6);
  v9 = (_QWORD *)swift_task_alloc(dword_100293BD4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D380;
  return sub_10010F8F4(v6, a1, v4, v5, v8, v7);
}

uint64_t sub_100114600()
{
  return sub_10003EC10(40);
}

uint64_t sub_100114608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation);
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21LiveActivityViewModel__finalTranslation) = v3;
  swift_unknownObjectRetain(v3);
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_100114658()
{
  return sub_100113EC0();
}

uint64_t sub_10011466C()
{
  return sub_10011403C();
}

uint64_t sub_100114680()
{
  return sub_1001143C0();
}

uint64_t sub_100114694()
{
  return sub_1001143A0();
}

void sub_1001146A8()
{
  sub_100114134();
}

void sub_1001146BC()
{
  sub_1001143E8();
}

float sub_1001146D0()
{
  return sub_1001141F4();
}

void sub_1001146E4()
{
  sub_100114388();
}

uint64_t initializeBufferWithCopyOfBuffer for LiveActivityWithLIDListeningView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for LiveActivityWithLIDListeningView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

uint64_t *assignWithTake for LiveActivityWithLIDListeningView(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for LiveActivityWithLIDListeningView()
{
  return &type metadata for LiveActivityWithLIDListeningView;
}

uint64_t sub_1001147B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100214E60, 1);
}

_QWORD *sub_1001147C4@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1001151B0();
  return EnvironmentValues.subscript.getter(a1, &type metadata for TypesettingLanguage, &type metadata for TypesettingLanguage, v2);
}

uint64_t sub_100114800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  unint64_t v10;
  __n128 v11;
  uint64_t v13;

  v2 = type metadata accessor for Locale.Language(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v13 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v13 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  v10 = sub_1001151B0();
  EnvironmentValues.subscript.setter(v6, &type metadata for TypesettingLanguage, &type metadata for TypesettingLanguage, v10, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_1001148E0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String *v15;
  uint64_t v16;
  Swift::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  id v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  int v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  char *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;

  v108 = a3;
  v4 = a2 & 1;
  v5 = sub_100006DF4(&qword_1002926B8);
  __chkstk_darwin(v5);
  v111 = (uint64_t *)((char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v109 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v109 - 8);
  v8 = __chkstk_darwin(v109);
  v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v93 - v11;
  v110 = type metadata accessor for LabeledTextView(0);
  v13 = __chkstk_darwin(v110);
  v15 = (Swift::String *)((char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v17 = (Swift::String *)((char *)&v93 - v16);
  v113 = sub_100006DF4(&qword_100293280);
  v18 = __chkstk_darwin(v113);
  v107 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v106 = (uint64_t)&v93 - v21;
  v22 = __chkstk_darwin(v20);
  v104 = (uint64_t)&v93 - v23;
  v24 = __chkstk_darwin(v22);
  v105 = (uint64_t)&v93 - v25;
  v26 = __chkstk_darwin(v24);
  v103 = (uint64_t)&v93 - v27;
  __chkstk_darwin(v26);
  v112 = (uint64_t)&v93 - v28;
  swift_retain(a1);
  v97 = v4;
  v30 = sub_1000D6114(v29, v4);
  swift_release(a1);
  v31 = sub_10010C178((uint64_t)v12);
  static Locale.current.getter(v31);
  v101 = v10;
  v32 = Locale.sqDisplayName(context:in:)(1, v10);
  v34 = v33;
  v35 = *(void (**)(char *, uint64_t))(v7 + 8);
  v36 = v10;
  v37 = v109;
  v35(v36, v109);
  v35(v12, v37);
  v96 = v35;
  swift_release(v30);
  if (v34)
    v38 = v32;
  else
    v38 = 0;
  v39 = 0xE000000000000000;
  if (v34)
    v39 = v34;
  v94 = v39;
  v95 = v38;
  swift_retain(a1);
  v41 = sub_1000D6114(v40, v4);
  swift_release(a1);
  sub_10010C178((uint64_t)v12);
  swift_release(v41);
  v102 = (id)objc_opt_self(NSBundle);
  v42 = objc_msgSend(v102, "mainBundle");
  v43._object = (void *)0x80000001001FDA80;
  v100 = (void *)0x80000001001FDA80;
  v43._countAndFlagsBits = 0xD000000000000011;
  v44._countAndFlagsBits = 0x617A696C61636F4CLL;
  v44._object = (void *)0xEB00000000656C62;
  v45 = Locale.ltLocalizedAppString(_:table:bundle:)(v43, v44, (NSBundle)v42);

  v35(v12, v37);
  KeyPath = swift_getKeyPath(&unk_1001F0768);
  v47 = (uint64_t)v111;
  *v111 = KeyPath;
  v99 = sub_100006DF4(&qword_100291490);
  swift_storeEnumTagMultiPayload(v47, v99, 0);
  v48 = swift_getKeyPath(&unk_1001F0790);
  v49 = swift_getKeyPath(&unk_1001F07C0);
  v50 = v110;
  v51 = (uint64_t *)((char *)&v17->_countAndFlagsBits + *(int *)(v110 + 44));
  *v51 = v49;
  v98 = sub_100006DF4(&qword_1002969A0);
  swift_storeEnumTagMultiPayload(v51, v98, 0);
  v52 = (void *)v94;
  v17->_countAndFlagsBits = v95;
  v17->_object = v52;
  v17[1] = v45;
  LOWORD(v17[2]._countAndFlagsBits) = 0;
  v17[2]._object = 0;
  v17[3]._countAndFlagsBits = 0;
  v53 = sub_1000110A4(v47, (uint64_t)v17 + *(int *)(v50 + 36), &qword_1002926B8);
  v54 = (char *)v17 + *(int *)(v50 + 40);
  *(_QWORD *)v54 = v48;
  v54[8] = 0;
  v55 = static Color.sourceTextColor.getter(v53);
  v56 = v103;
  sub_1001150A8((uint64_t)v17, v103);
  *(_QWORD *)(v56 + *(int *)(v113 + 36)) = v55;
  sub_1001150EC((uint64_t)v17);
  sub_1000110A4(v56, v112, &qword_100293280);
  swift_retain(a1);
  v57 = v97;
  v59 = sub_1000D6114(v58, v97);
  swift_release(a1);
  v60 = sub_10010C44C((uint64_t)v12);
  v61 = v101;
  static Locale.current.getter(v60);
  v62 = Locale.sqDisplayName(context:in:)(1, v61);
  v64 = v63;
  v65 = v109;
  v66 = v96;
  v96(v61, v109);
  v66(v12, v65);
  swift_release(v59);
  if (v64)
    v67 = v62;
  else
    v67 = 0;
  v103 = v67;
  if (!v64)
    v64 = 0xE000000000000000;
  swift_retain(a1);
  v69 = sub_1000D6114(v68, v57);
  swift_release(a1);
  sub_10010C44C((uint64_t)v12);
  *(_QWORD *)&v70 = swift_release(v69).n128_u64[0];
  v71 = objc_msgSend(v102, "mainBundle", v70);
  v72._countAndFlagsBits = 0xD000000000000011;
  v72._object = v100;
  v73._countAndFlagsBits = 0x617A696C61636F4CLL;
  v73._object = (void *)0xEB00000000656C62;
  v74 = Locale.ltLocalizedAppString(_:table:bundle:)(v72, v73, (NSBundle)v71);

  v66(v12, v65);
  v75 = swift_getKeyPath(&unk_1001F0768);
  v76 = (uint64_t)v111;
  *v111 = v75;
  swift_storeEnumTagMultiPayload(v76, v99, 0);
  v77 = swift_getKeyPath(&unk_1001F0790);
  v78 = swift_getKeyPath(&unk_1001F07C0);
  v79 = v110;
  v80 = (uint64_t *)((char *)&v15->_countAndFlagsBits + *(int *)(v110 + 44));
  *v80 = v78;
  swift_storeEnumTagMultiPayload(v80, v98, 0);
  v15->_countAndFlagsBits = v103;
  v15->_object = (void *)v64;
  v15[1] = v74;
  LOWORD(v15[2]._countAndFlagsBits) = 1;
  v15[2]._object = 0;
  v15[3]._countAndFlagsBits = 0;
  v81 = sub_1000110A4(v76, (uint64_t)v15 + *(int *)(v79 + 36), &qword_1002926B8);
  v82 = (char *)v15 + *(int *)(v79 + 40);
  *(_QWORD *)v82 = v77;
  v82[8] = 0;
  v83 = static Color.translateAccentColor.getter(v81);
  v84 = v104;
  sub_1001150A8((uint64_t)v15, v104);
  *(_QWORD *)(v84 + *(int *)(v113 + 36)) = v83;
  sub_1001150EC((uint64_t)v15);
  v85 = v105;
  sub_1000110A4(v84, v105, &qword_100293280);
  v86 = v112;
  v87 = v106;
  sub_100115128(v112, v106);
  v88 = v107;
  sub_100115128(v85, v107);
  v89 = v108;
  sub_100115128(v87, v108);
  v90 = sub_100006DF4(&qword_100293C00);
  v91 = v89 + *(int *)(v90 + 48);
  *(_QWORD *)v91 = 0;
  *(_BYTE *)(v91 + 8) = 1;
  sub_100115128(v88, v89 + *(int *)(v90 + 64));
  sub_100115170(v85);
  sub_100115170(v86);
  sub_100115170(v88);
  return sub_100115170(v87);
}

uint64_t sub_100114FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)v2;
  v5 = *(_BYTE *)(v2 + 8);
  *(_QWORD *)a2 = static VerticalAlignment.bottom.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v6 = sub_100006DF4(&qword_100293BF8);
  return sub_1001148E0(v4, v5, a2 + *(int *)(v6 + 44));
}

_QWORD *sub_100115010@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1001151B0();
  return EnvironmentValues.subscript.getter(a1, &type metadata for TypesettingLanguage, &type metadata for TypesettingLanguage, v2);
}

uint64_t sub_100115050@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10011507C(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_1001150A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LabeledTextView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001150EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LabeledTextView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100115128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100293280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100115170(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_100293280);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001151B0()
{
  unint64_t result;

  result = qword_100293C08;
  if (!qword_100293C08)
  {
    result = swift_getWitnessTable(&unk_1001F6334, &type metadata for TypesettingLanguage);
    atomic_store(result, (unint64_t *)&qword_100293C08);
  }
  return result;
}

unint64_t sub_1001151F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293C10;
  if (!qword_100293C10)
  {
    v1 = sub_1000070BC(&qword_100293C18);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100293C10);
  }
  return result;
}

id sub_100115248()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  id result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _BYTE v26[25];
  __int128 v27;
  void *v28;
  char v29;

  v1 = v0;
  v2 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    v3 = *(_QWORD *)(v0 + 16);
    if (v3)
    {
      *(_OWORD *)v26 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)&v26[9] = *(_OWORD *)(v0 + 41);
      v24 = v2;
      swift_retain(v3);
      v4 = sub_100006DF4(&qword_100291428);
      Binding.projectedValue.getter(&v27, v4);
      v5 = *((_QWORD *)&v27 + 1);
      v23 = v27;
      v6 = v28;
      v7 = v29;
      *(_OWORD *)v26 = *(_OWORD *)(v0 + 120);
      v26[16] = *(_BYTE *)(v0 + 136);
      v8 = sub_100006DF4(&qword_100296C60);
      Binding.projectedValue.getter(&v27, v8);
      v9 = v27;
      v10 = (char)v28;
      v11 = sub_100006DF4(&qword_100293DF8);
      UIViewControllerRepresentableContext.coordinator.getter(v26, v11);
      v12 = *(_QWORD *)v26;
      v27 = *(_OWORD *)(v0 + 216);
      v28 = *(void **)(v0 + 232);
      sub_100006DF4(&qword_100293E00);
      Binding.wrappedValue.getter(&v25);
      v13 = v25;
      v14 = objc_allocWithZone((Class)type metadata accessor for CameraPreviewViewController());
      return sub_10011D6E0(v24, v3, v23, v5, v6, v7, v9, *((uint64_t *)&v9 + 1), v10, v12, v13, v14);
    }
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 8);
    v17 = type metadata accessor for ConversationManager(0);
    v18 = sub_10011E300((unint64_t *)&unk_1002954F0, 255, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
  v19 = *(_QWORD *)(v1 + 24);
  v20 = type metadata accessor for ConversationContext(0);
  v21 = sub_10011E300(&qword_10028B090, 255, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v22 = v2;
  result = (id)EnvironmentObject.error()(0, v19, v20, v21);
  __break(1u);
  return result;
}

void sub_10011542C(uint64_t a1)
{
  double v2;
  void *v3;
  uint64_t v4;
  id v5;
  double v6;

  sub_100006DF4(&qword_10028F2B0);
  Binding.wrappedValue.getter(&v6);
  if (v6 > 0.0 || (Binding.wrappedValue.getter(&v6), v6 > 0.0))
  {
    Binding.wrappedValue.getter(&v6);
    v2 = v6;
    Binding.wrappedValue.getter(&v6);
    sub_10011C300(v2, v6);
  }
  sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v6);
  v3 = *(void **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC);
  if (v3)
  {
    v4 = LOBYTE(v6);
    v5 = v3;
    dispatch thunk of DataScannerViewController.isTorchOn.setter(v4);

  }
}

uint64_t sub_100115570(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v13;
  _QWORD v14[2];
  char v15;

  v2 = v1;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA320);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    LODWORD(v14[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, (char *)v14 + 4, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting torch availability: %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = *(_QWORD *)(v2 + 88);
  v10 = *(_BYTE *)(v2 + 96);
  v14[0] = *(_QWORD *)(v2 + 80);
  v14[1] = v9;
  v15 = v10;
  v13 = a1 & 1;
  v11 = sub_100006DF4(&qword_100296C60);
  return Binding.wrappedValue.setter(&v13, v11);
}

uint64_t sub_1001156B4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v13;
  _QWORD v14[2];
  char v15;

  v2 = v1;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA320);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    LODWORD(v14[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, (char *)v14 + 4, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting torch on/off: %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = *(_QWORD *)(v2 + 112);
  v10 = *(_BYTE *)(v2 + 120);
  v14[0] = *(_QWORD *)(v2 + 104);
  v14[1] = v9;
  v15 = v10;
  v13 = a1 & 1;
  v11 = sub_100006DF4(&qword_100296C60);
  return Binding.wrappedValue.setter(&v13, v11);
}

void sub_1001157F8(char a1, char a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  uint64_t v7;

  sub_1000CF868(a1, a2);
  if (qword_10028A3E0 != -1)
    swift_once(&qword_10028A3E0, sub_1000CF7BC);
  v3 = qword_1002AA268;
  KeyPath = swift_getKeyPath(&unk_1001F0B88);
  v5 = swift_getKeyPath(&unk_1001F0BB0);
  static Published.subscript.getter(&v7, v3, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  if (v7 == 5 || (sub_1001D5E38(a1), (v6 & 1) == 0))
  {
    if (UIAccessibilityIsVoiceOverRunning())
      __asm { BR              X10 }
  }
}

double sub_100115A9C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v3 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = type metadata accessor for MainActor(0);
  v8 = static MainActor.shared.getter(v7);
  v9 = swift_allocObject(&unk_10026BC98, 33, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = &protocol witness table for MainActor;
  *(_BYTE *)(v9 + 32) = a2;
  v10 = sub_100049DC0((uint64_t)v5, (uint64_t)&unk_100293F18, v9);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

uint64_t sub_100115B70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 + 24) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 16) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100115BDC, v6, v7);
}

uint64_t sub_100115BDC()
{
  uint64_t v0;
  char v1;
  UIAccessibilityNotifications v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  v1 = *(_BYTE *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 16));
  v2 = UIAccessibilityAnnouncementNotification;
  sub_1000CF3B8(v1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  UIAccessibilityPostNotification(v2, v5);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100115C50()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[15];

  v1 = *(_OWORD *)(v0 + 224);
  v9[12] = *(_OWORD *)(v0 + 208);
  v9[13] = v1;
  v9[14] = *(_OWORD *)(v0 + 240);
  v2 = *(_OWORD *)(v0 + 160);
  v9[8] = *(_OWORD *)(v0 + 144);
  v9[9] = v2;
  v3 = *(_OWORD *)(v0 + 192);
  v9[10] = *(_OWORD *)(v0 + 176);
  v9[11] = v3;
  v4 = *(_OWORD *)(v0 + 96);
  v9[4] = *(_OWORD *)(v0 + 80);
  v9[5] = v4;
  v5 = *(_OWORD *)(v0 + 128);
  v9[6] = *(_OWORD *)(v0 + 112);
  v9[7] = v5;
  v6 = *(_OWORD *)(v0 + 32);
  v9[0] = *(_OWORD *)(v0 + 16);
  v9[1] = v6;
  v7 = *(_OWORD *)(v0 + 64);
  v9[2] = *(_OWORD *)(v0 + 48);
  v9[3] = v7;
  sub_10011E38C((uint64_t)v9);

  return swift_deallocClassInstance(v0, 264, 7);
}

uint64_t type metadata accessor for CameraPreviewView.Coordinator()
{
  return objc_opt_self(_TtCV17SequoiaTranslator17CameraPreviewView11Coordinator);
}

id sub_100115CF4(char a1)
{
  uint64_t v1;

  sub_1000D02B8(a1);
  return objc_msgSend(*(id *)(v1 + 256), "invalidate");
}

id sub_100115D24()
{
  uint64_t v0;

  sub_1000D057C();
  return objc_msgSend(*(id *)(v0 + 256), "invalidate");
}

uint64_t sub_100115D5C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000F66C(v0, (uint64_t)qword_1002AA320);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Dismantling CameraPreviewViewController, clearing guidance but allowing other code to turn off the flashlight if needed", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return sub_10011B6F8();
}

uint64_t sub_100115E34@<X0>(uint64_t *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[16];

  v3 = v1[13];
  v20[12] = v1[12];
  v20[13] = v3;
  v20[14] = v1[14];
  v4 = v1[9];
  v20[8] = v1[8];
  v20[9] = v4;
  v5 = v1[11];
  v20[10] = v1[10];
  v20[11] = v5;
  v6 = v1[5];
  v20[4] = v1[4];
  v20[5] = v6;
  v7 = v1[7];
  v20[6] = v1[6];
  v20[7] = v7;
  v8 = v1[1];
  v20[0] = *v1;
  v20[1] = v8;
  v9 = v1[3];
  v20[2] = v1[2];
  v20[3] = v9;
  v10 = type metadata accessor for CameraPreviewView.Coordinator();
  v11 = swift_allocObject(v10, 264, 7);
  *(_QWORD *)(v11 + 256) = 0;
  v12 = v1[13];
  *(_OWORD *)(v11 + 208) = v1[12];
  *(_OWORD *)(v11 + 224) = v12;
  *(_OWORD *)(v11 + 240) = v1[14];
  v13 = v1[9];
  *(_OWORD *)(v11 + 144) = v1[8];
  *(_OWORD *)(v11 + 160) = v13;
  v14 = v1[11];
  *(_OWORD *)(v11 + 176) = v1[10];
  *(_OWORD *)(v11 + 192) = v14;
  v15 = v1[5];
  *(_OWORD *)(v11 + 80) = v1[4];
  *(_OWORD *)(v11 + 96) = v15;
  v16 = v1[7];
  *(_OWORD *)(v11 + 112) = v1[6];
  *(_OWORD *)(v11 + 128) = v16;
  v17 = v1[1];
  *(_OWORD *)(v11 + 16) = *v1;
  *(_OWORD *)(v11 + 32) = v17;
  v18 = v1[3];
  *(_OWORD *)(v11 + 48) = v1[2];
  *(_OWORD *)(v11 + 64) = v18;
  *a1 = v11;
  return sub_10011E1B0((uint64_t)v20);
}

uint64_t sub_100115EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10011E340();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100115F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10011E340();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100115F98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011E340();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_10011603C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  id result;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  Class isa;

  v1 = v0;
  v2 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_materialView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_materialView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(id *)&v0[v2];
  result = objc_msgSend(v1, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = result;
  objc_msgSend(result, "bounds");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  objc_msgSend(v3, "setFrame:", v7, v9, v11, v13);
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = result;
  objc_msgSend(result, "addSubview:", *(_QWORD *)&v1[v2]);

  v15 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v16 = swift_allocObject(v15, 64, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1001E7590;
  v17 = objc_msgSend(*(id *)&v1[v2], "topAnchor");
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v18 = result;
  v19 = objc_msgSend(result, "topAnchor");

  v20 = objc_msgSend(v17, "constraintEqualToAnchor:", v19);
  *(_QWORD *)(v16 + 32) = v20;
  v21 = objc_msgSend(*(id *)&v1[v2], "leadingAnchor");
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v22 = result;
  v23 = objc_msgSend(result, "leadingAnchor");

  v24 = objc_msgSend(v21, "constraintEqualToAnchor:", v23);
  *(_QWORD *)(v16 + 40) = v24;
  v25 = objc_msgSend(*(id *)&v1[v2], "bottomAnchor");
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = result;
  v27 = objc_msgSend(result, "bottomAnchor");

  v28 = objc_msgSend(v25, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v16 + 48) = v28;
  v29 = objc_msgSend(*(id *)&v1[v2], "trailingAnchor");
  result = objc_msgSend(v1, "view");
  if (result)
  {
    v30 = result;
    v31 = (void *)objc_opt_self(NSLayoutConstraint);
    v32 = objc_msgSend(v30, "trailingAnchor");

    v33 = objc_msgSend(v29, "constraintEqualToAnchor:", v32);
    *(_QWORD *)(v16 + 56) = v33;
    specialized Array._endMutation()(v34);
    sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v31, "activateConstraints:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

    return objc_msgSend(*(id *)&v1[v2], "setHidden:", 1);
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_100116454(uint64_t a1, double a2, double a3)
{
  char *v3;
  id v7;
  id v8;
  void *v9;
  objc_super v10;

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for CameraPreviewViewController();
  objc_msgSendSuper2(&v10, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v7 = objc_msgSend(v3, "traitCollection");
  v8 = objc_msgSend(v7, "horizontalSizeClass");

  if (v8 == (id)2)
  {
    v9 = *(void **)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomConstraint];
    if (v9)
      objc_msgSend(v9, "setConstant:", a3);
  }
}

void sub_100116564()
{
  char *v0;
  char *v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  objc_super v10;

  v1 = v0;
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for CameraPreviewViewController();
  objc_msgSendSuper2(&v10, "applicationWillSuspend");
  sub_100117094();
  sub_10011B5A0();
  Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate]);
  if (Strong)
  {
    v3 = Strong;
    sub_1001156B4(0);
    swift_unknownObjectRelease(v3);
  }
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_context];
  KeyPath = swift_getKeyPath(&unk_1001F0B40);
  v6 = swift_getKeyPath(&unk_1001F0B68);
  static Published.subscript.getter(&v8, v4, KeyPath);
  swift_release(v6);
  swift_release(KeyPath);
  v7 = v9;
  if (v9 != 5)
  {
    sub_1000484FC(v8, v9);
    if (v7 == 1)
      sub_10011C7F0();
  }
}

void sub_100116684()
{
  char *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for CameraPreviewViewController();
  objc_msgSendSuper2(&v7, "applicationDidResume");
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_context];
  KeyPath = swift_getKeyPath(&unk_1001F0B40);
  v3 = swift_getKeyPath(&unk_1001F0B68);
  static Published.subscript.getter(&v5, v1, KeyPath);
  swift_release(v3);
  swift_release(KeyPath);
  v4 = v6;
  if (v6 != 5)
  {
    sub_1000484FC(v5, v6);
    if (v4 == 1)
    {
      sub_10011A1A0();
      sub_1001173EC();
    }
  }
}

void sub_1001167A4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  NSObject *v59;
  id v60;
  uint64_t v61;
  id v62[5];

  v1 = v0;
  v2 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v2);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_100293EC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100293ED0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_100293ED8);
  __chkstk_darwin(v13);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC;
  v18 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC];
  if (v18)
  {
    v56 = v10;
    v57 = v16;
    v58 = v14;
    v59 = v18;
    if ((dispatch thunk of DataScannerViewController.isScanning.getter() & 1) != 0)
    {
      if (qword_10028A408 != -1)
        swift_once(&qword_10028A408, sub_100120F04);
      v19 = type metadata accessor for Logger(0);
      sub_10000F66C(v19, (uint64_t)qword_1002AA320);
      v20 = v1;
      v58 = Logger.logObject.getter(v20);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = (void *)swift_slowAlloc(32, -1);
        *(_DWORD *)v22 = 136315138;
        v62[0] = v23;
        v60 = *(id *)&v1[v17];
        v24 = v60;
        v25 = sub_100006DF4(&qword_100293EF8);
        v26 = String.init<A>(describing:)(&v60, v25);
        v28 = v27;
        v60 = (id)sub_1001A7FE4(v26, v27, (uint64_t *)v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v22 + 4);
        swift_bridgeObjectRelease(v28);

        _os_log_impl((void *)&_mh_execute_header, v58, v21, "Illegal attempt to start scanning on scanner that's already scanning: %s", v22, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v54 = v13;
      v55 = v1;
      if (qword_10028A408 != -1)
        swift_once(&qword_10028A408, sub_100120F04);
      v33 = type metadata accessor for Logger(0);
      v34 = sub_10000F66C(v33, (uint64_t)qword_1002AA320);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.info.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Starting Scanning", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = v59;
      v39 = dispatch thunk of DataScannerViewController.startCamera()();
      dispatch thunk of DataScannerViewController.startScanning()(v39);
      v40 = v55;
      sub_10011906C();
      swift_beginAccess(*(_QWORD *)&v40[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_context]+ OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__imageTranslationState, v62, 33, 0);
      v41 = sub_100006DF4(&qword_10028E9F8);
      Published.projectedValue.getter(v41);
      swift_endAccess(v62);
      v42 = sub_100012334(&qword_100293EE0, &qword_100293EC8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
      Publisher.filter(_:)(sub_100116F74, 0, v5, v42);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v43 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
      v62[0] = (id)static OS_dispatch_queue.main.getter(v43);
      v44 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v4, 1, 1, v44);
      v45 = sub_100012334(&qword_100293EE8, &qword_100293ED0, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
      v46 = sub_10001D984();
      v47 = v57;
      Publisher.receive<A>(on:options:)(v62, v4, v9, v43, v45, v46);
      sub_10000A020((uint64_t)v4, &qword_100296BE0);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v9);
      v48 = swift_allocObject(&unk_10026BA68, 24, 7);
      swift_unknownObjectWeakInit(v48 + 16, v40);
      v49 = sub_100012334(&qword_100293EF0, &qword_100293ED8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v50 = v54;
      v51 = (void *)Publisher<>.sink(receiveValue:)(sub_10011E988, v48, v54, v49);
      v52 = swift_release(v48);
      ((void (*)(char *, uint64_t, __n128))v58[1].isa)(v47, v50, v52);
      v62[3] = (id)type metadata accessor for AnyCancellable(0);
      v62[0] = v51;
      v53 = (uint64_t)&v40[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_contextObserver];
      swift_beginAccess(&v40[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_contextObserver], &v60, 33, 0);
      sub_10011E940((uint64_t)v62, v53);
      swift_endAccess(&v60);

    }
  }
  else
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10000F66C(v29, (uint64_t)qword_1002AA320);
    v59 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v31, "Data scanner isn't initialized so not scanning", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

  }
}

BOOL sub_100116F74(_BYTE *a1)
{
  return (*a1 & 1) == 0;
}

void sub_100116F84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];

  v3 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
    type metadata accessor for MainActor(0);
    v9 = v7;
    v10 = static MainActor.shared.getter(v9);
    v11 = (_QWORD *)swift_allocObject(&unk_10026BC20, 40, 7);
    v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v9;
    v12 = sub_100049DC0((uint64_t)v5, (uint64_t)&unk_100293F08, (uint64_t)v11);
    swift_release(v12);

  }
}

void sub_100117094()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _OWORD v31[2];

  v1 = v0;
  if (qword_10028A408 != -1)
LABEL_34:
    swift_once(&qword_10028A408, sub_100120F04);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA320);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stopping Scanning", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_noTextFoundTimer;
  objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_noTextFoundTimer), "invalidate");
  v8 = *(void **)((char *)v1 + v7);
  *(_QWORD *)((char *)v1 + v7) = 0;

  v9 = (char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
  Strong = swift_unknownObjectWeakLoadStrong((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);
  if (Strong)
  {
    v11 = Strong;
    v12 = *((_QWORD *)v9 + 1);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 + 16) + 16))(1, ObjectType);
    swift_unknownObjectRelease(v11);
  }
  memset(v31, 0, sizeof(v31));
  v14 = (uint64_t)v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_contextObserver;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_contextObserver, v30, 33, 0);
  sub_10011E940((uint64_t)v31, v14);
  swift_endAccess(v30);
  v15 = *(void **)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC);
  if (v15)
  {
    v16 = v15;
    v17 = dispatch thunk of DataScannerViewController.isTorchOn.setter(0);
    v18 = dispatch thunk of DataScannerViewController.stopScanning()(v17);
    dispatch thunk of DataScannerViewController.stopCamera()(v18);

  }
  v1 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_observationTasks);
  swift_beginAccess(v1, v31, 1, 0);
  v19 = *v1;
  v20 = *v1 + 56;
  v21 = 1 << *(_BYTE *)(*v1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *(_QWORD *)(*v1 + 56);
  v24 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain_n(*v1, 2);
  v25 = 0;
  while (1)
  {
    if (v23)
    {
      v23 &= v23 - 1;
      goto LABEL_12;
    }
    v26 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v26 >= v24)
      goto LABEL_32;
    v27 = *(_QWORD *)(v20 + 8 * v26);
    ++v25;
    if (!v27)
    {
      v25 = v26 + 1;
      if (v26 + 1 >= v24)
        goto LABEL_32;
      v27 = *(_QWORD *)(v20 + 8 * v25);
      if (!v27)
      {
        v25 = v26 + 2;
        if (v26 + 2 >= v24)
          goto LABEL_32;
        v27 = *(_QWORD *)(v20 + 8 * v25);
        if (!v27)
        {
          v25 = v26 + 3;
          if (v26 + 3 >= v24)
            goto LABEL_32;
          v27 = *(_QWORD *)(v20 + 8 * v25);
          if (!v27)
          {
            v25 = v26 + 4;
            if (v26 + 4 >= v24)
              goto LABEL_32;
            v27 = *(_QWORD *)(v20 + 8 * v25);
            if (!v27)
              break;
          }
        }
      }
    }
LABEL_31:
    v23 = (v27 - 1) & v27;
LABEL_12:
    Task.cancel()();
  }
  v28 = v26 + 5;
  if (v28 >= v24)
  {
LABEL_32:
    swift_release(v19);
    swift_bridgeObjectRelease(v19);
    v29 = *v1;
    *v1 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v29);
    return;
  }
  v27 = *(_QWORD *)(v20 + 8 * v28);
  if (v27)
  {
    v25 = v28;
    goto LABEL_31;
  }
  while (1)
  {
    v25 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v25 >= v24)
      goto LABEL_32;
    v27 = *(_QWORD *)(v20 + 8 * v25);
    ++v28;
    if (v27)
      goto LABEL_31;
  }
  __break(1u);
}

void sub_1001173EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  NSObject *oslog;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA320);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Launch pre-check triggered", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_launchPrerequisitesDebounceTimer;
  v8 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_launchPrerequisitesDebounceTimer);
  if (!v8)
    goto LABEL_11;
  v9 = v8;
  v10 = objc_msgSend(v9, "isValid");
  if (!(_DWORD)v10)
  {

LABEL_11:
    v13 = swift_allocObject(&unk_10026BA68, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v1);
    aBlock[4] = sub_10011E89C;
    v20 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100187FE4;
    aBlock[3] = &unk_10026BBC0;
    v14 = _Block_copy(aBlock);
    v15 = (void *)objc_opt_self(NSTimer);
    swift_retain(v13);
    v16 = objc_msgSend(v15, "timerWithTimeInterval:repeats:block:", 0, v14, 5.0);
    _Block_release(v14);
    swift_release(v20);
    swift_release(v13);
    v17 = *(void **)(v1 + v7);
    *(_QWORD *)(v1 + v7) = v16;

    sub_100117958();
    return;
  }
  oslog = Logger.logObject.getter(v10);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Skipping launch prerequisites because it's already in flight", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

}

double sub_100117654(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *Strong;
  _QWORD *v15;
  uint64_t v16;
  double result;
  _BYTE v19[24];

  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA320);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to finish checking launch prerequisites in time; starting a new request",
      v11,
      2u);
    swift_slowDealloc(v11, -1, -1);
  }

  objc_msgSend(a1, "invalidate");
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = swift_allocObject(&unk_10026BA68, 24, 7);
  swift_beginAccess(a2 + 16, v19, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2 + 16);
  swift_unknownObjectWeakInit(v13 + 16, Strong);

  v15 = (_QWORD *)swift_allocObject(&unk_10026BBF8, 40, 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v13;
  v16 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100293EC0, (uint64_t)v15);
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_100117828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch(sub_100117840, 0, 0);
}

uint64_t sub_100117840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 56) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001178E8, v4, v5);
}

uint64_t sub_1001178E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  sub_1001173EC();
  return swift_task_switch(sub_100117928, 0, 0);
}

uint64_t sub_100117928()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t (*v35)(char *, char *, uint64_t);
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  void (*v43)(char *, uint64_t, __n128);
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __n128 v57;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;

  v1 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v1);
  v62 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char **)((char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char **)((char *)&v59 - v7);
  v9 = type metadata accessor for LocalePair(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v59 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v59 - v14;
  v60 = v16;
  __chkstk_darwin(v13);
  v64 = (char *)&v59 - v17;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v63 = v10;
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10000F66C(v18, (uint64_t)qword_1002AA320);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Launch pre-check happening now", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v61 = v0;
  v23 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_conversation);
  KeyPath = swift_getKeyPath(&unk_1001F0AB0);
  v25 = swift_getKeyPath(&unk_1001F0AD8);
  static Published.subscript.getter(v8, v23, KeyPath);
  swift_release(v25);
  swift_release(KeyPath);
  v26 = swift_getKeyPath(&unk_1001F0AF8);
  v27 = swift_getKeyPath(&unk_1001F0B20);
  static Published.subscript.getter(v6, v23, v26);
  swift_release(v27);
  v28 = swift_release(v26);
  v29 = v64;
  LocalePair.init(sourceLocale:targetLocale:)(v8, v6, v28);
  v30 = v63;
  v31 = *(uint64_t (**)(char *, char *, uint64_t))(v63 + 16);
  v32 = v31(v15, v29, v9);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.info.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = v31;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v66 = v37;
    *(_DWORD *)v36 = 136446210;
    v38 = sub_10011E300((unint64_t *)&unk_100296BB0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for LocalePair, (uint64_t)&protocol conformance descriptor for LocalePair);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v9, v38);
    v41 = v40;
    v65 = sub_1001A7FE4(v39, v40, &v66);
    v30 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v36 + 4);
    v42 = swift_bridgeObjectRelease(v41);
    v43 = *(void (**)(char *, uint64_t, __n128))(v30 + 8);
    v43(v15, v9, v42);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Launch pre-check %{public}s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v44 = v36;
    v31 = v35;
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    v43 = *(void (**)(char *, uint64_t, __n128))(v30 + 8);
    ((void (*)(char *, uint64_t))v43)(v15, v9);
  }

  v45 = type metadata accessor for TaskPriority(0);
  v46 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v62, 1, 1, v45);
  v47 = swift_allocObject(&unk_10026BA68, 24, 7);
  swift_unknownObjectWeakInit(v47 + 16, v61);
  v48 = v59;
  v49 = v64;
  v31(v59, v64, v9);
  type metadata accessor for MainActor(0);
  swift_retain(v47);
  v51 = static MainActor.shared.getter(v50);
  v52 = *(unsigned __int8 *)(v30 + 80);
  v53 = v30;
  v54 = (v52 + 40) & ~v52;
  v55 = (char *)swift_allocObject(&unk_10026BB08, v54 + v60, v52 | 7);
  *((_QWORD *)v55 + 2) = v51;
  *((_QWORD *)v55 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v55 + 4) = v47;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v55[v54], v48, v9);
  swift_release(v47);
  v56 = sub_100049DC0(v46, (uint64_t)&unk_100293EA0, (uint64_t)v55);
  v57 = swift_release(v56);
  return ((uint64_t (*)(char *, uint64_t, __n128))v43)(v49, v9, v57);
}

uint64_t sub_100117E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5[37] = a4;
  v5[38] = a5;
  v6 = type metadata accessor for Locale(0);
  v5[39] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[40] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[41] = swift_task_alloc(v8);
  v5[42] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4((uint64_t *)&unk_1002908A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[43] = swift_task_alloc(v9);
  v5[44] = swift_task_alloc(v9);
  v5[45] = swift_task_alloc(v9);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[46] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[47] = v11;
  v5[48] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v5[49] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[50] = v13;
  v5[51] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime(0);
  v5[52] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[53] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[54] = swift_task_alloc(v16);
  v5[55] = swift_task_alloc(v16);
  v17 = type metadata accessor for MainActor(0);
  v5[56] = static MainActor.shared.getter(v17);
  v18 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
  v5[57] = v18;
  v5[58] = v19;
  return swift_task_switch(sub_100117FCC, v18, v19);
}

uint64_t sub_100117FCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0[37] + 16;
  swift_beginAccess(v1, v0 + 28, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  v0[59] = Strong;
  if (Strong)
  {
    v3 = Strong;
    v4 = v0[54];
    v6 = v0[52];
    v5 = v0[53];
    v29 = v0[55];
    v30 = v0[51];
    v33 = v0[50];
    v34 = v0[49];
    v31 = v0[48];
    v7 = v0[46];
    v32 = v0[47];
    v8 = swift_allocObject(&unk_10026BA68, 24, 7);
    v0[60] = v8;
    swift_unknownObjectWeakInit(v8 + 16, v3);
    v9 = swift_allocObject(&unk_10026BB30, 17, 7);
    v0[61] = v9;
    *(_BYTE *)(v9 + 16) = 0;
    sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
    swift_retain(v8);
    v11 = (void *)static OS_dispatch_queue.main.getter(v10);
    static DispatchTime.now()();
    + infix(_:_:)(v4, 1.0);
    v12 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v12(v4, v6);
    v13 = (_QWORD *)swift_allocObject(&unk_10026BB58, 40, 7);
    v13[2] = v9;
    v13[3] = sub_10011E768;
    v13[4] = v8;
    v0[6] = sub_10011E78C;
    v0[7] = v13;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100075908;
    v0[5] = &unk_10026BB70;
    v14 = _Block_copy(v0 + 2);
    swift_retain(v9);
    swift_retain(v8);
    static DispatchQoS.unspecified.getter(v15);
    v0[36] = _swiftEmptyArrayStorage;
    v16 = sub_10011E300((unint64_t *)&qword_100291BF0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v17 = sub_100006DF4(&qword_10028AC30);
    v18 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 36, v17, v18, v7, v16);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v29, v30, v31, v14);
    _Block_release(v14);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v7);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v30, v34);
    v12(v29, v6);
    swift_release(v0[7]);
    v19 = (_QWORD *)swift_task_alloc(async function pointer to static LanguagesStatusService.languagePairPath(_:)[1]);
    v0[62] = v19;
    *v19 = v0;
    v19[1] = sub_100118324;
    return static LanguagesStatusService.languagePairPath(_:)(v0[38]);
  }
  else
  {
    swift_release(v0[56]);
    v21 = v0[54];
    v22 = v0[51];
    v23 = v0[48];
    v25 = v0[44];
    v24 = v0[45];
    v27 = v0[42];
    v26 = v0[43];
    v28 = v0[41];
    swift_task_dealloc(v0[55]);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_100118324(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 496);
  *(_BYTE *)(*v1 + 266) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_10011837C, *(_QWORD *)(v2 + 456), *(_QWORD *)(v2 + 464));
}

void sub_10011837C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 488);
  swift_release(*(_QWORD *)(v0 + 448));
  swift_beginAccess(v1 + 16, v0 + 200, 1, 0);
  *(_BYTE *)(v1 + 16) = 1;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v2 = type metadata accessor for Logger(0);
  v11 = sub_10000F66C(v2, (uint64_t)qword_1002AA320);
  v3 = Logger.logObject.getter(v11);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 266);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = LanguagePairPath.description.getter(v5);
    v10 = v9;
    *(_QWORD *)(v0 + 280) = sub_1001A7FE4(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v6 + 4);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Translation path for locale pair: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  __asm { BR              X10 }
}

void sub_100118D0C(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    v3 = Strong;
    UIViewController.contentUnavailableConfiguration.setter(&v10);

    v4 = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate]);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v4 + 168);
      v7 = *(_BYTE *)(v4 + 176);
      *(_QWORD *)&v10 = *(_QWORD *)(v4 + 160);
      *((_QWORD *)&v10 + 1) = v6;
      LOBYTE(v11) = v7;
      v9 = 0;
      v8 = sub_100006DF4(&qword_100296C60);
      Binding.wrappedValue.setter(&v9, v8);
      swift_unknownObjectRelease(v5);
    }
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_materialView], "setHidden:", 1);
    sub_1001167A4();

  }
}

double sub_100118DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v6 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor(0);
  swift_retain(a1);
  swift_retain(a3);
  v11 = static MainActor.shared.getter(v10);
  v12 = (_QWORD *)swift_allocObject(&unk_10026BBA8, 56, 7);
  v12[2] = v11;
  v12[3] = &protocol witness table for MainActor;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v13 = sub_100049DC0((uint64_t)v8, (uint64_t)&unk_100293EB0, (uint64_t)v12);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

uint64_t sub_100118EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[8] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_100118F5C, v8, v9);
}

uint64_t sub_100118F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(void);

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_beginAccess(v1 + 16, v0 + 16, 0, 0);
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA320);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "languagePairPath is taking a while; enabling camera until that returns results",
        v6,
        2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(void (**)(void))(v0 + 48);

    v7();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10011906C()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t KeyPath;
  uint64_t v16;
  Class isa;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  _BYTE v42[24];
  uint64_t v43;

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC];
  if (v12)
  {
    v13 = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_conversation];
    v41 = v12;
    v14 = sub_100076A78();
    KeyPath = swift_getKeyPath(&unk_1001F0A68);
    v16 = swift_getKeyPath(&unk_1001F0A90);
    static Published.subscript.getter(v11, v13, KeyPath);
    swift_release(v16);
    swift_release(KeyPath);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
    v18 = objc_msgSend(v14, "oppositeToLocale:", isa);

    if (v18)
    {
      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v18);

      (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 32))(v7, v11, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
      {
        sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
        if (qword_10028A408 != -1)
          swift_once(&qword_10028A408, sub_100120F04);
        v19 = type metadata accessor for Logger(0);
        v20 = sub_10000F66C(v19, (uint64_t)qword_1002AA320);
        v21 = Logger.logObject.getter(v20);
        v22 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Beginning text observations", v23, 2u);
          swift_slowDealloc(v23, -1, -1);
        }

        v24 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v4, 1, 1, v24);
        type metadata accessor for MainActor(0);
        v25 = v41;
        v26 = v1;
        v27 = static MainActor.shared.getter(v26);
        v28 = (_QWORD *)swift_allocObject(&unk_10026BA90, 48, 7);
        v28[2] = v27;
        v28[3] = &protocol witness table for MainActor;
        v28[4] = v25;
        v28[5] = v26;
        v29 = sub_100049DC0((uint64_t)v4, (uint64_t)&unk_100293E70, (uint64_t)v28);
        swift_beginAccess(&v26[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_observationTasks], v42, 33, 0);
        swift_retain(v29);
        sub_1001517B0(&v43, v29);
        v30 = v43;
        swift_endAccess(v42);
        swift_release(v30);

        swift_release(v29);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    sub_10000A020((uint64_t)v7, (uint64_t *)&unk_10028FE50);
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA320);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to configure source and target locales for Camera translation", v39, 2u);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10000F66C(v31, (uint64_t)qword_1002AA320);
    v41 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v33, "Data Scanner View Controller isn't initialized yet, so can't begin text observations", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

  }
}

uint64_t sub_1001195BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5[25] = a4;
  v5[26] = a5;
  v6 = type metadata accessor for TaskHint(0);
  v5[27] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[28] = v7;
  v5[29] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  v5[30] = v8;
  v5[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v5[32] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[33] = v10;
  v5[34] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v5[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  v5[36] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[37] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[38] = swift_task_alloc(v14);
  v5[39] = swift_task_alloc(v14);
  v5[40] = swift_task_alloc(v14);
  v15 = sub_100006DF4(&qword_100293E78);
  v5[41] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[42] = v16;
  v5[43] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_100293E80);
  v5[44] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v5[45] = v18;
  v5[46] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MainActor(0);
  v5[47] = v19;
  v5[48] = static MainActor.shared.getter(v19);
  v20 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  v5[49] = v20;
  v5[50] = v21;
  return swift_task_switch(sub_100119760, v20, v21);
}

uint64_t sub_100119760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  dispatch thunk of DataScannerViewController.recognizedItems.getter();
  AsyncStream.makeAsyncIterator()(v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
  *(_QWORD *)(v0 + 408) = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_noTextFoundTimer;
  *(_QWORD *)(v0 + 416) = v5;
  v6 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_conversation;
  *(_QWORD *)(v0 + 424) = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController__viewportHasText;
  *(_QWORD *)(v0 + 432) = v6;
  v7 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_translationBridge;
  *(_QWORD *)(v0 + 440) = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_selfLoggingInvocation;
  *(_QWORD *)(v0 + 448) = v7;
  *(_DWORD *)(v0 + 164) = enum case for TaskHint.system(_:);
  v8 = static MainActor.shared.getter(v4);
  *(_QWORD *)(v0 + 456) = v8;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 464) = v9;
  *v9 = v0;
  v9[1] = sub_10011986C;
  return AsyncStream.Iterator.next(isolation:)(v0 + 192, v8, &protocol witness table for MainActor, *(_QWORD *)(v0 + 352));
}

uint64_t sub_10011986C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 456);
  swift_task_dealloc(*(_QWORD *)(*v0 + 464));
  swift_release(v2);
  return swift_task_switch(sub_1001198C0, *(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 400));
}

void *sub_1001198C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *result;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  id v50;
  Class isa;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void (**v111)(uint64_t, uint64_t, uint64_t, _QWORD);
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;

  v1 = v0[24];
  if (!v1)
  {
    v11 = v0[48];
    (*(void (**)(_QWORD, _QWORD))(v0[45] + 8))(v0[46], v0[44]);
    swift_release(v11);
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA320);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "AsyncStream of observations has finished", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = v0[55];
    v18 = v0[26];

    v19 = *(_QWORD *)(v18 + v17);
    swift_retain(v19);
    sub_10015B614();
    swift_release(v19);
    goto LABEL_10;
  }
  v2 = v0[51];
  v3 = v0[26];
  v4 = *(void **)(v3 + v2);
  if (*(_QWORD *)(v1 + 16))
  {
    v5 = v3 + v0[52];
    objc_msgSend(v4, "invalidate");
    v6 = *(void **)(v3 + v2);
    *(_QWORD *)(v3 + v2) = 0;

    Strong = swift_unknownObjectWeakLoadStrong(v5);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v0[26] + v0[52] + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 + 16) + 16))(1, ObjectType);
      swift_unknownObjectRelease(v8);
    }
  }
  else if (!v4)
  {
    v110 = (id)objc_opt_self(NSTimer);
    v29 = swift_allocObject(&unk_10026BA68, 24, 7);
    swift_unknownObjectWeakInit(v29 + 16, v3);
    v0[6] = sub_10011E5B8;
    v0[7] = v29;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100187FE4;
    v0[5] = &unk_10026BAA8;
    v30 = _Block_copy(v0 + 2);
    swift_release(v0[7]);
    v31 = objc_msgSend(v110, "scheduledTimerWithTimeInterval:repeats:block:", 0, v30, 3.0);
    _Block_release(v30);
    v32 = *(void **)(v3 + v2);
    *(_QWORD *)(v3 + v2) = v31;

  }
  v33 = v0[26] + v0[53];
  v34 = *(_QWORD *)(v1 + 16) != 0;
  v35 = *(_QWORD *)(v33 + 8);
  v36 = *(_BYTE *)(v33 + 16);
  v0[21] = *(_QWORD *)v33;
  v0[22] = v35;
  *((_BYTE *)v0 + 184) = v36;
  *((_BYTE *)v0 + 162) = v34;
  v37 = sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.setter((char *)v0 + 162, v37);
  v38 = *(_QWORD *)(v33 + 8);
  v39 = *(_BYTE *)(v33 + 16);
  v0[18] = *(_QWORD *)v33;
  v0[19] = v38;
  *((_BYTE *)v0 + 160) = v39;
  Binding.wrappedValue.getter((_QWORD *)((char *)v0 + 161));
  if (*((_BYTE *)v0 + 161) == 1)
  {
    v40 = swift_unknownObjectWeakLoadStrong(v0[26] + v0[52]);
    if (v40)
    {
      v41 = v40;
      v42 = *(_QWORD *)(v0[26] + v0[52] + 8);
      v43 = swift_getObjectType(v40);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 + 16) + 8))(4, 1, v43);
      swift_unknownObjectRelease(v41);
    }
  }
  if ((sub_100005DFC() & 1) == 0)
    goto LABEL_24;
  v0[16] = &type metadata for TranslateFeatures;
  v0[17] = sub_100009BC4();
  *((_BYTE *)v0 + 104) = 1;
  v44 = isFeatureEnabled(_:)(v0 + 13);
  sub_100009C08(v0 + 13);
  if ((v44 & 1) == 0
    || (v0[11] = &type metadata for VisualIntelligenceFeatures,
        v0[12] = sub_10011E16C(),
        v45 = isFeatureEnabled(_:)(v0 + 8),
        sub_100009C08(v0 + 8),
        (v45 & 1) == 0))
  {
LABEL_24:
    swift_bridgeObjectRelease(v1);
LABEL_25:
    v82 = static MainActor.shared.getter(v81);
    v0[57] = v82;
    v83 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[58] = v83;
    *v83 = v0;
    v83[1] = sub_10011986C;
    return (void *)AsyncStream.Iterator.next(isolation:)(v0 + 24, v82, &protocol witness table for MainActor, v0[44]);
  }
  v46 = (_QWORD *)v0[40];
  v47 = *(_QWORD *)(v0[26] + v0[54]);
  KeyPath = swift_getKeyPath(&unk_1001F0A68);
  v49 = swift_getKeyPath(&unk_1001F0A90);
  static Published.subscript.getter(v46, v47, KeyPath);
  swift_release(KeyPath);
  swift_release(v49);
  v50 = sub_100076A78();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v52 = objc_msgSend(v50, "oppositeToLocale:", isa);

  if (!v52)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[37] + 56))(v0[35], 1, 1, v0[36]);
    goto LABEL_27;
  }
  v54 = v0[37];
  v53 = v0[38];
  v56 = v0[35];
  v55 = v0[36];
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v52);

  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
  v57(v56, v53, v55);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v56, 0, 1, v55);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v56, 1, v55) == 1)
  {
LABEL_27:
    v84 = v0[48];
    v85 = v0[35];
    swift_bridgeObjectRelease(v1);
    swift_release(v84);
    sub_10000A020(v85, (uint64_t *)&unk_10028FE50);
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v86 = type metadata accessor for Logger(0);
    v87 = sub_10000F66C(v86, (uint64_t)qword_1002AA320);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Unable to configure source and target locales for Camera translation", v90, 2u);
      swift_slowDealloc(v90, -1, -1);
    }
    v92 = v0[45];
    v91 = v0[46];
    v93 = v0[44];
    v94 = v0[40];
    v95 = v0[36];
    v96 = v0[37];

    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v94, v95);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
LABEL_10:
    v20 = v0[43];
    v22 = v0[39];
    v21 = v0[40];
    v23 = v0[38];
    v25 = v0[34];
    v24 = v0[35];
    v26 = v0[31];
    v27 = v0[29];
    swift_task_dealloc(v0[46]);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (void *)((uint64_t (*)(void))v0[1])();
  }
  v58 = v0[39];
  v106 = v0[55];
  v108 = v0[40];
  v59 = v0[36];
  v60 = v0[37];
  v61 = v0[31];
  v111 = (void (**)(uint64_t, uint64_t, uint64_t, _QWORD))v0[33];
  v113 = v0[32];
  v62 = (int *)v0[30];
  v63 = v0[26];
  v57(v58, v0[35], v59);
  v64 = *(_QWORD *)(v63 + v106);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  v65(v61, v108, v59);
  v65(v61 + v62[5], v58, v59);
  v111[7](v61 + v62[14], 1, 1, v113);
  *(_QWORD *)(v61 + v62[6]) = 5;
  *(_QWORD *)(v61 + v62[7]) = 4;
  *(_QWORD *)(v61 + v62[8]) = 0;
  *(_BYTE *)(v61 + v62[9]) = 0;
  v66 = v61 + v62[10];
  *(_QWORD *)v66 = 0;
  *(_BYTE *)(v66 + 8) = 1;
  *(_BYTE *)(v61 + v62[11]) = 0;
  *(_QWORD *)(v61 + v62[12]) = 0;
  v67 = v61 + v62[13];
  *(_QWORD *)v67 = 0;
  *(_BYTE *)(v67 + 8) = 1;
  swift_retain(v64);
  sub_10015AEE0(v61);
  result = *(void **)(v64 + 16);
  if (result)
  {
    v68 = v0[56];
    v69 = v0[31];
    v70 = v0[26];
    v71 = objc_msgSend(result, "invocationId");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release(v64);

    sub_100097944(v69);
    v72 = *(void **)(v70 + v68);
    if (v72)
    {
      v73 = v0[39];
      v74 = v0[40];
      v112 = (_QWORD *)v0[37];
      v114 = v0[36];
      v75 = v0[34];
      v107 = v0[33];
      v109 = v0[32];
      v76 = v0[28];
      v77 = v0[29];
      v78 = v0[27];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104))(v77, *((unsigned int *)v0 + 41), v78);
      v79 = v72;
      VisualTranslationViewBridge.translate(_:sourceLocale:targetLocale:taskHint:selfLoggingInvocationId:)(v1, v74, v73, v77, v75);
      swift_bridgeObjectRelease(v1);

      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v78);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v75, v109);
      v80 = (void (*)(uint64_t, uint64_t))v112[1];
      v80(v73, v114);
      v81 = ((uint64_t (*)(uint64_t, uint64_t))v80)(v74, v114);
    }
    else
    {
      v98 = v0[39];
      v97 = v0[40];
      v99 = v0[36];
      v100 = v0[37];
      v102 = v0[33];
      v101 = v0[34];
      v103 = v0[32];
      v104 = swift_bridgeObjectRelease(v1);
      (*(void (**)(uint64_t, uint64_t, __n128))(v102 + 8))(v101, v103, v104);
      v105 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      v105(v98, v99);
      v81 = ((uint64_t (*)(uint64_t, uint64_t))v105)(v97, v99);
    }
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

void sub_10011A1A0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)(_QWORD, _QWORD, _QWORD);
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  id v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  void (**v85)(_QWORD, _QWORD, _QWORD);
  id v86;
  id v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  Class isa;
  double v92;
  id v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  id v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  id v114;
  Class v115;
  double v116;
  void *v117;
  id v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  void (**v154)(_QWORD, _QWORD, _QWORD);
  uint64_t v155;
  __int128 v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  id v163[4];

  v1 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v1);
  v162 = ((char *)&v148 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_100006DF4(&qword_100296BC0);
  v159 = *(_QWORD *)(v3 - 8);
  v160 = v3;
  __chkstk_darwin(v3);
  v158 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100006DF4(&qword_100293E28);
  v5 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v7 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100293E30);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DataScannerViewController.QualityLevel(0);
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_100293E38);
  __chkstk_darwin(v16);
  v18 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC])
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10000F66C(v19, (uint64_t)qword_1002AA320);
    v162 = Logger.logObject.getter(v20);
    v21 = static os_log_type_t.info.getter(v162);
    if (os_log_type_enabled(v162, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, v21, "Attempt to add a data scanner when one is already present; doing nothing",
        v22,
        2u);
      swift_slowDealloc(v22, -1, -1);
    }

    return;
  }
  v154 = v13;
  v155 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC;
  *(_QWORD *)&v156 = v15;
  v157 = v0;
  v149 = v7;
  v150 = v5;
  v151 = v11;
  v152 = v9;
  v153 = v8;
  v23 = sub_100006DF4(&qword_100293E40);
  v24 = type metadata accessor for DataScannerViewController.RecognizedDataType(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 72);
  v27 = *(unsigned __int8 *)(v25 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v23, v28 + v26, v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1001E64F0;
  v30 = v29 + v28;
  v31 = type metadata accessor for DataScannerViewController.TextContentType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v18, 1, 1, v31);
  static DataScannerViewController.RecognizedDataType.text(languages:textContentType:)(_swiftEmptyArrayStorage, v18);
  sub_10000A020((uint64_t)v18, &qword_100293E38);
  v32 = *(_QWORD *)(v29 + 16);
  if (v32)
    v33 = sub_1000E3CE4(v29);
  else
    v33 = &_swiftEmptySetSingleton;
  v34 = v157;
  v35 = v156;
  v36 = v12;
  v37 = v154;
  swift_setDeallocating(v29);
  swift_arrayDestroy(v30, v32, v24);
  swift_deallocClassInstance(v29, 32, 7);
  v37[13](v35, enum case for DataScannerViewController.QualityLevel.fast(_:), v36);
  v38 = objc_allocWithZone((Class)type metadata accessor for DataScannerViewController(0));
  v39 = DataScannerViewController.init(recognizedDataTypes:qualityLevel:recognizesMultipleItems:isHighFrameRateTrackingEnabled:isPinchToZoomEnabled:isGuidanceEnabled:isHighlightingEnabled:usesSingleCamera:)(v33, v35, 1, 1, 0, 0, 0, 0);
  v40 = v155;
  v41 = *(void **)&v34[v155];
  *(_QWORD *)&v34[v155] = v39;

  v43 = *(void **)&v34[v40];
  if (!v43)
    goto LABEL_27;
  v44 = sub_10011E300(&qword_100293E48, v42, (uint64_t (*)(uint64_t))type metadata accessor for CameraPreviewViewController, (uint64_t)&unk_1001F09D4);
  v45 = v34;
  v46 = v43;
  dispatch thunk of DataScannerViewController.delegate.setter(v34, v44);
  v48 = sub_10011E300(&qword_100293E50, v47, (uint64_t (*)(uint64_t))type metadata accessor for CameraPreviewViewController, (uint64_t)&unk_1001F099C);
  v49 = swift_unknownObjectRetain(v45);
  dispatch thunk of DataScannerViewController.privateDelegate.setter(v34, v48, v49);
  objc_msgSend(v45, "addChildViewController:", v46);
  v50 = objc_msgSend(v46, "view");
  if (!v50)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v143 = type metadata accessor for Logger(0);
    v144 = sub_10000F66C(v143, (uint64_t)qword_1002AA320);
    v145 = Logger.logObject.getter(v144);
    v146 = static os_log_type_t.fault.getter(v145);
    if (os_log_type_enabled(v145, v146))
    {
      v147 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v147 = 0;
      _os_log_impl((void *)&_mh_execute_header, v145, v146, "Unable to find data scanner view", v147, 2u);
      swift_slowDealloc(v147, -1, -1);
    }

    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000001001FDF60, "SequoiaTranslator/LiveImageTranslationView.swift", 48, 2, 491, 0);
    goto LABEL_37;
  }
  v51 = v50;
  v52 = objc_msgSend(v45, "view");
  if (!v52)
  {
    __break(1u);
    goto LABEL_22;
  }
  v53 = v52;
  objc_msgSend(v52, "bounds");
  v55 = v54;
  v57 = v56;
  v59 = v58;
  v61 = v60;

  objc_msgSend(v51, "setFrame:", v55, v57, v59, v61);
  objc_msgSend(v51, "setContentMode:", 2);
  v62 = objc_msgSend(v45, "view");
  if (!v62)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v63 = v62;
  objc_msgSend(v62, "insertSubview:below:", v51, *(_QWORD *)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_materialView]);

  objc_msgSend(v51, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v64 = sub_10011C3F4(v51);
  v65 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topConstraint;
  v66 = *(void **)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topConstraint];
  *(_QWORD *)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topConstraint] = v64;

  v67 = sub_10011C5C0(v51);
  v68 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomConstraint;
  v69 = *(void **)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomConstraint];
  *(_QWORD *)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomConstraint] = v67;

  v70 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v71 = swift_allocObject(v70, 64, 7);
  v156 = xmmword_1001E7590;
  *(_OWORD *)(v71 + 16) = xmmword_1001E7590;
  v72 = *(void **)&v45[v65];
  if (!v72)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v73 = (_QWORD *)v71;
  v155 = v70;
  *(_QWORD *)(v71 + 32) = v72;
  v74 = v72;
  v75 = objc_msgSend(v51, "leadingAnchor");
  v76 = objc_msgSend(v45, "view");
  if (!v76)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v77 = v76;
  v78 = objc_msgSend(v76, "leadingAnchor");

  v79 = objc_msgSend(v75, "constraintEqualToAnchor:", v78);
  v73[5] = v79;
  v80 = *(void **)&v45[v68];
  if (!v80)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v73[6] = v80;
  v81 = v80;
  v82 = objc_msgSend(v51, "trailingAnchor");
  v83 = objc_msgSend(v45, "view");
  if (!v83)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v138 = type metadata accessor for Logger(0);
    v139 = sub_10000F66C(v138, (uint64_t)qword_1002AA320);
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.fault.getter(v140);
    if (os_log_type_enabled(v140, v141))
    {
      v142 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v142 = 0;
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "Unable to initialize data scanner view controller", v142, 2u);
      swift_slowDealloc(v142, -1, -1);
    }

    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001001FDF40, "SequoiaTranslator/LiveImageTranslationView.swift", 48, 2, 481, 0);
LABEL_37:
    __break(1u);
    return;
  }
  v84 = v83;
  v85 = (void (**)(_QWORD, _QWORD, _QWORD))objc_opt_self(NSLayoutConstraint);
  v86 = objc_msgSend(v84, "trailingAnchor");

  v87 = objc_msgSend(v82, "constraintEqualToAnchor:", v86);
  v73[7] = v87;
  v163[0] = v73;
  specialized Array._endMutation()(v88);
  v89 = v163[0];
  v90 = sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v92 = swift_bridgeObjectRelease(v89).n128_u64[0];
  v154 = v85;
  objc_msgSend(v85, "activateConstraints:", isa, v92);

  v93 = objc_allocWithZone((Class)type metadata accessor for VisualTranslationViewBridge(0));
  v94 = (void *)VisualTranslationViewBridge.init(optimizedForExtendedExperience:)(1);
  v95 = VisualTranslationViewBridge.view.getter();
  v157 = v46;
  if (v95)
  {
    v96 = (void *)v95;
    v97 = (void *)dispatch thunk of DataScannerViewController.overlayContainerView.getter();
    v148 = v90;
    v98 = v97;
    objc_msgSend(v97, "bounds", v148);
    objc_msgSend(v96, "setFrame:");
    objc_msgSend(v96, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v99 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v96, "setBackgroundColor:", v99);

    objc_msgSend(v98, "addSubview:", v96);
    v100 = swift_allocObject(v155, 64, 7);
    *(_OWORD *)(v100 + 16) = v156;
    v101 = objc_msgSend(v96, "topAnchor");
    v102 = objc_msgSend(v98, "topAnchor");
    v103 = objc_msgSend(v101, "constraintEqualToAnchor:", v102);

    *(_QWORD *)(v100 + 32) = v103;
    v104 = objc_msgSend(v96, "leadingAnchor");
    v105 = objc_msgSend(v98, "leadingAnchor");
    v106 = objc_msgSend(v104, "constraintEqualToAnchor:", v105);

    *(_QWORD *)(v100 + 40) = v106;
    v107 = objc_msgSend(v96, "bottomAnchor");
    v108 = objc_msgSend(v98, "bottomAnchor");
    v109 = objc_msgSend(v107, "constraintEqualToAnchor:", v108);

    *(_QWORD *)(v100 + 48) = v109;
    v110 = objc_msgSend(v96, "trailingAnchor");
    v111 = objc_msgSend(v98, "trailingAnchor");
    v112 = objc_msgSend(v110, "constraintEqualToAnchor:", v111);

    *(_QWORD *)(v100 + 56) = v112;
    v163[0] = (id)v100;
    specialized Array._endMutation()(v113);
    v114 = v163[0];
    v115 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v116 = swift_bridgeObjectRelease(v114).n128_u64[0];
    objc_msgSend(v154, "activateConstraints:", v115, v116);

  }
  v117 = *(void **)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_translationBridge];
  *(_QWORD *)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_translationBridge] = v94;
  v118 = v94;

  swift_beginAccess(*(_QWORD *)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_conversation]+ OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__visualTranslationLocale, v163, 33, 0);
  v119 = sub_100006DF4(&qword_10028F270);
  v120 = v158;
  Published.projectedValue.getter(v119);
  swift_endAccess(v163);
  v121 = sub_100012334(&qword_10028EFA8, &qword_100296BC0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v122 = sub_10011E300(&qword_10028DE18, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  v123 = v149;
  v124 = v160;
  Publisher<>.removeDuplicates()(v160, v121, v122);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v120, v124);
  v125 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v163[0] = (id)static OS_dispatch_queue.main.getter(v125);
  v126 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v127 = v162;
  (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 56))(v162, 1, 1, v126);
  v128 = sub_100012334(&qword_100293E58, &qword_100293E28, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v129 = sub_10001D984();
  v130 = v151;
  v131 = v161;
  Publisher.receive<A>(on:options:)(v163, v127, v161, v125, v128, v129);
  sub_10000A020((uint64_t)v127, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v150 + 8))(v123, v131);
  v132 = swift_allocObject(&unk_10026BA68, 24, 7);
  swift_unknownObjectWeakInit(v132 + 16, v45);
  v133 = sub_100012334(&qword_100293E60, &qword_100293E30, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v134 = v153;
  v135 = Publisher<>.sink(receiveValue:)(sub_10011E504, v132, v153, v133);
  v136 = swift_release(v132);
  (*(void (**)(char *, uint64_t, __n128))(v152 + 8))(v130, v134, v136);
  v137 = *(_QWORD *)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_visualTranslationLocaleSubscription];
  *(_QWORD *)&v45[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_visualTranslationLocaleSubscription] = v135;
  swift_release(v137);
  sub_10011B2D8();

}

