void sub_10011B018(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  _BYTE v43[24];
  _BYTE v44[24];

  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 16;
  v9 = Locale.languageIdentifier.getter(v5);
  Locale.init(identifier:)(v9, v10);
  type metadata accessor for VisualTranslationService(0);
  v11 = static VisualTranslationService.isOCRLocale(_:)(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if ((v11 & 1) != 0)
  {
    swift_beginAccess(v8, v44, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v8);
    if (Strong)
    {
      v13 = (void *)Strong;
      v14 = Strong + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
      v15 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);
      v16 = *(_QWORD *)(v14 + 8);

      if (v15)
      {
        ObjectType = swift_getObjectType(v15);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 + 16) + 16))(2, ObjectType);
        swift_unknownObjectRelease(v15);
      }
    }
    swift_beginAccess(v8, v43, 0, 0);
    v18 = swift_unknownObjectWeakLoadStrong(v8);
    if (v18)
    {
      v19 = (void *)v18;
      v20 = swift_unknownObjectWeakLoadStrong(v18 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);

      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 168);
        v22 = *(_BYTE *)(v20 + 176);
        v39 = *(_QWORD *)(v20 + 160);
        v40 = v21;
        v41 = v22;
        v42 = 0;
        v23 = sub_100006DF4(&qword_100296C60);
        Binding.wrappedValue.setter(&v42, v23);
        swift_unknownObjectRelease(v20);
      }
    }
    swift_beginAccess(v8, &v39, 0, 0);
    v24 = swift_unknownObjectWeakLoadStrong(v8);
    if (v24)
    {
      v25 = (void *)v24;
      sub_1001167A4();
LABEL_18:

    }
  }
  else
  {
    swift_beginAccess(v8, v44, 0, 0);
    v26 = swift_unknownObjectWeakLoadStrong(v8);
    if (v26)
    {
      v27 = (void *)v26;
      v28 = v26 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
      v29 = swift_unknownObjectWeakLoadStrong(v26 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);
      v30 = *(_QWORD *)(v28 + 8);

      if (v29)
      {
        v31 = swift_getObjectType(v29);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 + 16) + 8))(2, 1, v31);
        swift_unknownObjectRelease(v29);
      }
    }
    swift_beginAccess(v8, v43, 0, 0);
    v32 = swift_unknownObjectWeakLoadStrong(v8);
    if (v32)
    {
      v33 = (void *)v32;
      v34 = swift_unknownObjectWeakLoadStrong(v32 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);

      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 168);
        v36 = *(_BYTE *)(v34 + 176);
        v39 = *(_QWORD *)(v34 + 160);
        v40 = v35;
        v41 = v36;
        v42 = 1;
        v37 = sub_100006DF4(&qword_100296C60);
        Binding.wrappedValue.setter(&v42, v37);
        swift_unknownObjectRelease(v34);
      }
    }
    swift_beginAccess(v8, &v39, 0, 0);
    v38 = swift_unknownObjectWeakLoadStrong(v8);
    if (v38)
    {
      v25 = (void *)v38;
      sub_100117094();
      goto LABEL_18;
    }
  }
}

double sub_10011B2D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  double result;
  id v22;
  uint64_t v23;

  v1 = v0;
  v2 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_100293E10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availabilitySubscription;
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availabilitySubscription);
  if (v10)
  {
    swift_retain(v10);
    AnyCancellable.cancel()();
    swift_release(v10);
  }
  v23 = sub_10013B824(*(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_conversation), *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_context));
  v11 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v22 = (id)static OS_dispatch_queue.main.getter(v11);
  v12 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = sub_100006DF4(&qword_100293E18);
  v14 = sub_100012334(&qword_100296C00, &qword_100293E18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v15 = sub_10001D984();
  Publisher.receive<A>(on:options:)(&v22, v4, v13, v11, v14, v15);
  sub_10000A020((uint64_t)v4, &qword_100296BE0);

  swift_release(v23);
  v16 = swift_allocObject(&unk_10026BA68, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v1);
  v17 = sub_100012334(&qword_100293E20, &qword_100293E10, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v18 = Publisher<>.sink(receiveValue:)(sub_10011E4FC, v16, v5, v17);
  v19 = swift_release(v16);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v19);
  v20 = *(_QWORD *)(v1 + v9);
  *(_QWORD *)(v1 + v9) = v18;
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

void sub_10011B51C(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  _BYTE *Strong;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = (_BYTE *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    Strong[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availability] = v2;

  }
  swift_beginAccess(v3, &v7, 0, 0);
  v5 = swift_unknownObjectWeakLoadStrong(v3);
  if (v5)
  {
    v6 = (void *)v5;
    sub_1001173EC();

  }
}

id sub_10011B5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id result;
  void *v12;
  void *v13;
  void *v14;

  v1 = v0;
  v2 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC);
  if (!v3)
    goto LABEL_8;
  v4 = qword_10028A408;
  v5 = v3;
  if (v4 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA320);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Removing Scanner View", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  result = objc_msgSend(v5, "view");
  if (result)
  {
    v12 = result;
    objc_msgSend(result, "removeFromSuperview");

    objc_msgSend(v5, "removeFromParentViewController");
    v13 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = 0;

LABEL_8:
    v14 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_translationBridge);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_translationBridge) = 0;

    return (id)sub_10011B6F8();
  }
  __break(1u);
  return result;
}

uint64_t sub_10011B6F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availabilitySubscription;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availabilitySubscription);
  if (v3)
  {
    swift_retain(v3);
    AnyCancellable.cancel()();
    swift_release(v3);
    v4 = *(_QWORD *)(v1 + v2);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v1 + v2) = 0;
  swift_release(v4);
  v5 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_visualTranslationLocaleSubscription;
  v6 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_visualTranslationLocaleSubscription);
  if (v6)
  {
    swift_retain(*(_QWORD *)(v1
                           + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_visualTranslationLocaleSubscription));
    AnyCancellable.cancel()();
    swift_release(v6);
    v7 = *(_QWORD *)(v1 + v5);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(v1 + v5) = 0;
  return swift_release(v7);
}

uint64_t sub_10011B788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[8] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[9] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[10] = v6;
  v4[11] = v7;
  return swift_task_switch(sub_10011B7F4, v6, v7);
}

uint64_t sub_10011B7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v9;
  uint64_t (*v10)(void);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC);
  if (v3
    && (v4 = v3,
        dispatch thunk of DataScannerViewController.stopScanning()(v4),
        v4,
        v5 = *(void **)(v1 + v2),
        (*(_QWORD *)(v0 + 96) = v5) != 0))
  {
    v6 = *((unsigned int *)&async function pointer to dispatch thunk of DataScannerViewController.capturePhoto() + 1);
    v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of DataScannerViewController.capturePhoto()
                            + async function pointer to dispatch thunk of DataScannerViewController.capturePhoto());
    v5;
    v7 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = sub_10011B8B4;
    return v10();
  }
  else
  {
    v9 = swift_release(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v9);
  }
}

uint64_t sub_10011B8B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD **)v2;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v2 + 104));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = v4[10];
    v6 = v4[11];
    v7 = sub_10011BF28;
  }
  else
  {
    v4[14] = a1;
    v5 = v4[10];
    v6 = v4[11];
    v7 = sub_10011B92C;
  }
  return swift_task_switch(v7, v5, v6);
}

void sub_10011B92C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double Height;
  double v22;
  double v23;
  id v24;
  void *v25;
  void *v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  id v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  id v48;
  void *v49;
  void *v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  id v64;
  void *v65;
  void *v66;
  double v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  double v75;
  id v76;
  void *v77;
  void *v78;
  double v79;
  CGFloat v80;
  double v81;
  CGFloat v82;
  double v83;
  CGFloat v84;
  double v85;
  CGFloat v86;
  double v87;
  id v88;
  void *v89;
  double v90;
  double v91;
  double v92;
  void *v93;
  double v94;
  CGFloat v95;
  double v96;
  CGFloat v97;
  double v98;
  CGFloat v99;
  double v100;
  CGFloat v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  id v107;
  void *v108;
  void *v109;
  double v110;
  CGFloat v111;
  double v112;
  CGFloat v113;
  double v114;
  CGFloat v115;
  double v116;
  CGFloat v117;
  double v118;
  id v119;
  void *v120;
  void *v121;
  double v122;
  CGFloat v123;
  double v124;
  CGFloat v125;
  double v126;
  CGFloat v127;
  double v128;
  CGFloat v129;
  double v130;
  id v131;
  double v132;
  uint64_t v133;
  double v134;
  double v135;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat v139;
  CGImage *v140;
  CGImage *v141;
  CGImageRef v142;
  CGImage *v143;
  id v144;
  void *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;

  v1 = *(void **)(v0 + 112);
  v2 = *(void **)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 72));
  v4 = sub_10011BF60(*(_QWORD *)(*(_QWORD *)(v3
                                           + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_context)
                               + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_lastKnownInterfaceOrientation));

  v5 = objc_msgSend(v2, "view");
  if (!v5)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = v5;
  objc_msgSend(v5, "frame");
  v8 = v7;

  v9 = *(void **)(v0 + 96);
  if (v8 > 0.0)
  {
    v10 = objc_msgSend(*(id *)(v0 + 96), "view");
    if (!v10)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v11 = v10;
    v12 = *(void **)(v0 + 96);
    objc_msgSend(v10, "frame");
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    v150.origin.x = v14;
    v150.origin.y = v16;
    v150.size.width = v18;
    v150.size.height = v20;
    Height = CGRectGetHeight(v150);
    objc_msgSend(v4, "size");
    v23 = v22;
    v24 = objc_msgSend(v12, "view");
    if (!v24)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v25 = v24;
    v26 = *(void **)(v0 + 96);
    objc_msgSend(v24, "frame");
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;

    v151.origin.x = v28;
    v151.origin.y = v30;
    v151.size.width = v32;
    v151.size.height = v34;
    v35 = CGRectGetHeight(v151);
    v36 = objc_msgSend(v26, "view");
    if (!v36)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v37 = v36;
    v38 = Height / v23;
    v39 = v8 / (v38 + v38);
    v40 = (v35 - v8) / v38;
    objc_msgSend(v36, "frame");
    v42 = v41;

    v43 = v42 / v38;
LABEL_19:
    v133 = 0;
    v134 = v39;
    v135 = v40;
    v158 = CGRectIntegral(*(CGRect *)(&v43 - 3));
    x = v158.origin.x;
    y = v158.origin.y;
    width = v158.size.width;
    v139 = v158.size.height;
    v140 = (CGImage *)objc_msgSend(v4, "CGImage");
    if (v140)
    {
      v141 = v140;
      v159.origin.x = x;
      v159.origin.y = y;
      v159.size.width = width;
      v159.size.height = v139;
      v142 = CGImageCreateWithImageInRect(v140, v159);

      if (v142)
      {
        v143 = v142;
        v144 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:imageOrientation:", v143, objc_msgSend(v4, "imageOrientation"));

        if (v144)
        {
          v145 = *(void **)(v0 + 96);
          v146 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController__staticImage;
          v147 = *(_OWORD *)v146;
          v148 = *(_QWORD *)(v146 + 16);
          LOBYTE(v146) = *(_BYTE *)(v146 + 24);
          *(_OWORD *)(v0 + 16) = v147;
          *(_QWORD *)(v0 + 32) = v148;
          *(_BYTE *)(v0 + 40) = v146;
          *(_QWORD *)(v0 + 48) = v144;
          *(_BYTE *)(v0 + 56) = 2;
          v149 = sub_100006DF4(&qword_100291428);
          Binding.wrappedValue.setter(v0 + 48, v149);

          (*(void (**)(void))(v0 + 8))();
          return;
        }
        goto LABEL_26;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  objc_msgSend(v4, "size");
  v45 = v44;
  objc_msgSend(v4, "size");
  v47 = v46;
  v48 = objc_msgSend(v9, "view");
  v49 = v48;
  if (v45 < v47)
  {
    if (!v48)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v50 = *(void **)(v0 + 96);
    objc_msgSend(v48, "frame");
    v52 = v51;
    v54 = v53;
    v56 = v55;
    v58 = v57;

    v152.origin.x = v52;
    v152.origin.y = v54;
    v152.size.width = v56;
    v152.size.height = v58;
    v59 = CGRectGetWidth(v152);
    objc_msgSend(v4, "size");
    v61 = v60;
    objc_msgSend(v4, "size");
    v63 = v62;
    v64 = objc_msgSend(v50, "view");
    if (!v64)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v65 = v64;
    v66 = *(void **)(v0 + 96);
    objc_msgSend(v64, "frame");
    v68 = v67;
    v70 = v69;
    v72 = v71;
    v74 = v73;

    v153.origin.x = v68;
    v153.origin.y = v70;
    v153.size.width = v72;
    v153.size.height = v74;
    v75 = CGRectGetHeight(v153);
    v76 = objc_msgSend(v66, "view");
    if (!v76)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v77 = v76;
    v78 = *(void **)(v0 + 96);
    objc_msgSend(v76, "frame");
    v80 = v79;
    v82 = v81;
    v84 = v83;
    v86 = v85;

    v154.origin.x = v80;
    v154.origin.y = v82;
    v154.size.width = v84;
    v154.size.height = v86;
    v87 = CGRectGetHeight(v154);
    v88 = objc_msgSend(v78, "view");
    if (!v88)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v89 = v88;
    v90 = v59 / v61;
    v39 = (v63 - v75 / (v59 / v61)) * 0.5;
    v40 = v87 / v90;
    objc_msgSend(v88, "frame");
    v92 = v91;
    goto LABEL_18;
  }
  if (!v48)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v93 = *(void **)(v0 + 96);
  objc_msgSend(v48, "frame");
  v95 = v94;
  v97 = v96;
  v99 = v98;
  v101 = v100;

  v155.origin.x = v95;
  v155.origin.y = v97;
  v155.size.width = v99;
  v155.size.height = v101;
  v102 = CGRectGetHeight(v155);
  objc_msgSend(v4, "size");
  v104 = v103;
  objc_msgSend(v4, "size");
  v106 = v105;
  v107 = objc_msgSend(v93, "view");
  if (!v107)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v108 = v107;
  v109 = *(void **)(v0 + 96);
  objc_msgSend(v107, "frame");
  v111 = v110;
  v113 = v112;
  v115 = v114;
  v117 = v116;

  v156.origin.x = v111;
  v156.origin.y = v113;
  v156.size.width = v115;
  v156.size.height = v117;
  v118 = CGRectGetWidth(v156);
  v119 = objc_msgSend(v109, "view");
  if (!v119)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v120 = v119;
  v121 = *(void **)(v0 + 96);
  objc_msgSend(v119, "frame");
  v123 = v122;
  v125 = v124;
  v127 = v126;
  v129 = v128;

  v157.origin.x = v123;
  v157.origin.y = v125;
  v157.size.width = v127;
  v157.size.height = v129;
  v130 = CGRectGetWidth(v157);
  v131 = objc_msgSend(v121, "view");
  if (v131)
  {
    v89 = v131;
    v90 = v102 / v104;
    v39 = (v106 - v118 / (v102 / v104)) * 0.5;
    v40 = v130 / v90;
    objc_msgSend(v131, "frame");
    v92 = v132;
LABEL_18:

    v43 = v92 / v90;
    goto LABEL_19;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_10011BF28()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 72));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10011BF60(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  unsigned int v7;
  void *v8;
  id result;
  id v10;
  id v11;

  v2 = v1;
  v11 = v2;
  v4 = objc_msgSend(v2, "CGImage");
  if (!v4)
    return v11;
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v7 = objc_msgSend(v6, "sf_isiPad");

  if (!v7)
  {
    v8 = v11;
LABEL_10:
    result = v8;
LABEL_11:
    v10 = result;

    return v10;
  }
  v8 = v11;
  switch(a1)
  {
    case 4:
      result = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:imageOrientation:", v5, 1);
      if (result)
        goto LABEL_11;
      __break(1u);
      break;
    case 3:
      break;
    case 2:
      result = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:imageOrientation:", v5, 2);
      if (!result)
      {
        __break(1u);
        return v11;
      }
      goto LABEL_11;
    default:
      goto LABEL_10;
  }
  result = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:imageOrientation:", v5, 0);
  if (result)
    goto LABEL_11;
  __break(1u);
  return result;
}

double sub_10011C12C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  double result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v8 = Strong;
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
    v10 = (_QWORD *)swift_allocObject(&unk_10026BAE0, 40, 7);
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = v8;
    v11 = sub_100049DC0((uint64_t)v5, (uint64_t)&unk_100293E90, (uint64_t)v10);
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

uint64_t sub_10011C208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10011C274, v6, v7);
}

uint64_t sub_10011C274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  v2 = v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 8))(1, 1, ObjectType);
    swift_unknownObjectRelease(v4);
  }
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(void **)(v7 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_noTextFoundTimer);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_noTextFoundTimer) = 0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10011C300(double a1, double a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v7;
  double v8;
  double v9;
  double v10;
  id v11;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topConstraint);
  if (v3)
  {
    v4 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomConstraint);
    if (v4)
    {
      v11 = v3;
      v7 = v4;
      objc_msgSend(v11, "constant");
      if (v8 != a1)
        objc_msgSend(v11, "setConstant:", a1);
      objc_msgSend(v7, "constant");
      if (v9 != a2)
      {
        objc_msgSend(v7, "setConstant:", a2);
        LODWORD(v10) = 1148846080;
        if (a2 <= 0.0)
          *(float *)&v10 = 1.0;
        objc_msgSend(v7, "setPriority:", v10);
      }

    }
  }
}

id sub_10011C3F4(void *a1)
{
  char *v1;
  id v2;
  id result;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  double v22;
  _OWORD v23[10];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = objc_msgSend(a1, "topAnchor");
  result = objc_msgSend(v1, "view");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "topAnchor");

    v6 = objc_msgSend(v2, "constraintEqualToAnchor:", v5);
    objc_msgSend(v6, "setConstant:", 0.0);
    v7 = objc_msgSend(v1, "traitCollection");
    v8 = objc_msgSend(v7, "horizontalSizeClass");

    if (v8 == (id)1)
    {
      Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate]);
      if (Strong)
      {
        v10 = Strong;
        v11 = type metadata accessor for CameraPreviewView.Coordinator();
        v12 = (_OWORD *)swift_dynamicCastClass(v10, v11);
        if (v12)
        {
          v13 = v12[13];
          v25 = v12[12];
          v26 = v13;
          v14 = v12[15];
          v27 = v12[14];
          v28 = v14;
          v15 = v12[9];
          v23[7] = v12[8];
          v23[8] = v15;
          v16 = v12[11];
          v23[9] = v12[10];
          v24 = v16;
          v17 = v12[5];
          v23[3] = v12[4];
          v23[4] = v17;
          v18 = v12[7];
          v23[5] = v12[6];
          v23[6] = v18;
          v19 = v12[2];
          v23[0] = v12[1];
          v23[1] = v19;
          v23[2] = v12[3];
          sub_10011E1B0((uint64_t)v23);
          swift_unknownObjectRelease(v10);
          v20 = *((_QWORD *)&v24 + 1);
          v21 = v25;
          sub_100006DF4(&qword_10028F2B0);
          Binding.wrappedValue.getter(&v22);
          sub_10011E38C((uint64_t)v23);
          if (v22 > 0.0)
            objc_msgSend(v6, "setConstant:", v22, v20, v21);
        }
        else
        {
          swift_unknownObjectRelease(v10);
        }
      }
    }
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10011C5C0(void *a1)
{
  char *v1;
  id v2;
  id result;
  void *v4;
  id v5;
  id v6;
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  id v16;
  id v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  double v31;
  _OWORD v32[12];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CGRect v36;

  v2 = objc_msgSend(a1, "bottomAnchor");
  result = objc_msgSend(v1, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = result;
  v5 = objc_msgSend(result, "topAnchor");

  v6 = objc_msgSend(v2, "constraintEqualToAnchor:", v5);
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v7 = result;
  objc_msgSend(result, "bounds");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;

  v36.origin.x = v9;
  v36.origin.y = v11;
  v36.size.width = v13;
  v36.size.height = v15;
  objc_msgSend(v6, "setConstant:", CGRectGetHeight(v36));
  v16 = objc_msgSend(v1, "traitCollection");
  v17 = objc_msgSend(v16, "horizontalSizeClass");

  if (v17 == (id)1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate]);
    if (Strong)
    {
      v19 = Strong;
      v20 = type metadata accessor for CameraPreviewView.Coordinator();
      v21 = (_OWORD *)swift_dynamicCastClass(v19, v20);
      if (v21)
      {
        v22 = v21[13];
        v32[11] = v21[12];
        v33 = v22;
        v23 = v21[15];
        v34 = v21[14];
        v35 = v23;
        v24 = v21[9];
        v32[7] = v21[8];
        v32[8] = v24;
        v25 = v21[11];
        v32[9] = v21[10];
        v32[10] = v25;
        v26 = v21[5];
        v32[3] = v21[4];
        v32[4] = v26;
        v27 = v21[7];
        v32[5] = v21[6];
        v32[6] = v27;
        v28 = v21[2];
        v32[0] = v21[1];
        v32[1] = v28;
        v32[2] = v21[3];
        sub_10011E1B0((uint64_t)v32);
        swift_unknownObjectRelease(v19);
        v29 = v33;
        v30 = v34;
        sub_100006DF4(&qword_10028F2B0);
        Binding.wrappedValue.getter(&v31);
        sub_10011E38C((uint64_t)v32);
        if (v31 > 0.0)
          objc_msgSend(v6, "setConstant:", v31, v29, v30);
      }
      else
      {
        swift_unknownObjectRelease(v19);
      }
    }
  }
  return v6;
}

uint64_t sub_10011C7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  __n128 v23;
  void (*v24)(char *, uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v31;

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v31 - v11;
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v31 - v13);
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_conversation);
  KeyPath = swift_getKeyPath(&unk_1001F0A68);
  v17 = swift_getKeyPath(&unk_1001F0A90);
  static Published.subscript.getter(v14, v15, KeyPath);
  swift_release(KeyPath);
  swift_release(v17);
  v18 = sub_100076A78();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v18, "oppositeToLocale:", isa);

  if (v20)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v21(v4, v9, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v21(v12, v4, v5);
      v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_selfLoggingInvocation);
      swift_retain(v22);
      sub_10015B308(0, 0, (uint64_t)v14, (uint64_t)v12);
      v23 = swift_release(v22);
      v24 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
      v24(v12, v5, v23);
      return ((uint64_t (*)(_QWORD *, uint64_t))v24)(v14, v5);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_10000A020((uint64_t)v4, (uint64_t *)&unk_10028FE50);
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10000F66C(v25, (uint64_t)qword_1002AA320);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to get source and target locales for SELF logging for live image translation", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  v24 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  return ((uint64_t (*)(_QWORD *, uint64_t))v24)(v14, v5);
}

id sub_10011CAF8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CameraPreviewViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CameraPreviewViewController()
{
  return objc_opt_self(_TtC17SequoiaTranslator27CameraPreviewViewController);
}

uint64_t destroy for CameraPreviewView(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 40));
  if (*(unsigned __int8 *)(a1 + 56) != 255)

  swift_release(*(_QWORD *)(a1 + 64));
  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(*(_QWORD *)(a1 + 88));
  swift_release(*(_QWORD *)(a1 + 96));
  swift_release(*(_QWORD *)(a1 + 112));
  swift_release(*(_QWORD *)(a1 + 120));
  swift_release(*(_QWORD *)(a1 + 128));
  swift_release(*(_QWORD *)(a1 + 144));
  swift_release(*(_QWORD *)(a1 + 152));
  swift_release(*(_QWORD *)(a1 + 168));
  swift_release(*(_QWORD *)(a1 + 176));
  swift_release(*(_QWORD *)(a1 + 192));
  swift_release(*(_QWORD *)(a1 + 200));
  swift_release(*(_QWORD *)(a1 + 216));
  swift_release(*(_QWORD *)(a1 + 224));
  return swift_release(*(_QWORD *)(a1 + 232));
}

uint64_t initializeWithCopy for CameraPreviewView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2 + 48;
  v11 = *(unsigned __int8 *)(a2 + 56);
  v12 = v4;
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  if (v11 == 255)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(v10 + 8);
  }
  else
  {
    v13 = *(void **)v10;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 56) = v11;
    v14 = v13;
  }
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v16;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 96) = v18;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v19;
  *(_QWORD *)(a1 + 120) = v20;
  v21 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v21;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v27 = *(_QWORD *)(a2 + 168);
  v29 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v27;
  *(_QWORD *)(a1 + 176) = v29;
  v28 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v28;
  v24 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v31;
  *(_QWORD *)(a1 + 208) = v24;
  v30 = *(_QWORD *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v30;
  *(_QWORD *)(a1 + 224) = v32;
  v25 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v25;
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v23);
  swift_retain(v27);
  swift_retain(v29);
  swift_retain(v28);
  swift_retain(v31);
  swift_retain(v30);
  swift_retain(v32);
  swift_retain(v25);
  return a1;
}

uint64_t assignWithCopy for CameraPreviewView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  int v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain(v10);
  swift_release(v9);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = (void **)(a1 + 48);
  v14 = (void **)(a2 + 48);
  v15 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v15 == 255)
    {
      v22 = *v14;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *v13 = v22;
    }
    else
    {
      v19 = *v14;
      *(_QWORD *)(a1 + 48) = *v14;
      *(_BYTE *)(a1 + 56) = v15;
      v20 = v19;
    }
  }
  else if (v15 == 255)
  {
    sub_1000D4EE8((id *)(a1 + 48));
    v21 = *(_BYTE *)(a2 + 56);
    *v13 = *v14;
    *(_BYTE *)(a1 + 56) = v21;
  }
  else
  {
    v16 = *v14;
    v17 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = *v14;
    *(_BYTE *)(a1 + 56) = v15;
    v18 = v16;

  }
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v24;
  swift_retain(v24);
  swift_release(v23);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v25;
  swift_retain(v25);
  swift_release(v26);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v27 = *(_QWORD *)(a1 + 88);
  v28 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v28;
  swift_retain(v28);
  swift_release(v27);
  v29 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v29;
  swift_retain(v29);
  swift_release(v30);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v31;
  swift_retain(v31);
  swift_release(v32);
  v33 = *(_QWORD *)(a1 + 120);
  v34 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v34;
  swift_retain(v34);
  swift_release(v33);
  v35 = *(_QWORD *)(a2 + 128);
  v36 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v35;
  swift_retain(v35);
  swift_release(v36);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v37 = *(_QWORD *)(a1 + 144);
  v38 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v38;
  swift_retain(v38);
  swift_release(v37);
  v39 = *(_QWORD *)(a2 + 152);
  v40 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v39;
  swift_retain(v39);
  swift_release(v40);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v41 = *(_QWORD *)(a1 + 168);
  v42 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v42;
  swift_retain(v42);
  swift_release(v41);
  v43 = *(_QWORD *)(a2 + 176);
  v44 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v43;
  swift_retain(v43);
  swift_release(v44);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v45 = *(_QWORD *)(a1 + 192);
  v46 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v46;
  swift_retain(v46);
  swift_release(v45);
  v47 = *(_QWORD *)(a2 + 200);
  v48 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v47;
  swift_retain(v47);
  swift_release(v48);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v49 = *(_QWORD *)(a1 + 216);
  v50 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v50;
  swift_retain(v50);
  swift_release(v49);
  v51 = *(_QWORD *)(a2 + 224);
  v52 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v51;
  swift_retain(v51);
  swift_release(v52);
  v53 = *(_QWORD *)(a2 + 232);
  v54 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v53;
  swift_retain(v53);
  swift_release(v54);
  return a1;
}

__n128 initializeWithTake for CameraPreviewView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for CameraPreviewView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_release(v5);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_release(v7);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v9);
  v10 = (_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
    goto LABEL_5;
  v11 = *(unsigned __int8 *)(a2 + 56);
  if (v11 == 255)
  {
    sub_1000D4EE8((id *)(a1 + 48));
LABEL_5:
    *(_QWORD *)(a1 + 48) = *v10;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    goto LABEL_6;
  }
  v12 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *v10;
  *(_BYTE *)(a1 + 56) = v11;

LABEL_6:
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v13);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v14);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release(v15);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v16);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release(v17);
  v18 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release(v18);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release(v19);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release(v20);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_release(v21);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v22 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_release(v22);
  v23 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release(v23);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v24 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release(v24);
  v25 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release(v25);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v26 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_release(v26);
  v27 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_release(v27);
  v28 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release(v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraPreviewView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraPreviewView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraPreviewView()
{
  return &type metadata for CameraPreviewView;
}

id sub_10011D528(uint64_t a1, uint64_t a2)
{
  return sub_10011DCC0(a2);
}

uint64_t sub_10011D530(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;

  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v3 = type metadata accessor for Logger(0);
  sub_10000F66C(v3, (uint64_t)qword_1002AA320);
  v4 = a1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67109120;
    LOBYTE(v15) = dispatch thunk of DataScannerViewController.hasTorch.getter() & 1;
    v15 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DataScanner thinks it has torch: %{BOOL}d", v7, 8u);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  v8 = v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);
  if (Strong)
  {
    v10 = Strong;
    v11 = dispatch thunk of DataScannerViewController.hasTorch.getter();
    sub_100115570(v11 & 1);
    swift_unknownObjectRelease(v10);
  }
  result = swift_unknownObjectWeakLoadStrong(v8);
  if (result)
  {
    v13 = result;
    v14 = dispatch thunk of DataScannerViewController.isTorchOn.getter();
    sub_1001156B4(v14 & 1);
    return swift_unknownObjectRelease(v13);
  }
  return result;
}

uint64_t sub_10011D6D4(uint64_t a1, uint64_t a2)
{
  return sub_10011DF3C(a2);
}

id sub_10011D6E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  id v24;
  char *v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v38;
  objc_super v41;

  v18 = &a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate];
  *((_QWORD *)v18 + 1) = 0;
  v19 = swift_unknownObjectWeakInit(v18, 0);
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_translationBridge] = 0;
  v20 = &a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_contextObserver];
  *v20 = 0u;
  v20[1] = 0u;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_observationTasks] = &_swiftEmptySetSingleton;
  a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availability] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availabilitySubscription] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_noTextFoundTimer] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_visualTranslationLocaleSubscription] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topReflectionView] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomReflectionView] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topConstraint] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomConstraint] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_launchPrerequisitesDebounceTimer] = 0;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_conversation] = a1;
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_context] = a2;
  v21 = &a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController__staticImage];
  *(_QWORD *)v21 = a3;
  *((_QWORD *)v21 + 1) = a4;
  *((_QWORD *)v21 + 2) = a5;
  v21[24] = a6;
  v22 = &a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController__viewportHasText];
  *(_QWORD *)v22 = a7;
  *((_QWORD *)v22 + 1) = a8;
  v22[16] = a9;
  *(_QWORD *)(v19 + 8) = &off_10026BA38;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&a12[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_selfLoggingInvocation] = a11;
  v23 = type metadata accessor for ChromeBar();
  v24 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v23));
  v38 = a3;
  swift_retain(a3);
  swift_retain(a4);
  v25 = a12;
  v26 = a1;
  swift_retain(a2);
  sub_1000E05CC(a5, a6);
  swift_retain(a7);
  swift_retain(a8);
  *(_QWORD *)&v25[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_materialView] = objc_msgSend(v24, "init", swift_retain(a11).n128_f64[0]);

  v41.receiver = v25;
  v41.super_class = (Class)type metadata accessor for CameraPreviewViewController();
  v27 = objc_msgSendSuper2(&v41, "initWithNibName:bundle:", 0, 0);
  v28 = qword_10028A408;
  v29 = v27;
  if (v28 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10000F66C(v30, (uint64_t)qword_1002AA320);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "initializing CameraPreviewViewController", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  sub_10011B2D8();
  swift_release(a4);
  swift_release(v38);
  swift_release(a8);
  swift_release(a7);
  swift_release(a10);
  swift_release(a11);
  sub_1000E05B8(a5, a6);

  swift_release(a2);
  return v29;
}

void sub_10011DA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _OWORD *v7;

  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_dataScannerVC] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_translationBridge] = 0;
  v7 = &v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_contextObserver];
  *v7 = 0u;
  v7[1] = 0u;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_observationTasks] = &_swiftEmptySetSingleton;
  v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availability] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_availabilitySubscription] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_noTextFoundTimer] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_visualTranslationLocaleSubscription] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topReflectionView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomReflectionView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_topConstraint] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_bottomConstraint] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_launchPrerequisitesDebounceTimer] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, a1, a2, "SequoiaTranslator/LiveImageTranslationView.swift", 48, 2, a3, 0);
  __break(1u);
}

void sub_10011DB68()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "debugTapInteractionWithRecognizer:");
  objc_msgSend(v3, "setNumberOfTouchesRequired:", 2);
  objc_msgSend(v3, "setNumberOfTapsRequired:", 3);
  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "addGestureRecognizer:", v3);

    sub_10011A1A0();
    sub_1001173EC();

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10011DC1C()
{
  char *v0;
  char *v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v7;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CameraPreviewViewController();
  objc_msgSendSuper2(&v8, "viewWillDisappear:", 1);
  sub_100117094();
  sub_10011B5A0();
  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate]);
  if (Strong)
  {
    v3 = Strong;
    v4 = *((_QWORD *)v1 + 1);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 16) + 24))(ObjectType);
    swift_unknownObjectRelease(v3);
  }
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v7 = result;
    sub_1001156B4(0);
    return swift_unknownObjectRelease(v7);
  }
  return result;
}

id sub_10011DCC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for DataScannerViewController.ScanningUnavailable(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v11 = type metadata accessor for Logger(0);
  sub_10000F66C(v11, (uint64_t)qword_1002AA320);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13 = v12(v10, a1, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(8, -1);
    v27 = v2;
    v18 = (_QWORD *)v17;
    *(_DWORD *)v16 = 138412290;
    v26 = v16 + 4;
    v12(v8, (uint64_t)v10, v4);
    v19 = sub_10011E300(&qword_100293DE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DataScannerViewController.ScanningUnavailable, (uint64_t)&protocol conformance descriptor for DataScannerViewController.ScanningUnavailable);
    v20 = swift_allocError(v4, v19, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v21, v8, v4);
    v22 = _convertErrorToNSError(_:)(v20);
    swift_errorRelease(v20);
    v28 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v26);
    *v18 = v22;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "DataScanner became unavailable: %@", v16, 0xCu);
    v23 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v18, 1, v23);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  sub_100117094();
  return sub_10011B5A0();
}

uint64_t sub_10011DF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  char v8;
  char v9;
  int v10;
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[3];
  ValueMetadata *v28;
  unint64_t v29;

  v3 = type metadata accessor for DataScannerViewController.SceneStabilityState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100005DFC();
  if (!(_DWORD)result)
    return result;
  v28 = &type metadata for TranslateFeatures;
  v29 = sub_100009BC4();
  LOBYTE(v27[0]) = 1;
  v8 = isFeatureEnabled(_:)(v27);
  result = sub_100009C08(v27);
  if ((v8 & 1) == 0)
    return result;
  v28 = &type metadata for VisualIntelligenceFeatures;
  v29 = sub_10011E16C();
  v9 = isFeatureEnabled(_:)(v27);
  result = sub_100009C08(v27);
  if ((v9 & 1) == 0)
    return result;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v10 == enum case for DataScannerViewController.SceneStabilityState.unknown(_:)
    || v10 == enum case for DataScannerViewController.SceneStabilityState.low(_:))
  {
    UIViewController.contentUnavailableConfiguration.getter(v27);
    v12 = v28;
    result = sub_10000A020((uint64_t)v27, &qword_100293DF0);
    if (v12)
      return result;
    v13 = v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
    result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);
    if (!result)
      return result;
    v14 = result;
    v15 = *(_QWORD *)(v13 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 + 16) + 8))(0, 1, ObjectType);
    return swift_unknownObjectRelease(v14);
  }
  v17 = v10;
  v18 = enum case for DataScannerViewController.SceneStabilityState.medium(_:);
  v19 = enum case for DataScannerViewController.SceneStabilityState.high(_:);
  v20 = v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17SequoiaTranslator27CameraPreviewViewController_delegate);
  v14 = result;
  if (v17 == v18 || v17 == v19)
  {
    if (!result)
      return result;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = swift_getObjectType(result);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v22 + 16) + 16))(0, v23);
    return swift_unknownObjectRelease(v14);
  }
  if (result)
  {
    v24 = *(_QWORD *)(v20 + 8);
    v25 = swift_getObjectType(result);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v24 + 16) + 16))(0, v25);
    swift_unknownObjectRelease(v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10011E16C()
{
  unint64_t result;

  result = qword_100293DE8;
  if (!qword_100293DE8)
  {
    result = swift_getWitnessTable(&unk_1001EDCC4, &type metadata for VisualIntelligenceFeatures);
    atomic_store(result, (unint64_t *)&qword_100293DE8);
  }
  return result;
}

uint64_t sub_10011E1B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  v19 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 152);
  v21 = *(_QWORD *)(a1 + 168);
  v22 = *(_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 192);
  v24 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(_QWORD *)(a1 + 224);
  v9 = *(_QWORD *)(a1 + 232);
  v10 = *(_BYTE *)(a1 + 56);
  swift_retain(*(_QWORD *)(a1 + 32));
  swift_retain(v4);
  v11 = v2;
  swift_retain(v3);
  sub_1000E05CC(v5, v10);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v6);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v23);
  swift_retain(v24);
  return a1;
}

uint64_t sub_10011E300(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10011E340()
{
  unint64_t result;

  result = qword_100293E08;
  if (!qword_100293E08)
  {
    result = swift_getWitnessTable(&unk_1001F0924, &type metadata for CameraPreviewView);
    atomic_store(result, (unint64_t *)&qword_100293E08);
  }
  return result;
}

uint64_t sub_10011E38C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 176);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 200);
  v8 = *(_QWORD *)(a1 + 224);
  v22 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 216);
  v9 = *(_QWORD *)(a1 + 232);
  v10 = *(_BYTE *)(a1 + 56);
  swift_release(*(_QWORD *)(a1 + 40));

  swift_release(v3);
  swift_release(v4);
  sub_1000E05B8(v5, v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  swift_release(v19);
  swift_release(v20);
  swift_release(v21);
  swift_release(v22);
  swift_release(v23);
  return a1;
}

uint64_t sub_10011E4D8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10011E4FC(char *a1)
{
  uint64_t v1;

  sub_10011B51C(a1, v1);
}

void sub_10011E504(uint64_t a1)
{
  uint64_t v1;

  sub_10011B018(a1, v1);
}

uint64_t sub_10011E50C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10011E540(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100293E6C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_1001195BC(a1, v4, v5, v7, v6);
}

double sub_10011E5B8(uint64_t a1)
{
  uint64_t v1;

  return sub_10011C12C(a1, v1);
}

uint64_t sub_10011E5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011E5D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10011E5DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100293E8C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_10011C208(a1, v4, v5, v6);
}

uint64_t sub_10011E658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for LocalePair(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10011E6D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocalePair(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_100293E9C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_100117E60(a1, v5, v6, v7, v8);
}

void sub_10011E768()
{
  uint64_t v0;

  sub_100118D0C(v0);
}

uint64_t sub_10011E770()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10011E780()
{
  return sub_10011E8B0((void (*)(_QWORD))&_swift_release);
}

double sub_10011E78C()
{
  uint64_t *v0;

  return sub_100118DF4(v0[2], v0[3], v0[4]);
}

uint64_t sub_10011E798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_1002908A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10011E7E0(uint64_t a1)
{
  uint64_t v1;

  sub_1000ADD6C(a1, v1);
}

uint64_t sub_10011E7E8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10011E81C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_100293EAC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_100118EEC(a1, v4, v5, v6, v7, v8);
}

double sub_10011E89C(void *a1)
{
  uint64_t v1;

  return sub_100117654(a1, v1);
}

uint64_t sub_10011E8A4()
{
  return sub_10011E8B0((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_10011E8B0(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10011E8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100293EBC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10003EFA0;
  v3[5] = v2;
  return swift_task_switch(sub_100117840, 0, 0);
}

uint64_t sub_10011E940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028C0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10011E988(uint64_t a1)
{
  uint64_t v1;

  sub_100116F84(a1, v1);
}

uint64_t sub_10011E994(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100293F04);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_10011B788(a1, v4, v5, v6);
}

uint64_t sub_10011EA10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

double sub_10011EA20(uint64_t a1)
{
  uint64_t v1;

  return sub_100115A9C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_10011EA28()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10011EA4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_100293F14);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D380;
  return sub_100115B70(a1, v4, v5, v6);
}

uint64_t sub_10011EAD0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  double v19;

  v1 = (int *)type metadata accessor for LocalePairSpeakButtons(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(v0 + *(int *)(v2 + 48));
  v6 = *v5;
  v7 = v5[1];
  v18[1] = v6;
  v18[2] = v7;
  sub_100006DF4(&qword_10028B260);
  State.wrappedValue.getter(&v19);
  v8 = v19;
  v9 = *(double *)(v0 + v1[13]);
  sub_100120DB8(v0, (uint64_t)v4);
  if (v8 <= v9)
  {
    v11 = v1[8];
    v12 = *(int *)(type metadata accessor for SpeakButtonConfiguration(0) + 20);
    v13 = &v4[v11 + v12];
    v14 = &v4[v1[9] + v12];
    v15 = type metadata accessor for Locale(0);
    v16 = sub_100007D5C(&qword_10028DE18, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
    v10 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v14, v15, v16) ^ 1;
  }
  else
  {
    v10 = 0;
  }
  sub_100120DFC((uint64_t)v4);
  return v10 & 1;
}

uint64_t sub_10011EC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(char *, uint64_t);
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(v0 + *(int *)(type metadata accessor for LocalePairSpeakButtons(0) + 56));
  v6 = *v5;
  v24 = v5[1];
  v25 = v6;
  v7 = sub_100006DF4(&qword_10028AA70);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1001E4D60;
  v9 = type metadata accessor for SpeakButtonConfiguration(0);
  static Locale.current.getter(v9);
  v10 = Locale.sqDisplayName(context:in:)(1, v4);
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(v4, v1);
  if (!v12)
  {
    v10 = 0x4E574F4E4B4E55;
    v12 = 0xE700000000000000;
  }
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v14 = sub_10001244C();
  *(_QWORD *)(v8 + 64) = v14;
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v12;
  static Locale.current.getter(v14);
  v15 = Locale.sqDisplayName(context:in:)(1, v4);
  v17 = v16;
  v13(v4, v1);
  v18 = 0x4E574F4E4B4E55;
  if (v17)
    v18 = v15;
  v19 = 0xE700000000000000;
  if (v17)
    v19 = v17;
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v14;
  *(_QWORD *)(v8 + 72) = v18;
  *(_QWORD *)(v8 + 80) = v19;
  v26[0] = String.init(format:_:)(v25, v24, v8);
  v26[1] = v20;
  v21 = sub_10000B030();
  return Text.init<A>(_:)(v26, &type metadata for String, v21);
}

uint64_t sub_10011EDDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(char *, uint64_t);
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(v0 + *(int *)(type metadata accessor for LocalePairSpeakButtons(0) + 56));
  v6 = *v5;
  v24 = v5[1];
  v25 = v6;
  v7 = sub_100006DF4(&qword_10028AA70);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1001E4D60;
  v9 = type metadata accessor for SpeakButtonConfiguration(0);
  static Locale.current.getter(v9);
  v10 = Locale.sqDisplayName(context:in:)(1, v4);
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(v4, v1);
  if (!v12)
  {
    v10 = 0x4E574F4E4B4E55;
    v12 = 0xE700000000000000;
  }
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v14 = sub_10001244C();
  *(_QWORD *)(v8 + 64) = v14;
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v12;
  static Locale.current.getter(v14);
  v15 = Locale.sqDisplayName(context:in:)(1, v4);
  v17 = v16;
  v13(v4, v1);
  v18 = 0x4E574F4E4B4E55;
  if (v17)
    v18 = v15;
  v19 = 0xE700000000000000;
  if (v17)
    v19 = v17;
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v14;
  *(_QWORD *)(v8 + 72) = v18;
  *(_QWORD *)(v8 + 80) = v19;
  v26[0] = String.init(format:_:)(v25, v24, v8);
  v26[1] = v20;
  v21 = sub_10000B030();
  return Text.init<A>(_:)(v26, &type metadata for String, v21);
}

uint64_t sub_10011EFB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(char *, unsigned __int8 *, uint64_t);
  uint64_t v60;
  unsigned __int8 *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  id v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  void (*v120)(char *, char *, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  char *v142;
  void (*v143)(char *, uint64_t);
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD v154[13];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  _BYTE v173[88];
  uint64_t v174;
  Swift::String v175;

  v150 = a2;
  v148 = sub_100006DF4(&qword_100293FE0);
  v146 = *(_QWORD *)(v148 - 8);
  v3 = __chkstk_darwin(v148);
  v135 = (char *)&v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v134 = (char *)&v129 - v5;
  v6 = sub_100006DF4(&qword_100293FE8);
  v7 = __chkstk_darwin(v6);
  v149 = (uint64_t)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v147 = (char *)&v129 - v9;
  v10 = type metadata accessor for Locale(0);
  v140 = *(_QWORD *)(v10 - 8);
  v11 = v140;
  v12 = __chkstk_darwin(v10);
  v144 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v129 - v14;
  v133 = sub_100006DF4(&qword_100293FF0);
  v16 = __chkstk_darwin(v133);
  v145 = (uint64_t)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v132 = (char *)&v129 - v19;
  v20 = __chkstk_darwin(v18);
  v142 = (char *)&v129 - v21;
  __chkstk_darwin(v20);
  v153 = (uint64_t)&v129 - v22;
  v23 = type metadata accessor for LocalePairSpeakButtons(0);
  v152 = v23;
  v24 = (unsigned __int8 *)(a1 + *(int *)(v23 + 32));
  LODWORD(v138) = *v24;
  LODWORD(v137) = *(unsigned __int8 *)(a1 + 1);
  v25 = a1;
  v26 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
  v141 = &v24[v26[5]];
  static Locale.current.getter(v26);
  v27 = Locale.sqDisplayName(context:in:)(1, v15);
  v29 = v28;
  v143 = *(void (**)(char *, uint64_t))(v11 + 8);
  v143(v15, v10);
  v30 = 0x4E574F4E4B4E55;
  if (v29)
    v30 = v27;
  v136 = v30;
  if (v29)
    v31 = v29;
  else
    v31 = 0xE700000000000000;
  v139 = v25;
  v32 = sub_10011EAD0();
  v33 = v26;
  v151 = v26;
  v34 = v26[6];
  v35 = &v24[v26[7]];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  v38 = (uint64_t *)(v25 + *(int *)(v23 + 40));
  v40 = *v38;
  v39 = v38[1];
  v131 = v38;
  v41 = (uint64_t *)&v24[v33[8]];
  v42 = *v41;
  v43 = v41[1];
  v44 = &v24[v34];
  v45 = v10;
  v46 = *(_QWORD *)v44;
  v47 = *((_QWORD *)v44 + 1);
  LOBYTE(v167) = v138;
  *(_WORD *)((char *)&v167 + 1) = v137;
  *((_QWORD *)&v167 + 1) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v168 = v136;
  *((_QWORD *)&v168 + 1) = v31;
  v48 = v15;
  LOBYTE(v169) = v32 & 1;
  *((_QWORD *)&v169 + 1) = v37;
  *(_QWORD *)&v170 = v36;
  *((_QWORD *)&v170 + 1) = v40;
  *(_QWORD *)&v171 = v39;
  *((_QWORD *)&v171 + 1) = v42;
  *(_QWORD *)&v172 = v43;
  *((_QWORD *)&v172 + 1) = v46;
  *(_QWORD *)v173 = v47;
  memset(&v173[8], 0, 80);
  v174 = 0;
  v163 = *(_OWORD *)&v173[32];
  v164 = *(_OWORD *)&v173[48];
  v165 = *(_OWORD *)&v173[64];
  v166 = 0uLL;
  v159 = v171;
  v160 = v172;
  v161 = *(_OWORD *)v173;
  v162 = *(_OWORD *)&v173[16];
  v155 = v167;
  v156 = v168;
  v157 = v169;
  v158 = v170;
  swift_retain(v36);
  sub_100016244(v40, v39);
  sub_100016244(v42, v43);
  swift_bridgeObjectRetain(v47);
  v49 = v139;
  v50 = sub_10011EC08();
  v52 = v51;
  v54 = v53;
  v56 = v55 & 1;
  v57 = sub_1000B8464();
  v58 = (uint64_t)v142;
  v138 = v57;
  View.accessibility(hint:)(v50, v52, v56, v54, &type metadata for SpeakButton);
  sub_10001B9E8(v50, v52, v56);
  swift_bridgeObjectRelease(v54);
  sub_1000B867C((uint64_t)&v167);
  sub_1000110A4(v58, v153, &qword_100293FF0);
  v59 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v140 + 16);
  v59(v48, v141, v45);
  v60 = v49;
  v61 = (unsigned __int8 *)(v49 + *(int *)(v152 + 36));
  v62 = v144;
  v59(v144, &v61[v151[5]], v45);
  v63 = sub_100007D5C(&qword_10028DE18, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  LOBYTE(v59) = dispatch thunk of static Equatable.== infix(_:_:)(v48, v62, v45, v63);
  v64 = v62;
  v65 = v143;
  v143(v64, v45);
  v66 = v65;
  v65(v48, v45);
  if ((v59 & 1) != 0)
  {
    v67 = (uint64_t)v147;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v146 + 56))(v147, 1, 1, v148);
  }
  else
  {
    LODWORD(v144) = *v61;
    LODWORD(v142) = *(unsigned __int8 *)(v60 + 1);
    LODWORD(v141) = *(unsigned __int8 *)(v60 + 2);
    v68 = *(_QWORD *)(v60 + 8);
    swift_bridgeObjectRetain(v68);
    static Locale.current.getter(v69);
    v70 = Locale.sqDisplayName(context:in:)(1, v48);
    v72 = v71;
    v66(v48, v45);
    if (v72)
      v73 = v70;
    else
      v73 = 0x4E574F4E4B4E55;
    if (v72)
      v74 = v72;
    else
      v74 = 0xE700000000000000;
    v75 = sub_10011EAD0();
    v76 = v151[6];
    v77 = &v61[v151[7]];
    v79 = *(_QWORD *)v77;
    v78 = *((_QWORD *)v77 + 1);
    v81 = *v131;
    v80 = v131[1];
    v82 = (uint64_t *)&v61[v151[8]];
    v83 = (uint64_t *)v82[1];
    v130 = *v82;
    v131 = v83;
    v84 = &v61[v76];
    v85 = *(_QWORD *)&v61[v76];
    v86 = *((_QWORD *)v84 + 1);
    v87 = (uint64_t *)(v60 + *(int *)(v152 + 44));
    v88 = *v87;
    v89 = v87[1];
    v91 = v87[2];
    v90 = v87[3];
    v92 = (void (*)(char *, uint64_t))v87[5];
    v151 = (int *)v87[4];
    v152 = v88;
    v143 = v92;
    v93 = v87[7];
    v140 = v87[6];
    v136 = v90;
    v137 = v93;
    v94 = v87[8];
    v95 = (void *)v87[9];
    v96 = (void *)v87[10];
    LOBYTE(v155) = (_BYTE)v144;
    BYTE1(v155) = (_BYTE)v142;
    BYTE2(v155) = (_BYTE)v141;
    *((_QWORD *)&v155 + 1) = v68;
    *(_QWORD *)&v156 = v73;
    v97 = v91;
    *((_QWORD *)&v156 + 1) = v74;
    LOBYTE(v157) = v75 & 1;
    *((_QWORD *)&v157 + 1) = v79;
    *(_QWORD *)&v158 = v78;
    *((_QWORD *)&v158 + 1) = v81;
    *(_QWORD *)&v159 = v80;
    *((_QWORD *)&v159 + 1) = v130;
    *(_QWORD *)&v160 = v83;
    *((_QWORD *)&v160 + 1) = v85;
    *(_QWORD *)&v161 = v86;
    *((_QWORD *)&v161 + 1) = v88;
    *(_QWORD *)&v162 = v89;
    v98 = v89;
    v129 = v89;
    *((_QWORD *)&v162 + 1) = v91;
    *(_QWORD *)&v163 = v90;
    *((_QWORD *)&v163 + 1) = v151;
    *(_QWORD *)&v164 = v92;
    *((_QWORD *)&v164 + 1) = v140;
    *(_QWORD *)&v165 = v93;
    *((_QWORD *)&v165 + 1) = v94;
    v99 = v94;
    *(_QWORD *)&v166 = v95;
    *((_QWORD *)&v166 + 1) = v96;
    v154[8] = v163;
    v154[9] = v164;
    v154[10] = v165;
    v154[11] = v166;
    v154[4] = v159;
    v154[5] = v160;
    v154[6] = v161;
    v154[7] = v162;
    v154[0] = v155;
    v154[1] = v156;
    v154[2] = v157;
    v154[3] = v158;
    swift_retain(v78);
    swift_bridgeObjectRetain(v86);
    sub_100016244(v81, v80);
    sub_100016244(v130, (uint64_t)v131);
    v128 = v95;
    v100 = v136;
    v101 = v152;
    v152 = v97;
    sub_1000161E0(v101, v98, v97, v136, (uint64_t)v151, (uint64_t)v143, v140, v137, v99, v128, v96);
    v102 = sub_10011EDDC();
    v104 = v103;
    v106 = v105;
    LOBYTE(v86) = v107 & 1;
    v108 = v132;
    View.accessibility(hint:)(v102, v103, v107 & 1, v105, &type metadata for SpeakButton);
    sub_10001B9E8(v102, v104, v86);
    swift_bridgeObjectRelease(v106);
    sub_1000B867C((uint64_t)&v155);
    v109 = (uint64_t)v108;
    if (v129)
    {
      swift_bridgeObjectRetain(v100);
    }
    else
    {
      v110 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v175._object = (void *)0xE000000000000000;
      v111._countAndFlagsBits = 0x495645445F57454ELL;
      v111._object = (void *)0xEA00000000004543;
      v112._countAndFlagsBits = 0;
      v112._object = (void *)0xE000000000000000;
      v175._countAndFlagsBits = 0;
      v113 = NSLocalizedString(_:tableName:bundle:value:comment:)(v111, (Swift::String_optional)0, (NSBundle)v110, v112, v175);

      v152 = String.init(format:_:)(v113._countAndFlagsBits, v113._object, _swiftEmptyArrayStorage);
      v100 = v114;
      swift_bridgeObjectRelease(v113._object);
    }
    v67 = (uint64_t)v147;
    v115 = v148;
    v116 = v146;
    *(_QWORD *)&v154[0] = v152;
    *((_QWORD *)&v154[0] + 1) = v100;
    v117 = sub_100120D34();
    v118 = sub_100012490();
    v119 = v135;
    View.popoverTip<A>(_:arrowEdge:action:)(v154, 0, nullsub_1, 0, v133, &type metadata for AudioDeviceTip, v117, v118);
    swift_bridgeObjectRelease(v100);
    sub_10000A020(v109, &qword_100293FF0);
    v120 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
    v121 = v134;
    v120(v134, v119, v115);
    v120((char *)v67, v121, v115);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56))(v67, 0, 1, v115);
  }
  v122 = v153;
  v123 = v145;
  sub_10000B074(v153, v145, &qword_100293FF0);
  v124 = v149;
  sub_10000B074(v67, v149, &qword_100293FE8);
  v125 = v150;
  sub_10000B074(v123, v150, &qword_100293FF0);
  v126 = sub_100006DF4(&qword_100294000);
  sub_10000B074(v124, v125 + *(int *)(v126 + 48), &qword_100293FE8);
  sub_10000A020(v67, &qword_100293FE8);
  sub_10000A020(v122, &qword_100293FF0);
  sub_10000A020(v124, &qword_100293FE8);
  return sub_10000A020(v123, &qword_100293FF0);
}

void sub_10011F8E0(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11)
{
  int *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::String *v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  double v26;
  _QWORD v27[2];
  Swift::String v28;

  *(_BYTE *)a9 = a1;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 2) = a3;
  *(_QWORD *)(a9 + 8) = a4;
  v17 = (int *)type metadata accessor for LocalePairSpeakButtons(0);
  sub_10011FA8C(a5, a9 + v17[8]);
  sub_10011FA8C(a6, a9 + v17[9]);
  v18 = (_QWORD *)(a9 + v17[10]);
  *v18 = a7;
  v18[1] = a8;
  sub_1000110A4(a11, a9 + v17[11], &qword_10028AE38);
  v19 = (_QWORD *)(a9 + v17[12]);
  v26 = a10;
  State.init(wrappedValue:)(v27, &v26, &type metadata for CGFloat);
  v20 = v27[1];
  *v19 = v27[0];
  v19[1] = v20;
  *(_QWORD *)(a9 + v17[13]) = 0x4072000000000000;
  v21 = (Swift::String *)(a9 + v17[14]);
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v28._object = (void *)0xE000000000000000;
  v23._object = (void *)0x80000001001FDFB0;
  v23._countAndFlagsBits = 0xD000000000000017;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v28._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v28);

  *v21 = v25;
}

uint64_t type metadata accessor for LocalePairSpeakButtons(uint64_t a1)
{
  uint64_t result;

  result = qword_100293F78;
  if (!qword_100293F78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalePairSpeakButtons);
  return result;
}

uint64_t sub_10011FA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SpeakButtonConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10011FAD0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  unint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v31);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v6 = a2[1];
    *(_QWORD *)(a1 + 8) = v6;
    v7 = a3[8];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_BYTE *)(a1 + v7) = *((_BYTE *)a2 + v7);
    v10 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
    v11 = v10[5];
    v12 = v8 + v11;
    v13 = v9 + v11;
    v14 = type metadata accessor for Locale(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
    v16 = swift_bridgeObjectRetain(v6);
    v15(v12, v13, v14, v16);
    v17 = v10[6];
    v18 = (_QWORD *)(v8 + v17);
    v19 = (_QWORD *)(v9 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = v10[7];
    v22 = (_QWORD *)(v8 + v21);
    v23 = (_QWORD *)(v9 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v10[8];
    v26 = (__n128 *)(v8 + v25);
    v27 = (__n128 *)(v9 + v25);
    v28 = *(_QWORD *)(v9 + v25);
    swift_bridgeObjectRetain(v20);
    swift_retain(v24);
    if (v28)
    {
      v29 = v27->n128_u64[1];
      v26->n128_u64[0] = v28;
      v26->n128_u64[1] = v29;
      v30 = swift_retain(v29);
    }
    else
    {
      v30 = *v27;
      *v26 = *v27;
    }
    v32 = a3[9];
    v33 = (char *)v4 + v32;
    v34 = (uint64_t)a2 + v32;
    *((_BYTE *)v4 + v32) = *((_BYTE *)a2 + v32);
    v15((uint64_t)v4 + v32 + v10[5], (uint64_t)a2 + v32 + v10[5], v14, v30);
    v35 = v10[6];
    v36 = &v33[v35];
    v37 = (_QWORD *)(v34 + v35);
    v38 = v37[1];
    *(_QWORD *)v36 = *v37;
    *((_QWORD *)v36 + 1) = v38;
    v39 = v10[7];
    v40 = &v33[v39];
    v41 = (_QWORD *)(v34 + v39);
    v42 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v42;
    v43 = v10[8];
    v44 = &v33[v43];
    v45 = v34 + v43;
    v46 = *(_QWORD *)(v34 + v43);
    swift_bridgeObjectRetain(v38);
    swift_retain(v42);
    if (v46)
    {
      v47 = *(_QWORD *)(v45 + 8);
      *(_QWORD *)v44 = v46;
      *((_QWORD *)v44 + 1) = v47;
      swift_retain(v47);
    }
    else
    {
      *(_OWORD *)v44 = *(_OWORD *)v45;
    }
    v48 = a3[10];
    v49 = (_QWORD *)((char *)v4 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    if (*v50)
    {
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      swift_retain(v51);
    }
    else
    {
      *(_OWORD *)v49 = *(_OWORD *)v50;
    }
    v52 = a3[11];
    v53 = (char *)v4 + v52;
    v54 = (uint64_t)a2 + v52;
    v55 = *(_QWORD *)(v54 + 8);
    if (v55)
    {
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v55;
      v56 = *(_QWORD *)(v54 + 24);
      *((_QWORD *)v53 + 2) = *(_QWORD *)(v54 + 16);
      *((_QWORD *)v53 + 3) = v56;
      v57 = *(_QWORD *)(v54 + 40);
      *((_QWORD *)v53 + 4) = *(_QWORD *)(v54 + 32);
      *((_QWORD *)v53 + 5) = v57;
      *((_OWORD *)v53 + 3) = *(_OWORD *)(v54 + 48);
      v53[64] = *(_BYTE *)(v54 + 64);
      v58 = *(void **)(v54 + 72);
      v59 = *(void **)(v54 + 80);
      *((_QWORD *)v53 + 9) = v58;
      *((_QWORD *)v53 + 10) = v59;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v57);
      v60 = v58;
      v61 = v59;
    }
    else
    {
      v62 = *(_OWORD *)(v54 + 48);
      *((_OWORD *)v53 + 2) = *(_OWORD *)(v54 + 32);
      *((_OWORD *)v53 + 3) = v62;
      *((_OWORD *)v53 + 4) = *(_OWORD *)(v54 + 64);
      *((_QWORD *)v53 + 10) = *(_QWORD *)(v54 + 80);
      v63 = *(_OWORD *)(v54 + 16);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v63;
    }
    v64 = a3[12];
    v65 = a3[13];
    v66 = (_QWORD *)((char *)v4 + v64);
    v67 = (uint64_t *)((char *)a2 + v64);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    *(_QWORD *)((char *)v4 + v65) = *(uint64_t *)((char *)a2 + v65);
    v69 = a3[14];
    v70 = (_QWORD *)((char *)v4 + v69);
    v71 = (uint64_t *)((char *)a2 + v69);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    swift_retain(v68);
    swift_bridgeObjectRetain(v72);
  }
  return v4;
}

double sub_10011FD9C(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[8];
  v5 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
  v6 = v4 + v5[5];
  v7 = type metadata accessor for Locale(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[6] + 8));
  v9 = swift_release(*(_QWORD *)(v4 + v5[7] + 8));
  v10 = (_QWORD *)(v4 + v5[8]);
  if (*v10)
    v9 = swift_release(v10[1]);
  v11 = a1 + a2[9];
  ((void (*)(uint64_t, uint64_t, __n128))v8)(v11 + v5[5], v7, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + v5[6] + 8));
  swift_release(*(_QWORD *)(v11 + v5[7] + 8));
  v12 = (_QWORD *)(v11 + v5[8]);
  if (*v12)
    swift_release(v12[1]);
  v13 = (_QWORD *)(a1 + a2[10]);
  if (*v13)
    swift_release(v13[1]);
  v14 = a1 + a2[11];
  v15 = *(_QWORD *)(v14 + 8);
  if (v15)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 40));

  }
  swift_release(*(_QWORD *)(a1 + a2[12] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10011FF08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_BYTE *)(a1 + v6) = *(_BYTE *)(a2 + v6);
  v9 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
  v10 = v9[5];
  v11 = v7 + v10;
  v12 = v8 + v10;
  v13 = type metadata accessor for Locale(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
  v15 = swift_bridgeObjectRetain(v5);
  v14(v11, v12, v13, v15);
  v16 = v9[6];
  v17 = (_QWORD *)(v7 + v16);
  v18 = (_QWORD *)(v8 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v9[7];
  v21 = (_QWORD *)(v7 + v20);
  v22 = (_QWORD *)(v8 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v9[8];
  v25 = (__n128 *)(v7 + v24);
  v26 = (__n128 *)(v8 + v24);
  v27 = *(_QWORD *)(v8 + v24);
  swift_bridgeObjectRetain(v19);
  swift_retain(v23);
  if (v27)
  {
    v28 = v26->n128_u64[1];
    v25->n128_u64[0] = v27;
    v25->n128_u64[1] = v28;
    v29 = swift_retain(v28);
  }
  else
  {
    v29 = *v26;
    *v25 = *v26;
  }
  v30 = a3[9];
  v31 = a1 + v30;
  v32 = a2 + v30;
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v14(a1 + v30 + v9[5], a2 + v30 + v9[5], v13, v29);
  v33 = v9[6];
  v34 = (_QWORD *)(v31 + v33);
  v35 = (_QWORD *)(v32 + v33);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = v9[7];
  v38 = (_QWORD *)(v31 + v37);
  v39 = (_QWORD *)(v32 + v37);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = v9[8];
  v42 = (_QWORD *)(v31 + v41);
  v43 = (uint64_t *)(v32 + v41);
  v44 = *v43;
  swift_bridgeObjectRetain(v36);
  swift_retain(v40);
  if (v44)
  {
    v45 = v43[1];
    *v42 = v44;
    v42[1] = v45;
    swift_retain(v45);
  }
  else
  {
    *(_OWORD *)v42 = *(_OWORD *)v43;
  }
  v46 = a3[10];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (_QWORD *)(a2 + v46);
  if (*v48)
  {
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    swift_retain(v49);
  }
  else
  {
    *(_OWORD *)v47 = *(_OWORD *)v48;
  }
  v50 = a3[11];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = *(_QWORD *)(v52 + 8);
  if (v53)
  {
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *(_QWORD *)(v51 + 8) = v53;
    v54 = *(_QWORD *)(v52 + 24);
    *(_QWORD *)(v51 + 16) = *(_QWORD *)(v52 + 16);
    *(_QWORD *)(v51 + 24) = v54;
    v55 = *(_QWORD *)(v52 + 40);
    *(_QWORD *)(v51 + 32) = *(_QWORD *)(v52 + 32);
    *(_QWORD *)(v51 + 40) = v55;
    *(_OWORD *)(v51 + 48) = *(_OWORD *)(v52 + 48);
    *(_BYTE *)(v51 + 64) = *(_BYTE *)(v52 + 64);
    v56 = *(void **)(v52 + 72);
    v57 = *(void **)(v52 + 80);
    *(_QWORD *)(v51 + 72) = v56;
    *(_QWORD *)(v51 + 80) = v57;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    v58 = v56;
    v59 = v57;
  }
  else
  {
    v60 = *(_OWORD *)(v52 + 48);
    *(_OWORD *)(v51 + 32) = *(_OWORD *)(v52 + 32);
    *(_OWORD *)(v51 + 48) = v60;
    *(_OWORD *)(v51 + 64) = *(_OWORD *)(v52 + 64);
    *(_QWORD *)(v51 + 80) = *(_QWORD *)(v52 + 80);
    v61 = *(_OWORD *)(v52 + 16);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *(_OWORD *)(v51 + 16) = v61;
  }
  v62 = a3[12];
  v63 = a3[13];
  v64 = (_QWORD *)(a1 + v62);
  v65 = (_QWORD *)(a2 + v62);
  v66 = v65[1];
  *v64 = *v65;
  v64[1] = v66;
  *(_QWORD *)(a1 + v63) = *(_QWORD *)(a2 + v63);
  v67 = a3[14];
  v68 = (_QWORD *)(a1 + v67);
  v69 = (_QWORD *)(a2 + v67);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  swift_retain(v66);
  swift_bridgeObjectRetain(v70);
  return a1;
}

uint64_t sub_1001201A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  __n128 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for Locale(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  v17 = v11[6];
  v18 = (_QWORD *)(v9 + v17);
  v19 = (_QWORD *)(v10 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v11[7];
  v23 = (_QWORD *)(v9 + v22);
  v24 = (_QWORD *)(v10 + v22);
  v25 = v24[1];
  v26 = v23[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_retain(v25);
  swift_release(v26);
  v27 = v11[8];
  v28 = (__n128 *)(v9 + v27);
  v29 = (__n128 *)(v10 + v27);
  v30 = *(_QWORD *)(v9 + v27);
  v31 = *(_QWORD *)(v10 + v27);
  if (v30)
  {
    if (v31)
    {
      v32 = v29->n128_u64[1];
      v33 = v28->n128_u64[1];
      v28->n128_u64[0] = v31;
      v28->n128_u64[1] = v32;
      swift_retain(v32);
      v34 = swift_release(v33);
      goto LABEL_8;
    }
    swift_release(v28->n128_u64[1]);
  }
  else if (v31)
  {
    v35 = v29->n128_u64[1];
    v28->n128_u64[0] = v31;
    v28->n128_u64[1] = v35;
    v34 = swift_retain(v35);
    goto LABEL_8;
  }
  v34 = *v29;
  *v28 = *v29;
LABEL_8:
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = a2 + v36;
  *(_BYTE *)(a1 + v36) = *(_BYTE *)(a2 + v36);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v16)(a1 + v36 + v11[5], a2 + v36 + v11[5], v15, v34);
  v39 = v11[6];
  v40 = (_QWORD *)(v37 + v39);
  v41 = (_QWORD *)(v38 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = v11[7];
  v45 = (_QWORD *)(v37 + v44);
  v46 = (_QWORD *)(v38 + v44);
  v47 = v46[1];
  v48 = v45[1];
  *v45 = *v46;
  v45[1] = v47;
  swift_retain(v47);
  swift_release(v48);
  v49 = v11[8];
  v50 = (_QWORD *)(v37 + v49);
  v51 = v38 + v49;
  v52 = *(_QWORD *)(v37 + v49);
  v53 = *(_QWORD *)(v38 + v49);
  if (v52)
  {
    if (v53)
    {
      v54 = *(_QWORD *)(v51 + 8);
      v55 = v50[1];
      *v50 = v53;
      v50[1] = v54;
      swift_retain(v54);
      swift_release(v55);
      goto LABEL_15;
    }
    swift_release(v50[1]);
  }
  else if (v53)
  {
    v56 = *(_QWORD *)(v51 + 8);
    *v50 = v53;
    v50[1] = v56;
    swift_retain(v56);
    goto LABEL_15;
  }
  *(_OWORD *)v50 = *(_OWORD *)v51;
LABEL_15:
  v57 = a3[10];
  v58 = (_QWORD *)(a1 + v57);
  v59 = a2 + v57;
  v60 = *(_QWORD *)(a1 + v57);
  v61 = *(_QWORD *)(a2 + v57);
  if (v60)
  {
    if (v61)
    {
      v62 = *(_QWORD *)(v59 + 8);
      v63 = v58[1];
      *v58 = v61;
      v58[1] = v62;
      swift_retain(v62);
      swift_release(v63);
      goto LABEL_22;
    }
    swift_release(v58[1]);
  }
  else if (v61)
  {
    v64 = *(_QWORD *)(v59 + 8);
    *v58 = v61;
    v58[1] = v64;
    swift_retain(v64);
    goto LABEL_22;
  }
  *(_OWORD *)v58 = *(_OWORD *)v59;
LABEL_22:
  v65 = a3[11];
  v66 = a1 + v65;
  v67 = a2 + v65;
  v68 = *(_QWORD *)(a1 + v65 + 8);
  v69 = *(_QWORD *)(a2 + v65 + 8);
  if (v68)
  {
    if (v69)
    {
      *(_QWORD *)v66 = *(_QWORD *)v67;
      v70 = *(_QWORD *)(v67 + 8);
      *(_QWORD *)(v66 + 8) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease(v68);
      *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
      v71 = *(_QWORD *)(v67 + 24);
      v72 = *(_QWORD *)(v66 + 24);
      *(_QWORD *)(v66 + 24) = v71;
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRelease(v72);
      *(_QWORD *)(v66 + 32) = *(_QWORD *)(v67 + 32);
      v73 = *(_QWORD *)(v67 + 40);
      v74 = *(_QWORD *)(v66 + 40);
      *(_QWORD *)(v66 + 40) = v73;
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRelease(v74);
      *(_QWORD *)(v66 + 48) = *(_QWORD *)(v67 + 48);
      *(_QWORD *)(v66 + 56) = *(_QWORD *)(v67 + 56);
      *(_BYTE *)(v66 + 64) = *(_BYTE *)(v67 + 64);
      v75 = *(void **)(v67 + 72);
      v76 = *(void **)(v66 + 72);
      *(_QWORD *)(v66 + 72) = v75;
      v77 = v75;

      v78 = *(void **)(v67 + 80);
      v79 = *(void **)(v66 + 80);
      *(_QWORD *)(v66 + 80) = v78;
      v80 = v78;

    }
    else
    {
      sub_1000137F8(v66);
      v88 = *(_OWORD *)(v67 + 16);
      *(_OWORD *)v66 = *(_OWORD *)v67;
      *(_OWORD *)(v66 + 16) = v88;
      v90 = *(_OWORD *)(v67 + 48);
      v89 = *(_OWORD *)(v67 + 64);
      v91 = *(_OWORD *)(v67 + 32);
      *(_QWORD *)(v66 + 80) = *(_QWORD *)(v67 + 80);
      *(_OWORD *)(v66 + 48) = v90;
      *(_OWORD *)(v66 + 64) = v89;
      *(_OWORD *)(v66 + 32) = v91;
    }
  }
  else if (v69)
  {
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v81 = *(_QWORD *)(v67 + 8);
    *(_QWORD *)(v66 + 8) = v81;
    *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
    v82 = *(_QWORD *)(v67 + 24);
    *(_QWORD *)(v66 + 24) = v82;
    *(_QWORD *)(v66 + 32) = *(_QWORD *)(v67 + 32);
    v83 = *(_QWORD *)(v67 + 40);
    *(_QWORD *)(v66 + 40) = v83;
    *(_QWORD *)(v66 + 48) = *(_QWORD *)(v67 + 48);
    *(_QWORD *)(v66 + 56) = *(_QWORD *)(v67 + 56);
    *(_BYTE *)(v66 + 64) = *(_BYTE *)(v67 + 64);
    v84 = *(void **)(v67 + 72);
    *(_QWORD *)(v66 + 72) = v84;
    v85 = *(void **)(v67 + 80);
    *(_QWORD *)(v66 + 80) = v85;
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v83);
    v86 = v84;
    v87 = v85;
  }
  else
  {
    v92 = *(_OWORD *)(v67 + 16);
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *(_OWORD *)(v66 + 16) = v92;
    v93 = *(_OWORD *)(v67 + 32);
    v94 = *(_OWORD *)(v67 + 48);
    v95 = *(_OWORD *)(v67 + 64);
    *(_QWORD *)(v66 + 80) = *(_QWORD *)(v67 + 80);
    *(_OWORD *)(v66 + 48) = v94;
    *(_OWORD *)(v66 + 64) = v95;
    *(_OWORD *)(v66 + 32) = v93;
  }
  v96 = a3[12];
  v97 = (_QWORD *)(a1 + v96);
  v98 = (_QWORD *)(a2 + v96);
  *v97 = *v98;
  v99 = v97[1];
  v100 = v98[1];
  v97[1] = v100;
  swift_retain(v100);
  swift_release(v99);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v101 = a3[14];
  v102 = (_QWORD *)(a1 + v101);
  v103 = (_QWORD *)(a2 + v101);
  *v102 = *v103;
  v104 = v103[1];
  v105 = v102[1];
  v102[1] = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  return a1;
}

uint64_t sub_10012062C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_BYTE *)(a1 + v6) = *(_BYTE *)(a2 + v6);
  v9 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
  v10 = v9[5];
  v11 = v7 + v10;
  v12 = v8 + v10;
  v13 = type metadata accessor for Locale(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  *(_OWORD *)(v7 + v9[6]) = *(_OWORD *)(v8 + v9[6]);
  *(_OWORD *)(v7 + v9[7]) = *(_OWORD *)(v8 + v9[7]);
  v15 = v9[8];
  v16 = (_QWORD *)(v7 + v15);
  v17 = (uint64_t *)(v8 + v15);
  v18 = *v17;
  if (*v17)
  {
    v19 = v17[1];
    *v16 = v18;
    v16[1] = v19;
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  v14(a1 + v20 + v9[5], a2 + v20 + v9[5], v13);
  *(_OWORD *)(v21 + v9[6]) = *(_OWORD *)(v22 + v9[6]);
  *(_OWORD *)(v21 + v9[7]) = *(_OWORD *)(v22 + v9[7]);
  v23 = v9[8];
  v24 = (_QWORD *)(v21 + v23);
  v25 = (uint64_t *)(v22 + v23);
  v26 = *v25;
  if (*v25)
  {
    v27 = v25[1];
    *v24 = v26;
    v24[1] = v27;
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  v28 = a3[10];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v31 = *v30;
  if (*v30)
  {
    v32 = v30[1];
    *v29 = v31;
    v29[1] = v32;
  }
  else
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  v33 = a3[11];
  v34 = a3[12];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_QWORD *)(v35 + 80) = *(_QWORD *)(v36 + 80);
  v37 = *(_OWORD *)(v36 + 48);
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  *(_OWORD *)(v35 + 48) = v37;
  *(_OWORD *)(v35 + 64) = *(_OWORD *)(v36 + 64);
  v38 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v38;
  *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
  v39 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v39) = *(_OWORD *)(a2 + v39);
  return a1;
}

uint64_t sub_1001207F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for Locale(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v16 = v10[6];
  v17 = (_QWORD *)(v8 + v16);
  v18 = (uint64_t *)(v9 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = v10[7];
  v23 = *(_QWORD *)(v8 + v22 + 8);
  *(_OWORD *)(v8 + v22) = *(_OWORD *)(v9 + v22);
  v24 = swift_release(v23);
  v25 = v10[8];
  v26 = (__n128 *)(v8 + v25);
  v27 = (__n128 *)(v9 + v25);
  v28 = *(_QWORD *)(v8 + v25);
  v29 = *(_QWORD *)(v9 + v25);
  if (v28)
  {
    if (v29)
    {
      v30 = v27->n128_u64[1];
      v31 = v26->n128_u64[1];
      v26->n128_u64[0] = v29;
      v26->n128_u64[1] = v30;
      v24 = swift_release(v31);
      goto LABEL_8;
    }
    swift_release(v26->n128_u64[1]);
  }
  else if (v29)
  {
    v32 = v27->n128_u64[1];
    v26->n128_u64[0] = v29;
    v26->n128_u64[1] = v32;
    goto LABEL_8;
  }
  v24 = *v27;
  *v26 = *v27;
LABEL_8:
  v33 = a3[9];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v15)(a1 + v33 + v10[5], a2 + v33 + v10[5], v14, v24);
  v36 = v10[6];
  v37 = (_QWORD *)(v34 + v36);
  v38 = (uint64_t *)(v35 + v36);
  v40 = *v38;
  v39 = v38[1];
  v41 = v37[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  v42 = v10[7];
  v43 = *(_QWORD *)(v34 + v42 + 8);
  *(_OWORD *)(v34 + v42) = *(_OWORD *)(v35 + v42);
  swift_release(v43);
  v44 = v10[8];
  v45 = (_QWORD *)(v34 + v44);
  v46 = v35 + v44;
  v47 = *(_QWORD *)(v34 + v44);
  v48 = *(_QWORD *)(v35 + v44);
  if (v47)
  {
    if (v48)
    {
      v49 = *(_QWORD *)(v46 + 8);
      v50 = v45[1];
      *v45 = v48;
      v45[1] = v49;
      swift_release(v50);
      goto LABEL_15;
    }
    swift_release(v45[1]);
  }
  else if (v48)
  {
    v51 = *(_QWORD *)(v46 + 8);
    *v45 = v48;
    v45[1] = v51;
    goto LABEL_15;
  }
  *(_OWORD *)v45 = *(_OWORD *)v46;
LABEL_15:
  v52 = a3[10];
  v53 = (_QWORD *)(a1 + v52);
  v54 = a2 + v52;
  v55 = *(_QWORD *)(a1 + v52);
  v56 = *(_QWORD *)(a2 + v52);
  if (v55)
  {
    if (v56)
    {
      v57 = *(_QWORD *)(v54 + 8);
      v58 = v53[1];
      *v53 = v56;
      v53[1] = v57;
      swift_release(v58);
      goto LABEL_22;
    }
    swift_release(v53[1]);
  }
  else if (v56)
  {
    v59 = *(_QWORD *)(v54 + 8);
    *v53 = v56;
    v53[1] = v59;
    goto LABEL_22;
  }
  *(_OWORD *)v53 = *(_OWORD *)v54;
LABEL_22:
  v60 = a3[11];
  v61 = a1 + v60;
  v62 = a2 + v60;
  v63 = *(_QWORD *)(a1 + v60 + 8);
  if (!v63)
  {
LABEL_26:
    v71 = *(_OWORD *)(v62 + 48);
    *(_OWORD *)(v61 + 32) = *(_OWORD *)(v62 + 32);
    *(_OWORD *)(v61 + 48) = v71;
    *(_OWORD *)(v61 + 64) = *(_OWORD *)(v62 + 64);
    *(_QWORD *)(v61 + 80) = *(_QWORD *)(v62 + 80);
    v72 = *(_OWORD *)(v62 + 16);
    *(_OWORD *)v61 = *(_OWORD *)v62;
    *(_OWORD *)(v61 + 16) = v72;
    goto LABEL_27;
  }
  v64 = *(_QWORD *)(v62 + 8);
  if (!v64)
  {
    sub_1000137F8(v61);
    goto LABEL_26;
  }
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_QWORD *)(v61 + 8) = v64;
  swift_bridgeObjectRelease(v63);
  v65 = *(_QWORD *)(v62 + 24);
  v66 = *(_QWORD *)(v61 + 24);
  *(_QWORD *)(v61 + 16) = *(_QWORD *)(v62 + 16);
  *(_QWORD *)(v61 + 24) = v65;
  swift_bridgeObjectRelease(v66);
  v67 = *(_QWORD *)(v62 + 40);
  v68 = *(_QWORD *)(v61 + 40);
  *(_QWORD *)(v61 + 32) = *(_QWORD *)(v62 + 32);
  *(_QWORD *)(v61 + 40) = v67;
  swift_bridgeObjectRelease(v68);
  *(_OWORD *)(v61 + 48) = *(_OWORD *)(v62 + 48);
  *(_BYTE *)(v61 + 64) = *(_BYTE *)(v62 + 64);
  v69 = *(void **)(v61 + 72);
  *(_QWORD *)(v61 + 72) = *(_QWORD *)(v62 + 72);

  v70 = *(void **)(v61 + 80);
  *(_QWORD *)(v61 + 80) = *(_QWORD *)(v62 + 80);

LABEL_27:
  v73 = a3[12];
  v74 = (_QWORD *)(a1 + v73);
  v75 = (_QWORD *)(a2 + v73);
  *v74 = *v75;
  v76 = v74[1];
  v74[1] = v75[1];
  swift_release(v76);
  v77 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v78 = (_QWORD *)(a1 + v77);
  v79 = (uint64_t *)(a2 + v77);
  v81 = *v79;
  v80 = v79[1];
  v82 = v78[1];
  *v78 = v81;
  v78[1] = v80;
  swift_bridgeObjectRelease(v82);
  return a1;
}

uint64_t sub_100120B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100120B2C);
}

uint64_t sub_100120B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SpeakButtonConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100120BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100120BB4);
}

uint64_t sub_100120BB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SpeakButtonConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100120C28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char *v10;
  void *v11;

  v4[0] = &unk_1001F0BE8;
  v4[1] = &unk_1001F0BE8;
  v4[2] = &unk_1001F0BE8;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for SpeakButtonConfiguration(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_1001F0C00;
    v8 = &unk_1001F0C18;
    v9 = &unk_1001F0C00;
    v10 = (char *)&value witness table for Builtin.Int64 + 64;
    v11 = &unk_1001F0C30;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100120CDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002152E4, 1);
}

uint64_t sub_100120CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4030000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100006DF4(&qword_100293FD8);
  return sub_10011EFB0(v2, a2 + *(int *)(v4 + 44));
}

unint64_t sub_100120D34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100293FF8;
  if (!qword_100293FF8)
  {
    v1 = sub_1000070BC(&qword_100293FF0);
    sub_1000B8464();
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100293FF8);
  }
  return result;
}

uint64_t sub_100120DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalePairSpeakButtons(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100120DFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocalePairSpeakButtons(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100120E3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294008;
  if (!qword_100294008)
  {
    v1 = sub_1000070BC(&qword_100294010);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100294008);
  }
  return result;
}

uint64_t sub_100120E88(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA2D8, 0x636566694C707041, 0xEC000000656C6379);
}

uint64_t sub_100120EB0(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA2F0, 0x756F526F69647541, 0xEC000000676E6974);
}

uint64_t sub_100120ED8(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA308, 0x73616364616F7242, 0xED000065646F4D74);
}

uint64_t sub_100120F04(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA320, 0x6172656D6143, 0xE600000000000000);
}

uint64_t sub_100120F20(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA338, 0x61737265766E6F43, 0xEC0000006E6F6974);
}

uint64_t sub_100120F48(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA350, 0x7372655061746144, 0xEF65636E65747369);
}

uint64_t sub_100120F74(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA368, 0x616E6F6974636944, 0xEC00000073656972);
}

uint64_t sub_100120F9C(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA380, 0x6769626D61736944, 0xEE006E6F69746175);
}

uint64_t sub_100120FC8(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA398, 0x657469726F766146, 0xE900000000000073);
}

uint64_t sub_100120FEC(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA3B0, 4475212, 0xE300000000000000);
}

uint64_t sub_100121004(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA3C8, 0x697463416576694CLL, 0xEC00000079746976);
}

uint64_t sub_10012102C(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA3E0, 0x696472616F626E4FLL, 0xEA0000000000676ELL);
}

uint64_t sub_100121050(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA3F8, 0xD000000000000012, 0x80000001001FE030);
}

uint64_t sub_100121074(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA410, 0x656C626269726353, 0xE800000000000000);
}

uint64_t sub_100121094(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA428, 0xD000000000000012, 0x80000001001FDFF0);
}

uint64_t sub_1001210B8(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA440, 0x686365657053, 0xE600000000000000);
}

uint64_t sub_1001210D4(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA458, 0x6E696D6165727453, 0xED00007478655467);
}

uint64_t sub_100121100(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA470, 0x74616C736E617254, 0xEF647261436E6F69);
}

uint64_t sub_10012112C(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA488, 0xD000000000000011, 0x80000001001FE010);
}

uint64_t sub_100121150(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA4A0, 5461076, 0xE300000000000000);
}

uint64_t sub_100121168(uint64_t a1)
{
  return sub_100121194(a1, qword_1002AA4B8, 0x65746E4972657355, 0xEF6E6F6974636172);
}

uint64_t sub_100121194(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_100011A00(v7, a2);
  sub_10000F66C(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000015, 0x80000001001FDFD0, a3, a4);
}

_QWORD *sub_100121208(uint64_t a1)
{
  return sub_100121230(a1, &qword_100294070, DUDefinitionDictionary_ptr);
}

_QWORD *sub_10012121C(uint64_t a1)
{
  return sub_100121230(a1, (unint64_t *)&qword_10028B088, UICollectionViewLayoutAttributes_ptr);
}

_QWORD *sub_100121230(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  _BYTE v15[32];
  _QWORD *v16;

  v16 = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v6);
  if (!v6)
    return v16;
  for (i = a1 + 32; ; i += 32)
  {
    sub_10000A0EC(i, (uint64_t)v15);
    v8 = sub_10000A05C(0, a2, a3);
    v9 = swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v8, 6);
    if (!(_DWORD)v9)
      break;
    v10 = v14;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v11 = v16[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
    v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
    specialized ContiguousArray._endMutation()(v12);
    if (!--v6)
      return v16;
  }
  v14 = 0;
  swift_release(v16);

  return 0;
}

_QWORD *sub_100121340(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  char *v24;
  _BYTE v25[40];
  _QWORD *v26;

  v2 = sub_100006DF4(&qword_100294078);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StoredTranslationAlternative(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  v26 = _swiftEmptyArrayStorage;
  sub_1001DA35C(0, v12, 0);
  if (!v12)
    return v26;
  v13 = a1 + 32;
  v24 = v9;
  while (1)
  {
    sub_100023AB0(v13, (uint64_t)v25);
    v14 = sub_100006DF4(&qword_100294080);
    v15 = swift_dynamicCast(v4, v25, v14, v5, 6);
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    if (!v15)
      break;
    v16(v4, 0, 1, v5);
    v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v17(v11, v4, v5);
    v17(v9, v11, v5);
    v18 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
    {
      sub_1001DA35C(0, v18[2] + 1, 1);
      v18 = v26;
    }
    v20 = v18[2];
    v19 = v18[3];
    if (v20 >= v19 >> 1)
    {
      sub_1001DA35C(v19 > 1, v20 + 1, 1);
      v18 = v26;
    }
    v18[2] = v20 + 1;
    v21 = (unint64_t)v18
        + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
        + *(_QWORD *)(v6 + 72) * v20;
    v9 = v24;
    v17((char *)v21, v24, v5);
    v26 = v18;
    v13 += 40;
    if (!--v12)
      return v18;
  }
  v16(v4, 1, 1, v5);
  swift_release(v26);
  sub_100122230((uint64_t)v4);
  return 0;
}

void _LTCombinedTranslationResult.locale.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "localePair");
  v2 = objc_msgSend(v1, "targetLocale");

  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v2);
}

BOOL _LTCombinedTranslationResult.isOffline.getter()
{
  void *v0;

  return objc_msgSend(v0, "route") == (id)1;
}

_QWORD *_LTCombinedTranslationResult.alternatives.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;

  v1 = v0;
  v2 = type metadata accessor for StoredTranslationAlternative(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v0, "paragraphResults");
  v7 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
    goto LABEL_14;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v8);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v37 = v1;
    v38 = v5;
    v39 = v3;
    v40 = v2;
    v1 = (void *)(v8 & 0xC000000000000001);
    v2 = 4;
    v5 = (char *)&protocol conformance descriptor for _LTTranslationResult;
    while (1)
    {
      v10 = v1 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2 - 4, v8) : *(id *)(v8 + 8 * v2);
      v11 = v10;
      v3 = v2 - 3;
      if (__OFADD__(v2 - 4, 1))
        break;
      v41 = v10;
      v12 = sub_100065E60((unint64_t *)&qword_10028F188, &qword_10028F180, _LTTranslationResult_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationResult);
      if ((TranslationResult.isLowConfidence.getter(v7, v12) & 1) != 0)
      {
        v13 = 1;
        goto LABEL_12;
      }

      ++v2;
      if (v3 == v9)
      {
        v13 = 0;
        v11 = 0;
LABEL_12:
        v3 = v39;
        v2 = v40;
        v1 = v37;
        v5 = v38;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_14:
    if (v8 < 0)
      v14 = v8;
    else
      v14 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
  }
  v13 = 0;
  v11 = 0;
LABEL_19:
  swift_bridgeObjectRelease_n(v8, 2);

  v15 = objc_msgSend(v1, "disambiguableResult");
  if (v15)
  {
    v16 = v15;
    if (objc_msgSend(v15, "hasDisambiguations"))
    {
      if (qword_10028A428 != -1)
        swift_once(&qword_10028A428, sub_100120F9C);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10000F66C(v17, (uint64_t)qword_1002AA380);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
          v21,
          2u);
        swift_slowDealloc(v21, -1, -1);
      }

      if ((v13 & 1) == 0)
      {

        return _swiftEmptyArrayStorage;
      }
    }

  }
  v22 = objc_msgSend(v1, "translatedText");
  v23 = objc_msgSend(v22, "string");

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = objc_msgSend(v1, "romanization");
  if (v27)
  {
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v31 = v30;

  }
  else
  {
    v29 = 0;
    v31 = 0;
  }
  StoredTranslationAlternative.init(text:romanization:lowConfidence:)(v24, v26, v29, v31, v13);
  v32 = sub_100006DF4(&qword_100294018);
  v33 = swift_allocObject(v32, 72, 7);
  *(_OWORD *)(v33 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v33 + 56) = v2;
  *(_QWORD *)(v33 + 64) = sub_100007D5C(&qword_100294020, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationAlternative, (uint64_t)&protocol conformance descriptor for StoredTranslationAlternative);
  v34 = sub_1000122F8((_QWORD *)(v33 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v3 + 32))(v34, v5, v2);
  return (_QWORD *)v33;
}

void _LTCombinedTranslationResult.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  _BOOL8 v29;
  void (*v30)(char *, _QWORD, uint64_t);
  char *v31;
  id v32;
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint8_t *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  _QWORD *v66;

  v58 = type metadata accessor for StoredDisambiguableResult(0);
  v55 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v57 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for StoredTranslationResult.CodingKeys(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v54 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v56 = (char *)&v54 - v8;
  v9 = __chkstk_darwin(v7);
  v60 = (char *)&v54 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v54 - v11;
  v13 = type metadata accessor for Locale(0);
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_100294028);
  v61 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v19 = a1[4];
  sub_100023AF4(a1, v20);
  v21 = sub_100007D5C(&qword_100294030, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult.CodingKeys, (uint64_t)&protocol conformance descriptor for StoredTranslationResult.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v3, v3, v21, v20, v19);
  v22 = objc_msgSend(v65, "localePair");
  v23 = objc_msgSend(v22, "targetLocale");

  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v59 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v59(v12, enum case for StoredTranslationResult.CodingKeys.locale(_:), v3);
  sub_100007D5C(&qword_100294038, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  v24 = v64;
  v25 = v63;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v12, v16);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v15, v25);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v18, v16);
  }
  else
  {
    v26 = v12;
    v27 = *(void (**)(char *, uint64_t))(v4 + 8);
    v27(v26, v3);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v15, v25);
    v28 = v65;
    v29 = objc_msgSend(v65, "route") == (id)1;
    v30 = v59;
    v31 = v60;
    v59(v60, enum case for StoredTranslationResult.CodingKeys.isOffline(_:), v3);
    KeyedEncodingContainer.encode(_:forKey:)(v29, v31, v16);
    v63 = v16;
    v64 = 0;
    v27(v31, v3);
    v32 = objc_msgSend(v28, "disambiguableResult");
    if (v32)
    {
      v65 = v27;
      v33 = v32;
      v34 = v57;
      StoredDisambiguableResult.init(_:)();
      v35 = v56;
      v30(v56, enum case for StoredTranslationResult.CodingKeys.storedDisambiguableResult(_:), v3);
      sub_100007D5C(&qword_100294058, (uint64_t (*)(uint64_t))&type metadata accessor for StoredDisambiguableResult, (uint64_t)&protocol conformance descriptor for StoredDisambiguableResult);
      v36 = v63;
      v37 = v58;
      KeyedEncodingContainer.encode<A>(_:forKey:)(v34, v35, v63);

      v65(v35, v3);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v37);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v18, v36);
    }
    else
    {
      v38 = _LTCombinedTranslationResult.alternatives.getter();
      v39 = sub_100121340((uint64_t)v38);
      swift_bridgeObjectRelease(v38);
      if (v39)
      {
        v65 = v27;
        if (qword_10028A428 != -1)
          swift_once(&qword_10028A428, sub_100120F9C);
        v40 = type metadata accessor for Logger(0);
        v41 = sub_10000F66C(v40, (uint64_t)qword_1002AA380);
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v44 = 0;
          swift_slowDealloc(v44, -1, -1);
        }

        v66 = v39;
        v45 = v54;
        v30(v54, enum case for StoredTranslationResult.CodingKeys.alternatives(_:), v3);
        sub_100006DF4(&qword_100294040);
        sub_100122180();
        v46 = v63;
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v66, v45, v63);
        v65(v45, v3);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v18, v46);
        swift_bridgeObjectRelease(v39);
      }
      else
      {
        if (qword_10028A428 != -1)
          swift_once(&qword_10028A428, sub_100120F9C);
        v47 = type metadata accessor for Logger(0);
        v48 = sub_10000F66C(v47, (uint64_t)qword_1002AA380);
        v49 = Logger.logObject.getter(v48);
        v50 = static os_log_type_t.fault.getter(v49);
        v51 = os_log_type_enabled(v49, v50);
        v52 = v61;
        if (v51)
        {
          v53 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "No result being encoded: no disambigaution and no alternatives", v53, 2u);
          swift_slowDealloc(v53, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v52 + 8))(v18, v63);
      }
    }
  }
}

void sub_100122068()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, "localePair");
  v2 = objc_msgSend(v1, "targetLocale");

  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v2);
}

_QWORD *sub_1001220D4()
{
  return _LTCombinedTranslationResult.alternatives.getter();
}

BOOL sub_1001220F4()
{
  id *v0;

  return objc_msgSend(*v0, "route") == (id)1;
}

id sub_10012211C()
{
  id *v0;

  return objc_msgSend(*v0, "isFinal");
}

id sub_10012213C()
{
  id *v0;

  return objc_msgSend(*v0, "disambiguableResult");
}

void sub_100122160(_QWORD *a1)
{
  _LTCombinedTranslationResult.encode(to:)(a1);
}

unint64_t sub_100122180()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294048;
  if (!qword_100294048)
  {
    v1 = sub_1000070BC(&qword_100294040);
    sub_100007D5C(&qword_100294050, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationAlternative, (uint64_t)&protocol conformance descriptor for StoredTranslationAlternative);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100294048);
  }
  return result;
}

uint64_t sub_1001221FC()
{
  return sub_100065E60(&qword_100294060, &qword_100294068, _LTCombinedTranslationResult_ptr, (uint64_t)&protocol conformance descriptor for _LTCombinedTranslationResult);
}

uint64_t sub_100122230(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_100294078);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _LTSpeechRecognitionResult.formattedString.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "bestTranscription");
  v2 = objc_msgSend(v1, "formattedString");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

void _LTSpeechRecognitionTokensAlternative.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_100006DF4(&qword_100294088);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v9);
  v11 = sub_100122484();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON_2, &_s10CodingKeysON_2, v11, v9, v10);
  v12 = objc_msgSend(v3, "isLowConfidence");
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v13 = objc_msgSend(v3, "hasSpaceAfter");
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v20, v5);
    v14 = objc_msgSend(v3, "text");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v17, &v19, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v17);
  }
}

unint64_t sub_100122484()
{
  unint64_t result;

  result = qword_100294090;
  if (!qword_100294090)
  {
    result = swift_getWitnessTable(&unk_1001F1540, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_100294090);
  }
  return result;
}

uint64_t sub_1001224C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D4A88(*a1, *a2);
}

Swift::Int sub_1001224D4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xED00007265746641;
  v3 = 0x6563617053736168;
  if (v1 != 1)
  {
    v3 = 1954047348;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E6F43776F4C7369;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEF65636E65646966;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100122584(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xED00007265746641;
  v3 = 0x6563617053736168;
  if (*v1 != 1)
  {
    v3 = 1954047348;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E6F43776F4C7369;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEF65636E65646966;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100122610(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xED00007265746641;
  v4 = 0x6563617053736168;
  if (v2 != 1)
  {
    v4 = 1954047348;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E6F43776F4C7369;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEF65636E65646966;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1001226BC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100124BE8(*a1);
  *a2 = result;
  return result;
}

void sub_1001226E8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEF65636E65646966;
  v4 = 0xED00007265746641;
  v5 = 0x6563617053736168;
  if (v2 != 1)
  {
    v5 = 1954047348;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E6F43776F4C7369;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100122758()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6563617053736168;
  if (*v0 != 1)
    v1 = 1954047348;
  if (*v0)
    return v1;
  else
    return 0x6E6F43776F4C7369;
}

unint64_t sub_1001227C4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100124BE8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001227E8()
{
  return 0;
}

void sub_1001227F4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100122800(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100122484();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100122828(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100122484();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_100122850()
{
  id *v0;

  return objc_msgSend(*v0, "isLowConfidence");
}

id sub_100122870()
{
  id *v0;

  return objc_msgSend(*v0, "hasSpaceAfter");
}

uint64_t sub_100122890()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, "text");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void sub_1001228E4(_QWORD *a1)
{
  _LTSpeechRecognitionTokensAlternative.encode(to:)(a1);
}

id _LTSpeechRecognitionBin.bestAlternative.getter()
{
  void *v0;

  return objc_msgSend(v0, "bestAlternativeIndex");
}

uint64_t _LTSpeechRecognitionBin.tokenAlternatives.getter()
{
  return sub_100122F50((SEL *)&selRef_alternatives, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr, sub_1001250D8);
}

uint64_t _LTSpeechRecognitionBin.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  __n128 v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  v3 = v1;
  v5 = sub_100006DF4(&qword_1002940A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v9);
  v11 = sub_100122AC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON_1, &_s10CodingKeysON_1, v11, v9, v10);
  v12 = objc_msgSend(v3, "bestAlternativeIndex");
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    v14 = objc_msgSend(v3, "alternatives");
    v15 = sub_10000A05C(0, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    v20 = v16;
    v19 = 1;
    sub_100006DF4(&qword_1002940B0);
    sub_100122B0C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5);
    v13 = swift_bridgeObjectRelease(v16);
  }
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v13);
}

unint64_t sub_100122AC8()
{
  unint64_t result;

  result = qword_1002940A8;
  if (!qword_1002940A8)
  {
    result = swift_getWitnessTable(&unk_1001F14F0, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1002940A8);
  }
  return result;
}

unint64_t sub_100122B0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002940B8;
  if (!qword_1002940B8)
  {
    v1 = sub_1000070BC(&qword_1002940B0);
    sub_100065E60(&qword_1002940C0, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionTokensAlternative);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002940B8);
  }
  return result;
}

uint64_t sub_100122B90(char *a1, char *a2)
{
  return sub_1001D4FD0(*a1, *a2);
}

Swift::Int sub_100122B9C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0xD000000000000011;
  else
    v2 = 0x65746C4174736562;
  if (v1)
    v3 = 0x80000001001F7E00;
  else
    v3 = 0xEF65766974616E72;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100122C2C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000011;
  else
    v2 = 0x65746C4174736562;
  if (*v1)
    v3 = 0x80000001001F7E00;
  else
    v3 = 0xEF65766974616E72;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100122C98(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0xD000000000000011;
  else
    v3 = 0x65746C4174736562;
  if (v2)
    v4 = 0x80000001001F7E00;
  else
    v4 = 0xEF65766974616E72;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100122D24@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262318, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100122D80(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x65746C4174736562;
  if (*v1)
    v2 = 0xD000000000000011;
  v3 = 0x80000001001F7E00;
  if (!*v1)
    v3 = 0xEF65766974616E72;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100122DD0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x65746C4174736562;
}

uint64_t sub_100122E1C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262318, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100122E7C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100122E88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100122AC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100122EB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100122AC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_100122ED8()
{
  id *v0;

  return objc_msgSend(*v0, "bestAlternativeIndex");
}

uint64_t sub_100122EE8(uint64_t a1, uint64_t a2)
{
  return sub_10012340C(a1, a2, (SEL *)&selRef_alternatives, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr, sub_1001250D8);
}

uint64_t sub_100122F0C(_QWORD *a1)
{
  return _LTSpeechRecognitionBin.encode(to:)(a1);
}

uint64_t _LTSpeechRecognitionSausage.tokenBins.getter()
{
  return sub_100122F50((SEL *)&selRef_bins, &qword_1002940C8, _LTSpeechRecognitionBin_ptr, sub_100124EA8);
}

uint64_t sub_100122F50(SEL *a1, unint64_t *a2, _QWORD *a3, uint64_t (*a4)(uint64_t))
{
  void *v4;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = objc_msgSend(v4, *a1);
  v9 = sub_10000A05C(0, a2, a3);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  v11 = a4(v10);
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t _LTSpeechRecognitionSausage.encode(to:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_100006DF4(&qword_1002940D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100023AF4(a1, v8);
  v10 = sub_100123124();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON_0, &_s10CodingKeysON_0, v10, v8, v9);
  v11 = objc_msgSend(v2, "bins");
  v12 = sub_10000A05C(0, &qword_1002940C8, _LTSpeechRecognitionBin_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  v18 = v13;
  sub_100006DF4(&qword_1002940E0);
  sub_100123168();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, v14, v4);
  v15 = swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v15);
}

unint64_t sub_100123124()
{
  unint64_t result;

  result = qword_1002940D8;
  if (!qword_1002940D8)
  {
    result = swift_getWitnessTable(&unk_1001F14A0, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1002940D8);
  }
  return result;
}

unint64_t sub_100123168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002940E8;
  if (!qword_1002940E8)
  {
    v1 = sub_1000070BC(&qword_1002940E0);
    sub_100065E60(&qword_1002940F0, &qword_1002940C8, _LTSpeechRecognitionBin_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionBin);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002940E8);
  }
  return result;
}

Swift::Int sub_1001231EC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x6E69426E656B6F74, 0xE900000000000073);
  return Hasher._finalize()();
}

uint64_t sub_100123240(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6E69426E656B6F74, 0xE900000000000073);
}

Swift::Int sub_10012325C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x6E69426E656B6F74, 0xE900000000000073);
  return Hasher._finalize()();
}

uint64_t sub_1001232AC@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262368, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1001232FC(_QWORD *a1@<X8>)
{
  *a1 = 0x6E69426E656B6F74;
  a1[1] = 0xE900000000000073;
}

uint64_t sub_10012331C()
{
  return 0x6E69426E656B6F74;
}

uint64_t sub_100123338@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002623A0, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

void sub_10012338C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100123398(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100123124();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001233C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100123124();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001233E8(uint64_t a1, uint64_t a2)
{
  return sub_10012340C(a1, a2, (SEL *)&selRef_bins, &qword_1002940C8, _LTSpeechRecognitionBin_ptr, sub_100124EA8);
}

uint64_t sub_10012340C(uint64_t a1, uint64_t a2, SEL *a3, unint64_t *a4, _QWORD *a5, uint64_t (*a6)(uint64_t))
{
  id *v6;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = objc_msgSend(*v6, *a3);
  v11 = sub_10000A05C(0, a4, a5);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  v13 = a6(v12);
  swift_bridgeObjectRelease(v12);
  return v13;
}

uint64_t sub_10012348C(_QWORD *a1)
{
  return _LTSpeechRecognitionSausage.encode(to:)(a1);
}

id _LTSpeechRecognitionResult.isLowConfidence.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "bestTranscription");
  v2 = objc_msgSend(v1, "isLowConfidence");

  return v2;
}

uint64_t _LTSpeechRecognitionResult.sanitizedFormattedString.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "bestTranscription");
  v2 = objc_msgSend(v1, "sanitizedFormattedString");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

Swift::Bool __swiftcall _LTSpeechRecognitionResult.isEmpty()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v0 = sub_10000A05C(0, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr);
  v1 = sub_100065E60(&qword_1002940F8, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
  v2 = AnnotatedResult.displayString.getter(v0, v1);
  v4 = v3;
  swift_bridgeObjectRelease(v3);
  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  return v5 == 0;
}

void _LTSpeechRecognitionResult.sentenceConfidence.getter()
{
  void *v0;
  id v1;
  double v2;
  double v3;

  v1 = objc_msgSend(v0, "bestTranscription");
  objc_msgSend(v1, "confidence");
  v3 = v2;

  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= 9.22337204e18)
LABEL_7:
    __break(1u);
}

uint64_t _LTSpeechRecognitionResult.alternatives.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(v1, "bestRecognitionAlternatives");
  a1[3] = sub_10000A05C(0, &qword_100294100, _LTSpeechRecognitionSausage_ptr);
  result = sub_100065E60(&qword_100294108, &qword_100294100, _LTSpeechRecognitionSausage_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionSausage);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t _LTSpeechRecognitionResult.origin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for SpeechResultOrigin.voice(_:);
  v3 = type metadata accessor for SpeechResultOrigin(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

void _LTSpeechRecognitionResult.encode(to:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char *v33;
  id v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD v50[2];

  v2 = v1;
  v4 = type metadata accessor for SpeechResultOrigin(0);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  __chkstk_darwin(v4);
  v43 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100294110);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100023AF4(a1, v13);
  v15 = sub_100123CB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON, &_s10CodingKeysON, v15, v13, v14);
  v16 = v2;
  v17 = objc_msgSend(v2, "bestTranscription");
  v18 = objc_msgSend(v17, "isLowConfidence");

  LOBYTE(v50[0]) = 3;
  v19 = v48;
  KeyedEncodingContainer.encode(_:forKey:)(v18, v50, v9);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return;
  }
  v42 = v8;
  v20 = v47;
  v48 = v10;
  v21 = objc_msgSend(v16, "bestTranscription");
  v22 = objc_msgSend(v21, "formattedString");

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  LOBYTE(v50[0]) = 5;
  KeyedEncodingContainer.encode(_:forKey:)(v23, v25, v50, v9);
  v26 = v16;
  v27 = objc_msgSend(v16, "bestTranscription", swift_bridgeObjectRelease(v25).n128_f64[0]);
  v28 = objc_msgSend(v27, "sanitizedFormattedString");

  if (v28)
  {
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

  }
  else
  {
    v29 = 0;
    v31 = 0;
  }
  v50[0] = v29;
  v50[1] = v31;
  v49 = 4;
  sub_100006DF4(&qword_10028D160);
  sub_100123CF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v50, &v49, v9);
  v32 = objc_msgSend(v16, "locale", swift_bridgeObjectRelease(v31).n128_f64[0]);
  v33 = v42;
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v32);

  LOBYTE(v50[0]) = 2;
  sub_100007D5C(&qword_100294038, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v33, v50, v9);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v20);
  v34 = objc_msgSend(v16, "bestTranscription");
  objc_msgSend(v34, "confidence");
  v36 = v35;

  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v37 = v45;
  if (v36 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v39 = v43;
  v38 = v44;
  v40 = v48;
  if (v36 < 9.22337204e18)
  {
    LOBYTE(v50[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)((uint64_t)v36, v50, v9);
    v41 = objc_msgSend(v26, "isFinal");
    LOBYTE(v50[0]) = 0;
    KeyedEncodingContainer.encode(_:forKey:)(v41, v50, v9);
    (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v39, enum case for SpeechResultOrigin.voice(_:), v37);
    LOBYTE(v50[0]) = 6;
    sub_100007D5C(&qword_100294128, (uint64_t (*)(uint64_t))&type metadata accessor for SpeechResultOrigin, (uint64_t)&protocol conformance descriptor for SpeechResultOrigin);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v39, v50, v9);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v9);
    return;
  }
LABEL_12:
  __break(1u);
}

unint64_t sub_100123CB4()
{
  unint64_t result;

  result = qword_100294118;
  if (!qword_100294118)
  {
    result = swift_getWitnessTable(&unk_1001F1450, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100294118);
  }
  return result;
}

unint64_t sub_100123CF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294120;
  if (!qword_100294120)
  {
    v1 = sub_1000070BC(&qword_10028D160);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100294120);
  }
  return result;
}

uint64_t sub_100123D54()
{
  return sub_100065E60(&qword_1002940C0, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionTokensAlternative);
}

uint64_t sub_100123D88()
{
  return sub_100065E60(&qword_1002940F0, &qword_1002940C8, _LTSpeechRecognitionBin_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionBin);
}

uint64_t sub_100123DBC()
{
  return sub_100065E60(&qword_100294130, &qword_100294100, _LTSpeechRecognitionSausage_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionSausage);
}

uint64_t sub_100123DF0()
{
  return sub_100065E60(&qword_100294138, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
}

uint64_t sub_100123E24()
{
  return sub_100065E60(&qword_1002940F8, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
}

uint64_t sub_100123E58(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100123E8C + 4 * byte_1001F0D50[a1]))(0x6C616E69467369, 0xE700000000000000);
}

unint64_t sub_100123E8C()
{
  return 0xD000000000000012;
}

uint64_t sub_100123EA8()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_100123EBC()
{
  return 0x6E6F43776F4C7369;
}

unint64_t sub_100123EE0()
{
  return 0xD000000000000018;
}

uint64_t sub_100123F00()
{
  return 0x657474616D726F66;
}

uint64_t sub_100123F24()
{
  return 0x6E696769726FLL;
}

uint64_t sub_100123F38(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100123F6C + 4 * byte_1001F0D57[a1]))(0x6C616E69467369, 0xE700000000000000);
}

unint64_t sub_100123F6C()
{
  return 0xD000000000000012;
}

uint64_t sub_100123F88()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_100123F9C()
{
  return 0x6E6F43776F4C7369;
}

unint64_t sub_100123FC0()
{
  return 0xD000000000000018;
}

uint64_t sub_100123FE0()
{
  return 0x657474616D726F66;
}

uint64_t sub_100124004()
{
  return 0x6E696769726FLL;
}

void sub_100124018(char *a1)
{
  sub_1001D4BB8(*a1);
}

void sub_100124024()
{
  char *v0;

  sub_1000CEC4C(0, *v0);
}

void sub_100124030(uint64_t a1)
{
  char *v1;

  sub_1000CE498(a1, *v1);
}

void sub_100124038(uint64_t a1)
{
  char *v1;

  sub_1000CEC4C(a1, *v1);
}

unint64_t sub_100124040@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100124C30(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10012406C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100123E58(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100124094()
{
  unsigned __int8 *v0;

  return sub_100123F38(*v0);
}

unint64_t sub_10012409C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100124C30(a1);
  *a2 = result;
  return result;
}

void sub_1001240C0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1001240CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100123CB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001240F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100123CB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10012411C()
{
  id *v0;
  id v1;
  double v2;
  double v3;

  v1 = objc_msgSend(*v0, "bestTranscription");
  objc_msgSend(v1, "confidence");
  v3 = v2;

  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= 9.22337204e18)
LABEL_7:
    __break(1u);
}

BOOL sub_1001241B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v0 = sub_10000A05C(0, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr);
  v1 = sub_100065E60(&qword_1002940F8, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
  v2 = AnnotatedResult.displayString.getter(v0, v1);
  v4 = v3;
  swift_bridgeObjectRelease(v3);
  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  return v5 == 0;
}

uint64_t sub_100124258@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(*v1, "bestRecognitionAlternatives");
  a1[3] = sub_10000A05C(0, &qword_100294100, _LTSpeechRecognitionSausage_ptr);
  result = sub_100065E60(&qword_100294108, &qword_100294100, _LTSpeechRecognitionSausage_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionSausage);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_1001242E0()
{
  return sub_100065E60(&qword_100294140, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
}

uint64_t sub_100124314()
{
  return sub_100065E60(&qword_100294148, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
}

void sub_100124348()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, "locale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v1);

}

id sub_100124394()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, "bestTranscription");
  v2 = objc_msgSend(v1, "isLowConfidence");

  return v2;
}

void sub_1001243E0(_QWORD *a1)
{
  _LTSpeechRecognitionResult.encode(to:)(a1);
}

uint64_t sub_100124400()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "bestTranscription");
  v2 = objc_msgSend(v1, "sanitizedFormattedString");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100124484()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "bestTranscription");
  v2 = objc_msgSend(v1, "formattedString");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t _s10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1001245D4 + 4 * byte_1001F0D63[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100124608 + 4 * byte_1001F0D5E[v4]))();
}

uint64_t sub_100124608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100124610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100124618);
  return result;
}

uint64_t sub_100124624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012462CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100124630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100124638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

uint64_t _s10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100124694 + 4 * byte_1001F0D68[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001246B4 + 4 * byte_1001F0D6D[v4]))();
}

_BYTE *sub_100124694(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001246B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001246BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001246C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001246CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001246D4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

uint64_t _s10CodingKeysOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10012473C + 4 * byte_1001F0D77[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100124770 + 4 * byte_1001F0D72[v4]))();
}

uint64_t sub_100124770(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100124778(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100124780);
  return result;
}

uint64_t sub_10012478C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100124794);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100124798(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001247A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_1()
{
  return &_s10CodingKeysON_1;
}

uint64_t _s10CodingKeysOwst_2(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100124808 + 4 * byte_1001F0D81[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10012483C + 4 * byte_1001F0D7C[v4]))();
}

uint64_t sub_10012483C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100124844(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012484CLL);
  return result;
}

uint64_t sub_100124858(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100124860);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100124864(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012486C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_2()
{
  return &_s10CodingKeysON_2;
}

unint64_t sub_10012488C()
{
  unint64_t result;

  result = qword_100294150;
  if (!qword_100294150)
  {
    result = swift_getWitnessTable(&unk_1001F1158, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_100294150);
  }
  return result;
}

unint64_t sub_1001248D4()
{
  unint64_t result;

  result = qword_100294158;
  if (!qword_100294158)
  {
    result = swift_getWitnessTable(&unk_1001F1248, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_100294158);
  }
  return result;
}

unint64_t sub_10012491C()
{
  unint64_t result;

  result = qword_100294160;
  if (!qword_100294160)
  {
    result = swift_getWitnessTable(&unk_1001F1338, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100294160);
  }
  return result;
}

unint64_t sub_100124964()
{
  unint64_t result;

  result = qword_100294168;
  if (!qword_100294168)
  {
    result = swift_getWitnessTable(&unk_1001F1428, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100294168);
  }
  return result;
}

unint64_t sub_1001249AC()
{
  unint64_t result;

  result = qword_100294170;
  if (!qword_100294170)
  {
    result = swift_getWitnessTable(&unk_1001F1360, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100294170);
  }
  return result;
}

unint64_t sub_1001249F4()
{
  unint64_t result;

  result = qword_100294178;
  if (!qword_100294178)
  {
    result = swift_getWitnessTable(&unk_1001F1388, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100294178);
  }
  return result;
}

unint64_t sub_100124A3C()
{
  unint64_t result;

  result = qword_100294180;
  if (!qword_100294180)
  {
    result = swift_getWitnessTable(&unk_1001F1270, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100294180);
  }
  return result;
}

unint64_t sub_100124A84()
{
  unint64_t result;

  result = qword_100294188;
  if (!qword_100294188)
  {
    result = swift_getWitnessTable(&unk_1001F1298, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_100294188);
  }
  return result;
}

unint64_t sub_100124ACC()
{
  unint64_t result;

  result = qword_100294190;
  if (!qword_100294190)
  {
    result = swift_getWitnessTable(&unk_1001F1180, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_100294190);
  }
  return result;
}

unint64_t sub_100124B14()
{
  unint64_t result;

  result = qword_100294198;
  if (!qword_100294198)
  {
    result = swift_getWitnessTable(&unk_1001F11A8, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_100294198);
  }
  return result;
}

unint64_t sub_100124B5C()
{
  unint64_t result;

  result = qword_1002941A0;
  if (!qword_1002941A0)
  {
    result = swift_getWitnessTable(&unk_1001F1090, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1002941A0);
  }
  return result;
}

unint64_t sub_100124BA4()
{
  unint64_t result;

  result = qword_1002941A8;
  if (!qword_1002941A8)
  {
    result = swift_getWitnessTable(&unk_1001F10B8, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1002941A8);
  }
  return result;
}

unint64_t sub_100124BE8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002622B0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_100124C30(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002623D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_100124C78(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_1001DA220(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001DA220(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_10000A05C(0, &qword_10028F360, _LTTranslationSense_ptr);
        v17 = sub_100065E60(&qword_100294278, &qword_10028F360, _LTTranslationSense_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationSense);
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v11 = v3[2];
        v12 = v3[3];
        v13 = v10;
        if (v11 >= v12 >> 1)
        {
          sub_1001DA220(v12 > 1, v11 + 1, 1);
          v3 = v18;
        }
        v16 = sub_10000A05C(0, &qword_10028F360, _LTTranslationSense_ptr);
        v17 = sub_100065E60(&qword_100294278, &qword_10028F360, _LTTranslationSense_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationSense);
        *(_QWORD *)&v15 = v13;
        v3[2] = v11 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v11 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_100124EA8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_1001DA24C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001DA24C(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_10000A05C(0, &qword_1002940C8, _LTSpeechRecognitionBin_ptr);
        v17 = sub_100065E60(&qword_100294280, &qword_1002940C8, _LTSpeechRecognitionBin_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionBin);
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1001DA24C(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = sub_10000A05C(0, &qword_1002940C8, _LTSpeechRecognitionBin_ptr);
        v17 = sub_100065E60(&qword_100294280, &qword_1002940C8, _LTSpeechRecognitionBin_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionBin);
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001250D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_1001DA278(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001DA278(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_10000A05C(0, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr);
        v17 = sub_100065E60(&qword_100294288, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionTokensAlternative);
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1001DA278(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = sub_10000A05C(0, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr);
        v17 = sub_100065E60(&qword_100294288, &qword_100294098, _LTSpeechRecognitionTokensAlternative_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionTokensAlternative);
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100125308(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_1001DA2A4(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1001DA2A4(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_1001DA2A4(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_10003EA2C(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10012542C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_1001DA2C0(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001DA2C0(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
        v17 = sub_100065E60(&qword_100294290, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationCandidate);
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v11 = v3[2];
        v12 = v3[3];
        v13 = v10;
        if (v11 >= v12 >> 1)
        {
          sub_1001DA2C0(v12 > 1, v11 + 1, 1);
          v3 = v18;
        }
        v16 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
        v17 = sub_100065E60(&qword_100294290, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationCandidate);
        *(_QWORD *)&v15 = v13;
        v3[2] = v11 + 1;
        sub_10003E994(&v15, (uint64_t)&v3[5 * v11 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10012565C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2)
    return _swiftEmptyArrayStorage;
  result = (_QWORD *)sub_1001DA2EC(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      do
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        v7 = _swiftEmptyArrayStorage[2];
        v6 = _swiftEmptyArrayStorage[3];
        if (v7 >= v6 >> 1)
          sub_1001DA2EC(v6 > 1, v7 + 1, 1);
        ++v4;
        v8 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
        _swiftEmptyArrayStorage[2] = v7 + 1;
        v9 = &_swiftEmptyArrayStorage[2 * v7];
        v9[4] = v5;
        v9[5] = v8;
      }
      while (v2 != v4);
    }
    else
    {
      v10 = (id *)(a1 + 32);
      do
      {
        v11 = _swiftEmptyArrayStorage[2];
        v12 = _swiftEmptyArrayStorage[3];
        v13 = *v10;
        if (v11 >= v12 >> 1)
          sub_1001DA2EC(v12 > 1, v11 + 1, 1);
        v14 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        v15 = &_swiftEmptyArrayStorage[2 * v11];
        v15[4] = v13;
        v15[5] = v14;
        ++v10;
        --v2;
      }
      while (v2);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t _LTTranslationResult.alternatives.getter()
{
  return sub_100122F50((SEL *)&selRef_translations, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, sub_10012542C);
}

void _LTTranslationSense.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  __n128 v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v3 = v1;
  v5 = sub_100006DF4(&qword_1002941B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v9);
  v11 = sub_100126B88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON_5, &_s10CodingKeysON_5, v11, v9, v10);
  v12 = objc_msgSend(v3, "senseID");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v39 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v15, &v39, v5);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v16 = objc_msgSend(v3, "definition", swift_bridgeObjectRelease(v15).n128_f64[0]);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v38 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v19, &v38, v5);
    v20 = objc_msgSend(v3, "sourceMatch", swift_bridgeObjectRelease(v19).n128_f64[0]);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v37 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v23, &v37, v5);
    v24 = objc_msgSend(v3, "targetMatch", swift_bridgeObjectRelease(v23).n128_f64[0]);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v36 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v27, &v36, v5);
    v28 = objc_msgSend(v3, "labels", swift_bridgeObjectRelease(v27).n128_f64[0]);
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, &type metadata for String);

    v35 = v29;
    v34 = 4;
    sub_100006DF4(&qword_10028A6C8);
    sub_100126C10(&qword_1002941C0, &qword_10028A6C8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5);
    v30 = objc_msgSend(v3, "isPhrasebookMatch", swift_bridgeObjectRelease(v29).n128_f64[0]);
    v33 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v33, v5);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v31);
  }
}

void sub_100125B7C(char *a1)
{
  sub_1001D512C(*a1);
}

void sub_100125B88()
{
  char *v0;

  sub_1000CE2A4(*v0);
}

void sub_100125B90(uint64_t a1)
{
  char *v1;

  sub_1000CE598(a1, *v1);
}

void sub_100125B98(uint64_t a1)
{
  char *v1;

  sub_1000CEA60(a1, *v1);
}

unint64_t sub_100125BA0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001273A4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100125BCC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100125BFC + 4 * byte_1001F1590[*v0]))();
}

void sub_100125BFC(_QWORD *a1@<X8>)
{
  *a1 = 0x6974696E69666564;
  a1[1] = 0xEA00000000006E6FLL;
}

void sub_100125C1C(_QWORD *a1@<X8>)
{
  *a1 = 0x614D656372756F73;
  a1[1] = 0xEB00000000686374;
}

void sub_100125C50(_QWORD *a1@<X8>)
{
  *a1 = 0x736C6562616CLL;
  a1[1] = 0xE600000000000000;
}

void sub_100125C68(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000001001F7EC0;
}

uint64_t sub_100125C88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100125CB8 + 4 * byte_1001F1596[*v0]))(0x444965736E6573, 0xE700000000000000);
}

uint64_t sub_100125CB8()
{
  return 0x6974696E69666564;
}

uint64_t sub_100125CD4()
{
  return 0x614D656372756F73;
}

uint64_t sub_100125D04()
{
  return 0x736C6562616CLL;
}

unint64_t sub_100125D18()
{
  return 0xD000000000000011;
}

unint64_t sub_100125D34@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001273A4(a1);
  *a2 = result;
  return result;
}

void sub_100125D58(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100125D64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100126B88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100125D8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100126B88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100125DB4(uint64_t a1, uint64_t a2)
{
  return sub_100126528(a1, a2, (SEL *)&selRef_senseID);
}

uint64_t sub_100125DC0(uint64_t a1, uint64_t a2)
{
  return sub_100126528(a1, a2, (SEL *)&selRef_definition);
}

uint64_t sub_100125DCC(uint64_t a1, uint64_t a2)
{
  return sub_100126528(a1, a2, (SEL *)&selRef_sourceMatch);
}

uint64_t sub_100125DD8(uint64_t a1, uint64_t a2)
{
  return sub_100126528(a1, a2, (SEL *)&selRef_targetMatch);
}

uint64_t sub_100125DE4()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, "labels");
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  return v2;
}

id sub_100125E30()
{
  id *v0;

  return objc_msgSend(*v0, "isPhrasebookMatch");
}

void sub_100125E50(_QWORD *a1)
{
  _LTTranslationSense.encode(to:)(a1);
}

uint64_t _LTTranslationCandidate.sensesMeta.getter()
{
  return sub_100122F50((SEL *)&selRef_senses, &qword_10028F360, _LTTranslationSense_ptr, sub_100124C78);
}

void _LTTranslationCandidate.encode(to:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v3 = v1;
  v5 = sub_100006DF4(&qword_1002941C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v9);
  v11 = sub_100126BCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON_4, &_s10CodingKeysON_4, v11, v9, v10);
  v12 = objc_msgSend(v3, "isLowConfidence");
  LOBYTE(v30) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v30, v5);
  if (!v2)
  {
    v13 = objc_msgSend(v3, "formattedString");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    LOBYTE(v30) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v16, &v30, v5);
    v17 = objc_msgSend(v3, "sanitizedFormattedString", swift_bridgeObjectRelease(v16).n128_f64[0]);
    if (v17)
    {
      v18 = v17;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v21 = v20;

    }
    else
    {
      v19 = 0;
      v21 = 0;
    }
    v30 = v19;
    v31 = v21;
    v32 = 2;
    sub_100006DF4(&qword_10028D160);
    sub_100126C10((unint64_t *)&qword_100294120, &qword_10028D160, (uint64_t)&protocol conformance descriptor for <A> A?);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v32, v5);
    v22 = objc_msgSend(v3, "senses", swift_bridgeObjectRelease(v21).n128_f64[0]);
    v23 = sub_10000A05C(0, &qword_10028F360, _LTTranslationSense_ptr);
    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    v30 = v24;
    v32 = 3;
    sub_100006DF4(&qword_1002941D8);
    sub_100126C68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v32, v5);
    v25 = objc_msgSend(v3, "romanization", swift_bridgeObjectRelease(v24).n128_f64[0]);
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

    }
    else
    {
      v27 = 0;
      v29 = 0;
    }
    v30 = v27;
    v31 = v29;
    v32 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v32, v5);
    swift_bridgeObjectRelease(v29);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1001261CC(char *a1)
{
  sub_1001D4DF0(*a1);
}

void sub_1001261D8()
{
  char *v0;

  sub_1000CE398(*v0);
}

void sub_1001261E0()
{
  __asm { BR              X10 }
}

uint64_t sub_100126228(uint64_t a1)
{
  String.hash(into:)(a1, 0x657474616D726F66, 0xEF676E6972745364);
  return swift_bridgeObjectRelease(0xEF676E6972745364);
}

void sub_1001262B8(uint64_t a1)
{
  char *v1;

  sub_1000CEB50(a1, *v1);
}

unint64_t sub_1001262C0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001273EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001262EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100126328 + 4 * byte_1001F15A1[*v0]))();
}

void sub_100126328(_QWORD *a1@<X8>)
{
  *a1 = 0x657474616D726F66;
  a1[1] = 0xEF676E6972745364;
}

void sub_100126350(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000001001F7E50;
}

void sub_100126370(_QWORD *a1@<X8>)
{
  *a1 = 0x654D7365736E6573;
  a1[1] = 0xEA00000000006174;
}

void sub_100126390(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "romanization");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1001263B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001263F0 + 4 * byte_1001F15A6[*v0]))(0x6E6F43776F4C7369, 0xEF65636E65646966);
}

uint64_t sub_1001263F0()
{
  return 0x657474616D726F66;
}

unint64_t sub_100126414()
{
  return 0xD000000000000018;
}

uint64_t sub_100126430()
{
  return 0x654D7365736E6573;
}

uint64_t sub_10012644C()
{
  return 0x617A696E616D6F72;
}

unint64_t sub_10012646C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001273EC(a1);
  *a2 = result;
  return result;
}

void sub_100126490(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10012649C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100126BCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001264C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100126BCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001264EC(uint64_t a1, uint64_t a2)
{
  return sub_10012340C(a1, a2, (SEL *)&selRef_senses, &qword_10028F360, _LTTranslationSense_ptr, sub_100124C78);
}

uint64_t sub_100126510(uint64_t a1, uint64_t a2)
{
  return sub_100126584(a1, a2, (SEL *)&selRef_romanization);
}

uint64_t sub_10012651C(uint64_t a1, uint64_t a2)
{
  return sub_100126528(a1, a2, (SEL *)&selRef_formattedString);
}

uint64_t sub_100126528(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(*v3, *a3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

uint64_t sub_100126578(uint64_t a1, uint64_t a2)
{
  return sub_100126584(a1, a2, (SEL *)&selRef_sanitizedFormattedString);
}

uint64_t sub_100126584(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

void sub_1001265E4(_QWORD *a1)
{
  _LTTranslationCandidate.encode(to:)(a1);
}

uint64_t _LTTranslationResult.encode(to:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  __n128 v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_1002941F0);
  v22 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_100023AF4(a1, v12);
  v13 = sub_100126CEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON_3, &_s10CodingKeysON_3, v13, v12, v11);
  v14 = objc_msgSend(v2, "locale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v25 = 0;
  sub_100007D5C(&qword_100294038, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  v15 = v21[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(v7, &v25, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v15)
  {
    v17 = objc_msgSend(v2, "translations");
    v18 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

    v23 = v19;
    v24 = 1;
    sub_100006DF4(&qword_100294200);
    sub_100126D30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v8);
    v16 = swift_bridgeObjectRelease(v19);
  }
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v22 + 8))(v10, v8, v16);
}

uint64_t sub_100126844(char *a1, char *a2)
{
  return sub_1001D5084(*a1, *a2);
}

Swift::Int sub_100126850()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x74616E7265746C61;
  else
    v2 = 0x656C61636F6CLL;
  if (v1)
    v3 = 0xEC00000073657669;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001268D4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x74616E7265746C61;
  else
    v2 = 0x656C61636F6CLL;
  if (*v1)
    v3 = 0xEC00000073657669;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100126934(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x74616E7265746C61;
  else
    v3 = 0x656C61636F6CLL;
  if (v2)
    v4 = 0xEC00000073657669;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001269B4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002625E8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100126A10(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656C61636F6CLL;
  if (*v1)
    v2 = 0x74616E7265746C61;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEC00000073657669;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100126A54()
{
  _BYTE *v0;

  if (*v0)
    return 0x74616E7265746C61;
  else
    return 0x656C61636F6CLL;
}

uint64_t sub_100126A94@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002625E8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100126AF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100126CEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100126B1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100126CEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100126B44(uint64_t a1, uint64_t a2)
{
  return sub_10012340C(a1, a2, (SEL *)&selRef_translations, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, sub_10012542C);
}

uint64_t sub_100126B68(_QWORD *a1)
{
  return _LTTranslationResult.encode(to:)(a1);
}

unint64_t sub_100126B88()
{
  unint64_t result;

  result = qword_1002941B8;
  if (!qword_1002941B8)
  {
    result = swift_getWitnessTable(&unk_1001F1B88, &_s10CodingKeysON_5);
    atomic_store(result, (unint64_t *)&qword_1002941B8);
  }
  return result;
}

unint64_t sub_100126BCC()
{
  unint64_t result;

  result = qword_1002941D0;
  if (!qword_1002941D0)
  {
    result = swift_getWitnessTable(&unk_1001F1B38, &_s10CodingKeysON_4);
    atomic_store(result, (unint64_t *)&qword_1002941D0);
  }
  return result;
}

uint64_t sub_100126C10(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100126C68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002941E0;
  if (!qword_1002941E0)
  {
    v1 = sub_1000070BC(&qword_1002941D8);
    sub_100065E60(&qword_1002941E8, &qword_10028F360, _LTTranslationSense_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationSense);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002941E0);
  }
  return result;
}

unint64_t sub_100126CEC()
{
  unint64_t result;

  result = qword_1002941F8;
  if (!qword_1002941F8)
  {
    result = swift_getWitnessTable(&unk_1001F1AE8, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1002941F8);
  }
  return result;
}

unint64_t sub_100126D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294208;
  if (!qword_100294208)
  {
    v1 = sub_1000070BC(&qword_100294200);
    sub_100065E60(&qword_100294210, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationCandidate);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100294208);
  }
  return result;
}

uint64_t sub_100126DB4()
{
  return sub_100065E60(&qword_1002941E8, &qword_10028F360, _LTTranslationSense_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationSense);
}

uint64_t sub_100126DE8()
{
  return sub_100065E60(&qword_100294210, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationCandidate);
}

uint64_t sub_100126E1C()
{
  return sub_100065E60(&qword_100294218, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationCandidate);
}

uint64_t sub_100126E50()
{
  return sub_100065E60(&qword_100294220, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationCandidate);
}

uint64_t sub_100126E84()
{
  return sub_100065E60(&qword_100294228, &qword_10028F180, _LTTranslationResult_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationResult);
}

uint64_t _s10CodingKeysOwst_3(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100126F04 + 4 * byte_1001F15B0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100126F38 + 4 * byte_1001F15AB[v4]))();
}

uint64_t sub_100126F38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100126F40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100126F48);
  return result;
}

uint64_t sub_100126F54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100126F5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100126F60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100126F68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_3()
{
  return &_s10CodingKeysON_3;
}

uint64_t _s10CodingKeysOwst_4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100126FD0 + 4 * byte_1001F15BA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100127004 + 4 * byte_1001F15B5[v4]))();
}

uint64_t sub_100127004(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012700C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100127014);
  return result;
}

uint64_t sub_100127020(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100127028);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10012702C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127034(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_4()
{
  return &_s10CodingKeysON_4;
}

uint64_t _s10CodingKeysOwst_5(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10012709C + 4 * byte_1001F15C4[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001270D0 + 4 * byte_1001F15BF[v4]))();
}

uint64_t sub_1001270D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001270D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001270E0);
  return result;
}

uint64_t sub_1001270EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001270F4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001270F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127100(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_5()
{
  return &_s10CodingKeysON_5;
}

unint64_t sub_100127120()
{
  unint64_t result;

  result = qword_100294230;
  if (!qword_100294230)
  {
    result = swift_getWitnessTable(&unk_1001F18E0, &_s10CodingKeysON_5);
    atomic_store(result, (unint64_t *)&qword_100294230);
  }
  return result;
}

unint64_t sub_100127168()
{
  unint64_t result;

  result = qword_100294238;
  if (!qword_100294238)
  {
    result = swift_getWitnessTable(&unk_1001F19D0, &_s10CodingKeysON_4);
    atomic_store(result, (unint64_t *)&qword_100294238);
  }
  return result;
}

unint64_t sub_1001271B0()
{
  unint64_t result;

  result = qword_100294240;
  if (!qword_100294240)
  {
    result = swift_getWitnessTable(&unk_1001F1AC0, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_100294240);
  }
  return result;
}

unint64_t sub_1001271F8()
{
  unint64_t result;

  result = qword_100294248;
  if (!qword_100294248)
  {
    result = swift_getWitnessTable(&unk_1001F19F8, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_100294248);
  }
  return result;
}

unint64_t sub_100127240()
{
  unint64_t result;

  result = qword_100294250;
  if (!qword_100294250)
  {
    result = swift_getWitnessTable(&unk_1001F1A20, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_100294250);
  }
  return result;
}

unint64_t sub_100127288()
{
  unint64_t result;

  result = qword_100294258;
  if (!qword_100294258)
  {
    result = swift_getWitnessTable(&unk_1001F1908, &_s10CodingKeysON_4);
    atomic_store(result, (unint64_t *)&qword_100294258);
  }
  return result;
}

unint64_t sub_1001272D0()
{
  unint64_t result;

  result = qword_100294260;
  if (!qword_100294260)
  {
    result = swift_getWitnessTable(&unk_1001F1930, &_s10CodingKeysON_4);
    atomic_store(result, (unint64_t *)&qword_100294260);
  }
  return result;
}

unint64_t sub_100127318()
{
  unint64_t result;

  result = qword_100294268;
  if (!qword_100294268)
  {
    result = swift_getWitnessTable(&unk_1001F1818, &_s10CodingKeysON_5);
    atomic_store(result, (unint64_t *)&qword_100294268);
  }
  return result;
}

unint64_t sub_100127360()
{
  unint64_t result;

  result = qword_100294270;
  if (!qword_100294270)
  {
    result = swift_getWitnessTable(&unk_1001F1840, &_s10CodingKeysON_5);
    atomic_store(result, (unint64_t *)&qword_100294270);
  }
  return result;
}

unint64_t sub_1001273A4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002624A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_1001273EC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262550, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_100127434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 64) = a8;
  *(_QWORD *)(v9 + 72) = v8;
  *(_WORD *)(v9 + 112) = a6;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 56) = a7;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  return swift_task_switch(sub_10012745C, 0, 0);
}

uint64_t sub_10012745C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  Class v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  Class v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 72);
  v2 = *(unsigned __int16 *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (v2 >> 8) & 1;
  v5 = v2 & 1;
  v6 = objc_allocWithZone((Class)_LTTextTranslationRequest);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v8 = Locale._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v6, "initWithSourceLocale:targetLocale:", isa, v8);
  *(_QWORD *)(v0 + 80) = v9;

  objc_msgSend(v9, "setTaskHint:", 1);
  v10 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(v3);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithString:", v11, swift_bridgeObjectRelease(v3).n128_f64[0]);

  objc_msgSend(v9, "setText:", v12);
  objc_msgSend(v9, "setIsFinal:", v5);
  objc_msgSend(v9, "set_supportsGenderDisambiguation:", v4);
  objc_msgSend(v9, "setCensorSpeech:", byte_1002AA518);
  objc_msgSend(v9, "setSourceOrigin:", v1);
  sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v13 = v9;
  v14 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v13);
  LOBYTE(v12) = NSUserDefaults.onDeviceOnly.getter();

  objc_msgSend(v13, "setForcedOfflineTranslation:", v12 & 1);
  objc_msgSend(v13, "setOverrideOngoingSessionIfNeeded:", 1);
  v15 = v13;
  v16 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v15, "setLogIdentifier:", v16);

  v17 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v17;
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = v21;
  v18 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 96) = v18;
  v19 = sub_100006DF4(&qword_100298120);
  *v18 = v0;
  v18[1] = sub_1001276F0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000039, 0x80000001001FE050, sub_100127CAC, v17, v19);
}

uint64_t sub_1001276F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100127790;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v4 = sub_10012775C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10012775C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100127790()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001277CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

void sub_100127838()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  Class isa;
  Class v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  Class v18;
  void (*v19)(char *, uint64_t);
  id v20;
  Class v21;
  void *v22;
  void *v23;
  void **aBlock;
  uint64_t v25;
  void *v26;
  void *v27;
  void (*v28)(uint64_t);
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A480 != -1)
    swift_once(&qword_10028A480, sub_10012112C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA488);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Preheating offline translation engine", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v13 = Locale._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v11, "initWithSourceLocale:targetLocale:", isa, v13);

  v15 = objc_msgSend(objc_allocWithZone((Class)_LTSpeechTranslationRequest), "initWithLocalePair:", v14);
  objc_msgSend(v15, "setForcedOfflineTranslation:", 1);
  objc_msgSend(v15, "setCensorSpeech:", byte_1002AA518);
  v16 = (void *)objc_opt_self(_LTTranslator);
  v17 = objc_msgSend(v14, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v18 = Locale._bridgeToObjectiveC()().super.isa;
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v5, v2);
  v20 = objc_msgSend(v14, "targetLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = Locale._bridgeToObjectiveC()().super.isa;
  v19(v5, v2);
  v28 = sub_100128184;
  v29 = 0;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_1001277CC;
  v27 = &unk_10026C5C8;
  v22 = _Block_copy(&aBlock);
  objc_msgSend(v16, "configInfoForLocale:otherLocale:completion:", v18, v21, v22);
  _Block_release(v22);

  v28 = sub_100078258;
  v29 = 0;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_100095424;
  v27 = &unk_10026C5F0;
  v23 = _Block_copy(&aBlock);
  objc_msgSend(v1, "preheatForRequest:completion:", v15, v23);
  _Block_release(v23);

}

id sub_100127B64(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[5];
  uint64_t v15;

  v6 = sub_100006DF4(&qword_1002942A0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10026C588, v10 + v8, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1001280D8;
  v15 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007D3FC;
  aBlock[3] = &unk_10026C5A0;
  v12 = _Block_copy(aBlock);
  swift_release(v15);
  objc_msgSend(a2, "setCompletionHandler:", v12);
  _Block_release(v12);
  return objc_msgSend(a3, "translate:", a2);
}

id sub_100127CAC(uint64_t a1)
{
  uint64_t v1;

  return sub_100127B64(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100127CB4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028A480 != -1)
      swift_once(&qword_10028A480, sub_10012112C);
    v3 = type metadata accessor for Logger(0);
    sub_10000F66C(v3, (uint64_t)qword_1002AA488);
    v4 = swift_errorRetain(a2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v7 = 138412290;
      v9 = _convertErrorToNSError(_:)(a2);
      v28 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v7 + 4);
      *v8 = v9;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Text translation handler returned error: %@", v7, 0xCu);
      v10 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v8, 1, v10);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    v28 = a2;
LABEL_21:
    v27 = sub_100006DF4(&qword_1002942A0);
    return CheckedContinuation.resume(throwing:)(&v28, v27);
  }
  if (!a1)
  {
LABEL_16:
    if (qword_10028A480 != -1)
      swift_once(&qword_10028A480, sub_10012112C);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10000F66C(v21, (uint64_t)qword_1002AA488);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Text translation handler returned no text", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_100128140();
    v28 = swift_allocError(&_s6ErrorsON, v26, 0, 0);
    goto LABEL_21;
  }
  v11 = a1;
  v12 = objc_msgSend(v11, "translatedText");
  v13 = objc_msgSend(v12, "length");

  if ((uint64_t)v13 <= 0)
  {

    goto LABEL_16;
  }
  if (qword_10028A480 != -1)
    swift_once(&qword_10028A480, sub_10012112C);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000F66C(v14, (uint64_t)qword_1002AA488);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Text translation handler returned _LTCombinedTranslationResult", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v29[2] = sub_10000A05C(0, &qword_100294068, _LTCombinedTranslationResult_ptr);
  v29[3] = sub_10012834C();
  v28 = (uint64_t)v11;
  v19 = sub_100006DF4(&qword_1002942A0);
  return CheckedContinuation.resume(returning:)(&v28, v19);
}

uint64_t sub_100128074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100006DF4(&qword_1002942A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001280D8(void *a1, uint64_t a2)
{
  sub_100006DF4(&qword_1002942A0);
  return sub_100127CB4(a1, a2);
}

uint64_t sub_100128128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100128138(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100128140()
{
  unint64_t result;

  result = qword_1002942A8;
  if (!qword_1002942A8)
  {
    result = swift_getWitnessTable(&unk_1001F1C70, &_s6ErrorsON);
    atomic_store(result, (unint64_t *)&qword_1002942A8);
  }
  return result;
}

void sub_100128184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10028A480 != -1)
    swift_once(&qword_10028A480, sub_10012112C);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA488);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v11 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = Dictionary.description.getter(a1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v10 = sub_1001A7FE4(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v6 + 4);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Finished preheating asset updating if needed with config info: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
}

unint64_t sub_10012834C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002942B0;
  if (!qword_1002942B0)
  {
    v1 = sub_10000A05C(255, &qword_100294068, _LTCombinedTranslationResult_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for _LTCombinedTranslationResult, v1);
    atomic_store(result, (unint64_t *)&qword_1002942B0);
  }
  return result;
}

uint64_t _s6ErrorsOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001283E4 + 4 * byte_1001F1BE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100128404 + 4 * byte_1001F1BE5[v4]))();
}

_BYTE *sub_1001283E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100128404(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10012840C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100128414(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10012841C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100128424(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s6ErrorsOMa()
{
  return &_s6ErrorsON;
}

ValueMetadata *type metadata accessor for RequestOptions()
{
  return &type metadata for RequestOptions;
}

unint64_t sub_100128454()
{
  unint64_t result;

  result = qword_1002942B8;
  if (!qword_1002942B8)
  {
    result = swift_getWitnessTable(&unk_1001F1C48, &_s6ErrorsON);
    atomic_store(result, (unint64_t *)&qword_1002942B8);
  }
  return result;
}

uint64_t sub_1001284A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD **v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  void *v70;
  uint64_t v71;
  _QWORD **v72;
  _QWORD *v73;
  id v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  id v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _UNKNOWN **v97;
  _BYTE v98[32];

  v91 = a3;
  v92 = a4;
  v8 = type metadata accessor for TranslationTaskHint(0, a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a5 = swift_getKeyPath(&unk_1001F1CB0);
  *(_BYTE *)(a5 + 8) = 0;
  v12 = (int *)type metadata accessor for MainLayoutView(0);
  v13 = (_QWORD *)(a5 + v12[5]);
  *v13 = swift_getKeyPath(&unk_1001F1CD8);
  v14 = sub_100006DF4(&qword_10028F368);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = (_QWORD *)(a5 + v12[6]);
  v16 = type metadata accessor for SceneContext(0);
  v17 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  *v15 = EnvironmentObject.init()(v16, v17);
  v15[1] = v18;
  v19 = (_QWORD *)(a5 + v12[7]);
  v20 = type metadata accessor for ConversationContext(0);
  v21 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  *v19 = EnvironmentObject.init()(v20, v21);
  v19[1] = v22;
  v85 = v12[12];
  *(_QWORD *)(a5 + v85) = a1;
  *(_QWORD *)(a5 + v12[10]) = a2;
  v23 = objc_allocWithZone((Class)_LTTranslator);
  v94 = a1;
  swift_retain(a1);
  v86 = a2;
  v24 = objc_msgSend(v23, "init", swift_retain(a2).n128_f64[0]);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for TranslationTaskHint.speech(_:), v8);
  v25 = type metadata accessor for LanguagesService(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = (void *)LanguagesService.init(task:)(v11);
  v27 = type metadata accessor for DeviceHelper(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = sub_10009ADE4();
  v29 = objc_allocWithZone((Class)type metadata accessor for RecordingHelper());
  swift_retain(v28);
  v31 = sub_10014903C(v30);
  v90 = v28;
  swift_release(v28);
  v32 = type metadata accessor for TTSManager(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = v24;
  v34 = v31;
  v35 = sub_1001D0BE8(v33, v34);
  v93 = v12;
  v84 = v12[11];
  v87 = a5;
  *(_QWORD *)(a5 + v84) = v35;
  v36 = type metadata accessor for ErrorStateContext(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = sub_1000AF554();
  v38 = *(char **)(a1 + 64);
  v39 = type metadata accessor for ComposeTranslationViewModel(0);
  v40 = *(unsigned int *)(v39 + 48);
  v41 = *(unsigned __int16 *)(v39 + 52);
  v81 = v39;
  swift_allocObject(v39, v40, v41);
  v42 = v33;
  v43 = v34;
  swift_retain(v26);
  swift_retain(v38);
  swift_retain(v37);
  swift_retain(v35);
  v44 = (void (*)(char *, uint64_t))v91;
  v45 = v92;
  swift_retain(v92);
  v46 = sub_10005AC18(v42, (uint64_t)v26, v38, v37, v35, v43, v44, v45);
  v83 = v42;

  v91 = v26;
  swift_release(v26);
  swift_release(v38);
  v89 = v37;
  v47 = v37;
  v48 = v43;
  swift_release(v47);
  swift_release(v35);

  v82 = v44;
  swift_release(v45);
  v49 = v94;
  v50 = (_QWORD **)(v94 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders);
  swift_beginAccess(v94 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders, v98, 33, 0);
  v51 = *v50;
  swift_retain(v49);
  v88 = v46;
  swift_retain(v46);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
  *v50 = v51;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v51 = sub_1001A7FA8(0, v51[2] + 1, 1, v51);
    *v50 = v51;
  }
  v54 = v51[2];
  v53 = v51[3];
  if (v54 >= v53 >> 1)
  {
    v51 = sub_1001A7FA8((_QWORD *)(v53 > 1), v54 + 1, 1, v51);
    *v50 = v51;
  }
  v96 = v81;
  v97 = &off_1002659C8;
  v55 = v88;
  *(_QWORD *)&v95 = v88;
  v51[2] = v54 + 1;
  sub_10003E994(&v95, (uint64_t)&v51[5 * v54 + 4]);
  swift_endAccess(v98);
  v56 = v94;
  swift_release(v94);
  v57 = v87;
  v58 = v87 + v93[8];
  *(_QWORD *)v58 = sub_100129F48;
  *(_QWORD *)(v58 + 8) = v55;
  *(_BYTE *)(v58 + 16) = 0;
  v59 = *(_QWORD *)(v56 + 72);
  v60 = *(_QWORD *)(v57 + v84);
  v84 = type metadata accessor for ConversationViewModel(0);
  v61 = objc_allocWithZone((Class)v84);
  v62 = (uint64_t)v90;
  swift_retain(v90);
  v63 = v83;
  v64 = v48;
  v65 = (uint64_t)v91;
  swift_retain(v91);
  v66 = v89;
  swift_retain(v89);
  v67 = v82;
  v68 = v55;
  v69 = v67;
  swift_retain(v68);
  swift_retain(v59);
  swift_retain(v60);
  v70 = sub_10008D480(v63, v65, v59, v62, v64, v60, v66, v69);
  v71 = *(_QWORD *)(v57 + v85);
  v72 = (_QWORD **)(v71 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders);
  swift_beginAccess(v71 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders, v98, 33, 0);
  v73 = *v72;
  v74 = v70;
  swift_retain(v71);
  v75 = swift_isUniquelyReferenced_nonNull_native(v73);
  *v72 = v73;
  if ((v75 & 1) == 0)
  {
    v73 = sub_1001A7FA8(0, v73[2] + 1, 1, v73);
    *v72 = v73;
  }
  v77 = v73[2];
  v76 = v73[3];
  if (v77 >= v76 >> 1)
  {
    v73 = sub_1001A7FA8((_QWORD *)(v76 > 1), v77 + 1, 1, v73);
    *v72 = v73;
  }
  v96 = v84;
  v97 = &off_1002676C8;
  *(_QWORD *)&v95 = v74;
  v73[2] = v77 + 1;
  sub_10003E994(&v95, (uint64_t)&v73[5 * v77 + 4]);
  swift_endAccess(v98);

  swift_release(v71);
  swift_release(v94);
  swift_release(v86);

  swift_release(v92);
  swift_release(v88);
  swift_release(v89);
  swift_release(v91);

  swift_release(v90);
  result = swift_allocObject(&unk_10026C7A0, 24, 7);
  *(_QWORD *)(result + 16) = v74;
  v79 = v87 + v93[9];
  *(_QWORD *)v79 = sub_100129F74;
  *(_QWORD *)(v79 + 8) = result;
  *(_BYTE *)(v79 + 16) = 0;
  return result;
}

uint64_t sub_100128B4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t OpaqueTypeConformance2;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  __n128 v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE v111[9];

  v98 = a1;
  v97 = type metadata accessor for UUID(0);
  v94 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v92 = (uint64_t *)((char *)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for MainLayoutView(0);
  v100 = *(_QWORD *)(v3 - 8);
  v4 = v3;
  v85 = v3;
  v101 = *(_QWORD *)(v100 + 64);
  __chkstk_darwin(v3);
  v106 = (uint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for ScenePhase(0);
  v88 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = (uint64_t *)((char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100006DF4(&qword_100294370);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100006DF4(&qword_100294378);
  __chkstk_darwin(v99);
  v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100006DF4(&qword_100294380);
  __chkstk_darwin(v102);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100006DF4(&qword_100294388);
  v89 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v103 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_100294390);
  v95 = *(_QWORD *)(v15 - 8);
  v96 = v15;
  __chkstk_darwin(v15);
  v105 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100006DF4(&qword_100294398);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v90 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012938C(v1, (uint64_t)v9);
  v18 = v1 + *(int *)(v4 + 36);
  v20 = *(_QWORD *)v18;
  v19 = *(_QWORD *)(v18 + 8);
  v21 = *(unsigned __int8 *)(v18 + 16);
  v22 = type metadata accessor for ConversationViewModel(0);
  v23 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  v24 = (void *)StateObject.wrappedValue.getter(v20, v19, v21, v22, v23);
  v25 = type metadata accessor for ConversationContext(0);
  v26 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v27 = v24;
  v28 = EnvironmentObject.init()(v25, v26);
  v30 = v29;
  v111[0] = 0;
  State.init(wrappedValue:)(&v107, v111, &type metadata for TranslationOfflineAvailability);
  LOBYTE(v20) = v107;
  v31 = v108;
  sub_10000B074((uint64_t)v9, (uint64_t)v11, &qword_100294370);

  v32 = &v11[*(int *)(v99 + 36)];
  *(_QWORD *)v32 = v28;
  *((_QWORD *)v32 + 1) = v30;
  *((_QWORD *)v32 + 2) = v27;
  v32[24] = v20;
  *((_QWORD *)v32 + 4) = v31;
  v33 = v1;
  sub_10000A020((uint64_t)v9, &qword_100294370);
  v34 = v85;
  v35 = v1 + *(int *)(v85 + 32);
  v36 = *(_QWORD *)v35;
  v37 = *(_QWORD *)(v35 + 8);
  v38 = *(unsigned __int8 *)(v35 + 16);
  v39 = type metadata accessor for ComposeTranslationViewModel(0);
  v40 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  v41 = StateObject.wrappedValue.getter(v36, v37, v38, v39, v40);
  v42 = *(_QWORD *)(v41 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager);
  swift_retain(v42);
  swift_release(v41);
  sub_10000B074((uint64_t)v11, (uint64_t)v13, &qword_100294378);
  v43 = v102;
  *(_QWORD *)&v13[*(int *)(v102 + 36)] = v42;
  sub_10000A020((uint64_t)v11, &qword_100294378);
  v44 = v86;
  sub_1000D5B48(v86);
  v45 = v106;
  sub_100032D68(v33, v106, type metadata accessor for MainLayoutView);
  v46 = *(unsigned __int8 *)(v100 + 80);
  v47 = (v46 + 16) & ~v46;
  v99 = v46 | 7;
  v100 = v47 + v101;
  v48 = swift_allocObject(&unk_10026C7C8, v47 + v101, v46 | 7);
  v101 = v47;
  sub_10012AA7C(v45, v48 + v47);
  v49 = sub_10012AB30(&qword_1002943A0, &qword_100294380, (void (*)(void))sub_10012AB0C, (void (*)(void))sub_10012AD10);
  v50 = sub_100007D5C(&qword_10028F4D0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v51 = v43;
  v52 = v87;
  View.onChange<A>(of:initial:_:)(v44, 0, sub_10012AAC0, v48, v51, v87, v49, v50);
  v53 = swift_release(v48);
  v54 = v44;
  v55 = v52;
  (*(void (**)(_QWORD *, uint64_t, __n128))(v88 + 8))(v54, v52, v53);
  sub_10000A020((uint64_t)v13, &qword_100294380);
  v56 = (uint64_t *)(v33 + *(int *)(v34 + 24));
  v57 = *v56;
  if (!*v56)
    goto LABEL_4;
  KeyPath = swift_getKeyPath(&unk_1001F1DC0);
  v59 = swift_getKeyPath(&unk_1001F1DE8);
  swift_retain(v57);
  v60 = v92;
  static Published.subscript.getter(v92, v61, KeyPath);
  swift_release(v57);
  swift_release(KeyPath);
  swift_release(v59);
  v62 = v106;
  sub_100032D68(v33, v106, type metadata accessor for MainLayoutView);
  v63 = swift_allocObject(&unk_10026C7F0, v100, v99);
  sub_10012AA7C(v62, v63 + v101);
  v107 = v102;
  v108 = v55;
  v109 = v49;
  v110 = v50;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v65 = sub_100007D5C((unint64_t *)&qword_1002900F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v66 = v104;
  v67 = v97;
  v68 = v103;
  View.onChange<A>(of:initial:_:)(v60, 0, sub_10012AD60, v63, v104, v97, OpaqueTypeConformance2, v65);
  v69 = swift_release(v63);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v94 + 8))(v60, v67, v69);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v68, v66);
  v70 = *v56;
  if (*v56)
  {
    v71 = swift_getKeyPath(&unk_1001F1E08);
    v72 = swift_getKeyPath(&unk_1001F1E30);
    swift_retain(v70);
    static Published.subscript.getter(&v107, v73, v71);
    swift_release(v70);
    swift_release(v71);
    swift_release(v72);
    v111[0] = v107;
    v74 = v106;
    sub_100032D68(v33, v106, type metadata accessor for MainLayoutView);
    v75 = swift_allocObject(&unk_10026C818, v100, v99);
    sub_10012AA7C(v74, v75 + v101);
    v107 = v104;
    v108 = v67;
    v109 = OpaqueTypeConformance2;
    v110 = v65;
    v76 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v77 = v90;
    v78 = v96;
    v79 = v105;
    View.onChange<A>(of:initial:_:)(v111, 0, sub_10012AECC, v75, v96, &type metadata for Bool, v76, &protocol witness table for Bool);
    v80 = swift_release(v75);
    (*(void (**)(char *, uint64_t, __n128))(v95 + 8))(v79, v78, v80);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v91 + 32))(v98, v77, v93);
  }
  else
  {
LABEL_4:
    v82 = v56[1];
    v83 = type metadata accessor for SceneContext(0);
    v84 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v82, v83, v84);
    __break(1u);
  }
  return result;
}

uint64_t sub_10012938C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v71 = a2;
  v72 = type metadata accessor for TabBarLayoutView(0);
  __chkstk_darwin(v72);
  v4 = (uint64_t *)((char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = sub_100006DF4(qword_1002943E8);
  __chkstk_darwin(v70);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 8);
  sub_10001F410(*(_QWORD *)a1, v8);
  v9 = sub_1000D62D0(v7, v8);
  sub_10001F470(v7, v8);
  v10 = (int *)type metadata accessor for MainLayoutView(0);
  v11 = (uint64_t *)(a1 + v10[7]);
  v12 = *v11;
  v13 = v11[1];
  v14 = type metadata accessor for ConversationContext(0);
  v15 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v16 = EnvironmentObject.projectedValue.getter(v12, v13, v14, v15);
  KeyPath = swift_getKeyPath(&unk_1001F1E50);
  EnvironmentObject.Wrapper.subscript.getter(&v73, KeyPath, v16, v15);
  swift_release(KeyPath);
  swift_release(v16);
  v69 = v73;
  if ((v9 & 1) != 0)
  {
    v41 = *(_QWORD *)(a1 + v10[11]);
    v66 = *(_QWORD *)(a1 + v10[10]);
    v40 = v66;
    v67 = v74;
    v68 = v75;
    v42 = (uint64_t *)(a1 + v10[8]);
    v43 = v42[1];
    v64 = *v42;
    v44 = *((unsigned __int8 *)v42 + 16);
    v45 = type metadata accessor for ComposeTranslationViewModel(0);
    v46 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
    v65 = v14;
    v47 = v46;
    swift_retain(v40);
    swift_retain(v41);
    v48 = StateObject.wrappedValue.getter(v64, v43, v44, v45, v47);
    v49 = (uint64_t *)(a1 + v10[9]);
    v50 = *v49;
    v51 = v49[1];
    v52 = *((unsigned __int8 *)v49 + 16);
    v53 = type metadata accessor for ConversationViewModel(0);
    v54 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
    v55 = StateObject.wrappedValue.getter(v50, v51, v52, v53, v54);
    v56 = EnvironmentObject.init()(v65, v15);
    v58 = v57;
    v59 = sub_1000E482C((uint64_t)&off_100262638);
    swift_arrayDestroy(&unk_100262658, 1, &type metadata for AppSection);
    *(_OWORD *)v6 = v69;
    v60 = v68;
    *((_QWORD *)v6 + 2) = v67;
    *((_QWORD *)v6 + 3) = v60;
    *((_QWORD *)v6 + 4) = v56;
    *((_QWORD *)v6 + 5) = v58;
    *((_QWORD *)v6 + 6) = v66;
    *((_QWORD *)v6 + 7) = v41;
    *((_QWORD *)v6 + 8) = v48;
    *((_QWORD *)v6 + 9) = v55;
    *((_QWORD *)v6 + 10) = v59;
    swift_storeEnumTagMultiPayload(v6, v70, 0);
    v61 = sub_10012AC88();
    v62 = sub_100007D5C(&qword_1002943D0, type metadata accessor for TabBarLayoutView, (uint64_t)&unk_1001F5620);
    return _ConditionalContent<>.init(storage:)(v6, &type metadata for SidebarLayoutView, v72, v61, v62);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + v10[11]);
    v66 = *(_QWORD *)(a1 + v10[10]);
    v18 = v66;
    v67 = v74;
    v68 = v75;
    v20 = a1 + v10[8];
    v21 = *(_QWORD *)(v20 + 8);
    v65 = *(_QWORD *)v20;
    v22 = *(unsigned __int8 *)(v20 + 16);
    v23 = type metadata accessor for ComposeTranslationViewModel(0);
    v24 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
    swift_retain(v18);
    swift_retain(v19);
    v25 = StateObject.wrappedValue.getter(v65, v21, v22, v23, v24);
    v26 = (uint64_t *)(a1 + v10[9]);
    v27 = *v26;
    v28 = v26[1];
    v29 = *((unsigned __int8 *)v26 + 16);
    v30 = type metadata accessor for ConversationViewModel(0);
    v31 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
    v32 = StateObject.wrappedValue.getter(v27, v28, v29, v30, v31);
    *v4 = swift_getKeyPath(&unk_1001F1E98);
    v33 = sub_100006DF4(&qword_100291498);
    swift_storeEnumTagMultiPayload(v4, v33, 0);
    v34 = (int *)v72;
    v35 = (char *)v4 + *(int *)(v72 + 20);
    *(_OWORD *)v35 = v69;
    v36 = v68;
    *((_QWORD *)v35 + 2) = v67;
    *((_QWORD *)v35 + 3) = v36;
    *(_QWORD *)((char *)v4 + v34[6]) = v66;
    *(_QWORD *)((char *)v4 + v34[7]) = v19;
    *(_QWORD *)((char *)v4 + v34[8]) = v25;
    *(_QWORD *)((char *)v4 + v34[9]) = v32;
    sub_100032D68((uint64_t)v4, (uint64_t)v6, type metadata accessor for TabBarLayoutView);
    swift_storeEnumTagMultiPayload(v6, v70, 1);
    v37 = sub_10012AC88();
    v38 = sub_100007D5C(&qword_1002943D0, type metadata accessor for TabBarLayoutView, (uint64_t)&unk_1001F5620);
    _ConditionalContent<>.init(storage:)(v6, &type metadata for SidebarLayoutView, v34, v37, v38);
    return sub_10012AF44((uint64_t)v4);
  }
}

void sub_100129884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v5 = type metadata accessor for ScenePhase(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ScenePhase.background(_:), v5);
  LOBYTE(a2) = static ScenePhase.== infix(_:_:)(a2, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((a2 & 1) != 0)
  {
    v9 = type metadata accessor for MainLayoutView(0);
    v10 = (uint64_t *)(a3 + *(int *)(v9 + 32));
    v11 = *v10;
    v12 = v10[1];
    v13 = *((unsigned __int8 *)v10 + 16);
    v14 = type metadata accessor for ComposeTranslationViewModel(0);
    v15 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
    v16 = StateObject.wrappedValue.getter(v11, v12, v13, v14, v15);
    sub_100054754();
    swift_release(v16);
    v17 = (uint64_t *)(a3 + *(int *)(v9 + 36));
    v18 = *v17;
    v19 = v17[1];
    v20 = *((unsigned __int8 *)v17 + 16);
    v21 = type metadata accessor for ConversationViewModel(0);
    v22 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
    v23 = (void *)StateObject.wrappedValue.getter(v18, v19, v20, v21, v22);
    sub_100092DB0();

  }
}

void sub_1001299F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v1 = type metadata accessor for MainLayoutView(0);
  v2 = (uint64_t *)(v0 + *(int *)(v1 + 28));
  v3 = *v2;
  if (!*v2)
  {
    v30 = v2[1];
    v31 = type metadata accessor for ConversationContext(0);
    v32 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    EnvironmentObject.error()(0, v30, v31, v32);
    __break(1u);
    return;
  }
  v4 = v1;
  KeyPath = swift_getKeyPath(&unk_1001F1E50);
  v6 = swift_getKeyPath(&unk_1001F1E78);
  swift_retain(v3);
  static Published.subscript.getter(&v33, v7, KeyPath);
  swift_release(v3);
  swift_release(KeyPath);
  swift_release(v6);
  v8 = v33;
  if (!v34)
  {
    v23 = (uint64_t *)(v0 + *(int *)(v4 + 32));
    v24 = *v23;
    v25 = v23[1];
    v26 = *((unsigned __int8 *)v23 + 16);
    v27 = type metadata accessor for ComposeTranslationViewModel(0);
    v28 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
    v29 = StateObject.wrappedValue.getter(v24, v25, v26, v27, v28);
    sub_1000552F0();
    swift_release(v29);
    v21 = v8;
    v22 = 0;
    goto LABEL_13;
  }
  if (v34 == 2)
  {
    v14 = (uint64_t *)(v0 + *(int *)(v4 + 36));
    v15 = *v14;
    v16 = v14[1];
    v17 = *((unsigned __int8 *)v14 + 16);
    v18 = type metadata accessor for ConversationViewModel(0);
    v19 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
    v20 = (void *)StateObject.wrappedValue.getter(v15, v16, v17, v18, v19);
    sub_100092358();

    v21 = v8;
    v22 = 2;
LABEL_13:
    sub_1000484FC(v21, v22);
    return;
  }
  if (v34 != 5)
    sub_1000484FC(v33, v34);
  if (qword_10028A480 != -1)
    swift_once(&qword_10028A480, sub_10012112C);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA488);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "There was a connection issue with translationd; this issue is not surfaced in the app because the current tab does"
      "n't have a handler",
      v13,
      2u);
    swift_slowDealloc(v13, -1, -1);
  }

}

void sub_100129C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for MainLayoutView(0);
  v3 = (uint64_t *)(a1 + *(int *)(v2 + 36));
  v4 = *v3;
  v5 = v3[1];
  v6 = *((unsigned __int8 *)v3 + 16);
  v7 = type metadata accessor for ConversationViewModel(0);
  v8 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  v9 = StateObject.wrappedValue.getter(v4, v5, v6, v7, v8);
  v10 = (uint64_t *)(a1 + *(int *)(v2 + 24));
  v11 = *v10;
  if (*v10)
  {
    v12 = (_BYTE *)v9;
    KeyPath = swift_getKeyPath(&unk_1001F1E08);
    v14 = swift_getKeyPath(&unk_1001F1E30);
    swift_retain(v11);
    static Published.subscript.getter(&v19, v15, KeyPath);
    swift_release(v11);
    swift_release(KeyPath);
    swift_release(v14);
    v12[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_faceToFaceVisible] = v19;

  }
  else
  {
    v16 = v10[1];
    v17 = type metadata accessor for SceneContext(0);
    v18 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

uint64_t sub_100129DCC()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100129DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100104058(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, (uint64_t (*)(char *))&EnvironmentValues.scenePhase.setter);
}

_QWORD *sub_100129E00@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000AEC10();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for SequoiaAppLayoutKey, &type metadata for SequoiaAppLayoutKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_100129E4C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000AEC10();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for SequoiaAppLayoutKey, &type metadata for SequoiaAppLayoutKey, v1);
}

uint64_t type metadata accessor for MainLayoutView(uint64_t a1)
{
  uint64_t result;

  result = qword_100294318;
  if (!qword_100294318)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainLayoutView);
  return result;
}

uint64_t sub_100129ED0()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100129EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100104058(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, (uint64_t (*)(char *))&EnvironmentValues.scenePhase.setter);
}

uint64_t sub_100129F14()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100129F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100104058(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100129F48()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100129F50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100129F74()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t *sub_100129F7C(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10001F410(*(_QWORD *)a2, v8);
    *v4 = v7;
    *((_BYTE *)v4 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)((char *)v4 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_100006DF4(&qword_10028F368);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = a3[7];
    v19 = (uint64_t *)((char *)v4 + v17);
    v20 = (uint64_t *)(a2 + v17);
    v21 = *v20;
    v22 = v20[1];
    *v19 = v21;
    v19[1] = v22;
    v23 = (uint64_t *)((char *)v4 + v18);
    v24 = (uint64_t *)(a2 + v18);
    v26 = *v24;
    v25 = v24[1];
    *v23 = v26;
    v23[1] = v25;
    v27 = a3[8];
    v28 = (char *)v4 + v27;
    v29 = a2 + v27;
    v30 = *(_QWORD *)v29;
    v31 = *(_QWORD *)(v29 + 8);
    v32 = *(_BYTE *)(v29 + 16);
    swift_retain(v21);
    swift_retain(v26);
    sub_1000D6EC8(v30, v31);
    *(_QWORD *)v28 = v30;
    *((_QWORD *)v28 + 1) = v31;
    v28[16] = v32;
    v33 = a3[9];
    v34 = (char *)v4 + v33;
    v35 = a2 + v33;
    v36 = *(_QWORD *)v35;
    v37 = *(void **)(v35 + 8);
    LOBYTE(v31) = *(_BYTE *)(v35 + 16);
    sub_10012A130(*(_QWORD *)v35, v37, v31);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v31;
    v38 = a3[10];
    v39 = a3[11];
    v40 = *(_QWORD *)(a2 + v38);
    *(uint64_t *)((char *)v4 + v38) = v40;
    v41 = *(_QWORD *)(a2 + v39);
    *(uint64_t *)((char *)v4 + v39) = v41;
    v42 = a3[12];
    v15 = *(_QWORD *)(a2 + v42);
    *(uint64_t *)((char *)v4 + v42) = v15;
    swift_retain(v40);
    swift_retain(v41);
  }
  swift_retain(v15);
  return v4;
}

id sub_10012A130(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return a2;
  else
    return (id)swift_retain(a2);
}

double sub_10012A140(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_10001F470(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  swift_release(*(_QWORD *)(a1 + a2[6]));
  swift_release(*(_QWORD *)(a1 + a2[7]));
  sub_1000D705C(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  sub_10012A224(*(_QWORD *)(a1 + a2[9]), *(void **)(a1 + a2[9] + 8), *(_BYTE *)(a1 + a2[9] + 16));
  swift_release(*(_QWORD *)(a1 + a2[10]));
  swift_release(*(_QWORD *)(a1 + a2[11]));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[12])).n128_u64[0];
  return result;
}

void sub_10012A224(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_release(a2);
}

uint64_t sub_10012A234(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ScenePhase(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (uint64_t *)(a2 + v15);
  v19 = *v18;
  v20 = v18[1];
  *v17 = v19;
  v17[1] = v20;
  v21 = (_QWORD *)(a1 + v16);
  v22 = (uint64_t *)(a2 + v16);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)v27;
  v29 = *(_QWORD *)(v27 + 8);
  v30 = *(_BYTE *)(v27 + 16);
  swift_retain(v19);
  swift_retain(v24);
  sub_1000D6EC8(v28, v29);
  *(_QWORD *)v26 = v28;
  *(_QWORD *)(v26 + 8) = v29;
  *(_BYTE *)(v26 + 16) = v30;
  v31 = a3[9];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = *(void **)(v33 + 8);
  LOBYTE(v29) = *(_BYTE *)(v33 + 16);
  sub_10012A130(*(_QWORD *)v33, v35, v29);
  *(_QWORD *)v32 = v34;
  *(_QWORD *)(v32 + 8) = v35;
  *(_BYTE *)(v32 + 16) = v29;
  v36 = a3[10];
  v37 = a3[11];
  v38 = *(_QWORD *)(a2 + v36);
  *(_QWORD *)(a1 + v36) = v38;
  v39 = *(_QWORD *)(a2 + v37);
  *(_QWORD *)(a1 + v37) = v39;
  v40 = a3[12];
  v41 = *(_QWORD *)(a2 + v40);
  *(_QWORD *)(a1 + v40) = v41;
  swift_retain(v38);
  swift_retain(v39);
  swift_retain(v41);
  return a1;
}

uint64_t sub_10012A3C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10001F470(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_10000A020(a1 + v10, &qword_10028F368);
    v13 = sub_100006DF4(&qword_10028F368);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v21;
  swift_retain(v21);
  swift_release(v20);
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a1 + v22);
  v26 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v26;
  swift_retain(v26);
  swift_release(v25);
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  v27 = a3[8];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_QWORD *)v29;
  v31 = *(_QWORD *)(v29 + 8);
  LOBYTE(v24) = *(_BYTE *)(v29 + 16);
  sub_1000D6EC8(*(_QWORD *)v29, v31);
  v32 = *(_QWORD *)v28;
  v33 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)v28 = v30;
  *(_QWORD *)(v28 + 8) = v31;
  *(_BYTE *)(v28 + 16) = v24;
  sub_1000D705C(v32, v33);
  v34 = a3[9];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = *(_QWORD *)v36;
  v38 = *(void **)(v36 + 8);
  LOBYTE(v24) = *(_BYTE *)(v36 + 16);
  sub_10012A130(*(_QWORD *)v36, v38, v24);
  v39 = *(_QWORD *)v35;
  v40 = *(void **)(v35 + 8);
  v41 = *(_BYTE *)(v35 + 16);
  *(_QWORD *)v35 = v37;
  *(_QWORD *)(v35 + 8) = v38;
  *(_BYTE *)(v35 + 16) = v24;
  sub_10012A224(v39, v40, v41);
  v42 = a3[10];
  v43 = *(_QWORD *)(a2 + v42);
  v44 = *(_QWORD *)(a1 + v42);
  *(_QWORD *)(a1 + v42) = v43;
  swift_retain(v43);
  swift_release(v44);
  v45 = a3[11];
  v46 = *(_QWORD *)(a2 + v45);
  v47 = *(_QWORD *)(a1 + v45);
  *(_QWORD *)(a1 + v45) = v46;
  swift_retain(v46);
  swift_release(v47);
  v48 = a3[12];
  v49 = *(_QWORD *)(a2 + v48);
  v50 = *(_QWORD *)(a1 + v48);
  *(_QWORD *)(a1 + v48) = v49;
  swift_retain(v49);
  swift_release(v50);
  return a1;
}

uint64_t sub_10012A5D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ScenePhase(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[8];
  v13 = a3[9];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10012A6F8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10001F470(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_10000A020(a1 + v10, &qword_10028F368);
    v13 = sub_100006DF4(&qword_10028F368);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ScenePhase(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  swift_release(v18);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(uint64_t *)((char *)a2 + v19);
  swift_release(v22);
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = (uint64_t)a2 + v23;
  v26 = *(_BYTE *)(v25 + 16);
  v27 = *(_QWORD *)v24;
  v28 = *(_QWORD *)(v24 + 8);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_BYTE *)(v24 + 16) = v26;
  sub_1000D705C(v27, v28);
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = (uint64_t)a2 + v29;
  v32 = *(_BYTE *)(v31 + 16);
  v33 = *(_QWORD *)v30;
  v34 = *(void **)(v30 + 8);
  v35 = *(_BYTE *)(v30 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_BYTE *)(v30 + 16) = v32;
  sub_10012A224(v33, v34, v35);
  v36 = a3[10];
  v37 = *(_QWORD *)(a1 + v36);
  *(_QWORD *)(a1 + v36) = *(uint64_t *)((char *)a2 + v36);
  swift_release(v37);
  v38 = a3[11];
  v39 = *(_QWORD *)(a1 + v38);
  *(_QWORD *)(a1 + v38) = *(uint64_t *)((char *)a2 + v38);
  swift_release(v39);
  v40 = a3[12];
  v41 = *(_QWORD *)(a1 + v40);
  *(_QWORD *)(a1 + v40) = *(uint64_t *)((char *)a2 + v40);
  swift_release(v41);
  return a1;
}

uint64_t sub_10012A8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A8BC);
}

uint64_t sub_10012A8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100006DF4(&qword_10028F370);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10012A940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A94C);
}

uint64_t sub_10012A94C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_10028F370);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

void sub_10012A9CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "\t";
  sub_100087158(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1001F1D40;
    v4[3] = &unk_1001F1D40;
    v4[4] = &unk_1001F1D58;
    v4[5] = &unk_1001F1D58;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

uint64_t sub_10012AA68(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100215490, 1);
}

uint64_t sub_10012AA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainLayoutView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10012AAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MainLayoutView(0) - 8) + 80);
  sub_100129884(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_10012AB0C()
{
  return sub_10012AB30(&qword_1002943A8, &qword_100294378, (void (*)(void))sub_10012ABA0, (void (*)(void))sub_10012ACCC);
}

uint64_t sub_10012AB30(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000070BC(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10012ABA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002943B0;
  if (!qword_1002943B0)
  {
    v1 = sub_1000070BC(&qword_100294370);
    sub_10012AC04();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002943B0);
  }
  return result;
}

unint64_t sub_10012AC04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002943B8;
  if (!qword_1002943B8)
  {
    v1 = sub_1000070BC(&qword_1002943C0);
    sub_10012AC88();
    sub_100007D5C(&qword_1002943D0, type metadata accessor for TabBarLayoutView, (uint64_t)&unk_1001F5620);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002943B8);
  }
  return result;
}

unint64_t sub_10012AC88()
{
  unint64_t result;

  result = qword_1002943C8;
  if (!qword_1002943C8)
  {
    result = swift_getWitnessTable("ͥ\a", &type metadata for SidebarLayoutView);
    atomic_store(result, (unint64_t *)&qword_1002943C8);
  }
  return result;
}

unint64_t sub_10012ACCC()
{
  unint64_t result;

  result = qword_1002943D8;
  if (!qword_1002943D8)
  {
    result = swift_getWitnessTable(&unk_1001ED2A8, &type metadata for FaceToFacePresentation);
    atomic_store(result, (unint64_t *)&qword_1002943D8);
  }
  return result;
}

unint64_t sub_10012AD10()
{
  unint64_t result;

  result = qword_1002943E0;
  if (!qword_1002943E0)
  {
    result = swift_getWitnessTable(&unk_1001E6AF8, &type metadata for BroadcastPresentation);
    atomic_store(result, (unint64_t *)&qword_1002943E0);
  }
  return result;
}

void sub_10012AD60()
{
  type metadata accessor for MainLayoutView(0);
  sub_1001299F8();
}

uint64_t sub_10012ADA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int *)type metadata accessor for MainLayoutView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001F470(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_100006DF4(&qword_10028F368);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v6 + v1[6]));
  swift_release(*(_QWORD *)(v6 + v1[7]));
  sub_1000D705C(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  sub_10012A224(*(_QWORD *)(v6 + v1[9]), *(void **)(v6 + v1[9] + 8), *(_BYTE *)(v6 + v1[9] + 16));
  swift_release(*(_QWORD *)(v6 + v1[10]));
  swift_release(*(_QWORD *)(v6 + v1[11]));
  swift_release(*(_QWORD *)(v6 + v1[12]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10012AECC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MainLayoutView(0) - 8) + 80);
  sub_100129C7C(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10012AF00()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10012AF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100104058(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10012AF44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TabBarLayoutView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012AF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v0 = sub_1000070BC(&qword_100294390);
  v1 = sub_1000070BC(&qword_100294388);
  v2 = type metadata accessor for UUID(255);
  v7 = sub_1000070BC(&qword_100294380);
  v8 = (void *)type metadata accessor for ScenePhase(255);
  v9 = sub_10012AB30(&qword_1002943A0, &qword_100294380, (void (*)(void))sub_10012AB0C, (void (*)(void))sub_10012AD10);
  v10 = (void *)sub_100007D5C(&qword_10028F4D0, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v4 = sub_100007D5C((unint64_t *)&qword_1002900F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = v1;
  v8 = (void *)v2;
  v9 = OpaqueTypeConformance2;
  v10 = (void *)v4;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v7 = v0;
  v8 = &type metadata for Bool;
  v9 = v5;
  v10 = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_10012B0D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10012B14C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain(v8);
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t sub_10012B1F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_10012B210(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_10012B260(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_10012B2B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_10012B300(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_10012B350(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10012B410 + 4 * byte_1001F1ED0[(v8 - 1)]))();
}

void sub_10012B470(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = &dword_100000004;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for MinHeightAnimatingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MinHeightAnimatingView);
}

void *sub_10012B648()
{
  return &protocol witness table for Double;
}

uint64_t sub_10012B654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

double sub_10012B66C()
{
  uint64_t v0;

  return *(double *)v0;
}

void sub_10012B674(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t sub_10012B67C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  char v21;
  char v22;
  _QWORD v23[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for ModifiedContent(0, v5, &type metadata for _FlexFrameLayout);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v23 - v12;
  v14 = *v2;
  v15 = static Alignment.center.getter(v11);
  v16 = *(_QWORD *)(a1 + 24);
  v22 = 1;
  v21 = 1;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0, 1, v14, 0, 0, v21, 0, v22, v15, v17, v5, v16);
  v23[0] = v16;
  v23[1] = &protocol witness table for _FlexFrameLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v18(v13, v10, v6);
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v10, v6);
  v18(a2, v13, v6);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, v6);
}

uint64_t sub_10012B7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001F1F08, a3);
  return static View<>._makeView(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t sub_10012B850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1001F1F08, a3);
  return static View<>._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

void sub_10012B8B8(double *a1@<X8>)
{
  *a1 = sub_10012B66C();
}

void sub_10012B8DC(double *a1)
{
  sub_10012B674(*a1);
}

void (*sub_10012B8E4(uint64_t a1, uint64_t a2))(double *a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = a2;
  *(double *)a1 = sub_10012B66C();
  return sub_10012B918;
}

void sub_10012B918(double *a1)
{
  sub_10012B674(*a1);
}

uint64_t sub_10012B93C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1002154F4, 1);
}

uint64_t sub_10012B970(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _FlexFrameLayout);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

char *sub_10012B9C8(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  double v22;
  id v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  Class isa;
  id v44;
  id v45;
  uint64_t v47;
  id v48;
  id v49;
  objc_super v50;

  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_paddingDefault] = 0x4028000000000000;
  v9 = OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_moreHistoryView;
  v10 = objc_allocWithZone((Class)type metadata accessor for MoreHistoryView());
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = &v11[OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_delegate];
  *((_QWORD *)v12 + 1) = 0;
  swift_unknownObjectWeakInit(v12, 0);

  v50.receiver = v11;
  v50.super_class = (Class)type metadata accessor for MoreHistoryCollectionViewCell();
  v13 = (char *)objc_msgSendSuper2(&v50, "initWithFrame:", a1, a2, a3, a4);
  v14 = OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_moreHistoryView;
  v15 = *(void **)&v13[OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_moreHistoryView];
  v16 = v13;
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v17 = objc_msgSend(v16, "contentView");
  objc_msgSend(v17, "addSubview:", v15);

  v18 = objc_msgSend(v16, "contentView");
  v19 = objc_msgSend(v18, "trailingAnchor");

  v20 = objc_msgSend(*(id *)&v13[v14], "trailingAnchor");
  v47 = OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_paddingDefault;
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v20, *(double *)&v16[OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_paddingDefault]);

  LODWORD(v22) = 1148829696;
  objc_msgSend(v21, "setPriority:", v22);
  v23 = objc_msgSend(*(id *)&v13[v14], "heightAnchor");
  v48 = objc_msgSend(v23, "constraintGreaterThanOrEqualToConstant:", 48.0);

  LODWORD(v24) = 1148829696;
  objc_msgSend(v48, "setPriority:", v24);
  v49 = (id)objc_opt_self(NSLayoutConstraint);
  v25 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1001E98F0;
  v27 = objc_msgSend(*(id *)&v13[v14], "topAnchor");
  v28 = objc_msgSend(v16, "contentView");
  v29 = objc_msgSend(v28, "topAnchor");

  v30 = objc_msgSend(v27, "constraintEqualToAnchor:", v29);
  *(_QWORD *)(v26 + 32) = v30;
  v31 = objc_msgSend(*(id *)&v13[v14], "leadingAnchor");
  v32 = objc_msgSend(v16, "contentView");
  v33 = objc_msgSend(v32, "leadingAnchor");

  v34 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v33, *(double *)&v16[v47]);
  *(_QWORD *)(v26 + 40) = v34;
  *(_QWORD *)(v26 + 48) = v21;
  v35 = *(void **)&v13[v14];
  v36 = v21;
  v37 = objc_msgSend(v35, "bottomAnchor");
  v38 = objc_msgSend(v16, "contentView");
  v39 = objc_msgSend(v38, "bottomAnchor");

  v40 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v39, -*(double *)&v16[v47]);
  *(_QWORD *)(v26 + 56) = v40;
  *(_QWORD *)(v26 + 64) = v48;
  specialized Array._endMutation()(v41);
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  v42 = v48;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v49, "activateConstraints:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

  v44 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v16, "tapped:");
  objc_msgSend(v44, "setNumberOfTapsRequired:", 1);
  objc_msgSend(v16, "addGestureRecognizer:", v44);
  v45 = objc_msgSend(objc_allocWithZone((Class)UILongPressGestureRecognizer), "initWithTarget:action:", v16, "gestureUpdated:");
  objc_msgSend(v45, "setMinimumPressDuration:", 0.5);
  objc_msgSend(v16, "addGestureRecognizer:", v45);

  return v16;
}

id sub_10012C188()
{
  return sub_100085B40(type metadata accessor for MoreHistoryCollectionViewCell);
}

uint64_t type metadata accessor for MoreHistoryCollectionViewCell()
{
  return objc_opt_self(_TtC17SequoiaTranslator29MoreHistoryCollectionViewCell);
}

id sub_10012C1EC()
{
  id v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  NSString v5;
  id v6;
  id v7;
  Swift::String v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._object = (void *)0x80000001001FE210;
  v2._object = (void *)0x80000001001FE1F0;
  v2._countAndFlagsBits = 0xD000000000000011;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD000000000000011;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._object;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "setText:", v5);

  v6 = objc_msgSend((id)objc_opt_self(UIFont), "boldSystemFontOfSize:", 16.0);
  objc_msgSend(v0, "setFont:", v6);

  v7 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v7);

  return v0;
}

id sub_10012C36C()
{
  id v0;
  NSString v1;
  id v2;
  id v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v1);

  objc_msgSend(v0, "setImage:", v2);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  objc_msgSend(v0, "setTintColor:", v3);

  return v0;
}

char *sub_10012C464(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;
  void *v15;
  id v16;
  objc_class *v17;
  char *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  char *v34;
  id v35;
  void *v36;
  char *v37;
  id v38;
  id v39;
  uint64_t v40;
  Class isa;
  id v43;
  _QWORD v44[3];
  objc_class *v45;
  _QWORD v46[3];
  uint64_t v47;
  objc_super v48;

  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_paddingDefault] = 0x4028000000000000;
  v9 = OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_moreHistoryLabel;
  v10 = v4;
  *(_QWORD *)&v4[v9] = sub_10012C1EC();
  v11 = OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_disclosureIndictor;
  v12 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

  objc_msgSend(v12, "setImage:", v14);
  v15 = (void *)objc_opt_self(UIColor);
  v16 = objc_msgSend(v15, "secondarySystemFillColor");
  objc_msgSend(v12, "setTintColor:", v16);

  *(_QWORD *)&v10[v11] = v12;
  v17 = (objc_class *)type metadata accessor for MoreHistoryView();
  v48.receiver = v10;
  v48.super_class = v17;
  v18 = (char *)objc_msgSendSuper2(&v48, "initWithFrame:", a1, a2, a3, a4);
  v19 = objc_msgSend(v15, "secondarySystemGroupedBackgroundColor");
  objc_msgSend(v18, "setBackgroundColor:", v19);

  v20 = objc_msgSend(v18, "layer");
  objc_msgSend(v20, "setCornerRadius:", 10.0);

  v21 = OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_moreHistoryLabel;
  v22 = *(void **)&v18[OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_moreHistoryLabel];
  objc_msgSend(v18, "addSubview:", v22);
  v23 = OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_disclosureIndictor;
  objc_msgSend(v18, "addSubview:", *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_disclosureIndictor]);
  v43 = (id)objc_opt_self(NSLayoutConstraint);
  v24 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v25 = swift_allocObject(v24, 64, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1001E7590;
  v26 = objc_msgSend(v22, "leadingAnchor");
  v27 = objc_msgSend(v18, "leadingAnchor");
  v28 = OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_paddingDefault;
  v29 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v27, *(double *)&v18[OBJC_IVAR____TtC17SequoiaTranslator15MoreHistoryView_paddingDefault]);

  *(_QWORD *)(v25 + 32) = v29;
  v30 = objc_msgSend(v18, "trailingAnchor");
  v31 = objc_msgSend(*(id *)&v18[v23], "trailingAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:constant:", v31, *(double *)&v18[v28]);

  *(_QWORD *)(v25 + 40) = v32;
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  v33 = *(void **)&v18[v21];
  v47 = sub_10000A05C(0, &qword_1002944F0, UILabel_ptr);
  v45 = v17;
  v46[0] = v33;
  v44[0] = v18;
  v34 = v18;
  v35 = v33;
  *(_QWORD *)(v25 + 48) = sub_10012C8C8(v46, 10, 0, v44, 10, 1.0, 0.0);
  v36 = *(void **)&v18[v23];
  v47 = sub_10000A05C(0, &qword_1002944F8, UIImageView_ptr);
  v45 = v17;
  v46[0] = v36;
  v44[0] = v34;
  v37 = v34;
  v38 = v36;
  v39 = sub_10012C8C8(v46, 10, 0, v44, 10, 1.0, 0.0);
  *(_QWORD *)(v25 + 56) = v39;
  v46[0] = v25;
  specialized Array._endMutation()(v39);
  v40 = v46[0];
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v43, "activateConstraints:", isa, swift_bridgeObjectRelease(v40).n128_f64[0]);

  return v37;
}

id sub_10012C8C8(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  id v27;
  uint64_t v29;
  uint64_t v30;

  v8 = v7;
  v16 = a1[3];
  v17 = sub_100023AF4(a1, v16);
  v18 = _bridgeAnythingToObjectiveC<A>(_:)(v17, v16);
  v19 = a4[3];
  if (v19)
  {
    v20 = sub_100023AF4(a4, a4[3]);
    v29 = a5;
    v30 = a2;
    v21 = a3;
    v22 = *(_QWORD *)(v19 - 8);
    __chkstk_darwin(v20);
    v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v22 + 16))(v24);
    v25 = _bridgeAnythingToObjectiveC<A>(_:)(v24, v19);
    v26 = *(void (**)(char *, uint64_t))(v22 + 8);
    a3 = v21;
    v26(v24, v19);
    a5 = v29;
    a2 = v30;
    sub_100009C08(a4);
  }
  else
  {
    v25 = 0;
  }
  v27 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v18, a2, a3, v25, a5, a6, a7);
  swift_unknownObjectRelease(v18);
  swift_unknownObjectRelease(v25);
  sub_100009C08(a1);
  return v27;
}

id sub_10012CAF4()
{
  return sub_100085B40(type metadata accessor for MoreHistoryView);
}

uint64_t type metadata accessor for MoreHistoryView()
{
  return objc_opt_self(_TtC17SequoiaTranslator15MoreHistoryView);
}

uint64_t sub_10012CB58()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  _QWORD v7[5];
  uint64_t v8;

  objc_msgSend(v0, "setHighlighted:", 1);
  v1 = (void *)objc_opt_self(UIView);
  v2 = swift_allocObject(&unk_10026C968, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v7[4] = sub_10012CC84;
  v8 = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100075908;
  v7[3] = &unk_10026C980;
  v3 = _Block_copy(v7);
  v4 = v8;
  v5 = v0;
  swift_release(v4);
  objc_msgSend(v1, "animateWithDuration:delay:options:animations:completion:", 0x20000, v3, 0, 0.3, 0.0);
  _Block_release(v3);
  result = swift_unknownObjectWeakLoadStrong(&v5[OBJC_IVAR____TtC17SequoiaTranslator29MoreHistoryCollectionViewCell_delegate]);
  if (result)
    return swift_unknownObjectRelease(result);
  return result;
}

uint64_t sub_10012CC60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10012CC84()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setHighlighted:", 0);
}

uint64_t sub_10012CC98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10012CCA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

char *sub_10012CCB0(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
  }
  else
  {
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    *((_QWORD *)a1 + 3) = a2[3];
    v9 = a2 + 4;
    v10 = (unint64_t)a2[5];
    v11 = v5;
    swift_retain(v8);
    if (v10 >= 5)
    {
      *((_QWORD *)a1 + 4) = *v9;
      *((_QWORD *)a1 + 5) = v10;
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      *((_OWORD *)a1 + 2) = *(_OWORD *)v9;
    }
    a1[48] = *((_BYTE *)a2 + 48);
    *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
    v12 = a3[10];
    v13 = &a1[v12];
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for Locale(0);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v16(&a1[a3[11]], (uint64_t)a2 + a3[11], v15);
    v17 = a3[12];
    v18 = &a1[v17];
    v19 = (uint64_t)a2 + v17;
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = v20;
      v21 = *(_QWORD *)(v19 + 24);
      *((_QWORD *)v18 + 2) = *(_QWORD *)(v19 + 16);
      *((_QWORD *)v18 + 3) = v21;
      v22 = *(_QWORD *)(v19 + 40);
      *((_QWORD *)v18 + 4) = *(_QWORD *)(v19 + 32);
      *((_QWORD *)v18 + 5) = v22;
      *((_OWORD *)v18 + 3) = *(_OWORD *)(v19 + 48);
      v18[64] = *(_BYTE *)(v19 + 64);
      v23 = *(void **)(v19 + 72);
      v24 = *(void **)(v19 + 80);
      *((_QWORD *)v18 + 9) = v23;
      *((_QWORD *)v18 + 10) = v24;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      v25 = v23;
      v26 = v24;
    }
    else
    {
      v27 = *(_OWORD *)(v19 + 48);
      *((_OWORD *)v18 + 2) = *(_OWORD *)(v19 + 32);
      *((_OWORD *)v18 + 3) = v27;
      *((_OWORD *)v18 + 4) = *(_OWORD *)(v19 + 64);
      *((_QWORD *)v18 + 10) = *(_QWORD *)(v19 + 80);
      v28 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = v28;
    }
    v29 = a3[13];
    v30 = a3[14];
    v31 = *(uint64_t *)((char *)a2 + v29);
    *(_QWORD *)&a1[v29] = v31;
    v32 = &a1[v30];
    v33 = (uint64_t)a2 + v30;
    v34 = *(uint64_t *)((char *)a2 + v30);
    swift_bridgeObjectRetain(v31);
    if (v34)
    {
      v35 = *(_QWORD *)(v33 + 8);
      *(_QWORD *)v32 = v34;
      *((_QWORD *)v32 + 1) = v35;
      swift_retain(v35);
    }
    else
    {
      *(_OWORD *)v32 = *(_OWORD *)v33;
    }
    v36 = a3[15];
    v37 = &a1[v36];
    v38 = (uint64_t)a2 + v36;
    *v37 = *(_BYTE *)v38;
    v5 = *(char **)(v38 + 8);
    *((_QWORD *)v37 + 1) = v5;
  }
  swift_retain(v5);
  return a1;
}

uint64_t sub_10012CE94(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  swift_release(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >= 5)
    swift_bridgeObjectRelease(v4);
  v5 = a1 + a2[10];
  v6 = type metadata accessor for Locale(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + a2[11], v6);
  v8 = a1 + a2[12];
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 40));

  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13]));
  v10 = (_QWORD *)(a1 + a2[14]);
  if (*v10)
    swift_release(v10[1]);
  return swift_release(*(_QWORD *)(a1 + a2[15] + 8));
}

uint64_t sub_10012CF80(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v8;
  v10 = (_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v6;
  swift_retain(v9);
  if (v11 >= 5)
  {
    *(_QWORD *)(a1 + 32) = *v10;
    *(_QWORD *)(a1 + 40) = v11;
    swift_bridgeObjectRetain(v11);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  v13 = a3[10];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Locale(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  v17(a1 + a3[11], a2 + a3[11], v16);
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(v20 + 8);
  if (v21)
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_QWORD *)(v19 + 8) = v21;
    v22 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
    *(_QWORD *)(v19 + 24) = v22;
    v23 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
    *(_QWORD *)(v19 + 40) = v23;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(v20 + 48);
    *(_BYTE *)(v19 + 64) = *(_BYTE *)(v20 + 64);
    v24 = *(void **)(v20 + 72);
    v25 = *(void **)(v20 + 80);
    *(_QWORD *)(v19 + 72) = v24;
    *(_QWORD *)(v19 + 80) = v25;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v26 = v24;
    v27 = v25;
  }
  else
  {
    v28 = *(_OWORD *)(v20 + 48);
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
    *(_OWORD *)(v19 + 48) = v28;
    *(_OWORD *)(v19 + 64) = *(_OWORD *)(v20 + 64);
    *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
    v29 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v29;
  }
  v30 = a3[13];
  v31 = a3[14];
  v32 = *(_QWORD *)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v32;
  v33 = (_QWORD *)(a1 + v31);
  v34 = a2 + v31;
  v35 = *(_QWORD *)(a2 + v31);
  swift_bridgeObjectRetain(v32);
  if (v35)
  {
    v36 = *(_QWORD *)(v34 + 8);
    *v33 = v35;
    v33[1] = v36;
    swift_retain(v36);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)v34;
  }
  v37 = a3[15];
  v38 = a1 + v37;
  v39 = a2 + v37;
  *(_BYTE *)v38 = *(_BYTE *)v39;
  v40 = *(_QWORD *)(v39 + 8);
  *(_QWORD *)(v38 + 8) = v40;
  swift_retain(v40);
  return a1;
}

uint64_t sub_10012D13C(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  swift_retain(v10);
  swift_release(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  if (v11 < 5)
  {
    if (v12 >= 5)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v13 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v13;
      swift_bridgeObjectRetain(v13);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v12 < 5)
  {
    sub_10012D4AC(a1 + 32);
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v11);
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Locale(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24);
  v19(v16, v17, v18);
  v19(a1 + a3[11], a2 + a3[11], v18);
  v20 = a3[12];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a1 + v20 + 8);
  v24 = *(_QWORD *)(a2 + v20 + 8);
  if (v23)
  {
    if (v24)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v25 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v21 + 8) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v23);
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
      v26 = *(_QWORD *)(v22 + 24);
      v27 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
      v28 = *(_QWORD *)(v22 + 40);
      v29 = *(_QWORD *)(v21 + 40);
      *(_QWORD *)(v21 + 40) = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v29);
      *(_QWORD *)(v21 + 48) = *(_QWORD *)(v22 + 48);
      *(_QWORD *)(v21 + 56) = *(_QWORD *)(v22 + 56);
      *(_BYTE *)(v21 + 64) = *(_BYTE *)(v22 + 64);
      v30 = *(void **)(v22 + 72);
      v31 = *(void **)(v21 + 72);
      *(_QWORD *)(v21 + 72) = v30;
      v32 = v30;

      v33 = *(void **)(v22 + 80);
      v34 = *(void **)(v21 + 80);
      *(_QWORD *)(v21 + 80) = v33;
      v35 = v33;

    }
    else
    {
      sub_1000137F8(v21);
      v43 = *(_OWORD *)(v22 + 16);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(v21 + 16) = v43;
      v45 = *(_OWORD *)(v22 + 48);
      v44 = *(_OWORD *)(v22 + 64);
      v46 = *(_OWORD *)(v22 + 32);
      *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
      *(_OWORD *)(v21 + 48) = v45;
      *(_OWORD *)(v21 + 64) = v44;
      *(_OWORD *)(v21 + 32) = v46;
    }
  }
  else if (v24)
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v36 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v21 + 8) = v36;
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
    v37 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v21 + 24) = v37;
    *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
    v38 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v21 + 40) = v38;
    *(_QWORD *)(v21 + 48) = *(_QWORD *)(v22 + 48);
    *(_QWORD *)(v21 + 56) = *(_QWORD *)(v22 + 56);
    *(_BYTE *)(v21 + 64) = *(_BYTE *)(v22 + 64);
    v39 = *(void **)(v22 + 72);
    *(_QWORD *)(v21 + 72) = v39;
    v40 = *(void **)(v22 + 80);
    *(_QWORD *)(v21 + 80) = v40;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    v41 = v39;
    v42 = v40;
  }
  else
  {
    v47 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v47;
    v48 = *(_OWORD *)(v22 + 32);
    v49 = *(_OWORD *)(v22 + 48);
    v50 = *(_OWORD *)(v22 + 64);
    *(_QWORD *)(v21 + 80) = *(_QWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 48) = v49;
    *(_OWORD *)(v21 + 64) = v50;
    *(_OWORD *)(v21 + 32) = v48;
  }
  v51 = a3[13];
  v52 = *(_QWORD *)(a2 + v51);
  v53 = *(_QWORD *)(a1 + v51);
  *(_QWORD *)(a1 + v51) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v54 = a3[14];
  v55 = (_QWORD *)(a1 + v54);
  v56 = a2 + v54;
  v57 = *(_QWORD *)(a1 + v54);
  v58 = *(_QWORD *)(a2 + v54);
  if (!v57)
  {
    if (v58)
    {
      v61 = *(_QWORD *)(v56 + 8);
      *v55 = v58;
      v55[1] = v61;
      swift_retain(v61);
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)v55 = *(_OWORD *)v56;
    goto LABEL_22;
  }
  if (!v58)
  {
    swift_release(v55[1]);
    goto LABEL_21;
  }
  v59 = *(_QWORD *)(v56 + 8);
  v60 = v55[1];
  *v55 = v58;
  v55[1] = v59;
  swift_retain(v59);
  swift_release(v60);
LABEL_22:
  v62 = a3[15];
  v63 = a1 + v62;
  v64 = a2 + v62;
  *(_BYTE *)v63 = *(_BYTE *)v64;
  v65 = *(_QWORD *)(v63 + 8);
  v66 = *(_QWORD *)(v64 + 8);
  *(_QWORD *)(v63 + 8) = v66;
  swift_retain(v66);
  swift_release(v65);
  return a1;
}

uint64_t sub_10012D4AC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

uint64_t sub_10012D4E0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Locale(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + a3[11], a2 + a3[11], v10);
  v12 = a3[12];
  v13 = a3[13];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)(v14 + 80) = *(_QWORD *)(v15 + 80);
  v16 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v14 + 48) = v16;
  *(_OWORD *)(v14 + 64) = *(_OWORD *)(v15 + 64);
  v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v18 = a3[14];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  if (*v20)
  {
    v22 = v20[1];
    *v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10012D5EC(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v8;
  swift_release(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = (_OWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 < 5)
    goto LABEL_4;
  v11 = *(_QWORD *)(a2 + 40);
  if (v11 < 5)
  {
    sub_10012D4AC(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v9;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRelease(v10);
LABEL_6:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  v12 = a3[10];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Locale(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + a3[11], a2 + a3[11], v15);
  v17 = a3[12];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17 + 8);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 8);
    if (v21)
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_QWORD *)(v18 + 8) = v21;
      swift_bridgeObjectRelease(v20);
      v22 = *(_QWORD *)(v19 + 24);
      v23 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
      *(_QWORD *)(v18 + 24) = v22;
      swift_bridgeObjectRelease(v23);
      v24 = *(_QWORD *)(v19 + 40);
      v25 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
      *(_QWORD *)(v18 + 40) = v24;
      swift_bridgeObjectRelease(v25);
      *(_OWORD *)(v18 + 48) = *(_OWORD *)(v19 + 48);
      *(_BYTE *)(v18 + 64) = *(_BYTE *)(v19 + 64);
      v26 = *(void **)(v18 + 72);
      *(_QWORD *)(v18 + 72) = *(_QWORD *)(v19 + 72);

      v27 = *(void **)(v18 + 80);
      *(_QWORD *)(v18 + 80) = *(_QWORD *)(v19 + 80);

      goto LABEL_11;
    }
    sub_1000137F8(v18);
  }
  v28 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48) = v28;
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v19 + 64);
  *(_QWORD *)(v18 + 80) = *(_QWORD *)(v19 + 80);
  v29 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v29;
LABEL_11:
  v30 = a3[13];
  v31 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[14];
  v33 = (_QWORD *)(a1 + v32);
  v34 = a2 + v32;
  v35 = *(_QWORD *)(a1 + v32);
  v36 = *(_QWORD *)(a2 + v32);
  if (!v35)
  {
    if (v36)
    {
      v39 = *(_QWORD *)(v34 + 8);
      *v33 = v36;
      v33[1] = v39;
      goto LABEL_18;
    }
LABEL_17:
    *(_OWORD *)v33 = *(_OWORD *)v34;
    goto LABEL_18;
  }
  if (!v36)
  {
    swift_release(v33[1]);
    goto LABEL_17;
  }
  v37 = *(_QWORD *)(v34 + 8);
  v38 = v33[1];
  *v33 = v36;
  v33[1] = v37;
  swift_release(v38);
LABEL_18:
  v40 = a3[15];
  v41 = a1 + v40;
  v42 = a2 + v40;
  *(_BYTE *)v41 = *(_BYTE *)v42;
  v43 = *(_QWORD *)(v41 + 8);
  *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 8);
  swift_release(v43);
  return a1;
}

uint64_t sub_10012D81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012D828);
}

uint64_t sub_10012D828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 40), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 52));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10012D8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012D8B4);
}

uint64_t sub_10012D8B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 40), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 52)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MoreOptionsMenu(uint64_t a1)
{
  uint64_t result;

  result = qword_100294558;
  if (!qword_100294558)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MoreOptionsMenu);
  return result;
}

uint64_t sub_10012D96C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;

  v4[0] = &unk_1001F2018;
  v4[1] = &unk_1001F2018;
  v4[2] = &unk_1001F2030;
  v4[3] = &unk_1001F2048;
  v4[4] = &unk_1001F2048;
  v4[5] = &unk_1001F2048;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_1001F2060;
    v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v9 = &unk_1001F2018;
    v10 = &unk_1001F2018;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10012DA14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100215604, 1);
}

uint64_t sub_10012DA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  char v4;
  char v5;
  void *v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for MoreOptionsMenu(0);
  __chkstk_darwin(v1);
  v3 = (void **)((char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = *(_BYTE *)(v0 + 48);
  sub_10012F6A4(v0, (uint64_t)v3);
  if ((v4 & 1) != 0)
  {
    v5 = 1;
LABEL_5:
    sub_10012F8FC((uint64_t)v3);
    return v5 & 1;
  }
  v6 = *v3;
  if (*v3)
  {
    KeyPath = swift_getKeyPath(&unk_1001F2218);
    v8 = swift_getKeyPath(&unk_1001F2288);
    v9 = v6;
    static Published.subscript.getter(&v15, v9, KeyPath);

    swift_release(KeyPath);
    swift_release(v8);
    v5 = v15 ^ 1;
    goto LABEL_5;
  }
  v11 = v3[1];
  v12 = type metadata accessor for SharedTranslationOptions(0);
  v13 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  result = EnvironmentObject.error()(0, v11, v12, v13);
  __break(1u);
  return result;
}

uint64_t sub_10012DB48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;

  v48 = a1;
  v43 = type metadata accessor for MoreOptionsMenu(0);
  v2 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
  v46 = *(_QWORD *)(v43 - 8);
  v47 = v2;
  __chkstk_darwin(v43);
  v45 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for MenuOrder(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_1002945B8);
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_1002945C0);
  v41 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100006DF4(&qword_1002945C8);
  __chkstk_darwin(v44);
  v37 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v1;
  v13 = sub_100006DF4(&qword_1002945D0);
  v14 = sub_100006DF4(&qword_1002945D8);
  v15 = sub_10012F620();
  v16 = sub_100012334(&qword_1002945E8, &qword_1002945D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v17 = Menu.init(content:label:)(sub_10012F618, v49, sub_10012F0FC, 0, v13, v14, v15, v16);
  static MenuOrder.fixed.getter(v17);
  v18 = sub_100012334(&qword_1002945F0, &qword_1002945B8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  View.menuOrder(_:)(v5, v6, v18);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v42);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v6);
  v53 = v6;
  v54 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of View.menuOrder(_:)>>, 1);
  v20 = (uint64_t)v37;
  View.accessibilityIdentifier(_:)(0x7474754265726F6DLL, 0xEA00000000006E6FLL, v9, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v9);
  v21 = v38;
  v22 = v38 + *(int *)(v43 + 60);
  v23 = *(_BYTE *)v22;
  v24 = *(_QWORD *)(v22 + 8);
  v51 = v23;
  v52 = v24;
  v25 = sub_100006DF4(&qword_10028CF50);
  State.projectedValue.getter(&v53, v25);
  v26 = v53;
  v27 = v54;
  v28 = v55;
  v29 = v45;
  sub_10012F6A4(v21, v45);
  v30 = *(unsigned __int8 *)(v46 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = swift_allocObject(&unk_10026C9B8, v31 + v47, v30 | 7);
  sub_10012F6EC(v29, v32 + v31);
  v33 = type metadata accessor for AudioRoutingMenu(0);
  v34 = sub_10012F76C();
  v35 = sub_100007D5C(&qword_100294600, type metadata accessor for AudioRoutingMenu, (uint64_t)&unk_1001E6A20);
  View.sheet<A>(isPresented:onDismiss:content:)(v26, v27, v28, 0, 0, sub_10012F730, v32, v44, v33, v34, v35);
  swift_release(v27);
  swift_release(v32);
  swift_release(v26);
  return sub_10000A020(v20, &qword_1002945C8);
}

uint64_t sub_10012DF2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void (*v86)(uint64_t, char *, uint64_t);
  char *v87;
  void *v88;
  uint64_t v89;
  unsigned int v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  uint64_t v108;
  void (*v109)(uint64_t, char *, uint64_t);
  void (*v110)(_QWORD, _QWORD);
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *(*v142)(_BYTE *);
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, char *, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  uint64_t result;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  int v166;
  int v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(_QWORD, _QWORD);
  char *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  _BYTE *(*v201)(_BYTE *);
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206[8];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  ValueMetadata *v211;
  unint64_t v212;

  v194 = a2;
  v190 = sub_100006DF4(&qword_100294608);
  __chkstk_darwin(v190);
  v192 = (uint64_t *)((char *)&v165 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v191 = sub_100006DF4(&qword_100294610);
  __chkstk_darwin(v191);
  v5 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_10028E080);
  __chkstk_darwin(v6);
  v171 = (char *)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100006DF4(&qword_10028AD50);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v173 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100006DF4(&qword_10028AD68);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v172 = (char *)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100294618);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v165 - v14;
  v16 = sub_100006DF4(&qword_100294620);
  v17 = __chkstk_darwin(v16);
  v193 = (char *)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v203 = (uint64_t)&v165 - v19;
  v20 = type metadata accessor for Divider(0);
  v21 = *(_QWORD *)(v20 - 8);
  v204 = v20;
  v205 = v21;
  v22 = __chkstk_darwin(v20);
  v200 = (char *)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v186 = (char *)&v165 - v25;
  __chkstk_darwin(v24);
  v202 = (char *)&v165 - v26;
  v27 = type metadata accessor for MoreOptionsMenu(0);
  v169 = *(_QWORD *)(v27 - 8);
  v28 = *(_QWORD *)(v169 + 64);
  v29 = __chkstk_darwin(v27);
  v170 = (uint64_t)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v165 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v165 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v165 - v36;
  v211 = &type metadata for TranslateFeatures;
  v212 = sub_100009BC4();
  LOBYTE(v208) = 8;
  v38 = isFeatureEnabled(_:)(&v208);
  sub_100009C08(&v208);
  sub_10012F6A4((uint64_t)a1, (uint64_t)v37);
  v185 = (void (*)(_QWORD, _QWORD))v13;
  if ((v38 & 1) == 0)
  {
    sub_10012F8FC((uint64_t)v37);
    sub_10012F6A4((uint64_t)a1, (uint64_t)v35);
    goto LABEL_8;
  }
  v39 = v37[50];
  sub_10012F8FC((uint64_t)v37);
  sub_10012F6A4((uint64_t)a1, (uint64_t)v35);
  if (v39 != 1)
  {
LABEL_8:
    sub_10012F8FC((uint64_t)v35);
    sub_10012F6A4((uint64_t)a1, (uint64_t)v32);
    goto LABEL_9;
  }
  v40 = *((_QWORD *)v35 + 5);
  sub_10012F8FC((uint64_t)v35);
  sub_10012F6A4((uint64_t)a1, (uint64_t)v32);
  if (v40 != 2)
  {
LABEL_9:
    v46 = (_QWORD *)sub_10012F8FC((uint64_t)v32);
LABEL_10:
    v51 = 0;
    v52 = 0;
    v187 = 0;
    goto LABEL_11;
  }
  v41 = *((_QWORD *)v32 + 2);
  if (!v41)
  {
    v162 = *((_QWORD *)v32 + 3);
    goto LABEL_34;
  }
  KeyPath = swift_getKeyPath(&unk_1001F21D0);
  v43 = swift_getKeyPath(&unk_1001F21F8);
  swift_retain(v41);
  static Published.subscript.getter(&v208, v44, KeyPath);
  swift_release(v41);
  swift_release(KeyPath);
  swift_release(v43);
  v45 = v208;
  v46 = (_QWORD *)sub_10012F8FC((uint64_t)v32);
  if ((v45 & 1) != 0)
    goto LABEL_10;
  v47 = (char *)a1 + *(int *)(v27 + 60);
  v48 = *v47;
  v49 = *((_QWORD *)v47 + 1);
  v206[0] = v48;
  v207 = v49;
  v50 = sub_100006DF4(&qword_10028CF50);
  v46 = State.projectedValue.getter(&v208, v50);
  v51 = v208;
  v52 = v209;
  v187 = v210;
LABEL_11:
  Divider.init()(v46);
  v53 = a1[5];
  v189 = v51;
  v188 = v52;
  if (v53 != 2)
  {
    if (objc_msgSend((id)objc_opt_self(_LTDisambiguableResult), "isGenderDisambiguationEnabled"))
    {
      v60 = 0;
      v61 = 0;
      v63 = v203;
      v62 = v204;
      v64 = 0;
      v65 = 0;
      if (v53 != 1 && v53 != 4)
      {
        v66 = *a1;
        v67 = a1[1];
        v68 = type metadata accessor for SharedTranslationOptions(0);
        v69 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
        v70 = (void *)EnvironmentObject.projectedValue.getter(v66, v67, v68, v69);
        v71 = swift_getKeyPath(&unk_1001F2128);
        EnvironmentObject.Wrapper.subscript.getter(&v208, v71, v70, v69);
        swift_release(v71);

        v64 = v208;
        v65 = v209;
        v61 = 3;
        v60 = v210;
      }
    }
    else
    {
      v61 = 0;
      v64 = 0;
      v65 = 0;
      v60 = 0;
      v63 = v203;
      v62 = v204;
    }
    v82 = v192;
    *v192 = v61;
    v82[1] = v64;
    v82[2] = v65;
    *((_BYTE *)v82 + 24) = v60;
    swift_storeEnumTagMultiPayload(v82, v190, 1);
    v83 = sub_100006DF4(&qword_100294628);
    v84 = sub_100012334(&qword_100294630, &qword_100294610, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v85 = sub_10012F938();
    _ConditionalContent<>.init(storage:)(v82, v191, v83, v84, v85);
    v86 = *(void (**)(uint64_t, char *, uint64_t))(v205 + 16);
    v87 = v200;
    goto LABEL_31;
  }
  v54 = *a1;
  v55 = a1[1];
  v56 = type metadata accessor for SharedTranslationOptions(0);
  v57 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  v58 = (void *)EnvironmentObject.projectedValue.getter(v54, v55, v56, v57);
  v59 = swift_getKeyPath(&unk_1001F2150);
  EnvironmentObject.Wrapper.subscript.getter(&v208, v59, v58, v57);
  swift_release(v59);

  v198 = v209;
  v199 = v208;
  v167 = v210;
  if ((sub_10012DA24() & 1) != 0)
  {
    v206[0] = 0;
    static Binding.constant(_:)(&v208, v206, &type metadata for Bool);
  }
  else
  {
    v72 = (void *)EnvironmentObject.projectedValue.getter(*a1, a1[1], v56, v57);
    v73 = swift_getKeyPath(&unk_1001F2178);
    EnvironmentObject.Wrapper.subscript.getter(&v208, v73, v72, v57);
    swift_release(v73);

  }
  v197 = v208;
  v184 = v209;
  v166 = v210;
  v74 = sub_10012DA24();
  v196 = swift_getKeyPath(&unk_1001F21A0);
  v183 = swift_allocObject(&unk_10026C9E0, 17, 7);
  *(_BYTE *)(v183 + 16) = v74 & 1;
  v75 = a1[2];
  if (v75)
  {
    v76 = swift_getKeyPath(&unk_1001F21D0);
    v77 = swift_getKeyPath(&unk_1001F21F8);
    swift_retain(v75);
    static Published.subscript.getter(&v208, v78, v76);
    swift_release(v75);
    swift_release(v76);
    swift_release(v77);
    v168 = v5;
    if ((v208 & 1) != 0)
    {
      v195 = 0;
      v179 = 0;
      v182 = 0;
      v180 = 0;
      v181 = 0;
      v201 = 0;
      v176 = 0;
      v80 = v200;
      v81 = v186;
    }
    else
    {
      v81 = v186;
      if (*((_BYTE *)a1 + 48) == 1)
      {
        v206[0] = 0;
        static Binding.constant(_:)(&v208, v206, &type metadata for Bool);
      }
      else
      {
        v88 = (void *)EnvironmentObject.projectedValue.getter(*a1, a1[1], v56, v57);
        v89 = swift_getKeyPath(&unk_1001F2218);
        EnvironmentObject.Wrapper.subscript.getter(&v208, v89, v88, v57);
        swift_release(v89);

      }
      v179 = v208;
      v182 = v209;
      v90 = v210;
      v80 = v200;
      v91 = *((_BYTE *)a1 + 48);
      v181 = swift_getKeyPath(&unk_1001F21A0);
      v79 = swift_allocObject(&unk_10026CA08, 17, 7);
      v176 = v79;
      *(_BYTE *)(v79 + 16) = v91;
      v180 = v90;
      v201 = sub_100049DA0;
      v195 = 2;
    }
    v92 = Divider.init()(v79);
    v93 = 1;
    if (*((_BYTE *)a1 + 49) == 1)
    {
      v94 = v171;
      static ButtonRole.destructive.getter(v92);
      v95 = type metadata accessor for ButtonRole(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v94, 0, 1, v95);
      v96 = v170;
      sub_10012F6A4((uint64_t)a1, v170);
      v97 = *(unsigned __int8 *)(v169 + 80);
      v98 = (v97 + 16) & ~v97;
      v99 = swift_allocObject(&unk_10026CA30, v98 + v28, v97 | 7);
      sub_10012F6EC(v96, v99 + v98);
      v100 = sub_100006DF4(&qword_10028AB30);
      v101 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
      v102 = v173;
      Button.init(role:action:label:)(v94, sub_10012FC60, v99, sub_10012F018, 0, v100, v101);
      v103 = sub_100012334(&qword_10028AD58, &qword_10028AD50, (uint64_t)&protocol conformance descriptor for Button<A>);
      v104 = (uint64_t)v172;
      v105 = v175;
      View.accessibilityIdentifier(_:)(0xD000000000000017, 0x80000001001FE230, v175, v103);
      (*(void (**)(char *, uint64_t))(v174 + 8))(v102, v105);
      sub_10012FC8C(v104, (uint64_t)v15);
      v93 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v177 + 56))(v15, v93, 1, v178);
    LOBYTE(v208) = v167;
    v206[0] = v166;
    v106 = *(void (**)(char *, char *, uint64_t))(v205 + 16);
    v107 = v81;
    v165 = v15;
    v108 = v204;
    v106(v80, v107, v204);
    v109 = (void (*)(uint64_t, char *, uint64_t))v106;
    v178 = (uint64_t)v106;
    v110 = v185;
    sub_10000B074((uint64_t)v15, (uint64_t)v185, &qword_100294618);
    v111 = v208;
    v112 = (uint64_t)v168;
    *v168 = 0;
    v113 = v198;
    *(_QWORD *)(v112 + 8) = v199;
    *(_QWORD *)(v112 + 16) = v113;
    *(_BYTE *)(v112 + 24) = v111;
    v114 = v206[0];
    *(_BYTE *)(v112 + 32) = 1;
    v115 = v197;
    *(_QWORD *)(v112 + 40) = v197;
    v116 = v115;
    v117 = v184;
    *(_QWORD *)(v112 + 48) = v184;
    *(_BYTE *)(v112 + 56) = v114;
    v118 = v195;
    *(_QWORD *)(v112 + 64) = v196;
    *(_QWORD *)(v112 + 72) = sub_1000489B4;
    v119 = v183;
    *(_QWORD *)(v112 + 80) = v183;
    *(_QWORD *)(v112 + 88) = v118;
    v195 = v118;
    v120 = v182;
    *(_QWORD *)(v112 + 96) = v179;
    *(_QWORD *)(v112 + 104) = v120;
    v121 = v181;
    *(_QWORD *)(v112 + 112) = v180;
    *(_QWORD *)(v112 + 120) = v121;
    v122 = v176;
    *(_QWORD *)(v112 + 128) = v201;
    *(_QWORD *)(v112 + 136) = v122;
    v123 = sub_100006DF4(&qword_100294650);
    v109(v112 + *(int *)(v123 + 80), v80, v108);
    sub_10000B074((uint64_t)v110, v112 + *(int *)(v123 + 96), &qword_100294618);
    v197 = v116;
    swift_retain(v116);
    v124 = v117;
    v184 = v117;
    swift_retain(v117);
    v125 = v196;
    swift_retain(v196);
    swift_retain(v119);
    v126 = v199;
    swift_retain(v199);
    v127 = v198;
    swift_retain(v198);
    v128 = v118;
    v129 = v179;
    v130 = v182;
    v131 = v180;
    v132 = v176;
    sub_10012FA8C(v128, v179, v182, v180, v181, (uint64_t)v201, v176);
    swift_retain(v126);
    swift_retain(v127);
    swift_retain(v116);
    swift_retain(v124);
    swift_retain(v125);
    v133 = v183;
    swift_retain(v183);
    v134 = v195;
    v135 = v129;
    v136 = v129;
    v137 = v130;
    v138 = v130;
    v139 = v131;
    v140 = v131;
    v141 = v181;
    v142 = v201;
    v143 = v132;
    sub_10012FA8C(v195, v135, v138, v140, v181, (uint64_t)v201, v132);
    sub_10000A020((uint64_t)v185, &qword_100294618);
    v185 = *(void (**)(_QWORD, _QWORD))(v205 + 8);
    v87 = v200;
    v185(v200, v204);
    sub_10012FADC(v134, v136, v137, v139, v141, (uint64_t)v142, v143);
    swift_release(v198);
    swift_release(v199);
    swift_release(v133);
    swift_release(v196);
    v144 = v184;
    swift_release(v184);
    swift_release(v197);
    v145 = v192;
    sub_10000B074(v112, (uint64_t)v192, &qword_100294610);
    swift_storeEnumTagMultiPayload(v145, v190, 0);
    v146 = sub_100006DF4(&qword_100294628);
    v147 = sub_100012334(&qword_100294630, &qword_100294610, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v148 = sub_10012F938();
    v149 = v203;
    _ConditionalContent<>.init(storage:)(v145, v191, v146, v147, v148);
    sub_10012FADC(v195, v179, v182, v180, v141, (uint64_t)v201, v143);
    v150 = v112;
    v62 = v204;
    v63 = v149;
    sub_10000A020(v150, &qword_100294610);
    sub_10000A020((uint64_t)v165, &qword_100294618);
    v185(v186, v62);
    swift_release(v198);
    swift_release(v199);
    swift_release(v183);
    swift_release(v196);
    swift_release(v144);
    swift_release(v197);
    v86 = (void (*)(uint64_t, char *, uint64_t))v178;
LABEL_31:
    v151 = (uint64_t)v193;
    v152 = v194;
    v153 = v202;
    v154 = v62;
    v155 = v62;
    v156 = v86;
    v86((uint64_t)v87, v202, v154);
    sub_10000B074(v63, v151, &qword_100294620);
    v157 = v189;
    v158 = v188;
    *(_QWORD *)v152 = v189;
    *(_QWORD *)(v152 + 8) = v158;
    *(_BYTE *)(v152 + 16) = v187;
    v159 = sub_100006DF4(&qword_100294648);
    v156(v152 + *(int *)(v159 + 64), v87, v155);
    sub_10000B074(v151, v152 + *(int *)(v159 + 80), &qword_100294620);
    sub_10012F9E0(v157, v158);
    sub_10000A020(v203, &qword_100294620);
    v160 = *(void (**)(char *, uint64_t))(v205 + 8);
    v160(v153, v155);
    sub_10000A020(v151, &qword_100294620);
    v160(v87, v155);
    return sub_10012FA0C(v157, v158);
  }
  v162 = a1[3];
LABEL_34:
  v163 = type metadata accessor for SceneContext(0);
  v164 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  result = EnvironmentObject.error()(0, v162, v163, v164);
  __break(1u);
  return result;
}

uint64_t sub_10012EF60(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001F2240);
    v3 = swift_getKeyPath(&unk_1001F2268);
    v8 = 1;
    swift_retain(v1);
    return static Published.subscript.setter(&v8, v1, KeyPath, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = type metadata accessor for SceneContext(0);
    v7 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
  return result;
}

uint64_t sub_10012F018()
{
  return Label.init(title:icon:)(sub_10012F054, 0, sub_10012F0C8, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10012F054@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x80000001001FE250);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_10012F0C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0x6B72616D78, 0xE500000000000000);
  *a1 = result;
  return result;
}

double sub_10012F0FC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  double result;
  uint64_t v13;

  v2 = sub_100006DF4(&qword_10028BD28);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.Scale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Image.init(systemName:)(0x73697370696C6C65, 0xEF656C637269632ELL);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.Scale.large(_:), v5);
  KeyPath = swift_getKeyPath(&unk_1001F20F8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v2 + 28), v8, v5);
  *v4 = KeyPath;
  v11 = sub_100006DF4(&qword_1002945D0);
  sub_10000B074((uint64_t)v4, (uint64_t)a1 + *(int *)(v11 + 36), &qword_10028BD28);
  *a1 = v9;
  swift_retain(v9);
  sub_10000A020((uint64_t)v4, &qword_10028BD28);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_10012F274@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t result;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v4 = type metadata accessor for Locale(0);
  v62 = *(_QWORD *)(v4 - 8);
  v5 = v62;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v8;
  __chkstk_darwin(v6);
  v10 = (char *)&v53 - v9;
  v61 = (char *)&v53 - v9;
  v11 = (int *)type metadata accessor for MoreOptionsMenu(0);
  v12 = a1 + v11[10];
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v60 = v4;
  v13(v10, v12, v4);
  v13(v8, a1 + v11[11], v4);
  v14 = v11[13];
  v15 = (uint64_t *)(a1 + v11[12]);
  v16 = v15[1];
  v64 = *v15;
  v17 = v15[3];
  v54 = v15[2];
  v18 = v15[5];
  v56 = v15[4];
  v19 = v56;
  v57 = v18;
  v55 = v15[6];
  v65 = v15[7];
  v20 = (void *)v15[9];
  v66 = v15[8];
  v58 = v20;
  v59 = v15[10];
  v21 = (void *)v59;
  v67 = *(_QWORD *)(a1 + v14);
  v22 = (uint64_t *)(a1 + v11[14]);
  v23 = *v22;
  v68 = v22[1];
  *(_QWORD *)a2 = swift_getKeyPath(&unk_1001F20C8);
  v24 = sub_100006DF4(&qword_10028AD78);
  swift_storeEnumTagMultiPayload(a2, v24, 0);
  v25 = (int *)type metadata accessor for AudioRoutingMenu(0);
  v26 = &a2[v25[5]];
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v51 = v20;
  v52 = v21;
  v27 = v54;
  v28 = v55;
  sub_1000161E0(v64, v16, v54, v17, v19, v18, v55, v65, v66, v51, v52);
  swift_bridgeObjectRetain(v67);
  v29 = v23;
  sub_100016244(v23, v68);
  v30 = sub_100006DF4(&qword_10028AE38);
  State.init(wrappedValue:)(&v75, &v69, v30);
  v31 = v76;
  v32 = v77;
  v33 = v78;
  v34 = v79;
  v35 = v80;
  *(_OWORD *)v26 = v75;
  *((_OWORD *)v26 + 1) = v31;
  *((_OWORD *)v26 + 2) = v32;
  *((_OWORD *)v26 + 3) = v33;
  *((_OWORD *)v26 + 4) = v34;
  *((_OWORD *)v26 + 5) = v35;
  v36 = &a2[v25[6]];
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  State.init(wrappedValue:)(&v75, &v69, v30);
  v37 = v76;
  v38 = v77;
  v39 = v78;
  v40 = v79;
  v41 = v80;
  *(_OWORD *)v36 = v75;
  *((_OWORD *)v36 + 1) = v37;
  *((_OWORD *)v36 + 2) = v38;
  *((_OWORD *)v36 + 3) = v39;
  *((_OWORD *)v36 + 4) = v40;
  *((_OWORD *)v36 + 5) = v41;
  v42 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
  v43 = v60;
  v42(&a2[v25[7]], v61, v60);
  result = ((uint64_t (*)(char *, char *, uint64_t))v42)(&a2[v25[8]], v63, v43);
  v45 = &a2[v25[9]];
  *(_QWORD *)v45 = v64;
  *((_QWORD *)v45 + 1) = v16;
  *((_QWORD *)v45 + 2) = v27;
  *((_QWORD *)v45 + 3) = v17;
  v46 = v57;
  *((_QWORD *)v45 + 4) = v56;
  *((_QWORD *)v45 + 5) = v46;
  v47 = v65;
  *((_QWORD *)v45 + 6) = v28;
  *((_QWORD *)v45 + 7) = v47;
  v48 = v58;
  *((_QWORD *)v45 + 8) = v66;
  *((_QWORD *)v45 + 9) = v48;
  *((_QWORD *)v45 + 10) = v59;
  *(_QWORD *)&a2[v25[10]] = v67;
  v49 = (uint64_t *)&a2[v25[11]];
  v50 = v68;
  *v49 = v29;
  v49[1] = v50;
  return result;
}

uint64_t sub_10012F618@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10012DF2C(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_10012F620()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002945E0;
  if (!qword_1002945E0)
  {
    v1 = sub_1000070BC(&qword_1002945D0);
    sub_100012334(&qword_10028BD50, &qword_10028BD28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002945E0);
  }
  return result;
}

uint64_t sub_10012F6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoreOptionsMenu(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012F6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoreOptionsMenu(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012F730@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MoreOptionsMenu(0) - 8) + 80);
  return sub_10012F274(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_10012F76C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1002945F8;
  if (!qword_1002945F8)
  {
    v1 = sub_1000070BC(&qword_1002945C8);
    v2[0] = sub_1000070BC(&qword_1002945B8);
    v2[1] = sub_100012334(&qword_1002945F0, &qword_1002945B8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.menuOrder(_:)>>, 1);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002945F8);
  }
  return result;
}

uint64_t sub_10012F83C()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10012F85C()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10012F87C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_10012F8FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MoreOptionsMenu(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10012F938()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294638;
  if (!qword_100294638)
  {
    v1 = sub_1000070BC(&qword_100294628);
    sub_10012F99C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100294638);
  }
  return result;
}

unint64_t sub_10012F99C()
{
  unint64_t result;

  result = qword_100294640;
  if (!qword_100294640)
  {
    result = swift_getWitnessTable(&unk_1001F22D4, &type metadata for MoreOptionsToggle);
    atomic_store(result, (unint64_t *)&qword_100294640);
  }
  return result;
}

uint64_t sub_10012F9E0(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    swift_retain(result);
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10012FA0C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = result;
    swift_release(a2);
    return swift_release(v2);
  }
  return result;
}

uint64_t sub_10012FA5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012FA7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012FA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a3)
  {
    swift_retain(a2);
    swift_retain(a3);
    swift_retain(a5);
    return swift_retain(a7);
  }
  return result;
}

uint64_t sub_10012FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a3)
  {
    swift_release(a3);
    swift_release(a5);
    swift_release(a7);
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10012FB30()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = (int *)type metadata accessor for MoreOptionsMenu(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v7 = *(_QWORD *)(v0 + v4 + 40);
  if (v7 >= 5)
    swift_bridgeObjectRelease(v7);
  v8 = v6 + v1[10];
  v9 = type metadata accessor for Locale(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v6 + v1[11], v9);
  v11 = v6 + v1[12];
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v11 + 40));

  }
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13]));
  v13 = (_QWORD *)(v6 + v1[14]);
  if (*v13)
    swift_release(v13[1]);
  swift_release(*(_QWORD *)(v6 + v1[15] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10012FC60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MoreOptionsMenu(0) - 8) + 80);
  return sub_10012EF60(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10012FC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_10028AD68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012FCDC()
{
  _QWORD v1[4];

  v1[0] = sub_1000070BC(&qword_1002945C8);
  v1[1] = type metadata accessor for AudioRoutingMenu(255);
  v1[2] = sub_10012F76C();
  v1[3] = sub_100007D5C(&qword_100294600, type metadata accessor for AudioRoutingMenu, (uint64_t)&unk_1001E6A20);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
}

uint64_t destroy for MoreOptionsToggle(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for MoreOptionsToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for MoreOptionsToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for MoreOptionsToggle(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MoreOptionsToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MoreOptionsToggle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MoreOptionsToggle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MoreOptionsToggle()
{
  return &type metadata for MoreOptionsToggle;
}

uint64_t sub_10012FF38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100215664, 1);
}

void sub_10012FF48(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10012FF74()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  result = LocalizedStringKey.init(stringLiteral:)(0x59414C504F545541, 0xEE00454C5449545FLL);
  *(_QWORD *)v0 = result;
  *(_QWORD *)(v0 + 8) = v2;
  *(_BYTE *)(v0 + 16) = v3 & 1;
  *(_QWORD *)(v0 + 24) = v4;
  *(_QWORD *)(v0 + 32) = 2036427888;
  *(_QWORD *)(v0 + 40) = 0xE400000000000000;
  *(_QWORD *)(v0 + 48) = 0xD000000000000016;
  *(_QWORD *)(v0 + 56) = 0x80000001001FE380;
  return result;
}

uint64_t sub_1001300C4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  _QWORD v24[2];
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v24[1] = a5;
  v9 = sub_100006DF4(&qword_100294658);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a2;
  v34 = a3;
  v35 = a4;
  v13 = sub_100006DF4(&qword_100296C60);
  Binding.projectedValue.getter(v29, v13);
  v14 = v29[0];
  v15 = v29[1];
  v16 = v30;
  v25[16] = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v17 = sub_100006DF4(&qword_10028AB30);
  v18 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Toggle.init(isOn:label:)(v14, v15, v16, sub_1001303E4, v25, v17, v18);
  sub_10012FF48(a1);
  v19 = v31;
  v20 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = sub_100012334(&qword_100294660, &qword_100294658, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  View.accessibilityIdentifier(_:)(v19, v20, v9, v21);
  v22 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v22);
}

uint64_t sub_10013025C(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[24];
  uint64_t v10;
  uint64_t v11;
  char v12;

  v9[16] = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v5[16] = a1;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return Label.init(title:icon:)(sub_1001303F4, v9, sub_100130404, v5, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_1001302C8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_10012FF48(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_100130364@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  sub_10012FF48(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = Image.init(_internalSystemName:)();
  *a2 = result;
  return result;
}

uint64_t sub_1001303D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001300C4(*(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_1001303E4()
{
  uint64_t v0;

  return sub_10013025C(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1001303F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001302C8(*(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_100130404@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100130364(*(_BYTE *)(v1 + 16), a1);
}

uint64_t storeEnumTagSinglePayload for MoreOptionsToggle.Function(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100130460 + 4 * byte_1001F22B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100130494 + 4 * byte_1001F22B4[v4]))();
}

uint64_t sub_100130494(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013049C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001304A4);
  return result;
}

uint64_t sub_1001304B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001304B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001304BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001304C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MoreOptionsToggle.Function()
{
  return &type metadata for MoreOptionsToggle.Function;
}

unint64_t sub_1001304E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294668;
  if (!qword_100294668)
  {
    v1 = sub_1000070BC(&qword_100294670);
    sub_100012334(&qword_100294660, &qword_100294658, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    sub_1000129EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100294668);
  }
  return result;
}

unint64_t sub_10013056C()
{
  unint64_t result;

  result = qword_100294678;
  if (!qword_100294678)
  {
    result = swift_getWitnessTable(&unk_1001F2370, &type metadata for MoreOptionsToggle.Function);
    atomic_store(result, (unint64_t *)&qword_100294678);
  }
  return result;
}

uint64_t sub_1001305B4(uint64_t a1)
{
  _QWORD v2[25];

  v2[0] = "\b";
  v2[1] = "\b";
  v2[2] = "\b";
  v2[3] = "\b";
  v2[4] = "\b";
  v2[5] = &unk_1001F2458;
  v2[6] = "\b";
  v2[7] = "\b";
  v2[8] = "\b";
  v2[9] = "\b";
  v2[10] = "\b";
  v2[11] = "\b";
  v2[12] = "\b";
  v2[13] = "\b";
  v2[14] = "\b";
  v2[15] = &unk_1001F2470;
  v2[16] = &unk_1001F2488;
  v2[17] = &unk_1001F24A0;
  v2[18] = &unk_1001F24B8;
  v2[19] = &unk_1001F24D0;
  v2[20] = "\b";
  v2[21] = "\b";
  v2[22] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[23] = &unk_1001F2458;
  v2[24] = "\b";
  return swift_initClassMetadata2(a1, 0, 25, v2, a1 + 104);
}

void sub_100130660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int64_t i;
  char *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100006DF4(qword_100294908);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v37 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v36 = (unint64_t)(63 - v4) >> 6;
  v7 = &v43;
  v8 = &v45;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v10 = (char *)&type metadata for Any + 8;
  v11 = &type metadata for Bool;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v36)
    goto LABEL_32;
  v21 = *(_QWORD *)(v37 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v36)
      goto LABEL_32;
    v21 = *(_QWORD *)(v37 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v36)
        goto LABEL_32;
      v21 = *(_QWORD *)(v37 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v36)
          goto LABEL_32;
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v36)
          {
            v21 = *(_QWORD *)(v37 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v36)
                break;
              v21 = *(_QWORD *)(v37 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10000F7C4(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v39 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v6)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v26 = *v24;
    v25 = v24[1];
    LOBYTE(v24) = *(_BYTE *)(*(_QWORD *)(v1 + 56) + v19);
    v41 = v26;
    v42 = v25;
    v40 = (char)v24;
    swift_bridgeObjectRetain(v25);
    swift_dynamicCast(v7, &v40, v11, v10, 7);
    v27 = v41;
    v28 = v42;
    sub_10003EA2C(v7, v8);
    sub_10003EA2C(v8, v46);
    sub_10003EA2C(v46, &v44);
    v29 = sub_1001A869C(v27, v28);
    v30 = v29;
    if ((v31 & 1) != 0)
    {
      v38 = i;
      v12 = v8;
      v13 = v7;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v3[6] + 16 * v29);
      swift_bridgeObjectRelease(v17[1]);
      *v17 = v27;
      v17[1] = v28;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v7 = v13;
      v8 = v12;
      i = v38;
      v18 = (_QWORD *)(v3[7] + 32 * v30);
      sub_100009C08(v18);
      sub_10003EA2C(&v44, v18);
      v6 = v39;
      if (!v39)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v29;
    v32 = (uint64_t *)(v3[6] + 16 * v29);
    *v32 = v27;
    v32[1] = v28;
    sub_10003EA2C(&v44, (_OWORD *)(v3[7] + 32 * v29));
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_34;
    v3[2] = v35;
    v6 = v39;
    if (!v39)
      goto LABEL_11;
LABEL_10:
    v39 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_1001309B8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100006DF4((uint64_t *)&unk_1002948C0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  i = 0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v12 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v12 >= v28)
    goto LABEL_32;
  v13 = *(_QWORD *)(v29 + 8 * v12);
  v14 = i + 1;
  if (!v13)
  {
    v14 = i + 2;
    if (i + 2 >= v28)
      goto LABEL_32;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    if (!v13)
    {
      v14 = i + 3;
      if (i + 3 >= v28)
        goto LABEL_32;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = i + 4;
        if (i + 4 >= v28)
          goto LABEL_32;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
        {
          v15 = i + 5;
          if (i + 5 < v28)
          {
            v13 = *(_QWORD *)(v29 + 8 * v15);
            if (v13)
            {
              v14 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v14 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_36;
              if (v14 >= v28)
                break;
              v13 = *(_QWORD *)(v29 + 8 * v14);
              ++v15;
              if (v13)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10000F7C4(a1);
          return;
        }
      }
    }
  }
LABEL_26:
  v6 = (v13 - 1) & v13;
  v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; v11 = v10 | (i << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v20 = v19;
    v21 = sub_1001A869C(v18, v17);
    v22 = v21;
    if ((v23 & 1) != 0)
    {
      v8 = (uint64_t *)(v3[6] + 16 * v21);
      swift_bridgeObjectRelease();
      *v8 = v18;
      v8[1] = v17;
      v9 = v3[7];

      *(_QWORD *)(v9 + 8 * v22) = v20;
      if (!v6)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v21;
    v24 = (uint64_t *)(v3[6] + 16 * v21);
    *v24 = v18;
    v24[1] = v17;
    *(_QWORD *)(v3[7] + 8 * v21) = v20;
    v25 = v3[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_34;
    v3[2] = v27;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

NSString sub_100130C58()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002AA4D0 = (uint64_t)result;
  return result;
}

void sub_100130C8C()
{
  qword_1002AA4D8 = 0x4069600000000000;
}

void sub_100130CA0()
{
  qword_1002AA4E0 = 0x4024000000000000;
}

BOOL sub_100130CB0(char a1, char a2)
{
  return a1 == a2;
}

void sub_100130CC0(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_100130CE4(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_100130D28(char *a1, char *a2)
{
  return sub_100130CB0(*a1, *a2);
}

Swift::Int sub_100130D34()
{
  unsigned __int8 *v0;

  return sub_100130CE4(*v0);
}

void sub_100130D3C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100130CC0(a1, *v1);
}

Swift::Int sub_100130D44(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_100130CC0((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

BOOL sub_100130D80(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 == 3)
    return a2 == 3;
  if (a1 == 4)
    return a2 == 4;
  if (a2 - 3 < 2)
    return 0;
  return a1 == a2;
}

BOOL sub_100130DD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100130D80(*a1, *a2);
}

id sub_100130DE4()
{
  return sub_100025664(&qword_100294680, (uint64_t (*)(uint64_t))sub_100130DF8);
}

id sub_100130DF8(_QWORD *a1)
{
  uint64_t *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v8;

  v2 = (uint64_t *)(swift_isaMask & *a1);
  v8 = a1;
  v3 = objc_allocWithZone((Class)UIPanGestureRecognizer);
  v4 = type metadata accessor for NewTranslationController(0, v2[10], v2[11], v2[12]);
  v5 = _bridgeAnythingToObjectiveC<A>(_:)(&v8, v4);
  v6 = objc_msgSend(v3, "initWithTarget:action:", v5, "textCardPanWithRecognizer:");
  swift_unknownObjectRelease(v5);
  objc_msgSend(v6, "setDelegate:", a1);
  return v6;
}

id sub_100130EB0()
{
  return sub_100025664(&qword_100294688, (uint64_t (*)(uint64_t))sub_100130EC4);
}

char *sub_100130EC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  Swift::Bool v18;
  uint64_t v19;
  uint64_t v21;

  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TranslateInputCard(0);
  v10 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v9)), "init");
  v11 = sub_10019BD48();
  objc_msgSend(v11, "setTag:", 202);

  swift_unknownObjectWeakAssign(&v10[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_delegate], a1);
  v12 = sub_100130DE4();
  objc_msgSend(v10, "addGestureRecognizer:", v12);

  v13 = sub_10019BD48();
  sub_10019C7C0();
  v14 = sub_100190DF0();
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setText:", v15, swift_bridgeObjectRelease().n128_f64[0]);

  v16 = sub_10019BD48();
  sub_100082758((uint64_t)&v10[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_selectedEditingLocale], (uint64_t)v4);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)v17 == 1)
  {
    static Locale.current.getter(v17);
    sub_10000A020((uint64_t)v4, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  v18 = Locale.isRTL()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v18)
    v19 = 2;
  else
    v19 = 0;
  objc_msgSend(v16, "setTextAlignment:", v19);

  return v10;
}

id sub_100131100()
{
  return sub_100025664(&qword_100294690, (uint64_t (*)(uint64_t))sub_100131114);
}

char *sub_100131114(uint64_t a1)
{
  char *v2;
  char *v3;

  v2 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LegacyInlineTranslationTabErrorView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = &v2[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_languageDownloadPresenter];
  *((_QWORD *)v3 + 1) = &off_10026CD58;
  swift_unknownObjectWeakAssign(v3, a1);
  return v2;
}

void sub_100131184(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_100294698);
  *(_QWORD *)(v1 + qword_100294698) = a1;

}

void sub_100131198(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_1002946A0);
  *(_QWORD *)(v1 + qword_1002946A0) = a1;

}

uint64_t sub_1001311AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_1002946A8);
}

uint64_t sub_1001311BC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + qword_1002946A8) = result;
  return result;
}

BOOL sub_1001311CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + qword_1002946C0);
  if (!v1)
    return 0;
  KeyPath = swift_getKeyPath(&unk_1001F27A8);
  v3 = swift_getKeyPath(&unk_1001F27D0);
  v4 = swift_retain(v1);
  static Published.subscript.getter(&v9, v4, KeyPath, v3);
  swift_release(KeyPath);
  swift_release(v3);
  v5 = v9;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v8 = v9;
    else
      v8 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v6 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_release(v1);
    swift_bridgeObjectRelease_n(v5, 2);
  }
  else
  {
    v6 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease(v9);
    swift_release(v1);
  }
  return v6 != 0;
}

uint64_t sub_1001312B8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_1002946F8);
}

uint64_t sub_1001312C8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + qword_1002946F8) = result;
  return result;
}

uint64_t sub_1001312D8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_100294700);
}

BOOL sub_1001312E8()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + qword_100294700) == 0;
}

uint64_t sub_100131300(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + qword_100294710);
  v4 = *(_QWORD *)(v2 + qword_100294710 + 8);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

void sub_10013131C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1001388AC();
}

void sub_100131340()
{
  _QWORD *v0;
  objc_class *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  objc_super v10;

  v1 = (objc_class *)type metadata accessor for NewTranslationController(0, *(_QWORD *)((swift_isaMask & *v0) + 0x50), *(_QWORD *)((swift_isaMask & *v0) + 0x58), *(_QWORD *)((swift_isaMask & *v0) + 0x60));
  v10.receiver = v0;
  v10.super_class = v1;
  objc_msgSendSuper2(&v10, "viewDidLoad");
  *((_BYTE *)v0 + qword_1002946A8) = sub_100132D80();
  sub_100131A74();
  sub_100131D6C();
  v2 = (void *)objc_opt_self(NSNotificationCenter);
  v3 = objc_msgSend(v2, "defaultCenter");
  objc_msgSend(v3, "addObserver:selector:name:object:", v0, "keyboardWillChangeFrame:", UIKeyboardWillChangeFrameNotification, 0);

  v4 = objc_msgSend(v2, "defaultCenter");
  objc_msgSend(v4, "addObserver:selector:name:object:", v0, "keyboardWillAppear", UIKeyboardWillShowNotification, 0);

  v5 = objc_msgSend(v2, "defaultCenter");
  objc_msgSend(v5, "addObserver:selector:name:object:", v0, "keyboardWillDisappear", UIKeyboardWillHideNotification, 0);

  v6 = objc_msgSend(v2, "defaultCenter");
  if (qword_10028A398 != -1)
    swift_once(&qword_10028A398, sub_100025290);
  objc_msgSend(v6, "addObserver:selector:name:object:", v0, "cardListFirstAppear:", qword_1002AA078, 0);

  v7 = objc_msgSend(objc_allocWithZone((Class)UIScribbleInteraction), "initWithDelegate:", v0);
  v8 = sub_100130EB0();
  v9 = sub_10019BD48();

  objc_msgSend(v9, "addInteraction:", v7);
}

void sub_100131550(void *a1)
{
  id v1;

  v1 = a1;
  sub_100131340();

}

void sub_100131584()
{
  uint64_t v0;

  *(_BYTE *)(v0 + qword_1002946F8) = 1;
}

void sub_100131598()
{
  sub_100131584();
}

void sub_1001315B8()
{
  uint64_t v0;

  *(_BYTE *)(v0 + qword_1002946F8) = 0;
}

void sub_1001315C8()
{
  sub_1001315B8();
}

void sub_1001315E8(char a1)
{
  _QWORD *v1;
  objc_class *v3;
  uint64_t v4;
  objc_super v5;

  v3 = (objc_class *)type metadata accessor for NewTranslationController(0, *(_QWORD *)((swift_isaMask & *v1) + 0x50), *(_QWORD *)((swift_isaMask & *v1) + 0x58), *(_QWORD *)((swift_isaMask & *v1) + 0x60));
  v5.receiver = v1;
  v5.super_class = v3;
  objc_msgSendSuper2(&v5, "viewWillAppear:", a1 & 1);
  v4 = *(_QWORD *)((char *)v1 + qword_1002946C8);
  if (v4)
    swift_unknownObjectWeakAssign(v4 + 16, v1);
  if (*((_BYTE *)v1 + qword_100294700))
    sub_100132EF0(*((_BYTE *)v1 + qword_100294700));
}

void sub_100131678(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_1001315E8(a3);

}

void sub_1001316B8(char a1)
{
  _QWORD *v1;
  objc_class *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  objc_super v10;

  v3 = (objc_class *)type metadata accessor for NewTranslationController(0, *(_QWORD *)((swift_isaMask & *v1) + 0x50), *(_QWORD *)((swift_isaMask & *v1) + 0x58), *(_QWORD *)((swift_isaMask & *v1) + 0x60));
  v10.receiver = v1;
  v10.super_class = v3;
  objc_msgSendSuper2(&v10, "viewWillDisappear:", a1 & 1);
  sub_1001378D8();
  v4 = *(void **)((char *)v1 + qword_1002946B0);
  if (v4)
  {
    v5 = v4;
    sub_100147478();
    v6 = *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
      v8 = objc_opt_self(_LTSpeechTranslationRequest);
      v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
      if (v9)
        objc_msgSend(v9, "endAudio");
    }

  }
}

void sub_100131798(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_1001316B8(a3);

}

id sub_1001317D8()
{
  _QWORD *v0;
  objc_class *v1;
  double v2;
  id v3;
  id v4;
  double v5;
  objc_super v7;

  v1 = (objc_class *)type metadata accessor for NewTranslationController(0, *(_QWORD *)((swift_isaMask & *v0) + 0x50), *(_QWORD *)((swift_isaMask & *v0) + 0x58), *(_QWORD *)((swift_isaMask & *v0) + 0x60));
  v7.receiver = v0;
  v7.super_class = v1;
  objc_msgSendSuper2(&v7, "viewDidLayoutSubviews");
  if (qword_10028A4A0 != -1)
    swift_once(&qword_10028A4A0, sub_100130C8C);
  v2 = *(double *)&qword_1002AA4D8;
  v3 = objc_msgSend(v0, "traitCollection");
  v4 = objc_msgSend(v3, "horizontalSizeClass");

  v5 = 0.0;
  if (v4 == (id)2)
  {
    if (qword_10028A4A8 != -1)
      swift_once(&qword_10028A4A8, sub_100130CA0);
    v5 = *(double *)&qword_1002AA4E0;
  }
  return objc_msgSend(*(id *)((char *)v0 + qword_100294708), "setAdditionalSafeAreaInsets:", 0.0, 0.0, v2 + 8.0 - v5, 0.0);
}

void sub_10013190C(void *a1)
{
  id v1;

  v1 = a1;
  sub_1001317D8();

}

void sub_100131940(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_100294720);
  *(_QWORD *)(v1 + qword_100294720) = a1;

}

void sub_100131954(void *a1, uint64_t a2)
{
  _QWORD *v2;
  objc_class *v5;
  void *v6;
  id v7;
  objc_super v8;

  v5 = (objc_class *)type metadata accessor for NewTranslationController(0, *(_QWORD *)((swift_isaMask & *v2) + 0x50), *(_QWORD *)((swift_isaMask & *v2) + 0x58), *(_QWORD *)((swift_isaMask & *v2) + 0x60));
  v8.receiver = v2;
  v8.super_class = v5;
  objc_msgSendSuper2(&v8, "willTransitionToTraitCollection:withTransitionCoordinator:", a1, a2);
  v6 = *(void **)((char *)v2 + qword_100294720);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v7, "setActive:", objc_msgSend(a1, "horizontalSizeClass") != (id)1);

  }
}

void sub_100131A08(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;

  v6 = a3;
  swift_unknownObjectRetain(a4);
  v7 = a1;
  sub_100131954(v6, a4);

  swift_unknownObjectRelease(a4);
}

void sub_100131A74()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v1 = *(void **)&v0[qword_100294708];
  objc_msgSend(v0, "addChildViewController:", v1);
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = v2;
  v4 = objc_msgSend(v1, "view");
  if (!v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v5 = v4;
  objc_msgSend(v3, "addSubview:", v4);

  objc_msgSend(v1, "didMoveToParentViewController:", v0);
  v6 = objc_msgSend(v0, "view");
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v6;
  v8 = sub_100130EB0();
  objc_msgSend(v7, "addSubview:", v8);

  v9 = sub_100131100();
  objc_msgSend(v9, "setHidden:", 1);

  v10 = objc_msgSend(v0, "view");
  if (v10)
  {
    v11 = v10;
    v12 = sub_100131100();
    objc_msgSend(v11, "addSubview:", v12);

    return;
  }
LABEL_9:
  __break(1u);
}

id sub_100131BD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  void *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  void *v17;
  __int128 v18[2];
  uint64_t v19;
  id v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  CGRect v24;

  v1 = swift_isaMask & *v0;
  v20 = *(id *)((char *)v0 + qword_100294708);
  v2 = *(_QWORD *)(v1 + 80);
  v3 = v20;
  v4 = sub_100006DF4(&qword_1002948F0);
  if ((swift_dynamicCast(v18, &v20, v2, v4, 6) & 1) != 0)
  {
    sub_10003E994(v18, (uint64_t)v21);
    v5 = v22;
    v6 = v23;
    sub_100023AF4(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    result = objc_msgSend(v3, "view");
    if (result)
    {
      v8 = result;
      objc_msgSend(result, "frame");
      v10 = v9;
      v12 = v11;
      v14 = v13;
      v16 = v15;

      v24.origin.x = v10;
      v24.origin.y = v12;
      v24.size.width = v14;
      v24.size.height = v16;
      CGRectGetMinY(v24);
      result = objc_msgSend(v3, "view");
      if (result)
      {
        v17 = result;
        objc_msgSend(result, "safeAreaInsets");

        return (id)sub_100009C08(v21);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    return (id)sub_10000A020((uint64_t)v18, (uint64_t *)&unk_1002948F8);
  }
  return result;
}

void sub_100131D6C()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  double v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  double v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  double v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  double v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  double v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  void *v104;
  id v105;
  id v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  double v112;
  id v113;
  id v114;
  void *v115;
  id v116;
  id v117;
  void *v118;
  id v119;
  id v120;
  id v121;
  void *v122;
  id v123;
  id v124;
  void *v125;
  id v126;
  id v127;
  id v128;
  void *v129;
  id v130;
  id v131;
  void *v132;
  void *v133;
  id v134;
  id v135;
  uint64_t v136;
  Class isa;
  id v138;
  id v139;
  id v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  uint64_t v146;
  int v147;
  int v148;

  v1 = v0;
  v2 = *(void **)&v0[qword_100294708];
  v3 = objc_msgSend(v2, "view");
  if (!v3)
  {
    __break(1u);
    goto LABEL_30;
  }
  v4 = v3;
  v145 = v2;
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v5 = sub_100130EB0();
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v6 = sub_100131100();
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v7 = sub_100130EB0();
  v8 = objc_msgSend(v7, "topAnchor");

  v9 = objc_msgSend(v1, "view");
  if (!v9)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "safeAreaLayoutGuide");

  v12 = objc_msgSend(v11, "topAnchor");
  v13 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v12, 0.0);

  v14 = *(void **)&v1[qword_100294698];
  *(_QWORD *)&v1[qword_100294698] = v13;

  v15 = *(void **)&v1[qword_100294698];
  if (v15)
  {
    type metadata accessor for UILayoutPriority(0);
    v17 = v16;
    v148 = 1144750080;
    v147 = 1065353216;
    v18 = sub_100007D5C((unint64_t *)&qword_10028C218, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
    v19 = v15;
    static _UIKitNumericRawRepresentable.+ infix(_:_:)(&v146, &v148, &v147, v17, v18);
    LODWORD(v20) = v146;
    objc_msgSend(v19, "setPriority:", v20);

  }
  v21 = objc_msgSend(v1, "view");
  if (!v21)
    goto LABEL_31;
  v22 = v21;
  v23 = objc_msgSend(v21, "safeAreaLayoutGuide");

  v24 = objc_msgSend(v23, "bottomAnchor");
  v25 = sub_100130EB0();
  v26 = objc_msgSend(v25, "topAnchor");

  if (qword_10028A4A0 != -1)
    swift_once(&qword_10028A4A0, sub_100130C8C);
  v27 = objc_msgSend(v24, "constraintEqualToAnchor:constant:", v26, *(double *)&qword_1002AA4D8);

  v28 = *(void **)&v1[qword_1002946A0];
  *(_QWORD *)&v1[qword_1002946A0] = v27;

  v30 = *(void **)&v1[qword_1002946A0];
  if (v30)
  {
    LODWORD(v29) = 1144750080;
    objc_msgSend(v30, "setPriority:", v29);
  }
  v31 = sub_100131100();
  v32 = objc_msgSend(v31, "topAnchor");

  v33 = sub_100130EB0();
  v34 = objc_msgSend(v33, "topAnchor");

  v35 = objc_msgSend(v32, "constraintGreaterThanOrEqualToSystemSpacingBelowAnchor:multiplier:", v34, 3.0);
  v36 = sub_100131100();
  v37 = objc_msgSend(v36, "centerYAnchor");

  v38 = objc_msgSend(v1, "view");
  if (!v38)
    goto LABEL_32;
  v39 = v38;
  v143 = v35;
  v40 = objc_msgSend(v38, "centerYAnchor");

  v41 = objc_msgSend(v37, "constraintEqualToAnchor:", v40);
  LODWORD(v42) = 1132068864;
  v142 = v41;
  objc_msgSend(v41, "setPriority:", v42);
  v43 = sub_100130EB0();
  v44 = objc_msgSend(v43, "centerXAnchor");

  v45 = objc_msgSend(v1, "view");
  if (!v45)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v46 = v45;
  v47 = objc_msgSend(v45, "centerXAnchor");

  v48 = objc_msgSend(v44, "constraintEqualToAnchor:", v47);
  type metadata accessor for UILayoutPriority(0);
  v50 = v49;
  v147 = 1065353216;
  v148 = 1144750080;
  v51 = sub_100007D5C((unint64_t *)&qword_10028C218, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
  static _UIKitNumericRawRepresentable.+ infix(_:_:)(&v146, &v148, &v147, v50, v51);
  LODWORD(v52) = v146;
  objc_msgSend(v48, "setPriority:", v52);
  v53 = sub_100130EB0();
  v54 = objc_msgSend(v53, "widthAnchor");

  v55 = objc_msgSend(v1, "view");
  if (!v55)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v56 = v55;
  v57 = objc_msgSend(v55, "readableContentGuide");

  v58 = objc_msgSend(v57, "widthAnchor");
  v59 = objc_msgSend(v54, "constraintEqualToAnchor:multiplier:", v58, 1.0);

  v147 = 1065353216;
  v148 = 1144750080;
  static _UIKitNumericRawRepresentable.+ infix(_:_:)(&v146, &v148, &v147, v50, v51);
  LODWORD(v60) = v146;
  objc_msgSend(v59, "setPriority:", v60);
  v61 = objc_msgSend(v1, "traitCollection");
  v62 = objc_msgSend(v61, "horizontalSizeClass");

  objc_msgSend(v59, "setActive:", v62 != (id)1);
  v63 = *(void **)&v1[qword_100294720];
  *(_QWORD *)&v1[qword_100294720] = v59;
  v64 = v59;

  v65 = sub_100130EB0();
  v66 = objc_msgSend(v65, "leadingAnchor");

  v67 = objc_msgSend(v1, "view");
  if (!v67)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v68 = v67;
  v141 = v64;
  v69 = objc_msgSend(v67, "leadingAnchor");

  v70 = objc_msgSend(v66, "constraintEqualToAnchor:", v69);
  v148 = 1144750080;
  v147 = 1065353216;
  static _UIKitNumericRawRepresentable.+ infix(_:_:)(&v146, &v148, &v147, v50, v51);
  LODWORD(v71) = v146;
  objc_msgSend(v70, "setPriority:", v71);
  v72 = sub_100130EB0();
  v73 = objc_msgSend(v72, "trailingAnchor");

  v74 = objc_msgSend(v1, "view");
  if (!v74)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v75 = v74;
  v76 = objc_msgSend(v74, "trailingAnchor");

  v77 = objc_msgSend(v73, "constraintEqualToAnchor:", v76);
  LODWORD(v78) = 1144750080;
  objc_msgSend(v77, "setPriority:", v78);
  v79 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v80 = swift_allocObject(v79, 136, 7);
  *(_OWORD *)(v80 + 16) = xmmword_1001F23A0;
  *(_QWORD *)(v80 + 32) = v70;
  *(_QWORD *)(v80 + 40) = v77;
  *(_QWORD *)(v80 + 48) = v48;
  v140 = v70;
  v139 = v77;
  v138 = v48;
  v81 = sub_100130EB0();
  v82 = objc_msgSend(v81, "bottomAnchor");

  v83 = sub_100132B40(v1);
  v84 = objc_msgSend(v82, "constraintEqualToAnchor:", v83);

  *(_QWORD *)(v80 + 56) = v84;
  *(_QWORD *)(v80 + 64) = v143;
  *(_QWORD *)(v80 + 72) = v142;
  v144 = v143;
  v85 = v142;
  v86 = sub_100131100();
  v87 = objc_msgSend(v86, "bottomAnchor");

  v88 = objc_msgSend(v1, "view");
  if (!v88)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v89 = v88;
  v90 = objc_msgSend(v88, "safeAreaLayoutGuide");

  v91 = objc_msgSend(v90, "bottomAnchor");
  v92 = objc_msgSend(v87, "constraintLessThanOrEqualToAnchor:", v91);

  *(_QWORD *)(v80 + 80) = v92;
  v93 = sub_100131100();
  v94 = objc_msgSend(v93, "leadingAnchor");

  v95 = sub_100130EB0();
  v96 = objc_msgSend(v95, "leadingAnchor");

  v97 = objc_msgSend(v94, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", v96, 3.0);
  *(_QWORD *)(v80 + 88) = v97;
  v98 = sub_100130EB0();
  v99 = objc_msgSend(v98, "trailingAnchor");

  v100 = sub_100131100();
  v101 = objc_msgSend(v100, "trailingAnchor");

  v102 = objc_msgSend(v99, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", v101, 3.0);
  *(_QWORD *)(v80 + 96) = v102;
  v103 = objc_msgSend(v145, "view");
  if (!v103)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v104 = v103;
  v105 = objc_msgSend(v103, "bottomAnchor");

  v106 = objc_msgSend(v1, "view");
  if (!v106)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v107 = v106;
  v108 = objc_msgSend(v106, "safeAreaLayoutGuide");

  v109 = objc_msgSend(v108, "bottomAnchor");
  v110 = objc_msgSend(v1, "traitCollection");
  v111 = objc_msgSend(v110, "horizontalSizeClass");

  v112 = 0.0;
  if (v111 == (id)2)
  {
    if (qword_10028A4A8 != -1)
      swift_once(&qword_10028A4A8, sub_100130CA0);
    v112 = -*(double *)&qword_1002AA4E0;
  }
  v113 = objc_msgSend(v105, "constraintEqualToAnchor:constant:", v109, v112);

  *(_QWORD *)(v80 + 104) = v113;
  v114 = objc_msgSend(v145, "view");
  if (!v114)
    goto LABEL_40;
  v115 = v114;
  v116 = objc_msgSend(v114, "topAnchor");

  v117 = objc_msgSend(v1, "view");
  if (!v117)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v118 = v117;
  v119 = objc_msgSend(v117, "topAnchor");

  v120 = objc_msgSend(v116, "constraintEqualToAnchor:", v119);
  *(_QWORD *)(v80 + 112) = v120;
  v121 = objc_msgSend(v145, "view");
  if (!v121)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v122 = v121;
  v123 = objc_msgSend(v121, "trailingAnchor");

  v124 = objc_msgSend(v1, "view");
  if (!v124)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v125 = v124;
  v126 = objc_msgSend(v124, "trailingAnchor");

  v127 = objc_msgSend(v123, "constraintEqualToAnchor:", v126);
  *(_QWORD *)(v80 + 120) = v127;
  v128 = objc_msgSend(v145, "view");
  if (!v128)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v129 = v128;
  v130 = objc_msgSend(v128, "leadingAnchor");

  v131 = objc_msgSend(v1, "view");
  if (v131)
  {
    v132 = v131;
    v133 = (void *)objc_opt_self(NSLayoutConstraint);
    v134 = objc_msgSend(v132, "leadingAnchor");

    v135 = objc_msgSend(v130, "constraintEqualToAnchor:", v134);
    *(_QWORD *)(v80 + 128) = v135;
    v146 = v80;
    specialized Array._endMutation()(v136);
    sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v133, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    return;
  }
LABEL_45:
  __break(1u);
}

id sub_100132B40(void *a1)
{
  id v2;
  id v3;
  id result;
  void *v5;
  id v6;
  id v7;
  id v8;

  v2 = objc_msgSend(a1, "traitCollection");
  v3 = objc_msgSend(v2, "horizontalSizeClass");

  result = objc_msgSend(a1, "view");
  v5 = result;
  if (v3 == (id)1)
  {
    if (result)
    {
      v6 = objc_msgSend(result, "bottomAnchor");
LABEL_6:
      v8 = v6;

      return v8;
    }
    __break(1u);
  }
  else if (result)
  {
    v7 = objc_msgSend(result, "safeAreaLayoutGuide");

    v6 = objc_msgSend(v7, "bottomAnchor");
    v5 = v7;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_100132C24(char a1)
{
  void *v1;
  id v2;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  CGRect v16;

  if (a1 == 3)
  {
    v2 = objc_msgSend(v1, "view");
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, "frame");
      v5 = v4;
      v7 = v6;
      v9 = v8;
      v11 = v10;

      v16.origin.x = v5;
      v16.origin.y = v7;
      v16.size.width = v9;
      v16.size.height = v11;
      CGRectGetHeight(v16);
      v12 = objc_msgSend(v1, "view");
      if (v12)
      {
        v13 = v12;
        objc_msgSend(v12, "safeAreaInsets");

        if (qword_10028A4A0 != -1)
          swift_once(&qword_10028A4A0, sub_100130C8C);
        v14 = objc_msgSend(v1, "view");
        if (v14)
        {
          v15 = v14;
          objc_msgSend(v14, "safeAreaInsets");

          return;
        }
LABEL_13:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  if (a1 != 4)
    sub_100131BD4();
}

uint64_t sub_100132D80()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + qword_1002946C0);
  if (!v1)
    return 0;
  swift_retain(*(_QWORD *)(v0 + qword_1002946C0));
  v2 = sub_100130EB0();
  v3 = sub_10019BD48();

  v4 = objc_msgSend(v3, "text");
  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    swift_bridgeObjectRelease();
    v8 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v8 = v5 & 0xFFFFFFFFFFFFLL;
    v9 = v8 != 0;
  }
  else
  {
    v9 = 0;
  }
  KeyPath = swift_getKeyPath(&unk_1001F27A8);
  v12 = swift_getKeyPath(&unk_1001F27D0);
  static Published.subscript.getter(&v17, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v12);
  v13 = v17;
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v16 = v17;
    else
      v16 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v14 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_release(v1);
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v14 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    swift_release(v1);
  }
  if (v14)
    v15 = v9;
  else
    v15 = 1;
  if (v15)
    return 0;
  else
    return 3;
}

void sub_100132EF0(char a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v5;
  uint64_t *v6;
  BOOL v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  char v13;
  id v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  NSString v28;
  id v29;
  void *v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  id v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  void (*v43)(_BYTE *, _QWORD);
  uint64_t v44;
  void (*v45)(_BYTE *, _QWORD);
  uint64_t v46;
  void (*v47)(_BYTE *, _QWORD);
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  NSObject *oslog;
  id v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;

  v2 = *(void **)(v1 + qword_1002946B0);
  if (!v2)
    return;
  v3 = v1;
  v5 = v2;
  v53 = sub_100076A78();

  v6 = &qword_100294000;
  if (!a1)
  {
    v14 = sub_100131100();
    objc_msgSend(v14, "setHidden:", 1);
LABEL_10:

    v57 = 0;
    v55 = 0u;
    v56 = 0u;
LABEL_12:
    UIViewController.contentUnavailableConfiguration.setter(&v55);
LABEL_13:
    v17 = *(_QWORD *)(v3 + v6[217]);
    if (v17)
    {
      KeyPath = swift_getKeyPath(&unk_1001F2838);
      v19 = swift_getKeyPath(&unk_1001F2860);
      LOBYTE(v55) = 1;
      swift_retain(v17);
      static Published.subscript.setter(&v55, v17, KeyPath, v19);
    }
    v20 = sub_100130EB0();
    v20[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_uiVisible] = 0;
    v21 = &v20[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible];
    v20[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible] = 0;
    v22 = sub_10019C9B8();
    objc_msgSend(v22, "setHidden:", (*v21 & 1) == 0);

    v23 = sub_10019BD48();
    objc_msgSend(v23, "setHidden:", 1);

    if (*(unsigned __int8 *)(v3 + qword_1002946A8) - 1 <= 1)
    {
      v24 = sub_100132D80();
      sub_100134A2C(v24, 1, 0.0);
    }

    return;
  }
  if (a1 == 1)
  {
    v7 = sub_1001311CC();
    v8 = (char *)sub_100131100();
    v9 = v8;
    if (!v7)
    {
      objc_msgSend(v8, "setHidden:", 1);

      *((_QWORD *)&v56 + 1) = type metadata accessor for UIContentUnavailableConfiguration(0);
      v57 = &protocol witness table for UIContentUnavailableConfiguration;
      sub_1000122F8(&v55);
      sub_1000AD858(v53);
      goto LABEL_12;
    }
    v10 = &v8[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType];
    v11 = *(void **)&v8[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType];
    v12 = v53;
    *(_QWORD *)v10 = v53;
    v13 = v10[8];
    v10[8] = 0;
    goto LABEL_9;
  }
  if (sub_1001311CC())
  {
    v9 = (char *)sub_100131100();
    v15 = &v9[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType];
    v11 = *(void **)&v9[OBJC_IVAR____TtC17SequoiaTranslator35LegacyInlineTranslationTabErrorView_errorType];
    v12 = v53;
    *(_QWORD *)v15 = v53;
    v13 = v15[8];
    v15[8] = 1;
LABEL_9:
    v16 = v12;
    sub_1000E05B8(v11, v13);
    sub_1000FFD90();

    v14 = sub_100131100();
    objc_msgSend(v14, "setHidden:", 0);
    goto LABEL_10;
  }
  v25 = *(_QWORD *)(v3 + qword_1002946C8);
  if (v25)
  {
    swift_retain(*(_QWORD *)(v3 + qword_1002946C8));
    v26 = sub_100131100();
    objc_msgSend(v26, "setHidden:", 1);

    *((_QWORD *)&v56 + 1) = type metadata accessor for UIContentUnavailableConfiguration(0);
    v57 = &protocol witness table for UIContentUnavailableConfiguration;
    v27 = sub_1000122F8(&v55);
    static UIContentUnavailableConfiguration.empty()(v27);
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v28);

    UIContentUnavailableConfiguration.image.setter(v29);
    v30 = (void *)objc_opt_self(NSBundle);
    v31 = objc_msgSend(v30, "mainBundle");
    v58._object = (void *)0xE000000000000000;
    v32._countAndFlagsBits = 0x43495645445F4E4FLL;
    v32._object = (void *)0xEF454C5449545F45;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v58);

    UIContentUnavailableConfiguration.text.setter(v34._countAndFlagsBits, v34._object);
    v35 = objc_msgSend(v30, "mainBundle");
    v59._object = (void *)0xE000000000000000;
    v36._object = (void *)0x80000001001FD750;
    v36._countAndFlagsBits = 0xD000000000000015;
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v59._countAndFlagsBits = 0;
    v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v59);

    v39 = objc_msgSend(v30, "mainBundle", UIContentUnavailableConfiguration.secondaryText.setter(v38._countAndFlagsBits, v38._object).n128_f64[0]);
    v60._object = (void *)0xE000000000000000;
    v40._countAndFlagsBits = 0x43495645445F4E4FLL;
    v40._object = (void *)0xEE004B4E494C5F45;
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    v60._countAndFlagsBits = 0;
    v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, (NSBundle)v39, v41, v60);

    v43 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.button.modify(v54);
    UIButton.Configuration.title.setter(v42._countAndFlagsBits, v42._object);
    v43(v54, 0);
    sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
    v44 = static UIColor.translateAccentColor.getter();
    v45 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.button.modify(v54);
    UIButton.Configuration.baseForegroundColor.setter(v44);
    v45(v54, 0);
    v6 = &qword_100294000;
    UIContentUnavailableConfiguration.directionalLayoutMargins.setter(0.0, 90.0, 0.0, 90.0);
    sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
    swift_retain(v25);
    v46 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10011E7E0, v25);
    v47 = (void (*)(_BYTE *, _QWORD))UIContentUnavailableConfiguration.buttonProperties.modify(v54);
    UIContentUnavailableConfiguration.ButtonProperties.primaryAction.setter(v46);
    v47(v54, 0);
    UIViewController.contentUnavailableConfiguration.setter(&v55);
    swift_release(v25);
    goto LABEL_13;
  }
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v48 = type metadata accessor for Logger(0);
  v49 = sub_10000F66C(v48, (uint64_t)qword_1002AA338);
  oslog = Logger.logObject.getter(v49);
  v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v50, "Error: Missing ConversationContext", v51, 2u);
    swift_slowDealloc(v51, -1, -1);

  }
  else
  {

  }
}

id sub_1001335B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD);
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  NSString *v18;
  id v19;
  NSString *v20;
  void *v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  NSString *v27;
  NSString *v28;
  id v29;
  id v30;
  uint64_t KeyPath;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  void (*v36)(_QWORD *);
  NSString *v37;
  id v38;
  char isUniquelyReferenced_nonNull_native;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSString *v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  Swift::String v51;
  Swift::String v52;
  id v53;
  NSString v54;
  Class isa;
  uint64_t v56;
  uint64_t v57;
  id v58;
  Swift::String v59;
  Swift::String v60;
  id v61;
  NSString v62;
  Class v63;
  id v64;
  id v65;
  NSString v66;
  Class v67;
  id v68;
  uint64_t v69;
  id v70;
  char v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  char v78;
  id v79;
  id v81;
  id v82;
  id v83;
  void (*v84)(_QWORD);
  _QWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  id v89;
  unint64_t v90;
  _OWORD v91[2];
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95[120];

  v1 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v1);
  v5 = (id *)((char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + qword_1002946B0);
  if (v6)
  {
    v84 = v3;
    v85 = v5;
    v88 = v2;
    v89 = v6;
    v86 = v0;
    v7 = sub_100130EB0();
    v8 = sub_10019BD48();

    v9 = objc_msgSend(v8, "font");
    if (!v9)
    {
      v10 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
      v11 = (void *)objc_opt_self(UIFont);
      objc_msgSend(v10, "pointSize");
      v12 = objc_msgSend(v11, "systemFontOfSize:weight:");
      v13 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
      v9 = objc_msgSend(v13, "scaledFontForFont:maximumPointSize:", v12, 1.79769313e308);

    }
    v14 = sub_100006DF4(&qword_100298070);
    inited = swift_initStackObject(v14, v95);
    v87 = xmmword_1001E4D60;
    *(_OWORD *)(inited + 16) = xmmword_1001E4D60;
    *(_QWORD *)(inited + 32) = NSFontAttributeName;
    v16 = sub_10000A05C(0, (unint64_t *)&qword_10028C090, UIFont_ptr);
    *(_QWORD *)(inited + 40) = v9;
    *(_QWORD *)(inited + 64) = v16;
    *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
    v17 = qword_10028A4E0;
    v18 = NSFontAttributeName;
    v19 = v9;
    v20 = NSForegroundColorAttributeName;
    if (v17 != -1)
      swift_once(&qword_10028A4E0, sub_1001910A4);
    v21 = (void *)qword_1002AA5B8;
    v22 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v21;
    v23 = v21;
    v24 = sub_1001A4A88(inited);
    v25 = swift_initStackObject(v14, &v94);
    *(_OWORD *)(v25 + 16) = v87;
    *(_QWORD *)(v25 + 32) = v18;
    *(_QWORD *)(v25 + 40) = v19;
    *(_QWORD *)(v25 + 64) = v16;
    *(_QWORD *)(v25 + 72) = v20;
    v26 = (void *)qword_1002AA5B8;
    *(_QWORD *)(v25 + 104) = v22;
    *(_QWORD *)(v25 + 80) = v26;
    v83 = v19;
    v27 = v18;
    v28 = v20;
    v29 = v26;
    *(_QWORD *)&v87 = sub_1001A4A88(v25);
    v30 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
    objc_msgSend(v30, "setAlignment:", 2);
    KeyPath = swift_getKeyPath(&unk_1001F2718);
    v32 = swift_getKeyPath(&unk_1001F2740);
    v33 = v85;
    v34 = v89;
    static Published.subscript.getter(v85, v89, KeyPath);
    swift_release(KeyPath);
    swift_release(v32);
    LOBYTE(KeyPath) = Locale.isRTL()();
    v35 = v88;
    v36 = (void (*)(_QWORD *))*((_QWORD *)v84 + 1);
    v36(v33);
    if ((KeyPath & 1) != 0)
    {
      v93 = sub_10000A05C(0, &qword_10028EBF0, NSMutableParagraphStyle_ptr);
      *(_QWORD *)&v92 = v30;
      sub_10003EA2C(&v92, v91);
      v37 = NSParagraphStyleAttributeName;
      v38 = v30;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
      v90 = v24;
      sub_1001AAB5C(v91, v37, isUniquelyReferenced_nonNull_native);
      v24 = v90;

      swift_bridgeObjectRelease();
    }
    v41 = swift_getKeyPath(&unk_1001F2760);
    v42 = swift_getKeyPath(&unk_1001F2788);
    static Published.subscript.getter(v33, v34, v41);
    swift_release(v41);
    swift_release(v42);
    LOBYTE(v41) = Locale.isRTL()();
    ((void (*)(_QWORD *, uint64_t))v36)(v33, v35);
    v82 = v30;
    if ((v41 & 1) != 0)
    {
      v93 = sub_10000A05C(0, &qword_10028EBF0, NSMutableParagraphStyle_ptr);
      *(_QWORD *)&v92 = v30;
      sub_10003EA2C(&v92, v91);
      v43 = v30;
      v44 = NSParagraphStyleAttributeName;
      v45 = v87;
      v46 = swift_isUniquelyReferenced_nonNull_native(v87);
      v90 = v45;
      sub_1001AAB5C(v91, v44, v46);
      *(_QWORD *)&v87 = v90;

      swift_bridgeObjectRelease();
    }
    v47 = swift_getKeyPath(&unk_1001F2718);
    v48 = swift_getKeyPath(&unk_1001F2740);
    static Published.subscript.getter(v33, v34, v47);
    swift_release(v47);
    swift_release(v48);
    v49 = (void *)objc_opt_self(NSBundle);
    v50 = objc_msgSend(v49, "mainBundle");
    v51._countAndFlagsBits = 0x4E494E455453494CLL;
    v51._object = (void *)0xE900000000000047;
    v52._countAndFlagsBits = 0x617A696C61636F4CLL;
    v52._object = (void *)0xEB00000000656C62;
    Locale.ltLocalizedAppString(_:table:bundle:)(v51, v52, (NSBundle)v50);

    v84 = (void (*)(_QWORD))v36;
    ((void (*)(_QWORD *, uint64_t))v36)(v33, v35);
    v53 = objc_allocWithZone((Class)NSAttributedString);
    swift_bridgeObjectRetain(v24);
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v81 = objc_msgSend(v53, "initWithString:attributes:", v54, isa, swift_bridgeObjectRelease().n128_f64[0]);

    v56 = swift_getKeyPath(&unk_1001F2760);
    v57 = swift_getKeyPath(&unk_1001F2788);
    static Published.subscript.getter(v33, v89, v56);
    swift_release(v56);
    v58 = objc_msgSend(v49, "mainBundle", swift_release(v57).n128_f64[0]);
    v59._countAndFlagsBits = 0x4E494E455453494CLL;
    v59._object = (void *)0xE900000000000047;
    v60._countAndFlagsBits = 0x617A696C61636F4CLL;
    v60._object = (void *)0xEB00000000656C62;
    Locale.ltLocalizedAppString(_:table:bundle:)(v59, v60, (NSBundle)v58);

    ((void (*)(_QWORD *, uint64_t))v84)(v33, v88);
    v61 = objc_allocWithZone((Class)NSAttributedString);
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v63 = Dictionary._bridgeToObjectiveC()().super.isa;
    v64 = objc_msgSend(v61, "initWithString:attributes:", v62, v63, swift_bridgeObjectRelease().n128_f64[0]);

    v65 = objc_allocWithZone((Class)NSAttributedString);
    v66 = String._bridgeToObjectiveC()();
    v67 = Dictionary._bridgeToObjectiveC()().super.isa;
    v68 = objc_msgSend(v65, "initWithString:attributes:", v66, v67, swift_bridgeObjectRelease().n128_f64[0]);

    v69 = *(_QWORD *)(v86 + qword_1002946C8);
    if (v69)
    {
      swift_retain(*(_QWORD *)(v86 + qword_1002946C8));
      v70 = sub_100076A78();
      v71 = sub_1000645E0(v70);

      if ((v71 & 1) != 0)
      {
        v72 = objc_allocWithZone((Class)NSMutableAttributedString);
        v73 = v81;
        v40 = objc_msgSend(v72, "initWithAttributedString:", v81);
        objc_msgSend(v40, "appendAttributedString:", v68);
        objc_msgSend(v40, "appendAttributedString:", v64);

        swift_release(v69);
        v74 = v64;
        v75 = v73;
        v76 = v82;
        v77 = v83;
LABEL_18:

        return v40;
      }
      swift_release(v69);
    }
    v78 = sub_100075704();
    v79 = objc_allocWithZone((Class)NSMutableAttributedString);
    if ((v78 & 1) != 0)
    {
      v77 = v81;
      v40 = objc_msgSend(v79, "initWithAttributedString:", v81);

      v74 = v64;
      v75 = v82;
      v76 = v83;
    }
    else
    {
      v40 = objc_msgSend(v79, "initWithAttributedString:", v64);

      v74 = v68;
      v68 = v81;
      v75 = v82;
      v76 = v83;
      v77 = v64;
    }
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_100133EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  Class v25;
  id v26;
  void (*v27)(_QWORD *, uint64_t);
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  NSString v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  Swift::Bool v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  Swift::String v53;
  Swift::String v54;
  id v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  id aBlock;
  uint64_t v61;
  Swift::String v62;

  v3 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v9 = __chkstk_darwin(v8);
  v11 = (_QWORD **)((char *)&v56 - v10);
  result = __chkstk_darwin(v9);
  v15 = (_QWORD **)((char *)&v56 - v14);
  v16 = *(void **)(v1 + qword_1002946B0);
  if (v16)
  {
    v56 = v13;
    v57 = v5;
    v59 = a1;
    v17 = v16;
    v18 = (char *)sub_100130EB0();
    KeyPath = swift_getKeyPath(&unk_1001F2718);
    v20 = swift_getKeyPath(&unk_1001F2740);
    static Published.subscript.getter(v15, v17, KeyPath);
    swift_release(KeyPath);
    swift_release(v20);
    v21 = swift_getKeyPath(&unk_1001F2760);
    v22 = swift_getKeyPath(&unk_1001F2788);
    static Published.subscript.getter(v11, v17, v21);
    swift_release(v21);
    swift_release(v22);
    v23 = objc_allocWithZone((Class)_LTLocalePair);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v25 = Locale._bridgeToObjectiveC()().super.isa;
    v26 = objc_msgSend(v23, "initWithSourceLocale:targetLocale:", isa, v25);

    v58 = v7;
    v27 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
    v27(v11, v6);
    v27(v15, v6);
    v28 = *(void **)&v18[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_editingPair];
    *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_editingPair] = v26;

    v29 = sub_100130EB0();
    v30 = sub_10019C070();

    objc_msgSend(v30, "setHidden:", 1);
    v31 = swift_getKeyPath(&unk_1001F27F0);
    v32 = swift_getKeyPath(&unk_1001F2818);
    static Published.subscript.getter(&aBlock, v17, v31);
    swift_release(v31);
    swift_release(v32);
    if (v61 == 2)
    {

      v33 = sub_1001335B4();
      v34 = sub_100130EB0();
      v35 = sub_10019BD48();

      if (v33)
      {
        v36 = sub_100190DF0();
        objc_msgSend(v36, "setAttributedText:", v33);
      }
      else
      {
        v52 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v62._object = (void *)0x80000001001FE650;
        v53._countAndFlagsBits = 0x4E494E455453494CLL;
        v53._object = (void *)0xE900000000000047;
        v54._countAndFlagsBits = 0;
        v54._object = (void *)0xE000000000000000;
        v62._countAndFlagsBits = 0xD000000000000016;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v53, (Swift::String_optional)0, (NSBundle)v52, v54, v62);

        v36 = sub_100190DF0();
        v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        objc_msgSend(v36, "setText:", v33);
      }

      v55 = sub_100130EB0();
      v51 = sub_10019BD48();

      objc_msgSend(v51, "setUserInteractionEnabled:", 0);
    }
    else
    {
      sub_1000758CC((uint64_t)&aBlock);
      v37 = sub_100130EB0();
      v38 = sub_10019BD48();

      v39 = sub_100130EB0();
      sub_10019C7C0();

      v40 = sub_100190DF0();
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v40, "setText:", v41, swift_bridgeObjectRelease().n128_f64[0]);

      v42 = sub_100130EB0();
      v43 = sub_10019BD48();

      v44 = sub_100130EB0();
      v45 = (uint64_t)v57;
      sub_100082758((uint64_t)v44 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_selectedEditingLocale, (uint64_t)v57);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v45, 1, v6);
      v47 = v56;
      if ((_DWORD)v46 == 1)
      {
        static Locale.current.getter(v46);
        sub_10000A020(v45, (uint64_t *)&unk_10028FE50);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v58 + 32))(v56, v45, v6);
      }
      v48 = Locale.isRTL()();
      v27(v47, v6);

      if (v48)
        v49 = 2;
      else
        v49 = 0;
      objc_msgSend(v43, "setTextAlignment:", v49);

      v50 = sub_100130EB0();
      v51 = sub_10019BD48();

      objc_msgSend(v51, "setUserInteractionEnabled:", 1);
    }

    __asm { BR              X10 }
  }
  return result;
}

void sub_1001346EC(void *a1, double a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(a1, "tabBarController");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "tabBar");

    objc_msgSend(v5, "setAlpha:", a2);
  }
}

uint64_t sub_10013477C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v4 = __chkstk_darwin(v3);
  v5 = __chkstk_darwin(v4);
  result = __chkstk_darwin(v5);
  if (*(_QWORD *)(v1 + qword_1002946B0))
    __asm { BR              X10 }
  return result;
}

void sub_1001348D4()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  KeyPath = swift_getKeyPath(&unk_1001F2688);
  v5 = swift_getKeyPath(&unk_1001F26B0);
  v6 = v2;
  static Published.subscript.getter(v1, v6, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v1, 1, v7) == 1)
  {
    sub_10000A020((uint64_t)v1, (uint64_t *)&unk_10028FE50);
    v9 = swift_getKeyPath(&unk_1001F2718);
    v10 = swift_getKeyPath(&unk_1001F2740);
    static Published.subscript.getter(v0, v6, v9);
    swift_release(v9);
    v11 = swift_release(v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, __n128))(v8 + 56))(v0, 0, 1, v7, v11);
    v12 = swift_getKeyPath(&unk_1001F2688);
    v13 = swift_getKeyPath(&unk_1001F26B0);
    sub_100082758((uint64_t)v0, v3);
    v14 = v6;
    static Published.subscript.setter(v3, v14, v12, v13);
    sub_10000A020((uint64_t)v0, (uint64_t *)&unk_10028FE50);

  }
  else
  {

    sub_10000A020((uint64_t)v1, (uint64_t *)&unk_10028FE50);
  }
  JUMPOUT(0x1001348B8);
}

void sub_100134A2C(uint64_t a1, char a2, double a3)
{
  _BYTE *v3;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  char *v13;
  id v14;
  double v15;
  int v16;
  id v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double MinY;
  double v27;
  double v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE *v44;
  void **v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  CGRect v51;

  sub_100135C3C();
  v7 = *(void **)&v3[qword_100294698];
  if (v7)
    objc_msgSend(v7, "setActive:", 0);
  v8 = *(void **)&v3[qword_1002946A0];
  if (v8)
    objc_msgSend(v8, "setActive:", 0);
  if (a1 == 3)
  {
    v9 = *(void **)&v3[qword_1002946A0];
    if (v9)
      objc_msgSend(v9, "setActive:", 1);
  }
  else
  {
    v10 = *(void **)&v3[qword_100294698];
    if (v10)
    {
      objc_msgSend(v10, "setActive:", 1);
      v11 = *(void **)&v3[qword_100294698];
      if (v11)
      {
        v12 = v11;
        sub_100132C24(a1);
        objc_msgSend(v12, "setConstant:");

      }
    }
  }
  v13 = (char *)sub_100130EB0();
  v14 = *(id *)&v13[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_textInputTopAnchor];

  v15 = 0.0;
  if ((((_DWORD)a1 - 1) & 0xFE) == 0)
    v15 = 20.0;
  objc_msgSend(v14, "setConstant:", v15);

  sub_100133EC8(a1);
  v16 = v3[qword_1002946A8];
  if (v16 == 3)
  {
    if (a1 == 3)
      return;
  }
  else if (v16 == 4)
  {
    if (a1 == 4)
      return;
  }
  else if ((a1 - 5) <= 0xFDu && v16 == a1)
  {
    return;
  }
  sub_10013477C(a1);
  v3[qword_1002946A8] = a1;
  if ((a2 & 1) != 0)
  {
    v17 = sub_100130EB0();
    objc_msgSend(v17, "frame");
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v25 = v24;

    v51.origin.x = v19;
    v51.origin.y = v21;
    v51.size.width = v23;
    v51.size.height = v25;
    MinY = CGRectGetMinY(v51);
    sub_100132C24(v3[qword_1002946A8]);
    if (vabdd_f64(v27, MinY) >= 0.01)
      v28 = a3 / (v27 - MinY);
    else
      v28 = 0.0;
    v29 = objc_msgSend(objc_allocWithZone((Class)CASpringAnimation), "init");
    objc_msgSend(v29, "setStiffness:", 333.333333);
    objc_msgSend(v29, "stiffness");
    v31 = sqrt(v30);
    objc_msgSend(v29, "setDamping:", (v31 + v31) * 4.56435465);
    objc_msgSend(v29, "setInitialVelocity:", v28);
    objc_msgSend(v29, "settlingDuration");
    v33 = v32;
    v34 = objc_msgSend(v3, "view");
    if (v34)
    {
      v35 = v34;
      objc_msgSend(v34, "_removeAllAnimations:", 1);

      v36 = (void *)objc_opt_self(UIView);
      v37 = swift_allocObject(&unk_10026CEE0, 24, 7);
      *(_QWORD *)(v37 + 16) = v3;
      v49 = sub_100138A6C;
      v50 = v37;
      v45 = _NSConcreteStackBlock;
      v46 = 1107296256;
      v47 = sub_100075908;
      v48 = &unk_10026CEF8;
      v38 = _Block_copy(&v45);
      v39 = v50;
      v40 = v3;
      swift_release(v39);
      v41 = swift_allocObject(&unk_10026CF30, 32, 7);
      *(_BYTE *)(v41 + 16) = a1;
      *(_QWORD *)(v41 + 24) = v40;
      v49 = sub_100138A98;
      v50 = v41;
      v45 = _NSConcreteStackBlock;
      v46 = 1107296256;
      v47 = sub_1000A4E10;
      v48 = &unk_10026CF48;
      v42 = _Block_copy(&v45);
      v43 = v50;
      v44 = v40;
      swift_release(v43);
      objc_msgSend(v36, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 2, v38, v42, v33, 0.0, 4.56435465, v28);
      _Block_release(v42);
      _Block_release(v38);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100134E40(void *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(a1, "view");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "layoutIfNeeded");

  }
  else
  {
    __break(1u);
  }
}

void sub_100134E88(char a1, unsigned __int8 a2)
{
  id v3;
  id v4;

  if ((a1 & 1) != 0 && a2 - 5 <= 0xFFFFFFFD && a2 == 2)
  {
    v3 = sub_100130EB0();
    v4 = sub_10019BD48();

    objc_msgSend(v4, "becomeFirstResponder");
  }
}

double sub_100134EF0()
{
  uint64_t v0;

  return *(double *)(v0 + qword_100294730);
}

void sub_100134F00(double a1)
{
  uint64_t v1;

  *(double *)(v1 + qword_100294730) = a1;
}

uint64_t sub_100134F10()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_100294738);
}

uint64_t sub_100134F20(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + qword_100294738) = result;
  return result;
}

void sub_100134F30(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  id v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  id v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  id v27;
  id v28;
  void *v29;
  double v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  CGRect v49;

  v2 = v1;
  v3 = *(_QWORD *)&v1[qword_1002946C0];
  if (v3)
  {
    KeyPath = swift_getKeyPath(&unk_1001F27A8);
    v6 = swift_getKeyPath(&unk_1001F27D0);
    swift_retain(v3);
    static Published.subscript.getter(&v48, v7, KeyPath);
    swift_release(KeyPath);
    swift_release(v6);
    if ((unint64_t)v48 >> 62)
    {
      if (v48 < 0)
        v46 = v48;
      else
        v46 = v48 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v48);
      v8 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
    if (v8 < 1)
    {
LABEL_32:
      swift_release(v3);
      return;
    }
    v10 = objc_msgSend(v2, "view", v9);
    objc_msgSend(a1, "translationInView:", v10);
    v12 = v11;

    v13 = objc_msgSend(v2, "view");
    objc_msgSend(a1, "velocityInView:", v13);
    v15 = v14;

    switch((unint64_t)objc_msgSend(a1, "state"))
    {
      case 1uLL:
        v2[qword_100294738] = v2[qword_1002946A8];
        v2[qword_1002946A8] = 4;
        v16 = *(void **)&v2[qword_1002946A0];
        if (v16)
          objc_msgSend(v16, "setActive:", 0);
        v17 = *(void **)&v2[qword_100294698];
        if (v17)
          objc_msgSend(v17, "setActive:", 1);
        v18 = sub_100130EB0();
        objc_msgSend(v18, "frame");
        v20 = v19;
        v22 = v21;
        v24 = v23;
        v26 = v25;

        v49.origin.x = v20;
        v49.origin.y = v22;
        v49.size.width = v24;
        v49.size.height = v26;
        *(CGFloat *)&v2[qword_100294730] = CGRectGetMinY(v49);
        v27 = sub_100130EB0();
        v28 = sub_10019BD48();

        objc_msgSend(v28, "resignFirstResponder");
        goto LABEL_32;
      case 2uLL:
        v29 = *(void **)&v2[qword_100294698];
        if (!v29)
          goto LABEL_32;
        v30 = v12 + *(double *)&v2[qword_100294730];
        v31 = v29;
        sub_100131BD4();
        if (v32 > v30)
          v30 = v32;
        sub_100132C24(3);
        if (v33 >= v30)
          v33 = v30;
        objc_msgSend(v31, "setConstant:", v33);
        swift_release(v3);

        return;
      case 3uLL:
        sub_100132C24(3);
        v35 = v34;
        sub_100131BD4();
        v37 = v35 - v36;
        v38 = v2[qword_100294738];
        if ((v38 - 3) >= 2)
        {
          if (fabs(v12) >= v37 * 0.25)
          {
LABEL_20:
            if (v15 <= 500.0 && v15 < -500.0)
            {
LABEL_22:
              sub_100132D80();
              __asm { BR              X10 }
            }
LABEL_26:
            v40 = &v2[qword_100294710];
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
            swift_bridgeObjectRelease();
            v41 = *(_QWORD *)&v2[qword_1002946C8];
            if (v41)
            {
              v42 = swift_getKeyPath(&unk_1001F2640);
              v43 = swift_getKeyPath(&unk_1001F2668);
              v47 = 0;
              swift_retain(v41);
              static Published.subscript.setter(&v47, v41, v42, v43);
            }
            v44 = *(void **)&v2[qword_1002946B0];
            if (v44)
            {
              v45 = v44;
              sub_100079BF0(0, 0, 0);

            }
            v39 = sub_100132D80();
LABEL_31:
            sub_100134A2C(v39, 1, v15);
            goto LABEL_32;
          }
        }
        else if (v38 != 3 || v37 * 0.25 >= fabs(v12))
        {
          goto LABEL_20;
        }
        if (v15 <= 500.0)
          goto LABEL_22;
        goto LABEL_26;
      case 4uLL:
        v39 = v2[qword_100294738];
        goto LABEL_31;
      default:
        goto LABEL_32;
    }
  }
}

void sub_1001353C0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_100134F30(v4);

}

void sub_100135414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  NSString v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  id v47;
  id v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = v4;
  v53 = a4;
  v54 = a1;
  v8 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v49 - v12;
  v14 = type metadata accessor for Locale(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v49 - v19;
  sub_100134A2C(2, 1, 0.0);
  v21 = *(void **)(v4 + qword_1002946B0);
  if (v21)
  {
    v51 = v5;
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v49 = a3;
    v22(v20, a3, v14);
    KeyPath = swift_getKeyPath(&unk_1001F2718);
    v50 = v11;
    v24 = KeyPath;
    v25 = swift_getKeyPath(&unk_1001F2740);
    v52 = a2;
    v26 = v25;
    v22(v18, (uint64_t)v20, v14);
    v27 = v21;
    static Published.subscript.setter(v18, v27, v24, v26);
    sub_1000766FC();
    v28 = *(void (**)(char *, uint64_t))(v15 + 8);
    v28(v20, v14);
    v22(v20, v53, v14);
    v29 = swift_getKeyPath(&unk_1001F2760);
    v30 = swift_getKeyPath(&unk_1001F2788);
    v22(v18, (uint64_t)v20, v14);
    v31 = v27;
    static Published.subscript.setter(v18, v31, v29, v30);
    sub_100076734();
    v28(v20, v14);
    v22(v13, v49, v14);
    v5 = v51;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    v32 = swift_getKeyPath(&unk_1001F2688);
    v33 = swift_getKeyPath(&unk_1001F26B0);
    v34 = (uint64_t)v50;
    sub_100082758((uint64_t)v13, (uint64_t)v50);
    v35 = v31;
    v36 = v33;
    a2 = v52;
    static Published.subscript.setter(v34, v35, v32, v36);
    sub_10000A020((uint64_t)v13, (uint64_t *)&unk_10028FE50);

  }
  v37 = sub_100130EB0();
  v38 = sub_10019BD48();

  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v38, "setText:", v39);

  v40 = sub_100130EB0();
  v41 = sub_10019BD48();

  v42 = objc_msgSend(v41, "text");
  if (v42)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

  }
  else
  {
    v43 = 0;
    v45 = 0;
  }
  v46 = (uint64_t *)(v5 + qword_100294710);
  *v46 = v43;
  v46[1] = v45;
  swift_bridgeObjectRelease();
  v47 = sub_100130EB0();
  v48 = sub_10019BD48();

  objc_msgSend(v48, "setSelectedRange:", 0, String.count.getter(v54, a2));
}

uint64_t sub_1001357A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  __n128 v20;
  void (*v21)(char *, uint64_t, __n128);
  uint64_t v23;

  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v23 - v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v18 = v17;
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(a4);
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(a5);
  v19 = a1;
  sub_100135414(v16, v18, (uint64_t)v15, (uint64_t)v13);

  v20 = swift_bridgeObjectRelease();
  v21 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
  v21(v13, v9, v20);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, v9);
}

void sub_1001358B4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_100294740);
  *(_QWORD *)(v1 + qword_100294740) = a1;

}

void sub_1001358C8(void *a1)
{
  char *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  void **v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void (*v33)();
  uint64_t v34;

  if (!*(_QWORD *)&v1[qword_100294740])
  {
    v2 = v1;
    *(_QWORD *)&v1[qword_100294740] = a1;
    v3 = a1;
    v4 = objc_msgSend(v1, "parentViewController");
    objc_msgSend(v4, "addChildViewController:", v3);

    v5 = objc_msgSend(v3, "view");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "setAlpha:", 0.0);

      v7 = objc_msgSend(v2, "parentViewController");
      if (v7)
      {
        v8 = v7;
        v9 = objc_msgSend(v7, "view");

        if (!v9)
        {
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
        v10 = objc_msgSend(v3, "view");
        if (!v10)
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
        v11 = v10;
        objc_msgSend(v9, "addSubview:", v10);

      }
      v12 = objc_msgSend(v3, "view");
      if (v12)
      {
        v13 = v12;
        objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

        v14 = objc_msgSend(v2, "parentViewController");
        if (!v14)
        {
LABEL_12:
          v19 = (void *)objc_opt_self(UIView);
          v20 = swift_allocObject(&unk_10026D070, 24, 7);
          *(_QWORD *)(v20 + 16) = v3;
          v33 = sub_100138BA0;
          v34 = v20;
          v29 = _NSConcreteStackBlock;
          v30 = 1107296256;
          v31 = sub_100075908;
          v32 = &unk_10026D088;
          v21 = _Block_copy(&v29);
          v22 = v34;
          v23 = v3;
          swift_release(v22);
          v24 = swift_allocObject(&unk_10026D0C0, 32, 7);
          *(_QWORD *)(v24 + 16) = v23;
          *(_QWORD *)(v24 + 24) = v2;
          v33 = sub_100138BE8;
          v34 = v24;
          v29 = _NSConcreteStackBlock;
          v30 = 1107296256;
          v31 = sub_1000A4E10;
          v32 = &unk_10026D0D8;
          v25 = _Block_copy(&v29);
          v26 = v34;
          v27 = v23;
          v28 = v2;
          swift_release(v26);
          objc_msgSend(v19, "animateWithDuration:animations:completion:", v21, v25, 0.4);
          _Block_release(v25);
          _Block_release(v21);
          return;
        }
        v15 = v14;
        v16 = objc_msgSend(v14, "view");

        if (v16)
        {
          v17 = objc_msgSend(v3, "view");
          if (v17)
          {
            v18 = v17;
            sub_1001DB5F8(v17);

            goto LABEL_12;
          }
LABEL_19:
          __break(1u);
          return;
        }
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
}

uint64_t sub_100135BB0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  _OWORD v13[2];

  if (a4)
  {
    v7 = a3;
    v8 = a1;
    swift_unknownObjectRetain(a4);
    _bridgeAnyObjectToAny(_:)(v13, v9);
    swift_unknownObjectRelease(a4);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    v10 = a3;
    v11 = a1;
  }
  sub_1001358C8(a3);

  return sub_10000A020((uint64_t)v13, (uint64_t *)&unk_10028C0B0);
}

void sub_100135C3C()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  char *v12;
  void **v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v1 = *(void **)&v0[qword_100294740];
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v2, "willMoveToParentViewController:", 0);
    v3 = (void *)objc_opt_self(UIView);
    v4 = swift_allocObject(&unk_10026CE40, 24, 7);
    *(_QWORD *)(v4 + 16) = v2;
    v17 = sub_100138A40;
    v18 = v4;
    v13 = _NSConcreteStackBlock;
    v14 = 1107296256;
    v15 = sub_100075908;
    v16 = &unk_10026CE58;
    v5 = _Block_copy(&v13);
    v6 = v18;
    v7 = v2;
    swift_release(v6);
    v8 = swift_allocObject(&unk_10026CE90, 32, 7);
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = v0;
    v17 = sub_100138A5C;
    v18 = v8;
    v13 = _NSConcreteStackBlock;
    v14 = 1107296256;
    v15 = sub_1000A4E10;
    v16 = &unk_10026CEA8;
    v9 = _Block_copy(&v13);
    v10 = v18;
    v11 = v7;
    v12 = v0;
    swift_release(v10);
    objc_msgSend(v3, "animateWithDuration:animations:completion:", v5, v9, 0.4);
    _Block_release(v9);
    _Block_release(v5);

  }
}

void sub_100135DB4(void *a1, double a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a1, "view");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "setAlpha:", a2);

  }
  else
  {
    __break(1u);
  }
}

void sub_100135E0C(int a1, id a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = objc_msgSend(a2, "view");
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "removeFromSuperview");

    objc_msgSend(a2, "removeFromParentViewController");
    v7 = *(void **)(a3 + qword_100294740);
    *(_QWORD *)(a3 + qword_100294740) = 0;

  }
  else
  {
    __break(1u);
  }
}

void sub_100135E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double Height;
  id v18;
  id v19;
  double v20;
  double v21;
  id v22;
  id v23;
  _QWORD v24[2];
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;
  CGRect v28;

  v0 = Notification.userInfo.getter();
  if (!v0)
  {
    v26 = 0u;
    v27 = 0u;
LABEL_10:
    sub_10000A020((uint64_t)&v26, (uint64_t *)&unk_10028C0B0);
    return;
  }
  v1 = v0;
  v24[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
  v24[1] = v2;
  AnyHashable.init<A>(_:)(v25, v24, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v3 = sub_1001A87EC((uint64_t)v25), (v4 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)v25);
  if (!*((_QWORD *)&v27 + 1))
    goto LABEL_10;
  v5 = sub_10000A05C(0, (unint64_t *)&unk_1002948D0, NSValue_ptr);
  if ((swift_dynamicCast(v25, &v26, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = (void *)v25[0];
    v7 = sub_100130EB0();
    v8 = sub_10019BD48();

    objc_msgSend(v8, "frame");
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

    v28.origin.x = v10;
    v28.origin.y = v12;
    v28.size.width = v14;
    v28.size.height = v16;
    Height = CGRectGetHeight(v28);
    v18 = sub_100130EB0();
    v19 = sub_10019BD48();

    objc_msgSend(v6, "CGRectValue");
    objc_msgSend(v19, "convertRect:fromView:", 0);
    v21 = v20;

    v22 = sub_100130EB0();
    v23 = sub_10019BD48();

    objc_msgSend(v23, "setContentInset:", 0.0, 0.0, Height - v21 + 20.0, 0.0);
  }
}

uint64_t sub_100136088(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100136CC8(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Notification, (void (*)(uint64_t))&static Notification._unconditionallyBridgeFromObjectiveC(_:), (void (*)(char *))sub_100135E88);
}

void sub_1001360A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  _QWORD v10[2];
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;

  v0 = Notification.userInfo.getter();
  if (!v0)
  {
    v12 = 0u;
    v13 = 0u;
LABEL_10:
    sub_10000A020((uint64_t)&v12, (uint64_t *)&unk_10028C0B0);
    return;
  }
  v1 = v0;
  v10[0] = 0xD000000000000011;
  v10[1] = 0x80000001001F92E0;
  AnyHashable.init<A>(_:)(v11, v10, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v2 = sub_1001A87EC((uint64_t)v11), (v3 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v12);
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)v11);
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_10;
  type metadata accessor for CGSize(0);
  if ((swift_dynamicCast(v11, &v12, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
  {
    v5 = v11[0];
    v6 = v11[1];
    v7 = sub_100130EB0();
    v8 = (char *)sub_10019BD48();

    v9 = &v8[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder_minSourceTextSize];
    *(_QWORD *)v9 = v5;
    *((_QWORD *)v9 + 1) = v6;

  }
}

uint64_t sub_1001361DC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100136CC8(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Notification, (void (*)(uint64_t))&static Notification._unconditionallyBridgeFromObjectiveC(_:), (void (*)(char *))sub_1001360A4);
}

Class sub_1001361F8(void *a1)
{
  id v1;
  _QWORD *v2;
  NSArray v3;

  v1 = a1;
  v2 = sub_100136254();

  if (v2)
  {
    type metadata accessor for Locale(0);
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.isa = 0;
  }
  return v3.super.isa;
}

_QWORD *sub_100136254()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + qword_1002946B0);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = sub_100006DF4((uint64_t *)&unk_100292580);
  v3 = *(_QWORD *)(type metadata accessor for Locale(0) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001E4D60;
  v8 = (_QWORD *)(v7 + v6);
  KeyPath = swift_getKeyPath(&unk_1001F2718);
  v10 = swift_getKeyPath(&unk_1001F2740);
  v11 = v1;
  static Published.subscript.getter(v8, v11, KeyPath);
  swift_release(KeyPath);
  swift_release(v10);
  v12 = swift_getKeyPath(&unk_1001F2760);
  v13 = swift_getKeyPath(&unk_1001F2788);
  static Published.subscript.getter((_QWORD *)((char *)v8 + v4), v11, v12);

  swift_release(v12);
  swift_release(v13);
  return (_QWORD *)v7;
}

BOOL sub_100136380()
{
  return sub_100138B2C();
}

uint64_t sub_1001363A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = type metadata accessor for Locale(0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 2, v5);
  if (v6)
  {
    if (v6 == 1)
      return 0x7373696D736964;
    else
      return 0x6B61657073;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
    return 0x6769626D61736964;
  }
}

void sub_100136498(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  NSLocale v25;
  Class v26;
  id v27;
  void (*v28)(_QWORD *, uint64_t);
  NSString v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD aBlock[5];
  char *v49;

  v45 = a1;
  v2 = *(_QWORD *)((swift_isaMask & *v1) + 0x50);
  v3 = *(_QWORD *)((swift_isaMask & *v1) + 0x58);
  v4 = *(_QWORD *)((swift_isaMask & *v1) + 0x60);
  v47 = type metadata accessor for NewTranslationController.LIDAction(0, v2, v3, v4);
  v5 = *(_QWORD *)(v47 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v47);
  v46 = (char *)&v40 - v7;
  v8 = type metadata accessor for Locale(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v14 = (uint64_t *)((char *)&v40 - v13);
  v15 = *(void **)((char *)v1 + qword_1002946B0);
  if (v15)
  {
    v42 = v12;
    KeyPath = swift_getKeyPath(&unk_1001F2718);
    v17 = swift_getKeyPath(&unk_1001F2740);
    v44 = v2;
    v18 = v17;
    v19 = v15;
    v43 = v4;
    v20 = v19;
    static Published.subscript.getter(v14, v19, KeyPath);
    swift_release(KeyPath);
    swift_release(v18);
    v21 = swift_getKeyPath(&unk_1001F2760);
    v22 = swift_getKeyPath(&unk_1001F2788);
    static Published.subscript.getter(v11, v20, v21);
    swift_release(v21);
    swift_release(v22);
    v23 = objc_allocWithZone((Class)_LTLocalePair);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v25.super.isa = Locale._bridgeToObjectiveC()().super.isa;
    v41 = v3;
    v26 = v25.super.isa;
    v27 = objc_msgSend(v23, "initWithSourceLocale:targetLocale:", isa, v25.super.isa);

    v28 = *(void (**)(_QWORD *, uint64_t))(v42 + 8);
    v28(v11, v8);
    v28(v14, v8);
    v29 = String._bridgeToObjectiveC()();
    v30 = v46;
    v31 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v46, v45, v47);
    v32 = *(unsigned __int8 *)(v5 + 80);
    v33 = (v32 + 56) & ~v32;
    v34 = (char *)swift_allocObject(&unk_10026CDF0, v33 + v6, v32 | 7);
    v35 = v41;
    *((_QWORD *)v34 + 2) = v44;
    *((_QWORD *)v34 + 3) = v35;
    *((_QWORD *)v34 + 4) = v43;
    *((_QWORD *)v34 + 5) = v20;
    *((_QWORD *)v34 + 6) = v27;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v34[v33], v30, v31);
    aBlock[4] = sub_10013884C;
    v49 = v34;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100170878;
    aBlock[3] = &unk_10026CE08;
    v36 = _Block_copy(aBlock);
    v37 = v49;
    v38 = v20;
    v39 = v27;
    swift_release(v37);
    AnalyticsSendEventLazy(v29, v36);
    _Block_release(v36);

  }
}

uint64_t sub_1001367B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, __n128);
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSString v30;
  NSString v31;
  uint64_t WitnessTable;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  NSString v40;
  char isUniquelyReferenced_nonNull_native;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53[136];

  v49 = a2;
  v50 = a3;
  v7 = type metadata accessor for NewTranslationController.LIDAction(0, a4, a5, a6);
  v51 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v47 = (char *)&v46 - v8;
  v9 = type metadata accessor for Locale(0);
  v48 = *(_QWORD *)(v9 - 8);
  v10 = v48;
  v11 = __chkstk_darwin(v9);
  v46 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char **)((char *)&v46 - v14);
  __chkstk_darwin(v13);
  v17 = (char **)((char *)&v46 - v16);
  v18 = sub_100006DF4(&qword_1002948B8);
  inited = swift_initStackObject(v18, v53);
  *(_OWORD *)(inited + 16) = xmmword_1001E6660;
  strcpy((char *)(inited + 32), "sourceLocale");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  KeyPath = swift_getKeyPath(&unk_1001F2718);
  v21 = swift_getKeyPath(&unk_1001F2740);
  static Published.subscript.getter(v17, a1, KeyPath);
  swift_release(KeyPath);
  swift_release(v21);
  Locale.ltIdentifier.getter(v22);
  v23 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
  ((void (*)(_QWORD *, uint64_t))v23)(v17, v9);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v24;
  strcpy((char *)(inited + 56), "targetLocale");
  *(_BYTE *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  v25 = swift_getKeyPath(&unk_1001F2760);
  v26 = swift_getKeyPath(&unk_1001F2788);
  v27 = a1;
  v28 = v47;
  static Published.subscript.getter(v15, v27, v25);
  swift_release(v25);
  swift_release(v26);
  Locale.ltIdentifier.getter(v29);
  ((void (*)(_QWORD *, uint64_t))v23)(v15, v9);
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v30;
  *(_QWORD *)(inited + 80) = 0x6150656C61636F6CLL;
  *(_QWORD *)(inited + 88) = 0xEA00000000007269;
  sub_100005EC8();
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 96) = v31;
  *(_QWORD *)(inited + 104) = 0x6E6F69746361;
  *(_QWORD *)(inited + 112) = 0xE600000000000000;
  WitnessTable = swift_getWitnessTable(&unk_1001F2928, v7);
  v33 = v50;
  dispatch thunk of CustomStringConvertible.description.getter(v7, WitnessTable);
  v34 = String._bridgeToObjectiveC()();
  v35 = v51;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 120) = v34;
  v36 = v48;
  v37 = sub_1001A4E24(inited);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v28, v33, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v28, 2, v9))
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v7);
  }
  else
  {
    v38 = v46;
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v46, v28, v9);
    Locale.ltIdentifier.getter(v39);
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
    v52 = v37;
    sub_1001AAC7C((uint64_t)v40, 0x6F4C6E65736F6863, 0xEC000000656C6163, isUniquelyReferenced_nonNull_native);
    v37 = v52;
    v42 = swift_bridgeObjectRelease();
    v23(v38, v9, v42);
  }
  sub_1001309B8(v37);
  v44 = v43;
  swift_bridgeObjectRelease();
  return v44;
}

void sub_100136BA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v3 = type metadata accessor for NewTranslationController.LIDAction(0, *(_QWORD *)((swift_isaMask & *v1) + 0x50), *(_QWORD *)((swift_isaMask & *v1) + 0x58), *(_QWORD *)((swift_isaMask & *v1) + 0x60));
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - v5;
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 2, v7);
  sub_100136498((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100135C3C();
  v9 = *(void **)((char *)v1 + qword_1002946B0);
  if (v9)
  {
    v10 = v9;
    sub_1000785F8(a1);

  }
}

uint64_t sub_100136CAC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100136CC8(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, (void (*)(uint64_t))&static Locale._unconditionallyBridgeFromObjectiveC(_:), (void (*)(char *))sub_100136BA8);
}

uint64_t sub_100136CC8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t), void (*a6)(char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v16;

  v10 = a4(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v16 - v12;
  a5(a3);
  v14 = a1;
  a6(v13);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_100136D70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;

  v1 = type metadata accessor for NewTranslationController.LIDAction(0, *(_QWORD *)((swift_isaMask & *v0) + 0x50), *(_QWORD *)((swift_isaMask & *v0) + 0x58), *(_QWORD *)((swift_isaMask & *v0) + 0x60));
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v8 - v3;
  v5 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 2, v5);
  sub_100136498((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_100135C3C();
  v6 = *(void **)((char *)v0 + qword_1002946B0);
  if (v6)
  {
    v7 = v6;
    sub_100079BF0(0, 0, 0);

  }
}

void sub_100136E50(void *a1)
{
  id v1;

  v1 = a1;
  sub_100136D70();

}

void sub_100136E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + qword_1002946C8);
  if (v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001F2640);
    v3 = swift_getKeyPath(&unk_1001F2668);
    v4 = 1;
    swift_retain(v1);
    static Published.subscript.setter(&v4, v1, KeyPath, v3);
  }
  sub_100134A2C(2, 1, 0.0);
}

void sub_100136F10(void *a1)
{
  id v1;

  v1 = a1;
  sub_100136E84();

}

void sub_100136F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_QWORD *)(v0 + qword_1002946C8);
  if (v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001F2640);
    v3 = swift_getKeyPath(&unk_1001F2668);
    v5 = 0;
    swift_retain(v1);
    static Published.subscript.setter(&v5, v1, KeyPath, v3);
  }
  v4 = sub_100132D80();
  sub_100134A2C(v4, 1, 0.0);
}

void sub_100136FCC(void *a1)
{
  id v1;

  v1 = a1;
  sub_100136F44();

}

void sub_100137000(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t KeyPath;
  uint64_t v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  id v43;
  id v44;
  char v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  char v60;
  _QWORD v61[3];

  v58 = a3;
  v6 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v54 - v13);
  v15 = type metadata accessor for Locale(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v3;
  v19 = *(void **)(v3 + qword_1002946B0);
  if (v19)
  {
    v56 = a1;
    v57 = a2;
    KeyPath = swift_getKeyPath(&unk_1001F2688);
    v21 = swift_getKeyPath(&unk_1001F26B0);
    v22 = v19;
    static Published.subscript.getter(v14, v22, KeyPath);
    swift_release(KeyPath);
    v23 = swift_release(v21);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v16 + 48))(v14, 1, v15, v23) == 1)
    {

      sub_10000A020((uint64_t)v14, (uint64_t *)&unk_10028FE50);
    }
    else
    {
      v55 = v22;
      v24 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v16 + 32))(v18, v14, v15);
      Date.init()(v24);
      v25 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 0, 1, v25);
      v26 = v58;
      v27 = (uint64_t)&v58[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start];
      swift_beginAccess(&v58[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start], v61, 33, 0);
      sub_10002D560((uint64_t)v8, v27, &qword_1002948B0);
      swift_endAccess(v61);
      v28 = v59;
      v29 = *(_QWORD *)(v59 + qword_1002946C8);
      if (v29)
      {
        v30 = swift_getKeyPath(&unk_1001F26D0);
        v31 = swift_getKeyPath(&unk_1001F26F8);
        swift_retain(v29);
        static Published.subscript.getter(v61, v32, v30);
        swift_release(v29);
        swift_release(v30);
        swift_release(v31);
        v33 = v61[0];
      }
      else
      {
        v33 = 0;
      }
      v26[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_airplaneModeEnabled] = v33;
      v34 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
      v35 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v34);
      v36 = NSUserDefaults.onDeviceOnly.getter();

      v26[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_onDeviceModeEnabled] = v36 & 1;
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v12, v18, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      v37 = (uint64_t)&v26[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_sourceLocale];
      swift_beginAccess(&v26[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_sourceLocale], v61, 33, 0);
      sub_10002D560((uint64_t)v12, v37, (uint64_t *)&unk_10028FE50);
      swift_endAccess(v61);
      v38 = *(_QWORD *)(v28 + qword_1002946C8);
      if (v38)
      {
        v40 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS + 8);
        v41 = *(_BYTE *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS + 16);
        v42 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS + 24);
        v61[0] = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__autoplayTTS);
        v39 = (void *)v61[0];
        swift_retain(v38);
        v43 = v39;
        v28 = v59;
        v44 = v43;
        swift_retain(v40);
        swift_retain(v42);
        swift_getAtKeyPath(&v60, v61, v40);
        swift_release(v38);
        swift_release(v42);
        swift_release(v40);

        v45 = v60;
        if (v60 == 2)
          v45 = v41;
        v26 = v58;
        if ((v45 & 1) != 0)
          v38 = 8;
        else
          v38 = 0;
      }
      v46 = swift_allocObject(&unk_10026CD78, 24, 7);
      *(_QWORD *)(v46 + 16) = v26;
      v47 = v26;
      v48 = v38;
      v49 = v55;
      sub_100078DD8(v56, v57, 0, 0, (uint64_t)v18, v48, (uint64_t)sub_100138744, v46);
      v50 = swift_release(v46);
      v51 = *(_QWORD *)(v28 + qword_1002946C8);
      if (v51)
      {
        v52 = swift_getKeyPath(&unk_1001F2640);
        v53 = swift_getKeyPath(&unk_1001F2668);
        LOBYTE(v61[0]) = 0;
        swift_retain_n(v51, 2);
        static Published.subscript.setter(v61, v51, v52, v53);
        swift_release(v51);

        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      }
      else
      {
        (*(void (**)(char *, uint64_t, __n128))(v16 + 8))(v18, v15, v50);

      }
    }
  }
}

void sub_1001374C4(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v4 = sub_100006DF4(&qword_1002948B0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v5);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  v9 = (uint64_t)&a2[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start];
  swift_beginAccess(&a2[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start], aBlock, 33, 0);
  sub_10002D560((uint64_t)v7, v9, &qword_1002948B0);
  swift_endAccess(aBlock);
  sub_1001D46A4(a1);
  v10 = String._bridgeToObjectiveC()();
  v11 = swift_allocObject(&unk_10026CDA0, 24, 7);
  *(_QWORD *)(v11 + 16) = a2;
  aBlock[4] = sub_10013874C;
  v16 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100170878;
  aBlock[3] = &unk_10026CDB8;
  v12 = _Block_copy(aBlock);
  v13 = v16;
  v14 = a2;
  swift_release(v13);
  AnalyticsSendEventLazy(v10, v12);
  _Block_release(v12);

}

double sub_10013764C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  double result;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v8 = v7;
  v9 = a4;
  v10 = a1;
  sub_100137000(v6, v8, v9);

  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1001376B0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  _BYTE *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = sub_100130EB0();
  v3 = sub_10019BD48();

  v4 = objc_msgSend(v3, "text");
  if (!v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  swift_bridgeObjectRelease();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    sub_100136F44();
    return;
  }
  v9 = objc_allocWithZone((Class)type metadata accessor for TypedInputInstrumentation(0));
  v10 = sub_1001D623C(0);
  v11 = sub_100130EB0();
  v12 = sub_10019BD48();

  v13 = objc_msgSend(v12, "text");
  if (!v13)
    goto LABEL_13;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = String.count.getter(v14, v16);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_characterCount] = v17;
  v18 = *(void **)(v1 + qword_1002946B0);
  if (v18)
  {
    v19 = v18;
    v20 = sub_100076A78();

  }
  else
  {
    v20 = 0;
  }
  v21 = *(void **)&v10[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair];
  *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair] = v20;

  v22 = sub_100130EB0();
  v23 = sub_10019BD48();

  v24 = objc_msgSend(v23, "text");
  if (v24)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    sub_100137000(v25, v27, v10);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_14:
  __break(1u);
}

void sub_1001378A4(void *a1)
{
  id v1;

  v1 = a1;
  sub_1001376B0();

}

void sub_1001378D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = v0;
  v2 = (_QWORD *)(v0 + qword_100294710);
  *v2 = 0;
  v2[1] = 0;
  swift_bridgeObjectRelease();
  v3 = *(void **)(v0 + qword_1002946B0);
  if (v3)
  {
    v4 = v3;
    sub_100079BF0(0, 0, 0);

  }
  v5 = sub_100130EB0();
  sub_10019D698();

  v6 = *(_QWORD *)(v1 + qword_1002946C8);
  if (v6)
  {
    KeyPath = swift_getKeyPath(&unk_1001F2640);
    v8 = swift_getKeyPath(&unk_1001F2668);
    v10 = 0;
    swift_retain(v6);
    static Published.subscript.setter(&v10, v6, KeyPath, v8);
  }
  v9 = sub_100132D80();
  sub_100134A2C(v9, 1, 0.0);
}

void sub_1001379C0(void *a1)
{
  id v1;

  v1 = a1;
  sub_1001378D8();

}

BOOL sub_1001379F4()
{
  uint64_t v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(void **)(v0 + qword_1002946B0);
  if (v1)
  {
    v2 = v1;
    sub_100147478();
    v3 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_turnData];
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request);
      v5 = objc_opt_self(_LTSpeechTranslationRequest);
      v6 = (void *)swift_dynamicCastObjCClass(v4, v5);
      if (v6)
        objc_msgSend(v6, "endAudio");
    }

  }
  return v1 != 0;
}

BOOL sub_100137A98(void *a1)
{
  id v1;
  BOOL v2;

  v1 = a1;
  v2 = sub_1001379F4();

  return v2;
}

void sub_100137AC8(uint64_t a1, double a2, double a3)
{
  _QWORD *v3;
  objc_class *v7;
  id v8;
  objc_super v9;

  v7 = (objc_class *)type metadata accessor for NewTranslationController(0, *(_QWORD *)((swift_isaMask & *v3) + 0x50), *(_QWORD *)((swift_isaMask & *v3) + 0x58), *(_QWORD *)((swift_isaMask & *v3) + 0x60));
  v9.receiver = v3;
  v9.super_class = v7;
  objc_msgSendSuper2(&v9, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v8 = sub_100130EB0();
  objc_msgSend(v8, "endEditing:", 1);

}

void sub_100137B5C(void *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  id v9;

  swift_unknownObjectRetain(a5);
  v9 = a1;
  sub_100137AC8(a5, a2, a3);
  swift_unknownObjectRelease(a5);

}

void sub_100137BC8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v2 = v1;
  if (qword_10028A458 != -1)
    swift_once(&qword_10028A458, sub_100121074);
  v4 = type metadata accessor for Logger(0);
  sub_10000F66C(v4, (uint64_t)qword_1002AA410);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v15 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "scribbleInteractionDidFinishWriting %{public}@", v8, 0xCu);
    v11 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(_QWORD *)(v2 + qword_1002946C8);
  if (v12)
  {
    KeyPath = swift_getKeyPath(&unk_1001F25F8);
    v14 = swift_getKeyPath(&unk_1001F2620);
    HIBYTE(v16) = 0;
    swift_retain(v12);
    static Published.subscript.setter((char *)&v16 + 7, v12, KeyPath, v14);
  }
}

void sub_100137DB0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_100137BC8(v4);

}

void sub_100137E04(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject **v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;

  v3 = *(_QWORD *)&v1[qword_1002946C8];
  if (v3)
  {
    KeyPath = swift_getKeyPath(&unk_1001F25B0);
    v5 = swift_getKeyPath(&unk_1001F25D8);
    HIBYTE(v20) = 1;
    swift_retain(v3);
    static Published.subscript.setter((char *)&v20 + 7, v3, KeyPath, v5);
    v6 = *(_QWORD *)&v1[qword_1002946C8];
    if (v6)
    {
      v7 = swift_getKeyPath(&unk_1001F25F8);
      v8 = swift_getKeyPath(&unk_1001F2620);
      BYTE6(v20) = 1;
      swift_retain(v6);
      static Published.subscript.setter((char *)&v20 + 6, v6, v7, v8);
    }
  }
  if (v1[qword_1002946F8] == 1)
  {
    v9 = objc_msgSend(v1, "view");
    if (!v9)
    {
      __break(1u);
      return;
    }
    v10 = v9;
    objc_msgSend(v9, "endEditing:", 1);

  }
  if (qword_10028A458 != -1)
    swift_once(&qword_10028A458, sub_100121074);
  v11 = type metadata accessor for Logger(0);
  sub_10000F66C(v11, (uint64_t)qword_1002AA410);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v15 = 138543362;
    v19 = v12;
    v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 4);
    *v16 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "scribbleInteractionWillBeginWriting %{public}@", v15, 0xCu);
    v18 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v16, 1, v18);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {

    v13 = v12;
  }

}

void sub_100138080(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_100137E04(v4);

}

BOOL sub_1001380D4()
{
  return sub_100138B5C();
}

void sub_1001380F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  sub_100138B74();
}

id sub_100138144()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for NewTranslationController(0, *(_QWORD *)((swift_isaMask & *v0) + 0x50), *(_QWORD *)((swift_isaMask & *v0) + 0x58), *(_QWORD *)((swift_isaMask & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_100138194(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + qword_1002946B8));
  swift_release(*(_QWORD *)(a1 + qword_1002946C0));
  swift_release(*(_QWORD *)(a1 + qword_1002946C8));
  swift_release(*(_QWORD *)(a1 + qword_1002946D0));
  swift_release(*(_QWORD *)(a1 + qword_1002946D8));
  swift_release(*(_QWORD *)(a1 + qword_1002946E0));
  swift_release(*(_QWORD *)(a1 + qword_1002946E8));
  swift_release(*(_QWORD *)(a1 + qword_1002946F0));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100294710 + 8));
}

uint64_t type metadata accessor for NewTranslationController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NewTranslationController);
}

uint64_t sub_1001382EC(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    if (v6 >= 3)
      v7 = v6 - 2;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10013833C + 4 * byte_1001F23C5[v4]))();
  }
}

uint64_t sub_100138394(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001383E8 + 4 * byte_1001F23CF[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10013841C + 4 * byte_1001F23CA[v5]))();
}

uint64_t sub_10013841C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100138424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013842CLL);
  return result;
}

uint64_t sub_100138438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100138440);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100138444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013844C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100138458(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

_BYTE *sub_10013846C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 2;
  return result;
}

uint64_t type metadata accessor for NewTranslationController.CardState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NewTranslationController.CardState);
}

void sub_100138488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + qword_1002946C8);
  if (v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001F2568);
    v3 = swift_getKeyPath(&unk_1001F2590);
    v4 = 1;
    swift_retain(v1);
    static Published.subscript.setter(&v4, v1, KeyPath, v3);
  }
}

uint64_t sub_100138508@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2838, (uint64_t)&unk_1001F2860, a2);
}

uint64_t sub_10013851C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2838, (uint64_t)&unk_1001F2860);
}

uint64_t sub_100138530@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2568, (uint64_t)&unk_1001F2590, a2);
}

uint64_t sub_100138544(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2568, (uint64_t)&unk_1001F2590);
}

uint64_t sub_100138558@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F25B0, (uint64_t)&unk_1001F25D8, a2);
}

uint64_t sub_10013856C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F25B0, (uint64_t)&unk_1001F25D8);
}

uint64_t sub_100138580@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F25F8, (uint64_t)&unk_1001F2620, a2);
}

uint64_t sub_100138594(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F25F8, (uint64_t)&unk_1001F2620);
}

uint64_t sub_1001385A8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2640, (uint64_t)&unk_1001F2668, a2);
}

uint64_t sub_1001385BC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2640, (uint64_t)&unk_1001F2668);
}

void *sub_1001385D0()
{
  return sub_1001D66BC();
}

uint64_t sub_1001385F0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2568, (uint64_t)&unk_1001F2590, a2);
}

uint64_t sub_100138614(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2568, (uint64_t)&unk_1001F2590);
}

uint64_t sub_100138638@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F25B0, (uint64_t)&unk_1001F25D8, a2);
}

uint64_t sub_10013865C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F25B0, (uint64_t)&unk_1001F25D8);
}

uint64_t sub_100138680@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F25F8, (uint64_t)&unk_1001F2620, a2);
}

uint64_t sub_1001386A4(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F25F8, (uint64_t)&unk_1001F2620);
}

uint64_t sub_1001386C8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2640, (uint64_t)&unk_1001F2668, a2);
}

uint64_t sub_1001386EC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2640, (uint64_t)&unk_1001F2668);
}

uint64_t sub_100138720()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100138744(uint64_t a1)
{
  uint64_t v1;

  sub_1001374C4(a1, *(char **)(v1 + 16));
}

void *sub_10013874C()
{
  return sub_1001D66BC();
}

uint64_t sub_10013876C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013877C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for NewTranslationController.LIDAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NewTranslationController.LIDAction);
}

uint64_t sub_1001387A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for NewTranslationController.LIDAction(0, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32))- 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 56) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);

  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 2, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10013884C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NewTranslationController.LIDAction(0, v1, v2, v3)
                                      - 8)
                          + 80);
  return sub_1001367B4(v0[5], v0[6], (uint64_t)v0 + ((v4 + 56) & ~v4), v1, v2, v3);
}

void sub_1001388AC()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;

  *(_QWORD *)&v0[qword_100294680] = 0;
  *(_QWORD *)&v0[qword_100294688] = 0;
  *(_QWORD *)&v0[qword_100294690] = 0;
  *(_QWORD *)&v0[qword_100294698] = 0;
  *(_QWORD *)&v0[qword_1002946A0] = 0;
  v0[qword_1002946A8] = 3;
  *(_QWORD *)&v0[qword_1002946B0] = 0;
  *(_QWORD *)&v0[qword_1002946B8] = 0;
  *(_QWORD *)&v0[qword_1002946C0] = 0;
  *(_QWORD *)&v0[qword_1002946C8] = 0;
  *(_QWORD *)&v0[qword_1002946D0] = 0;
  *(_QWORD *)&v0[qword_1002946D8] = 0;
  *(_QWORD *)&v0[qword_1002946E0] = 0;
  *(_QWORD *)&v0[qword_1002946E8] = 0;
  *(_QWORD *)&v0[qword_1002946F0] = 0;
  v0[qword_1002946F8] = 0;
  v0[qword_100294700] = 0;
  v1 = &v0[qword_100294710];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[qword_100294718];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v2[32] = 1;
  *(_QWORD *)&v0[qword_100294720] = 0;
  *(_QWORD *)&v0[qword_100294728] = 0;
  *(_QWORD *)&v0[qword_100294730] = 0;
  v0[qword_100294738] = 3;
  *(_QWORD *)&v0[qword_100294740] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/NewTranslationController.swift", 48, 2, 164, 0);
  __break(1u);
}

void sub_100138A40()
{
  uint64_t v0;

  sub_100135DB4(*(void **)(v0 + 16), 0.0);
}

void sub_100138A5C(int a1)
{
  uint64_t v1;

  sub_100135E0C(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100138A6C()
{
  uint64_t v0;

  sub_100134E40(*(void **)(v0 + 16));
}

uint64_t sub_100138A74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100138A98(char a1)
{
  uint64_t v1;

  sub_100134E88(a1, *(_BYTE *)(v1 + 16));
}

void sub_100138AAC()
{
  uint64_t v0;

  sub_1001346EC(*(void **)(v0 + 16), 0.0);
}

void sub_100138AC8()
{
  uint64_t v0;

  sub_1001346EC(*(void **)(v0 + 16), 1.0);
}

uint64_t sub_100138AE4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2838, (uint64_t)&unk_1001F2860, a2);
}

uint64_t sub_100138B08(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2838, (uint64_t)&unk_1001F2860);
}

BOOL sub_100138B2C()
{
  uint64_t v0;

  return !*(_BYTE *)(v0 + qword_100294700) && *(_BYTE *)(v0 + qword_1002946A8) != 4;
}

BOOL sub_100138B5C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + qword_1002946A8) == 3;
}

void sub_100138B74()
{
  _swift_stdlib_reportUnimplementedInitializer("SequoiaTranslator.NewTranslationController", 42, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

void sub_100138BA0()
{
  uint64_t v0;

  sub_100135DB4(*(void **)(v0 + 16), 1.0);
}

uint64_t sub_100138BBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100138BE8()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(*(id *)(v0 + 24), "parentViewController");
  objc_msgSend(v1, "didMoveToParentViewController:", v2);

}

uint64_t sub_100138C3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

uint64_t *sub_100138C90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for Locale(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_100138D58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_100138DC0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100138E64(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_100138F54(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100138FF8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_1001390E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001390F4);
}

uint64_t sub_1001390F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for Locale(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_100139140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013914C);
}

uint64_t sub_10013914C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1001391A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_1001391D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t sub_100139218(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100139264 + 4 * byte_1001F23D9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100139298 + 4 * byte_1001F23D4[v4]))();
}

uint64_t sub_100139298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001392A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001392A8);
  return result;
}

uint64_t sub_1001392B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001392BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001392C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001392C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for NewTranslationController.CardState.ExpandedState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NewTranslationController.CardState.ExpandedState);
}

uint64_t sub_1001392E0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1001F2900, a1);
}

ValueMetadata *type metadata accessor for NextActionButton()
{
  return &type metadata for NextActionButton;
}

uint64_t sub_100139374(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100215C34, 1);
}

uint64_t sub_100139384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t ActionButtonStyle;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];

  v33 = a1;
  v38 = a3;
  v39 = type metadata accessor for KeyboardShortcut(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionButtonStyle = type metadata accessor for NextActionButtonStyle(0);
  v6 = __chkstk_darwin(ActionButtonStyle);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = sub_100006DF4(&qword_10028AEB8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_100294A10);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_100294A18);
  v19 = *(_QWORD *)(v18 - 8);
  v34 = v18;
  v35 = v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a2);
  Button.init(action:label:)(v33, a2, sub_1001396CC, 0, &type metadata for Text, &protocol witness table for Text);
  v22 = sub_100012334(&qword_10028AEC0, &qword_10028AEB8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(0x747475427478656ELL, 0xEA00000000006E6FLL, v11, v22);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(_QWORD *)v8 = swift_getKeyPath(&unk_1001F29B8);
  v8[8] = 0;
  v23 = &v8[*(int *)(ActionButtonStyle + 20)];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1001F29E8);
  v24 = sub_100006DF4(&qword_100291498);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  sub_10013A154((uint64_t)v8, (uint64_t)v10);
  v25 = sub_10013A198();
  v26 = sub_100007D5C(&qword_100294A28, type metadata accessor for NextActionButtonStyle, (uint64_t)&unk_1001F2A50);
  View.buttonStyle<A>(_:)(v10, v15, ActionButtonStyle, v25, v26);
  sub_100032DAC((uint64_t)v10, type metadata accessor for NextActionButtonStyle);
  v27 = sub_10000A020((uint64_t)v17, &qword_100294A10);
  v28 = v36;
  static KeyboardShortcut.defaultAction.getter(v27);
  v40[0] = v15;
  v40[1] = ActionButtonStyle;
  v40[2] = v25;
  v40[3] = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v40, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v30 = v34;
  View.keyboardShortcut(_:)(v28, v34, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v21, v30);
}

uint64_t sub_1001396CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(1415071054, 0xE400000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100139734@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100139384(*v1, v1[1], a1);
}

uint64_t type metadata accessor for NextActionButtonStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_100294A90;
  if (!qword_100294A90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NextActionButtonStyle);
  return result;
}

uint64_t sub_100139778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t *v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  unsigned __int8 v69;
  char *v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  v135 = a1;
  v124 = a2;
  v3 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v3);
  v122 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100006DF4(&qword_100294AD0);
  __chkstk_darwin(v120);
  v121 = (uint64_t)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100006DF4(&qword_100294AD8);
  __chkstk_darwin(v119);
  v123 = (uint64_t)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100006DF4(&qword_10028BCF8);
  __chkstk_darwin(v116);
  v132 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028BD00);
  __chkstk_darwin(v12);
  v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_100294AE0);
  v126 = *(_QWORD *)(v15 - 8);
  v127 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100006DF4(&qword_100294AE8);
  __chkstk_darwin(v125);
  v128 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100006DF4(&qword_100294AF0);
  __chkstk_darwin(v129);
  v130 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100006DF4(&qword_100294AF8);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v131 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100006DF4(&qword_100294B00);
  __chkstk_darwin(v113);
  v133 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100006DF4(&qword_100294B08);
  __chkstk_darwin(v117);
  v118 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ColorScheme(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NextActionButtonStyle(0);
  v134 = v2;
  sub_1000D6494(v26);
  v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v24 + 88))(v26, v23);
  if ((_DWORD)v27 == enum case for ColorScheme.light(_:))
  {
    v28 = ButtonStyleConfiguration.isPressed.getter(v27);
    if ((v28 & 1) != 0)
      v29 = 0.75;
    else
      v29 = 1.0;
    v27 = ButtonStyleConfiguration.isPressed.getter(v28);
    if ((v27 & 1) != 0)
      v30 = 0.65;
    else
      v30 = 1.0;
  }
  else
  {
    v30 = 1.0;
    v29 = 1.0;
    if ((_DWORD)v27 != enum case for ColorScheme.dark(_:))
    {
      v31 = ButtonStyleConfiguration.isPressed.getter(v27);
      if ((v31 & 1) != 0)
        v29 = 0.75;
      else
        v29 = 1.0;
      if ((ButtonStyleConfiguration.isPressed.getter(v31) & 1) != 0)
        v30 = 0.65;
      else
        v30 = 1.0;
      v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
    }
  }
  v32 = ButtonStyleConfiguration.label.getter(v27);
  v33 = static Font.body.getter(v32);
  KeyPath = swift_getKeyPath(&unk_1001F2A88);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v8);
  v35 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  *v35 = KeyPath;
  v35[1] = v33;
  v36 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v37 = static Font.Weight.semibold.getter(v36);
  v38 = sub_100020FA0();
  View.fontWeight(_:)(*(_QWORD *)&v37, 0, v12, v38);
  v39 = sub_10000A020((uint64_t)v14, &qword_10028BD00);
  v40 = static Edge.Set.leading.getter(v39);
  v41 = v40;
  v42 = static Edge.Set.trailing.getter(v40);
  v43 = Edge.Set.init(rawValue:)(0);
  v44 = Edge.Set.init(rawValue:)(v43);
  if (Edge.Set.init(rawValue:)(v44 & v41) != v41)
    v43 = Edge.Set.init(rawValue:)(v43 | v41);
  v45 = Edge.Set.init(rawValue:)(v43);
  v46 = Edge.Set.init(rawValue:)(v45 & v42);
  v47 = (uint64_t)v132;
  v48 = (uint64_t)v133;
  v50 = v129;
  v49 = (uint64_t)v130;
  v51 = (uint64_t)v128;
  if (v46 != v42)
    LOBYTE(v43) = Edge.Set.init(rawValue:)(v43 | v42);
  v52 = EdgeInsets.init(_all:)(12.0);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v60 = v126;
  v59 = v127;
  (*(void (**)(uint64_t, char *, uint64_t))(v126 + 16))(v51, v17, v127);
  v61 = v51 + *(int *)(v125 + 36);
  *(_BYTE *)v61 = v43;
  *(double *)(v61 + 8) = v52;
  *(_QWORD *)(v61 + 16) = v54;
  *(_QWORD *)(v61 + 24) = v56;
  *(_QWORD *)(v61 + 32) = v58;
  *(_BYTE *)(v61 + 40) = 0;
  v62 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v17, v59);
  v63 = static Edge.Set.top.getter(v62);
  v64 = v63;
  v65 = static Edge.Set.bottom.getter(v63);
  v66 = Edge.Set.init(rawValue:)(0);
  v67 = Edge.Set.init(rawValue:)(v66);
  if (Edge.Set.init(rawValue:)(v67 & v64) != v64)
    v66 = Edge.Set.init(rawValue:)(v66 | v64);
  v68 = Edge.Set.init(rawValue:)(v66);
  v69 = Edge.Set.init(rawValue:)(v68 & v65);
  v70 = v131;
  if (v69 != v65)
    LOBYTE(v66) = Edge.Set.init(rawValue:)(v66 | v65);
  v71 = v134;
  v72 = EdgeInsets.init(_all:)(7.0);
  v74 = v73;
  v76 = v75;
  v78 = v77;
  sub_10000B074(v51, v49, &qword_100294AE8);
  v79 = v49 + *(int *)(v50 + 36);
  *(_BYTE *)v79 = v66;
  *(double *)(v79 + 8) = v72;
  *(_QWORD *)(v79 + 16) = v74;
  *(_QWORD *)(v79 + 24) = v76;
  *(_QWORD *)(v79 + 32) = v78;
  *(_BYTE *)(v79 + 40) = 0;
  sub_10000A020(v51, &qword_100294AE8);
  v80 = enum case for DynamicTypeSize.xLarge(_:);
  v81 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v47, v80, v81);
  v82 = sub_100007D5C(&qword_10028BD30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v47, v47, v81, v82);
  if ((result & 1) != 0)
  {
    v84 = sub_10001B6DC(&qword_100294B10, &qword_100294AF0, (void (*)(void))sub_10013A988);
    v85 = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v47, v50, v116, v84, v85);
    sub_10000A020(v47, &qword_10028BCF8);
    sub_10000A020(v49, &qword_100294AF0);
    v86 = *(_QWORD *)v71;
    LOBYTE(v84) = *(_BYTE *)(v71 + 8);
    sub_10001F410(*(_QWORD *)v71, v84);
    v87 = sub_1000D54C8(v86, v84);
    v88 = sub_10001F470(v86, v84);
    if ((v87 & 1) != 0)
      v89 = static Color.translateAccentColor.getter(v88);
    else
      v89 = static Color.quaternaryTranslateAccentColor.getter(v88);
    v90 = v89;
    v91 = (uint64_t)v122;
    v92 = swift_getKeyPath(&unk_1001F2AB8);
    v93 = v114;
    v94 = v115;
    (*(void (**)(uint64_t, char *, uint64_t))(v114 + 16))(v48, v70, v115);
    v95 = (uint64_t *)(v48 + *(int *)(v113 + 36));
    *v95 = v92;
    v95[1] = v90;
    (*(void (**)(char *, uint64_t))(v93 + 8))(v70, v94);
    v96 = enum case for RoundedCornerStyle.continuous(_:);
    v97 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 104))(v91, v96, v97);
    v98 = *(_QWORD *)v71;
    LOBYTE(v92) = *(_BYTE *)(v71 + 8);
    sub_10001F410(*(_QWORD *)v71, v92);
    LOBYTE(v94) = sub_1000D54C8(v98, v92);
    v99 = sub_10001F470(v98, v92);
    if ((v94 & 1) != 0)
      v100 = static Color.enabledCardButtonFillColor.getter(v99);
    else
      v100 = static Color.disabledCardButtonFillColor.getter(v99);
    v101 = v100;
    v102 = v121;
    sub_10013AA24(v91, v121);
    v103 = v120;
    *(_QWORD *)(v102 + *(int *)(v120 + 52)) = v101;
    *(_WORD *)(v102 + *(int *)(v103 + 56)) = 256;
    sub_100032DAC(v91, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    v104 = v123;
    sub_10000B074(v102, v123, &qword_100294AD0);
    *(double *)(v104 + *(int *)(v119 + 36)) = v30;
    v105 = sub_10000A020(v102, &qword_100294AD0);
    v106 = static Alignment.center.getter(v105);
    v108 = v107;
    v109 = (uint64_t)v118;
    v110 = (uint64_t)&v118[*(int *)(v117 + 36)];
    sub_10000B074(v104, v110, &qword_100294AD8);
    v111 = (uint64_t *)(v110 + *(int *)(sub_100006DF4(&qword_100294B20) + 36));
    *v111 = v106;
    v111[1] = v108;
    sub_10000B074(v48, v109, &qword_100294B00);
    sub_10000A020(v104, &qword_100294AD8);
    sub_10000A020(v48, &qword_100294B00);
    v112 = v124;
    sub_10000B074(v109, v124, &qword_100294B08);
    *(double *)(v112 + *(int *)(sub_100006DF4(&qword_100294B28) + 36)) = v29;
    return sub_10000A020(v109, &qword_100294B08);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10013A154(uint64_t a1, uint64_t a2)
{
  uint64_t ActionButtonStyle;

  ActionButtonStyle = type metadata accessor for NextActionButtonStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ActionButtonStyle - 8) + 32))(a2, a1, ActionButtonStyle);
  return a2;
}

unint64_t sub_10013A198()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294A20;
  if (!qword_100294A20)
  {
    v1 = sub_1000070BC(&qword_100294A10);
    sub_100012334(&qword_10028AEC0, &qword_10028AEB8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100294A20);
  }
  return result;
}

unint64_t sub_10013A234(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v17);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10001F410(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_100006DF4(&qword_100291498);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = v10;
      v15 = v12;
      v16 = 1;
    }
    else
    {
      v18 = *v11;
      *v10 = *v11;
      swift_retain(v18);
      v14 = v10;
      v15 = v12;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

double sub_10013A330(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_10001F470(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_100006DF4(&qword_100291498);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_10013A3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_100006DF4(&qword_100291498);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  return a1;
}

uint64_t sub_10013A474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10001F470(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_10000A020(a1 + v10, &qword_100291498);
    v13 = sub_100006DF4(&qword_100291498);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

uint64_t sub_10013A560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100006DF4(&qword_100291498);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10013A610(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10001F470(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_10000A020(a1 + v10, &qword_100291498);
    v13 = sub_100006DF4(&qword_100291498);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10013A6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013A6F8);
}

uint64_t sub_10013A6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100006DF4(&qword_100294A30);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10013A770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013A77C);
}

uint64_t sub_10013A77C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_100006DF4(&qword_100294A30);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_10013A7F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  sub_10013A864(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10013A864(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100294AA0)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100294AA0);
  }
}

uint64_t sub_10013A8B8()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t ActionButtonStyle;
  unint64_t v5;
  uint64_t v6;

  v0 = sub_1000070BC(&qword_100294A18);
  v3 = sub_1000070BC(&qword_100294A10);
  ActionButtonStyle = type metadata accessor for NextActionButtonStyle(255);
  v5 = sub_10013A198();
  v6 = sub_100007D5C(&qword_100294A28, type metadata accessor for NextActionButtonStyle, (uint64_t)&unk_1001F2A50);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v3 = v0;
  ActionButtonStyle = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
}

uint64_t sub_10013A970(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100215C5C, 1);
}

unint64_t sub_10013A988()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100294B18;
  if (!qword_100294B18)
  {
    v1 = sub_1000070BC(&qword_100294AE8);
    v2[0] = sub_1000070BC(&qword_10028BD00);
    v2[1] = sub_100020FA0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100294B18);
  }
  return result;
}

uint64_t sub_10013AA24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Capsule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013AA68()
{
  return sub_10001B6DC(&qword_100294B30, &qword_100294B28, (void (*)(void))sub_10013AA9C);
}

unint64_t sub_10013AA9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294B38;
  if (!qword_100294B38)
  {
    v1 = sub_1000070BC(&qword_100294B08);
    sub_10013AB20();
    sub_100012334(&qword_100294B48, &qword_100294B20, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100294B38);
  }
  return result;
}

unint64_t sub_10013AB20()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100294B40;
  if (!qword_100294B40)
  {
    v1 = sub_1000070BC(&qword_100294B00);
    v2[0] = sub_1000070BC(&qword_100294AF0);
    v2[1] = sub_1000070BC(&qword_10028BCF8);
    v2[2] = sub_10001B6DC(&qword_100294B10, &qword_100294AF0, (void (*)(void))sub_10013A988);
    v2[3] = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100294B40);
  }
  return result;
}

id sub_10013AC30(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t inited;
  void *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  Class isa;
  id v20;
  uint64_t v22;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSTextEncapsulation), "init");
  objc_msgSend(v3, "setStyle:", 1);
  objc_msgSend(v3, "setColor:", a1);
  v4 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v4, &v22);
  *(_OWORD *)(inited + 16) = xmmword_1001E4D60;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  v6 = (void *)objc_opt_self(UIColor);
  v7 = NSForegroundColorAttributeName;
  v8 = objc_msgSend(v6, "clearColor");
  v9 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  *(_QWORD *)(inited + 40) = v8;
  v10 = (void *)NSTextEncapsulationAttributeName;
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 104) = sub_10000A05C(0, &qword_100294B50, NSTextEncapsulation_ptr);
  *(_QWORD *)(inited + 80) = v3;
  v11 = v10;
  v12 = v3;
  v13 = sub_1001A4A88(inited);
  v14 = objc_msgSend(v1, "string");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v16 = v15;

  v17 = objc_allocWithZone((Class)NSAttributedString);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  type metadata accessor for Key(0);
  sub_100101CA4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v17, "initWithString:attributes:", v18, isa, swift_bridgeObjectRelease(v13).n128_f64[0]);

  return v20;
}

uint64_t storeEnumTagSinglePayload for TranslationOfflineAvailability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10013AE78 + 4 * byte_1001F2AF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10013AEAC + 4 * byte_1001F2AF0[v4]))();
}

uint64_t sub_10013AEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013AEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013AEBCLL);
  return result;
}

uint64_t sub_10013AEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013AED0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10013AED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013AEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranslationOfflineAvailability()
{
  return &type metadata for TranslationOfflineAvailability;
}

unint64_t sub_10013AEFC()
{
  unint64_t result;

  result = qword_100294B58;
  if (!qword_100294B58)
  {
    result = swift_getWitnessTable(&unk_1001F2B60, &type metadata for TranslationOfflineAvailability);
    atomic_store(result, (unint64_t *)&qword_100294B58);
  }
  return result;
}

uint64_t sub_10013AF40@<X0>(uint64_t *a1@<X0>, id *a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char v43;
  void (*v44)(void (*)(char *), char *, uint64_t);
  void (*v45)(char *);
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  void (*v50)(char *);
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  void (*v77)(uint64_t, uint64_t);
  char v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(char *);
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  void (*v87)(void (*)(char *), char *, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(char *, unint64_t, uint64_t);
  id v95;
  uint64_t v96;
  uint64_t v97;

  v6 = type metadata accessor for LanguageState(0);
  v87 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v79 - v10;
  v97 = type metadata accessor for Locale(0);
  v92 = *(_QWORD *)(v97 - 8);
  v12 = __chkstk_darwin(v97);
  v90 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v79 - v14;
  v16 = type metadata accessor for LanguageModel(0);
  v17 = __chkstk_darwin(v16);
  v91 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v79 - v22;
  v24 = __chkstk_darwin(v21);
  __chkstk_darwin(v24);
  v88 = (char *)&v79 - v29;
  result = *a1;
  v31 = *(_QWORD *)(*a1 + 16);
  if (!v31)
  {
LABEL_26:
    v78 = 0;
    goto LABEL_27;
  }
  v82 = v25;
  v83 = v11;
  v79 = v28;
  v80 = v27;
  v84 = v9;
  v85 = v6;
  v86 = a3;
  v95 = *a2;
  v96 = v26;
  v32 = result + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  v33 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v26 + 16);
  v93 = *(_QWORD *)(v26 + 72);
  v94 = v33;
  v89 = result;
  swift_bridgeObjectRetain(result);
  v81 = v32;
  while (1)
  {
    v34 = v94(v23, v32, v16);
    v35 = LanguageModel.id.getter(v34);
    v37 = v36;
    v38 = objc_msgSend(v95, "sourceLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v39 = Locale.ltIdentifier.getter();
    v41 = v40;
    v42 = *(void (**)(char *, uint64_t))(v92 + 8);
    v42(v15, v97);
    if (v35 == v39 && v37 == v41)
    {
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v37);
      goto LABEL_10;
    }
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v39, v41, 0);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v37);
    if ((v43 & 1) != 0)
      break;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v23, v16);
    v32 += v93;
    if (!--v31)
    {
      result = swift_bridgeObjectRelease(v89);
LABEL_19:
      a3 = v86;
      goto LABEL_26;
    }
  }
  v37 = v89;
LABEL_10:
  swift_bridgeObjectRelease(v37);
  v44 = *(void (**)(void (*)(char *), char *, uint64_t))(v96 + 32);
  v45 = v82;
  v44(v82, v23, v16);
  v46 = v88;
  v47 = ((uint64_t (*)(char *, void (*)(char *), uint64_t))v44)(v88, v45, v16);
  v48 = v83;
  LanguageModel.state.getter(v47);
  v49 = v87;
  v50 = (void (*)(char *))v87[13];
  v52 = v84;
  v51 = v85;
  LODWORD(v92) = enum case for LanguageState.installed(_:);
  v50(v84);
  LOBYTE(v45) = static LanguageState.== infix(_:_:)(v48, v52);
  v53 = (void (*)(char *, uint64_t))v49[1];
  v53(v52, v51);
  v53(v48, v51);
  if ((v45 & 1) == 0)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v46, v16);
    goto LABEL_19;
  }
  v82 = v50;
  v87 = v44;
  v54 = *(_QWORD *)(v89 + 16);
  if (!v54)
  {
    v69 = *(uint64_t (**)(char *, uint64_t))(v96 + 8);
    a3 = v86;
LABEL_21:
    result = v69(v46, v16);
    goto LABEL_26;
  }
  v55 = v53;
  swift_bridgeObjectRetain(v89);
  v56 = v91;
  v57 = v81;
  while (1)
  {
    v58 = v57;
    v59 = ((uint64_t (*)(char *))v94)(v56);
    v60 = LanguageModel.id.getter(v59);
    v62 = v61;
    v63 = objc_msgSend(v95, "targetLocale");
    v64 = v90;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v63);

    v65 = Locale.ltIdentifier.getter();
    v67 = v66;
    v42(v64, v97);
    if (v60 == v65 && v62 == v67)
    {
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v62);
      goto LABEL_24;
    }
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v65, v67, 0);
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v62);
    if ((v68 & 1) != 0)
      break;
    v69 = *(uint64_t (**)(char *, uint64_t))(v96 + 8);
    v56 = v91;
    v69(v91, v16);
    v57 = v58 + v93;
    if (!--v54)
    {
      swift_bridgeObjectRelease(v89);
      a3 = v86;
      v46 = v88;
      goto LABEL_21;
    }
  }
  v62 = v89;
LABEL_24:
  swift_bridgeObjectRelease(v62);
  v70 = v79;
  v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v87;
  ((void (*)(uint64_t, char *, uint64_t))v87)(v79, v91, v16);
  v72 = v80;
  v73 = v71(v80, v70, v16);
  v74 = v83;
  LanguageModel.state.getter(v73);
  v76 = v84;
  v75 = v85;
  ((void (*)(char *, _QWORD, uint64_t))v82)(v84, v92, v85);
  LOBYTE(v70) = static LanguageState.== infix(_:_:)(v74, v76);
  v55(v76, v75);
  v55(v74, v75);
  v77 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
  v77(v72, v16);
  result = ((uint64_t (*)(char *, uint64_t))v77)(v88, v16);
  a3 = v86;
  if ((v70 & 1) == 0)
    goto LABEL_26;
  v78 = 1;
LABEL_27:
  *a3 = v78;
  return result;
}

_BYTE *sub_10013B504@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X2>, char *a4@<X8>)
{
  char v4;

  if (*a2 & 1 | ((*result & 1) == 0))
    v4 = *a3 & ~*a2 & 1;
  else
    v4 = 2;
  *a4 = v4;
  return result;
}

void sub_10013B534(_QWORD *a1@<X8>)
{
  id v2;
  Class isa;
  Class v4;
  id v5;

  v2 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v4 = Locale._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v2, "initWithSourceLocale:targetLocale:", isa, v4);

  *a1 = v5;
}

uint64_t sub_10013B5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v22 = a1;
  v23 = a2;
  v6 = sub_100006DF4(&qword_100294B70);
  v25 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100294B78);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a3;
  v27 = a4;
  v12 = sub_100006DF4(&qword_100290330);
  v13 = sub_100006DF4(&qword_100294B80);
  v14 = sub_100012334(&qword_100290338, &qword_100290330, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v15 = sub_100012334(&qword_100294B88, &qword_100294B80, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.combineLatest<A, B>(_:_:)(&v26, sub_10013AF40, 0, v12, v13, &type metadata for Bool, v14, v15);
  v26 = v22;
  v27 = v23;
  v16 = sub_100006DF4(&qword_10028EA30);
  v17 = sub_100012334(&qword_10028EA38, &qword_10028EA30, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v18 = sub_100012334(&qword_100294B90, &qword_100294B78, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher.combineLatest<A, B, C>(_:_:_:)(v11, &v26, sub_10013B504, 0, v16, v9, v16, &type metadata for TranslationOfflineAvailability, v17, v18, v17);
  v19 = sub_100012334(&qword_100294B98, &qword_100294B70, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v20 = Publisher.eraseToAnyPublisher()(v6, v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  return v20;
}

uint64_t sub_10013B808(uint64_t a1, uint64_t a2)
{
  return sub_10013B840(a1, a2, &OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__deviceOwnerLocale, &OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel__partnerLocale, (uint64_t)sub_10013B530);
}

uint64_t sub_10013B824(uint64_t a1, uint64_t a2)
{
  return sub_10013B840(a1, a2, &OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__sourceLocale, &OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__targetLocale, (uint64_t)sub_10013B530);
}

uint64_t sub_10013B840(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];

  v51 = a5;
  v47 = a4;
  v45 = a3;
  v43 = a1;
  v6 = sub_100006DF4(&qword_10028DE90);
  v7 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  v54 = v7;
  __chkstk_darwin(v6);
  v52 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100296BC0);
  v49 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v42 - v13;
  v48 = sub_100006DF4(&qword_100294B60);
  v50 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v44 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_10028DEF8);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__airplaneModeEnabled, v55, 33, 0);
  v20 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  Published.projectedValue.getter(v20);
  swift_endAccess(v55);
  v21 = sub_100012334(&qword_10028DF40, &qword_10028DEF8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v46 = Publisher.eraseToAnyPublisher()(v16, v21);
  v22 = *(void (**)(char *, uint64_t))(v17 + 8);
  v22(v19, v16);
  swift_beginAccess(a2 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__onDeviceModeEnabled, v55, 33, 0);
  Published.projectedValue.getter(v20);
  swift_endAccess(v55);
  v23 = Publisher.eraseToAnyPublisher()(v16, v21);
  v22(v19, v16);
  v24 = v43;
  swift_beginAccess(v43 + *v45, v55, 33, 0);
  v25 = sub_100006DF4(&qword_10028F270);
  Published.projectedValue.getter(v25);
  swift_endAccess(v55);
  swift_beginAccess(v24 + *v47, v55, 33, 0);
  Published.projectedValue.getter(v25);
  swift_endAccess(v55);
  v26 = sub_10013BC74();
  v27 = sub_100012334(&qword_10028EFA8, &qword_100296BC0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v28 = v44;
  Publisher.combineLatest<A, B>(_:_:)(v12, v51, 0, v9, v9, v26, v27, v27);
  v29 = *(void (**)(char *, uint64_t))(v49 + 8);
  v29(v12, v9);
  v29(v14, v9);
  v30 = sub_100012334(&qword_100294B68, &qword_100294B60, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v31 = v48;
  v32 = Publisher.eraseToAnyPublisher()(v48, v30);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v31);
  v33 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_languagesService);
  v34 = swift_retain(v33);
  v35 = v52;
  LanguagesService.$models.getter(v34);
  swift_release(v33);
  v36 = sub_100012334(&qword_100290328, &qword_10028DE90, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v37 = v53;
  v38 = Publisher.eraseToAnyPublisher()(v53, v36);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v37);
  v39 = v46;
  v40 = sub_10013B5B4(v46, v23, v32, v38);
  swift_release(v39);
  swift_release(v23);
  swift_release(v32);
  swift_release(v38);
  return v40;
}

unint64_t sub_10013BC74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295470;
  if (!qword_100295470)
  {
    v1 = objc_opt_self(_LTLocalePair);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100295470);
  }
  return result;
}

id sub_10013BCB0(char a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  objc_class *v13;
  id v14;
  objc_super v16;

  v3 = v2;
  v5 = type metadata accessor for TranslationTaskHint(0, a2);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_languagesService;
  (*(void (**)(char *, _QWORD))(v9 + 104))(v7, enum case for TranslationTaskHint.speech(_:));
  v10 = type metadata accessor for LanguagesService(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = v3;
  *(_QWORD *)&v3[v8] = LanguagesService.init(task:)(v7);
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController____lazy_storage___onBoardingController] = 0;
  v12 = &v11[OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_oBDelegate];
  *((_QWORD *)v12 + 1) = 0;
  swift_unknownObjectWeakInit(v12, 0);
  v11[OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_whatsNew] = a1;

  v13 = (objc_class *)type metadata accessor for OnBoardingController();
  v16.receiver = v11;
  v16.super_class = v13;
  v14 = objc_msgSendSuper2(&v16, "initWithNibName:bundle:", 0, 0);
  objc_msgSend(v14, "setModalPresentationStyle:", 2);
  return v14;
}

id sub_10013BEF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController____lazy_storage___onBoardingController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController____lazy_storage___onBoardingController);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController____lazy_storage___onBoardingController);
  }
  else
  {
    v4 = sub_10013BF58(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10013BF58(uint64_t a1)
{
  int v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  id v8;
  NSString v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  NSString v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  NSString v20;
  NSString v21;
  void *v22;
  id v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  NSString v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  NSString v31;
  NSString v32;
  id v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  NSString v37;
  id v38;
  Swift::String v39;
  Swift::String v40;
  NSString v41;
  NSString v42;
  id v43;
  void *v44;
  _UNKNOWN **v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  double v57;
  id v58;
  NSString v59;
  void *v60;
  id v61;
  Swift::String v62;
  Swift::String v63;
  NSString v64;
  id v65;
  Swift::String v66;
  Swift::String v67;
  NSString v68;
  NSString v69;
  void *v70;
  id v71;
  id v72;
  Swift::String v73;
  Swift::String v74;
  NSString v75;
  id v76;
  Swift::String v77;
  Swift::String v78;
  NSString v79;
  NSString v80;
  id v81;
  id v82;
  Swift::String v83;
  Swift::String v84;
  NSString v85;
  id v86;
  Swift::String v87;
  NSString v88;
  NSString v89;
  id v90;
  id v91;
  Class isa;
  id v93;
  id v94;
  Swift::String v95;
  Swift::String v96;
  NSString v97;
  void *v98;
  id v99;
  id v100;
  NSString v101;
  id v102;
  id v103;
  NSString v104;
  id v105;
  id result;
  void *v107;
  NSString v108;
  id v109;
  unint64_t v110;
  Swift::String v111;
  uint64_t v112;
  _QWORD v113[4];
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;

  v2 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_whatsNew);
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (v2 == 1)
  {
    v4 = 0xD000000000000010;
    v110 = 0x80000001001FEBB0;
    v5 = 0x454E5F5354414857;
    v6 = 0xEF454C5449545F57;
  }
  else
  {
    v4 = 0xD000000000000011;
    v5 = 0xD000000000000012;
    v110 = 0x80000001001FE7A0;
    v6 = 0x80000001001FE780;
  }
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, (Swift::String_optional)0, (NSBundle)v3, v7, *(Swift::String *)&v4);

  v8 = objc_allocWithZone((Class)OBWelcomeController);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithTitle:detailText:icon:", v9, 0, 0, swift_bridgeObjectRelease().n128_f64[0]);

  v112 = a1;
  if (v2)
  {
    v11 = v10;
    v12 = (void *)objc_opt_self(NSBundle);
    v13 = objc_msgSend(v12, "mainBundle");
    v114._object = (void *)0x80000001001FE9D0;
    v14._object = (void *)0x80000001001FE9B0;
    v14._countAndFlagsBits = 0xD000000000000016;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v114._countAndFlagsBits = 0xD000000000000024;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v114);

    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v12, "mainBundle", swift_bridgeObjectRelease().n128_f64[0]);
    v115._object = (void *)0x80000001001FEA20;
    v18._object = (void *)0x80000001001FEA00;
    v18._countAndFlagsBits = 0xD00000000000001BLL;
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    v115._countAndFlagsBits = 0xD00000000000002CLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v115);

    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v21 = String._bridgeToObjectiveC()();
    v22 = (void *)objc_opt_self(UIImage);
    v23 = objc_msgSend(v22, "_systemImageNamed:", v21);

    if (!v23)
      v23 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v11, "addBulletedListItemWithTitle:description:image:", v16, v20, v23);

    v24 = objc_msgSend(v12, "mainBundle");
    v116._object = (void *)0x80000001001FEA90;
    v25._object = (void *)0x80000001001FEA70;
    v25._countAndFlagsBits = 0xD000000000000016;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v116._countAndFlagsBits = 0xD000000000000024;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v116);

    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v12, "mainBundle", swift_bridgeObjectRelease().n128_f64[0]);
    v117._object = (void *)0x80000001001FEAE0;
    v29._object = (void *)0x80000001001FEAC0;
    v29._countAndFlagsBits = 0xD00000000000001BLL;
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    v117._countAndFlagsBits = 0xD00000000000002CLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v117);

    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v32 = String._bridgeToObjectiveC()();
    v33 = objc_msgSend(v22, "_systemImageNamed:", v32);

    if (!v33)
      v33 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v11, "addBulletedListItemWithTitle:description:image:", v27, v31, v33);

    v34 = objc_msgSend(v12, "mainBundle");
    v118._countAndFlagsBits = 0xD000000000000024;
    v118._object = (void *)0x80000001001FEB30;
    v35._object = (void *)0x80000001001FEB10;
    v35._countAndFlagsBits = 0xD000000000000016;
    v36._countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)v34, v36, v118);

    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v12, "mainBundle", swift_bridgeObjectRelease().n128_f64[0]);
    v39._countAndFlagsBits = 0xD00000000000001BLL;
    v119._countAndFlagsBits = 0xD00000000000002CLL;
    v119._object = (void *)0x80000001001FEB80;
    v39._object = (void *)0x80000001001FEB60;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, (NSBundle)v38, v40, v119);

    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v22, "systemImageNamed:", v42);

    v44 = v11;
    if (!v43)
      v43 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v11, "addBulletedListItemWithTitle:description:image:", v37, v41, v43);

    v45 = &_sSS9UTF16ViewV5countSivg_ptr;
  }
  else
  {
    v46 = (void *)objc_opt_self(UIDevice);
    v47 = objc_msgSend(v46, "currentDevice");
    v48 = objc_msgSend(v47, "userInterfaceIdiom");

    v49 = objc_msgSend(v46, "currentDevice");
    v50 = v49;
    if (v48 == (id)1)
    {
      v51 = String._bridgeToObjectiveC()();
      MGGetSInt32Answer(v51, 0);

      v111._object = (void *)0x80000001001FE990;
      v111._countAndFlagsBits = 0xD000000000000016;
    }
    else
    {
      v52 = objc_msgSend(v49, "model");

      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v55 = v54;

      v113[2] = v53;
      v113[3] = v55;
      v113[0] = 0x656E6F685069;
      v113[1] = 0xE600000000000000;
      v56 = sub_10000B030();
      LOBYTE(v53) = StringProtocol.contains<A>(_:)(v113, &type metadata for String, &type metadata for String, v56, v56);
      *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
      if ((v53 & 1) != 0)
      {
        v58 = objc_msgSend(v46, "currentDevice", v57);
        v59 = String._bridgeToObjectiveC()();
        MGGetSInt32Answer(v59, 0);

        v111._countAndFlagsBits = 0xD000000000000018;
        v111._object = (void *)0x80000001001FE930;
      }
      else
      {
        v111._countAndFlagsBits = 0;
        v111._object = (void *)0xE000000000000000;
      }
    }
    v60 = (void *)objc_opt_self(NSBundle);
    v61 = objc_msgSend(v60, "mainBundle");
    v120._object = (void *)0x80000001001FE7C0;
    v62._countAndFlagsBits = 0x55544145465F424FLL;
    v62._object = (void *)0xEC000000315F4552;
    v63._countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    v120._countAndFlagsBits = 0xD00000000000001BLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v62, (Swift::String_optional)0, (NSBundle)v61, v63, v120);

    v64 = String._bridgeToObjectiveC()();
    v65 = objc_msgSend(v60, "mainBundle", swift_bridgeObjectRelease().n128_f64[0]);
    v121._object = (void *)0x80000001001FE800;
    v66._object = (void *)0x80000001001FE7E0;
    v66._countAndFlagsBits = 0xD000000000000011;
    v67._countAndFlagsBits = 0;
    v67._object = (void *)0xE000000000000000;
    v121._countAndFlagsBits = 0xD000000000000021;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v66, (Swift::String_optional)0, (NSBundle)v65, v67, v121);

    v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v70 = (void *)objc_opt_self(UIImage);
    v71 = objc_msgSend(v70, "_systemImageNamed:", v69);

    if (!v71)
      v71 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v10, "addBulletedListItemWithTitle:description:image:", v64, v68, v71);

    v72 = objc_msgSend(v60, "mainBundle");
    v122._object = (void *)0x80000001001FE830;
    v73._countAndFlagsBits = 0x55544145465F424FLL;
    v73._object = (void *)0xEC000000325F4552;
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    v122._countAndFlagsBits = 0xD00000000000001BLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v73, (Swift::String_optional)0, (NSBundle)v72, v74, v122);

    v75 = String._bridgeToObjectiveC()();
    v76 = objc_msgSend(v60, "mainBundle", swift_bridgeObjectRelease().n128_f64[0]);
    v123._object = (void *)0x80000001001FE870;
    v77._object = (void *)0x80000001001FE850;
    v77._countAndFlagsBits = 0xD000000000000011;
    v78._countAndFlagsBits = 0;
    v78._object = (void *)0xE000000000000000;
    v123._countAndFlagsBits = 0xD000000000000021;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v77, (Swift::String_optional)0, (NSBundle)v76, v78, v123);

    v79 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v80 = String._bridgeToObjectiveC()();
    v81 = objc_msgSend(v70, "_systemImageNamed:", v80);

    if (!v81)
      v81 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    v44 = v10;
    objc_msgSend(v10, "addBulletedListItemWithTitle:description:image:", v75, v79, v81);

    v82 = objc_msgSend(v60, "mainBundle");
    v124._countAndFlagsBits = 0xD00000000000001BLL;
    v124._object = (void *)0x80000001001FE8A0;
    v83._countAndFlagsBits = 0x55544145465F424FLL;
    v83._object = (void *)0xEC000000335F4552;
    v84._countAndFlagsBits = 0;
    v84._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v83, (Swift::String_optional)0, (NSBundle)v82, v84, v124);

    v85 = String._bridgeToObjectiveC()();
    v86 = objc_msgSend(v60, "mainBundle", swift_bridgeObjectRelease().n128_f64[0]);
    v125._countAndFlagsBits = 0xD000000000000021;
    v125._object = (void *)0x80000001001FE8C0;
    v87._countAndFlagsBits = 0;
    v87._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v111, (Swift::String_optional)0, (NSBundle)v86, v87, v125);
    swift_bridgeObjectRelease();

    v88 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v89 = String._bridgeToObjectiveC()();
    v90 = objc_msgSend(v70, "systemImageNamed:", v89, swift_bridgeObjectRelease().n128_f64[0]);

    if (!v90)
      v90 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v10, "addBulletedListItemWithTitle:description:image:", v85, v88, v90);

    v45 = &_sSS9UTF16ViewV5countSivg_ptr;
  }
  v91 = objc_msgSend(v44, "buttonTray");
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v91, "setPrivacyLinkForBundles:", isa);

  v93 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  objc_msgSend(v93, "addTarget:action:forControlEvents:", v112, "continueButtonPressed", 0x2000);
  v94 = objc_msgSend((id)objc_opt_self(v45[508]), "mainBundle");
  v126._countAndFlagsBits = 0xD000000000000015;
  v126._object = (void *)0x80000001001FE8F0;
  v95._countAndFlagsBits = 0x49544E4F435F424FLL;
  v95._object = (void *)0xEB0000000045554ELL;
  v96._countAndFlagsBits = 0;
  v96._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v95, (Swift::String_optional)0, (NSBundle)v94, v96, v126);

  v97 = String._bridgeToObjectiveC()();
  objc_msgSend(v93, "setTitle:forState:", v97, 0, swift_bridgeObjectRelease().n128_f64[0]);

  v98 = (void *)objc_opt_self(UIColor);
  v99 = objc_msgSend(v98, "whiteColor");
  objc_msgSend(v93, "setTitleColor:forState:", v99, 0);

  v100 = v93;
  v101 = String._bridgeToObjectiveC()();
  v102 = objc_msgSend(v98, "colorNamed:", v101);

  objc_msgSend(v100, "setTintColor:", v102);
  objc_msgSend(v100, "setRole:", 1);
  v103 = v100;
  v104 = String._bridgeToObjectiveC()();
  objc_msgSend(v103, "setAccessibilityIdentifier:", v104);

  v105 = objc_msgSend(v44, "buttonTray");
  objc_msgSend(v105, "addButton:", v103);

  objc_msgSend(v44, "setModalInPresentation:", 1);
  result = objc_msgSend(v44, "view");
  if (result)
  {
    v107 = result;
    v108 = String._bridgeToObjectiveC()();
    v109 = objc_msgSend(v98, "colorNamed:", v108);

    objc_msgSend(v107, "setTintColor:", v109);
    return v44;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10013D1DC()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, "viewControllers");
  v2 = sub_10000A05C(0, (unint64_t *)&unk_1002953D0, UIViewController_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v7 = v3;
    else
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    if ((v0[OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_whatsNew] & 1) == 0)
      sub_10013D394();
    Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_oBDelegate]);
    if (Strong)
    {
      v6 = Strong;
      sub_10013EBC4(v0);
      swift_unknownObjectRelease(v6);
    }
  }
}

uint64_t sub_10013D394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSLocale v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  Class isa;
  Class v31;
  id v32;
  void *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t (*v56)(char *, uint64_t);
  os_log_t v57;
  uint64_t v58;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  os_log_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = type metadata accessor for Locale(0);
  v65 = *(_QWORD *)(v1 - 8);
  v66 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v61 - v5;
  v7 = type metadata accessor for LocalePair(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v61 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v61 - v16;
  v18 = static Locale.preferredLanguages.getter(v15);
  v19 = LanguagesService.models.getter(v18);
  Array<A>.defaultPair(userLanguages:)(v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_oBDelegate);
  if (Strong)
  {
    v21 = Strong;
    v22 = LocalePair.sourceLocale.getter();
    LocalePair.targetLocale.getter(v22);
    v23 = objc_allocWithZone((Class)_LTLocalePair);
    v24.super.isa = Locale._bridgeToObjectiveC()().super.isa;
    v64 = (uint64_t)v6;
    v25 = v17;
    v26 = v7;
    v27 = v14;
    v28 = v8;
    v29 = v11;
    isa = v24.super.isa;
    v31 = Locale._bridgeToObjectiveC()().super.isa;
    v32 = objc_msgSend(v23, "initWithSourceLocale:targetLocale:", isa, v31);

    v11 = v29;
    v8 = v28;
    v14 = v27;
    v7 = v26;
    v17 = v25;
    v6 = (char *)v64;

    v33 = *(void **)(v21 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_initialLocalePair);
    *(_QWORD *)(v21 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_initialLocalePair) = v32;
    swift_unknownObjectRelease(v21);

    v34 = v66;
    v35 = *(void (**)(char *, uint64_t))(v65 + 8);
    v35(v4, v66);
    v35(v6, v34);
  }
  if (qword_10028A448 != -1)
    swift_once(&qword_10028A448, sub_10012102C);
  v36 = type metadata accessor for Logger(0);
  sub_10000F66C(v36, (uint64_t)qword_1002AA3E0);
  v37 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v37(v14, v17, v7);
  v38 = ((uint64_t (*)(char *, char *, uint64_t))v37)(v11, v17, v7);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  v41 = v40;
  if (os_log_type_enabled(v39, v40))
  {
    v42 = swift_slowAlloc(22, -1);
    v64 = swift_slowAlloc(64, -1);
    v68 = v64;
    *(_DWORD *)v42 = 136446466;
    v61 = v42 + 4;
    v63 = v41;
    v43 = LocalePair.sourceLocale.getter();
    v44 = Locale.identifier.getter(v43);
    v62 = v39;
    v46 = v45;
    v47 = v11;
    v48 = *(void (**)(char *, uint64_t))(v65 + 8);
    v48(v6, v66);
    v67 = sub_1001A7FE4(v44, v46, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v61);
    v49 = swift_bridgeObjectRelease();
    v65 = *(_QWORD *)(v8 + 8);
    v50 = ((uint64_t (*)(char *, uint64_t, __n128))v65)(v14, v7, v49);
    *(_WORD *)(v42 + 12) = 2082;
    v51 = LocalePair.targetLocale.getter(v50);
    v52 = Locale.identifier.getter(v51);
    v54 = v53;
    v48(v6, v66);
    v67 = sub_1001A7FE4(v52, v54, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v42 + 14);
    v55 = swift_bridgeObjectRelease();
    v56 = (uint64_t (*)(char *, uint64_t))v65;
    ((void (*)(char *, uint64_t, __n128))v65)(v47, v7, v55);
    v57 = v62;
    _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v63, "Default app locale pair: %{public}s -> %{public}s", (uint8_t *)v42, 0x16u);
    v58 = v64;
    swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    return v56(v17, v7);
  }
  else
  {

    v60 = *(void (**)(char *, uint64_t))(v8 + 8);
    v60(v11, v7);
    v60(v14, v7);
    return ((uint64_t (*)(char *, uint64_t))v60)(v17, v7);
  }
}

id sub_10013D8A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OnBoardingController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for OnBoardingController()
{
  return objc_opt_self(_TtC17SequoiaTranslator20OnBoardingController);
}

const char *sub_10013D940()
{
  return "Siri";
}

const char *sub_10013D954()
{
  return "siri_data_sharing_reprompt";
}

void sub_10013D968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v4 = sub_100006DF4(&qword_100294CD8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(void **)(a2 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_settingsConnection);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10026D488, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10013F0C0;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10013DB10;
  aBlock[3] = &unk_10026D4A0;
  v11 = _Block_copy(aBlock);
  objc_msgSend(v7, "getSiriDataSharingOptInStatusWithCompletion:", v11, swift_release(v13).n128_f64[0]);
  _Block_release(v11);
}

uint64_t sub_10013DAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (a1)
  {
    v5 = a1;
    swift_errorRetain(a1);
    v2 = sub_100006DF4(&qword_100294CD8);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }
  else
  {
    v5 = a2;
    v6 = 0;
    v4 = sub_100006DF4(&qword_100294CD8);
    return CheckedContinuation.resume(returning:)(&v5, v4);
  }
}

void sub_10013DB10(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(void *, uint64_t);
  id v7;

  v6 = *(void (**)(void *, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a2;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10013DB70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[9] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[10] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[11] = v3;
  v1[12] = v4;
  return swift_task_switch(sub_10013DBDC, v3, v4);
}

uint64_t sub_10013DBDC()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  char *v9;
  void *v10;
  id v11;
  NSString v12;
  unsigned __int8 v13;
  id v14;
  NSString v15;
  unsigned __int8 v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v2 = objc_msgSend(v1, "launchedToTest");

  if (!v2)
  {
    v10 = (void *)objc_opt_self(NSUserDefaults);
    v11 = objc_msgSend(v10, "standardUserDefaults");
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "BOOLForKey:", v12);

    if ((v13 & 1) != 0)
    {
      v14 = objc_msgSend(v10, "standardUserDefaults");
      v15 = String._bridgeToObjectiveC()();
      v16 = objc_msgSend(v14, "BOOLForKey:", v15);

      if ((v16 & 1) != 0)
      {
        *(_QWORD *)(v0 + 40) = &type metadata for AssistantFeatures;
        *(_QWORD *)(v0 + 48) = sub_10013F010();
        v17 = isFeatureEnabled(_:)(v0 + 16);
        sub_100009C08((_QWORD *)(v0 + 16));
        if ((v17 & 1) != 0)
          return swift_task_switch(sub_10013E094, 0, 0);
        swift_release(*(_QWORD *)(v0 + 80));
        if (qword_10028A448 != -1)
          swift_once(&qword_10028A448, sub_10012102C);
        v35 = type metadata accessor for Logger(0);
        v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA3E0);
        v5 = Logger.logObject.getter(v36);
        v6 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v5, v6))
          goto LABEL_7;
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        v8 = "Ignoring Siri Data Sharing onboarding UI since Siri data sharing prompt isn't available";
        goto LABEL_6;
      }
      swift_release(*(_QWORD *)(v0 + 80));
      if (qword_10028A448 != -1)
        swift_once(&qword_10028A448, sub_10012102C);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_10000F66C(v28, (uint64_t)qword_1002AA3E0);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Showing what's new controller", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }
      v24 = *(_QWORD *)(v0 + 72);

      v33 = objc_allocWithZone((Class)type metadata accessor for OnBoardingController());
      v27 = 1;
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 80));
      if (qword_10028A448 != -1)
        swift_once(&qword_10028A448, sub_10012102C);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_10000F66C(v19, (uint64_t)qword_1002AA3E0);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Showing onboarding controller", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }
      v24 = *(_QWORD *)(v0 + 72);

      v25 = objc_allocWithZone((Class)type metadata accessor for OnBoardingController());
      v27 = 0;
    }
    v9 = (char *)sub_10013BCB0(v27, v26);
    v34 = &v9[OBJC_IVAR____TtC17SequoiaTranslator20OnBoardingController_oBDelegate];
    *((_QWORD *)v34 + 1) = &off_10026D460;
    swift_unknownObjectWeakAssign(v34, v24);
    return (*(uint64_t (**)(char *))(v0 + 8))(v9);
  }
  swift_release(*(_QWORD *)(v0 + 80));
  if (qword_10028A448 != -1)
    swift_once(&qword_10028A448, sub_10012102C);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000F66C(v3, (uint64_t)qword_1002AA3E0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v5, v6))
    goto LABEL_7;
  v7 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v7 = 0;
  v8 = "Ignoring onboarding UI since app is running in a test";
LABEL_6:
  _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
  swift_slowDealloc(v7, -1, -1);
LABEL_7:

  v9 = 0;
  return (*(uint64_t (**)(char *))(v0 + 8))(v9);
}

uint64_t sub_10013E094()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[9];
  v2 = swift_task_alloc(32);
  v0[13] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v3;
  v4 = sub_100006DF4(&qword_100294CD0);
  *v3 = v0;
  v3[1] = sub_10013E144;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000011, 0x80000001001FED80, sub_10013F054, v2, v4);
}

uint64_t sub_10013E144()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 112));
  v3 = *(_QWORD *)(v2 + 104);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    v4 = sub_10013E2FC;
  }
  else
  {
    swift_task_dealloc(v3);
    v4 = sub_10013E1C0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013E1C0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 56);
  *(_BYTE *)(v0 + 65) = *(_BYTE *)(v0 + 64);
  return swift_task_switch(sub_10013E1E0, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

id sub_10013E1E0()
{
  uint64_t v0;
  char v1;
  __n128 v2;
  uint64_t v3;
  id v4;
  id result;
  void *v6;
  void *v7;
  void *v8;

  v1 = *(_BYTE *)(v0 + 65);
  v2 = swift_release(*(_QWORD *)(v0 + 80));
  if ((v1 & 1) != 0
    || (v3 = *(_QWORD *)(v0 + 120),
        (*(_QWORD *)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_optInStatus) = v3) != 0))
  {
    v4 = 0;
    return (id)(*(uint64_t (**)(id, __n128))(v0 + 8))(v4, v2);
  }
  v6 = *(void **)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_dataSharingPresenter);
  objc_msgSend(v6, "setPresentationDelegate:", v2.n128_f64[0]);
  v4 = objc_msgSend(v6, "dataSharingOptInTextWelcomeControllerForViewStyle:", 2);
  result = objc_msgSend(v4, "view");
  if (result)
  {
    v7 = result;
    sub_100048C48();
    v8 = (void *)static UIColor.translateAccentColor.getter();
    objc_msgSend(v7, "setTintColor:", v8);

    objc_msgSend(v4, "setModalPresentationStyle:", 2);
    objc_msgSend(v4, "setModalInPresentation:", 1);
    return (id)(*(uint64_t (**)(id, __n128))(v0 + 8))(v4, v2);
  }
  __break(1u);
  return result;
}

uint64_t sub_10013E2FC()
{
  uint64_t v0;

  return swift_task_switch(sub_10013E30C, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t sub_10013E30C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10013E340(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = v3;
  v2[5] = static MainActor.shared.getter(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_100294C44);
  v2[6] = v4;
  *v4 = v2;
  v4[1] = sub_10013E3A8;
  return sub_10013DB70();
}

uint64_t sub_10013E3A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 32);
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 72) = v6;
  return swift_task_switch(sub_10013E428, v5, v6);
}

uint64_t sub_10013E428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v13;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    if (qword_10028A448 != -1)
      swift_once(&qword_10028A448, sub_10012102C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA3E0);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Presenting onboarding UI", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 24);
    v8 = *(void **)(v0 + 16);

    v9 = static MainActor.shared.getter(objc_msgSend(v8, "presentViewController:animated:completion:", v1, 1, 0));
    *(_QWORD *)(v0 + 80) = v9;
    v10 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 88) = v10;
    *(_QWORD *)(v10 + 16) = v7;
    v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 96) = v11;
    *v11 = v0;
    v11[1] = sub_10013E5D8;
    return withCheckedContinuation<A>(isolation:function:_:)(v11, v9, &protocol witness table for MainActor, 0xD000000000000014, 0x80000001001FED40, sub_10013EFC0, v10, (char *)&type metadata for () + 8);
  }
  else
  {
    v13 = swift_release(*(_QWORD *)(v0 + 40));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v13);
  }
}

uint64_t sub_10013E5D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10013E640, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10013E640()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  NSString v4;
  unsigned __int8 v5;
  id v6;
  NSString v7;
  id v8;
  NSString v9;
  unsigned __int8 v10;
  void *v11;
  id v12;
  NSString v13;

  v1 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 40));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);

  if ((v5 & 1) == 0)
  {
    v6 = objc_msgSend(v2, "standardUserDefaults");
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setBool:forKey:", 1, v7);

  }
  v8 = objc_msgSend(v2, "standardUserDefaults");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "BOOLForKey:", v9);

  v11 = *(void **)(v0 + 56);
  if ((v10 & 1) == 0)
  {
    v12 = objc_msgSend(v2, "standardUserDefaults");
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setBool:forKey:", 1, v13);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013E818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v4 = sub_100006DF4(&qword_100294CC0);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100006DF4(&qword_100294C58);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v9 = a2 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_presentationContinuation;
  swift_beginAccess(v9, v12, 33, 0);
  sub_10013EFC8((uint64_t)v6, v9);
  return swift_endAccess(v12);
}

id sub_10013E8FC()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  objc_super v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_settingsConnection;
  v2 = objc_allocWithZone((Class)AFSettingsConnection);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  v4 = OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_dataSharingPresenter;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)VTUISiriDataSharingOptInPresenter), "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_optInStatus] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_initialLocalePair] = 0;
  v5 = &v3[OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_presentationContinuation];
  v6 = sub_100006DF4(&qword_100294C58);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for OnBoardingPresenter(0);
  return objc_msgSendSuper2(&v8, "init");
}

id sub_10013EA08()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OnBoardingPresenter(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10013EA94()
{
  return type metadata accessor for OnBoardingPresenter(0);
}

uint64_t type metadata accessor for OnBoardingPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_100294C30;
  if (!qword_100294C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OnBoardingPresenter);
  return result;
}

void sub_10013EAD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = "\b";
  sub_10013EB6C(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_10013EB6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100294C50)
  {
    v2 = sub_1000070BC(&qword_100294C58);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100294C50);
  }
}

void sub_10013EBC4(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  NSString v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  char *v13;
  Swift::String v14;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_dataSharingPresenter);
  if ((objc_msgSend(v3, "shouldShowSiriDataSharingOptInView") & 1) == 0
    && *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_optInStatus) == 1)
  {
    v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v14._object = (void *)0x80000001001FEDC0;
    v5._countAndFlagsBits = 0x5F45564F52504D49;
    v5._object = (void *)0xED00004543494F56;
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v14._countAndFlagsBits = 0xD00000000000002FLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v14);

    v7 = objc_allocWithZone((Class)type metadata accessor for TempOptInReprompt());
    v8 = String._bridgeToObjectiveC()();
    v13 = (char *)objc_msgSend(v7, "initWithTitle:", v8, swift_bridgeObjectRelease().n128_f64[0]);

    v9 = &v13[OBJC_IVAR____TtC17SequoiaTranslator17TempOptInReprompt_delegate];
    *((_QWORD *)v9 + 1) = &off_10026D450;
    swift_unknownObjectWeakAssign(v9, v1);
LABEL_6:
    objc_msgSend(a1, "pushViewController:animated:", v13, 1);

    return;
  }
  objc_msgSend(v3, "setPresentationDelegate:", v1);
  v13 = (char *)objc_msgSend(v3, "dataSharingOptInTextWelcomeControllerForViewStyle:", 2);
  v10 = objc_msgSend(v13, "view");
  if (v10)
  {
    v11 = v10;
    sub_100048C48();
    v12 = (void *)static UIColor.translateAccentColor.getter();
    objc_msgSend(v11, "setTintColor:", v12);

    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_10013EE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v12[24];

  v1 = sub_100006DF4(&qword_100294C58);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100006DF4(&qword_100294CC0);
  __chkstk_darwin(v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = v0 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_presentationContinuation;
  swift_beginAccess(v8, v12, 0, 0);
  sub_10013EF38(v8, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
    return sub_10013EF80((uint64_t)v7);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  v10 = sub_10013EF80((uint64_t)v7);
  CheckedContinuation.resume(returning:)(v10, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_10013EF38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100294CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013EF80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_100294CC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013EFC0(uint64_t a1)
{
  uint64_t v1;

  return sub_10013E818(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10013EFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100294CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10013F010()
{
  unint64_t result;

  result = qword_100294CC8;
  if (!qword_100294CC8)
  {
    result = swift_getWitnessTable(&unk_1001F2CCC, &type metadata for AssistantFeatures);
    atomic_store(result, (unint64_t *)&qword_100294CC8);
  }
  return result;
}

void sub_10013F054(uint64_t a1)
{
  uint64_t v1;

  sub_10013D968(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10013F05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100006DF4(&qword_100294CD8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10013F0C0(uint64_t a1, uint64_t a2)
{
  sub_100006DF4(&qword_100294CD8);
  return sub_10013DAA4(a1, a2);
}

uint64_t sub_10013F110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013F120(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for AssistantFeatures(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10013F168 + 4 * asc_1001F2BD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10013F188 + 4 * byte_1001F2BD5[v4]))();
}

_BYTE *sub_10013F168(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10013F188(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10013F190(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10013F198(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10013F1A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10013F1A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AssistantFeatures()
{
  return &type metadata for AssistantFeatures;
}

unint64_t sub_10013F1C8()
{
  unint64_t result;

  result = qword_100294CE0[0];
  if (!qword_100294CE0[0])
  {
    result = swift_getWitnessTable(&unk_1001F2CA4, &type metadata for AssistantFeatures);
    atomic_store(result, qword_100294CE0);
  }
  return result;
}

uint64_t sub_10013F20C(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, qword_1002AA4F8 + a1 + 16);
}

uint64_t sub_10013F26C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2F40, (uint64_t)&unk_1001F2F68, a2);
}

uint64_t sub_10013F280(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2F40, (uint64_t)&unk_1001F2F68);
}

NSString sub_10013F294()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002AA4F0 = (uint64_t)result;
  return result;
}

void sub_10013F2C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1001401F8();
}

uint64_t sub_10013F2EC(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = sub_10013F31C();

  return v2;
}

uint64_t sub_10013F31C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  objc_class *locked;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  ValueMetadata *v17;
  unint64_t v18;
  objc_super v19;

  v1 = *v0;
  v2 = swift_isaMask;
  v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4)
  {
    locked = (objc_class *)type metadata accessor for OrientationLockedController(0, *(_QWORD *)((v2 & v1) + qword_1002AA4F8), *(_QWORD *)((v2 & v1) + qword_1002AA4F8 + 8), v5);
    v19.receiver = v0;
    v19.super_class = locked;
    return (uint64_t)objc_msgSendSuper2(&v19, "supportedInterfaceOrientations");
  }
  else
  {
    v8 = *(uint64_t *)((char *)v0 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v0) + 16));
    KeyPath = swift_getKeyPath(&unk_1001F2EF8);
    v10 = swift_getKeyPath(&unk_1001F2F20);
    static Published.subscript.getter(&v15, v8, KeyPath);
    swift_release(KeyPath);
    swift_release(v10);
    v11 = v16;
    if (v16 == 5)
      return 2;
    sub_1000484FC(v15, v16);
    if (v11 != 2)
      return 2;
    v12 = swift_getKeyPath(&unk_1001F2F40);
    v13 = swift_getKeyPath(&unk_1001F2F68);
    static Published.subscript.getter(&v15, v8, v12);
    swift_release(v12);
    swift_release(v13);
    if ((v15 & 1) != 0)
      return 2;
    v17 = &type metadata for TranslateFeatures;
    v18 = sub_100009BC4();
    LOBYTE(v15) = 2;
    v14 = isFeatureEnabled(_:)(&v15);
    sub_100009C08(&v15);
    if ((v14 & 1) != 0)
      return 2;
    else
      return 26;
  }
}

void sub_10013F4DC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *locked;
  id v7;
  void *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double Width;
  objc_super v18;
  CGRect v19;

  locked = (objc_class *)type metadata accessor for OrientationLockedController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8), *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8 + 8), a4);
  v18.receiver = v4;
  v18.super_class = locked;
  objc_msgSendSuper2(&v18, "viewWillAppear:", a1 & 1);
  v7 = objc_msgSend(v4, "view");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "frame");
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

    v19.origin.x = v10;
    v19.origin.y = v12;
    v19.size.width = v14;
    v19.size.height = v16;
    Width = CGRectGetWidth(v19);
    sub_10013FA98(Width);
  }
  else
  {
    __break(1u);
  }
}

void sub_10013F5B0(void *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  sub_10013F4DC(a3, (uint64_t)v6, v4, v5);

}

id sub_10013F5F0(uint64_t a1, double a2, double a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  id result;
  void *v25;
  id v26;
  uint64_t v27;
  objc_class *locked;
  objc_super v29;
  uint64_t v30;

  v7 = swift_isaMask & *v3;
  v8 = *(_QWORD *)((char *)v3 + *(_QWORD *)(qword_1002AA4F8 + v7 + 24));
  KeyPath = swift_getKeyPath(&unk_1001F2E68);
  v10 = swift_getKeyPath(&unk_1001F2E90);
  static Published.subscript.getter(&v30, v8, KeyPath);
  swift_release(KeyPath);
  swift_release(v10);
  if (v30 != 1)
    goto LABEL_9;
  v11 = swift_getKeyPath(&unk_1001F2E68);
  v12 = swift_getKeyPath(&unk_1001F2E90);
  LOBYTE(v30) = 0;
  swift_retain(v8);
  static Published.subscript.setter(&v30, v8, v11, v12);
  v13 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v13, "bounds");
  v15 = v14;
  v17 = v16;

  v18 = swift_getKeyPath(&unk_1001F2EB0);
  v19 = swift_getKeyPath(&unk_1001F2ED8);
  static Published.subscript.getter(&v30, v8, v18);
  swift_release(v18);
  swift_release(v19);
  if (v30 != 1)
    goto LABEL_9;
  v20 = *(_QWORD *)((char *)v3 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v3) + 16));
  v21 = swift_getKeyPath(&unk_1001F2D90);
  v22 = swift_getKeyPath(&unk_1001F2DB8);
  static Published.subscript.getter(&v30, v20, v21);
  swift_release(v21);
  *(_QWORD *)&v23 = swift_release(v22).n128_u64[0];
  if (v30 != 1 || v15 != a2 || v17 != a3)
    goto LABEL_9;
  result = objc_msgSend(v3, "view", v23);
  if (result)
  {
    v25 = result;
    v26 = objc_msgSend(result, "window");

    if (v26)
    {
      objc_msgSend(v26, "layoutIfNeeded");

    }
LABEL_9:
    sub_10013FA98(a2);
    locked = (objc_class *)type metadata accessor for OrientationLockedController(0, *(_QWORD *)(v7 + qword_1002AA4F8), *(_QWORD *)(v7 + qword_1002AA4F8 + 8), v27);
    v29.receiver = v3;
    v29.super_class = locked;
    return objc_msgSendSuper2(&v29, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  }
  __break(1u);
  return result;
}

void sub_10013F898(void *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  id v9;

  swift_unknownObjectRetain(a5);
  v9 = a1;
  sub_10013F5F0(a5, a2, a3);
  swift_unknownObjectRelease(a5);

}

void sub_10013F904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *locked;
  id v6;
  objc_super v7;

  locked = (objc_class *)type metadata accessor for OrientationLockedController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8), *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8 + 8), a4);
  v7.receiver = v4;
  v7.super_class = locked;
  objc_msgSendSuper2(&v7, "viewDidLayoutSubviews");
  v6 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10028A4B0 != -1)
    swift_once(&qword_10028A4B0, sub_10013F294);
  objc_msgSend(v6, "postNotificationName:object:", qword_1002AA4F0, 0);

  sub_10013FC68();
}

void sub_10013F9D4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_10013F904((uint64_t)v4, v1, v2, v3);

}

void sub_10013FA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *locked;
  objc_super v6;

  locked = (objc_class *)type metadata accessor for OrientationLockedController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8), *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8 + 8), a4);
  v6.receiver = v4;
  v6.super_class = locked;
  objc_msgSendSuper2(&v6, "viewSafeAreaInsetsDidChange");
  sub_10013FC68();
}

void sub_10013FA64(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_10013FA08((uint64_t)v4, v1, v2, v3);

}

void sub_10013FA98(double a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  BOOL v19;
  BOOL v20;

  v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)1)
  {
    v5 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v5, "bounds");
    v7 = v6;

    v8 = *(_QWORD *)((char *)v1 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v1) + 16));
    KeyPath = swift_getKeyPath(&unk_1001F2D90);
    v10 = swift_getKeyPath(&unk_1001F2DB8);
    v20 = v7 != a1;
    swift_retain(v8);
    static Published.subscript.setter(&v20, v8, KeyPath, v10);
    v11 = v7 * 0.5 + -10.0;
    v12 = v7 * 0.5 + 10.0;
    if (v11 > v12)
    {
      __break(1u);
    }
    else
    {
      v13 = v12 >= a1 && v11 <= a1;
      v14 = swift_getKeyPath(&unk_1001F2DD8);
      v15 = swift_getKeyPath(&unk_1001F2E00);
      v19 = v13;
      swift_retain(v8);
      static Published.subscript.setter(&v19, v8, v14, v15);
      v16 = swift_getKeyPath(&unk_1001F2E20);
      v17 = swift_getKeyPath(&unk_1001F2E48);
      v18 = a1;
      swift_retain(v8);
      static Published.subscript.setter(&v18, v8, v16, v17);
    }
  }
}

void sub_10013FC68()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;

  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "window");

    if (v3)
    {
      v4 = *(_QWORD *)((char *)v0 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v0) + 16));
      KeyPath = swift_getKeyPath(&unk_1001F2D48);
      v6 = swift_getKeyPath(&unk_1001F2D70);
      static Published.subscript.getter(&v28, v4, KeyPath, v6);
      swift_release(KeyPath);
      swift_release(v6);
      v7 = v28;
      v8 = v29;
      v9 = v30;
      v10 = v31;
      objc_msgSend(v3, "safeAreaInsets");
      if (v7 != v14 || v8 != v11 || v9 != v12 || v10 != v13)
      {
        objc_msgSend(v3, "safeAreaInsets");
        v19 = v18;
        v21 = v20;
        v23 = v22;
        v25 = v24;
        v26 = swift_getKeyPath(&unk_1001F2D48);
        v27 = swift_getKeyPath(&unk_1001F2D70);
        v28 = v19;
        v29 = v21;
        v30 = v23;
        v31 = v25;
        swift_retain(v4);
        static Published.subscript.setter(&v28, v4, v26, v27);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10013FDE0()
{
  _swift_stdlib_reportUnimplementedInitializer("SequoiaTranslator.OrientationLockedController", 45, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_10013FE0C()
{
  _swift_stdlib_reportUnimplementedInitializer("SequoiaTranslator.OrientationLockedController", 45, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_10013FE38()
{
  _QWORD *v0;

  swift_release(*(_QWORD *)((char *)v0 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v0) + 16)));
  swift_release(*(_QWORD *)((char *)v0 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v0) + 24)));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v0) + 32)));
}

id sub_10013FEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *locked;
  objc_super v7;

  locked = (objc_class *)type metadata accessor for OrientationLockedController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8), *(_QWORD *)((swift_isaMask & *v4) + qword_1002AA4F8 + 8), a4);
  v7.receiver = v4;
  v7.super_class = locked;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_10013FF18(_QWORD *a1)
{
  swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *a1) + 16)));
  swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *a1) + 24)));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *a1) + 32)));
}

uint64_t type metadata accessor for OrientationLockedController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrientationLockedController);
}

uint64_t sub_10013FFB0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2DD8, (uint64_t)&unk_1001F2E00, a2);
}

uint64_t sub_10013FFC4(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2DD8, (uint64_t)&unk_1001F2E00);
}

uint64_t sub_10013FFD8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2D90, (uint64_t)&unk_1001F2DB8, a2);
}

uint64_t sub_10013FFEC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2D90, (uint64_t)&unk_1001F2DB8);
}

double sub_100140000@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  double v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F2E20);
  v5 = swift_getKeyPath(&unk_1001F2E48);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10014007C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F2E20);
  v5 = swift_getKeyPath(&unk_1001F2E48);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

double sub_1001400F4@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD v8[2];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F2D48);
  v5 = swift_getKeyPath(&unk_1001F2D70);
  static Published.subscript.getter(v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)v8;
  v7 = v8[1];
  *a2 = v8[0];
  a2[1] = v7;
  return result;
}

uint64_t sub_100140170(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F2D48);
  v6 = swift_getKeyPath(&unk_1001F2D70);
  v9 = v8;
  v10 = v2;
  v11 = v3;
  swift_retain(v4);
  return static Published.subscript.setter(&v9, v4, KeyPath, v6);
}

void sub_1001401F8()
{
  _QWORD *v0;

  *(_QWORD *)((char *)v0 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v0) + 32)) = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/OrientationLockedController.swift", 51, 2, 53, 0);
  __break(1u);
}

uint64_t sub_10014028C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2D90, (uint64_t)&unk_1001F2DB8, a2);
}

uint64_t sub_1001402B0(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2D90, (uint64_t)&unk_1001F2DB8);
}

uint64_t sub_1001402D4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2DD8, (uint64_t)&unk_1001F2E00, a2);
}

uint64_t sub_1001402F8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2DD8, (uint64_t)&unk_1001F2E00);
}

uint64_t sub_10014033C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F2F40, (uint64_t)&unk_1001F2F68, a2);
}

uint64_t sub_100140360(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F2F40, (uint64_t)&unk_1001F2F68);
}

id sub_100140384()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PassthroughTextTurn();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PassthroughTextTurn()
{
  return objc_opt_self(_TtC17SequoiaTranslator19PassthroughTextTurn);
}

char *sub_1001403D4(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  objc_class *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  id v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[24];
  objc_super v85;

  v5 = type metadata accessor for StoredTranslationResult(0);
  v76 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  v6 = __chkstk_darwin(v5);
  v74 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v75 = (char *)&v66 - v8;
  v70 = type metadata accessor for SpeechResultOrigin(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for StoredSpeechResult(0);
  v67 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v78 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v66 = (char *)&v66 - v13;
  v14 = type metadata accessor for Locale(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v66 - v19;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_lid] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_options] = a2;
  v21 = &v2[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_completion];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = (objc_class *)type metadata accessor for ConversationTurn();
  v85.receiver = v2;
  v85.super_class = v22;
  v23 = a1;
  v24 = objc_msgSendSuper2(&v85, "init");
  v25 = objc_msgSend(v23, "text");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v72 = v23;
  v29 = objc_msgSend(v23, "localePair");
  v30 = objc_msgSend(v29, "sourceLocale");

  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v73 = v15;
  v31 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v32 = v66;
  v79 = v20;
  v80 = v14;
  v33 = v20;
  v34 = v18;
  v35 = v14;
  v36 = v67;
  v71 = v31;
  v31(v18, v33, v35);
  v37 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, enum case for SpeechResultOrigin.text(_:), v70);
  v38 = (char *)v24;
  StoredSpeechResult.init(text:sanitizedText:locale:origin:)(v26, v28, 0, 0, v34, v37);
  v39 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v39(v78, v32, v10);
  v40 = &v38[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech];
  swift_beginAccess(&v38[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_speech], v84, 33, 0);
  v41 = *(_QWORD **)v40;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v40);
  *(_QWORD *)v40 = v41;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v41 = sub_1001A78FC(0, v41[2] + 1, 1, v41);
    *(_QWORD *)v40 = v41;
  }
  v44 = v41[2];
  v43 = v41[3];
  if (v44 >= v43 >> 1)
  {
    v41 = sub_1001A78FC((_QWORD *)(v43 > 1), v44 + 1, 1, v41);
    *(_QWORD *)v40 = v41;
  }
  v82 = v10;
  v83 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  v45 = (char *)sub_1000122F8(&v81);
  v46 = v78;
  v39(v45, v78, v10);
  v41[2] = v44 + 1;
  sub_10003E994(&v81, (uint64_t)&v41[5 * v44 + 4]);
  swift_endAccess(v84);
  v47 = *(void (**)(char *, uint64_t))(v36 + 8);
  v47(v46, v10);

  v47(v32, v10);
  v48 = objc_msgSend(v72, "text");
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v51 = v50;

  v71(v34, v79, v80);
  v52 = v75;
  StoredTranslationResult.init(text:locale:isOffline:romanization:)(v49, v51, v34, 1, 0, 0);
  v54 = v76;
  v53 = v77;
  v55 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v56 = v74;
  v55(v74, v52, v77);
  v57 = &v38[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation];
  swift_beginAccess(&v38[OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_translation], v84, 33, 0);
  v58 = *(_QWORD **)v57;
  v59 = v38;
  v60 = swift_isUniquelyReferenced_nonNull_native(v58);
  *(_QWORD *)v57 = v58;
  if ((v60 & 1) == 0)
  {
    v58 = sub_1001A7910(0, v58[2] + 1, 1, v58);
    *(_QWORD *)v57 = v58;
  }
  v62 = v58[2];
  v61 = v58[3];
  if (v62 >= v61 >> 1)
  {
    v58 = sub_1001A7910((_QWORD *)(v61 > 1), v62 + 1, 1, v58);
    *(_QWORD *)v57 = v58;
  }
  v82 = v53;
  v83 = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
  v63 = (char *)sub_1000122F8(&v81);
  v55(v63, v56, v53);
  v58[2] = v62 + 1;
  sub_10003E994(&v81, (uint64_t)&v58[5 * v62 + 4]);
  swift_endAccess(v84);
  v64 = *(void (**)(char *, uint64_t))(v54 + 8);
  v64(v56, v53);

  v64(v52, v53);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v79, v80);
  return v59;
}

id PlaceholderTextView.suppressPlaceholder.setter(char a1)
{
  _BYTE *v1;
  uint64_t v2;
  void *v3;
  id result;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;

  v2 = OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder;
  v1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] = a1;
  v3 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  result = objc_msgSend(v1, "text");
  if (result)
  {
    v5 = result;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v8 = v7;

    swift_bridgeObjectRelease(v8);
    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (v9 || (v10 = 1.0, v1[v2] == 1))
      v10 = 0.0;
    return objc_msgSend(v3, "setAlpha:", v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PlaceholderTextView.placeholder.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void PlaceholderTextView.placeholder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSString v9;
  _BYTE v10[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder);
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder, v10, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView);
  v8 = v5[1];
  if (v8)
  {
    swift_bridgeObjectRetain(v5[1]);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(v7, "setText:", v9);

}

void (*PlaceholderTextView.placeholder.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return sub_100140BE8;
}

void sub_100140BE8(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSString v8;

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    v5 = v4 + v3[4];
    v6 = *(void **)(v4 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView);
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v5 + 8));
      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(v6, "setText:", v8);

  }
  free(v3);
}

void *PlaceholderTextView.placeholderColor.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PlaceholderTextView.placeholderColor.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  PlaceholderTextView.updatePlaceholderProperties()();
}

void (*PlaceholderTextView.placeholderColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor, a1, 33, 0);
  return sub_100140D7C;
}

void sub_100140D7C(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    PlaceholderTextView.updatePlaceholderProperties()();
}

id PlaceholderTextView.textChanged(notification:)()
{
  char *v0;
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;

  v1 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  result = objc_msgSend(v0, "text");
  if (result)
  {
    v3 = result;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v6 = v5;

    swift_bridgeObjectRelease(v6);
    v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    if (v7 || (v8 = 1.0, v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] == 1))
      v8 = 0.0;
    return objc_msgSend(v1, "setAlpha:", v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PlaceholderTextView.updatePlaceholderProperties()()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  Class isa;
  double v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  double v11;
  double v12;
  void **v13;
  void *v14;
  id v15;
  id v16;
  _BYTE v17[24];

  v1 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  v2 = objc_msgSend(v0, "font");
  objc_msgSend(v1, "setFont:", v2);

  objc_msgSend(v1, "setTextAlignment:", objc_msgSend(v0, "textAlignment"));
  objc_msgSend(v0, "textContainerInset");
  objc_msgSend(v1, "setTextContainerInset:");
  v3 = objc_msgSend(v1, "textContainer");
  v4 = objc_msgSend(v0, "textContainer");
  isa = (Class)objc_msgSend(v4, "exclusionPaths");

  if (!isa)
  {
    v7 = sub_100142B00();
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v7);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v6 = swift_bridgeObjectRelease(v8).n128_u64[0];
  }
  objc_msgSend(v3, "setExclusionPaths:", isa, v6);

  v9 = objc_msgSend(v1, "textContainer");
  v10 = objc_msgSend(v0, "textContainer");
  objc_msgSend(v10, "lineFragmentPadding");
  v12 = v11;

  objc_msgSend(v9, "setLineFragmentPadding:", v12);
  v13 = (void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor];
  swift_beginAccess(v13, v17, 0, 0);
  v14 = *v13;
  if (*v13)
  {
    v15 = *v13;
  }
  else
  {
    v15 = objc_msgSend((id)objc_opt_self(UIColor), "placeholderTextColor");
    v14 = 0;
  }
  v16 = v14;
  objc_msgSend(v1, "setTextColor:", v15);

}

uint64_t PlaceholderTextView.text.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  objc_super v5;

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for PlaceholderTextView();
  v1 = objc_msgSendSuper2(&v5, "text");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t type metadata accessor for PlaceholderTextView()
{
  return objc_opt_self(_TtC17SequoiaTranslator19PlaceholderTextView);
}

id PlaceholderTextView.text.setter(uint64_t a1, uint64_t a2)
{
  char *v2;
  NSString v3;
  void *v4;
  id result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  objc_super v12;

  if (a2)
  {
    v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v12.receiver = v2;
  v12.super_class = (Class)type metadata accessor for PlaceholderTextView();
  objc_msgSendSuper2(&v12, "setText:", v3);

  v4 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  result = objc_msgSend(v2, "text");
  if (result)
  {
    v6 = result;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v9 = v8;

    swift_bridgeObjectRelease();
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    if (v10 || (v11 = 1.0, v2[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] == 1))
      v11 = 0.0;
    return objc_msgSend(v4, "setAlpha:", v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PlaceholderTextView.attributedText.getter()
{
  return sub_100141428((SEL *)&selRef_attributedText);
}

void PlaceholderTextView.attributedText.setter(void *a1)
{
  sub_10014290C((uint64_t)a1);

}

id PlaceholderTextView.textColor.getter()
{
  return sub_100141428((SEL *)&selRef_textColor);
}

void PlaceholderTextView.textColor.setter(void *a1)
{
  sub_1001414E8(a1, (SEL *)&selRef_setTextColor_);
}

id sub_1001413D8(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for PlaceholderTextView();
  return objc_msgSendSuper2(&v5, *a3);
}

id PlaceholderTextView.font.getter()
{
  return sub_100141428((SEL *)&selRef_font);
}

id sub_100141428(SEL *a1)
{
  void *v1;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for PlaceholderTextView();
  return objc_msgSendSuper2(&v4, *a1);
}

void sub_100141470(void *a1, uint64_t a2, void *a3, const char **a4)
{
  const char *v6;
  id v7;
  id v8;
  objc_super v9;

  v9.receiver = a1;
  v9.super_class = (Class)type metadata accessor for PlaceholderTextView();
  v6 = *a4;
  v7 = a3;
  v8 = v9.receiver;
  objc_msgSendSuper2(&v9, v6, v7);
  PlaceholderTextView.updatePlaceholderProperties()();

}

void PlaceholderTextView.font.setter(void *a1)
{
  sub_1001414E8(a1, (SEL *)&selRef_setFont_);
}

void sub_1001414E8(void *a1, SEL *a2)
{
  void *v2;
  objc_super v5;

  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for PlaceholderTextView();
  objc_msgSendSuper2(&v5, *a2, a1);
  PlaceholderTextView.updatePlaceholderProperties()();

}

id PlaceholderTextView.textAlignment.getter()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceholderTextView();
  return objc_msgSendSuper2(&v2, "textAlignment");
}

void PlaceholderTextView.textAlignment.setter(uint64_t a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PlaceholderTextView();
  objc_msgSendSuper2(&v3, "setTextAlignment:", a1);
  PlaceholderTextView.updatePlaceholderProperties()();
}

id PlaceholderTextView.textContainerInset.getter()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceholderTextView();
  return objc_msgSendSuper2(&v2, "textContainerInset");
}

void PlaceholderTextView.textContainerInset.setter(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v9;

  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for PlaceholderTextView();
  objc_msgSendSuper2(&v9, "setTextContainerInset:", a1, a2, a3, a4);
  PlaceholderTextView.updatePlaceholderProperties()();
}

id PlaceholderTextView.intrinsicContentSize.getter()
{
  char *v0;
  id result;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  objc_super v8;

  result = objc_msgSend(v0, "text");
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    *(_QWORD *)&v6 = swift_bridgeObjectRelease().n128_u64[0];
    v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v7 = v3 & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      v8.receiver = v0;
      v8.super_class = (Class)type metadata accessor for PlaceholderTextView();
      return objc_msgSendSuper2(&v8, "intrinsicContentSize");
    }
    else
    {
      return objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView], "intrinsicContentSize", v6);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PlaceholderTextView.alignmentRectInsets.getter()
{
  char *v0;
  id result;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  objc_super v8;

  result = objc_msgSend(v0, "text");
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    *(_QWORD *)&v6 = swift_bridgeObjectRelease().n128_u64[0];
    v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v7 = v3 & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      v8.receiver = v0;
      v8.super_class = (Class)type metadata accessor for PlaceholderTextView();
      return objc_msgSendSuper2(&v8, "alignmentRectInsets");
    }
    else
    {
      return objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView], "alignmentRectInsets", v6);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PlaceholderTextView.forFirstBaselineLayout.getter()
{
  return sub_100141A7C((SEL *)&selRef_viewForFirstBaselineLayout);
}

id PlaceholderTextView.forLastBaselineLayout.getter()
{
  return sub_100141A7C((SEL *)&selRef_viewForLastBaselineLayout);
}

id PlaceholderTextView.firstBaselineAnchor.getter()
{
  return sub_100141A7C((SEL *)&selRef_firstBaselineAnchor);
}

id PlaceholderTextView.lastBaselineAnchor.getter()
{
  return sub_100141A7C((SEL *)&selRef_lastBaselineAnchor);
}

id sub_100141A7C(SEL *a1)
{
  char *v1;
  id result;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  id v10;
  objc_super v11;

  result = objc_msgSend(v1, "text");
  if (result)
  {
    v4 = result;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v7 = v6;

    *(_QWORD *)&v8 = swift_bridgeObjectRelease().n128_u64[0];
    v9 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v9 = v5 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      v11.receiver = v1;
      v11.super_class = (Class)type metadata accessor for PlaceholderTextView();
      v10 = objc_msgSendSuper2(&v11, *a1);
    }
    else
    {
      v10 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView], *a1, v8);
    }
    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id TranslateCalloutDisabledTextView.__allocating_init(frame:textContainer:)(void *a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  id v7;

  v7 = objc_msgSend(objc_allocWithZone(v5), "initWithFrame:textContainer:", a1, a2, a3, a4, a5);

  return v7;
}

char *PlaceholderTextView.init(frame:textContainer:)(void *a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  uint64_t v11;
  id v12;
  char *v13;
  id v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  char *result;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  id v26;
  id v27;
  char *v28;
  id v29;
  objc_super v30;

  v11 = OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView;
  v12 = objc_allocWithZone((Class)UITextView);
  v13 = v5;
  v14 = objc_msgSend(v12, "init");
  objc_msgSend(v14, "setUserInteractionEnabled:", 0);
  objc_msgSend(v14, "setBackgroundColor:", 0);
  objc_msgSend(v14, "setEditable:", 0);
  objc_msgSend(v14, "setSelectable:", 0);
  objc_msgSend(v14, "setAutoresizingMask:", 18);
  *(_QWORD *)&v5[v11] = v14;
  v13[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] = 0;
  v15 = &v13[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor] = 0;

  v30.receiver = v13;
  v30.super_class = (Class)type metadata accessor for PlaceholderTextView();
  v16 = (char *)objc_msgSendSuper2(&v30, "initWithFrame:textContainer:", a1, a2, a3, a4, a5);
  v17 = *(void **)&v16[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  v18 = v16;
  objc_msgSend(v18, "addSubview:", v17);
  result = (char *)objc_msgSend(v18, "text");
  if (result)
  {
    v20 = result;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v23 = v22;

    swift_bridgeObjectRelease();
    v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v24 = v21 & 0xFFFFFFFFFFFFLL;
    if (v24 || (v25 = 1.0, v18[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] == 1))
      v25 = 0.0;
    objc_msgSend(v17, "setAlpha:", v25);
    PlaceholderTextView.updatePlaceholderProperties()();
    v26 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v26, "addObserver:selector:name:object:", v18, "textChangedWithNotification:", UITextViewTextDidChangeNotification, v18);
    v27 = objc_msgSend(objc_allocWithZone((Class)UIScribbleInteraction), "initWithDelegate:", v18);
    v28 = v18;
    v29 = v27;
    objc_msgSend(v28, "addInteraction:", v29);

    return v28;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100141EBC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder + 8));
}

id PlaceholderTextView.__deallocating_deinit()
{
  void *v0;
  id v1;
  objc_super v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:name:object:", v0, UITextViewTextDidChangeNotification, v0);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for PlaceholderTextView();
  return objc_msgSendSuper2(&v3, "dealloc");
}

Swift::Void __swiftcall PlaceholderTextView.layoutSubviews()()
{
  char *v0;
  void *v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceholderTextView();
  objc_msgSendSuper2(&v2, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  objc_msgSend(v0, "bounds");
  objc_msgSend(v1, "setFrame:");
}

id PlaceholderTextView.sizeThatFits(_:)(double a1, double a2)
{
  return sub_1001421A0((SEL *)&selRef_sizeThatFits_, a1, a2);
}

id PlaceholderTextView.systemLayoutSizeFitting(_:)(double a1, double a2)
{
  return sub_1001421A0((SEL *)&selRef_systemLayoutSizeFittingSize_, a1, a2);
}

id sub_1001421A0(SEL *a1, double a2, double a3)
{
  char *v3;
  id result;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  objc_super v13;

  result = objc_msgSend(v3, "text");
  if (result)
  {
    v8 = result;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    swift_bridgeObjectRelease();
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v9 & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      v13.receiver = v3;
      v13.super_class = (Class)type metadata accessor for PlaceholderTextView();
      return objc_msgSendSuper2(&v13, *a1, a2, a3);
    }
    else
    {
      return objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView], *a1, a2, a3);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PlaceholderTextView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(double a1, double a2, float a3, float a4)
{
  return sub_100142340((SEL *)&selRef_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_, a1, a2, a3, a4);
}

id PlaceholderTextView._systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(double a1, double a2, float a3, float a4)
{
  return sub_100142340((SEL *)&selRef__systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_, a1, a2, a3, a4);
}

id sub_100142340(SEL *a1, double a2, double a3, float a4, float a5)
{
  char *v5;
  id result;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  objc_super v21;

  result = objc_msgSend(v5, "text");
  if (result)
  {
    v12 = result;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v15 = v14;

    swift_bridgeObjectRelease();
    v18 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v18 = v13 & 0xFFFFFFFFFFFFLL;
    if (v18)
    {
      v21.receiver = v5;
      v21.super_class = (Class)type metadata accessor for PlaceholderTextView();
      *(float *)&v19 = a4;
      *(float *)&v20 = a5;
      return objc_msgSendSuper2(&v21, *a1, a2, a3, v19, v20);
    }
    else
    {
      *(float *)&v16 = a4;
      *(float *)&v17 = a5;
      return objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView], *a1, a2, a3, v16, v17);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PlaceholderTextView.alignmentRect(forFrame:)(double a1, double a2, double a3, double a4)
{
  return sub_1001424BC((SEL *)&selRef_alignmentRectForFrame_, a1, a2, a3, a4);
}

id PlaceholderTextView.frame(forAlignmentRect:)(double a1, double a2, double a3, double a4)
{
  return sub_1001424BC((SEL *)&selRef_frameForAlignmentRect_, a1, a2, a3, a4);
}

id sub_1001424BC(SEL *a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  id result;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  objc_super v17;

  result = objc_msgSend(v5, "text");
  if (result)
  {
    v12 = result;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v15 = v14;

    swift_bridgeObjectRelease();
    v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v16 = v13 & 0xFFFFFFFFFFFFLL;
    if (v16)
    {
      v17.receiver = v5;
      v17.super_class = (Class)type metadata accessor for PlaceholderTextView();
      return objc_msgSendSuper2(&v17, *a1, a2, a3, a4, a5);
    }
    else
    {
      return objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView], *a1, a2, a3, a4, a5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1001425B8(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, double (*a7)(double, double, double, double))
{
  id v12;
  double v13;

  v12 = a1;
  v13 = a7(a2, a3, a4, a5);

  return v13;
}

Swift::Void __swiftcall PlaceholderTextView.setMarkedText(_:selectedRange:)(Swift::String_optional _, __C::_NSRange selectedRange)
{
  char *v2;
  Swift::Int length;
  Swift::Int location;
  NSString v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  objc_super v14;

  length = selectedRange.length;
  location = selectedRange.location;
  if (_.value._object)
    v5 = String._bridgeToObjectiveC()();
  else
    v5 = 0;
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for PlaceholderTextView();
  objc_msgSendSuper2(&v14, "setMarkedText:selectedRange:", v5, location, length);

  v6 = *(void **)&v2[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  v7 = objc_msgSend(v2, "text");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    swift_bridgeObjectRelease();
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v9 & 0xFFFFFFFFFFFFLL;
    if (v12 || (v13 = 1.0, v2[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] == 1))
      v13 = 0.0;
    objc_msgSend(v6, "setAlpha:", v13);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall PlaceholderTextView.scribbleInteractionWillBeginWriting(_:)(UIScribbleInteraction a1)
{
  PlaceholderTextView.suppressPlaceholder.setter(1);
}

Swift::Void __swiftcall PlaceholderTextView.scribbleInteractionDidFinishWriting(_:)(UIScribbleInteraction a1)
{
  PlaceholderTextView.suppressPlaceholder.setter(0);
}

id sub_10014290C(uint64_t a1)
{
  char *v1;
  void *v3;
  id result;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  objc_super v11;

  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for PlaceholderTextView();
  objc_msgSendSuper2(&v11, "setAttributedText:", a1);
  v3 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView];
  result = objc_msgSend(v1, "text");
  if (result)
  {
    v5 = result;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v8 = v7;

    swift_bridgeObjectRelease();
    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (v9 || (v10 = 1.0, v1[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] == 1))
      v10 = 0.0;
    return objc_msgSend(v3, "setAlpha:", v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _s17SequoiaTranslator19PlaceholderTextViewC5coderACSgSo7NSCoderC_tcfc_0()
{
  _BYTE *v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderTextView;
  v2 = objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
  objc_msgSend(v2, "setUserInteractionEnabled:", 0);
  objc_msgSend(v2, "setBackgroundColor:", 0);
  objc_msgSend(v2, "setEditable:", 0);
  objc_msgSend(v2, "setSelectable:", 0);
  objc_msgSend(v2, "setAutoresizingMask:", 18);
  *(_QWORD *)&v0[v1] = v2;
  v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_suppressPlaceholder] = 0;
  v3 = &v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholder];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator19PlaceholderTextView_placeholderColor] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7070757320746F6ELL, 0xED0000646574726FLL, "SequoiaTranslator/PlaceholderTextView.swift", 43, 2, 151, 0);
  __break(1u);
}

unint64_t sub_100142B00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294DD8;
  if (!qword_100294DD8)
  {
    v1 = objc_opt_self(UIBezierPath);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100294DD8);
  }
  return result;
}

uint64_t destroy for PlayButtonAndRates(_QWORD *a1)
{
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for PlayButtonAndRates(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for PlayButtonAndRates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for PlayButtonAndRates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for PlayButtonAndRates()
{
  return &type metadata for PlayButtonAndRates;
}

uint64_t sub_100142CD0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100215FCC, 1);
}

uint64_t sub_100142CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t *v17;
  __int128 v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_100006DF4(&qword_100294DE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100294DE8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v6 + 1) = 0x4010000000000000;
  v6[16] = 0;
  v11 = sub_100006DF4(&qword_100294DF0);
  sub_100142E98((char *)v2, (uint64_t)&v6[*(int *)(v11 + 44)]);
  sub_10000B074((uint64_t)v6, (uint64_t)v10, &qword_100294DE0);
  *(_WORD *)&v10[*(int *)(v7 + 36)] = 257;
  v12 = sub_10000A020((uint64_t)v6, &qword_100294DE0);
  v13 = static VerticalAlignment.center.getter(v12);
  v14 = *(_QWORD *)(v2 + 16);
  sub_1000110A4(v2 + 24, (uint64_t)&v20, &qword_100294DF8);
  v19 = *(_OWORD *)(v2 + 32);
  v15 = (_OWORD *)swift_allocObject(&unk_10026D788, 64, 7);
  v16 = *(_OWORD *)(v2 + 16);
  v15[1] = *(_OWORD *)v2;
  v15[2] = v16;
  v15[3] = *(_OWORD *)(v2 + 32);
  sub_10000B074((uint64_t)v10, a1, &qword_100294DE8);
  v17 = (uint64_t *)(a1 + *(int *)(sub_100006DF4(&qword_100294E00) + 36));
  *v17 = v13;
  v17[1] = (uint64_t)sub_1001437A8;
  v17[2] = (uint64_t)v15;
  swift_retain(v14);
  sub_100018680(&v20);
  sub_10001B1E0((uint64_t)&v19);
  return sub_10000A020((uint64_t)v10, &qword_100294DE8);
}

uint64_t sub_100142E98@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  _OWORD *v48;
  _OWORD *v49;
  char v50;
  __n128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 v70;
  void *v71;
  id v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  int v134;
  _QWORD v135[3];
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(uint64_t, char);
  _OWORD *v141;
  __int128 v142;
  Swift::String v143;

  v132 = a2;
  v127 = sub_100006DF4(&qword_100294E08);
  v3 = __chkstk_darwin(v127);
  v126 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v129 = (char *)&v113 - v5;
  v128 = sub_100006DF4(&qword_100294E10);
  v6 = __chkstk_darwin(v128);
  v131 = (uint64_t)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v130 = (uint64_t)&v113 - v8;
  v9 = type metadata accessor for DynamicTypeSize(0);
  v124 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v122 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_100294E18);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v123 = sub_100006DF4(&qword_100294E20);
  __chkstk_darwin(v123);
  v16 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_100294E28);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100006DF4(&qword_100294E30);
  v22 = __chkstk_darwin(v21);
  v125 = (uint64_t)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v113 - v24;
  v26 = a1[1];
  v133 = (char *)&v113 - v24;
  v134 = v26;
  if (v26 == 2)
  {
    v27 = 1;
  }
  else
  {
    sub_10002307C(v26);
    v138 = v28;
    v139 = v29;
    v30 = sub_10000B030();
    v31 = Text.init<A>(_:)(&v138, &type metadata for String, v30);
    v120 = v18;
    v32 = v31;
    v118 = v12;
    v34 = v33;
    v36 = v35;
    v121 = v17;
    v38 = v37 & 1;
    v39 = static Font.caption2.getter();
    v114 = v9;
    v40 = v39;
    v42 = Text.font(_:)(v39, v32, v34, v38, v36, v41);
    v115 = v14;
    v43 = v42;
    v119 = v20;
    v45 = v44;
    v116 = v16;
    v47 = v46;
    v117 = v11;
    v49 = v48;
    swift_release(v40);
    v50 = v38;
    v17 = v121;
    sub_10001B9E8(v32, v34, v50);
    v51 = swift_bridgeObjectRelease();
    v138 = v43;
    v139 = v45;
    LOBYTE(v140) = v47 & 1;
    v141 = v49;
    v52 = v124;
    v53 = v122;
    v54 = v114;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v124 + 104))(v122, enum case for DynamicTypeSize.medium(_:), v114, v51);
    v55 = v115;
    View.dynamicTypeSize(_:)(v53, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    sub_10001B9E8(v138, v139, (char)v140);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath(&unk_1001F3068);
    v57 = v118;
    v58 = (uint64_t)v116;
    v59 = v117;
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v116, v55, v117);
    v60 = v58 + *(int *)(v123 + 36);
    *(_QWORD *)v60 = KeyPath;
    *(_QWORD *)(v60 + 8) = 1;
    *(_BYTE *)(v60 + 16) = 0;
    v61 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v55, v59);
    v62 = static Color.accentColor.getter(v61);
    v63 = swift_getKeyPath(&unk_1001F3098);
    v64 = (uint64_t)v119;
    sub_10000B074(v58, (uint64_t)v119, &qword_100294E20);
    v65 = (uint64_t *)(v64 + *(int *)(v17 + 36));
    *v65 = v63;
    v65[1] = v62;
    v18 = v120;
    v25 = v133;
    sub_10000A020(v58, &qword_100294E20);
    sub_1000110A4(v64, (uint64_t)v25, &qword_100294E28);
    v27 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v25, v27, 1, v17);
  v66 = *a1;
  v68 = *((_QWORD *)a1 + 2);
  v124 = *((_QWORD *)a1 + 3);
  v67 = v124;
  v142 = *((_OWORD *)a1 + 2);
  v69 = (_OWORD *)swift_allocObject(&unk_10026D7B0, 64, 7);
  v70 = *((_OWORD *)a1 + 1);
  v69[1] = *(_OWORD *)a1;
  v69[2] = v70;
  v69[3] = *((_OWORD *)a1 + 2);
  v138 = v67;
  LOBYTE(v139) = v66;
  v140 = sub_100143888;
  v141 = v69;
  v71 = (void *)objc_opt_self(NSBundle);
  swift_retain_n(v67, 2);
  swift_retain(v68);
  sub_10001B1E0((uint64_t)&v142);
  v72 = objc_msgSend(v71, "mainBundle");
  v143._object = (void *)0xE000000000000000;
  v73._object = (void *)0x80000001001F8E40;
  v73._countAndFlagsBits = 0xD00000000000001ELL;
  v74._countAndFlagsBits = 0;
  v74._object = (void *)0xE000000000000000;
  v143._countAndFlagsBits = 0;
  v75 = NSLocalizedString(_:tableName:bundle:value:comment:)(v73, (Swift::String_optional)0, (NSBundle)v72, v74, v143);

  v76 = sub_100006DF4(&qword_10028AA70);
  v77 = swift_allocObject(v76, 72, 7);
  v123 = xmmword_1001E64F0;
  *(_OWORD *)(v77 + 16) = xmmword_1001E64F0;
  sub_10002307C(v134);
  v79 = v78;
  v81 = v80;
  *(_QWORD *)(v77 + 56) = &type metadata for String;
  v82 = sub_10001244C();
  *(_QWORD *)(v77 + 64) = v82;
  *(_QWORD *)(v77 + 32) = v79;
  *(_QWORD *)(v77 + 40) = v81;
  v83 = String.init(format:_:)(v75._countAndFlagsBits, v75._object, v77);
  v85 = v84;
  swift_bridgeObjectRelease();
  v136 = v83;
  v137 = v85;
  v86 = sub_10000B030();
  v87 = Text.init<A>(_:)(&v136, &type metadata for String, v86);
  v89 = v88;
  v91 = v90;
  v93 = v92 & 1;
  v94 = sub_1001438AC();
  v95 = (uint64_t)v126;
  View.accessibility(label:)(v87, v89, v93, v91, &type metadata for PlayButtonWithRatesMenu, v94);
  sub_10001B9E8(v87, v89, v93);
  swift_release(v69);
  swift_release(v124);
  swift_bridgeObjectRelease();
  v96 = swift_allocObject(v76, 72, 7);
  *(_OWORD *)(v96 + 16) = v123;
  sub_10002307C(v134);
  *(_QWORD *)(v96 + 56) = &type metadata for String;
  *(_QWORD *)(v96 + 64) = v82;
  *(_QWORD *)(v96 + 32) = v97;
  *(_QWORD *)(v96 + 40) = v98;
  v138 = String.init(format:_:)(0x2074612079616C50, 0xEA00000000004025, v96);
  v139 = v99;
  v136 = 32;
  v137 = 0xE100000000000000;
  v135[0] = 95;
  v135[1] = 0xE100000000000000;
  v100 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v136, v135, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v86, v86, v86);
  v102 = v101;
  swift_bridgeObjectRelease();
  v103 = (uint64_t)v129;
  ModifiedContent<>.accessibilityIdentifier(_:)(v100, v102, v127);
  swift_bridgeObjectRelease();
  sub_10000A020(v95, &qword_100294E08);
  if (qword_10028A3C8 != -1)
    swift_once(&qword_10028A3C8, sub_100066350);
  v104 = qword_1002AA138;
  v105 = v131;
  sub_10000B074(v103, v131, &qword_100294E08);
  v106 = (uint64_t *)(v105 + *(int *)(v128 + 36));
  *v106 = v104;
  v106[1] = (uint64_t)sub_100066328;
  v106[2] = 0;
  sub_10000A020(v103, &qword_100294E08);
  v107 = v130;
  sub_1000110A4(v105, v130, &qword_100294E10);
  v108 = (uint64_t)v133;
  v109 = v125;
  sub_10000B074((uint64_t)v133, v125, &qword_100294E30);
  sub_10000B074(v107, v105, &qword_100294E10);
  v110 = v132;
  sub_10000B074(v109, v132, &qword_100294E30);
  v111 = sub_100006DF4(&qword_100294E40);
  sub_10000B074(v105, v110 + *(int *)(v111 + 48), &qword_100294E10);
  sub_10000A020(v107, &qword_100294E10);
  sub_10000A020(v108, &qword_100294E30);
  sub_10000A020(v105, &qword_100294E10);
  return sub_10000A020(v109, &qword_100294E30);
}

uint64_t sub_10014376C@<X0>(uint64_t a1@<X8>)
{
  return sub_100142CE0(a1);
}

double sub_1001437A8()
{
  double v1;

  sub_100006DF4(&qword_10028B260);
  State.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_1001437EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10014381C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100143854()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100143888(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 24))(a1, a2 & 1);
}

unint64_t sub_1001438AC()
{
  unint64_t result;

  result = qword_100294E38;
  if (!qword_100294E38)
  {
    result = swift_getWitnessTable(&unk_1001F3198, &type metadata for PlayButtonWithRatesMenu);
    atomic_store(result, (unint64_t *)&qword_100294E38);
  }
  return result;
}

unint64_t sub_1001438F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294E48;
  if (!qword_100294E48)
  {
    v1 = sub_1000070BC(&qword_100294E00);
    sub_100143960();
    sub_100048EA0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100294E48);
  }
  return result;
}

unint64_t sub_100143960()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294E50;
  if (!qword_100294E50)
  {
    v1 = sub_1000070BC(&qword_100294DE8);
    sub_1001439CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100294E50);
  }
  return result;
}

unint64_t sub_1001439CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294E58;
  if (!qword_100294E58)
  {
    v1 = sub_1000070BC(&qword_100294DE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100294E58);
  }
  return result;
}

Class sub_100143A18(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UIButton v14;
  uint64_t v15;
  __n128 v16;
  UIMenuElementSize v17;
  Swift::String v18;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::OpaquePointer v24;
  _BYTE v25[4];
  int v26;
  uint64_t v27;
  UIAction_optional v28;
  UIImage_optional v29;

  v27 = a4;
  v26 = a3;
  v8 = sub_100006DF4(&qword_100294F20);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  sub_10000A05C(0, &qword_100290B58, UIButton_ptr);
  sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(&v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v8);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_10026D8A8, v12 + v10, v11 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(v13 + v12, &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  v28.value.super.super.isa = (Class)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1001445CC, v13);
  v14.super.super.super.super.isa = UIButton.init(type:primaryAction:)(UIButtonTypeCustom, v28).super.super.super.super.isa;
  -[objc_class setShowsMenuAsPrimaryAction:](v14.super.super.super.super.isa, "setShowsMenuAsPrimaryAction:", 0);
  swift_retain(a2);
  swift_retain(a5);
  v15 = (uint64_t)sub_1001440AC((uint64_t)&off_100262698, a2, v26, v27, a5);
  swift_release(a5);
  swift_release(a2);
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v21 = v15;
    else
      v21 = v15 & 0xFFFFFFFFFFFFFF8;
    v22 = sub_10000A05C(0, &qword_10028BDF8, UIMenuElement_ptr);
    v17 = _bridgeCocoaArray<A>(_:)(v21, v22, v23);
  }
  else
  {
    v16 = swift_bridgeObjectRetain(v15);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v16);
    sub_10000A05C(0, &qword_10028BDF8, UIMenuElement_ptr);
    v17 = v15;
  }
  swift_bridgeObjectRelease();
  sub_10000A05C(0, &qword_10028BE00, UIMenu_ptr);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v29.value.super.isa = 0;
  v29.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v18, (Swift::String_optional)0, v29, 0, 0xFFFFFFFFFFFFFFFFLL, v17, v24).super.super.isa;
  -[objc_class setMenu:](v14.super.super.super.super.isa, "setMenu:", isa);

  return v14.super.super.super.super.isa;
}

double sub_100143CB4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, uint64_t, __n128);
  __n128 v8;
  double result;
  uint64_t v10;

  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000F66C(v0, (uint64_t)qword_1002AA4A0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "UIKit play button tap", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_100006DF4(&qword_100294F20);
  UIViewRepresentableContext.coordinator.getter(&v10);
  v5 = v10;
  v7 = *(void (**)(_QWORD, uint64_t, __n128))(v10 + 16);
  v6 = *(_QWORD *)(v10 + 24);
  swift_retain(v6);
  v8 = swift_release(v5);
  v7(0, 1, v8);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_100143DD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for PlayButtonWithRatesMenu.Coordinator()
{
  return objc_opt_self(_TtCV17SequoiaTranslator23PlayButtonWithRatesMenu11Coordinator);
}

uint64_t destroy for PlayButtonWithRatesMenu(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for PlayButtonWithRatesMenu(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for PlayButtonWithRatesMenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t *assignWithTake for PlayButtonWithRatesMenu(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for PlayButtonWithRatesMenu()
{
  return &type metadata for PlayButtonWithRatesMenu;
}

Class sub_100143F44(uint64_t a1)
{
  uint64_t v1;

  return sub_100143A18(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100143F54(void *a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10014440C(a1, a2, *v2);
}

double sub_100143F60@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = type metadata accessor for PlayButtonWithRatesMenu.Coordinator();
  v6 = swift_allocObject(v5, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *a1 = v6;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_100143FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100144068();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100143FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100144068();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100144044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100144068();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100144068()
{
  unint64_t result;

  result = qword_100294F18;
  if (!qword_100294F18)
  {
    result = swift_getWitnessTable(&unk_1001F3108, &type metadata for PlayButtonWithRatesMenu);
    atomic_store(result, (unint64_t *)&qword_100294F18);
  }
  return result;
}

_QWORD *sub_1001440AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD *result;
  char *v12;
  char v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  Swift::String v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  id v43;
  char v44;
  char *v45;
  char v46;
  _QWORD v47[2];
  _QWORD *v48;
  Swift::String v49;

  v6 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v6)
  {
    v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v6);
    v12 = (char *)(a1 + 32);
    v43 = (id)objc_opt_self(NSBundle);
    sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
    v42 = (id)objc_opt_self(UIImage);
    v41 = a3 & 1;
    do
    {
      v13 = *v12;
      v44 = *v12;
      v45 = v12 + 1;
      v14 = objc_msgSend(v43, "mainBundle");
      v49._countAndFlagsBits = 0xD00000000000001FLL;
      v15._object = (void *)0x80000001001F8F00;
      v49._object = (void *)0x80000001001F8F20;
      v15._countAndFlagsBits = 0xD000000000000013;
      v16._countAndFlagsBits = 0;
      v16._object = (void *)0xE000000000000000;
      v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v49);

      v18 = sub_100006DF4(&qword_10028AA70);
      v19 = swift_allocObject(v18, 72, 7);
      *(_OWORD *)(v19 + 16) = xmmword_1001E64F0;
      sub_10002307C(v13);
      v20 = v6;
      v21 = a2;
      v22 = a4;
      v23 = a5;
      v25 = v24;
      v27 = v26;
      *(_QWORD *)(v19 + 56) = &type metadata for String;
      *(_QWORD *)(v19 + 64) = sub_10001244C();
      *(_QWORD *)(v19 + 32) = v25;
      *(_QWORD *)(v19 + 40) = v27;
      a5 = v23;
      a4 = v22;
      a2 = v21;
      v28 = String.init(format:_:)(v17._countAndFlagsBits, v17._object, v19);
      v30 = v29;
      swift_bridgeObjectRelease();
      v31 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v42, "systemImageNamed:", v31);

      v33 = swift_allocObject(&unk_10026D8D0, 49, 7);
      *(_QWORD *)(v33 + 16) = v21;
      *(_BYTE *)(v33 + 24) = v41;
      *(_QWORD *)(v33 + 32) = a4;
      *(_QWORD *)(v33 + 40) = a5;
      *(_BYTE *)(v33 + 48) = v44;
      swift_retain(v21);
      swift_retain(a5);
      v34 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v28, v30, 0, 0, v32, 0, 0, 0, 0, 0, 0, sub_100144638, v33);
      v47[0] = 0;
      v47[1] = 0xE000000000000000;
      v35 = v34;
      v36._countAndFlagsBits = 0x6574615279616C70;
      v36._object = (void *)0xE90000000000005FLL;
      String.append(_:)(v36);
      v46 = v44;
      _print_unlocked<A, B>(_:_:)(&v46, v47, &type metadata for TTSPlaybackRate, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v37 = String._bridgeToObjectiveC()();
      objc_msgSend(v35, "setAccessibilityIdentifier:", v37, swift_bridgeObjectRelease().n128_f64[0]);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
      v39 = v48[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v39);
      v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v35);
      specialized ContiguousArray._endMutation()(v40);
      v12 = v45;
      v6 = v20 - 1;
    }
    while (v20 != 1);
    return v48;
  }
  return result;
}

void sub_10014440C(void *a1, uint64_t a2, uint64_t a3)
{
  NSString v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", 26.0);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:withConfiguration:", v5, v9);

  objc_msgSend(a1, "setImage:forState:", v6, 0);
  if (a3)
  {
    sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
    v7 = swift_retain_n(a3, 2);
    v8 = (void *)UIColor.init(_:)(v7);
    objc_msgSend(a1, "setTintColor:", v8);
    swift_release(a3);

  }
}

uint64_t sub_100144568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100006DF4(&qword_100294F20);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1001445CC()
{
  sub_100006DF4(&qword_100294F20);
  return sub_100143CB4();
}

uint64_t sub_10014460C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100144638()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 32))(qword_1001F31F0[*(char *)(v0 + 48)], 0);
}

id sub_100144758()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PortraitOnlyAlertController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PortraitOnlyAlertController()
{
  return objc_opt_self(_TtC17SequoiaTranslator27PortraitOnlyAlertController);
}

void sub_1001448D4(void *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  int v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  Class v34;

  v2 = v1;
  v4 = OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_sizingConstraints;
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_sizingConstraints];
  sub_100025254();
  swift_bridgeObjectRetain(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "removeConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v7 = v2[OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_readableWidthEnabled];
  v8 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v9 = swift_allocObject(v8, 64, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001E7590;
  v10 = objc_msgSend(a1, "topAnchor");
  v11 = objc_msgSend(v2, "topAnchor");
  v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

  *(_QWORD *)(v9 + 32) = v12;
  if (v7 == 1)
  {
    v13 = objc_msgSend(a1, "bottomAnchor");
    v14 = objc_msgSend(v2, "bottomAnchor");
    v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

    *(_QWORD *)(v9 + 40) = v15;
    v16 = objc_msgSend(a1, "centerXAnchor");
    v17 = objc_msgSend(v2, "centerXAnchor");
    v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

    *(_QWORD *)(v9 + 48) = v18;
    v19 = objc_msgSend(a1, "widthAnchor");
    v20 = objc_msgSend(v2, "readableContentGuide");
    v21 = objc_msgSend(v20, "widthAnchor");

    v22 = objc_msgSend(v19, "constraintEqualToAnchor:multiplier:", v21, 1.0);
    *(_QWORD *)(v9 + 56) = v22;
  }
  else
  {
    v24 = objc_msgSend(a1, "leadingAnchor");
    v25 = objc_msgSend(v2, "leadingAnchor");
    v26 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

    *(_QWORD *)(v9 + 40) = v26;
    v27 = objc_msgSend(a1, "trailingAnchor");
    v28 = objc_msgSend(v2, "trailingAnchor");
    v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

    *(_QWORD *)(v9 + 48) = v29;
    v30 = objc_msgSend(a1, "bottomAnchor");
    v31 = objc_msgSend(v2, "bottomAnchor");
    v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

    *(_QWORD *)(v9 + 56) = v32;
  }
  specialized Array._endMutation()(v23);
  *(_QWORD *)&v2[v4] = v9;
  swift_bridgeObjectRelease();
  v33 = (void *)objc_opt_self(NSLayoutConstraint);
  swift_bridgeObjectRetain(*(_QWORD *)&v2[v4]);
  v34 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v33, "activateConstraints:", v34, swift_bridgeObjectRelease().n128_f64[0]);

}

id sub_100144CB8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReadableWidthContainer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ReadableWidthContainer()
{
  return objc_opt_self(_TtC17SequoiaTranslator22ReadableWidthContainer);
}

double sub_100144D40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  double result;
  uint64_t v17;

  v7 = sub_100006DF4(&qword_100294F90);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_10026D9A8, v13 + 8, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  *(_QWORD *)(v14 + v13) = a4;
  v15 = a4;
  sub_100145D70(a3, (uint64_t)sub_1001451D4, v14);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_100144E44(uint64_t a1, void *a2, float a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = sub_100006DF4(&qword_100294F98);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v13 = type metadata accessor for Logger(0);
    sub_10000F66C(v13, (uint64_t)qword_1002AA440);
    v14 = swift_errorRetain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v17 = 138412290;
      v19 = _convertErrorToNSError(_:)(a1);
      v31 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4);
      *v18 = v19;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Recording helper error: %@", v17, 0xCu);
      v20 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v18, 1, v20);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
    }

    v31 = a1;
  }
  else
  {
    if (a2)
    {
      v21 = a2;
      objc_msgSend(a5, "appendAudioPCMBuffer:", v21);
      *(float *)&v31 = a3;
      v22 = sub_100006DF4(&qword_100294F90);
      AsyncThrowingStream.Continuation.yield(_:)(&v31, v22);

      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10000F66C(v25, (uint64_t)qword_1002AA440);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Ending listening.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v31 = 0;
  }
  v24 = sub_100006DF4(&qword_100294F90);
  return AsyncThrowingStream.Continuation.finish(throwing:)(&v31, v24);
}

uint64_t sub_10014515C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100006DF4(&qword_100294F90);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1001451D4(uint64_t a1, void *a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(sub_100006DF4(&qword_100294F90) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_100144E44(a1, a2, a3, v3 + v8, *(void **)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100145248(char *a1, char *a2)
{
  return sub_1001D5DA0(*a1, *a2);
}

Swift::Int sub_100145254()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 1886352499;
  else
    v2 = 0x7472617473;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001452C8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 1886352499;
  else
    v2 = 0x7472617473;
  if (*v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100145318(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 1886352499;
  else
    v3 = 0x7472617473;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100145388@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002626C0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1001453E4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1886352499;
  if (!*v1)
    v2 = 0x7472617473;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100145418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t, __n128);
  void (*v26)(char *, char *, uint64_t);
  NSURL *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t result;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __n128 v53;
  void (*v54)(char *, uint64_t, __n128);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  char *v72;
  void *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;

  v0 = sub_100006DF4(&qword_10028BB80);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)&v71 - v4;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v71 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v71 - v15;
  __chkstk_darwin(v14);
  v77 = (char *)&v71 - v17;
  v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "stringForKey:", v19);

  v75 = v10;
  if (v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

  }
  else
  {
    v23 = 0x80000001001FF610;
    v21 = 0xD00000000000004BLL;
  }
  URL.init(string:)(v21, v23);
  v24 = swift_bridgeObjectRelease();
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48);
  if (v25(v5, 1, v6, v24) == 1)
  {

    sub_10000A020((uint64_t)v5, &qword_10028BB80);
    return 0;
  }
  v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v26(v77, v5, v6);
  URL._bridgeToObjectiveC()(v27);
  v29 = v28;
  v81 = 0;
  v30 = objc_msgSend(v78, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v28, 0, 0, &v81);

  v31 = v81;
  if (!v30)
  {
    v38 = v81;
    v39 = _convertNSErrorToError(_:)(v31);

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v77, v6);
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v62 = type metadata accessor for Logger(0);
    sub_10000F66C(v62, (uint64_t)qword_1002AA440);
    swift_errorRetain(v39);
    v63 = swift_errorRetain(v39);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v66 = 138412290;
      v68 = (void *)_convertErrorToNSError(_:)(v39);
      v81 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v66 + 4);
      *v67 = v68;
      swift_errorRelease(v39);
      swift_errorRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed to get next audio file: %@", v66, 0xCu);
      v69 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v67, 1, v69);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);

      swift_errorRelease(v39);
    }
    else
    {

      swift_errorRelease(v39);
      swift_errorRelease(v39);
      swift_errorRelease(v39);

    }
    return 0;
  }
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v6);
  v33 = v31;

  v34 = v76;
  v35 = *(_QWORD *)(v32 + 16);
  if (v76[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_randomFile] != 1)
  {
    if (!v35)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v40 = *(_QWORD *)&v76[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_nextAudioFileIndex] % (uint64_t)v35;
    if (v40 < 0)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }
    v41 = v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v16, v32+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v40, v6);
    swift_bridgeObjectRelease();
LABEL_18:
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v44 = type metadata accessor for Logger(0);
    sub_10000F66C(v44, (uint64_t)qword_1002AA440);
    v45 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v45(v13, v41, v6);
    v46 = v34;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.info.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v74 = v45;
      v50 = v49;
      v73 = (void *)swift_slowAlloc(32, -1);
      v81 = v73;
      *(_DWORD *)v50 = 134349314;
      v72 = v13;
      v79 = *(_QWORD *)&v46[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_nextAudioFileIndex];
      v76 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v50 + 4);

      *(_WORD *)(v50 + 12) = 2082;
      v51 = URL.path.getter();
      v79 = sub_1001A7FE4(v51, v52, (uint64_t *)&v81);
      v41 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v50 + 14);
      v53 = swift_bridgeObjectRelease();
      v54 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
      v54(v72, v6, v53);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "next audio file index: %{public}ld; audio file to play: %{public}s",
        (uint8_t *)v50,
        0x16u);
      v55 = v73;
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      v56 = v50;
      v45 = v74;
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {

      v54 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
      ((void (*)(char *, uint64_t))v54)(v13, v6);
    }

    v57 = *(_QWORD *)&v46[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_nextAudioFileIndex];
    v58 = __OFADD__(v57, 1);
    v59 = v57 + 1;
    if (!v58)
    {
      *(_QWORD *)&v46[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_nextAudioFileIndex] = v59;
      v60 = (uint64_t)v75;
      v45(v75, v41, v6);
      v61 = objc_allocWithZone((Class)AVAudioFile);
      v70 = sub_100148ADC(v60);

      ((void (*)(char *, uint64_t))v54)(v41, v6);
      ((void (*)(char *, uint64_t))v54)(v77, v6);
      return (uint64_t)v70;
    }
    __break(1u);
    goto LABEL_33;
  }
  if (v35)
  {
    v36 = sub_100148D28(*(_QWORD *)(v32 + 16));
    if (v36 >= v35)
      goto LABEL_35;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v3, v32+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v36, v6);
    v37 = 0;
  }
  else
  {
    v37 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, v37, 1, v6);
  v42 = swift_bridgeObjectRelease();
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v25)(v3, 1, v6, v42);
  if ((_DWORD)result != 1)
  {
    v41 = v16;
    v26(v16, v3, v6);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

const float **sub_100145C1C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  const float **result;
  const float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  v2 = v1;
  result = (const float **)objc_msgSend(a1, "floatChannelData");
  if (result)
  {
    v5 = *result;
    HIDWORD(v13) = 0;
    vDSP_maxv(v5, 1, (float *)&v13 + 1, objc_msgSend(a1, "frameLength"));
    v6 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_averagePowerChannel0;
    v7 = *(float *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_averagePowerChannel0) * 0.7;
    if (*((float *)&v13 + 1) == 0.0)
      v8 = -30.0;
    else
      v8 = (float)(log10f(*((float *)&v13 + 1)) * 20.0) * 0.3;
    v9 = v7 + v8;
    *(float *)(v2 + v6) = v9;
    v12 = (float)(v9 + 60.0) / 50.0;
    v11 = 0x3F80000000000000;
    v10 = sub_1000B3898();
    result = (const float **)BinaryFloatingPoint.clip(to:)(&v13, &v11, &type metadata for Float, v10);
    *(_DWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_normalizedPowerChannel0) = v13;
  }
  return result;
}

double sub_100145D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v4 = v3;
  ObjectType = swift_getObjectType(v4);
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordingQueue];
  v16 = (_QWORD *)swift_allocObject(&unk_10026DC00, 56, 7);
  v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = ObjectType;
  aBlock[4] = sub_100149ACC;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026DC18;
  v17 = _Block_copy(aBlock);
  v18 = v4;
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100006DF4(&qword_10028AC30);
  v22 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  return result;
}

void sub_100145F84(char *a1, char a2, void (*a3)(uint64_t, _QWORD, float), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  unsigned int v25;
  void **v26;
  void **v27;
  char v28;
  void *v29;
  unsigned int v30;
  void *v31;
  void **v32;
  void *v33;
  id v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void ***v41;
  void **v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, float);
  id v45;
  void **v46;
  id v47;
  id v48;
  id v49;
  NSString v50;
  unsigned int v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  char **v72;
  id v73;
  id v74;
  double v75;
  id v76;
  NSString v77;
  unsigned int v78;
  id v79;
  NSString v80;
  id v81;
  uint64_t v82;
  uint64_t (*v83)(char *, void ***, uint64_t);
  uint64_t (*v84)(char *, void ***, uint64_t);
  NSObject *v85;
  os_log_type_t v86;
  id v87;
  uint8_t *v88;
  uint8_t *v89;
  unint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  id v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  id v97;
  NSObject *v98;
  NSString v99;
  unsigned __int8 v100;
  id v101;
  NSString v102;
  unsigned int v103;
  void **v104;
  void **v105;
  id v106;
  id v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  Swift::String v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  void ***v116;
  uint64_t v117;
  void ***v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  uint64_t v124;
  unint64_t v125;
  __n128 v126;
  void (*v127)(char *, uint64_t, __n128);
  void **v128;
  uint8_t *v129;
  uint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  id v134;
  id v135;
  void *v136;
  void **v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  void **v143;
  void ***v144;
  uint64_t v145;
  _QWORD *v146;
  void (*v147)(uint64_t, _QWORD, float);
  uint64_t v148;
  void *v149;
  _QWORD *v150;
  id v151;
  char *v152;
  double v153;
  id v154;
  unsigned int v155;
  void **v156;
  void **v157;
  id v158;
  NSString v159;
  unsigned int v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  void ***v167;
  void **v168;
  uint64_t v169;
  void ***v170;
  unint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  uint8_t *v174;
  void **v175;
  NSObject *v176;
  uint64_t (*v177)(char *, void ***, uint64_t);
  uint64_t v178;
  id v179;
  char *v180;
  uint64_t v181;
  id v182;
  id v183;
  id v184;
  uint64_t v185;
  char *v186;
  void ***v187;
  uint64_t v188;
  void (*v189)(uint64_t, _QWORD, float);
  uint64_t v190;
  uint64_t v191;
  void **aBlock;
  uint64_t v193;
  void *v194;
  ValueMetadata *v195;
  uint64_t (*v196)(_QWORD);
  _QWORD *v197;

  v188 = a4;
  v189 = a3;
  v6 = sub_100006DF4(&qword_10028BB80);
  __chkstk_darwin(v6);
  v8 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v186 = (char *)&v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v174 - v14;
  __chkstk_darwin(v13);
  v187 = (void ***)((char *)&v174 - v16);
  v17 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioEngine;
  v18 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioEngine];
  if (v18 && objc_msgSend(v18, "isRunning"))
    sub_10014778C();
  v185 = v10;
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000F66C(v19, (uint64_t)qword_1002AA440);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Configure audio session (recording)", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = objc_msgSend((id)objc_opt_self(AVAudioSession), "sharedInstance");
  aBlock = 0;
  v25 = objc_msgSend(v24, "setCategory:withOptions:error:", AVAudioSessionCategoryPlayAndRecord, 12, &aBlock);
  v26 = aBlock;
  if (!v25)
    goto LABEL_16;
  v27 = aBlock;
  sub_10009C8E8(v24, a2);
  v195 = &type metadata for TranslateFeatures;
  v196 = (uint64_t (*)(_QWORD))sub_100009BC4();
  LOBYTE(aBlock) = 9;
  v28 = isFeatureEnabled(_:)(&aBlock);
  sub_100009C08(&aBlock);
  if ((v28 & 1) != 0)
  {
    v29 = *(void **)&a1[v17];
    if (!v29 || (objc_msgSend(v29, "isRunning") & 1) == 0)
      sub_100148E68(0, 1);
  }
  aBlock = 0;
  v30 = objc_msgSend(v24, "setActive:withOptions:error:", 1, 0, &aBlock);
  v26 = aBlock;
  if (!v30)
  {
LABEL_16:
    v35 = v26;
    v36 = _convertNSErrorToError(_:)(v26);

    swift_willThrow();
    v37 = swift_errorRetain(v36);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v40 = 138412290;
      v42 = (void **)_convertErrorToNSError(_:)(v36);
      aBlock = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v193, v40 + 4);
      *v41 = v42;
      swift_errorRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to change audio category: %@", v40, 0xCu);
      v43 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v41, 1, v43);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_errorRelease(v36);
    }
    v44 = v189;

    swift_errorRetain(v36);
    v44(v36, 0, 0.0);
    swift_errorRelease(v36);
    swift_errorRelease(v36);

    return;
  }
  v31 = *(void **)&a1[v17];
  v181 = v9;
  if (v31)
  {
    v32 = aBlock;
    v33 = v31;
    v34 = v31;
  }
  else
  {
    v45 = objc_allocWithZone((Class)AVAudioEngine);
    v46 = v26;
    v34 = objc_msgSend(v45, "init");
    v33 = 0;
    v31 = *(void **)&a1[v17];
  }
  *(_QWORD *)&a1[v17] = v34;
  v47 = v33;
  v48 = v34;

  v184 = (id)objc_opt_self(NSUserDefaults);
  v49 = objc_msgSend(v184, "standardUserDefaults");
  v180 = "ate.conversation";
  v50 = String._bridgeToObjectiveC()();
  v51 = objc_msgSend(v49, "BOOLForKey:", v50);

  if (v51)
  {
    v52 = sub_100145418();
    v53 = v48;
    if (v52)
    {
      v54 = (void *)v52;
      v182 = v48;
      v55 = objc_msgSend(objc_allocWithZone((Class)AVAudioPlayerNode), "init");
      v56 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFilePlayer;
      v57 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFilePlayer];
      *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFilePlayer] = v55;

      v58 = objc_msgSend(v54, "processingFormat");
      v59 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFormat;
      v60 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFormat];
      *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFormat] = v58;

      v61 = *(void **)&a1[v56];
      if (v61)
      {
        v62 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode];
        *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode] = v61;
        v63 = v61;

        v53 = v182;
        v183 = objc_msgSend(v182, "mainMixerNode");
        objc_msgSend(v53, "attachNode:", v63);
        if (!*(_QWORD *)&a1[v59])
        {
          __break(1u);
          return;
        }
        objc_msgSend(v53, "connect:to:format:", v63, v183);
        objc_msgSend(v53, "prepare");
        v196 = nullsub_1;
        v197 = 0;
        aBlock = _NSConcreteStackBlock;
        v193 = 1107296256;
        v194 = sub_100075908;
        v195 = (ValueMetadata *)&unk_10026DC90;
        v64 = _Block_copy(&aBlock);
        objc_msgSend(v63, "scheduleFile:atTime:completionHandler:", v54, 0, v64);

        _Block_release(v64);
      }
      else
      {

        v53 = v182;
      }
    }
  }
  else
  {
    v65 = objc_msgSend(v48, "inputNode");
    v66 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode];
    *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode] = v65;

    objc_msgSend(v48, "reset");
    objc_msgSend(v48, "prepare");
    v53 = v48;
  }
  v67 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode];
  if (!v67)
  {
    v94 = sub_100149ADC();
    v95 = swift_allocError(&type metadata for RecordingHelper.RecordingError, v94, 0, 0);
    *v96 = 0;
    v189(v95, 0, 0.0);
    swift_errorRelease(v95);

    return;
  }
  v68 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFilePlayer;
  v69 = *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFilePlayer];
  v70 = v67;
  v71 = v70;
  v72 = &selRef_inputFormatForBus_;
  if (v69)
    v72 = &selRef_outputFormatForBus_;
  v73 = objc_msgSend(v70, *v72, 0);
  v74 = objc_msgSend(v73, "channelCount");
  v183 = v73;
  if (!(_DWORD)v74 || (v74 = objc_msgSend(v73, "sampleRate"), v75 <= 0.0))
  {
    v85 = Logger.logObject.getter(v74);
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = v53;
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Got an incorrect format from inputNode.outputFormat(forBus: 0)", v88, 2u);
      v89 = v88;
      v53 = v87;
      swift_slowDealloc(v89, -1, -1);
    }

    v90 = sub_100149ADC();
    v91 = swift_allocError(&type metadata for RecordingHelper.RecordingError, v90, 0, 0);
    *v92 = 1;
    v189(v91, 0, 0.0);
    swift_errorRelease(v91);

    v93 = v183;
    goto LABEL_38;
  }
  v178 = v68;
  v179 = v71;
  v182 = v53;
  v76 = objc_msgSend(v184, "standardUserDefaults");
  v77 = String._bridgeToObjectiveC()();
  v78 = objc_msgSend(v76, "BOOLForKey:", v77);

  if (v78)
  {
    v79 = objc_msgSend(v184, "standardUserDefaults");
    v80 = String._bridgeToObjectiveC()();
    v81 = objc_msgSend(v79, "stringForKey:", v80);

    if (v81)
    {
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

    }
    else
    {
      if (qword_10028A4B8 != -1)
        swift_once(&qword_10028A4B8, sub_10015DB9C);
      v82 = qword_1002AA508;
      v84 = (uint64_t (*)(char *, void ***, uint64_t))unk_1002AA510;
      swift_bridgeObjectRetain(unk_1002AA510);
    }
    v177 = v84;
    v176 = objc_opt_self(NSFileManager);
    v97 = -[NSObject defaultManager](v176, "defaultManager");
    v98 = v82;
    v99 = String._bridgeToObjectiveC()();
    v100 = objc_msgSend(v97, "fileExistsAtPath:", v99);

    if ((v100 & 1) != 0)
      goto LABEL_47;
    v101 = -[NSObject defaultManager](v176, "defaultManager");
    v176 = v98;
    v102 = String._bridgeToObjectiveC()();
    aBlock = 0;
    v103 = objc_msgSend(v101, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v102, 1, 0, &aBlock);

    v104 = aBlock;
    if (v103)
    {
      v105 = aBlock;
      v98 = v176;
LABEL_47:
      v106 = objc_msgSend(objc_allocWithZone((Class)NSUUID), "init");
      v107 = objc_msgSend(v106, "UUIDString");

      v108 = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      v110 = v109;

      aBlock = v108;
      v193 = v110;
      v111._countAndFlagsBits = 1717658414;
      v111._object = (void *)0xE400000000000000;
      String.append(_:)(v111);
      v112 = v193;
      v176 = aBlock;
      URL.init(fileURLWithPath:)(v98, v177);
      v113 = swift_bridgeObjectRelease();
      v114 = v181;
      v115 = v185;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v185 + 56))(v8, 0, 1, v181, v113);
      v116 = v187;
      URL.init(fileURLWithPath:isDirectory:relativeTo:)(v176, v112, 0, v8);
      swift_bridgeObjectRelease();
      v117 = (uint64_t)v8;
      v118 = v116;
      v119 = v115;
      sub_10000A020(v117, &qword_10028BB80);
      v177 = *(uint64_t (**)(char *, void ***, uint64_t))(v115 + 16);
      v120 = v177(v15, v118, v114);
      v121 = Logger.logObject.getter(v120);
      v122 = static os_log_type_t.info.getter(v121);
      if (os_log_type_enabled(v121, v122))
      {
        v176 = v121;
        v123 = (uint8_t *)swift_slowAlloc(12, -1);
        v175 = (void **)swift_slowAlloc(32, -1);
        aBlock = v175;
        *(_DWORD *)v123 = 136446210;
        v174 = v123 + 4;
        v124 = URL.description.getter();
        v190 = sub_1001A7FE4(v124, v125, (uint64_t *)&aBlock);
        v114 = v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v174);
        v126 = swift_bridgeObjectRelease();
        v127 = *(void (**)(char *, uint64_t, __n128))(v119 + 8);
        v127(v15, v114, v126);
        v121 = v176;
        _os_log_impl((void *)&_mh_execute_header, v176, v122, "created audio file: %{public}s", v123, 0xCu);
        v128 = v175;
        swift_arrayDestroy(v175, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        v129 = v123;
        v118 = v187;
        swift_slowDealloc(v129, -1, -1);
      }
      else
      {
        v127 = *(void (**)(char *, uint64_t, __n128))(v119 + 8);
        ((void (*)(char *, uint64_t))v127)(v15, v114);
      }

      v130 = (uint64_t)v186;
      v131 = v183;
      v177(v186, v118, v114);
      v132 = objc_msgSend(v131, "settings");
      v133 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v132, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      v134 = objc_allocWithZone((Class)AVAudioFile);
      v135 = sub_100148BE4(v130, v133);
      v136 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordedFile];
      *(_QWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordedFile] = v135;

      ((void (*)(void ***, uint64_t))v127)(v118, v114);
      goto LABEL_54;
    }
    v137 = aBlock;
    swift_bridgeObjectRelease();
    v138 = _convertNSErrorToError(_:)(v104);

    swift_willThrow();
    v139 = swift_errorRetain(v138);
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v140, v141))
    {
      v142 = (uint8_t *)swift_slowAlloc(12, -1);
      v187 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v142 = 138412290;
      v143 = (void **)_convertErrorToNSError(_:)(v138);
      aBlock = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v193, v142 + 4);
      v144 = v187;
      *v187 = v143;
      swift_errorRelease(v138);
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "Failed to create recording file: %@", v142, 0xCu);
      v145 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v144, 1, v145);
      swift_slowDealloc(v144, -1, -1);
      swift_slowDealloc(v142, -1, -1);

      swift_errorRelease(v138);
    }
    else
    {
      swift_errorRelease(v138);
      swift_errorRelease(v138);

    }
  }
LABEL_54:
  v146 = (_QWORD *)swift_allocObject(&unk_10026DC50, 40, 7);
  v148 = v188;
  v147 = v189;
  v146[2] = a1;
  v146[3] = v147;
  v146[4] = v148;
  v196 = (uint64_t (*)(_QWORD))sub_100149B4C;
  v197 = v146;
  aBlock = _NSConcreteStackBlock;
  v193 = 1107296256;
  v194 = sub_10014740C;
  v195 = (ValueMetadata *)&unk_10026DC68;
  v149 = _Block_copy(&aBlock);
  v150 = v197;
  v151 = v183;
  v152 = a1;
  swift_retain(v148);
  *(_QWORD *)&v153 = swift_release(v150).n128_u64[0];
  v154 = v179;
  objc_msgSend(v179, "installTapOnBus:bufferSize:format:block:", 0, 1024, v151, v149, v153);
  _Block_release(v149);

  aBlock = 0;
  v155 = objc_msgSend(v182, "startAndReturnError:", &aBlock);
  v156 = aBlock;
  if (v155)
  {
    v157 = aBlock;
    v158 = objc_msgSend(v184, "standardUserDefaults");
    v159 = String._bridgeToObjectiveC()();
    v160 = objc_msgSend(v158, "BOOLForKey:", v159);

    if (v160)
      objc_msgSend(*(id *)&a1[v178], "play");
    objc_msgSend(v152, "_accessibilityDidStartListening");

    v93 = v182;
LABEL_38:

    return;
  }
  v161 = aBlock;
  v162 = _convertNSErrorToError(_:)(v156);

  swift_willThrow();
  v163 = swift_errorRetain(v162);
  v164 = Logger.logObject.getter(v163);
  v165 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v164, v165))
  {
    v166 = (uint8_t *)swift_slowAlloc(12, -1);
    v167 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v166 = 138412290;
    v168 = (void **)_convertErrorToNSError(_:)(v162);
    aBlock = v168;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v193, v166 + 4);
    *v167 = v168;
    v154 = v179;
    swift_errorRelease(v162);
    _os_log_impl((void *)&_mh_execute_header, v164, v165, "Failed to start audio engine: %@", v166, 0xCu);
    v169 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v167, 1, v169);
    v170 = v167;
    v147 = v189;
    swift_slowDealloc(v170, -1, -1);
    swift_slowDealloc(v166, -1, -1);
  }
  else
  {
    swift_errorRelease(v162);
  }

  v171 = sub_100149ADC();
  v172 = swift_allocError(&type metadata for RecordingHelper.RecordingError, v171, 0, 0);
  *v173 = 2;
  v147(v172, 0, 0.0);

  swift_errorRelease(v172);
  swift_errorRelease(v162);
}

uint64_t sub_1001471A4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, float))
{
  void *v7;
  unsigned int v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v21;
  id v22;
  uint64_t v23;

  sub_100145C1C(a1);
  v7 = *(void **)(a3 + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordedFile);
  if (v7)
  {
    v22 = 0;
    v8 = objc_msgSend(v7, "writeFromBuffer:error:", a1, &v22);
    v9 = v22;
    if (v8)
    {
      v10 = v22;
    }
    else
    {
      v11 = v22;
      v12 = _convertNSErrorToError(_:)(v9);

      swift_willThrow();
      if (qword_10028A468 != -1)
        swift_once(&qword_10028A468, sub_1001210B8);
      v13 = type metadata accessor for Logger(0);
      sub_10000F66C(v13, (uint64_t)qword_1002AA440);
      v14 = swift_errorRetain(v12);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v17 = 138412290;
        v18 = (void *)_convertErrorToNSError(_:)(v12);
        v22 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v17 + 4);
        *v21 = v18;
        swift_errorRelease(v12);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not write file to buffer: %@", v17, 0xCu);
        v19 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v21, 1, v19);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v17, -1, -1);

        swift_errorRelease(v12);
      }
      else
      {
        swift_errorRelease(v12);
        swift_errorRelease(v12);

      }
    }
  }
  return a4(0, a1, *(float *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_normalizedPowerChannel0));
}

void sub_10014740C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, id);
  id v7;
  id v8;

  v6 = *(void (**)(id, id))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, v7);
  swift_release(v5);

}

uint64_t sub_100147478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA440);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stopping audio recording", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_10026DB38, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v1);
  aBlock[4] = sub_100149A84;
  v26 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026DBC8;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(v13);
  static DispatchQoS.unspecified.getter(v15);
  v24 = _swiftEmptyArrayStorage;
  v16 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100006DF4(&qword_10028AC30);
  v18 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  v19 = v26;
  swift_release(v13);
  return swift_release(v19);
}

void sub_100147728(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(void **)(Strong + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordedFile);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordedFile) = 0;

    sub_10014778C();
  }
}

id sub_10014778C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  id result;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA440);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cancelling audio recognition", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordingQueue];
  *v5 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v5);
  result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v11 & 1) != 0)
  {
    v14 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioEngine;
    v15 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioEngine];
    if (v15)
    {
      v16 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode;
      v17 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode];
      v18 = v15;
      objc_msgSend(v17, "removeTapOnBus:", 0);
      objc_msgSend(v18, "pause");
      objc_msgSend(v18, "reset");
      v19 = *(void **)&v1[v14];
      *(_QWORD *)&v1[v14] = 0;

      v20 = *(void **)&v1[v16];
      *(_QWORD *)&v1[v16] = 0;

    }
    return objc_msgSend(v1, "_accessibilityDidStopListening");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100147980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordingQueue];
  v14 = (_QWORD *)swift_allocObject(&unk_10026DB88, 48, 7);
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_100149A78;
  v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026DBA0;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(v17);
  v24 = _swiftEmptyArrayStorage;
  v18 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100006DF4(&qword_10028AC30);
  v20 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v26);
}

void sub_100147B84(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  id v15;
  id v16;
  unsigned int v17;
  id v18;
  id v19;
  unsigned int v20;
  id v21;
  id v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;

  v5 = *(void **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioEngine);
  if (v5 && objc_msgSend(v5, "isRunning"))
    sub_10014778C();
  if ((a2 & 2) != 0)
  {
    a3(0);
    return;
  }
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA440);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Configuring audio session (TTS)", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = objc_msgSend((id)objc_opt_self(AVAudioSession), "sharedInstance");
  v12 = v11;
  if ((a2 & 0x10) != 0)
  {
    v35 = 0;
    v20 = objc_msgSend(v11, "setCategory:withOptions:error:", AVAudioSessionCategoryPlayback, 0, &v35);
    v21 = v35;
    if (v20)
    {
      v22 = v35;
      sub_10009C8E8(v12, a2);
      goto LABEL_20;
    }
    v25 = v35;
    v26 = v21;
  }
  else
  {
    if (sub_10009C704())
      v13 = 44;
    else
      v13 = 12;
    v35 = 0;
    v14 = objc_msgSend(v12, "setCategory:withOptions:error:", AVAudioSessionCategoryPlayAndRecord, v13, &v35);
    v15 = v35;
    if (v14)
    {
      v16 = v35;
      sub_10009C8E8(v12, a2);
      if ((a2 & 0x20) != 0)
      {
        v35 = 0;
        v17 = objc_msgSend(v12, "overrideOutputAudioPort:error:", 1936747378, &v35);
        v18 = v35;
        if (!v17)
        {
LABEL_24:
          v25 = v18;
          v26 = v18;
          goto LABEL_25;
        }
        v19 = v35;
      }
LABEL_20:
      v35 = 0;
      v23 = objc_msgSend(v12, "setActive:withOptions:error:", 1, 0, &v35);
      v18 = v35;
      if (v23)
      {
        v24 = v35;
        a3(0);

        return;
      }
      goto LABEL_24;
    }
    v25 = v35;
    v26 = v15;
  }
LABEL_25:
  v27 = _convertNSErrorToError(_:)(v26);

  swift_willThrow();
  v28 = swift_errorRetain(v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v31 = 138412290;
    v33 = (void *)_convertErrorToNSError(_:)(v27);
    v35 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v31 + 4);
    *v32 = v33;
    swift_errorRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to change audio category: %@", v31, 0xCu);
    v34 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v32, 1, v34);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    swift_errorRelease(v27);
  }

  swift_errorRetain(v27);
  a3(v27);

  swift_errorRelease(v27);
  swift_errorRelease(v27);
}

uint64_t sub_100147FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordingQueue);
  v8 = swift_allocObject(&unk_10026DB38, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  aBlock[4] = sub_100149A68;
  v20 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026DB50;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v10);
  v18 = _swiftEmptyArrayStorage;
  v11 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100006DF4(&qword_10028AC30);
  v13 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v20;
  swift_release(v8);
  return swift_release(v14);
}

void sub_1001481DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  id v22;
  _BYTE v23[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA440);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Deactivating audio session", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    sub_10014778C();
    v9 = objc_msgSend((id)objc_opt_self(AVAudioSession), "sharedInstance");
    v22 = 0;
    v10 = objc_msgSend(v9, "setActive:withOptions:error:", 0, 1, &v22);
    v11 = v22;
    if (v10)
    {
      v12 = v22;

    }
    else
    {
      v13 = v22;
      v14 = _convertNSErrorToError(_:)(v11);

      swift_willThrow();
      swift_errorRetain(v14);
      v15 = swift_errorRetain(v14);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v18 = 138412290;
        v20 = (void *)_convertErrorToNSError(_:)(v14);
        v22 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v18 + 4);
        *v19 = v20;
        swift_errorRelease(v14);
        swift_errorRelease(v14);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to deactivate audio session: %@", v18, 0xCu);
        v21 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v19, 1, v21);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

        swift_errorRelease(v14);
      }
      else
      {

        swift_errorRelease(v14);
        swift_errorRelease(v14);
        swift_errorRelease(v14);

      }
    }
  }
}

uint64_t sub_1001484EC(char a1, uint64_t (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  char v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA440);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = a1 & 1;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    LOBYTE(v14) = v8;
    v11 = String.init<A>(describing:)(&v14, &type metadata for RecordingHelper.ListeningStateChange);
    v14 = sub_1001A7FE4(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Finished performing user feedback with completion listeningStateChange: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  return a2();
}

double sub_100148684(uint64_t a1, uint64_t a2, char a3, char a4)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v6 = a3 & 1;
  v7 = sub_100006DF4(&qword_100294C58);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_10026DA20, v11 + v9, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_100149668(v6, a4, (uint64_t)sub_100149628, v12);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_10014876C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100148784, 0, 0);
}

uint64_t sub_100148784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for RecordingHelper();
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_WORD *)(v2 + 24) = 257;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100148828;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD000000000000020, 0x80000001001FF4F0, sub_10014960C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100148828()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100148884, 0, 0);
}

uint64_t sub_100148884()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  *v1 = 1701736292;
  v1[1] = 0xE400000000000000;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001488A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = sub_100006DF4(&qword_100295048);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10026DB10, v9 + v7, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100147980(a3, (uint64_t)sub_100149A04, v10);
  return swift_release(v10);
}

uint64_t sub_100148984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  swift_errorRetain(a1);
  v1 = sub_100006DF4(&qword_100295048);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

id sub_1001489F4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecordingHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RecordingHelper()
{
  return objc_opt_self(_TtC17SequoiaTranslator15RecordingHelper);
}

id sub_100148ADC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend(v2, "initForReading:error:", v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

id sub_100148BE4(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v6;
  void *v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  id v14;
  uint64_t v15;
  id v17;

  v3 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v7 = v6;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v17 = 0;
  v9 = objc_msgSend(v3, "initForWriting:settings:error:", v7, isa, &v17);

  v10 = v17;
  if (v9)
  {
    v11 = type metadata accessor for URL(0);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v13 = v10;
    v12(a1, v11);
  }
  else
  {
    v14 = v17;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow();
    v15 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  }
  return v9;
}

unint64_t sub_100148D28(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100148DB0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 32) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 40) = v3;
  *v3 = v2;
  v3[1] = sub_100148E18;
  return v5(v2 + 16);
}

uint64_t sub_100148E18()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 32);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  v3 = *(_QWORD *)(v1 + 24);
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = v3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void sub_100148E68(char a1, char a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  SystemSoundID v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v4 = a1 & 1;
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA440);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136315138;
    LOBYTE(v16) = v4;
    v11 = String.init<A>(describing:)(&v16, &type metadata for RecordingHelper.ListeningStateChange);
    v13 = v12;
    v16 = sub_1001A7FE4(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Performing user feedback with listeningStateChange: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)UIImpactFeedbackGenerator), "initWithStyle:", 4);
    objc_msgSend(v14, "impactOccurredWithIntensity:", 1.0);

  }
  if (v4)
    v15 = 1114;
  else
    v15 = 1113;
  AudioServicesPlaySystemSound(v15);
}

id sub_10014903C(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  objc_class *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  objc_super v36;
  _QWORD *v37;

  v2 = v1;
  v35 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v34 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioEngine] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFormat] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioFilePlayer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_audioTapNode] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_averagePowerChannel0] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_normalizedPowerChannel0] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_nextAudioFileIndex] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_randomFile] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordedFile] = 0;
  v32 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_recordingQueue;
  v31 = sub_10001D948();
  v33 = v1;
  static DispatchQoS.unspecified.getter(v33);
  v37 = _swiftEmptyArrayStorage;
  v12 = sub_100007D5C(&qword_10028F258, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v30 = v12;
  v13 = sub_100006DF4(&qword_10028F260);
  v29 = v13;
  v14 = sub_1000827A0(&qword_10028F268, &qword_10028F260);
  v15 = v13;
  v16 = v6;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v15, v14, v6, v12);
  v17 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v19 = v34;
  v18(v34, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000032, 0x80000001001FF520, v11, v8, v19, 0);
  *(_QWORD *)&v2[v32] = v20;
  v21 = OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_analysisQueue;
  static DispatchQoS.unspecified.getter(v20);
  v37 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v29, v14, v16, v30);
  v18(v19, v17, v28);
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000030, 0x80000001001FF560, v11, v8, v19, 0);
  v23 = v33;
  *(_QWORD *)&v33[v21] = v22;
  v24 = v35;
  *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator15RecordingHelper_deviceHelper] = v35;
  swift_retain(v24);

  v25 = (objc_class *)type metadata accessor for RecordingHelper();
  v36.receiver = v23;
  v36.super_class = v25;
  return objc_msgSendSuper2(&v36, "init");
}

uint64_t sub_100149364()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v0 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v0);
  v2 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject(&unk_10026D9D0, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000A020((uint64_t)v2, &qword_10028F190);
    v7 = 0;
    v8 = 0;
    v9 = 7168;
  }
  else
  {
    v10 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    v9 = v10 | 0x1C00;
    v11 = *v6;
    if (*v6)
    {
      v12 = *(_QWORD *)(v5 + 24);
      ObjectType = swift_getObjectType(*v6);
      swift_unknownObjectRetain(v11);
      v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
      v8 = v14;
      swift_unknownObjectRelease(v11);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  v15 = swift_allocObject(&unk_10026D9F8, 32, 7);
  *(_QWORD *)(v15 + 16) = &unk_100295030;
  *(_QWORD *)(v15 + 24) = v5;
  if (v8 | v7)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v7;
    v18[3] = v8;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v9, v16, &type metadata for String, &unk_100295040, v15);
}

uint64_t sub_100149518()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014953C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10029502C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001D380;
  v3[2] = a1;
  return swift_task_switch(sub_100148784, 0, 0);
}

uint64_t sub_10014959C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10029503C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D380;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100295038 + dword_100295038))(a1, v4);
}

double sub_10014960C(uint64_t a1)
{
  uint64_t v1;

  return sub_100148684(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_BYTE *)(v1 + 25));
}

uint64_t sub_10014961C()
{
  return sub_1000C2850(&qword_100294C58);
}

uint64_t sub_100149628()
{
  uint64_t v0;

  v0 = sub_100006DF4(&qword_100294C58);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

void sub_100149668(char a1, char a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  SystemSoundID v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;

  v7 = a1 & 1;
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA440);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v25 = a3;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (void **)swift_slowAlloc(32, -1);
    aBlock = v13;
    *(_DWORD *)v12 = 136315138;
    LOBYTE(v26) = v7;
    v14 = String.init<A>(describing:)(&v26, &type metadata for RecordingHelper.ListeningStateChange);
    v26 = sub_1001A7FE4(v14, v15, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &aBlock, v12 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Performing user feedback with completion and listeningStateChange: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v16 = v12;
    a3 = v25;
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = swift_allocObject(&unk_10026DA48, 40, 7);
  *(_BYTE *)(v17 + 16) = v7;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)(v17 + 32) = a4;
  if ((a2 & 1) == 0)
  {
    swift_retain(a4);
    if (v7)
      goto LABEL_7;
LABEL_9:
    v23 = swift_allocObject(&unk_10026DAC0, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_1001499B0;
    *(_QWORD *)(v23 + 24) = v17;
    v31 = sub_1000089A8;
    v32 = v23;
    aBlock = _NSConcreteStackBlock;
    v28 = 1107296256;
    v29 = sub_100075908;
    v30 = &unk_10026DAD8;
    v20 = _Block_copy(&aBlock);
    v24 = v32;
    swift_retain(v17);
    swift_release(v24);
    v22 = 1113;
    goto LABEL_10;
  }
  v18 = objc_msgSend(objc_allocWithZone((Class)UIImpactFeedbackGenerator), "initWithStyle:", 4, swift_retain(a4).n128_f64[0]);
  objc_msgSend(v18, "impactOccurredWithIntensity:", 1.0);

  if (!v7)
    goto LABEL_9;
LABEL_7:
  v19 = swift_allocObject(&unk_10026DA70, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_1001499B0;
  *(_QWORD *)(v19 + 24) = v17;
  v31 = sub_10002D62C;
  v32 = v19;
  aBlock = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = sub_100075908;
  v30 = &unk_10026DA88;
  v20 = _Block_copy(&aBlock);
  v21 = v32;
  swift_retain(v17);
  swift_release(v21);
  v22 = 1114;
LABEL_10:
  AudioServicesPlaySystemSoundWithCompletion(v22, v20);
  swift_release(v17);
  _Block_release(v20);
}

uint64_t sub_10014998C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001499B0()
{
  uint64_t v0;

  return sub_1001484EC(*(_BYTE *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1001499BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001499E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001499F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001499F8()
{
  return sub_1000C2850(&qword_100295048);
}

uint64_t sub_100149A04(uint64_t a1)
{
  sub_100006DF4(&qword_100295048);
  return sub_100148984(a1);
}

uint64_t sub_100149A44()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100149A68()
{
  uint64_t v0;

  sub_1001481DC(v0);
}

uint64_t sub_100149A70()
{
  return sub_100149A94(48);
}

void sub_100149A78()
{
  uint64_t v0;

  sub_100147B84(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

void sub_100149A84()
{
  uint64_t v0;

  sub_100147728(v0);
}

uint64_t sub_100149A8C()
{
  return sub_100149A94(56);
}

uint64_t sub_100149A94(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

void sub_100149ACC()
{
  uint64_t v0;

  sub_100145F84(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, _QWORD, float))(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_100149ADC()
{
  unint64_t result;

  result = qword_100295050;
  if (!qword_100295050)
  {
    result = swift_getWitnessTable(&unk_1001F33C0, &type metadata for RecordingHelper.RecordingError);
    atomic_store(result, (unint64_t *)&qword_100295050);
  }
  return result;
}

uint64_t sub_100149B20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100149B4C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001471A4(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(_QWORD, void *, float))(v2 + 24));
}

uint64_t storeEnumTagSinglePayload for RecordingHelper.RecordingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100149BA4 + 4 * byte_1001F3255[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100149BD8 + 4 * asc_1001F3250[v4]))();
}

uint64_t sub_100149BD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149BE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100149BE8);
  return result;
}

uint64_t sub_100149BF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100149BFCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100149C00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149C08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordingHelper.RecordingError()
{
  return &type metadata for RecordingHelper.RecordingError;
}

uint64_t storeEnumTagSinglePayload for RecordingHelper.ListeningStateChange(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100149C70 + 4 * byte_1001F325F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100149CA4 + 4 * byte_1001F325A[v4]))();
}

uint64_t sub_100149CA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149CAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100149CB4);
  return result;
}

uint64_t sub_100149CC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100149CC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100149CCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149CD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordingHelper.ListeningStateChange()
{
  return &type metadata for RecordingHelper.ListeningStateChange;
}

unint64_t sub_100149CF4()
{
  unint64_t result;

  result = qword_100295058;
  if (!qword_100295058)
  {
    result = swift_getWitnessTable(&unk_1001F3330, &type metadata for RecordingHelper.ListeningStateChange);
    atomic_store(result, (unint64_t *)&qword_100295058);
  }
  return result;
}

unint64_t sub_100149D3C()
{
  unint64_t result;

  result = qword_100295060;
  if (!qword_100295060)
  {
    result = swift_getWitnessTable(&unk_1001F3398, &type metadata for RecordingHelper.RecordingError);
    atomic_store(result, (unint64_t *)&qword_100295060);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReversedContentList()
{
  return &type metadata for ReversedContentList;
}

unint64_t sub_100149DD4()
{
  unint64_t result;

  result = qword_100295068;
  if (!qword_100295068)
  {
    result = swift_getWitnessTable(&unk_1001F348C, &type metadata for ReversedContentList);
    atomic_store(result, (unint64_t *)&qword_100295068);
  }
  return result;
}

char *sub_100149E18()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = *v0;
  v2 = objc_allocWithZone((Class)type metadata accessor for TranslationListController());
  swift_retain(v1);
  return sub_1001BBCF0(v3);
}

uint64_t sub_100149E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100149F14();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100149EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100149F14();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100149EF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100149F14();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100149F14()
{
  unint64_t result;

  result = qword_100295070;
  if (!qword_100295070)
  {
    result = swift_getWitnessTable(&unk_1001F3414, &type metadata for ReversedContentList);
    atomic_store(result, (unint64_t *)&qword_100295070);
  }
  return result;
}

id sub_100149F58()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;
  objc_super v43;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  v39 = v3;
  __chkstk_darwin(v2);
  v37 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_token] = -1;
  v33 = OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_queue;
  v32[1] = sub_10001D948();
  v14 = v1;
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100007D5C(&qword_10028F258, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_100006DF4(&qword_10028F260);
  v17 = sub_1000827A0(&qword_10028F268, &qword_10028F260);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v8, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
  v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x80000001001FF710, v13, v10, v7, 0);
  *(_QWORD *)&v1[v33] = v18;
  v14[OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver__muted] = 0;

  v19 = (objc_class *)type metadata accessor for RingerSwitchObserver();
  v43.receiver = v14;
  v43.super_class = v19;
  v20 = objc_msgSendSuper2(&v43, "init");
  sub_10014A460();
  v21 = swift_allocObject(&unk_10026DF30, 24, 7);
  swift_unknownObjectWeakInit(v21 + 16, v20);
  aBlock[4] = sub_10014AAFC;
  v42 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026DF70;
  v22 = _Block_copy(aBlock);
  swift_retain(v21);
  static DispatchQoS.unspecified.getter(v23);
  v40 = _swiftEmptyArrayStorage;
  v24 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100006DF4(&qword_10028AC30);
  v26 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  v27 = v37;
  v28 = v25;
  v29 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v26, v38, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v27, v22);

  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
  v30 = v42;
  swift_release(v21);
  swift_release(v30);
  return v20;
}

void sub_10014A310(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_10014A7B8(*(_DWORD *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_token));

  }
}

id sub_10014A38C()
{
  char *v0;
  int v1;
  objc_super v3;

  v1 = *(_DWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_token];
  if (v1 != -1)
    notify_cancel(v1);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for RingerSwitchObserver();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for RingerSwitchObserver()
{
  return objc_opt_self(_TtC17SequoiaTranslator20RingerSwitchObserver);
}

void sub_10014A460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint32_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  int out_token;
  _BYTE v18[24];
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_token;
  if (*(_DWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_token) == -1)
  {
    v2 = v0;
    out_token = -1;
    v3 = *(NSObject **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_queue);
    v4 = swift_allocObject(&unk_10026DF30, 24, 7);
    swift_unknownObjectWeakInit(v4 + 16, v2);
    aBlock[4] = sub_10014AADC;
    v20 = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A4E10;
    aBlock[3] = &unk_10026DF48;
    v5 = _Block_copy(aBlock);
    swift_release(v20);
    v6 = notify_register_dispatch("com.apple.springboard.ringerstate", &out_token, v3, v5);
    _Block_release(v5);
    if (v6)
    {
      if (qword_10028A488 != -1)
        swift_once(&qword_10028A488, sub_100121150);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA4A0);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v11 = 67240192;
        LODWORD(aBlock[0]) = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v11 + 4);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to register for ringer switch state change: %{public}u", v11, 8u);
        swift_slowDealloc(v11, -1, -1);
      }

    }
    else
    {
      if (qword_10028A488 != -1)
        swift_once(&qword_10028A488, sub_100121150);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_10000F66C(v12, (uint64_t)qword_1002AA4A0);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.info.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v16 = 67240192;
        swift_beginAccess(&out_token, v18, 0, 0);
        LODWORD(aBlock[0]) = out_token;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v16 + 4);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Monitor ringer switch state change with token: %{public}d", v16, 8u);
        swift_slowDealloc(v16, -1, -1);
      }

      swift_beginAccess(&out_token, aBlock, 0, 0);
      *(_DWORD *)(v2 + v1) = out_token;
    }
  }
}

void sub_10014A760(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10014A7B8(a1);

  }
}

void sub_10014A7B8(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint32_t state;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t state64;
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a1 == -1)
    return;
  state64 = 0;
  state = notify_get_state(a1, &state64);
  if (state)
  {
    LODWORD(v4) = state;
    if (qword_10028A488 == -1)
    {
LABEL_5:
      v11 = type metadata accessor for Logger(0);
      v12 = sub_10000F66C(v11, (uint64_t)qword_1002AA4A0);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v15 = 67240192;
        LODWORD(v23) = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4, v15 + 4);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to get ringer switch state: %{public}u", v15, 8u);
        swift_slowDealloc(v15, -1, -1);
      }

      return;
    }
LABEL_15:
    swift_once(&qword_10028A488, sub_100121150);
    goto LABEL_5;
  }
  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA4A0);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v20 = 134349056;
    swift_beginAccess(&state64, v22, 0, 0);
    v23 = state64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20 + 4);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ringer switch state: %{public}llu", v20, 0xCu);
    swift_slowDealloc(v20, -1, -1);
  }

  swift_beginAccess(&state64, &v23, 0, 0);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator20RingerSwitchObserver__muted) = state64 == 0;
}

uint64_t sub_10014AAB8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10014AADC(int a1)
{
  uint64_t v1;

  sub_10014A760(a1, v1);
}

uint64_t sub_10014AAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10014AAF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10014AAFC()
{
  uint64_t v0;

  sub_10014A310(v0);
}

ValueMetadata *type metadata accessor for ScaleButtonStyle()
{
  return &type metadata for ScaleButtonStyle;
}

uint64_t sub_10014AB1C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216374, 1);
}

uint64_t sub_10014AB2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v2 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_1002950B8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = ButtonStyleConfiguration.label.getter(v7);
  v11 = ButtonStyleConfiguration.isPressed.getter(v10);
  if ((v11 & 1) != 0)
    v12 = 0.75;
  else
    v12 = 1.0;
  v13 = static UnitPoint.center.getter(v11);
  v15 = v14;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  v16 = &v9[*(int *)(v6 + 36)];
  *(double *)v16 = v12;
  *((double *)v16 + 1) = v12;
  *((double *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_10014AC54((uint64_t)v9, a1);
}

uint64_t sub_10014AC54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002950B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10014ACA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002950C0;
  if (!qword_1002950C0)
  {
    v1 = sub_1000070BC(&qword_1002950B8);
    sub_10014AD0C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002950C0);
  }
  return result;
}

unint64_t sub_10014AD0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BD48;
  if (!qword_10028BD48)
  {
    v1 = type metadata accessor for ButtonStyleConfiguration.Label(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonStyleConfiguration.Label, v1);
    atomic_store(result, (unint64_t *)&qword_10028BD48);
  }
  return result;
}

uint64_t sub_10014AD54@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3648, (uint64_t)&unk_1001F3670, a2);
}

uint64_t sub_10014AD68(unsigned __int8 *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  id v4;
  uint64_t KeyPath;
  uint64_t v6;
  char v8;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 1)
  {
    v4 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    objc_msgSend(v4, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);

  }
  KeyPath = swift_getKeyPath(&unk_1001F3648);
  v6 = swift_getKeyPath(&unk_1001F3670);
  v8 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_10014AE28@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3600, (uint64_t)&unk_1001F3628, a2);
}

uint64_t sub_10014AE3C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F3600);
  v5 = swift_getKeyPath(&unk_1001F3628);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10014AEAC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F3690);
  v2 = swift_getKeyPath(&unk_1001F36B8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10014AF1C()
{
  return sub_10001DA94((uint64_t)&unk_1001F3648, (uint64_t)&unk_1001F3670);
}

uint64_t sub_10014AF30()
{
  return sub_10001DA94((uint64_t)&unk_1001F3600, (uint64_t)&unk_1001F3628);
}

uint64_t sub_10014AF44@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F35B8);
  v4 = swift_getKeyPath(&unk_1001F35E0);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_10014AFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__broadcastTranslation;
  v2 = sub_100006DF4(&qword_100295298);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__faceToFaceVisible;
  v4 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__clearConfirmationVisible, v4);
  v6 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__interruptionEvent;
  v7 = sub_100006DF4(&qword_100295290);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10014B074()
{
  return type metadata accessor for SceneContext(0);
}

uint64_t type metadata accessor for SceneContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100295110;
  if (!qword_100295110)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SceneContext);
  return result;
}

void sub_10014B0B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10014B15C(319);
  if (v3 <= 0x3F)
  {
    v8 = *(_QWORD *)(v2 - 8) + 64;
    sub_1000936A0();
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = v9;
      sub_10014B1B4(319);
      if (v7 <= 0x3F)
      {
        v11 = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 4, &v8, a1 + 80);
      }
    }
  }
}

void sub_10014B15C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100295120)
  {
    v2 = sub_1000070BC(&qword_100295128);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100295120);
  }
}

void sub_10014B1B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100295130)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100295130);
  }
}

uint64_t sub_10014B208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v1 = sub_100006DF4(&qword_100295290);
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  __chkstk_darwin(v1);
  v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - v6;
  v8 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100295298);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__broadcastTranslation;
  v33[0] = 0;
  v33[1] = 0;
  v17 = sub_100006DF4(&qword_100295128);
  Published.init(initialValue:)(v33, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v16, v15, v12);
  v18 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__faceToFaceVisible;
  LOBYTE(v33[0]) = 0;
  Published.init(initialValue:)(v33, &type metadata for Bool);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v19(v18, v11, v8);
  v20 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__clearConfirmationVisible;
  LOBYTE(v33[0]) = 0;
  Published.init(initialValue:)(v33, &type metadata for Bool);
  v21 = ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(v20, v11, v8);
  v22 = v0 + OBJC_IVAR____TtC17SequoiaTranslator12SceneContext__interruptionEvent;
  UUID.init()(v21);
  v24 = v28;
  v23 = v29;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v28, v7, v3);
  v25 = v30;
  Published.init(initialValue:)(v24, v3);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v22, v25, v32);
  return v0;
}

uint64_t sub_10014B470@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for SceneContext(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014B4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v12 - v7;
  UUID.init()(v6);
  KeyPath = swift_getKeyPath(&unk_1001F35B8);
  v10 = swift_getKeyPath(&unk_1001F35E0);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v8, v1);
  swift_retain(v0);
  static Published.subscript.setter(v5, v0, KeyPath, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v8, v1);
}

double sub_10014B59C@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F3690);
  v5 = swift_getKeyPath(&unk_1001F36B8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10014B618(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD v10[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  if (*a1)
  {
    v5 = (void *)objc_opt_self(UIApplication);
    swift_unknownObjectRetain(v2);
    v6 = objc_msgSend(v5, "sharedApplication");
    objc_msgSend(v6, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);

  }
  KeyPath = swift_getKeyPath(&unk_1001F3690);
  v8 = swift_getKeyPath(&unk_1001F36B8);
  v10[0] = v2;
  v10[1] = v3;
  swift_retain(v4);
  return static Published.subscript.setter(v10, v4, KeyPath, v8);
}

uint64_t sub_10014B6EC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F35B8);
  v5 = swift_getKeyPath(&unk_1001F35E0);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_10014B758(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F35B8);
  v14 = swift_getKeyPath(&unk_1001F35E0);
  v11(v8, (uint64_t)v10, v4);
  swift_retain(v12);
  static Published.subscript.setter(v8, v12, KeyPath, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_10014B860@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3600, (uint64_t)&unk_1001F3628, a2);
}

uint64_t sub_10014B888@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3648, (uint64_t)&unk_1001F3670, a2);
}

uint64_t sub_10014B8B8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = __CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_100154DA4(a1);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v12)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_100157D74(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_100154B3C(v4, v6, v2 != 0, a1);
      v10 = v14;
      sub_100157D74(v4, v6, v2 != 0);
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10014B9C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v3 = type metadata accessor for URLQueryItem(0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v30 = v1;
  v38 = _swiftEmptyArrayStorage;
  sub_1001DA388(0, v6, 0);
  v7 = v38;
  result = sub_1001554E4(a1);
  v10 = result;
  v11 = 0;
  v12 = a1 + 64;
  v31 = a1 + 80;
  v32 = v6;
  v33 = v9;
  v34 = a1 + 64;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(a1 + 32))
  {
    v15 = (unint64_t)v10 >> 6;
    if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
      goto LABEL_24;
    v37 = v11;
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v17 = *v16;
    v18 = v16[1];
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v10);
    v20 = a1;
    v21 = *v19;
    v22 = v19[1];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    URLQueryItem.init(name:value:)(v17, v18, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v38 = v7;
    v24 = v7[2];
    v23 = v7[3];
    if (v24 >= v23 >> 1)
    {
      sub_1001DA388(v23 > 1, v24 + 1, 1);
      v7 = v38;
    }
    v7[2] = v24 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v35 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v24, v5, v36);
    v13 = 1 << *(_BYTE *)(v20 + 32);
    if (v10 >= v13)
      goto LABEL_25;
    v12 = v34;
    v25 = *(_QWORD *)(v34 + 8 * v15);
    if ((v25 & (1 << v10)) == 0)
      goto LABEL_26;
    a1 = v20;
    LODWORD(v9) = v33;
    if (*(_DWORD *)(v20 + 36) != (_DWORD)v33)
      goto LABEL_27;
    v26 = v25 & (-2 << (v10 & 0x3F));
    if (v26)
    {
      v13 = __clz(__rbit64(v26)) | v10 & 0xFFFFFFFFFFFFFFC0;
      v14 = v32;
    }
    else
    {
      v27 = v15 + 1;
      v28 = (unint64_t)(v13 + 63) >> 6;
      v14 = v32;
      if (v15 + 1 < v28)
      {
        v29 = *(_QWORD *)(v34 + 8 * v27);
        if (v29)
        {
LABEL_20:
          v13 = __clz(__rbit64(v29)) + (v27 << 6);
        }
        else
        {
          while (v28 - 2 != v15)
          {
            v29 = *(_QWORD *)(v31 + 8 * v15++);
            if (v29)
            {
              v27 = v15 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v11 = v37 + 1;
    v10 = v13;
    if (v37 + 1 == v14)
      return (uint64_t)v7;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10014BC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

BOOL sub_10014BD14()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v1 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  v3 = objc_msgSend(v0, "traitCollection");
  v4 = objc_msgSend(v3, "horizontalSizeClass");

  return v4 == (id)2 && v2 != 0;
}

uint64_t sub_10014BDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___translationSession;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___translationSession);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___translationSession);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_store);
    v5 = type metadata accessor for TranslationAppSession(0);
    v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    swift_retain(v4);
    v3 = sub_100154E2C(v7, 1, v6, 480.0);
    v8 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v8);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

char *sub_10014BE84()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___favoritesImporter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___favoritesImporter);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___favoritesImporter);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_store);
    objc_allocWithZone((Class)type metadata accessor for FavoritesImporter());
    swift_retain(v5);
    v7 = sub_1000C45C0(v6);
    v8 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

uint64_t sub_10014BF0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___sessionManager;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___sessionManager);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___sessionManager);
  }
  else
  {
    v3 = sub_10014BF70(v0);
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v4);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10014BF70(uint64_t a1)
{
  id v2;
  NSString v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSUserDefaults), "init");
  if (qword_10028A538 != -1)
    swift_once(&qword_10028A538, sub_1001DC480);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3);

  if (v4)
  {
    if (qword_10028A460 != -1)
      swift_once(&qword_10028A460, sub_100121094);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA428);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Using debug 10s session timeout", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = 10.0;
  }
  else
  {
    v10 = 480.0;
  }
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_store);
  v12 = type metadata accessor for TranslationSessionManager(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14 = swift_retain(v11);
  return sub_1001542EC(v14, v13, v10);
}

uint64_t sub_10014C108@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.managedObjectContext.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10014C130(id *a1)
{
  return EnvironmentValues.managedObjectContext.setter(*a1);
}

void sub_10014C158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint8_t *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  double v67;
  id v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, unint64_t, uint64_t, __n128);
  __n128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(char *, unint64_t, uint64_t, __n128);
  __n128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __n128 v108;
  uint64_t v109;
  __n128 v110;
  __n128 v111;
  char *v112;
  uint64_t v113;
  __n128 v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, unint64_t, uint64_t, __n128);
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, unint64_t, uint64_t, __n128);
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(unint64_t, unint64_t, uint64_t, __n128);
  __n128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  __n128 v176;
  uint64_t v177;
  uint64_t v178;
  __n128 v179;
  __n128 v180;
  unint64_t v181;
  uint64_t v182;
  __n128 v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t (*v188)(char *, unint64_t, uint64_t, __n128);
  __n128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  __n128 v195;
  uint64_t v196;
  uint64_t v197;
  __n128 v198;
  __n128 v199;
  uint64_t v200;
  uint64_t v201;
  __n128 v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(char *, unint64_t, uint64_t, __n128);
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  __n128 v214;
  uint64_t v215;
  uint64_t v216;
  __n128 v217;
  __n128 v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint8_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  __n128 v231;
  void (*v232)(char *, uint64_t, __n128);
  uint64_t v233;
  uint64_t v234;
  uint64_t (*v235)(char *, uint64_t, uint64_t);
  uint64_t v236;
  int v237;
  _QWORD *v238;
  void *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  void *v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278[2];

  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v248 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v264 = (uint64_t)&v248 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v248 - v8;
  v276 = type metadata accessor for URLQueryItem(0);
  v10 = *(_QWORD *)(v276 - 8);
  v11 = __chkstk_darwin(v276);
  v13 = (char *)&v248 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v248 - v15;
  v17 = __chkstk_darwin(v14);
  v274 = (unint64_t)&v248 - v18;
  v19 = __chkstk_darwin(v17);
  v269 = (uint64_t)&v248 - v20;
  v21 = __chkstk_darwin(v19);
  v268 = (uint64_t)&v248 - v22;
  v23 = __chkstk_darwin(v21);
  v267 = (char *)&v248 - v24;
  __chkstk_darwin(v23);
  v248 = (char *)&v248 - v25;
  v26 = sub_100006DF4(&qword_100295448);
  v27 = __chkstk_darwin(v26);
  v254 = (char *)&v248 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v253 = (char *)&v248 - v30;
  v31 = __chkstk_darwin(v29);
  v252 = (char *)&v248 - v32;
  v33 = __chkstk_darwin(v31);
  v251 = (char *)&v248 - v34;
  v35 = __chkstk_darwin(v33);
  v250 = (char *)&v248 - v36;
  v37 = __chkstk_darwin(v35);
  v266 = (char *)&v248 - v38;
  __chkstk_darwin(v37);
  v249 = (char *)&v248 - v39;
  v262 = type metadata accessor for URL(0);
  v260 = *(_QWORD *)(v262 - 8);
  __chkstk_darwin(v262);
  v259 = (char *)&v248 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100006DF4(&qword_100295450);
  __chkstk_darwin(v41);
  v261 = (char *)&v248 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for URLComponents(0);
  v265 = *(_QWORD *)(v43 - 8);
  v44 = __chkstk_darwin(v43);
  v257 = (char *)&v248 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v47 = (char *)&v248 - v46;
  if (qword_10028A3F0 != -1)
    swift_once(&qword_10028A3F0, sub_100120E88);
  v48 = type metadata accessor for Logger(0);
  v49 = sub_10000F66C(v48, (uint64_t)qword_1002AA2D8);
  v50 = swift_bridgeObjectRetain_n(a1, 2);
  v256 = v49;
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.info.getter(v51);
  v53 = os_log_type_enabled(v51, v52);
  v270 = v43;
  v271 = v47;
  v275 = v10;
  v272 = v13;
  v273 = v16;
  v263 = v9;
  v255 = v5;
  if (v53)
  {
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v278[0] = v55;
    *(_DWORD *)v54 = 136380675;
    sub_10000A05C(0, &qword_100295430, UIOpenURLContext_ptr);
    v43 = v270;
    sub_100065E60((unint64_t *)&unk_100295438, &qword_100295430, UIOpenURLContext_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v56 = swift_bridgeObjectRetain(a1);
    v57 = Set.description.getter(v56);
    v59 = v58;
    swift_bridgeObjectRelease();
    v60 = v57;
    v10 = v275;
    v277 = sub_1001A7FE4(v60, v59, v278);
    v16 = v273;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v277, v278, v54 + 4);
    swift_bridgeObjectRelease_n(a1, 2);
    v47 = v271;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "handleURLContexts %{private}s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    v61 = v54;
    v13 = v272;
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v62 = v274;
  v63 = (uint64_t)v266;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(uint64_t *)(a1 + 16) < 1)
      return;
LABEL_13:
    swift_bridgeObjectRetain(a1);
    v66 = (void *)sub_10014B8B8(v65);
    *(_QWORD *)&v67 = swift_bridgeObjectRelease().n128_u64[0];
    if (!v66)
    {
      __break(1u);
      return;
    }
    v68 = objc_msgSend(v66, "URL", v67);

    v69 = v259;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v68);

    v70 = v261;
    URLComponents.init(url:resolvingAgainstBaseURL:)(v69, 1);
    (*(void (**)(char *, uint64_t))(v260 + 8))(v69, v262);
    v71 = v265;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v265 + 48))(v70, 1, v43) == 1)
    {
      v72 = &qword_100295450;
      v73 = (uint64_t)v70;
LABEL_143:
      sub_10000A020(v73, v72);
      return;
    }
    v74 = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 32))(v47, v70, v43);
    v75 = URLComponents.queryItems.getter(v74);
    if (v75)
    {
      v77 = *(_QWORD *)(v75 + 16);
      v78 = v276;
      if (v77)
      {
        v79 = v10;
        v80 = v75 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        v81 = *(_QWORD *)(v79 + 72);
        v82 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v79 + 16);
        v83 = swift_bridgeObjectRetain(v75);
        v84 = v248;
        while (1)
        {
          v85 = v82(v84, v80, v78, v83);
          v86 = URLQueryItem.name.getter(v85);
          if (v86 == 0x614C656372756F73 && v87 == 0xEE0065676175676ELL)
          {
            swift_bridgeObjectRelease();
            v78 = v276;
            v16 = v273;
            goto LABEL_28;
          }
          v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v87, 0x614C656372756F73, 0xEE0065676175676ELL, 0);
          v89 = swift_bridgeObjectRelease();
          if ((v88 & 1) != 0)
            break;
          v78 = v276;
          (*(void (**)(char *, uint64_t, __n128))(v275 + 8))(v84, v276, v89);
          v80 += v81;
          --v77;
          v62 = v274;
          if (!v77)
          {
            v76 = swift_bridgeObjectRelease();
            v90 = 1;
            v43 = v270;
            v47 = v271;
            v10 = v275;
            v13 = v272;
            v16 = v273;
            v63 = (uint64_t)v266;
            goto LABEL_25;
          }
        }
        v78 = v276;
        v16 = v273;
        v62 = v274;
LABEL_28:
        v92 = swift_bridgeObjectRelease();
        v10 = v275;
        v91 = (uint64_t)v249;
        (*(void (**)(char *, char *, uint64_t, __n128))(v275 + 32))(v249, v84, v78, v92);
        v90 = 0;
        v43 = v270;
        v47 = v271;
        v13 = v272;
        v63 = (uint64_t)v266;
      }
      else
      {
        v90 = 1;
        v16 = v273;
LABEL_25:
        v91 = (uint64_t)v249;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v91, v90, 1, v78, v76);
      v93 = swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(v91, 1, v78, v93) != 1)
      {
        v261 = (char *)URLQueryItem.value.getter();
        v262 = v94;
        v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v91, v78);
LABEL_33:
        v95 = URLComponents.queryItems.getter(v75);
        if (v95)
        {
          v97 = *(_QWORD *)(v95 + 16);
          if (v97)
          {
            v98 = v95 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
            v99 = *(_QWORD *)(v10 + 72);
            v100 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16);
            v101 = swift_bridgeObjectRetain(v95);
            v102 = v276;
            v103 = v267;
            while (1)
            {
              v104 = v100(v103, v98, v102, v101);
              v105 = URLQueryItem.name.getter(v104);
              if (v105 == 0x614C746567726174 && v106 == 0xEE0065676175676ELL)
              {
                swift_bridgeObjectRelease();
                v102 = v276;
                goto LABEL_44;
              }
              v107 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, v106, 0x614C746567726174, 0xEE0065676175676ELL, 0);
              v108 = swift_bridgeObjectRelease();
              if ((v107 & 1) != 0)
                break;
              v10 = v275;
              v102 = v276;
              v103 = v267;
              (*(void (**)(char *, uint64_t, __n128))(v275 + 8))(v267, v276, v108);
              v98 += v99;
              if (!--v97)
              {
                v96 = swift_bridgeObjectRelease();
                v109 = 1;
                v43 = v270;
                v47 = v271;
                v13 = v272;
                v16 = v273;
                v62 = v274;
                v63 = (uint64_t)v266;
                goto LABEL_45;
              }
            }
            v10 = v275;
            v102 = v276;
LABEL_44:
            v16 = v273;
            v110 = swift_bridgeObjectRelease();
            v63 = (uint64_t)v266;
            (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 32))(v266, v267, v102, v110);
            v109 = 0;
            v43 = v270;
            v47 = v271;
            v13 = v272;
            v62 = v274;
          }
          else
          {
            v109 = 1;
            v102 = v276;
            v16 = v273;
          }
LABEL_45:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v63, v109, 1, v102, v96);
          v111 = swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(v63, 1, v102, v111) != 1)
          {
            v266 = (char *)URLQueryItem.value.getter();
            v267 = v112;
            v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v63, v102);
LABEL_49:
            v113 = URLComponents.queryItems.getter(v95);
            v115 = v263;
            if (v113)
            {
              v116 = *(_QWORD *)(v113 + 16);
              if (v116)
              {
                v117 = v113
                     + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
                v118 = *(_QWORD *)(v10 + 72);
                v119 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, __n128))(v10 + 16);
                v120 = swift_bridgeObjectRetain(v113);
                v121 = v276;
                v122 = v268;
                while (1)
                {
                  v123 = v119(v122, v117, v121, v120);
                  v124 = URLQueryItem.name.getter(v123);
                  if (v124 == 0x6F4C656372756F73 && v125 == 0xEC000000656C6163)
                  {
                    swift_bridgeObjectRelease();
                    v121 = v276;
                    goto LABEL_61;
                  }
                  v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v124, v125, 0x6F4C656372756F73, 0xEC000000656C6163, 0);
                  v127 = swift_bridgeObjectRelease();
                  if ((v126 & 1) != 0)
                    break;
                  v10 = v275;
                  v121 = v276;
                  v122 = v268;
                  (*(void (**)(uint64_t, uint64_t, __n128))(v275 + 8))(v268, v276, v127);
                  v117 += v118;
                  if (!--v116)
                  {
                    v114 = swift_bridgeObjectRelease();
                    v128 = 1;
                    v43 = v270;
                    v47 = v271;
                    v13 = v272;
                    v16 = v273;
                    v62 = v274;
                    goto LABEL_58;
                  }
                }
                v10 = v275;
                v121 = v276;
LABEL_61:
                v16 = v273;
                v130 = swift_bridgeObjectRelease();
                v129 = (uint64_t)v250;
                (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 32))(v250, v268, v121, v130);
                v128 = 0;
                v43 = v270;
                v47 = v271;
                v13 = v272;
                v62 = v274;
              }
              else
              {
                v128 = 1;
                v121 = v276;
                v16 = v273;
LABEL_58:
                v129 = (uint64_t)v250;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v129, v128, 1, v121, v114);
              v131 = swift_bridgeObjectRelease();
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(v129, 1, v121, v131) != 1)
              {
                v149 = URLQueryItem.value.getter();
                v151 = v150;
                (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v129, v121);
                if (v151)
                {
                  swift_bridgeObjectRetain(v151);
                  v152 = v263;
                  Locale.init(identifier:)(v149, v151);
                  v153 = type metadata accessor for Locale(0);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v152, 0, 1, v153);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v247 = type metadata accessor for Locale(0);
                  v133 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v247 - 8) + 56))(v263, 1, 1, v247);
                }
LABEL_65:
                v134 = URLComponents.queryItems.getter(v133);
                if (v134)
                {
                  v136 = *(_QWORD *)(v134 + 16);
                  if (v136)
                  {
                    v137 = v134
                         + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
                    v138 = *(_QWORD *)(v10 + 72);
                    v139 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, __n128))(v10 + 16);
                    v268 = v134;
                    v140 = swift_bridgeObjectRetain(v134);
                    v141 = v276;
                    v142 = v269;
                    while (1)
                    {
                      v143 = v139(v142, v137, v141, v140);
                      v144 = URLQueryItem.name.getter(v143);
                      if (v144 == 0x6F4C746567726174 && v145 == 0xEC000000656C6163)
                      {
                        swift_bridgeObjectRelease();
                        v141 = v276;
                        goto LABEL_79;
                      }
                      v146 = _stringCompareWithSmolCheck(_:_:expecting:)(v144, v145, 0x6F4C746567726174, 0xEC000000656C6163, 0);
                      v147 = swift_bridgeObjectRelease();
                      if ((v146 & 1) != 0)
                        break;
                      v10 = v275;
                      v141 = v276;
                      v142 = v269;
                      (*(void (**)(uint64_t, uint64_t, __n128))(v275 + 8))(v269, v276, v147);
                      v137 += v138;
                      if (!--v136)
                      {
                        v135 = swift_bridgeObjectRelease();
                        v148 = 1;
                        v43 = v270;
                        v47 = v271;
                        v13 = v272;
                        v16 = v273;
                        v62 = v274;
                        goto LABEL_76;
                      }
                    }
                    v10 = v275;
                    v141 = v276;
LABEL_79:
                    v16 = v273;
                    v155 = swift_bridgeObjectRelease();
                    v154 = (uint64_t)v251;
                    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 32))(v251, v269, v141, v155);
                    v148 = 0;
                    v43 = v270;
                    v47 = v271;
                    v13 = v272;
                    v62 = v274;
                  }
                  else
                  {
                    v148 = 1;
                    v141 = v276;
                    v16 = v273;
LABEL_76:
                    v154 = (uint64_t)v251;
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v154, v148, 1, v141, v135);
                  v156 = swift_bridgeObjectRelease();
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(v154, 1, v141, v156) == 1)
                  {
                    sub_10000A020(v154, &qword_100295448);
                  }
                  else
                  {
                    v157 = URLQueryItem.value.getter();
                    v159 = v158;
                    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v154, v141);
                    if (v159)
                    {
                      swift_bridgeObjectRetain(v159);
                      v160 = v264;
                      Locale.init(identifier:)(v157, v159);
                      v161 = type metadata accessor for Locale(0);
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v160, 0, 1, v161);
                      swift_bridgeObjectRelease();
                      goto LABEL_85;
                    }
                  }
                }
                v163 = type metadata accessor for Locale(0);
                v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v264, 1, 1, v163);
LABEL_85:
                v164 = URLComponents.queryItems.getter(v162);
                if (v164)
                {
                  v166 = *(_QWORD *)(v164 + 16);
                  v167 = v276;
                  if (v166)
                  {
                    v168 = v164
                         + ((*(unsigned __int8 *)(v275 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v275 + 80));
                    v169 = *(_QWORD *)(v275 + 72);
                    v170 = *(uint64_t (**)(unint64_t, unint64_t, uint64_t, __n128))(v275 + 16);
                    v171 = swift_bridgeObjectRetain(v164);
                    while (1)
                    {
                      v172 = v170(v62, v168, v167, v171);
                      v173 = URLQueryItem.name.getter(v172);
                      if (v173 == 1954047348 && v174 == 0xE400000000000000)
                      {
                        swift_bridgeObjectRelease();
                        v167 = v276;
                        goto LABEL_97;
                      }
                      v175 = _stringCompareWithSmolCheck(_:_:expecting:)(v173, v174, 1954047348, 0xE400000000000000, 0);
                      v176 = swift_bridgeObjectRelease();
                      if ((v175 & 1) != 0)
                        break;
                      v62 = v274;
                      v167 = v276;
                      (*(void (**)(unint64_t, uint64_t, __n128))(v275 + 8))(v274, v276, v176);
                      v168 += v169;
                      if (!--v166)
                      {
                        v165 = swift_bridgeObjectRelease();
                        v177 = 1;
                        v43 = v270;
                        v47 = v271;
                        v10 = v275;
                        v13 = v272;
                        v16 = v273;
                        goto LABEL_94;
                      }
                    }
                    v167 = v276;
                    v62 = v274;
LABEL_97:
                    v179 = swift_bridgeObjectRelease();
                    v10 = v275;
                    v178 = (uint64_t)v252;
                    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v275 + 32))(v252, v62, v167, v179);
                    v177 = 0;
                    v43 = v270;
                    v47 = v271;
                    v13 = v272;
                    v16 = v273;
                  }
                  else
                  {
                    v177 = 1;
                    v10 = v275;
LABEL_94:
                    v178 = (uint64_t)v252;
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v178, v177, 1, v167, v165);
                  v180 = swift_bridgeObjectRelease();
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(v178, 1, v167, v180) != 1)
                  {
                    v269 = URLQueryItem.value.getter();
                    v274 = v181;
                    v164 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v178, v167);
LABEL_102:
                    v182 = URLComponents.queryItems.getter(v164);
                    if (v182)
                    {
                      v184 = *(_QWORD *)(v182 + 16);
                      if (v184)
                      {
                        v185 = v10;
                        v186 = v182
                             + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
                        v187 = *(_QWORD *)(v185 + 72);
                        v188 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v185 + 16);
                        v189 = swift_bridgeObjectRetain(v182);
                        v190 = v276;
                        while (1)
                        {
                          v191 = v188(v16, v186, v190, v189);
                          v192 = URLQueryItem.name.getter(v191);
                          if (v192 == 0x6554746567726174 && v193 == 0xEA00000000007478)
                          {
                            swift_bridgeObjectRelease();
                            v190 = v276;
                            goto LABEL_114;
                          }
                          v194 = _stringCompareWithSmolCheck(_:_:expecting:)(v192, v193, 0x6554746567726174, 0xEA00000000007478, 0);
                          v195 = swift_bridgeObjectRelease();
                          if ((v194 & 1) != 0)
                            break;
                          v190 = v276;
                          v16 = v273;
                          (*(void (**)(char *, uint64_t, __n128))(v275 + 8))(v273, v276, v195);
                          v186 += v187;
                          if (!--v184)
                          {
                            v183 = swift_bridgeObjectRelease();
                            v196 = 1;
                            v43 = v270;
                            v47 = v271;
                            v10 = v275;
                            v13 = v272;
                            goto LABEL_111;
                          }
                        }
                        v190 = v276;
                        v16 = v273;
LABEL_114:
                        v198 = swift_bridgeObjectRelease();
                        v10 = v275;
                        v197 = (uint64_t)v253;
                        (*(void (**)(char *, char *, uint64_t, __n128))(v275 + 32))(v253, v16, v190, v198);
                        v196 = 0;
                        v43 = v270;
                        v47 = v271;
                        v13 = v272;
                      }
                      else
                      {
                        v196 = 1;
                        v190 = v276;
LABEL_111:
                        v197 = (uint64_t)v253;
                      }
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v197, v196, 1, v190, v183);
                      v199 = swift_bridgeObjectRelease();
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(v197, 1, v190, v199) != 1)
                      {
                        v268 = URLQueryItem.value.getter();
                        v273 = (char *)v200;
                        v182 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v197, v190);
LABEL_119:
                        v201 = URLComponents.queryItems.getter(v182);
                        if (v201)
                        {
                          v203 = *(_QWORD *)(v201 + 16);
                          if (v203)
                          {
                            v204 = v10;
                            v205 = v201
                                 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
                            v206 = *(_QWORD *)(v204 + 72);
                            v207 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v204 + 16);
                            v208 = swift_bridgeObjectRetain(v201);
                            v209 = v276;
                            while (1)
                            {
                              v210 = v207(v13, v205, v209, v208);
                              v211 = URLQueryItem.name.getter(v210);
                              if (v211 == 6517363 && v212 == 0xE300000000000000)
                              {
                                swift_bridgeObjectRelease();
                                v209 = v276;
                                goto LABEL_131;
                              }
                              v213 = _stringCompareWithSmolCheck(_:_:expecting:)(v211, v212, 6517363, 0xE300000000000000, 0);
                              v214 = swift_bridgeObjectRelease();
                              if ((v213 & 1) != 0)
                                break;
                              v209 = v276;
                              v13 = v272;
                              (*(void (**)(char *, uint64_t, __n128))(v275 + 8))(v272, v276, v214);
                              v205 += v206;
                              if (!--v203)
                              {
                                v202 = swift_bridgeObjectRelease();
                                v215 = 1;
                                v43 = v270;
                                v47 = v271;
                                v10 = v275;
                                goto LABEL_128;
                              }
                            }
                            v209 = v276;
                            v13 = v272;
LABEL_131:
                            v217 = swift_bridgeObjectRelease();
                            v10 = v275;
                            v216 = (uint64_t)v254;
                            (*(void (**)(char *, char *, uint64_t, __n128))(v275 + 32))(v254, v13, v209, v217);
                            v215 = 0;
                            v43 = v270;
                            v47 = v271;
                          }
                          else
                          {
                            v215 = 1;
                            v209 = v276;
LABEL_128:
                            v216 = (uint64_t)v254;
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v216, v215, 1, v209, v202);
                          v218 = swift_bridgeObjectRelease();
                          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(v216, 1, v209, v218) != 1)
                          {
                            v276 = URLQueryItem.value.getter();
                            v219 = v220;
                            (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v216, v209);
                            goto LABEL_136;
                          }
                          sub_10000A020(v216, &qword_100295448);
                        }
                        v276 = 0;
                        v219 = 0;
LABEL_136:
                        v221 = v265;
                        v222 = v257;
                        v223 = (*(uint64_t (**)(char *, char *, uint64_t))(v265 + 16))(v257, v47, v43);
                        v224 = Logger.logObject.getter(v223);
                        v225 = static os_log_type_t.info.getter(v224);
                        if (os_log_type_enabled(v224, v225))
                        {
                          v226 = (uint8_t *)swift_slowAlloc(12, -1);
                          v227 = swift_slowAlloc(32, -1);
                          v278[0] = v227;
                          *(_DWORD *)v226 = 136380675;
                          v277 = URLComponents.queryItems.getter(v227);
                          v228 = sub_100006DF4(&qword_100295458);
                          v229 = String.init<A>(describing:)(&v277, v228);
                          v277 = sub_1001A7FE4(v229, v230, v278);
                          v43 = v270;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v277, v278, v226 + 4);
                          v231 = swift_bridgeObjectRelease();
                          v232 = *(void (**)(char *, uint64_t, __n128))(v221 + 8);
                          v232(v222, v43, v231);
                          _os_log_impl((void *)&_mh_execute_header, v224, v225, "handleURLContexts parameters: %{private}s", v226, 0xCu);
                          swift_arrayDestroy(v227, 1, (char *)&type metadata for Any + 8);
                          swift_slowDealloc(v227, -1, -1);
                          swift_slowDealloc(v226, -1, -1);
                        }
                        else
                        {
                          v232 = *(void (**)(char *, uint64_t, __n128))(v221 + 8);
                          ((void (*)(char *, uint64_t))v232)(v222, v43);
                        }

                        v233 = (uint64_t)v255;
                        v234 = type metadata accessor for Locale(0);
                        v235 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v234 - 8) + 48);
                        v236 = (uint64_t)v263;
                        v237 = v235(v263, 1, v234);
                        sub_10000B074(v264, v233, (uint64_t *)&unk_10028FE50);
                        if (v237 == 1 || v235((char *)v233, 1, v234) == 1)
                        {
                          sub_10000A020(v233, (uint64_t *)&unk_10028FE50);
                          v238 = (_QWORD *)swift_allocObject(&unk_10026E050, 104, 7);
                          v239 = v258;
                          v240 = v261;
                          v238[2] = v258;
                          v238[3] = v240;
                          v241 = v266;
                          v238[4] = v262;
                          v238[5] = v241;
                          v242 = v269;
                          v238[6] = v267;
                          v238[7] = v242;
                          v243 = v268;
                          v238[8] = v274;
                          v238[9] = v243;
                          v244 = v276;
                          v238[10] = v273;
                          v238[11] = v244;
                          v238[12] = v219;
                          v245 = v239;
                          sub_100155C78((uint64_t)sub_100157B0C, (uint64_t)v238);
                          swift_release(v238);
                          sub_10000A020(v264, (uint64_t *)&unk_10028FE50);
                          ((void (*)(char *, uint64_t))v232)(v271, v43);
                          v73 = v236;
                          v72 = (uint64_t *)&unk_10028FE50;
                        }
                        else
                        {
                          sub_10000A020(v233, (uint64_t *)&unk_10028FE50);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v246 = v264;
                          sub_10014F6F0(v236, v264, v269, v274, v268, (uint64_t)v273, v276, v219);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          sub_10000A020(v246, (uint64_t *)&unk_10028FE50);
                          ((void (*)(char *, uint64_t))v232)(v271, v43);
                          v73 = v236;
                          v72 = (uint64_t *)&unk_10028FE50;
                        }
                        goto LABEL_143;
                      }
                      v182 = sub_10000A020(v197, &qword_100295448);
                    }
                    v268 = 0;
                    v273 = 0;
                    goto LABEL_119;
                  }
                  v164 = sub_10000A020(v178, &qword_100295448);
                }
                v269 = 0;
                v274 = 0;
                goto LABEL_102;
              }
              sub_10000A020(v129, &qword_100295448);
              v115 = v263;
            }
            v132 = type metadata accessor for Locale(0);
            v133 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 56))(v115, 1, 1, v132);
            goto LABEL_65;
          }
          v95 = sub_10000A020(v63, &qword_100295448);
        }
        v266 = 0;
        v267 = 0;
        goto LABEL_49;
      }
      v75 = sub_10000A020(v91, &qword_100295448);
    }
    v261 = 0;
    v262 = 0;
    goto LABEL_33;
  }
  if (a1 < 0)
    v64 = a1;
  else
    v64 = a1 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v64) >= 1)
    goto LABEL_13;
}

uint64_t sub_10014DB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  _OWORD v104[3];

  v1 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v1);
  v3 = (char *)&v82 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for StoredTranslationResult(0);
  v93 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v91 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v92 = (char *)&v82 - v8;
  v9 = __chkstk_darwin(v7);
  v99 = (char *)&v82 - v10;
  v11 = __chkstk_darwin(v9);
  v100 = (char *)&v82 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v82 - v13;
  v102 = type metadata accessor for SpeechResultOrigin(0);
  v15 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for StoredSpeechResult(0);
  v89 = *(_QWORD *)(v21 - 8);
  v90 = v21;
  v22 = __chkstk_darwin(v21);
  v88 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v95 = (char *)&v82 - v25;
  v26 = __chkstk_darwin(v24);
  v96 = (char *)&v82 - v27;
  v28 = __chkstk_darwin(v26);
  v97 = (char *)&v82 - v29;
  __chkstk_darwin(v28);
  v98 = (char *)&v82 - v30;
  v31 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v31, "objectForKey:", v32);

  if (v33)
  {
    _bridgeAnyObjectToAny(_:)(v104, v33);
    swift_unknownObjectRelease(v33);
    sub_10000A020((uint64_t)v104, (uint64_t *)&unk_10028C0B0);
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v94 = v14;
    v103 = v0;
    v87 = v4;
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10000F66C(v34, (uint64_t)qword_1002AA338);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Inject fake session history", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
    v39 = enum case for SpeechResultOrigin.text(_:);
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
    v41 = v102;
    v40(v17, enum case for SpeechResultOrigin.text(_:), v102);
    v42 = v40;
    v43 = (uint64_t)v98;
    StoredSpeechResult.init(text:sanitizedText:locale:origin:)(0x2065726120776F48, 0xEC0000003F756F79, 0, 0, v20, v17);
    Locale.init(identifier:)(0x45445F6564, 0xE500000000000000);
    v44 = (uint64_t)v94;
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(0x7468656720656957, 0xEB000000003F7327, v20, 1, 0, 0);
    v45 = sub_10014BDEC();
    v46 = type metadata accessor for UUID(0);
    v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
    v101(v3, 1, 1, v46);
    sub_1001550F4(v43, v44, 0, v3, v45);
    v48 = v47;
    swift_release(v45);

    sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028F1B0);
    Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
    v85 = v39;
    v42(v17, v39, v41);
    v49 = (uint64_t)v97;
    StoredSpeechResult.init(text:sanitizedText:locale:origin:)(0x2065726120776F48, 0xEC0000003F756F79, 0, 0, v20, v17);
    Locale.init(identifier:)(0x53455F7365, 0xE500000000000000);
    v50 = (uint64_t)v100;
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(0x65206F6D6F43BFC2, 0xAD00003F73617473, v20, 1, 0, 0);
    v51 = sub_10014BDEC();
    v101(v3, 1, 1, v46);
    sub_1001550F4(v49, v50, 0, v3, v51);
    v53 = v52;
    swift_release(v51);

    sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028F1B0);
    Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
    v54 = v39;
    v55 = v102;
    v42(v17, v54, v102);
    v56 = v42;
    v83 = v42;
    v84 = 0x80000001001FF8B0;
    v57 = (uint64_t)v96;
    StoredSpeechResult.init(text:sanitizedText:locale:origin:)(0xD000000000000010, 0x80000001001FF8B0, 0, 0, v20, v17);
    Locale.init(identifier:)(0x55525F7572, 0xE500000000000000);
    v58 = (uint64_t)v99;
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(0x1000000000000023, 0x80000001001FF8D0, v20, 1, 0, 0);
    v59 = sub_10014BDEC();
    v60 = v46;
    v61 = v46;
    v86 = v46;
    v62 = v101;
    v101(v3, 1, 1, v60);
    sub_1001550F4(v57, v58, 0, v3, v59);
    v64 = v63;
    swift_release(v59);

    sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028F1B0);
    Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
    v65 = v85;
    v56(v17, v85, v55);
    v66 = (uint64_t)v95;
    StoredSpeechResult.init(text:sanitizedText:locale:origin:)(0xD000000000000010, v84, 0, 0, v20, v17);
    Locale.init(identifier:)(0x53455F7365, 0xE500000000000000);
    v67 = (uint64_t)v92;
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(0x6F6820657571BFC2, 0xAE003F7365206172, v20, 1, 0, 0);
    v68 = sub_10014BDEC();
    v62(v3, 1, 1, v61);
    sub_1001550F4(v66, v67, 0, v3, v68);
    v70 = v69;
    swift_release(v68);

    sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028F1B0);
    Locale.init(identifier:)(0x45445F6564, 0xE500000000000000);
    v83(v17, v65, v102);
    v71 = (uint64_t)v88;
    StoredSpeechResult.init(text:sanitizedText:locale:origin:)(0xD00000000000003DLL, 0x80000001001FF900, 0, 0, v20, v17);
    Locale.init(identifier:)(0x57545F687ALL, 0xE500000000000000);
    v72 = (uint64_t)v91;
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(0x1000000000000027, 0x80000001001FF940, v20, 1, 0x1000000000000036, 0x80000001001FF970);
    v73 = sub_10014BDEC();
    v101(v3, 1, 1, v86);
    sub_1001550F4(v71, v72, 0, v3, v73);
    v75 = v74;
    swift_release(v73);

    sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028F1B0);
    TranslationStoreCoreData.save()();
    v76 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
    v77 = v72;
    v78 = v87;
    v76(v77, v87);
    v79 = v90;
    v80 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v80(v71, v90);
    v76(v67, v78);
    v80((uint64_t)v95, v79);
    v76((uint64_t)v99, v78);
    v80((uint64_t)v96, v79);
    v76((uint64_t)v100, v78);
    v80((uint64_t)v97, v79);
    v76((uint64_t)v94, v78);
    return ((uint64_t (*)(char *, uint64_t))v80)(v98, v79);
  }
  else
  {
    memset(v104, 0, 32);
    return sub_10000A020((uint64_t)v104, (uint64_t *)&unk_10028C0B0);
  }
}

uint64_t sub_10014E55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for Locale(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[6] = swift_task_alloc(v8);
  v5[7] = swift_task_alloc(v8);
  v9 = type metadata accessor for MainActor(0);
  v5[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v5[9] = v10;
  v5[10] = v11;
  return swift_task_switch(sub_10014E600, v10, v11);
}

uint64_t sub_10014E600()
{
  uint64_t *v0;
  uint64_t **v1;

  v0[11] = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for OnBoardingPresenter(0)), "init");
  v1 = (uint64_t **)swift_task_alloc(dword_100294C4C);
  v0[12] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10014E66C;
  return sub_10013E340(v0[2]);
}

uint64_t sub_10014E66C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  return swift_task_switch(sub_10014E6B8, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_10014E6B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t KeyPath;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  id v13;
  void (*v14)(uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  id v24;
  NSString v25;
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  NSString v32;
  NSString v33;
  id v34;
  id v35;
  NSString v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  id v41;
  void *v42;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 64));
  v2 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_initialLocalePair);
  v3 = *(void **)(v0 + 88);
  if (v2)
  {
    v5 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 40);
    v42 = *(void **)(v0 + 88);
    v8 = *(void **)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_conversation);
    v41 = v2;
    v9 = objc_msgSend(v41, "sourceLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v9);

    KeyPath = swift_getKeyPath(&unk_1001F38D8);
    v11 = swift_getKeyPath(&unk_1001F3900);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v12(v5, v4, v6);
    v13 = v8;
    static Published.subscript.setter(v5, v13, KeyPath, v11);
    sub_1000766FC();
    v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v14(v4, v6);
    v3 = v41;
    v15 = objc_msgSend(v41, "targetLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v16 = swift_getKeyPath(&unk_1001F3968);
    v17 = swift_getKeyPath(&unk_1001F3990);
    v12(v5, v4, v6);
    static Published.subscript.setter(v5, v13, v16, v17);
    sub_100076734();
    v14(v4, v6);
    v18 = objc_msgSend(v41, "sourceLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = (void *)objc_opt_self(NSUserDefaults);
    v20 = objc_msgSend(v19, "standardUserDefaults");
    Locale.identifier.getter(v20);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setObject:forKey:", v21, v22);

    v14(v4, v6);
    v23 = objc_msgSend(v41, "targetLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v24 = objc_msgSend(v19, "standardUserDefaults");
    Locale.identifier.getter(v24);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "setObject:forKey:", v25, v26);

    v28 = Locale.identifier.getter(v27);
    sub_10015E498(v28, v29);
    v14(v4, v6);
    v30 = objc_msgSend(v41, "sourceLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v31 = objc_msgSend(v19, "standardUserDefaults");
    Locale.identifier.getter(v31);
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v31, "setObject:forKey:", v32, v33);

    v14(v4, v6);
    v34 = objc_msgSend(v41, "targetLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v35 = objc_msgSend(v19, "standardUserDefaults");
    Locale.identifier.getter(v35);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v37 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "setObject:forKey:", v36, v37);

    v14(v4, v6);
  }
  v38 = *(_QWORD *)(v0 + 48);
  v39 = *(_QWORD *)(v0 + 56);

  swift_task_dealloc(v39);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10014EB54()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v12;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window] = 0;
  v1 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_conversation;
  v2 = objc_allocWithZone((Class)type metadata accessor for ConversationManager(0));
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  v4 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context;
  v5 = type metadata accessor for ConversationContext(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)&v3[v4] = sub_100062C00();
  v6 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_sceneContext;
  v7 = type metadata accessor for SceneContext(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)&v3[v6] = sub_10014B208();
  v8 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_sharedTranslationOptions;
  *(_QWORD *)&v3[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SharedTranslationOptions(0)), "init");
  v9 = OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_store;
  v10 = type metadata accessor for TranslationStoreCoreData(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)&v3[v9] = TranslationStoreCoreData.init(inMemoryOnly:)(0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___translationSession] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___favoritesImporter] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate____lazy_storage___sessionManager] = 0;

  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for SceneDelegate();
  return objc_msgSendSuper2(&v12, "init");
}

id sub_10014ECBC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(_TtC17SequoiaTranslator13SceneDelegate);
}

void sub_10014EDB4(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(__n128), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t i;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  id v48;
  Swift::String v49;
  void *object;
  __n128 v51;
  char *v52;
  int64_t v53;
  Swift::String v54;
  _QWORD *v55;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  _QWORD *v72;
  __n128 v73;
  _QWORD v74[2];
  void (*v75)(__n128);
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];
  _QWORD v84[2];
  _BYTE v85[24];

  v74[1] = a5;
  v75 = a4;
  v8 = type metadata accessor for Locale(0);
  v81 = *(_QWORD *)(v8 - 8);
  v82 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v29);
    v12 = (uint64_t *)(a2 + 16);
    if (v11)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  v12 = (uint64_t *)(a2 + 16);
  if (!v11)
    goto LABEL_14;
LABEL_3:
  if (v11 < 1)
    goto LABEL_56;
  v13 = 0;
  v79 = a3;
  v80 = (_QWORD *)(a1 & 0xC000000000000001);
  v14 = a1;
  v15 = v82;
  do
  {
    if (v80)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
    else
      v16 = *(id *)(a1 + 8 * v13 + 32);
    v17 = v16;
    ++v13;
    v18 = objc_msgSend(v16, "sourceLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v20 = Locale.identifier.getter(v19);
    v22 = v21;
    v23 = *(void (**)(char *, uint64_t))(v81 + 8);
    v23(v10, v15);
    swift_beginAccess(v12, v85, 33, 0);
    sub_100151298(v83, v20, v22);
    swift_endAccess(v85);
    v24 = objc_msgSend(v17, "targetLocale", swift_bridgeObjectRelease().n128_f64[0]);
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = Locale.identifier.getter(v25);
    v28 = v27;
    v23(v10, v15);
    swift_beginAccess(v12, v85, 33, 0);
    sub_100151298(v83, v26, v28);
    swift_endAccess(v85);

    swift_bridgeObjectRelease();
    a1 = v14;
  }
  while (v11 != v13);
  swift_bridgeObjectRelease();
  a3 = v79;
LABEL_15:
  v80 = (_QWORD *)(a3 + 16);
  swift_beginAccess(v12, v85, 0, 0);
  v30 = *v12;
  v31 = *(_QWORD *)(*v12 + 56);
  v76 = *v12 + 56;
  v32 = 1 << *(_BYTE *)(v30 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v77 = (unint64_t)(v32 + 63) >> 6;
  v78 = v30;
  swift_bridgeObjectRetain(v30);
  v35 = 0;
  if (v34)
    goto LABEL_34;
LABEL_20:
  v36 = v35 + 1;
  if (__OFADD__(v35, 1))
    goto LABEL_53;
  if (v36 >= v77)
    goto LABEL_50;
  v37 = *(_QWORD *)(v76 + 8 * v36);
  ++v35;
  if (!v37)
  {
    v35 = v36 + 1;
    if (v36 + 1 >= v77)
      goto LABEL_50;
    v37 = *(_QWORD *)(v76 + 8 * v35);
    if (!v37)
    {
      v35 = v36 + 2;
      if (v36 + 2 >= v77)
        goto LABEL_50;
      v37 = *(_QWORD *)(v76 + 8 * v35);
      if (!v37)
      {
        v38 = v36 + 3;
        if (v38 < v77)
        {
          v37 = *(_QWORD *)(v76 + 8 * v38);
          if (v37)
          {
            v35 = v38;
            goto LABEL_33;
          }
          while (1)
          {
            v35 = v38 + 1;
            if (__OFADD__(v38, 1))
              goto LABEL_55;
            if (v35 >= v77)
              break;
            v37 = *(_QWORD *)(v76 + 8 * v35);
            ++v38;
            if (v37)
              goto LABEL_33;
          }
        }
LABEL_50:
        swift_release(v78);
        v72 = v80;
        swift_beginAccess(v80, v83, 0, 0);
        v73 = swift_bridgeObjectRetain(*v72);
        v75(v73);
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
LABEL_33:
  v34 = (v37 - 1) & v37;
  for (i = __clz(__rbit64(v37)) + (v35 << 6); ; i = v40 | (v35 << 6))
  {
    v41 = (uint64_t *)(*(_QWORD *)(v78 + 48) + 16 * i);
    v42 = *v41;
    v43 = v41[1];
    v83[0] = *v41;
    v83[1] = v43;
    v84[0] = 95;
    v84[1] = 0xE100000000000000;
    v44 = sub_10000B030();
    swift_bridgeObjectRetain(v43);
    v45 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v84, &type metadata for String, &type metadata for String, v44, v44);
    if (!v45[2])
      break;
    v46 = v45[4];
    v47 = (void *)v45[5];
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRelease();
    v48 = objc_msgSend((id)objc_opt_self(NSLocale), "currentLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v49._countAndFlagsBits = v46;
    v49._object = v47;
    object = Locale.localizedString(forIdentifier:)(v49).value._object;
    v51 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v81 + 8))(v10, v82, v51);
    if (!object)
    {
      swift_bridgeObjectRelease();
      if (!v34)
        goto LABEL_20;
      goto LABEL_34;
    }
    v79 = v34;
    v52 = v10;
    v53 = v35;
    v54 = String.lowercased()();
    swift_bridgeObjectRelease();
    v55 = v80;
    swift_beginAccess(v80, v83, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v55);
    v84[0] = *v55;
    v57 = v84[0];
    *v55 = 0x8000000000000000;
    v59 = sub_1001A869C(v54._countAndFlagsBits, (uint64_t)v54._object);
    v60 = *(_QWORD *)(v57 + 16);
    v61 = (v58 & 1) == 0;
    v62 = v60 + v61;
    if (__OFADD__(v60, v61))
      goto LABEL_52;
    v63 = v58;
    if (*(_QWORD *)(v57 + 24) >= v62)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v66 = (_QWORD *)v84[0];
        if ((v58 & 1) != 0)
          goto LABEL_44;
      }
      else
      {
        sub_1001ABF74();
        v66 = (_QWORD *)v84[0];
        if ((v63 & 1) != 0)
          goto LABEL_44;
      }
    }
    else
    {
      sub_1001AA6F0(v62, isUniquelyReferenced_nonNull_native);
      v64 = sub_1001A869C(v54._countAndFlagsBits, (uint64_t)v54._object);
      if ((v63 & 1) != (v65 & 1))
        goto LABEL_57;
      v59 = v64;
      v66 = (_QWORD *)v84[0];
      if ((v63 & 1) != 0)
      {
LABEL_44:
        v67 = (uint64_t *)(v66[7] + 16 * v59);
        swift_bridgeObjectRelease();
        *v67 = v42;
        v67[1] = v43;
        goto LABEL_48;
      }
    }
    v66[(v59 >> 6) + 8] |= 1 << v59;
    *(Swift::String *)(v66[6] + 16 * v59) = v54;
    v68 = (uint64_t *)(v66[7] + 16 * v59);
    *v68 = v42;
    v68[1] = v43;
    v69 = v66[2];
    v70 = __OFADD__(v69, 1);
    v71 = v69 + 1;
    if (v70)
      goto LABEL_54;
    v66[2] = v71;
    swift_bridgeObjectRetain(v54._object);
LABEL_48:
    *v80 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v83);
    v35 = v53;
    v10 = v52;
    v34 = v79;
    if (!v79)
      goto LABEL_20;
LABEL_34:
    v40 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

double sub_10014F400(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, __n128);
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  double result;

  v4 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_10000A05C(0, (unint64_t *)&qword_100295470, _LTLocalePair_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  v7 = swift_retain(v3);
  v4(v6, v7);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10014F46C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int64_t v30;
  _QWORD v31[4];

  if (!a2)
  {
    v25 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a4, 1, 1, v25);
    return;
  }
  v29 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v30 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v11 = 0;
  if (!v10)
    goto LABEL_6;
LABEL_5:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = 16 * i;
    v18 = (uint64_t *)(*(_QWORD *)(a3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = (uint64_t *)(*(_QWORD *)(a3 + 56) + v17);
    v23 = *v21;
    v22 = v21[1];
    v31[2] = a1;
    v31[3] = a2;
    v31[0] = v20;
    v31[1] = v19;
    v24 = sub_10000B030();
    swift_bridgeObjectRetain(v22);
    if ((StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v24, v24) & 1) != 0)
    {
      Locale.init(identifier:)(v23, v22);
      swift_release(a3);
      v26 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a4, 0, 1, v26);
      return;
    }
    swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_5;
LABEL_6:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v30)
      goto LABEL_25;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_25;
      v15 = *(_QWORD *)(v29 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_25;
        v15 = *(_QWORD *)(v29 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_19:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
  {
LABEL_25:
    swift_release(a3);
    v27 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a4, 1, 1, v27);
    return;
  }
  v15 = *(_QWORD *)(v29 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v30)
      goto LABEL_25;
    v15 = *(_QWORD *)(v29 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10014F6F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  _BOOL4 v54;
  uint64_t v55;
  Class v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, Class);
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t v81;
  Class v82;
  uint64_t v83;
  char *v84;
  void *v85;
  void (*v86)(char *, char *, Class);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  char *v92;
  void (*v93)(char *, Class);
  uint64_t v94;
  uint64_t result;
  char *v96;
  void *v97;
  void (*v98)(char *, char *, Class);
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, Class);
  char *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  char v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  char v133;
  unint64_t v134;
  id v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  Class v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  id v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  char v159;
  id v160;
  char *v161;
  id v162;
  Class isa;
  uint64_t v164;
  uint64_t v165;
  int v166;
  os_log_t v167;
  _QWORD *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  uint64_t v193;
  Class v194;
  unint64_t v195;
  __int128 v196;
  __int128 v197;
  Class v198;
  _OWORD v199[2];

  v186 = a7;
  v178 = a6;
  v172 = a5;
  v188 = a3;
  v181 = type metadata accessor for Notification(0);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v179 = (char *)&v164 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v13);
  v169 = (char *)&v164 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (objc_class *)type metadata accessor for Locale(0);
  v193 = *((_QWORD *)v15 - 1);
  v194 = v15;
  v16 = __chkstk_darwin(v15);
  v171 = (char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v170 = (char *)&v164 - v19;
  v20 = __chkstk_darwin(v18);
  v174 = (char *)&v164 - v21;
  v22 = __chkstk_darwin(v20);
  v184 = (char *)&v164 - v23;
  v24 = __chkstk_darwin(v22);
  v185 = (char *)&v164 - v25;
  __chkstk_darwin(v24);
  v173 = (char *)&v164 - v26;
  v27 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v28 = __chkstk_darwin(v27);
  v168 = (uint64_t *)((char *)&v164 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = __chkstk_darwin(v28);
  v177 = (uint64_t)&v164 - v31;
  v32 = __chkstk_darwin(v30);
  v176 = (uint64_t)&v164 - v33;
  v34 = __chkstk_darwin(v32);
  v183 = (uint64_t)&v164 - v35;
  v36 = __chkstk_darwin(v34);
  v182 = (uint64_t)&v164 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v164 - v39;
  v41 = __chkstk_darwin(v38);
  v43 = (char *)&v164 - v42;
  v44 = __chkstk_darwin(v41);
  v46 = (char *)&v164 - v45;
  __chkstk_darwin(v44);
  v48 = (char *)&v164 - v47;
  if (qword_10028A3F0 != -1)
    swift_once(&qword_10028A3F0, sub_100120E88);
  v49 = type metadata accessor for Logger(0);
  v50 = sub_10000F66C(v49, (uint64_t)qword_1002AA2D8);
  v189 = a1;
  sub_10000B074(a1, (uint64_t)v48, (uint64_t *)&unk_10028FE50);
  v190 = a2;
  sub_10000B074(a2, (uint64_t)v46, (uint64_t *)&unk_10028FE50);
  swift_bridgeObjectRetain_n(a8, 2);
  v51 = swift_bridgeObjectRetain_n(a4, 4);
  v175 = v50;
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter();
  v54 = os_log_type_enabled(v52, (os_log_type_t)v53);
  v192 = a4;
  v187 = a8;
  if (v54)
  {
    v166 = v53;
    v167 = v52;
    v55 = swift_slowAlloc(52, -1);
    v165 = swift_slowAlloc(128, -1);
    *(_QWORD *)&v199[0] = v165;
    *(_DWORD *)v55 = 136447235;
    sub_10000B074((uint64_t)v48, (uint64_t)v43, (uint64_t *)&unk_10028FE50);
    v57 = v193;
    v56 = v194;
    v58 = *(uint64_t (**)(char *, uint64_t, Class))(v193 + 48);
    v59 = v58(v43, 1, v194);
    if ((_DWORD)v59 == 1)
    {
      sub_10000A020((uint64_t)v43, (uint64_t *)&unk_10028FE50);
      v60 = 0xE300000000000000;
      v61 = 7104878;
    }
    else
    {
      v61 = Locale.identifier.getter(v59);
      v60 = v63;
      (*(void (**)(char *, Class))(v57 + 8))(v43, v56);
    }
    *(_QWORD *)&v197 = sub_1001A7FE4(v61, v60, (uint64_t *)v199);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, (char *)&v197 + 8, v55 + 4);
    swift_bridgeObjectRelease();
    sub_10000A020((uint64_t)v48, (uint64_t *)&unk_10028FE50);
    *(_WORD *)(v55 + 12) = 2082;
    sub_10000B074((uint64_t)v46, (uint64_t)v40, (uint64_t *)&unk_10028FE50);
    v64 = v58(v40, 1, v56);
    if ((_DWORD)v64 == 1)
    {
      sub_10000A020((uint64_t)v40, (uint64_t *)&unk_10028FE50);
      v65 = 0xE300000000000000;
      v66 = 7104878;
    }
    else
    {
      v66 = Locale.identifier.getter(v64);
      v65 = v67;
      (*(void (**)(char *, Class))(v193 + 8))(v40, v56);
    }
    v68 = v191;
    *(_QWORD *)&v197 = sub_1001A7FE4(v66, v65, (uint64_t *)v199);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, (char *)&v197 + 8, v55 + 14);
    swift_bridgeObjectRelease();
    sub_10000A020((uint64_t)v46, (uint64_t *)&unk_10028FE50);
    *(_WORD *)(v55 + 22) = 2050;
    v69 = v192;
    if (v192)
    {
      v70 = v188;
      v71 = String.count.getter(v188, v192);
      swift_bridgeObjectRelease();
      v72 = v69;
    }
    else
    {
      v71 = 0;
      v72 = 0xE300000000000000;
      v70 = 7104878;
    }
    *(_QWORD *)&v197 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, (char *)&v197 + 8, v55 + 24);
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 32) = 2085;
    swift_bridgeObjectRetain(v69);
    *(_QWORD *)&v197 = sub_1001A7FE4(v70, v72, (uint64_t *)v199);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, (char *)&v197 + 8, v55 + 34);
    swift_bridgeObjectRelease_n(v69, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 42) = 2082;
    v73 = v187;
    if (v187)
      v74 = v186;
    else
      v74 = 7104878;
    if (v187)
      v75 = v187;
    else
      v75 = 0xE300000000000000;
    swift_bridgeObjectRetain(v187);
    *(_QWORD *)&v197 = sub_1001A7FE4(v74, v75, (uint64_t *)v199);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, (char *)&v197 + 8, v55 + 44);
    swift_bridgeObjectRelease_n(v73, 2);
    swift_bridgeObjectRelease();
    v76 = v167;
    _os_log_impl((void *)&_mh_execute_header, v167, (os_log_type_t)v166, "openURL sourceLanguage: %{public}s; targetLanguage: %{public}s; text (length: %{public}ld: %{sensitive}s; linkSource: %{public}s",
      (uint8_t *)v55,
      0x34u);
    v77 = v165;
    swift_arrayDestroy(v165, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    v62 = v68;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000A020((uint64_t)v48, (uint64_t *)&unk_10028FE50);
    sub_10000A020((uint64_t)v46, (uint64_t *)&unk_10028FE50);

    swift_bridgeObjectRelease_n(a8, 2);
    swift_bridgeObjectRelease_n(a4, 3);
    v62 = v191;
  }
  v78 = *(_QWORD *)&v62[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context];
  KeyPath = swift_getKeyPath(&unk_1001F3890);
  v80 = swift_getKeyPath(&unk_1001F38B8);
  v199[0] = 0uLL;
  swift_retain(v78);
  static Published.subscript.setter(v199, v78, KeyPath, v80);
  sub_100064700();
  v81 = v182;
  sub_10000B074(v189, v182, (uint64_t *)&unk_10028FE50);
  v83 = v193;
  v82 = v194;
  v191 = *(char **)(v193 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, Class))v191)(v81, 1, v194) == 1)
  {
    sub_10000A020(v81, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    v84 = v173;
    (*(void (**)(char *, uint64_t, Class))(v83 + 32))(v173, v81, v82);
    v85 = *(void **)&v62[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_conversation];
    v86 = *(void (**)(char *, char *, Class))(v83 + 16);
    v87 = v185;
    v86(v185, v84, v82);
    v88 = swift_getKeyPath(&unk_1001F38D8);
    v89 = swift_getKeyPath(&unk_1001F3900);
    v90 = v184;
    v86(v184, v87, v194);
    v91 = v85;
    v92 = v90;
    v82 = v194;
    static Published.subscript.setter(v92, v91, v88, v89);
    sub_1000766FC();
    v93 = *(void (**)(char *, Class))(v83 + 8);
    v93(v87, v82);
    v93(v84, v82);
  }
  v94 = v183;
  sub_10000B074(v190, v183, (uint64_t *)&unk_10028FE50);
  if (((unsigned int (*)(uint64_t, uint64_t, Class))v191)(v94, 1, v82) == 1)
  {
    result = sub_10000A020(v94, (uint64_t *)&unk_10028FE50);
    if (!v192)
      return result;
  }
  else
  {
    v96 = v174;
    (*(void (**)(char *, uint64_t, Class))(v83 + 32))(v174, v94, v82);
    v97 = *(void **)&v62[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_conversation];
    v98 = *(void (**)(char *, char *, Class))(v83 + 16);
    v99 = v78;
    v100 = v185;
    v98(v185, v96, v194);
    v101 = swift_getKeyPath(&unk_1001F3968);
    v102 = swift_getKeyPath(&unk_1001F3990);
    v103 = v184;
    v98(v184, v100, v194);
    static Published.subscript.setter(v103, v97, v101, v102);
    sub_100076734();
    v104 = *(void (**)(char *, Class))(v83 + 8);
    v105 = v100;
    v78 = v99;
    v82 = v194;
    v104(v105, v194);
    result = ((uint64_t (*)(char *, Class))v104)(v96, v82);
    if (!v192)
      return result;
  }
  v106 = v181;
  v107 = Logger.logObject.getter(result);
  v108 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v107, v108))
  {
    v109 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v109 = 0;
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Asked to open translation from an URL.", v109, 2u);
    swift_slowDealloc(v109, -1, -1);
  }

  v110 = sub_1001A4AA4((uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v197) = 0;
  v111 = sub_10005DE7C();
  AnyHashable.init<A>(_:)(v199, &v197, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v111);
  v198 = (Class)&type metadata for String;
  v112 = v192;
  *(_QWORD *)&v197 = v188;
  *((_QWORD *)&v197 + 1) = v192;
  sub_10003EA2C(&v197, &v196);
  swift_bridgeObjectRetain(v112);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v110);
  v195 = v110;
  sub_1001AAF08(&v196, (uint64_t)v199, isUniquelyReferenced_nonNull_native);
  v114 = v195;
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)v199);
  LOBYTE(v197) = 5;
  AnyHashable.init<A>(_:)(v199, &v197, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v111);
  v115 = v106;
  v116 = v193;
  v117 = v187
      && (v186 == 0x697463416576696CLL && v187 == 0xEC00000079746976
       || (_stringCompareWithSmolCheck(_:_:expecting:)(v186, v187, 0x697463416576696CLL, 0xEC00000079746976, 0) & 1) != 0);
  v198 = (Class)&type metadata for Bool;
  LOBYTE(v197) = v117;
  sub_10003EA2C(&v197, &v196);
  v118 = swift_isUniquelyReferenced_nonNull_native(v114);
  v195 = v114;
  sub_1001AAF08(&v196, (uint64_t)v199, v118);
  v119 = v195;
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)v199);
  v120 = v176;
  sub_10000B074(v189, v176, (uint64_t *)&unk_10028FE50);
  if (((unsigned int (*)(uint64_t, uint64_t, Class))v191)(v120, 1, v82) == 1)
  {
    sub_10000A020(v120, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    v121 = v170;
    (*(void (**)(char *, uint64_t, Class))(v116 + 32))(v170, v120, v82);
    LOBYTE(v197) = 2;
    v122 = AnyHashable.init<A>(_:)(v199, &v197, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v111);
    v123 = Locale.ltIdentifier.getter(v122);
    v198 = (Class)&type metadata for String;
    *(_QWORD *)&v197 = v123;
    *((_QWORD *)&v197 + 1) = v124;
    sub_10003EA2C(&v197, &v196);
    v125 = swift_isUniquelyReferenced_nonNull_native(v119);
    v195 = v119;
    sub_1001AAF08(&v196, (uint64_t)v199, v125);
    v119 = v195;
    swift_bridgeObjectRelease();
    sub_10005DEC0((uint64_t)v199);
    (*(void (**)(char *, Class))(v116 + 8))(v121, v82);
  }
  v126 = v177;
  sub_10000B074(v190, v177, (uint64_t *)&unk_10028FE50);
  if (((unsigned int (*)(uint64_t, uint64_t, Class))v191)(v126, 1, v82) == 1)
  {
    sub_10000A020(v126, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    v127 = v171;
    (*(void (**)(char *, uint64_t, Class))(v116 + 32))(v171, v126, v82);
    LOBYTE(v197) = 3;
    v128 = AnyHashable.init<A>(_:)(v199, &v197, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v111);
    v129 = Locale.ltIdentifier.getter(v128);
    v198 = (Class)&type metadata for String;
    *(_QWORD *)&v197 = v129;
    *((_QWORD *)&v197 + 1) = v130;
    sub_10003EA2C(&v197, &v196);
    v131 = swift_isUniquelyReferenced_nonNull_native(v119);
    v195 = v119;
    sub_1001AAF08(&v196, (uint64_t)v199, v131);
    v119 = v195;
    swift_bridgeObjectRelease();
    sub_10005DEC0((uint64_t)v199);
    (*(void (**)(char *, Class))(v116 + 8))(v127, v82);
  }
  v132 = v178;
  if (v178)
  {
    LOBYTE(v197) = 1;
    swift_bridgeObjectRetain(v178);
    AnyHashable.init<A>(_:)(v199, &v197, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v111);
    v198 = (Class)&type metadata for String;
    *(_QWORD *)&v197 = v172;
    *((_QWORD *)&v197 + 1) = v132;
    sub_10003EA2C(&v197, &v196);
    v133 = swift_isUniquelyReferenced_nonNull_native(v119);
    v195 = v119;
    sub_1001AAF08(&v196, (uint64_t)v199, v133);
    v134 = v195;
    swift_bridgeObjectRelease();
    sub_10005DEC0((uint64_t)v199);
  }
  else
  {
    v194 = (Class)type metadata accessor for TypedInputInstrumentation(0);
    v135 = objc_allocWithZone(v194);
    v136 = sub_1001D623C(2);
    *(_QWORD *)&v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_characterCount] = String.count.getter(v188, v192);
    v137 = *(_QWORD *)&v62[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_conversation];
    v138 = swift_getKeyPath(&unk_1001F38D8);
    v139 = swift_getKeyPath(&unk_1001F3900);
    v192 = v111;
    v140 = v82;
    v141 = v116;
    v142 = v115;
    v143 = v139;
    v144 = v168;
    static Published.subscript.getter(v168, v137, v138);
    swift_release(v138);
    v145 = v143;
    v115 = v142;
    v146 = swift_release(v145);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, Class, __n128))(v141 + 56))(v144, 0, 1, v140, v146);
    v147 = (uint64_t)&v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_sourceLocale];
    swift_beginAccess(&v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_sourceLocale], v199, 33, 0);
    sub_10002D560((uint64_t)v144, v147, (uint64_t *)&unk_10028FE50);
    swift_endAccess(v199);
    v148 = sub_100076A78();
    v149 = *(void **)&v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair];
    *(_QWORD *)&v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair] = v148;

    v150 = swift_getKeyPath(&unk_1001F3920);
    v151 = swift_getKeyPath(&unk_1001F3948);
    static Published.subscript.getter(v199, v78, v150);
    swift_release(v150);
    swift_release(v151);
    v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_airplaneModeEnabled] = v199[0];
    v152 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
    v153 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v152);
    LOBYTE(v151) = NSUserDefaults.onDeviceOnly.getter();

    v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_onDeviceModeEnabled] = v151 & 1;
    v154 = (uint64_t)v169;
    Date.init()(v155);
    v156 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56))(v154, 0, 1, v156);
    v157 = (uint64_t)&v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start];
    swift_beginAccess(&v136[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start], v199, 33, 0);
    sub_10002D560(v154, v157, &qword_1002948B0);
    swift_endAccess(v199);
    LOBYTE(v197) = 4;
    AnyHashable.init<A>(_:)(v199, &v197, &type metadata for ComposeTranslationViewModel.OpenInTranslateKeys, v192);
    v198 = v194;
    *(_QWORD *)&v197 = v136;
    sub_10003EA2C(&v197, &v196);
    v158 = v136;
    v159 = swift_isUniquelyReferenced_nonNull_native(v119);
    v195 = v119;
    sub_1001AAF08(&v196, (uint64_t)v199, v159);
    v134 = v195;
    swift_bridgeObjectRelease();
    sub_10005DEC0((uint64_t)v199);

  }
  if (qword_10028A3B8 != -1)
    swift_once(&qword_10028A3B8, sub_10004A578);
  memset(v199, 0, sizeof(v199));
  v160 = (id)qword_1002AA0B8;
  v161 = v179;
  Notification.init(name:object:userInfo:)(v160, v199, v134);
  v162 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  isa = Notification._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v162, "postNotification:", isa);

  return (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v161, v115);
}

uint64_t sub_1001508DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD aBlock[5];
  uint64_t v76;

  v67 = a7;
  v68 = a8;
  v60 = a5;
  v61 = (void *)a6;
  v59 = a4;
  v65 = a11;
  v66 = a12;
  v62 = a9;
  v63 = a10;
  v71 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v70 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v16 - 8);
  v73 = v16;
  __chkstk_darwin(v16);
  v69 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = __chkstk_darwin(v18);
  v22 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v58 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v58 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v58 - v29;
  sub_10014F46C(a3, v59, a1, (uint64_t)&v58 - v29);
  v64 = v28;
  sub_10014F46C(v60, (uint64_t)v61, a1, (uint64_t)v28);
  v31 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v61 = (void *)static OS_dispatch_queue.main.getter(v31);
  sub_10000B074((uint64_t)v30, (uint64_t)v25, (uint64_t *)&unk_10028FE50);
  sub_10000B074((uint64_t)v28, (uint64_t)v22, (uint64_t *)&unk_10028FE50);
  v32 = *(unsigned __int8 *)(v19 + 80);
  v33 = (v32 + 24) & ~v32;
  v34 = (v20 + v32 + v33) & ~v32;
  v35 = (v20 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(&unk_10026E118, v37 + 16, v32 | 7);
  *(_QWORD *)(v38 + 16) = a2;
  sub_1000A8B70((uint64_t)v25, v38 + v33);
  sub_1000A8B70((uint64_t)v22, v38 + v34);
  v39 = (_QWORD *)(v38 + v35);
  v40 = v68;
  *v39 = v67;
  v39[1] = v40;
  v41 = (_QWORD *)(v38 + v36);
  v42 = v63;
  *v41 = v62;
  v41[1] = v42;
  v43 = (_QWORD *)(v38 + v37);
  v44 = v66;
  *v43 = v65;
  v43[1] = v44;
  aBlock[4] = sub_100157CE8;
  v76 = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026E130;
  v45 = _Block_copy(aBlock);
  v46 = v76;
  swift_bridgeObjectRetain(v44);
  v47 = a2;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v42);
  swift_release(v46);
  v48 = v69;
  static DispatchQoS.unspecified.getter(v49);
  aBlock[0] = _swiftEmptyArrayStorage;
  v50 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v51 = sub_100006DF4(&qword_10028AC30);
  v52 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
  v53 = v70;
  v54 = v51;
  v55 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v54, v52, v71, v50);
  v56 = v61;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v53, v45);
  _Block_release(v45);

  (*(void (**)(char *, uint64_t))(v74 + 8))(v53, v55);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v73);
  sub_10000A020((uint64_t)v64, (uint64_t *)&unk_10028FE50);
  return sub_10000A020((uint64_t)v30, (uint64_t *)&unk_10028FE50);
}

uint64_t sub_100150CBC(void *a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  char v7;

  if (!objc_msgSend(a1, "selectedIndex"))
  {
    v4 = objc_msgSend(a1, "selectedViewController");
    if (!v4
      || (v5 = v4,
          sub_10000A05C(0, (unint64_t *)&unk_1002953D0, UIViewController_ptr),
          v6 = a2,
          v7 = static NSObject.== infix(_:_:)(v6, v5),
          v6,
          v6,
          v5,
          (v7 & 1) == 0))
    {
      sub_100079BF0(0, 0, 0);
    }
  }
  return 1;
}

uint64_t sub_100150E48@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3848, (uint64_t)&unk_1001F3870, a2);
}

uint64_t sub_100150E5C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F3848, (uint64_t)&unk_1001F3870);
}

uint64_t sub_100150E70@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3A10, (uint64_t)&unk_1001F3A38, a2);
}

uint64_t sub_100150E84(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F3A10, (uint64_t)&unk_1001F3A38);
}

void sub_100150E98(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "stringForKey:", v4);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a2 = v6;
  a2[1] = v8;
}

void sub_100150F1C(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  NSString v4;
  NSString v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  if (v2)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v4 = 0;
  }
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKey:", v4, v5);
  swift_unknownObjectRelease(v4);

}

uint64_t sub_100150FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v7 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B074(a1, (uint64_t)v9, &qword_1002948B0);
  return a5(v9);
}

uint64_t sub_100151050(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[9];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v44, *(_QWORD *)(*v2 + 40));
  v7 = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v44, v7, v8);
  swift_bridgeObjectRelease(v8);
  v9 = a2[6];
  Hasher._combine(_:)(v9);
  v10 = a2[7];
  Hasher._combine(_:)(v10);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = v11 & ~v12;
  v14 = v6 + 56;
  v42 = (uint64_t)a2;
  v43 = a1;
  v40 = v6;
  v41 = v3;
  if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v15 = ~v12;
    v16 = *(_QWORD *)(v6 + 48);
    while (1)
    {
      v18 = (_QWORD *)(v16 + 88 * v13);
      v19 = v18[2];
      v20 = v18[3];
      v22 = v18[6];
      v21 = v18[7];
      v23 = v19 == v7 && v20 == v8;
      if ((v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v7, v8, 0) & 1) != 0)
        && v22 == v9
        && v21 == v10)
      {
        break;
      }
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_14;
    }
    swift_bridgeObjectRelease(v40);
    sub_1000A134C(v42);
    v29 = *(_QWORD *)(*v41 + 48) + 88 * v13;
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(_QWORD *)(v29 + 16);
    v32 = *(_QWORD *)(v29 + 24);
    v33 = *(_QWORD *)(v29 + 32);
    v34 = *(_QWORD *)(v29 + 40);
    v35 = *(_BYTE *)(v29 + 64);
    v36 = *(void **)(v29 + 72);
    v37 = *(void **)(v29 + 80);
    *(_QWORD *)v43 = *(_QWORD *)v29;
    *(_QWORD *)(v43 + 8) = v30;
    *(_QWORD *)(v43 + 16) = v31;
    *(_QWORD *)(v43 + 24) = v32;
    *(_QWORD *)(v43 + 32) = v33;
    *(_QWORD *)(v43 + 40) = v34;
    *(_OWORD *)(v43 + 48) = *(_OWORD *)(v29 + 48);
    *(_BYTE *)(v43 + 64) = v35;
    *(_QWORD *)(v43 + 72) = v36;
    *(_QWORD *)(v43 + 80) = v37;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v34);
    v38 = v36;
    v39 = v37;
    return 0;
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease(v40);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v41);
    v44[0] = *v41;
    *v41 = 0x8000000000000000;
    sub_1000A12F0((_QWORD *)v42);
    sub_100152694(v42, v13, isUniquelyReferenced_nonNull_native);
    v25 = *v41;
    *v41 = v44[0];
    swift_bridgeObjectRelease(v25);
    v26 = *(_OWORD *)(v42 + 48);
    *(_OWORD *)(v43 + 32) = *(_OWORD *)(v42 + 32);
    *(_OWORD *)(v43 + 48) = v26;
    *(_OWORD *)(v43 + 64) = *(_OWORD *)(v42 + 64);
    *(_QWORD *)(v43 + 80) = *(_QWORD *)(v42 + 80);
    v27 = *(_OWORD *)(v42 + 16);
    result = 1;
    *(_OWORD *)v43 = *(_OWORD *)v42;
    *(_OWORD *)(v43 + 16) = v27;
  }
  return result;
}

uint64_t sub_100151298(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100152880(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100151444(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, *(_QWORD *)(*(_QWORD *)v2 + 40));
  __asm { BR              X10 }
}

uint64_t sub_1001514B0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRetain(v1);
  String.hash(into:)(&v9, 0x74786554646E6966, v2);
  swift_bridgeObjectRelease(v2);
  v3 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  v9 = *v7;
  *v7 = 0x8000000000000000;
  sub_100152A18(v0, v3, isUniquelyReferenced_nonNull_native);
  v5 = *v7;
  *v7 = v9;
  swift_bridgeObjectRelease(v5);
  result = 1;
  *v8 = v0;
  return result;
}

uint64_t sub_1001517B0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v24[9];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v6);
  Task.hash(into:)(v24, a2, (char *)&type metadata for () + 8, &type metadata for Never, &protocol witness table for Never);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    v23 = a1;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
  v12 = swift_retain(v11);
  v13 = static Task.== infix(_:_:)(v12);
  swift_release(v11);
  if ((v13 & 1) == 0)
  {
    v14 = ~v8;
    v9 = (v9 + 1) & ~v8;
    v23 = a1;
    if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
        v16 = swift_retain(v15);
        v17 = static Task.== infix(_:_:)(v16);
        swift_release(v15);
        if ((v17 & 1) != 0)
          break;
        v9 = (v9 + 1) & v14;
        if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_8;
      }
      a1 = v23;
      goto LABEL_10;
    }
LABEL_8:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v24[0] = *v3;
    *v3 = 0x8000000000000000;
    swift_retain(a2);
    sub_100152DC0(v19, v9, isUniquelyReferenced_nonNull_native);
    v20 = *v3;
    *v3 = v24[0];
    swift_bridgeObjectRelease(v20);
    *v23 = a2;
    return 1;
  }
LABEL_10:
  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  v22 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v9);
  *a1 = v22;
  swift_retain(v22);
  return 0;
}

void sub_1001519C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int64_t v44;
  _QWORD v45[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295598);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v36 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v38 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v37 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    v39 = v3;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v44 = v11;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v16 >= v37)
          goto LABEL_36;
        v17 = v38[v16];
        v18 = v11 + 1;
        if (!v17)
        {
          v18 = v11 + 2;
          if (v11 + 2 >= v37)
            goto LABEL_36;
          v17 = v38[v18];
          if (!v17)
          {
            v18 = v11 + 3;
            if (v11 + 3 >= v37)
              goto LABEL_36;
            v17 = v38[v18];
            if (!v17)
            {
              v19 = v11 + 4;
              if (v11 + 4 >= v37)
              {
LABEL_36:
                swift_release(v3);
                v2 = v36;
                v35 = 1 << *(_BYTE *)(v3 + 32);
                if (v35 > 63)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v38[v19];
              if (!v17)
              {
                while (1)
                {
                  v18 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v18 >= v37)
                    goto LABEL_36;
                  v17 = v38[v18];
                  ++v19;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v18 = v11 + 4;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v44 = v18;
        v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }
      v20 = *(_QWORD *)(v3 + 48) + 88 * v15;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      v24 = *(_QWORD *)(v20 + 32);
      v41 = *(_QWORD *)(v20 + 40);
      v42 = *(_QWORD *)(v20 + 8);
      v25 = *(_QWORD *)(v20 + 48);
      v26 = *(_QWORD *)(v20 + 56);
      v40 = *(_BYTE *)(v20 + 64);
      v43 = *(_OWORD *)(v20 + 72);
      Hasher.init(_seed:)(v45, *(_QWORD *)(v6 + 40));
      swift_bridgeObjectRetain(v23);
      String.hash(into:)(v45, v22, v23);
      swift_bridgeObjectRelease(v23);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v26);
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v6 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v10 + 8 * v30);
        }
        while (v34 == -1);
        v12 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = *(_QWORD *)(v6 + 48) + 88 * v12;
      *(_QWORD *)v13 = v21;
      *(_QWORD *)(v13 + 8) = v42;
      *(_QWORD *)(v13 + 16) = v22;
      *(_QWORD *)(v13 + 24) = v23;
      *(_QWORD *)(v13 + 32) = v24;
      *(_QWORD *)(v13 + 40) = v41;
      *(_QWORD *)(v13 + 48) = v25;
      *(_QWORD *)(v13 + 56) = v26;
      *(_BYTE *)(v13 + 64) = v40;
      *(_OWORD *)(v13 + 72) = v43;
      ++*(_QWORD *)(v6 + 16);
      v3 = v39;
      v11 = v44;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

Swift::Int sub_100151D4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295480);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_100152028(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295590);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100152390);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v17, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  swift_release(v3);
  *v2 = v5;
}

void sub_1001523A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295588);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v29 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v16 >= v10)
          goto LABEL_36;
        v17 = v29[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v10)
            goto LABEL_36;
          v17 = v29[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v10)
              goto LABEL_36;
            v17 = v29[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v28;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v29[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v17 = v29[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
      Task.hash(into:)(v30, v19, (char *)&type metadata for () + 8, &type metadata for Never, &protocol witness table for Never);
      v20 = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = v20 & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

uint64_t sub_100152694(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v33 = result;
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_21;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001519C0(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100152FC4();
      goto LABEL_21;
    }
    sub_1001536C4(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v34, *(_QWORD *)(*v3 + 40));
  v10 = v5[2];
  v11 = v5[3];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(v34, v10, v11);
  swift_bridgeObjectRelease(v11);
  v12 = v5[6];
  Hasher._combine(_:)(v12);
  v13 = v5[7];
  Hasher._combine(_:)(v13);
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v14;
  v15 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v9 + 48);
    do
    {
      v19 = (_QWORD *)(v17 + 88 * a2);
      result = v19[2];
      v20 = v19[3];
      v22 = v19[6];
      v21 = v19[7];
      v23 = result == v10 && v20 == v11;
      if (v23 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v20, v10, v11, 0), (result & 1) != 0))
      {
        if (v22 == v12 && v21 == v13)
          goto LABEL_24;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_21:
  v24 = *v32;
  *(_QWORD *)(*v32 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v25 = *(_QWORD *)(v24 + 48) + 88 * a2;
  v26 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v33;
  *(_OWORD *)(v25 + 16) = v26;
  *(_QWORD *)(v25 + 80) = *(_QWORD *)(v33 + 80);
  v27 = *(_OWORD *)(v33 + 64);
  v28 = *(_OWORD *)(v33 + 32);
  *(_OWORD *)(v25 + 48) = *(_OWORD *)(v33 + 48);
  *(_OWORD *)(v25 + 64) = v27;
  *(_OWORD *)(v25 + 32) = v28;
  v29 = *(_QWORD *)(v24 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    *(_QWORD *)(v24 + 16) = v31;
    return result;
  }
  __break(1u);
LABEL_24:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AudioDevice);
  __break(1u);
  return result;
}

uint64_t sub_100152880(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100151D4C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1001531DC();
      goto LABEL_22;
    }
    sub_100153A34(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void sub_100152A18(char a1, unint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  _QWORD v15[9];

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100152028(v8);
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      sub_100153CE0(v8);
LABEL_8:
      Hasher.init(_seed:)(v15, *(_QWORD *)(*(_QWORD *)v3 + 40));
      __asm { BR              X10 }
    }
    sub_10015338C();
  }
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x100152D68);
  }
  *(_QWORD *)(v9 + 16) = v12;
}

void sub_100152DC0(uint64_t a1, unint64_t i, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v26[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_13;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001523A4(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_10015351C();
      goto LABEL_13;
    }
    sub_100154028(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v3 + 40));
  Task.hash(into:)(v26, a1, (char *)&type metadata for () + 8, &type metadata for Never, &protocol witness table for Never);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  i = v10 & ~v11;
  v12 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * i);
    v14 = swift_retain(v13);
    v15 = static Task.== infix(_:_:)(v14);
    swift_release(v13);
    if ((v15 & 1) != 0)
      goto LABEL_16;
    v16 = ~v11;
    for (i = (i + 1) & v16; ((*(_QWORD *)(v12 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v16)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * i);
      v18 = swift_retain(v17);
      v19 = static Task.== infix(_:_:)(v18);
      swift_release(v17);
      if ((v19 & 1) != 0)
        goto LABEL_16;
    }
  }
LABEL_13:
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (i >> 6) + 56) |= 1 << i;
  *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * i) = a1;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (!v22)
  {
    *(_QWORD *)(v20 + 16) = v23;
    return;
  }
  __break(1u);
LABEL_16:
  v24 = sub_100006DF4(&qword_100295580);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

id sub_100152FC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  __int128 v30;

  v1 = v0;
  sub_100006DF4(&qword_100295598);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v13)
      goto LABEL_28;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_28;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
      {
        v9 = v27 + 2;
        if (v27 + 2 >= v13)
          goto LABEL_28;
        v28 = *(_QWORD *)(v6 + 8 * v9);
        if (!v28)
          break;
      }
    }
LABEL_27:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 88 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 40);
    v23 = *(_BYTE *)(v17 + 64);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    v30 = *(_OWORD *)(v17 + 72);
    v25 = *(_OWORD *)(v17 + 48);
    *(_QWORD *)v24 = *(_QWORD *)v17;
    *(_QWORD *)(v24 + 8) = v18;
    *(_QWORD *)(v24 + 16) = v19;
    *(_QWORD *)(v24 + 24) = v20;
    *(_QWORD *)(v24 + 32) = v21;
    *(_QWORD *)(v24 + 40) = v22;
    *(_OWORD *)(v24 + 48) = v25;
    *(_BYTE *)(v24 + 64) = v23;
    *(_OWORD *)(v24 + 72) = v30;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    v26 = (id)v30;
    result = *((id *)&v30 + 1);
  }
  v29 = v27 + 3;
  if (v29 >= v13)
    goto LABEL_28;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001531DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100006DF4(&qword_100295480);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10015338C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100006DF4(&qword_100295590);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10015351C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100006DF4(&qword_100295588);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001536C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  Swift::UInt v26;
  id v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t i;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  __int128 v45;
  _QWORD v46[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295598);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v2;
  v38 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v39 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  for (i = v3; ; v3 = i)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v44 = v11;
      v15 = v14 | (v11 << 6);
      goto LABEL_27;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v39)
      goto LABEL_36;
    v17 = *(_QWORD *)(v38 + 8 * v16);
    v18 = v11 + 1;
    if (!v17)
    {
      v18 = v11 + 2;
      if (v11 + 2 >= v39)
        goto LABEL_36;
      v17 = *(_QWORD *)(v38 + 8 * v18);
      if (!v17)
      {
        v18 = v11 + 3;
        if (v11 + 3 >= v39)
          goto LABEL_36;
        v17 = *(_QWORD *)(v38 + 8 * v18);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v44 = v18;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 88 * v15;
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 24);
    v24 = *(_QWORD *)(v20 + 40);
    v42 = *(_QWORD *)(v20 + 32);
    v43 = *(_QWORD *)v20;
    v25 = *(_QWORD *)(v20 + 48);
    v26 = *(_QWORD *)(v20 + 56);
    v41 = *(_BYTE *)(v20 + 64);
    v45 = *(_OWORD *)(v20 + 72);
    Hasher.init(_seed:)(v46, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain_n(v23, 2);
    swift_bridgeObjectRetain(v24);
    v27 = (id)v45;
    v28 = *((id *)&v45 + 1);
    String.hash(into:)(v46, v22, v23);
    swift_bridgeObjectRelease(v23);
    Hasher._combine(_:)(v25);
    Hasher._combine(_:)(v26);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v6 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v10 + 8 * (v31 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v10 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v10 + 8 * v32);
      }
      while (v36 == -1);
      v12 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = *(_QWORD *)(v6 + 48) + 88 * v12;
    v11 = v44;
    *(_QWORD *)v13 = v43;
    *(_QWORD *)(v13 + 8) = v21;
    *(_QWORD *)(v13 + 16) = v22;
    *(_QWORD *)(v13 + 24) = v23;
    *(_QWORD *)(v13 + 32) = v42;
    *(_QWORD *)(v13 + 40) = v24;
    *(_QWORD *)(v13 + 48) = v25;
    *(_QWORD *)(v13 + 56) = v26;
    *(_BYTE *)(v13 + 64) = v41;
    *(_OWORD *)(v13 + 72) = v45;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v11 + 4;
  if (v11 + 4 >= v39)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v37;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v38 + 8 * v19);
  if (v17)
  {
    v18 = v11 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v39)
      goto LABEL_36;
    v17 = *(_QWORD *)(v38 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

Swift::Int sub_100153A34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295480);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100153CE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295590);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100154014);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v15, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
}

void sub_100154028(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  _QWORD v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006DF4(&qword_100295588);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v28)
      goto LABEL_36;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v28)
        goto LABEL_36;
      v17 = *(_QWORD *)(v8 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v28)
          goto LABEL_36;
        v17 = *(_QWORD *)(v8 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v6 + 40));
    swift_retain(v19);
    Task.hash(into:)(v29, v19, (char *)&type metadata for () + 8, &type metadata for Never, &protocol witness table for Never);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v28)
  {
LABEL_36:
    swift_release_n(v3, 2);
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v28)
      goto LABEL_36;
    v17 = *(_QWORD *)(v8 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1001542EC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  id v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD v68[5];

  v65 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v66 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68[3] = type metadata accessor for TranslationStoreCoreData(0);
  v68[4] = &protocol witness table for TranslationStoreCoreData;
  v68[0] = a1;
  KeyPath = swift_getKeyPath(&unk_1001F3758);
  v12 = UUID.init()(KeyPath);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v64 = v7;
  v16(v10, v7);
  v63 = v16;
  v62 = (id)objc_opt_self(NSUserDefaults);
  v17 = objc_msgSend(v62, "standardUserDefaults");
  v18 = sub_100006DF4(&qword_1002953F0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = PassthroughSubject.init()();
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 88) = KeyPath;
  *(_QWORD *)(a2 + 96) = v13;
  *(_QWORD *)(a2 + 104) = v15;
  *(_QWORD *)(a2 + 112) = v19;
  v20 = swift_getKeyPath(&unk_1001F3780);
  v21 = UUID.init()(v20);
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  v16(v10, v7);
  v25 = v62;
  v26 = objc_msgSend(v62, "standardUserDefaults");
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v27 = PassthroughSubject.init()();
  *(_QWORD *)(a2 + 120) = v26;
  *(_QWORD *)(a2 + 128) = v20;
  *(_QWORD *)(a2 + 136) = v22;
  *(_QWORD *)(a2 + 144) = v24;
  *(_QWORD *)(a2 + 152) = v27;
  v28 = (_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__sessionSuspension_RD);
  v29 = swift_getKeyPath(&unk_1001F37A8);
  v30 = v66;
  static Date.distantPast.getter();
  v31 = objc_msgSend(v25, "standardUserDefaults");
  v32 = sub_100006DF4(&qword_1002953F8);
  v33 = *(int *)(v32 + 36);
  v34 = sub_100006DF4(&qword_100295400);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_QWORD *)((char *)v28 + v33) = PassthroughSubject.init()();
  *v28 = v31;
  v28[1] = v29;
  v35 = (char *)v28 + *(int *)(v32 + 32);
  v36 = v65;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v35, v30, v65);
  v37 = (_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations);
  v38 = swift_getKeyPath(&unk_1001F37D0);
  v39 = objc_msgSend(v25, "standardUserDefaults");
  v40 = sub_100006DF4(&qword_100295408);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = PassthroughSubject.init()();
  *v37 = v39;
  v37[1] = v38;
  v37[2] = _swiftEmptyArrayStorage;
  v37[3] = v41;
  *(_BYTE *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_isSuspended) = 1;
  *(_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders) = _swiftEmptyArrayStorage;
  *(double *)(a2 + 16) = a3;
  v42 = sub_100023AB0((uint64_t)v68, a2 + 24);
  v43 = UUID.init()(v42);
  v44 = UUID.uuidString.getter(v43);
  v46 = v45;
  v48 = v63;
  v47 = v64;
  v63(v10, v64);
  v49 = type metadata accessor for TranslationSession_RD(0);
  v50 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v51 = swift_retain(v68[0]);
  v52 = sub_100154704(v51, v44, v46, v50);
  *(_QWORD *)(a2 + 64) = v52;
  v53 = UUID.init()(v52);
  v54 = UUID.uuidString.getter(v53);
  v56 = v55;
  v48(v10, v47);
  v57 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v58 = swift_retain(v68[0]);
  *(_QWORD *)(a2 + 72) = sub_100154704(v58, v54, v56, v57);
  v59 = (uint64_t)v66;
  Date.init()();
  sub_1001CE85C(v59, 1);
  sub_100009C08(v68);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v59, v36);
  return a2;
}

uint64_t sub_100154704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t DynamicType;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD aBlock[3];
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];
  _QWORD v44[5];

  v8 = sub_100006DF4((uint64_t *)&unk_100295410);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TranslationStoreCoreData(0);
  v44[3] = v12;
  v44[4] = &protocol witness table for TranslationStoreCoreData;
  v44[0] = a1;
  v13 = a4 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__translations;
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_100006DF4(&qword_100298790);
  Published.init(initialValue:)(aBlock, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v13, v11, v8);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_observations) = &_swiftEmptyDictionarySingleton;
  sub_100023AB0((uint64_t)v44, a4 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store);
  swift_beginAccess(a4 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__currentID, aBlock, 33, 0);
  v43[0] = a2;
  v43[1] = a3;
  Published.init(initialValue:)(v43, &type metadata for String);
  swift_endAccess(aBlock);
  sub_100023AB0((uint64_t)v44, (uint64_t)aBlock);
  v15 = sub_100006DF4((uint64_t *)&unk_100295420);
  if (swift_dynamicCast(v43, aBlock, v15, v12, 6))
  {
    v16 = v43[0];
    v17 = (void *)TranslationStoreCoreData.moc.getter();
    v18 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v19 = (void *)objc_opt_self(NSOperationQueue);
    v20 = v17;
    v21 = objc_msgSend(v19, "mainQueue");
    v40 = sub_1001579B4;
    v41 = a4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10014BC70;
    v39 = &unk_10026E018;
    v22 = _Block_copy(aBlock);
    v23 = v41;
    swift_retain(a4);
    swift_release(v23);
    v24 = objc_msgSend(v18, "addObserverForName:object:queue:usingBlock:", NSManagedObjectContextObjectsDidChangeNotification, v20, v21, v22);
    _Block_release(v22);
    swift_release(v16);
    swift_unknownObjectRelease(v24);

  }
  else
  {
    if (qword_10028A418 != -1)
      swift_once(&qword_10028A418, sub_100120F48);
    v25 = type metadata accessor for Logger(0);
    sub_10000F66C(v25, (uint64_t)qword_1002AA350);
    v26 = sub_100023AB0((uint64_t)v44, (uint64_t)aBlock);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v43[0] = v30;
      *(_DWORD *)v29 = 136446210;
      v31 = v39;
      v32 = sub_100023AF4(aBlock, (uint64_t)v39);
      DynamicType = swift_getDynamicType(v32, v31, 1);
      v34 = _typeName(_:qualified:)(DynamicType, 0);
      v36 = v35;
      v42 = sub_1001A7FE4(v34, v35, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v29 + 4);
      swift_bridgeObjectRelease(v36);
      sub_100009C08(aBlock);
        v29,
        0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      sub_100009C08(aBlock);
    }
  }
  sub_100009C08(v44);
  return a4;
}

void sub_100154B3C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_10000A05C(0, &qword_100295430, UIOpenURLContext_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_10000A05C(0, &qword_100295430, UIOpenURLContext_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_100154DA4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100154E2C(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t KeyPath;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  _QWORD v39[5];

  v37 = a2;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  v36 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4((uint64_t *)&unk_100295410);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[3] = type metadata accessor for TranslationStoreCoreData(0);
  v39[4] = &protocol witness table for TranslationStoreCoreData;
  v39[0] = a1;
  v15 = a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__translations;
  v38 = _swiftEmptyArrayStorage;
  v16 = sub_100006DF4(&qword_100298790);
  Published.init(initialValue:)(&v38, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v15, v14, v11);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation) = 0;
  v17 = (char *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__sessionSuspension);
  KeyPath = swift_getKeyPath(&unk_1001F37F8);
  static Date.distantPast.getter();
  v19 = (void *)objc_opt_self(NSUserDefaults);
  v20 = objc_msgSend(v19, "standardUserDefaults");
  v21 = sub_100006DF4(&qword_1002953F8);
  v22 = *(int *)(v21 + 36);
  v23 = sub_100006DF4(&qword_100295400);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)&v17[v22] = PassthroughSubject.init()();
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = KeyPath;
  v24 = *(int *)(v21 + 32);
  v25 = v35;
  v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v17[v24], v10, v35);
  v27 = (_QWORD *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID);
  v28 = swift_getKeyPath(&unk_1001F3820);
  v29 = objc_msgSend(v19, "standardUserDefaults");
  v30 = sub_100006DF4(&qword_1002953F0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = PassthroughSubject.init()();
  *v27 = v29;
  v27[1] = v28;
  v27[2] = 0;
  v27[3] = 0xE000000000000000;
  v27[4] = v31;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_lidDisambiguationCounter) = 0;
  *(_BYTE *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_isSuspended) = 1;
  *(double *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_sessionTimeout) = a4;
  v32 = sub_100023AB0((uint64_t)v39, a3 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store);
  if ((v37 & 1) != 0)
  {
    Date.init()(v32);
    sub_1001A2C58((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
  }
  sub_1001A3970();
  sub_100009C08(v39);
  return a3;
}

void sub_1001550F4(uint64_t a1, uint64_t a2, uint64_t a3, id a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  uint64_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[24];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];
  _QWORD v42[6];

  v10 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v10);
  KeyPath = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = type metadata accessor for StoredSpeechResult(0);
  v42[3] = v17;
  v42[4] = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
  v18 = sub_1000122F8(v42);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v18, a1, v17);
  v19 = type metadata accessor for StoredTranslationResult(0);
  v41[3] = v19;
  v41[4] = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
  v20 = sub_1000122F8(v41);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v20, a2, v19);
  v21 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *(_QWORD *)v16 = static OS_dispatch_queue.main.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if ((a2 & 1) != 0)
  {
    sub_100023AB0(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v38);
    v22 = v39;
    v23 = v40;
    sub_100023AF4(v38, v39);
    a3 = dispatch thunk of TranslationStore.insert(speech:translationResult:isFavorite:)(v42, v41, a3 & 1, v22, v23);
    if (!a3)
    {
      sub_100009C08(v38);
LABEL_9:
      sub_100009C08(v42);
      sub_100009C08(v41);
      return;
    }
    sub_100009C08(v38);
    v24 = a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID;
    swift_beginAccess(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID, v37, 0, 0);
    v25 = *(void **)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_QWORD *)(v24 + 24);
    v28 = *(_QWORD *)(v24 + 32);
    v36 = v25;
    v29 = v25;
    swift_retain(v26);
    swift_bridgeObjectRetain(v27);
    swift_retain(v28);
    swift_getAtKeyPath(v38, &v36, v26);
    if (!v38[1])
      swift_bridgeObjectRetain(v27);
    swift_release(v26);

    swift_release(v28);
    swift_bridgeObjectRelease();
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend((id)a3, "setSessionID:", v30, swift_bridgeObjectRelease().n128_f64[0]);

    sub_10000B074((uint64_t)a4, (uint64_t)KeyPath, (uint64_t *)&unk_10028F1B0);
    dispatch thunk of PersistedTranslation.selfLoggingInvocationId.setter(KeyPath);
    KeyPath = (char *)swift_getKeyPath(&unk_1001F3710);
    v13 = swift_getKeyPath(&unk_1001F3738);
    a4 = (id)a3;
    v16 = (char *)static Published.subscript.modify(v38, a5, KeyPath, v13);
    v19 = *v31;
    if (!((unint64_t)*v31 >> 62))
    {
LABEL_8:
      sub_1001CBF04(0, 0, (uint64_t)a4);
      ((void (*)(_QWORD *, _QWORD))v16)(v38, 0);
      swift_release(KeyPath);
      swift_release(v13);
      v32 = *(void **)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation);
      *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation) = a3;
      v33 = a4;

      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  if (v19 < 0)
    v34 = v19;
  else
    v34 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease();
  if ((v35 & 0x8000000000000000) == 0)
    goto LABEL_8;
  __break(1u);
}

uint64_t sub_1001554E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_10015556C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "setNeedsUpdateOfSupportedInterfaceOrientations");

  }
}

uint64_t sub_1001555C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;

  v2 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000AEB88();
  UITraitCollection.subscript.getter(&v15, &type metadata for SequoiaAppLayoutTrait, &type metadata for SequoiaAppLayoutTrait, v5);
  v6 = v15;
  v7 = sub_10014BD14();
  if (((v6 ^ !v7) & 1) == 0)
  {
    UIViewController.traitOverrides.getter();
    v14 = v7;
    dispatch thunk of UIMutableTraits.subscript.setter(&v14, &type metadata for SequoiaAppLayoutTrait, &type metadata for SequoiaAppLayoutTrait, v5, v2, &protocol witness table for UITraitOverrides);
    UIViewController.traitOverrides.setter(v4);
  }
  v8 = *(_QWORD *)((char *)a1 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *a1) + 16));
  KeyPath = swift_getKeyPath(&unk_1001F3A10);
  v10 = swift_getKeyPath(&unk_1001F3A38);
  v13 = 0;
  swift_retain(v8);
  return static Published.subscript.setter(&v13, v8, KeyPath, v10);
}

_QWORD *sub_100155728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t ObjectType;
  id v55[3];

  v51 = a1;
  ObjectType = swift_getObjectType(v3);
  v53 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v53);
  v52 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_100295530);
  v12 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  v48 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_100295538);
  v16 = *(_QWORD *)(v15 - 8);
  v49 = v15;
  v50 = v16;
  __chkstk_darwin(v15);
  v46 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_1002954D8);
  __chkstk_darwin(v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v3) + 32)) = _swiftEmptyArrayStorage;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v3) + 16)) = a2;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v3) + 24)) = a3;
  sub_10000B074(a1, (uint64_t)v20, &qword_1002954D8);
  swift_retain(a2);
  swift_retain(a3);
  v21 = (_QWORD *)UIHostingController.init(rootView:)(v20);
  swift_beginAccess(*(_QWORD *)((char *)v21 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v21) + 16))+ OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext__currentTab, v55, 33, 0);
  v22 = v21;
  v23 = sub_100006DF4(&qword_100295540);
  Published.projectedValue.getter(v23);
  swift_endAccess(v55);
  v24 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v55[0] = (id)static OS_dispatch_queue.main.getter(v24);
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v10, 1, 1, v25);
  v26 = sub_100012334(&qword_100295548, &qword_100295530, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v27 = sub_100065E60((unint64_t *)&qword_100295550, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v29 = v46;
  v28 = v47;
  Publisher.receive<A>(on:options:)(v55, v10, v47, v24, v26, v27);
  sub_10000A020((uint64_t)v10, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v28);
  v30 = swift_allocObject(&unk_10026E190, 24, 7);
  swift_unknownObjectWeakInit(v30 + 16, v22);
  v31 = sub_100012334(&qword_100295558, &qword_100295538, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v32 = v49;
  v33 = Publisher<>.sink(receiveValue:)(sub_100157F28, v30, v49, v31);
  v34 = swift_release(v30);
  (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v29, v32, v34);
  v35 = (char *)v22 + *(_QWORD *)(qword_1002AA4F8 + (swift_isaMask & *v22) + 32);
  swift_beginAccess(v35, v55, 33, 0);
  v36 = sub_100006DF4((uint64_t *)&unk_100295560);
  v37 = sub_100012334(&qword_10028EA28, (uint64_t *)&unk_100295560, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v35, v36, v37);
  swift_endAccess(v55);
  swift_release(v33);
  v38 = v22;
  LOBYTE(v32) = sub_10014BD14();
  v39 = v52;
  UIViewController.traitOverrides.getter();
  LOBYTE(v55[0]) = v32;
  v40 = sub_1000AEB88();
  dispatch thunk of UIMutableTraits.subscript.setter(v55, &type metadata for SequoiaAppLayoutTrait, &type metadata for SequoiaAppLayoutTrait, v40, v53, &protocol witness table for UITraitOverrides);
  UIViewController.traitOverrides.setter(v39);

  v41 = sub_100006DF4(&qword_10028FE40);
  v42 = swift_allocObject(v41, 48, 7);
  *(_OWORD *)(v42 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v42 + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
  *(_QWORD *)(v42 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
  v43 = v38;
  v44 = UIViewController.registerForTraitChanges<A>(_:handler:)(v42, sub_1001555C4, 0, ObjectType);
  swift_unknownObjectRelease(v44);
  swift_bridgeObjectRelease();

  sub_10000A020(v51, &qword_1002954D8);
  return v43;
}

double sub_100155C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  double result;
  _QWORD v11[5];
  _QWORD *v12;

  v4 = swift_allocObject(&unk_10026E078, 24, 7);
  *(_QWORD *)(v4 + 16) = &_swiftEmptySetSingleton;
  v5 = swift_allocObject(&unk_10026E0A0, 24, 7);
  *(_QWORD *)(v5 + 16) = &_swiftEmptyDictionarySingleton;
  v6 = (void *)objc_opt_self(_LTTranslator);
  v7 = (_QWORD *)swift_allocObject(&unk_10026E0C8, 48, 7);
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = a1;
  v7[5] = a2;
  v11[4] = sub_100157BC0;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10014F400;
  v11[3] = &unk_10026E0E0;
  v8 = _Block_copy(v11);
  v9 = v12;
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(a2);
  objc_msgSend(v6, "availableLocalePairsForTask:completion:", 1, v8, swift_release(v9).n128_f64[0]);
  _Block_release(v8);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_100155DBC(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  id v94;
  char *v95;
  id v96;
  id v97;
  void *v98;
  char *v99;
  uint64_t v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  char **v104;
  uint8_t *v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  id v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  __n128 v129;
  id v130;
  NSString v131;
  id v132;
  uint64_t v133;
  uint64_t inited;
  _QWORD *v135;
  uint64_t result;
  uint64_t v137;
  Class isa;
  uint64_t v139;
  id v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  id v161;
  char *v162;
  id v163;
  uint64_t v164;
  uint64_t v165[5];
  uint64_t v166;
  char v167[8];

  v3 = v2;
  v161 = a2;
  v5 = type metadata accessor for URLComponents(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v162 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100006DF4(&qword_100295498);
  __chkstk_darwin(v146);
  v9 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100006DF4(&qword_1002954A0);
  __chkstk_darwin(v147);
  v11 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100006DF4(&qword_1002954A8);
  __chkstk_darwin(v148);
  v13 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100006DF4(&qword_1002954B0);
  __chkstk_darwin(v149);
  v151 = (uint64_t)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100006DF4(&qword_1002954B8);
  __chkstk_darwin(v150);
  v153 = (uint64_t)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100006DF4(&qword_1002954C0);
  __chkstk_darwin(v152);
  v155 = (uint64_t)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100006DF4(&qword_1002954C8);
  __chkstk_darwin(v154);
  v157 = (uint64_t)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100006DF4(&qword_1002954D0);
  __chkstk_darwin(v156);
  v159 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100006DF4(&qword_1002954D8);
  __chkstk_darwin(v158);
  v160 = (char *)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for MainLayoutView(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(char **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_conversation);
  v24 = sub_10014BDEC();
  v25 = *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session];
  *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager_session] = v24;
  swift_release(v25);
  sub_10014DB48();
  v26 = objc_opt_self(UIWindowScene);
  v163 = a1;
  v27 = swift_dynamicCastObjCClass(a1, v26);
  if (v27)
  {
    v28 = (void *)v27;
    v142 = v6;
    v143 = v5;
    v29 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context);
    v140 = v163;
    v30 = sub_1000BD3F8((uint64_t)objc_msgSend(v28, "interfaceOrientation"));
    v145 = v28;
    v31 = v30;
    KeyPath = swift_getKeyPath(&unk_1001F3848);
    v164 = v3;
    v33 = KeyPath;
    v34 = swift_getKeyPath(&unk_1001F3870);
    LOBYTE(v165[0]) = v31;
    v144 = v29;
    swift_retain(v29);
    static Published.subscript.setter(v165, v29, v33, v34);
    v35 = objc_msgSend(v28, "traitCollection");
    v36 = sub_1000AEBCC();
    UITraitCollection.subscript.getter(v165, &type metadata for GenderTipManagerTrait, &type metadata for GenderTipManagerTrait, v36);

    v37 = v165[0];
    v38 = sub_10014BF0C();
    v39 = *(_QWORD *)(v164 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_store);
    v40 = *(void **)(v164 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_sharedTranslationOptions);
    swift_retain(v39);
    v41 = v40;
    swift_retain(v37);
    v139 = v37;
    sub_1001284A8(v38, v39, v41, v37, (uint64_t)v22);
    v42 = type metadata accessor for HostedScenePhaseModel(0);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    v166 = sub_1001589CC();
    State.init(wrappedValue:)(v165, &v166, v42);
    v43 = v165[0];
    v44 = v165[1];
    v141 = v22;
    sub_100157E2C((uint64_t)v22, (uint64_t)v9);
    v45 = (uint64_t *)&v9[*(int *)(v146 + 36)];
    *v45 = v43;
    v45[1] = v44;
    v46 = Color.init(_:bundle:)(0xD000000000000010, 0x80000001001F8F40, 0);
    v47 = swift_getKeyPath(&unk_1001F39B0);
    sub_10000B074((uint64_t)v9, (uint64_t)v11, &qword_100295498);
    v48 = (uint64_t *)&v11[*(int *)(v147 + 36)];
    *v48 = v47;
    v48[1] = v46;
    sub_10000A020((uint64_t)v9, &qword_100295498);
    v49 = type metadata accessor for ConversationManager(0);
    v50 = sub_100007D5C((unint64_t *)&unk_1002954F0, type metadata accessor for ConversationManager, (uint64_t)&unk_1001EB054);
    v51 = static ObservableObject.environmentStore.getter(v49, v50);
    sub_10000B074((uint64_t)v11, (uint64_t)v13, &qword_1002954A0);
    v52 = (uint64_t *)&v13[*(int *)(v148 + 36)];
    *v52 = v51;
    v52[1] = (uint64_t)v23;
    v53 = v23;
    sub_10000A020((uint64_t)v11, &qword_1002954A0);
    v54 = type metadata accessor for ConversationContext(0);
    v55 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    v56 = static ObservableObject.environmentStore.getter(v54, v55);
    v57 = v151;
    sub_10000B074((uint64_t)v13, v151, &qword_1002954A8);
    v58 = (uint64_t *)(v57 + *(int *)(v149 + 36));
    v59 = v144;
    *v58 = v56;
    v58[1] = v59;
    swift_retain(v59);
    sub_10000A020((uint64_t)v13, &qword_1002954A8);
    v60 = *(_QWORD *)(v164 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_sceneContext);
    v61 = type metadata accessor for SceneContext(0);
    v62 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    v63 = static ObservableObject.environmentStore.getter(v61, v62);
    v64 = v153;
    sub_10000B074(v57, v153, &qword_1002954B0);
    v65 = (uint64_t *)(v64 + *(int *)(v150 + 36));
    *v65 = v63;
    v65[1] = v60;
    swift_retain(v60);
    sub_10000A020(v57, &qword_1002954B0);
    v66 = type metadata accessor for SharedTranslationOptions(0);
    v67 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
    v68 = static ObservableObject.environmentStore.getter(v66, v67);
    v69 = v155;
    sub_10000B074(v64, v155, &qword_1002954B8);
    v70 = (uint64_t *)(v69 + *(int *)(v152 + 36));
    *v70 = v68;
    v70[1] = (uint64_t)v41;
    v71 = v41;
    sub_10000A020(v64, &qword_1002954B8);
    v72 = sub_10014BDEC();
    v73 = type metadata accessor for TranslationAppSession(0);
    v74 = sub_100007D5C((unint64_t *)&unk_100295510, type metadata accessor for TranslationAppSession, (uint64_t)&unk_1001F6680);
    v75 = static ObservableObject.environmentStore.getter(v73, v74);
    v76 = v157;
    sub_10000B074(v69, v157, &qword_1002954C0);
    v77 = (uint64_t *)(v76 + *(int *)(v154 + 36));
    *v77 = v75;
    v77[1] = v72;
    sub_10000A020(v69, &qword_1002954C0);
    v78 = sub_10014BE84();
    v79 = type metadata accessor for FavoritesImporter();
    v80 = sub_100007D5C(&qword_1002916B0, (uint64_t (*)(uint64_t))type metadata accessor for FavoritesImporter, (uint64_t)&unk_1001ED8B4);
    v81 = static ObservableObject.environmentStore.getter(v79, v80);
    v82 = v159;
    sub_10000B074(v76, (uint64_t)v159, &qword_1002954C8);
    v83 = (uint64_t *)&v82[*(int *)(v156 + 36)];
    *v83 = v81;
    v83[1] = (uint64_t)v78;
    sub_10000A020(v76, &qword_1002954C8);
    v84 = swift_getKeyPath(&unk_1001F39E0);
    v85 = sub_10014BDEC();
    sub_100023AB0(v85 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v165);
    swift_release(v85);
    v86 = sub_100006DF4((uint64_t *)&unk_100295420);
    v87 = type metadata accessor for TranslationStoreCoreData(0);
    v88 = swift_dynamicCast(&v166, v165, v86, v87, 7);
    v89 = v166;
    v90 = dispatch thunk of TranslationStoreCoreData.viewContext.getter(v88);
    swift_release(v89);
    v91 = v160;
    sub_10000B074((uint64_t)v82, (uint64_t)v160, &qword_1002954D0);
    v92 = (uint64_t *)&v91[*(int *)(v158 + 36)];
    *v92 = v84;
    v92[1] = v90;
    v93 = v164;
    sub_10000A020((uint64_t)v82, &qword_1002954D0);
    v94 = objc_allocWithZone((Class)sub_100006DF4((uint64_t *)&unk_100295520));
    swift_retain(v59);
    swift_retain(v60);
    v95 = (char *)sub_100155728((uint64_t)v91, v59, v60);
    swift_release(v59);
    swift_release(v60);
    v96 = objc_allocWithZone((Class)UIWindow);
    v97 = objc_msgSend(v96, "initWithWindowScene:", v145);
    v160 = v95;
    objc_msgSend(v97, "setRootViewController:", v95);
    v98 = *(void **)(v93 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window);
    *(_QWORD *)(v93 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window) = v97;
    v99 = (char *)v97;

    v159 = v99;
    objc_msgSend(v99, "makeKeyAndVisible");
    if (qword_10028A3F0 != -1)
      swift_once(&qword_10028A3F0, sub_100120E88);
    v100 = type metadata accessor for Logger(0);
    sub_10000F66C(v100, (uint64_t)qword_1002AA2D8);
    v101 = v161;
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.info.getter(v102);
    v104 = &selRef_initWithWindowScene_;
    if (os_log_type_enabled(v102, v103))
    {
      v105 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v165[0] = v106;
      *(_DWORD *)v105 = 136380675;
      v161 = v105 + 4;
      v107 = objc_msgSend(v101, "URLContexts");
      v108 = sub_10000A05C(0, &qword_100295430, UIOpenURLContext_ptr);
      v109 = sub_100065E60((unint64_t *)&unk_100295438, &qword_100295430, UIOpenURLContext_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      static Set._unconditionallyBridgeFromObjectiveC(_:)(v107, v108, v109);

      v111 = Set.description.getter(v110);
      v113 = v112;
      swift_bridgeObjectRelease();
      v166 = sub_1001A7FE4(v111, v113, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v161);

      v104 = &selRef_initWithWindowScene_;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "willConnectTo: connectionOptions.urlContexts %{private}s", v105, 0xCu);
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v105, -1, -1);

    }
    else
    {

    }
    v5 = v143;
    v6 = v142;
    v114 = (uint64_t)v141;
    v115 = v140;
    v116 = v139;
    v117 = objc_msgSend(v101, v104[287]);
    v118 = sub_10000A05C(0, &qword_100295430, UIOpenURLContext_ptr);
    v119 = sub_100065E60((unint64_t *)&unk_100295438, &qword_100295430, UIOpenURLContext_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v120 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v117, v118, v119);

    v3 = v164;
    sub_10014C158(v120);
    swift_release(v116);

    swift_bridgeObjectRelease();
    sub_100157EC8(v114);
  }
  v121 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v122 = objc_msgSend(v121, "delegate");

  v123 = v162;
  if (v122)
  {
    v124 = type metadata accessor for AppDelegate();
    v125 = swift_dynamicCastClass(v122, v124);
    if (v125)
    {
      v126 = *(_QWORD *)(v125 + OBJC_IVAR____TtC17SequoiaTranslator11AppDelegate_interruptionController);
      swift_retain(v126);
      swift_unknownObjectRelease(v122);
      if (v126)
      {
        sub_10019F490(*(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_sceneContext), 0, v126);
        swift_release(v126);
      }
    }
    else
    {
      swift_unknownObjectRelease(v122);
    }
  }
  v127 = sub_1001A5044((uint64_t)&off_100262710);
  URLComponents.init()();
  URLComponents.scheme.setter(0x722D6F742D706174, 0xEC00000072616461);
  URLComponents.host.setter(7824750, 0xE300000000000000);
  v128 = sub_10014B9C4(v127);
  v129 = swift_bridgeObjectRelease();
  URLComponents.queryItems.setter(v128, v129);
  v130 = objc_allocWithZone((Class)NSUserActivity);
  v131 = String._bridgeToObjectiveC()();
  v132 = objc_msgSend(v130, "initWithActivityType:", v131);

  objc_msgSend(v132, "setEligibleForHandoff:", 0);
  v133 = sub_100006DF4((uint64_t *)&unk_1002954E0);
  inited = swift_initStackObject(v133, v167);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  strcpy((char *)v165, "tap-to-radar");
  BYTE5(v165[1]) = 0;
  HIWORD(v165[1]) = -5120;
  v135 = AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v165, &type metadata for String, &protocol witness table for String);
  result = URLComponents.string.getter(v135);
  if (v137)
  {
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = result;
    *(_QWORD *)(inited + 80) = v137;
    sub_1001A4AA4(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v132, "setUserInfo:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    objc_msgSend(v132, "becomeCurrent");
    objc_msgSend(v163, "setUserActivity:", v132);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v123, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100156E38()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  NSString v10;
  _OWORD v11[2];

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v11, v3);
    swift_unknownObjectRelease(v3);
    sub_10000A020((uint64_t)v11, (uint64_t *)&unk_10028C0B0);
    v4 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
    v5 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v4);
    v6 = objc_msgSend(v0, "standardUserDefaults");
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "BOOLForKey:", v7);

    NSUserDefaults.onDeviceOnly.setter(v8);
    v9 = objc_msgSend(v0, "standardUserDefaults");
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "removeObjectForKey:", v10);

  }
  else
  {
    memset(v11, 0, sizeof(v11));
    sub_10000A020((uint64_t)v11, (uint64_t *)&unk_10028C0B0);
  }
}

double sub_100157004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  void (*v12)(_BYTE *, uint64_t, __n128);
  uint64_t v13;
  __n128 v14;
  char *v15;
  _BYTE v17[24];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context);
  v6 = sub_10014BDEC();
  sub_100023AB0(v6 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v18);
  swift_release(v6);
  v7 = v19;
  v8 = v20;
  sub_100023AF4(v18, v19);
  v9 = dispatch thunk of TranslationStore.favoriteCount.getter(v7, v8);
  swift_beginAccess(v5 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_metrics, v17, 33, 0);
  sub_100062188(v9);
  swift_endAccess(v17);
  sub_100009C08(v18);
  v10 = sub_10014BDEC();
  Date.init()(v10);
  sub_1001A2C58((uint64_t)v4);
  v11 = swift_release(v10);
  v12 = *(void (**)(_BYTE *, uint64_t, __n128))(v2 + 8);
  v12(v4, v1, v11);
  v13 = sub_10014BF0C();
  Date.init()(v13);
  sub_1001CE85C((uint64_t)v4, 0);
  v14 = swift_release(v13);
  v12(v4, v1, v14);
  v15 = sub_10014BE84();
  sub_1000C46C0();

  sub_100156E38();
  return sub_10015F798();
}

void sub_100157190()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window];
  if (v4)
  {
    v5 = objc_msgSend(v4, "rootViewController");
    if (v5)
    {
      v6 = v5;
      v7 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
      type metadata accessor for MainActor(0);
      v8 = v6;
      v9 = v0;
      v10 = static MainActor.shared.getter(v9);
      v11 = (_QWORD *)swift_allocObject(&unk_10026E168, 48, 7);
      v11[2] = v10;
      v11[3] = &protocol witness table for MainActor;
      v11[4] = v8;
      v11[5] = v9;
      v12 = sub_100049DC0((uint64_t)v3, (uint64_t)&unk_100295490, (uint64_t)v11);
      swift_release(v12);

    }
  }
}

void sub_1001572AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  __n128 v6;
  void (*v7)(_BYTE *, uint64_t, __n128);
  uint64_t v8;
  __n128 v9;
  char *v10;
  id v11;
  _BYTE v13[24];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context)+ OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_metrics, v13, 33, 0);
  sub_100062504();
  swift_endAccess(v13);
  v5 = sub_10014BDEC();
  Date.init()(v5);
  sub_1001A2884((uint64_t)v4);
  v6 = swift_release(v5);
  v7 = *(void (**)(_BYTE *, uint64_t, __n128))(v2 + 8);
  v7(v4, v1, v6);
  v8 = sub_10014BF0C();
  Date.init()(v8);
  sub_1001CE0D0((uint64_t)v4);
  v9 = swift_release(v8);
  v7(v4, v1, v9);
  v10 = sub_10014BE84();
  v11 = *(id *)&v10[OBJC_IVAR____TtC17SequoiaTranslator17FavoritesImporter_sharedFavorites];

  dispatch thunk of SharedTranslations.unregister()();
}

void sub_1001573E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_10028A3F0 != -1)
    swift_once(&qword_10028A3F0, sub_100120E88);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA2D8);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136380675;
    sub_10000A05C(0, &qword_100295430, UIOpenURLContext_ptr);
    sub_100065E60((unint64_t *)&unk_100295438, &qword_100295430, UIOpenURLContext_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v8 = swift_bridgeObjectRetain(a1);
    v9 = Set.description.getter(v8);
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = sub_1001A7FE4(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "openURLContexts: %{private}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  sub_10014C158(a1);
}

id sub_100157604(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  uint64_t KeyPath;
  uint64_t v6;
  id result;
  BOOL v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_context);
  v4 = sub_1000BD3F8((uint64_t)objc_msgSend(a1, "interfaceOrientation"));
  KeyPath = swift_getKeyPath(&unk_1001F3848);
  v6 = swift_getKeyPath(&unk_1001F3870);
  v8 = v4;
  swift_retain(v3);
  static Published.subscript.setter(&v8, v3, KeyPath, v6);
  result = objc_msgSend(a1, "interfaceOrientation");
  if (result)
  {
    result = objc_msgSend(a1, "interfaceOrientation");
    *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationContext_lastKnownInterfaceOrientation) = result;
  }
  return result;
}

id sub_1001576C4(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id result;
  void *v10;
  id v11;

  v3 = objc_msgSend(a1, "selectedIndex");
  v4 = objc_msgSend(a1, "tabBar");
  v5 = v4;
  if (v3)
  {
    objc_msgSend(v4, "setBackgroundImage:", 0);

    v6 = objc_msgSend(a1, "tabBar");
    objc_msgSend(v6, "setShadowImage:", 0);
  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v5, "setBackgroundImage:", v7);

    v8 = objc_msgSend(a1, "tabBar");
    v6 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    objc_msgSend(v8, "setShadowImage:", v6);

  }
  result = objc_msgSend(a1, "selectedIndex");
  if (!result)
  {
    result = *(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator13SceneDelegate_window);
    if (result)
    {
      result = objc_msgSend(result, "windowScene");
      if (result)
      {
        v10 = result;
        v11 = objc_msgSend(result, "interfaceOrientation");

        result = (id)sub_1000BD3F8((uint64_t)v11);
        if ((_DWORD)result)
          return objc_msgSend(a1, "hideBarWithTransition:", 0);
      }
    }
  }
  return result;
}

void sub_100157878(void **a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100150E98(a1, a2);
}

void sub_1001578A4(uint64_t a1, void **a2)
{
  sub_100150F1C(a1, a2);
}

void sub_1001578D0(void **a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100150E98(a1, a2);
}

void sub_1001578FC(uint64_t a1, void **a2)
{
  sub_100150F1C(a1, a2);
}

uint64_t sub_100157928@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DC598(a1);
}

uint64_t sub_100157948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100150FC0(a1, a2, a3, a4, (uint64_t (*)(char *))sub_1001DC6C0);
}

uint64_t sub_100157964@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1001DC8C4();
  *a1 = result;
  return result;
}

double sub_10015798C(_QWORD *a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain(*a1);
  return sub_1001DC9FC(v1);
}

uint64_t sub_1001579B4()
{
  return sub_1001C9FC8();
}

uint64_t sub_1001579BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001579CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001579D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DC560(a1);
}

uint64_t sub_1001579F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100150FC0(a1, a2, a3, a4, (uint64_t (*)(char *))sub_1001DC57C);
}

void sub_100157A10(void **a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100150E98(a1, a2);
}

void sub_100157A44(uint64_t a1, void **a2)
{
  sub_100150F1C(a1, a2);
}

uint64_t sub_100157A78@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3848, (uint64_t)&unk_1001F3870, a2);
}

uint64_t sub_100157A9C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F3848, (uint64_t)&unk_1001F3870);
}

uint64_t sub_100157AC0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100157B0C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001508DC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_100157B68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100157B8C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100157BC0(uint64_t a1)
{
  uint64_t v1;

  sub_10014EDB4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(__n128))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100157BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;

  v6 = v0 + v3;
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (!v9(v0 + v5, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100157CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;
  v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10014F6F0(v0 + v3, v0 + v5, *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_QWORD *)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100157D74(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100157D80()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100157DB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10029548C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D380;
  return sub_10014E55C(a1, v4, v5, v7, v6);
}

uint64_t sub_100157E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainLayoutView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100157E78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.managedObjectContext.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100157EA0(id *a1)
{
  return EnvironmentValues.managedObjectContext.setter(*a1);
}

uint64_t sub_100157EC8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MainLayoutView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100157F04()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100157F28(uint64_t a1)
{
  uint64_t v1;

  sub_10015556C(a1, v1);
}

uint64_t sub_100157F30@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3A10, (uint64_t)&unk_1001F3A38, a2);
}

uint64_t sub_100157F54(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F3A10, (uint64_t)&unk_1001F3A38);
}

void sub_100157F8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  void *v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100159478();
    v5 = sub_100007D5C((unint64_t *)&qword_10028AC18, (uint64_t (*)(uint64_t))sub_100159478, (uint64_t)&protocol conformance descriptor for NSObject);
    v6 = Set.Iterator.init(_cocoa:)(v36, v3, v4, v5);
    v1 = v36[0];
    v34 = v36[1];
    v7 = v36[2];
    v8 = v36[3];
    v9 = v36[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v7 = v11;
    v8 = 0;
  }
  v32 = v7;
  v33 = (unint64_t)(v7 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v14 = __CocoaSet.Iterator.next()(v6);
  if (!v14)
    goto LABEL_39;
  v15 = v14;
  v35 = v14;
  v16 = sub_100159478();
  swift_unknownObjectRetain(v15);
  swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
  v17 = v37;
  swift_unknownObjectRelease(v15);
  v18 = v8;
  v19 = v9;
  if (!v17)
    goto LABEL_39;
  while (1)
  {
    v24 = objc_msgSend(v17, "session", v32);
    v25 = objc_msgSend(v24, "role");

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIWindowSceneSessionRoleApplication);
    if (v26 == v30 && v28 == v29)
    {

      swift_bridgeObjectRelease_n(v28, 2);
      goto LABEL_39;
    }
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
      goto LABEL_39;

    v8 = v18;
    v9 = v19;
    if (v1 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v9)
      break;
    v19 = (v9 - 1) & v9;
    v20 = __clz(__rbit64(v9)) | (v8 << 6);
    v18 = v8;
LABEL_32:
    v17 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v20);
    if (!v17)
      goto LABEL_39;
  }
  v21 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v21 >= v33)
    goto LABEL_39;
  v22 = *(_QWORD *)(v34 + 8 * v21);
  v18 = v8 + 1;
  if (v22)
    goto LABEL_31;
  v18 = v8 + 2;
  if (v8 + 2 >= v33)
    goto LABEL_39;
  v22 = *(_QWORD *)(v34 + 8 * v18);
  if (v22)
    goto LABEL_31;
  v18 = v8 + 3;
  if (v8 + 3 >= v33)
    goto LABEL_39;
  v22 = *(_QWORD *)(v34 + 8 * v18);
  if (v22)
    goto LABEL_31;
  v18 = v8 + 4;
  if (v8 + 4 >= v33)
    goto LABEL_39;
  v22 = *(_QWORD *)(v34 + 8 * v18);
  if (v22)
    goto LABEL_31;
  v18 = v8 + 5;
  if (v8 + 5 >= v33)
    goto LABEL_39;
  v22 = *(_QWORD *)(v34 + 8 * v18);
  if (v22)
  {
LABEL_31:
    v19 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_32;
  }
  v23 = v8 + 6;
  while (v33 != v23)
  {
    v22 = *(_QWORD *)(v34 + 8 * v23++);
    if (v22)
    {
      v18 = v23 - 1;
      goto LABEL_31;
    }
  }
LABEL_39:
  sub_10000F7C4(v1);
}

uint64_t sub_100158320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;

  v8 = type metadata accessor for ScenePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001F3B60);
  v22[0] = a2;
  v22[1] = a3;
  sub_100006DF4(&qword_100295760);
  State.wrappedValue.getter(&v23);
  v13 = v23;
  v14 = swift_getKeyPath(&unk_1001F3AC0);
  v22[0] = v13;
  v15 = sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v22, v14, v15);
  swift_release(v14);
  v16 = v13 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase;
  swift_beginAccess(v13 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase, v22, 0, 0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17(v11, v16, v8);
  swift_release(v13);
  v18 = (uint64_t *)(a4 + *(int *)(sub_100006DF4(&qword_100295768) + 36));
  v19 = sub_100006DF4(&qword_100295770);
  v17((char *)v18 + *(int *)(v19 + 28), (uint64_t)v11, v8);
  *v18 = KeyPath;
  v20 = sub_100006DF4(&qword_100295778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a4, a1, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001584D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100158320(a1, *v2, v2[1], a2);
}

uint64_t sub_1001584DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_1001F3AC0);
  v8[0] = v1;
  v4 = sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase, v8, 0, 0);
  v6 = type metadata accessor for ScenePhase(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_1001585A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F3AC0);
  v9[0] = v3;
  v5 = sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase;
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase, v9, 0, 0);
  v7 = type metadata accessor for ScenePhase(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_100158664(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  __n128 v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = type metadata accessor for ScenePhase(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F3AC0);
  v13 = v8;
  v14 = v7;
  v15 = v8;
  sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_100159460);
  v10 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v10);
}

uint64_t sub_100158770(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase, v6, 33, 0);
  v4 = type metadata accessor for ScenePhase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

double sub_1001587EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F3A98);
  v4 = v0;
  v2 = sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0
                                                          + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__notificationObservers)).n128_u64[0];
  return result;
}

double sub_10015887C@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F3A98);
  v8 = v3;
  v5 = sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3
                 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__notificationObservers);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

double sub_100158914(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F3A98);
  v6 = v3;
  sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_100159444);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1001589CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  void (*v7)(_QWORD);
  uint64_t v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSNotificationName *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSNotificationName *v29;
  char *v30;
  NSNotificationName *v31;
  char *v32;
  uint64_t v33;
  NSString *v34;
  NSString *v35;
  NSString *v36;
  NSString *v37;
  _QWORD *v38;
  uint64_t KeyPath;
  void *v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  unsigned int v48;
  unsigned int v49;
  NSNotificationName v50;
  NSNotificationName v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;

  v1 = v0;
  v2 = type metadata accessor for ScenePhase(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = enum case for ScenePhase.background(_:);
  v7 = *(void (**)(_QWORD))(v3 + 104);
  v8 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v7)(v1 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase, enum case for ScenePhase.background(_:), v2);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__notificationObservers) = _swiftEmptyArrayStorage;
  v58 = v1
      + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel___observationRegistrar;
  ObservationRegistrar.init()(v8);
  v9 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v10 = objc_msgSend(v9, "connectedScenes");

  v11 = sub_100159478();
  v12 = sub_100007D5C((unint64_t *)&qword_10028AC18, (uint64_t (*)(uint64_t))sub_100159478, (uint64_t)&protocol conformance descriptor for NSObject);
  v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

  sub_100157F8C(v13);
  v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    v54 = v5;
    v55 = v3;
    v16 = sub_100006DF4(&qword_100295750);
    v17 = sub_100006DF4(&qword_100295758);
    v59 = v15;
    v18 = v17;
    v19 = *(_QWORD *)(v17 - 8);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject(v16, v22 + 4 * v20, v21 | 7);
    v57 = v6;
    v24 = v23;
    *(_OWORD *)(v23 + 16) = xmmword_1001E6660;
    v25 = (NSNotificationName *)(v23 + v22);
    v26 = v23 + v22 + *(int *)(v18 + 48);
    v51 = UISceneDidActivateNotification;
    *v25 = UISceneDidActivateNotification;
    v49 = enum case for ScenePhase.active(_:);
    v7(v26);
    v27 = (char *)v25 + v20 + *(int *)(v18 + 48);
    v50 = UISceneWillDeactivateNotification;
    *(NSNotificationName *)((char *)v25 + v20) = UISceneWillDeactivateNotification;
    v52 = 0;
    v28 = enum case for ScenePhase.inactive(_:);
    ((void (*)(char *, _QWORD, uint64_t))v7)(v27, enum case for ScenePhase.inactive(_:), v2);
    v29 = (NSNotificationName *)((char *)v25 + 2 * v20);
    v30 = (char *)v29 + *(int *)(v18 + 48);
    *v29 = UISceneWillEnterForegroundNotification;
    v48 = v28;
    ((void (*)(char *, uint64_t, uint64_t))v7)(v30, v28, v2);
    v31 = (NSNotificationName *)((char *)v25 + 3 * v20);
    v32 = (char *)v31 + *(int *)(v18 + 48);
    *v31 = UISceneDidEnterBackgroundNotification;
    v56 = v2;
    v53 = (void (*)(char *, uint64_t, uint64_t))v7;
    v33 = ((uint64_t (*)(char *, _QWORD, uint64_t))v7)(v32, v57, v2);
    __chkstk_darwin(v33);
    *((_QWORD *)&v48 - 2) = v59;
    *((_QWORD *)&v48 - 1) = v1;
    v34 = v51;
    v35 = v50;
    v36 = UISceneWillEnterForegroundNotification;
    v37 = UISceneDidEnterBackgroundNotification;
    v38 = sub_1001594BC(v24, (void (*)(_OWORD *__return_ptr, _QWORD, char *))sub_1001594B4);
    swift_setDeallocating(v24);
    swift_arrayDestroy(v25, *(_QWORD *)(v24 + 16), v18);
    swift_deallocClassInstance(v24, 32, 7);
    KeyPath = swift_getKeyPath(&unk_1001F3A98);
    __chkstk_darwin(KeyPath);
    *((_QWORD *)&v48 - 2) = v1;
    *((_QWORD *)&v48 - 1) = v38;
    v60 = v1;
    sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
    v40 = v59;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, KeyPath, sub_100159444);
    swift_release(KeyPath);
    v41 = objc_msgSend(v40, "activationState", swift_bridgeObjectRelease().n128_f64[0]);
    if (v41 == (id)1)
    {
      v43 = v48;
      v42 = v54;
    }
    else
    {
      v42 = v54;
      v43 = v57;
      if (!v41)
        v43 = v49;
    }
    v44 = v56;
    v53(v42, v43, v56);
    v45 = swift_getKeyPath(&unk_1001F3AC0);
    __chkstk_darwin(v45);
    *((_QWORD *)&v48 - 2) = v1;
    *((_QWORD *)&v48 - 1) = v42;
    v60 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v45, sub_1001598A0);
    v46 = swift_release(v45);
    (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v42, v44, v46);

  }
  return v1;
}

uint64_t sub_100158E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v21 = a1;
  v22 = a3;
  v8 = type metadata accessor for ScenePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v12 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v13 = swift_allocObject(&unk_10026E200, 24, 7);
  swift_weakInit(v13 + 16, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_10026E228, v15 + v10, v14 | 7);
  *(_QWORD *)(v16 + 16) = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_1001596B0;
  v24 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10014BC70;
  aBlock[3] = &unk_10026E240;
  v17 = _Block_copy(aBlock);
  *(_QWORD *)&v18 = swift_release(v24).n128_u64[0];
  v19 = objc_msgSend(v11, "addObserverForName:object:queue:usingBlock:", v21, v22, v12, v17, v18);
  _Block_release(v17);

  result = swift_getObjectType(v19);
  a5[3] = result;
  *a5 = v19;
  return result;
}

double sub_100159040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t Strong;
  double result;
  uint64_t v11;
  uint64_t KeyPath;
  __n128 v13;
  _BYTE v14[16];
  uint64_t v15;
  char v16[24];

  v5 = type metadata accessor for ScenePhase(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v16, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v11 = Strong;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
    KeyPath = swift_getKeyPath(&unk_1001F3AC0);
    __chkstk_darwin(KeyPath);
    *(_QWORD *)&v14[-16] = v11;
    *(_QWORD *)&v14[-8] = v8;
    v15 = v11;
    sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_1001598A0);
    v13 = swift_release(KeyPath);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v6 + 8))(v8, v5, v13);
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001591A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1001F3A98);
  v3 = v0
     + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel___observationRegistrar;
  v17[0] = v1;
  v4 = sub_100007D5C(&qword_100295748, type metadata accessor for HostedScenePhaseModel, (uint64_t)&unk_1001F3A78);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__notificationObservers);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (void *)objc_opt_self(NSNotificationCenter);
    v8 = v5 + 32;
    swift_bridgeObjectRetain(v5);
    do
    {
      sub_10000A0EC(v8, (uint64_t)v17);
      v9 = objc_msgSend(v7, "defaultCenter");
      v10 = v18;
      v11 = sub_100023AF4(v17, v18);
      v12 = _bridgeAnythingToObjectiveC<A>(_:)(v11, v10);
      objc_msgSend(v9, "removeObserver:", v12);

      swift_unknownObjectRelease(v12);
      sub_100009C08(v17);
      v8 += 32;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  v13 = v1 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__scenePhase;
  v14 = type metadata accessor for ScenePhase(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  v15 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v3, v15);
  return v1;
}

uint64_t sub_100159344()
{
  uint64_t v0;

  v0 = sub_1001591A4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100159364()
{
  return type metadata accessor for HostedScenePhaseModel(0);
}

uint64_t type metadata accessor for HostedScenePhaseModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100295640;
  if (!qword_100295640)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HostedScenePhaseModel);
  return result;
}

uint64_t sub_1001593A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for ScenePhase(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 3, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_100159444()
{
  return sub_1001595D8();
}

uint64_t sub_100159460()
{
  uint64_t v0;

  return sub_100158770(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_100159478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AC10;
  if (!qword_10028AC10)
  {
    v1 = objc_opt_self(UIScene);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028AC10);
  }
  return result;
}

uint64_t sub_1001594B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_100158E68(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

_QWORD *sub_1001594BC(uint64_t a1, void (*a2)(_OWORD *__return_ptr, _QWORD, char *))
{
  int64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD v13[2];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v14 = _swiftEmptyArrayStorage;
    sub_1001DA2A4(0, v2, 0);
    v3 = _swiftEmptyArrayStorage;
    v6 = sub_100006DF4(&qword_100295758);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = (char *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    v9 = *(_QWORD *)(v7 + 72);
    do
    {
      a2(v13, *(_QWORD *)v8, &v8[*(int *)(v6 + 48)]);
      v14 = v3;
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1001DA2A4(v10 > 1, v11 + 1, 1);
        v3 = v14;
      }
      v8 += v9;
      v3[2] = v11 + 1;
      sub_10003EA2C(v13, &v3[4 * v11 + 4]);
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1001595D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__notificationObservers);
  *(_QWORD *)(v2
            + OBJC_IVAR____TtC17SequoiaTranslatorP33_543CC1964A8BEA98CCBD6CC816E4E11321HostedScenePhaseModel__notificationObservers) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100159618()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015963C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScenePhase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1001596B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScenePhase(0) - 8) + 80);
  return sub_100159040(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1001596F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100159700(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t *sub_10015970C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for ScenePhaseSupportModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

_QWORD *assignWithTake for ScenePhaseSupportModifier(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for ScenePhaseSupportModifier()
{
  return &type metadata for ScenePhaseSupportModifier;
}

uint64_t sub_1001597E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10021666C, 1);
}

unint64_t sub_100159804()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295780;
  if (!qword_100295780)
  {
    v1 = sub_1000070BC(&qword_100295768);
    sub_100012334(&qword_100295788, &qword_100295778, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100012334(&qword_100295790, &qword_100295770, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295780);
  }
  return result;
}

uint64_t sub_1001598A0()
{
  return sub_100159460();
}

char *sub_1001598B4(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = &v4[v13];
    v15 = &a2[v13];
    v16 = type metadata accessor for Locale(0);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v17(&v4[a3[7]], &a2[a3[7]], v16);
  }
  return v4;
}

uint64_t sub_1001599A4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for Locale(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v9(v6, v7);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(a1 + a2[7], v7);
}

char *sub_100159A40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Locale(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v16(&a1[a3[7]], &a2[a3[7]], v15);
  return a1;
}

char *sub_100159B04(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Locale(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  v16(&a1[a3[7]], &a2[a3[7]], v15);
  return a1;
}

char *sub_100159BD4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for Locale(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v14(&a1[a3[7]], &a2[a3[7]], v13);
  return a1;
}

char *sub_100159C8C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Locale(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(&a1[a3[7]], &a2[a3[7]], v15);
  return a1;
}

uint64_t sub_100159D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100159D58);
}

uint64_t sub_100159D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for Locale(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100159DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100159E04);
}

uint64_t sub_100159E04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for Locale(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SELFLoggingInvocationDescription(uint64_t a1)
{
  uint64_t result;

  result = qword_1002957F0;
  if (!qword_1002957F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SELFLoggingInvocationDescription);
  return result;
}

uint64_t sub_100159EDC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v5[0] = &unk_1001F3BD8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Locale(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_100159F6C(char *a1)
{
  sub_1001D52F4(*a1);
}

void sub_100159F78()
{
  char *v0;

  sub_1000CE1D8(*v0);
}

void sub_100159F80()
{
  __asm { BR              X10 }
}

uint64_t sub_100159FC0(uint64_t a1)
{
  String.hash(into:)(a1, 0x697461636F766E69, 0xEC00000064496E6FLL);
  return swift_bridgeObjectRelease(0xEC00000064496E6FLL);
}

void sub_10015A024(uint64_t a1)
{
  char *v1;

  sub_1000CE998(a1, *v1);
}

unint64_t sub_10015A02C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015AA70(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10015A058()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10015A08C + 4 * byte_1001F3B94[*v0]))();
}

void sub_10015A08C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "invocationId");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10015A0B0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "sourceLocale");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_10015A0E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10015A118 + 4 * byte_1001F3B98[*v0]))(0xD000000000000012, 0x80000001001F7F70);
}

uint64_t sub_10015A118()
{
  return 0x697461636F766E69;
}

uint64_t sub_10015A138()
{
  return 0x6F4C656372756F73;
}

unint64_t sub_10015A168@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015AA70(a1);
  *a2 = result;
  return result;
}

void sub_10015A18C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10015A198(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A7C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A1C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015A7C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10015A1E8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v42 = a2;
  v3 = type metadata accessor for Locale(0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  v4 = __chkstk_darwin(v3);
  v41 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v43 = (char *)&v39 - v6;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  v47 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100006DF4(&qword_100295830);
  v11 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SELFLoggingInvocationDescription(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_100023AF4(a1, v18);
  v19 = sub_10015A7C8();
  v49 = v13;
  v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SELFLoggingInvocationDescription.CodingKeys, &type metadata for SELFLoggingInvocationDescription.CodingKeys, v19, v18, v17);
  if (v20)
  {
    sub_100009C08(a1);
  }
  else
  {
    v21 = v10;
    v40 = v11;
    v22 = v47;
    v23 = v48;
    v50 = a1;
    v54 = 0;
    *(_QWORD *)v16 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v48);
    *((_QWORD *)v16 + 1) = v24;
    v53 = 1;
    v25 = sub_10015A88C(&qword_100295840, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v46, &v53, v23, v46, v25);
    v27 = v23;
    v28 = v14;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v16[*(int *)(v14 + 20)], v21, v26);
    v52 = 2;
    v29 = KeyedDecodingContainer.decode(_:forKey:)(&v52, v27);
    v30 = v43;
    Locale.init(identifier:)(v29, v31);
    v32 = &v16[*(int *)(v14 + 24)];
    v33 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v34 = v30;
    v35 = v45;
    v33(v32, v34, v45);
    v51 = 3;
    v36 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v48);
    v37 = v41;
    Locale.init(identifier:)(v36, v38);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v49, v48);
    v33(&v16[*(int *)(v28 + 28)], v37, v35);
    sub_10015A80C((uint64_t)v16, v42);
    sub_100009C08(v50);
    sub_10015A850((uint64_t)v16);
  }
}

void sub_10015A5AC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100006DF4(&qword_100295848);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v9);
  v11 = sub_10015A7C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SELFLoggingInvocationDescription.CodingKeys, &type metadata for SELFLoggingInvocationDescription.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v25, v5);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v14 = (char *)v3 + *(int *)(type metadata accessor for SELFLoggingInvocationDescription(0) + 20);
    v24 = 1;
    type metadata accessor for UUID(0);
    sub_10015A88C(&qword_100295850, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v24, v5);
    v16 = Locale.identifier.getter(v15);
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v23, v5);
    swift_bridgeObjectRelease();
    v19 = Locale.identifier.getter(v18);
    v22 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v22, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
  }
}

void sub_10015A7A0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10015A1E8(a1, a2);
}

void sub_10015A7B4(_QWORD *a1)
{
  sub_10015A5AC(a1);
}

unint64_t sub_10015A7C8()
{
  unint64_t result;

  result = qword_100295838;
  if (!qword_100295838)
  {
    result = swift_getWitnessTable(&unk_1001F3D3C, &type metadata for SELFLoggingInvocationDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100295838);
  }
  return result;
}

uint64_t sub_10015A80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SELFLoggingInvocationDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015A850(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SELFLoggingInvocationDescription(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10015A88C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SELFLoggingInvocationDescription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10015A918 + 4 * byte_1001F3BA1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10015A94C + 4 * byte_1001F3B9C[v4]))();
}

uint64_t sub_10015A94C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A954(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015A95CLL);
  return result;
}

uint64_t sub_10015A968(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015A970);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10015A974(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A97C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SELFLoggingInvocationDescription.CodingKeys()
{
  return &type metadata for SELFLoggingInvocationDescription.CodingKeys;
}

unint64_t sub_10015A99C()
{
  unint64_t result;

  result = qword_100295858;
  if (!qword_100295858)
  {
    result = swift_getWitnessTable(&unk_1001F3D14, &type metadata for SELFLoggingInvocationDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100295858);
  }
  return result;
}

unint64_t sub_10015A9E4()
{
  unint64_t result;

  result = qword_100295860;
  if (!qword_100295860)
  {
    result = swift_getWitnessTable(&unk_1001F3C4C, &type metadata for SELFLoggingInvocationDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100295860);
  }
  return result;
}

unint64_t sub_10015AA2C()
{
  unint64_t result;

  result = qword_100295868;
  if (!qword_100295868)
  {
    result = swift_getWitnessTable(&unk_1001F3C74, &type metadata for SELFLoggingInvocationDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100295868);
  }
  return result;
}

unint64_t sub_10015AA70(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002627B0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t (*sub_10015AABC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10015AB04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  int *v15;
  id v16;
  Class isa;
  Class v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSString v25;
  unsigned __int8 v26;
  uint64_t v27;
  NSUUID v28;
  Class v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  _BYTE v54[24];

  v2 = v1;
  v4 = sub_100006DF4(&qword_100295AE0);
  v5 = __chkstk_darwin(v4);
  v51 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v50 = (uint64_t)&v43 - v7;
  v8 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v8);
  v46 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10000A560();
  v14 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v43);
  v49 = NSUserDefaults.genderDisambiguationEnabled.getter();

  v15 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  v16 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v18 = Locale._bridgeToObjectiveC()().super.isa;
  v48 = objc_msgSend(v16, "initWithSourceLocale:targetLocale:", isa, v18);

  v47 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabName);
  v52 = v2;
  v19 = v2 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabSessionId;
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabSessionId, v54, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v19, v10);
  v20 = v15[9];
  v45 = *(_QWORD *)(a1 + v15[8]);
  v44 = *(unsigned __int8 *)(a1 + v20);
  v21 = v46;
  v22 = sub_10000B074(a1 + v15[14], v46, (uint64_t *)&unk_10028F1B0);
  v23 = *(_QWORD *)(a1 + v15[12]);
  v24 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v22);
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "BOOLForKey:", v25);

  v27 = v21;
  v28.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v29 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v27, 1, v10) != 1)
  {
    v29 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v27, v10);
  }
  v30 = objc_allocWithZone((Class)_LTSELFLoggingTranslateAppContext);
  LOBYTE(v42) = v26;
  LOBYTE(v41) = v44;
  v31 = v48;
  v32 = objc_msgSend(v30, "initWithDisplayMode:localePair:isGenderAlternativeEnabled:tabName:tabSessionId:conversationTabView:isPlayTranslationsEnabled:autoTranslateSessionId:audioChannel:languageIdentificationEnabled:", 0, v48, v49 & 1, v47, v28.super.isa, v45, v41, v29, v23, v42);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v33 = objc_msgSend((id)objc_opt_self(_LTSELFLoggingInvocationProvider), "startInvocationWithTask:inputMode:invocationType:translateAppContext:", 1, *(_QWORD *)(a1 + v15[7]), *(_QWORD *)(a1 + v15[6]), v32);

  v34 = v52;
  v35 = *(void **)(v52 + 16);
  *(_QWORD *)(v52 + 16) = v33;

  v36 = v50;
  sub_10015C7DC(a1, v50);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v15 - 1) + 56))(v36, 0, 1, v15);
  v37 = v36;
  v38 = v51;
  sub_10015C864(v37, v51);
  v39 = v34 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters;
  swift_beginAccess(v39, v53, 33, 0);
  sub_10015C794(v38, v39);
  return swift_endAccess(v53);
}

uint64_t sub_10015AEE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v3 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v27 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100295AE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100295AE0);
  v10 = __chkstk_darwin(v9);
  v28 = (uint64_t)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v26 - v15;
  v30 = v1;
  v17 = v1 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters, v31, 0, 0);
  v29 = a1;
  sub_10015C7DC(a1, (uint64_t)v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v16, 0, 1, v3);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000B074(v17, (uint64_t)v8, &qword_100295AE0);
  sub_10000B074((uint64_t)v16, v18, &qword_100295AE0);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v8, 1, v3) == 1)
  {
    sub_10000A020((uint64_t)v16, &qword_100295AE0);
    if (v19(v18, 1, v3) == 1)
      return sub_10000A020((uint64_t)v8, &qword_100295AE0);
  }
  else
  {
    sub_10000B074((uint64_t)v8, (uint64_t)v14, &qword_100295AE0);
    if (v19(v18, 1, v3) != 1)
    {
      v24 = v27;
      sub_10015C820(v18, v27);
      v25 = sub_10015C350((uint64_t)v14, v24);
      sub_100097944(v24);
      sub_10000A020((uint64_t)v16, &qword_100295AE0);
      sub_100097944((uint64_t)v14);
      result = sub_10000A020((uint64_t)v8, &qword_100295AE0);
      if (v25)
        return result;
      goto LABEL_7;
    }
    sub_10000A020((uint64_t)v16, &qword_100295AE0);
    sub_100097944((uint64_t)v14);
  }
  sub_10000A020((uint64_t)v8, &qword_100295AE8);
LABEL_7:
  v21 = v28;
  sub_10000B074(v17, v28, &qword_100295AE0);
  v22 = v19(v21, 1, v3);
  sub_10000A020(v21, &qword_100295AE0);
  if (v22 == 1)
  {
    v23 = *(void **)(v30 + 16);
    if (v23)
      objc_msgSend(v23, "endSuccessfullyWithQSSSessionId:", 0);
  }
  return sub_10015AB04(v29);
}

void sub_10015B1F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v9;
  id v10;
  Class isa;
  Class v12;
  id v13;
  NSString v14;

  if (a2)
  {
    v6 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v6 = a1 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = *(void **)(v5 + 16);
      if (v7)
      {
        v9 = objc_allocWithZone((Class)_LTLocalePair);
        v10 = v7;
        isa = Locale._bridgeToObjectiveC()().super.isa;
        v12 = Locale._bridgeToObjectiveC()().super.isa;
        v13 = objc_msgSend(v9, "initWithSourceLocale:targetLocale:", isa, v12);

        v14 = String._bridgeToObjectiveC()();
        objc_msgSend(v10, "userEndedTypingWithPayload:localePair:reason:", v14, v13, a5);

      }
    }
  }
}

void sub_10015B308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  id v9;
  id v10;
  Class isa;
  Class v12;
  id v13;
  NSString v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];

  v5 = *(void **)(v4 + 16);
  if (v5)
  {
    v9 = objc_allocWithZone((Class)_LTLocalePair);
    v10 = v5;
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v12 = Locale._bridgeToObjectiveC()().super.isa;
    v13 = objc_msgSend(v9, "initWithSourceLocale:targetLocale:", isa, v12);

    if (a2)
      v14 = String._bridgeToObjectiveC()();
    else
      v14 = 0;
    objc_msgSend(v10, "appBackgroundedWithPayload:localePair:", v14, v13);

    v15 = sub_10015AABC((uint64_t)v26);
    v17 = v16;
    v18 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
    v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
    if (!v19(v17, 1, v18))
    {
      v20 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v17, a3, v20);
    }
    ((void (*)(_BYTE *, _QWORD))v15)(v26, 0);
    v21 = sub_10015AABC((uint64_t)v26);
    v23 = v22;
    if (!v19(v22, 1, v18))
    {
      v24 = v23 + *(int *)(v18 + 20);
      v25 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v24, a4, v25);
    }
    ((void (*)(_BYTE *, _QWORD))v21)(v26, 0);

  }
}

uint64_t sub_10015B4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v16[24];

  v1 = sub_100006DF4(&qword_100295AE0);
  __chkstk_darwin(v1);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  UUID.init()(v6);
  v9 = v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabSessionId;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabSessionId, v16, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v9, v8, v4);
  swift_endAccess(v16);
  v10 = OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) = 0;
  v11 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0;

  v12 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  v13 = v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters, v16, 33, 0);
  sub_10015C794((uint64_t)v3, v13);
  result = swift_endAccess(v16);
  *(_BYTE *)(v0 + v10) = 0;
  return result;
}

void sub_10015B614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v1 = sub_100006DF4(&qword_100295AE0);
  __chkstk_darwin(v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = *(void **)(v0 + 16);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v5, "endSuccessfullyWithQSSSessionId:", 0);
    v6 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = 0;

    v7 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
    v8 = v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters;
    swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters, v10, 33, 0);
    sub_10015C794((uint64_t)v3, v8);
    swift_endAccess(v10);
    *(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) = 0;

  }
}

uint64_t sub_10015B708()
{
  id *v0;
  char *v1;
  uint64_t v2;

  sub_10000A020((uint64_t)v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_parameters, &qword_100295AE0);
  v1 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabSessionId;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_10015B778()
{
  return type metadata accessor for SELFLoggingInvocationWrapper(0);
}

uint64_t type metadata accessor for SELFLoggingInvocationWrapper(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_1002958B8, (uint64_t)&nominal type descriptor for SELFLoggingInvocationWrapper);
}

void sub_10015B794(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "\b";
  sub_10015C304(319, (unint64_t *)&unk_1002958C8, type metadata accessor for SELFLoggingInvocationWrapper.Parameters);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[4] = &unk_1001F3DD8;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for SELFLoggingInvocationWrapper.Parameters(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100295A80, (uint64_t)&nominal type descriptor for SELFLoggingInvocationWrapper.Parameters);
}

_QWORD *sub_10015B864(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = type metadata accessor for Locale(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *(_QWORD *)((char *)a1 + v9) = *(_QWORD *)((char *)a2 + v9);
    v10 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    v11 = a3[10];
    v12 = a3[11];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v15 = a3[13];
    *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v16[8] = v17[8];
    v18 = a3[14];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v21 = type metadata accessor for UUID(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  return a1;
}

uint64_t sub_10015B9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = type metadata accessor for Locale(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  v6 = a1 + *(int *)(a2 + 56);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t sub_10015BA98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Locale(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[10];
  v11 = a3[11];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a3[14];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_10015BBFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for Locale(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v8 = a3[10];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v12 = a3[13];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v15;
  v16 = a3[14];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v7) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v7)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_10015BDBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Locale(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[10];
  v11 = a3[11];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a3[14];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_10015BF20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;

  v6 = type metadata accessor for Locale(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[10];
  v11 = a3[11];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a3[14];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v7) = v22(v18, 1, v20);
  v23 = v22(v19, 1, v20);
  if (!(_DWORD)v7)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_10015C0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015C0DC);
}

uint64_t sub_10015C0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    v8 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
    v10 = a1 + *(int *)(a3 + 56);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10015C194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015C1A0);
}

uint64_t sub_10015C1A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
      return result;
    }
    v10 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
    v12 = a1 + *(int *)(a4 + 56);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10015C244(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v2 = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[5] = &unk_1001F3DD8;
    v6[6] = "\t";
    v6[7] = &unk_1001F3DD8;
    v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[9] = "\t";
    sub_10015C304(319, (unint64_t *)&qword_10028F698, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 11, v6, a1 + 16);
    }
  }
}

void sub_10015C304(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

BOOL sub_10015C350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_1002900F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v39 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v39 - v18;
  if ((static Locale.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v40 = v10;
  v20 = (int *)type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  if ((static Locale.== infix(_:_:)(a1 + v20[5], a2 + v20[5]) & 1) == 0
    || *(_QWORD *)(a1 + v20[6]) != *(_QWORD *)(a2 + v20[6])
    || *(_QWORD *)(a1 + v20[7]) != *(_QWORD *)(a2 + v20[7])
    || *(_QWORD *)(a1 + v20[8]) != *(_QWORD *)(a2 + v20[8])
    || *(unsigned __int8 *)(a1 + v20[9]) != *(unsigned __int8 *)(a2 + v20[9]))
  {
    return 0;
  }
  v21 = v20[10];
  v22 = (_QWORD *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 8);
  v24 = (_QWORD *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      return 0;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      return 0;
  }
  if (*(unsigned __int8 *)(a1 + v20[11]) != *(unsigned __int8 *)(a2 + v20[11])
    || *(_QWORD *)(a1 + v20[12]) != *(_QWORD *)(a2 + v20[12]))
  {
    return 0;
  }
  v26 = v20[13];
  v27 = (_QWORD *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 8);
  v29 = (_QWORD *)(a2 + v26);
  v30 = *(unsigned __int8 *)(a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      return 0;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      return 0;
  }
  sub_10000B074(a1 + v20[14], (uint64_t)v19, (uint64_t *)&unk_10028F1B0);
  sub_10000B074(a2 + v20[14], (uint64_t)v17, (uint64_t *)&unk_10028F1B0);
  v31 = *(int *)(v8 + 48);
  v32 = (uint64_t)v40;
  v33 = (uint64_t)&v40[v31];
  sub_10000B074((uint64_t)v19, (uint64_t)v40, (uint64_t *)&unk_10028F1B0);
  sub_10000B074((uint64_t)v17, v33, (uint64_t *)&unk_10028F1B0);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v34(v32, 1, v4) == 1)
  {
    sub_10000A020((uint64_t)v17, (uint64_t *)&unk_10028F1B0);
    sub_10000A020((uint64_t)v19, (uint64_t *)&unk_10028F1B0);
    if (v34(v33, 1, v4) == 1)
    {
      sub_10000A020(v32, (uint64_t *)&unk_10028F1B0);
      return 1;
    }
    goto LABEL_26;
  }
  sub_10000B074(v32, (uint64_t)v14, (uint64_t *)&unk_10028F1B0);
  if (v34(v33, 1, v4) == 1)
  {
    sub_10000A020((uint64_t)v17, (uint64_t *)&unk_10028F1B0);
    sub_10000A020((uint64_t)v19, (uint64_t *)&unk_10028F1B0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_26:
    sub_10000A020(v32, &qword_1002900F0);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v33, v4);
  v35 = sub_10015C74C();
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v35);
  v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v7, v4);
  sub_10000A020((uint64_t)v17, (uint64_t *)&unk_10028F1B0);
  sub_10000A020((uint64_t)v19, (uint64_t *)&unk_10028F1B0);
  v37(v14, v4);
  sub_10000A020(v32, (uint64_t *)&unk_10028F1B0);
  return (v36 & 1) != 0;
}

unint64_t sub_10015C74C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002900F8;
  if (!qword_1002900F8)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1002900F8);
  }
  return result;
}

uint64_t sub_10015C794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100295AE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015C7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015C820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015C864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100295AE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_10015C8DC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleLabel);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, "setNumberOfLines:", 0);
    v5 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v4, "setFont:", v5);

    v6 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    objc_msgSend(v4, "setTextColor:", v6);

    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_10015CA58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___subtitleLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___subtitleLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___subtitleLabel);
  }
  else
  {
    v4 = sub_10015CAE8();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10015CAE8()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  objc_msgSend(v0, "setFont:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v2);

  objc_msgSend(v0, "setHidden:", 1);
  return v0;
}

id sub_10015CC08()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmark;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmark);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmark);
  }
  else
  {
    v4 = sub_10015CC9C();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10015CC9C()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSString v10;
  id v11;

  v0 = sub_10015CFF0();
  v1 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, 0);
  v3 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v2, "pointSize");
  v4 = objc_msgSend(v3, "systemFontOfSize:weight:");
  v5 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  v6 = objc_msgSend(v5, "scaledFontForFont:maximumPointSize:", v4, 1.79769313e308);

  v7 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v6);
  objc_msgSend(v1, "setPreferredSymbolConfiguration:", v7);
  objc_msgSend(v1, "setContentMode:", 4);
  v8 = objc_msgSend(v1, "widthAnchor");
  v9 = objc_msgSend(v8, "constraintEqualToConstant:", 22.0);

  objc_msgSend(v9, "setActive:", 1);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v10);

  objc_msgSend(v1, "setTintColor:", v11);
  objc_msgSend(v1, "setAlpha:", 0.0);

  return v1;
}

id sub_10015CEF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleStack;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleStack);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleStack);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, "setAxis:", 1);
    objc_msgSend(v4, "setAlignment:", 0);
    objc_msgSend(v4, "setDistribution:", 0);
    objc_msgSend(v4, "setSpacing:", 4.0);
    objc_msgSend(v4, "setLayoutMarginsRelativeArrangement:", 0);
    objc_msgSend(v4, "setInsetsLayoutMarginsFromSafeArea:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10015CFF0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmarkImage;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmarkImage);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmarkImage);
  }
  else
  {
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v4);

    if (!v5)
      v5 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    v6 = objc_msgSend(v5, "imageFlippedForRightToLeftLayoutDirection");

    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_10015D0D8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  Class v30;
  id v31;
  id v32;
  id v33;
  id v34;
  double v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  Class v50;
  uint64_t v51;
  objc_super v53;

  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___subtitleLabel] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmark] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleStack] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmarkImage] = 0;
  v9 = &v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow_alternative];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  sub_100023AB0((uint64_t)a3, (uint64_t)&v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow_sense]);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow_index] = a4;
  v53.receiver = v5;
  v53.super_class = (Class)type metadata accessor for SenseRow();
  v10 = objc_msgSendSuper2(&v53, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11 = sub_10015C8DC();
  v12 = a3[3];
  v13 = a3[4];
  sub_100023AF4(a3, v12);
  dispatch thunk of TranslationSense.definition.getter(v12, v13);
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  objc_msgSend(v11, "setText:", v16);

  v17 = sub_10015C8DC();
  LODWORD(v18) = 1132068864;
  objc_msgSend(v17, "setContentHuggingPriority:forAxis:", 0, v18);

  v19 = a3[3];
  v20 = a3[4];
  sub_100023AF4(a3, v19);
  v21 = dispatch thunk of TranslationSense.labels.getter(v19, v20);
  v22 = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRelease(v21);
  if (v22)
  {
    v23 = objc_allocWithZone((Class)SQListFormatter);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v25 = objc_msgSend(v23, "initWithLocale:", isa);

    v26 = a3[3];
    v27 = a3[4];
    sub_100023AF4(a3, v26);
    v28 = dispatch thunk of TranslationSense.labels.getter(v26, v27);
    v29 = sub_100125308(v28);
    swift_bridgeObjectRelease(v28);
    v30 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    v31 = objc_msgSend(v25, "stringFromItems:", v30);

    v32 = sub_10015CA58();
    objc_msgSend(v32, "setText:", v31);

    v33 = sub_10015CA58();
    objc_msgSend(v33, "setHidden:", 0);

  }
  v34 = sub_10015CC08();
  LODWORD(v35) = 1144750080;
  objc_msgSend(v34, "setContentHuggingPriority:forAxis:", 0, v35);

  v36 = sub_10015CEF8();
  v37 = sub_10015C8DC();
  objc_msgSend(v36, "addArrangedSubview:", v37);

  v38 = sub_10015CEF8();
  v39 = sub_10015CA58();
  objc_msgSend(v38, "addArrangedSubview:", v39);

  v40 = v10;
  v41 = sub_10015CEF8();
  objc_msgSend(v40, "addArrangedSubview:", v41);

  v42 = v40;
  v43 = sub_10015CC08();
  objc_msgSend(v42, "addArrangedSubview:", v43);

  objc_msgSend(v42, "setDirectionalLayoutMargins:", 8.0, 16.0, 8.0, 16.0);
  objc_msgSend(v42, "setLayoutMarginsRelativeArrangement:", 1);
  objc_msgSend(v42, "setInsetsLayoutMarginsFromSafeArea:", 0);
  objc_msgSend(v42, "setAxis:", 0);
  objc_msgSend(v42, "setAlignment:", 0);
  objc_msgSend(v42, "setDistribution:", 0);
  objc_msgSend(v42, "setSpacing:", 4.0);
  v44 = (void *)objc_opt_self(NSLayoutConstraint);
  v45 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v46 = swift_allocObject(v45, 40, 7);
  *(_OWORD *)(v46 + 16) = xmmword_1001EA980;
  v47 = objc_msgSend(v42, "heightAnchor");
  v48 = objc_msgSend(v47, "constraintGreaterThanOrEqualToConstant:", 44.0);

  *(_QWORD *)(v46 + 32) = v48;
  specialized Array._endMutation()(v49);
  sub_100025254();
  v50 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v46);
  objc_msgSend(v44, "activateConstraints:", v50);

  v51 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(a5, v51);
  sub_100009C08(a3);
  return v42;
}

id sub_10015D618()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SenseRow();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SenseRow()
{
  return objc_opt_self(_TtC17SequoiaTranslator8SenseRow);
}

void sub_10015D6F4()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___subtitleLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmark] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___titleStack] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8SenseRow____lazy_storage___checkmarkImage] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/SenseRow.swift", 32, 2, 105, 0);
  __break(1u);
}

char *sub_10015D78C(void *a1)
{
  void *v1;
  void *v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  objc_super v15;

  v3 = (void *)objc_opt_self(UIVibrancyEffect);
  v4 = v1;
  v5 = objc_msgSend(v3, "effectForBlurEffect:style:", a1, 7);
  v6 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v5);

  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator13SeparatorView_background] = v6;
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for SeparatorView();
  v7 = objc_msgSendSuper2(&v15, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v8 = (void *)objc_opt_self(UIColor);
  v9 = (char *)v7;
  v10 = objc_msgSend(v8, "separatorColor");
  objc_msgSend(v9, "setBackgroundColor:", v10);

  v11 = *(void **)&v9[OBJC_IVAR____TtC17SequoiaTranslator13SeparatorView_background];
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v9, "addSubview:", v11);
  v12 = v9;
  v13 = v11;
  sub_1001DB5F8(v13);

  return v12;
}

id sub_10015D98C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SeparatorView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SeparatorView()
{
  return objc_opt_self(_TtC17SequoiaTranslator13SeparatorView);
}

uint64_t sub_10015D9EC()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "stringForKey:", v1);

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

  }
  else
  {
    v5 = 0xE500000000000000;
    v3 = 0x53455F7365;
  }
  v6 = sub_10000A560();
  v7 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v6);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "stringForKey:", v8);

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    if (v3 != v10)
      goto LABEL_10;
  }
  else
  {
    v10 = 0;
    v12 = 0xE000000000000000;
    if (v3)
      goto LABEL_10;
  }
  if (v5 == v12)
  {
    swift_bridgeObjectRelease(v5);
    return Locale.init(identifier:)(v3, v5);
  }
LABEL_10:
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v10, v12, 0);
  swift_bridgeObjectRelease(v12);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRetain(v5);
    sub_10015E498(v3, v5);
  }
  return Locale.init(identifier:)(v3, v5);
}

uint64_t sub_10015DB9C()
{
  NSString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t result;

  v0 = NSTemporaryDirectory();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  v3 = v2;

  swift_bridgeObjectRetain(v3);
  v4._object = (void *)0x80000001001FFDB0;
  v4._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  result = swift_bridgeObjectRelease(v3);
  qword_1002AA508 = v1;
  unk_1002AA510 = v3;
  return result;
}

void sub_10015DC28()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  void *v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  Class v11;
  uint64_t v12;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = sub_100006DF4(&qword_100295B88);
  v2 = swift_allocObject(v1, 1568, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1001F3E60;
  *(_QWORD *)(v2 + 32) = 0xD000000000000015;
  *(_QWORD *)(v2 + 40) = 0x80000001001FFDF0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 72) = &type metadata for Bool;
  *(_QWORD *)(v2 + 80) = 0xD000000000000025;
  *(_QWORD *)(v2 + 88) = 0x80000001001FAA00;
  *(_QWORD *)(v2 + 96) = 0x53455F7365;
  *(_QWORD *)(v2 + 104) = 0xE500000000000000;
  *(_QWORD *)(v2 + 120) = &type metadata for String;
  *(_QWORD *)(v2 + 128) = 0xD000000000000025;
  *(_QWORD *)(v2 + 136) = 0x80000001001FAA30;
  *(_QWORD *)(v2 + 144) = 0x53555F6E65;
  *(_QWORD *)(v2 + 152) = 0xE500000000000000;
  *(_QWORD *)(v2 + 168) = &type metadata for String;
  *(_QWORD *)(v2 + 176) = 0xD000000000000024;
  *(_QWORD *)(v2 + 184) = 0x80000001001F9FD0;
  *(_QWORD *)(v2 + 192) = 0x53455F7365;
  *(_QWORD *)(v2 + 200) = 0xE500000000000000;
  *(_QWORD *)(v2 + 216) = &type metadata for String;
  *(_QWORD *)(v2 + 224) = 0xD000000000000024;
  *(_QWORD *)(v2 + 232) = 0x80000001001FA000;
  *(_QWORD *)(v2 + 240) = 0x53555F6E65;
  *(_QWORD *)(v2 + 248) = 0xE500000000000000;
  *(_QWORD *)(v2 + 264) = &type metadata for String;
  *(_QWORD *)(v2 + 272) = 0xD000000000000029;
  *(_QWORD *)(v2 + 280) = 0x80000001001FAFF0;
  *(_QWORD *)(v2 + 288) = 0x53455F7365;
  *(_QWORD *)(v2 + 296) = 0xE500000000000000;
  *(_QWORD *)(v2 + 312) = &type metadata for String;
  *(_QWORD *)(v2 + 320) = 0xD000000000000029;
  *(_QWORD *)(v2 + 328) = 0x80000001001FAFC0;
  *(_QWORD *)(v2 + 336) = 0x53555F6E65;
  *(_QWORD *)(v2 + 344) = 0xE500000000000000;
  *(_QWORD *)(v2 + 360) = &type metadata for String;
  *(_QWORD *)(v2 + 368) = 0xD00000000000002ELL;
  *(_QWORD *)(v2 + 376) = 0x80000001001FFE10;
  *(_BYTE *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 408) = &type metadata for Bool;
  *(_QWORD *)(v2 + 416) = 0xD000000000000015;
  *(_QWORD *)(v2 + 424) = 0x80000001001FFE40;
  *(_BYTE *)(v2 + 432) = 0;
  *(_QWORD *)(v2 + 456) = &type metadata for Bool;
  *(_QWORD *)(v2 + 464) = 0xD000000000000013;
  *(_QWORD *)(v2 + 472) = 0x80000001001FFE60;
  *(_BYTE *)(v2 + 480) = 0;
  *(_QWORD *)(v2 + 504) = &type metadata for Bool;
  *(_QWORD *)(v2 + 512) = 0xD000000000000012;
  *(_QWORD *)(v2 + 520) = 0x80000001001FAB80;
  *(_QWORD *)(v2 + 552) = &type metadata for Bool;
  *(_BYTE *)(v2 + 528) = 0;
  *(_QWORD *)(v2 + 560) = 0x754164656E6E6143;
  *(_QWORD *)(v2 + 568) = 0xEF687461506F6964;
  *(_QWORD *)(v2 + 600) = &type metadata for String;
  *(_QWORD *)(v2 + 576) = 0xD00000000000004BLL;
  *(_QWORD *)(v2 + 584) = 0x80000001001FF610;
  *(_QWORD *)(v2 + 608) = 0xD000000000000012;
  *(_QWORD *)(v2 + 616) = 0x80000001001FF5F0;
  if (qword_10028A4B8 != -1)
    swift_once(&qword_10028A4B8, sub_10015DB9C);
  v3 = qword_1002AA508;
  v4 = unk_1002AA510;
  *(_QWORD *)(v2 + 648) = &type metadata for String;
  *(_QWORD *)(v2 + 624) = v3;
  *(_QWORD *)(v2 + 632) = v4;
  *(_QWORD *)(v2 + 656) = 0xD000000000000013;
  *(_QWORD *)(v2 + 664) = 0x80000001001FF5A0;
  *(_QWORD *)(v2 + 696) = &type metadata for Bool;
  *(_BYTE *)(v2 + 672) = 0;
  *(_QWORD *)(v2 + 704) = 0xD000000000000026;
  *(_QWORD *)(v2 + 712) = 0x80000001001FFE80;
  *(_QWORD *)(v2 + 744) = &type metadata for Bool;
  *(_BYTE *)(v2 + 720) = 0;
  *(_QWORD *)(v2 + 752) = 0xD00000000000002BLL;
  *(_QWORD *)(v2 + 760) = 0x80000001001FFEB0;
  *(_QWORD *)(v2 + 792) = &type metadata for Bool;
  *(_BYTE *)(v2 + 768) = 0;
  *(_QWORD *)(v2 + 800) = 0xD000000000000023;
  *(_QWORD *)(v2 + 808) = 0x80000001001FFEE0;
  *(_QWORD *)(v2 + 840) = &type metadata for Bool;
  *(_BYTE *)(v2 + 816) = 0;
  *(_QWORD *)(v2 + 848) = 0xD000000000000025;
  *(_QWORD *)(v2 + 856) = 0x80000001001FFF10;
  *(_QWORD *)(v2 + 888) = &type metadata for Int;
  *(_QWORD *)(v2 + 864) = 0;
  *(_QWORD *)(v2 + 896) = 0xD000000000000025;
  *(_QWORD *)(v2 + 904) = 0x80000001001FFF40;
  *(_QWORD *)(v2 + 936) = &type metadata for Int;
  *(_QWORD *)(v2 + 912) = 0;
  *(_QWORD *)(v2 + 944) = 0xD00000000000001DLL;
  *(_QWORD *)(v2 + 952) = 0x80000001001FFF70;
  *(_QWORD *)(v2 + 984) = &type metadata for Int;
  *(_QWORD *)(v2 + 960) = 0;
  *(_QWORD *)(v2 + 992) = 0xD00000000000001DLL;
  *(_QWORD *)(v2 + 1000) = 0x80000001001FFF90;
  *(_QWORD *)(v2 + 1032) = &type metadata for Int;
  *(_QWORD *)(v2 + 1008) = 0;
  *(_QWORD *)(v2 + 1040) = 0xD00000000000001ELL;
  *(_QWORD *)(v2 + 1048) = 0x80000001001FFFB0;
  *(_QWORD *)(v2 + 1080) = sub_100006DF4(&qword_100295B90);
  *(_QWORD *)(v2 + 1056) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v2 + 1088) = 0xD000000000000018;
  *(_QWORD *)(v2 + 1096) = 0x80000001001FDC30;
  *(_QWORD *)(v2 + 1128) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1104) = 0;
  *(_QWORD *)(v2 + 1136) = 0xD00000000000001ALL;
  *(_QWORD *)(v2 + 1144) = 0x80000001001FED60;
  *(_QWORD *)(v2 + 1176) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1152) = 0;
  *(_QWORD *)(v2 + 1184) = 0xD00000000000001ALL;
  *(_QWORD *)(v2 + 1192) = 0x80000001001FFFD0;
  *(_QWORD *)(v2 + 1224) = sub_100006DF4(&qword_100295B98);
  *(_QWORD *)(v2 + 1200) = _swiftEmptyArrayStorage;
  strcpy((char *)(v2 + 1232), "AutoplayTTSKey");
  *(_BYTE *)(v2 + 1247) = -18;
  *(_QWORD *)(v2 + 1272) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1248) = 0;
  *(_QWORD *)(v2 + 1280) = 0xD000000000000010;
  *(_QWORD *)(v2 + 1288) = 0x80000001001FFFF0;
  *(_QWORD *)(v2 + 1320) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1296) = 0;
  *(_QWORD *)(v2 + 1328) = 0xD000000000000013;
  *(_QWORD *)(v2 + 1336) = 0x80000001001FFAF0;
  *(_QWORD *)(v2 + 1368) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1344) = 1;
  *(_QWORD *)(v2 + 1376) = 0xD000000000000026;
  *(_QWORD *)(v2 + 1384) = 0x8000000100200010;
  *(_QWORD *)(v2 + 1416) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1392) = 0;
  *(_QWORD *)(v2 + 1424) = 0xD000000000000027;
  *(_QWORD *)(v2 + 1432) = 0x8000000100200040;
  *(_QWORD *)(v2 + 1464) = &type metadata for Double;
  *(_QWORD *)(v2 + 1440) = 0x3FE0000000000000;
  *(_QWORD *)(v2 + 1472) = 0xD000000000000027;
  *(_QWORD *)(v2 + 1480) = 0x8000000100200070;
  *(_QWORD *)(v2 + 1512) = &type metadata for Double;
  *(_QWORD *)(v2 + 1488) = 0x3FE999999999999ALL;
  *(_QWORD *)(v2 + 1520) = 0xD000000000000015;
  *(_QWORD *)(v2 + 1528) = 0x80000001002000A0;
  *(_QWORD *)(v2 + 1560) = &type metadata for Double;
  *(_QWORD *)(v2 + 1536) = 0x3FE0000000000000;
  swift_bridgeObjectRetain(v4);
  v5 = sub_1001A4954(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v0, "registerDefaults:", isa);

  sub_10000A560();
  v7 = (void *)static NSUserDefaults.translationGroupDefaults.getter();
  inited = swift_initStackObject(v1, &v12);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 32) = static NSUserDefaults.Constants.genderDisambiguationEnabledKey.getter();
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v10 = sub_1001A4954(inited);
  v11 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v7, "registerDefaults:", v11);

}

void sub_10015E298(char a1)
{
  int v2;
  void *v3;
  NSString v4;
  unsigned int v5;
  void *v6;
  Class isa;
  NSString v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v2 = a1 & 1;
  sub_10000A560();
  v3 = (void *)static NSUserDefaults.translationGroupDefaults.getter();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);

  if (v5 != v2)
  {
    v6 = (void *)static NSUserDefaults.translationGroupDefaults.getter();
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setValue:forKey:", isa, v8);

    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v9 = type metadata accessor for Logger(0);
    sub_10000F66C(v9, (uint64_t)qword_1002AA3C8);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 67109120;
      v14 = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 4);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Setting IsLiveActivityListeningKey with reloadControls, value: %{BOOL}d", v12, 8u);
      swift_slowDealloc(v12, -1, -1);
    }

    type metadata accessor for ControlCenter(0);
    v13 = static ControlCenter.shared.getter();
    dispatch thunk of ControlCenter.reloadControls(ofKind:)(0xD000000000000031, 0x80000001001FFD70);
    swift_release(v13);
  }
}

uint64_t sub_10015E498(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  void *v4;
  NSString v5;
  NSString v6;
  uint64_t v7;

  v3 = sub_10000A560();
  v4 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v3);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setValue:forKey:", v5, v6);

  type metadata accessor for ControlCenter(0);
  v7 = static ControlCenter.shared.getter();
  dispatch thunk of ControlCenter.reloadControls(ofKind:)(0xD000000000000031, 0x80000001001FFD70);
  return swift_release(v7);
}

double sub_10015E56C()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  NSString *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  id v10;
  NSString v11;
  Class isa;
  id v13;
  double v14;
  double v15;
  _BYTE v17[72];

  v0 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v0, v17);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v2 = (void *)objc_opt_self(UIFontDescriptor);
  v3 = NSFontAttributeName;
  v4 = objc_msgSend(v2, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle2, 0);
  v5 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v4, "pointSize");
  v6 = objc_msgSend(v5, "systemFontOfSize:weight:");
  v7 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle2);
  v8 = objc_msgSend(v7, "scaledFontForFont:maximumPointSize:", v6, 1.79769313e308);

  *(_QWORD *)(inited + 64) = sub_10015E770();
  *(_QWORD *)(inited + 40) = v8;
  v9 = sub_1001A4A88(inited);
  v10 = objc_allocWithZone((Class)NSAttributedString);
  v11 = String._bridgeToObjectiveC()();
  type metadata accessor for Key(0);
  sub_100101CA4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v10, "initWithString:attributes:", v11, isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  objc_msgSend(v13, "size");
  v15 = v14;

  return v15;
}

unint64_t sub_10015E770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C090;
  if (!qword_10028C090)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028C090);
  }
  return result;
}

uint64_t sub_10015E7AC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3F30, (uint64_t)&unk_1001F3F58, a2);
}

void sub_10015E7C0(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10015E82C(a1, a2, a3, a4, (uint64_t)&unk_1001F3F30, (uint64_t)&unk_1001F3F58);
}

uint64_t sub_10015E7EC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3F78, (uint64_t)&unk_1001F3FA0, a2);
}

void sub_10015E800(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10015E82C(a1, a2, a3, a4, (uint64_t)&unk_1001F3F78, (uint64_t)&unk_1001F3FA0);
}

void sub_10015E82C(char *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t v11;
  char v12;

  v8 = *a1;
  v9 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11 = swift_getKeyPath(a6);
  v12 = v8;
  static Published.subscript.setter(&v12, v9, KeyPath, v11);
  sub_10015EC28(a5, a6);
}

uint64_t sub_10015E8CC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3FC0, (uint64_t)&unk_1001F3FE8, a2);
}

void sub_10015E8E0(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F3FC0);
  v5 = swift_getKeyPath(&unk_1001F3FE8);
  v6 = v2;
  static Published.subscript.setter(&v6, v3, KeyPath, v5);
  sub_10015EB24();
}

uint64_t sub_10015E958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A05C(0, &qword_100295C68, OS_dispatch_queue_serial_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100007D5C(&qword_100295C70, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  v12 = sub_100006DF4(&qword_100295C78);
  v13 = sub_1000827A0(&qword_100295C80, &qword_100295C78);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  result = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x8000000100200190, v9, v6, v3, 0);
  qword_100295BA0 = result;
  return result;
}

void sub_10015EB24()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Class isa;
  NSString v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1001F3FC0);
  v2 = swift_getKeyPath(&unk_1001F3FE8);
  static Published.subscript.getter(&v7, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v4 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v3);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  static NSUserDefaults.Constants.genderDisambiguationEnabledKey.getter();
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setValue:forKey:", isa, v6, swift_bridgeObjectRelease().n128_f64[0]);

}

uint64_t sub_10015EC00()
{
  return sub_10001DA94((uint64_t)&unk_1001F3FC0, (uint64_t)&unk_1001F3FE8);
}

uint64_t sub_10015EC14()
{
  return sub_10001DA94((uint64_t)&unk_1001F3F78, (uint64_t)&unk_1001F3FA0);
}

void sub_10015EC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Class isa;
  NSString v9;
  uint64_t v10;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v10, v2, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v7 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v6);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setValue:forKey:", isa, v9);

}

uint64_t sub_10015ED04()
{
  return sub_10001DA94((uint64_t)&unk_1001F3F30, (uint64_t)&unk_1001F3F58);
}

void sub_10015ED18()
{
  sub_10015EC28((uint64_t)&unk_1001F3EE8, (uint64_t)&unk_1001F3F10);
}

uint64_t sub_10015ED4C()
{
  return sub_10001DA94((uint64_t)&unk_1001F3EE8, (uint64_t)&unk_1001F3F10);
}

id sub_10015ED60()
{
  void *v0;
  char *v1;
  void *v2;
  NSString v3;
  unsigned __int8 v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  unsigned __int8 v8;
  uint64_t v9;
  void *v10;
  NSString v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;
  id result;
  void *v20;
  objc_super v21;
  unsigned __int8 v22;
  _BYTE v23[24];

  sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v1 = v0;
  v2 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v1);
  static NSUserDefaults.Constants.genderDisambiguationEnabledKey.getter();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3, swift_bridgeObjectRelease().n128_f64[0]);

  swift_beginAccess(&v1[OBJC_IVAR____TtC17SequoiaTranslator24SharedTranslationOptions__genderDisambiguationUserSettingEnabled], v23, 33, 0);
  v22 = v4;
  Published.init(initialValue:)(&v22, &type metadata for Bool);
  v5 = swift_endAccess(v23);
  v6 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v5);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "BOOLForKey:", v7);

  swift_beginAccess(&v1[OBJC_IVAR____TtC17SequoiaTranslator24SharedTranslationOptions__autodetectSpeechEnabled], v23, 33, 0);
  v22 = v8;
  Published.init(initialValue:)(&v22, &type metadata for Bool);
  v9 = swift_endAccess(v23);
  v10 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v9);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "BOOLForKey:", v11);

  swift_beginAccess(&v1[OBJC_IVAR____TtC17SequoiaTranslator24SharedTranslationOptions__autoTranslateEnabled], v23, 33, 0);
  v22 = v12;
  Published.init(initialValue:)(&v22, &type metadata for Bool);
  v13 = swift_endAccess(v23);
  v14 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v13);
  v15 = String._bridgeToObjectiveC()();
  LOBYTE(v11) = objc_msgSend(v14, "BOOLForKey:", v15);

  swift_beginAccess(&v1[OBJC_IVAR____TtC17SequoiaTranslator24SharedTranslationOptions__autoplayTTSEnabled], v23, 33, 0);
  v22 = v11;
  Published.init(initialValue:)(&v22, &type metadata for Bool);
  swift_endAccess(v23);

  v21.receiver = v1;
  v21.super_class = (Class)type metadata accessor for SharedTranslationOptions(0);
  v16 = objc_msgSendSuper2(&v21, "init");
  v17 = (void *)objc_opt_self(MCProfileConnection);
  v18 = v16;
  result = objc_msgSend(v17, "sharedConnection");
  if (result)
  {
    v20 = result;
    objc_msgSend(result, "registerObserver:", v18);

    sub_10015F798();
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10015F070()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedTranslationOptions(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10015F14C()
{
  return type metadata accessor for SharedTranslationOptions(0);
}

uint64_t type metadata accessor for SharedTranslationOptions(uint64_t a1)
{
  uint64_t result;

  result = qword_100295BF0;
  if (!qword_100295BF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharedTranslationOptions);
  return result;
}

void sub_10015F190(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_1000936A0();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t sub_10015F200@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for SharedTranslationOptions(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

void sub_10015F378()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;

  v0 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (v0)
  {
    v12 = v0;
    v1 = -[NSObject effectiveBoolValueForSetting:](v0, "effectiveBoolValueForSetting:", MCFeatureAssistantProfanityFilterForced);
    byte_1002AA518 = v1 == 1;
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA440);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = v1 == 1;
      v7 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v7 = 67240192;
      v13 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updated value for censoring profanity: %{BOOL,public}d", v7, 8u);
      swift_slowDealloc(v7, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA440);
    v12 = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v10, "MCProfileConnection cannot be established, can't check profanity filtering value", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
  }

}

uint64_t sub_10015F5AC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  Class isa;
  unsigned __int8 v18;
  uint64_t v19;
  void *v20;
  id v21;
  Class v22;
  uint64_t v23;
  uint64_t v25;

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LanguagesService.autoDetectSpeechUnsupportedPairs.getter(v4);
  v8 = objc_msgSend(a1, "canonicalIdentifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = sub_1000CED6C(v9, v11, v7);
  swift_bridgeObjectRelease(v11);
  v13 = swift_bridgeObjectRelease(v7);
  v14 = LanguagesService.localeModalities.getter(v13);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = objc_msgSend(a1, "sourceLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v16);

    isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v18 = objc_msgSend(v15, "locale:supportsModality:", isa, 1);

  }
  else
  {
    v18 = 1;
  }
  v19 = LanguagesService.localeModalities.getter(v14);
  if (v19)
  {
    v20 = (void *)v19;
    v21 = objc_msgSend(a1, "targetLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v22 = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v23 = (uint64_t)objc_msgSend(v20, "locale:supportsModality:", v22, 1);

    if ((v12 & 1) == 0 && (v18 & 1) != 0)
      return v23;
    return 0;
  }
  if ((v12 & 1) != 0)
    return 0;
  v23 = 1;
  if ((v18 & 1) == 0)
    return 0;
  return v23;
}

double sub_10015F798()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A4C0 != -1)
    swift_once(&qword_10028A4C0, sub_10015E958);
  aBlock[4] = sub_10015F378;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026E4A8;
  v7 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v7);
  v13 = _swiftEmptyArrayStorage;
  v8 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v9 = sub_100006DF4(&qword_10028AC30);
  v10 = sub_1000827A0((unint64_t *)&qword_100291C00, &qword_10028AC30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v13, v9, v10, v0, v8);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v2, v7);
  _Block_release(v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_10015F984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10015F994(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10015F99C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3F30, (uint64_t)&unk_1001F3F58, a2);
}

void sub_10015F9C0(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10015E82C(a1, a2, a3, a4, (uint64_t)&unk_1001F3F30, (uint64_t)&unk_1001F3F58);
}

uint64_t sub_10015F9FC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3F78, (uint64_t)&unk_1001F3FA0, a2);
}

void sub_10015FA20(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10015E82C(a1, a2, a3, a4, (uint64_t)&unk_1001F3F78, (uint64_t)&unk_1001F3FA0);
}

uint64_t sub_10015FA5C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F3FC0, (uint64_t)&unk_1001F3FE8, a2);
}

uint64_t *sub_10015FA84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    a1[1] = v8;
    swift_retain(v4);
    swift_retain(v8);
    v9 = *(int *)(sub_100006DF4(&qword_100295C88) + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for NavigationSplitViewVisibility(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = *(int *)(a3 + 20);
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v7 + v14;
    v19 = (char *)a2 + v14;
    *v18 = *v19;
    v4 = *((_QWORD *)v19 + 1);
    *((_QWORD *)v18 + 1) = v4;
    swift_retain(v17);
  }
  swift_retain(v4);
  return v7;
}

double sub_10015FB6C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_100006DF4(&qword_100295C88) + 32);
  v5 = type metadata accessor for NavigationSplitViewVisibility(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24) + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_10015FBF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain(v6);
  swift_retain(v7);
  v8 = *(int *)(sub_100006DF4(&qword_100295C88) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for NavigationSplitViewVisibility(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (char *)a1 + v13;
  v18 = (char *)a2 + v13;
  *v17 = *v18;
  v19 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v17 + 1) = v19;
  swift_retain(v16);
  swift_retain(v19);
  return a1;
}

uint64_t *sub_10015FCAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(sub_100006DF4(&qword_100295C88) + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for NavigationSplitViewVisibility(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 20);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v15[1];
  v18 = v16[1];
  v15[1] = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *(int *)(a3 + 24);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *v20 = *v21;
  v22 = *((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v21 + 1);
  *((_QWORD *)v20 + 1) = v23;
  swift_retain(v23);
  swift_release(v22);
  return a1;
}

_QWORD *sub_10015FDA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_100006DF4(&qword_100295C88) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for NavigationSplitViewVisibility(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

uint64_t *sub_10015FE30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(sub_100006DF4(&qword_100295C88) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for NavigationSplitViewVisibility(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v13[1];
  v13[1] = v14[1];
  swift_release(v15);
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *v17 = *v18;
  v19 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_release(v19);
  return a1;
}

uint64_t sub_10015FF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015FF14);
}

uint64_t sub_10015FF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100006DF4(&qword_100295C88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10015FFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015FFB0);
}

uint64_t sub_10015FFB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_100295C88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for SidebarButton(uint64_t a1)
{
  uint64_t result;

  result = qword_100295CE8;
  if (!qword_100295CE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SidebarButton);
  return result;
}

void sub_10016006C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1001600E0(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1001F4030;
    v4[2] = &unk_1001F4030;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1001600E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100295CF8)
  {
    v2 = type metadata accessor for NavigationSplitViewVisibility(255);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100295CF8);
  }
}

uint64_t sub_100160134(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216A80, 1);
}

uint64_t sub_100160144@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t OpaqueTypeConformance2;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  char *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (**v95)();
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _OWORD v139[2];
  char v140;
  char v141;
  _OWORD v142[6];
  _OWORD v143[3];

  v2 = v1;
  v4 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v4);
  v122 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v120 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v118 = *(_QWORD *)(v7 - 8);
  v119 = v7;
  __chkstk_darwin(v7);
  v117 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100295D30);
  v125 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v124 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NavigationSplitViewVisibility(0);
  v112 = *(_QWORD *)(v11 - 8);
  v113 = v11;
  __chkstk_darwin(v11);
  v111 = (uint64_t *)((char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = sub_100006DF4(&qword_10028BCF8);
  __chkstk_darwin(v108);
  v132 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100006DF4(&qword_100295D38);
  __chkstk_darwin(v131);
  v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SidebarButton(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006DF4(&qword_100295D40);
  v100 = *(_QWORD *)(v20 - 8);
  v101 = v20;
  __chkstk_darwin(v20);
  v130 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100006DF4(&qword_100295D48);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v102 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100006DF4(&qword_100295D50);
  v106 = *(_QWORD *)(v23 - 8);
  v107 = v23;
  __chkstk_darwin(v23);
  v104 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100006DF4(&qword_100295D58);
  __chkstk_darwin(v109);
  v110 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006DF4(&qword_100295D60);
  v114 = *(_QWORD *)(v26 - 8);
  v115 = v26;
  __chkstk_darwin(v26);
  v129 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100161128(v2, (uint64_t)v19);
  v28 = *(unsigned __int8 *)(v17 + 80);
  v29 = (v28 + 16) & ~v28;
  v126 = v28 | 7;
  v127 = v29 + v18;
  v30 = swift_allocObject(&unk_10026E500, v29 + v18, v28 | 7);
  v128 = v29;
  v116 = v19;
  sub_100161170((uint64_t)v19, v30 + v29);
  v31 = (uint64_t *)(v2 + *(int *)(v16 + 20));
  v32 = *v31;
  v33 = v31[1];
  *(_QWORD *)&v142[0] = v32;
  *((_QWORD *)&v142[0] + 1) = v33;
  sub_100006DF4(&qword_100295D68);
  v34 = State.wrappedValue.getter(&v133);
  v35 = v133;
  LOBYTE(v16) = static Edge.Set.leading.getter(v34);
  v36 = EdgeInsets.init(_all:)(13.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  LOBYTE(v29) = static Edge.Set.top.getter(v43);
  v44 = EdgeInsets.init(_all:)(7.0);
  v141 = 0;
  v140 = 0;
  *(_QWORD *)&v133 = sub_1001611B4;
  *((_QWORD *)&v133 + 1) = v30;
  LOWORD(v134) = 257;
  *((_QWORD *)&v134 + 1) = v35;
  LOBYTE(v135) = v16;
  *((double *)&v135 + 1) = v36;
  *(_QWORD *)&v136 = v38;
  *((_QWORD *)&v136 + 1) = v40;
  *(_QWORD *)&v137 = v42;
  BYTE8(v137) = 0;
  LOBYTE(v138) = v29;
  *((double *)&v138 + 1) = v44;
  *(_QWORD *)&v139[0] = v45;
  *((_QWORD *)&v139[0] + 1) = v46;
  *(_QWORD *)&v139[1] = v47;
  BYTE8(v139[1]) = 0;
  v48 = enum case for DynamicTypeSize.large(_:);
  v49 = type metadata accessor for DynamicTypeSize(0);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 104);
  v50(v15, v48, v49);
  v51 = sub_100007D5C(&qword_10028BD30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v52 = (id)v49;
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v15, v15, v49, v51) & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v97 = v9;
  v98 = v2;
  v99 = a1;
  v53 = sub_100006DF4(&qword_100295D70);
  v9 = sub_10001B6DC(&qword_100295D78, &qword_100295D70, (void (*)(void))sub_1001611E0);
  a1 = sub_100012334(&qword_100295DB8, &qword_100295D38, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
  View.dynamicTypeSize<A>(_:)(v15, v53, v131, v9, a1);
  sub_10000A020((uint64_t)v15, &qword_100295D38);
  v142[4] = v137;
  v142[5] = v138;
  v143[0] = v139[0];
  *(_OWORD *)((char *)v143 + 9) = *(_OWORD *)((char *)v139 + 9);
  v142[0] = v133;
  v142[1] = v134;
  v142[2] = v135;
  v142[3] = v136;
  sub_10001B5BC((uint64_t)v142);
  v54 = v132;
  v50(v132, enum case for DynamicTypeSize.xxLarge(_:), v49);
  v55 = v54;
  v56 = v54;
  v52 = (id)v49;
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v55, v56, v49, v51) & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(_QWORD *)&v133 = v53;
  *((_QWORD *)&v133 + 1) = v131;
  *(_QWORD *)&v134 = v9;
  *((_QWORD *)&v134 + 1) = a1;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v58 = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v60 = v101;
  v59 = v102;
  v61 = (uint64_t)v132;
  v62 = v108;
  v63 = v130;
  View.dynamicTypeSize<A>(_:)(v132, v101, v108, OpaqueTypeConformance2, v58);
  sub_10000A020(v61, &qword_10028BCF8);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v63, v60);
  v64 = sub_100006DF4(&qword_10028AB30);
  *(_QWORD *)&v133 = v60;
  *((_QWORD *)&v133 + 1) = v62;
  *(_QWORD *)&v134 = OpaqueTypeConformance2;
  *((_QWORD *)&v134 + 1) = v58;
  v65 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v66 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v68 = v104;
  v67 = v105;
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_100160EC4, 0, v105, v64, v65, v66);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v59, v67);
  *(_QWORD *)&v133 = v67;
  *((_QWORD *)&v133 + 1) = v64;
  *(_QWORD *)&v134 = v65;
  *((_QWORD *)&v134 + 1) = v66;
  v69 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  v70 = (uint64_t)v110;
  v71 = v107;
  View.accessibilityIdentifier(_:)(0x6953656C67676F54, 0xED00007261626564, v107, v69);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v68, v71);
  sub_100006DF4(&qword_100295C88);
  v72 = v111;
  a1 = v98;
  Binding.wrappedValue.getter(v111);
  v9 = (uint64_t)v116;
  sub_100161128(a1, (uint64_t)v116);
  v73 = swift_allocObject(&unk_10026E528, v127, v126);
  sub_100161170(v9, v73 + v128);
  v74 = sub_1001612E0();
  v75 = sub_100007D5C(&qword_100295DC8, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationSplitViewVisibility, (uint64_t)&protocol conformance descriptor for NavigationSplitViewVisibility);
  v76 = v113;
  View.onChange<A>(of:initial:_:)(v72, 0, sub_100161294, v73, v109, v113, v74, v75);
  v77 = swift_release(v73);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v112 + 8))(v72, v76, v77);
  sub_10000A020(v70, &qword_100295D58);
  v52 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10028A4B0 != -1)
LABEL_7:
    swift_once(&qword_10028A4B0, sub_10013F294);
  v78 = v117;
  NSNotificationCenter.publisher(for:object:)(qword_1002AA4F0, 0);

  v79 = v120;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(0.1);
  v80 = sub_10001D948();
  *(_QWORD *)&v133 = static OS_dispatch_queue.main.getter(v80);
  v81 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v82 = (uint64_t)v122;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v122, 1, 1, v81);
  v83 = sub_100007D5C(&qword_100296C40, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v84 = sub_100007D5C((unint64_t *)&qword_100295550, (uint64_t (*)(uint64_t))sub_10001D948, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v85 = v124;
  v86 = v119;
  Publisher.debounce<A>(for:scheduler:options:)(v79, &v133, v82, v119, v80, v83, v84);
  sub_10000A020(v82, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v121 + 8))(v79, v123);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v78, v86);
  sub_100161128(a1, v9);
  v87 = swift_allocObject(&unk_10026E550, v127, v126);
  sub_100161170(v9, v87 + v128);
  v89 = v114;
  v88 = v115;
  v90 = v99;
  v91 = v129;
  (*(void (**)(uint64_t, char *, uint64_t))(v114 + 16))(v99, v129, v115);
  v92 = sub_100006DF4(&qword_100295DD0);
  v93 = v125;
  v94 = v97;
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 16))(v90 + *(int *)(v92 + 52), v85, v97);
  v95 = (uint64_t (**)())(v90 + *(int *)(v92 + 56));
  *v95 = sub_10016157C;
  v95[1] = (uint64_t (*)())v87;
  (*(void (**)(char *, uint64_t))(v93 + 8))(v85, v94);
  return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v91, v88);
}

uint64_t sub_100160BBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for NavigationSplitViewVisibility(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v9 = type metadata accessor for SidebarButton(0);
  v10 = (char *)(a1 + *(int *)(v9 + 24));
  v11 = *v10;
  v12 = *((_QWORD *)v10 + 1);
  LOBYTE(v23) = *v10;
  v24 = v12;
  v13 = sub_100006DF4(&qword_10028CF50);
  v14 = State.wrappedValue.getter(&v22);
  if (v22 != 1)
  {
    LOBYTE(v23) = v11;
    v24 = v12;
    LOBYTE(v22) = 1;
    State.wrappedValue.setter(&v22, v13);
    v15 = (uint64_t *)(a1 + *(int *)(v9 + 20));
    v16 = *v15;
    v17 = v15[1];
    v23 = v16;
    v24 = v17;
    v22 = 0;
    v18 = sub_100006DF4(&qword_100295D68);
    v14 = (_QWORD *)State.wrappedValue.setter(&v22, v18);
  }
  static NavigationSplitViewVisibility.all.getter(v14);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v19 = sub_100006DF4(&qword_100295C88);
  Binding.wrappedValue.setter(v6, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

void sub_100160D38(char a1, char a2)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a1 & 1;
  v6 = type metadata accessor for SidebarButton(0);
  v7 = (char *)(v2 + *(int *)(v6 + 24));
  v8 = *v7;
  v9 = *((_QWORD *)v7 + 1);
  LOBYTE(v21) = *v7;
  v22 = v9;
  v10 = sub_100006DF4(&qword_10028CF50);
  State.wrappedValue.getter(&v20);
  if (LOBYTE(v20) == v5)
  {
    LOBYTE(v21) = v8;
    v22 = v9;
    LOBYTE(v20) = (a1 & 1) == 0;
    v11 = State.wrappedValue.setter(&v20, v10);
    if ((a1 & 1) != 0 && (a2 & 1) != 0)
    {
      v12 = static Animation.easeIn(duration:)(v11, 0.05);
      v13 = Animation.delay(_:)(0.37);
      swift_release(v12);
      __chkstk_darwin(v14);
      withAnimation<A>(_:_:)(v13, sub_1001615B8);
      swift_release(v13);
    }
    else
    {
      v15 = 0.0;
      if ((a1 & 1) != 0)
        v15 = 1.0;
      v16 = (uint64_t *)(v2 + *(int *)(v6 + 20));
      v17 = *v16;
      v18 = v16[1];
      v20 = v15;
      v21 = v17;
      v22 = v18;
      v19 = sub_100006DF4(&qword_100295D68);
      State.wrappedValue.setter(&v20, v19);
    }
  }
}

uint64_t sub_100160EC4()
{
  uint64_t v0;

  v0 = LocalizedStringKey.init(stringLiteral:)(0x5F52414245444953, 0xEE004E4F54545542);
  return Label<>.init(_:systemImage:)(v0);
}

void sub_100160F28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v3 = type metadata accessor for NavigationSplitViewVisibility(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static NavigationSplitViewVisibility.detailOnly.getter(v5);
  LOBYTE(a2) = static NavigationSplitViewVisibility.== infix(_:_:)(a2, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  sub_100160D38(a2 & 1, 1);
}

uint64_t sub_100160FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v0 = type metadata accessor for NavigationSplitViewVisibility(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v11 - v5);
  sub_100006DF4(&qword_100295C88);
  v7 = Binding.wrappedValue.getter(v6);
  static NavigationSplitViewVisibility.detailOnly.getter(v7);
  v8 = static NavigationSplitViewVisibility.== infix(_:_:)(v6, v4);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  sub_100160D38(v8 & 1, 1);
  return ((uint64_t (*)(_QWORD *, uint64_t))v9)(v6, v0);
}

uint64_t sub_1001610A0(uint64_t a1, char a2)
{
  double v2;
  uint64_t v3;
  double v5;

  if ((a2 & 1) != 0)
    v2 = 1.0;
  else
    v2 = 0.0;
  type metadata accessor for SidebarButton(0);
  v5 = v2;
  v3 = sub_100006DF4(&qword_100295D68);
  return State.wrappedValue.setter(&v5, v3);
}

uint64_t sub_100161128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SidebarButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100161170(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SidebarButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001611B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SidebarButton(0) - 8) + 80);
  return sub_100160BBC(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1001611E0()
{
  return sub_10001B6DC(&qword_100295D80, &qword_100295D88, (void (*)(void))sub_100161204);
}

uint64_t sub_100161204()
{
  return sub_10001B6DC(&qword_100295D90, &qword_100295D98, (void (*)(void))sub_100161228);
}

uint64_t sub_100161228()
{
  return sub_10001B6DC(&qword_100295DA0, &qword_100295DA8, (void (*)(void))sub_10016124C);
}

unint64_t sub_10016124C()
{
  unint64_t result;

  result = qword_100295DB0;
  if (!qword_100295DB0)
  {
    result = swift_getWitnessTable(&unk_1001F4144, &type metadata for SidebarButtonUIKit);
    atomic_store(result, (unint64_t *)&qword_100295DB0);
  }
  return result;
}

void sub_100161294(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SidebarButton(0);
  sub_100160F28(a1, a2);
}

unint64_t sub_1001612E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = qword_100295DC0;
  if (!qword_100295DC0)
  {
    v9 = sub_1000070BC(&qword_100295D58);
    v1 = sub_1000070BC(&qword_100295D48);
    v2 = sub_1000070BC(&qword_10028AB30);
    v3 = sub_1000070BC(&qword_100295D40);
    v4 = sub_1000070BC(&qword_10028BCF8);
    v10 = sub_1000070BC(&qword_100295D70);
    v11 = sub_1000070BC(&qword_100295D38);
    v12 = sub_10001B6DC(&qword_100295D78, &qword_100295D70, (void (*)(void))sub_1001611E0);
    v13 = sub_100012334(&qword_100295DB8, &qword_100295D38, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v6 = sub_100012334(&qword_10028BD58, &qword_10028BCF8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v10 = v3;
    v11 = v4;
    v12 = OpaqueTypeConformance2;
    v13 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v8 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v10 = v1;
    v11 = v2;
    v12 = v7;
    v13 = v8;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
    atomic_store(result, (unint64_t *)&qword_100295DC0);
  }
  return result;
}

uint64_t sub_1001614BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SidebarButton(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 8));
  v8 = v7 + *(int *)(sub_100006DF4(&qword_100295C88) + 32);
  v9 = type metadata accessor for NavigationSplitViewVisibility(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10016157C()
{
  type metadata accessor for SidebarButton(0);
  return sub_100160FC8();
}

uint64_t sub_1001615B8()
{
  uint64_t v0;

  return sub_1001610A0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1001615D4()
{
  return sub_100012334(&qword_100295DD8, &qword_100295DD0, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
}

ValueMetadata *type metadata accessor for SidebarButtonUIKit()
{
  return &type metadata for SidebarButtonUIKit;
}

uint64_t sub_100161614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v4 = type metadata accessor for UIButton.Configuration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithTextStyle:", UIFontTextStyleBody);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v12, v11);

  static UIButton.Configuration.plain()(v14);
  v15 = v13;
  UIButton.Configuration.image.setter(v13);
  sub_10000A05C(0, &qword_100290B58, UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
  v16 = swift_allocObject(&unk_10026E630, 32, 7);
  *(_QWORD *)(v16 + 16) = v21;
  *(_QWORD *)(v16 + 24) = a3;
  swift_retain(a3);
  v17 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000089A8, v16);
  v18 = UIButton.init(configuration:primaryAction:)(v8, v17);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v18;
}

uint64_t sub_100161840(uint64_t a1)
{
  uint64_t *v1;

  return sub_100161614(a1, *v1, v1[1]);
}

uint64_t sub_10016184C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100161910();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10016189C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100161910();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001618EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100161910();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100161910()
{
  unint64_t result;

  result = qword_100295DE0;
  if (!qword_100295DE0)
  {
    result = swift_getWitnessTable(&unk_1001F40B4, &type metadata for SidebarButtonUIKit);
    atomic_store(result, (unint64_t *)&qword_100295DE0);
  }
  return result;
}

uint64_t sub_100161954()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for SidebarLayoutView(uint64_t a1)
{
  unint64_t v2;

  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 6)
    swift_bridgeObjectRelease(v2);
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 64));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
}

uint64_t *initializeWithCopy for SidebarLayoutView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2 + 2;
  v7 = a2[3];
  swift_retain(v4);
  swift_retain(v5);
  if (v7 > 5)
  {
    a1[2] = *v6;
    a1[3] = v7;
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  }
  v8 = a2[4];
  v9 = a2[5];
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  a1[6] = v10;
  a1[7] = v11;
  v12 = a2[8];
  v13 = (void *)a2[9];
  a1[8] = v12;
  a1[9] = (uint64_t)v13;
  v14 = a2[10];
  a1[10] = v14;
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  v15 = v13;
  swift_bridgeObjectRetain(v14);
  return a1;
}

_QWORD *assignWithCopy for SidebarLayoutView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[3];
  v9 = a2[3];
  if (v8 == 5)
  {
    if (v9 >= 6)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v9 == 5)
  {
    sub_100161C38((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v8 >= 5)
  {
    if (v9 >= 5)
    {
      a1[2] = a2[2];
      v24 = a2[3];
      a1[3] = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_10012D4AC((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v9 < 5)
  {
LABEL_11:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_12;
  }
LABEL_8:
  a1[2] = a2[2];
  v10 = a2[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
LABEL_12:
  v11 = a1[4];
  v12 = a2[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v11);
  a1[5] = a2[5];
  v13 = a2[6];
  v14 = a1[6];
  a1[6] = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = a2[7];
  v16 = a1[7];
  a1[7] = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = a2[8];
  v18 = a1[8];
  a1[8] = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = (void *)a2[9];
  v20 = (void *)a1[9];
  a1[9] = v19;
  v21 = v19;

  v22 = a2[10];
  a1[10] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100161C38(uint64_t a1)
{
  destroy for AppSection(a1);
  return a1;
}

_QWORD *assignWithTake for SidebarLayoutView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  v6 = a2 + 2;
  v7 = a1[3];
  v8 = a2[3];
  if (v7 != 5)
  {
    if (v8 == 5)
    {
      sub_100161C38((uint64_t)(a1 + 2));
    }
    else if (v7 >= 5)
    {
      if (v8 >= 5)
      {
        a1[2] = *v6;
        a1[3] = v8;
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      sub_10012D4AC((uint64_t)(a1 + 2));
    }
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
LABEL_8:
  v9 = a1[4];
  a1[4] = a2[4];
  swift_release(v9);
  v10 = a2[6];
  v11 = a1[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_release(v11);
  v12 = a1[7];
  a1[7] = a2[7];
  swift_release(v12);
  v13 = a1[8];
  a1[8] = a2[8];
  swift_release(v13);
  v14 = (void *)a1[9];
  a1[9] = a2[9];

  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SidebarLayoutView()
{
  return &type metadata for SidebarLayoutView;
}

uint64_t sub_100161D8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216AE0, 1);
}

uint64_t sub_100161D9C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  __int128 *v38;
  _BYTE v39[16];
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;

  v36 = a1;
  v2 = sub_100006DF4(&qword_100293260);
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_100295C88);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_100006DF4(&qword_100295DE8);
  v33 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100295DF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100006DF4(&qword_100295DF8);
  __chkstk_darwin(v35);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *((_QWORD *)v1 + 4);
  v15 = *((_QWORD *)v1 + 5);
  v17 = type metadata accessor for ConversationContext(0);
  v18 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  v19 = EnvironmentObject.projectedValue.getter(v16, v15, v17, v18);
  KeyPath = swift_getKeyPath(&unk_1001F4218);
  EnvironmentObject.Wrapper.subscript.getter(v7, KeyPath, v19, v18);
  swift_release(v19);
  swift_release(KeyPath);
  v40 = v1;
  v38 = v1;
  v21 = sub_100006DF4(&qword_100295E00);
  v22 = sub_100163FE8();
  v23 = sub_100032BC0(&qword_100295E10, &qword_100295E00, (void (*)(void))sub_10016402C, (void (*)(void))sub_1001640B0);
  NavigationSplitView.init<>(columnVisibility:sidebar:detail:)(v7, sub_100163FD8, v39, sub_100163FE0, v37, &type metadata for SidebarListView, v21, v22, v23);
  v24 = v1[1];
  v45 = *v1;
  v46 = v24;
  v25 = v1[1];
  v41 = *v1;
  v42 = v25;
  sub_100006DF4(&qword_100295F10);
  Binding.wrappedValue.getter(&v43);
  if (v44 == 5)
  {
    v26 = 0;
  }
  else
  {
    v26 = v44 == 1;
    sub_1000484FC(v43, v44);
  }
  sub_1001627DC(v26, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
  v41 = v45;
  v42 = v46;
  Binding.wrappedValue.getter(&v43);
  v27 = v44;
  if (v44 == 5 || (sub_1000484FC(v43, v44), v27 != 1))
  {
    v31 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v4, 1, 1, v31);
  }
  else
  {
    v28 = enum case for ColorScheme.dark(_:);
    v29 = type metadata accessor for ColorScheme(0);
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v4, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v4, 0, 1, v29);
  }
  sub_10000B074((uint64_t)v4, (uint64_t)&v14[*(int *)(v35 + 36)], &qword_100293260);
  sub_10000B074((uint64_t)v12, (uint64_t)v14, &qword_100295DF0);
  sub_10000A020((uint64_t)v4, &qword_100293260);
  sub_10000A020((uint64_t)v12, &qword_100295DF0);
  return sub_1000110A4((uint64_t)v14, v36, &qword_100295DF8);
}

__n128 sub_100162188@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  __n128 result;
  _QWORD v5[2];
  __n128 v6;

  v2 = sub_100006DF4(&qword_100295F10);
  Binding.projectedValue.getter(v5, v2);
  v3 = v5[1];
  result = v6;
  a1->n128_u64[0] = v5[0];
  a1->n128_u64[1] = v3;
  a1[1] = result;
  return result;
}

uint64_t sub_1001621DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;

  sub_100006DF4(&qword_100295F10);
  Binding.wrappedValue.getter(&v5);
  v2 = v5;
  v3 = v6;
  sub_100162258(v5, v6, a1);
  return sub_1000484FC(v2, v3);
}

uint64_t sub_100162258@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;

  v4 = v3;
  v8 = sub_100006DF4(&qword_100295F48);
  __chkstk_darwin(v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100006DF4(&qword_100295E50);
  __chkstk_darwin(v78);
  v79 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100295E40);
  __chkstk_darwin(v12);
  v80 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_100295E60);
  __chkstk_darwin(v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006DF4(&qword_100295E30);
  v18 = __chkstk_darwin(v17);
  v84 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v68 - v20;
  v22 = sub_100006DF4(&qword_100295E00);
  __chkstk_darwin(v22);
  v82 = (uint64_t)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = v16;
  sub_100162C34(a1, v4, (uint64_t)v16);
  v81 = a2;
  if (a2 == 1)
  {
    sub_10000B074((uint64_t)v83, (uint64_t)v10, &qword_100295E60);
    swift_storeEnumTagMultiPayload(v10, v8, 1);
    v25 = sub_1001640D4();
    v26 = sub_1001641DC();
    _ConditionalContent<>.init(storage:)(v10, v12, v14, v25, v26);
  }
  else
  {
    v69 = static VerticalAlignment.center.getter(v24);
    v68 = static Color.clear.getter(v69);
    v27 = static Alignment.center.getter(v68);
    _FrameLayout.init(width:height:alignment:)(&v85, 0x4050400000000000, 0, 0, 1, v27, v28);
    v71 = v10;
    v29 = v85;
    v76 = v4;
    v30 = v86;
    v72 = v8;
    v31 = v87;
    v73 = v14;
    v32 = v88;
    v74 = v21;
    v77 = a3;
    v34 = v89;
    v33 = v90;
    v35 = HorizontalEdge.rawValue.getter(0);
    v36 = Edge.init(rawValue:)((2 * v35) | 1u);
    v75 = a1;
    v37 = v36;
    v38 = static SafeAreaRegions.container.getter(v36);
    v70 = v12;
    v39 = v38;
    v40 = v79;
    v41 = sub_10000B074((uint64_t)v83, v79, &qword_100295E60);
    v42 = v40 + *(int *)(v78 + 36);
    *(_QWORD *)v42 = v68;
    *(_WORD *)(v42 + 8) = 256;
    *(_QWORD *)(v42 + 16) = v29;
    *(_BYTE *)(v42 + 24) = v30;
    *(_QWORD *)(v42 + 32) = v31;
    *(_BYTE *)(v42 + 40) = v32;
    *(_QWORD *)(v42 + 48) = v34;
    *(_QWORD *)(v42 + 56) = v33;
    *(_QWORD *)(v42 + 64) = v39;
    *(_QWORD *)(v42 + 72) = 0;
    *(_BYTE *)(v42 + 80) = 1;
    *(_BYTE *)(v42 + 81) = v37;
    *(_QWORD *)(v42 + 88) = v69;
    v78 = static VerticalAlignment.center.getter(v41);
    v69 = static Color.clear.getter(v78);
    v43 = static Alignment.center.getter(v69);
    _FrameLayout.init(width:height:alignment:)(&v91, 0x4050400000000000, 0, 0, 1, v43, v44);
    v45 = v91;
    LODWORD(v68) = v92;
    v46 = v93;
    v47 = v94;
    v49 = v95;
    v48 = v96;
    v50 = HorizontalEdge.rawValue.getter(1);
    v51 = Edge.init(rawValue:)((2 * v50) | 1u);
    v52 = v51;
    v53 = static SafeAreaRegions.container.getter(v51);
    v54 = v80;
    sub_10000B074(v40, v80, &qword_100295E50);
    v55 = v70;
    v56 = v54 + *(int *)(v70 + 36);
    *(_QWORD *)v56 = v69;
    *(_WORD *)(v56 + 8) = 256;
    *(_QWORD *)(v56 + 16) = v45;
    *(_BYTE *)(v56 + 24) = v68;
    *(_QWORD *)(v56 + 32) = v46;
    *(_BYTE *)(v56 + 40) = v47;
    v4 = v76;
    a3 = v77;
    *(_QWORD *)(v56 + 48) = v49;
    *(_QWORD *)(v56 + 56) = v48;
    v21 = v74;
    *(_QWORD *)(v56 + 64) = v53;
    *(_QWORD *)(v56 + 72) = 0;
    *(_BYTE *)(v56 + 80) = 1;
    *(_BYTE *)(v56 + 81) = v52;
    a1 = v75;
    *(_QWORD *)(v56 + 88) = v78;
    sub_10000A020(v40, &qword_100295E50);
    v57 = (uint64_t)v71;
    sub_10000B074(v54, (uint64_t)v71, &qword_100295E40);
    swift_storeEnumTagMultiPayload(v57, v72, 0);
    v58 = sub_1001640D4();
    v59 = sub_1001641DC();
    _ConditionalContent<>.init(storage:)(v57, v55, v73, v58, v59);
    sub_10000A020(v54, &qword_100295E40);
  }
  sub_1000110A4(v84, (uint64_t)v21, &qword_100295E30);
  sub_10000A020((uint64_t)v83, &qword_100295E60);
  v60 = v81;
  if (v81 == 5)
    v61 = 0;
  else
    v61 = a1;
  if (v81 == 5)
    v62 = 4;
  else
    v62 = v81;
  v63 = v4[10];
  sub_100164500(a1, v81);
  v64 = sub_1000CF190(v61, v62, v63);
  sub_1000484FC(a1, v60);
  sub_100164510(v4);
  v65 = v64 & 1;
  v66 = v82;
  sub_1001DCDD0(v65, (uint64_t)v21, v4, v82);
  sub_10000A020((uint64_t)v21, &qword_100295E30);
  return sub_1000110A4(v66, a3, &qword_100295E00);
}

uint64_t sub_1001627DC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a2;
  v48 = type metadata accessor for AutomaticNavigationSplitViewStyle(0);
  v42 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100006DF4(&qword_100295F18);
  v43 = *(_QWORD *)(v49 - 8);
  v5 = __chkstk_darwin(v49);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v41 - v8;
  v44 = sub_100006DF4(&qword_100295F20);
  __chkstk_darwin(v44);
  v47 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for ProminentDetailNavigationSplitViewStyle(0);
  v11 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100006DF4(&qword_100295F28);
  v14 = *(_QWORD *)(v46 - 8);
  v15 = __chkstk_darwin(v46);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v41 - v19;
  if ((a1 & 1) != 0)
  {
    static NavigationSplitViewStyle<>.prominentDetail.getter(v18);
    v21 = sub_100006DF4(&qword_100295DE8);
    v22 = sub_100012334(&qword_100295F30, &qword_100295DE8, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>);
    v23 = sub_100007D5C(&qword_100295F40, (uint64_t (*)(uint64_t))&type metadata accessor for ProminentDetailNavigationSplitViewStyle, (uint64_t)&protocol conformance descriptor for ProminentDetailNavigationSplitViewStyle);
    v24 = v45;
    View.navigationSplitViewStyle<A>(_:)(v13, v21, v45, v22, v23);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v24);
    v25 = v46;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v17, v46);
    v26 = v47;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v20, v25);
    swift_storeEnumTagMultiPayload(v26, v44, 0);
    v51 = v21;
    v52 = v24;
    v53 = v22;
    v54 = v23;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.navigationSplitViewStyle<A>(_:)>>, 1);
    v28 = sub_100007D5C(&qword_100295F38, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticNavigationSplitViewStyle, (uint64_t)&protocol conformance descriptor for AutomaticNavigationSplitViewStyle);
    v51 = v21;
    v52 = v48;
    v53 = v22;
    v54 = v28;
    v29 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.navigationSplitViewStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v26, v25, v49, OpaqueTypeConformance2, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, v25);
  }
  else
  {
    static NavigationSplitViewStyle<>.automatic.getter(v18);
    v31 = sub_100006DF4(&qword_100295DE8);
    v32 = sub_100012334(&qword_100295F30, &qword_100295DE8, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>);
    v33 = sub_100007D5C(&qword_100295F38, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticNavigationSplitViewStyle, (uint64_t)&protocol conformance descriptor for AutomaticNavigationSplitViewStyle);
    v34 = v48;
    View.navigationSplitViewStyle<A>(_:)(v4, v31, v48, v32, v33);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v4, v34);
    v35 = v43;
    v36 = v49;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v9, v7, v49);
    v37 = v47;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v47, v9, v36);
    swift_storeEnumTagMultiPayload(v37, v44, 1);
    v38 = sub_100007D5C(&qword_100295F40, (uint64_t (*)(uint64_t))&type metadata accessor for ProminentDetailNavigationSplitViewStyle, (uint64_t)&protocol conformance descriptor for ProminentDetailNavigationSplitViewStyle);
    v51 = v31;
    v52 = v45;
    v53 = v32;
    v54 = v38;
    v39 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.navigationSplitViewStyle<A>(_:)>>, 1);
    v51 = v31;
    v52 = v34;
    v53 = v32;
    v54 = v33;
    v40 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.navigationSplitViewStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v37, v46, v36, v39, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  }
}

void sub_100162C34(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t KeyPath;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t OpaqueTypeConformance2;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t (*v87)(uint64_t);
  char v88;
  _QWORD *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  ValueMetadata *v221;
  unint64_t v222;
  uint64_t v223;

  v214 = a2;
  v189 = a1;
  v219 = a3;
  v211 = sub_100006DF4(&qword_100295F50);
  __chkstk_darwin(v211);
  v4 = (char *)&v186 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_100006DF4(&qword_100295EE0);
  __chkstk_darwin(v218);
  v213 = (char *)&v186 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for FavoritesDetailView(0);
  __chkstk_darwin(v212);
  v7 = (uint64_t *)((char *)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v204 = type metadata accessor for FavoritesView(0);
  __chkstk_darwin(v204);
  v190 = (char *)&v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100006DF4(&qword_100295F58);
  __chkstk_darwin(v201);
  v202 = (uint64_t)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100006DF4(&qword_100295EC0);
  __chkstk_darwin(v210);
  v205 = (char *)&v186 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v192 = (char *)&v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028CE50);
  __chkstk_darwin(v12);
  v188 = (uint64_t *)((char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v200 = type metadata accessor for ConversationView(0);
  __chkstk_darwin(v200);
  v15 = (char **)((char *)&v186 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v203 = sub_100006DF4(&qword_100295F60);
  v196 = *(_QWORD *)(v203 - 8);
  v16 = __chkstk_darwin(v203);
  v191 = (char *)&v186 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v195 = (char *)&v186 - v18;
  v19 = type metadata accessor for ImageTranslationView(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v186 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100006DF4(&qword_100295EA0);
  __chkstk_darwin(v197);
  v23 = (char *)&v186 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100006DF4(&qword_100295F68);
  v187 = *(_QWORD *)(v199 - 8);
  v24 = __chkstk_darwin(v199);
  v26 = (char *)&v186 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v186 = (char *)&v186 - v27;
  v215 = sub_100006DF4(&qword_100295F70);
  __chkstk_darwin(v215);
  v217 = (uint64_t)&v186 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100006DF4(&qword_100295F78);
  __chkstk_darwin(v206);
  v208 = (uint64_t)&v186 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100006DF4(&qword_100295F80);
  __chkstk_darwin(v30);
  v32 = (char *)&v186 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_100006DF4(&qword_100295E90);
  __chkstk_darwin(v207);
  v198 = (char *)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100006DF4(&qword_100295E80);
  __chkstk_darwin(v216);
  v209 = (char *)&v186 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for TranslateContentView(0);
  __chkstk_darwin(v35);
  v38 = (char **)((char *)&v186 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  switch(v36)
  {
    case 0uLL:
      v68 = v214[8];
      KeyPath = swift_getKeyPath(&unk_1001F4240);
      v70 = (_QWORD *)((char *)v38 + *(int *)(v35 + 20));
      *v70 = KeyPath;
      v71 = sub_100006DF4((uint64_t *)&unk_100291470);
      swift_storeEnumTagMultiPayload(v70, v71, 0);
      v72 = type metadata accessor for ComposeTranslationViewModel(0);
      v73 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
      swift_retain(v68);
      *v38 = ObservedObject.init(wrappedValue:)(v74, v72, v73);
      v38[1] = v75;
      sub_100032D68((uint64_t)v38, (uint64_t)v32, type metadata accessor for TranslateContentView);
      swift_storeEnumTagMultiPayload(v32, v30, 0);
      v76 = sub_100007D5C(&qword_100295E98, type metadata accessor for TranslateContentView, (uint64_t)&unk_1001F60B0);
      v77 = sub_100164338();
      *(_QWORD *)&v220 = v197;
      *((_QWORD *)&v220 + 1) = v77;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v220, &opaque type descriptor for <<opaque return type of View.navigationBarHidden(_:)>>, 1);
      v79 = (uint64_t)v198;
      _ConditionalContent<>.init(storage:)(v32, v35, v199, v76, OpaqueTypeConformance2);
      v80 = v208;
      sub_10000B074(v79, v208, &qword_100295E90);
      swift_storeEnumTagMultiPayload(v80, v206, 0);
      v81 = sub_100164284();
      v82 = sub_1001643BC();
      v83 = (uint64_t)v209;
      _ConditionalContent<>.init(storage:)(v80, v207, v210, v81, v82);
      sub_10000A020(v79, &qword_100295E90);
      v84 = v217;
      sub_10000B074(v83, v217, &qword_100295E80);
      swift_storeEnumTagMultiPayload(v84, v215, 0);
      v85 = sub_100164260();
      v86 = sub_10016447C();
      _ConditionalContent<>.init(storage:)(v84, v216, v218, v85, v86);
      sub_10000A020(v83, &qword_100295E80);
      v67 = (uint64_t)v38;
      v87 = type metadata accessor for TranslateContentView;
      goto LABEL_12;
    case 1uLL:
      if (!sub_100005DFC())
        goto LABEL_2;
      v221 = &type metadata for TranslateFeatures;
      v222 = sub_100009BC4();
      LOBYTE(v220) = 0;
      v88 = isFeatureEnabled(_:)(&v220);
      sub_100009C08(&v220);
      if ((v88 & 1) == 0)
        goto LABEL_2;
      v89 = sub_1000E0078((uint64_t)v21);
      v90 = static SafeAreaRegions.all.getter(v89);
      v91 = static Edge.Set.horizontal.getter(v90);
      sub_100032D68((uint64_t)v21, (uint64_t)v23, type metadata accessor for ImageTranslationView);
      v92 = v197;
      v93 = &v23[*(int *)(v197 + 36)];
      *(_QWORD *)v93 = v90;
      v93[8] = v91;
      sub_100032DAC((uint64_t)v21, type metadata accessor for ImageTranslationView);
      v94 = sub_100164338();
      View.navigationBarHidden(_:)(1, v92, v94);
      sub_10000A020((uint64_t)v23, &qword_100295EA0);
      v95 = v187;
      v96 = v186;
      v97 = v199;
      (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v186, v26, v199);
      v98 = v96;
      (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v32, v96, v97);
      swift_storeEnumTagMultiPayload(v32, v30, 1);
      v99 = sub_100007D5C(&qword_100295E98, type metadata accessor for TranslateContentView, (uint64_t)&unk_1001F60B0);
      *(_QWORD *)&v220 = v92;
      *((_QWORD *)&v220 + 1) = v94;
      v100 = swift_getOpaqueTypeConformance2(&v220, &opaque type descriptor for <<opaque return type of View.navigationBarHidden(_:)>>, 1);
      v101 = (uint64_t)v198;
      _ConditionalContent<>.init(storage:)(v32, v35, v97, v99, v100);
      v102 = v208;
      sub_10000B074(v101, v208, &qword_100295E90);
      swift_storeEnumTagMultiPayload(v102, v206, 0);
      v103 = sub_100164284();
      v104 = sub_1001643BC();
      v105 = (uint64_t)v209;
      _ConditionalContent<>.init(storage:)(v102, v207, v210, v103, v104);
      sub_10000A020(v101, &qword_100295E90);
      v106 = v217;
      sub_10000B074(v105, v217, &qword_100295E80);
      swift_storeEnumTagMultiPayload(v106, v215, 0);
      v107 = sub_100164260();
      v108 = sub_10016447C();
      _ConditionalContent<>.init(storage:)(v106, v216, v218, v107, v108);
      sub_10000A020(v105, &qword_100295E80);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v98, v97);
      break;
    case 2uLL:
      v109 = (char *)v214[9];
      v110 = *(_QWORD *)&v109[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper];
      v111 = *(_QWORD *)&v109[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_languagesService];
      v112 = *(_QWORD *)&v109[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session];
      v113 = swift_getKeyPath(&unk_1001F4240);
      v114 = (uint64_t)v188;
      *v188 = v113;
      v115 = sub_100006DF4((uint64_t *)&unk_100291470);
      swift_storeEnumTagMultiPayload(v114, v115, 0);
      v116 = swift_getKeyPath(&unk_1001F4270);
      v117 = (int *)v200;
      v118 = (_QWORD *)((char *)v15 + *(int *)(v200 + 28));
      *v118 = v116;
      v119 = sub_100006DF4(&qword_10028F368);
      swift_storeEnumTagMultiPayload(v118, v119, 0);
      v120 = type metadata accessor for SharedTranslationOptions(0);
      v121 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
      v122 = v109;
      swift_retain(v110);
      swift_retain(v111);
      swift_retain(v112);
      *v15 = EnvironmentObject.init()(v120, v121);
      v15[1] = v123;
      v124 = type metadata accessor for SceneContext(0);
      v125 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
      v15[2] = EnvironmentObject.init()(v124, v125);
      v15[3] = v126;
      sub_1000110A4(v114, (uint64_t)v15 + v117[6], &qword_10028CE50);
      v127 = (_QWORD *)((char *)v15 + v117[8]);
      v128 = type metadata accessor for ConversationViewModel(0);
      v129 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
      *v127 = ObservedObject.init(wrappedValue:)(v122, v128, v129);
      v127[1] = v130;
      v131 = (_QWORD *)((char *)v15 + v117[9]);
      v132 = type metadata accessor for DeviceHelper(0);
      v133 = sub_100007D5C(&qword_100290788, type metadata accessor for DeviceHelper, (uint64_t)&unk_1001EC370);
      *v131 = ObservedObject.init(wrappedValue:)(v110, v132, v133);
      v131[1] = v134;
      v135 = (_QWORD *)((char *)v15 + v117[10]);
      v136 = type metadata accessor for LanguagesService(0);
      v137 = sub_100007D5C((unint64_t *)&unk_100298710, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagesService, (uint64_t)&protocol conformance descriptor for LanguagesService);
      *v135 = ObservedObject.init(wrappedValue:)(v111, v136, v137);
      v135[1] = v138;
      v139 = (_QWORD *)((char *)v15 + v117[11]);
      v140 = type metadata accessor for TranslationSession_RD(0);
      v141 = sub_100007D5C(&qword_100290790, type metadata accessor for TranslationSession_RD, (uint64_t)"ŝ\a");
      *v139 = ObservedObject.init(wrappedValue:)(v112, v140, v141);
      v139[1] = v142;
      v143 = (char *)v15 + v117[12];
      LOBYTE(v223) = 0;
      State.init(wrappedValue:)(&v220, &v223, &type metadata for Bool);
      v144 = *((_QWORD *)&v220 + 1);
      *v143 = v220;
      *((_QWORD *)v143 + 1) = v144;
      v145 = v117[13];
      v223 = 0;
      State.init(wrappedValue:)(&v220, &v223, &type metadata for Int);
      *(_OWORD *)((char *)v15 + v145) = v220;
      v146 = v193;
      v147 = v192;
      v148 = v194;
      (*(void (**)(char *, _QWORD, uint64_t))(v193 + 104))(v192, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v194);
      v149 = sub_100007D5C(&qword_100295EC8, type metadata accessor for ConversationView, (uint64_t)&unk_1001EB488);
      v150 = v191;
      View.navigationBarTitleDisplayMode(_:)(v147, v117, v149);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v148);
      sub_100032DAC((uint64_t)v15, type metadata accessor for ConversationView);
      v151 = v196;
      v152 = v195;
      v153 = v203;
      (*(void (**)(char *, char *, uint64_t))(v196 + 32))(v195, v150, v203);
      v154 = v202;
      (*(void (**)(uint64_t, char *, uint64_t))(v151 + 16))(v202, v152, v153);
      swift_storeEnumTagMultiPayload(v154, v201, 0);
      *(_QWORD *)&v220 = v117;
      *((_QWORD *)&v220 + 1) = v149;
      v155 = swift_getOpaqueTypeConformance2(&v220, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
      v156 = sub_100007D5C(&qword_100295ED0, type metadata accessor for FavoritesView, (uint64_t)&unk_1001EDB50);
      v157 = (uint64_t)v205;
      _ConditionalContent<>.init(storage:)(v154, v153, v204, v155, v156);
      v158 = v208;
      sub_10000B074(v157, v208, &qword_100295EC0);
      swift_storeEnumTagMultiPayload(v158, v206, 1);
      v159 = sub_100164284();
      v160 = sub_1001643BC();
      v161 = (uint64_t)v209;
      _ConditionalContent<>.init(storage:)(v158, v207, v210, v159, v160);
      sub_10000A020(v157, &qword_100295EC0);
      v162 = v217;
      sub_10000B074(v161, v217, &qword_100295E80);
      swift_storeEnumTagMultiPayload(v162, v215, 0);
      v163 = sub_100164260();
      v164 = sub_10016447C();
      _ConditionalContent<>.init(storage:)(v162, v216, v218, v163, v164);
      sub_10000A020(v161, &qword_100295E80);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v152, v153);
      return;
    case 3uLL:
      v165 = *(_QWORD *)(v214[8] + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
      v166 = *(_QWORD *)(v214[9] + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session);
      v168 = v214[6];
      v167 = v214[7];
      v169 = swift_getKeyPath(&unk_1001F4240);
      v170 = v204;
      v171 = v190;
      v172 = (uint64_t *)&v190[*(int *)(v204 + 32)];
      *v172 = v169;
      v173 = sub_100006DF4((uint64_t *)&unk_100291470);
      swift_storeEnumTagMultiPayload(v172, v173, 0);
      *v171 = v168;
      v171[1] = v165;
      v171[2] = v166;
      v171[3] = v167;
      v61 = type metadata accessor for FavoritesView;
      v174 = v202;
      sub_100032D68((uint64_t)v171, v202, type metadata accessor for FavoritesView);
      swift_storeEnumTagMultiPayload(v174, v201, 1);
      v175 = sub_100007D5C(&qword_100295EC8, type metadata accessor for ConversationView, (uint64_t)&unk_1001EB488);
      swift_retain(v168);
      swift_retain(v165);
      swift_retain(v166);
      swift_retain(v167);
      *(_QWORD *)&v220 = v200;
      *((_QWORD *)&v220 + 1) = v175;
      v176 = swift_getOpaqueTypeConformance2(&v220, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
      v177 = sub_100007D5C(&qword_100295ED0, type metadata accessor for FavoritesView, (uint64_t)&unk_1001EDB50);
      v178 = (uint64_t)v205;
      _ConditionalContent<>.init(storage:)(v174, v203, v170, v176, v177);
      v179 = v208;
      sub_10000B074(v178, v208, &qword_100295EC0);
      swift_storeEnumTagMultiPayload(v179, v206, 1);
      v180 = sub_100164284();
      v181 = sub_1001643BC();
      v182 = (uint64_t)v209;
      _ConditionalContent<>.init(storage:)(v179, v207, v210, v180, v181);
      sub_10000A020(v178, &qword_100295EC0);
      v183 = v217;
      sub_10000B074(v182, v217, &qword_100295E80);
      swift_storeEnumTagMultiPayload(v183, v215, 0);
      v184 = sub_100164260();
      v185 = sub_10016447C();
      _ConditionalContent<>.init(storage:)(v183, v216, v218, v184, v185);
      sub_10000A020(v182, &qword_100295E80);
      v67 = (uint64_t)v171;
      goto LABEL_11;
    case 4uLL:
    case 5uLL:
LABEL_2:
      LocalizedStringKey.init(stringLiteral:)(0x43454C45535F4F4ELL, 0xEC0000004E4F4954);
      v39 = Text.init(_:tableName:bundle:comment:)();
      v41 = v40;
      v43 = v42;
      *(_QWORD *)v4 = v39;
      *((_QWORD *)v4 + 1) = v40;
      v45 = v44 & 1;
      v4[16] = v44 & 1;
      *((_QWORD *)v4 + 3) = v42;
      swift_storeEnumTagMultiPayload(v4, v211, 1);
      sub_10001B9D8(v39, v41, v45);
      v46 = sub_100007D5C(&qword_100295EE8, type metadata accessor for FavoritesDetailView, (uint64_t)&unk_1001ED830);
      swift_bridgeObjectRetain(v43);
      v47 = (uint64_t)v213;
      _ConditionalContent<>.init(storage:)(v4, v212, &type metadata for Text, v46, &protocol witness table for Text);
      v48 = v217;
      sub_10000B074(v47, v217, &qword_100295EE0);
      swift_storeEnumTagMultiPayload(v48, v215, 1);
      v49 = sub_100164260();
      v50 = sub_10016447C();
      _ConditionalContent<>.init(storage:)(v48, v216, v218, v49, v50);
      sub_10000A020(v47, &qword_100295EE0);
      sub_10001B9E8(v39, v41, v45);
      swift_bridgeObjectRelease();
      break;
    default:
      v51 = *(_QWORD *)(v214[8] + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
      v53 = v214[6];
      v52 = v214[7];
      v54 = *(_QWORD *)(v214[9] + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session);
      v55 = v36;
      v56 = swift_getKeyPath(&unk_1001F4240);
      v57 = v212;
      v58 = (uint64_t *)((char *)v7 + *(int *)(v212 + 36));
      *v58 = v56;
      v59 = sub_100006DF4((uint64_t *)&unk_100291470);
      swift_storeEnumTagMultiPayload(v58, v59, 0);
      v60 = v189;
      *v7 = v189;
      v7[1] = v55;
      v7[2] = v53;
      v7[3] = v52;
      v7[4] = v51;
      v7[5] = v54;
      v61 = type metadata accessor for FavoritesDetailView;
      sub_100032D68((uint64_t)v7, (uint64_t)v4, type metadata accessor for FavoritesDetailView);
      swift_storeEnumTagMultiPayload(v4, v211, 0);
      sub_100164500(v60, v55);
      v62 = sub_100007D5C(&qword_100295EE8, type metadata accessor for FavoritesDetailView, (uint64_t)&unk_1001ED830);
      swift_retain(v53);
      swift_retain(v52);
      swift_retain(v51);
      swift_retain(v54);
      v63 = (uint64_t)v213;
      _ConditionalContent<>.init(storage:)(v4, v57, &type metadata for Text, v62, &protocol witness table for Text);
      v64 = v217;
      sub_10000B074(v63, v217, &qword_100295EE0);
      swift_storeEnumTagMultiPayload(v64, v215, 1);
      v65 = sub_100164260();
      v66 = sub_10016447C();
      _ConditionalContent<>.init(storage:)(v64, v216, v218, v65, v66);
      sub_10000A020(v63, &qword_100295EE0);
      v67 = (uint64_t)v7;
LABEL_11:
      v87 = v61;
LABEL_12:
      sub_100032DAC(v67, v87);
      break;
  }
}

uint64_t sub_100163F88@<X0>(uint64_t a1@<X8>)
{
  return sub_100161D9C(a1);
}

double sub_100163FD8@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100162188(a1).n128_u64[0];
  return result;
}

uint64_t sub_100163FE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001621DC(a1);
}

unint64_t sub_100163FE8()
{
  unint64_t result;

  result = qword_100295E08;
  if (!qword_100295E08)
  {
    result = swift_getWitnessTable(&unk_1001F42B4, &type metadata for SidebarListView);
    atomic_store(result, (unint64_t *)&qword_100295E08);
  }
  return result;
}

unint64_t sub_10016402C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295E18;
  if (!qword_100295E18)
  {
    v1 = sub_1000070BC(&qword_100295E20);
    sub_1001640B0();
    sub_100012334(&qword_100295F00, &qword_100295F08, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295E18);
  }
  return result;
}

uint64_t sub_1001640B0()
{
  return sub_100032BC0(&qword_100295E28, &qword_100295E30, (void (*)(void))sub_1001640D4, (void (*)(void))sub_1001641DC);
}

unint64_t sub_1001640D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295E38;
  if (!qword_100295E38)
  {
    v1 = sub_1000070BC(&qword_100295E40);
    sub_100164158();
    sub_100012334(&qword_100295EF0, &qword_100295EF8, (uint64_t)&protocol conformance descriptor for _InsetViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295E38);
  }
  return result;
}

unint64_t sub_100164158()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295E48;
  if (!qword_100295E48)
  {
    v1 = sub_1000070BC(&qword_100295E50);
    sub_1001641DC();
    sub_100012334(&qword_100295EF0, &qword_100295EF8, (uint64_t)&protocol conformance descriptor for _InsetViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295E48);
  }
  return result;
}

unint64_t sub_1001641DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295E58;
  if (!qword_100295E58)
  {
    v1 = sub_1000070BC(&qword_100295E60);
    sub_100032BC0(&qword_100295E68, &qword_100295E70, (void (*)(void))sub_100164260, (void (*)(void))sub_10016447C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100295E58);
  }
  return result;
}

uint64_t sub_100164260()
{
  return sub_100032BC0(&qword_100295E78, &qword_100295E80, (void (*)(void))sub_100164284, (void (*)(void))sub_1001643BC);
}

unint64_t sub_100164284()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100295E88;
  if (!qword_100295E88)
  {
    v1 = sub_1000070BC(&qword_100295E90);
    sub_100007D5C(&qword_100295E98, type metadata accessor for TranslateContentView, (uint64_t)&unk_1001F60B0);
    v2[0] = sub_1000070BC(&qword_100295EA0);
    v2[1] = sub_100164338();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationBarHidden(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295E88);
  }
  return result;
}

unint64_t sub_100164338()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295EA8;
  if (!qword_100295EA8)
  {
    v1 = sub_1000070BC(&qword_100295EA0);
    sub_100007D5C(&qword_100295EB0, type metadata accessor for ImageTranslationView, (uint64_t)&unk_1001EE3E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295EA8);
  }
  return result;
}

unint64_t sub_1001643BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100295EB8;
  if (!qword_100295EB8)
  {
    v1 = sub_1000070BC(&qword_100295EC0);
    v2[0] = type metadata accessor for ConversationView(255);
    v2[1] = sub_100007D5C(&qword_100295EC8, type metadata accessor for ConversationView, (uint64_t)&unk_1001EB488);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    sub_100007D5C(&qword_100295ED0, type metadata accessor for FavoritesView, (uint64_t)&unk_1001EDB50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295EB8);
  }
  return result;
}

unint64_t sub_10016447C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295ED8;
  if (!qword_100295ED8)
  {
    v1 = sub_1000070BC(&qword_100295EE0);
    sub_100007D5C(&qword_100295EE8, type metadata accessor for FavoritesDetailView, (uint64_t)&unk_1001ED830);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295ED8);
  }
  return result;
}

uint64_t sub_100164500(uint64_t a1, unint64_t a2)
{
  if (a2 != 5)
    return sub_10000B720(a1, a2);
  return a1;
}

_QWORD *sub_100164510(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = (void *)a1[9];
  v10 = a1[10];
  swift_retain(*a1);
  swift_retain(v2);
  sub_100164500(v3, v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v11 = v9;
  swift_bridgeObjectRetain(v10);
  return a1;
}

unint64_t sub_1001645C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295F88;
  if (!qword_100295F88)
  {
    v1 = sub_1000070BC(&qword_100295DF8);
    sub_100164644();
    sub_100012334(&qword_100295F98, &qword_100293258, (uint64_t)&protocol conformance descriptor for _PreferenceWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295F88);
  }
  return result;
}

unint64_t sub_100164644()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = qword_100295F90;
  if (!qword_100295F90)
  {
    v1 = sub_1000070BC(&qword_100295DF0);
    v2 = sub_1000070BC(&qword_100295DE8);
    v3 = type metadata accessor for ProminentDetailNavigationSplitViewStyle(255);
    v4 = sub_100012334(&qword_100295F30, &qword_100295DE8, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>);
    v7 = v2;
    v8 = v3;
    v9 = v4;
    v10 = sub_100007D5C(&qword_100295F40, (uint64_t (*)(uint64_t))&type metadata accessor for ProminentDetailNavigationSplitViewStyle, (uint64_t)&protocol conformance descriptor for ProminentDetailNavigationSplitViewStyle);
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.navigationSplitViewStyle<A>(_:)>>, 1);
    v5 = type metadata accessor for AutomaticNavigationSplitViewStyle(255);
    v6 = sub_100007D5C(&qword_100295F38, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticNavigationSplitViewStyle, (uint64_t)&protocol conformance descriptor for AutomaticNavigationSplitViewStyle);
    v7 = v2;
    v8 = v5;
    v9 = v4;
    v10 = v6;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.navigationSplitViewStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295F90);
  }
  return result;
}

unint64_t destroy for SidebarListView(_QWORD *a1)
{
  unint64_t result;

  swift_release(*a1);
  swift_release(a1[1]);
  result = a1[3];
  if (result >= 6)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t *initializeWithCopy for SidebarListView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2 + 2;
  v6 = a2[3];
  swift_retain(v3);
  swift_retain(v4);
  if (v6 > 5)
  {
    a1[2] = *v5;
    a1[3] = v6;
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
  }
  return a1;
}

_QWORD *assignWithCopy for SidebarListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[3];
  v9 = a2[3];
  if (v8 == 5)
  {
    if (v9 >= 6)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v9 == 5)
  {
    sub_100161C38((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v8 >= 5)
  {
    if (v9 >= 5)
    {
      a1[2] = a2[2];
      v12 = a2[3];
      a1[3] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10012D4AC((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v9 < 5)
  {
LABEL_11:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
LABEL_8:
  a1[2] = a2[2];
  v10 = a2[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

_QWORD *assignWithTake for SidebarListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  v6 = a2 + 2;
  v7 = a1[3];
  v8 = a2[3];
  if (v7 != 5)
  {
    if (v8 == 5)
    {
      sub_100161C38((uint64_t)(a1 + 2));
    }
    else if (v7 >= 5)
    {
      if (v8 >= 5)
      {
        a1[2] = *v6;
        a1[3] = v8;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_10012D4AC((uint64_t)(a1 + 2));
    }
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarListView()
{
  return &type metadata for SidebarListView;
}

uint64_t sub_100164A78(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216B24, 1);
}

uint64_t sub_100164A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v51 = a5;
  v50 = type metadata accessor for SidebarListStyle(0);
  v52 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100295FA0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_100295FA8);
  v46 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_100295FB0);
  v47 = *(_QWORD *)(v16 - 8);
  v48 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4(&qword_100295FB8);
  __chkstk_darwin(v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a1;
  v54 = a2;
  v55 = a3;
  v56 = a4;
  v22 = sub_100006DF4(&qword_100295F10);
  Binding.projectedValue.getter(&v57, v22);
  v23 = sub_100006DF4(&qword_100295FC0);
  v24 = sub_10000B694();
  v25 = sub_100012334(&qword_100295FC8, &qword_100295FC0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  List.init(selection:content:)(&v57, sub_100164E10, 0, &type metadata for AppSection, v23, v24, v25);
  v26 = LocalizedStringKey.init(stringLiteral:)(0x54414C534E415254, 0xE900000000000045);
  v28 = v27;
  LOBYTE(v23) = v29;
  v31 = v30;
  v32 = sub_100012334(&qword_100295FD0, &qword_100295FA8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.navigationTitle(_:)(v26, v28, v23 & 1, v31, v13, v32);
  swift_bridgeObjectRelease();
  v33 = swift_bridgeObjectRelease();
  v34 = (*(uint64_t (**)(char *, uint64_t, __n128))(v46 + 8))(v15, v13, v33);
  v35 = static Color.accentColor.getter(v34);
  static ListItemTint.fixed(_:)();
  v36 = type metadata accessor for ListItemTint(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v12, 0, 1, v36);
  sub_10000B074((uint64_t)v12, (uint64_t)&v21[*(int *)(v19 + 36)], &qword_100295FA0);
  v38 = v47;
  v37 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v21, v18, v48);
  sub_10000A020((uint64_t)v12, &qword_100295FA0);
  v39 = swift_release(v35);
  v40 = (*(uint64_t (**)(char *, uint64_t, __n128))(v38 + 8))(v18, v37, v39);
  v41 = v49;
  SidebarListStyle.init()(v40);
  v42 = sub_100165624();
  v43 = v50;
  View.listStyle<A>(_:)(v41, v19, v50, v42, &protocol witness table for SidebarListStyle);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v43);
  return sub_10000A020((uint64_t)v21, &qword_100295FB8);
}

uint64_t sub_100164E10@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  int *v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  ValueMetadata *v59;
  unint64_t v60;

  v53 = a1;
  v1 = type metadata accessor for FavoritesSideBarListView(0);
  v2 = __chkstk_darwin(v1);
  v50 = (uint64_t *)((char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  v52 = (uint64_t)&v46 - v4;
  v5 = sub_100006DF4(&qword_100295FF0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v51 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v56 = (char *)&v46 - v9;
  v10 = sub_100006DF4(&qword_100295FF8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v46 - v14;
  v49 = sub_100006DF4(&qword_100296000);
  v57 = *(_QWORD *)(v49 - 8);
  v16 = __chkstk_darwin(v49);
  v48 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v46 - v18;
  v58 = 0uLL;
  v20 = sub_100006DF4(&qword_100296008);
  v21 = sub_1001656F0(&qword_100296010, &qword_100296008, &qword_10028AB80, &qword_10028AB60);
  v22 = sub_10000B694();
  v55 = v19;
  NavigationLink<>.init<A>(value:label:)(&v58, sub_100165308, 0, v20, &type metadata for AppSection, v21, v22);
  if (sub_100005DFC())
  {
    v59 = &type metadata for TranslateFeatures;
    v60 = sub_100009BC4();
    LOBYTE(v58) = 0;
    v23 = isFeatureEnabled(_:)(&v58);
    sub_100009C08(&v58);
    if ((v23 & 1) != 0)
    {
      v58 = xmmword_1001ED9D0;
      v24 = sub_100006DF4(&qword_10028E098);
      v25 = sub_1001656F0((unint64_t *)&qword_10028E0A0, &qword_10028E098, &qword_10028AB68, &qword_10028AB30);
      NavigationLink<>.init<A>(value:label:)(&v58, sub_100165418, 0, v24, &type metadata for AppSection, v25, v22);
      v26 = 0;
    }
    else
    {
      v26 = 1;
    }
  }
  else
  {
    v26 = 1;
  }
  v54 = v6;
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v47 = v15;
  v27(v15, v26, 1, v5);
  v58 = xmmword_1001EB430;
  v28 = sub_100006DF4(&qword_10028E098);
  v29 = sub_1001656F0((unint64_t *)&qword_10028E0A0, &qword_10028E098, &qword_10028AB68, &qword_10028AB30);
  v30 = v56;
  NavigationLink<>.init<A>(value:label:)(&v58, sub_100165514, 0, v28, &type metadata for AppSection, v29, v22);
  KeyPath = swift_getKeyPath(&unk_1001F4308);
  v32 = (uint64_t)v50;
  *v50 = KeyPath;
  *(_BYTE *)(v32 + 8) = 0;
  v33 = type metadata accessor for PersistedTranslation(0);
  v34 = static PersistedTranslation.favoritedSortedByLocalePairAndCreationDateFetchRequest()();
  FetchRequest.init(fetchRequest:animation:)(v34, 0, v33);
  v35 = v52;
  sub_100165778(v32, v52);
  v36 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v38 = v48;
  v37 = v49;
  v36(v48, v55, v49);
  sub_10000B074((uint64_t)v15, (uint64_t)v13, &qword_100295FF8);
  v39 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v40 = v51;
  v39(v51, v30, v5);
  sub_1001657BC(v35, v32);
  v41 = v53;
  v36(v53, v38, v37);
  v42 = (int *)sub_100006DF4(&qword_100296018);
  sub_10000B074((uint64_t)v13, (uint64_t)&v41[v42[12]], &qword_100295FF8);
  v39(&v41[v42[16]], v40, v5);
  sub_1001657BC(v32, (uint64_t)&v41[v42[20]]);
  sub_100165800(v35);
  v43 = *(void (**)(char *, uint64_t))(v54 + 8);
  v43(v56, v5);
  sub_10000A020((uint64_t)v47, &qword_100295FF8);
  v44 = *(void (**)(char *, uint64_t))(v57 + 8);
  v44(v55, v37);
  sub_100165800(v32);
  v43(v40, v5);
  sub_10000A020((uint64_t)v13, &qword_100295FF8);
  return ((uint64_t (*)(char *, uint64_t))v44)(v38, v37);
}

uint64_t sub_100165308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_100006DF4(&qword_10028AB60);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028AB90);
  v5 = sub_10000B218();
  Label.init(title:icon:)(sub_10000B0B8, 0, sub_10000B130, 0, &type metadata for Text, v4, &protocol witness table for Text, v5);
  v6 = sub_100012334(&qword_10028AB80, &qword_10028AB60, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001002001E0, v0, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100165418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_100006DF4(&qword_10028AB30);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = LocalizedStringKey.init(stringLiteral:)(0x4152454D4143, 0xE600000000000000);
  Label<>.init(_:systemImage:)(v4);
  v5 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityIdentifier(_:)(0x61546172656D6163, 0xEF6E6F7474754262, v0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100165514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_100006DF4(&qword_10028AB30);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = LocalizedStringKey.init(stringLiteral:)(0x41535245564E4F43, 0xEC0000004E4F4954);
  Label<>.init(_:systemImage:)(v4);
  v5 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityIdentifier(_:)(0xD000000000000015, 0x80000001002001C0, v0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100165618@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100164A88(*v1, v1[1], v1[2], v1[3], a1);
}

unint64_t sub_100165624()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100295FD8;
  if (!qword_100295FD8)
  {
    v1 = sub_1000070BC(&qword_100295FB8);
    v2[0] = sub_1000070BC(&qword_100295FA8);
    v2[1] = sub_100012334(&qword_100295FD0, &qword_100295FA8, (uint64_t)&protocol conformance descriptor for List<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    sub_100012334(&qword_100295FE0, &qword_100295FE8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100295FD8);
  }
  return result;
}

uint64_t sub_1001656F0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000070BC(a2);
    sub_100012334(a3, a4, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_1000129EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100165778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FavoritesSideBarListView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001657BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FavoritesSideBarListView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100165800(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FavoritesSideBarListView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016583C()
{
  _QWORD v1[4];

  v1[0] = sub_1000070BC(&qword_100295FB8);
  v1[1] = type metadata accessor for SidebarListStyle(255);
  v1[2] = sub_100165624();
  v1[3] = &protocol witness table for SidebarListStyle;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
}

char *sub_1001658A0(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  _OWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  __int128 v59;
  __int128 v60;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 8;
    v9 = a2[8];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    a1[20] = *((_BYTE *)a2 + 20);
    v11 = a2[3];
    v10 = a2[4];
    *((_QWORD *)a1 + 3) = v11;
    *((_QWORD *)a1 + 4) = v10;
    a1[40] = *((_BYTE *)a2 + 40);
    v12 = a2[7];
    *((_QWORD *)a1 + 6) = a2[6];
    *((_QWORD *)a1 + 7) = v12;
    v13 = v5;
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    if (v9)
    {
      v14 = a2[9];
      *((_QWORD *)a1 + 8) = v9;
      *((_QWORD *)a1 + 9) = v14;
      swift_retain(v14);
    }
    else
    {
      *((_OWORD *)a1 + 4) = *v8;
    }
    a1[80] = *((_BYTE *)a2 + 80);
    v15 = a3[15];
    v16 = &a1[v15];
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for Locale(0);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v16, v17, v18);
    v19(&a1[a3[16]], (uint64_t)a2 + a3[16], v18);
    v20 = a3[17];
    v21 = a3[18];
    v22 = &a1[v20];
    v23 = (char **)((char *)a2 + v20);
    v24 = v23[1];
    *(_QWORD *)v22 = *v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = &a1[v21];
    v26 = (char **)((char *)a2 + v21);
    v27 = v26[1];
    *(_QWORD *)v25 = *v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = a3[19];
    v29 = a3[20];
    v30 = &a1[v28];
    v31 = (char **)((char *)a2 + v28);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = &a1[v29];
    v34 = (char **)((char *)a2 + v29);
    v35 = v34[1];
    *(_QWORD *)v33 = *v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = a3[21];
    v37 = &a1[v36];
    v38 = (uint64_t)a2 + v36;
    v39 = *(uint64_t *)((char *)a2 + v36);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v27);
    swift_retain(v32);
    swift_retain(v35);
    if (v39)
    {
      v40 = *(_QWORD *)(v38 + 8);
      *(_QWORD *)v37 = v39;
      *((_QWORD *)v37 + 1) = v40;
      swift_retain(v40);
    }
    else
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    v41 = a3[22];
    v42 = &a1[v41];
    v43 = (char **)((char *)a2 + v41);
    if (*v43)
    {
      v44 = v43[1];
      *(_QWORD *)v42 = *v43;
      *((_QWORD *)v42 + 1) = v44;
      swift_retain(v44);
    }
    else
    {
      *(_OWORD *)v42 = *(_OWORD *)v43;
    }
    v45 = a3[23];
    v46 = &a1[v45];
    v47 = (char **)((char *)a2 + v45);
    if (*v47)
    {
      v48 = v47[1];
      *(_QWORD *)v46 = *v47;
      *((_QWORD *)v46 + 1) = v48;
      swift_retain(v48);
    }
    else
    {
      *(_OWORD *)v46 = *(_OWORD *)v47;
    }
    v49 = a3[24];
    v50 = &a1[v49];
    v51 = (uint64_t)a2 + v49;
    v52 = *(_QWORD *)(v51 + 8);
    if (v52)
    {
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      v53 = *(_QWORD *)(v51 + 24);
      *((_QWORD *)v50 + 2) = *(_QWORD *)(v51 + 16);
      *((_QWORD *)v50 + 3) = v53;
      v54 = *(_QWORD *)(v51 + 40);
      *((_QWORD *)v50 + 4) = *(_QWORD *)(v51 + 32);
      *((_QWORD *)v50 + 5) = v54;
      *((_OWORD *)v50 + 3) = *(_OWORD *)(v51 + 48);
      v50[64] = *(_BYTE *)(v51 + 64);
      v55 = *(void **)(v51 + 72);
      v56 = *(void **)(v51 + 80);
      *((_QWORD *)v50 + 9) = v55;
      *((_QWORD *)v50 + 10) = v56;
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v54);
      v57 = v55;
      v58 = v56;
    }
    else
    {
      v59 = *(_OWORD *)(v51 + 48);
      *((_OWORD *)v50 + 2) = *(_OWORD *)(v51 + 32);
      *((_OWORD *)v50 + 3) = v59;
      *((_OWORD *)v50 + 4) = *(_OWORD *)(v51 + 64);
      *((_QWORD *)v50 + 10) = *(_QWORD *)(v51 + 80);
      v60 = *(_OWORD *)(v51 + 16);
      *(_OWORD *)v50 = *(_OWORD *)v51;
      *((_OWORD *)v50 + 1) = v60;
    }
  }
  return a1;
}

void sub_100165B38(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 56));
  if (*(_QWORD *)(a1 + 64))
    swift_release(*(_QWORD *)(a1 + 72));
  v4 = a1 + a2[15];
  v5 = type metadata accessor for Locale(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[16], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18] + 8));
  swift_release(*(_QWORD *)(a1 + a2[19] + 8));
  swift_release(*(_QWORD *)(a1 + a2[20] + 8));
  v7 = (_QWORD *)(a1 + a2[21]);
  if (*v7)
    swift_release(v7[1]);
  v8 = (_QWORD *)(a1 + a2[22]);
  if (*v8)
    swift_release(v8[1]);
  v9 = (_QWORD *)(a1 + a2[23]);
  if (*v9)
    swift_release(v9[1]);
  v10 = a1 + a2[24];
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 40));

  }
}

uint64_t sub_100165C94(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  __int128 v59;
  __int128 v60;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  v12 = (_OWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = v6;
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  if (v11)
  {
    v14 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v14;
    swift_retain(v14);
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *v12;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v15 = a3[15];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Locale(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v16, v17, v18);
  v19(a1 + a3[16], a2 + a3[16], v18);
  v20 = a3[17];
  v21 = a3[18];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)(a1 + v21);
  v26 = (_QWORD *)(a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[19];
  v29 = a3[20];
  v30 = (_QWORD *)(a1 + v28);
  v31 = (_QWORD *)(a2 + v28);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = (_QWORD *)(a1 + v29);
  v34 = (_QWORD *)(a2 + v29);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = a3[21];
  v37 = (_QWORD *)(a1 + v36);
  v38 = a2 + v36;
  v39 = *(_QWORD *)(a2 + v36);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  swift_retain(v32);
  swift_retain(v35);
  if (v39)
  {
    v40 = *(_QWORD *)(v38 + 8);
    *v37 = v39;
    v37[1] = v40;
    swift_retain(v40);
  }
  else
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
  }
  v41 = a3[22];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  if (*v43)
  {
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    swift_retain(v44);
  }
  else
  {
    *(_OWORD *)v42 = *(_OWORD *)v43;
  }
  v45 = a3[23];
  v46 = (_QWORD *)(a1 + v45);
  v47 = (_QWORD *)(a2 + v45);
  if (*v47)
  {
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    swift_retain(v48);
  }
  else
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
  }
  v49 = a3[24];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_QWORD *)(v51 + 8);
  if (v52)
  {
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *(_QWORD *)(v50 + 8) = v52;
    v53 = *(_QWORD *)(v51 + 24);
    *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
    *(_QWORD *)(v50 + 24) = v53;
    v54 = *(_QWORD *)(v51 + 40);
    *(_QWORD *)(v50 + 32) = *(_QWORD *)(v51 + 32);
    *(_QWORD *)(v50 + 40) = v54;
    *(_OWORD *)(v50 + 48) = *(_OWORD *)(v51 + 48);
    *(_BYTE *)(v50 + 64) = *(_BYTE *)(v51 + 64);
    v55 = *(void **)(v51 + 72);
    v56 = *(void **)(v51 + 80);
    *(_QWORD *)(v50 + 72) = v55;
    *(_QWORD *)(v50 + 80) = v56;
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v54);
    v57 = v55;
    v58 = v56;
  }
  else
  {
    v59 = *(_OWORD *)(v51 + 48);
    *(_OWORD *)(v50 + 32) = *(_OWORD *)(v51 + 32);
    *(_OWORD *)(v50 + 48) = v59;
    *(_OWORD *)(v50 + 64) = *(_OWORD *)(v51 + 64);
    *(_QWORD *)(v50 + 80) = *(_QWORD *)(v51 + 80);
    v60 = *(_OWORD *)(v51 + 16);
    *(_OWORD *)v50 = *(_OWORD *)v51;
    *(_OWORD *)(v50 + 16) = v60;
  }
  return a1;
}

uint64_t sub_100165F00(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  id v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v13)
    {
      v14 = *(_QWORD *)(a2 + 72);
      v15 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v13;
      *(_QWORD *)(a1 + 72) = v14;
      swift_retain(v14);
      swift_release(v15);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 72));
  }
  else if (v13)
  {
    v16 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v16;
    swift_retain(v16);
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
LABEL_8:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v17 = a3[15];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Locale(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24);
  v21(v18, v19, v20);
  v21(a1 + a3[16], a2 + a3[16], v20);
  v22 = a3[17];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  v26 = a3[18];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease();
  v30 = a3[19];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  v34 = v31[1];
  *v31 = *v32;
  v31[1] = v33;
  swift_retain(v33);
  swift_release(v34);
  v35 = a3[20];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  v38 = v37[1];
  v39 = v36[1];
  *v36 = *v37;
  v36[1] = v38;
  swift_retain(v38);
  swift_release(v39);
  v40 = a3[21];
  v41 = (_QWORD *)(a1 + v40);
  v42 = a2 + v40;
  v43 = *(_QWORD *)(a1 + v40);
  v44 = *(_QWORD *)(a2 + v40);
  if (v43)
  {
    if (v44)
    {
      v45 = *(_QWORD *)(v42 + 8);
      v46 = v41[1];
      *v41 = v44;
      v41[1] = v45;
      swift_retain(v45);
      swift_release(v46);
      goto LABEL_15;
    }
    swift_release(v41[1]);
  }
  else if (v44)
  {
    v47 = *(_QWORD *)(v42 + 8);
    *v41 = v44;
    v41[1] = v47;
    swift_retain(v47);
    goto LABEL_15;
  }
  *(_OWORD *)v41 = *(_OWORD *)v42;
LABEL_15:
  v48 = a3[22];
  v49 = (_QWORD *)(a1 + v48);
  v50 = a2 + v48;
  v51 = *(_QWORD *)(a1 + v48);
  v52 = *(_QWORD *)(a2 + v48);
  if (v51)
  {
    if (v52)
    {
      v53 = *(_QWORD *)(v50 + 8);
      v54 = v49[1];
      *v49 = v52;
      v49[1] = v53;
      swift_retain(v53);
      swift_release(v54);
      goto LABEL_22;
    }
    swift_release(v49[1]);
  }
  else if (v52)
  {
    v55 = *(_QWORD *)(v50 + 8);
    *v49 = v52;
    v49[1] = v55;
    swift_retain(v55);
    goto LABEL_22;
  }
  *(_OWORD *)v49 = *(_OWORD *)v50;
LABEL_22:
  v56 = a3[23];
  v57 = (_QWORD *)(a1 + v56);
  v58 = a2 + v56;
  v59 = *(_QWORD *)(a1 + v56);
  v60 = *(_QWORD *)(a2 + v56);
  if (v59)
  {
    if (v60)
    {
      v61 = *(_QWORD *)(v58 + 8);
      v62 = v57[1];
      *v57 = v60;
      v57[1] = v61;
      swift_retain(v61);
      swift_release(v62);
      goto LABEL_29;
    }
    swift_release(v57[1]);
  }
  else if (v60)
  {
    v63 = *(_QWORD *)(v58 + 8);
    *v57 = v60;
    v57[1] = v63;
    swift_retain(v63);
    goto LABEL_29;
  }
  *(_OWORD *)v57 = *(_OWORD *)v58;
LABEL_29:
  v64 = a3[24];
  v65 = a1 + v64;
  v66 = a2 + v64;
  v67 = *(_QWORD *)(a1 + v64 + 8);
  v68 = *(_QWORD *)(v66 + 8);
  if (v67)
  {
    if (v68)
    {
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v69 = *(_QWORD *)(v66 + 8);
      *(_QWORD *)(v65 + 8) = v69;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
      v70 = *(_QWORD *)(v66 + 24);
      *(_QWORD *)(v65 + 24) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);
      v71 = *(_QWORD *)(v66 + 40);
      *(_QWORD *)(v65 + 40) = v71;
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v65 + 48) = *(_QWORD *)(v66 + 48);
      *(_QWORD *)(v65 + 56) = *(_QWORD *)(v66 + 56);
      *(_BYTE *)(v65 + 64) = *(_BYTE *)(v66 + 64);
      v72 = *(void **)(v66 + 72);
      v73 = *(void **)(v65 + 72);
      *(_QWORD *)(v65 + 72) = v72;
      v74 = v72;

      v75 = *(void **)(v66 + 80);
      v76 = *(void **)(v65 + 80);
      *(_QWORD *)(v65 + 80) = v75;
      v77 = v75;

    }
    else
    {
      sub_1000137F8(v65);
      v85 = *(_OWORD *)(v66 + 16);
      *(_OWORD *)v65 = *(_OWORD *)v66;
      *(_OWORD *)(v65 + 16) = v85;
      v87 = *(_OWORD *)(v66 + 48);
      v86 = *(_OWORD *)(v66 + 64);
      v88 = *(_OWORD *)(v66 + 32);
      *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
      *(_OWORD *)(v65 + 48) = v87;
      *(_OWORD *)(v65 + 64) = v86;
      *(_OWORD *)(v65 + 32) = v88;
    }
  }
  else if (v68)
  {
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v78 = *(_QWORD *)(v66 + 8);
    *(_QWORD *)(v65 + 8) = v78;
    *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
    v79 = *(_QWORD *)(v66 + 24);
    *(_QWORD *)(v65 + 24) = v79;
    *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);
    v80 = *(_QWORD *)(v66 + 40);
    *(_QWORD *)(v65 + 40) = v80;
    *(_QWORD *)(v65 + 48) = *(_QWORD *)(v66 + 48);
    *(_QWORD *)(v65 + 56) = *(_QWORD *)(v66 + 56);
    *(_BYTE *)(v65 + 64) = *(_BYTE *)(v66 + 64);
    v81 = *(void **)(v66 + 72);
    *(_QWORD *)(v65 + 72) = v81;
    v82 = *(void **)(v66 + 80);
    *(_QWORD *)(v65 + 80) = v82;
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v80);
    v83 = v81;
    v84 = v82;
  }
  else
  {
    v89 = *(_OWORD *)(v66 + 16);
    *(_OWORD *)v65 = *(_OWORD *)v66;
    *(_OWORD *)(v65 + 16) = v89;
    v90 = *(_OWORD *)(v66 + 32);
    v91 = *(_OWORD *)(v66 + 48);
    v92 = *(_OWORD *)(v66 + 64);
    *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
    *(_OWORD *)(v65 + 48) = v91;
    *(_OWORD *)(v65 + 64) = v92;
    *(_OWORD *)(v65 + 32) = v90;
  }
  return a1;
}

uint64_t sub_1001663A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = a3[15];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Locale(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + a3[16], a2 + a3[16], v12);
  v14 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[21];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = *v18;
  if (*v18)
  {
    v20 = v18[1];
    *v17 = v19;
    v17[1] = v20;
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  v21 = a3[22];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  if (*v23)
  {
    v25 = v23[1];
    *v22 = v24;
    v22[1] = v25;
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  v26 = a3[23];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  if (*v28)
  {
    v30 = v28[1];
    *v27 = v29;
    v27[1] = v30;
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  v31 = a3[24];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_OWORD *)(v33 + 48);
  *(_OWORD *)(v32 + 32) = *(_OWORD *)(v33 + 32);
  *(_OWORD *)(v32 + 48) = v34;
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v33 + 64);
  *(_QWORD *)(v32 + 80) = *(_QWORD *)(v33 + 80);
  v35 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v35;
  return a1;
}

uint64_t sub_10016654C(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  __int128 v63;
  __int128 v64;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 72);
      v10 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v8;
      *(_QWORD *)(a1 + 72) = v9;
      swift_release(v10);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 72));
  }
  else if (v8)
  {
    v11 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v11;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
LABEL_8:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = a3[15];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Locale(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + a3[16], a2 + a3[16], v15);
  v17 = a3[17];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[18];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[19];
  v28 = *(_QWORD *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  swift_release(v28);
  v29 = a3[20];
  v30 = *(_QWORD *)(a1 + v29 + 8);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  swift_release(v30);
  v31 = a3[21];
  v32 = (_QWORD *)(a1 + v31);
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a1 + v31);
  v35 = *(_QWORD *)(a2 + v31);
  if (v34)
  {
    if (v35)
    {
      v36 = *(_QWORD *)(v33 + 8);
      v37 = v32[1];
      *v32 = v35;
      v32[1] = v36;
      swift_release(v37);
      goto LABEL_15;
    }
    swift_release(v32[1]);
  }
  else if (v35)
  {
    v38 = *(_QWORD *)(v33 + 8);
    *v32 = v35;
    v32[1] = v38;
    goto LABEL_15;
  }
  *(_OWORD *)v32 = *(_OWORD *)v33;
LABEL_15:
  v39 = a3[22];
  v40 = (_QWORD *)(a1 + v39);
  v41 = a2 + v39;
  v42 = *(_QWORD *)(a1 + v39);
  v43 = *(_QWORD *)(a2 + v39);
  if (v42)
  {
    if (v43)
    {
      v44 = *(_QWORD *)(v41 + 8);
      v45 = v40[1];
      *v40 = v43;
      v40[1] = v44;
      swift_release(v45);
      goto LABEL_22;
    }
    swift_release(v40[1]);
  }
  else if (v43)
  {
    v46 = *(_QWORD *)(v41 + 8);
    *v40 = v43;
    v40[1] = v46;
    goto LABEL_22;
  }
  *(_OWORD *)v40 = *(_OWORD *)v41;
LABEL_22:
  v47 = a3[23];
  v48 = (_QWORD *)(a1 + v47);
  v49 = a2 + v47;
  v50 = *(_QWORD *)(a1 + v47);
  v51 = *(_QWORD *)(a2 + v47);
  if (v50)
  {
    if (v51)
    {
      v52 = *(_QWORD *)(v49 + 8);
      v53 = v48[1];
      *v48 = v51;
      v48[1] = v52;
      swift_release(v53);
      goto LABEL_29;
    }
    swift_release(v48[1]);
  }
  else if (v51)
  {
    v54 = *(_QWORD *)(v49 + 8);
    *v48 = v51;
    v48[1] = v54;
    goto LABEL_29;
  }
  *(_OWORD *)v48 = *(_OWORD *)v49;
LABEL_29:
  v55 = a3[24];
  v56 = a1 + v55;
  v57 = a2 + v55;
  if (!*(_QWORD *)(a1 + v55 + 8))
  {
LABEL_33:
    v63 = *(_OWORD *)(v57 + 48);
    *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
    *(_OWORD *)(v56 + 48) = v63;
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v57 + 64);
    *(_QWORD *)(v56 + 80) = *(_QWORD *)(v57 + 80);
    v64 = *(_OWORD *)(v57 + 16);
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *(_OWORD *)(v56 + 16) = v64;
    return a1;
  }
  v58 = *(_QWORD *)(v57 + 8);
  if (!v58)
  {
    sub_1000137F8(v56);
    goto LABEL_33;
  }
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_QWORD *)(v56 + 8) = v58;
  swift_bridgeObjectRelease();
  v59 = *(_QWORD *)(v57 + 24);
  *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
  *(_QWORD *)(v56 + 24) = v59;
  swift_bridgeObjectRelease();
  v60 = *(_QWORD *)(v57 + 40);
  *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
  *(_QWORD *)(v56 + 40) = v60;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v56 + 48) = *(_OWORD *)(v57 + 48);
  *(_BYTE *)(v56 + 64) = *(_BYTE *)(v57 + 64);
  v61 = *(void **)(v56 + 72);
  *(_QWORD *)(v56 + 72) = *(_QWORD *)(v57 + 72);

  v62 = *(void **)(v56 + 80);
  *(_QWORD *)(v56 + 80) = *(_QWORD *)(v57 + 80);

  return a1;
}

uint64_t sub_100166890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016689C);
}

uint64_t sub_10016689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Locale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_100166918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100166924);
}

uint64_t sub_100166924(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Locale(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SingleOrPairSpeakButton(uint64_t a1)
{
  uint64_t result;

  result = qword_100296078;
  if (!qword_100296078)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SingleOrPairSpeakButton);
  return result;
}

uint64_t sub_1001669D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v4[0] = &unk_1001F4358;
  v4[1] = &unk_1001F4370;
  v4[2] = &unk_1001F4370;
  v4[3] = &unk_1001F4370;
  v4[4] = &unk_1001F4370;
  v4[5] = &unk_1001F4370;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[7] = &unk_1001F4388;
  v4[8] = (char *)&value witness table for () + 64;
  v4[9] = &unk_1001F4358;
  v4[10] = &unk_1001F4370;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_1001F43A0;
    v8 = &unk_1001F43A0;
    v9 = (char *)&value witness table for () + 64;
    v10 = (char *)&value witness table for () + 64;
    v11 = &unk_1001F4358;
    v12 = &unk_1001F4358;
    v13 = &unk_1001F4358;
    v14 = &unk_1001F43B8;
    swift_initStructMetadata(a1, 256, 21, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100166AAC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216B74, 1);
}

uint64_t sub_100166ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE v85[4];
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE v101[96];

  v4 = sub_100006DF4(&qword_100296110);
  __chkstk_darwin(v4);
  v6 = &v85[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (int *)type metadata accessor for SpeakButtonConfiguration(0);
  v8 = __chkstk_darwin(v7);
  v10 = &v85[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v85[-v11];
  v13 = type metadata accessor for LocalePairSpeakButtons(0);
  __chkstk_darwin(v13);
  v15 = &v85[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_100006DF4(&qword_100296118);
  v17 = __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  v20 = *(unsigned __int8 *)(a1 + 16);
  v21 = *(unsigned __int8 *)(a1 + 19);
  if (*(_BYTE *)(a1 + 80) == 1)
  {
    v95 = *(unsigned __int8 *)(a1 + 20);
    v91 = *(_QWORD *)(a1 + 24);
    v86 = *(unsigned __int8 *)(a1 + 17);
    v99 = &v85[-v18];
    v97 = v19;
    v93 = v20;
    v94 = v21;
    v22 = type metadata accessor for SingleOrPairSpeakButton(0);
    v92 = v15;
    v23 = (int *)v22;
    v24 = a1 + *(int *)(v22 + 60);
    v25 = v7[5];
    v100 = a2;
    v26 = &v12[v25];
    v27 = type metadata accessor for Locale(0);
    v96 = v16;
    v28 = v27;
    v29 = *(_QWORD *)(v27 - 8);
    v98 = v4;
    v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v29 + 16);
    v30(v26, v24, v27);
    v31 = (uint64_t *)(a1 + v23[17]);
    v32 = *v31;
    v88 = v31[1];
    v33 = v88;
    v34 = (uint64_t *)(a1 + v23[19]);
    v35 = *v34;
    v87 = v34[1];
    v36 = v87;
    v37 = (uint64_t *)(a1 + v23[21]);
    v90 = *v37;
    v38 = v90;
    v89 = v37[1];
    v39 = v89;
    *v12 = v86;
    v40 = &v12[v7[6]];
    *v40 = v32;
    v40[1] = v33;
    v41 = &v12[v7[7]];
    *v41 = v35;
    v41[1] = v36;
    v42 = (uint64_t *)&v12[v7[8]];
    *v42 = v38;
    v42[1] = v39;
    LOBYTE(v24) = *(_BYTE *)(a1 + 18);
    v30(&v10[v7[5]], a1 + v23[16], v28);
    v43 = (uint64_t *)(a1 + v23[18]);
    v44 = *v43;
    v45 = v43[1];
    v46 = (uint64_t *)(a1 + v23[20]);
    v47 = *v46;
    v48 = v46[1];
    v49 = (uint64_t *)(a1 + v23[22]);
    v50 = *v49;
    v51 = v49[1];
    *v10 = v24;
    v52 = &v10[v7[6]];
    *v52 = v44;
    v52[1] = v45;
    v53 = &v10[v7[7]];
    *v53 = v47;
    v53[1] = v48;
    v54 = (uint64_t *)&v10[v7[8]];
    *v54 = v50;
    v54[1] = v51;
    v55 = v50;
    v56 = v23[24];
    v57 = (uint64_t *)(a1 + v23[23]);
    v59 = *v57;
    v58 = v57[1];
    sub_1000110A4(a1 + v56, (uint64_t)v101, &qword_10028AE38);
    v60 = v91;
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v88);
    swift_retain(v87);
    sub_100016244(v90, v89);
    swift_bridgeObjectRetain(v45);
    swift_retain(v48);
    sub_100016244(v55, v51);
    sub_100016244(v59, v58);
    sub_100167168((uint64_t)v101);
    v61 = (uint64_t)v92;
    sub_10011F8E0(v93, v94, v95, v60, (uint64_t)v12, (uint64_t)v10, v59, v58, (uint64_t)v92, 300.0, (uint64_t)v101);
    LOBYTE(v58) = static Edge.Set.horizontal.getter(v62);
    v63 = EdgeInsets.init(_all:)(6.0);
    v65 = v64;
    v67 = v66;
    v69 = v68;
    v70 = v61;
    v71 = v61;
    v72 = v97;
    sub_100120DB8(v70, v97);
    v73 = v96;
    v74 = v72 + *(int *)(v96 + 36);
    *(_BYTE *)v74 = v58;
    *(double *)(v74 + 8) = v63;
    *(_QWORD *)(v74 + 16) = v65;
    *(_QWORD *)(v74 + 24) = v67;
    *(_QWORD *)(v74 + 32) = v69;
    *(_BYTE *)(v74 + 40) = 0;
    sub_100120DFC(v71);
    v75 = v99;
    sub_1000110A4(v72, (uint64_t)v99, &qword_100296118);
    sub_10000B074((uint64_t)v75, (uint64_t)v6, &qword_100296118);
    swift_storeEnumTagMultiPayload(v6, v98, 0);
    v76 = sub_10001B6DC(&qword_100296120, &qword_100296118, (void (*)(void))sub_100167120);
    v77 = sub_1000B8464();
    _ConditionalContent<>.init(storage:)(v6, v73, &type metadata for SpeakButton, v76, v77);
    return sub_10000A020((uint64_t)v75, &qword_100296118);
  }
  else
  {
    v79 = *(_QWORD *)(a1 + 48);
    v80 = *(_QWORD *)(a1 + 56);
    v81 = *(_QWORD *)(a1 + 64);
    v82 = *(_QWORD *)(a1 + 72);
    *v6 = v20;
    v6[1] = v21;
    v6[2] = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = 0;
    *((_QWORD *)v6 + 1) = _swiftEmptyArrayStorage;
    v6[32] = 0;
    *((_QWORD *)v6 + 5) = v79;
    *((_QWORD *)v6 + 6) = v80;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = v81;
    *((_QWORD *)v6 + 10) = v82;
    *((_QWORD *)v6 + 11) = 0x6C6C69662E63696DLL;
    *((_QWORD *)v6 + 12) = 0xE800000000000000;
    *((_QWORD *)v6 + 23) = 0;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    swift_retain(v80);
    sub_100016244(v81, v82);
    v83 = sub_10001B6DC(&qword_100296120, &qword_100296118, (void (*)(void))sub_100167120);
    v84 = sub_1000B8464();
    return _ConditionalContent<>.init(storage:)(v6, v16, &type metadata for SpeakButton, v83, v84);
  }
}

uint64_t sub_100167048@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD v12[3];

  v3 = sub_100006DF4(&qword_100296100);
  __chkstk_darwin(v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100166ABC(v1, (uint64_t)v5);
  v7 = static Alignment.center.getter(v6);
  _FrameLayout.init(width:height:alignment:)(v12, 0, 1, 0x4059000000000000, 0, v7, v8);
  sub_10000B074((uint64_t)v5, a1, &qword_100296100);
  v9 = (_OWORD *)(a1 + *(int *)(sub_100006DF4(&qword_100296108) + 36));
  v10 = v12[1];
  *v9 = v12[0];
  v9[1] = v10;
  v9[2] = v12[2];
  return sub_10000A020((uint64_t)v5, &qword_100296100);
}

unint64_t sub_100167120()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296128;
  if (!qword_100296128)
  {
    v1 = type metadata accessor for LocalePairSpeakButtons(255);
    result = swift_getWitnessTable(&unk_1001F0C48, v1);
    atomic_store(result, (unint64_t *)&qword_100296128);
  }
  return result;
}

uint64_t sub_100167168(uint64_t a1)
{
  sub_1000161E0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80));
  return a1;
}

uint64_t sub_1001671B8()
{
  return sub_10001B6DC(&qword_100296130, &qword_100296108, (void (*)(void))sub_1001671EC);
}

unint64_t sub_1001671EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296138;
  if (!qword_100296138)
  {
    v1 = sub_1000070BC(&qword_100296100);
    sub_100167250();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100296138);
  }
  return result;
}

unint64_t sub_100167250()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296140;
  if (!qword_100296140)
  {
    v1 = sub_1000070BC(&qword_100296148);
    sub_10001B6DC(&qword_100296120, &qword_100296118, (void (*)(void))sub_100167120);
    sub_1000B8464();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100296140);
  }
  return result;
}

void destroy for SpeakButton(uint64_t a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 56))
    swift_release(*(_QWORD *)(a1 + 64));
  if (*(_QWORD *)(a1 + 72))
    swift_release(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));

  }
}

uint64_t initializeWithCopy for SpeakButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v9 = (_OWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v10;
    swift_retain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v9;
  }
  v11 = *(_QWORD *)(a2 + 72);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v12;
    swift_retain(v12);
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  v14 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v13);
  if (v14)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v14;
    v15 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v15;
    v16 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    v18 = *(void **)(a2 + 176);
    v17 = *(void **)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v18;
    *(_QWORD *)(a1 + 184) = v17;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    v19 = v18;
    v20 = v17;
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v21;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v22 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v22;
  }
  return a1;
}

uint64_t assignWithCopy for SpeakButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = v9;
      swift_retain(v9);
      swift_release(v10);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 64));
  }
  else if (v8)
  {
    v11 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v11;
    swift_retain(v11);
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_8:
  v12 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 80);
      v14 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 72) = v12;
      *(_QWORD *)(a1 + 80) = v13;
      swift_retain(v13);
      swift_release(v14);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 80));
  }
  else if (v12)
  {
    v15 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v15;
    swift_retain(v15);
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_15:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  v17 = (_OWORD *)(a1 + 104);
  v18 = (_OWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v20 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v21 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 128) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v22 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 144) = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      v23 = *(void **)(a2 + 176);
      v24 = *(void **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v23;
      v25 = v23;

      v26 = *(void **)(a2 + 184);
      v27 = *(void **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v26;
      v28 = v26;

    }
    else
    {
      sub_1000137F8(a1 + 104);
      v36 = *(_OWORD *)(a2 + 120);
      *v17 = *v18;
      *(_OWORD *)(a1 + 120) = v36;
      v38 = *(_OWORD *)(a2 + 152);
      v37 = *(_OWORD *)(a2 + 168);
      v39 = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 152) = v38;
      *(_OWORD *)(a1 + 168) = v37;
      *(_OWORD *)(a1 + 136) = v39;
    }
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v29 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v29;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v30 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v30;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v31 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v31;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    v32 = *(void **)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v32;
    v33 = *(void **)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v33;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    v34 = v32;
    v35 = v33;
  }
  else
  {
    v40 = *(_OWORD *)(a2 + 120);
    *v17 = *v18;
    *(_OWORD *)(a1 + 120) = v40;
    v41 = *(_OWORD *)(a2 + 136);
    v42 = *(_OWORD *)(a2 + 152);
    v43 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 152) = v42;
    *(_OWORD *)(a1 + 168) = v43;
    *(_OWORD *)(a1 + 136) = v41;
  }
  return a1;
}

__n128 initializeWithTake for SpeakButton(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for SpeakButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 64);
      v8 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 64) = v7;
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 64));
  }
  else if (v6)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v9;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_8:
  v10 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 80);
      v12 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = v11;
      swift_release(v12);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 80));
  }
  else if (v10)
  {
    v13 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v13;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_15:
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_19:
    v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v21 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v21;
    return a1;
  }
  v15 = *(_QWORD *)(a2 + 112);
  if (!v15)
  {
    sub_1000137F8(a1 + 104);
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v17;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v18 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);

  v19 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);

  return a1;
}

uint64_t getEnumTagSinglePayload for SpeakButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeakButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeakButton()
{
  return &type metadata for SpeakButton;
}

uint64_t sub_100167A78(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216BB8, 1);
}

__n128 sub_100167A88@<Q0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[5];
  uint64_t v37;
  _OWORD v38[7];

  v31 = v1[1];
  v32 = *v1;
  v30 = v1[2];
  v3 = *((_QWORD *)v1 + 1);
  v29 = *((_QWORD *)v1 + 2);
  v28 = v1[32];
  v4 = *((_QWORD *)v1 + 6);
  v26 = *((_QWORD *)v1 + 3);
  v27 = *((_QWORD *)v1 + 5);
  v5 = *((_QWORD *)v1 + 7);
  v6 = *((_QWORD *)v1 + 8);
  v23 = *((_QWORD *)v1 + 9);
  v33 = *((_QWORD *)v1 + 11);
  v7 = *((_QWORD *)v1 + 14);
  v34 = *((_QWORD *)v1 + 13);
  v35 = *((_QWORD *)v1 + 10);
  v8 = *((_QWORD *)v1 + 15);
  v21 = *((_QWORD *)v1 + 17);
  v22 = *((_QWORD *)v1 + 16);
  v19 = *((_QWORD *)v1 + 19);
  v20 = *((_QWORD *)v1 + 18);
  v9 = *((_QWORD *)v1 + 21);
  v18 = *((_QWORD *)v1 + 20);
  v24 = *((_QWORD *)v1 + 12);
  v10 = (void *)*((_QWORD *)v1 + 22);
  v25 = (void *)*((_QWORD *)v1 + 23);
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  swift_bridgeObjectRetain(v26);
  swift_retain(v4);
  swift_bridgeObjectRetain(v3);
  sub_100016244(v5, v6);
  sub_1000161E0(v34, v7, v8, v22, v21, v20, v19, v18, v9, v10, v25);
  sub_100016244(v23, v35);
  swift_bridgeObjectRetain(v24);
  v11 = sub_100006DF4(&qword_10028AE38);
  State.init(wrappedValue:)(v38, v36, v11);
  result = (__n128)v38[0];
  v13 = v38[1];
  v14 = v38[2];
  v15 = v38[3];
  v16 = v38[4];
  v17 = v38[5];
  *(_BYTE *)a1 = v32;
  *(_BYTE *)(a1 + 1) = v31;
  *(_BYTE *)(a1 + 2) = v30;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v26;
  *(_BYTE *)(a1 + 32) = v28;
  *(_QWORD *)(a1 + 40) = v27;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v34;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v22;
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v23;
  *(_QWORD *)(a1 + 168) = v35;
  *(_QWORD *)(a1 + 176) = v33;
  *(_QWORD *)(a1 + 184) = v24;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 240) = v15;
  *(_OWORD *)(a1 + 256) = v16;
  *(_OWORD *)(a1 + 272) = v17;
  return result;
}

unint64_t sub_100167C98()
{
  unint64_t result;

  result = qword_100296150;
  if (!qword_100296150)
  {
    result = swift_getWitnessTable(&unk_1001F4504, &type metadata for SpeakButtonImpl);
    atomic_store(result, (unint64_t *)&qword_100296150);
  }
  return result;
}

uint64_t *sub_100167CDC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Locale(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = (uint64_t *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)v4 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[8];
    v20 = (uint64_t *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = *v21;
    swift_bridgeObjectRetain(v15);
    swift_retain(v18);
    if (v22)
    {
      v23 = v21[1];
      *v20 = v22;
      v20[1] = v23;
      swift_retain(v23);
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
  }
  return v4;
}

uint64_t sub_100167DD0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  result = swift_release(*(_QWORD *)(a1 + a2[7] + 8));
  v7 = (_QWORD *)(a1 + a2[8]);
  if (*v7)
    return swift_release(v7[1]);
  return result;
}

_BYTE *sub_100167E60(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = (uint64_t *)&a2[v18];
  v21 = *v20;
  swift_bridgeObjectRetain(v14);
  swift_retain(v17);
  if (v21)
  {
    v22 = v20[1];
    *v19 = v21;
    v19[1] = v22;
    swift_retain(v22);
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  return a1;
}

_BYTE *sub_100167F28(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v17[1];
  v19 = v16[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)&a1[v20];
  v24 = *(_QWORD *)&a2[v20];
  if (!v23)
  {
    if (v24)
    {
      v27 = *((_QWORD *)v22 + 1);
      *v21 = v24;
      v21[1] = v27;
      swift_retain(v27);
      return a1;
    }
LABEL_7:
    *(_OWORD *)v21 = *(_OWORD *)v22;
    return a1;
  }
  if (!v24)
  {
    swift_release(v21[1]);
    goto LABEL_7;
  }
  v25 = *((_QWORD *)v22 + 1);
  v26 = v21[1];
  *v21 = v24;
  v21[1] = v25;
  swift_retain(v25);
  swift_release(v26);
  return a1;
}

_BYTE *sub_100168040(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[8];
  v12 = &a1[v11];
  v13 = (uint64_t *)&a2[v11];
  v14 = *v13;
  if (*v13)
  {
    v15 = v13[1];
    *v12 = v14;
    v12[1] = v15;
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  return a1;
}

_BYTE *sub_1001680E8(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = *(_QWORD *)&a1[v16 + 8];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  swift_release(v17);
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = (uint64_t *)&a2[v18];
  v21 = *(_QWORD *)&a1[v18];
  v22 = *v20;
  if (!v21)
  {
    if (v22)
    {
      v25 = v20[1];
      *v19 = v22;
      v19[1] = v25;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    return a1;
  }
  if (!v22)
  {
    swift_release(v19[1]);
    goto LABEL_7;
  }
  v23 = v20[1];
  v24 = v19[1];
  *v19 = v22;
  v19[1] = v23;
  swift_release(v24);
  return a1;
}

uint64_t sub_1001681D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001681E4);
}

uint64_t sub_1001681E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100168268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100168274);
}

uint64_t sub_100168274(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SpeakButtonConfiguration(uint64_t a1)
{
  uint64_t result;

  result = qword_1002961B0;
  if (!qword_1002961B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SpeakButtonConfiguration);
  return result;
}

uint64_t sub_100168330(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1001F44A0;
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1001F44B8;
    v4[3] = (char *)&value witness table for () + 64;
    v4[4] = &unk_1001F44D0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for SpeakButtonImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 56))
    swift_release(*(_QWORD *)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));

  }
  if (*(_QWORD *)(a1 + 160))
    swift_release(*(_QWORD *)(a1 + 168));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 184));
  v3 = *(_QWORD *)(a1 + 200);
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 216));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 232));

  }
  return swift_release(*(_QWORD *)(a1 + 280));
}

uint64_t initializeWithCopy for SpeakButtonImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v9 = (_OWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v10;
    swift_retain(v10);
    v11 = *(_QWORD *)(a2 + 80);
    if (v11)
    {
LABEL_3:
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v11;
      v12 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v12;
      v13 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v13;
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      v14 = *(void **)(a2 + 144);
      v15 = *(void **)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v14;
      *(_QWORD *)(a1 + 152) = v15;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      v16 = v14;
      v17 = v15;
      goto LABEL_6;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v9;
    v11 = *(_QWORD *)(a2 + 80);
    if (v11)
      goto LABEL_3;
  }
  v18 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v18;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v19 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v19;
LABEL_6:
  v20 = *(_QWORD *)(a2 + 160);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v20;
    *(_QWORD *)(a1 + 168) = v21;
    swift_retain(v21);
  }
  else
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  v22 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v22;
  v23 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v22);
  if (v23)
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v23;
    v24 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v24;
    v25 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = v25;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    v26 = *(void **)(a2 + 264);
    v27 = *(void **)(a2 + 272);
    *(_QWORD *)(a1 + 264) = v26;
    *(_QWORD *)(a1 + 272) = v27;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v28 = v26;
    v29 = v27;
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v30;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    v31 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v31;
  }
  v32 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v32;
  swift_retain(v32);
  return a1;
}

uint64_t assignWithCopy for SpeakButtonImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = v9;
      swift_retain(v9);
      swift_release(v10);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 64));
  }
  else if (v8)
  {
    v11 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v11;
    swift_retain(v11);
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_8:
  v12 = (_OWORD *)(a1 + 72);
  v13 = (_OWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v15 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v16 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v17 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      v18 = *(void **)(a2 + 144);
      v19 = *(void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v18;
      v20 = v18;

      v21 = *(void **)(a2 + 152);
      v22 = *(void **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v21;
      v23 = v21;

    }
    else
    {
      sub_1000137F8(a1 + 72);
      v31 = *(_OWORD *)(a2 + 88);
      *v12 = *v13;
      *(_OWORD *)(a1 + 88) = v31;
      v33 = *(_OWORD *)(a2 + 120);
      v32 = *(_OWORD *)(a2 + 136);
      v34 = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 120) = v33;
      *(_OWORD *)(a1 + 136) = v32;
      *(_OWORD *)(a1 + 104) = v34;
    }
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v24 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v25 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v25;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v26 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v26;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    v27 = *(void **)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v27;
    v28 = *(void **)(a2 + 152);
    *(_QWORD *)(a1 + 152) = v28;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    v29 = v27;
    v30 = v28;
  }
  else
  {
    v35 = *(_OWORD *)(a2 + 88);
    *v12 = *v13;
    *(_OWORD *)(a1 + 88) = v35;
    v36 = *(_OWORD *)(a2 + 104);
    v37 = *(_OWORD *)(a2 + 120);
    v38 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v37;
    *(_OWORD *)(a1 + 136) = v38;
    *(_OWORD *)(a1 + 104) = v36;
  }
  v39 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v39)
    {
      v40 = *(_QWORD *)(a2 + 168);
      v41 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 160) = v39;
      *(_QWORD *)(a1 + 168) = v40;
      swift_retain(v40);
      swift_release(v41);
      goto LABEL_22;
    }
    swift_release(*(_QWORD *)(a1 + 168));
  }
  else if (v39)
  {
    v42 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v39;
    *(_QWORD *)(a1 + 168) = v42;
    swift_retain(v42);
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_22:
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v43 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  v44 = (_OWORD *)(a1 + 192);
  v45 = (_OWORD *)(a2 + 192);
  v46 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v46)
    {
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v47 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 200) = v47;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      v48 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v48;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v49 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v49;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      v50 = *(void **)(a2 + 264);
      v51 = *(void **)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v50;
      v52 = v50;

      v53 = *(void **)(a2 + 272);
      v54 = *(void **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v53;
      v55 = v53;

    }
    else
    {
      sub_1000137F8(a1 + 192);
      v63 = *(_OWORD *)(a2 + 208);
      *v44 = *v45;
      *(_OWORD *)(a1 + 208) = v63;
      v65 = *(_OWORD *)(a2 + 240);
      v64 = *(_OWORD *)(a2 + 256);
      v66 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v65;
      *(_OWORD *)(a1 + 256) = v64;
      *(_OWORD *)(a1 + 224) = v66;
    }
  }
  else if (v46)
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v56 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v56;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v57 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v57;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v58 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v58;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    v59 = *(void **)(a2 + 264);
    *(_QWORD *)(a1 + 264) = v59;
    v60 = *(void **)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v60;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v58);
    v61 = v59;
    v62 = v60;
  }
  else
  {
    v67 = *(_OWORD *)(a2 + 208);
    *v44 = *v45;
    *(_OWORD *)(a1 + 208) = v67;
    v68 = *(_OWORD *)(a2 + 224);
    v69 = *(_OWORD *)(a2 + 240);
    v70 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v69;
    *(_OWORD *)(a1 + 256) = v70;
    *(_OWORD *)(a1 + 224) = v68;
  }
  v71 = *(_QWORD *)(a1 + 280);
  v72 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v72;
  swift_retain(v72);
  swift_release(v71);
  return a1;
}

void *initializeWithTake for SpeakButtonImpl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for SpeakButtonImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 64);
      v8 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 64) = v7;
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 64));
  }
  else if (v6)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v9;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_8:
  if (*(_QWORD *)(a1 + 80))
  {
    v10 = *(_QWORD *)(a2 + 80);
    if (v10)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v10;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v11;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v12;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      v13 = *(void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);

      v14 = *(void **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);

      goto LABEL_13;
    }
    sub_1000137F8(a1 + 72);
  }
  v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v16 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v16;
LABEL_13:
  v17 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v17)
    {
      v18 = *(_QWORD *)(a2 + 168);
      v19 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 160) = v17;
      *(_QWORD *)(a1 + 168) = v18;
      swift_release(v19);
      goto LABEL_20;
    }
    swift_release(*(_QWORD *)(a1 + 168));
  }
  else if (v17)
  {
    v20 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v17;
    *(_QWORD *)(a1 + 168) = v20;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_20:
  v21 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v21;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 200))
  {
LABEL_24:
    v27 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v27;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    v28 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v28;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(a2 + 200);
  if (!v22)
  {
    sub_1000137F8(a1 + 192);
    goto LABEL_24;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v23;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v24;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v25 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

  v26 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);

LABEL_25:
  v29 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_release(v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeakButtonImpl(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeakButtonImpl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeakButtonImpl()
{
  return &type metadata for SpeakButtonImpl;
}

uint64_t sub_100168E58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216C24, 1);
}

uint64_t sub_100168E68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;

  v28 = a1;
  v2 = sub_100006DF4(&qword_1002961F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_100296200);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006DF4(&qword_100296208);
  v27 = *(_QWORD *)(v26 - 8);
  v8 = __chkstk_darwin(v26);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v4 + 1) = 0x4018000000000000;
  v4[16] = 0;
  v11 = sub_100006DF4(&qword_100296210);
  sub_100169264((unsigned __int8 *)v1, (uint64_t)&v4[*(int *)(v11 + 44)]);
  v12 = swift_allocObject(&unk_10026EA68, 304, 7);
  memcpy((void *)(v12 + 16), (const void *)v1, 0x120uLL);
  sub_10000B074((uint64_t)v4, (uint64_t)v7, &qword_1002961F8);
  v13 = (uint64_t (**)())&v7[*(int *)(v5 + 36)];
  *v13 = sub_10016AC80;
  v13[1] = (uint64_t (*)())v12;
  v13[2] = 0;
  v13[3] = 0;
  sub_10016AC98(v1);
  sub_10000A020((uint64_t)v4, &qword_1002961F8);
  v14 = *(_OWORD *)(v1 + 240);
  v32 = *(_OWORD *)(v1 + 224);
  v33 = v14;
  v15 = *(_OWORD *)(v1 + 272);
  v34 = *(_OWORD *)(v1 + 256);
  v35 = v15;
  v16 = *(_OWORD *)(v1 + 208);
  v30 = *(_OWORD *)(v1 + 192);
  v31 = v16;
  sub_100006DF4(&qword_10028AE98);
  State.wrappedValue.getter(&v36);
  v30 = v36;
  v31 = v37;
  v32 = v38;
  v33 = v39;
  v34 = v40;
  *(_QWORD *)&v35 = v41;
  v17 = swift_allocObject(&unk_10026EA90, 304, 7);
  memcpy((void *)(v17 + 16), (const void *)v1, 0x120uLL);
  sub_10016AC98(v1);
  v18 = sub_100006DF4(&qword_10028AE38);
  v19 = sub_10016ADF8();
  v20 = sub_1000165A4(&qword_10028AE78, &qword_10028AE38, (void (*)(void))sub_100011760, (uint64_t)&protocol conformance descriptor for <A> A?);
  View.onChange<A>(of:initial:_:)(&v30, 0, sub_10016ADF0, v17, v5, v18, v19, v20);
  swift_release(v17);
  sub_10001613C(v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((void **)&v34 + 1), (void *)v35);
  sub_10000A020((uint64_t)v7, &qword_100296200);
  sub_1000110A4(v1 + 72, (uint64_t)&v30, &qword_10028AE38);
  sub_1000110A4((uint64_t)&v30, (uint64_t)&v36, &qword_10028AE38);
  v21 = swift_allocObject(&unk_10026EAB8, 304, 7);
  memcpy((void *)(v21 + 16), (const void *)v1, 0x120uLL);
  sub_10016AC98(v1);
  sub_100167168((uint64_t)&v30);
  v29[0] = v5;
  v29[1] = v18;
  v29[2] = v19;
  v29[3] = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v29, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v23 = v26;
  View.onChange<A>(of:initial:_:)(&v36, 0, sub_10016B2EC, v21, v26, v18, OpaqueTypeConformance2, v20);
  swift_release(v21);
  sub_10001613C(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39, *((uint64_t *)&v39 + 1), v40, *((void **)&v40 + 1), v41);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v10, v23);
}

uint64_t sub_100169264@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  ValueMetadata *v47;
  ValueMetadata *v48;
  uint64_t v49;
  uint64_t v50;
  ValueMetadata *v51;
  uint64_t OpaqueTypeConformance2;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (**v85)(char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  ValueMetadata *v91;
  unint64_t v92;
  ValueMetadata *v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (**v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char v152[8];
  unsigned __int8 *v153;
  char v154[8];
  unsigned __int8 *v155;
  _QWORD v156[4];
  ValueMetadata *v157;
  ValueMetadata *v158;
  uint64_t v159;
  unint64_t v160;
  ValueMetadata *v161;

  v150 = a2;
  v123 = type metadata accessor for DynamicTypeSize(0);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v120 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100006DF4(&qword_100294E18);
  v126 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v125 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100006DF4(&qword_100296228);
  __chkstk_darwin(v122);
  v127 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100006DF4(&qword_100296230);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v124 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100296238);
  v8 = __chkstk_darwin(v7);
  v149 = (uint64_t)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v148 = (uint64_t)&v120 - v10;
  v142 = type metadata accessor for AccessibilityTraits(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v140 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028E9C8);
  __chkstk_darwin(v12);
  v14 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ButtonMenuStyle(0);
  v145 = *(void (***)(char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_100296240);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100006DF4(&qword_100296248);
  v132 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v23 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100006DF4(&qword_100296250);
  v134 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v151 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100006DF4(&qword_100296258);
  v25 = __chkstk_darwin(v136);
  v133 = (char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v135 = (char *)&v120 - v28;
  __chkstk_darwin(v27);
  v139 = (char *)&v120 - v29;
  v138 = sub_100006DF4(&qword_100296260);
  v30 = __chkstk_darwin(v138);
  v144 = (uint64_t)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v137 = (uint64_t)&v120 - v33;
  __chkstk_darwin(v32);
  v143 = (uint64_t)&v120 - v34;
  v155 = a1;
  v153 = a1;
  v35 = swift_allocObject(&unk_10026EB08, 304, 7);
  memcpy((void *)(v35 + 16), a1, 0x120uLL);
  sub_10016AC98((uint64_t)a1);
  v36 = sub_100006DF4(&qword_100296268);
  v37 = sub_10016AF84();
  v38 = Menu.init(content:label:primaryAction:)(sub_10016AEAC, v154, sub_10016AEB4, v152, sub_10016AF7C, v35, &type metadata for Image, v36, &protocol witness table for Image, v37);
  ButtonMenuStyle.init()(v38);
  v39 = sub_100012334(&qword_100296290, &qword_100296240, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v40 = sub_100007D5C(&qword_100296298, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
  v130 = v15;
  View.menuStyle<A>(_:)(v17, v18, v15, v39, v40);
  v145[1](v17, v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v145 = (void (**)(char *, uint64_t))a1;
  LODWORD(v19) = *a1;
  sub_10000A05C(0, &qword_1002962A0, NSTimer_ptr);
  v41 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v42 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v14, 1, 1, v42);
  v43 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v41, NSRunLoopCommonModes, v14, 1.0);

  sub_10000A020((uint64_t)v14, &qword_10028E9C8);
  v157 = (ValueMetadata *)v43;
  v44 = type metadata accessor for NSTimer.TimerPublisher(0);
  v45 = sub_100007D5C(&qword_1002962A8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v46 = ConnectablePublisher.autoconnect()(v44, v45);
  swift_release(v43);
  v156[0] = 0;
  State.init(wrappedValue:)(&v157, v156, &type metadata for Int);
  v48 = v157;
  v47 = v158;
  v156[0] = v46;
  v49 = sub_100006DF4(&qword_1002962B0);
  State.init(wrappedValue:)(&v157, v156, v49);
  v50 = (uint64_t)v157;
  v51 = v158;
  LOBYTE(v157) = v19;
  v158 = v48;
  v159 = (uint64_t)v47;
  v160 = v50;
  v161 = v51;
  v156[0] = v18;
  v156[1] = v130;
  v156[2] = v39;
  v156[3] = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v156, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
  v53 = sub_10016B078();
  v54 = v131;
  View.buttonStyle<A>(_:)(&v157, v131, &type metadata for SpeakButtonStyle, OpaqueTypeConformance2, v53);
  v55 = v54;
  swift_release(v50);
  swift_release(v47);
  v56 = swift_release(v51);
  (*(void (**)(char *, uint64_t, __n128))(v132 + 8))(v23, v54, v56);
  if ((_DWORD)v19 == 1)
  {
    LocalizedStringKey.init(stringLiteral:)(0x4F54535F59313141, 0xEF454C5449545F50);
    v58 = Text.init(_:tableName:bundle:comment:)();
    v60 = v59;
    v62 = v61;
    v63 = 0x74747542706F7473;
    v64 = 0xEA00000000006E6FLL;
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x8000000100200200);
    v58 = Text.init(_:tableName:bundle:comment:)();
    v60 = v65;
    v62 = v66;
    v63 = 0x75426E657473696CLL;
    v64 = 0xEC0000006E6F7474;
  }
  v67 = v129;
  v68 = v57 & 1;
  v157 = (ValueMetadata *)v55;
  v158 = &type metadata for SpeakButtonStyle;
  v159 = OpaqueTypeConformance2;
  v160 = v53;
  v69 = swift_getOpaqueTypeConformance2(&v157, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v70 = (uint64_t)v133;
  v71 = v151;
  View.accessibility(label:)(v58, v60, v68, v62, v67, v69);
  sub_10001B9E8(v58, v60, v68);
  v72 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v134 + 8))(v71, v67, v72);
  v73 = (uint64_t)v135;
  v74 = v136;
  ModifiedContent<>.accessibilityIdentifier(_:)(v63, v64, v136);
  swift_bridgeObjectRelease();
  sub_10000A020(v70, &qword_100296258);
  v75 = sub_100006DF4(&qword_10028B1A0);
  v76 = v141;
  v77 = swift_allocObject(v75, ((*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80))+ *(_QWORD *)(v141 + 72), *(unsigned __int8 *)(v141 + 80) | 7);
  *(_OWORD *)(v77 + 16) = xmmword_1001E64F0;
  static AccessibilityTraits.startsMediaSession.getter(v77);
  v157 = (ValueMetadata *)v77;
  v78 = sub_100007D5C(&qword_10028B1A8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v79 = sub_100006DF4(&qword_10028B1B0);
  v80 = sub_100012334(&qword_10028B1B8, &qword_10028B1B0, (uint64_t)&protocol conformance descriptor for [A]);
  v81 = v140;
  v82 = v79;
  v83 = v142;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v157, v82, v80, v142, v78);
  v84 = (uint64_t)v139;
  ModifiedContent<>.accessibility(addTraits:)(v81, v74);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v81, v83);
  sub_10000A020(v73, &qword_100296258);
  v85 = v145;
  LOBYTE(v83) = *((_BYTE *)v145 + 1);
  KeyPath = swift_getKeyPath(&unk_1001F4558);
  v87 = swift_allocObject(&unk_10026EB30, 17, 7);
  *(_BYTE *)(v87 + 16) = v83;
  v88 = v137;
  sub_10000B074(v84, v137, &qword_100296258);
  v89 = (uint64_t *)(v88 + *(int *)(v138 + 36));
  *v89 = KeyPath;
  v89[1] = (uint64_t)sub_1000489B4;
  v89[2] = v87;
  sub_10000A020(v84, &qword_100296258);
  v90 = v143;
  sub_1000110A4(v88, v143, &qword_100296260);
  v91 = (ValueMetadata *)v85[3];
  if (v91)
  {
    v157 = (ValueMetadata *)v85[2];
    v158 = v91;
    v92 = sub_10000B030();
    swift_bridgeObjectRetain(v91);
    v157 = (ValueMetadata *)Text.init<A>(_:)(&v157, &type metadata for String, v92);
    v158 = v93;
    LOBYTE(v159) = v94 & 1;
    v160 = v95;
    v96 = v121;
    v97 = v120;
    v98 = v123;
    (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v120, enum case for DynamicTypeSize.small(_:), v123);
    v99 = v125;
    View.dynamicTypeSize(_:)(v97, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
    sub_10001B9E8((uint64_t)v157, (uint64_t)v158, v159);
    v100 = swift_bridgeObjectRelease();
    v101 = static Font.caption.getter(v100);
    v102 = swift_getKeyPath(&unk_1001F4588);
    v103 = v126;
    v104 = (uint64_t)v127;
    v105 = v128;
    (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v127, v99, v128);
    v106 = (uint64_t *)(v104 + *(int *)(v122 + 36));
    *v106 = v102;
    v106[1] = v101;
    v107 = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v99, v105);
    v108 = static Color.translateAccentColor.getter(v107);
    v109 = swift_getKeyPath(&unk_1001F45B8);
    v110 = v124;
    sub_10000B074(v104, v124, &qword_100296228);
    v111 = v147;
    v112 = (uint64_t *)(v110 + *(int *)(v147 + 36));
    *v112 = v109;
    v112[1] = v108;
    sub_10000A020(v104, &qword_100296228);
    v113 = v148;
    sub_1000110A4(v110, v148, &qword_100296230);
    v114 = 0;
  }
  else
  {
    v113 = v148;
    v111 = v147;
    v114 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v113, v114, 1, v111);
  v115 = v144;
  sub_10000B074(v90, v144, &qword_100296260);
  v116 = v149;
  sub_10000B074(v113, v149, &qword_100296238);
  v117 = v150;
  sub_10000B074(v115, v150, &qword_100296260);
  v118 = sub_100006DF4(&qword_1002962C0);
  sub_10000B074(v116, v117 + *(int *)(v118 + 48), &qword_100296238);
  sub_10000A020(v113, &qword_100296238);
  sub_10000A020(v90, &qword_100296260);
  sub_10000A020(v116, &qword_100296238);
  return sub_10000A020(v115, &qword_100296260);
}

uint64_t sub_100169FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[4];
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[7];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v4 = type metadata accessor for InlinePickerStyle(0);
  v59 = *(_QWORD *)(v4 - 8);
  v60 = v4;
  __chkstk_darwin(v4);
  v58 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MenuOrder(0);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100006DF4(&qword_100296280);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_100296278);
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_1002962C8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v52 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_OWORD *)(a1 + 240);
  v18 = *(_OWORD *)(a1 + 208);
  v70 = *(_OWORD *)(a1 + 224);
  v71 = v17;
  v19 = *(_OWORD *)(a1 + 240);
  v20 = *(_OWORD *)(a1 + 272);
  v72 = *(_OWORD *)(a1 + 256);
  v73 = v20;
  v21 = *(_OWORD *)(a1 + 208);
  v68 = *(_OWORD *)(a1 + 192);
  v69 = v21;
  v67[2] = v70;
  v67[3] = v19;
  v22 = *(_OWORD *)(a1 + 272);
  v67[4] = v72;
  v67[5] = v22;
  v67[0] = v68;
  v67[1] = v18;
  v23 = sub_100006DF4(&qword_10028AE98);
  State.wrappedValue.getter(&v61);
  v24 = *((_QWORD *)&v61 + 1);
  sub_10001613C(v61, *((uint64_t *)&v61 + 1), v62, *((uint64_t *)&v62 + 1), v63, *((uint64_t *)&v63 + 1), v64, *((uint64_t *)&v64 + 1), v65, *((void **)&v65 + 1), (void *)v66);
  if (v24 && (*(_BYTE *)(a1 + 2) & 1) != 0)
  {
    v26 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
    v48 = v27;
    v49 = v26;
    v46 = v28;
    v47 = v29;
    v63 = v70;
    v64 = v71;
    v65 = v72;
    v66 = v73;
    v61 = v68;
    v62 = v69;
    v30 = State.projectedValue.getter(v67, v23);
    v45 = &v43;
    __chkstk_darwin(v30);
    v44 = sub_100006DF4(&qword_10028AE38);
    v50 = a2;
    v31 = sub_100006DF4(&qword_1002962D0);
    v42[1] = sub_1000165A4(&qword_10028AF58, &qword_10028AE38, (void (*)(void))sub_100016608, (uint64_t)&protocol conformance descriptor for <A> A?);
    v42[2] = sub_1000165A4(&qword_1002962D8, &qword_1002962D0, (void (*)(void))sub_10016B104, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    v42[0] = v31;
    v32 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _OWORD *, uint64_t (*)(), _QWORD *, uint64_t))Picker<>.init(_:selection:content:))(v49, v48, v46 & 1, v47, v67, sub_10016B0FC, v42, v44);
    static MenuOrder.fixed.getter(v32);
    v33 = sub_100012334(&qword_100296288, &qword_100296280, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    v34 = v53;
    View.menuOrder(_:)(v8, v53, v33);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v55);
    v35 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v10, v34);
    v36 = v58;
    InlinePickerStyle.init()(v35);
    *(_QWORD *)&v67[0] = v34;
    *((_QWORD *)&v67[0] + 1) = v33;
    a2 = v50;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v67, &opaque type descriptor for <<opaque return type of View.menuOrder(_:)>>, 1);
    v38 = v52;
    v39 = v57;
    v40 = v60;
    View.pickerStyle<A>(_:)(v36, v57, v60, OpaqueTypeConformance2, &protocol witness table for InlinePickerStyle);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v40);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v39);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v38, v14);
    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, v25, 1, v14);
}

uint64_t sub_10016A438(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001F45F0);
  swift_bridgeObjectRetain(v8);
  v2 = sub_100006DF4(&qword_10028AFD0);
  v3 = sub_100006DF4(&qword_1002962E8);
  v4 = sub_100012334(&qword_10028AFC8, &qword_10028AFD0, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = sub_100016608();
  v6 = sub_10016B104();
  return ForEach<>.init(_:id:content:)(&v8, KeyPath, sub_10016A508, 0, v2, v3, v4, v5, v6);
}

uint64_t sub_10016A508@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  __n128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];

  v48 = a2;
  v44 = sub_100006DF4(&qword_1002962F8);
  __chkstk_darwin(v44);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028AB30);
  v6 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  v47 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = a1[1];
  v12 = a1[2];
  v11 = a1[3];
  v13 = a1[4];
  v14 = a1[5];
  v41 = a1[6];
  v42 = v9;
  v15 = a1[7];
  v39 = *((unsigned __int8 *)a1 + 64);
  v40 = v15;
  v16 = (void *)a1[10];
  v37 = (void *)a1[9];
  v38 = v16;
  v49[0] = v12;
  v49[1] = v11;
  v35 = v12;
  v17 = sub_10000B030();
  swift_bridgeObjectRetain(v11);
  v18 = swift_bridgeObjectRetain(v14);
  v45 = v8;
  v36 = v13;
  Label<>.init<A>(_:systemImage:)(v49, v13, v14, &type metadata for String, v17, v18);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
  v19 = &v4[*(int *)(v44 + 36)];
  v20 = v4;
  v43 = v4;
  v21 = v42;
  *(_QWORD *)v19 = v42;
  *((_QWORD *)v19 + 1) = v10;
  *((_QWORD *)v19 + 2) = v12;
  *((_QWORD *)v19 + 3) = v11;
  *((_QWORD *)v19 + 4) = v13;
  *((_QWORD *)v19 + 5) = v14;
  v23 = v40;
  v22 = v41;
  *((_QWORD *)v19 + 6) = v41;
  *((_QWORD *)v19 + 7) = v23;
  v24 = v38;
  v25 = v39;
  v26 = v37;
  *((_QWORD *)v19 + 8) = v39;
  *((_QWORD *)v19 + 9) = v26;
  *((_QWORD *)v19 + 10) = v24;
  v27 = (uint64_t)v20;
  v28 = v48;
  sub_10000B074(v27, v48, &qword_1002962F8);
  v29 = (_QWORD *)(v28 + *(int *)(sub_100006DF4(&qword_1002962E8) + 36));
  *v29 = v21;
  v29[1] = v10;
  v29[2] = v35;
  v29[3] = v11;
  v29[4] = v36;
  v29[5] = v14;
  v29[6] = v22;
  v29[7] = v23;
  v29[8] = v25;
  v29[9] = v26;
  v29[10] = v24;
  swift_bridgeObjectRetain_n(v10, 2);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain_n(v14, 2);
  v30 = v26;
  v31 = v24;
  v32 = v30;
  v33 = v31;
  sub_10000A020((uint64_t)v43, &qword_1002962F8);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v45, v46);
}

uint64_t sub_10016A738@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = 0xE90000000000006CLL;
  v4 = 0x6C69662E706F7473;
  if ((*(_BYTE *)a1 & 1) == 0 && (*(_BYTE *)(a1 + 1) & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 176);
    v3 = *(_QWORD *)(a1 + 184);
    swift_bridgeObjectRetain(v3);
  }
  result = Image.init(systemName:)(v4, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10016A7A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v24 = v8;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v24 - v14;
  (*(void (**)(uint64_t))(a1 + 40))(v13);
  v16 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  static DispatchTime.now()();
  + infix(_:_:)(v12, 0.2);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  aBlock[4] = sub_10001B0C4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026EB48;
  v19 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100006DF4(&qword_10028AC30);
  v22 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v2, v20);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v7, v4, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v24);
}

void sub_10016AA20(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t);
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;

  v2 = *(_OWORD *)(a1 + 240);
  v26 = *(_OWORD *)(a1 + 224);
  v27 = v2;
  v3 = *(_OWORD *)(a1 + 272);
  v28 = *(_OWORD *)(a1 + 256);
  v29 = v3;
  v4 = *(_OWORD *)(a1 + 208);
  v24 = *(_OWORD *)(a1 + 192);
  v25 = v4;
  sub_100006DF4(&qword_10028AE98);
  State.wrappedValue.getter(&v30);
  v5 = v31;
  if (v31)
  {
    v6 = v30;
    v8 = v32;
    v7 = v33;
    v9 = v34;
    v10 = v35;
    v11 = v36;
    v22 = v38;
    v23 = v37;
    v20 = v40;
    v21 = v39;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    if (v12)
    {
      v14 = *(_QWORD *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 64);
      v16 = swift_allocObject(&unk_10026EAE0, 32, 7);
      v13 = v15;
      v17 = v16;
      v12 = v14;
      *(_QWORD *)(v17 + 16) = v14;
      *(_QWORD *)(v17 + 24) = v13;
      v18 = sub_10016AEA4;
    }
    else
    {
      v17 = 0;
      v18 = nullsub_1;
    }
    v19 = v18;
    *(_QWORD *)&v24 = v6;
    *((_QWORD *)&v24 + 1) = v5;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v7;
    *(_QWORD *)&v26 = v9;
    *((_QWORD *)&v26 + 1) = v10;
    *(_QWORD *)&v27 = v11;
    *((_QWORD *)&v27 + 1) = v23;
    LOBYTE(v28) = v22;
    *((_QWORD *)&v28 + 1) = v21;
    *(_QWORD *)&v29 = v20;
    sub_100016244(v12, v13);
    v19((uint64_t)&v24);
    swift_release(v17);
    sub_10001613C(v6, v5, v8, v7, v9, v10, v11, v23, v22, v21, v20);
  }
}

uint64_t sub_10016AB78(uint64_t a1)
{
  uint64_t result;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD v16[3];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v4 = *(void **)(a1 + 144);
    v3 = *(void **)(a1 + 152);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(_OWORD *)(a1 + 224);
    v8 = *(_OWORD *)(a1 + 256);
    v9 = *(_OWORD *)(a1 + 272);
    v25 = *(_OWORD *)(a1 + 240);
    v26 = v8;
    v27 = v9;
    v10 = *(_OWORD *)(a1 + 208);
    v22 = *(_OWORD *)(a1 + 192);
    v23 = v10;
    v24 = v7;
    v16[0] = v6;
    v16[1] = result;
    v16[2] = v5;
    v11 = *(_OWORD *)(a1 + 112);
    v17 = *(_OWORD *)(a1 + 96);
    v18 = v11;
    v19 = *(_OWORD *)(a1 + 128);
    v12 = v11;
    v20 = v4;
    v21 = v3;
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v12);
    v13 = v4;
    v14 = v3;
    v15 = sub_100006DF4(&qword_10028AE98);
    return State.wrappedValue.setter(v16, v15);
  }
  return result;
}

uint64_t sub_10016AC34@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v4[288];

  memcpy(v4, v1, sizeof(v4));
  return sub_100168E68(a1);
}

uint64_t sub_10016AC80()
{
  uint64_t v0;

  return sub_10016AB78(v0 + 16);
}

uint64_t sub_10016AC98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 136);
  v9 = *(void **)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 168);
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 200);
  v29 = *(_QWORD *)(a1 + 192);
  v26 = *(_QWORD *)(a1 + 216);
  v27 = *(_QWORD *)(a1 + 208);
  v24 = *(_QWORD *)(a1 + 232);
  v25 = *(_QWORD *)(a1 + 224);
  v22 = *(_QWORD *)(a1 + 248);
  v23 = *(_QWORD *)(a1 + 240);
  v18 = *(_OWORD *)(a1 + 256);
  v10 = *(void **)(a1 + 272);
  v30 = *(_QWORD *)(a1 + 280);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 24));
  swift_retain(v3);
  swift_bridgeObjectRetain(v2);
  sub_100016244(v4, v5);
  sub_1000161E0(v17, v16, v6, v7, v8, v15, v14, v13, v12, *((void **)&v12 + 1), v9);
  sub_100016244(v20, v19);
  swift_bridgeObjectRetain(v21);
  sub_1000161E0(v29, v28, v27, v26, v25, v24, v23, v22, v18, *((void **)&v18 + 1), v10);
  swift_retain(v30);
  return a1;
}

void sub_10016ADF0()
{
  uint64_t v0;

  sub_10016AA20(v0 + 16);
}

unint64_t sub_10016ADF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296218;
  if (!qword_100296218)
  {
    v1 = sub_1000070BC(&qword_100296200);
    sub_100012334(&qword_100296220, &qword_1002961F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100296218);
  }
  return result;
}

uint64_t sub_10016AE80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016AEA4(uint64_t a1)
{
  uint64_t v1;

  return sub_100015D18(a1, *(uint64_t (**)(_OWORD *))(v1 + 16));
}

uint64_t sub_10016AEAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100169FCC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10016AEB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10016A738(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10016AEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 64));
  if (*(_QWORD *)(v0 + 72))
    swift_release(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));

  }
  if (*(_QWORD *)(v0 + 176))
    swift_release(*(_QWORD *)(v0 + 184));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  v2 = *(_QWORD *)(v0 + 216);
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));

  }
  swift_release(*(_QWORD *)(v0 + 296));
  return swift_deallocObject(v0, 304, 7);
}

uint64_t sub_10016AF7C()
{
  uint64_t v0;

  return sub_10016A7A0(v0 + 16);
}

unint64_t sub_10016AF84()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  result = qword_100296270;
  if (!qword_100296270)
  {
    v1 = sub_1000070BC(&qword_100296268);
    v2 = sub_1000070BC(&qword_100296278);
    v3 = type metadata accessor for InlinePickerStyle(255);
    v5 = sub_1000070BC(&qword_100296280);
    v6 = sub_100012334(&qword_100296288, &qword_100296280, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.menuOrder(_:)>>, 1);
    v5 = v2;
    v6 = v3;
    v7 = OpaqueTypeConformance2;
    v8 = &protocol witness table for InlinePickerStyle;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100296270);
  }
  return result;
}

unint64_t sub_10016B078()
{
  unint64_t result;

  result = qword_1002962B8;
  if (!qword_1002962B8)
  {
    result = swift_getWitnessTable(&unk_1001F4624, &type metadata for SpeakButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1002962B8);
  }
  return result;
}

uint64_t sub_10016B0C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10016B0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016B0F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10016B0FC()
{
  uint64_t v0;

  return sub_10016A438(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10016B104()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002962E0;
  if (!qword_1002962E0)
  {
    v1 = sub_1000070BC(&qword_1002962E8);
    sub_10016B188();
    sub_100012334(&qword_10028AFA0, &qword_10028AFA8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002962E0);
  }
  return result;
}

unint64_t sub_10016B188()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002962F0;
  if (!qword_1002962F0)
  {
    v1 = sub_1000070BC(&qword_1002962F8);
    sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_100012334(&qword_10028AF90, &qword_10028AF98, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002962F0);
  }
  return result;
}

uint64_t sub_10016B224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v0 = sub_1000070BC(&qword_100296208);
  v1 = sub_1000070BC(&qword_10028AE38);
  v2 = sub_1000070BC(&qword_100296200);
  v3 = sub_10016ADF8();
  v4 = sub_1000165A4(&qword_10028AE78, &qword_10028AE38, (void (*)(void))sub_100011760, (uint64_t)&protocol conformance descriptor for <A> A?);
  v7 = v2;
  v8 = v1;
  v9 = v3;
  v10 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v7 = v0;
  v8 = v1;
  v9 = OpaqueTypeConformance2;
  v10 = v4;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t destroy for SpeakButtonStyle(_QWORD *a1)
{
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for SpeakButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for SpeakButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for SpeakButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeakButtonStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeakButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeakButtonStyle()
{
  return &type metadata for SpeakButtonStyle;
}

uint64_t sub_10016B4F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100216C68, 1);
}

void sub_10016B504()
{
  qword_100296300 = 0x4050000000000000;
}

double sub_10016B514()
{
  double result;

  if (qword_10028A4C8 != -1)
    swift_once(&qword_10028A4C8, sub_10016B504);
  result = *(double *)&qword_100296300 * 2.5;
  *(double *)&qword_1002AA520 = *(double *)&qword_100296300 * 2.5;
  return result;
}

uint64_t sub_10016B564@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  double (**v27)();
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v4 = sub_100006DF4(&qword_100296308);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100006DF4(&qword_100296310);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100296318);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Alignment.center.getter(v11);
  v6[1] = v14;
  v15 = sub_100006DF4(&qword_100296320);
  v16 = sub_10016B818((_BYTE *)v2, (uint64_t)v6 + *(int *)(v15 + 44));
  if (qword_10028A4C8 != -1)
    v16 = swift_once(&qword_10028A4C8, sub_10016B504);
  v17 = qword_100296300;
  v18 = static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(v31, v17, 0, v17, 0, v18, v19);
  sub_10000B074((uint64_t)v6, (uint64_t)v9, &qword_100296308);
  v20 = &v9[*(int *)(v7 + 36)];
  v21 = v31[1];
  *(_OWORD *)v20 = v31[0];
  *((_OWORD *)v20 + 1) = v21;
  *((_OWORD *)v20 + 2) = v31[2];
  sub_10000A020((uint64_t)v6, &qword_100296308);
  sub_10000B074((uint64_t)v9, (uint64_t)v13, &qword_100296310);
  v13[*(int *)(v10 + 36)] = 0;
  sub_10000A020((uint64_t)v9, &qword_100296310);
  v33 = *(_OWORD *)(v2 + 24);
  sub_1000110A4((uint64_t)&v33 + 8, (uint64_t)&v34, &qword_100296328);
  v22 = v33;
  v32 = v33;
  sub_100006DF4(&qword_100296330);
  State.wrappedValue.getter(&v30);
  v23 = v30;
  v32 = *(_OWORD *)(v2 + 8);
  v24 = swift_allocObject(&unk_10026EC58, 56, 7);
  v25 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 48) = *(_QWORD *)(v2 + 32);
  sub_10000B074((uint64_t)v13, a1, &qword_100296318);
  v26 = sub_100006DF4(&qword_100296338);
  *(_QWORD *)(a1 + *(int *)(v26 + 52)) = v23;
  v27 = (double (**)())(a1 + *(int *)(v26 + 56));
  *v27 = sub_10016C3FC;
  v27[1] = (double (*)())v24;
  sub_10001B1E0((uint64_t)&v32);
  swift_retain(v22);
  sub_100018680(&v34);
  return sub_10000A020((uint64_t)v13, &qword_100296318);
}

uint64_t sub_10016B818@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (**v71)();
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD v102[3];

  v101 = a2;
  v3 = type metadata accessor for DynamicTypeSize(0);
  v99 = *(_QWORD *)(v3 - 8);
  v100 = v3;
  __chkstk_darwin(v3);
  v98 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Image.Scale(0);
  v96 = *(_QWORD *)(v5 - 8);
  v97 = v5;
  __chkstk_darwin(v5);
  v95 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100006DF4(&qword_100296348);
  __chkstk_darwin(v81);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100006DF4(&qword_100296350);
  __chkstk_darwin(v85);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100006DF4(&qword_100296358);
  __chkstk_darwin(v86);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100006DF4(&qword_100296360);
  __chkstk_darwin(v88);
  v90 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_100296368);
  v92 = *(_QWORD *)(v15 - 8);
  v93 = v15;
  __chkstk_darwin(v15);
  v91 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100006DF4(&qword_100296370);
  v17 = __chkstk_darwin(v87);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v94 = (uint64_t)&v79 - v20;
  v21 = sub_100006DF4(&qword_100296378);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_100006DF4(&qword_100296380);
  v24 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100006DF4(&qword_100296388);
  v28 = __chkstk_darwin(v27);
  v89 = (uint64_t)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v79 - v31;
  if ((*a1 & 1) != 0)
  {
    *v23 = static Alignment.center.getter(v30);
    v23[1] = v34;
    v35 = sub_100006DF4(&qword_1002963B8);
    sub_10016BFCC((uint64_t)a1, (uint64_t)v23 + *(int *)(v35 + 44));
    sub_10000B074((uint64_t)v23, (uint64_t)v26, &qword_100296378);
    sub_10000A020((uint64_t)v23, &qword_100296378);
    sub_1000110A4((uint64_t)v26, (uint64_t)v32, &qword_100296380);
    v33 = 0;
  }
  else
  {
    v33 = 1;
  }
  v80 = v32;
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v32, v33, 1, v79);
  v37 = static Color.accentColor.getter(v36);
  v38 = v82;
  v39 = ButtonStyleConfiguration.label.getter(v37);
  v40 = static Color.accentColor.getter(v39);
  KeyPath = swift_getKeyPath(&unk_1001F4660);
  v42 = v83;
  v43 = v84;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v9, v38, v84);
  v44 = (uint64_t *)&v9[*(int *)(v81 + 36)];
  *v44 = KeyPath;
  v44[1] = v40;
  v45 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v38, v43);
  if (qword_10028A4C8 != -1)
    v45 = swift_once(&qword_10028A4C8, sub_10016B504);
  v46 = qword_100296300;
  v47 = static Alignment.center.getter(v45);
  _FrameLayout.init(width:height:alignment:)(v102, v46, 0, v46, 0, v47, v48);
  sub_10000B074((uint64_t)v9, (uint64_t)v11, &qword_100296348);
  v49 = &v11[*(int *)(v85 + 36)];
  v50 = v102[1];
  *(_OWORD *)v49 = v102[0];
  *((_OWORD *)v49 + 1) = v50;
  *((_OWORD *)v49 + 2) = v102[2];
  v51 = sub_10000A020((uint64_t)v9, &qword_100296348);
  v52 = static Font.title3.getter(v51);
  v53 = Font.bold()();
  swift_release(v52);
  v54 = swift_getKeyPath(&unk_1001F4690);
  sub_10000B074((uint64_t)v11, (uint64_t)v13, &qword_100296350);
  v55 = (uint64_t *)&v13[*(int *)(v86 + 36)];
  *v55 = v54;
  v55[1] = v53;
  sub_10000A020((uint64_t)v11, &qword_100296350);
  v57 = v95;
  v56 = v96;
  v58 = v97;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v95, enum case for Image.Scale.large(_:), v97);
  v59 = swift_getKeyPath(&unk_1001F46C0);
  v60 = v88;
  v61 = (uint64_t)v90;
  v62 = (uint64_t *)&v90[*(int *)(v88 + 36)];
  v63 = sub_100006DF4(&qword_10028BD28);
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))((char *)v62 + *(int *)(v63 + 28), v57, v58);
  *v62 = v59;
  sub_10000B074((uint64_t)v13, v61, &qword_100296358);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  sub_10000A020((uint64_t)v13, &qword_100296358);
  v65 = v98;
  v64 = v99;
  v66 = v100;
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v98, enum case for DynamicTypeSize.large(_:), v100);
  v67 = sub_10016C434();
  v68 = v91;
  View.dynamicTypeSize(_:)(v65, v60, v67);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
  sub_10000A020(v61, &qword_100296360);
  v70 = v92;
  v69 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v19, v68, v93);
  v71 = (uint64_t (**)())&v19[*(int *)(v87 + 36)];
  *v71 = sub_1000F4160;
  v71[1] = 0;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v69);
  v72 = v94;
  sub_1000110A4((uint64_t)v19, v94, &qword_100296370);
  v73 = (uint64_t)v80;
  v74 = v89;
  sub_10000B074((uint64_t)v80, v89, &qword_100296388);
  sub_10000B074(v72, (uint64_t)v19, &qword_100296370);
  v75 = v101;
  sub_10000B074(v74, v101, &qword_100296388);
  v76 = sub_100006DF4(&qword_1002963B0);
  v77 = v75 + *(int *)(v76 + 48);
  *(_QWORD *)v77 = v37;
  *(_WORD *)(v77 + 8) = 256;
  *(_QWORD *)(v77 + 16) = 0x3FC47AE147AE147BLL;
  sub_10000B074((uint64_t)v19, v75 + *(int *)(v76 + 64), &qword_100296370);
  swift_retain(v37);
  sub_10000A020(v72, &qword_100296370);
  sub_10000A020(v73, &qword_100296388);
  sub_10000A020((uint64_t)v19, &qword_100296370);
  swift_release(v37);
  return sub_10000A020(v74, &qword_100296388);
}

double sub_10016BFCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v4 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_1002963C0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v32 = (uint64_t)&v30 - v16;
  v33 = static Color.accentColor.getter(v15);
  v34 = *(_OWORD *)(a1 + 8);
  sub_100006DF4(&qword_10028F888);
  v17 = State.wrappedValue.getter(&v35);
  v31 = v35;
  v18 = static AnyTransition.identity.getter(v17);
  v19 = static UnitPoint.center.getter(v18);
  v21 = static AnyTransition.scale(scale:anchor:)(2.5, v19, v20);
  v22 = static AnyTransition.opacity.getter();
  v23 = AnyTransition.combined(with:)(v22, v21);
  swift_release(v21);
  swift_release(v22);
  v24 = static AnyTransition.asymmetric(insertion:removal:)(v18, v23);
  swift_release(v18);
  v25 = swift_release(v23);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v8 + 104))(v10, enum case for BlendMode.destinationOut(_:), v7, v25);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  sub_10016C62C((uint64_t)v6, (uint64_t)v14);
  sub_10016C670((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v26 = v32;
  sub_1000110A4((uint64_t)v14, v32, &qword_1002963C0);
  sub_10000B074(v26, (uint64_t)v14, &qword_1002963C0);
  v27 = v33;
  *(_QWORD *)a2 = v33;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = 0x3FB999999999999ALL;
  *(_QWORD *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v24;
  v28 = sub_100006DF4(&qword_1002963C8);
  sub_10000B074((uint64_t)v14, a2 + *(int *)(v28 + 48), &qword_1002963C0);
  swift_retain(v27);
  swift_retain(v24);
  sub_10000A020(v26, &qword_1002963C0);
  sub_10000A020((uint64_t)v14, &qword_1002963C0);
  swift_release(v24);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

double sub_10016C274()
{
  uint64_t v0;
  double result;

  v0 = static Animation.spring(response:dampingFraction:blendDuration:)(3.0, 1.0, 0.0);
  withAnimation<A>(_:_:)(v0, sub_10016C404);
  *(_QWORD *)&result = swift_release(v0).n128_u64[0];
  return result;
}

_QWORD *sub_10016C2E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)(a1 + 8);
  sub_1000110A4((uint64_t)&v6 + 8, (uint64_t)&v7, &qword_100296340);
  v4 = v6;
  sub_100018680(&v7);
  v1 = sub_100006DF4(&qword_10028F888);
  result = State.wrappedValue.getter(&v5);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = v6;
    v3 = v5 + 1;
    State.wrappedValue.setter(&v3, v1);
    return (_QWORD *)sub_10001B5BC((uint64_t)&v6);
  }
  return result;
}

uint64_t sub_10016C390@<X0>(uint64_t a1@<X8>)
{
  return sub_10016B564(a1);
}

uint64_t sub_10016C3C8()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

double sub_10016C3FC()
{
  return sub_10016C274();
}

_QWORD *sub_10016C404()
{
  uint64_t v0;

  return sub_10016C2E0(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10016C434()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296390;
  if (!qword_100296390)
  {
    v1 = sub_1000070BC(&qword_100296360);
    sub_10016C4B8();
    sub_100012334(&qword_10028BD50, &qword_10028BD28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100296390);
  }
  return result;
}

unint64_t sub_10016C4B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296398;
  if (!qword_100296398)
  {
    v1 = sub_1000070BC(&qword_100296358);
    sub_10016C53C();
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100296398);
  }
  return result;
}

unint64_t sub_10016C53C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002963A0;
  if (!qword_1002963A0)
  {
    v1 = sub_1000070BC(&qword_100296350);
    sub_10016C5A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002963A0);
  }
  return result;
}

unint64_t sub_10016C5A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002963A8;
  if (!qword_1002963A8)
  {
    v1 = sub_1000070BC(&qword_100296348);
    sub_10014AD0C();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002963A8);
  }
  return result;
}

uint64_t sub_10016C62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016C670(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016C6AC()
{
  return sub_100012334((unint64_t *)&unk_1002963D0, &qword_100296338, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
}

id sub_10016C6D8(void *a1, void *a2)
{
  _BYTE *v2;
  char *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  objc_super v16;

  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer] = 0;
  v2[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate] = 0;
  v5 = &v2[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate];
  *((_QWORD *)v5 + 1) = 0;
  swift_unknownObjectWeakInit(v5, 0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_translator] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_recordingHelper] = a2;
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for SpeechManager();
  v6 = a1;
  v7 = a2;
  v8 = objc_msgSendSuper2(&v16, "init");
  v9 = (void *)objc_opt_self(NSNotificationCenter);
  v10 = v8;
  v11 = objc_msgSend(v9, "defaultCenter", v16.receiver, v16.super_class);
  v12 = (void *)objc_opt_self(AVAudioSession);
  v13 = v10;
  v14 = objc_msgSend(v12, "sharedInstance");
  objc_msgSend(v11, "addObserver:selector:name:object:", v13, "handleAudioInterruptionWithNotification:", AVAudioSessionInterruptionNotification, v14);

  return v13;
}

uint64_t sub_10016C848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void *v22;
  id v23;
  Class isa;
  Class v25;
  id v26;
  id v27;
  NSString v28;
  id v29;
  void *v30;
  char v31;
  id v32;
  Class v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v13 = v12;
  v47 = a5;
  v48 = a8;
  v45 = a7;
  v46 = a6;
  v50 = a12;
  v51 = a11;
  v49 = a10;
  v14 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v12[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v12[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate]);
  if (Strong)
  {
    v19 = Strong;
    v20 = *((_QWORD *)v17 + 1);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(1, ObjectType, v20);
    swift_unknownObjectRelease(v19);
  }
  v22 = *(void **)&v13[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_translator];
  objc_msgSend(v22, "cleanup");
  v23 = objc_allocWithZone((Class)_LTSpeechTranslationRequest);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v25 = Locale._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v23, "initWithSourceLocale:targetLocale:", isa, v25);

  v27 = v26;
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "setSessionID:", v28);

  objc_msgSend(v27, "setCensorSpeech:", byte_1002AA518);
  sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v29 = v27;
  v30 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v29);
  v31 = NSUserDefaults.onDeviceOnly.getter();

  objc_msgSend(v29, "setForcedOfflineTranslation:", v31 & 1);
  objc_msgSend(v29, "setAutoEndpoint:", v45 & 1);
  objc_msgSend(v29, "setAutodetectLanguage:", v46 & 1);
  objc_msgSend(v29, "setEnableVAD:", v47 & 1);
  objc_msgSend(v29, "setForceSourceLocale:", v48 & 1);
  objc_msgSend(v29, "set_supportsGenderDisambiguation:", HIBYTE(a9) & 1);
  objc_msgSend(v29, "setSourceOrigin:", v49);
  objc_msgSend(v29, "setDelegate:", v13);
  v32 = v29;
  v33 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v32, "setLogIdentifier:", v33);

  v13[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate] = 0;
  objc_msgSend(v22, "translate:", v32);
  v34 = _s21SpeechResultContainerCMa();
  swift_allocObject(v34, 81, 7);
  v35 = v32;
  v36 = sub_1001709A0((uint64_t)v22, (uint64_t)v35);
  v37 = *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer];
  *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer] = v36;
  swift_release(v37);
  v38 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v16, 1, 1, v38);
  v39 = (_QWORD *)swift_allocObject(&unk_10026EE28, 56, 7);
  v39[2] = 0;
  v39[3] = 0;
  v39[4] = v13;
  v39[5] = v35;
  v39[6] = v51;
  v40 = v35;
  v41 = v13;
  v42 = sub_100049DC0((uint64_t)v16, (uint64_t)&unk_100296480, (uint64_t)v39);

  return swift_release(v42);
}

uint64_t sub_10016CBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = sub_100006DF4(&qword_100296488);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100296490);
  v6[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_100296498);
  v6[13] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[14] = v12;
  v6[15] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10016CCAC, 0, 0);
}

uint64_t sub_10016CCAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = v0[12];
  v12 = v0[11];
  v3 = v0[9];
  v2 = v0[10];
  v5 = v0[7];
  v4 = v0[8];
  v7 = v0[5];
  v6 = v0[6];
  v8 = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_recordingHelper);
  v9 = (_QWORD *)swift_task_alloc(48);
  v9[2] = v8;
  v9[3] = v6;
  v9[4] = v7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:), v5);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(&type metadata for Float, v3, sub_100170854, v9, &type metadata for Float);
  swift_task_dealloc(v9);
  AsyncThrowingStream.makeAsyncIterator()(v2);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v2);
  v0[16] = OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
  v10 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[17] = v10;
  *v10 = v0;
  v10[1] = sub_10016CDEC;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 19, 0, 0, v0[13], v0 + 2);
}

uint64_t sub_10016CDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 136));
  if (v0)
    v2 = sub_10016CFC0;
  else
    v2 = sub_10016CE50;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016CE50()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *v9;

  v1 = *(float *)(v0 + 152);
  if ((*(_BYTE *)(v0 + 156) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 128));
    if (Strong)
    {
      v6 = Strong;
      v7 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 128) + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, float))(v7 + 8))(ObjectType, v7, v1);
      swift_unknownObjectRelease(v6);
    }
    v9 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 144) = v9;
    *v9 = v0;
    v9[1] = sub_10016CF5C;
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 152, 0, 0, *(_QWORD *)(v0 + 104), v0 + 16);
  }
}

uint64_t sub_10016CF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 144));
  if (v0)
    v2 = sub_10016CFC0;
  else
    v2 = sub_10016CE50;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016CFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 16);
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA440);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error while listening: %@", v6, 0xCu);
    v9 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v10 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 32);

  Strong = swift_unknownObjectWeakLoadStrong(v11 + v10);
  if (Strong)
  {
    v13 = Strong;
    v14 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 128) + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v1, ObjectType, v14);
    swift_unknownObjectRelease(v13);
  }
  swift_errorRelease(v1);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10016D1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 16))(0, ObjectType, v5);
    swift_unknownObjectRelease(v4);
  }
  v7 = OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer);
  if (v8)
    objc_msgSend(*(id *)(v8 + 48), "endAudio");
  sub_100147478();
  v9 = *(_QWORD *)(v1 + v7);
  *(_QWORD *)(v1 + v7) = 0;
  swift_release(v9);
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_translator), "cleanup");
}

void sub_10016D284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *oslog;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[5];
  __int128 v46;
  uint64_t v47;
  __int128 v48[2];
  __int128 v49[2];
  __int128 v50[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer);
  if (v1)
  {
    v2 = v0;
    if (objc_msgSend(*(id *)(v1 + 48), "autodetectLanguage", swift_retain(v1).n128_f64[0]))
    {
      *(_BYTE *)(v1 + 56) = (*(_BYTE *)(v1 + 56) & 1) == 0;
    }
    else
    {
      if (qword_10028A468 != -1)
        swift_once(&qword_10028A468, sub_1001210B8);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA440);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cannot swap results because opposite locale results are not returned when autodetectLanguage is off", v11, 2u);
        swift_slowDealloc(v11, -1, -1);
      }

    }
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate) & 1) != 0)
    {
      sub_1001710D8(&v46);
      if (v47)
      {
        sub_10003E994(&v46, (uint64_t)v49);
        sub_10003E994(v48, (uint64_t)v50);
        sub_10003E994(v49, (uint64_t)v45);
        sub_10003E994(v50, (uint64_t)&v43);
        v12 = v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
        Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
        if (Strong)
        {
          v14 = Strong;
          v15 = *(_QWORD *)(v12 + 8);
          if (qword_10028A468 != -1)
            swift_once(&qword_10028A468, sub_1001210B8);
          v16 = type metadata accessor for Logger(0);
          v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA440);
          v18 = Logger.logObject.getter(v17);
          v19 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v18, v19))
          {
            v20 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v20 = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, v19, "Sending final result to delegate after swap", v20, 2u);
            swift_slowDealloc(v20, -1, -1);
          }

          ObjectType = swift_getObjectType(v14);
          (*(void (**)(_QWORD *, __int128 *, uint64_t, uint64_t))(v15 + 40))(v45, &v43, ObjectType, v15);
          swift_unknownObjectRelease(v14);
        }
        else
        {
          if (qword_10028A438 != -1)
            swift_once(&qword_10028A438, sub_100120FEC);
          v37 = type metadata accessor for Logger(0);
          v38 = sub_10000F66C(v37, (uint64_t)qword_1002AA3B0);
          v39 = Logger.logObject.getter(v38);
          v40 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v39, v40))
          {
            v41 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v41 = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, v40, "Cannot send result after swap because SpeechManagers's delegate doesn't exist", v41, 2u);
            swift_slowDealloc(v41, -1, -1);
          }

        }
        swift_release(v1);
        sub_100009C08(&v43);
        sub_100009C08(v45);
        return;
      }
      sub_10000A020((uint64_t)&v46, &qword_100296448);
    }
    sub_100171474((uint64_t)&v43);
    if (v44)
    {
      sub_10003E994(&v43, (uint64_t)v45);
      sub_100023AB0((uint64_t)v45, (uint64_t)&v46);
      sub_10017160C((uint64_t)v48);
      sub_100009C08(v45);
      sub_10003E994(&v46, (uint64_t)v49);
      sub_10005A9A0((uint64_t)v48, (uint64_t)v50);
      v22 = v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
      v23 = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)(v22 + 8);
        if (qword_10028A468 != -1)
          swift_once(&qword_10028A468, sub_1001210B8);
        v26 = type metadata accessor for Logger(0);
        v27 = sub_10000F66C(v26, (uint64_t)qword_1002AA440);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Sending partial result to delegate after swap", v30, 2u);
          swift_slowDealloc(v30, -1, -1);
        }

        v31 = swift_getObjectType(v24);
        (*(void (**)(__int128 *, __int128 *, uint64_t, uint64_t))(v25 + 32))(v49, v50, v31, v25);
        swift_unknownObjectRelease(v24);
      }
      else
      {
        if (qword_10028A438 != -1)
          swift_once(&qword_10028A438, sub_100120FEC);
        v32 = type metadata accessor for Logger(0);
        v33 = sub_10000F66C(v32, (uint64_t)qword_1002AA3B0);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Cannot send result after swap because SpeechManagers's delegate doesn't exist", v36, 2u);
          swift_slowDealloc(v36, -1, -1);
        }

      }
      swift_release(v1);
      sub_10000A020((uint64_t)v49, (uint64_t *)&unk_100296460);
    }
    else
    {
      sub_10000A020((uint64_t)&v43, (uint64_t *)&unk_100296450);
      swift_release(v1);
    }
  }
  else
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10000F66C(v3, (uint64_t)qword_1002AA440);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Cannot swap result locales because result container is nil", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
}

void sub_10016D8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[5];
  __int128 v29;
  __int128 v30;

  v2 = v1;
  v3 = Notification.userInfo.getter(a1);
  if (!v3)
    return;
  v4 = v3;
  v27[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionInterruptionTypeKey);
  v27[1] = v5;
  AnyHashable.init<A>(_:)(v28, v27, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v4 + 16) && (v6 = sub_1001A87EC((uint64_t)v28), (v7 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v29);
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)v28);
  if (!*((_QWORD *)&v30 + 1))
  {
    sub_10000A020((uint64_t)&v29, (uint64_t *)&unk_10028C0B0);
    return;
  }
  if ((swift_dynamicCast(v27, &v29, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) == 0)
    return;
  if (!v27[0])
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10000F66C(v19, (uint64_t)qword_1002AA440);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v22))
      goto LABEL_29;
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v24 = "Audio interruption ended";
    goto LABEL_28;
  }
  if (v27[0] != 1)
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10000F66C(v25, (uint64_t)qword_1002AA440);
    v21 = Logger.logObject.getter(v26);
    v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v22))
      goto LABEL_29;
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v24 = "Audio interruption with unhandled type";
LABEL_28:
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v24, v23, 2u);
    swift_slowDealloc(v23, -1, -1);
LABEL_29:

    return;
  }
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA440);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Audio interruption began", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
  if (Strong)
  {
    v15 = Strong;
    v16 = *(_QWORD *)(v13 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v16 + 16))(0, ObjectType, v16);
    swift_unknownObjectRelease(v15);
  }
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer);
  if (v18)
    objc_msgSend(*(id *)(v18 + 48), "endAudio");
  sub_100147478();
}

id sub_10016DD10()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpeechManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SpeechManager()
{
  return objc_opt_self(_TtC17SequoiaTranslator13SpeechManager);
}

void sub_10016DDB8(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Strong;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t ObjectType;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[3];

  v4 = sub_100006DF4(&qword_100296470);
  __chkstk_darwin(v4);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100293300);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v62 = *(_QWORD *)(v11 - 8);
  v63 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a2 + 16;
  if (qword_10028A438 != -1)
    swift_once(&qword_10028A438, sub_100120FEC);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000F66C(v14, (uint64_t)qword_1002AA3B0);
  v16 = a1;
  v64 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v60 = v8;
  v61 = v14;
  if (v19)
  {
    v20 = swift_slowAlloc(24, -1);
    v59 = v6;
    v21 = v20;
    v22 = swift_slowAlloc(32, -1);
    v58 = v7;
    v23 = v22;
    v67[0] = v22;
    *(_DWORD *)v21 = 67109634;
    LODWORD(v66) = objc_msgSend(v16, "isConfident");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v21 + 4);
    *(_WORD *)(v21 + 8) = 1024;
    LODWORD(v66) = objc_msgSend(v16, "isFinal");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v21 + 10);
    *(_WORD *)(v21 + 14) = 2082;
    v24 = objc_msgSend(v16, "dominantLanguage");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = Locale.ltIdentifier.getter(v25);
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v63);
    v66 = sub_1001A7FE4(v26, v28, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v21 + 16);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received LID result (confident: %{BOOL}d, final: %{BOOL}d): %{public}s", (uint8_t *)v21, 0x18u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v29 = v23;
    v7 = v58;
    swift_slowDealloc(v29, -1, -1);
    v30 = v21;
    v6 = v59;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

  }
  v31 = v65;
  swift_beginAccess(v65, v67, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v31);
  if (Strong)
  {
    v33 = (char *)Strong;
    v34 = Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
    v35 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)&v33[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer];
      if (v37)
      {
        v38 = *(_QWORD *)(v34 + 8);
        swift_retain(*(_QWORD *)&v33[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer]);
        sub_100171194(v16);
        if ((v33[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate] & 1) != 0)
        {

          swift_release(v37);
          swift_unknownObjectRelease(v36);
        }
        else
        {
          sub_100170A1C((uint64_t)v6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v6, 1, v7) == 1)
          {

            swift_release(v37);
            swift_unknownObjectRelease(v36);
            v49 = &qword_100296470;
            v50 = (uint64_t)v6;
          }
          else
          {
            v51 = *(int *)(v7 + 48);
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v10, v6, v63);
            v52 = v6[v51];
            v10[v51] = v52;
            if (qword_10028A468 != -1)
              swift_once(&qword_10028A468, sub_1001210B8);
            v53 = sub_10000F66C(v61, (uint64_t)qword_1002AA440);
            v54 = Logger.logObject.getter(v53);
            v55 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v54, v55))
            {
              v56 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v56 = 0;
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "Sending final LID result to delegate", v56, 2u);
              swift_slowDealloc(v56, -1, -1);
            }

            ObjectType = swift_getObjectType(v36);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 24))(v10, v52, ObjectType, v38);
            swift_unknownObjectRelease(v36);

            swift_release(v37);
            v49 = &qword_100293300;
            v50 = (uint64_t)v10;
          }
          sub_10000A020(v50, v49);
        }
      }
      else
      {
        if (qword_10028A468 != -1)
          swift_once(&qword_10028A468, sub_1001210B8);
        v45 = sub_10000F66C(v61, (uint64_t)qword_1002AA440);
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v46, v47))
        {
          v48 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v48 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Cannot capture lid result because SpeechResultContainer is nil", v48, 2u);
          swift_slowDealloc(v48, -1, -1);
        }

        swift_unknownObjectRelease(v36);
      }
    }
    else
    {
      v42 = Logger.logObject.getter(0);
      v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Ignoring result above, SpeechManagers's delegate doesn't exist", v44, 2u);
        swift_slowDealloc(v44, -1, -1);
      }

    }
  }
  else
  {
    v39 = Logger.logObject.getter(0);
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Ignoring result above, SpeechRequest's delegate doesn't exist", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

  }
}

uint64_t sub_10016E4DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v28 = a4;
  v7 = v4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  v17 = swift_allocObject(&unk_10026ECC0, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v7);
  v18 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = v17;
  aBlock[4] = a3;
  v32 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = v28;
  v19 = _Block_copy(aBlock);
  v20 = v32;
  v21 = a1;
  swift_release(v20);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_10000F730();
  v24 = sub_100006DF4(&qword_10028AC30);
  v25 = sub_10000F778();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v9, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v29);
}

void sub_10016E6E0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  unsigned int v24;
  unsigned int v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t Strong;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  _BYTE *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t ObjectType;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _OWORD v71[4];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75[2];
  _OWORD v76[3];
  uint64_t v77[5];
  _BYTE v78[40];
  char v79[32];

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint8_t *)(a2 + 16);
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA440);
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    v15 = swift_slowAlloc(34, -1);
    v68 = v9;
    v16 = v15;
    v66 = swift_slowAlloc(64, -1);
    v77[0] = v66;
    *(_DWORD *)v16 = 136446979;
    v67 = v8;
    v17 = objc_msgSend(v11, "locale");
    HIDWORD(v65) = v14;
    v18 = v17;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v20 = Locale.ltIdentifier.getter(v19);
    v69 = (_BYTE *)v10;
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)&v75[0] = sub_1001A7FE4(v20, v22, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 8, v16 + 4);

    *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v16 + 12) = 1024;
    v24 = objc_msgSend(v11, "isStable", v23);

    LODWORD(v75[0]) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 4, v16 + 14);

    *(_WORD *)(v16 + 18) = 1024;
    v25 = objc_msgSend(v11, "isFinal");

    LODWORD(v75[0]) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 4, v16 + 20);

    *(_WORD *)(v16 + 24) = 2085;
    v26 = objc_msgSend(v11, "bestTranscription");
    v27 = objc_msgSend(v26, "formattedString");

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v31 = v28;
    v8 = v67;
    *(_QWORD *)&v75[0] = sub_1001A7FE4(v31, v30, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, (char *)v75 + 8, v16 + 26);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, BYTE4(v65), "Received speech result (locale: %{public}s, isStable: %{BOOL}d, final: %{BOOL}d): %{sensitive}s", (uint8_t *)v16, 0x22u);
    v32 = v66;
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v33 = v16;
    v9 = v68;
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

  }
  swift_beginAccess(v8, v79, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    v35 = (char *)Strong;
    v36 = Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
    v37 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
    if (v37)
    {
      v38 = v37;
      v39 = *(_QWORD *)(v36 + 8);
      v40 = objc_msgSend(v11, "isStable");
      if ((v40 & 1) == 0)
      {
        v40 = objc_msgSend(v11, "isFinal");
        if (!(_DWORD)v40)
        {

          goto LABEL_37;
        }
      }
      v41 = *(_QWORD *)&v35[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer];
      if (v41)
      {
        v42 = v11;
        swift_retain(v41);
        sub_1001702BC(v42, v41);

        if ((v35[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate] & 1) == 0)
        {
          sub_100171474((uint64_t)&v73);
          if (v74)
          {
            v43 = v78;
            sub_10003E994(&v73, (uint64_t)v71);
            sub_100023AB0((uint64_t)v71, (uint64_t)v75);
            sub_10017160C((uint64_t)v76 + 8);
            sub_100009C08(v71);
            sub_10003E994(v75, (uint64_t)v77);
            sub_10005A9A0((uint64_t)v76 + 8, (uint64_t)v78);
            sub_100023AB0((uint64_t)v77, (uint64_t)v75);
            v44 = sub_10000B074((uint64_t)v78, (uint64_t)v76 + 8, (uint64_t *)&unk_10028F1C0);
            v71[2] = v76[0];
            v71[3] = v76[1];
            v72 = v76[2];
            v71[0] = v75[0];
            v71[1] = v75[1];
            v45 = Logger.logObject.getter(v44);
            v46 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v45, v46))
            {
              v69 = v78;
              v47 = (uint8_t *)swift_slowAlloc(12, -1);
              v68 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v73 = v68;
              v67 = v47;
              *(_DWORD *)v47 = 136315138;
              if ((_QWORD)v72)
                v48 = 7562585;
              else
                v48 = 28494;
              if ((_QWORD)v72)
                v49 = 0xE300000000000000;
              else
                v49 = 0xE200000000000000;
              v70 = sub_1001A7FE4(v48, v49, (uint64_t *)&v73);
              v43 = v69;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v47 + 4);
              swift_bridgeObjectRelease();
              sub_10000A020((uint64_t)v71, (uint64_t *)&unk_100296460);
              v50 = v46;
              v51 = v67;
              _os_log_impl((void *)&_mh_execute_header, v45, v50, "Sending partial result to delegate. Partial translation is attached: %s", v67, 0xCu);
              v52 = v68;
              swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v52, -1, -1);
              swift_slowDealloc(v51, -1, -1);
            }
            else
            {
              sub_10000A020((uint64_t)v71, (uint64_t *)&unk_100296460);
            }

            ObjectType = swift_getObjectType(v38);
            (*(void (**)(uint64_t *, _BYTE *, uint64_t, uint64_t))(v39 + 32))(v77, v43, ObjectType, v39);
            swift_unknownObjectRelease(v38);

            swift_release(v41);
            sub_10000A020((uint64_t)v77, (uint64_t *)&unk_100296460);
            return;
          }
          sub_10000A020((uint64_t)&v73, (uint64_t *)&unk_100296450);
        }

        swift_release(v41);
LABEL_37:
        swift_unknownObjectRelease(v38);
        return;
      }
      v61 = Logger.logObject.getter(v40);
      v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Cannot capture speech recognition result because SpeechResultContainer is nil", v63, 2u);
        swift_slowDealloc(v63, -1, -1);
      }

      swift_unknownObjectRelease(v38);
    }
    else
    {
      if (qword_10028A438 != -1)
        swift_once(&qword_10028A438, sub_100120FEC);
      v57 = sub_10000F66C(v9, (uint64_t)qword_1002AA3B0);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Ignoring result above, SpeechManagers's delegate doesn't exist", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
      }

    }
  }
  else
  {
    if (qword_10028A438 != -1)
      swift_once(&qword_10028A438, sub_100120FEC);
    v53 = sub_10000F66C(v9, (uint64_t)qword_1002AA3B0);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Ignoring result above, SpeechRequest's delegate doesn't exist.", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

  }
}

void sub_10016EFB8(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Strong;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  NSObject *v53;
  uint64_t v54;
  uint8_t *v55;
  __int128 *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  unint64_t v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t ObjectType;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  _OWORD v79[4];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[3];
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87[2];
  __int128 v88;
  uint64_t v89;
  char v90[40];

  v4 = type metadata accessor for Locale(0);
  v75 = *(uint8_t **)(v4 - 8);
  v76 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "translations");
  v8 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  v10 = sub_10012542C(v9);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v10 + 16))
  {
    sub_100023AB0(v10 + 32, (uint64_t)&v84);
    swift_bridgeObjectRelease();
    v11 = *((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v12 = v86;
      sub_100023AF4(&v84, *((uint64_t *)&v85 + 1));
      v13 = dispatch thunk of FormattedString.formattedString.getter(v11, *(_QWORD *)(v12 + 16));
      v15 = v14;
      sub_100009C08(&v84);
      goto LABEL_6;
    }
  }
  else
  {
    v86 = 0;
    v84 = 0u;
    v85 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_10000A020((uint64_t)&v84, &qword_100296440);
  v13 = 0;
  v15 = 0;
LABEL_6:
  v16 = a2 + 16;
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v77 = (__int128 *)type metadata accessor for Logger(0);
  v17 = sub_10000F66C((uint64_t)v77, (uint64_t)qword_1002AA440);
  swift_bridgeObjectRetain(v15);
  v18 = a1;
  v74 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(28, -1);
    v72 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v84 = v72;
    *(_DWORD *)v21 = 136446723;
    v73 = v16;
    v22 = objc_msgSend(v18, "locale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v24 = Locale.ltIdentifier.getter(v23);
    v71 = v13;
    v26 = v25;
    (*((void (**)(char *, uint64_t))v75 + 1))(v6, v76);
    *(_QWORD *)&v81 = sub_1001A7FE4(v24, v26, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, (char *)&v81 + 8, v21 + 4);

    *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v21 + 12) = 1024;
    v28 = objc_msgSend(v18, "isFinal", v27);

    LODWORD(v81) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, (char *)&v81 + 4, v21 + 14);

    *(_WORD *)(v21 + 18) = 2085;
    if (v15)
      v29 = v71;
    else
      v29 = 7104878;
    if (v15)
      v30 = v15;
    else
      v30 = 0xE300000000000000;
    swift_bridgeObjectRetain(v15);
    v31 = v29;
    v16 = v73;
    *(_QWORD *)&v81 = sub_1001A7FE4(v31, v30, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, (char *)&v81 + 8, v21 + 20);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received translation result; locale: %{public}s; final: %{BOOL}d; formattedResult: %{sensitive}s",
      (uint8_t *)v21,
      0x1Cu);
    v32 = v72;
    swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
  }
  swift_beginAccess(v16, v90, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v16);
  if (!Strong)
  {
    if (qword_10028A438 != -1)
      swift_once(&qword_10028A438, sub_100120FEC);
    v45 = sub_10000F66C((uint64_t)v77, (uint64_t)qword_1002AA3B0);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Ignoring result above, SpeechRequest's delegate doesn't exist.", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    return;
  }
  v34 = (char *)Strong;
  v35 = Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
  v36 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
  if (!v36)
  {
    if (qword_10028A438 != -1)
      swift_once(&qword_10028A438, sub_100120FEC);
    v49 = sub_10000F66C((uint64_t)v77, (uint64_t)qword_1002AA3B0);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Ignoring result above, SpeechManagers's delegate doesn't exist", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    goto LABEL_38;
  }
  v37 = v36;
  v38 = *(_QWORD *)&v34[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_resultContainer];
  if (!v38)
  {
    v53 = Logger.logObject.getter(v36);
    v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, (os_log_type_t)v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v54, "Cannot capture translation result because SpeechResultContainer is nil", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    swift_unknownObjectRelease(v37);
LABEL_38:

    return;
  }
  v39 = *(_QWORD *)(v35 + 8);
  v40 = v18;
  swift_retain(v38);
  sub_10017050C(v40, v38);

  sub_1001710D8(&v81);
  if (!*((_QWORD *)&v82 + 1))
  {
    sub_10000A020((uint64_t)&v81, &qword_100296448);
    if ((v34[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate] & 1) == 0)
    {
      sub_100171474((uint64_t)&v88);
      if (v89)
      {
        v56 = v87;
        sub_10003E994(&v88, (uint64_t)v79);
        sub_100023AB0((uint64_t)v79, (uint64_t)&v81);
        sub_10017160C((uint64_t)v83 + 8);
        sub_100009C08(v79);
        sub_10003E994(&v81, (uint64_t)&v84);
        sub_10005A9A0((uint64_t)v83 + 8, (uint64_t)v87);
        sub_100023AB0((uint64_t)&v84, (uint64_t)&v81);
        v57 = sub_10000B074((uint64_t)v87, (uint64_t)v83 + 8, (uint64_t *)&unk_10028F1C0);
        v79[2] = v83[0];
        v79[3] = v83[1];
        v80 = v83[2];
        v79[0] = v81;
        v79[1] = v82;
        v58 = Logger.logObject.getter(v57);
        v59 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v58, v59))
        {
          v77 = v87;
          v60 = (uint8_t *)swift_slowAlloc(12, -1);
          v76 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v88 = v76;
          v75 = v60;
          *(_DWORD *)v60 = 136315138;
          if ((_QWORD)v80)
            v61 = 7562585;
          else
            v61 = 28494;
          if ((_QWORD)v80)
            v62 = 0xE300000000000000;
          else
            v62 = 0xE200000000000000;
          v78 = sub_1001A7FE4(v61, v62, (uint64_t *)&v88);
          v56 = v77;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v60 + 4);
          swift_bridgeObjectRelease();
          sub_10000A020((uint64_t)v79, (uint64_t *)&unk_100296460);
          v63 = v59;
          v64 = v75;
          _os_log_impl((void *)&_mh_execute_header, v58, v63, "Sending partial result to delegate. Partial translation is attached: %s", v75, 0xCu);
          v65 = v76;
          swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v65, -1, -1);
          swift_slowDealloc(v64, -1, -1);
        }
        else
        {
          sub_10000A020((uint64_t)v79, (uint64_t *)&unk_100296460);
        }

        ObjectType = swift_getObjectType(v37);
        (*(void (**)(__int128 *, __int128 *, uint64_t, uint64_t))(v39 + 32))(&v84, v56, ObjectType, v39);
        swift_unknownObjectRelease(v37);

        swift_release(v38);
        sub_10000A020((uint64_t)&v84, (uint64_t *)&unk_100296460);
        return;
      }
      sub_10000A020((uint64_t)&v88, (uint64_t *)&unk_100296450);
    }

    swift_release(v38);
    swift_unknownObjectRelease(v37);
    return;
  }
  sub_10003E994(&v81, (uint64_t)&v84);
  sub_10003E994((_OWORD *)((char *)v83 + 8), (uint64_t)v87);
  sub_10003E994(&v84, (uint64_t)v79);
  v41 = sub_10003E994(v87, (uint64_t)&v88);
  if (v34[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate] == 1)
  {
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Received additional result after sending final result, not going to re-send final result.", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

  }
  else
  {
    v34[OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_sentFinalResultToDelegate] = 1;
    v66 = Logger.logObject.getter(v41);
    v67 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Sending final result to delegate", v68, 2u);
      swift_slowDealloc(v68, -1, -1);
    }

    v69 = swift_getObjectType(v37);
    (*(void (**)(_OWORD *, __int128 *, uint64_t, uint64_t))(v39 + 40))(v79, &v88, v69, v39);
  }
  swift_unknownObjectRelease(v37);

  swift_release(v38);
  sub_100009C08(&v88);
  sub_100009C08(v79);
}

uint64_t sub_10016FA78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD aBlock[5];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_10026ECC0, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v2);
  v15 = swift_allocObject(&unk_10026ECE8, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = v14;
  aBlock[4] = sub_100170290;
  v24 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_10026ED00;
  v16 = _Block_copy(aBlock);
  v17 = v24;
  swift_errorRetain(a1);
  swift_release(v17);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_10000F730();
  v20 = sub_100006DF4(&qword_10028AC30);
  v21 = sub_10000F778();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_10016FC7C(NSObject *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject **v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  id v38;

  if (a1)
  {
    v36 = a1;
    swift_errorRetain(a1);
    v3 = sub_100006DF4((uint64_t *)&unk_100296430);
    v4 = sub_10000A05C(0, (unint64_t *)&qword_10028AA48, NSError_ptr);
    if ((swift_dynamicCast(&v38, &v36, v3, v4, 6) & 1) != 0)
    {
      v5 = a2 + 16;
      v6 = qword_10028A468;
      v7 = v38;
      if (v6 != -1)
        swift_once(&qword_10028A468, sub_1001210B8);
      v8 = type metadata accessor for Logger(0);
      sub_10000F66C(v8, (uint64_t)qword_1002AA440);
      v9 = v7;
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v35 = v8;
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v12 = 138412290;
        v36 = v9;
        v14 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v12 + 4);
        *v13 = v9;

        v8 = v35;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Translation finished with error: %@", v12, 0xCu);
        v15 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v13, 1, v15);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {

        v10 = v9;
      }

      swift_beginAccess(v5, &v36, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v5);
      if (Strong)
      {
        v18 = Strong;
        v22 = Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate;
        v23 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC17SequoiaTranslator13SpeechManager_delegate);
        if (v23)
        {
          v24 = v23;
          v25 = *(_QWORD *)(v22 + 8);
          swift_getObjectType(v23);
          v26 = *(void (**)(void))(v25 + 48);
          v27 = v9;
          v26();

          swift_unknownObjectRelease(v24);
          v18 = v27;
          goto LABEL_25;
        }
        if (qword_10028A438 != -1)
          swift_once(&qword_10028A438, sub_100120FEC);
        v31 = sub_10000F66C(v8, (uint64_t)qword_1002AA3B0);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Ignoring result above, SpeechManagers's delegate doesn't exist", v34, 2u);
          swift_slowDealloc(v34, -1, -1);

          goto LABEL_25;
        }

      }
      else
      {
        if (qword_10028A438 != -1)
          swift_once(&qword_10028A438, sub_100120FEC);
        v28 = sub_10000F66C(v8, (uint64_t)qword_1002AA3B0);
        v18 = Logger.logObject.getter(v28);
        v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v18, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v29, "Ignoring result above, SpeechRequest's delegate doesn't exist.", v30, 2u);
          swift_slowDealloc(v30, -1, -1);

          goto LABEL_25;
        }
      }

      v18 = v9;
      goto LABEL_25;
    }
  }
  if (qword_10028A468 != -1)
    swift_once(&qword_10028A468, sub_1001210B8);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA440);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Translation finished without an error", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }
LABEL_25:

}

uint64_t sub_100170240()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100170264()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100170290()
{
  uint64_t v0;

  sub_10016FC7C(*(NSObject **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100170298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001702A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001702B4()
{
  uint64_t v0;

  sub_10016EFB8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001702BC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE v27[24];

  v4 = sub_100006DF4(&qword_1002948B0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(a2 + 64) + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstResult;
  swift_beginAccess(v10, v27, 0, 0);
  sub_10000B074(v10, (uint64_t)v9, &qword_1002948B0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
  v14 = a1;
  v15 = sub_10000A020((uint64_t)v9, &qword_1002948B0);
  if (v13 == 1)
  {
    Date.init()(v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
    swift_beginAccess(v10, &v23, 33, 0);
    sub_10005DEF4((uint64_t)v7, v10);
    swift_endAccess(&v23);
  }
  v16 = (_QWORD *)(a2 + 24);
  swift_beginAccess(a2 + 24, v26, 33, 0);
  v17 = *(_QWORD **)(a2 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
  *(_QWORD *)(a2 + 24) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = sub_1001A78FC(0, v17[2] + 1, 1, v17);
    *v16 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    v17 = sub_1001A78FC((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    *v16 = v17;
  }
  v24 = sub_10000A05C(0, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr);
  v25 = sub_100065E60(&qword_10028F1F0, (unint64_t *)&unk_10028F1D0, _LTSpeechRecognitionResult_ptr, (uint64_t)&protocol conformance descriptor for _LTSpeechRecognitionResult);
  *(_QWORD *)&v23 = v14;
  v17[2] = v20 + 1;
  sub_10003E994(&v23, (uint64_t)&v17[5 * v20 + 4]);
  return swift_endAccess(v26);
}

uint64_t sub_10017050C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE v27[24];

  v4 = sub_100006DF4(&qword_1002948B0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(a2 + 64) + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTranslation;
  swift_beginAccess(v10, v27, 0, 0);
  sub_10000B074(v10, (uint64_t)v9, &qword_1002948B0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
  v14 = a1;
  v15 = sub_10000A020((uint64_t)v9, &qword_1002948B0);
  if (v13 == 1)
  {
    Date.init()(v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
    swift_beginAccess(v10, &v23, 33, 0);
    sub_10005DEF4((uint64_t)v7, v10);
    swift_endAccess(&v23);
  }
  v16 = (_QWORD *)(a2 + 32);
  swift_beginAccess(a2 + 32, v26, 33, 0);
  v17 = *(_QWORD **)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
  *(_QWORD *)(a2 + 32) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = sub_1001A7910(0, v17[2] + 1, 1, v17);
    *v16 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    v17 = sub_1001A7910((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    *v16 = v17;
  }
  v24 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
  v25 = sub_100065E60((unint64_t *)&qword_10028F188, &qword_10028F180, _LTTranslationResult_ptr, (uint64_t)&protocol conformance descriptor for _LTTranslationResult);
  *(_QWORD *)&v23 = v14;
  v17[2] = v20 + 1;
  sub_10003E994(&v23, (uint64_t)&v17[5 * v20 + 4]);
  return swift_endAccess(v26);
}

void sub_100170760()
{
  uint64_t v0;

  sub_10016E6E0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10017076C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100170798()
{
  uint64_t v0;

  sub_10016DDB8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001707A0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001707D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10029647C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D380;
  return sub_10016CBEC(a1, v4, v5, v6, v7, v8);
}

double sub_100170854(uint64_t a1)
{
  uint64_t v1;

  return sub_100144D40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

Class sub_100170878(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10000A05C(0, (unint64_t *)&qword_1002930B0, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_1001708FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_100170910(a1, a2, a3);
}

uint64_t sub_100170910@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = (uint64_t (*)(uint64_t))result;
    v7 = a2 + 40 * v5 - 8;
    while (1)
    {
      result = v6(v7);
      if (v3)
        break;
      if ((result & 1) != 0)
        return sub_100023AB0(v7, a3);
      v7 -= 40;
      if (!--v5)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1001709A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 32) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SpeechTranslationInstrumentation(0)), "init");
  *(_QWORD *)(v2 + 72) = objc_msgSend(objc_allocWithZone((Class)_LTSpeechLIDLoggingRequest), "init");
  *(_BYTE *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return v2;
}

uint64_t sub_100170A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  Class isa;
  id v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  id v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  char **v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  Class v63;
  id v64;
  uint64_t v65;
  id v66;

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v61 - v12;
  v14 = *(void **)(v1 + 48);
  if (!objc_msgSend(v14, "autodetectLanguage")
    || (objc_msgSend(v14, "forceSourceLocale") & 1) != 0)
  {
    v15 = *(unsigned __int8 *)(v1 + 56);
    v16 = sub_100006DF4(&qword_100293300);
    v17 = *(int *)(v16 + 48);
    v18 = objc_msgSend(v14, "localePair");
    v19 = v18;
    if (v15 == 1)
      v20 = objc_msgSend(v18, "targetLocale");
    else
      v20 = objc_msgSend(v18, "sourceLocale");
    v21 = v20;

    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v21);
    *(_BYTE *)(a1 + v17) = 1;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
  v22 = *(void **)(v1 + 16);
  if (!v22)
  {
    v32 = sub_100006DF4(&qword_100293300);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a1, 1, 1, v32);
  }
  if (*(_BYTE *)(v1 + 56) != 1)
  {
    v16 = sub_100006DF4(&qword_100293300);
    v34 = *(int *)(v16 + 48);
    v35 = v22;
    v36 = objc_msgSend(v35, "dominantLanguage");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v36);

    LOBYTE(v36) = objc_msgSend(v35, "isConfident");
    *(_BYTE *)(a1 + v34) = (_BYTE)v36;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
  v23 = v22;
  v24 = objc_msgSend(v14, "localePair");
  v64 = v23;
  v25 = objc_msgSend(v23, "dominantLanguage");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v25);

  isa = Locale._bridgeToObjectiveC()().super.isa;
  v63 = isa;
  v62 = *(void (**)(char *, uint64_t))(v8 + 8);
  v62(v11, v7);
  v27 = objc_msgSend(v24, "oppositeToLocale:", isa);

  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_15;
  }
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v27);

  v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v28(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_15:
    sub_10000A020((uint64_t)v6, (uint64_t *)&unk_10028FE50);
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v37 = type metadata accessor for Logger(0);
    sub_10000F66C(v37, (uint64_t)qword_1002AA440);
    v38 = v64;
    swift_retain_n(v2, 2);
    v39 = v38;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    v42 = v41;
    v43 = &selRef_scribbleInteractionDidFinishWriting_;
    if (os_log_type_enabled(v40, v41))
    {
      v44 = swift_slowAlloc(22, -1);
      v64 = (id)swift_slowAlloc(64, -1);
      v66 = v64;
      *(_DWORD *)v44 = 136446466;
      v61 = v44 + 4;
      v45 = objc_msgSend(v39, "dominantLanguage");
      LODWORD(v63) = v42;
      v46 = v45;
      static Locale._unconditionallyBridgeFromObjectiveC(_:)(v45);

      v48 = Locale.ltIdentifier.getter(v47);
      v50 = v49;
      v62(v11, v7);
      v65 = sub_1001A7FE4(v48, v50, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v61);

      *(_QWORD *)&v51 = swift_bridgeObjectRelease(v50).n128_u64[0];
      *(_WORD *)(v44 + 12) = 2080;
      v52 = objc_msgSend(v14, "localePair", v51);
      v53 = objc_msgSend(v52, "combinedLocaleIdentifier");

      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v56 = v55;

      v65 = sub_1001A7FE4(v54, v56, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v44 + 14);
      swift_release_n(v2, 2);
      v57 = v56;
      v43 = &selRef_scribbleInteractionDidFinishWriting_;
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v63, "Couldn't find locale opposite to speech request's locale pair. Given locale: %{public}s. Locale pair: %s", (uint8_t *)v44, 0x16u);
      v58 = v64;
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    v16 = sub_100006DF4(&qword_100293300);
    v59 = *(int *)(v16 + 48);
    v60 = objc_msgSend(v39, v43[389]);
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v60);

    LOBYTE(v60) = objc_msgSend(v39, "isConfident");
    *(_BYTE *)(a1 + v59) = (_BYTE)v60;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
  v28(v13, v6, v7);
  v16 = sub_100006DF4(&qword_100293300);
  v29 = *(int *)(v16 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a1, v13, v7);
  v30 = v64;
  v31 = objc_msgSend(v64, "isConfident");

  v62(v13, v7);
  *(_BYTE *)(a1 + v29) = v31;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
}

double sub_1001710D8@<D0>(_OWORD *a1@<X8>)
{
  double result;
  uint64_t *v3;
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9[2];

  sub_1001719D0((uint64_t)&v7);
  if (v8)
  {
    sub_10003E994(&v7, (uint64_t)v9);
    sub_100171D98((uint64_t)&v5);
    if (v6)
    {
      sub_10003E994(&v5, (uint64_t)&v7);
      sub_1001720E8(&v7);
      sub_10003E994(v9, (uint64_t)a1);
      sub_10003E994(&v7, (uint64_t)a1 + 40);
      return result;
    }
    sub_100009C08(v9);
    v3 = (uint64_t *)&unk_10028F1C0;
    v4 = &v5;
  }
  else
  {
    v3 = (uint64_t *)&unk_100296450;
    v4 = &v7;
  }
  sub_10000A020((uint64_t)v4, v3);
  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void sub_100171194(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unsigned __int8 v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];

  v2 = v1;
  v4 = sub_100006DF4(&qword_100296470);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_1002948B0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v28 - v11;
  v29 = *(_QWORD *)(v2 + 64);
  v13 = v29 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstLID;
  swift_beginAccess(v29 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstLID, v31, 0, 0);
  sub_100065FD0(v13, (uint64_t)v12);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  v17 = sub_10000A020((uint64_t)v12, &qword_1002948B0);
  if (v16 == 1)
  {
    Date.init()(v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    swift_beginAccess(v13, v30, 33, 0);
    sub_10002D560((uint64_t)v10, v13, &qword_1002948B0);
    swift_endAccess(v30);
  }
  sub_100170A1C((uint64_t)v6);
  v18 = sub_100006DF4(&qword_100293300);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v6, 1, v18);
  sub_10000A020((uint64_t)v6, &qword_100296470);
  if (v19 != 1)
  {
    if (qword_10028A468 != -1)
      swift_once(&qword_10028A468, sub_1001210B8);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000F66C(v20, (uint64_t)qword_1002AA440);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Only one LID result is expected. Something went wrong.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
  v25 = objc_msgSend(a1, "isConfident");
  *(_BYTE *)(v29 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_lidTriggered) = v25 ^ 1;
  objc_msgSend(*(id *)(v2 + 72), "setLidResult:", a1);
  v26 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  v27 = a1;

}

double sub_100171474@<D0>(uint64_t a1@<X8>)
{
  return sub_1001719DC((uint64_t (*)(uint64_t, char *, __n128))sub_100171480, a1);
}

uint64_t sub_100171480(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v20 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100293300);
  __chkstk_darwin(v7);
  v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v11);
  LOBYTE(v10) = dispatch thunk of SpeechResult.isEmpty()(v11, v10);
  v12 = (uint64_t)a1;
  v13 = v4;
  sub_100023AB0(v12, (uint64_t)v21);
  v14 = *(int *)(v7 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a2, v4);
  v9[v14] = *(_BYTE *)(a2 + v14);
  if ((v10 & 1) != 0)
  {
    v15 = 0;
  }
  else
  {
    v16 = v22;
    v17 = v23;
    sub_100023AF4(v21, v22);
    v18 = v20;
    dispatch thunk of AnnotatedResult.locale.getter(v16, *(_QWORD *)(v17 + 16));
    v15 = static Locale.== infix(_:_:)(v18, v9);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v13);
  }
  sub_10000A020((uint64_t)v9, &qword_100293300);
  sub_100009C08(v21);
  return v15 & 1;
}

uint64_t sub_10017160C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char v28;
  id v29;
  uint64_t v30;
  Class isa;
  void (*v32)(char *, uint64_t);
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 *v39;
  uint64_t result;
  _OWORD *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[24];
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v47 = a1;
  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  v46 = v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v42 - v10;
  v12 = sub_100006DF4(&qword_100296470);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_100293300);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v42 - v20;
  v22 = v1;
  sub_100170A1C((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    v23 = &qword_100296470;
LABEL_12:
    v39 = (__int128 *)v14;
    goto LABEL_13;
  }
  v43 = v9;
  v44 = v4;
  v42 = v11;
  v24 = *(int *)(v15 + 48);
  v25 = v45;
  v26 = v46;
  v27 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v27(v21, v14, v45);
  v28 = v14[v24];
  v21[v24] = v28;
  v29 = objc_msgSend(*(id *)(v22 + 48), "localePair");
  v30 = *(int *)(v15 + 48);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v19, v21, v25);
  v19[v30] = v28;
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v32 = *(void (**)(char *, uint64_t))(v26 + 8);
  v32(v19, v25);
  v33 = objc_msgSend(v29, "oppositeToLocale:", isa);

  if (!v33)
  {
    v14 = v44;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v44, 1, 1, v25);
    goto LABEL_11;
  }
  v34 = v43;
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v14 = v44;
  v27(v44, v34, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v14, 0, 1, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v25) == 1)
  {
LABEL_11:
    sub_10000A020((uint64_t)v21, &qword_100293300);
    v23 = (uint64_t *)&unk_10028FE50;
    goto LABEL_12;
  }
  v35 = (uint64_t)v42;
  v27(v42, v14, v25);
  swift_beginAccess(v22 + 32, v48, 0, 0);
  v36 = *(_QWORD *)(v22 + 32);
  swift_bridgeObjectRetain(v36);
  v37 = *(_QWORD *)(v36 + 16);
  if (v37)
  {
    v38 = (_QWORD *)(v36 + 40 * v37 - 8);
    while ((sub_1000840A8(v38, v35) & 1) == 0)
    {
      v38 -= 5;
      if (!--v37)
        goto LABEL_9;
    }
    sub_100023AB0((uint64_t)v38, (uint64_t)&v49);
  }
  else
  {
LABEL_9:
    v51 = 0;
    v49 = 0u;
    v50 = 0u;
  }
  swift_bridgeObjectRelease(v36);
  sub_10000A020((uint64_t)v21, &qword_100293300);
  v32((char *)v35, v25);
  if (*((_QWORD *)&v50 + 1))
    return sub_10003E994(&v49, v47);
  v23 = (uint64_t *)&unk_10028F1C0;
  v39 = &v49;
LABEL_13:
  result = sub_10000A020((uint64_t)v39, v23);
  v41 = (_OWORD *)v47;
  *(_QWORD *)(v47 + 32) = 0;
  *v41 = 0u;
  v41[1] = 0u;
  return result;
}

double sub_1001719D0@<D0>(uint64_t a1@<X8>)
{
  return sub_1001719DC((uint64_t (*)(uint64_t, char *, __n128))sub_100171C0C, a1);
}

double sub_1001719DC@<D0>(uint64_t (*a1)(uint64_t, char *, __n128)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  _BYTE v28[24];
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v5 = sub_100006DF4(&qword_100296470);
  __chkstk_darwin(v5);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100006DF4(&qword_100293300);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10);
  v14 = &v28[-v13 - 8];
  sub_100170A1C((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    v15 = &qword_100296470;
    v16 = (__int128 *)v7;
  }
  else
  {
    v17 = *(int *)(v8 + 48);
    v18 = type metadata accessor for Locale(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v14, v7, v18);
    v20 = v7[v17];
    v14[v17] = v20;
    swift_beginAccess(v2 + 24, v28, 0, 0);
    v21 = *(_QWORD *)(v2 + 24);
    v22 = *(int *)(v8 + 48);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v12, v14, v18);
    v12[v22] = v20;
    v23 = swift_bridgeObjectRetain(v21);
    v24 = *(_QWORD *)(v21 + 16);
    if (v24)
    {
      v25 = v21 + 40 * v24 - 8;
      while ((a1(v25, v12, v23) & 1) == 0)
      {
        v25 -= 40;
        if (!--v24)
          goto LABEL_7;
      }
      sub_100023AB0(v25, (uint64_t)&v29);
    }
    else
    {
LABEL_7:
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
    }
    swift_bridgeObjectRelease(v21);
    sub_10000A020((uint64_t)v14, &qword_100293300);
    sub_10000A020((uint64_t)v12, &qword_100293300);
    if (*((_QWORD *)&v30 + 1))
    {
      sub_10003E994(&v29, a2);
      return result;
    }
    v15 = (uint64_t *)&unk_100296450;
    v16 = &v29;
  }
  sub_10000A020((uint64_t)v16, v15);
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_100171C0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char *v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v20 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_100293300);
  __chkstk_darwin(v7);
  v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_100023AF4(a1, v11);
  LOBYTE(v10) = dispatch thunk of SpeechResult.isFinal.getter(v11, v10);
  v12 = (uint64_t)a1;
  v13 = v4;
  sub_100023AB0(v12, (uint64_t)v21);
  v14 = *(int *)(v7 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a2, v4);
  v9[v14] = *(_BYTE *)(a2 + v14);
  if ((v10 & 1) != 0)
  {
    v15 = v22;
    v16 = v23;
    sub_100023AF4(v21, v22);
    v17 = v20;
    dispatch thunk of AnnotatedResult.locale.getter(v15, *(_QWORD *)(v16 + 16));
    v18 = static Locale.== infix(_:_:)(v17, v9);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v13);
  }
  else
  {
    v18 = 0;
  }
  sub_10000A020((uint64_t)v9, &qword_100293300);
  sub_100009C08(v21);
  return v18 & 1;
}

uint64_t sub_100171D98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  id v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  sub_1001719D0((uint64_t)&v34);
  if (!v35)
  {
    result = sub_10000A020((uint64_t)&v34, (uint64_t *)&unk_100296450);
LABEL_10:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  v33 = v13;
  sub_10003E994(&v34, (uint64_t)v36);
  v14 = *(void **)(v1 + 48);
  v15 = objc_msgSend(v14, "localePair");
  v17 = v37;
  v16 = v38;
  sub_100023AF4(v36, v37);
  dispatch thunk of AnnotatedResult.locale.getter(v17, *(_QWORD *)(v16 + 16));
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v32 = *(void (**)(char *, uint64_t))(v8 + 8);
  v32(v11, v7);
  v19 = objc_msgSend(v15, "oppositeToLocale:", isa);

  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_9;
  }
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v20(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_9:
    sub_10000A020((uint64_t)v6, (uint64_t *)&unk_10028FE50);
    result = sub_100009C08(v36);
    goto LABEL_10;
  }
  v21 = (uint64_t)v33;
  v20(v33, v6, v7);
  v22 = objc_msgSend(v14, "localePair");
  v23 = objc_msgSend(v22, "isPassthrough");

  v24 = (uint64_t *)(v2 + 32);
  v25 = v2 + 32;
  if (v23)
  {
    swift_beginAccess(v25, &v34, 0, 0);
    v26 = *(_QWORD *)(*v24 + 16);
    if (v26)
    {
      sub_100023AB0(*v24 + 40 * v26 - 8, a1);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
  else
  {
    swift_beginAccess(v25, &v34, 0, 0);
    v28 = *v24;
    swift_bridgeObjectRetain(v28);
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v30 = (_QWORD *)(v28 + 40 * v29 - 8);
      while ((sub_1000845E8(v30, v21) & 1) == 0)
      {
        v30 -= 5;
        if (!--v29)
          goto LABEL_16;
      }
      sub_100023AB0((uint64_t)v30, a1);
    }
    else
    {
LABEL_16:
      *(_QWORD *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
    swift_bridgeObjectRelease(v28);
  }
  v32((char *)v21, v7);
  return sub_100009C08(v36);
}

void sub_1001720E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Class isa;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  void *v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  NSString v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE *v59;
  id v60;
  void *v61;
  NSString v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  Class v71;
  void (*v72)(char *, uint64_t);
  id v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  _QWORD aBlock[5];
  uint64_t v78;
  id v79;

  v3 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v3);
  v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v76 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 80) & 1) != 0)
    return;
  v9 = 1;
  *(_BYTE *)(v1 + 80) = 1;
  v10 = *(_BYTE **)(v1 + 64);
  v75 = v1;
  v11 = *(void **)(v1 + 48);
  v12 = objc_msgSend(v11, "localePair");
  v13 = *(void **)&v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_localePair];
  *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_localePair] = v12;

  v14 = objc_msgSend(v11, "censorSpeech");
  v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_censorSpeech] = v14;
  v15 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v16 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v15);
  v17 = NSUserDefaults.onDeviceOnly.getter();

  v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_onDeviceModeEnabled] = v17 & 1;
  v18 = a1[3];
  v19 = a1[4];
  sub_100023AF4(a1, v18);
  v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_offline] = dispatch thunk of TranslationResult.isOffline.getter(v18, v19) & 1;
  v20 = a1[3];
  v21 = a1[4];
  sub_100023AF4(a1, v20);
  v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_lowQualityMT] = TranslationResult.isLowConfidence.getter(v20, v21) & 1;
  v73 = v11;
  v22 = objc_msgSend(v11, "localePair");
  v24 = a1[3];
  v23 = a1[4];
  v74 = a1;
  sub_100023AF4(a1, v24);
  v25 = v76;
  dispatch thunk of TranslationResult.locale.getter(v24, v23);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v27 = v6;
  v72 = *(void (**)(char *, uint64_t))(v7 + 8);
  v72(v25, v6);
  v28 = objc_msgSend(v22, "oppositeToLocale:", isa);

  if (v28)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v28);

    v9 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v9, 1, v6);
  v29 = (uint64_t)&v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_sourceLocale];
  swift_beginAccess(&v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_sourceLocale], aBlock, 33, 0);
  sub_10002D560((uint64_t)v5, v29, (uint64_t *)&unk_10028FE50);
  swift_endAccess(aBlock);
  v30 = v74;
  sub_100023AB0((uint64_t)v74, (uint64_t)aBlock);
  v31 = sub_100006DF4(&qword_100298120);
  v32 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
  v33 = swift_dynamicCast(&v79, aBlock, v31, v32, 6);
  v34 = v75;
  if (v33)
  {
    v35 = v79;
    v36 = objc_msgSend(v79, "translations");

    v37 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
    v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);

    if ((unint64_t)v38 >> 62)
    {
      if (v38 < 0)
        v51 = v38;
      else
        v51 = v38 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v39 = (void *)_CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease(v38);
      if (!v39)
        goto LABEL_33;
    }
    else
    {
      v39 = *(void **)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v39)
      {
LABEL_33:
        swift_bridgeObjectRelease(v38);
        goto LABEL_34;
      }
    }
    if ((v38 & 0xC000000000000001) != 0)
    {
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v38);
    }
    else
    {
      if (!*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_28;
      }
      v40 = *(id *)(v38 + 32);
    }
    v39 = v40;
    v41 = objc_msgSend(v40, "statistics", swift_bridgeObjectRelease(v38).n128_f64[0]);
    if (v41)
    {
      v42 = v41;
      v43 = objc_msgSend(v41, "inputTokenCount");
      *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_inputTokenCount] = v43;
      v44 = objc_msgSend(v42, "inputSubtokenCount");

      *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_inputSubtokenCount] = v44;
    }
    v45 = objc_msgSend(v39, "senses");
    v46 = sub_10000A05C(0, &qword_10028F360, _LTTranslationSense_ptr);
    v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

    if (!((unint64_t)v38 >> 62))
    {
      if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_14:
        if ((v38 & 0xC000000000000001) != 0)
        {
          v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v38);
        }
        else
        {
          if (!*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v47 = *(id *)(v38 + 32);
        }
        v48 = v47;
        v49 = objc_msgSend(v47, "isPhrasebookMatch", swift_bridgeObjectRelease(v38).n128_f64[0]);

        if (v49)
          v50 = &OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_nBestDisplay;
        else
          v50 = &OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_senseDisambiguation;
        v10[*v50] = 1;
        goto LABEL_34;
      }
      goto LABEL_32;
    }
LABEL_28:
    if (v38 < 0)
      v52 = v38;
    else
      v52 = v38 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v38);
    v53 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease(v38);
    if (v53)
      goto LABEL_14;
LABEL_32:

    goto LABEL_33;
  }
LABEL_34:
  v54 = v10;
  v55 = String._bridgeToObjectiveC()();
  v56 = swift_allocObject(&unk_10026EE50, 24, 7);
  *(_QWORD *)(v56 + 16) = v54;
  aBlock[4] = sub_100172954;
  v78 = v56;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100170878;
  aBlock[3] = &unk_10026EE68;
  v57 = _Block_copy(aBlock);
  v58 = v78;
  v59 = v54;
  swift_release(v58);
  AnalyticsSendEventLazy(v55, v57);
  _Block_release(v57);

  v60 = v73;
  if (objc_msgSend(v73, "autodetectLanguage")
    && (objc_msgSend(v60, "forcedOfflineTranslation") & 1) == 0)
  {
    v61 = *(void **)(v34 + 72);
    v62 = objc_msgSend(v60, "uniqueID");
    if (!v62)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v65 = v64;
      v62 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v63 = swift_bridgeObjectRelease(v65).n128_u64[0];
    }
    objc_msgSend(v61, "setRequestID:", v62, v63);

    v66 = objc_msgSend(v60, "sessionID");
    objc_msgSend(v61, "setConversationID:", v66);

    v67 = objc_msgSend(v60, "localePair");
    objc_msgSend(v61, "setLocalePair:", v67);

    v68 = v30[3];
    v69 = v30[4];
    sub_100023AF4(v30, v68);
    v70 = v76;
    dispatch thunk of TranslationResult.locale.getter(v68, v69);
    v71 = Locale._bridgeToObjectiveC()().super.isa;
    v72(v70, v27);
    objc_msgSend(v61, "setTargetLocale:", v71);

    objc_msgSend(v61, "setSelectedLocale:", 0);
    objc_msgSend(*(id *)(v34 + 40), "log:", v61);
  }
}

uint64_t sub_100172884()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return v0;
}

uint64_t sub_1001728D0()
{
  uint64_t v0;

  sub_100172884();
  return swift_deallocClassInstance(v0, 81, 7);
}

uint64_t _s21SpeechResultContainerCMa()
{
  return objc_opt_self(_TtCC17SequoiaTranslator13SpeechManager21SpeechResultContainer);
}

void *sub_100172910()
{
  return sub_1001783C0();
}

uint64_t sub_100172930()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_100172954()
{
  return sub_1001783C0();
}

uint64_t sub_100172974(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100172984(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10017298C(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;

  v22 = a2;
  v3 = sub_100006DF4(&qword_1002967C0);
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4(&qword_1002967C8);
  v6 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_1002967D0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100023AF4(a1, v13);
  v15 = sub_1001767C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys, v15, v13, v14);
  if ((v22 & 1) != 0)
  {
    v24 = 1;
    v17 = sub_10017680C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys, &v24, v9, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys, v17);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
  }
  else
  {
    v23 = 0;
    v16 = sub_100176850();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys, &v23, v9, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100172B5C(_QWORD *a1, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v3 = a2 & 1;
  v4 = sub_100006DF4(&qword_100296708);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100023AF4(a1, v8);
  v10 = sub_100175BA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SpeechTranslationActivityAttributes.CodingKeys, &type metadata for SpeechTranslationActivityAttributes.CodingKeys, v10, v8, v9);
  v14 = v3;
  sub_100175C30();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v14, v11, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100172C54()
{
  return 0;
}

uint64_t sub_100172C60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100175578();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100172C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100175578();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100172CB0(_QWORD *a1)
{
  return sub_100009C08(a1);
}

uint64_t sub_100172CD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_100006DF4(&qword_1002966E0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_100023AF4(a1, v6);
  v8 = sub_100175578();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SpeechTranslationActivityAttributes.ContentState.CodingKeys, &type metadata for SpeechTranslationActivityAttributes.ContentState.CodingKeys, v8, v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int sub_100172D98()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  return Hasher._finalize()();
}

Swift::Int sub_100172DCC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  return Hasher._finalize()();
}

uint64_t sub_100172DFC@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_100172E28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100176850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100172E50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100176850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100172E78()
{
  _BYTE *v0;

  if (*v0)
    return 0x436C6F72746E6F63;
  else
    return 0x75426E6F69746361;
}

uint64_t sub_100172EC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100175630(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100172EEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001767C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100172F14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001767C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100172F3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017680C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100172F64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017680C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100172F8C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10017575C(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_100172FB8(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_10017298C(a1, *v1);
}

uint64_t sub_100172FD0()
{
  return 0x724F656372756F73;
}

uint64_t sub_100172FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x724F656372756F73 && a2 == 0xEC0000006E696769)
  {
    result = swift_bridgeObjectRelease(0xEC0000006E696769);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x724F656372756F73, 0xEC0000006E696769, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10017309C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100175BA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001730C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100175BA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1001730EC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100175A88(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_100173118(_QWORD *a1)
{
  char *v1;

  return sub_100172B5C(a1, *v1);
}

id sub_100173130()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SpeechTranslationActivityManager()), "init");
  qword_1002AA528 = (uint64_t)result;
  return result;
}

void sub_1001731B0(char a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8_t *v54;
  os_log_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[3];

  v2 = a1 & 1;
  v3 = type metadata accessor for Logger(0);
  v60 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActivityPresentationOptions(0);
  v64 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100296740);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v1;
  sub_100173974(0);
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v59 = v5;
  v15 = sub_10000F66C(v3, (uint64_t)qword_1002AA3C8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Requesting begin activity", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  v20 = sub_10017545C();
  v21 = sub_1001754A4();
  v22 = sub_1001754EC();
  ActivityContent.init(state:staleDate:relevanceScore:)(v22, v11, &type metadata for SpeechTranslationActivityAttributes.ContentState, v20, v21, v22, 0.0);
  v23 = sub_100006DF4(&qword_100296748);
  v24 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = swift_allocObject(v23, v27 + *(_QWORD *)(v25 + 72), v26 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_1001E64F0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v28 + v27, enum case for ActivityPresentationOptions.ActivityPresentationDestination.systemAperture(_:), v24);
  ActivityPresentationOptions.init(destinations:)(v28);
  ActivityPresentationOptions.shouldSuppressAlertContentOnLockScreen.setter(0);
  sub_100006DF4(&qword_100296750);
  LOBYTE(v68[0]) = v2;
  v29 = static Activity.request(attributes:content:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:isUnbounded:)(v68, v14, v8, 0xD000000000000013, 0x8000000100200490, 1, _swiftEmptyArrayStorage, 1, 0);
  v30 = OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity;
  v31 = v61;
  v32 = *(_QWORD *)&v61[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity];
  *(_QWORD *)&v61[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity] = v29;
  v33 = swift_release(v32);
  v35 = v59;
  v34 = v60;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v60 + 16))(v59, v15, v3, v33);
  v36 = v31;
  v37 = v3;
  v38 = v36;
  v39 = Logger.logObject.getter(v36);
  v58 = static os_log_type_t.info.getter(v39);
  if (os_log_type_enabled(v39, (os_log_type_t)v58))
  {
    v55 = v39;
    v56 = v37;
    v57 = v15;
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v68[0] = v41;
    *(_DWORD *)v40 = 136446210;
    v42 = *(_QWORD *)&v61[v30];
    if (!v42)
      goto LABEL_12;
    v43 = v41;
    v54 = v40 + 4;
    swift_retain(v42);
    v45 = Activity.id.getter(v44);
    v47 = v46;
    swift_release(v42);
    v66 = sub_1001A7FE4(v45, v47, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v54);
    swift_bridgeObjectRelease();

    v48 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v58, "Requested an activity successfully [id: %{public}s]", v40, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v56);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v65);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v14, v63);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v65);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v14, v63);
  }
  v49 = *(_QWORD *)&v61[v30];
  if (v49)
  {
    swift_retain(*(_QWORD *)&v61[v30]);
    v51 = Activity.id.getter(v50);
    v53 = v52;
    swift_release(v49);
    sub_100173FE0(v51, v53);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
LABEL_12:

  __break(1u);
}

double sub_100173974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  double result;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  char v21;
  void (*v22)(_BYTE *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[12];
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v2 = v1;
  v4 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v78 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = &v73[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100006DF4(&qword_100296730);
  __chkstk_darwin(v7);
  v9 = &v73[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for ActivityState(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v73[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v17 = &v73[-v16];
  if (a1)
  {
    v18 = a1;
  }
  else
  {
    v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity);
    if (!v18)
      return result;
    swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity));
  }
  v19 = swift_retain(a1);
  dispatch thunk of Activity.activityState.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for ActivityState.dismissed(_:), v10);
  v20 = sub_1001761E0();
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v14, v10, v20);
  v22 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v22(v14, v10);
  v22(v17, v10);
  if ((v21 & 1) == 0)
  {
    v77 = v4;
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v36 = type metadata accessor for Logger(0);
    sub_10000F66C(v36, (uint64_t)qword_1002AA3C8);
    v37 = swift_retain_n(v18, 4);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter(v38);
    v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      v41 = swift_slowAlloc(22, -1);
      v76 = v2;
      v42 = v41;
      v75 = swift_slowAlloc(64, -1);
      v80 = v75;
      *(_DWORD *)v42 = 136315394;
      v74 = v40;
      v43 = ((uint64_t (*)(void))Activity.id.getter)();
      v45 = v44;
      v79 = sub_1001A7FE4(v43, v44, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v42 + 4);
      swift_release_n(v18, 2);
      v46 = swift_bridgeObjectRelease(v45);
      *(_WORD *)(v42 + 12) = 2080;
      dispatch thunk of Activity.activityState.getter(v46);
      v47 = String.init<A>(describing:)(v17, v10);
      v49 = v48;
      v79 = sub_1001A7FE4(v47, v48, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v42 + 14);
      swift_release_n(v18, 2);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v74, "Requesting end activity [id: %s activityState: %s]", (uint8_t *)v42, 0x16u);
      v50 = v75;
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      v51 = v42;
      v2 = v76;
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {

      v52 = swift_release_n(v18, 4);
    }
    v53 = Activity.id.getter(v52);
    v55 = v54;
    sub_100174DA8(v53, v54);
    swift_bridgeObjectRelease(v55);
    v56 = sub_100006DF4(&qword_100296740);
    v57 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v9, 1, 1, v56);
    static ActivityUIDismissalPolicy.immediate.getter(v57);
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v9, v6);
    (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v6, v77);
    v58 = sub_100176228((uint64_t)v9);
    v59 = OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity;
    v60 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity);
    if (v60)
    {
      swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity));
      v62 = Activity.id.getter(v61);
      v64 = v63;
      swift_release(v60);
      v66 = Activity.id.getter(v65);
      v68 = v67;
      if (v64)
      {
        if (v62 == v66 && v64 == v67)
        {
          swift_bridgeObjectRelease_n(v64, 2);
        }
        else
        {
          v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, v66, v67, 0);
          swift_bridgeObjectRelease(v64);
          swift_bridgeObjectRelease(v68);
          if ((v70 & 1) == 0)
          {
            v72 = v18;
            goto LABEL_26;
          }
        }
        v71 = *(_QWORD *)(v2 + v59);
        *(_QWORD *)(v2 + v59) = 0;
        swift_release(v18);
        v72 = v71;
LABEL_26:
        *(_QWORD *)&result = swift_release(v72).n128_u64[0];
        return result;
      }
    }
    else
    {
      Activity.id.getter(v58);
      v68 = v69;
    }
    swift_release(v18);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v68).n128_u64[0];
    return result;
  }
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v23 = type metadata accessor for Logger(0);
  sub_10000F66C(v23, (uint64_t)qword_1002AA3C8);
  v24 = swift_retain_n(v18, 4);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    v80 = v28;
    *(_DWORD *)v27 = 136315394;
    v29 = Activity.id.getter(v28);
    v31 = v30;
    v79 = sub_1001A7FE4(v29, v30, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v27 + 4);
    swift_release_n(v18, 2);
    v32 = swift_bridgeObjectRelease(v31);
    *(_WORD *)(v27 + 12) = 2080;
    dispatch thunk of Activity.activityState.getter(v32);
    v33 = String.init<A>(describing:)(v17, v10);
    v35 = v34;
    v79 = sub_1001A7FE4(v33, v34, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v27 + 14);
    swift_release_n(v18, 2);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Skipping end activity [id: %s activityState: %s] ", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
    swift_release(v18);

  }
  else
  {

    swift_release_n(v18, 5);
  }
  return result;
}

void sub_100173FE0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  char **v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  id v46;
  NSString v47;
  NSString v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  char v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char v69;
  void (*v70)(char *, uint64_t);
  __n128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  os_log_t v93;
  void (*v94)(char *, _QWORD, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t aBlock[5];
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;

  v3 = v2;
  v100 = type metadata accessor for ActivityState(0);
  v97 = *(_QWORD *)(v100 - 8);
  v6 = __chkstk_darwin(v100);
  v99 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v98 = (char *)&v92 - v8;
  v9 = OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_assertion;
  v10 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_assertion);
  if (!v10)
    goto LABEL_19;
  v11 = v10;
  v12 = &selRef_initWithWindowScene_;
  v13 = objc_msgSend(v11, "sessionIdentifier");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  if (v14 == a1 && v16 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_12:

    if (!*(_QWORD *)(v3 + v9))
      goto LABEL_19;
LABEL_13:
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA3C8);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Not taking assertion as it is non-nil", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }
LABEL_29:

    return;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a1, a2, 0);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    goto LABEL_12;
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v19 = type metadata accessor for Logger(0);
  sub_10000F66C(v19, (uint64_t)qword_1002AA3C8);
  v20 = v11;
  swift_bridgeObjectRetain_n(a2, 2);
  v21 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    v25 = swift_slowAlloc(22, -1);
    LODWORD(v94) = v24;
    v26 = v25;
    v96 = swift_slowAlloc(64, -1);
    aBlock[0] = v96;
    *(_DWORD *)v26 = 136446466;
    v92 = v26 + 4;
    v27 = objc_msgSend(v21, "sessionIdentifier");
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v93 = v22;
    v29 = v28;
    v30 = v21;
    v32 = v31;

    v103 = sub_1001A7FE4(v29, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v92);
    v21 = v30;
    v12 = &selRef_initWithWindowScene_;
    swift_bridgeObjectRelease();

    *(_WORD *)(v26 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v103 = sub_1001A7FE4(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v26 + 14);
    swift_bridgeObjectRelease_n(a2, 3);
    v33 = v93;
    _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v94, "Releasing assertion for other activity [id: %{public}s] in favour of new assertion for activity [id: %{public}s]", (uint8_t *)v26, 0x16u);
    v34 = v96;
    swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v40 = objc_msgSend(v21, v12[313]);
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  sub_100174DA8(v41, v43);
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v3 + v9))
    goto LABEL_13;
LABEL_19:
  v44 = swift_allocObject(&unk_10026EF28, 24, 7);
  swift_unknownObjectWeakInit(v44 + 16, v3);
  v45 = (_QWORD *)swift_allocObject(&unk_10026EF50, 40, 7);
  v45[2] = v44;
  v45[3] = a1;
  v45[4] = a2;
  v46 = objc_allocWithZone((Class)SNAProminentPresentationAssertion);
  swift_bridgeObjectRetain(a2);
  v47 = String._bridgeToObjectiveC()();
  v48 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_100175CC4;
  v102 = v45;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001755BC;
  aBlock[3] = (uint64_t)&unk_10026EF68;
  v49 = _Block_copy(aBlock);
  v50 = objc_msgSend(v46, "initWithExplanation:sessionIdentifier:invalidationHandler:", v47, v48, v49, swift_release(v102).n128_f64[0]);
  _Block_release(v49);

  if (objc_msgSend(v50, "state") == (id)1)
  {
    v51 = *(void **)(v3 + v9);
    *(_QWORD *)(v3 + v9) = v50;
    v52 = v50;

    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v53 = type metadata accessor for Logger(0);
    sub_10000F66C(v53, (uint64_t)qword_1002AA3C8);
    swift_bridgeObjectRetain_n(a2, 2);
    v54 = v52;
    v37 = Logger.logObject.getter(v54);
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v55))
    {
      v56 = swift_slowAlloc(22, -1);
      v57 = swift_slowAlloc(32, -1);
      aBlock[0] = v57;
      *(_DWORD *)v56 = 136446466;
      swift_bridgeObjectRetain(a2);
      v103 = sub_1001A7FE4(a1, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v56 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v56 + 12) = 2050;
      v58 = objc_msgSend(v54, "state");

      v103 = (uint64_t)v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v56 + 14);

      _os_log_impl((void *)&_mh_execute_header, v37, v55, "Assertion acquired [id: %{public}s, assertion state %{public}lu]", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      return;
    }

    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_29;
  }
  v59 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity);
  if (!v59)
    goto LABEL_39;
  v96 = OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity;
  swift_retain(v59);
  v61 = Activity.id.getter(v60);
  v95 = a1;
  if (v61 == a1 && v62 == a2)
  {
    v63 = swift_bridgeObjectRelease();
LABEL_31:
    v65 = v98;
    dispatch thunk of Activity.activityState.getter(v63);
    v66 = v97;
    v67 = v99;
    v68 = v100;
    v94 = *(void (**)(char *, _QWORD, uint64_t))(v97 + 104);
    v94(v99, enum case for ActivityState.dismissed(_:), v100);
    v69 = static ActivityState.== infix(_:_:)(v65, v67);
    v70 = *(void (**)(char *, uint64_t))(v66 + 8);
    v70(v67, v68);
    v70(v65, v68);
    if ((v69 & 1) != 0)
      goto LABEL_33;
    v72 = v98;
    dispatch thunk of Activity.activityState.getter(v71);
    v73 = v99;
    v74 = v100;
    v94(v99, enum case for ActivityState.ended(_:), v100);
    v75 = static ActivityState.== infix(_:_:)(v72, v73);
    v70(v73, v74);
    v70(v72, v74);
    if ((v75 & 1) != 0)
    {
LABEL_33:
      if (qword_10028A440 != -1)
        swift_once(&qword_10028A440, sub_100121004);
      v76 = type metadata accessor for Logger(0);
      v77 = sub_10000F66C(v76, (uint64_t)qword_1002AA3C8);
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v80 = 0;
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Assertion acquisition failed due to activity having already ended", v80, 2u);
        swift_slowDealloc(v80, -1, -1);
      }

      v81 = *(_QWORD *)(v3 + v96);
      *(_QWORD *)(v3 + v96) = 0;
      swift_release(v59);

      swift_release(v81);
      return;
    }
    goto LABEL_38;
  }
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, a1, a2, 0);
  v63 = swift_bridgeObjectRelease();
  if ((v64 & 1) != 0)
    goto LABEL_31;
LABEL_38:
  swift_release(v59);
  a1 = v95;
LABEL_39:
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v82 = type metadata accessor for Logger(0);
  sub_10000F66C(v82, (uint64_t)qword_1002AA3C8);
  swift_bridgeObjectRetain_n(a2, 2);
  v83 = v50;
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v84, v85))
  {
    v86 = swift_slowAlloc(22, -1);
    v87 = swift_slowAlloc(32, -1);
    aBlock[0] = v87;
    *(_DWORD *)v86 = 136446466;
    swift_bridgeObjectRetain(a2);
    v103 = sub_1001A7FE4(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v86 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v86 + 12) = 2050;
    v88 = objc_msgSend(v83, "state");

    v103 = (uint64_t)v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v86 + 14);

    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Acquire assertion FAIL [id:%{public}s, assertion state %{public}lu]", (uint8_t *)v86, 0x16u);
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v86, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }

  v89 = sub_100175CE8();
  v90 = swift_allocError(&type metadata for SpeechTranslationActivityManager.AssertionError, v89, 0, 0);
  *v91 = 0;
  v91[1] = 0;
  v91[2] = 1;
  swift_willThrow(v90);

}

double sub_100174AF8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *Strong;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  double result;
  _BYTE v24[24];

  v10 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v10);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = a3 + 16;
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v15 = swift_allocObject(&unk_10026EF28, 24, 7);
  swift_beginAccess(v13, v24, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v13);
  swift_unknownObjectWeakInit(v15 + 16, Strong);

  type metadata accessor for MainActor(0);
  swift_retain(v15);
  swift_bridgeObjectRetain(a5);
  v17 = a1;
  v18 = swift_errorRetain(a2);
  v19 = static MainActor.shared.getter(v18);
  v20 = (_QWORD *)swift_allocObject(&unk_10026EFA0, 72, 7);
  v20[2] = v19;
  v20[3] = &protocol witness table for MainActor;
  v20[4] = v15;
  v20[5] = a4;
  v20[6] = a5;
  v20[7] = v17;
  v20[8] = a2;
  swift_release(v15);
  v21 = sub_100049DC0((uint64_t)v12, (uint64_t)&unk_100296728, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_100174C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[10] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100174CEC, v10, v11);
}

uint64_t sub_100174CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 80));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_100175E04(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), (uint64_t)objc_msgSend(*(id *)(v0 + 64), "state"), (uint64_t)objc_msgSend(*(id *)(v0 + 64), "invalidationReason"), 0, *(_QWORD *)(v0 + 72));

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100174DA8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_assertion;
  v6 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_assertion);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v7, "invalidate");
    v8 = *(void **)(v2 + v5);
    *(_QWORD *)(v2 + v5) = 0;

    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v9 = type metadata accessor for Logger(0);
    sub_10000F66C(v9, (uint64_t)qword_1002AA3C8);
    v10 = swift_bridgeObjectRetain_n(a2, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v22 = v14;
      *(_DWORD *)v13 = 136446210;
      swift_bridgeObjectRetain(a2);
      v21 = sub_1001A7FE4(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Assertion Released [id: %{public}s]", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v15 = type metadata accessor for Logger(0);
    sub_10000F66C(v15, (uint64_t)qword_1002AA3C8);
    v16 = swift_bridgeObjectRetain_n(a2, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v22 = v20;
      *(_DWORD *)v19 = 136446210;
      swift_bridgeObjectRetain(a2);
      v21 = sub_1001A7FE4(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v19 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not releasing assertion for session [id: %{public}s] since assertion is nil", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      return;
    }

  }
  swift_bridgeObjectRelease_n(a2, 2);
}

unint64_t sub_1001750D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  void *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  _QWORD v18[3];
  _BYTE v19[8];
  unint64_t v20;
  unint64_t v21;

  if (a3 == 1)
    return 0xD00000000000001BLL;
  v7 = (void *)0x80000001002006A0;
  v8 = 0xD000000000000020;
  switch(a2)
  {
    case 0:
      if (a1)
        v8 = 0xD000000000000037;
      else
        v8 = 0xD00000000000001ELL;
      if (a1)
        v7 = (void *)0x8000000100200530;
      else
        v7 = (void *)0x8000000100200570;
      goto LABEL_19;
    case 1:
      goto LABEL_19;
    case 2:
      v8 = 0xD00000000000001CLL;
      v9 = "a session request was denied";
      goto LABEL_18;
    case 3:
      v8 = 0xD000000000000023;
      v9 = "the owner requested an invalidation";
      goto LABEL_18;
    case 4:
      v9 = "the server disconnected from XPC";
      goto LABEL_18;
    case 5:
      v8 = 0xD000000000000018;
      v9 = "the app was foregrounded";
      goto LABEL_18;
    case 6:
      v8 = 0xD000000000000017;
      v9 = "the assertion timed out";
      goto LABEL_18;
    case 7:
      v9 = "the assertion request was denied";
      goto LABEL_18;
    case 8:
      v8 = 0xD00000000000001ALL;
      v9 = "the relevant session ended";
      goto LABEL_18;
    default:
      v8 = 0xD000000000000014;
      v9 = "something went wrong";
LABEL_18:
      v7 = (void *)((unint64_t)(v9 - 32) | 0x8000000000000000);
LABEL_19:
      v10 = (void *)0xE000000000000000;
      swift_errorRetain(a3);
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v20 = 0xD000000000000022;
      v21 = 0x8000000100200500;
      v11._countAndFlagsBits = v8;
      v11._object = v7;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 0x3A726F727245202ELL;
      v12._object = (void *)0xE900000000000020;
      String.append(_:)(v12);
      if (a3)
      {
        swift_getErrorValue(a3, v19, v18);
        v13 = v18[1];
        v14 = v18[2];
        swift_errorRetain(a3);
        v15 = Error.localizedDescription.getter(v13, v14);
        v10 = v16;
        sub_100176894(a1, a2, a3);
      }
      else
      {
        v15 = 0;
      }
      v17._countAndFlagsBits = v15;
      v17._object = v10;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      sub_100176894(a1, a2, a3);
      result = v20;
      break;
  }
  return result;
}

unint64_t sub_100175320()
{
  uint64_t *v0;

  return sub_1001750D8(*v0, v0[1], v0[2]);
}

id sub_10017532C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpeechTranslationActivityManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SpeechTranslationActivityManager()
{
  return objc_opt_self(_TtC17SequoiaTranslator32SpeechTranslationActivityManager);
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes()
{
  return &type metadata for SpeechTranslationActivityAttributes;
}

unint64_t sub_1001753CC()
{
  unint64_t result;

  result = qword_1002966B0;
  if (!qword_1002966B0)
  {
    result = swift_getWitnessTable(&unk_1001F484C, &type metadata for SpeechTranslationActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_1002966B0);
  }
  return result;
}

unint64_t sub_100175414()
{
  unint64_t result;

  result = qword_1002966B8;
  if (!qword_1002966B8)
  {
    result = swift_getWitnessTable(&unk_1001F4824, &type metadata for SpeechTranslationActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_1002966B8);
  }
  return result;
}

unint64_t sub_10017545C()
{
  unint64_t result;

  result = qword_1002966C0;
  if (!qword_1002966C0)
  {
    result = swift_getWitnessTable(&unk_1001F4954, &type metadata for SpeechTranslationActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1002966C0);
  }
  return result;
}

unint64_t sub_1001754A4()
{
  unint64_t result;

  result = qword_1002966C8;
  if (!qword_1002966C8)
  {
    result = swift_getWitnessTable(&unk_1001F492C, &type metadata for SpeechTranslationActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1002966C8);
  }
  return result;
}

unint64_t sub_1001754EC()
{
  unint64_t result;

  result = qword_1002966D0;
  if (!qword_1002966D0)
  {
    result = swift_getWitnessTable(&unk_1001F48C4, &type metadata for SpeechTranslationActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1002966D0);
  }
  return result;
}

unint64_t sub_100175534()
{
  unint64_t result;

  result = qword_1002966D8;
  if (!qword_1002966D8)
  {
    result = swift_getWitnessTable(&unk_1001F4904, &type metadata for SpeechTranslationActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1002966D8);
  }
  return result;
}

unint64_t sub_100175578()
{
  unint64_t result;

  result = qword_1002966E8;
  if (!qword_1002966E8)
  {
    result = swift_getWitnessTable(&unk_1001F4C44, &type metadata for SpeechTranslationActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002966E8);
  }
  return result;
}

void sub_1001755BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

uint64_t sub_100175630(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x75426E6F69746361 && a2 == 0xEC0000006E6F7474)
  {
    v5 = 0xEC0000006E6F7474;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x75426E6F69746361, 0xEC0000006E6F7474, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x436C6F72746E6F63 && a2 == 0xED00007265746E65)
  {
    swift_bridgeObjectRelease(0xED00007265746E65);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x436C6F72746E6F63, 0xED00007265746E65, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10017575C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  __n128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;

  v33 = sub_100006DF4(&qword_100296788);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v34 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100006DF4(&qword_100296790);
  v3 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100296798);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100023AF4(a1, v10);
  v12 = sub_1001767C8();
  v13 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys, v12, v10, v11);
  if (v13)
    goto LABEL_7;
  v14 = v5;
  v15 = v34;
  v30 = a1;
  v35 = v7;
  v16 = KeyedDecodingContainer.allKeys.getter(v6);
  v17 = v6;
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v20 = type metadata accessor for DecodingError(0);
    swift_allocError(v20, &protocol witness table for DecodingError, 0, 0);
    v21 = v9;
    v23 = v22;
    sub_100006DF4(&qword_1002967A8);
    *v23 = &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin;
    v24 = KeyedDecodingContainer.codingPath.getter(v6);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v24, 0xD00000000000002BLL, 0x80000001002004B0, 0);
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v20);
    swift_willThrow(v25);
    v26 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v35 + 8))(v21, v6, v26);
    a1 = v30;
LABEL_7:
    sub_100009C08(a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v16 + 32);
  if ((v6 & 1) != 0)
  {
    v37 = 1;
    v18 = sub_10017680C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys, &v37, v17, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys, v18);
    v19 = v35;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v33);
  }
  else
  {
    v36 = 0;
    v27 = sub_100176850();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys, &v36, v17, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys, v27);
    v19 = v35;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v32);
  }
  v29 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v19 + 8))(v9, v17, v29);
  sub_100009C08(v30);
  return v6;
}

_QWORD *sub_100175A88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[16];

  v3 = sub_100006DF4(&qword_1002966F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100023AF4(a1, v7);
  v10 = sub_100175BA8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SpeechTranslationActivityAttributes.CodingKeys, &type metadata for SpeechTranslationActivityAttributes.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100009C08(a1);
  }
  else
  {
    v11 = sub_100175BEC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin, v12, v3, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin, v11);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v14[15];
    sub_100009C08(a1);
  }
  return v9;
}

unint64_t sub_100175BA8()
{
  unint64_t result;

  result = qword_1002966F8;
  if (!qword_1002966F8)
  {
    result = swift_getWitnessTable(&unk_1001F4BF4, &type metadata for SpeechTranslationActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002966F8);
  }
  return result;
}

unint64_t sub_100175BEC()
{
  unint64_t result;

  result = qword_100296700;
  if (!qword_100296700)
  {
    result = swift_getWitnessTable(&unk_1001F4BCC, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin);
    atomic_store(result, (unint64_t *)&qword_100296700);
  }
  return result;
}

unint64_t sub_100175C30()
{
  unint64_t result;

  result = qword_100296710;
  if (!qword_100296710)
  {
    result = swift_getWitnessTable(&unk_1001F4BA4, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin);
    atomic_store(result, (unint64_t *)&qword_100296710);
  }
  return result;
}

uint64_t sub_100175C74()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100175C98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_100175CC4(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_100174AF8(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100175CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100175CE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100175CE8()
{
  unint64_t result;

  result = qword_100296718;
  if (!qword_100296718)
  {
    result = swift_getWitnessTable(&unk_1001F4B64, &type metadata for SpeechTranslationActivityManager.AssertionError);
    atomic_store(result, &qword_100296718);
  }
  return result;
}

uint64_t sub_100175D2C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  swift_errorRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100175D70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_100296724);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10001D380;
  return sub_100174C78(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_100175E04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v12 = type metadata accessor for Logger(0);
  sub_10000F66C(v12, (uint64_t)qword_1002AA3C8);
  v13 = swift_bridgeObjectRetain_n(a2, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {
    swift_bridgeObjectRelease_n(a2, 2);

    if (a3)
      goto LABEL_5;
LABEL_11:
    if ((a5 & 1) != 0)
      a4 = 7;
    v23 = sub_100175CE8();
    v22 = swift_allocError(&type metadata for SpeechTranslationActivityManager.AssertionError, v23, 0, 0);
    *v21 = 0;
    goto LABEL_14;
  }
  v32 = a5;
  v16 = (uint8_t *)swift_slowAlloc(12, -1);
  v33 = a6;
  v17 = swift_slowAlloc(32, -1);
  v35 = v17;
  *(_DWORD *)v16 = 136446210;
  swift_bridgeObjectRetain(a2);
  v34 = sub_1001A7FE4(a1, a2, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v16 + 4);
  swift_bridgeObjectRelease_n(a2, 3);
  _os_log_impl((void *)&_mh_execute_header, v14, v15, "Assertion invalidated [id: %{public}s]", v16, 0xCu);
  swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
  v18 = v17;
  a6 = v33;
  swift_slowDealloc(v18, -1, -1);
  v19 = v16;
  a5 = v32;
  swift_slowDealloc(v19, -1, -1);

  if (!a3)
    goto LABEL_11;
LABEL_5:
  if (a3 == 1)
    return;
  if (a3 != 2)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x8000000100200470, "SequoiaTranslator/SpeechTranslationActivityManager.swift", 56, 2, 158, 0);
    __break(1u);
    return;
  }
  if ((a5 & 1) != 0)
    a4 = 0;
  v20 = sub_100175CE8();
  v22 = swift_allocError(&type metadata for SpeechTranslationActivityManager.AssertionError, v20, 0, 0);
  *v21 = 2;
LABEL_14:
  v21[1] = a4;
  v21[2] = a6;
  v24 = swift_errorRetain(a6);
  swift_willThrow(v24);
  swift_errorRetain(v22);
  v25 = swift_errorRetain(v22);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 138412290;
    swift_errorRetain(v22);
    v30 = _swift_stdlib_bridgeErrorToNSError(v22);
    v35 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v28 + 4);
    *v29 = v30;
    swift_errorRelease(v22);
    swift_errorRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Assertion invalidation reason: %@", v28, 0xCu);
    v31 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v29, 1, v31);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    swift_errorRelease(v22);
  }
  else
  {
    swift_errorRelease(v22);
    swift_errorRelease(v22);
    swift_errorRelease(v22);

  }
}

unint64_t sub_1001761E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296738;
  if (!qword_100296738)
  {
    v1 = type metadata accessor for ActivityState(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ActivityState, v1);
    atomic_store(result, (unint64_t *)&qword_100296738);
  }
  return result;
}

uint64_t sub_100176228(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_100296730);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t destroy for SpeechTranslationActivityManager.AssertionError(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 16);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t _s17SequoiaTranslator32SpeechTranslationActivityManagerC14AssertionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if ((int)v4 - 1 < 0)
  {
    swift_errorRetain(v3);
    *(_QWORD *)(a1 + 16) = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  return a1;
}

_QWORD *assignWithCopy for SpeechTranslationActivityManager.AssertionError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;

  v4 = a1[2];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[2];
  v7 = v6 - 1;
  if (a2[2] < 0xFFFFFFFFuLL)
    v5 = a2[2];
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v12 = a2[2];
      swift_errorRetain(v12);
      a1[2] = v12;
      swift_errorRelease(v4);
      return a1;
    }
    swift_errorRelease(a1[2]);
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    v10 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v10;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v9 = a2[2];
  swift_errorRetain(v9);
  a1[2] = v9;
  return a1;
}

uint64_t assignWithTake for SpeechTranslationActivityManager.AssertionError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = *(_QWORD *)(a2 + 16);
    if ((int)v7 - 1 < 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v6;
      swift_errorRelease(v4);
      return a1;
    }
    swift_errorRelease(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechTranslationActivityManager.AssertionError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpeechTranslationActivityManager.AssertionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 1;
  }
  return result;
}

uint64_t sub_1001764E8(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_10017650C(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[2] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityManager.AssertionError()
{
  return &type metadata for SpeechTranslationActivityManager.AssertionError;
}

uint64_t storeEnumTagSinglePayload for SpeechTranslationActivityAttributes.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10017658C + 4 * byte_1001F47B9[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001765AC + 4 * byte_1001F47BE[v4]))();
}

_BYTE *sub_10017658C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001765AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001765B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001765BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001765C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001765CC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes.CodingKeys()
{
  return &type metadata for SpeechTranslationActivityAttributes.CodingKeys;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes.ContentState.CodingKeys()
{
  return &type metadata for SpeechTranslationActivityAttributes.ContentState.CodingKeys;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes.ContentState()
{
  return &type metadata for SpeechTranslationActivityAttributes.ContentState;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin()
{
  return &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin;
}

unint64_t sub_10017661C()
{
  unint64_t result;

  result = qword_100296758;
  if (!qword_100296758)
  {
    result = swift_getWitnessTable(&unk_1001F4A0C, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin);
    atomic_store(result, (unint64_t *)&qword_100296758);
  }
  return result;
}

unint64_t sub_100176664()
{
  unint64_t result;

  result = qword_100296760;
  if (!qword_100296760)
  {
    result = swift_getWitnessTable(&unk_1001F4B14, &type metadata for SpeechTranslationActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296760);
  }
  return result;
}

unint64_t sub_1001766AC()
{
  unint64_t result;

  result = qword_100296768;
  if (!qword_100296768)
  {
    result = swift_getWitnessTable(&unk_1001F4A84, &type metadata for SpeechTranslationActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296768);
  }
  return result;
}

unint64_t sub_1001766F4()
{
  unint64_t result;

  result = qword_100296770;
  if (!qword_100296770)
  {
    result = swift_getWitnessTable(&unk_1001F4AAC, &type metadata for SpeechTranslationActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296770);
  }
  return result;
}

unint64_t sub_10017673C()
{
  unint64_t result;

  result = qword_100296778;
  if (!qword_100296778)
  {
    result = swift_getWitnessTable(&unk_1001F4A34, &type metadata for SpeechTranslationActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296778);
  }
  return result;
}

unint64_t sub_100176784()
{
  unint64_t result;

  result = qword_100296780;
  if (!qword_100296780)
  {
    result = swift_getWitnessTable(&unk_1001F4A5C, &type metadata for SpeechTranslationActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296780);
  }
  return result;
}

unint64_t sub_1001767C8()
{
  unint64_t result;

  result = qword_1002967A0;
  if (!qword_1002967A0)
  {
    result = swift_getWitnessTable(&unk_1001F4ED0, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967A0);
  }
  return result;
}

unint64_t sub_10017680C()
{
  unint64_t result;

  result = qword_1002967B0;
  if (!qword_1002967B0)
  {
    result = swift_getWitnessTable(&unk_1001F4E80, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967B0);
  }
  return result;
}

unint64_t sub_100176850()
{
  unint64_t result;

  result = qword_1002967B8;
  if (!qword_1002967B8)
  {
    result = swift_getWitnessTable(&unk_1001F4E30, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967B8);
  }
  return result;
}

uint64_t sub_100176894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_errorRelease(a3);
  return result;
}

uint64_t _s17SequoiaTranslator35SpeechTranslationActivityAttributesV24LiveActivitySourceOriginOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001768F4 + 4 * byte_1001F47C8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100176928 + 4 * byte_1001F47C3[v4]))();
}

uint64_t sub_100176928(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100176930(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100176938);
  return result;
}

uint64_t sub_100176944(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10017694CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100176950(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100176958(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys()
{
  return &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys()
{
  return &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys;
}

ValueMetadata *type metadata accessor for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys()
{
  return &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys;
}

unint64_t sub_100176998()
{
  unint64_t result;

  result = qword_1002967D8;
  if (!qword_1002967D8)
  {
    result = swift_getWitnessTable(&unk_1001F4E08, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967D8);
  }
  return result;
}

unint64_t sub_1001769E0()
{
  unint64_t result;

  result = qword_1002967E0;
  if (!qword_1002967E0)
  {
    result = swift_getWitnessTable(&unk_1001F4D28, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967E0);
  }
  return result;
}

unint64_t sub_100176A28()
{
  unint64_t result;

  result = qword_1002967E8;
  if (!qword_1002967E8)
  {
    result = swift_getWitnessTable(&unk_1001F4D50, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ActionButtonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967E8);
  }
  return result;
}

unint64_t sub_100176A70()
{
  unint64_t result;

  result = qword_1002967F0;
  if (!qword_1002967F0)
  {
    result = swift_getWitnessTable(&unk_1001F4CD8, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967F0);
  }
  return result;
}

unint64_t sub_100176AB8()
{
  unint64_t result;

  result = qword_1002967F8;
  if (!qword_1002967F8)
  {
    result = swift_getWitnessTable(&unk_1001F4D00, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.ControlCenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002967F8);
  }
  return result;
}

unint64_t sub_100176B00()
{
  unint64_t result;

  result = qword_100296800;
  if (!qword_100296800)
  {
    result = swift_getWitnessTable(&unk_1001F4D78, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296800);
  }
  return result;
}

unint64_t sub_100176B48()
{
  unint64_t result;

  result = qword_100296808;
  if (!qword_100296808)
  {
    result = swift_getWitnessTable(&unk_1001F4DA0, &type metadata for SpeechTranslationActivityAttributes.LiveActivitySourceOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296808);
  }
  return result;
}

double sub_100176BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for LiveActivityView(0);
  v5 = __chkstk_darwin(v4);
  v8 = (_QWORD *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_activeLayoutMode);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_activeLayoutMode) = a1;
  if (a1 != 4 && v9 == 4)
  {
    dispatch thunk of UIHostingController.rootView.getter(v5);
    v10 = v8[1];
    v16[1] = *v8;
    v16[2] = v10;
    sub_100006DF4((uint64_t *)&unk_100297A90);
    State.wrappedValue.getter(&v17);
    v11 = v17;
    sub_100177B20((uint64_t)v8);
    v12 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_currentActivity;
    v13 = *(_QWORD *)(v2
                    + OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_currentActivity);
    swift_retain(v13);
    sub_10010F764(v14);
    swift_release(v11);
    swift_release(v13);
    v15 = *(_QWORD *)(v2 + v12);
    *(_QWORD *)(v2 + v12) = 0;
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

char *sub_100176E38(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *ObjCClassFromMetadata;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  NSString v25;
  objc_class *v26;
  void *v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  void *v36;
  objc_super v37;
  _QWORD *v38;
  _QWORD v39[2];

  v35[1] = a1;
  v36 = a3;
  v5 = type metadata accessor for LiveActivityView(0);
  v6 = __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (char *)v35 - v9;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_currentActivity] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_activeLayoutMode] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_contentRole] = 2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_preferredLayoutMode] = 4;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_presentationBehaviors] = 8;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_maximumLayoutMode] = 4;
  v11 = &v3[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_associatedScenePersistenceIdentifier];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_leadingView;
  v13 = type metadata accessor for EmptyActivityPlaceholderView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v13);
  v15 = objc_allocWithZone(ObjCClassFromMetadata);
  v16 = v3;
  *(_QWORD *)&v3[v12] = objc_msgSend(v15, "init");
  v17 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_trailingView;
  *(_QWORD *)&v16[v17] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v18 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_minimalView;
  *(_QWORD *)&v16[v18] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v19 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_hostingController;
  v20 = type metadata accessor for LiveActivityViewModel(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v38 = sub_10010DED4();
  State.init(wrappedValue:)(v39, &v38, v20);
  v21 = v39[1];
  *v8 = v39[0];
  v8[1] = v21;
  v22 = (_QWORD *)((char *)v8 + *(int *)(v5 + 20));
  *v22 = swift_getKeyPath(&unk_1001F4FA8);
  v23 = sub_100006DF4(&qword_1002969A0);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  sub_100177F88((uint64_t)v8, (uint64_t)v10);
  v24 = objc_allocWithZone((Class)sub_100006DF4(&qword_1002969A8));
  *(_QWORD *)&v16[v19] = SecureHostingController.init(rootView:)(v10);

  if (a2)
  {
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
  }
  v26 = (objc_class *)type metadata accessor for SpeechTranslationApertureElementViewController();
  v37.receiver = v16;
  v37.super_class = v26;
  v27 = v36;
  v28 = objc_msgSendSuper2(&v37, "initWithNibName:bundle:", v25, v36);

  v29 = qword_10028A4D8;
  v30 = (char *)v28;
  if (v29 != -1)
    swift_once(&qword_10028A4D8, sub_100173130);
  v31 = qword_1002AA528;

  v32 = *(_QWORD *)(v31 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity);
  v33 = *(_QWORD *)&v30[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_currentActivity];
  *(_QWORD *)&v30[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_currentActivity] = v32;
  swift_retain(v32);
  swift_release(v33);
  return v30;
}

void sub_100177190()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  Class isa;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  objc_super v62;

  v1 = v0;
  v2 = type metadata accessor for UIHostingControllerSizingOptions(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (objc_class *)type metadata accessor for SpeechTranslationApertureElementViewController();
  v62.receiver = v1;
  v62.super_class = v6;
  objc_msgSendSuper2(&v62, "viewDidLoad");
  v7 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_hostingController];
  v8 = sub_100006DF4(&qword_100296980);
  v9 = swift_allocObject(v8, ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ 2 * *(_QWORD *)(v3 + 72), *(unsigned __int8 *)(v3 + 80) | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001E4D60;
  v10 = static UIHostingControllerSizingOptions.preferredContentSize.getter();
  static UIHostingControllerSizingOptions.intrinsicContentSize.getter(v10);
  v61 = v9;
  v11 = sub_100177EC0();
  v12 = sub_100006DF4(&qword_100296990);
  v13 = sub_100177F08();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v12, v13, v2, v11);
  dispatch thunk of UIHostingController.sizingOptions.setter(v5);
  objc_msgSend(v1, "addChildViewController:", v7);
  v14 = objc_msgSend(v1, "view");
  if (!v14)
  {
    __break(1u);
    goto LABEL_15;
  }
  v15 = v14;
  v16 = objc_msgSend(v7, "view");
  if (!v16)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = v16;
  objc_msgSend(v15, "addSubview:", v16);

  v18 = objc_msgSend(v7, "view");
  if (!v18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19 = v18;
  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  objc_msgSend(v7, "didMoveToParentViewController:", v1);
  v20 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v21 = swift_allocObject(v20, 64, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1001E7590;
  v22 = objc_msgSend(v7, "view");
  if (!v22)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "leadingAnchor");

  v25 = objc_msgSend(v1, "view");
  if (!v25)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "leadingAnchor");

  v28 = objc_msgSend(v24, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v21 + 32) = v28;
  v29 = objc_msgSend(v7, "view");
  if (!v29)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "trailingAnchor");

  v32 = objc_msgSend(v1, "view");
  if (!v32)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, "trailingAnchor");

  v35 = objc_msgSend(v31, "constraintEqualToAnchor:", v34);
  *(_QWORD *)(v21 + 40) = v35;
  v36 = objc_msgSend(v7, "view");
  if (!v36)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, "topAnchor");

  v39 = objc_msgSend(v1, "view");
  if (!v39)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v40 = v39;
  v41 = objc_msgSend(v39, "topAnchor");

  v42 = objc_msgSend(v38, "constraintEqualToAnchor:", v41);
  *(_QWORD *)(v21 + 48) = v42;
  v43 = objc_msgSend(v7, "view");
  if (!v43)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v44 = v43;
  v45 = objc_msgSend(v43, "bottomAnchor");

  v46 = objc_msgSend(v1, "view");
  if (!v46)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v47 = v46;
  v48 = (void *)objc_opt_self(NSLayoutConstraint);
  v49 = objc_msgSend(v47, "bottomAnchor");

  v50 = objc_msgSend(v45, "constraintEqualToAnchor:", v49);
  *(_QWORD *)(v21 + 56) = v50;
  v61 = v21;
  specialized Array._endMutation()(v51);
  sub_100025254();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v48, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v53 = objc_msgSend(v1, "view");
  if (v53)
  {
    v54 = v53;
    v55 = sub_100006DF4(&qword_10028FE40);
    v56 = swift_allocObject(v55, 48, 7);
    *(_OWORD *)(v56 + 16) = xmmword_1001E64F0;
    *(_QWORD *)(v56 + 32) = type metadata accessor for UITraitBacklightLuminance(0);
    *(_QWORD *)(v56 + 40) = &protocol witness table for UITraitBacklightLuminance;
    v57 = swift_allocObject(&unk_10026F3C0, 24, 7);
    swift_unknownObjectWeakInit(v57 + 16, v1);
    v58 = sub_100006DF4(&qword_10028FE48);
    v59 = UIView.registerForTraitChanges<A>(_:handler:)(v56, sub_100177F78, v57, v58);
    swift_unknownObjectRelease(v59);

    swift_bridgeObjectRelease();
    swift_release(v57);
    return;
  }
LABEL_25:
  __break(1u);
}

void sub_10017772C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  id v7;
  id v8;
  _BYTE v9[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong)
    goto LABEL_4;
  v5 = Strong;
  v6 = objc_msgSend(Strong, "view");

  if (!v6)
  {
    __break(1u);
    return;
  }
  v7 = objc_msgSend(v6, "traitCollection");

  v8 = objc_msgSend(v7, "_backlightLuminance");
  if (v8 != (id)2)
  {
LABEL_4:
    if (qword_10028A4D8 != -1)
      swift_once(&qword_10028A4D8, sub_100173130);
    sub_100173974(0);
  }
}

id sub_100177988()
{
  return sub_100085B40(type metadata accessor for SpeechTranslationApertureElementViewController);
}

uint64_t type metadata accessor for SpeechTranslationApertureElementViewController()
{
  return objc_opt_self(_TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController);
}

id sub_100177AF4()
{
  return sub_100085B40(type metadata accessor for EmptyActivityPlaceholderView);
}

uint64_t type metadata accessor for EmptyActivityPlaceholderView()
{
  return objc_opt_self(_TtC17SequoiaTranslator28EmptyActivityPlaceholderView);
}

uint64_t sub_100177B20(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LiveActivityView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100177B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100177B6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100177B74()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *ObjCClassFromMetadata;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  v1 = v0;
  v2 = type metadata accessor for LiveActivityView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (char *)&v20 - v6;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_currentActivity] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_activeLayoutMode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_contentRole] = 2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_preferredLayoutMode] = 4;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_presentationBehaviors] = 8;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_maximumLayoutMode] = 4;
  v8 = &v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_associatedScenePersistenceIdentifier];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_leadingView;
  v10 = type metadata accessor for EmptyActivityPlaceholderView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v10);
  *(_QWORD *)&v1[v9] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v12 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_trailingView;
  *(_QWORD *)&v1[v12] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v13 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_minimalView;
  *(_QWORD *)&v1[v13] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v14 = OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_hostingController;
  v15 = type metadata accessor for LiveActivityViewModel(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v21 = sub_10010DED4();
  State.init(wrappedValue:)(v22, &v21, v15);
  v16 = v22[1];
  *v5 = v22[0];
  v5[1] = v16;
  v17 = (_QWORD *)((char *)v5 + *(int *)(v2 + 20));
  *v17 = swift_getKeyPath(&unk_1001F4FA8);
  v18 = sub_100006DF4(&qword_1002969A0);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  sub_100177F88((uint64_t)v5, (uint64_t)v7);
  v19 = objc_allocWithZone((Class)sub_100006DF4(&qword_1002969A8));
  *(_QWORD *)&v1[v14] = SecureHostingController.init(rootView:)(v7);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/SpeechTranslationApertureElementViewController.swift", 70, 2, 56, 0);
  __break(1u);
}

void sub_100177DA8()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;

  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v2 = v1;
  v13 = objc_msgSend(v1, "window");

  if (v13)
  {
    v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator46SpeechTranslationApertureElementViewController_hostingController], "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v13, "bounds");
      v6 = v5;
      v8 = v7;
      LODWORD(v5) = 1148846080;
      LODWORD(v7) = 1112014848;
      objc_msgSend(v4, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v6, v8, v5, v7);
      v10 = v9;
      v12 = v11;

      objc_msgSend(v0, "setPreferredContentSize:", v10, v12);
      return;
    }
    goto LABEL_7;
  }
}

unint64_t sub_100177EC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296988;
  if (!qword_100296988)
  {
    v1 = type metadata accessor for UIHostingControllerSizingOptions(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UIHostingControllerSizingOptions, v1);
    atomic_store(result, (unint64_t *)&qword_100296988);
  }
  return result;
}

unint64_t sub_100177F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296998;
  if (!qword_100296998)
  {
    v1 = sub_1000070BC(&qword_100296990);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100296998);
  }
  return result;
}

uint64_t sub_100177F54()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100177F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10017772C(a1, a2, v2);
}

uint64_t sub_100177F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LiveActivityView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_100177FCC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  objc_super v8;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_localePair] = 0;
  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_sourceLocale];
  v2 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0;
  Date.init()(v3);
  v4 = &v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstResult];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(&v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTranslation], 1, 1, v5);
  v6(&v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTTS], 1, 1, v5);
  v6(&v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstLID], 1, 1, v5);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_inputTokenCount] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_inputSubtokenCount] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_airplaneModeEnabled] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_onDeviceModeEnabled] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_offline] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_censorSpeech] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_senseDisambiguation] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_lidTriggered] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_lowQualityMT] = 0;
  v3[OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_nBestDisplay] = 0;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for SpeechTranslationInstrumentation(0);
  return objc_msgSendSuper2(&v8, "init");
}

id sub_10017818C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpeechTranslationInstrumentation(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100178284()
{
  return type metadata accessor for SpeechTranslationInstrumentation(0);
}

uint64_t type metadata accessor for SpeechTranslationInstrumentation(uint64_t a1)
{
  uint64_t result;

  result = qword_1002969E0;
  if (!qword_1002969E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SpeechTranslationInstrumentation);
  return result;
}

void sub_1001782C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v8[0] = "\b";
  sub_10015C304(319, (unint64_t *)&qword_100292A50, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10015C304(319, (unint64_t *)&qword_10028E960, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        v11 = v9;
        v12 = v9;
        v13 = (char *)&value witness table for Builtin.Int64 + 64;
        v14 = (char *)&value witness table for Builtin.Int64 + 64;
        v15 = &unk_1001F5020;
        v16 = &unk_1001F5020;
        v17 = &unk_1001F5020;
        v18 = &unk_1001F5020;
        v19 = &unk_1001F5020;
        v20 = &unk_1001F5020;
        v21 = &unk_1001F5020;
        v22 = &unk_1001F5020;
        swift_updateClassMetadata2(a1, 256, 17, v8, a1 + 80);
      }
    }
  }
}

void *sub_1001783C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  char v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  char v42;
  void *v43;
  Class v44;
  char v45;
  void *v46;
  Class v47;
  char v48;
  void *v49;
  Class v50;
  char v51;
  void *v52;
  Class v53;
  char v54;
  void *v55;
  Class v56;
  char v57;
  void *v58;
  Class v59;
  char v60;
  void *v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  char *v64;
  Class v65;
  char v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  Class v71;
  char v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Class v77;
  char v78;
  void *v79;
  char *v80;
  Class v81;
  char v82;
  __n128 v83;
  uint64_t v84;
  char *v85;
  Class v86;
  char v87;
  __n128 v88;
  Class v89;
  char v90;
  void *v91;
  Class v92;
  char v93;
  void *v94;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;

  v1 = v0;
  v2 = sub_100006DF4(&qword_1002948B0);
  v3 = __chkstk_darwin(v2);
  v103 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v102 = (char *)&v96 - v6;
  v7 = __chkstk_darwin(v5);
  v101 = (char *)&v96 - v8;
  __chkstk_darwin(v7);
  v100 = (char *)&v96 - v9;
  v10 = type metadata accessor for Date(0);
  v104 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v99 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v98 = (char *)&v96 - v14;
  v15 = __chkstk_darwin(v13);
  v97 = (char *)&v96 - v16;
  __chkstk_darwin(v15);
  v96 = (char *)&v96 - v17;
  v18 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v18);
  v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Locale(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_localePair);
  v26 = &_swiftEmptyDictionarySingleton;
  if (v25)
  {
    v27 = v25;
    sub_100005EC8();
    v29 = v28;
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v110 = &_swiftEmptyDictionarySingleton;
    sub_1001AAA14((uint64_t)v30, 0x6150656C61636F6CLL, 0xEA00000000007269, isUniquelyReferenced_nonNull_native);
    v26 = v110;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v32 = v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_sourceLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_sourceLocale, &v110, 0, 0);
  sub_10000B074(v32, (uint64_t)v20, (uint64_t *)&unk_10028FE50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10000A020((uint64_t)v20, (uint64_t *)&unk_10028FE50);
  }
  else
  {
    v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    Locale.ltIdentifier.getter(v33);
    v35 = v34;
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    v37 = swift_isUniquelyReferenced_nonNull_native(v26);
    v109 = v26;
    sub_1001AAA14((uint64_t)v36, 0x6F4C656372756F73, 0xEC000000656C6163, v37);
    v26 = v109;
    v38 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v24, v21, v38);
  }
  v39 = v104;
  v40 = (uint64_t)v100;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v42 = swift_isUniquelyReferenced_nonNull_native(v26);
  v109 = v26;
  sub_1001AAA14((uint64_t)isa, 0x6563697665446E6FLL, 0xEC00000065646F4DLL, v42);
  v43 = v109;
  swift_bridgeObjectRelease(0x8000000000000000);
  v44 = Bool._bridgeToObjectiveC()().super.super.isa;
  v45 = swift_isUniquelyReferenced_nonNull_native(v43);
  v109 = v43;
  sub_1001AAA14((uint64_t)v44, 0x656E696C66666FLL, 0xE700000000000000, v45);
  v46 = v109;
  swift_bridgeObjectRelease(0x8000000000000000);
  v47 = Bool._bridgeToObjectiveC()().super.super.isa;
  v48 = swift_isUniquelyReferenced_nonNull_native(v46);
  v109 = v46;
  sub_1001AAA14((uint64_t)v47, 0x7053726F736E6563, 0xEC00000068636565, v48);
  v49 = v109;
  swift_bridgeObjectRelease(0x8000000000000000);
  v50 = Bool._bridgeToObjectiveC()().super.super.isa;
  v51 = swift_isUniquelyReferenced_nonNull_native(v49);
  v109 = v49;
  sub_1001AAA14((uint64_t)v50, 0xD000000000000013, 0x8000000100200BF0, v51);
  v52 = v109;
  swift_bridgeObjectRelease(0x8000000000000000);
  v53 = Bool._bridgeToObjectiveC()().super.super.isa;
  v54 = swift_isUniquelyReferenced_nonNull_native(v52);
  v109 = v52;
  sub_1001AAA14((uint64_t)v53, 0x676769725444494CLL, 0xEC00000064657265, v54);
  v55 = v109;
  swift_bridgeObjectRelease(0x8000000000000000);
  v56 = Bool._bridgeToObjectiveC()().super.super.isa;
  v57 = swift_isUniquelyReferenced_nonNull_native(v55);
  v109 = v55;
  sub_1001AAA14((uint64_t)v56, 0x696C617551776F6CLL, 0xEC000000544D7974, v57);
  v58 = v109;
  swift_bridgeObjectRelease(0x8000000000000000);
  v59 = Bool._bridgeToObjectiveC()().super.super.isa;
  v60 = swift_isUniquelyReferenced_nonNull_native(v58);
  v109 = v58;
  sub_1001AAA14((uint64_t)v59, 0x736944747365426ELL, 0xEC00000079616C70, v60);
  v61 = v109;
  swift_bridgeObjectRelease(0x8000000000000000);
  v62 = v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstResult;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstResult, &v109, 0, 0);
  sub_10000B074(v62, v40, &qword_1002948B0);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  if (v63(v40, 1, v10) == 1)
  {
    sub_10000A020(v40, &qword_1002948B0);
  }
  else
  {
    v64 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v96, v40, v10);
    Date.timeIntervalSince(_:)(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_start);
    v65 = Double._bridgeToObjectiveC()().super.super.isa;
    v66 = swift_isUniquelyReferenced_nonNull_native(v61);
    v108 = v61;
    sub_1001AAA14((uint64_t)v65, 0xD000000000000011, 0x8000000100200C50, v66);
    v61 = v108;
    v67 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v39 + 8))(v64, v10, v67);
  }
  v68 = (uint64_t)v101;
  v69 = v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTranslation;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTranslation, &v108, 0, 0);
  sub_10000B074(v69, v68, &qword_1002948B0);
  if (v63(v68, 1, v10) == 1)
  {
    sub_10000A020(v68, &qword_1002948B0);
  }
  else
  {
    v70 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v97, v68, v10);
    Date.timeIntervalSince(_:)(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_start);
    v71 = Double._bridgeToObjectiveC()().super.super.isa;
    v72 = swift_isUniquelyReferenced_nonNull_native(v61);
    v107 = v61;
    sub_1001AAA14((uint64_t)v71, 0xD00000000000001CLL, 0x8000000100200C30, v72);
    v61 = v107;
    v73 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v39 + 8))(v70, v10, v73);
  }
  v74 = (uint64_t)v102;
  v75 = (uint64_t)v103;
  v76 = v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTTS;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstTTS, &v107, 0, 0);
  sub_10000B074(v76, v74, &qword_1002948B0);
  if (v63(v74, 1, v10) == 1)
  {
    sub_10000A020(v74, &qword_1002948B0);
    sub_10008BA78();
    v77 = NSNumber.init(floatLiteral:)(-1.0).super.super.isa;
    v78 = swift_isUniquelyReferenced_nonNull_native(v61);
    v106 = v61;
    sub_1001AAA14((uint64_t)v77, 0x69466F54656D6974, 0xEE00535454747372, v78);
    v79 = v106;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    v80 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v98, v74, v10);
    Date.timeIntervalSince(_:)(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_start);
    v81 = Double._bridgeToObjectiveC()().super.super.isa;
    v82 = swift_isUniquelyReferenced_nonNull_native(v61);
    v106 = v61;
    sub_1001AAA14((uint64_t)v81, 0x69466F54656D6974, 0xEE00535454747372, v82);
    v79 = v106;
    v83 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v39 + 8))(v80, v10, v83);
  }
  v84 = v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstLID;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_firstLID, &v106, 0, 0);
  sub_10000B074(v84, v75, &qword_1002948B0);
  if (v63(v75, 1, v10) == 1)
  {
    sub_10000A020(v75, &qword_1002948B0);
  }
  else
  {
    v85 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v99, v75, v10);
    Date.timeIntervalSince(_:)(v1 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationInstrumentation_start);
    v86 = Double._bridgeToObjectiveC()().super.super.isa;
    v87 = swift_isUniquelyReferenced_nonNull_native(v79);
    v105 = v79;
    sub_1001AAA14((uint64_t)v86, 0x494C6F74656D6974, 0xE900000000000044, v87);
    v79 = v105;
    v88 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v39 + 8))(v85, v10, v88);
  }
  v89 = Int._bridgeToObjectiveC()().super.super.isa;
  v90 = swift_isUniquelyReferenced_nonNull_native(v79);
  v105 = v79;
  sub_1001AAA14((uint64_t)v89, 0xD000000000000012, 0x8000000100200BA0, v90);
  v91 = v105;
  swift_bridgeObjectRelease(0x8000000000000000);
  v92 = Int._bridgeToObjectiveC()().super.super.isa;
  v93 = swift_isUniquelyReferenced_nonNull_native(v91);
  v105 = v91;
  sub_1001AAA14((uint64_t)v92, 0x6B6F547475706E69, 0xEF746E756F436E65, v93);
  v94 = v105;
  swift_bridgeObjectRelease(0x8000000000000000);
  return v94;
}

uint64_t getEnumTagSinglePayload for StaticImage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100178EE0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StaticImage()
{
  return &type metadata for StaticImage;
}

uint64_t sub_100178EF8(uint64_t a1, uint64_t a2)
{
  return sub_100178F10(*(void **)a1, *(_BYTE *)(a1 + 8), *(void **)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_100178F10(void *a1, char a2, void *a3, char a4)
{
  char v6;
  id v7;
  id v8;

  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 != 1)
        goto LABEL_6;
LABEL_8:
      sub_100178FB0();
      v7 = a1;
      v8 = a3;
      v6 = static NSObject.== infix(_:_:)(v7, v8);

      return v6 & 1;
    }
    if (a4 == 2)
      goto LABEL_8;
  }
  else if (!a4)
  {
    goto LABEL_8;
  }
LABEL_6:
  v6 = 0;
  return v6 & 1;
}

unint64_t sub_100178FB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002930B0;
  if (!qword_1002930B0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002930B0);
  }
  return result;
}

uint64_t sub_100178FEC()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  id v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  void *v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  _BYTE v31[25];
  __int128 v32;

  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    v2 = *(_OWORD *)(v0 + 64);
    v32 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)v31 = v2;
    *(_OWORD *)&v31[9] = *(_OWORD *)(v0 + 73);
    sub_10001B1E0((uint64_t)&v32);
    v3 = v1;
    sub_100006DF4(&qword_100291428);
    Binding.wrappedValue.getter(&v29);
    v4 = (void *)v29;
    v5 = BYTE8(v29);
    v29 = *(_OWORD *)(v0 + 96);
    v30 = *(_BYTE *)(v0 + 112);
    v6 = sub_100006DF4(&qword_100296C60);
    Binding.projectedValue.getter(v31, v6);
    v7 = *(_QWORD *)(v0 + 16);
    if (v7)
    {
      v8 = *(_OWORD *)v31;
      v25 = v31[16];
      v26 = v5;
      v29 = *(_OWORD *)(v0 + 120);
      sub_10001B1E0((uint64_t)&v29);
      swift_retain(v7);
      v9 = sub_100006DF4(&qword_100296AA8);
      UIViewControllerRepresentableContext.coordinator.getter(&v28, v9);
      v10 = *(void **)(v0 + 32);
      if (v10)
      {
        v11 = v28;
        v12 = *((_QWORD *)&v32 + 1);
        v13 = *((_QWORD *)&v29 + 1);
        *(_OWORD *)v31 = *(_OWORD *)(v0 + 192);
        *(_QWORD *)&v31[16] = *(_QWORD *)(v0 + 208);
        v14 = v10;
        sub_100006DF4(&qword_100293E00);
        Binding.wrappedValue.getter(&v27);
        v15 = v27;
        v24 = objc_allocWithZone((Class)type metadata accessor for StaticImageViewController());
        v16 = sub_10017A25C(v3, v12, v4, v26, v8, *((uint64_t *)&v8 + 1), v25, v7, v13, v11, v14, v15, v24);
        swift_release(v11);

        swift_release(v15);
        sub_10001B5BC((uint64_t)&v29);
        swift_release(*((_QWORD *)&v8 + 1));
        swift_release(v7);
        swift_release(v8);
        sub_1000E05B8(v4, v26);
        sub_10001B5BC((uint64_t)&v32);

        sub_10017D478();
        return (uint64_t)v16;
      }
      v18 = *(_QWORD *)(v0 + 40);
      v19 = type metadata accessor for FavoritesImporter();
      v20 = (uint64_t (*)(uint64_t))type metadata accessor for FavoritesImporter;
      v21 = &qword_1002916B0;
      v22 = &unk_1001ED8B4;
    }
    else
    {
      v18 = *(_QWORD *)(v0 + 24);
      v19 = type metadata accessor for ConversationContext(0);
      v20 = type metadata accessor for ConversationContext;
      v21 = &qword_10028B090;
      v22 = &unk_1001E9C74;
    }
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 8);
    v19 = type metadata accessor for ConversationManager(0);
    v20 = type metadata accessor for ConversationManager;
    v21 = (unint64_t *)&unk_1002954F0;
    v22 = &unk_1001EB054;
  }
  v23 = sub_100007D5C(v21, v20, (uint64_t)v22);
  result = EnvironmentObject.error()(0, v18, v19, v23);
  __break(1u);
  return result;
}

void sub_100179270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  int v5;
  id v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  id v11;
  id v12;
  char v13;
  void *v14;
  char v15;
  CGFloat v16;
  double v17;
  double v18;
  uint64_t v19;
  id v20;
  unsigned __int8 v21;
  _OWORD v22[2];
  CGRect v23;

  v3 = a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image;
  v4 = *(void **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image);
  v5 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image + 8);
  v22[0] = *(_OWORD *)(v1 + 64);
  *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(v1 + 73);
  sub_1000E05CC(v4, v5);
  sub_100006DF4(&qword_100291428);
  Binding.wrappedValue.getter(&v20);
  v6 = v20;
  v7 = v21;
  if (v5 != 255)
  {
    if (v21 == 255)
    {
      v11 = v4;
      v7 = v5;
      goto LABEL_16;
    }
    if (v5)
    {
      if (v5 == 1)
      {
        if (v21 == 1)
        {
          sub_100178FB0();
          sub_1000E05CC(v4, 1);
          sub_1000E05CC(v6, 1);
          v8 = static NSObject.== infix(_:_:)(v4, v6);
          sub_1000E05B8(v6, 1);
          sub_1000E05B8(v6, 1);
          sub_1000E05B8(v4, 1);
          v9 = v4;
          v10 = 1;
          goto LABEL_25;
        }
        sub_1000E05B8(v20, v21);
        v11 = v4;
        v7 = 1;
LABEL_16:
        sub_1000E05B8(v11, v7);
LABEL_17:
        Binding.wrappedValue.getter(&v20);
        v12 = v20;
        v13 = v21;
        v14 = *(void **)v3;
        *(double *)v3 = *(double *)&v20;
        v15 = *(_BYTE *)(v3 + 8);
        *(_BYTE *)(v3 + 8) = v13;
        sub_1000E05CC(v12, v13);
        sub_1000E05B8(v14, v15);
        sub_10017B6F4();
        sub_1000E05B8(v12, v13);
        goto LABEL_18;
      }
      if (v21 != 2)
      {
        sub_1000E05B8(v20, v21);
        v11 = v4;
        v7 = 2;
        goto LABEL_16;
      }
      sub_100178FB0();
      sub_1000E05CC(v4, 2);
      sub_1000E05CC(v6, 2);
      v8 = static NSObject.== infix(_:_:)(v4, v6);
      sub_1000E05B8(v6, 2);
      sub_1000E05B8(v6, 2);
      sub_1000E05B8(v4, 2);
      v9 = v4;
      v10 = 2;
    }
    else
    {
      if (v21)
      {
        sub_1000E05B8(v20, v21);
        v11 = v4;
        v7 = 0;
        goto LABEL_16;
      }
      sub_100178FB0();
      sub_1000E05CC(v4, 0);
      sub_1000E05CC(v6, 0);
      v8 = static NSObject.== infix(_:_:)(v4, v6);
      sub_1000E05B8(v6, 0);
      sub_1000E05B8(v6, 0);
      sub_1000E05B8(v4, 0);
      v9 = v4;
      v10 = 0;
    }
LABEL_25:
    sub_1000E05B8(v9, v10);
    if ((v8 & 1) != 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v21 != 255)
  {
    v11 = v20;
    goto LABEL_16;
  }
LABEL_18:
  sub_100006DF4(&qword_10028F2B0);
  Binding.wrappedValue.getter(&v20);
  if (*(double *)&v20 > 0.0)
  {
    Binding.wrappedValue.getter(&v20);
    if (*(double *)&v20 > 0.0)
    {
      Binding.wrappedValue.getter(&v20);
      v16 = *(double *)&v20;
      Binding.wrappedValue.getter(&v20);
      v17 = *(double *)&v20;
      Binding.wrappedValue.getter(&v20);
      v18 = v17 - *(double *)&v20;
      v19 = a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport;
      if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport + 32) & 1) != 0
        || (v23.origin.x = 0.0,
            v23.size.width = 0.0,
            v23.origin.y = v16,
            v23.size.height = v18,
            !CGRectEqualToRect(*(CGRect *)v19, v23)))
      {
        *(_QWORD *)v19 = 0;
        *(CGFloat *)(v19 + 8) = v16;
        *(_QWORD *)(v19 + 16) = 0;
        *(double *)(v19 + 24) = v18;
        *(_BYTE *)(v19 + 32) = 0;
        sub_10017F52C();
        sub_10017AD34();
      }
    }
  }
}

void sub_100179670(char a1, char a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  UIAccessibilityNotifications v7;
  NSString v8;
  uint64_t v9;

  sub_1000CF868(a1, a2);
  if (qword_10028A3E0 != -1)
    swift_once(&qword_10028A3E0, sub_1000CF7BC);
  v3 = qword_1002AA268;
  KeyPath = swift_getKeyPath(&unk_1001F51A0);
  v5 = swift_getKeyPath(&unk_1001F51C8);
  static Published.subscript.getter(&v9, v3, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  if (v9 == 5 || (sub_1001D5E38(a1), (v6 & 1) == 0))
  {
    if (UIAccessibilityIsVoiceOverRunning())
    {
      v7 = UIAccessibilityAnnouncementNotification;
      sub_1000CF3B8(a1);
      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      UIAccessibilityPostNotification(v7, v8);

    }
  }
}

uint64_t sub_100179770()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[13];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 192);
  v8[10] = *(_OWORD *)(v0 + 176);
  v8[11] = v1;
  v8[12] = *(_OWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 224);
  v2 = *(_OWORD *)(v0 + 128);
  v8[6] = *(_OWORD *)(v0 + 112);
  v8[7] = v2;
  v3 = *(_OWORD *)(v0 + 160);
  v8[8] = *(_OWORD *)(v0 + 144);
  v8[9] = v3;
  v4 = *(_OWORD *)(v0 + 64);
  v8[2] = *(_OWORD *)(v0 + 48);
  v8[3] = v4;
  v5 = *(_OWORD *)(v0 + 96);
  v8[4] = *(_OWORD *)(v0 + 80);
  v8[5] = v5;
  v6 = *(_OWORD *)(v0 + 32);
  v8[0] = *(_OWORD *)(v0 + 16);
  v8[1] = v6;
  sub_10017A5BC((uint64_t)v8);
  return swift_deallocClassInstance(v0, 232, 7);
}

uint64_t type metadata accessor for StaticImageView.Coordinator()
{
  return objc_opt_self(_TtCV17SequoiaTranslator15StaticImageView11Coordinator);
}

uint64_t destroy for StaticImageView(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 64));
  swift_release(*(_QWORD *)(a1 + 72));
  if (*(unsigned __int8 *)(a1 + 88) != 255)

  swift_release(*(_QWORD *)(a1 + 96));
  swift_release(*(_QWORD *)(a1 + 104));
  swift_release(*(_QWORD *)(a1 + 128));
  swift_release(*(_QWORD *)(a1 + 136));
  swift_release(*(_QWORD *)(a1 + 144));
  swift_release(*(_QWORD *)(a1 + 160));
  swift_release(*(_QWORD *)(a1 + 168));
  swift_release(*(_QWORD *)(a1 + 184));
  swift_release(*(_QWORD *)(a1 + 192));
  swift_release(*(_QWORD *)(a1 + 200));
  return swift_release(*(_QWORD *)(a1 + 208));
}

uint64_t initializeWithCopy for StaticImageView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  v12 = a2 + 80;
  v13 = *(unsigned __int8 *)(a2 + 88);
  v14 = v4;
  swift_retain(v7);
  v15 = v8;
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  if (v13 == 255)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)v12;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(v12 + 8);
  }
  else
  {
    v16 = *(void **)v12;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)v12;
    *(_BYTE *)(a1 + 88) = v13;
    v17 = v16;
  }
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v19;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v20;
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  v23 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v23;
  v25 = *(_QWORD *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v24;
  v26 = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v26;
  *(_QWORD *)(a1 + 192) = v27;
  v28 = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a2 + 208);
  v31 = v28;
  *(_QWORD *)(a1 + 200) = v28;
  *(_QWORD *)(a1 + 208) = v29;
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v23);
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v27);
  swift_retain(v31);
  swift_retain(v29);
  return a1;
}

uint64_t assignWithCopy for StaticImageView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  int v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  swift_retain(v15);
  swift_release(v14);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = (void **)(a1 + 80);
  v19 = (void **)(a2 + 80);
  v20 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v20 == 255)
    {
      v27 = *v19;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *v18 = v27;
    }
    else
    {
      v24 = *v19;
      *(_QWORD *)(a1 + 80) = *v19;
      *(_BYTE *)(a1 + 88) = v20;
      v25 = v24;
    }
  }
  else if (v20 == 255)
  {
    sub_1000D4EE8((id *)(a1 + 80));
    v26 = *(_BYTE *)(a2 + 88);
    *v18 = *v19;
    *(_BYTE *)(a1 + 88) = v26;
  }
  else
  {
    v21 = *v19;
    v22 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = *v19;
    *(_BYTE *)(a1 + 88) = v20;
    v23 = v21;

  }
  v28 = *(_QWORD *)(a1 + 96);
  v29 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v29;
  swift_retain(v29);
  swift_release(v28);
  v30 = *(_QWORD *)(a2 + 104);
  v31 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v30;
  swift_retain(v30);
  swift_release(v31);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v32 = *(_QWORD *)(a2 + 128);
  v33 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = *(_QWORD *)(a1 + 136);
  v35 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v35;
  swift_retain(v35);
  swift_release(v34);
  v36 = *(_QWORD *)(a2 + 144);
  v37 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v36;
  swift_retain(v36);
  swift_release(v37);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v38 = *(_QWORD *)(a1 + 160);
  v39 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v39;
  swift_retain(v39);
  swift_release(v38);
  v40 = *(_QWORD *)(a2 + 168);
  v41 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v40;
  swift_retain(v40);
  swift_release(v41);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v42 = *(_QWORD *)(a2 + 184);
  v43 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v42;
  swift_retain(v42);
  swift_release(v43);
  v44 = *(_QWORD *)(a1 + 192);
  v45 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v45;
  swift_retain(v45);
  swift_release(v44);
  v46 = *(_QWORD *)(a2 + 200);
  v47 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v46;
  swift_retain(v46);
  swift_release(v47);
  v48 = *(_QWORD *)(a2 + 208);
  v49 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v48;
  swift_retain(v48);
  swift_release(v49);
  return a1;
}

__n128 initializeWithTake for StaticImageView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for StaticImageView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_release(v5);
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v11);
  v12 = (_QWORD *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
    goto LABEL_5;
  v13 = *(unsigned __int8 *)(a2 + 88);
  if (v13 == 255)
  {
    sub_1000D4EE8((id *)(a1 + 80));
LABEL_5:
    *(_QWORD *)(a1 + 80) = *v12;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    goto LABEL_6;
  }
  v14 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *v12;
  *(_BYTE *)(a1 + 88) = v13;

LABEL_6:
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v15);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v16);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v17;
  swift_release(v18);
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(v19);
  v20 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release(v20);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release(v21);
  v22 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_release(v22);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_release(v23);
  v24 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release(v24);
  v25 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_release(v25);
  v26 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release(v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticImageView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticImageView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticImageView()
{
  return &type metadata for StaticImageView;
}

void sub_100179F68(char a1)
{
  sub_1000D02B8(a1);
}

void sub_100179F88()
{
  sub_1000D057C();
}

uint64_t sub_100179FB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[13];
  uint64_t v19;

  v3 = *(_OWORD *)(v1 + 176);
  v18[10] = *(_OWORD *)(v1 + 160);
  v18[11] = v3;
  v18[12] = *(_OWORD *)(v1 + 192);
  v19 = *(_QWORD *)(v1 + 208);
  v4 = *(_OWORD *)(v1 + 112);
  v18[6] = *(_OWORD *)(v1 + 96);
  v18[7] = v4;
  v5 = *(_OWORD *)(v1 + 144);
  v18[8] = *(_OWORD *)(v1 + 128);
  v18[9] = v5;
  v6 = *(_OWORD *)(v1 + 48);
  v18[2] = *(_OWORD *)(v1 + 32);
  v18[3] = v6;
  v7 = *(_OWORD *)(v1 + 80);
  v18[4] = *(_OWORD *)(v1 + 64);
  v18[5] = v7;
  v8 = *(_OWORD *)(v1 + 16);
  v18[0] = *(_OWORD *)v1;
  v18[1] = v8;
  v9 = type metadata accessor for StaticImageView.Coordinator();
  v10 = swift_allocObject(v9, 232, 7);
  v11 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(v10 + 176) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v10 + 192) = v11;
  *(_OWORD *)(v10 + 208) = *(_OWORD *)(v1 + 192);
  *(_QWORD *)(v10 + 224) = *(_QWORD *)(v1 + 208);
  v12 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v10 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v10 + 128) = v12;
  v13 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v10 + 144) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v10 + 160) = v13;
  v14 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v10 + 64) = v14;
  v15 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v10 + 96) = v15;
  v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v10 + 32) = v16;
  *a1 = v10;
  return sub_10017A13C((uint64_t)v18);
}

uint64_t sub_10017A074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10017A570();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10017A0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10017A570();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10017A114(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10017A570();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10017A13C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v6 = *(void **)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 192);
  v21 = *(_QWORD *)(a1 + 168);
  v22 = *(_QWORD *)(a1 + 184);
  v9 = *(_QWORD *)(a1 + 200);
  v14 = *(_QWORD *)(a1 + 208);
  v10 = *(_BYTE *)(a1 + 88);
  swift_retain(*(_QWORD *)(a1 + 64));
  swift_retain(v7);
  v11 = v2;
  swift_retain(v3);
  v12 = v4;
  swift_retain(v5);
  sub_1000E05CC(v6, v10);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v22);
  return a1;
}

id sub_10017A25C(void *a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, _BYTE *a13)
{
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  char v22;
  char *v23;
  id v24;
  char *v25;
  uint64_t v26;
  id v27;
  id v28;
  objc_super v33;

  v18 = &a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image];
  *(_QWORD *)v18 = 0;
  v18[8] = -1;
  v19 = &a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport];
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  v19[32] = 1;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView] = 0;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView] = 0;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_currentTranslationView] = 0;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_retranslateSubscription] = 0;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_visualTranslationLocaleSubscription] = 0;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_targetLocaleSubscription] = 0;
  a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availability] = 0;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availabilitySubscription] = 0;
  a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent] = 0;
  a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_pendingRetranslation] = 0;
  v20 = &a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_delegate];
  *((_QWORD *)v20 + 1) = 0;
  swift_unknownObjectWeakInit(v20, 0);
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationHostingController] = 0;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_conversation] = a1;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationOverlayModel] = a2;
  *(_QWORD *)&a13[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_context] = a8;
  v21 = *(void **)v18;
  *(_QWORD *)v18 = a3;
  v22 = v18[8];
  v18[8] = a4;
  v23 = a13;
  v24 = a1;
  swift_retain(a2);
  swift_retain(a8);
  sub_1000E05CC(a3, a4);
  sub_1000E05B8(v21, v22);
  *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_configuration] = a9;
  v25 = &v23[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText];
  *(_QWORD *)v25 = a5;
  *((_QWORD *)v25 + 1) = a6;
  v25[16] = a7;
  v26 = type metadata accessor for ChromeBar();
  v27 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v26));
  swift_retain(a5);
  swift_retain(a6);
  *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_materialView] = objc_msgSend(v27, "init", swift_retain(a9).n128_f64[0]);
  *((_QWORD *)v20 + 1) = &off_10026F550;
  swift_unknownObjectWeakAssign(v20, a10);
  *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_favoritesImporter] = a11;
  *(_QWORD *)&v23[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_selfLoggingInvocation] = a12;
  v28 = a11;
  swift_retain(a12);

  v33.receiver = v23;
  v33.super_class = (Class)type metadata accessor for StaticImageViewController();
  return objc_msgSendSuper2(&v33, "initWithNibName:bundle:", 0, 0);
}

uint64_t sub_10017A508(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availabilitySubscription);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availabilitySubscription) = 0;
  swift_release(v2);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_retranslateSubscription);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_retranslateSubscription) = 0;
  swift_release(v3);
  v4 = *(_QWORD *)(a1
                 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_visualTranslationLocaleSubscription);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_visualTranslationLocaleSubscription) = 0;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_targetLocaleSubscription);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_targetLocaleSubscription) = 0;
  return swift_release(v5);
}

unint64_t sub_10017A570()
{
  unint64_t result;

  result = qword_100296AB0;
  if (!qword_100296AB0)
  {
    result = swift_getWitnessTable(&unk_1001F5114, &type metadata for StaticImageView);
    atomic_store(result, (unint64_t *)&qword_100296AB0);
  }
  return result;
}

uint64_t sub_10017A5BC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(void **)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 160);
  v12 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 200);
  v20 = *(_QWORD *)(a1 + 192);
  v9 = *(_QWORD *)(a1 + 208);
  v10 = *(_BYTE *)(a1 + 88);
  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(v5);

  swift_release(v3);
  swift_release(v6);
  sub_1000E05B8(v7, v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  swift_release(v19);
  swift_release(v20);
  return a1;
}

double sub_10017A6E4@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F5438);
  v5 = swift_getKeyPath(&unk_1001F5460);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10017A760(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F5438);
  v6 = swift_getKeyPath(&unk_1001F5460);
  v8[0] = v2;
  v8[1] = v3;
  sub_100164500(v2, v3);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

void sub_10017A970(void *a1, double a2, double a3)
{
  void *v3;
  id v7;
  id v8;
  id v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Width;
  id v20;
  void *v21;
  _BOOL4 v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void **v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void *v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  CGRect v40;
  CGRect v41;

  v7 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v8 = objc_msgSend(v7, "applicationState");

  if (v8 != (id)2)
  {
    v9 = objc_msgSend(v3, "view");
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, "frame");
      v12 = v11;
      v14 = v13;
      v16 = v15;
      v18 = v17;

      v40.origin.x = v12;
      v40.origin.y = v14;
      v40.size.width = v16;
      v40.size.height = v18;
      Width = CGRectGetWidth(v40);
      v20 = objc_msgSend(v3, "view");
      if (v20)
      {
        v21 = v20;
        v22 = a2 / a3 <= 1.0;
        objc_msgSend(v20, "frame", a2 / a3);
        v24 = v23;
        v26 = v25;
        v28 = v27;
        v30 = v29;

        v41.origin.x = v24;
        v41.origin.y = v26;
        v41.size.width = v28;
        v41.size.height = v30;
        if (((v22 ^ (Width / CGRectGetHeight(v41) > 1.0)) & 1) == 0)
        {
          v38 = (void (*)(uint64_t))nullsub_1;
          v39 = 0;
          v34 = _NSConcreteStackBlock;
          v35 = 1107296256;
          v36 = sub_1001BAEA8;
          v37 = &unk_10026F780;
          v31 = _Block_copy(&v34);
          v32 = swift_allocObject(&unk_10026F650, 24, 7);
          swift_unknownObjectWeakInit(v32 + 16, v3);
          v38 = sub_1001832D8;
          v39 = v32;
          v34 = _NSConcreteStackBlock;
          v35 = 1107296256;
          v36 = sub_1001BAEA8;
          v37 = &unk_10026F7A8;
          v33 = _Block_copy(&v34);
          objc_msgSend(a1, "animateAlongsideTransition:completion:", v31, v33, swift_release(v39).n128_f64[0]);
          _Block_release(v33);
          _Block_release(v31);
        }
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_10017AB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_10017F52C();

  }
  swift_beginAccess(v2, &v7, 0, 0);
  v5 = swift_unknownObjectWeakLoadStrong(v2);
  if (v5)
  {
    v6 = (void *)v5;
    sub_10017AE88();

  }
}

void sub_10017AD34()
{
  uint64_t v0;
  CGFloat *v1;
  void *v2;
  void *v3;
  CGFloat v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGFloat Height;
  double v16;
  double v17;
  id v18;
  CGRect v19;
  CGRect v20;

  v1 = (CGFloat *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport + 32) & 1) == 0)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView);
    if (v2)
    {
      v3 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView);
      if (v3)
      {
        v5 = v1[2];
        v4 = v1[3];
        v7 = *v1;
        v6 = v1[1];
        v8 = v2;
        v18 = v3;
        objc_msgSend(v8, "frame");
        v10 = v9;
        v12 = v11;
        objc_msgSend(v18, "bounds");
        v14 = v13;
        v19.origin.x = v7;
        v19.origin.y = v6;
        v19.size.width = v5;
        v19.size.height = v4;
        Height = CGRectGetHeight(v19);
        v16 = 0.0;
        if (v12 < Height)
        {
          v20.origin.x = v7;
          v20.origin.y = v6;
          v20.size.width = v5;
          v20.size.height = v4;
          v16 = vabdd_f64(CGRectGetHeight(v20), v12) * 0.5;
        }
        v17 = (v14 - v10) * 0.5;
        if (v10 >= v14)
          v17 = 0.0;
        objc_msgSend(v18, "setContentOffset:", -v17, -v6 - v16);

      }
    }
  }
}

void sub_10017AE88()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat *v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  id v20;
  CGRect v21;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView);
  if (v1)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView);
    if (v2)
    {
      v20 = v1;
      v3 = v2;
      objc_msgSend(v20, "frame");
      v5 = v4;
      v7 = v6;
      objc_msgSend(v3, "bounds");
      if (v7 >= v9)
        v10 = 0.0;
      else
        v10 = (v9 - v7) * 0.5;
      if (v5 >= v8)
        v11 = 0.0;
      else
        v11 = (v8 - v5) * 0.5;
      v12 = (CGFloat *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport);
      if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport + 32) & 1) != 0)
      {
        v13 = v10;
      }
      else
      {
        v15 = v12[2];
        v14 = v12[3];
        v17 = *v12;
        v16 = v12[1];
        v13 = v10 + v16;
        objc_msgSend(v3, "frame");
        v19 = v10 + v18;
        v21.origin.x = v17;
        v21.origin.y = v16;
        v21.size.width = v15;
        v21.size.height = v14;
        v10 = v19 - (v16 + CGRectGetHeight(v21));
      }
      objc_msgSend(v3, "setContentInset:", v13, v11, v10, v11);

    }
  }
}

void sub_10017AFF0()
{
  char *v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  Class isa;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  Class v61;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView])
  {
    v2 = v0;
    v3 = objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
    objc_msgSend(v3, "setShowsVerticalScrollIndicator:", 0);
    objc_msgSend(v3, "setShowsHorizontalScrollIndicator:", 0);
    objc_msgSend(v3, "setDelaysContentTouches:", 0);
    objc_msgSend(v3, "setScrollIndicatorInsets:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
    v4 = v3;
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setAccessibilityIdentifier:", v5);

    v6 = objc_msgSend(v2, "view");
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, "addSubview:", v4);

      objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v8 = sub_100006DF4((uint64_t *)&unk_10028C060);
      v9 = swift_allocObject(v8, 64, 7);
      *(_OWORD *)(v9 + 16) = xmmword_1001E7590;
      v10 = objc_msgSend(v4, "topAnchor");
      v11 = objc_msgSend(v2, "view");
      if (v11)
      {
        v12 = v11;
        v13 = objc_msgSend(v11, "topAnchor");

        v14 = objc_msgSend(v10, "constraintEqualToAnchor:", v13);
        *(_QWORD *)(v9 + 32) = v14;
        v15 = objc_msgSend(v4, "leadingAnchor");
        v16 = objc_msgSend(v2, "view");
        if (v16)
        {
          v17 = v16;
          v60 = v8;
          v18 = objc_msgSend(v16, "leadingAnchor");

          v19 = objc_msgSend(v15, "constraintEqualToAnchor:", v18);
          *(_QWORD *)(v9 + 40) = v19;
          v20 = objc_msgSend(v4, "bottomAnchor");
          v21 = objc_msgSend(v2, "view");
          if (v21)
          {
            v22 = v21;
            v23 = objc_msgSend(v21, "bottomAnchor");

            v24 = objc_msgSend(v20, "constraintEqualToAnchor:", v23);
            *(_QWORD *)(v9 + 48) = v24;
            v25 = objc_msgSend(v4, "trailingAnchor");
            v26 = objc_msgSend(v2, "view");
            if (v26)
            {
              v27 = v26;
              v28 = (void *)objc_opt_self(NSLayoutConstraint);
              v29 = objc_msgSend(v27, "trailingAnchor");

              v30 = objc_msgSend(v25, "constraintEqualToAnchor:", v29);
              *(_QWORD *)(v9 + 56) = v30;
              specialized Array._endMutation()(v31);
              sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
              isa = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v28, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

              objc_msgSend(v4, "layoutIfNeeded");
              v33 = *(void **)&v2[v1];
              *(_QWORD *)&v2[v1] = v4;
              v34 = v4;

              v35 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_materialView;
              objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_materialView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
              objc_msgSend(*(id *)&v2[v35], "setHidden:", 1);
              v36 = objc_msgSend(v2, "view");
              if (v36)
              {
                v37 = v36;
                objc_msgSend(v36, "insertSubview:aboveSubview:", *(_QWORD *)&v2[v35], v34);

                v38 = swift_allocObject(v60, 64, 7);
                *(_OWORD *)(v38 + 16) = xmmword_1001E7590;
                v39 = objc_msgSend(*(id *)&v2[v35], "topAnchor");
                v40 = objc_msgSend(v2, "view");
                if (v40)
                {
                  v41 = v40;
                  v42 = objc_msgSend(v40, "topAnchor");

                  v43 = objc_msgSend(v39, "constraintEqualToAnchor:", v42);
                  *(_QWORD *)(v38 + 32) = v43;
                  v44 = objc_msgSend(*(id *)&v2[v35], "leadingAnchor");
                  v45 = objc_msgSend(v2, "view");
                  if (v45)
                  {
                    v46 = v45;
                    v47 = objc_msgSend(v45, "leadingAnchor");

                    v48 = objc_msgSend(v44, "constraintEqualToAnchor:", v47);
                    *(_QWORD *)(v38 + 40) = v48;
                    v49 = objc_msgSend(*(id *)&v2[v35], "bottomAnchor");
                    v50 = objc_msgSend(v2, "view");
                    if (v50)
                    {
                      v51 = v50;
                      v52 = objc_msgSend(v50, "bottomAnchor");

                      v53 = objc_msgSend(v49, "constraintEqualToAnchor:", v52);
                      *(_QWORD *)(v38 + 48) = v53;
                      v54 = objc_msgSend(*(id *)&v2[v35], "trailingAnchor");
                      v55 = objc_msgSend(v2, "view");
                      if (v55)
                      {
                        v56 = v55;
                        v57 = objc_msgSend(v55, "trailingAnchor");

                        v58 = objc_msgSend(v54, "constraintEqualToAnchor:", v57);
                        *(_QWORD *)(v38 + 56) = v58;
                        specialized Array._endMutation()(v59);
                        v61 = Array._bridgeToObjectiveC()().super.isa;
                        objc_msgSend(v28, "activateConstraints:", v61, swift_bridgeObjectRelease().n128_f64[0]);

                        return;
                      }
                      goto LABEL_22;
                    }
LABEL_21:
                    __break(1u);
LABEL_22:
                    __break(1u);
                    return;
                  }
LABEL_20:
                  __break(1u);
                  goto LABEL_21;
                }
LABEL_19:
                __break(1u);
                goto LABEL_20;
              }
LABEL_18:
              __break(1u);
              goto LABEL_19;
            }
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
}

void sub_10017B6F4()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (**v9)(char *, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  id v55;
  double v56;
  double v57;
  double v58;
  double v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint8_t *v63;
  NSObject *v64;
  NSString *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  NSObject *v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __n128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  NSString v95;
  id v96;
  NSString v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  uint64_t v115;
  Class isa;
  NSObject *v117;
  NSObject *v118;
  os_log_type_t v119;
  int v120;
  uint64_t v121;
  CGFloat v122;
  CGFloat v123;
  NSString *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  NSString *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  NSObject *v133;
  NSObject *v134;
  _BYTE *v135;
  NSObject *v136;
  uint64_t v137;
  void *v138;
  void *v139;
  void *v140;
  char *v141;
  NSObject *v142;
  os_log_type_t v143;
  uint64_t v144;
  NSObject **v145;
  NSObject *v146;
  NSObject *v147;
  NSObject *v148;
  NSObject *v149;
  uint64_t v150;
  char v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  char *v166;
  id v167;
  void (**v168)(char *, uint64_t);
  char *v169;
  uint64_t v170;
  void *v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  NSObject *v176;
  NSObject *v177;
  uint64_t v178;
  NSObject *v179;
  _QWORD v180[2];
  CGSize v181;
  CGSize v182;
  CGSize v183;

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v2);
  v4 = (char *)&v160 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for VisualTranslationOptions(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for VisualTranslationView(0);
  v9 = *(void (***)(char *, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4((uint64_t *)&unk_100296CE0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v15 = __chkstk_darwin(v14);
  v18 = (char *)&v160 - v17;
  v19 = v1[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image + 8];
  if (v19 == 255)
    return;
  v175 = v7;
  v20 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image];
  v21 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView];
  if (!v21)
  {
    v40 = qword_10028A408;
    v41 = v20;
    if (v40 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_10000F66C(v42, (uint64_t)qword_1002AA320);
    v177 = Logger.logObject.getter(v43);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v177, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v177, v44, "Illegal attempt to set an image with no scroll view in place", v45, 2u);
      swift_slowDealloc(v45, -1, -1);

      goto LABEL_20;
    }
    sub_1000E05B8(v20, v19);
    v46 = v177;
    goto LABEL_24;
  }
  v165 = v5;
  v166 = v11;
  v167 = v16;
  v168 = v9;
  v173 = v15;
  v176 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView;
  v22 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView];
  v177 = v21;
  sub_1000E05CC(v20, v19);
  v23 = objc_msgSend(v22, "image");
  if (v23)
  {
    v24 = v23;
    sub_10000A05C(0, &qword_100296D28, UIImage_ptr);
    v25 = static NSObject.== infix(_:_:)(v20, v24);

    sub_1000E05B8(v20, v19);
    sub_1000E05B8(v20, v19);
    if ((v25 & 1) != 0)
    {
      if (qword_10028A408 != -1)
        swift_once(&qword_10028A408, sub_100120F04);
      v26 = type metadata accessor for Logger(0);
      v27 = sub_10000F66C(v26, (uint64_t)qword_1002AA320);
      v176 = Logger.logObject.getter(v27);
      v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v176, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v176, v28, "Calling updateImage when the image has not changed", v29, 2u);
        swift_slowDealloc(v29, -1, -1);

LABEL_20:
        sub_1000E05B8(v20, v19);
        return;
      }
      sub_1000E05B8(v20, v19);

      v46 = v176;
LABEL_24:

      return;
    }
  }
  if (v1[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent] == 1)
    v1[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent] = 0;
  v162 = v4;
  v163 = v8;
  v169 = v18;
  v170 = v13;
  v164 = v19;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10000F66C(v30, (uint64_t)qword_1002AA320);
  v32 = v1;
  v174 = v31;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  v35 = os_log_type_enabled(v33, v34);
  v171 = v20;
  v172 = v1;
  if (v35)
  {
    v36 = swift_slowAlloc(22, -1);
    v37 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v36 = 138412546;
    v38 = *(void **)&v32[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_currentTranslationView];
    if (v38)
    {
      v179 = *(NSObject **)&v32[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_currentTranslationView];
      v39 = v38;
    }
    else
    {
      v179 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v36 + 4);
    *v37 = v38;

    *(_WORD *)(v36 + 12) = 2112;
    v47 = *(Class *)((char *)&v176->isa + (_QWORD)v172);
    if (v47)
    {
      v179 = *(NSObject **)((char *)&v176->isa + (_QWORD)v172);
      v48 = v47;
    }
    else
    {
      v179 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v36 + 14);
    v20 = v171;
    v37[1] = v47;

    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Removing translationView %@ and image view %@", (uint8_t *)v36, 0x16u);
    v49 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v37, 2, v49);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v1 = v172;
  }
  else
  {

  }
  v50 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_currentTranslationView;
  objc_msgSend(*(id *)&v32[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_currentTranslationView], "removeFromSuperview");
  v51 = *(void **)&v32[v50];
  *(_QWORD *)&v32[v50] = 0;

  v52 = v176;
  v53 = *(Class *)((char *)&v176->isa + (_QWORD)v1);
  if (v53)
  {
    objc_msgSend(v53, "removeFromSuperview");
    v54 = *(Class *)((char *)&v52->isa + (_QWORD)v1);
  }
  else
  {
    v54 = 0;
  }
  *(Class *)((char *)&v52->isa + (_QWORD)v1) = 0;

  v160 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationHostingController;
  objc_msgSend(*(id *)&v32[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationHostingController], "removeFromParentViewController");
  v55 = objc_msgSend(v20, "size");
  v57 = v56;
  v59 = v58;
  v60 = Logger.logObject.getter(v55);
  v61 = static os_log_type_t.debug.getter();
  v62 = os_log_type_enabled(v60, v61);
  v161 = v50;
  if (v62)
  {
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v179 = v64;
    *(_DWORD *)v63 = 136446210;
    v181.width = v57;
    v181.height = v59;
    v65 = NSStringFromCGSize(v181);
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

    v20 = v171;
    v178 = sub_1001A7FE4(v66, v68, (uint64_t *)&v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, &v179, v63 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Updating image with size %{public}s", v63, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);
  }

  v69 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v20);
  v70 = v177;
  -[NSObject addSubview:](v177, "addSubview:", v69);
  -[NSObject setDelegate:](v70, "setDelegate:", v32);
  nullsub_1(-[NSObject setContentSize:](v70, "setContentSize:", v57, v59));
  -[NSObject setContentOffset:](v70, "setContentOffset:");
  v71 = objc_msgSend(v32, "view");
  if (!v71)
  {
    __break(1u);
    goto LABEL_56;
  }
  v72 = v71;
  objc_msgSend(v71, "setClipsToBounds:", 1);

  v73 = objc_msgSend(v32, "view");
  if (!v73)
  {
LABEL_56:
    __break(1u);
    return;
  }
  v74 = v73;
  v75 = objc_msgSend(v73, "layer");

  objc_msgSend(v75, "setMasksToBounds:", 1);
  v76 = *(_QWORD *)&v32[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationOverlayModel];
  v77 = swift_allocObject(&unk_10026F650, 24, 7);
  swift_unknownObjectWeakInit(v77 + 16, v32);
  v179 = _swiftEmptyArrayStorage;
  v78 = sub_100007D5C(&qword_100291AA0, (uint64_t (*)(uint64_t))&type metadata accessor for VisualTranslationOptions, (uint64_t)&protocol conformance descriptor for VisualTranslationOptions);
  swift_retain(v76);
  swift_retain(v77);
  v79 = sub_100006DF4((uint64_t *)&unk_100296CF0);
  v80 = sub_100012334(&qword_100291AA8, (uint64_t *)&unk_100296CF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v79, v80, v165, v78);
  v81 = v166;
  VisualTranslationView.init(observable:options:systemTranslationDismissHandler:)(v82);
  swift_release(v77);
  v83 = sub_100007D5C(&qword_100296D00, (uint64_t (*)(uint64_t))&type metadata accessor for VisualTranslationView, (uint64_t)&protocol conformance descriptor for VisualTranslationView);
  v84 = v169;
  v85 = v163;
  View.navigationBarHidden(_:)(1, v163, v83);
  v168[1](v81, v85);
  v86 = v170;
  v87 = v167;
  v88 = v173;
  (*(void (**)(id, char *, uint64_t))(v170 + 16))(v167, v84, v173);
  v89 = objc_allocWithZone((Class)sub_100006DF4((uint64_t *)&unk_100296D08));
  v90 = (void *)UIHostingController.init(rootView:)(v87);
  v91 = objc_msgSend(v90, "view");
  if (v91)
  {
    v92 = v91;
    v93 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v92, "setBackgroundColor:", v93);

    objc_msgSend(v92, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v168 = (void (**)(char *, uint64_t))v92;
    v94 = v92;
    v95 = String._bridgeToObjectiveC()();
    objc_msgSend(v94, "setAccessibilityIdentifier:", v95);

    v96 = v69;
    v97 = String._bridgeToObjectiveC()();
    objc_msgSend(v96, "setAccessibilityIdentifier:", v97);

    objc_msgSend(v96, "addSubview:", v94);
    v98 = (void *)objc_opt_self(NSLayoutConstraint);
    v99 = sub_100006DF4((uint64_t *)&unk_10028C060);
    v100 = (_QWORD *)swift_allocObject(v99, 64, 7);
    *((_OWORD *)v100 + 1) = xmmword_1001E7590;
    v101 = objc_msgSend(v94, "topAnchor");
    v102 = objc_msgSend(v96, "topAnchor");
    v103 = objc_msgSend(v101, "constraintEqualToAnchor:", v102);
    v175 = v90;
    v104 = v103;

    v100[4] = v104;
    v105 = objc_msgSend(v94, "leadingAnchor");
    v106 = objc_msgSend(v96, "leadingAnchor");
    v107 = objc_msgSend(v105, "constraintEqualToAnchor:", v106);

    v100[5] = v107;
    v108 = objc_msgSend(v94, "bottomAnchor");
    v109 = objc_msgSend(v96, "bottomAnchor");
    v110 = objc_msgSend(v108, "constraintEqualToAnchor:", v109);

    v100[6] = v110;
    v167 = v94;
    v111 = objc_msgSend(v94, "trailingAnchor");
    v112 = objc_msgSend(v96, "trailingAnchor");
    v113 = objc_msgSend(v111, "constraintEqualToAnchor:", v112);

    v100[7] = v113;
    v114 = v175;
    v179 = v100;
    specialized Array._endMutation()(v115);
    sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v98, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    objc_msgSend(v32, "addChildViewController:", v114);
    v117 = v177;
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.debug.getter();
    v120 = v119;
    if (os_log_type_enabled(v118, v119))
    {
      v121 = swift_slowAlloc(22, -1);
      v177 = swift_slowAlloc(64, -1);
      v179 = v177;
      *(_DWORD *)v121 = 136446466;
      -[NSObject frame](v117, "frame");
      v182.width = v122;
      v182.height = v123;
      v124 = NSStringFromCGSize(v182);
      v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
      LODWORD(v166) = v120;
      v126 = v125;
      v128 = v127;

      v178 = sub_1001A7FE4(v126, v128, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, &v179, v121 + 4);
      swift_bridgeObjectRelease();

      *(_WORD *)(v121 + 12) = 2082;
      -[NSObject contentSize](v117, "contentSize");
      v129 = NSStringFromCGSize(v183);
      v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
      v132 = v131;

      v178 = sub_1001A7FE4(v130, v132, (uint64_t *)&v179);
      v114 = v175;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, &v179, v121 + 14);
      swift_bridgeObjectRelease();

      v133 = v117;
      _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v166, "Scroll view size: %{public}s content view size: %{public}s", (uint8_t *)v121, 0x16u);
      v134 = v177;
      swift_arrayDestroy(v177, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v121, -1, -1);
    }
    else
    {

      v133 = v117;
    }

    v135 = v172;
    v136 = v176;
    v137 = v161;
    objc_msgSend(v96, "setUserInteractionEnabled:", 1);
    v138 = *(Class *)((char *)&v136->isa + (_QWORD)v135);
    *(Class *)((char *)&v136->isa + (_QWORD)v135) = (Class)v96;
    v177 = v96;

    v139 = *(void **)&v32[v137];
    *(_QWORD *)&v32[v137] = v168;
    v175 = v167;

    v140 = *(void **)&v32[v160];
    *(_QWORD *)&v32[v160] = v114;
    v168 = (void (**)(char *, uint64_t))v114;

    v141 = v32;
    v142 = Logger.logObject.getter(v141);
    v143 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v142, v143))
    {
      v144 = swift_slowAlloc(22, -1);
      v145 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v144 = 138412546;
      v146 = *(NSObject **)&v32[v137];
      if (v146)
      {
        v179 = v146;
        v147 = v146;
        v135 = v172;
      }
      else
      {
        v179 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v144 + 4);
      *v145 = v146;

      *(_WORD *)(v144 + 12) = 2112;
      v148 = *(NSObject **)((char *)&v176->isa + (_QWORD)v135);
      if (v148)
      {
        v179 = *(NSObject **)((char *)&v176->isa + (_QWORD)v135);
        v149 = v148;
      }
      else
      {
        v179 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v144 + 14);
      v145[1] = v148;

      _os_log_impl((void *)&_mh_execute_header, v142, v143, "Created translation view %@ and image view %@", (uint8_t *)v144, 0x16u);
      v150 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v145, 2, v150);
      swift_slowDealloc(v145, -1, -1);
      swift_slowDealloc(v144, -1, -1);
    }
    else
    {

    }
    v151 = v164;

    sub_10017F52C();
    v152 = v171;
    if ((v141[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport + 32] & 1) == 0)
      sub_10017AD34();
    v153 = type metadata accessor for TaskPriority(0);
    v154 = (uint64_t)v162;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v162, 1, 1, v153);
    v155 = swift_allocObject(&unk_10026F650, 24, 7);
    swift_unknownObjectWeakInit(v155 + 16, v141);
    type metadata accessor for MainActor(0);
    swift_retain(v155);
    v157 = static MainActor.shared.getter(v156);
    v158 = (_QWORD *)swift_allocObject(&unk_10026F768, 40, 7);
    v158[2] = v157;
    v158[3] = &protocol witness table for MainActor;
    v158[4] = v155;
    swift_release(v155);
    v159 = sub_100049DC0(v154, (uint64_t)&unk_100296D20, (uint64_t)v158);
    swift_release(v159);

    sub_1000E05B8(v152, v151);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v169, v173);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v84, v88);
    sub_1000E05B8(v20, v164);

  }
}

void sub_10017CA18(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  id v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(id *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_favoritesImporter);
    sub_1000C46C0();

  }
}

uint64_t sub_10017CA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_10017CAEC, v6, v7);
}

uint64_t sub_10017CAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  __n128 v5;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_100296B9C);
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = sub_10017CB7C;
    return sub_10017E4EC();
  }
  else
  {
    v5 = swift_release(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
  }
}

uint64_t sub_10017CB7C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_BYTE *)(*v1 + 88) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_10017CBD4, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_10017CBD4()
{
  uint64_t v0;
  int v1;
  _BYTE *v2;

  v1 = *(unsigned __int8 *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = *(_BYTE **)(v0 + 72);
  if (v1 == 1)
    sub_10017CC30();
  else
    v2[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_pendingRetranslation] = 1;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10017CC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  void (*v25)(char *, id);
  void *v26;
  unsigned int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Class isa;
  id v33;
  void (*v34)(uint64_t, char *, id);
  id v35;
  int v36;
  void (*v37)(char *, id);
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  Class v57;
  NSLocale v58;
  _QWORD *v59;
  Class v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD *, id);
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, char *, id);
  uint64_t v77;
  void (*v78)(char *, id);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint8_t *v85;
  char *v86;
  void (*v87)(uint64_t, char *, id);
  int v88;
  id v89;
  unsigned int v90;
  id v91;
  id v92;
  void (*v93)(char *, id);
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  id v98;
  char *v99;
  char v100;
  _QWORD v101[2];
  char v102;

  v1 = v0;
  v2 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v2);
  v97 = (uint64_t)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028B6B8);
  v5 = __chkstk_darwin(v4);
  v95 = (uint64_t)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v94 = (char *)&v86 - v7;
  v8 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v8);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)type metadata accessor for Locale(0);
  v12 = *(v11 - 1);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v96 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v99 = (char *)&v86 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (_QWORD **)((char *)&v86 - v18);
  __chkstk_darwin(v17);
  v21 = (char *)&v86 - v20;
  v22 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_conversation);
  KeyPath = swift_getKeyPath(&unk_1001F5240);
  v24 = swift_getKeyPath(&unk_1001F5268);
  static Published.subscript.getter(v21, v22, KeyPath);
  swift_release(v24);
  swift_release(KeyPath);
  LOBYTE(KeyPath) = sub_100180304((uint64_t)v21);
  v25 = *(void (**)(char *, id))(v12 + 8);
  v98 = v11;
  v25(v21, v11);
  if ((KeyPath & 1) == 0)
    return;
  v26 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image);
  v27 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image + 8);
  if (v27 >= 2)
  {
    if (v27 != 2)
      return;
    v88 = 1;
  }
  else
  {
    v88 = 0;
  }
  v91 = v26;
  v28 = objc_msgSend(v91, "CGImage");
  if (!v28)
  {
    sub_1000E05B8(v26, v27);
    return;
  }
  v89 = v28;
  v92 = v26;
  v93 = v25;
  v90 = v27;
  v29 = swift_getKeyPath(&unk_1001F5240);
  v30 = swift_getKeyPath(&unk_1001F5268);
  static Published.subscript.getter(v19, v22, v29);
  swift_release(v30);
  swift_release(v29);
  v31 = sub_100076A78();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v33 = objc_msgSend(v31, "oppositeToLocale:", isa);

  if (v33)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v34 = *(void (**)(uint64_t, char *, id))(v12 + 32);
    v35 = v98;
    v34((uint64_t)v10, v21, v98);
    (*(void (**)(char *, _QWORD, uint64_t, id))(v12 + 56))(v10, 0, 1, v35);
    v36 = (*(uint64_t (**)(char *, uint64_t, id))(v12 + 48))(v10, 1, v35);
    v37 = v93;
    if (v36 != 1)
    {
      v87 = v34;
      v34((uint64_t)v99, v10, v35);
      v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 8);
      v39 = *(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 16);
      v101[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText);
      v101[1] = v38;
      v102 = v39;
      v100 = 0;
      v40 = sub_100006DF4(&qword_100296C60);
      Binding.wrappedValue.setter(&v100, v40);
      v41 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_configuration);
      v42 = swift_getKeyPath(&unk_1001F5360);
      v43 = swift_getKeyPath(&unk_1001F5388);
      static Published.subscript.getter(v101, v41, v42);
      swift_release(v43);
      swift_release(v42);
      if (LOBYTE(v101[0]) == 1)
      {
        v44 = v91;
        v45 = sub_1001A5044((uint64_t)_swiftEmptyArrayStorage);
        v46 = type metadata accessor for CameraConfiguration.StaticImage(0);
        v47 = v94;
        v48 = &v94[*(int *)(v46 + 24)];
        v49 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
        *v47 = v92;
        v47[1] = v45;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v47, 0, 1, v46);
        v50 = swift_getKeyPath(&unk_1001F53F0);
        v51 = swift_getKeyPath(&unk_1001F5418);
        v52 = v19;
        v53 = v95;
        sub_10000B074((uint64_t)v47, v95, &qword_10028B6B8);
        swift_retain(v41);
        v54 = v53;
        v19 = v52;
        static Published.subscript.setter(v54, v41, v50, v51);
        v35 = v98;
        sub_10000A020((uint64_t)v47, &qword_10028B6B8);
      }
      v55 = objc_allocWithZone((Class)_LTLocalePair);
      v56 = v19;
      v57 = Locale._bridgeToObjectiveC()().super.isa;
      v58.super.isa = Locale._bridgeToObjectiveC()().super.isa;
      v59 = v56;
      v86 = v56;
      v60 = v58.super.isa;
      v98 = objc_msgSend(v55, "initWithSourceLocale:targetLocale:", v57, v58.super.isa);

      v61 = swift_getKeyPath(&unk_1001F53A8);
      v62 = swift_getKeyPath(&unk_1001F53D0);
      static Published.subscript.getter(v101, v41, v61);
      swift_release(v62);
      *(_QWORD *)&v63 = swift_release(v61).n128_u64[0];
      LODWORD(v95) = LOBYTE(v101[0]);
      LODWORD(v94) = vk_cgImagePropertyOrientationFromVKOrientation(objc_msgSend(v91, "imageOrientation", v63));
      v64 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v97, 1, 1, v64);
      v65 = swift_allocObject(&unk_10026F650, 24, 7);
      swift_unknownObjectWeakInit(v65 + 16, v1);
      v66 = *(void (**)(char *, _QWORD *, id))(v12 + 16);
      v66(v21, v59, v35);
      v66(v96, v99, v35);
      type metadata accessor for MainActor(0);
      swift_retain(v65);
      v67 = v89;
      v68 = v98;
      v69 = static MainActor.shared.getter(v68);
      v70 = *(unsigned __int8 *)(v12 + 80);
      v71 = (v70 + 65) & ~v70;
      v72 = (v13 + v70 + v71) & ~v70;
      v73 = v72 + v13;
      v74 = swift_allocObject(&unk_10026F6A0, v73 + 1, v70 | 7);
      *(_QWORD *)(v74 + 16) = v69;
      *(_QWORD *)(v74 + 24) = &protocol witness table for MainActor;
      *(_QWORD *)(v74 + 32) = v65;
      *(_QWORD *)(v74 + 40) = v67;
      *(_DWORD *)(v74 + 48) = (_DWORD)v94;
      *(_QWORD *)(v74 + 56) = v68;
      *(_BYTE *)(v74 + 64) = v95;
      v75 = v74 + v71;
      v76 = v87;
      v87(v75, v21, v35);
      v76(v74 + v72, v96, v35);
      *(_BYTE *)(v74 + v73) = v88;
      swift_release(v65);
      v77 = sub_100049DC0(v97, (uint64_t)&unk_100296C70, v74);
      swift_release(v77);
      sub_1000E05B8(v92, v90);

      v78 = v93;
      v93(v99, v35);
      v78((char *)v86, v35);
      return;
    }
  }
  else
  {
    v35 = v98;
    (*(void (**)(char *, uint64_t, uint64_t, id))(v12 + 56))(v10, 1, 1, v98);
    v37 = v93;
  }
  v79 = v19;
  sub_10000A020((uint64_t)v10, (uint64_t *)&unk_10028FE50);
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v80 = type metadata accessor for Logger(0);
  v81 = sub_10000F66C(v80, (uint64_t)qword_1002AA320);
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v82, v83))
  {
    v84 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Unable to configure source and target locales for static image translation", v84, 2u);
    v85 = v84;
    v37 = v93;
    swift_slowDealloc(v85, -1, -1);
  }

  sub_1000E05B8(v92, v90);
  v37((char *)v79, v35);
}

double sub_10017D478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  void (*v49)(char *, uint64_t, __n128);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  double result;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  id v108[2];

  v1 = v0;
  v2 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v97 = *(_QWORD *)(v2 - 8);
  v98 = v2;
  __chkstk_darwin(v2);
  v96 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028E9B8);
  v100 = *(_QWORD *)(v4 - 8);
  v101 = v4;
  __chkstk_darwin(v4);
  v99 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100006DF4(&qword_100296BC0);
  v90 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v87 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100006DF4(&qword_100296BC8);
  v92 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v88 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100006DF4(&qword_100296BD0);
  v93 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v89 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100296BD8);
  v10 = *(_QWORD *)(v9 - 8);
  v94 = v9;
  v95 = v10;
  __chkstk_darwin(v9);
  v91 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006DF4(&qword_100296BE8);
  v85 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4((uint64_t *)&unk_100296BF0);
  v86 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_conversation);
  v21 = (void *)sub_10013B824(v102, *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_context));
  v108[0] = v21;
  v22 = sub_100006DF4(&qword_100293E18);
  v23 = sub_100012334(&qword_100296C00, &qword_100293E18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v24 = sub_10013AEFC();
  Publisher<>.removeDuplicates()(v22, v23, v24);
  swift_release(v21);
  v25 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v107 = v25;
  v108[0] = (id)static OS_dispatch_queue.main.getter(v25);
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v80 = v26;
  v27(v14, 1, 1, v26);
  v78 = v27;
  v28 = sub_100012334((unint64_t *)&unk_100296C08, &qword_100296BE8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v106 = sub_10001D984();
  Publisher.receive<A>(on:options:)(v108, v14, v15, v25, v28, v106);
  sub_10000A020((uint64_t)v14, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v85 + 8))(v17, v15);
  v29 = swift_allocObject(&unk_10026F650, 24, 7);
  swift_unknownObjectWeakInit(v29 + 16, v1);
  v30 = sub_100012334(&qword_100296C18, (uint64_t *)&unk_100296BF0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v31 = Publisher<>.sink(receiveValue:)(sub_1001829B0, v29, v18, v30);
  v32 = swift_release(v29);
  (*(void (**)(char *, uint64_t, __n128))(v86 + 8))(v20, v18, v32);
  v84 = v1;
  v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availabilitySubscription);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availabilitySubscription) = v31;
  swift_release(v33);
  swift_beginAccess(v102 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__visualTranslationLocale, v108, 33, 0);
  v86 = sub_100006DF4(&qword_10028F270);
  v34 = v87;
  Published.projectedValue.getter(v86);
  swift_endAccess(v108);
  v85 = sub_100012334(&qword_10028EFA8, &qword_100296BC0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v35 = v88;
  v36 = v103;
  Publisher.dropFirst(_:)(1, v103, v85);
  v90 = *(_QWORD *)(v90 + 8);
  ((void (*)(char *, uint64_t))v90)(v34, v36);
  v37 = sub_100012334((unint64_t *)&unk_100296C20, &qword_100296BC8, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v82 = v37;
  v83 = sub_100007D5C(&qword_10028DE18, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  v38 = v89;
  v39 = v104;
  Publisher<>.removeDuplicates()(v104, v37, v83);
  v92 = *(_QWORD *)(v92 + 8);
  v40 = ((uint64_t (*)(char *, uint64_t))v92)(v35, v39);
  v41 = v107;
  v108[0] = (id)static OS_dispatch_queue.main.getter(v40);
  v27(v14, 1, 1, v26);
  v81 = sub_100012334(&qword_100296C30, &qword_100296BD0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v42 = v91;
  v43 = v105;
  Publisher.receive<A>(on:options:)(v108, v14, v105, v41, v81, v106);
  sub_10000A020((uint64_t)v14, &qword_100296BE0);

  v93 = *(_QWORD *)(v93 + 8);
  ((void (*)(char *, uint64_t))v93)(v38, v43);
  v44 = swift_allocObject(&unk_10026F650, 24, 7);
  v45 = v84;
  swift_unknownObjectWeakInit(v44 + 16, v84);
  v79 = sub_100012334(&qword_100296C38, &qword_100296BD8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v46 = v94;
  v47 = Publisher<>.sink(receiveValue:)(sub_1001829B8, v44, v94, v79);
  v48 = swift_release(v44);
  v49 = *(void (**)(char *, uint64_t, __n128))(v95 + 8);
  v49(v42, v46, v48);
  v50 = *(_QWORD *)(v45
                  + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_visualTranslationLocaleSubscription);
  *(_QWORD *)(v45 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_visualTranslationLocaleSubscription) = v47;
  swift_release(v50);
  swift_beginAccess(v102 + OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__targetLocale, v108, 33, 0);
  Published.projectedValue.getter(v86);
  swift_endAccess(v108);
  v51 = v103;
  Publisher.dropFirst(_:)(1, v103, v85);
  v52 = v34;
  v53 = v78;
  ((void (*)(char *, uint64_t))v90)(v52, v51);
  v54 = v104;
  Publisher<>.removeDuplicates()(v104, v82, v83);
  v55 = v35;
  v56 = v80;
  v57 = ((uint64_t (*)(char *, uint64_t))v92)(v55, v54);
  v58 = v107;
  v108[0] = (id)static OS_dispatch_queue.main.getter(v57);
  v53(v14, 1, 1, v56);
  v59 = v105;
  Publisher.receive<A>(on:options:)(v108, v14, v105, v58, v81, v106);
  sub_10000A020((uint64_t)v14, &qword_100296BE0);

  ((void (*)(char *, uint64_t))v93)(v38, v59);
  v60 = swift_allocObject(&unk_10026F650, 24, 7);
  swift_unknownObjectWeakInit(v60 + 16, v45);
  v61 = Publisher<>.sink(receiveValue:)(sub_1001829E0, v60, v46, v79);
  v62 = swift_release(v60);
  v49(v42, v46, v62);
  v63 = *(_QWORD *)(v45 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_targetLocaleSubscription);
  *(_QWORD *)(v45 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_targetLocaleSubscription) = v61;
  swift_release(v63);
  v64 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10028A498 != -1)
    swift_once(&qword_10028A498, sub_100130C58);
  v65 = v96;
  NSNotificationCenter.publisher(for:object:)(qword_1002AA4D0, 0);

  v66 = v107;
  v108[0] = (id)static OS_dispatch_queue.main.getter(v67);
  v53(v14, 1, 1, v56);
  v68 = sub_100007D5C(&qword_100296C40, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v69 = v98;
  v70 = v99;
  Publisher.receive<A>(on:options:)(v108, v14, v98, v66, v68, v106);
  sub_10000A020((uint64_t)v14, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v97 + 8))(v65, v69);
  v71 = swift_allocObject(&unk_10026F650, 24, 7);
  swift_unknownObjectWeakInit(v71 + 16, v45);
  v72 = sub_100012334(&qword_10028EA48, &qword_10028E9B8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v73 = v101;
  v74 = Publisher<>.sink(receiveValue:)(sub_100182A08, v71, v101, v72);
  v75 = swift_release(v71);
  (*(void (**)(char *, uint64_t, __n128))(v100 + 8))(v70, v73, v75);
  v76 = *(_QWORD *)(v45 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_retranslateSubscription);
  *(_QWORD *)(v45 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_retranslateSubscription) = v74;
  *(_QWORD *)&result = swift_release(v76).n128_u64[0];
  return result;
}

void sub_10017DE9C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v22[24];

  v4 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v4);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v9 = (void *)Strong;
    if (*(unsigned __int8 *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availability) != v7)
    {
      *(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availability) = v7;
      if (v7)
      {
        *(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent) = 1;
      }
      else
      {
        *(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent) = 0;
        if (*(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_pendingRetranslation) == 1)
        {
          *(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_pendingRetranslation) = 0;
          v10 = type metadata accessor for TaskPriority(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
          v11 = swift_allocObject(&unk_10026F650, 24, 7);
          swift_unknownObjectWeakInit(v11 + 16, v9);
          type metadata accessor for MainActor(0);
          swift_retain(v11);
          v13 = static MainActor.shared.getter(v12);
          v14 = (_QWORD *)swift_allocObject(&unk_10026F740, 40, 7);
          v14[2] = v13;
          v14[3] = &protocol witness table for MainActor;
          v14[4] = v11;
          swift_release(v11);
          v15 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100296CD8, (uint64_t)v14);
          swift_release(v15);
        }
      }
      v16 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
      type metadata accessor for MainActor(0);
      v17 = v9;
      v18 = static MainActor.shared.getter(v17);
      v19 = (_QWORD *)swift_allocObject(&unk_10026F718, 40, 7);
      v19[2] = v18;
      v19[3] = &protocol witness table for MainActor;
      v19[4] = v17;
      v20 = sub_100049DC0((uint64_t)v6, (uint64_t)&unk_100296CD0, (uint64_t)v19);
      swift_release(v20);
    }

  }
}

uint64_t sub_10017E0A8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_100296B9C);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_100107058;
  return sub_10017E4EC();
}

void sub_10017E10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v19[24];

  v7 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v7);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v11 = (void *)Strong;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent) == 1)
      *(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent) = 0;
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
    v13 = swift_allocObject(&unk_10026F650, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v11);
    type metadata accessor for MainActor(0);
    swift_retain(v13);
    v15 = static MainActor.shared.getter(v14);
    v16 = (_QWORD *)swift_allocObject(a3, 40, 7);
    v16[2] = v15;
    v16[3] = &protocol witness table for MainActor;
    v16[4] = v13;
    swift_release(v13);
    v17 = sub_100049DC0((uint64_t)v9, a4, (uint64_t)v16);
    swift_release(v17);

  }
}

void sub_10017E268(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  id v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE v26[24];

  v3 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a2 + 16;
  swift_beginAccess(v9, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = *(id *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_conversation);

    KeyPath = swift_getKeyPath(&unk_1001F5318);
    v14 = swift_getKeyPath(&unk_1001F5340);
    static Published.subscript.getter(v8, v12, KeyPath);
    swift_release(v14);
    swift_release(KeyPath);

    v15 = type metadata accessor for Locale(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v8, 1, v15) != 1)
    {
      sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
      return;
    }
  }
  else
  {
    v16 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  }
  sub_10000A020((uint64_t)v8, (uint64_t *)&unk_10028FE50);
  swift_beginAccess(v9, v25, 0, 0);
  v17 = swift_unknownObjectWeakLoadStrong(v9);
  if (v17)
  {
    v18 = (void *)v17;
    if (*(_BYTE *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent) == 1)
      *(_BYTE *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent) = 0;
    v19 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
    v20 = swift_allocObject(&unk_10026F650, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v18);
    type metadata accessor for MainActor(0);
    swift_retain(v20);
    v22 = static MainActor.shared.getter(v21);
    v23 = (_QWORD *)swift_allocObject(&unk_10026F678, 40, 7);
    v23[2] = v22;
    v23[3] = &protocol witness table for MainActor;
    v23[4] = v20;
    swift_release(v20);
    v24 = sub_100049DC0((uint64_t)v5, (uint64_t)&unk_100296C50, (uint64_t)v23);
    swift_release(v24);

  }
}

uint64_t sub_10017E4EC()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1[116] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4((uint64_t *)&unk_1002908A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[117] = swift_task_alloc(v2);
  v1[118] = swift_task_alloc(v2);
  v1[119] = swift_task_alloc(v2);
  v3 = type metadata accessor for Locale(0);
  v1[120] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[121] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[122] = swift_task_alloc(v5);
  v1[123] = swift_task_alloc(v5);
  v6 = type metadata accessor for LocalePair(0);
  v1[124] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[125] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v1[126] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[127] = swift_task_alloc(v9);
  v1[128] = swift_task_alloc(v9);
  v1[129] = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  v1[130] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v1[131] = v11;
  v1[132] = v12;
  return swift_task_switch(sub_10017E61C, v11, v12);
}

uint64_t sub_10017E61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  void (*v37)(uint64_t, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 928);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent) & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 1040));
    v2 = *(_QWORD *)(v0 + 1024);
    v3 = *(_QWORD *)(v0 + 1016);
    v4 = *(_QWORD *)(v0 + 984);
    v5 = *(_QWORD *)(v0 + 976);
    v6 = *(_QWORD *)(v0 + 952);
    v7 = *(_QWORD *)(v0 + 944);
    v8 = *(_QWORD *)(v0 + 936);
    swift_task_dealloc(*(_QWORD *)(v0 + 1032));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  else
  {
    v10 = *(_QWORD **)(v0 + 984);
    v11 = *(_QWORD **)(v0 + 976);
    v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_conversation);
    KeyPath = swift_getKeyPath(&unk_1001F5288);
    v14 = swift_getKeyPath(&unk_1001F52B0);
    static Published.subscript.getter(v10, v12, KeyPath);
    swift_release(v14);
    swift_release(KeyPath);
    v15 = swift_getKeyPath(&unk_1001F52D0);
    v16 = swift_getKeyPath(&unk_1001F52F8);
    static Published.subscript.getter(v11, v12, v15);
    swift_release(v16);
    v17 = swift_release(v15);
    LocalePair.init(sourceLocale:targetLocale:)(v10, v11, v17);
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v18 = *(_QWORD *)(v0 + 1032);
    v19 = *(_QWORD *)(v0 + 1024);
    v20 = *(_QWORD *)(v0 + 1000);
    v21 = *(_QWORD *)(v0 + 992);
    v22 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 1064) = sub_10000F66C(v22, (uint64_t)qword_1002AA320);
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v24 = v23(v19, v18, v21);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 1024);
    v29 = *(_QWORD *)(v0 + 1000);
    v30 = *(_QWORD *)(v0 + 992);
    if (v27)
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v46 = v32;
      *(_DWORD *)v31 = 136446210;
      v33 = sub_100007D5C((unint64_t *)&unk_100296BB0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalePair, (uint64_t)&protocol conformance descriptor for LocalePair);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v0 + 920) = sub_1001A7FE4(v34, v35, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v31 + 4);
      v36 = swift_bridgeObjectRelease();
      v37 = *(void (**)(uint64_t, uint64_t, __n128))(v29 + 8);
      v37(v28, v30, v36);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Checking error state check for pair: %{public}s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      v37 = *(void (**)(uint64_t, uint64_t, __n128))(v29 + 8);
      ((void (*)(_QWORD, _QWORD))v37)(*(_QWORD *)(v0 + 1024), *(_QWORD *)(v0 + 992));
    }

    *(_QWORD *)(v0 + 1072) = v37;
    v38 = *(_QWORD *)(v0 + 1016);
    v39 = *(_QWORD *)(v0 + 1008);
    v40 = *(_QWORD *)(v0 + 1000);
    v41 = *(_QWORD *)(v0 + 992);
    v23(v38, *(_QWORD *)(v0 + 1032), v41);
    v42 = *(unsigned __int8 *)(v40 + 80);
    v43 = (v42 + 16) & ~v42;
    v44 = swift_allocObject(&unk_10026F628, v43 + v39, v42 | 7);
    *(_QWORD *)(v0 + 1080) = v44;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v44 + v43, v38, v41);
    v45 = swift_retain(v44);
    swift_asyncLet_begin(v0 + 16, 0, &type metadata for LanguagePairPath, &unk_100296BA8, v44, v0 + 1088, v45);
    return swift_asyncLet_get(v0 + 16, v0 + 1088, sub_10017EA1C, v0 + 736);
  }
}

uint64_t sub_10017EA1C()
{
  uint64_t v0;

  return swift_task_switch(sub_10017EA30, *(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1056));
}

void sub_10017EA30()
{
  __asm { BR              X10 }
}

uint64_t sub_10017EA84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  _QWORD *v20;
  uint64_t (*v21)();
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  v4 = v0[119];
  v5 = type metadata accessor for UIContentUnavailableConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0[118];
  sub_10000B074(v0[119], v6, (uint64_t *)&unk_1002908A0);
  type metadata accessor for UIContentUnavailableConfiguration(0);
  v7 = *(_QWORD *)(v5 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v8 = v23(v6, 1, v5);
  v9 = v0[118];
  if (v8 == 1)
  {
    sub_10000A020(v0[118], (uint64_t *)&unk_1002908A0);
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_QWORD *)(v1 + 32) = 0;
  }
  else
  {
    v0[90] = v5;
    v0[91] = &protocol witness table for UIContentUnavailableConfiguration;
    v10 = sub_1000122F8((_QWORD *)v1);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 32))(v10, v9, v5);
  }
  UIViewController.contentUnavailableConfiguration.setter(v1);
  swift_bridgeObjectRetain(0xE800000000000000);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136446210;
    swift_bridgeObjectRetain(0xE800000000000000);
    v0[109] = sub_1001A7FE4(0x726F727265206F6ELL, 0xE800000000000000, &v24);
    ((void (*)(_QWORD *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v0 + 110, v14 + 4);
    swift_bridgeObjectRelease_n(0xE800000000000000, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Updated error state to: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(0xE800000000000000, 2);
  }

  v16 = v0[117];
  v17 = v0[116];
  sub_10000B074(v0[119], v16, (uint64_t *)&unk_1002908A0);
  v18 = v23(v16, 1, v5);
  sub_10000A020(v16, (uint64_t *)&unk_1002908A0);
  v19 = *(void **)(v17 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_materialView);
  if (v18 == 1)
  {
    v20 = v0 + 110;
    objc_msgSend(v19, "setHidden:", 1);
    v21 = sub_10017F274;
  }
  else
  {
    v20 = v0 + 82;
    objc_msgSend(v19, "setHidden:", 0);
    v21 = sub_10017F36C;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(), _QWORD *))swift_asyncLet_finish)(v3, v2, v21, v20);
}

uint64_t sub_10017F274()
{
  uint64_t v0;

  return swift_task_switch(sub_10017F288, *(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1056));
}

uint64_t sub_10017F288()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1080);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1032);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 952);
  swift_release(*(_QWORD *)(v0 + 1040));
  sub_10000A020(v5, (uint64_t *)&unk_1002908A0);
  v2(v3, v4);
  swift_release_n(v1, 2);
  v6 = *(_QWORD *)(v0 + 1024);
  v7 = *(_QWORD *)(v0 + 1016);
  v8 = *(_QWORD *)(v0 + 984);
  v9 = *(_QWORD *)(v0 + 976);
  v10 = *(_QWORD *)(v0 + 952);
  v11 = *(_QWORD *)(v0 + 944);
  v12 = *(_QWORD *)(v0 + 936);
  swift_task_dealloc(*(_QWORD *)(v0 + 1032));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_10017F36C()
{
  uint64_t v0;

  return swift_task_switch(sub_10017F380, *(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1056));
}

uint64_t sub_10017F380()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1080);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1032);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 952);
  swift_release(*(_QWORD *)(v0 + 1040));
  sub_10000A020(v5, (uint64_t *)&unk_1002908A0);
  v2(v3, v4);
  swift_release_n(v1, 2);
  v6 = *(_QWORD *)(v0 + 1024);
  v7 = *(_QWORD *)(v0 + 1016);
  v8 = *(_QWORD *)(v0 + 984);
  v9 = *(_QWORD *)(v0 + 976);
  v10 = *(_QWORD *)(v0 + 952);
  v11 = *(_QWORD *)(v0 + 944);
  v12 = *(_QWORD *)(v0 + 936);
  swift_task_dealloc(*(_QWORD *)(v0 + 1032));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10017F464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static LanguagesStatusService.languagePairPath(_:)[1]);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_10017F4B8;
  return static LanguagesStatusService.languagePairPath(_:)(a2);
}

uint64_t sub_10017F4B8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10017F514, 0, 0);
}

uint64_t sub_10017F514()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10017F52C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView;
  v3 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView];
  if (v3 && (v4 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView]) != 0)
  {
    v5 = v3;
    v20 = v4;
    v6 = objc_msgSend(v20, "image");
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, "size");

      sub_10017F8B8();
      objc_msgSend(v5, "setMinimumZoomScale:");
      v8 = objc_msgSend(v20, "image");
      if (v8)
      {
        v9 = v8;
        objc_msgSend(v8, "size");

        sub_10017F8B8();
        objc_msgSend(v5, "setZoomScale:");

LABEL_12:
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v10 = type metadata accessor for Logger(0);
    sub_10000F66C(v10, (uint64_t)qword_1002AA320);
    v20 = v1;
    v11 = Logger.logObject.getter(v20);
    v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12))
    {

      goto LABEL_12;
    }
    v13 = swift_slowAlloc(22, -1);
    v14 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v13 = 138543618;
    v15 = *(void **)&v1[v2];
    if (v15)
    {
      v21 = *(_QWORD *)&v1[v2];
      v16 = v15;
    }
    else
    {
      v21 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4);
    *v14 = v15;

    *(_WORD *)(v13 + 12) = 2114;
    v17 = *(void **)&v20[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView];
    if (v17)
    {
      v21 = *(_QWORD *)&v20[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView];
      v18 = v17;
    }
    else
    {
      v21 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 14);
    v14[1] = v17;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Can't set zoom scale because scrollView or imageView is nil; scrollView: %{public}@; imageView: %{public}@",
      (uint8_t *)v13,
      0x16u);
    v19 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v14, 2, v19);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
}

void sub_10017F8B8()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGFloat *v11;
  id v12;
  void *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGRect v22;
  CGRect v23;

  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "bounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;

    v22.origin.x = v4;
    v22.origin.y = v6;
    v22.size.width = v8;
    v22.size.height = v10;
    CGRectGetWidth(v22);
    v11 = (CGFloat *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport];
    if ((v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport + 32] & 1) == 0)
    {
      v19 = v11[2];
      v21 = v11[3];
      v15 = *v11;
      v17 = v11[1];
      goto LABEL_6;
    }
    v12 = objc_msgSend(v0, "view");
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, "bounds");
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = v20;

LABEL_6:
      v23.origin.x = v15;
      v23.origin.y = v17;
      v23.size.width = v19;
      v23.size.height = v21;
      CGRectGetHeight(v23);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10017F9E4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  CGFloat v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  CGRect v20;
  _QWORD v21[5];
  __int128 v22;
  __int128 v23;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView);
  if (v1)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView);
    if (v2)
    {
      v19 = v1;
      v3 = v2;
      objc_msgSend(v19, "frame");
      v5 = v4;
      v7 = v6;
      v8 = objc_msgSend(v3, "bounds");
      if (v7 >= v10)
        v11 = 0.0;
      else
        v11 = (v10 - v7) * 0.5;
      if (v5 >= v9)
        v12 = 0.0;
      else
        v12 = (v9 - v5) * 0.5;
      v13 = Notification.userInfo.getter(v8);
      if (v13)
      {
        v14 = v13;
        *(_QWORD *)&v20.origin.x = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
        v20.origin.y = v15;
        AnyHashable.init<A>(_:)(v21, &v20, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v14 + 16) && (v16 = sub_1001A87EC((uint64_t)v21), (v17 & 1) != 0))
        {
          sub_10000A0EC(*(_QWORD *)(v14 + 56) + 32 * v16, (uint64_t)&v22);
        }
        else
        {
          v22 = 0u;
          v23 = 0u;
        }
        swift_bridgeObjectRelease();
        sub_10005DEC0((uint64_t)v21);
        if (*((_QWORD *)&v23 + 1))
        {
          type metadata accessor for CGRect(0);
          if ((swift_dynamicCast(&v20, &v22, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
          {
            objc_msgSend(v3, "setContentInset:", v11, v12, v11 + CGRectGetHeight(v20), v12);
            objc_msgSend(v3, "contentInset");
            objc_msgSend(v3, "setScrollIndicatorInsets:");

          }
          else
          {

          }
        }
        else
        {

          sub_10000A020((uint64_t)&v22, (uint64_t *)&unk_10028C0B0);
        }
      }
      else
      {

      }
    }
  }
}

uint64_t sub_10017FC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  id v17;
  Class isa;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v28;

  v1 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v1);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v28 - v10;
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v28 - v12);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_conversation);
  KeyPath = swift_getKeyPath(&unk_1001F5240);
  v16 = swift_getKeyPath(&unk_1001F5268);
  static Published.subscript.getter(v13, v14, KeyPath);
  swift_release(KeyPath);
  swift_release(v16);
  v17 = sub_100076A78();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v17, "oppositeToLocale:", isa);

  if (v19)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v20 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v20(v3, v8, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
    {
      v20(v11, v3, v4);
      sub_10015B308(0, 0, (uint64_t)v13, (uint64_t)v11);
      v21 = *(void (**)(char *, uint64_t))(v5 + 8);
      v21(v11, v4);
      return ((uint64_t (*)(_QWORD *, uint64_t))v21)(v13, v4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  sub_10000A020((uint64_t)v3, (uint64_t *)&unk_10028FE50);
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10000F66C(v22, (uint64_t)qword_1002AA320);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to get source and target locales for SELF logging for static image translation", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  return ((uint64_t (*)(_QWORD *, uint64_t))v21)(v13, v4);
}

id sub_10017FFB8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StaticImageViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StaticImageViewController()
{
  return objc_opt_self(_TtC17SequoiaTranslator25StaticImageViewController);
}

uint64_t sub_1001801B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_10018021C, v6, v7);
}

uint64_t sub_10018021C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  __n128 v5;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_100296B9C);
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = sub_1001802AC;
    return sub_10017E4EC();
  }
  else
  {
    v5 = swift_release(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
  }
}

uint64_t sub_1001802AC(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_BYTE *)(*v1 + 88) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_1001832E8, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100180304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44[2];
  char v45;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v41 - v10;
  v12 = Locale.languageIdentifier.getter(v9);
  Locale.init(identifier:)(v12, v13);
  type metadata accessor for VisualTranslationService(0);
  LODWORD(v14) = static VisualTranslationService.isOCRLocale(_:)(v11);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v11, v4);
  if ((v14 & 1) != 0)
  {
    v16 = v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_delegate);
    if (Strong)
    {
      v18 = Strong;
      v19 = *(_QWORD *)(v16 + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(2, ObjectType, v19);
LABEL_11:
      swift_unknownObjectRelease(v18);
    }
  }
  else
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v21 = type metadata accessor for Logger(0);
    sub_10000F66C(v21, (uint64_t)qword_1002AA320);
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v42 = v14;
      v14 = v26;
      v44[0] = v26;
      v41 = v1;
      *(_DWORD *)v25 = 136446210;
      v27 = Locale.identifier.getter(v26);
      v43 = sub_1001A7FE4(v27, v28, v44);
      v2 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v25 + 4);
      v29 = swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, __n128))v15)(v8, v4, v29);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "OCR unavailable for source visual translation locale (%{public}s); clearing overlays and showing guidance",
        v25,
        0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      v30 = v14;
      LOBYTE(v14) = v42;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      v15(v8, v4);
    }

    v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationOverlayModel);
    v32 = swift_retain(v31);
    dispatch thunk of VisualTranslationObservable.removeAll()(v32);
    swift_release(v31);
    v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 8);
    v34 = *(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 16);
    v44[0] = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText);
    v44[1] = v33;
    v45 = v34;
    LOBYTE(v43) = 0;
    v35 = sub_100006DF4(&qword_100296C60);
    Binding.wrappedValue.setter(&v43, v35);
    v36 = v2 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_delegate;
    v37 = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_delegate);
    if (v37)
    {
      v18 = v37;
      v38 = *(_QWORD *)(v36 + 8);
      v39 = swift_getObjectType(v37);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 8))(2, 0, v39, v38);
      goto LABEL_11;
    }
  }
  return v14 & 1;
}

uint64_t sub_100180630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char v26;

  *(_BYTE *)(v8 + 105) = v26;
  *(_QWORD *)(v8 + 192) = v24;
  *(_QWORD *)(v8 + 200) = v25;
  *(_BYTE *)(v8 + 83) = a8;
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 184) = a7;
  *(_DWORD *)(v8 + 84) = a6;
  *(_QWORD *)(v8 + 168) = a4;
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 208) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 216) = v10;
  *(_QWORD *)(v8 + 224) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskHint(0);
  *(_QWORD *)(v8 + 232) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 240) = v12;
  *(_QWORD *)(v8 + 248) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028FE50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 256) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 264) = swift_task_alloc(v13);
  v14 = type metadata accessor for Locale(0);
  *(_QWORD *)(v8 + 272) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 280) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 288) = swift_task_alloc(v16);
  *(_QWORD *)(v8 + 296) = swift_task_alloc(v16);
  *(_QWORD *)(v8 + 304) = swift_task_alloc(v16);
  *(_QWORD *)(v8 + 312) = swift_task_alloc(v16);
  v17 = type metadata accessor for SELFLoggingInvocationWrapper.Parameters(0);
  *(_QWORD *)(v8 + 320) = v17;
  *(_QWORD *)(v8 + 328) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 336) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v8 + 344) = v19;
  *(_QWORD *)(v8 + 352) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 360) = static MainActor.shared.getter(v20);
  v21 = dispatch thunk of Actor.unownedExecutor.getter(v20, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 368) = v21;
  *(_QWORD *)(v8 + 376) = v22;
  return swift_task_switch(sub_1001807DC, v21, v22);
}

uint64_t sub_1001807DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int, uint64_t, char);

  v1 = *(_QWORD *)(v0 + 168) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 384) = Strong;
  if (Strong)
  {
    *(_QWORD *)(v0 + 136) = _swiftEmptyArrayStorage;
    v14 = (uint64_t (*)(uint64_t, int, uint64_t, char))((char *)&dword_100296C78 + dword_100296C78);
    v3 = (_QWORD *)swift_task_alloc(unk_100296C7C);
    *(_QWORD *)(v0 + 392) = v3;
    *v3 = v0;
    v3[1] = sub_100180930;
    return v14(*(_QWORD *)(v0 + 176), *(_DWORD *)(v0 + 84), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 83));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 360));
    v5 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 304);
    v6 = *(_QWORD *)(v0 + 312);
    v9 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 296);
    v11 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100180930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *(*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 392);
  *(_QWORD *)(*(_QWORD *)v2 + 400) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[46];
    v7 = v4[47];
    v8 = sub_100180F7C;
  }
  else
  {
    v4[51] = a1;
    v6 = v4[46];
    v7 = v4[47];
    v8 = sub_1001809A4;
  }
  return swift_task_switch(v8, v6, v7);
}

void *sub_1001809A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void *result;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  void (*v42)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  char *v71;

  v1 = *(_QWORD *)(v0 + 408);
  *(_QWORD *)(v0 + 136) = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v45 = v1;
    else
      v45 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v46 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease();
    if (v46)
      goto LABEL_3;
LABEL_21:
    v47 = *(void **)(v0 + 384);
    v48 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease();
    swift_release(v48);

    v49 = *(_QWORD *)(v0 + 328);
    v51 = *(_QWORD *)(v0 + 304);
    v50 = *(_QWORD *)(v0 + 312);
    v53 = *(_QWORD *)(v0 + 288);
    v52 = *(_QWORD *)(v0 + 296);
    v55 = *(_QWORD *)(v0 + 256);
    v54 = *(_QWORD *)(v0 + 264);
    v56 = *(_QWORD *)(v0 + 248);
    v57 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_21;
LABEL_3:
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  *(_QWORD *)(v0 + 416) = sub_10000F66C(*(_QWORD *)(v0 + 208), (uint64_t)qword_1002AA320);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    if ((unint64_t)v2 >> 62)
    {
      if (v2 < 0)
        v61 = v2;
      else
        v61 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v2);
      v7 = _CocoaArrayWrapper.endIndex.getter(v61);
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 144) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Static image: will translate %ld observations", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v2, 2);
  }

  v8 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 328);
  v68 = *(_QWORD *)(v0 + 344);
  v69 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 312);
  v10 = *(int **)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 272);
  v12 = *(_QWORD *)(v0 + 280);
  v66 = *(unsigned __int8 *)(v0 + 105);
  v14 = *(_QWORD *)(v0 + 192);
  v62 = *(_QWORD *)(v0 + 200);
  v64 = *(_QWORD *)(v0 + 304);
  v15 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_selfLoggingInvocation;
  v16 = *(_QWORD *)(v8 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_selfLoggingInvocation);
  swift_retain(v16);
  sub_10015B614();
  v17 = swift_release(v16);
  v18 = *(_QWORD *)(v8 + v15);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v12 + 16);
  v20 = v11;
  v19(v11, v14, v13, v17);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v64, v62, v13);
  if (v66)
    v21 = 3;
  else
    v21 = 4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v9 + v10[14], 1, 1, v69);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v22(v9, v20, v13);
  v23 = v22;
  v22(v9 + v10[5], v64, v13);
  *(_QWORD *)(v9 + v10[6]) = v21;
  *(_QWORD *)(v9 + v10[7]) = 3;
  *(_QWORD *)(v9 + v10[8]) = 0;
  *(_BYTE *)(v9 + v10[9]) = 0;
  v24 = v9 + v10[10];
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  *(_BYTE *)(v9 + v10[11]) = 0;
  *(_QWORD *)(v9 + v10[12]) = 0;
  v25 = v9 + v10[13];
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  sub_10015AEE0(v9);
  result = *(void **)(v18 + 16);
  if (result)
  {
    v27 = *(_QWORD *)(v0 + 384);
    v28 = *(_QWORD *)(v0 + 328);
    v29 = objc_msgSend(result, "invocationId");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100097944(v28);
    v30 = *(_QWORD *)(v27 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationOverlayModel);
    *(_QWORD *)(v0 + 424) = v30;
    swift_beginAccess(v0 + 136, v0 + 40, 0, 0);
    v31 = *(_QWORD *)(v0 + 136);
    v70 = v23;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 < 0)
        v58 = *(_QWORD *)(v0 + 136);
      else
        v58 = v31 & 0xFFFFFFFFFFFFFF8;
      v59 = sub_10000A05C(0, &qword_100296C80, VNRecognizedTextObservation_ptr);
      swift_retain(v30);
      v60 = swift_bridgeObjectRetain(v31);
      v33 = _bridgeCocoaArray<A>(_:)(v58, v59, v60);
    }
    else
    {
      swift_bridgeObjectRetain_n(v31, 2);
      v32 = swift_retain(v30);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v32);
      sub_10000A05C(0, &qword_100296C80, VNRecognizedTextObservation_ptr);
      v33 = v31;
    }
    *(_QWORD *)(v0 + 432) = v33;
    v34 = *(_QWORD *)(v0 + 288);
    v35 = *(_QWORD *)(v0 + 296);
    v37 = *(_QWORD *)(v0 + 272);
    v36 = *(_QWORD *)(v0 + 280);
    v39 = *(_QWORD *)(v0 + 256);
    v38 = *(_QWORD *)(v0 + 264);
    v63 = *(_QWORD *)(v0 + 240);
    v65 = *(_QWORD *)(v0 + 232);
    v67 = *(_QWORD *)(v0 + 248);
    v40 = *(void **)(v0 + 184);
    v41 = objc_msgSend(v40, "sourceLocale", swift_bridgeObjectRelease().n128_f64[0]);
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v70(v38, v35, v37);
    v42 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56);
    v42(v38, 0, 1, v37);
    v43 = objc_msgSend(v40, "targetLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v43);

    v70(v39, v34, v37);
    v42(v39, 0, 1, v37);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v63 + 104))(v67, enum case for TaskHint.app(_:), v65);
    v71 = (char *)&async function pointer to dispatch thunk of VisualTranslationObservable.translate(_:sourceLocale:targetLocale:taskHint:selfLoggingInvocationId:)
        + async function pointer to dispatch thunk of VisualTranslationObservable.translate(_:sourceLocale:targetLocale:taskHint:selfLoggingInvocationId:);
    v44 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of VisualTranslationObservable.translate(_:sourceLocale:targetLocale:taskHint:selfLoggingInvocationId:)
                                     + 1));
    *(_QWORD *)(v0 + 440) = v44;
    *v44 = v0;
    v44[1] = sub_1001816B8;
    return (void *)((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v71)(v33, *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352));
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_100180F7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void *result;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  void (*v53)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  char *v84;

  v81 = v0 + 152;
  v1 = &unk_10028A000;
  if (qword_10028A408 != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  v2 = (uint64_t *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 400);
  sub_10000F66C(*(_QWORD *)(v0 + 208), (uint64_t)qword_1002AA320);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 400);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v11 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 152) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v81, v0 + 160, v9 + 4);
    *v10 = v11;
    v2 = (uint64_t *)(v0 + 136);
    v1 = (_QWORD *)&unk_10028A000;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get text blocks from image: %@", v9, 0xCu);
    v12 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 400));
    swift_errorRelease(v8);

  }
  v13 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    if (v13 < 0)
      v56 = *v2;
    else
      v56 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v57 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease();
    if (v57)
      goto LABEL_8;
LABEL_26:
    v58 = *(void **)(v0 + 384);
    v59 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease();
    swift_release(v59);

    v60 = *(_QWORD *)(v0 + 328);
    v62 = *(_QWORD *)(v0 + 304);
    v61 = *(_QWORD *)(v0 + 312);
    v64 = *(_QWORD *)(v0 + 288);
    v63 = *(_QWORD *)(v0 + 296);
    v66 = *(_QWORD *)(v0 + 256);
    v65 = *(_QWORD *)(v0 + 264);
    v67 = *(_QWORD *)(v0 + 248);
    v68 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_8:
  if (v1[129] != -1)
    swift_once(&qword_10028A408, sub_100120F04);
  *(_QWORD *)(v0 + 416) = sub_10000F66C(*(_QWORD *)(v0 + 208), (uint64_t)qword_1002AA320);
  v14 = *(_QWORD *)(v0 + 136);
  v15 = swift_bridgeObjectRetain_n(v14, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v73 = v2;
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v18 = 134217984;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v72 = v14;
      else
        v72 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v19 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 144) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v81, v18 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Static image: will translate %ld observations", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v14, 2);
  }

  v20 = *(_QWORD *)(v0 + 384);
  v21 = *(_QWORD *)(v0 + 328);
  v80 = *(_QWORD *)(v0 + 344);
  v82 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 312);
  v22 = *(int **)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 272);
  v24 = *(_QWORD *)(v0 + 280);
  v78 = *(unsigned __int8 *)(v0 + 105);
  v26 = *(_QWORD *)(v0 + 192);
  v74 = *(_QWORD *)(v0 + 200);
  v76 = *(_QWORD *)(v0 + 304);
  v27 = OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_selfLoggingInvocation;
  v28 = *(_QWORD *)(v20 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_selfLoggingInvocation);
  swift_retain(v28);
  sub_10015B614();
  v29 = swift_release(v28);
  v30 = *(_QWORD *)(v20 + v27);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v24 + 16);
  v32 = v23;
  v31(v23, v26, v25, v29);
  ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v76, v74, v25);
  if (v78)
    v33 = 3;
  else
    v33 = 4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56))(v21 + v22[14], 1, 1, v82);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
  v34(v21, v32, v25);
  v34(v21 + v22[5], v76, v25);
  *(_QWORD *)(v21 + v22[6]) = v33;
  *(_QWORD *)(v21 + v22[7]) = 3;
  *(_QWORD *)(v21 + v22[8]) = 0;
  *(_BYTE *)(v21 + v22[9]) = 0;
  v35 = v21 + v22[10];
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  *(_BYTE *)(v21 + v22[11]) = 0;
  *(_QWORD *)(v21 + v22[12]) = 0;
  v36 = v21 + v22[13];
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = 1;
  sub_10015AEE0(v21);
  result = *(void **)(v30 + 16);
  if (result)
  {
    v38 = *(_QWORD *)(v0 + 384);
    v39 = *(_QWORD *)(v0 + 328);
    v40 = objc_msgSend(result, "invocationId");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100097944(v39);
    v41 = *(_QWORD *)(v38 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationOverlayModel);
    *(_QWORD *)(v0 + 424) = v41;
    swift_beginAccess(v73, v0 + 40, 0, 0);
    v42 = *(_QWORD *)(v0 + 136);
    v83 = v34;
    if ((unint64_t)v42 >> 62)
    {
      if (v42 < 0)
        v69 = *(_QWORD *)(v0 + 136);
      else
        v69 = v42 & 0xFFFFFFFFFFFFFF8;
      v70 = sub_10000A05C(0, &qword_100296C80, VNRecognizedTextObservation_ptr);
      swift_retain(v41);
      v71 = swift_bridgeObjectRetain(v42);
      v44 = _bridgeCocoaArray<A>(_:)(v69, v70, v71);
    }
    else
    {
      swift_bridgeObjectRetain_n(v42, 2);
      v43 = swift_retain(v41);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v43);
      sub_10000A05C(0, &qword_100296C80, VNRecognizedTextObservation_ptr);
      v44 = v42;
    }
    *(_QWORD *)(v0 + 432) = v44;
    v45 = *(_QWORD *)(v0 + 288);
    v46 = *(_QWORD *)(v0 + 296);
    v48 = *(_QWORD *)(v0 + 272);
    v47 = *(_QWORD *)(v0 + 280);
    v50 = *(_QWORD *)(v0 + 256);
    v49 = *(_QWORD *)(v0 + 264);
    v75 = *(_QWORD *)(v0 + 240);
    v77 = *(_QWORD *)(v0 + 232);
    v79 = *(_QWORD *)(v0 + 248);
    v51 = *(void **)(v0 + 184);
    v52 = objc_msgSend(v51, "sourceLocale", swift_bridgeObjectRelease().n128_f64[0]);
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v83(v49, v46, v48);
    v53 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56);
    v53(v49, 0, 1, v48);
    v54 = objc_msgSend(v51, "targetLocale");
    static Locale._unconditionallyBridgeFromObjectiveC(_:)(v54);

    v83(v50, v45, v48);
    v53(v50, 0, 1, v48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v75 + 104))(v79, enum case for TaskHint.app(_:), v77);
    v84 = (char *)&async function pointer to dispatch thunk of VisualTranslationObservable.translate(_:sourceLocale:targetLocale:taskHint:selfLoggingInvocationId:)
        + async function pointer to dispatch thunk of VisualTranslationObservable.translate(_:sourceLocale:targetLocale:taskHint:selfLoggingInvocationId:);
    v55 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of VisualTranslationObservable.translate(_:sourceLocale:targetLocale:taskHint:selfLoggingInvocationId:)
                                     + 1));
    *(_QWORD *)(v0 + 440) = v55;
    *v55 = v0;
    v55[1] = sub_1001816B8;
    return (void *)((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v84)(v44, *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001816B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 440);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 256);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 264);
  v9 = *(_QWORD *)(*(_QWORD *)v2 + 240);
  v8 = *(_QWORD *)(*(_QWORD *)v2 + 248);
  v10 = *(_QWORD *)(*(_QWORD *)v2 + 232);
  v3[56] = a1;
  v3[57] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  v11 = swift_release(v5);
  (*(void (**)(uint64_t, uint64_t, __n128))(v9 + 8))(v8, v10, v11);
  sub_10000A020(v7, (uint64_t *)&unk_10028FE50);
  sub_10000A020(v6, (uint64_t *)&unk_10028FE50);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v12 = v3[46];
    v13 = v3[47];
    v14 = sub_100181CA8;
  }
  else
  {
    v12 = v3[46];
    v13 = v3[47];
    v14 = sub_10018179C;
  }
  return swift_task_switch(v14, v12, v13);
}

void sub_10018179C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  _BOOL4 v37;
  void *v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(void **)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = swift_release(*(_QWORD *)(v0 + 360));
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v4 + 16))(v3, v1, v5, v6);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = v2;
  swift_bridgeObjectRetain(v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v10, v11))
  {
    v19 = *(void **)(v0 + 384);
    swift_bridgeObjectRelease_n(v7, 2);

LABEL_7:
    v20 = *(_QWORD *)(v0 + 448);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v51 = *(_QWORD *)(v0 + 448);
      else
        v51 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 448));
      v21 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v22 = *(_QWORD *)(v0 + 448);
    v23 = *(_QWORD *)(v0 + 384);
    if (v21)
    {
      v24 = *(_QWORD *)(v23 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 8);
      v25 = *(_BYTE *)(v23 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 16);
      *(_QWORD *)(v0 + 88) = *(_QWORD *)(v23
                                       + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText);
      *(_QWORD *)(v0 + 96) = v24;
      *(_BYTE *)(v0 + 104) = v25;
      *(_BYTE *)(v0 + 82) = 1;
      v26 = sub_100006DF4(&qword_100296C60);
      Binding.wrappedValue.setter(v0 + 82, v26);
      swift_bridgeObjectRetain(v22);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v30 = 134217984;
        if ((unint64_t)v20 >> 62)
        {
          if (v20 < 0)
            v41 = *(_QWORD *)(v0 + 448);
          else
            v41 = v20 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 448));
          v31 = _CocoaArrayWrapper.endIndex.getter(v41);
          swift_bridgeObjectRelease();
        }
        else
        {
          v31 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v38 = *(void **)(v0 + 384);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 128) = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v30 + 4);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Static image: did get %ld translations", v30, 0xCu);
        v40 = v30;
        goto LABEL_21;
      }
      v38 = *(void **)(v0 + 384);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 448), 2);
    }
    else
    {
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v23 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 8);
      v33 = *(_BYTE *)(v23 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText + 16);
      *(_QWORD *)(v0 + 64) = *(_QWORD *)(v23
                                       + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController__hasTranslatedText);
      *(_QWORD *)(v0 + 72) = v32;
      *(_WORD *)(v0 + 80) = v33;
      v34 = sub_100006DF4(&qword_100296C60);
      v35 = Binding.wrappedValue.setter(v0 + 81, v34);
      v28 = Logger.logObject.getter(v35);
      v36 = static os_log_type_t.debug.getter();
      v37 = os_log_type_enabled(v28, v36);
      v38 = *(void **)(v0 + 384);
      if (v37)
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v36, "Static image: did not get any translation", v39, 2u);
        v40 = v39;
LABEL_21:
        swift_slowDealloc(v40, -1, -1);
      }
    }

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    v42 = *(_QWORD *)(v0 + 328);
    v44 = *(_QWORD *)(v0 + 304);
    v43 = *(_QWORD *)(v0 + 312);
    v46 = *(_QWORD *)(v0 + 288);
    v45 = *(_QWORD *)(v0 + 296);
    v48 = *(_QWORD *)(v0 + 256);
    v47 = *(_QWORD *)(v0 + 264);
    v49 = *(_QWORD *)(v0 + 248);
    v50 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = swift_slowAlloc(22, -1);
  v53 = (_QWORD *)swift_slowAlloc(8, -1);
  *(_DWORD *)v12 = 134218242;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v52 = v7;
    else
      v52 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v13 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 120) = v13;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v12 + 4);
  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2112;
  v15 = *(void **)(v14 + OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_currentTranslationView);
  v16 = *(void **)(v0 + 384);
  if (v15)
  {
    *(_QWORD *)(v0 + 160) = v15;
    v17 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v12 + 14);
    *v53 = v15;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Static image: did translate %ld observations in view %@", (uint8_t *)v12, 0x16u);
    v18 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v53, 1, v18);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v12, -1, -1);
    goto LABEL_7;
  }

  __break(1u);
}

uint64_t sub_100181CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  void *v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = swift_release(*(_QWORD *)(v0 + 360));
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v2, v3, v5);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 456);
    v10 = *(void **)(v0 + 384);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    v13 = _convertErrorToNSError(_:)(v9);
    *(_QWORD *)(v0 + 112) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v11 + 4);
    *v12 = v13;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to translate overlay model: %@", v11, 0xCu);
    v14 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 456);

    swift_errorRelease(v15);
    swift_errorRelease(v15);
    swift_errorRelease(v15);

  }
  v16 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 312);
  v20 = *(_QWORD *)(v0 + 288);
  v19 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100181EC0(uint64_t a1, void *a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  Class isa;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class v29;
  double v30;
  unint64_t v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  __n128 v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  unint64_t v67;

  LODWORD(v65) = a5;
  v66 = a1;
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2;
  sub_1001A5164((uint64_t)_swiftEmptyArrayStorage);
  v13 = objc_allocWithZone((Class)VNImageRequestHandler);
  type metadata accessor for VNImageOption(0);
  sub_100007D5C(&qword_10028A930, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1001E6200);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "initWithCGImage:orientation:options:", v12, a3, isa, swift_bridgeObjectRelease().n128_f64[0]);

  v16 = objc_msgSend(objc_allocWithZone((Class)VNRecognizeDocumentsRequest), "init");
  objc_msgSend(v16, "setMaximumCandidateCount:", 1);
  objc_msgSend(v16, "setRecognitionLevel:", 0);
  v17 = sub_100006DF4(&qword_10028A6C0);
  v18 = swift_allocObject(v17, 48, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1001E64F0;
  v19 = objc_msgSend(a4, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v21 = Locale.identifier.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v23;
  v24 = v15;
  v25 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setRecognitionLanguages:", v25, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v16, "setUsesAlternateLineGrouping:", v65 & 1);
  objc_msgSend(v16, "setUsesLanguageCorrection:", 1);
  v26 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v27 = swift_allocObject(v26, 40, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1001EA980;
  *(_QWORD *)(v27 + 32) = v16;
  v67 = v27;
  specialized Array._endMutation()(v27);
  sub_10000A05C(0, &qword_100296C98, VNRequest_ptr);
  v28 = v16;
  v29 = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v30 = swift_bridgeObjectRelease().n128_u64[0];
  v67 = 0;
  LODWORD(v8) = objc_msgSend(v15, "performRequests:error:", v29, &v67, v30);

  v31 = v67;
  if (!(_DWORD)v8)
  {
    v44 = (id)v67;
    v45 = _convertNSErrorToError(_:)(v31);

    swift_willThrow(v46);
    v67 = v45;
    swift_errorRetain(v45);
    v47 = sub_100006DF4(&qword_100296CA0);
    CheckedContinuation.resume(throwing:)(&v67, v47);

    swift_errorRelease(v45);
    return;
  }
  v32 = (id)v67;
  v33 = objc_msgSend(v28, "results");
  if (v33)
  {
    v34 = v33;
    v35 = sub_10000A05C(0, &qword_100296CA8, VNDocumentObservation_ptr);
    v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

    v67 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v36 >> 62)
    {
      if (v36 < 0)
        v49 = v36;
      else
        v49 = v36 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v36);
      v37 = _CocoaArrayWrapper.endIndex.getter(v49);
      if (v37)
        goto LABEL_5;
    }
    else
    {
      v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v36);
      if (v37)
      {
LABEL_5:
        v64 = v28;
        v65 = v15;
        if (v37 < 1)
        {
          __break(1u);
          goto LABEL_37;
        }
        v38 = 0;
        do
        {
          if ((v36 & 0xC000000000000001) != 0)
            v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
          else
            v39 = *(id *)(v36 + 8 * v38 + 32);
          v40 = v39;
          ++v38;
          v41 = objc_msgSend(v39, "blocksWithTypes:inRegion:", 2, 0.0, 0.0, 1.0, 1.0, v64);
          v42 = sub_10000A05C(0, &qword_100296CB0, VNObservation_ptr);
          v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

          sub_1001827D0(v43, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001C8924);
        }
        while (v37 != v38);
        swift_bridgeObjectRelease_n(v36, 2);
        v48 = v67;
        v24 = v65;
        v28 = v64;
LABEL_18:
        v67 = (unint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)v48 >> 62)
        {
          if (v48 < 0)
            v62 = v48;
          else
            v62 = v48 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v48);
          v50 = _CocoaArrayWrapper.endIndex.getter(v62);
          if (v50)
          {
LABEL_20:
            if (v50 >= 1)
            {
              for (i = 0; i != v50; ++i)
              {
                v53 = *(void **)(v48 + 8 * i + 32);
                v54 = objc_opt_self(VNRecognizedTextBlockObservation);
                v55 = swift_dynamicCastObjCClass(v53, v54);
                if (v55)
                {
                  v56 = v55;
                  v57 = v53;
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
                  v60 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  v59 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18);
                  if (v60 >= v59 >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
                  v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v56);
                  specialized Array._endMutation()(v52);
                }
              }
              swift_bridgeObjectRelease();
              v61 = (_QWORD *)v67;
              goto LABEL_33;
            }
LABEL_37:
            __break(1u);
          }
        }
        else
        {
          v50 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v48);
          if (v50)
            goto LABEL_20;
        }
        swift_bridgeObjectRelease();
        v61 = _swiftEmptyArrayStorage;
LABEL_33:
        swift_bridgeObjectRelease();
        v67 = (unint64_t)v61;
        v63 = sub_100006DF4(&qword_100296CA0);
        CheckedContinuation.resume(returning:)(&v67, v63);
        goto LABEL_34;
      }
    }
    swift_bridgeObjectRelease_n(v36, 2);
    v48 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
LABEL_34:

}

uint64_t sub_1001824F0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F5360, (uint64_t)&unk_1001F5388, a2);
}

uint64_t sub_100182504(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F5360, (uint64_t)&unk_1001F5388);
}

uint64_t sub_100182518@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F53A8, (uint64_t)&unk_1001F53D0, a2);
}

uint64_t sub_10018252C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F53A8, (uint64_t)&unk_1001F53D0);
}

uint64_t sub_100182540@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F5240);
  v5 = swift_getKeyPath(&unk_1001F5268);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_1001825AC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F5240);
  v14 = swift_getKeyPath(&unk_1001F5268);
  v11(v8, (uint64_t)v10, v4);
  static Published.subscript.setter(v8, v12, KeyPath, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_1001826C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for LocalePair(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100182720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocalePair(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_100296BA4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10001D380;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static LanguagesStatusService.languagePairPath(_:)[1]);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_10017F4B8;
  return static LanguagesStatusService.languagePairPath(_:)(v5);
}

uint64_t sub_1001827B8(uint64_t a1)
{
  return sub_1001827D0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001C82E0);
}

uint64_t sub_1001827C4(uint64_t a1)
{
  return sub_1001827D0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001C8708);
}

uint64_t sub_1001827D0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_10018298C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001829B0(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_10017DE9C(a1, v1);
}

void sub_1001829B8(uint64_t a1)
{
  uint64_t v1;

  sub_10017E10C(a1, v1, (uint64_t)&unk_10026F6F0, (uint64_t)&unk_100296CC0);
}

void sub_1001829E0(uint64_t a1)
{
  uint64_t v1;

  sub_10017E10C(a1, v1, (uint64_t)&unk_10026F6C8, (uint64_t)&unk_100296CB8);
}

void sub_100182A08(uint64_t a1)
{
  uint64_t v1;

  sub_10017E268(a1, v1);
}

uint64_t sub_100182A1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100296C4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_1001801B0(a1, v4, v5, v6);
}

uint64_t sub_100182A88@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F5360, (uint64_t)&unk_1001F5388, a2);
}

uint64_t sub_100182AAC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F5360, (uint64_t)&unk_1001F5388);
}

uint64_t sub_100182AD0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F53A8, (uint64_t)&unk_1001F53D0, a2);
}

uint64_t sub_100182AF4(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005A060(a1, a2, a3, a4, (uint64_t)&unk_1001F53A8, (uint64_t)&unk_1001F53D0);
}

uint64_t sub_100182B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 65) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v5 + v7 + 1;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100182BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v11;

  type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_DWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_BYTE *)(v1 + 64);
  v9 = (_QWORD *)swift_task_alloc(dword_100296C6C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_100180630(a1, v11, v3, v4, v5, v6, v7, v8);
}

void sub_100182CB4()
{
  _BYTE *v0;
  char *v1;
  char *v2;

  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_image];
  *(_QWORD *)v1 = 0;
  v1[8] = -1;
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_narrowViewport];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v2[32] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_scrollView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_imageView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_currentTranslationView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_retranslateSubscription] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_visualTranslationLocaleSubscription] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_targetLocaleSubscription] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availability] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_availabilitySubscription] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_showErrorOnNextEvent] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_pendingRetranslation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25StaticImageViewController_translationHostingController] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/StaticImageViewController.swift", 49, 2, 78, 0);
  __break(1u);
}

void sub_100182DE0(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  v2 = objc_msgSend(a1, "horizontalSizeClass");
  v3 = objc_msgSend(v1, "traitCollection");
  v4 = objc_msgSend(v3, "horizontalSizeClass");

  if (v2 == v4)
  {
    if (qword_10028A408 != -1)
      swift_once(&qword_10028A408, sub_100120F04);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA320);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Ignoring trait collection change: size classes are the same", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  else
  {
    sub_10017AE88();
  }
}

uint64_t sub_100182F0C(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 + 108) = a4;
  *(_DWORD *)(v4 + 104) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = a3;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = v7;
  return swift_task_switch(sub_100182F84, v6, v7);
}

uint64_t sub_100182F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 108);
  v4 = *(_DWORD *)(v1 + 104);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 72) = v6;
  v7 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 80) = v7;
  *(_QWORD *)(v7 + 16) = v5;
  *(_DWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v7 + 32) = v2;
  *(_BYTE *)(v7 + 40) = v3;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 88) = v8;
  v9 = sub_100006DF4((uint64_t *)&unk_100296C88);
  *v8 = v1;
  v8[1] = sub_10018306C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, v6, &protocol witness table for MainActor, 0xD000000000000044, 0x8000000100200EA0, sub_10018315C, v7, v9);
}

uint64_t sub_10018306C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[7];
    v5 = v2[8];
    v6 = sub_100183114;
  }
  else
  {
    v7 = v2[10];
    swift_release(v2[9]);
    swift_task_dealloc(v7);
    v4 = v2[7];
    v5 = v2[8];
    v6 = sub_1001830E0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1001830E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100183114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10018315C(uint64_t a1)
{
  uint64_t v1;

  sub_100181EC0(a1, *(void **)(v1 + 16), *(unsigned int *)(v1 + 24), *(void **)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_100183178()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001831A4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100296CCC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10003EFA0;
  return sub_10017E0A8();
}

void sub_100183214()
{
  uint64_t v0;

  sub_10017CA18(v0);
}

uint64_t sub_100183220()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10018324C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100296D1C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D380;
  return sub_10017CA80(a1, v4, v5, v6);
}

uint64_t sub_1001832C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001832D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001832D8(uint64_t a1)
{
  uint64_t v1;

  sub_10017AB98(a1, v1);
}

uint64_t sub_1001832EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[24];

  v12 = a8 + 2;
  v13 = String.subscript.getter(a3, a4, a9, a10);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_beginAccess(v12, v22, 1, 0);
  v20 = a8[5];
  a8[2] = v13;
  a8[3] = v15;
  a8[4] = v17;
  a8[5] = v19;
  result = swift_bridgeObjectRelease(v20);
  *a7 = 1;
  return result;
}

unint64_t sub_10018337C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    v9 = String.count.getter(a3, a4);
    v10 = 0;
    if ((v8 & 0x8000000000000000) != 0 || v9 < v4 || a2 < 0)
      return v10;
    v11 = String.index(_:offsetBy:)(15, v8, a3, a4);
    result = String.index(_:offsetBy:)(15, v4, a3, a4);
    if (result >> 14 >= v11 >> 14)
    {
      v12 = String.subscript.getter(v11, result, a3, a4);
      v14 = v13;
      v10 = static String._fromSubstring(_:)(v12);
      swift_bridgeObjectRelease(v14);
      return v10;
    }
  }
  __break(1u);
  return result;
}

id sub_10018345C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

id sub_100183488()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator28SwipableCollectionViewLayout____lazy_storage___swipeController;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC17SequoiaTranslator28SwipableCollectionViewLayout____lazy_storage___swipeController);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator28SwipableCollectionViewLayout____lazy_storage___swipeController);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UISwipeActionController), "initWithSwipeActionHost:style:", v0, 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_1001835B4(void *a1, uint64_t a2, void *a3, char a4)
{
  id v6;
  id v7;
  id v8;
  objc_super v9;

  v9.receiver = a1;
  v9.super_class = (Class)type metadata accessor for SwipableCollectionViewLayout();
  v6 = a3;
  v7 = v9.receiver;
  objc_msgSendSuper2(&v9, "prepareForTransitionFromLayout:", v6);
  v8 = sub_100183488();
  objc_msgSend(v8, "setSwipeEnabled:", a4 & 1, v9.receiver, v9.super_class);

}

id sub_1001839B0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SwipableCollectionViewLayout();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SwipableCollectionViewLayout()
{
  return objc_opt_self(_TtC17SequoiaTranslator28SwipableCollectionViewLayout);
}

void sub_100183C98(char *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(v4, "collectionView");
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, "indexPathForItemAtPoint:", a2, a3);
    if (v17)
    {
      v18 = v17;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v17);

      v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v19(v14, v11, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) != 1)
      {

        v19(a1, v14, v8);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v14, 1, 1, v8);
    }
    v20 = sub_10000A020((uint64_t)v14, (uint64_t *)&unk_100290880);
    IndexPath.init()(v20);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001001FCE70, "SequoiaTranslator/SwipableCollectionViewLayout.swift", 52, 2, 84, 0);
    __break(1u);
  }
}

void sub_1001840C4()
{
  void *v0;
  id v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  v1 = objc_msgSend(v0, "collectionView");
  if (v1)
  {
    v2 = v1;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v4 = objc_msgSend(v2, "cellForItemAtIndexPath:", isa);

    if (v4 && (v5 = type metadata accessor for CardCollectionViewCell(), swift_dynamicCastClass(v4, v5)))
    {
      v6 = v4;
      v7 = sub_100023D30();
      objc_msgSend(v7, "safeAreaInsets");

    }
    else
    {
      if (qword_10028A490 != -1)
        swift_once(&qword_10028A490, sub_100121168);
      v8 = type metadata accessor for Logger(0);
      sub_10000F66C(v8, (uint64_t)qword_1002AA4B8);
      v9 = v4;
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.fault.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v12 = 138412290;
        if (v4)
        {
          v16 = v9;
          v14 = v9;
        }
        else
        {
          v16 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4);
        *v13 = v4;

        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unexpected cell in swipeable collection view: %@; returning zero insets",
          v12,
          0xCu);
        v15 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v13, 1, v15);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001001FCE70, "SequoiaTranslator/SwipableCollectionViewLayout.swift", 52, 2, 47, 0);
    __break(1u);
  }
}

uint64_t sub_1001843D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;

  sub_10018448C(v1 + OBJC_IVAR____TtC17SequoiaTranslator28SwipableCollectionViewLayout_swipeDelegate, (uint64_t)v10);
  if (v11)
  {
    sub_100023AB0((uint64_t)v10, (uint64_t)v7);
    sub_10000A020((uint64_t)v10, &qword_100296D68);
    v3 = v8;
    v4 = v9;
    sub_100023AF4(v7, v8);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8))(v1, a1, v3, v4);
    sub_100009C08(v7);
  }
  else
  {
    sub_10000A020((uint64_t)v10, &qword_100296D68);
    return 0;
  }
  return v5;
}

uint64_t sub_10018448C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100296D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001844D4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1001844F8()
{
  uint64_t v0;

  return (id)(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100184520(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100184530(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t destroy for SystemApertureButton(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for SystemApertureButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for SystemApertureButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

_QWORD *assignWithTake for SystemApertureButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for SystemApertureButton()
{
  return &type metadata for SystemApertureButton;
}

uint64_t sub_10018467C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  NSString v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = type metadata accessor for UIButton.Configuration(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)objc_opt_self(UIButtonConfiguration);
  v13 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v14 = objc_msgSend(v12, "sbui_systemApertureTextButtonConfigurationCompatibleWithTraitCollection:", v13);

  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setTitle:", v16);

  sub_10000A05C(0, &qword_100290B58, UIButton_ptr);
  static UIButton.Configuration._unconditionallyBridgeFromObjectiveC(_:)(v15);

  sub_10000A05C(0, (unint64_t *)&qword_1002948E0, UIAction_ptr);
  v17 = (_QWORD *)swift_allocObject(&unk_10026F940, 48, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  swift_bridgeObjectRetain(a3);
  swift_retain(a5);
  v18 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100184998, v17);
  v19 = UIButton.init(configuration:primaryAction:)(v11, v18);

  return v19;
}

uint64_t sub_100184858(uint64_t a1)
{
  uint64_t *v1;

  return sub_10018467C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100184864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100184928();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001848B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100184928();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100184904(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100184928();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100184928()
{
  unint64_t result;

  result = qword_100296D70;
  if (!qword_100296D70)
  {
    result = swift_getWitnessTable(&unk_1001F5508, &type metadata for SystemApertureButton);
    atomic_store(result, (unint64_t *)&qword_100296D70);
  }
  return result;
}

uint64_t sub_10018496C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100184998()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t *sub_1001849B8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006DF4(&qword_100291498);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = *v16;
    v18 = v16[1];
    *v15 = *v16;
    v15[1] = v18;
    v19 = v16 + 2;
    v20 = v16[3];
    swift_retain(v17);
    swift_retain(v18);
    if (v20 > 5)
    {
      v15[2] = *v19;
      v15[3] = v20;
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      *((_OWORD *)v15 + 1) = *(_OWORD *)v19;
    }
    v21 = a3[6];
    v22 = a3[7];
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v23;
    v24 = *(uint64_t *)((char *)a2 + v22);
    *(uint64_t *)((char *)a1 + v22) = v24;
    v25 = a3[8];
    v26 = a3[9];
    v27 = *(uint64_t *)((char *)a2 + v25);
    *(uint64_t *)((char *)a1 + v25) = v27;
    v28 = *(void **)((char *)a2 + v26);
    *(uint64_t *)((char *)a1 + v26) = (uint64_t)v28;
    swift_retain(v23);
    swift_retain(v24);
    swift_retain(v27);
    v29 = v28;
  }
  return a1;
}

void sub_100184B28(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = sub_100006DF4(&qword_100291498);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  swift_release(*v6);
  swift_release(v6[1]);
  if (v6[3] >= 6uLL)
    swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)((char *)a1 + a2[6]));
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  swift_release(*(_QWORD *)((char *)a1 + a2[8]));

}

uint64_t *sub_100184BEC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;

  v6 = sub_100006DF4(&qword_100291498);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  *v13 = *v14;
  v13[1] = v16;
  v17 = v14 + 2;
  v18 = v14[3];
  swift_retain(v15);
  swift_retain(v16);
  if (v18 > 5)
  {
    v13[2] = *v17;
    v13[3] = v18;
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    *((_OWORD *)v13 + 1) = *(_OWORD *)v17;
  }
  v19 = a3[6];
  v20 = a3[7];
  v21 = *(uint64_t *)((char *)a2 + v19);
  *(uint64_t *)((char *)a1 + v19) = v21;
  v22 = *(uint64_t *)((char *)a2 + v20);
  *(uint64_t *)((char *)a1 + v20) = v22;
  v23 = a3[8];
  v24 = a3[9];
  v25 = *(uint64_t *)((char *)a2 + v23);
  *(uint64_t *)((char *)a1 + v23) = v25;
  v26 = *(void **)((char *)a2 + v24);
  *(uint64_t *)((char *)a1 + v24) = (uint64_t)v26;
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v25);
  v27 = v26;
  return a1;
}

uint64_t *sub_100184D30(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v36;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, &qword_100291498);
    v6 = sub_100006DF4(&qword_100291498);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = *(uint64_t *)((char *)a1 + v12);
  v16 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = v14[1];
  v18 = v13[1];
  v13[1] = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = v13[3];
  v20 = v14[3];
  if (v19 == 5)
  {
    if (v20 >= 6)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (v20 == 5)
  {
    sub_100161C38((uint64_t)(v13 + 2));
    goto LABEL_16;
  }
  if (v19 >= 5)
  {
    if (v20 >= 5)
    {
      v13[2] = v14[2];
      v36 = v14[3];
      v13[3] = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    sub_10012D4AC((uint64_t)(v13 + 2));
    goto LABEL_16;
  }
  if (v20 < 5)
  {
LABEL_16:
    *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
    goto LABEL_17;
  }
LABEL_13:
  v13[2] = v14[2];
  v21 = v14[3];
  v13[3] = v21;
  swift_bridgeObjectRetain(v21);
LABEL_17:
  v22 = a3[6];
  v23 = *(uint64_t *)((char *)a2 + v22);
  v24 = *(uint64_t *)((char *)a1 + v22);
  *(uint64_t *)((char *)a1 + v22) = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = a3[7];
  v26 = *(uint64_t *)((char *)a2 + v25);
  v27 = *(uint64_t *)((char *)a1 + v25);
  *(uint64_t *)((char *)a1 + v25) = v26;
  swift_retain(v26);
  swift_release(v27);
  v28 = a3[8];
  v29 = *(uint64_t *)((char *)a2 + v28);
  v30 = *(uint64_t *)((char *)a1 + v28);
  *(uint64_t *)((char *)a1 + v28) = v29;
  swift_retain(v29);
  swift_release(v30);
  v31 = a3[9];
  v32 = *(void **)((char *)a2 + v31);
  v33 = *(void **)((char *)a1 + v31);
  *(uint64_t *)((char *)a1 + v31) = (uint64_t)v32;
  v34 = v32;

  return a1;
}

char *sub_100184F3C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;

  v6 = sub_100006DF4(&qword_100291498);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  return a1;
}

char *sub_100185014(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  if (a1 != a2)
  {
    sub_10000A020((uint64_t)a1, &qword_100291498);
    v6 = sub_100006DF4(&qword_100291498);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v11);
  v12 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v12);
  v13 = v10 + 16;
  v14 = *((_QWORD *)v9 + 3);
  v15 = *((_QWORD *)v10 + 3);
  if (v14 != 5)
  {
    if (v15 == 5)
    {
      sub_100161C38((uint64_t)(v9 + 16));
    }
    else if (v14 >= 5)
    {
      if (v15 >= 5)
      {
        *((_QWORD *)v9 + 2) = *v13;
        *((_QWORD *)v9 + 3) = v15;
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      sub_10012D4AC((uint64_t)(v9 + 16));
    }
  }
  *((_OWORD *)v9 + 1) = *(_OWORD *)v13;
LABEL_12:
  v16 = a3[6];
  v17 = *(_QWORD *)&a1[v16];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  swift_release(v17);
  v18 = a3[7];
  v19 = *(_QWORD *)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  swift_release(v19);
  v20 = a3[8];
  v21 = *(_QWORD *)&a1[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  swift_release(v21);
  v22 = a3[9];
  v23 = *(void **)&a1[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];

  return a1;
}

uint64_t sub_1001851B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001851C4);
}

uint64_t sub_1001851C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100006DF4(&qword_100294A30);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100185248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100185254);
}

uint64_t sub_100185254(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_100294A30);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TabBarLayoutView(uint64_t a1)
{
  uint64_t result;

  result = qword_100296DD0;
  if (!qword_100296DD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TabBarLayoutView);
  return result;
}

void sub_100185310(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_10013A864(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = " ";
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_1001853A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100217734, 1);
}

uint64_t sub_1001853B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  _QWORD v45[2];
  __int128 v46;

  v2 = v1;
  v40 = a1;
  v3 = sub_100006DF4(&qword_10028CE40);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TabBarLayoutView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_100296E18);
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  __chkstk_darwin(v10);
  v37 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001874E0(v1, (uint64_t)v9);
  v12 = type metadata accessor for MainActor(0);
  v13 = static MainActor.shared.getter(v12);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = v15 + v8;
  v17 = v14 | 7;
  v18 = swift_allocObject(&unk_10026FA18, v16, v14 | 7);
  *(_QWORD *)(v18 + 16) = v13;
  *(_QWORD *)(v18 + 24) = &protocol witness table for MainActor;
  sub_100187528((uint64_t)v9, v18 + v15);
  v19 = sub_1001874E0(v1, (uint64_t)v9);
  v20 = static MainActor.shared.getter(v19);
  v21 = swift_allocObject(&unk_10026FA40, v16, v17);
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = &protocol witness table for MainActor;
  sub_100187528((uint64_t)v9, v21 + v15);
  Binding.init(get:set:)(v45, sub_10018756C, v18, sub_1001876C0, v21, &type metadata for AppSection);
  v43[0] = v45[0];
  v43[1] = v45[1];
  v44 = v46;
  v42 = v2;
  v22 = sub_100006DF4(&qword_100296E20);
  v23 = sub_10000B694();
  v24 = sub_100012334(&qword_100296E28, &qword_100296E20, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v25 = v37;
  TabView.init(selection:content:)(v43, sub_100187700, v41, &type metadata for AppSection, v22, v23, v24);
  KeyPath = swift_getKeyPath(&unk_1001F5670);
  v27 = enum case for UserInterfaceSizeClass.compact(_:);
  v28 = type metadata accessor for UserInterfaceSizeClass(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v5, v27, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v5, 0, 1, v28);
  v30 = sub_100006DF4(&qword_100296E30);
  v31 = v40;
  v32 = (uint64_t *)(v40 + *(int *)(v30 + 36));
  v33 = sub_100006DF4(&qword_100296E38);
  sub_10000B074((uint64_t)v5, (uint64_t)v32 + *(int *)(v33 + 28), &qword_10028CE40);
  *v32 = KeyPath;
  v35 = v38;
  v34 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v31, v25, v39);
  sub_10000A020((uint64_t)v5, &qword_10028CE40);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v25, v34);
}

_QWORD *sub_1001856B4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for TabBarLayoutView(0);
  sub_100006DF4(&qword_100295F10);
  result = Binding.wrappedValue.getter(&v5);
  v3 = v5;
  v4 = v6;
  if (v6 == 5)
  {
    v3 = 0;
    v4 = 0;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_100185730(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  __int128 v11;

  v4 = *a1;
  v5 = a1[1];
  v6 = a4 + *(int *)(type metadata accessor for TabBarLayoutView(0) + 20);
  v7 = *(_QWORD *)(v6 + 8);
  v10[2] = *(_QWORD *)v6;
  v10[3] = v7;
  v11 = *(_OWORD *)(v6 + 16);
  v10[0] = v4;
  v10[1] = v5;
  sub_10000B720(v4, v5);
  v8 = sub_100006DF4(&qword_100295F10);
  return Binding.wrappedValue.setter(v10, v8);
}

uint64_t sub_1001857AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t OpaqueTypeConformance2;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181[8];
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  ValueMetadata *v185;
  unint64_t v186;

  v175 = a1;
  v171 = a2;
  v167 = sub_100006DF4(&qword_100296E40);
  __chkstk_darwin(v167);
  v168 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100006DF4(&qword_100296E48);
  v161 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v160 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100006DF4(&qword_100296E50);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v162 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100006DF4(&qword_100296E58);
  __chkstk_darwin(v158);
  v166 = (uint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100006DF4(&qword_100296E60);
  v7 = __chkstk_darwin(v159);
  v170 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v169 = (uint64_t)&v125 - v9;
  v155 = sub_100006DF4(&qword_100296E68);
  __chkstk_darwin(v155);
  v156 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100006DF4(&qword_100296E70);
  v149 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v148 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100006DF4(&qword_100296E78);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v150 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100006DF4(&qword_100296E80);
  __chkstk_darwin(v145);
  v154 = (uint64_t)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100006DF4(&qword_100296E88);
  v14 = __chkstk_darwin(v147);
  v177 = (uint64_t)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v176 = (uint64_t)&v125 - v16;
  v138 = sub_100006DF4(&qword_100296E90);
  __chkstk_darwin(v138);
  v139 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for ImageTranslationView(0);
  __chkstk_darwin(v127);
  v125 = (uint64_t)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100006DF4(&qword_100296E98);
  v129 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100006DF4(&qword_100296EA0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v132 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100006DF4(&qword_100296EA8);
  __chkstk_darwin(v126);
  v135 = (uint64_t)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100006DF4(&qword_100296EB0);
  __chkstk_darwin(v130);
  v137 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v172 = sub_100006DF4(&qword_100296EB8);
  v143 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v136 = (uint64_t)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100006DF4(&qword_100296EC0);
  v25 = __chkstk_darwin(v24);
  v157 = (uint64_t)&v125 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v180 = (uint64_t)&v125 - v27;
  v28 = sub_100006DF4(&qword_100293260);
  __chkstk_darwin(v28);
  v142 = (char *)&v125 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100006DF4(&qword_100296EC8);
  __chkstk_darwin(v179);
  v31 = (char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100006DF4(&qword_100296ED0);
  v178 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = (char *)&v125 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100006DF4(&qword_100296ED8);
  v35 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v37 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v141 = sub_100006DF4(&qword_100296EE0);
  __chkstk_darwin(v141);
  v39 = (char *)&v125 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = (char *)sub_100006DF4(&qword_100296EE8);
  v40 = __chkstk_darwin(v144);
  v146 = (uint64_t)&v125 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v125 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v125 - v45;
  v182 = a1;
  v47 = type metadata accessor for TranslateContentView(0);
  v48 = sub_100007D5C(&qword_100295E98, type metadata accessor for TranslateContentView, (uint64_t)&unk_1001F60B0);
  NavigationStack.init<>(root:)(sub_100187710, v181, v47, v48);
  v49 = sub_100006DF4(&qword_100296EF0);
  v173 = v49;
  v50 = sub_100012334(&qword_100296EF8, &qword_100296ED0, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  *(_QWORD *)&v174 = sub_100187718();
  View.tabItem<A>(_:)(sub_100186AC8, 0, v32, v49, v50);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v34, v32);
  v51 = v140;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v31, v37, v140);
  v52 = &v31[*(int *)(v179 + 36)];
  *(_QWORD *)v52 = 0;
  *((_QWORD *)v52 + 1) = 0;
  sub_10000B074((uint64_t)v31, (uint64_t)v39, &qword_100296EC8);
  v53 = &v39[*(int *)(v141 + 36)];
  *(_QWORD *)v53 = 0;
  *((_QWORD *)v53 + 1) = 0;
  sub_10000A020((uint64_t)v31, &qword_100296EC8);
  v54 = v37;
  v55 = v142;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v54, v51);
  sub_1000D6494(v55);
  v56 = type metadata accessor for ColorScheme(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = 1;
  v178 = *(_QWORD *)(v57 + 56);
  v179 = v56;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v178)(v55, 0, 1);
  sub_10000B074((uint64_t)v55, (uint64_t)&v44[*((int *)v144 + 9)], &qword_100293260);
  sub_10000B074((uint64_t)v39, (uint64_t)v44, &qword_100296EE0);
  sub_10000A020((uint64_t)v55, &qword_100293260);
  sub_10000A020((uint64_t)v39, &qword_100296EE0);
  v144 = v46;
  sub_1000110A4((uint64_t)v44, (uint64_t)v46, &qword_100296EE8);
  if (sub_100005DFC())
  {
    v185 = &type metadata for TranslateFeatures;
    v186 = sub_100009BC4();
    LOBYTE(v183) = 0;
    v59 = isFeatureEnabled(_:)(&v183);
    sub_100009C08(&v183);
    if ((v59 & 1) != 0)
    {
      v60 = v125;
      sub_1000E0078(v125);
      v61 = sub_100006DF4(&qword_10028F4B0);
      v62 = type metadata accessor for ToolbarPlacement(0);
      v63 = swift_allocObject(v61, ((*(unsigned __int8 *)(*(_QWORD *)(v62 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v62 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v62 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v62 - 8) + 80) | 7);
      *(_OWORD *)(v63 + 16) = xmmword_1001E64F0;
      static ToolbarPlacement.tabBar.getter();
      v64 = sub_100007D5C(&qword_100295EB0, type metadata accessor for ImageTranslationView, (uint64_t)&unk_1001EE3E0);
      v65 = v128;
      v66 = v127;
      View.toolbarBackground(_:for:)(2, v63, v127, v64);
      swift_bridgeObjectRelease();
      sub_100032DAC(v60, type metadata accessor for ImageTranslationView);
      v183 = v66;
      v184 = v64;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v183, &opaque type descriptor for <<opaque return type of View.toolbarBackground(_:for:)>>, 1);
      v68 = v132;
      v69 = v131;
      View.tabItem<A>(_:)(sub_100186ED0, 0, v131, v173, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v65, v69);
      v70 = v133;
      v71 = (uint64_t)v139;
      v72 = v134;
      (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v139, v68, v134);
      v73 = *(int *)(v138 + 36);
      v141 = xmmword_1001ED9D0;
      *(_OWORD *)(v71 + v73) = xmmword_1001ED9D0;
      v74 = v135;
      sub_10000B074(v71, v135, &qword_100296E90);
      *(_OWORD *)(v74 + *(int *)(v126 + 36)) = v141;
      sub_10000A020(v71, &qword_100296E90);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v72);
      v75 = v179;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v57 + 104))(v55, enum case for ColorScheme.dark(_:), v179);
      ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v178)(v55, 0, 1, v75);
      v76 = (uint64_t)v137;
      sub_10000B074((uint64_t)v55, (uint64_t)&v137[*(int *)(v130 + 36)], &qword_100293260);
      sub_10000B074(v74, v76, &qword_100296EA8);
      sub_10000A020((uint64_t)v55, &qword_100293260);
      sub_10000A020(v74, &qword_100296EA8);
      v78 = static Color.appBackgroundColor.getter(v77);
      v79 = static Edge.Set.all.getter(v78);
      LOBYTE(v71) = v79;
      v80 = static Alignment.center.getter(v79);
      v82 = v81;
      v83 = v136;
      sub_10000B074(v76, v136, &qword_100296EB0);
      v84 = v83 + *(int *)(v172 + 36);
      *(_QWORD *)v84 = v78;
      *(_BYTE *)(v84 + 8) = v71;
      *(_QWORD *)(v84 + 16) = v80;
      *(_QWORD *)(v84 + 24) = v82;
      sub_10000A020(v76, &qword_100296EB0);
      sub_1000110A4(v83, v180, &qword_100296EB8);
      v58 = 0;
    }
  }
  v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v143 + 56))(v180, v58, 1, v172);
  __chkstk_darwin(v85);
  v86 = v175;
  *(&v125 - 2) = v175;
  v87 = sub_100006DF4(&qword_100296F08);
  v88 = type metadata accessor for ConversationView(255);
  v89 = sub_100007D5C(&qword_100295EC8, type metadata accessor for ConversationView, (uint64_t)&unk_1001EB488);
  v183 = v88;
  v184 = v89;
  v90 = swift_getOpaqueTypeConformance2(&v183, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v91 = v148;
  NavigationStack.init<>(root:)(sub_1001877B4, &v125 - 4, v87, v90);
  v92 = sub_100012334(&qword_100296F10, &qword_100296E70, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  v93 = v150;
  v94 = v151;
  v95 = v173;
  View.tabItem<A>(_:)(sub_1001872EC, 0, v151, v173, v92);
  (*(void (**)(char *, uint64_t))(v149 + 8))(v91, v94);
  v96 = v152;
  v97 = (uint64_t)v156;
  v98 = v153;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v156, v93, v153);
  v99 = *(int *)(v155 + 36);
  v172 = xmmword_1001EB430;
  *(_OWORD *)(v97 + v99) = xmmword_1001EB430;
  v100 = v154;
  sub_10000B074(v97, v154, &qword_100296E68);
  *(_OWORD *)(v100 + *(int *)(v145 + 36)) = v172;
  sub_10000A020(v97, &qword_100296E68);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v98);
  sub_1000D6494(v55);
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v178)(v55, 0, 1, v179);
  v101 = v177;
  sub_10000B074((uint64_t)v55, v177 + *(int *)(v147 + 36), &qword_100293260);
  sub_10000B074(v100, v101, &qword_100296E80);
  sub_10000A020((uint64_t)v55, &qword_100293260);
  sub_10000A020(v100, &qword_100296E80);
  v102 = sub_1000110A4(v101, v176, &qword_100296E88);
  __chkstk_darwin(v102);
  *(&v125 - 2) = v86;
  v103 = type metadata accessor for FavoritesView(0);
  v104 = sub_100007D5C(&qword_100295ED0, type metadata accessor for FavoritesView, (uint64_t)&unk_1001EDB50);
  v105 = v160;
  NavigationView.init(content:)(sub_1001877BC, &v125 - 4, v103, v104);
  v106 = sub_100012334(&qword_100296F18, &qword_100296E48, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
  v107 = v162;
  v108 = v163;
  View.tabItem<A>(_:)(sub_1001874BC, 0, v163, v95, v106);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v105, v108);
  v109 = v55;
  v110 = v164;
  v111 = (uint64_t)v168;
  v112 = v165;
  (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v168, v107, v165);
  v113 = *(int *)(v167 + 36);
  v174 = xmmword_1001E6600;
  *(_OWORD *)(v111 + v113) = xmmword_1001E6600;
  v114 = v166;
  sub_10000B074(v111, v166, &qword_100296E40);
  *(_OWORD *)(v114 + *(int *)(v158 + 36)) = v174;
  sub_10000A020(v111, &qword_100296E40);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v107, v112);
  sub_1000D6494(v109);
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v178)(v109, 0, 1, v179);
  v115 = (uint64_t)v170;
  sub_10000B074((uint64_t)v109, (uint64_t)&v170[*(int *)(v159 + 36)], &qword_100293260);
  sub_10000B074(v114, v115, &qword_100296E58);
  sub_10000A020((uint64_t)v109, &qword_100293260);
  sub_10000A020(v114, &qword_100296E58);
  v116 = v169;
  sub_1000110A4(v115, v169, &qword_100296E60);
  v117 = (uint64_t)v144;
  v118 = v146;
  sub_10000B074((uint64_t)v144, v146, &qword_100296EE8);
  v119 = v157;
  sub_10000B074(v180, v157, &qword_100296EC0);
  v121 = v176;
  v120 = v177;
  sub_10000B074(v176, v177, &qword_100296E88);
  sub_10000B074(v116, v115, &qword_100296E60);
  v122 = v171;
  sub_10000B074(v118, v171, &qword_100296EE8);
  v123 = (int *)sub_100006DF4(&qword_100296F20);
  sub_10000B074(v119, v122 + v123[12], &qword_100296EC0);
  sub_10000B074(v120, v122 + v123[16], &qword_100296E88);
  sub_10000B074(v115, v122 + v123[20], &qword_100296E60);
  sub_10000A020(v116, &qword_100296E60);
  sub_10000A020(v121, &qword_100296E88);
  sub_10000A020(v180, &qword_100296EC0);
  sub_10000A020(v117, &qword_100296EE8);
  sub_10000A020(v115, &qword_100296E60);
  sub_10000A020(v120, &qword_100296E88);
  sub_10000A020(v119, &qword_100296EC0);
  return sub_10000A020(v118, &qword_100296EE8);
}

uint64_t sub_100186A0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TabBarLayoutView(0) + 32));
  KeyPath = swift_getKeyPath(&unk_1001F5670);
  v5 = (uint64_t *)((char *)a2 + *(int *)(type metadata accessor for TranslateContentView(0) + 20));
  *v5 = KeyPath;
  v6 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v5, v6, 0);
  v7 = type metadata accessor for ComposeTranslationViewModel(0);
  v8 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  swift_retain(v3);
  result = ObservedObject.init(wrappedValue:)(v9, v7, v8);
  *a2 = result;
  a2[1] = v11;
  return result;
}

uint64_t sub_100186AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v37 = sub_100006DF4(&qword_10028AB38);
  __chkstk_darwin(v37);
  v36 = (uint64_t)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100006DF4(&qword_10028AB40);
  __chkstk_darwin(v34);
  v31 = (uint64_t)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100006DF4(&qword_10028AB48);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100006DF4(&qword_10028AB50);
  __chkstk_darwin(v32);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100006DF4(&qword_10028AB58);
  __chkstk_darwin(v35);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_10028AB60);
  v30 = *(_QWORD *)(v10 - 8);
  v11 = v30;
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100006DF4(&qword_100290CE8);
  __chkstk_darwin(v33);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_10028AB90);
  v17 = sub_10000B218();
  Label.init(title:icon:)(sub_10000B0B8, 0, sub_10000B130, 0, &type metadata for Text, v16, &protocol witness table for Text, v17);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v5, v13, v10);
  swift_storeEnumTagMultiPayload(v5, v3, 0);
  v18 = sub_100006DF4(&qword_10028AB30);
  v19 = sub_100012334(&qword_10028AB80, &qword_10028AB60, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v20 = sub_100012334(&qword_10028AB68, &qword_10028AB30, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  _ConditionalContent<>.init(storage:)(v5, v10, v18, v19, v20);
  v21 = v31;
  sub_10000B074((uint64_t)v7, v31, &qword_10028AB50);
  swift_storeEnumTagMultiPayload(v21, v34, 0);
  v22 = sub_100006DF4(&qword_10028AB28);
  v23 = sub_10000AEF0();
  v24 = sub_10000AFBC();
  _ConditionalContent<>.init(storage:)(v21, v32, v22, v23, v24);
  sub_10000A020((uint64_t)v7, &qword_10028AB50);
  v25 = v36;
  sub_10000B074((uint64_t)v9, v36, &qword_10028AB58);
  swift_storeEnumTagMultiPayload(v25, v37, 0);
  v26 = sub_10000AE84();
  _ConditionalContent<>.init(storage:)(v25, v35, v22, v26, v24);
  sub_10000A020((uint64_t)v9, &qword_10028AB58);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
  v27 = sub_1000CAF10(&qword_100290CE0, &qword_100290CE8, (void (*)(void))sub_10000AE84);
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001002001E0, v33, v27);
  return sub_10000A020((uint64_t)v15, &qword_100290CE8);
}

uint64_t sub_100186ED0()
{
  return sub_10018730C(1, 0x61546172656D6163, 0xEF6E6F7474754262);
}

uint64_t sub_100186EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;

  v51 = a2;
  v3 = sub_100006DF4(&qword_10028CE50);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (int *)type metadata accessor for ConversationView(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(char **)(a1 + *(int *)(type metadata accessor for TabBarLayoutView(0) + 36));
  v10 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_deviceHelper];
  v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_languagesService];
  v12 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session];
  *v5 = swift_getKeyPath(&unk_1001F5670);
  v13 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v5, v13, 0);
  KeyPath = swift_getKeyPath(&unk_1001F56A0);
  v15 = (_QWORD *)((char *)v8 + v6[7]);
  *v15 = KeyPath;
  v16 = sub_100006DF4(&qword_10028F368);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  v17 = type metadata accessor for SharedTranslationOptions(0);
  v18 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  v19 = v9;
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  *v8 = EnvironmentObject.init()(v17, v18);
  v8[1] = v20;
  v21 = type metadata accessor for SceneContext(0);
  v22 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v8[2] = EnvironmentObject.init()(v21, v22);
  v8[3] = v23;
  sub_1000110A4((uint64_t)v5, (uint64_t)v8 + v6[6], &qword_10028CE50);
  v24 = (_QWORD *)((char *)v8 + v6[8]);
  v25 = type metadata accessor for ConversationViewModel(0);
  v26 = sub_100007D5C(&qword_10028EA70, type metadata accessor for ConversationViewModel, (uint64_t)&unk_1001EBA68);
  *v24 = ObservedObject.init(wrappedValue:)(v19, v25, v26);
  v24[1] = v27;
  v28 = (_QWORD *)((char *)v8 + v6[9]);
  v29 = type metadata accessor for DeviceHelper(0);
  v30 = sub_100007D5C(&qword_100290788, type metadata accessor for DeviceHelper, (uint64_t)&unk_1001EC370);
  *v28 = ObservedObject.init(wrappedValue:)(v10, v29, v30);
  v28[1] = v31;
  v32 = (_QWORD *)((char *)v8 + v6[10]);
  v33 = type metadata accessor for LanguagesService(0);
  v34 = sub_100007D5C((unint64_t *)&unk_100298710, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagesService, (uint64_t)&protocol conformance descriptor for LanguagesService);
  *v32 = ObservedObject.init(wrappedValue:)(v11, v33, v34);
  v32[1] = v35;
  v36 = (_QWORD *)((char *)v8 + v6[11]);
  v37 = type metadata accessor for TranslationSession_RD(0);
  v38 = sub_100007D5C(&qword_100290790, type metadata accessor for TranslationSession_RD, (uint64_t)"ŝ\a");
  *v36 = ObservedObject.init(wrappedValue:)(v12, v37, v38);
  v36[1] = v39;
  v40 = (char *)v8 + v6[12];
  LOBYTE(v52) = 0;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v41 = *((_QWORD *)&v53 + 1);
  *v40 = v53;
  *((_QWORD *)v40 + 1) = v41;
  v42 = v6[13];
  v52 = 0;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Int);
  *(_OWORD *)((char *)v8 + v42) = v53;
  v43 = LocalizedStringKey.init(stringLiteral:)(0x41535245564E4F43, 0xEC0000004E4F4954);
  v45 = v44;
  LOBYTE(v12) = v46;
  v48 = v47;
  v49 = sub_100007D5C(&qword_100295EC8, type metadata accessor for ConversationView, (uint64_t)&unk_1001EB488);
  View.navigationTitle(_:)(v43, v45, v12 & 1, v48, v6, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100032DAC((uint64_t)v8, type metadata accessor for ConversationView);
}

uint64_t sub_1001872EC()
{
  return sub_10018730C(2, 0xD000000000000015, 0x80000001002001C0);
}

uint64_t sub_10018730C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = sub_100006DF4(&qword_100290CE8);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A59C(0, a1, (uint64_t)v8);
  v9 = sub_1000CAF10(&qword_100290CE0, &qword_100290CE8, (void (*)(void))sub_10000AE84);
  View.accessibilityIdentifier(_:)(a2, a3, v6, v9);
  return sub_10000A020((uint64_t)v8, &qword_100290CE8);
}

double sub_1001873E0@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t *v10;
  uint64_t v11;
  double result;

  v4 = (int *)type metadata accessor for TabBarLayoutView(0);
  v5 = *(_QWORD *)(a1 + v4[6]);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + v4[8]) + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + v4[9]) + OBJC_IVAR____TtC17SequoiaTranslator21ConversationViewModel_session);
  v8 = *(_QWORD *)(a1 + v4[7]);
  KeyPath = swift_getKeyPath(&unk_1001F5670);
  v10 = (_QWORD *)((char *)a2 + *(int *)(type metadata accessor for FavoritesView(0) + 32));
  *v10 = KeyPath;
  v11 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  *(_QWORD *)&result = swift_retain(v8).n128_u64[0];
  return result;
}

uint64_t sub_1001874BC()
{
  return sub_10018730C(3, 0xD000000000000012, 0x8000000100201030);
}

uint64_t sub_1001874E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabBarLayoutView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100187528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabBarLayoutView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10018756C@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for TabBarLayoutView(0);
  return sub_1001856B4(a1);
}

uint64_t sub_1001875B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (int *)type metadata accessor for TabBarLayoutView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006DF4(&qword_100291498);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  swift_release(*v9);
  swift_release(v9[1]);
  if (v9[3] >= 6uLL)
    swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)((char *)v6 + v1[6]));
  swift_release(*(_QWORD *)((char *)v6 + v1[7]));
  swift_release(*(_QWORD *)((char *)v6 + v1[8]));

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001876C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TabBarLayoutView(0) - 8) + 80);
  return sub_100185730(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_100187700@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001857AC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100187710@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100186A0C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100187718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296F00;
  if (!qword_100296F00)
  {
    v1 = sub_1000070BC(&qword_100296EF0);
    sub_1000CAF10(&qword_100290CE0, &qword_100290CE8, (void (*)(void))sub_10000AE84);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100296F00);
  }
  return result;
}

uint64_t sub_1001877B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100186EF8(*(_QWORD *)(v1 + 16), a1);
}

double sub_1001877BC@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1001873E0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1001877D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296F28;
  if (!qword_100296F28)
  {
    v1 = sub_1000070BC(&qword_100296E30);
    sub_100012334(&qword_100296F30, &qword_100296E18, (uint64_t)&protocol conformance descriptor for TabView<A, B>);
    sub_100012334(&qword_100296F38, &qword_100296E38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100296F28);
  }
  return result;
}

id sub_10018786C()
{
  char *v0;
  char *v1;
  NSString v2;
  id v3;
  id v4;
  id result;
  void *v6;
  NSString v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  NSString v16;
  id v17;
  Class isa;
  id v19;
  Swift::String v20;
  Swift::String v21;
  NSString v22;
  id v23;
  id v24;
  NSString v25;
  id v26;
  objc_super v27;
  Swift::String v28;
  Swift::String v29;

  v1 = &v0[OBJC_IVAR____TtC17SequoiaTranslator17TempOptInReprompt_delegate];
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectWeakInit(v1, 0);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v27.receiver = v0;
  v27.super_class = (Class)type metadata accessor for TempOptInReprompt();
  v3 = objc_msgSendSuper2(&v27, "initWithTitle:", v2);

  v4 = v3;
  result = objc_msgSend(v4, "view");
  if (result)
  {
    v6 = result;
    v7 = String._bridgeToObjectiveC()();
    v8 = (void *)objc_opt_self(UIColor);
    v9 = objc_msgSend(v8, "colorNamed:", v7);

    objc_msgSend(v6, "setTintColor:", v9);
    v10 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
    v11 = objc_msgSend(v4, "headerView");
    v12 = (void *)objc_opt_self(NSBundle);
    v13 = objc_msgSend(v12, "mainBundle");
    v14._countAndFlagsBits = 0xD00000000000001BLL;
    v28._countAndFlagsBits = 0xD000000000000035;
    v28._object = (void *)0x8000000100201160;
    v14._object = (void *)0x8000000100201140;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v28);

    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setDetailText:", v16, swift_bridgeObjectRelease().n128_f64[0]);

    v17 = objc_msgSend(v4, "buttonTray");
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "setPrivacyLinkForBundles:", isa);

    objc_msgSend(v10, "addTarget:action:forControlEvents:", v4, "continueButtonPressed", 0x2000);
    v19 = objc_msgSend(v12, "mainBundle");
    v29._countAndFlagsBits = 0xD000000000000015;
    v29._object = (void *)0x80000001001FE8F0;
    v20._countAndFlagsBits = 0x45554E49544E4F43;
    v20._object = (void *)0xE800000000000000;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v29);

    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "setTitle:forState:", v22, 0, swift_bridgeObjectRelease().n128_f64[0]);

    v23 = objc_msgSend(v8, "whiteColor");
    objc_msgSend(v10, "setTitleColor:forState:", v23, 0);

    v24 = v10;
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "setAccessibilityIdentifier:", v25);

    v26 = objc_msgSend(v4, "buttonTray");
    objc_msgSend(v26, "addButton:", v24);

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100187D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v1 = sub_100006DF4(&qword_100294C58);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100006DF4(&qword_100294CC0);
  __chkstk_darwin(v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator17TempOptInReprompt_delegate);
  if (result)
  {
    v9 = result;
    v10 = result + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_presentationContinuation;
    swift_beginAccess(result + OBJC_IVAR____TtC17SequoiaTranslator19OnBoardingPresenter_presentationContinuation, v13, 0, 0);
    sub_10013EF38(v10, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
    {
      sub_10013EF80((uint64_t)v7);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
      v11 = sub_10013EF80((uint64_t)v7);
      CheckedContinuation.resume(returning:)(v11, v1);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    return swift_unknownObjectRelease(v9);
  }
  return result;
}

id sub_100187F48()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TempOptInReprompt();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TempOptInReprompt()
{
  return objc_opt_self(_TtC17SequoiaTranslator17TempOptInReprompt);
}

unint64_t sub_100187FA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297A40;
  if (!qword_100297A40)
  {
    v1 = objc_opt_self(UIKeyCommand);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100297A40);
  }
  return result;
}

void sub_100187FE4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_100188034(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

uint64_t sub_1001880AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  __n128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v53 = type metadata accessor for CharacterSet(0);
  v4 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StreamingRequestInfo(0);
  v8 = __chkstk_darwin(v7);
  v54 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v55 = (uint64_t)&v52 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v52 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v52 - v16;
  v18 = Locale.ltIdentifier.getter(v15);
  v20 = v19;
  v21 = Locale.ltIdentifier.getter(v18);
  if (v18 == v21 && v20 == v22)
  {
    swift_bridgeObjectRelease_n(v20, 2);
    sub_10009761C(a1, (uint64_t)v17);
    v25 = sub_10009761C(v1, (uint64_t)v14);
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10009761C(a1, (uint64_t)v17);
    v25 = sub_10009761C(v1, (uint64_t)v14);
    if ((v24 & 1) == 0)
    {
      sub_10019034C((uint64_t)v14);
      sub_10019034C((uint64_t)v17);
      v26 = v55;
      sub_10009761C(a1, v55);
      v27 = v54;
      sub_10009761C(v2, v54);
      v28 = 0;
      goto LABEL_20;
    }
  }
  v29 = Locale.ltIdentifier.getter(v25);
  v31 = v30;
  v32 = Locale.ltIdentifier.getter(v29);
  if (v29 == v32 && v31 == v33)
  {
    swift_bridgeObjectRelease_n(v31, 2);
    sub_10019034C((uint64_t)v14);
    sub_10019034C((uint64_t)v17);
    v26 = v55;
    sub_10009761C(a1, v55);
    v27 = v54;
    sub_10009761C(v2, v54);
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v32, v33, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10019034C((uint64_t)v14);
    sub_10019034C((uint64_t)v17);
    v26 = v55;
    sub_10009761C(a1, v55);
    v27 = v54;
    sub_10009761C(v2, v54);
    v28 = 0;
    if ((v35 & 1) == 0)
      goto LABEL_20;
  }
  v36 = (uint64_t *)(v26 + *(int *)(v7 + 20));
  v37 = v36[1];
  v56 = *v36;
  v57 = v37;
  v38 = swift_bridgeObjectRetain(v37);
  static CharacterSet.whitespacesAndNewlines.getter(v38);
  v39 = sub_10000B030();
  v40 = StringProtocol.trimmingCharacters(in:)(v6, &type metadata for String, v39);
  v42 = v41;
  v43 = *(void (**)(char *, uint64_t))(v4 + 8);
  v44 = v53;
  v43(v6, v53);
  swift_bridgeObjectRelease();
  v45 = (uint64_t *)(v27 + *(int *)(v7 + 20));
  v46 = v45[1];
  v56 = *v45;
  v57 = v46;
  v47 = swift_bridgeObjectRetain(v46);
  static CharacterSet.whitespacesAndNewlines.getter(v47);
  v48 = StringProtocol.trimmingCharacters(in:)(v6, &type metadata for String, v39);
  v50 = v49;
  v43(v6, v44);
  swift_bridgeObjectRelease();
  if (v40 == v48 && v42 == v50)
  {
    swift_bridgeObjectRelease_n(v42, 2);
    v28 = 1;
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v48, v50, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v26 = v55;
LABEL_20:
  sub_10019034C(v27);
  sub_10019034C(v26);
  return v28 & 1;
}

uint64_t sub_100188480(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D5444(*a1, *a2);
}

Swift::Int sub_10018848C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEB00000000676E69;
  v3 = 0x74616C736E617274;
  if (v1 != 1)
  {
    v3 = 0x726F727265;
    v2 = 0xE500000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701602409;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100188528(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB00000000676E69;
  v3 = 0x74616C736E617274;
  if (*v1 != 1)
  {
    v3 = 0x726F727265;
    v2 = 0xE500000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 1701602409;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001885A0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEB00000000676E69;
  v4 = 0x74616C736E617274;
  if (v2 != 1)
  {
    v4 = 0x726F727265;
    v3 = 0xE500000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 1701602409;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE400000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100188638@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100190304(*a1);
  *a2 = result;
  return result;
}

void sub_100188664(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xEB00000000676E69;
  v5 = 0x74616C736E617274;
  if (v2 != 1)
  {
    v5 = 0x726F727265;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701602409;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1001886C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _BYTE v21[24];

  v1 = type metadata accessor for CharacterSet(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StreamingRequestInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028F740);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest;
  swift_beginAccess(v12, v21, 0, 0);
  sub_10000B074(v12, (uint64_t)v11, &qword_10028F740);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5))
  {
    sub_10000A020((uint64_t)v11, &qword_10028F740);
    return 0;
  }
  else
  {
    sub_10009761C((uint64_t)v11, (uint64_t)v8);
    sub_10000A020((uint64_t)v11, &qword_10028F740);
    v14 = &v8[*(int *)(v5 + 20)];
    v15 = *((_QWORD *)v14 + 1);
    v19[1] = *(_QWORD *)v14;
    v20 = v15;
    v16 = swift_bridgeObjectRetain(v15);
    static CharacterSet.whitespacesAndNewlines.getter(v16);
    v17 = sub_10000B030();
    v13 = StringProtocol.trimmingCharacters(in:)(v4, &type metadata for String, v17);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_bridgeObjectRelease(v20);
    sub_10019034C((uint64_t)v8);
  }
  return v13;
}

uint64_t sub_100188894(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_100006DF4(&qword_10028F190);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
    type metadata accessor for MainActor(0);
    v9 = a1;
    v10 = swift_retain(a2);
    v11 = static MainActor.shared.getter(v10);
    v12 = (_QWORD *)swift_allocObject(&unk_10026FCD0, 48, 7);
    v12[2] = v11;
    v12[3] = &protocol witness table for MainActor;
    v12[4] = a2;
    v12[5] = v9;
    v13 = sub_100049DC0((uint64_t)v7, (uint64_t)&unk_100297438, (uint64_t)v12);
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_10018898C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _BYTE v33[24];
  _OWORD v34[2];
  uint64_t v35;

  v32 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v3 = &v33[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_100006DF4(&qword_10028F740);
  __chkstk_darwin(v4);
  v6 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v7);
  v9 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v33[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static Date.now.getter(v12);
  v15 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp, v34, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 40))(v15, v14, v10);
  swift_endAccess(v34);
  v16 = (_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText);
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText + 8);
  *v16 = 0;
  v16[1] = 0xE000000000000000;
  swift_bridgeObjectRelease(v17);
  v18 = type metadata accessor for Locale(0);
  v19 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v9, 1, 1, v18);
  v20 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale, v34, 33, 0);
  sub_10002D560((uint64_t)v9, v20, (uint64_t *)&unk_10028FE50);
  swift_endAccess(v34);
  v19(v9, 1, 1, v18);
  v21 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale, v34, 33, 0);
  sub_10002D560((uint64_t)v9, v21, (uint64_t *)&unk_10028FE50);
  swift_endAccess(v34);
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  v22 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation, v33, 33, 0);
  sub_10002D560((uint64_t)v34, v22, (uint64_t *)&unk_10028F1C0);
  swift_endAccess(v33);
  v23 = type metadata accessor for StreamingRequestInfo(0);
  v24 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v6, 1, 1, v23);
  v25 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest, v34, 33, 0);
  sub_10002D560((uint64_t)v6, v25, &qword_10028F740);
  swift_endAccess(v34);
  objc_msgSend(*(id *)(v0 + 24), "invalidate");
  v26 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 24) = 0;

  objc_msgSend(*(id *)(v0 + 40), "invalidate");
  v27 = *(void **)(v0 + 40);
  *(_QWORD *)(v0 + 40) = 0;

  UUID.init()(v28);
  v29 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId, v34, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 40))(v29, v3, v32);
  swift_endAccess(v34);
  v24(v6, 1, 1, v23);
  v30 = v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest;
  swift_beginAccess(v30, v34, 33, 0);
  sub_10002D560((uint64_t)v6, v30, &qword_10028F740);
  return swift_endAccess(v34);
}

uint64_t sub_100188D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[5] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100188D9C, v7, v8);
}

uint64_t sub_100188D9C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void *v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 40));
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  v4 = v2;

  sub_100188F90();
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v5 = *(void **)(v0 + 32);
  v6 = type metadata accessor for Logger(0);
  sub_10000F66C(v6, (uint64_t)qword_1002AA458);
  v7 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(void **)(v0 + 32);
  if (v9)
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v18 = v17;
    *(_DWORD *)v11 = 136446210;
    v12 = objc_msgSend(v10, "description");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    *(_QWORD *)(v0 + 16) = sub_1001A7FE4(v13, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Parameters for streaming translation are set to %{public}s", v11, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100188F90()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  unsigned int v4;
  id v5;
  NSString v6;
  double v7;
  double v8;
  id v9;
  NSString v10;
  double v11;
  double v12;
  id v13;
  NSString v14;
  double v15;
  double v16;
  id v17;

  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3);

  if (v4)
  {
    v17 = *(id *)(v0 + 16);
    v5 = objc_msgSend(v1, "standardUserDefaults");
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "doubleForKey:", v6);
    v8 = v7;

    v9 = objc_msgSend(v1, "standardUserDefaults");
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "doubleForKey:", v10);
    v12 = v11;

    v13 = objc_msgSend(v1, "standardUserDefaults");
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "doubleForKey:", v14);
    v16 = v15;

    objc_msgSend(v17, "updateMinTimeBetweenTranslations:maxTimeBetweenTranslations:userIdleTime:", v8, v12, v16);
  }
}

BOOL sub_100189194(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  void (*v27)(char *, uint64_t);
  _BOOL8 result;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char *v38;
  char v39;
  __n128 v40;
  void (*v41)(char *, uint64_t, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  __n128 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  char v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char v88[24];
  char v89[24];
  char v90[32];

  v85 = a4;
  v86 = a3;
  v81 = a1;
  v82 = a2;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v83 = v5;
  v84 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v87 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v76 - v13;
  v15 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v76 - v19;
  v21 = v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale;
  swift_beginAccess(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale, v90, 0, 0);
  sub_10000B074(v21, (uint64_t)v20, (uint64_t *)&unk_10028FE50);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v22(v20, 1, v9))
  {
    v23 = sub_10000A020((uint64_t)v20, (uint64_t *)&unk_10028FE50);
    Locale.ltIdentifier.getter(v23);
    v24 = v87;
    v25 = v85;
LABEL_3:
    v26 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v24, v25, v9, v26);
    v27 = *(void (**)(char *, uint64_t))(v10 + 8);
LABEL_4:
    v27(v24, v9);
    return 1;
  }
  v78 = v18;
  v77 = v8;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v79 = v4;
  v80 = v29;
  v29(v14, (uint64_t)v20, v9);
  v30 = sub_10000A020((uint64_t)v20, (uint64_t *)&unk_10028FE50);
  v31 = Locale.ltIdentifier.getter(v30);
  v33 = v32;
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v34 = ((uint64_t (*)(char *, uint64_t))v27)(v14, v9);
  v35 = Locale.ltIdentifier.getter(v34);
  if (!v33)
  {
    v24 = v87;
    v25 = v85;
    goto LABEL_3;
  }
  v37 = v31 == v35 && v33 == v36;
  v24 = v87;
  v38 = v14;
  if (v37)
  {
    swift_bridgeObjectRelease_n(v33, 2);
    v41 = v80;
    v80(v24, v85, v9);
  }
  else
  {
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v36, 0);
    swift_bridgeObjectRelease();
    v40 = swift_bridgeObjectRelease();
    v41 = v80;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v80)(v24, v85, v9, v40);
    if ((v39 & 1) == 0)
      goto LABEL_4;
  }
  v42 = v27;
  v43 = v79;
  v44 = v79 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale;
  swift_beginAccess(v79 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale, v89, 0, 0);
  v45 = v44;
  v46 = (uint64_t)v78;
  sub_10000B074(v45, (uint64_t)v78, (uint64_t *)&unk_10028FE50);
  if (v22((char *)v46, 1, v9))
  {
    v47 = sub_10000A020(v46, (uint64_t *)&unk_10028FE50);
    Locale.ltIdentifier.getter(v47);
LABEL_18:
    v42(v24, v9);
    swift_bridgeObjectRelease();
    return 1;
  }
  v41(v38, v46, v9);
  v48 = sub_10000A020(v46, (uint64_t *)&unk_10028FE50);
  v49 = Locale.ltIdentifier.getter(v48);
  v51 = v50;
  v52 = ((uint64_t (*)(char *, uint64_t))v42)(v38, v9);
  v53 = Locale.ltIdentifier.getter(v52);
  if (!v51)
    goto LABEL_18;
  if (v49 == v53 && v51 == v54)
  {
    ((void (*)(char *, uint64_t, uint64_t))v42)(v24, v9, v53);
    swift_bridgeObjectRelease_n(v51, 2);
    v55 = v83;
    v56 = v84;
    v57 = v77;
  }
  else
  {
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v53, v54, 0);
    swift_bridgeObjectRetain(v51);
    v59 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v42)(v24, v9, v59);
    swift_bridgeObjectRelease_n(v51, 2);
    v55 = v83;
    v56 = v84;
    v57 = v77;
    if ((v58 & 1) == 0)
      return 1;
  }
  v60 = v82;
  swift_bridgeObjectRetain(v82);
  v61 = v81;
  v62 = sub_100188034(v81, v60);
  v64 = v63;
  swift_bridgeObjectRelease();
  v65 = v43 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp;
  swift_beginAccess(v43 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp, v88, 0, 0);
  v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 16))(v57, v65, v55);
  v67 = Date.timeIntervalSinceNow.getter(v66);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v55);
  if (v64)
  {
    if (v62 == 32 && v64 == 0xE100000000000000)
    {
      *(_QWORD *)&v68 = swift_bridgeObjectRelease().n128_u64[0];
      goto LABEL_30;
    }
    v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, 32, 0xE100000000000000, 0);
    *(_QWORD *)&v68 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v69 & 1) != 0)
      goto LABEL_30;
  }
  objc_msgSend(*(id *)(v43 + 16), "maxTimeBetweenTranslations");
  v68 = -v70;
  if (v67 > v68)
    return 0;
LABEL_30:
  objc_msgSend(*(id *)(v43 + 16), "minTimeBetweenTranslations", v68);
  if (v67 > -v71)
    return 0;
  v72 = *(_QWORD *)(v43 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText);
  v73 = *(_QWORD *)(v43 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText + 8);
  if (v72 == v61 && v73 == v60)
    return 0;
  v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v60, v72, v73, 0);
  result = 0;
  if ((v74 & 1) == 0)
  {
    v75 = String.count.getter(v61, v60);
    return v75 >= (uint64_t)objc_msgSend(*(id *)(v43 + 16), "minNumberOfCharactersForTranslation");
  }
  return result;
}

void sub_100189738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD aBlock[5];
  uint64_t v17;

  v3 = type metadata accessor for StreamingRequestInfo(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (void *)objc_opt_self(NSTimer);
  objc_msgSend(*(id *)(v1 + 16), "userIdleTime");
  v8 = v7;
  v9 = swift_allocObject(&unk_10026FBB8, 24, 7);
  swift_weakInit(v9 + 16, v1);
  sub_10009761C(a1, (uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_10026FC58, v11 + v5, v10 | 7);
  *(_QWORD *)(v12 + 16) = v9;
  sub_100097770((uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  aBlock[4] = sub_100190B54;
  v17 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100187FE4;
  aBlock[3] = &unk_10026FC70;
  v13 = _Block_copy(aBlock);
  swift_release(v17);
  v14 = objc_msgSend(v6, "scheduledTimerWithTimeInterval:repeats:block:", 0, v13, v8);
  _Block_release(v13);
  v15 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v14;

}

double sub_1001898C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v20[24];

  v5 = type metadata accessor for StreamingRequestInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v8);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v20, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v13 = Strong;
    v14 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
    sub_10009761C(a3, (uint64_t)&v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8]);
    v15 = *(unsigned __int8 *)(v6 + 80);
    v16 = (v15 + 40) & ~v15;
    v17 = (_QWORD *)swift_allocObject(&unk_10026FCA8, v16 + v7, v15 | 7);
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v13;
    sub_100097770((uint64_t)&v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], (uint64_t)v17 + v16);
    v18 = sub_100049DC0((uint64_t)v10, (uint64_t)&unk_100297428, (uint64_t)v17);
    *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  }
  return result;
}

uint64_t sub_100189A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v6 = type metadata accessor for StreamingRequestInfo(0);
  v5[9] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[10] = swift_task_alloc(v7);
  v5[11] = swift_task_alloc(v7);
  v5[12] = swift_task_alloc(v7);
  v8 = type metadata accessor for Date(0);
  v5[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[14] = v9;
  v5[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100189AAC, 0, 0);
}

uint64_t sub_100189AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 128) = v1;
  *(_QWORD *)(v0 + 136) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100189B18, v2, v3);
}

uint64_t sub_100189B18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[13];
  v4 = v0[7];
  swift_release(v0[17]);
  v5 = v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp;
  swift_beginAccess(v5, v0 + 2, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  return swift_task_switch(sub_100189BA8, 0, 0);
}

uint64_t sub_100189BA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 120);
  v2 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 104);
  v5 = *(_QWORD *)(v1 + 112);
  *(double *)(v1 + 144) = Date.timeIntervalSinceNow.getter(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  *(_QWORD *)(v1 + 152) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100189C2C, v7, v8);
}

uint64_t sub_100189C2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[7];
  swift_release(v0[19]);
  v2 = v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText;
  v0[20] = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText);
  v3 = *(_QWORD *)(v2 + 8);
  v0[21] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_task_switch(sub_100189C8C, 0, 0);
}

uint64_t sub_100189C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 176) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100189CEC, v3, v4);
}

uint64_t sub_100189CEC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = v0[7];
  swift_release(v0[22]);
  v2 = *(void **)(v1 + 16);
  v0[23] = v2;
  v3 = v2;
  return swift_task_switch(sub_100189D38, 0, 0);
}

uint64_t sub_100189D38()
{
  uint64_t v0;
  void *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(void **)(v0 + 184);
  v2 = *(double *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);
  objc_msgSend(v1, "minTimeBetweenTranslations");
  v6 = v5;

  sub_10009761C(v4, v3);
  if (v2 <= -v6)
  {
    v14 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRelease();
    sub_10019034C(v14);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 72);
    v10 = (_QWORD *)(v8 + *(int *)(v9 + 20));
    v11 = v10[1];
    if (*v10 == v7 && v11 == *(_QWORD *)(v0 + 168))
    {
      swift_bridgeObjectRelease();
      sub_10019034C(v8);
LABEL_16:
      if (qword_10028A470 != -1)
        swift_once(&qword_10028A470, sub_1001210D4);
      v32 = *(_QWORD *)(v0 + 80);
      v33 = *(_QWORD *)(v0 + 64);
      v34 = type metadata accessor for Logger(0);
      sub_10000F66C(v34, (uint64_t)qword_1002AA458);
      v35 = sub_10009761C(v33, v32);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.debug.getter();
      v38 = os_log_type_enabled(v36, v37);
      v39 = *(_QWORD *)(v0 + 80);
      if (v38)
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        *(_DWORD *)v40 = 136642819;
        v48 = v41;
        v42 = (uint64_t *)(v39 + *(int *)(v9 + 20));
        v43 = *v42;
        v44 = v42[1];
        swift_bridgeObjectRetain(v44);
        *(_QWORD *)(v0 + 48) = sub_1001A7FE4(v43, v44, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v40 + 4);
        swift_bridgeObjectRelease();
        sub_10019034C(v39);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Idle timer for partial result fired, but conditions don't allow for re-triggering a translation for the text '%{sensitive}s', so not doing anything", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);
      }
      else
      {
        sub_10019034C(*(_QWORD *)(v0 + 80));
      }

      v45 = *(_QWORD *)(v0 + 88);
      v46 = *(_QWORD *)(v0 + 96);
      v47 = *(_QWORD *)(v0 + 80);
      swift_task_dealloc(*(_QWORD *)(v0 + 120));
      swift_task_dealloc(v46);
      swift_task_dealloc(v45);
      swift_task_dealloc(v47);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, v7, *(_QWORD *)(v0 + 168), 0);
    swift_bridgeObjectRelease();
    sub_10019034C(v8);
    if ((v13 & 1) != 0)
      goto LABEL_16;
  }
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 64);
  v17 = type metadata accessor for Logger(0);
  sub_10000F66C(v17, (uint64_t)qword_1002AA458);
  v18 = sub_10009761C(v16, v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(_QWORD *)(v0 + 88);
  if (v21)
  {
    v23 = *(_QWORD *)(v0 + 72);
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    *(_DWORD *)v24 = 136642819;
    v48 = v25;
    v26 = (uint64_t *)(v22 + *(int *)(v23 + 20));
    v27 = *v26;
    v28 = v26[1];
    swift_bridgeObjectRetain(v28);
    *(_QWORD *)(v0 + 40) = sub_1001A7FE4(v27, v28, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v24 + 4);
    swift_bridgeObjectRelease();
    sub_10019034C(v22);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Idle timer for partial result fired, performing another partial translation; sourceText: %{sensitive}s",
      v24,
      0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    sub_10019034C(*(_QWORD *)(v0 + 88));
  }

  *(_QWORD *)(v0 + 192) = static MainActor.shared.getter(v29);
  v30 = (_QWORD *)swift_task_alloc(dword_100297004);
  *(_QWORD *)(v0 + 200) = v30;
  *v30 = v0;
  v30[1] = sub_10018A1B0;
  return sub_10018C038(*(_QWORD *)(v0 + 64), 0);
}

uint64_t sub_10018A1B0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 200));
  v2 = (_QWORD *)swift_task_alloc(dword_10029701C);
  *(_QWORD *)(v1 + 208) = v2;
  *v2 = v4;
  v2[1] = sub_10018A214;
  return sub_10018D130();
}

uint64_t sub_10018A214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018A288, v2, v3);
}

uint64_t sub_10018A288()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 192));
  return swift_task_switch(sub_10018A2C4, 0, 0);
}

uint64_t sub_10018A2C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10018A31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  double result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];

  v5 = type metadata accessor for StreamingRequestInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v22, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v14 = Strong;
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
    sub_10009761C(a3, (uint64_t)&v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8]);
    v16 = *(unsigned __int8 *)(v6 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = (v7 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = swift_allocObject(&unk_10026FC30, v18 + 8, v16 | 7);
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    sub_100097770((uint64_t)v8, v19 + v17);
    *(_QWORD *)(v19 + v18) = v14;
    v20 = sub_100049DC0((uint64_t)v11, (uint64_t)&unk_100297418, v19);
    *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  }
  return result;
}

uint64_t sub_10018A474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for StreamingRequestInfo(0);
  v5[5] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[6] = swift_task_alloc(v7);
  v5[7] = swift_task_alloc(v7);
  return swift_task_switch(sub_10018A4E0, 0, 0);
}

uint64_t sub_10018A4E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v1 = v0[3];
  v2 = v0[7];
  v3 = type metadata accessor for Logger(0);
  sub_10000F66C(v3, (uint64_t)qword_1002AA458);
  v4 = sub_10009761C(v1, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[7];
  if (v7)
  {
    v9 = v0[5];
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136642819;
    v33 = v11;
    v12 = (uint64_t *)(v8 + *(int *)(v9 + 20));
    v13 = *v12;
    v14 = v12[1];
    swift_bridgeObjectRetain(v14);
    v0[2] = sub_1001A7FE4(v13, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v10 + 4);
    swift_bridgeObjectRelease();
    sub_10019034C(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Idle timer for final result fired, performing final translation; sourceText: %{sensitive}s",
      v10,
      0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_10019034C(v0[7]);
  }

  v16 = (int *)v0[5];
  v15 = v0[6];
  v17 = v0[3];
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v15, v17, v18);
  v20 = v16[6];
  v21 = (uint64_t *)(v17 + v16[5]);
  v31 = v21[1];
  v32 = *v21;
  v22 = v17 + v20;
  v23 = v15 + v20;
  v24 = type metadata accessor for Locale(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v25(v23, v22, v24);
  v25(v15 + v16[7], v17 + v16[7], v24);
  v19(v15 + v16[10], v17 + v16[10], v18);
  v26 = (_QWORD *)(v15 + v16[5]);
  *v26 = v32;
  v26[1] = v31;
  v27 = v15 + v16[8];
  *(_WORD *)v27 = 257;
  *(_QWORD *)(v27 + 8) = 0;
  *(_BYTE *)(v15 + v16[9]) = 0;
  *(_QWORD *)(v15 + v16[11]) = 1;
  v0[8] = type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(v31);
  v0[9] = static MainActor.shared.getter(v28);
  v29 = (_QWORD *)swift_task_alloc(dword_100297004);
  v0[10] = v29;
  *v29 = v0;
  v29[1] = sub_10018A7BC;
  return sub_10018C038(v0[6], 0);
}

uint64_t sub_10018A7BC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  v2 = (_QWORD *)swift_task_alloc(dword_10029701C);
  *(_QWORD *)(v1 + 88) = v2;
  *v2 = v4;
  v2[1] = sub_10018A820;
  return sub_10018D130();
}

uint64_t sub_10018A820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018A890, v2, v3);
}

uint64_t sub_10018A890()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_task_switch(sub_10018A8CC, 0, 0);
}

uint64_t sub_10018A8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  sub_10019034C(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018A910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  NSString v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67[32];

  v57 = a5;
  v53 = a4;
  v54 = a3;
  v7 = a3;
  v62 = a2;
  v66 = a1;
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  v61 = *(_QWORD *)(v9 + 64);
  v10 = v9;
  v55 = v9;
  v11 = __chkstk_darwin(v8);
  v63 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v58 = (char *)&v51 - v13;
  v14 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v14);
  v65 = (uint64_t)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for StreamingRequestInfo(0);
  v17 = *((_QWORD *)v16 - 1);
  v59 = *(_QWORD *)(v17 + 64);
  v60 = v17;
  v18 = __chkstk_darwin(v16);
  v64 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v51 - v20;
  v22 = v5 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
  swift_beginAccess(v5 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId, v67, 0, 0);
  v23 = type metadata accessor for UUID(0);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  v51(v21, v22, v23);
  v24 = &v21[v16[6]];
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v52 = v8;
  v25(v24, v7, v8);
  v25(&v21[v16[7]], a4, v8);
  v26 = (void *)objc_opt_self(NSUserDefaults);
  v27 = v62;
  v28 = objc_msgSend(v26, "standardUserDefaults", swift_bridgeObjectRetain(v62).n128_f64[0]);
  v29 = String._bridgeToObjectiveC()();
  LOBYTE(v10) = objc_msgSend(v28, "BOOLForKey:", v29);

  LOBYTE(v28) = v10 ^ 1;
  v30 = objc_msgSend(v26, "standardUserDefaults");
  v31 = String._bridgeToObjectiveC()();
  LOBYTE(v7) = objc_msgSend(v30, "BOOLForKey:", v31);

  v51(&v21[v16[10]], v57, v23);
  v32 = &v21[v16[5]];
  *(_QWORD *)v32 = v66;
  *((_QWORD *)v32 + 1) = v27;
  v33 = &v21[v16[8]];
  *v33 = (char)v28;
  v33[1] = v7 ^ 1;
  *((_QWORD *)v33 + 1) = 0;
  v21[v16[9]] = 0;
  *(_QWORD *)&v21[v16[11]] = 1;
  v34 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v65, 1, 1, v34);
  v35 = v58;
  v36 = v52;
  v25(v58, v54, v52);
  v25(v63, v53, v36);
  sub_10009761C((uint64_t)v21, v64);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(v27);
  v37 = v56;
  v38 = swift_retain(v56);
  v39 = static MainActor.shared.getter(v38);
  v40 = v55;
  v41 = *(unsigned __int8 *)(v55 + 80);
  v42 = (v41 + 56) & ~v41;
  v43 = (v61 + v41 + v42) & ~v41;
  v44 = *(unsigned __int8 *)(v60 + 80);
  v45 = (v61 + v44 + v43) & ~v44;
  v46 = (char *)swift_allocObject(&unk_10026FB90, v45 + v59, v41 | v44 | 7);
  *((_QWORD *)v46 + 2) = v39;
  *((_QWORD *)v46 + 3) = &protocol witness table for MainActor;
  v47 = v66;
  *((_QWORD *)v46 + 4) = v37;
  *((_QWORD *)v46 + 5) = v47;
  *((_QWORD *)v46 + 6) = v62;
  v48 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v48(&v46[v42], v35, v36);
  v48(&v46[v43], v63, v36);
  sub_100097770(v64, (uint64_t)&v46[v45]);
  v49 = sub_100049DC0(v65, (uint64_t)&unk_100297408, (uint64_t)v46);
  swift_release(v49);
  return sub_10019034C((uint64_t)v21);
}

uint64_t sub_10018AD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8[12] = a8;
  v8[13] = v15;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  v9 = *(_QWORD *)(type metadata accessor for StreamingRequestInfo(0) - 8);
  v8[14] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v8[15] = v10;
  v8[16] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  v8[17] = v11;
  v8[18] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v8[19] = v12;
  v8[20] = v13;
  return swift_task_switch(sub_10018ADF0, v12, v13);
}

uint64_t sub_10018ADF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  _QWORD *v7;
  id v9;
  NSString v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;

  v1 = v0[11];
  v2 = v0[12];
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[8];
  objc_msgSend(*(id *)(v5 + 24), "invalidate");
  objc_msgSend(*(id *)(v5 + 40), "invalidate");
  v6 = sub_100189194(v4, v3, v1, v2);
  if (v6)
  {
    v0[21] = static MainActor.shared.getter(v6);
    v7 = (_QWORD *)swift_task_alloc(dword_100297004);
    v0[22] = v7;
    *v7 = v0;
    v7[1] = sub_10018B058;
    return sub_10018C038(v0[13], 0);
  }
  else
  {
    swift_release(v0[18]);
    sub_100189738(v0[13]);
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "BOOLForKey:", v10);

    if (v11)
    {
      v13 = v0[15];
      v12 = v0[16];
      v14 = v0[13];
      v15 = v0[14];
      v16 = v0[8];
      v17 = (void *)objc_opt_self(NSTimer);
      v18 = swift_allocObject(&unk_10026FBB8, 24, 7);
      swift_weakInit(v18 + 16, v16);
      sub_10009761C(v14, v12);
      v19 = *(unsigned __int8 *)(v15 + 80);
      v20 = (v19 + 24) & ~v19;
      v21 = swift_allocObject(&unk_10026FBE0, v20 + v13, v19 | 7);
      *(_QWORD *)(v21 + 16) = v18;
      sub_100097770(v12, v21 + v20);
      v0[6] = sub_100190888;
      v0[7] = v21;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256;
      v0[4] = sub_100187FE4;
      v0[5] = &unk_10026FBF8;
      v22 = _Block_copy(v0 + 2);
      swift_release(v0[7]);
      v23 = objc_msgSend(v17, "scheduledTimerWithTimeInterval:repeats:block:", 0, v22, 1.5);
      _Block_release(v22);
      v24 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v23;

    }
    swift_task_dealloc(v0[16]);
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_10018B058()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  v2 = (_QWORD *)swift_task_alloc(dword_10029701C);
  *(_QWORD *)(v1 + 184) = v2;
  *v2 = v4;
  v2[1] = sub_10018B0BC;
  return sub_10018D130();
}

uint64_t sub_10018B0BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018B130, v2, v3);
}

uint64_t sub_10018B130()
{
  _QWORD *v0;

  swift_release(v0[21]);
  return swift_task_switch(sub_10018B168, v0[19], v0[20]);
}

uint64_t sub_10018B168()
{
  _QWORD *v0;
  id v1;
  NSString v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;

  swift_release(v0[18]);
  sub_100189738(v0[13]);
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  if (v3)
  {
    v5 = v0[15];
    v4 = v0[16];
    v6 = v0[13];
    v7 = v0[14];
    v8 = v0[8];
    v9 = (void *)objc_opt_self(NSTimer);
    v10 = swift_allocObject(&unk_10026FBB8, 24, 7);
    swift_weakInit(v10 + 16, v8);
    sub_10009761C(v6, v4);
    v11 = *(unsigned __int8 *)(v7 + 80);
    v12 = (v11 + 24) & ~v11;
    v13 = swift_allocObject(&unk_10026FBE0, v12 + v5, v11 | 7);
    *(_QWORD *)(v13 + 16) = v10;
    sub_100097770(v4, v13 + v12);
    v0[2] = _NSConcreteStackBlock;
    v0[6] = sub_100190888;
    v0[7] = v13;
    v0[3] = 1107296256;
    v0[4] = sub_100187FE4;
    v0[5] = &unk_10026FBF8;
    v14 = _Block_copy(v0 + 2);
    swift_release(v0[7]);
    v15 = objc_msgSend(v9, "scheduledTimerWithTimeInterval:repeats:block:", 0, v14, 1.5);
    _Block_release(v14);
    v16 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v15;

  }
  swift_task_dealloc(v0[16]);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10018B338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;

  v7 = v6;
  v47 = a4;
  v48 = a6;
  v53 = a5;
  v46 = a3;
  v50 = a2;
  v52 = a1;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v51 = *(_QWORD *)(v9 + 64);
  v10 = v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v12;
  v13 = type metadata accessor for Locale(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v43 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - v17;
  v42 = (char *)&v40 - v17;
  v19 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v21;
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23(v18, v46, v13);
  v23((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v47, v13);
  v24 = v10;
  v41 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v48, v8);
  type metadata accessor for MainActor(0);
  v25 = v7;
  swift_retain(v7);
  v26 = v50;
  swift_bridgeObjectRetain(v50);
  v28 = static MainActor.shared.getter(v27);
  v29 = *(unsigned __int8 *)(v14 + 80);
  v30 = (v29 + 56) & ~v29;
  v31 = (v15 + v29 + v30) & ~v29;
  v32 = v31 + v15;
  v33 = *(unsigned __int8 *)(v24 + 80);
  v34 = (v33 + v31 + v15 + 1) & ~v33;
  v35 = (char *)swift_allocObject(&unk_10026FB68, v34 + v51, v29 | v33 | 7);
  *((_QWORD *)v35 + 2) = v28;
  *((_QWORD *)v35 + 3) = &protocol witness table for MainActor;
  v36 = v52;
  *((_QWORD *)v35 + 4) = v25;
  *((_QWORD *)v35 + 5) = v36;
  *((_QWORD *)v35 + 6) = v26;
  v37 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v37(&v35[v30], v42, v13);
  v37(&v35[v31], v43, v13);
  v35[v32] = v53;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v35[v34], v45, v44);
  v38 = sub_100049DC0((uint64_t)v49, (uint64_t)&unk_1002973F8, (uint64_t)v35);
  return swift_release(v38);
}

uint64_t sub_10018B5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;

  *(_BYTE *)(v8 + 144) = v14;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 80) = v15;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  v9 = type metadata accessor for StreamingRequestInfo(0);
  *(_QWORD *)(v8 + 88) = v9;
  *(_QWORD *)(v8 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 104) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 112) = v11;
  *(_QWORD *)(v8 + 120) = v12;
  return swift_task_switch(sub_10018B664, v11, v12);
}

uint64_t sub_10018B664()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v2 = *(int **)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v19 = *(_BYTE *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
  swift_beginAccess(v5, v0 + 16, 0, 0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(v1, v5, v6);
  v8 = v1 + v2[6];
  v9 = type metadata accessor for Locale(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v8, v3, v9);
  v10(v1 + v2[7], v16, v9);
  v7(v1 + v2[10], v17, v6);
  v11 = (_QWORD *)(v1 + v2[5]);
  *v11 = v18;
  v11[1] = v4;
  v12 = v1 + v2[8];
  *(_WORD *)v12 = 257;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v1 + v2[9]) = v19;
  *(_QWORD *)(v1 + v2[11]) = 1;
  v13 = dword_10029700C;
  swift_bridgeObjectRetain(v4);
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 128) = v14;
  *v14 = v0;
  v14[1] = sub_10018B7D8;
  return sub_10018C66C(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10018B7D8()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  v2 = (_QWORD *)swift_task_alloc(dword_10029701C);
  *(_QWORD *)(v1 + 136) = v2;
  *v2 = v4;
  v2[1] = sub_10018B83C;
  return sub_10018D130();
}

uint64_t sub_10018B83C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  return swift_task_switch(sub_10018B888, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_10018B888()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 104));
  sub_10019034C(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018B8C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for CharacterSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    v10 = a1;
  else
    v10 = 0;
  if (a2)
    v11 = a2;
  else
    v11 = 0xE000000000000000;
  v34 = v10;
  v35 = v11;
  v12 = swift_bridgeObjectRetain(a2);
  static CharacterSet.whitespacesAndNewlines.getter(v12);
  v13 = sub_10000B030();
  v14 = StringProtocol.trimmingCharacters(in:)(v9, &type metadata for String, v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease(v35);
  v17 = sub_1001886C0();
  if (v14 == v17 && v16 == v18)
  {
    v21 = 1;
    v20 = v16;
  }
  else
  {
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
  }
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v20);
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v22 = type metadata accessor for Logger(0);
  sub_10000F66C(v22, (uint64_t)qword_1002AA458);
  swift_bridgeObjectRetain_n(a2, 2);
  v23 = swift_retain_n(v3, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(28, -1);
    v27 = swift_slowAlloc(64, -1);
    v34 = v27;
    *(_DWORD *)v26 = 136643331;
    swift_bridgeObjectRetain(a2);
    v33 = sub_1001A7FE4(v10, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v26 + 4);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v26 + 12) = 2085;
    v28 = sub_1001886C0();
    v30 = v29;
    v33 = sub_1001A7FE4(v28, v29, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v26 + 14);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v26 + 22) = 1024;
    LODWORD(v33) = v21 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, (char *)&v33 + 4, v26 + 24);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Streaming translation up to date with input: %{sensitive}s, compared to translation: %{sensitive}s, %{BOOL}d", (uint8_t *)v26, 0x1Cu);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_release_n(v3, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v21 & 1;
}

void sub_10018BBEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE v45[40];
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  __int128 v49[2];
  _BYTE v50[32];

  v43 = a2;
  v8 = sub_100006DF4(&qword_10028F740);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v41 = (uint64_t)&v39 - v12;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v39 - v18;
  v42 = a3;
  if ((a3 & 1) != 0)
    goto LABEL_3;
  v40 = v11;
  v20 = a4;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21((char *)&v39 - v18, a1, v13);
  v22 = v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
  swift_beginAccess(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId, v50, 0, 0);
  v21(v17, v22, v13);
  v23 = sub_100007D5C((unint64_t *)&qword_1002900F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(v22) = dispatch thunk of static Equatable.== infix(_:_:)(v19, v17, v13, v23);
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, v13);
  v24(v19, v13);
  a4 = v20;
  v11 = v40;
  if ((v22 & 1) != 0)
  {
LABEL_3:
    v25 = v43;
    sub_10000B074(v43, (uint64_t)&v47, (uint64_t *)&unk_10028F1C0);
    if (v48)
    {
      sub_10003E994(&v47, (uint64_t)v49);
      if (a4
        || (v26 = v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId,
            swift_beginAccess(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId, v46, 0, 0), (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v26, v13), LOBYTE(v26) = static UUID.== infix(_:_:)(a1, v19), (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13), (v26 & 1) == 0))
      {
        sub_100009C08(v49);
      }
      else
      {
        sub_10003E994(v49, (uint64_t)&v47);
        sub_1000110A4((uint64_t)&v47, (uint64_t)v45, (uint64_t *)&unk_10028F1C0);
        v27 = v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation;
        swift_beginAccess(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation, v44, 33, 0);
        sub_10002D560((uint64_t)v45, v27, (uint64_t *)&unk_10028F1C0);
        swift_endAccess(v44);
        v28 = v41;
        sub_10009761C(a1, v41);
        v29 = type metadata accessor for StreamingRequestInfo(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
        sub_1000110A4(v28, (uint64_t)v11, &qword_10028F740);
        v30 = v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest;
        swift_beginAccess(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest, &v47, 33, 0);
        sub_10002D560((uint64_t)v11, v30, &qword_10028F740);
        swift_endAccess(&v47);
      }
    }
    else
    {
      sub_10000A020((uint64_t)&v47, (uint64_t *)&unk_10028F1C0);
    }
    v31 = v42;
    v32 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_delegate + 24);
    v33 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_delegate + 32);
    sub_100023AF4((_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_delegate), v32);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v33 + 8))(a1, v25, v31 & 1, a4, v32, v33);
  }
  else
  {
    if (qword_10028A470 != -1)
      swift_once(&qword_10028A470, sub_1001210D4);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10000F66C(v34, (uint64_t)qword_1002AA458);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping returning outdated partial translation result.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

  }
}

uint64_t sub_10018C038(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v3 + 256) = a2;
  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = v2;
  v4 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 168) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 176) = v5;
  *(_QWORD *)(v3 + 184) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4(&qword_10028F740) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v6);
  v7 = type metadata accessor for StreamingRequestInfo(0);
  *(_QWORD *)(v3 + 216) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 224) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 232) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 240) = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 248) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018C148, v11, v12);
}

id sub_10018C148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  id result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v59 = v0 + 144;
  swift_release(*(_QWORD *)(v0 + 248));
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = type metadata accessor for Logger(0);
  sub_10000F66C(v3, (uint64_t)qword_1002AA458);
  v4 = sub_10009761C(v1, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 240);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 216);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v58 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136642819;
    v60 = v58;
    v11 = (uint64_t *)(v8 + *(int *)(v9 + 20));
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    *(_QWORD *)(v0 + 144) = sub_1001A7FE4(v12, v13, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v0 + 152, v10 + 4);
    swift_bridgeObjectRelease();
    sub_10019034C(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Trying to add a partial translation with content %{sensitive}s", v10, 0xCu);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_10019034C(*(_QWORD *)(v0 + 240));
  }

  v14 = *(unsigned __int8 *)(v0 + 256);
  result = (id)sub_10009761C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 232));
  if (v14 != 1)
    goto LABEL_12;
  v16 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(int *)(v17 + 44);
  v19 = *(_QWORD *)(v16 + v18);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (!v20)
  {
    v22 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 160);
    *(_QWORD *)(v16 + v18) = v21;
    v25 = v24 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest;
    swift_beginAccess(v24 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest, v0 + 112, 0, 0);
    sub_10000B074(v25, v23, &qword_10028F740);
    LODWORD(v25) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v17);
    sub_10000A020(v23, &qword_10028F740);
    v26 = *(_QWORD *)(v0 + 232);
    if ((_DWORD)v25 != 1)
    {
      v33 = *(_QWORD *)(v0 + 232);
      goto LABEL_16;
    }
    v27 = *(_QWORD *)(v0 + 176);
    v28 = *(_QWORD *)(v0 + 184);
    v29 = *(_QWORD *)(v0 + 168);
    v30 = *(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
    swift_beginAccess(v30, v0 + 88, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v28, v30, v29);
    v31 = static UUID.== infix(_:_:)(v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
    if ((v31 & 1) == 0
      || (v32 = *(_QWORD *)(v16 + v18),
          result = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 160) + 16), "maxPartialTranslationAttempts"),
          (uint64_t)result < v32))
    {
      v33 = *(_QWORD *)(v0 + 232);
LABEL_16:
      sub_10019034C(v33);
      v53 = *(_QWORD *)(v0 + 232);
      v55 = *(_QWORD *)(v0 + 200);
      v54 = *(_QWORD *)(v0 + 208);
      v57 = *(_QWORD *)(v0 + 184);
      v56 = *(_QWORD *)(v0 + 192);
      swift_task_dealloc(*(_QWORD *)(v0 + 240));
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_12:
    v34 = v0 + 16;
    v35 = v0 + 40;
    v36 = Logger.logObject.getter(result);
    v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = *(_QWORD *)(v0 + 232);
      v39 = *(_QWORD *)(v0 + 216);
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v60 = v41;
      *(_DWORD *)v40 = 136642819;
      swift_beginAccess(v38, v0 + 64, 0, 0);
      v42 = (uint64_t *)(v38 + *(int *)(v39 + 20));
      v43 = *v42;
      v44 = v42[1];
      swift_bridgeObjectRetain(v44);
      *(_QWORD *)(v0 + 136) = sub_1001A7FE4(v43, v44, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v59, v40 + 4);
      v34 = v0 + 16;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Adding a partial translation with content %{sensitive}s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      v45 = v41;
      v35 = v0 + 40;
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }

    v47 = *(_QWORD *)(v0 + 224);
    v46 = *(_QWORD *)(v0 + 232);
    v48 = *(_QWORD *)(v0 + 216);
    v50 = *(_QWORD *)(v0 + 192);
    v49 = *(_QWORD *)(v0 + 200);
    v51 = *(_QWORD *)(v0 + 160);
    swift_beginAccess(v46, v34, 0, 0);
    sub_10009761C(v46, v49);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v49, 0, 1, v48);
    sub_1000110A4(v49, v50, &qword_10028F740);
    v52 = v51 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest;
    swift_beginAccess(v51 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest, v35, 33, 0);
    sub_10002D560(v50, v52, &qword_10028F740);
    swift_endAccess(v35);
    v33 = v46;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10018C66C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[6] = a1;
  v2[7] = v1;
  v3 = sub_100006DF4(&qword_1002973E8);
  v2[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for StreamingRequestInfo(0);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018C720, v6, v7);
}

uint64_t sub_10018C720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  swift_release(*(_QWORD *)(v0 + 88));
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_10000F66C(v3, (uint64_t)qword_1002AA458);
  v4 = sub_10009761C(v1, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 72);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136642819;
    v19 = v11;
    v12 = (uint64_t *)(v8 + *(int *)(v9 + 20));
    v13 = *v12;
    v14 = v12[1];
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v0 + 40) = sub_1001A7FE4(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v10 + 4);
    swift_bridgeObjectRelease();
    sub_10019034C(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Adding a final translation with content %{sensitive}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_10019034C(*(_QWORD *)(v0 + 80));
  }

  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 48);
  swift_beginAccess(*(_QWORD *)(v0 + 56)+ OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_finalTranslationRequestsQueue, v0 + 16, 33, 0);
  sub_10009761C(v17, v16);
  sub_1001CC380(0, 0, v16);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018C958(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[11] = a1;
  v2[12] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[14] = v4;
  v2[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_1002900F0);
  v2[16] = v5;
  v2[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4((uint64_t *)&unk_10028F1B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v6);
  v2[19] = swift_task_alloc(v6);
  v2[20] = swift_task_alloc(v6);
  v7 = sub_100006DF4(&qword_10028F740);
  v2[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v2[22] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018CA78, v9, v10);
}

uint64_t sub_10018CA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 176));
  v4 = v3 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  sub_10000B074(v4, v2, &qword_10028F740);
  v5 = type metadata accessor for StreamingRequestInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44(v1, 1, 1, v5);
  swift_beginAccess(v4, v0 + 40, 33, 0);
  sub_10002D560(v1, v4, &qword_10028F740);
  swift_endAccess(v0 + 40);
  v45 = v5;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 112);
  if (v7)
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v11(*(_QWORD *)(v0 + 160), 1, 1, v9);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v10 + 16))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 104));
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v11(v8, 0, 1, v9);
  }
  v13 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
  swift_beginAccess(v18, v0 + 64, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v13, v18, v17);
  v11(v13, 0, 1, v17);
  v19 = v14 + *(int *)(v15 + 48);
  sub_10000B074(v12, v14, (uint64_t *)&unk_10028F1B0);
  sub_10000B074(v13, v19, (uint64_t *)&unk_10028F1B0);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v20(v14, 1, v17) != 1)
  {
    v23 = *(_QWORD *)(v0 + 104);
    sub_10000B074(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), (uint64_t *)&unk_10028F1B0);
    v24 = v20(v19, 1, v23);
    v26 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 144);
    if (v24 != 1)
    {
      v30 = *(_QWORD *)(v0 + 136);
      v31 = *(_QWORD *)(v0 + 112);
      v32 = *(_QWORD *)(v0 + 120);
      v33 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v32, v19, v33);
      v34 = sub_100007D5C((unint64_t *)&qword_1002900F8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v32, v33, v34);
      v36 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v36(v32, v33);
      sub_10000A020(v26, (uint64_t *)&unk_10028F1B0);
      sub_10000A020(v25, (uint64_t *)&unk_10028F1B0);
      v36(v27, v33);
      sub_10000A020(v30, (uint64_t *)&unk_10028F1B0);
      if ((v35 & 1) != 0)
        goto LABEL_12;
LABEL_11:
      v37 = *(_QWORD *)(v0 + 88);
      sub_10000A020(v37, &qword_10028F740);
      v44(v37, 1, 1, v45);
      goto LABEL_12;
    }
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    sub_10000A020(*(_QWORD *)(v0 + 152), (uint64_t *)&unk_10028F1B0);
    sub_10000A020(v25, (uint64_t *)&unk_10028F1B0);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
LABEL_9:
    sub_10000A020(*(_QWORD *)(v0 + 136), &qword_1002900F0);
    goto LABEL_11;
  }
  v21 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 104);
  sub_10000A020(*(_QWORD *)(v0 + 152), (uint64_t *)&unk_10028F1B0);
  sub_10000A020(v21, (uint64_t *)&unk_10028F1B0);
  if (v20(v19, 1, v22) != 1)
    goto LABEL_9;
  sub_10000A020(*(_QWORD *)(v0 + 136), (uint64_t *)&unk_10028F1B0);
LABEL_12:
  v38 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 144);
  v39 = *(_QWORD *)(v0 + 152);
  v41 = *(_QWORD *)(v0 + 136);
  v42 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018CE40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _BYTE v37[24];
  char v38[24];

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v36 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v33 - v10;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId, v38, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  LOBYTE(v16) = static UUID.== infix(_:_:)(a1, v15);
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    v18 = (int *)type metadata accessor for StreamingRequestInfo(0);
    v19 = (uint64_t *)(a1 + v18[5]);
    v21 = *v19;
    v20 = v19[1];
    v22 = (_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedText);
    *v22 = v21;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease();
    v23 = a1 + v18[6];
    v24 = type metadata accessor for Locale(0);
    v25 = *(_QWORD *)(v24 - 8);
    v35 = v3;
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    v26(v11, v23, v24);
    v34 = v4;
    v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
    v27(v11, 0, 1, v24);
    sub_1000110A4((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_10028FE50);
    v28 = v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale;
    swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale, v37, 33, 0);
    sub_10002D560((uint64_t)v9, v28, (uint64_t *)&unk_10028FE50);
    swift_endAccess(v37);
    v26(v11, a1 + v18[7], v24);
    v27(v11, 0, 1, v24);
    sub_1000110A4((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_10028FE50);
    v29 = v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale;
    swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale, v37, 33, 0);
    sub_10002D560((uint64_t)v9, v29, (uint64_t *)&unk_10028FE50);
    v30 = swift_endAccess(v37);
    v31 = v36;
    static Date.now.getter(v30);
    v32 = v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp;
    swift_beginAccess(v32, v37, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 40))(v32, v31, v35);
    return swift_endAccess(v37);
  }
  return result;
}

uint64_t sub_10018D130()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = v0;
  v2 = sub_100006DF4(&qword_10028F190);
  v1[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[4] = v3;
  v4 = static MainActor.shared.getter(v3);
  v1[5] = v4;
  v1[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018D1D0, v5, v6);
}

uint64_t sub_10018D1D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v1 = v0[2];
  swift_release(v0[6]);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState) == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v3 = 0xE500000000000000;
    v4 = 0x726F727265;
  }
  else
  {
    v3 = 0xE400000000000000;
    v4 = 1701602409;
  }
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, 0x74616C736E617274, 0xEB00000000676E69, 0);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    v10 = v0[4];
    *(_BYTE *)(v1 + v2) = 1;
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
    v8 = v11;
    v9 = sub_10018D31C;
    return swift_task_switch(v9, v6, v8);
  }
LABEL_7:
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v0[4], &protocol witness table for MainActor);
  v8 = v7;
  v9 = sub_10018D2E0;
  return swift_task_switch(v9, v6, v8);
}

uint64_t sub_10018D2E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018D31C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  swift_retain(v2);
  v5 = static MainActor.shared.getter(v4);
  v6 = (_QWORD *)swift_allocObject(&unk_10026FB40, 40, 7);
  v6[2] = v5;
  v6[3] = &protocol witness table for MainActor;
  v6[4] = v2;
  v7 = sub_100049DC0(v1, (uint64_t)&unk_1002973E0, (uint64_t)v6);
  v8 = *(_QWORD *)(v0 + 24);
  swift_release(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018D3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4[52] = a4;
  v6 = type metadata accessor for Locale(0);
  v4[53] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[54] = v7;
  v4[55] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StreamingRequestInfo(0);
  v4[56] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[57] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[58] = swift_task_alloc(v10);
  v4[59] = swift_task_alloc(v10);
  v4[60] = swift_task_alloc(v10);
  v4[61] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100006DF4(&qword_10028F740) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[62] = swift_task_alloc(v11);
  v4[63] = swift_task_alloc(v11);
  v4[64] = swift_task_alloc(v11);
  v4[65] = swift_task_alloc(v11);
  v4[66] = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  v4[67] = v12;
  v4[68] = static MainActor.shared.getter(v12);
  v13 = OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_finalTranslationRequestsQueue;
  v4[69] = OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_finalTranslationRequestsQueue;
  v14 = a4 + v13;
  v15 = OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest;
  v4[70] = OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest;
  v16 = a4 + v15;
  swift_beginAccess(v14, v4 + 37, 0, 0);
  v17 = swift_beginAccess(v16, v4 + 40, 0, 0);
  v18 = v4[67];
  v4[71] = static MainActor.shared.getter(v17);
  v19 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018D578, v19, v20);
}

uint64_t sub_10018D578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 416);
  swift_release(*(_QWORD *)(v0 + 568));
  if (*(_QWORD *)(*(_QWORD *)(v2 + v1) + 16))
  {
    v3 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v0 + 536), &protocol witness table for MainActor);
    v5 = v4;
    v6 = sub_10018D724;
    v7 = v3;
    v8 = v5;
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 536);
    v10 = *(_QWORD *)(v0 + 528);
    v11 = *(_QWORD *)(v0 + 448);
    v12 = *(_QWORD *)(v0 + 456);
    sub_10000B074(*(_QWORD *)(v0 + 416) + *(_QWORD *)(v0 + 560), v10, &qword_10028F740);
    *(_DWORD *)(v0 + 688) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
    sub_10000A020(v10, &qword_10028F740);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
    v8 = v14;
    *(_QWORD *)(v0 + 576) = v13;
    *(_QWORD *)(v0 + 584) = v14;
    v6 = sub_10018D678;
    v7 = v13;
  }
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_10018D678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 536);
  if (*(_DWORD *)(v1 + 688) == 1)
  {
    *(_QWORD *)(v1 + 656) = static MainActor.shared.getter(a1);
    v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
    v5 = v4;
    v6 = sub_10018E4FC;
  }
  else
  {
    *(_BYTE *)(v1 + 692) = 1;
    *(_QWORD *)(v1 + 592) = static MainActor.shared.getter(a1);
    v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
    v5 = v7;
    v6 = sub_10018D78C;
  }
  return swift_task_switch(v6, v3, v5);
}

uint64_t sub_10018D724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 536);
  *(_BYTE *)(v1 + 692) = 1;
  *(_QWORD *)(v1 + 592) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018D78C, v3, v4);
}

uint64_t sub_10018D78C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0[69];
  v2 = v0[52];
  swift_release(v0[74]);
  v3 = (unint64_t *)(v2 + v1);
  swift_beginAccess(v3, v0 + 25, 33, 0);
  v4 = *v3;
  if (!*(_QWORD *)(v4 + 16))
  {
    v15 = 1;
    goto LABEL_6;
  }
  v5 = v0[69];
  v6 = v0[52];
  result = swift_isUniquelyReferenced_nonNull_native(v4);
  *(_QWORD *)(v6 + v5) = v4;
  if ((result & 1) != 0)
  {
    v8 = *(_QWORD *)(v4 + 16);
    if (v8)
    {
LABEL_4:
      v9 = v0[69];
      v10 = v0[65];
      v12 = v0[60];
      v11 = v0[61];
      v13 = v0[52];
      v14 = v8 - 1;
      sub_100097770(v4+ ((*(unsigned __int8 *)(v0[57] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[57] + 80))+ *(_QWORD *)(v0[57] + 72) * (v8 - 1), v12);
      *(_QWORD *)(v4 + 16) = v14;
      *(_QWORD *)(v13 + v9) = v4;
      sub_100097770(v12, v11);
      sub_100097770(v11, v10);
      v15 = 0;
LABEL_6:
      v16 = v0[67];
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[57] + 56))(v0[65], v15, 1, v0[56]);
      swift_endAccess(v0 + 25);
      v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
      v0[75] = v17;
      v0[76] = v18;
      return swift_task_switch(sub_10018D8F8, v17, v18);
    }
  }
  else
  {
    v19 = v0[69];
    v20 = v0[52];
    result = sub_10008097C(v4);
    v4 = result;
    *(_QWORD *)(v20 + v19) = result;
    v8 = *(_QWORD *)(result + 16);
    if (v8)
      goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_10018D8F8()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  _QWORD *v6;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Class isa;
  Class v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = (_BYTE *)(v0 + 692);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 456);
  sub_10000B074(*(_QWORD *)(v0 + 520), v2, &qword_10028F740);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  *(_QWORD *)(v0 + 616) = v5;
  LODWORD(v3) = v5(v2, 1, v3);
  sub_10000A020(v2, &qword_10028F740);
  if ((_DWORD)v3 == 1)
  {
    swift_beginAccess(v0 + 692, v0 + 176, 1, 0);
    *(_BYTE *)(v0 + 692) = 0;
    v6 = (_QWORD *)swift_task_alloc(dword_100297014);
    *(_QWORD *)(v0 + 624) = v6;
    *v6 = v0;
    v6[1] = sub_10018DE68;
    return sub_10018C958(*(_QWORD *)(v0 + 504));
  }
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
  v9 = *(_QWORD *)(v0 + 496);
  v10 = *(_QWORD *)(v0 + 448);
  sub_10000B074(*(_QWORD *)(v0 + 520), v9, &qword_10028F740);
  if (v8(v9, 1, v10) == 1)
  {
    v11 = *(_QWORD *)(v0 + 496);
    sub_10000A020(*(_QWORD *)(v0 + 520), &qword_10028F740);
    v12 = v11;
    v13 = &qword_10028F740;
LABEL_18:
    v41 = sub_10000A020(v12, v13);
    v42 = *(_QWORD *)(v0 + 536);
    *(_QWORD *)(v0 + 568) = static MainActor.shared.getter(v41);
    v43 = dispatch thunk of Actor.unownedExecutor.getter(v42, &protocol witness table for MainActor);
    return swift_task_switch(sub_10018D578, v43, v44);
  }
  sub_100097770(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 472));
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v15 = *(_QWORD *)(v0 + 464);
  v14 = *(_QWORD *)(v0 + 472);
  v16 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 632) = sub_10000F66C(v16, (uint64_t)qword_1002AA458);
  v17 = sub_10009761C(v14, v15);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(_QWORD *)(v0 + 464);
  if (v20)
  {
    v46 = *(_QWORD *)(v0 + 448);
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v48 = v23;
    *(_DWORD *)v22 = 136315395;
    swift_beginAccess(v0 + 692, v0 + 224, 0, 0);
    if (*v1)
      v24 = 0x6C616E6966;
    else
      v24 = 0x6C616974726170;
    if (*v1)
      v25 = 0xE500000000000000;
    else
      v25 = 0xE700000000000000;
    *(_QWORD *)(v0 + 408) = sub_1001A7FE4(v24, v25, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v22 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2085;
    v26 = (uint64_t *)(v21 + *(int *)(v46 + 20));
    v27 = *v26;
    v28 = v26[1];
    swift_bridgeObjectRetain(v28);
    *(_QWORD *)(v0 + 368) = sub_1001A7FE4(v27, v28, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v22 + 14);
    swift_bridgeObjectRelease();
    sub_10019034C(v21);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Performing a %s translation with content %{sensitive}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_10019034C(*(_QWORD *)(v0 + 464));
  }

  v29 = *(_QWORD *)(v0 + 472);
  v30 = *(_QWORD *)(v0 + 448);
  sub_10018CE40(v29);
  v31 = v29 + *(int *)(v30 + 24);
  v32 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v34 = Locale._bridgeToObjectiveC()().super.isa;
  v35 = objc_msgSend(v32, "initWithSourceLocale:targetLocale:", isa, v34);

  LODWORD(v34) = objc_msgSend(v35, "isPassthrough");
  if ((_DWORD)v34)
  {
    v47 = *(_QWORD *)(v0 + 520);
    v36 = *(_QWORD *)(v0 + 472);
    v37 = *(_QWORD *)(v0 + 440);
    v38 = (uint64_t *)(v36 + *(int *)(*(_QWORD *)(v0 + 448) + 20));
    v40 = *v38;
    v39 = v38[1];
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 432) + 16))(v37, v31, *(_QWORD *)(v0 + 424));
    *(_QWORD *)(v0 + 80) = type metadata accessor for StoredTranslationResult(0);
    *(_QWORD *)(v0 + 88) = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
    sub_1000122F8((_QWORD *)(v0 + 56));
    swift_bridgeObjectRetain(v39);
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(v40, v39, v37, 1, 0, 0);
    swift_beginAccess(v0 + 692, v0 + 248, 0, 0);
    sub_10018BBEC(v36, v0 + 56, *v1, 0);
    sub_10019034C(v36);
    sub_10000A020(v47, &qword_10028F740);
    v13 = (uint64_t *)&unk_10028F1C0;
    v12 = v0 + 56;
    goto LABEL_18;
  }
  v45 = (_QWORD *)swift_task_alloc(dword_100297024);
  *(_QWORD *)(v0 + 640) = v45;
  *v45 = v0;
  v45[1] = sub_10018E3A0;
  return sub_10018ED10(v0 + 136, *(_QWORD *)(v0 + 472));
}

uint64_t sub_10018DE68()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 624));
  return swift_task_switch(sub_10018DEB8, *(_QWORD *)(v1 + 600), *(_QWORD *)(v1 + 608));
}

uint64_t sub_10018DEB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class isa;
  Class v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;

  v1 = v0[65];
  v2 = v0[63];
  sub_10000A020(v1, &qword_10028F740);
  sub_1000110A4(v2, v1, &qword_10028F740);
  v3 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[77];
  v4 = v0[62];
  v5 = v0[56];
  sub_10000B074(v0[65], v4, &qword_10028F740);
  if (v3(v4, 1, v5) == 1)
  {
    v6 = v0[62];
    sub_10000A020(v0[65], &qword_10028F740);
    v7 = v6;
    v8 = &qword_10028F740;
LABEL_16:
    v38 = sub_10000A020(v7, v8);
    v39 = v0[67];
    v0[71] = static MainActor.shared.getter(v38);
    v40 = dispatch thunk of Actor.unownedExecutor.getter(v39, &protocol witness table for MainActor);
    return swift_task_switch(sub_10018D578, v40, v41);
  }
  sub_100097770(v0[62], v0[59]);
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v9 = (char *)v0 + 692;
  v11 = v0[58];
  v10 = v0[59];
  v12 = type metadata accessor for Logger(0);
  v0[79] = sub_10000F66C(v12, (uint64_t)qword_1002AA458);
  v13 = sub_10009761C(v10, v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = v0[58];
  v45 = (unsigned __int8 *)v0 + 692;
  if (v16)
  {
    v44 = v0[56];
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v46 = v19;
    *(_DWORD *)v18 = 136315395;
    swift_beginAccess((char *)v0 + 692, v0 + 28, 0, 0);
    if (*v9)
      v20 = 0x6C616E6966;
    else
      v20 = 0x6C616974726170;
    if (*v9)
      v21 = 0xE500000000000000;
    else
      v21 = 0xE700000000000000;
    v0[51] = sub_1001A7FE4(v20, v21, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 51, v0 + 52, v18 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2085;
    v22 = (uint64_t *)(v17 + *(int *)(v44 + 20));
    v23 = *v22;
    v24 = v22[1];
    swift_bridgeObjectRetain(v24);
    v0[46] = sub_1001A7FE4(v23, v24, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 46, v0 + 47, v18 + 14);
    swift_bridgeObjectRelease();
    sub_10019034C(v17);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Performing a %s translation with content %{sensitive}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    sub_10019034C(v17);
  }

  v25 = v0[59];
  v26 = v0[56];
  sub_10018CE40(v25);
  v27 = v25 + *(int *)(v26 + 24);
  v28 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v30 = Locale._bridgeToObjectiveC()().super.isa;
  v31 = objc_msgSend(v28, "initWithSourceLocale:targetLocale:", isa, v30);

  LODWORD(v30) = objc_msgSend(v31, "isPassthrough");
  if ((_DWORD)v30)
  {
    v32 = v0[65];
    v33 = v0[59];
    v34 = v0[55];
    v35 = (uint64_t *)(v33 + *(int *)(v0[56] + 20));
    v36 = *v35;
    v37 = v35[1];
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v0[54] + 16))(v34, v27, v0[53]);
    v0[10] = type metadata accessor for StoredTranslationResult(0);
    v0[11] = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
    sub_1000122F8(v0 + 7);
    swift_bridgeObjectRetain(v37);
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(v36, v37, v34, 1, 0, 0);
    swift_beginAccess(v45, v0 + 31, 0, 0);
    sub_10018BBEC(v33, (uint64_t)(v0 + 7), *v45, 0);
    sub_10019034C(v33);
    sub_10000A020(v32, &qword_10028F740);
    v8 = (uint64_t *)&unk_10028F1C0;
    v7 = (uint64_t)(v0 + 7);
    goto LABEL_16;
  }
  v43 = (_QWORD *)swift_task_alloc(dword_100297024);
  v0[80] = v43;
  *v43 = v0;
  v43[1] = sub_10018E3A0;
  return sub_10018ED10((uint64_t)(v0 + 17), v0[59]);
}

uint64_t sub_10018E3A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 640);
  *(_QWORD *)(*v1 + 648) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10018EA70;
  else
    v4 = sub_10018E404;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 600), *(_QWORD *)(v2 + 608));
}

uint64_t sub_10018E404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 472);
  sub_100023AB0(v0 + 136, v0 + 96);
  swift_beginAccess(v0 + 692, v0 + 344, 0, 0);
  sub_10018BBEC(v2, v0 + 96, *(unsigned __int8 *)(v0 + 692), 0);
  sub_10000A020(v0 + 96, (uint64_t *)&unk_10028F1C0);
  sub_100009C08((_QWORD *)(v0 + 136));
  sub_10019034C(v2);
  v3 = sub_10000A020(v1, &qword_10028F740);
  v4 = *(_QWORD *)(v0 + 536);
  *(_QWORD *)(v0 + 568) = static MainActor.shared.getter(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_10018D578, v5, v6);
}

uint64_t sub_10018E4FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;

  v1 = v0[52];
  swift_release(v0[82]);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState) == 1)
    {
      v3 = 0xEB00000000676E69;
      v4 = 0x74616C736E617274;
    }
    else
    {
      v3 = 0xE500000000000000;
      v4 = 0x726F727265;
    }
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, 1701602409, 0xE400000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      *(_BYTE *)(v1 + v2) = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_task_switch(sub_10018E5C4, v0[72], v0[73]);
}

uint64_t sub_10018E5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 544));
  v1 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 488);
  v4 = *(_QWORD *)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 464);
  v9 = *(_QWORD *)(v0 + 440);
  swift_task_dealloc(*(_QWORD *)(v0 + 528));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018E67C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;

  v1 = v0[52];
  swift_release(v0[84]);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_streamingManagerState) != 1)
    {
      swift_bridgeObjectRelease();
      return swift_task_switch(sub_10018E748, v0[75], v0[76]);
    }
    v3 = 0xEB00000000676E69;
    v4 = 0x74616C736E617274;
  }
  else
  {
    v3 = 0xE400000000000000;
    v4 = 1701602409;
  }
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, 0x726F727265, 0xE500000000000000, 0);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    *(_BYTE *)(v1 + v2) = 2;
  return swift_task_switch(sub_10018E748, v0[75], v0[76]);
}

uint64_t sub_10018E748()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;

  swift_beginAccess(v0 + 692, v0 + 272, 0, 0);
  if ((*(_BYTE *)(v0 + 692) & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 544));
    v1 = *(void **)(v0 + 664);
    v2 = *(_QWORD *)(v0 + 520);
    v3 = *(_QWORD *)(v0 + 472);
    *(_OWORD *)(v0 + 32) = 0u;
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    v4 = *(unsigned __int8 *)(v0 + 692);
    v5 = v1;
    sub_10018BBEC(v3, v0 + 16, v4, (uint64_t)v1);

    sub_10000A020(v0 + 16, (uint64_t *)&unk_10028F1C0);
    sub_10019034C(v3);
    sub_10000A020(v2, &qword_10028F740);
    swift_errorRelease(*(_QWORD *)(v0 + 400));
    v6 = *(_QWORD *)(v0 + 520);
    v8 = *(_QWORD *)(v0 + 504);
    v7 = *(_QWORD *)(v0 + 512);
    v10 = *(_QWORD *)(v0 + 488);
    v9 = *(_QWORD *)(v0 + 496);
    v12 = *(_QWORD *)(v0 + 472);
    v11 = *(_QWORD *)(v0 + 480);
    v13 = *(_QWORD *)(v0 + 464);
    v14 = *(_QWORD *)(v0 + 440);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = (_QWORD *)swift_task_alloc(dword_100297004);
    *(_QWORD *)(v0 + 680) = v16;
    *v16 = v0;
    v16[1] = sub_10018E8EC;
    return sub_10018C038(*(_QWORD *)(v0 + 472), 1);
  }
}

uint64_t sub_10018E8EC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 680));
  return swift_task_switch(sub_10018E93C, *(_QWORD *)(v1 + 600), *(_QWORD *)(v1 + 608));
}

uint64_t sub_10018E93C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 544));
  v1 = *(void **)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 472);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v4 = *(unsigned __int8 *)(v0 + 692);
  v5 = v1;
  sub_10018BBEC(v3, v0 + 16, v4, (uint64_t)v1);

  sub_10000A020(v0 + 16, (uint64_t *)&unk_10028F1C0);
  sub_10019034C(v3);
  sub_10000A020(v2, &qword_10028F740);
  swift_errorRelease(*(_QWORD *)(v0 + 400));
  v6 = *(_QWORD *)(v0 + 520);
  v8 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 488);
  v9 = *(_QWORD *)(v0 + 496);
  v12 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 464);
  v14 = *(_QWORD *)(v0 + 440);
  swift_task_dealloc(*(_QWORD *)(v0 + 528));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018EA70()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  void *v4;
  int v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v0 + 400) = *(_QWORD *)(v0 + 648);
  v1 = sub_100006DF4((uint64_t *)&unk_100296430);
  v2 = sub_100190420();
  result = swift_dynamicCast(v0 + 392, v0 + 400, v1, v2, 0);
  if ((_DWORD)result)
  {
    v4 = *(void **)(v0 + 392);
    *(_QWORD *)(v0 + 664) = v4;
    v5 = *(unsigned __int8 *)(v0 + 692);
    v6 = v4;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v21 = (uint64_t *)(v0 + 376);
      v9 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(64, -1);
      v23 = v22;
      *(_DWORD *)v9 = 136315394;
      if (v5)
        v10 = 0x6C616E6966;
      else
        v10 = 0x6C616974726170;
      if (v5)
        v11 = 0xE500000000000000;
      else
        v11 = 0xE700000000000000;
      *(_QWORD *)(v0 + 384) = sub_1001A7FE4(v10, v11, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v9 + 4);
      *(_QWORD *)&v12 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v9 + 12) = 2080;
      v13 = objc_msgSend(v6, "description", v12);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      *v21 = sub_1001A7FE4(v14, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, v0 + 384, v9 + 14);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Encountered error with a %s translation request: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

    }
    v18 = *(_QWORD *)(v0 + 536);
    *(_QWORD *)(v0 + 672) = static MainActor.shared.getter(v17);
    v19 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
    return swift_task_switch(sub_10018E67C, v19, v20);
  }
  return result;
}

uint64_t sub_10018ED10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  v4 = sub_100006DF4(&qword_10028F740);
  v3[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StreamingRequestInfo(0);
  v3[28] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[29] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v7);
  v3[31] = swift_task_alloc(v7);
  v3[32] = swift_task_alloc(v7);
  v3[33] = swift_task_alloc(v7);
  v3[34] = swift_task_alloc(v7);
  v3[35] = swift_task_alloc(v7);
  v3[36] = swift_task_alloc(v7);
  v8 = type metadata accessor for MainActor(0);
  v3[37] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v3[38] = v9;
  v3[39] = v10;
  return swift_task_switch(sub_10018EE18, v9, v10);
}

uint64_t sub_10018EE18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  __int16 v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation;
  swift_beginAccess(v1, v0 + 96, 0, 0);
  sub_10000B074(v1, v0 + 56, (uint64_t *)&unk_10028F1C0);
  if (!*(_QWORD *)(v0 + 80))
  {
    sub_10000A020(v0 + 56, (uint64_t *)&unk_10028F1C0);
LABEL_14:
    if (qword_10028A470 != -1)
      swift_once(&qword_10028A470, sub_1001210D4);
    v32 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 256);
    v34 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 200);
    v36 = type metadata accessor for Logger(0);
    sub_10000F66C(v36, (uint64_t)qword_1002AA458);
    sub_10009761C(v35, v33);
    sub_10009761C(v35, v32);
    v37 = sub_10009761C(v35, v34);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.debug.getter();
    v40 = os_log_type_enabled(v38, v39);
    v41 = *(_QWORD *)(v0 + 248);
    v42 = *(_QWORD *)(v0 + 256);
    v43 = *(_QWORD *)(v0 + 240);
    if (v40)
    {
      v44 = *(_QWORD *)(v0 + 224);
      v45 = swift_slowAlloc(32, -1);
      v75 = swift_slowAlloc(64, -1);
      v76 = v75;
      *(_DWORD *)v45 = 136446722;
      v46 = Locale.ltIdentifier.getter(v75);
      *(_QWORD *)(v0 + 160) = sub_1001A7FE4(v46, v47, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v45 + 4);
      swift_bridgeObjectRelease();
      v48 = sub_10019034C(v42);
      *(_WORD *)(v45 + 12) = 2082;
      v49 = Locale.ltIdentifier.getter(v48);
      *(_QWORD *)(v0 + 144) = sub_1001A7FE4(v49, v50, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v45 + 14);
      swift_bridgeObjectRelease();
      sub_10019034C(v41);
      *(_WORD *)(v45 + 22) = 2050;
      v51 = String.count.getter(*(_QWORD *)(v43 + *(int *)(v44 + 20)), *(_QWORD *)(v43 + *(int *)(v44 + 20) + 8));
      sub_10019034C(v43);
      *(_QWORD *)(v0 + 152) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v45 + 24);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Streaming translation from '%{public}s' -> '%{public}s' of length %{public}ld -> got no matching previous translation", (uint8_t *)v45, 0x20u);
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {
      sub_10019034C(*(_QWORD *)(v0 + 240));
      sub_10019034C(v42);
      sub_10019034C(v41);

    }
    v52 = *(_QWORD *)(v0 + 200);
    v53 = *(int **)(v0 + 224);
    v54 = (uint64_t *)(v52 + v53[5]);
    v55 = *v54;
    v56 = v54[1];
    v57 = v52 + v53[6];
    v58 = v53[8];
    v59 = v52 + v53[7];
    v60 = *(unsigned __int8 *)(v52 + v58);
    v61 = *(unsigned __int8 *)(v52 + v58 + 1);
    v62 = *(_QWORD *)(v52 + v58 + 8);
    v63 = v52 + v53[10];
    v64 = (_QWORD *)swift_task_alloc(dword_10029429C);
    *(_QWORD *)(v0 + 320) = v64;
    if (v61)
      v65 = 256;
    else
      v65 = 0;
    *v64 = v0;
    v64[1] = sub_10018F54C;
    return sub_100127434(*(_QWORD *)(v0 + 192), v55, v56, v57, v59, v65 | v60, v62, v63);
  }
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  sub_10003E994((__int128 *)(v0 + 56), v0 + 16);
  v6 = v5 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest;
  swift_beginAccess(v5 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest, v0 + 120, 0, 0);
  sub_10000B074(v6, v4, &qword_10028F740);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10000A020(*(_QWORD *)(v0 + 216), &qword_10028F740);
LABEL_13:
    sub_100009C08((_QWORD *)(v0 + 16));
    goto LABEL_14;
  }
  sub_100097770(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 288));
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  sub_100023AF4((_QWORD *)(v0 + 16), v7);
  v9 = dispatch thunk of TranslationResult.isFinal.getter(v7, v8);
  v10 = *(_QWORD *)(v0 + 288);
  if ((v9 & 1) == 0)
  {
LABEL_12:
    sub_10019034C(v10);
    goto LABEL_13;
  }
  if ((sub_1001880AC(v10) & 1) == 0)
  {
    v10 = *(_QWORD *)(v0 + 288);
    goto LABEL_12;
  }
  swift_release(*(_QWORD *)(v0 + 296));
  if (qword_10028A470 != -1)
    swift_once(&qword_10028A470, sub_1001210D4);
  v11 = *(_QWORD *)(v0 + 272);
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 200);
  v15 = type metadata accessor for Logger(0);
  sub_10000F66C(v15, (uint64_t)qword_1002AA458);
  sub_10009761C(v14, v12);
  sub_10009761C(v14, v11);
  v16 = sub_10009761C(v14, v13);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  v19 = os_log_type_enabled(v17, v18);
  v21 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 288);
  v23 = *(_QWORD *)(v0 + 264);
  v22 = *(_QWORD *)(v0 + 272);
  if (v19)
  {
    v24 = *(_QWORD *)(v0 + 224);
    v25 = swift_slowAlloc(32, -1);
    v74 = swift_slowAlloc(64, -1);
    v76 = v74;
    *(_DWORD *)v25 = 136446722;
    v26 = Locale.ltIdentifier.getter(v74);
    *(_QWORD *)(v0 + 168) = sub_1001A7FE4(v26, v27, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v25 + 4);
    swift_bridgeObjectRelease();
    v28 = sub_10019034C(v21);
    *(_WORD *)(v25 + 12) = 2082;
    v29 = Locale.ltIdentifier.getter(v28);
    *(_QWORD *)(v0 + 176) = sub_1001A7FE4(v29, v30, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v25 + 14);
    swift_bridgeObjectRelease();
    sub_10019034C(v22);
    *(_WORD *)(v25 + 22) = 2050;
    v31 = String.count.getter(*(_QWORD *)(v23 + *(int *)(v24 + 20)), *(_QWORD *)(v23 + *(int *)(v24 + 20) + 8));
    sub_10019034C(v23);
    *(_QWORD *)(v0 + 184) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v25 + 24);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Streaming translation from '%{public}s' -> '%{public}s' of length %{public}ld -> got matching previous translation", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {
    sub_10019034C(*(_QWORD *)(v0 + 264));

    sub_10019034C(v22);
    sub_10019034C(v21);
  }
  sub_10019034C(v20);
  sub_100023AB0(v0 + 16, *(_QWORD *)(v0 + 192));
  sub_100009C08((_QWORD *)(v0 + 16));
  v67 = *(_QWORD *)(v0 + 280);
  v69 = *(_QWORD *)(v0 + 264);
  v68 = *(_QWORD *)(v0 + 272);
  v71 = *(_QWORD *)(v0 + 248);
  v70 = *(_QWORD *)(v0 + 256);
  v72 = *(_QWORD *)(v0 + 240);
  v73 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018F54C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10018F648;
  else
    v4 = sub_10018F5AC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 304), *(_QWORD *)(v2 + 312));
}

uint64_t sub_10018F5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 296));
  v1 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018F648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id *sub_10018F6E4()
{
  id *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  sub_10000A020((uint64_t)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSourceLocale, (uint64_t *)&unk_10028FE50);
  sub_10000A020((uint64_t)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTargetLocale, (uint64_t *)&unk_10028FE50);
  swift_bridgeObjectRelease();
  v1 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastSubmittedTimestamp;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10000A020((uint64_t)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslation, (uint64_t *)&unk_10028F1C0);
  sub_10000A020((uint64_t)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_lastTranslatedRequest, &qword_10028F740);

  sub_100009C08((id *)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_delegate));
  v3 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_currentRequestId;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_10000A020((uint64_t)v0 + OBJC_IVAR____TtC17SequoiaTranslator31TextStreamingTranslationManager_partialTranslationRequest, &qword_10028F740);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10018F82C()
{
  uint64_t v0;

  sub_10018F6E4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10018F850()
{
  return type metadata accessor for TextStreamingTranslationManager(0);
}

uint64_t type metadata accessor for TextStreamingTranslationManager(uint64_t a1)
{
  return sub_10001E6EC(a1, (uint64_t *)&unk_100296FF0, (uint64_t)&nominal type descriptor for TextStreamingTranslationManager);
}

void sub_10018F86C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;

  v11[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v11[1] = "\b";
  v11[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v11[3] = "\b";
  sub_10015C304(319, (unint64_t *)&qword_100292A50, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
  if (v3 <= 0x3F)
  {
    v12 = *(_QWORD *)(v2 - 8) + 64;
    v13 = v12;
    v14 = &unk_1001F57B8;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v15 = *(_QWORD *)(v4 - 8) + 64;
      v16 = &unk_1001F57D0;
      sub_10015C304(319, (unint64_t *)&unk_100297028, type metadata accessor for StreamingRequestInfo);
      if (v7 <= 0x3F)
      {
        v8 = *(_QWORD *)(v6 - 8) + 64;
        v17 = v8;
        v18 = (char *)&value witness table for Builtin.UnknownObject + 64;
        v19 = &unk_1001F57E8;
        v9 = type metadata accessor for UUID(319);
        if (v10 <= 0x3F)
        {
          v20 = *(_QWORD *)(v9 - 8) + 64;
          v21 = &unk_1001F5800;
          v22 = v8;
          v23 = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_updateClassMetadata2(a1, 256, 16, v11, a1 + 80);
        }
      }
    }
  }
}

uint64_t type metadata accessor for StreamingRequestInfo(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100297380, (uint64_t)&nominal type descriptor for StreamingRequestInfo);
}

uint64_t storeEnumTagSinglePayload for TextStreamingTranslationManager.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10018FA14 + 4 * byte_1001F5725[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10018FA48 + 4 * byte_1001F5720[v4]))();
}

uint64_t sub_10018FA48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018FA50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018FA58);
  return result;
}

uint64_t sub_10018FA64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018FA6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10018FA70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018FA78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextStreamingTranslationManager.State()
{
  return &type metadata for TextStreamingTranslationManager.State;
}

char *sub_10018FA94(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = &a2[v9];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = &a1[v10];
    v15 = &a2[v10];
    v16 = type metadata accessor for Locale(0);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain(v13);
    v17(v14, v15, v16);
    v17(&a1[a3[7]], &a2[a3[7]], v16);
    v18 = a3[9];
    *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
    a1[v18] = a2[v18];
    v8(&a1[a3[10]], &a2[a3[10]], v7);
    *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  }
  return a1;
}

uint64_t sub_10018FBBC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v9(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  v5 = a1 + a2[6];
  v6 = type metadata accessor for Locale(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + a2[7], v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(a1 + a2[10], v4);
}

uint64_t sub_10018FC74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = a1 + v9;
  v14 = a2 + v9;
  v15 = type metadata accessor for Locale(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain(v12);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v17 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v7(a1 + a3[10], a2 + a3[10], v6);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10018FD70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Locale(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24);
  v17(v14, v15, v16);
  v17(a1 + a3[7], a2 + a3[7], v16);
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_BYTE *)v19 = *(_BYTE *)v20;
  *(_BYTE *)(v19 + 1) = *(_BYTE *)(v20 + 1);
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v7(a1 + a3[10], a2 + a3[10], v6);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10018FE9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Locale(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v12(a1 + a3[7], a2 + a3[7], v11);
  v13 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v7(a1 + a3[10], a2 + a3[10], v6);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10018FF88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Locale(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
  v18(v15, v16, v17);
  v18(a1 + a3[7], a2 + a3[7], v17);
  v19 = a3[8];
  v20 = a3[9];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  *(_BYTE *)(v21 + 1) = *(_BYTE *)(v22 + 1);
  v23 = *(_BYTE *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  *(_BYTE *)(a1 + v20) = v23;
  v7(a1 + a3[10], a2 + a3[10], v6);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1001900A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001900AC);
}

uint64_t sub_1001900AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Locale(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100190158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100190164);
}

uint64_t sub_100190164(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Locale(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10019020C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v6[0] = v4;
    v6[1] = &unk_1001F57B8;
    result = type metadata accessor for Locale(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(result - 8) + 64;
      v8 = v7;
      v9 = &unk_1001F5838;
      v10 = &unk_1001F5850;
      v11 = v4;
      v12 = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001902C0()
{
  unint64_t result;

  result = qword_1002973D0;
  if (!qword_1002973D0)
  {
    result = swift_getWitnessTable(&unk_1001F58E0, &type metadata for TextStreamingTranslationManager.State);
    atomic_store(result, &qword_1002973D0);
  }
  return result;
}

unint64_t sub_100190304(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262860, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10019034C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StreamingRequestInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100190388()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001903B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002973DC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D380;
  return sub_10018D3D4(a1, v4, v5, v6);
}

unint64_t sub_100190420()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028AA48;
  if (!qword_10028AA48)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028AA48);
  }
  return result;
}

uint64_t sub_10019045C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v9 + v6 + 1) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v3 | v9 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 6));
  v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(&v0[v4], v1);
  v13(&v0[v6], v1);
  (*(void (**)(char *, uint64_t))(v8 + 8))(&v0[v10], v7);
  return swift_deallocObject(v0, v11, v12);
}

uint64_t sub_100190544(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_QWORD *)(type metadata accessor for Locale(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 56) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + v4 + v5) & ~v4;
  type metadata accessor for UUID(0);
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = v1[6];
  v12 = (_QWORD *)swift_task_alloc(dword_1002973F4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10003EFA0;
  return sub_10018B5BC(a1, v7, v8, v9, v10, v11, (uint64_t)v1 + v5, (uint64_t)v1 + v6);
}

uint64_t sub_10019063C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void (*v14)(uint64_t, uint64_t, __n128);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  __n128 v17;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (int *)type metadata accessor for StreamingRequestInfo(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v9 + v6) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v3 | v9 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v13 = swift_bridgeObjectRelease();
  v14 = *(void (**)(uint64_t, uint64_t, __n128))(v2 + 8);
  v14(v0 + v4, v1, v13);
  ((void (*)(uint64_t, uint64_t))v14)(v0 + v6, v1);
  v15 = type metadata accessor for UUID(0);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(v0 + v10, v15);
  v17 = swift_bridgeObjectRelease();
  v14(v0 + v10 + v7[6], v1, v17);
  ((void (*)(uint64_t, uint64_t))v14)(v0 + v10 + v7[7], v1);
  v16(v0 + v10 + v7[10], v15);
  return swift_deallocObject(v0, v11, v12);
}

uint64_t sub_100190774(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for Locale(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 56) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v5 + v6) & ~v5;
  type metadata accessor for StreamingRequestInfo(0);
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = v1[5];
  v12 = v1[6];
  v13 = (_QWORD *)swift_task_alloc(dword_100297404);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003EFA0;
  return sub_10018AD48(a1, v8, v9, v10, v11, v12, (uint64_t)v1 + v6, (uint64_t)v1 + v7);
}

uint64_t sub_100190860()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100190888(uint64_t a1)
{
  return sub_100190B60(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10018A31C);
}

uint64_t sub_100190894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001908A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001908AC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for StreamingRequestInfo(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v13 = v3 | 7;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v9 = v6 + v1[6];
  v10 = type metadata accessor for Locale(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v6 + v1[7], v10);
  v8(v6 + v1[10], v7);
  swift_release(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v13);
}

uint64_t sub_1001909BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for StreamingRequestInfo(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_100297414);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003EFA0;
  return sub_10018A474(a1, v6, v7, v8, v9);
}

uint64_t sub_100190A64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for StreamingRequestInfo(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  v10 = v7 + v1[6];
  v11 = type metadata accessor for Locale(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v7 + v1[7], v11);
  v9(v7 + v1[10], v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100190B54(uint64_t a1)
{
  return sub_100190B60(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1001898C0);
}

uint64_t sub_100190B60(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StreamingRequestInfo(0) - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

uint64_t sub_100190BB0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for StreamingRequestInfo(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  v10 = v7 + v1[6];
  v11 = type metadata accessor for Locale(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v7 + v1[7], v11);
  v9(v7 + v1[10], v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100190CA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StreamingRequestInfo(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_100297424);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003EFA0;
  return sub_100189A0C(a1, v5, v6, v7, v8);
}

uint64_t sub_100190D3C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100190D70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100297434);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10003EFA0;
  return sub_100188D30(a1, v4, v5, v7, v6);
}

id sub_100190DF0()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder____lazy_storage___placeholder;
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder____lazy_storage___placeholder];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder____lazy_storage___placeholder];
  }
  else
  {
    v4 = sub_1001910DC(v0);
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_100190E50()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  id v8;
  id v9;

  v1 = objc_msgSend(v0, "text");
  if (!v1)
    goto LABEL_7;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  if (v3)
    v6 = 0;
  else
    v6 = v5 == 0xE000000000000000;
  if (v6)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, 0, 0xE000000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
LABEL_7:
      v8 = sub_100190DF0();
      objc_msgSend(v8, "setHidden:", 1);

      v9 = sub_100190DF0();
      objc_msgSend(v0, "bringSubviewToFront:", v9);
      goto LABEL_10;
    }
  }
  v9 = sub_100190DF0();
  objc_msgSend(v9, "setHidden:", 0);
LABEL_10:

  if (*((_BYTE *)v0 + OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder_adjustsFontSize) == 1)
    sub_100190F5C();
}

void sub_100190F5C()
{
  char *v0;
  void *v1;
  double v2;
  double v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;

  v1 = v0;
  v2 = *(double *)&v0[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder_minSourceTextSize];
  v3 = *(double *)&v0[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder_minSourceTextSize + 8];
  v4 = objc_msgSend(v0, "text");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    v9 = objc_msgSend(v1, "font");
    v14 = (id)sub_1001D851C(v2, v3, v6, v8, v9);
    swift_bridgeObjectRelease();

    v10 = objc_msgSend(v1, "font");
    if (!v10)
      goto LABEL_4;
    v11 = v10;
    sub_10000A05C(0, (unint64_t *)&qword_10028C090, UIFont_ptr);
    v12 = v14;
    v13 = v11;
    LOBYTE(v11) = static NSObject.== infix(_:_:)(v13, v12);

    if ((v11 & 1) == 0)
LABEL_4:
      objc_msgSend(v1, "setFont:", v14);

  }
  else
  {
    __break(1u);
  }
}

id sub_1001910A4()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), "quaternaryLabelColor");
  qword_1002AA5B8 = (uint64_t)result;
  return result;
}

id sub_1001910DC(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v2 = objc_msgSend(objc_allocWithZone((Class)UITextView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, "setUserInteractionEnabled:", 0);
  objc_msgSend(v2, "setSelectable:", 0);
  objc_msgSend(v2, "setEditable:", 0);
  v3 = (void *)objc_opt_self(UIColor);
  v4 = v2;
  v5 = objc_msgSend(v3, "clearColor");
  objc_msgSend(v4, "setBackgroundColor:", v5);

  v6 = objc_msgSend(v4, "textContainer");
  objc_msgSend(v6, "setLineFragmentPadding:", 0.0);

  objc_msgSend(v4, "setAdjustsFontForContentSizeCategory:", 1);
  if (qword_10028A4E0 != -1)
    swift_once(&qword_10028A4E0, sub_1001910A4);
  objc_msgSend(v4, "setTextColor:", qword_1002AA5B8);
  objc_msgSend(a1, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityExtraLarge);
  return v4;
}

id sub_100191614(void *a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  Class isa;
  id v39;
  id v40;
  id v41;
  objc_super v43;

  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder____lazy_storage___placeholder] = 0;
  v5[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder_adjustsFontSize] = 0;
  *(int64x2_t *)&v5[OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder_minSourceTextSize] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v43.receiver = v5;
  v43.super_class = (Class)type metadata accessor for TextViewWithPlaceHolder();
  v11 = objc_msgSendSuper2(&v43, "initWithFrame:textContainer:", a1, a2, a3, a4, a5);
  v12 = sub_100190DF0();
  objc_msgSend(v11, "addSubview:", v12);

  v13 = sub_100190DF0();
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v14 = (void *)objc_opt_self(NSLayoutConstraint);
  v15 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1001E98F0;
  v17 = sub_100190DF0();
  v18 = objc_msgSend(v17, "topAnchor");

  v19 = objc_msgSend(v11, "topAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:", v19);

  *(_QWORD *)(v16 + 32) = v20;
  v21 = sub_100190DF0();
  v22 = objc_msgSend(v21, "leadingAnchor");

  v23 = objc_msgSend(v11, "leadingAnchor");
  v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

  *(_QWORD *)(v16 + 40) = v24;
  v25 = sub_100190DF0();
  v26 = objc_msgSend(v25, "widthAnchor");

  v27 = objc_msgSend(v11, "widthAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

  *(_QWORD *)(v16 + 48) = v28;
  v29 = sub_100190DF0();
  v30 = objc_msgSend(v29, "trailingAnchor");

  v31 = objc_msgSend(v11, "trailingAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  *(_QWORD *)(v16 + 56) = v32;
  v33 = sub_100190DF0();
  v34 = objc_msgSend(v33, "heightAnchor");

  v35 = objc_msgSend(v11, "heightAnchor");
  v36 = objc_msgSend(v34, "constraintEqualToAnchor:", v35);

  *(_QWORD *)(v16 + 64) = v36;
  specialized Array._endMutation()(v37);
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v39 = objc_msgSend(v11, "textContainer");
  objc_msgSend(v39, "setLineFragmentPadding:", 0.0);

  v40 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v40, "addObserver:selector:name:object:", v11, "textDidUpdate", UITextViewTextDidChangeNotification, v11);

  v41 = v11;
  objc_msgSend(v41, "setMaximumContentSizeCategory:", UIContentSizeCategoryAccessibilityExtraLarge);

  return v41;
}

void sub_100191C88(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  objc_class *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  unsigned int v15;
  id v16;
  id v17;
  NSString v18;
  uint64_t v19;
  __objc2_prot *v20;
  objc_super v21;
  _QWORD v22[3];
  uint64_t v23;

  sub_100191FB8(a1, (uint64_t)v22);
  v2 = v23;
  if (v23)
  {
    v3 = sub_100023AF4(v22, v23);
    v4 = *(_QWORD *)(v2 - 8);
    __chkstk_darwin(v3);
    v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v4 + 16))(v6);
    v7 = _bridgeAnythingToObjectiveC<A>(_:)(v6, v2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
    sub_100009C08(v22);
  }
  else
  {
    v7 = 0;
  }
  v8 = (objc_class *)type metadata accessor for TextViewWithPlaceHolder();
  v21.receiver = v1;
  v21.super_class = v8;
  objc_msgSendSuper2(&v21, "paste:", v7);
  swift_unknownObjectRelease(v7);
  v9 = objc_msgSend(v1, "delegate");
  if (v9)
  {
    v10 = v9;
    v20 = &OBJC_PROTOCOL____TtP17SequoiaTranslator21TextViewStatsDelegate_;
    v11 = swift_dynamicCastObjCProtocolConditional(v9, 1, &v20);
    if (v11)
    {
      v12 = (void *)v11;
      v13 = (void *)objc_opt_self(UIPasteboard);
      v14 = objc_msgSend(v13, "generalPasteboard");
      v15 = objc_msgSend(v14, "hasStrings");

      if (v15)
      {
        v16 = objc_msgSend(v13, "generalPasteboard");
        v17 = objc_msgSend(v16, "string");

        if (v17)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

          if ((objc_msgSend(v12, "respondsToSelector:", "pasted:") & 1) != 0)
          {
            swift_unknownObjectRetain(v10);
            v18 = String._bridgeToObjectiveC()();
            objc_msgSend(v12, "pasted:", v18);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease_n(v10, 2);

            return;
          }
          swift_bridgeObjectRelease();
        }
      }
    }
    swift_unknownObjectRelease(v10);
  }
}

void sub_100191F48()
{
  uint64_t v0;

}

id sub_100191F58()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TextViewWithPlaceHolder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TextViewWithPlaceHolder()
{
  return objc_opt_self(_TtC17SequoiaTranslator23TextViewWithPlaceHolder);
}

uint64_t sub_100191FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028C0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TipsHelper.FavoriteTranslationsTip()
{
  return &type metadata for TipsHelper.FavoriteTranslationsTip;
}

ValueMetadata *type metadata accessor for TipsHelper()
{
  return &type metadata for TipsHelper;
}

ValueMetadata *type metadata accessor for TipsHelper.GenderDisambiguationTip()
{
  return &type metadata for TipsHelper.GenderDisambiguationTip;
}

uint64_t sub_100192030()
{
  uint64_t v0;

  v0 = sub_100006DF4(&qword_100290B40);
  sub_100011A00(v0, qword_1002AA5C0);
  sub_10000F66C(v0, (uint64_t)qword_1002AA5C0);
  return Tips.Event.init<>(id:)(0xD00000000000002CLL, 0x8000000100201470);
}

uint64_t sub_100192094()
{
  uint64_t v0;
  char v2;

  v0 = sub_100006DF4(&qword_10028ACD8);
  sub_100011A00(v0, qword_1002AA5D8);
  sub_10000F66C(v0, (uint64_t)qword_1002AA5D8);
  v2 = 0;
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for TipsHelper, 0xD000000000000018, 0x80000001002014A0, &v2, _swiftEmptyArrayStorage, &type metadata for Bool, &type metadata for TipsHelper, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_100192138()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  NSString v3;
  unsigned __int8 v4;
  unsigned __int8 v6;

  v0 = sub_100006DF4(&qword_10028ACD8);
  sub_100011A00(v0, qword_1002AA5F0);
  sub_10000F66C(v0, (uint64_t)qword_1002AA5F0);
  v1 = sub_10000A560();
  v2 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v1);
  static NSUserDefaults.Constants.genderDisambiguationEnabledKey.getter();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3, swift_bridgeObjectRelease().n128_f64[0]);

  v6 = v4;
  return Tips.Parameter.init<A>(_:_:_:_:)(&type metadata for TipsHelper, 0xD000000000000027, 0x8000000100201510, &v6, _swiftEmptyArrayStorage, &type metadata for Bool, &type metadata for TipsHelper, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_100192234@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10019264C(a1, 0, a2);
}

uint64_t sub_10019223C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t KeyPath;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v41 = a2;
  v3 = type metadata accessor for PredicateExpressions.ComparisonOperator(0);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  __chkstk_darwin(v3);
  v37 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_1002974A0);
  v6 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  v43 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_1002974A8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_1002974B0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100006DF4(&qword_1002974B8);
  v38 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100012334(&qword_1002974C0, &qword_1002974A8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(a1, v9, v19);
  KeyPath = swift_getKeyPath(&unk_1001F5AB8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, KeyPath, v9, v19);
  v21 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v21);
  v22 = swift_getKeyPath(&unk_1001F5AF0);
  v23 = sub_100012334(&qword_1002974C8, &qword_1002974B0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, v22, v13, v23);
  v24 = swift_release(v22);
  (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v16, v13, v24);
  v44 = 3;
  static PredicateExpressions.build_Arg<A>(_:)(&v44, &type metadata for Int);
  v26 = v39;
  v25 = v40;
  v27 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v37, enum case for PredicateExpressions.ComparisonOperator.greaterThanOrEqual(_:), v40);
  v28 = sub_100006DF4(&qword_1002974D0);
  v29 = v41;
  v41[3] = v28;
  v29[4] = sub_100193868();
  sub_1000122F8(v29);
  v30 = sub_100012334(&qword_100297500, &qword_1002974B8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v31 = sub_100012334(&qword_100297508, &qword_1002974A0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v32 = v36;
  v33 = v42;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v18, v8, v27, v36, v42, v30, v31, &protocol witness table for Int);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v18, v32);
}

uint64_t sub_100192594()
{
  uint64_t v0;

  v0 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001002014F0);
  return Text.init(_:tableName:bundle:comment:)(v0);
}

uint64_t sub_1001925F4()
{
  return Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
}

uint64_t sub_100192614(uint64_t a1, uint64_t a2)
{
  return sub_100192AC8(a1, a2, 3);
}

uint64_t sub_10019261C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100192C80(a1, (uint64_t (*)(void))sub_1000C987C, a2);
}

uint64_t sub_100192628()
{
  return sub_100193A18(0xD00000000000002ALL, 0x8000000100201540);
}

uint64_t sub_100192644@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10019264C(a1, 1, a2);
}

uint64_t sub_10019264C@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[15];
  char v18;

  v6 = sub_100006DF4(&qword_10028AD00);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100006DF4(&qword_10028AD08);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100012334(&qword_10028AD10, &qword_10028AD08, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(a1, v10, v14);
  v18 = a2;
  static PredicateExpressions.build_Arg<A>(_:)(&v18, &type metadata for Bool);
  a3[3] = sub_100006DF4(&qword_10028AD18);
  a3[4] = sub_100012210();
  sub_1000122F8(a3);
  v15 = sub_100012334(&qword_10028AD38, &qword_10028AD00, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v13, v9, v10, v6, v14, v15, &protocol witness table for Bool);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1001927E4()
{
  return sub_100193A18(0xD00000000000001FLL, 0x80000001002015A0);
}

_QWORD *sub_100192820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE v11[16];

  v0 = type metadata accessor for Tips.Action(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Tips.Action.init(id:perform:_:)(0x4F4D5F4E5241454CLL, 0xEA00000000004552, nullsub_1, 0, sub_100192628, 0);
  v4 = sub_100006DF4(&qword_100297510);
  v5 = *(unsigned __int8 *)(v1 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v4, v6 + *(_QWORD *)(v1 + 72), v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001E64F0;
  v8 = v7 + v6;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 32))(v8, v3, v0);
  v9 = sub_100192D4C(v7);
  swift_setDeallocating(v7);
  swift_arrayDestroy(v8, *(_QWORD *)(v7 + 16), v0);
  swift_deallocClassInstance(v7, 32, 7);
  return v9;
}

uint64_t sub_100192950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v0 = sub_100006DF4(&qword_10028ACD8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for Tips.Rule(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10028A4F8 != -1)
    swift_once(&qword_10028A4F8, sub_100192138);
  v8 = sub_10000F66C(v0, (uint64_t)qword_1002AA5F0);
  swift_beginAccess(v8, v13, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v8, v0);
  Tips.Rule.init<A>(_:_:)(v3, sub_100192644, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v9 = static Tips.RuleBuilder.buildExpression(_:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = static Tips.RuleBuilder.buildPartialBlock(first:)(v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100192AC0(uint64_t a1, uint64_t a2)
{
  return sub_100192AC8(a1, a2, 10);
}

uint64_t sub_100192AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  v4 = sub_100006DF4(&qword_10028ACE8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Tips.MaxDisplayCount(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_10028ACF0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Tips.MaxDisplayCount.init(_:)(a3);
  static Tips.OptionsBuilder.buildExpression<A>(_:)(v11, v8, &protocol witness table for Tips.MaxDisplayCount);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v20 = v8;
  v21 = &protocol witness table for Tips.MaxDisplayCount;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>, 1);
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)(v15, v12, OpaqueTypeConformance2);
  v20 = v12;
  v21 = (void *)OpaqueTypeConformance2;
  v17 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>, 1);
  v18 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)(v7, v4, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v18;
}

uint64_t sub_100192C74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100192C80(a1, (uint64_t (*)(void))sub_100048860, a2);
}

uint64_t sub_100192C80@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = a2();
  result = Tip.id.getter(a1, v5);
  *a3 = result;
  a3[1] = v7;
  return result;
}

unint64_t sub_100192CC0()
{
  unint64_t result;

  result = qword_100297480;
  if (!qword_100297480)
  {
    result = swift_getWitnessTable(&unk_1001F5988, &type metadata for TipsHelper.GenderDisambiguationTip);
    atomic_store(result, (unint64_t *)&qword_100297480);
  }
  return result;
}

unint64_t sub_100192D08()
{
  unint64_t result;

  result = qword_100297488;
  if (!qword_100297488)
  {
    result = swift_getWitnessTable(&unk_1001F5A20, &type metadata for TipsHelper.FavoriteTranslationsTip);
    atomic_store(result, (unint64_t *)&qword_100297488);
  }
  return result;
}

_QWORD *sub_100192D4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;

  v2 = type metadata accessor for Tips.Action(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v37 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100006DF4(&qword_100297518);
  v5 = __chkstk_darwin(v36);
  v35 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v34 = (uint64_t *)((char *)&v27 - v8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v27 - v9);
  v38 = _swiftEmptyArrayStorage;
  sub_100192FD4(0, 0, 0);
  v11 = v38;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = swift_bridgeObjectRetain(a1);
  v33 = v12;
  v27 = a1;
  if (v12)
  {
    v14 = 0;
    v15 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v29 = *(_QWORD *)(v3 + 72);
    v30 = v15;
    v16 = a1 + v15;
    v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
    v31 = v3;
    v32 = v2;
    v17 = v36;
    do
    {
      v18 = &v35[*(int *)(v17 + 48)];
      v28(v18, v16, v2, v13);
      v19 = (uint64_t)v34;
      v20 = (char *)v34 + *(int *)(v17 + 48);
      *v34 = v14;
      v21 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v21(v20, v18, v2);
      sub_1001939CC(v19, (uint64_t)v10);
      Tips.Action.with(index:)(*v10);
      sub_10000A020((uint64_t)v10, &qword_100297518);
      v11 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      {
        sub_100192FD4(0, v11[2] + 1, 1);
        v11 = v38;
      }
      v23 = v11[2];
      v22 = v11[3];
      if (v23 >= v22 >> 1)
      {
        sub_100192FD4(v22 > 1, v23 + 1, 1);
        v11 = v38;
      }
      ++v14;
      v11[2] = v23 + 1;
      v24 = v29;
      v25 = (char *)v11 + v30 + v23 * v29;
      v2 = v32;
      v21(v25, v37, v32);
      v38 = v11;
      v16 += v24;
      v3 = v31;
    }
    while (v33 != v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_100192FD4(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_100192FF0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_100192FF0(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100006DF4(&qword_100297510);
  v11 = *(_QWORD *)(type metadata accessor for Tips.Action(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = type metadata accessor for Tips.Action(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20);
  }
  swift_release(a4);
  return (size_t)v15;
}

uint64_t sub_100193164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v0 = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation(0);
  v18 = *(_QWORD *)(v0 - 8);
  v19 = v0;
  __chkstk_darwin(v0);
  v21 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Tips.ConfigurationOption.DisplayFrequency(0);
  v2 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_100297520);
  v10 = *(_QWORD *)(type metadata accessor for Tips.ConfigurationOption(0) - 8);
  v11 = swift_allocObject(v9, ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 3 * *(_QWORD *)(v10 + 72), *(unsigned __int8 *)(v10 + 80) | 7);
  *(_OWORD *)(v11 + 16) = xmmword_1001F5930;
  static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter();
  static Tips.ConfigurationOption.analyticsEngine(_:)(v8);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static Tips.ConfigurationOption.DisplayFrequency.system.getter(v12);
  static Tips.ConfigurationOption.displayFrequency(_:)(v4);
  v13 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v14 = v21;
  v15 = v13(v4, v20);
  static Tips.ConfigurationOption.DatastoreLocation.tipsGroupContainer.getter(v15);
  static Tips.ConfigurationOption.datastoreLocation(_:)(v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v19);
  static Tips.configure(_:)(v11);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_100193370()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  Swift::String v21;
  uint64_t v23;
  uint64_t v24;

  v0 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(33, 1);
  v3._object = (void *)0x80000001002014C0;
  v3._countAndFlagsBits = 0xD000000000000021;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  v4 = Image.init(systemName:)(1918989427, 0xE400000000000000);
  v5 = Text.init(_:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Color.teal.getter();
  v24 = v12;
  v13 = Text.foregroundStyle<A>(_:)(&v24, v5, v7, v11, v9, &type metadata for Color, &protocol witness table for Color);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  sub_10001B9E8(v5, v7, v11);
  swift_release(v12);
  v20 = swift_bridgeObjectRelease();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v13, v15, v19, v17, v20);
  sub_10001B9E8(v13, v15, v19);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v21);
  LocalizedStringKey.init(stringInterpolation:)(v2);
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t sub_100193508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _BYTE v25[24];

  v0 = sub_100006DF4(&qword_100290B40);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v25[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_100006DF4(&qword_10028ACD8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for Tips.Rule(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10028A4F0 != -1)
    swift_once(&qword_10028A4F0, sub_100192094);
  v12 = sub_10000F66C(v4, (uint64_t)qword_1002AA5D8);
  swift_beginAccess(v12, v25, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
  Tips.Rule.init<A>(_:_:)(v7, sub_100192234, 0, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
  v13 = static Tips.RuleBuilder.buildExpression(_:)(v11);
  v14 = *(void (**)(char *, uint64_t))(v9 + 8);
  v14(v11, v8);
  if (qword_10028A4E8 != -1)
    swift_once(&qword_10028A4E8, sub_100192030);
  v15 = sub_10000F66C(v0, (uint64_t)qword_1002AA5C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v15, v0);
  v16 = type metadata accessor for Tips.EmptyDonation(0);
  v17 = sub_10019379C(&qword_100297490, (uint64_t)&protocol conformance descriptor for Tips.EmptyDonation);
  v18 = sub_10019379C(&qword_100297498, (uint64_t)&protocol conformance descriptor for Tips.EmptyDonation);
  Tips.Rule.init<A>(_:_:)(v3, sub_10019223C, 0, v16, v17, v18);
  v19 = static Tips.RuleBuilder.buildExpression(_:)(v11);
  v14(v11, v8);
  v20 = static Tips.RuleBuilder.buildPartialBlock(first:)(v13);
  v21 = swift_bridgeObjectRelease();
  v22 = static Tips.RuleBuilder.buildPartialBlock(accumulated:next:)(v20, v19, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_10019379C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Tips.EmptyDonation(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001937DC()
{
  return sub_10019379C(&qword_100297490, (uint64_t)&protocol conformance descriptor for Tips.EmptyDonation);
}

uint64_t sub_100193800()
{
  return sub_10019379C(&qword_100297498, (uint64_t)&protocol conformance descriptor for Tips.EmptyDonation);
}

uint64_t sub_100193824@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_100006DF4(&qword_100290B40);
  result = Tips.Event.donations.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100193858@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 16);
  return result;
}

unint64_t sub_100193868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002974D8;
  if (!qword_1002974D8)
  {
    v1 = sub_1000070BC(&qword_1002974D0);
    sub_1001938EC();
    sub_100012334(&qword_1002974F8, &qword_1002974A0, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002974D8);
  }
  return result;
}

unint64_t sub_1001938EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002974E0;
  if (!qword_1002974E0)
  {
    v1 = sub_1000070BC(&qword_1002974B8);
    sub_100193950();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002974E0);
  }
  return result;
}

unint64_t sub_100193950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002974E8;
  if (!qword_1002974E8)
  {
    v1 = sub_1000070BC(&qword_1002974B0);
    sub_100012334(&qword_1002974F0, &qword_1002974A8, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002974E8);
  }
  return result;
}

uint64_t sub_1001939CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100297518);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100193A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _BYTE v25[16];

  v4 = sub_100006DF4(&qword_10028B270);
  __chkstk_darwin(v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LocalizedStringKey.init(stringLiteral:)(a1, a2);
  v11 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7);
  v18 = type metadata accessor for Font.Design(0);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  v20 = static Font.Weight.semibold.getter(v19);
  v21 = static Font.system(_:design:weight:)(v10, v6, *(_QWORD *)&v20, 0);
  sub_10000A020((uint64_t)v6, &qword_10028B270);
  v22.n128_f64[0] = (*(double (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  v23 = Text.font(_:)(v21, v11, v13, v17, v15, v22);
  swift_release(v21);
  sub_10001B9E8(v11, v13, v17);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_100193BEC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _BYTE v21[16];

  v0 = sub_100006DF4(&qword_10028B270);
  __chkstk_darwin(v0);
  v2 = &v21[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Font.TextStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x8000000100201570);
  v7 = Text.init(_:tableName:bundle:comment:)();
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Font.TextStyle.subheadline(_:), v3);
  v14 = type metadata accessor for Font.Design(0);
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v2, 1, 1, v14);
  v16 = static Font.Weight.regular.getter(v15);
  v17 = static Font.system(_:design:weight:)(v6, v2, *(_QWORD *)&v16, 0);
  sub_10000A020((uint64_t)v2, &qword_10028B270);
  v18.n128_f64[0] = (*(double (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  v19 = Text.font(_:)(v17, v7, v9, v13, v11, v18);
  swift_release(v17);
  sub_10001B9E8(v7, v9, v13);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_100193DD0()
{
  unint64_t result;

  result = qword_100297538;
  if (!qword_100297538)
  {
    result = swift_getWitnessTable(&unk_1001F5C50, &type metadata for ToggleSpeechTranslationIntent);
    atomic_store(result, (unint64_t *)&qword_100297538);
  }
  return result;
}

unint64_t sub_100193E18()
{
  unint64_t result;

  result = qword_100297540;
  if (!qword_100297540)
  {
    result = swift_getWitnessTable(&unk_1001F5C78, &type metadata for ToggleSpeechTranslationIntent);
    atomic_store(result, (unint64_t *)&qword_100297540);
  }
  return result;
}

uint64_t sub_100193E5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100217C5C, 1);
}

uint64_t sub_100193E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100194EFC(a1, a2, a3, (uint64_t (*)(void))sub_100193E78);
}

unint64_t sub_100193E78()
{
  unint64_t result;

  result = qword_100297548;
  if (!qword_100297548)
  {
    result = swift_getWitnessTable(&unk_1001F5B20, &type metadata for ToggleSpeechTranslationIntent);
    atomic_store(result, (unint64_t *)&qword_100297548);
  }
  return result;
}

void sub_100193EBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  void *v31;
  id v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  void *v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10000A05C(0, &qword_1002976B0, UISceneSession_ptr);
    v5 = sub_100196440();
    v6 = Set.Iterator.init(_cocoa:)(v36, v3, v4, v5);
    v1 = v36[0];
    v34 = v36[1];
    v7 = v36[2];
    v8 = v36[3];
    v9 = v36[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v33 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v13 = v8;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    v16 = __CocoaSet.Iterator.next()(v6);
    v17 = v16;
    if (!v16)
      goto LABEL_41;
    v35 = v16;
    v18 = sub_10000A05C(0, &qword_1002976B0, UISceneSession_ptr);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
    v19 = v37;
    swift_unknownObjectRelease(v17);
    if (!v19)
      goto LABEL_41;
LABEL_35:
    v23 = objc_msgSend(v19, "role");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIWindowSceneSessionRoleApplication);
    if (v24 == v28 && v26 == v27)
    {

      swift_bridgeObjectRelease_n(v26, 2);
    }
    else
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v28, v27, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
        goto LABEL_11;
    }
    v30 = objc_msgSend(v19, "scene");
    if (v30)
    {
      v31 = v30;
      v32 = objc_msgSend(v30, "activationState");

      if (!v32)
        goto LABEL_41;
    }
    else
    {
LABEL_11:

    }
  }
  if (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v8 << 6);
LABEL_34:
    v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v19)
      goto LABEL_41;
    goto LABEL_35;
  }
  v20 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v20 >= v33)
      goto LABEL_41;
    v21 = *(_QWORD *)(v34 + 8 * v20);
    ++v8;
    if (!v21)
    {
      v8 = v13 + 2;
      if (v13 + 2 >= v33)
        goto LABEL_41;
      v21 = *(_QWORD *)(v34 + 8 * v8);
      if (!v21)
      {
        v8 = v13 + 3;
        if (v13 + 3 >= v33)
          goto LABEL_41;
        v21 = *(_QWORD *)(v34 + 8 * v8);
        if (!v21)
        {
          v8 = v13 + 4;
          if (v13 + 4 >= v33)
            goto LABEL_41;
          v21 = *(_QWORD *)(v34 + 8 * v8);
          if (!v21)
          {
            v8 = v13 + 5;
            if (v13 + 5 >= v33)
              goto LABEL_41;
            v21 = *(_QWORD *)(v34 + 8 * v8);
            if (!v21)
            {
              v22 = v13 + 6;
              while (v33 != v22)
              {
                v21 = *(_QWORD *)(v34 + 8 * v22++);
                if (v21)
                {
                  v8 = v22 - 1;
                  goto LABEL_33;
                }
              }
LABEL_41:
              sub_10000F7C4(v1);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_100194280(uint64_t a1)
{
  return sub_100195254(a1, qword_1002AA608, 0xD000000000000023, 0x80000001002016C0);
}

uint64_t sub_1001942A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100006DF4((uint64_t *)&unk_1002976E0);
  sub_100011A00(v0, qword_1002AA620);
  v1 = sub_10000F66C(v0, (uint64_t)qword_1002AA620);
  IntentDescription.init(stringLiteral:)(0xD000000000000029, 0x8000000100201690);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10019432C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_100006DF4(&qword_10028F190);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100194388, 0, 0);
}

id sub_100194388()
{
  uint64_t v0;
  id result;
  void *v2;
  char deviceSupportsDynamicIsland;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  __n128 v13;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v2 = result;
    deviceSupportsDynamicIsland = MobileGestalt_get_deviceSupportsDynamicIsland();

    if ((deviceSupportsDynamicIsland & 1) != 0)
    {
      v4 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v0 + 40) = v4;
      *(_QWORD *)(v0 + 48) = static MainActor.shared.getter(v4);
      v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
      return (id)swift_task_switch(sub_100194504, v5, v6);
    }
    else
    {
      if (qword_10028A440 != -1)
        swift_once(&qword_10028A440, sub_100121004);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA3C8);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.info.getter(v9);
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "No DynamicIsland support. Launching the Translate App.", v11, 2u);
        swift_slowDealloc(v11, -1, -1);
      }

      sub_100195504();
      v12 = *(_QWORD *)(v0 + 32);
      static IntentResult.result<>()(v13);
      swift_task_dealloc(v12);
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100194504()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;

  swift_release(*(_QWORD *)(v0 + 48));
  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v2 = objc_msgSend(v1, "openSessions");

  v3 = sub_10000A05C(0, &qword_1002976B0, UISceneSession_ptr);
  v4 = sub_100196440();
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4);

  sub_100193EBC(v5);
  *(_BYTE *)(v0 + 56) = v6 & 1;
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1001945DC, 0, 0);
}

uint64_t sub_1001945DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;

  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10000F66C(v1, (uint64_t)qword_1002AA3C8);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.info.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "App is foreground, not launching Activity. Posting ActionButtonInvokedNotification", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 32);

    v7 = type metadata accessor for TaskPriority(0);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    v9 = static MainActor.shared.getter(v8);
    v10 = (_QWORD *)swift_allocObject(&unk_10026FEA0, 32, 7);
    v10[2] = v9;
    v10[3] = &protocol witness table for MainActor;
    v11 = &unk_1002976D8;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 24);
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
    swift_retain(v12);
    v15 = static MainActor.shared.getter(v14);
    v10 = (_QWORD *)swift_allocObject(&unk_10026FE78, 40, 7);
    v10[2] = v15;
    v10[3] = &protocol witness table for MainActor;
    v10[4] = v12;
    v11 = &unk_1002976C8;
  }
  v16 = sub_100049DC0(v6, (uint64_t)v11, (uint64_t)v10);
  v17 = swift_release(v16);
  v18 = *(_QWORD *)(v0 + 32);
  static IntentResult.result<>()(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001947B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10019481C, v6, v7);
}

uint64_t sub_10019481C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  unsigned __int8 v9;
  __n128 v10;

  swift_release(*(_QWORD *)(v0 + 24));
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000F66C(v1, (uint64_t)qword_1002AA3C8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Launching Activity from intent.perform()", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 32));
  if ((*(_BYTE *)(v0 + 32) & 1) != 0
    || (v6 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr),
        v7 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v6),
        v8 = String._bridgeToObjectiveC()(),
        v9 = objc_msgSend(v7, "BOOLForKey:", v8),
        v8,
        v7,
        (v9 & 1) == 0))
  {
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 32));
    if (*(_BYTE *)(v0 + 32) == 1)
      sub_100195B08(1);
    if (qword_10028A4D8 != -1)
      swift_once(&qword_10028A4D8, sub_100173130);
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 32));
    sub_1001731B0(*(_BYTE *)(v0 + 32));
  }
  else
  {
    sub_100195B08(0);
    if (qword_10028A4D8 != -1)
      swift_once(&qword_10028A4D8, sub_100173130);
    v10.n128_f64[0] = sub_100173974(0);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v10);
}

uint64_t sub_100194A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100194A9C, v2, v3);
}

uint64_t sub_100194A9C()
{
  uint64_t v0;
  id v1;

  swift_release(*(_QWORD *)(v0 + 16));
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10028A510 != -1)
    swift_once(&qword_10028A510, sub_100194F3C);
  objc_msgSend(v1, "postNotificationName:object:", qword_1002AA638, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100194B38@<X0>(uint64_t a1@<X8>)
{
  return sub_1001952CC(&qword_10028A500, (uint64_t)qword_1002AA608, (uint64_t)sub_100194280, a1);
}

uint64_t sub_100194B60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10028A508 != -1)
    swift_once(&qword_10028A508, sub_1001942A4);
  v2 = sub_100006DF4((uint64_t *)&unk_1002976E0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA620);
  return sub_1001965D0(v3, a1);
}

uint64_t sub_100194BC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1002976AC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D380;
  return sub_10019432C(a1, v4);
}

uint64_t sub_100194C18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100195D18();
  *a1 = result;
  return result;
}

unint64_t sub_100194C40()
{
  unint64_t result;

  result = qword_100297558;
  if (!qword_100297558)
  {
    result = swift_getWitnessTable(&unk_1001F5C94, &type metadata for ToggleSpeechTranslationIntent);
    atomic_store(result, (unint64_t *)&qword_100297558);
  }
  return result;
}

unint64_t sub_100194C8C()
{
  unint64_t result;

  result = qword_100297560;
  if (!qword_100297560)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Bool, &type metadata for Bool);
    atomic_store(result, (unint64_t *)&qword_100297560);
  }
  return result;
}

_QWORD *sub_100194CD0@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100194D08(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void (*sub_100194D3C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100194D84;
}

void sub_100194D84(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_100194DB4()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_100194DD4()
{
  unint64_t result;

  result = qword_100297568;
  if (!qword_100297568)
  {
    result = swift_getWitnessTable(&unk_1001F5CEC, &type metadata for ToggleSpeechTranslationIntentConfiguration);
    atomic_store(result, (unint64_t *)&qword_100297568);
  }
  return result;
}

unint64_t sub_100194E1C()
{
  unint64_t result;

  result = qword_100297570;
  if (!qword_100297570)
  {
    result = swift_getWitnessTable(&unk_1001F5D7C, &type metadata for ToggleSpeechTranslationIntentConfiguration);
    atomic_store(result, (unint64_t *)&qword_100297570);
  }
  return result;
}

unint64_t sub_100194E64()
{
  unint64_t result;

  result = qword_100297578;
  if (!qword_100297578)
  {
    result = swift_getWitnessTable(&unk_1001F5DA4, &type metadata for ToggleSpeechTranslationIntentConfiguration);
    atomic_store(result, (unint64_t *)&qword_100297578);
  }
  return result;
}

unint64_t sub_100194EAC()
{
  unint64_t result;

  result = qword_100297580;
  if (!qword_100297580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_100297580);
  }
  return result;
}

uint64_t sub_100194EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100194EFC(a1, a2, a3, (uint64_t (*)(void))sub_100194DD4);
}

uint64_t sub_100194EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a4();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

NSString sub_100194F3C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002AA638 = (uint64_t)result;
  return result;
}

void sub_100194F70()
{
  uint64_t v0;
  void *v1;
  Class isa;
  NSString v3;
  uint64_t v4;
  void *v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *oslog;

  v0 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v1 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v0);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKey:", isa, v3);

  v5 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v4);
  v6 = String._bridgeToObjectiveC()();
  LOBYTE(isa) = objc_msgSend(v5, "BOOLForKey:", v6);

  if ((isa & 1) != 0)
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000F66C(v7, (uint64_t)qword_1002AA3C8);
    oslog = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.info.getter(oslog);
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      v11 = "In listening state. Skipping reloadControls";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, v11, v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
  }
  else
  {
    type metadata accessor for ControlCenter(0);
    v12 = static ControlCenter.shared.getter();
    dispatch thunk of ControlCenter.reloadControls(ofKind:)(0xD000000000000031, 0x80000001001FFD70);
    swift_release(v12);
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10000F66C(v13, (uint64_t)qword_1002AA3C8);
    oslog = Logger.logObject.getter(v14);
    v9 = static os_log_type_t.info.getter(oslog);
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      v11 = "Requesting reloadControls update after active state assumption expired";
      goto LABEL_10;
    }
  }

}

uint64_t sub_1001951CC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_1001951DC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1001951F4, 0, 0);
}

uint64_t sub_1001951F4()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = *(_BYTE **)(v0 + 16);
  *v1 = sub_100196288() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100195230(uint64_t a1)
{
  return sub_100195254(a1, qword_1002AA640, 0xD000000000000010, 0x8000000100201630);
}

uint64_t sub_100195254(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for LocalizedStringResource(0);
  sub_100011A00(v7, a2);
  sub_10000F66C(v7, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)(a3, a4);
}

uint64_t sub_1001952B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001952CC(&qword_10028A518, (uint64_t)qword_1002AA640, (uint64_t)sub_100195230, a1);
}

uint64_t sub_1001952CC@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = sub_10000F66C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100195344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to ControlConfigurationIntent.perform()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_1001954C0();
  *v4 = v2;
  v4[1] = sub_1001953A8;
  return ControlConfigurationIntent.perform()(a2, v5);
}

uint64_t sub_1001953A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_100195404(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100194DD4();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t type metadata accessor for ToggleControlStateProvider()
{
  return objc_opt_self(_TtC17SequoiaTranslator26ToggleControlStateProvider);
}

ValueMetadata *type metadata accessor for ToggleSpeechTranslationIntentConfiguration()
{
  return &type metadata for ToggleSpeechTranslationIntentConfiguration;
}

ValueMetadata *type metadata accessor for ToggleSpeechTranslationIntent()
{
  return &type metadata for ToggleSpeechTranslationIntent;
}

unint64_t sub_100195470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297668;
  if (!qword_100297668)
  {
    v1 = sub_1000070BC(&qword_100297670);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_100297668);
  }
  return result;
}

unint64_t sub_1001954C0()
{
  unint64_t result;

  result = qword_100297678;
  if (!qword_100297678)
  {
    result = swift_getWitnessTable(&unk_1001F5CBC, &type metadata for ToggleSpeechTranslationIntentConfiguration);
    atomic_store(result, (unint64_t *)&qword_100297678);
  }
  return result;
}

void sub_100195504()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  id v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  NSURL *v41;
  void *v42;
  void *v43;
  Class isa;
  double v45;
  unsigned int v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  _BYTE v66[56];

  v0 = sub_100006DF4(&qword_10028BB80);
  __chkstk_darwin(v0);
  v2 = (char *)&v59 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v59 - v7;
  v9 = type metadata accessor for URLComponents(0);
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006DF4(&qword_100293348);
  inited = swift_initStackObject(v12, v66);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
  *(_QWORD *)(inited + 40) = v14;
  *(_BYTE *)(inited + 48) = 1;
  v59 = sub_1001A4D14(inited);
  URLComponents.init()();
  URLComponents.scheme.setter(0x74616C736E617274, 0xE900000000000065);
  v15 = sub_100006DF4(&qword_1002981A0);
  v16 = type metadata accessor for URLQueryItem(0);
  v17 = swift_allocObject(v15, ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1001E4D60;
  v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "stringForKey:", v19);

  v62 = v2;
  if (v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

  }
  else
  {
    v23 = 0xE500000000000000;
    v21 = 0x53555F6E65;
  }
  v24 = Locale.init(identifier:)(v21, v23);
  v25 = Locale.ltIdentifier.getter(v24);
  v27 = v26;
  v28 = *(void (**)(char *, uint64_t))(v63 + 8);
  v29 = v8;
  v30 = v64;
  v28(v29, v64);
  URLQueryItem.init(name:value:)(0x6F4C656372756F73, 0xEC000000656C6163, v25, v27);
  swift_bridgeObjectRelease();
  v31 = sub_10015D9EC();
  v32 = Locale.ltIdentifier.getter(v31);
  v34 = v33;
  v28(v6, v30);
  URLQueryItem.init(name:value:)(0x6F4C746567726174, 0xEC000000656C6163, v32, v34);
  v35 = swift_bridgeObjectRelease();
  URLComponents.queryItems.setter(v17, v35);
  v36 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (!v36)
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v37 = v36;
  v38 = v62;
  URLComponents.url.getter();
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
    goto LABEL_14;
  URL._bridgeToObjectiveC()(v41);
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
  sub_100130660(v59);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v45 = swift_bridgeObjectRelease().n128_u64[0];
  v65 = 0;
  v46 = objc_msgSend(v37, "openSensitiveURL:withOptions:error:", v43, isa, &v65, v45);

  v47 = v65;
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v61);
  }
  else
  {
    v48 = v47;
    v49 = _convertNSErrorToError(_:)(v47);

    swift_willThrow(v50);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v61);
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v51 = type metadata accessor for Logger(0);
    sub_10000F66C(v51, (uint64_t)qword_1002AA3C8);
    v52 = swift_errorRetain(v49);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v56 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v55 = 138412290;
      v57 = (void *)_convertErrorToNSError(_:)(v49);
      v65 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v55 + 4);
      *v56 = v57;
      swift_errorRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to open URL with LaunchServices: %@", v55, 0xCu);
      v58 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v56, 1, v58);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

      swift_errorRelease(v49);
    }
    else
    {
      swift_errorRelease(v49);
      swift_errorRelease(v49);

    }
  }
}

void sub_100195B08(char a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  Class isa;
  NSString v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  Class v12;
  NSString v13;
  _QWORD aBlock[5];
  uint64_t v15;

  if (qword_100297530)
  {
    objc_msgSend((id)qword_100297530, "invalidate");
    v2 = (void *)qword_100297530;
  }
  else
  {
    v2 = 0;
  }
  qword_100297530 = 0;

  v3 = sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v4 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v3);
  if ((a1 & 1) != 0)
  {
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", isa, v6);

    aBlock[4] = sub_100194F70;
    v15 = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100187FE4;
    aBlock[3] = &unk_10026FEB8;
    v7 = _Block_copy(aBlock);
    v8 = objc_msgSend((id)objc_opt_self(NSTimer), "timerWithTimeInterval:repeats:block:", 0, v7, 1.5);
    _Block_release(v7);
    swift_release(v15);
    v9 = (void *)qword_100297530;
    qword_100297530 = (uint64_t)v8;

    v10 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    if (qword_100297530)
    {
      v11 = v10;
      objc_msgSend(v10, "addTimer:forMode:", qword_100297530, NSDefaultRunLoopMode);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v12 = Bool._bridgeToObjectiveC()().super.super.isa;
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", v12, v13);

  }
}

uint64_t sub_100195D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[15];
  char v21;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_100006DF4(&qword_100297688);
  __chkstk_darwin(v4);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100006DF4(&qword_100297690);
  __chkstk_darwin(v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100006DF4(&qword_100297698);
  __chkstk_darwin(v10);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006DF4(&qword_1002976A0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x8000000100201650);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v21 = 2;
  v17 = type metadata accessor for Bool.IntentDisplayName(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
  v18 = type metadata accessor for IntentDialog(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  return IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v16, v12, &v21, v9, v6, v3);
}

void *sub_100195F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  NSString v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028BB80);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)qword_100297528;
  if (qword_100297528)
    goto LABEL_2;
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "containerURLForSecurityApplicationGroupIdentifier:", v10);

  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
    goto LABEL_8;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v11);

  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v6, v3, v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
  {
LABEL_8:
    sub_100196400((uint64_t)v6);
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10000F66C(v16, (uint64_t)qword_1002AA3C8);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_13;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "Failed to obtain application group container directory to load translation group defaults";
    goto LABEL_12;
  }
  sub_100196400((uint64_t)v6);
  v12 = objc_allocWithZone((Class)NSUserDefaults);
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "initWithSuiteName:", v13);

  if (!v14)
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10000F66C(v23, (uint64_t)qword_1002AA3C8);
    v18 = Logger.logObject.getter(v24);
    v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_13;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = "Failed to load translation group defaults";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc(v20, -1, -1);
LABEL_13:

    return 0;
  }
  v15 = (void *)qword_100297528;
  qword_100297528 = (uint64_t)v14;

  v7 = (void *)qword_100297528;
LABEL_2:
  v8 = v7;
  return v7;
}

uint64_t sub_100196288()
{
  void *v0;
  void *v1;
  NSString v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v0 = sub_100195F44();
  if (v0
    && (v1 = v0,
        v2 = String._bridgeToObjectiveC()(),
        v3 = objc_msgSend(v1, "BOOLForKey:", v2),
        v1,
        v2,
        v3))
  {
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA3C8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "AssumeIsLiveActivityListening is on. Skip checking IsLiveActivityListening", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = 1;
  }
  else
  {
    v10 = sub_100195F44();
    if (!v10)
      return 0;
    v11 = v10;
    v6 = String._bridgeToObjectiveC()();
    v9 = (uint64_t)objc_msgSend(v11, "BOOLForKey:", v6);

  }
  return v9;
}

uint64_t sub_100196400(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_10028BB80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100196440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002976B8;
  if (!qword_1002976B8)
  {
    v1 = sub_10000A05C(255, &qword_1002976B0, UISceneSession_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, &qword_1002976B8);
  }
  return result;
}

uint64_t sub_100196498()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001964C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002976C4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003EFA0;
  return sub_1001947B0(a1, v4, v5, v6);
}

uint64_t sub_100196530()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100196554()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002976D4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D380;
  return sub_100194A34();
}

uint64_t sub_1001965B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001965C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001965D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_1002976E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100196618(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = "\b";
  v2[1] = &unk_1001F5EE0;
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[3] = "\b";
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + 104);
}

id sub_100196670()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1002976F0;
  v2 = *(void **)(v0 + qword_1002976F0);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1002976F0);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ReadableWidthContainer()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

double sub_1001966F0()
{
  id v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  CGRect v10;

  v0 = sub_100196670();
  objc_msgSend(v0, "frame");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;

  v10.origin.x = v2;
  v10.origin.y = v4;
  v10.size.width = v6;
  v10.size.height = v8;
  return CGRectGetMaxY(v10);
}

void sub_100196750(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1001975F0();
}

void sub_100196774()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  void *v5;
  objc_super v6;

  v1 = v0;
  v2 = *(_QWORD *)((swift_isaMask & *(_QWORD *)v0) + 0x50);
  v3 = *(_QWORD *)((swift_isaMask & *(_QWORD *)v0) + 0x60);
  v4 = (objc_class *)type metadata accessor for TopAccessoryController(0, v2, *(_QWORD *)((swift_isaMask & *(_QWORD *)v0) + 0x58), v3);
  v6.receiver = v0;
  v6.super_class = v4;
  objc_msgSendSuper2(&v6, "viewDidLoad");
  objc_msgSend(v0, "addChildViewController:", *(_QWORD *)&v0[qword_1002976F8]);
  objc_msgSend(v1, "addChildViewController:", *(_QWORD *)&v1[qword_100297700]);
  sub_100196C10();
  sub_100196EC4();
  objc_msgSend(*(id *)&v1[qword_1002976F8], "didMoveToParentViewController:", v1);
  objc_msgSend(*(id *)&v1[qword_100297700], "didMoveToParentViewController:", v1);
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  objc_msgSend(v5, "_addScrollViewScrollObserver:", v1);

}

void sub_10019688C(void *a1)
{
  id v1;

  v1 = a1;
  sub_100196774();

}

id sub_1001968C0(char a1)
{
  _QWORD *v1;
  objc_class *v3;
  objc_super v5;

  v3 = (objc_class *)type metadata accessor for TopAccessoryController(0, *(_QWORD *)((swift_isaMask & *v1) + 0x50), *(_QWORD *)((swift_isaMask & *v1) + 0x58), *(_QWORD *)((swift_isaMask & *v1) + 0x60));
  v5.receiver = v1;
  v5.super_class = v3;
  objc_msgSendSuper2(&v5, "viewDidAppear:", a1 & 1);
  return sub_100196B24();
}

void sub_100196924(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_1001968C0(a3);

}

id sub_100196964()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for TopAccessoryController(0, *(_QWORD *)((swift_isaMask & *v0) + 0x50), *(_QWORD *)((swift_isaMask & *v0) + 0x58), *(_QWORD *)((swift_isaMask & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  objc_msgSendSuper2(&v3, "viewDidLayoutSubviews");
  return sub_100196B24();
}

void sub_1001969B8(void *a1)
{
  id v1;

  v1 = a1;
  sub_100196964();

}

void sub_1001969EC(void *a1, uint64_t a2)
{
  _QWORD *v2;
  objc_class *v5;
  _BYTE *v6;
  BOOL v7;
  void *v8;
  id v9;
  objc_super v10;

  v5 = (objc_class *)type metadata accessor for TopAccessoryController(0, *(_QWORD *)((swift_isaMask & *v2) + 0x50), *(_QWORD *)((swift_isaMask & *v2) + 0x58), *(_QWORD *)((swift_isaMask & *v2) + 0x60));
  v10.receiver = v2;
  v10.super_class = v5;
  objc_msgSendSuper2(&v10, "willTransitionToTraitCollection:withTransitionCoordinator:", a1, a2);
  v6 = sub_100196670();
  v7 = objc_msgSend(a1, "horizontalSizeClass") != (id)1;
  v6[OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_readableWidthEnabled] = v7;
  v8 = *(void **)&v6[OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_wrappedView];
  if (v8)
  {
    v9 = v8;
    sub_1001448D4(v9);

    v6 = v9;
  }

}

void sub_100196AB8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;

  v6 = a3;
  swift_unknownObjectRetain(a4);
  v7 = a1;
  sub_1001969EC(v6, a4);

  swift_unknownObjectRelease(a4);
}

id sub_100196B24()
{
  char *v0;
  id result;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double MaxY;
  void *v12;
  double v13;
  double v14;
  CGRect v15;

  result = objc_msgSend(*(id *)&v0[qword_100297700], "view");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "frame");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;

    v15.origin.x = v4;
    v15.origin.y = v6;
    v15.size.width = v8;
    v15.size.height = v10;
    MaxY = CGRectGetMaxY(v15);
    result = objc_msgSend(v0, "view");
    if (result)
    {
      v12 = result;
      objc_msgSend(result, "safeAreaInsets");
      v14 = v13;

      return objc_msgSend(*(id *)&v0[qword_1002976F8], "setAdditionalSafeAreaInsets:", MaxY - v14, 0.0, 0.0, 0.0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100196C10()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  _BYTE *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;

  v1 = v0;
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = v2;
  v4 = objc_msgSend(*(id *)&v1[qword_1002976F8], "view");
  if (!v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v5 = v4;
  objc_msgSend(v3, "addSubview:", v4);

  v6 = objc_msgSend(v1, "view");
  if (!v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = v6;
  v8 = sub_100196670();
  objc_msgSend(v7, "addSubview:", v8);

  v9 = (char *)sub_100196670();
  v10 = objc_msgSend(*(id *)&v1[qword_100297700], "view");
  v11 = OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_wrappedView;
  objc_msgSend(*(id *)&v9[OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_wrappedView], "removeFromSuperview");
  if (v10)
  {
    v12 = v10;
    objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v9, "addSubview:", v12);
    sub_1001448D4(v12);

  }
  v13 = *(void **)&v9[v11];
  *(_QWORD *)&v9[v11] = v10;

  v14 = sub_100196670();
  v15 = objc_msgSend(v1, "traitCollection");
  v16 = objc_msgSend(v15, "horizontalSizeClass");

  v14[OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_readableWidthEnabled] = v16 != (id)1;
  v17 = *(void **)&v14[OBJC_IVAR____TtC17SequoiaTranslator22ReadableWidthContainer_wrappedView];
  if (v17)
  {
    v18 = v17;
    sub_1001448D4(v18);

    v14 = v18;
  }

  v19 = objc_msgSend(*(id *)&v1[qword_100297700], "view");
  if (v19)
  {
    v20 = v19;
    v21 = (void *)objc_opt_self(UIColor);
    v22 = objc_msgSend(v21, "clearColor");
    objc_msgSend(v20, "setBackgroundColor:", v22);

    v23 = sub_100196670();
    v24 = objc_msgSend(v21, "systemGroupedBackgroundColor");
    objc_msgSend(v23, "setBackgroundColor:", v24);

    return;
  }
LABEL_13:
  __break(1u);
}

void sub_100196EB0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_100297708);
  *(_QWORD *)(v1 + qword_100297708) = a1;

}

void sub_100196EC4()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  Class isa;
  void *v59;

  v1 = v0;
  v2 = sub_100196670();
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v3 = objc_msgSend(*(id *)&v1[qword_1002976F8], "view");
  if (!v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = v3;
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v5 = objc_msgSend(*(id *)&v1[qword_100297700], "view");
  if (!v5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = v5;
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v7 = sub_100196670();
  v8 = objc_msgSend(v7, "topAnchor");

  v9 = objc_msgSend(v1, "view");
  if (!v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "topAnchor");

  v12 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v11, 0.0);
  v13 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v14 = swift_allocObject(v13, 88, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001F5E80;
  v15 = objc_msgSend(v1, "view");
  if (!v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "topAnchor");

  v18 = objc_msgSend(*(id *)&v1[qword_1002976F8], "view");
  if (!v18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "topAnchor");

  v21 = objc_msgSend(v17, "constraintEqualToAnchor:", v20);
  *(_QWORD *)(v14 + 32) = v21;
  v22 = objc_msgSend(v1, "view");
  if (!v22)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "leadingAnchor");

  v25 = objc_msgSend(*(id *)&v1[qword_1002976F8], "view");
  if (!v25)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "leadingAnchor");

  v28 = objc_msgSend(v24, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v14 + 40) = v28;
  v29 = objc_msgSend(v1, "view");
  if (!v29)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "trailingAnchor");

  v32 = objc_msgSend(*(id *)&v1[qword_1002976F8], "view");
  if (!v32)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, "trailingAnchor");

  v35 = objc_msgSend(v31, "constraintEqualToAnchor:", v34);
  *(_QWORD *)(v14 + 48) = v35;
  v36 = objc_msgSend(v1, "view");
  if (!v36)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, "bottomAnchor");

  v39 = objc_msgSend(*(id *)&v1[qword_1002976F8], "view");
  if (!v39)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v40 = v39;
  v41 = objc_msgSend(v39, "bottomAnchor");

  v42 = objc_msgSend(v38, "constraintEqualToAnchor:", v41);
  *(_QWORD *)(v14 + 56) = v42;
  *(_QWORD *)(v14 + 64) = v12;
  v43 = v12;
  v44 = objc_msgSend(v1, "view");
  if (!v44)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v45 = v44;
  v46 = objc_msgSend(v44, "leadingAnchor");

  v47 = sub_100196670();
  v48 = objc_msgSend(v47, "leadingAnchor");

  v49 = objc_msgSend(v46, "constraintEqualToAnchor:", v48);
  *(_QWORD *)(v14 + 72) = v49;
  v50 = objc_msgSend(v1, "view");
  if (v50)
  {
    v51 = v50;
    v52 = (void *)objc_opt_self(NSLayoutConstraint);
    v53 = objc_msgSend(v51, "trailingAnchor");

    v54 = sub_100196670();
    v55 = objc_msgSend(v54, "trailingAnchor");

    v56 = objc_msgSend(v53, "constraintEqualToAnchor:", v55);
    *(_QWORD *)(v14 + 80) = v56;
    specialized Array._endMutation()(v57);
    sub_100025254();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v52, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v59 = *(void **)&v1[qword_100297708];
    *(_QWORD *)&v1[qword_100297708] = v43;

    return;
  }
LABEL_27:
  __break(1u);
}

void sub_100197458(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  sub_100197664();
}

id sub_1001974A4()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for TopAccessoryController(0, *(_QWORD *)((swift_isaMask & *v0) + 0x50), *(_QWORD *)((swift_isaMask & *v0) + 0x58), *(_QWORD *)((swift_isaMask & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_1001974F4(uint64_t a1)
{

}

uint64_t type metadata accessor for TopAccessoryController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TopAccessoryController);
}

double sub_100197558()
{
  return sub_1001966F0();
}

uint64_t sub_100197578()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)((swift_isaMask & *v0) + 0x60) + 8))(*(_QWORD *)((swift_isaMask & *v0) + 0x50));
}

uint64_t sub_1001975D0()
{
  return sub_100197578();
}

void sub_1001975F0()
{
  char *v0;

  *(_QWORD *)&v0[qword_1002976F0] = 0;
  *(_QWORD *)&v0[qword_100297708] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/TopAccessoryController.swift", 46, 2, 34, 0);
  __break(1u);
}

void sub_100197664()
{
  _swift_stdlib_reportUnimplementedInitializer("SequoiaTranslator.TopAccessoryController", 40, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id TranslateCalloutDisabledTextView.canPerformAction(_:withSender:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  objc_super v14;
  _QWORD v15[3];
  uint64_t v16;

  if ((static Selector.== infix(_:_:)(a1, "_translate:") & 1) != 0)
    return 0;
  sub_100191FB8(a2, (uint64_t)v15);
  v6 = v16;
  if (v16)
  {
    v7 = sub_100023AF4(v15, v16);
    v8 = *(_QWORD *)(v6 - 8);
    __chkstk_darwin(v7);
    v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    sub_100009C08(v15);
  }
  else
  {
    v11 = 0;
  }
  v12 = (objc_class *)type metadata accessor for TranslateCalloutDisabledTextView();
  v14.receiver = v2;
  v14.super_class = v12;
  v5 = objc_msgSendSuper2(&v14, "canPerformAction:withSender:", a1, v11);
  swift_unknownObjectRelease(v11);
  return v5;
}

uint64_t type metadata accessor for TranslateCalloutDisabledTextView()
{
  return objc_opt_self(_TtC17SequoiaTranslator32TranslateCalloutDisabledTextView);
}

id TranslateCalloutDisabledTextView.init(frame:textContainer:)(void *a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  id v11;
  objc_super v13;

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for TranslateCalloutDisabledTextView();
  v11 = objc_msgSendSuper2(&v13, "initWithFrame:textContainer:", a1, a2, a3, a4, a5);

  return v11;
}

id TranslateCalloutDisabledTextView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TranslateCalloutDisabledTextView();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id TranslateCalloutDisabledTextView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranslateCalloutDisabledTextView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

double destroy for TranslateCardActionButtons(uint64_t a1)
{
  double result;

  sub_100009C08((_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 64));
  if (*(_QWORD *)(a1 + 80))
    swift_release(*(_QWORD *)(a1 + 88));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 96)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for TranslateCardActionButtons(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a1 + 16;
  v6 = a2 + 16;
  v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v4;
  v9(v5, v6, v8);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  swift_retain(v12);
  swift_retain(v13);
  if (v11)
  {
    v14 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v14;
    swift_retain(v14);
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  swift_retain(v15);
  return a1;
}

uint64_t assignWithCopy for TranslateCardActionButtons(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  sub_100197C1C((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16));
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v12 = *(_QWORD *)(a2 + 80);
  if (!v11)
  {
    if (v12)
    {
      v15 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v12;
      *(_QWORD *)(a1 + 88) = v15;
      swift_retain(v15);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_8;
  }
  if (!v12)
  {
    swift_release(*(_QWORD *)(a1 + 88));
    goto LABEL_7;
  }
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  swift_retain(v13);
  swift_release(v14);
LABEL_8:
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  swift_retain(v17);
  swift_release(v16);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

_QWORD *sub_100197C1C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for TranslateCardActionButtons(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for TranslateCardActionButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  sub_100009C08((_QWORD *)(a1 + 16));
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_release(v7);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  if (!v11)
  {
    if (v10)
    {
      v14 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = v14;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_8;
  }
  if (!v10)
  {
    swift_release(*(_QWORD *)(a1 + 88));
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v12;
  swift_release(v13);
LABEL_8:
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v15);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranslateCardActionButtons(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TranslateCardActionButtons(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranslateCardActionButtons()
{
  return &type metadata for TranslateCardActionButtons;
}

uint64_t sub_100197F3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100217DE8, 1);
}

uint64_t sub_100197F4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  __n128 v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  uint64_t result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v2 = v1;
  sub_100198844(v1, (uint64_t)&v27);
  v4 = (_OWORD *)swift_allocObject(&unk_1002701C8, 128, 7);
  v5 = v32;
  v4[5] = v31;
  v4[6] = v5;
  v4[7] = v33;
  v6 = v28;
  v4[1] = v27;
  v4[2] = v6;
  v7 = v30;
  v4[3] = v29;
  v4[4] = v7;
  sub_100198844(v1, (uint64_t)&v27);
  v8 = (_OWORD *)swift_allocObject(&unk_1002701F0, 128, 7);
  v9 = v32;
  v8[5] = v31;
  v8[6] = v9;
  v8[7] = v33;
  v10 = v28;
  v8[1] = v27;
  v8[2] = v10;
  v11 = v30;
  v8[3] = v29;
  v8[4] = v11;
  sub_100198844(v1, (uint64_t)&v27);
  v12 = (_OWORD *)swift_allocObject(&unk_100270218, 128, 7);
  v13 = v32;
  v12[5] = v31;
  v12[6] = v13;
  v12[7] = v33;
  v14 = v28;
  v12[1] = v27;
  v12[2] = v14;
  v15 = v30;
  v12[3] = v29;
  v12[4] = v15;
  sub_100198844(v1, (uint64_t)&v27);
  v16 = (_OWORD *)swift_allocObject(&unk_100270240, 128, 7);
  v17 = v32;
  v16[5] = v31;
  v16[6] = v17;
  v16[7] = v33;
  v18 = v28;
  v16[1] = v27;
  v16[2] = v18;
  v19 = v30;
  v16[3] = v29;
  v16[4] = v19;
  v20 = *(id *)(v1 + 8);
  v22 = dispatch thunk of PersistedTranslation.isFavorite.getter(v21);

  v23 = sub_100006DF4(&qword_100296C60);
  Binding.projectedValue.getter(&v27, v23);
  v24 = v27;
  v25 = v28;
  LOBYTE(v2) = *(_BYTE *)(v2 + 73);
  result = swift_getKeyPath(&unk_1001F5FF0);
  *(_QWORD *)a1 = sub_10019887C;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = sub_100198888;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = sub_100198894;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = sub_1001988A0;
  *(_QWORD *)(a1 + 56) = v16;
  *(_BYTE *)(a1 + 64) = v22 & 1;
  *(_OWORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 88) = v25;
  *(_BYTE *)(a1 + 89) = v2;
  *(_QWORD *)(a1 + 96) = result;
  *(_BYTE *)(a1 + 104) = 0;
  return result;
}

_QWORD *sub_100198148(uint64_t a1)
{
  uint64_t v2;
  char v3;
  _QWORD *result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 72);
  v16 = *(void **)(a1 + 56);
  v17 = v2;
  v18 = v3;
  sub_100006DF4(&qword_100296C60);
  result = Binding.wrappedValue.getter(&v19);
  if ((v19 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    if (v5)
    {
      v6 = *(void **)(a1 + 8);
      v7 = sub_100007D5C(&qword_10028B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&unk_1001EC610);
      v8 = (void *)objc_opt_self(UIApplication);
      swift_retain(v5);
      v9 = v6;
      v10 = objc_msgSend(v8, "sharedApplication");
      objc_msgSend(v10, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);

      KeyPath = swift_getKeyPath(&unk_1001F6020);
      v12 = swift_getKeyPath(&unk_1001F6048);
      v16 = v6;
      v17 = v7;
      return (_QWORD *)static Published.subscript.setter(&v16, v5, KeyPath, v12);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 104);
      v14 = type metadata accessor for SceneContext(0);
      v15 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
      result = (_QWORD *)EnvironmentObject.error()(0, v13, v14, v15);
      __break(1u);
    }
  }
  return result;
}

void sub_1001982A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void (*v5)(void);
  uint64_t v6;

  sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v6);
  if ((v6 & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 48);
    sub_100023AF4((_QWORD *)(a1 + 16), v2);
    v4 = *(id *)(a1 + 8);
    dispatch thunk of TranslationStore.toggleFavoriteBackground(_:)(v4, v2, v3);

    v5 = *(void (**)(void))(a1 + 80);
    if (v5)
      v5();
  }
}

double sub_100198348(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  double result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 72);
  swift_retain(v1);
  swift_retain(v2);
  v4 = sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(&v10);
  v7 = v1;
  v8 = v2;
  v9 = v3;
  v6 = (v10 & 1) == 0;
  Binding.wrappedValue.setter(&v6, v4);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

void sub_1001983EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  id v10;
  NSString v11;
  NSString v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  _QWORD v18[5];
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 72);
  *(_QWORD *)&v20 = *(_QWORD *)(v0 + 56);
  *((_QWORD *)&v20 + 1) = v2;
  LOBYTE(v21) = v3;
  sub_100006DF4(&qword_100296C60);
  Binding.wrappedValue.getter(v18);
  if ((v18[0] & 1) == 0)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA470);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Copying target translation to clipboard", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
    v10 = *(id *)(v1 + 8);
    dispatch thunk of PersistedTranslation.displayText.getter(v10);

    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setString:", v11, swift_bridgeObjectRelease().n128_f64[0]);

    v12 = String._bridgeToObjectiveC()();
    sub_100198844(v1, (uint64_t)&v20);
    v13 = (_OWORD *)swift_allocObject(&unk_100270268, 128, 7);
    v14 = v25;
    v13[5] = v24;
    v13[6] = v14;
    v13[7] = v26;
    v15 = v21;
    v13[1] = v20;
    v13[2] = v15;
    v16 = v23;
    v13[3] = v22;
    v13[4] = v16;
    v18[4] = sub_100198920;
    v19 = v13;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_100170878;
    v18[3] = &unk_100270280;
    v17 = _Block_copy(v18);
    swift_release(v19);
    AnalyticsSendEventLazy(v12, v17);
    _Block_release(v17);

  }
}

unint64_t sub_100198634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t);
  NSString v14;
  id v15;
  uint64_t v16;
  NSString v17;
  _BYTE v19[128];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v19[-v7];
  v9 = sub_100006DF4(&qword_10028DFD0);
  inited = swift_initStackObject(v9, v19);
  *(_OWORD *)(inited + 16) = xmmword_1001E6660;
  *(_QWORD *)(inited + 32) = 0x6D614E746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  sub_1000B8330();
  *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("copyTranslation", 15, 2);
  *(_QWORD *)(inited + 56) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  *(_QWORD *)(inited + 72) = NSString.init(stringLiteral:)("app/translate/completed", 23, 2);
  strcpy((char *)(inited + 80), "sourceLocale");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  v11 = *(id *)(a1 + 8);
  dispatch thunk of PersistedTranslation.sourceLocale.getter(v11);

  Locale.ltIdentifier.getter(v12);
  v13 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v13(v8, v2);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 96) = v14;
  strcpy((char *)(inited + 104), "targetLocale");
  *(_BYTE *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  v15 = *(id *)(a1 + 8);
  dispatch thunk of PersistedTranslation.targetLocale.getter(v15);

  Locale.ltIdentifier.getter(v16);
  v13(v6, v2);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 120) = v17;
  return sub_1001A4D08(inited);
}

uint64_t sub_100198844(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TranslateCardActionButtons(a2, a1);
  return a2;
}

_QWORD *sub_10019887C()
{
  uint64_t v0;

  return sub_100198148(v0 + 16);
}

void sub_100198888()
{
  uint64_t v0;

  sub_1001982A4(v0 + 16);
}

double sub_100198894()
{
  uint64_t v0;

  return sub_100198348(v0 + 16);
}

void sub_1001988A0()
{
  sub_1001983EC();
}

uint64_t sub_1001988CC()
{
  uint64_t v0;

  sub_100009C08((_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  if (*(_QWORD *)(v0 + 96))
    swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 128, 7);
}

unint64_t sub_100198920()
{
  uint64_t v0;

  return sub_100198634(v0 + 16);
}

uint64_t sub_100198928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100198938(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10019894C()
{
  unint64_t result;

  result = qword_100297818;
  if (!qword_100297818)
  {
    result = swift_getWitnessTable(&unk_1001E7414, &type metadata for CardActionButtons);
    atomic_store(result, (unint64_t *)&qword_100297818);
  }
  return result;
}

uint64_t *sub_100198990(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain(v5);
    v9 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v10 = type metadata accessor for UserInterfaceSizeClass(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        v12 = sub_100006DF4(&qword_10028CE40);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(v7, v8, v10);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      v15 = v7;
      v16 = v9;
      v17 = 1;
    }
    else
    {
      v14 = *v8;
      *v7 = *v8;
      swift_retain(v14);
      v15 = v7;
      v16 = v9;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

void sub_100198ACC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
}

_QWORD *sub_100198B7C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  swift_retain(v4);
  v8 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      v11 = sub_100006DF4(&qword_10028CE40);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      v12 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(v6, v7, v9);
      v12 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
  }
  else
  {
    v13 = *v7;
    *v6 = *v7;
    swift_retain(v13);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v8, v12);
  return a1;
}

_QWORD *sub_100198C8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    sub_10000A020((uint64_t)a1 + v8, (uint64_t *)&unk_100291470);
    v11 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_100006DF4(&qword_10028CE40);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        v15 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v9, v10, v12);
        v15 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v15);
  }
  return a1;
}

_OWORD *sub_100198DD0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
    {
      v10 = sub_100006DF4(&qword_10028CE40);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v5, v6, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100198ED8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000A020((uint64_t)a1 + v8, (uint64_t *)&unk_100291470);
    v11 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_100006DF4(&qword_10028CE40);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100199008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100199014);
}

uint64_t sub_100199014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100199094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001990A0);
}

uint64_t sub_1001990A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100006DF4(&qword_10028CE50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TranslateContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100297878;
  if (!qword_100297878)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslateContentView);
  return result;
}

void sub_100199154(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1001F6098;
  sub_100048160(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1001991C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100217E38, 1);
}

uint64_t sub_1001991D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  v1 = type metadata accessor for UserInterfaceSizeClass(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_10028CE40);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v26 - v13;
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v26 - v15);
  type metadata accessor for TranslateContentView(0);
  sub_1000D58EC(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v14, enum case for UserInterfaceSizeClass.regular(_:), v1);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v14, 0, 1, v1);
  v17 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_10000B074((uint64_t)v16, (uint64_t)v7, &qword_10028CE40);
  sub_10000B074((uint64_t)v14, v17, &qword_10028CE40);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v18((uint64_t)v7, 1, v1) != 1)
  {
    sub_10000B074((uint64_t)v7, (uint64_t)v11, &qword_10028CE40);
    if (v18(v17, 1, v1) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v4, v17, v1);
      v19 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v4, v1, v19);
      v21 = *(void (**)(char *, uint64_t))(v2 + 8);
      v21(v4, v1);
      sub_10000A020((uint64_t)v14, &qword_10028CE40);
      sub_10000A020((uint64_t)v16, &qword_10028CE40);
      v21(v11, v1);
      sub_10000A020((uint64_t)v7, &qword_10028CE40);
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v22 = (unsigned int *)&enum case for NavigationBarItem.TitleDisplayMode.automatic(_:);
      goto LABEL_10;
    }
    sub_10000A020((uint64_t)v14, &qword_10028CE40);
    sub_10000A020((uint64_t)v16, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v1);
LABEL_6:
    sub_10000A020((uint64_t)v7, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v14, &qword_10028CE40);
  sub_10000A020((uint64_t)v16, &qword_10028CE40);
  if (v18(v17, 1, v1) != 1)
    goto LABEL_6;
  sub_10000A020((uint64_t)v7, &qword_10028CE40);
LABEL_8:
  v22 = (unsigned int *)&enum case for NavigationBarItem.TitleDisplayMode.inline(_:);
LABEL_10:
  v23 = *v22;
  v24 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, v23, v24);
}

uint64_t sub_100199520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028CE40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v24 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v24 - v14);
  type metadata accessor for TranslateContentView(0);
  sub_1000D58EC(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_10000B074((uint64_t)v15, (uint64_t)v6, &qword_10028CE40);
  sub_10000B074((uint64_t)v13, v16, &qword_10028CE40);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) != 1)
  {
    sub_10000B074((uint64_t)v6, (uint64_t)v10, &qword_10028CE40);
    if (v17(v16, 1, v0) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      v18 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v18);
      v20 = *(void (**)(char *, uint64_t))(v1 + 8);
      v20(v3, v0);
      sub_10000A020((uint64_t)v13, &qword_10028CE40);
      sub_10000A020((uint64_t)v15, &qword_10028CE40);
      v20(v10, v0);
      sub_10000A020((uint64_t)v6, &qword_10028CE40);
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v21 = 0x54414C534E415254;
      v22 = 0xE900000000000045;
      return LocalizedStringKey.init(stringLiteral:)(v21, v22);
    }
    sub_10000A020((uint64_t)v13, &qword_10028CE40);
    sub_10000A020((uint64_t)v15, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_6:
    sub_10000A020((uint64_t)v6, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v13, &qword_10028CE40);
  sub_10000A020((uint64_t)v15, &qword_10028CE40);
  if (v17(v16, 1, v0) != 1)
    goto LABEL_6;
  sub_10000A020((uint64_t)v6, &qword_10028CE40);
LABEL_8:
  v21 = 0;
  v22 = 0xE000000000000000;
  return LocalizedStringKey.init(stringLiteral:)(v21, v22);
}

uint64_t sub_100199854@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  char *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  NSString v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[4];
  _QWORD v101[2];
  char v102;
  _BYTE v103[240];
  _QWORD v104[35];

  v2 = v1;
  v97 = a1;
  v3 = type metadata accessor for TranslateContentView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v93 = *(_QWORD *)(v3 - 8);
  v94 = v4;
  __chkstk_darwin(v3);
  v99 = (uint64_t)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v6 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v8 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100006DF4(&qword_1002978B0);
  v92 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100006DF4(&qword_1002978B8);
  v86 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v82 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100006DF4(&qword_1002978C0);
  __chkstk_darwin(v85);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_1002978C8);
  v90 = *(_QWORD *)(v14 - 8);
  v91 = v14;
  __chkstk_darwin(v14);
  v87 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006DF4(&qword_1002978D0);
  __chkstk_darwin(v89);
  v98 = (uint64_t)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100006DF4(&qword_1002978D8);
  __chkstk_darwin(v95);
  v96 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1[1];
  swift_retain(v18);
  v20 = static SafeAreaRegions.container.getter(v19);
  v21 = static Edge.Set.all.getter(v20);
  v22 = v21;
  v23 = static SafeAreaRegions.keyboard.getter(v21);
  v24 = static Edge.Set.all.getter(v23);
  v104[0] = v18;
  v104[1] = v20;
  LOBYTE(v104[2]) = v22;
  v104[3] = v23;
  LOBYTE(v104[4]) = v24;
  sub_1001991D8(v8);
  v25 = sub_100006DF4(&qword_1002978E0);
  v26 = sub_10019B75C(&qword_1002978E8, &qword_1002978E0, (void (*)(void))sub_10019B740);
  View.navigationBarTitleDisplayMode(_:)(v8, v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v83);
  swift_release(v104[0]);
  v27 = sub_100199520();
  v29 = v28;
  LOBYTE(v8) = v30;
  v32 = v31;
  v104[0] = v25;
  v104[1] = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v104, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v34 = v82;
  v35 = v84;
  View.navigationBarTitle(_:)(v27, v29, v8 & 1, v32, v84, OpaqueTypeConformance2);
  swift_bridgeObjectRelease();
  v36 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v92 + 8))(v10, v35, v36);
  v37 = v99;
  sub_100032D68((uint64_t)v2, v99, type metadata accessor for TranslateContentView);
  v38 = *(unsigned __int8 *)(v93 + 80);
  v39 = (v38 + 16) & ~v38;
  v92 = v38 | 7;
  v93 = v39 + v94;
  v40 = swift_allocObject(&unk_100270300, v39 + v94, v38 | 7);
  v94 = v39;
  sub_10019B7CC(v37, v40 + v39);
  v41 = v86;
  v42 = v34;
  v43 = v88;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v13, v34, v88);
  v44 = v85;
  v45 = &v13[*(int *)(v85 + 36)];
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = 0;
  *((_QWORD *)v45 + 2) = sub_10019B810;
  *((_QWORD *)v45 + 3) = v40;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  v100[2] = v2;
  v46 = sub_100006DF4(&qword_100297900);
  v47 = sub_10019B824();
  v48 = sub_100012334(&qword_100297910, &qword_100297900, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v49 = v87;
  View.toolbar<A>(content:)(sub_10019B81C, v100, v44, v46, v47, v48);
  v50 = sub_10000A020((uint64_t)v13, &qword_1002978C0);
  v51 = static HorizontalAlignment.center.getter(v50);
  sub_10019B3B0((uint64_t)v2, (uint64_t)v104);
  v52 = VerticalEdge.rawValue.getter(1);
  v53 = Edge.init(rawValue:)((2 * v52));
  LOBYTE(v46) = v53;
  v54 = static SafeAreaRegions.container.getter(v53);
  sub_1000110A4((uint64_t)v104, (uint64_t)v103, &qword_100297918);
  sub_1000110A4((uint64_t)v103, (uint64_t)v104, &qword_100297918);
  v104[30] = v54;
  v104[31] = 0;
  LOBYTE(v104[32]) = 1;
  BYTE1(v104[32]) = v46;
  v104[33] = v51;
  v56 = v90;
  v55 = v91;
  v57 = v98;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 16))(v98, v49, v91);
  memcpy((void *)(v57 + *(int *)(v89 + 36)), v104, 0x110uLL);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v49, v55);
  v58 = (uint64_t)v2;
  v62 = (id)v2[1];
  KeyPath = swift_getKeyPath(&unk_1001F6100);
  v60 = swift_getKeyPath(&unk_1001F6128);
  swift_retain(v62);
  static Published.subscript.getter(v101, v61, KeyPath);
  swift_release(v62);
  swift_release(KeyPath);
  swift_release(v60);
  LODWORD(v62) = LOWORD(v101[0]) | (BYTE2(v101[0]) << 16);
  if ((v62 & 0xFF0000) == 0x80000)
  {
    v63 = (void *)objc_opt_self(NSError);
    v64 = String._bridgeToObjectiveC()();
    v62 = objc_msgSend(v63, "lt_errorWithCode:description:userInfo:", 0, v64, 0);

    v65 = sub_1000093D0(v62);
    LOBYTE(v62) = v65;
    LODWORD(v91) = v65 >> 8;
    v66 = HIWORD(v65);
  }
  else
  {
    LODWORD(v91) = v62 >> 8;
    v66 = v62 >> 16;
  }
  v67 = *v2;
  v68 = v2[1];
  v69 = type metadata accessor for ComposeTranslationViewModel(0);
  v70 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  v71 = ObservedObject.projectedValue.getter(v67, v68, v69, v70);
  v72 = swift_getKeyPath(&unk_1001F6148);
  ObservedObject.Wrapper.subscript.getter(v101, v72, v71, v70);
  swift_release(v72);
  swift_release(v71);
  v73 = v101[0];
  v74 = v101[1];
  v75 = v102;
  v76 = v99;
  sub_100032D68(v58, v99, type metadata accessor for TranslateContentView);
  v77 = swift_allocObject(&unk_100270328, v93, v92);
  sub_10019B7CC(v76, v77 + v94);
  v78 = v98;
  v79 = v96;
  sub_10000B074(v98, v96, &qword_1002978D0);
  v80 = v79 + *(int *)(v95 + 36);
  *(_BYTE *)v80 = (_BYTE)v62;
  *(_BYTE *)(v80 + 1) = v91;
  *(_BYTE *)(v80 + 2) = v66;
  *(_QWORD *)(v80 + 8) = v73;
  *(_QWORD *)(v80 + 16) = v74;
  *(_BYTE *)(v80 + 24) = v75;
  *(_QWORD *)(v80 + 32) = sub_10019B914;
  *(_QWORD *)(v80 + 40) = v77;
  sub_10000A020(v78, &qword_1002978D0);
  return sub_1000110A4(v79, v97, &qword_1002978D8);
}

double sub_100199FA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001F6170);
  v3 = swift_getKeyPath(&unk_1001F6198);
  swift_retain(v1);
  static Published.subscript.getter(v10, v4, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  if (LOBYTE(v10[0]) == 1)
    sub_100050128(0);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager);
  v6 = swift_getKeyPath(&unk_1001F6210);
  v7 = swift_getKeyPath(&unk_1001F6238);
  static Published.subscript.getter(v10, v5, v6);
  swift_release(v6);
  swift_release(v7);
  v8 = v10[1];
  swift_bridgeObjectRelease();
  if (v8)
    sub_1001D3410();
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_10019A0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  void (*v64)(_BYTE *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t OpaqueTypeConformance2;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE v84[12];
  int v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  unint64_t v108;

  v104 = a2;
  v102 = sub_100006DF4(&qword_100297920);
  __chkstk_darwin(v102);
  v101 = &v84[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_100006DF4(&qword_100297928);
  v99 = *(_QWORD *)(v4 - 8);
  v100 = v4;
  __chkstk_darwin(v4);
  v98 = &v84[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v95 = *(_QWORD *)(v6 - 8);
  v96 = v6;
  __chkstk_darwin(v6);
  v90 = &v84[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v93 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v93);
  v94 = &v84[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100006DF4(&qword_10028CE40);
  v10 = __chkstk_darwin(v9);
  v92 = &v84[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v10);
  v97 = &v84[-v13];
  __chkstk_darwin(v12);
  v15 = &v84[-v14];
  v16 = type metadata accessor for ToolbarItemPlacement(0);
  v17 = __chkstk_darwin(v16);
  v103 = &v84[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v91 = &v84[-v19];
  v20 = sub_100006DF4(&qword_100297930);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = &v84[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  v26 = &v84[-v25];
  v27 = sub_100006DF4(&qword_100297938);
  v28 = __chkstk_darwin(v27);
  v30 = &v84[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v28);
  v105 = a1;
  v106 = &v84[-v31];
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
  KeyPath = swift_getKeyPath(&unk_1001F61B8);
  v107 = v32;
  v34 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  swift_retain(v32);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v107, KeyPath, v34);
  swift_release(KeyPath);
  LODWORD(a1) = *(unsigned __int8 *)(v32 + 24);
  swift_release(v32);
  if ((_DWORD)a1 == 1)
  {
    v35 = (uint64_t)v92;
    v87 = v24;
    v88 = v26;
    v89 = v21;
    v86 = v20;
    type metadata accessor for TranslateContentView(0);
    sub_1000D58EC(v15);
    v37 = v95;
    v36 = v96;
    v38 = v97;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v95 + 104))(v97, enum case for UserInterfaceSizeClass.regular(_:), v96);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
    v39 = (uint64_t)v15;
    v40 = v94;
    v41 = (uint64_t)&v94[*(int *)(v93 + 48)];
    sub_10000B074(v39, (uint64_t)v94, &qword_10028CE40);
    sub_10000B074((uint64_t)v38, v41, &qword_10028CE40);
    v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v42((uint64_t)v40, 1, v36) == 1)
    {
      sub_10000A020((uint64_t)v97, &qword_10028CE40);
      sub_10000A020(v39, &qword_10028CE40);
      v43 = v42(v41, 1, v36);
      v44 = v100;
      v45 = v86;
      v46 = (uint64_t)v30;
      v47 = v91;
      if (v43 == 1)
      {
        v48 = sub_10000A020((uint64_t)v40, &qword_10028CE40);
LABEL_10:
        v56 = v44;
        v65 = static ToolbarItemPlacement.navigationBarTrailing.getter(v48);
LABEL_12:
        __chkstk_darwin(v65);
        *(_QWORD *)&v84[-16] = v66;
        v67 = sub_100006DF4(&qword_100297960);
        v68 = sub_1000070BC(&qword_100297968);
        v69 = sub_10019BA08();
        v107 = v68;
        v108 = v69;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
        v71 = v87;
        ToolbarItem<>.init(placement:content:)(v47, sub_10019BA00, &v84[-32], v67, OpaqueTypeConformance2);
        v73 = v88;
        v72 = v89;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v89 + 32))(v88, v71, v45);
        v74 = sub_100012334(&qword_100297948, &qword_100297930, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
        static ToolbarContentBuilder.buildBlock<A>(_:)(v73, v45, v74);
        v75 = sub_100006DF4(&qword_100297940);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v46, 0, 1, v75);
        v107 = v45;
        v108 = v74;
        v58 = v105;
        v76 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
        static ToolbarContentBuilder.buildIf<A>(_:)(v46, v75, v76);
        sub_10000A020(v46, &qword_100297938);
        v52 = (*(uint64_t (**)(_BYTE *, uint64_t))(v72 + 8))(v73, v45);
        v53 = (uint64_t)v101;
        v54 = v102;
        v57 = v98;
        v55 = v99;
        goto LABEL_13;
      }
    }
    else
    {
      v59 = v37;
      v93 = v39;
      sub_10000B074((uint64_t)v40, v35, &qword_10028CE40);
      v60 = v42(v41, 1, v36);
      v46 = (uint64_t)v30;
      v47 = v91;
      v61 = v97;
      if (v60 != 1)
      {
        v62 = v90;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v59 + 32))(v90, v41, v36);
        v63 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
        v85 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v62, v36, v63);
        v64 = *(void (**)(_BYTE *, uint64_t))(v59 + 8);
        v64(v62, v36);
        sub_10000A020((uint64_t)v61, &qword_10028CE40);
        sub_10000A020(v93, &qword_10028CE40);
        v64((_BYTE *)v35, v36);
        v48 = sub_10000A020((uint64_t)v40, &qword_10028CE40);
        v44 = v100;
        v45 = v86;
        if ((v85 & 1) != 0)
          goto LABEL_10;
LABEL_11:
        v56 = v44;
        v65 = static ToolbarItemPlacement.navigationBarLeading.getter(v48);
        goto LABEL_12;
      }
      sub_10000A020((uint64_t)v97, &qword_10028CE40);
      sub_10000A020(v93, &qword_10028CE40);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v35, v36);
      v44 = v100;
      v45 = v86;
    }
    v48 = sub_10000A020((uint64_t)v40, &qword_10028CFE8);
    goto LABEL_11;
  }
  v49 = sub_100006DF4(&qword_100297940);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v30, 1, 1, v49);
  v50 = sub_100012334(&qword_100297948, &qword_100297930, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v107 = v20;
  v108 = v50;
  v51 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  static ToolbarContentBuilder.buildIf<A>(_:)(v30, v49, v51);
  v52 = sub_10000A020((uint64_t)v30, &qword_100297938);
  v53 = (uint64_t)v101;
  v54 = v102;
  v55 = v99;
  v56 = v100;
  v57 = v98;
  v58 = v105;
LABEL_13:
  v77 = v103;
  v78 = static ToolbarItemPlacement.topBarTrailing.getter(v52);
  __chkstk_darwin(v78);
  *(_QWORD *)&v84[-16] = v58;
  v79 = sub_100006DF4(&qword_100297950);
  v80 = sub_100012334(&qword_100297958, &qword_100297950, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ToolbarItemGroup.init(placement:content:)(v77, sub_10019B9F8, &v84[-32], v79, v80);
  v81 = v53 + *(int *)(v54 + 48);
  v82 = v106;
  sub_10000B074((uint64_t)v106, v53, &qword_100297938);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v55 + 16))(v81, v57, v56);
  TupleToolbarContent.init(_:)(v53, v54);
  (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v57, v56);
  return sub_10000A020((uint64_t)v82, &qword_100297938);
}

uint64_t sub_10019A95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a1;
  v34 = a2;
  v2 = type metadata accessor for TranslateContentView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100006DF4(&qword_10028AEB8);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100006DF4(&qword_100297968);
  __chkstk_darwin(v32);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = LocalizedStringKey.init(stringLiteral:)(1162760004, 0xE400000000000000);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_100032D68(v31, (uint64_t)v5, type metadata accessor for TranslateContentView);
  v18 = *(unsigned __int8 *)(v3 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_100270378, v19 + v4, v18 | 7);
  sub_10019B7CC((uint64_t)v5, v20 + v19);
  v21 = Button<>.init(_:action:)(v11, v13, v15 & 1, v17, sub_10019BB7C, v20);
  v22 = static Color.translateAccentColor.getter(v21);
  KeyPath = swift_getKeyPath(&unk_1001F61E0);
  v24 = v33;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v8, v33);
  v25 = v32;
  v26 = (uint64_t *)&v10[*(int *)(v32 + 36)];
  *v26 = KeyPath;
  v26[1] = v22;
  v27 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v24);
  v28 = static Font.Weight.semibold.getter(v27);
  v29 = sub_10019BA08();
  View.fontWeight(_:)(*(_QWORD *)&v28, 0, v25, v29);
  return sub_10000A020((uint64_t)v10, &qword_100297968);
}

uint64_t sub_10019AB60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _QWORD *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v81[12];
  int v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;

  v90 = (_BYTE *)a1;
  v88 = a2;
  v87 = type metadata accessor for MoreOptionsMenu(0);
  v2 = __chkstk_darwin(v87);
  v89 = &v81[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v5 = &v81[-v4];
  v85 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v8 = &v81[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v84 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v84);
  v10 = &v81[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100006DF4(&qword_10028CE40);
  v12 = __chkstk_darwin(v11);
  v14 = &v81[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v17 = &v81[-v16];
  __chkstk_darwin(v15);
  v19 = &v81[-v18];
  v20 = type metadata accessor for TranslateContentView(0);
  __chkstk_darwin(v20);
  v22 = &v81[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = sub_100006DF4(&qword_100297978);
  v24 = __chkstk_darwin(v23);
  v86 = &v81[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = __chkstk_darwin(v24);
  v91 = &v81[-v27];
  v28 = _LTIsInternalInstall(v26);
  sub_100032D68((uint64_t)v90, (uint64_t)v22, type metadata accessor for TranslateContentView);
  if (!v28)
  {
    sub_100032DAC((uint64_t)v22, type metadata accessor for TranslateContentView);
    v33 = (uint64_t)v91;
    goto LABEL_6;
  }
  v83 = v8;
  v90 = v14;
  sub_1000D58EC(v19);
  v29 = v85;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v17, enum case for UserInterfaceSizeClass.regular(_:), v85);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v29);
  v30 = (uint64_t)&v10[*(int *)(v84 + 48)];
  sub_10000B074((uint64_t)v19, (uint64_t)v10, &qword_10028CE40);
  sub_10000B074((uint64_t)v17, v30, &qword_10028CE40);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v31((uint64_t)v10, 1, v29) != 1)
  {
    v35 = (uint64_t)v90;
    sub_10000B074((uint64_t)v10, (uint64_t)v90, &qword_10028CE40);
    v36 = v31(v30, 1, v29);
    v37 = (uint64_t)v10;
    v33 = (uint64_t)v91;
    if (v36 != 1)
    {
      v38 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 32);
      v39 = v83;
      v84 = v37;
      v40 = v30;
      v41 = v85;
      v38(v83, v40, v85);
      v42 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v82 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v39, v41, v42);
      v43 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v43(v39, v41);
      sub_10000A020((uint64_t)v17, &qword_10028CE40);
      sub_10000A020((uint64_t)v19, &qword_10028CE40);
      sub_100032DAC((uint64_t)v22, type metadata accessor for TranslateContentView);
      v43((_BYTE *)v35, v41);
      sub_10000A020(v84, &qword_10028CE40);
      if ((v82 & 1) != 0)
        goto LABEL_6;
LABEL_11:
      LocalizedStringKey.init(stringLiteral:)(5259604, 0xE300000000000000);
      v44 = Text.init(_:tableName:bundle:comment:)();
      v46 = v45;
      v48 = v47;
      v50 = v49 & 1;
      v51 = static Color.clear.getter(v44);
      v92 = v51;
      v52 = Text.foregroundStyle<A>(_:)(&v92, v44, v46, v50, v48, &type metadata for Color, &protocol witness table for Color);
      v54 = v53;
      v56 = v55;
      v58 = v57 & 1;
      sub_10001B9E8(v44, v46, v50);
      swift_release(v51);
      swift_bridgeObjectRelease();
      v92 = v52;
      v93 = v54;
      v94 = v58;
      v95 = v56;
      View.onTapGesture(count:perform:)(2, sub_10019B2FC, 0, &type metadata for Text, &protocol witness table for Text);
      v59 = v58;
      v33 = (uint64_t)v91;
      sub_10001B9E8(v52, v54, v59);
      swift_bridgeObjectRelease();
      v60 = sub_100006DF4(&qword_100297980);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v33, 0, 1, v60);
      goto LABEL_12;
    }
    sub_10000A020((uint64_t)v17, &qword_10028CE40);
    sub_10000A020((uint64_t)v19, &qword_10028CE40);
    sub_100032DAC((uint64_t)v22, type metadata accessor for TranslateContentView);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v35, v85);
LABEL_9:
    sub_10000A020((uint64_t)v10, &qword_10028CFE8);
    goto LABEL_11;
  }
  sub_10000A020((uint64_t)v17, &qword_10028CE40);
  sub_10000A020((uint64_t)v19, &qword_10028CE40);
  sub_100032DAC((uint64_t)v22, type metadata accessor for TranslateContentView);
  v32 = v31(v30, 1, v29);
  v33 = (uint64_t)v91;
  if (v32 != 1)
    goto LABEL_9;
  sub_10000A020((uint64_t)v10, &qword_10028CE40);
LABEL_6:
  v34 = sub_100006DF4(&qword_100297980);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
LABEL_12:
  v62 = v88;
  v61 = (uint64_t)v89;
  v64 = (uint64_t)v86;
  v63 = (int *)v87;
  v65 = type metadata accessor for SharedTranslationOptions(0);
  v66 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  v67 = EnvironmentObject.init()(v65, v66);
  v69 = v68;
  v70 = type metadata accessor for SceneContext(0);
  v71 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v72 = EnvironmentObject.init()(v70, v71);
  v74 = v73;
  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  *(_QWORD *)v5 = v67;
  *((_QWORD *)v5 + 1) = v69;
  *((_QWORD *)v5 + 2) = v72;
  *((_QWORD *)v5 + 3) = v74;
  *(_DWORD *)(v5 + 47) = 0;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  v75 = &v5[v63[12]];
  *((_OWORD *)v75 + 3) = 0u;
  *((_OWORD *)v75 + 4) = 0u;
  *((_OWORD *)v75 + 1) = 0u;
  *((_OWORD *)v75 + 2) = 0u;
  *(_OWORD *)v75 = 0u;
  *((_QWORD *)v75 + 10) = 0;
  *(_QWORD *)&v5[v63[13]] = _swiftEmptyArrayStorage;
  v76 = &v5[v63[14]];
  *v76 = 0;
  v76[1] = 0;
  v77 = &v5[v63[15]];
  v96 = 0;
  State.init(wrappedValue:)(&v92, &v96, &type metadata for Bool);
  v78 = v93;
  *v77 = v92;
  *((_QWORD *)v77 + 1) = v78;
  sub_10000B074(v33, v64, &qword_100297978);
  sub_100032D68((uint64_t)v5, v61, type metadata accessor for MoreOptionsMenu);
  sub_10000B074(v64, v62, &qword_100297978);
  v79 = sub_100006DF4(&qword_100297988);
  sub_100032D68(v61, v62 + *(int *)(v79 + 48), type metadata accessor for MoreOptionsMenu);
  sub_100032DAC((uint64_t)v5, type metadata accessor for MoreOptionsMenu);
  sub_10000A020(v33, &qword_100297978);
  sub_100032DAC(v61, type metadata accessor for MoreOptionsMenu);
  return sub_10000A020(v64, &qword_100297978);
}

void sub_10019B2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (qword_10028A4D8 != -1)
    swift_once(&qword_10028A4D8, sub_100173130);
  v0 = qword_1002AA528;
  v1 = type metadata accessor for ActivityAuthorizationInfo(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v2 = ActivityAuthorizationInfo.init()();
  v3 = ActivityAuthorizationInfo.areActivitiesEnabled.getter();
  swift_release(v2);
  if ((v3 & 1) != 0)
  {
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity))
      sub_100173974(0);
    else
      sub_1001731B0(0);
  }
}

uint64_t sub_10019B3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[8];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)();
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[31];

  v4 = type metadata accessor for TranslateContentView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(_QWORD *)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1001F6170);
  v9 = swift_getKeyPath(&unk_1001F6198);
  swift_retain(v7);
  static Published.subscript.getter(v49, v10, KeyPath);
  swift_release(v7);
  swift_release(KeyPath);
  swift_release(v9);
  if (LOBYTE(v49[0]) == 1)
  {
    v11 = swift_getKeyPath(&unk_1001F6170);
    v12 = swift_getKeyPath(&unk_1001F6198);
    swift_retain(v7);
    static Published.subscript.getter(v49, v13, v11);
    swift_release(v7);
    swift_release(v11);
    swift_release(v12);
    v14 = v49[0];
    sub_100032D68(a1, (uint64_t)&v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for TranslateContentView);
    v15 = *(unsigned __int8 *)(v5 + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = swift_allocObject(&unk_100270350, v16 + v6, v15 | 7);
    v18 = sub_10019B7CC((uint64_t)&v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v17 + v16);
    v19 = static Edge.Set.vertical.getter(v18);
    v20 = EdgeInsets.init(_all:)(20.0);
    v25[0] = 0;
    LOBYTE(v26) = v14;
    *(_WORD *)((char *)&v26 + 1) = 0;
    v27 = 0;
    v28 = 0;
    *((_QWORD *)&v26 + 1) = _swiftEmptyArrayStorage;
    v29 = 0;
    v30 = sub_10019B990;
    v31 = v17;
    v32 = 0;
    v33 = 0;
    v34 = sub_10019B63C;
    v35 = xmmword_1001F6070;
    v36 = 0xE800000000000000;
    v42 = 0;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v43 = v19;
    v44 = v20;
    v45 = v21;
    v46 = v22;
    v47 = v23;
    v48 = 0;
    nullsub_1(&v26);
  }
  else
  {
    sub_10019B964(&v26);
  }
  sub_1000110A4((uint64_t)&v26, (uint64_t)v49, &qword_100297918);
  return sub_1000110A4((uint64_t)v49, a2, &qword_100297918);
}

uint64_t sub_10019B5F8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  swift_retain(v5);
  a3(a2);
  return swift_release(v5);
}

void sub_10019B63C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000F66C(v0, (uint64_t)qword_1002AA470);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Long press for speech on Translate tab undefined. Doing nothing", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

double sub_10019B708(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  swift_retain(v1);
  sub_10004D044(0, 0);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_10019B740()
{
  return sub_10019B75C(&qword_1002978F0, &qword_1002978F8, (void (*)(void))sub_100149DD4);
}

uint64_t sub_10019B75C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000070BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10019B7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranslateContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019B810()
{
  return sub_10019B920((uint64_t (*)(uint64_t))sub_100199FA4);
}

uint64_t sub_10019B81C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10019A0A0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10019B824()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_100297908;
  if (!qword_100297908)
  {
    v1 = sub_1000070BC(&qword_1002978C0);
    v2 = sub_1000070BC(&qword_1002978B0);
    v4 = sub_1000070BC(&qword_1002978E0);
    v5 = sub_10019B75C(&qword_1002978E8, &qword_1002978E0, (void (*)(void))sub_10019B740);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297908);
  }
  return result;
}

uint64_t sub_10019B914()
{
  return sub_10019B920((uint64_t (*)(uint64_t))sub_10019B708);
}

uint64_t sub_10019B920(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslateContentView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

double sub_10019B964(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 217) = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10019B990()
{
  return sub_10019B9A0(0, (void (*)(uint64_t))sub_100050128);
}

uint64_t sub_10019B9A0(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslateContentView(0) - 8) + 80);
  return sub_10019B5F8(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_10019B9F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10019AB60(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10019BA00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10019A95C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10019BA08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297970;
  if (!qword_100297970)
  {
    v1 = sub_1000070BC(&qword_100297968);
    sub_100012334(&qword_10028AEC0, &qword_10028AEB8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297970);
  }
  return result;
}

uint64_t sub_10019BAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for TranslateContentView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10019BB7C()
{
  return sub_10019B9A0(1, (void (*)(uint64_t))sub_10004F1F8);
}

unint64_t sub_10019BBA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297990;
  if (!qword_100297990)
  {
    v1 = sub_1000070BC(&qword_1002978D8);
    sub_10019BC0C();
    sub_10008C15C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297990);
  }
  return result;
}

unint64_t sub_10019BC0C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100297998;
  if (!qword_100297998)
  {
    v1 = sub_1000070BC(&qword_1002978D0);
    v2[0] = sub_1000070BC(&qword_1002978C0);
    v2[1] = sub_1000070BC(&qword_100297900);
    v2[2] = sub_10019B824();
    v2[3] = sub_100012334(&qword_100297910, &qword_100297900, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_100012334(&qword_1002979A0, &qword_1002979A8, (uint64_t)&protocol conformance descriptor for _InsetViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297998);
  }
  return result;
}

unint64_t sub_10019BCFC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    return String.subscript.getter(result, v4 | (v3 << 16), a2, a3);
  }
  return result;
}

id sub_10019BD48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___textInput;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___textInput);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___textInput);
  }
  else
  {
    v4 = sub_10019BDA8(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10019BDA8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  NSString v15;

  v2 = type metadata accessor for TextViewWithPlaceHolder();
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  v4 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
  v5 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v4, "pointSize");
  v6 = objc_msgSend(v5, "systemFontOfSize:weight:");
  v7 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
  v8 = objc_msgSend(v7, "scaledFontForFont:maximumPointSize:", v6, 1.79769313e308);

  objc_msgSend(v3, "setFont:", v8);
  v9 = (void *)objc_opt_self(UIColor);
  v10 = v3;
  v11 = objc_msgSend(v9, "labelColor");
  objc_msgSend(v10, "setTextColor:", v11);

  v12 = v10;
  v13 = objc_msgSend(v9, "clearColor");
  objc_msgSend(v12, "setBackgroundColor:", v13);

  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v12, "setDelegate:", a1);
  objc_msgSend(v12, "setTextDropDelegate:", a1);
  objc_msgSend(v12, "setReturnKeyType:", 0);
  objc_msgSend(v12, "setForceDisableDictation:", 1);
  v14 = v12;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setAccessibilityIdentifier:", v15);

  objc_msgSend(v14, "setShowsVerticalScrollIndicator:", 0);
  objc_msgSend(v14, "setTextContainerInset:", 32.0, 32.0, 32.0, 32.0);
  *((_BYTE *)v14 + OBJC_IVAR____TtC17SequoiaTranslator23TextViewWithPlaceHolder_adjustsFontSize) = 1;
  return v14;
}

id sub_10019C070()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___editOrSpeakHint;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___editOrSpeakHint);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___editOrSpeakHint);
  }
  else
  {
    v4 = sub_10019C0CC();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10019C0CC()
{
  id v0;
  id v1;
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  NSString v7;
  Swift::String v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  objc_msgSend(v0, "setFont:", v1);

  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v2);

  objc_msgSend(v0, "setTextAlignment:", 1);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000024;
  v9._object = (void *)0x80000001002019C0;
  v4._object = (void *)0x80000001002019A0;
  v4._countAndFlagsBits = 0xD000000000000012;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v9)._object;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "setText:", v7);

  return v0;
}

uint64_t sub_10019C38C(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(*a1, "primaryLanguage");
  if (!v13)
    goto LABEL_4;
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v17 = v16;

  sub_100082758(a2 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_selectedEditingLocale, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v19 = sub_1001A6334(45, 0xE100000000000000, v15, v17);
    if ((v20 & 1) != 0)
    {
      v29 = Locale.ltLanguageCode.getter(v19);
      if (v30)
      {
        if (v15 == v29 && v30 == v17)
          v18 = 1;
        else
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v29, v30, 0);
        goto LABEL_32;
      }
      v18 = 0;
LABEL_33:
      (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v31);
      swift_bridgeObjectRelease();
      return v18 & 1;
    }
    v21 = v19;
    v49 = v3;
    swift_bridgeObjectRetain(v17);
    v48 = v21;
    v22 = String.subscript.getter(15, v21, v15, v17);
    swift_bridgeObjectRelease();
    v23 = static String._fromSubstring(_:)(v22);
    v25 = v24;
    swift_bridgeObjectRelease();
    v27 = Locale.ltLanguageCode.getter(v26);
    if (v28)
    {
      if (v27 == 26746 && v28 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 26746, 0xE200000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
      {
LABEL_18:
        if (v23 == 26746 && v25 == 0xE200000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, 26746, 0xE200000000000000, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v34 = String.index(_:offsetBy:)(v48, 1, v15, v17);
          v35 = sub_10019BCFC(v34, v15, v17);
          swift_bridgeObjectRelease();
          v36 = static String._fromSubstring(_:)(v35);
          v38 = v37;
          swift_bridgeObjectRelease();
          if (Locale.isTraditionalChinese()())
          {
            if (v36 != 1953390920 || v38 != 0xE400000000000000)
            {
              v39 = v36;
              v40 = v38;
              v41 = 1953390920;
LABEL_39:
              v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v41, 0xE400000000000000, 0);
              v46 = swift_bridgeObjectRelease();
              goto LABEL_40;
            }
          }
          else if (v36 != 1936613704 || v38 != 0xE400000000000000)
          {
            v39 = v36;
            v40 = v38;
            v41 = 1936613704;
            goto LABEL_39;
          }
          v46 = swift_bridgeObjectRelease();
          v18 = 1;
LABEL_40:
          (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v46);
          return v18 & 1;
        }
      }
    }
    swift_bridgeObjectRelease();
    v43 = Locale.ltLanguageCode.getter(v42);
    if (v44)
    {
      if (v23 == v43 && v44 == v25)
        v18 = 1;
      else
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v43, v44, 0);
LABEL_32:
      v31 = swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    v18 = 0;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  sub_1000A8C7C((uint64_t)v8);
LABEL_4:
  v18 = 0;
  return v18 & 1;
}

uint64_t sub_10019C7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  id v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;
  Swift::String v17;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100082758(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_selectedEditingLocale, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    sub_1000A8C7C((uint64_t)v7);
    v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v17._object = (void *)0xE000000000000000;
    v9._countAndFlagsBits = 0x545F4F545F504154;
    v9._object = (void *)0xEB00000000455059;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v17._countAndFlagsBits = 0;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v17)._countAndFlagsBits;

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    sub_1000A8C7C((uint64_t)v7);
    v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v13._countAndFlagsBits = 0x545F4F545F504154;
    v13._object = (void *)0xEB00000000455059;
    v14._countAndFlagsBits = 0x617A696C61636F4CLL;
    v14._object = (void *)0xEB00000000656C62;
    countAndFlagsBits = Locale.ltLocalizedAppString(_:table:bundle:)(v13, v14, (NSBundle)v12)._countAndFlagsBits;

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return countAndFlagsBits;
}

id sub_10019C9B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___closeButton;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___closeButton);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___closeButton);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 7);
    objc_msgSend(v4, "addTarget:action:forControlEvents:", v0, "closeButtonPressed", 0x2000);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v3 = v4;
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAccessibilityIdentifier:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_10019CAA0(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  objc_super v26;

  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_verticalHintAnchorConstant] = 0x406C200000000000;
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_delegate], 0);
  v9 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_textInputTopAnchor;
  v10 = objc_allocWithZone((Class)NSLayoutConstraint);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "init");
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___textInput] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___editOrSpeakHint] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_inputModeBeforeReturnKeyChange] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_editingPair] = 0;
  v12 = &v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_selectedEditingLocale];
  v13 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___closeButton] = 0;
  v14 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation;
  v15 = objc_allocWithZone((Class)type metadata accessor for TypedInputInstrumentation(0));
  *(_QWORD *)&v11[v14] = sub_1001D623C(0);
  v11[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_uiVisible] = 1;

  v26.receiver = v11;
  v26.super_class = (Class)type metadata accessor for TranslateInputCard(0);
  v16 = objc_msgSendSuper2(&v26, "initWithFrame:", a1, a2, a3, a4);
  v17 = (void *)objc_opt_self(UIColor);
  v18 = v16;
  v19 = objc_msgSend(v17, "secondarySystemGroupedBackgroundColor");
  objc_msgSend(v18, "setBackgroundColor:", v19);

  v20 = objc_msgSend(v18, "layer");
  objc_msgSend(v20, "setCornerRadius:", _UISheetCornerRadius);

  v21 = objc_msgSend(v18, "layer");
  v22 = objc_msgSend(v17, "secondarySystemBackgroundColor");
  v23 = objc_msgSend(v22, "CGColor");

  objc_msgSend(v21, "setBorderColor:", v23);
  v24 = objc_msgSend(v18, "layer");
  objc_msgSend(v24, "setBorderWidth:", 0.5);

  objc_msgSend(v18, "setClipsToBounds:", 1);
  sub_10019CED4();
  sub_10019D0FC();

  return v18;
}

double sub_10019CED4()
{
  _BYTE *v0;
  id v1;
  _BYTE *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v1 = sub_10019C070();
  objc_msgSend(v1, "setHidden:", 1);

  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible];
  v0[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible] = 0;
  v3 = sub_10019C9B8();
  objc_msgSend(v3, "setHidden:", (*v2 & 1) == 0);

  v4 = sub_10019BD48();
  objc_msgSend(v0, "addSubview:", v4);

  v5 = sub_10019C9B8();
  objc_msgSend(v0, "addSubview:", v5);

  v6 = sub_10019C070();
  objc_msgSend(v0, "addSubview:", v6);

  v7 = sub_100006DF4(&qword_10028FE40);
  v8 = swift_allocObject(v7, 48, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v8 + 32) = type metadata accessor for UITraitActiveAppearance(0);
  *(_QWORD *)(v8 + 40) = &protocol witness table for UITraitActiveAppearance;
  v9 = swift_allocObject(&unk_1002703F8, 24, 7);
  swift_unknownObjectWeakInit(v9 + 16, v0);
  v10 = sub_100006DF4(&qword_10028FE48);
  v11 = UIView.registerForTraitChanges<A>(_:handler:)(v8, sub_10019E938, v9, v10);
  swift_unknownObjectRelease(v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

void sub_10019D034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  id v7;
  id v8;
  _BYTE v9[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(Strong, "layer");

    v7 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
    v8 = objc_msgSend(v7, "CGColor");

    objc_msgSend(v6, "setBorderColor:", v8);
  }
}

void sub_10019D0FC()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  Class isa;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  Class v53;

  v1 = v0;
  v2 = sub_10019BD48();
  v3 = objc_msgSend(v2, "topAnchor");

  v4 = objc_msgSend(v1, "topAnchor");
  v5 = objc_msgSend(v3, "constraintEqualToAnchor:constant:", v4, 0.0);

  v6 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_textInputTopAnchor;
  v7 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_textInputTopAnchor];
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_textInputTopAnchor] = v5;

  v52 = (id)objc_opt_self(NSLayoutConstraint);
  v8 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v9 = swift_allocObject(v8, 80, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001E7580;
  v10 = sub_10019C9B8();
  v11 = objc_msgSend(v10, "topAnchor");

  v12 = objc_msgSend(v1, "topAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToSystemSpacingBelowAnchor:multiplier:", v12, 2.0);

  *(_QWORD *)(v9 + 32) = v13;
  v14 = objc_msgSend(v1, "trailingAnchor");
  v15 = sub_10019C9B8();
  v16 = objc_msgSend(v15, "trailingAnchor");

  v17 = objc_msgSend(v14, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", v16, 2.0);
  v18 = *(void **)&v1[v6];
  *(_QWORD *)(v9 + 40) = v17;
  *(_QWORD *)(v9 + 48) = v18;
  v19 = v18;
  v20 = sub_10019BD48();
  v21 = objc_msgSend(v20, "leftAnchor");

  v22 = objc_msgSend(v1, "leftAnchor");
  v23 = objc_msgSend(v21, "constraintEqualToAnchor:constant:", v22, 0.0);

  *(_QWORD *)(v9 + 56) = v23;
  v24 = sub_10019BD48();
  v25 = objc_msgSend(v24, "bottomAnchor");

  v26 = objc_msgSend(v1, "bottomAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, 0.0);

  *(_QWORD *)(v9 + 64) = v27;
  v28 = sub_10019BD48();
  v29 = objc_msgSend(v28, "rightAnchor");

  v30 = objc_msgSend(v1, "rightAnchor");
  v31 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, 0.0);

  *(_QWORD *)(v9 + 72) = v31;
  specialized Array._endMutation()(v32);
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v52, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v34 = swift_allocObject(v8, 64, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1001E7590;
  v35 = sub_10019C070();
  v36 = objc_msgSend(v35, "centerXAnchor");

  v37 = objc_msgSend(v1, "centerXAnchor");
  v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

  *(_QWORD *)(v34 + 32) = v38;
  v39 = sub_10019C070();
  v40 = objc_msgSend(v39, "leftAnchor");

  v41 = objc_msgSend(v1, "leftAnchor");
  v42 = objc_msgSend(v40, "constraintEqualToAnchor:constant:", v41, 24.0);

  *(_QWORD *)(v34 + 40) = v42;
  v43 = sub_10019C070();
  v44 = objc_msgSend(v43, "bottomAnchor");

  v45 = objc_msgSend(v1, "bottomAnchor");
  v46 = objc_msgSend(v44, "constraintEqualToAnchor:constant:", v45, -*(double *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_verticalHintAnchorConstant]);

  *(_QWORD *)(v34 + 48) = v46;
  v47 = sub_10019C070();
  v48 = objc_msgSend(v47, "rightAnchor");

  v49 = objc_msgSend(v1, "rightAnchor");
  v50 = objc_msgSend(v48, "constraintEqualToAnchor:constant:", v49, -24.0);

  *(_QWORD *)(v34 + 56) = v50;
  specialized Array._endMutation()(v51);
  v53 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v52, "activateConstraints:", v53, swift_bridgeObjectRelease().n128_f64[0]);

}

void sub_10019D698()
{
  id v0;
  NSString v1;
  id v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  NSString v14;
  Swift::String v15;
  Swift::String v16;

  v0 = sub_10019BD48();
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  v2 = sub_10019BD48();
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v15._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x545F4F545F504154;
  v5._object = (void *)0xEB00000000455059;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v15);

  v7 = sub_100190DF0();
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setText:", v8, swift_bridgeObjectRelease().n128_f64[0]);

  v9 = sub_10019BD48();
  objc_msgSend(v9, "setUserInteractionEnabled:", 1);

  v10 = sub_10019BD48();
  v11 = objc_msgSend(v3, "mainBundle");
  v16._object = (void *)0xE000000000000000;
  v12._countAndFlagsBits = 0x545F4F545F504154;
  v12._object = (void *)0xEB00000000455059;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v16);

  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setAccessibilityLabel:", v14, swift_bridgeObjectRelease().n128_f64[0]);

  sub_10019D88C();
}

void sub_10019D88C()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  _BOOL4 v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v1 = sub_10019C070();
  objc_msgSend(v1, "setHidden:", 1);

  v2 = sub_10019BD48();
  objc_msgSend(v2, "resignFirstResponder");

  v3 = sub_10019BD48();
  v4 = sub_10019BD48();
  v5 = objc_msgSend(v4, "effectiveUserInterfaceLayoutDirection") == (id)1;

  objc_msgSend(v3, "setTextAlignment:", 2 * v5);
  v6 = sub_10019BD48();
  v7 = objc_msgSend(v6, "text");

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    swift_bridgeObjectRelease();
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = v8 & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      v12 = (_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible);
      *(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible) = 1;
    }
    else
    {
      v13 = sub_10019BD48();
      v14 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
      v15 = (void *)objc_opt_self(UIFont);
      objc_msgSend(v14, "pointSize");
      v16 = objc_msgSend(v15, "systemFontOfSize:weight:");
      v17 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
      v18 = objc_msgSend(v17, "scaledFontForFont:maximumPointSize:", v16, 1.79769313e308);

      objc_msgSend(v13, "setFont:", v18);
      v12 = (_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible);
      *(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible) = 0;
    }
    v19 = sub_10019C9B8();
    objc_msgSend(v19, "setHidden:", (*v12 & 1) == 0);

  }
  else
  {
    __break(1u);
  }
}

void sub_10019DB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  Swift::Bool v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10019BD48();
  objc_msgSend(v9, "reloadInputViews");

  v10 = sub_10019BD48();
  sub_10019C7C0();
  v11 = sub_100190DF0();
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setText:", v12, swift_bridgeObjectRelease().n128_f64[0]);

  v13 = sub_10019BD48();
  sub_100082758(v1 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_selectedEditingLocale, (uint64_t)v4);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)v14 == 1)
  {
    static Locale.current.getter(v14);
    sub_1000A8C7C((uint64_t)v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  v15 = Locale.isRTL()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v15)
    v16 = 2;
  else
    v16 = 0;
  objc_msgSend(v13, "setTextAlignment:", v16);

}

id sub_10019DD38()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranslateInputCard(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10019DE14()
{
  return type metadata accessor for TranslateInputCard(0);
}

uint64_t type metadata accessor for TranslateInputCard(uint64_t a1)
{
  uint64_t result;

  result = qword_100297A18;
  if (!qword_100297A18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslateInputCard);
  return result;
}

void sub_10019DE58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_1001F62B0;
  v4[4] = &unk_1001F62B0;
  v4[5] = &unk_1001F62B0;
  v4[6] = &unk_1001F62B0;
  sub_1000A8A38(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_1001F62C8;
    v4[9] = &unk_1001F62B0;
    v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[11] = &unk_1001F62C8;
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

void sub_10019DF70(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  double v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD v29[2];

  v2 = v1;
  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10019BD48();
  v9 = objc_msgSend(v8, "returnKeyType");

  v10 = objc_msgSend(a1, "text");
  if (!v10)
  {
    __break(1u);
    return;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  v29[0] = v12;
  v29[1] = v14;
  static CharacterSet.whitespaces.getter(v15, v16);
  v17 = sub_10000B030();
  v18 = StringProtocol.trimmingCharacters(in:)(v7, &type metadata for String, v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0)
    v21 = v18 & 0xFFFFFFFFFFFFLL;
  if (!v21 || (!v18 ? (v22 = v20 == 0xE000000000000000) : (v22 = 0), v22))
  {
    *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
    if (!v9)
      return;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, 0, 0xE000000000000000, 0);
    *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
    if ((id)(~v23 & 1) == v9)
      return;
  }
  objc_msgSend(a1, "setReturnKeyType:", v24);
  v25 = objc_msgSend(a1, "textInputMode");
  v26 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_inputModeBeforeReturnKeyChange;
  v27 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_inputModeBeforeReturnKeyChange);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_inputModeBeforeReturnKeyChange) = v25;

  objc_msgSend(a1, "reloadInputViews");
  v28 = *(void **)(v2 + v26);
  *(_QWORD *)(v2 + v26) = 0;

}

void *sub_10019E344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  id v14;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v14 = v8;
      v11 = sub_10019C38C(&v14, a2);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_10019E464()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v1 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_verticalHintAnchorConstant] = 0x406C200000000000;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_delegate], 0);
  v2 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_textInputTopAnchor;
  *(_QWORD *)&v1[v2] = objc_msgSend(objc_allocWithZone((Class)NSLayoutConstraint), "init");
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___textInput] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___editOrSpeakHint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_inputModeBeforeReturnKeyChange] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_editingPair] = 0;
  v3 = &v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_selectedEditingLocale];
  v4 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard____lazy_storage___closeButton] = 0;
  v5 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation;
  v6 = objc_allocWithZone((Class)type metadata accessor for TypedInputInstrumentation(0));
  *(_QWORD *)&v1[v5] = sub_1001D623C(0);
  v1[OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_uiVisible] = 1;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/TranslateInputCard.swift", 42, 2, 144, 0);
  __break(1u);
}

void sub_10019E5C4()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  _BYTE *v5;
  id v6;
  id v7;
  _BYTE *v8;
  void *v9;

  v1 = v0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_delegate);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "willBeginEditing");
    swift_unknownObjectRelease(v3);
  }
  v4 = sub_10019C070();
  objc_msgSend(v4, "setHidden:", 1);

  v5 = (_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_closeButtonVisible) = 1;
  v6 = sub_10019C9B8();
  objc_msgSend(v6, "setHidden:", (*v5 & 1) == 0);

  v7 = objc_allocWithZone((Class)type metadata accessor for TypedInputInstrumentation(0));
  v8 = sub_1001D623C(0);
  v9 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation) = v8;

}

uint64_t sub_10019E698(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t Strong;
  void *v31;
  NSString v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  _BYTE *v37;
  void *v38;
  _QWORD v39[2];

  v4 = v3;
  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 != 10 || a3 != 0xE100000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 10, 0xE100000000000000, 0) & 1) == 0)
  {
    return 1;
  }
  result = (uint64_t)objc_msgSend(a1, "text");
  if (result)
  {
    v13 = (void *)result;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v16 = v15;

    v39[0] = v14;
    v39[1] = v16;
    static CharacterSet.whitespaces.getter(v17, v18);
    v19 = sub_10000B030();
    v20 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v19);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_bridgeObjectRelease();
    v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v23 = v20 & 0xFFFFFFFFFFFFLL;
    if (v23)
    {
      v24 = OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation;
      v25 = (char *)*(id *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation);
      *(_QWORD *)&v25[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_characterCount] = String.count.getter(v20, v22);

      v26 = *(_QWORD *)(v4 + v24);
      v27 = *(void **)(v4 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_editingPair);
      v28 = *(void **)(v26 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair);
      *(_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair) = v27;
      v29 = v27;

      Strong = swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_delegate);
      if (Strong)
      {
        v31 = (void *)Strong;
        v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v33 = *(id *)(v4 + v24);
        objc_msgSend(v31, "translateWithText:instrumentation:", v32, v33);

        swift_unknownObjectRelease(v31);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v34 = (void *)swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_delegate);
      if (v34)
      {
        v35 = v34;
        objc_msgSend(v34, "didPressReturn");
        swift_unknownObjectRelease(v35);
      }
    }
    v36 = objc_allocWithZone((Class)type metadata accessor for TypedInputInstrumentation(0));
    v37 = sub_1001D623C(0);
    v38 = *(void **)(v4 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation);
    *(_QWORD *)(v4 + OBJC_IVAR____TtC17SequoiaTranslator18TranslateInputCard_instrumentation) = v37;

    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10019E914()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10019E938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10019D034(a1, a2, v2);
}

id sub_10019E940()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate____lazy_storage___systemApertureElementProvider;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate____lazy_storage___systemApertureElementProvider);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate____lazy_storage___systemApertureElementProvider);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SpeechTranslationApertureElementViewController()), "initWithNibName:bundle:", 0, 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

double sub_10019EA78(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  uint64_t v39;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;

  v3 = type metadata accessor for LiveActivityView(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v40[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v6 = type metadata accessor for Logger(0);
  sub_10000F66C(v6, (uint64_t)qword_1002AA3C8);
  v7 = a1;
  v8 = v1;
  v9 = v7;
  v10 = (char *)v8;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  v13 = (_QWORD *)&unk_100297000;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    v40[0] = v39;
    *(_DWORD *)v14 = 136446466;
    v15 = objc_msgSend(v9, "session");
    v16 = objc_msgSend(v15, "persistentIdentifier");

    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v41 = sub_1001A7FE4(v17, v19, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v14 + 4);

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v20 = *(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate_currentActivity];
    if (v20)
    {
      swift_retain(*(_QWORD *)&v10[OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate_currentActivity]);
      v22 = Activity.id.getter(v21);
      v24 = v23;
      swift_release(v20);
    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
    }
    v41 = sub_1001A7FE4(v22, v24, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v14 + 14);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Translate Activity scene resigning active [id: %{public}s currentActivity: %s]", (uint8_t *)v14, 0x16u);
    v25 = v39;
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v13 = &unk_100297000;
  }
  else
  {

  }
  v26 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v27 = objc_msgSend(v26, "delegate");

  if (v27)
  {
    v28 = type metadata accessor for AppDelegate();
    v29 = swift_dynamicCastClass(v27, v28);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + OBJC_IVAR____TtC17SequoiaTranslator11AppDelegate_interruptionController);
      swift_retain(v30);
      swift_unknownObjectRelease(v27);
      if (v30)
      {
        *(_QWORD *)(v30 + 40) = 0;
        swift_unknownObjectWeakAssign(v30 + 32, 0);
        swift_release(v30);
      }
    }
    else
    {
      swift_unknownObjectRelease(v27);
    }
  }
  v31 = sub_10019E940();
  dispatch thunk of UIHostingController.rootView.getter(v31);
  v32 = v5[1];
  v40[0] = *v5;
  v40[1] = v32;
  sub_100006DF4((uint64_t *)&unk_100297A90);
  State.wrappedValue.getter(&v41);
  v33 = v41;
  sub_100177B20((uint64_t)v5);

  v34 = v13[332];
  v35 = *(_QWORD *)&v10[v34];
  swift_retain(v35);
  sub_10010F764(v36);
  swift_release(v33);
  swift_release(v35);
  v37 = *(_QWORD *)&v10[v34];
  *(_QWORD *)&v10[v34] = 0;
  *(_QWORD *)&result = swift_release(v37).n128_u64[0];
  return result;
}

void sub_10019EEB0(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char *v19;
  id v20;
  char *v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45[2];
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v4 = type metadata accessor for LiveActivityView(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ActivityScene(0);
  v8 = swift_dynamicCastClass(a1, v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = a1;
    if (objc_msgSend(v9, "SBUI_isHostedBySystemAperture"))
    {
      if (qword_10028A4D8 != -1)
        swift_once(&qword_10028A4D8, sub_100173130);
      v11 = *(_QWORD *)(qword_1002AA528
                      + OBJC_IVAR____TtC17SequoiaTranslator32SpeechTranslationActivityManager_currentActivity);
      v12 = OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate_currentActivity;
      v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate_currentActivity];
      *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate_currentActivity] = v11;
      swift_retain(v11);
      swift_release(v13);
      v14 = sub_10019E940();
      dispatch thunk of UIHostingController.rootView.getter(v14);
      v15 = v6[1];
      v45[0] = *v6;
      v45[1] = v15;
      sub_100006DF4((uint64_t *)&unk_100297A90);
      State.wrappedValue.getter(&v46);
      v16 = v46;
      sub_100177B20((uint64_t)v6);

      sub_1001100B8();
      swift_release(v16);
      if (qword_10028A440 != -1)
        swift_once(&qword_10028A440, sub_100121004);
      v17 = type metadata accessor for Logger(0);
      sub_10000F66C(v17, (uint64_t)qword_1002AA3C8);
      v18 = v10;
      v19 = v2;
      v20 = v18;
      v21 = v19;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.info.getter(v22);
      if (os_log_type_enabled(v22, (os_log_type_t)v23))
      {
        v44 = v23;
        v24 = swift_slowAlloc(22, -1);
        v43 = swift_slowAlloc(64, -1);
        v45[0] = v43;
        *(_DWORD *)v24 = 136446466;
        v25 = objc_msgSend(v20, "session");
        v26 = objc_msgSend(v25, "persistentIdentifier");

        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        v46 = sub_1001A7FE4(v27, v29, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v24 + 4);

        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        v30 = *(_QWORD *)&v2[v12];
        if (v30)
        {
          swift_retain(*(_QWORD *)&v2[v12]);
          v32 = Activity.id.getter(v31);
          v34 = v33;
          swift_release(v30);
        }
        else
        {
          v32 = 0;
          v34 = 0xE000000000000000;
        }
        v46 = sub_1001A7FE4(v32, v34, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v24 + 14);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v44, "Translate Activity scene became active [id: %{public}s currentActivity: %s]", (uint8_t *)v24, 0x16u);
        v41 = v43;
        swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {

      }
      return;
    }

  }
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA3C8);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Scene not an ActivityScene or not hosted by system aperture", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  v40 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate_currentActivity];
  *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate_currentActivity] = 0;
  swift_release(v40);
}

id sub_10019F3F8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranslateSystemApertureSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TranslateSystemApertureSceneDelegate()
{
  return objc_opt_self(_TtC17SequoiaTranslator36TranslateSystemApertureSceneDelegate);
}

void sub_10019F490(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *oslog;
  uint64_t v17;
  uint64_t v18;

  if ((a2 & 1) != 0)
  {
    v6 = a3 + 32;
    Strong = swift_unknownObjectWeakLoadStrong(a3 + 32);
    swift_unknownObjectRelease(Strong);
    if (!Strong)
    {
      *(_QWORD *)(a3 + 40) = &off_10026DFE0;
      goto LABEL_17;
    }
  }
  else
  {
    v6 = a3 + 16;
    v7 = swift_unknownObjectWeakLoadStrong(a3 + 16);
    swift_unknownObjectRelease(v7);
    if (!v7)
    {
      *(_QWORD *)(a3 + 24) = &off_10026DFE0;
LABEL_17:
      swift_unknownObjectWeakAssign(v6, a1);
      return;
    }
  }
  if (qword_10028A3F0 != -1)
    swift_once(&qword_10028A3F0, sub_100120E88);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA2D8);
  oslog = Logger.logObject.getter(v10);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136446210;
    v18 = v13;
    if ((a2 & 1) != 0)
      v14 = 0x697463416576696CLL;
    else
      v14 = 1852399981;
    if ((a2 & 1) != 0)
      v15 = 0xEC00000079746976;
    else
      v15 = 0xE400000000000000;
    v17 = sub_1001A7FE4(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Attempting to register %{public}s scene even though one is already registered with the interruption controller; ig"
      "noring new scene",
      v12,
      0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
}

void sub_10019F6BC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *oslog;
  uint64_t v17;
  uint64_t v18;

  if ((a2 & 1) != 0)
  {
    v6 = a3 + 32;
    Strong = swift_unknownObjectWeakLoadStrong(a3 + 32);
    swift_unknownObjectRelease(Strong);
    if (!Strong)
    {
      *(_QWORD *)(a3 + 40) = &off_10026B560;
      goto LABEL_17;
    }
  }
  else
  {
    v6 = a3 + 16;
    v7 = swift_unknownObjectWeakLoadStrong(a3 + 16);
    swift_unknownObjectRelease(v7);
    if (!v7)
    {
      *(_QWORD *)(a3 + 24) = &off_10026B560;
LABEL_17:
      swift_unknownObjectWeakAssign(v6, a1);
      return;
    }
  }
  if (qword_10028A3F0 != -1)
    swift_once(&qword_10028A3F0, sub_100120E88);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000F66C(v9, (uint64_t)qword_1002AA2D8);
  oslog = Logger.logObject.getter(v10);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136446210;
    v18 = v13;
    if ((a2 & 1) != 0)
      v14 = 0x697463416576696CLL;
    else
      v14 = 1852399981;
    if ((a2 & 1) != 0)
      v15 = 0xEC00000079746976;
    else
      v15 = 0xE400000000000000;
    v17 = sub_1001A7FE4(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Attempting to register %{public}s scene even though one is already registered with the interruption controller; ig"
      "noring new scene",
      v12,
      0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
}

void sub_10019F8E8(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for LiveActivityView(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ActivityScene(0);
  v8 = swift_dynamicCastClass(a1, v7);
  if (!v8)
    goto LABEL_8;
  v9 = (void *)v8;
  v10 = a1;
  if (!objc_msgSend(v9, "SBUI_isHostedBySystemAperture"))
  {

LABEL_8:
    if (qword_10028A440 != -1)
      swift_once(&qword_10028A440, sub_100121004);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10000F66C(v22, (uint64_t)qword_1002AA3C8);
    v38 = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v24, "Scene not an ActivityScene or not hosted by system aperture", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    return;
  }
  if (qword_10028A440 != -1)
    swift_once(&qword_10028A440, sub_100121004);
  v11 = type metadata accessor for Logger(0);
  sub_10000F66C(v11, (uint64_t)qword_1002AA3C8);
  v12 = v10;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v39[0] = v37;
    *(_DWORD *)v15 = 136446210;
    v36 = v15 + 4;
    v16 = objc_msgSend(v12, "session");
    v17 = objc_msgSend(v16, "persistentIdentifier");

    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v38 = v2;
    v20 = v19;

    v40 = sub_1001A7FE4(v18, v20, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v36);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Connecting to Translate Activity scene [id: %{public}s]", v15, 0xCu);
    v21 = v37;
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  v26 = v12;
  v27 = sub_10019E940();
  objc_msgSend(v9, "setSystemApertureElementViewControllerProvider:", v27);

  v28 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v29 = objc_msgSend(v28, "delegate");

  if (!v29)
    goto LABEL_18;
  v30 = type metadata accessor for AppDelegate();
  v31 = swift_dynamicCastClass(v29, v30);
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + OBJC_IVAR____TtC17SequoiaTranslator11AppDelegate_interruptionController);
    swift_retain(v32);
    swift_unknownObjectRelease(v29);
    if (v32)
    {
      v33 = sub_10019E940();
      dispatch thunk of UIHostingController.rootView.getter(v33);
      v34 = v6[1];
      v39[0] = *v6;
      v39[1] = v34;
      sub_100006DF4((uint64_t *)&unk_100297A90);
      State.wrappedValue.getter(&v40);
      v35 = v40;
      sub_100177B20((uint64_t)v6);

      sub_10019F6BC(v35, 1, v32);
      swift_release(v32);
      swift_release(v35);
    }
LABEL_18:

    return;
  }

  swift_unknownObjectRelease(v29);
}

_QWORD *sub_10019FD58@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1001151B0();
  return EnvironmentValues.subscript.getter(a1, &type metadata for TypesettingLanguage, &type metadata for TypesettingLanguage, v2);
}

ValueMetadata *type metadata accessor for TypesettingLanguage()
{
  return &type metadata for TypesettingLanguage;
}

uint64_t sub_10019FD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v8;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale.Language(0);
  sub_100011A00(v4, qword_1002AA678);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA678);
  static Locale.current.getter(v5);
  Locale.language.getter(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10019FE4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10028A520 != -1)
    swift_once(&qword_10028A520, sub_10019FD9C);
  v2 = type metadata accessor for Locale.Language(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA678);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10019FEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_100007D5C(&qword_100297AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Language, (uint64_t)&protocol conformance descriptor for Locale.Language);
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t *sub_10019FF24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006DF4(&qword_100291490);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for Locale.Language(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

double sub_1001A0008(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100006DF4(&qword_100291490);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for Locale.Language(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {
    swift_release(*a1);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t *sub_1001A007C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = sub_100006DF4(&qword_100291490);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for Locale.Language(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t *sub_1001A0134(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1001A0210((uint64_t)a1);
    v6 = sub_100006DF4(&qword_100291490);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for Locale.Language(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001A0210(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4(&qword_100291490);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1001A0250(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100006DF4(&qword_100291490);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for Locale.Language(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1001A02F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1001A0210((uint64_t)a1);
    v6 = sub_100006DF4(&qword_100291490);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for Locale.Language(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001A03C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A03CC);
}

uint64_t sub_1001A03CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100006DF4(&qword_1002926B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001A0450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A045C);
}

uint64_t sub_1001A045C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006DF4(&qword_1002926B8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TranslateText(uint64_t a1)
{
  uint64_t result;

  result = qword_100297B00;
  if (!qword_100297B00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslateText);
  return result;
}

void sub_1001A0518(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1001A0588(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1001F6380;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1001A0588(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100292728)
  {
    v2 = type metadata accessor for Locale.Language(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100292728);
  }
}

uint64_t sub_1001A05DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002180E0, 1);
}

uint64_t sub_1001A05EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = type metadata accessor for Locale.Language(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for KaraokeView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  sub_1000EBE0C(v11, v12, (uint64_t)v9);
  sub_1000D60B8(v6);
  v13 = sub_100007D5C(&qword_100297B38, type metadata accessor for KaraokeView, (uint64_t)&unk_1001EEE68);
  View.typesettingLanguage(_:isEnabled:)(v6, 1, v7, v13);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  return sub_1001A0720((uint64_t)v9);
}

uint64_t sub_1001A0720(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KaraokeView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A075C()
{
  _QWORD v1[2];

  v1[0] = type metadata accessor for KaraokeView(255);
  v1[1] = sub_100007D5C(&qword_100297B38, type metadata accessor for KaraokeView, (uint64_t)&unk_1001EEE68);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.typesettingLanguage(_:isEnabled:)>>, 1);
}

uint64_t *sub_1001A07BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    if (v19)
    {
      v20 = v18[1];
      *v17 = v19;
      v17[1] = v20;
      swift_retain(v20);
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
  }
  return a1;
}

uint64_t sub_1001A089C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v6 = (_QWORD *)(a1 + a2[7]);
  if (*v6)
    return swift_release(v6[1]);
  return result;
}

uint64_t sub_1001A0918(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  if (v18)
  {
    v19 = v17[1];
    *v16 = v18;
    v16[1] = v19;
    swift_retain(v19);
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  return a1;
}

uint64_t sub_1001A09CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  if (!v20)
  {
    if (v21)
    {
      v24 = *(_QWORD *)(v19 + 8);
      *v18 = v21;
      v18[1] = v24;
      swift_retain(v24);
      return a1;
    }
LABEL_7:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    return a1;
  }
  if (!v21)
  {
    swift_release(v18[1]);
    goto LABEL_7;
  }
  v22 = *(_QWORD *)(v19 + 8);
  v23 = v18[1];
  *v18 = v21;
  v18[1] = v22;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

uint64_t sub_1001A0AD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *v10;
  if (*v10)
  {
    v12 = v10[1];
    *v9 = v11;
    v9[1] = v12;
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  return a1;
}

uint64_t sub_1001A0B5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19);
  v23 = *v21;
  if (!v22)
  {
    if (v23)
    {
      v26 = v21[1];
      *v20 = v23;
      v20[1] = v26;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    return a1;
  }
  if (!v23)
  {
    swift_release(v20[1]);
    goto LABEL_7;
  }
  v24 = v21[1];
  v25 = v20[1];
  *v20 = v23;
  v20[1] = v24;
  swift_release(v25);
  return a1;
}

uint64_t sub_1001A0C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A0C40);
}

uint64_t sub_1001A0C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001A0CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A0CCC);
}

uint64_t sub_1001A0CCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TranslateTip(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100297B98, (uint64_t)&nominal type descriptor for TranslateTip);
}

uint64_t sub_1001A0D5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001F6400;
    v4[2] = &unk_1001F6418;
    v4[3] = &unk_1001F6418;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

int *sub_1001A0DD8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  void *object;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  int *result;
  uint64_t *v21;
  uint64_t (**v22)();
  Swift::String v24;
  Swift::String v25;

  v7 = (void *)objc_opt_self(NSBundle);
  v8 = objc_msgSend(v7, "mainBundle");
  v24._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001001FA050;
  v9._countAndFlagsBits = 0xD000000000000016;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v24);

  countAndFlagsBits = 0;
  object = 0;
  if ((a1 & 1) != 0)
  {
    v14 = objc_msgSend(v7, "mainBundle");
    v25._object = (void *)0xE000000000000000;
    v15._object = (void *)0x8000000100201AD0;
    v15._countAndFlagsBits = 0xD000000000000016;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v25._countAndFlagsBits = 0;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v25);
    countAndFlagsBits = v17._countAndFlagsBits;
    object = v17._object;

  }
  v18 = swift_allocObject(&unk_100270498, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  v19 = swift_retain(a3);
  UUID.init()(v19);
  result = (int *)type metadata accessor for TranslateTip(0);
  *(Swift::String *)(a4 + result[5]) = v11;
  v21 = (uint64_t *)(a4 + result[6]);
  *v21 = countAndFlagsBits;
  v21[1] = (uint64_t)object;
  v22 = (uint64_t (**)())(a4 + result[7]);
  *v22 = sub_1000089A8;
  v22[1] = (uint64_t (*)())v18;
  return result;
}

uint64_t sub_1001A0F64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1001A0FA0()
{
  return sub_100007D5C(&qword_100290100, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1001A0FCC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001A0FEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A1010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for TranslateTip(0);
  sub_100011A00((uint64_t)v4, qword_1002AA690);
  v5 = sub_10000F66C((uint64_t)v4, (uint64_t)qword_1002AA690);
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15._countAndFlagsBits = 0xD00000000000001FLL;
  v15._object = (void *)0x8000000100201B10;
  v7._object = (void *)0x8000000100201AF0;
  v7._countAndFlagsBits = 0xD00000000000001ALL;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v15);

  UUID.init()(v10);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v3, v0);
  *(Swift::String *)(v5 + v4[5]) = v9;
  v12 = (_QWORD *)(v5 + v4[6]);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(v5 + v4[7]);
  *v13 = 0;
  v13[1] = 0;
  return result;
}

uint64_t sub_1001A1170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for TranslateTip(0);
  sub_100011A00((uint64_t)v4, qword_1002AA6A8);
  v5 = sub_10000F66C((uint64_t)v4, (uint64_t)qword_1002AA6A8);
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15._countAndFlagsBits = 0xD000000000000020;
  v15._object = (void *)0x8000000100201B50;
  v7._object = (void *)0x8000000100201B30;
  v7._countAndFlagsBits = 0xD00000000000001CLL;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v15);

  UUID.init()(v10);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v3, v0);
  *(Swift::String *)(v5 + v4[5]) = v9;
  v12 = (_QWORD *)(v5 + v4[6]);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(v5 + v4[7]);
  *v13 = 0;
  v13[1] = 0;
  return result;
}

ValueMetadata *type metadata accessor for TranslateTipsView()
{
  return &type metadata for TranslateTipsView;
}

uint64_t sub_1001A12DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002181AC, 1);
}

uint64_t sub_1001A12EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for StaticTipView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_100297C10);
  __chkstk_darwin(v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DynamicTipView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + *(int *)(type metadata accessor for TranslateTip(0) + 28)))
  {
    sub_100032D68(a1, (uint64_t)v10, type metadata accessor for TranslateTip);
    sub_100032D68((uint64_t)v10, (uint64_t)v7, type metadata accessor for DynamicTipView);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v11 = sub_100007D5C(&qword_100297BF8, type metadata accessor for DynamicTipView, (uint64_t)&unk_1001F6564);
    v12 = sub_100007D5C(&qword_100297C00, type metadata accessor for StaticTipView, (uint64_t)&unk_1001F6514);
    _ConditionalContent<>.init(storage:)(v7, v8, v2, v11, v12);
    v13 = (uint64_t)v10;
    v14 = type metadata accessor for DynamicTipView;
  }
  else
  {
    sub_100032D68(a1, (uint64_t)v4, type metadata accessor for TranslateTip);
    sub_100032D68((uint64_t)v4, (uint64_t)v7, type metadata accessor for StaticTipView);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v15 = sub_100007D5C(&qword_100297BF8, type metadata accessor for DynamicTipView, (uint64_t)&unk_1001F6564);
    v16 = sub_100007D5C(&qword_100297C00, type metadata accessor for StaticTipView, (uint64_t)&unk_1001F6514);
    _ConditionalContent<>.init(storage:)(v7, v8, v2, v15, v16);
    v13 = (uint64_t)v4;
    v14 = type metadata accessor for StaticTipView;
  }
  return sub_100032DAC(v13, v14);
}

uint64_t sub_1001A1520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *v2;
  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x401C000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  sub_100006DF4(&qword_100297BD8);
  v12 = v4;
  swift_bridgeObjectRetain(v4);
  v5 = sub_100006DF4(&qword_10028D330);
  v6 = type metadata accessor for UUID(0);
  v7 = sub_100006DF4(&qword_100297BE0);
  v8 = sub_100012334(&qword_100297BE8, &qword_10028D330, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = sub_1001A1628();
  v10 = sub_100007D5C(&qword_100297C08, type metadata accessor for TranslateTip, (uint64_t)&unk_1001F6458);
  return ((uint64_t (*)(uint64_t *, uint64_t (*)(uint64_t), _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))ForEach<>.init(_:content:))(&v12, sub_1001A12EC, 0, v5, v6, v7, v8, v9, v10);
}

unint64_t sub_1001A1628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297BF0;
  if (!qword_100297BF0)
  {
    v1 = sub_1000070BC(&qword_100297BE0);
    sub_100007D5C(&qword_100297BF8, type metadata accessor for DynamicTipView, (uint64_t)&unk_1001F6564);
    sub_100007D5C(&qword_100297C00, type metadata accessor for StaticTipView, (uint64_t)&unk_1001F6514);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297BF0);
  }
  return result;
}

uint64_t type metadata accessor for DynamicTipView(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100297D00, (uint64_t)&nominal type descriptor for DynamicTipView);
}

uint64_t type metadata accessor for StaticTipView(uint64_t a1)
{
  return sub_10001E6EC(a1, qword_100297C70, (uint64_t)&nominal type descriptor for StaticTipView);
}

uint64_t sub_1001A1704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A1710);
}

uint64_t sub_1001A1714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A1720);
}

uint64_t *sub_1001A1728(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for TranslateTip(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = v6[6];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = v6[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v15);
    if (v19)
    {
      v20 = v18[1];
      *v17 = v19;
      v17[1] = v20;
      swift_retain(v20);
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
  }
  return a1;
}

double sub_1001A1814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  _QWORD *v5;

  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for TranslateTip(0);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  v5 = (_QWORD *)(a1 + *(int *)(v3 + 28));
  if (*v5)
    *(_QWORD *)&result = swift_release(v5[1]).n128_u64[0];
  return result;
}

uint64_t sub_1001A1898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for TranslateTip(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  v11 = v5[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = v5[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v14);
  if (v18)
  {
    v19 = v17[1];
    *v16 = v18;
    v16[1] = v19;
    swift_retain(v19);
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  return a1;
}

uint64_t sub_1001A1958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for TranslateTip(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *v7 = *v8;
  v9 = v8[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = v5[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  v14 = v5[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *(_QWORD *)(a1 + v14);
  v18 = *v16;
  if (!v17)
  {
    if (v18)
    {
      v21 = v16[1];
      *v15 = v18;
      v15[1] = v21;
      swift_retain(v21);
      return a1;
    }
LABEL_7:
    *(_OWORD *)v15 = *(_OWORD *)v16;
    return a1;
  }
  if (!v18)
  {
    swift_release(v15[1]);
    goto LABEL_7;
  }
  v19 = v16[1];
  v20 = v15[1];
  *v15 = v18;
  v15[1] = v19;
  swift_retain(v19);
  swift_release(v20);
  return a1;
}

uint64_t sub_1001A1A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for TranslateTip(0);
  *(_OWORD *)(a1 + v5[5]) = *(_OWORD *)(a2 + v5[5]);
  *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
  v6 = v5[7];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v9 = *v8;
  if (*v8)
  {
    v10 = v8[1];
    *v7 = v9;
    v7[1] = v10;
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  return a1;
}

uint64_t sub_1001A1AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for TranslateTip(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v11 = v5[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = v5[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = *(_QWORD *)(a1 + v16);
  v20 = *v18;
  if (!v19)
  {
    if (v20)
    {
      v23 = v18[1];
      *v17 = v20;
      v17[1] = v23;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    return a1;
  }
  if (!v20)
  {
    swift_release(v17[1]);
    goto LABEL_7;
  }
  v21 = v18[1];
  v22 = v17[1];
  *v17 = v20;
  v17[1] = v21;
  swift_release(v22);
  return a1;
}

uint64_t sub_1001A1BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A1BDC);
}

uint64_t sub_1001A1BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranslateTip(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001A1C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A1C28);
}

uint64_t sub_1001A1C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranslateTip(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1001A1C6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for TranslateTip(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001A1CD4()
{
  return sub_100012334(&qword_100297D38, &qword_100297D40, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_1001A1D00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002181FC, 1);
}

void sub_1001A1D10(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for TranslateTip(0) + 20));
  v4 = v3[1];
  v37[0] = *v3;
  v37[1] = v4;
  v5 = sub_10000B030();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(v37, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Color.secondary.getter(v6);
  v14 = Text.foregroundColor(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  LOBYTE(v13) = v18 & 1;
  sub_10001B9E8(v6, v8, v12);
  v21 = swift_bridgeObjectRelease();
  v22 = static Font.subheadline.getter(v21);
  v24 = Text.font(_:)(v22, v14, v16, v18 & 1, v20, v23);
  v26 = v25;
  LOBYTE(v12) = v27;
  v29 = v28;
  swift_release(v22);
  LOBYTE(v22) = v12 & 1;
  sub_10001B9E8(v14, v16, v13);
  v30 = swift_bridgeObjectRelease();
  v31 = Text.bold()(v24, v26, v12 & 1, v29, v30);
  v33 = v32;
  LOBYTE(v14) = v34;
  v36 = v35;
  sub_10001B9E8(v24, v26, v22);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = v33;
  *(_BYTE *)(a1 + 16) = v14 & 1;
  *(_QWORD *)(a1 + 24) = v36;
}

uint64_t sub_1001A1E90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002181D4, 1);
}

void sub_1001A1EA0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t OpaqueTypeConformance2;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  double v63;
  void (*v64)(char *, uint64_t, double);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v70 = a2;
  v3 = sub_100006DF4(&qword_100297D50);
  v72 = *(_QWORD *)(v3 - 8);
  v73 = v3;
  v4 = __chkstk_darwin(v3);
  v71 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v68 = (char *)&v65 - v7;
  __chkstk_darwin(v6);
  v69 = (char *)&v65 - v8;
  v9 = type metadata accessor for TranslateTip(0);
  v10 = (uint64_t *)(a1 + *(int *)(v9 + 24));
  v11 = v10[1];
  if (v11)
  {
    v74 = *v10;
    v75 = v11;
    v66 = v9;
    v12 = sub_10000B030();
    swift_bridgeObjectRetain(v11);
    v13 = Text.init<A>(_:)(&v74, &type metadata for String, v12);
    v15 = v14;
    v17 = v16;
    v19 = v18 & 1;
    v21 = static Font.subheadline.getter(v20);
    v23 = Text.font(_:)(v21, v13, v15, v19, v17, v22);
    v67 = a1;
    v25 = v24;
    v27 = v26;
    v29 = v28;
    swift_release(v21);
    v30 = v27 & 1;
    sub_10001B9E8(v13, v15, v19);
    swift_bridgeObjectRelease();
    v32 = static Color.secondary.getter(v31);
    v33 = Text.foregroundColor(_:)(v32, v23, v25, v30, v29);
    v35 = v34;
    LOBYTE(v17) = v36;
    v38 = v37;
    swift_release(v32);
    LOBYTE(v32) = v17 & 1;
    v39 = v25;
    a1 = v67;
    sub_10001B9E8(v23, v39, v30);
    v40 = swift_bridgeObjectRelease();
    v41 = Text.bold()(v33, v35, v17 & 1, v38, v40);
    v43 = v42;
    v45 = v44;
    v47 = v46 & 1;
    sub_10001B9E8(v33, v35, v32);
    swift_bridgeObjectRelease();
    v9 = v66;
  }
  else
  {
    v41 = 0;
    v43 = 0;
    v47 = 0;
    v45 = 0;
  }
  v48 = (uint64_t *)(a1 + *(int *)(v9 + 28));
  v49 = *v48;
  if (*v48)
  {
    v50 = v48[1];
    __chkstk_darwin(v9);
    *(&v65 - 2) = a1;
    swift_retain(v50);
    v51 = sub_100006DF4(&qword_100297D58);
    v52 = sub_1000070BC(&qword_100297D60);
    v53 = sub_1001A25F8();
    v74 = v52;
    v75 = v53;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
    v55 = v68;
    Button.init(action:label:)(v49, v50, sub_1001A25F0, &v65 - 4, v51, OpaqueTypeConformance2);
    v57 = v72;
    v56 = v73;
    v58 = v69;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v69, v55, v73);
    v59 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
    v60 = v71;
    v59(v71, v58, v56);
    v61 = v70;
    *v70 = v41;
    v61[1] = v43;
    v61[2] = v47;
    v61[3] = v45;
    v62 = sub_100006DF4(&qword_100297DA0);
    v59((char *)v61 + *(int *)(v62 + 48), v60, v56);
    v63 = sub_1001A279C(v41, v43, v47, v45);
    v64 = *(void (**)(char *, uint64_t, double))(v57 + 8);
    v64(v58, v56, v63);
    ((void (*)(char *, uint64_t))v64)(v60, v56);
    sub_1001A25C0(v41, v43, v47, v45);
  }
  else
  {
    sub_1001A25C0(v41, v43, v47, v45);
    __break(1u);
  }
}

uint64_t sub_1001A2220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v30[1] = a2;
  v3 = sub_100006DF4(&qword_100297D88);
  __chkstk_darwin(v3);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[0] = sub_100006DF4(&qword_100297D78);
  __chkstk_darwin(v30[0]);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100297D60);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static VerticalAlignment.center.getter(v9);
  sub_1001A2494(a1, (uint64_t)&v31);
  v13 = v31;
  v14 = v32;
  v15 = v33;
  v16 = v34;
  v17 = v35;
  v31 = v12;
  v32 = 0x4014000000000000;
  v33 = 0;
  v34 = v13;
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v18 = sub_100006DF4(&qword_100297D98);
  v19 = sub_100012334(&qword_100297D90, &qword_100297D98, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityIdentifier(_:)(0x74616C736E617274, 0xEE007069546E6F69, v18, v19);
  sub_10001B9E8(v13, v14, v15);
  swift_release(v17);
  v20 = swift_bridgeObjectRelease();
  v21 = static Font.subheadline.getter(v20);
  KeyPath = swift_getKeyPath(&unk_1001F65B8);
  sub_10000B074((uint64_t)v5, (uint64_t)v7, &qword_100297D88);
  v23 = (uint64_t *)&v7[*(int *)(v30[0] + 36)];
  *v23 = KeyPath;
  v23[1] = v21;
  v24 = sub_10000A020((uint64_t)v5, &qword_100297D88);
  v25 = static Color.translateAccentColor.getter(v24);
  v26 = swift_getKeyPath(&unk_1001F65E8);
  sub_10000B074((uint64_t)v7, (uint64_t)v11, &qword_100297D78);
  v27 = (uint64_t *)&v11[*(int *)(v8 + 36)];
  *v27 = v26;
  v27[1] = v25;
  sub_10000A020((uint64_t)v7, &qword_100297D78);
  v28 = sub_1001A25F8();
  View.bold(_:)(1, v8, v28);
  return sub_10000A020((uint64_t)v11, &qword_100297D60);
}

double sub_1001A2494@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  double result;
  _QWORD v15[2];

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for TranslateTip(0) + 20));
  v4 = v3[1];
  v15[0] = *v3;
  v15[1] = v4;
  v5 = sub_10000B030();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(v15, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = Image.init(systemName:)(0x6F662E776F727261, 0xED00006472617772);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v13;
  sub_10001B9D8(v6, v8, v12);
  swift_bridgeObjectRetain(v10);
  sub_10001B9E8(v6, v8, v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1001A2578(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4000000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100006DF4(&qword_100297D48);
  sub_1001A1EA0(v2, (uint64_t *)(a2 + *(int *)(v4 + 44)));
}

double sub_1001A25C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_10001B9E8(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_1001A25F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001A2220(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1001A25F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297D68;
  if (!qword_100297D68)
  {
    v1 = sub_1000070BC(&qword_100297D60);
    sub_1001A267C();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297D68);
  }
  return result;
}

unint64_t sub_1001A267C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297D70;
  if (!qword_100297D70)
  {
    v1 = sub_1000070BC(&qword_100297D78);
    sub_1001A2700();
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297D70);
  }
  return result;
}

unint64_t sub_1001A2700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297D80;
  if (!qword_100297D80)
  {
    v1 = sub_1000070BC(&qword_100297D88);
    sub_100012334(&qword_100297D90, &qword_100297D98, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100007D5C((unint64_t *)&qword_10028AD70, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100297D80);
  }
  return result;
}

double sub_1001A279C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_10001B9D8(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001A27DC()
{
  return sub_100012334(&qword_100297DA8, &qword_100297DB0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

void *sub_1001A2808()
{
  return &protocol witness table for Text;
}

uint64_t sub_1001A2814()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F66B8);
  v2 = swift_getKeyPath(&unk_1001F66E0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1001A2884(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE v41[24];
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v2 = v1;
  v4 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v32 - v12;
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v14 = type metadata accessor for Logger(0);
  sub_10000F66C(v14, (uint64_t)qword_1002AA338);
  v15 = swift_retain_n(v1, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v34 = v17;
    v35 = a1;
    v36 = v13;
    v37 = v8;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v42 = v33;
    *(_DWORD *)v18 = 136446210;
    v38 = v2;
    v19 = v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID;
    swift_beginAccess(v19, v41, 0, 0);
    v20 = *(void **)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 24);
    v39 = *(_QWORD *)(v19 + 16);
    v40 = v20;
    v23 = *(_QWORD *)(v19 + 32);
    v24 = v20;
    swift_retain(v21);
    swift_bridgeObjectRetain(v22);
    swift_retain(v23);
    swift_getAtKeyPath(&v43, &v40, v21);
    v25 = v44;
    if (v44)
    {
      v39 = v43;
      swift_release(v21);

    }
    else
    {
      swift_bridgeObjectRetain(v22);
      swift_release(v21);

      v25 = v22;
    }
    swift_release(v23);
    swift_bridgeObjectRelease();
    v43 = sub_1001A7FE4(v39, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v18 + 4);
    v2 = v38;
    swift_release_n(v38, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v34, "Suspending conversation session with ID: %{public}s", v18, 0xCu);
    v26 = v33;
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v13 = v36;
    v8 = v37;
    a1 = v35;
  }
  else
  {

    swift_release_n(v2, 2);
  }
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v27(v13, a1, v7);
  v27(v11, (uint64_t)v13, v7);
  v28 = v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__sessionSuspension;
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__sessionSuspension, &v43, 33, 0);
  v29 = *(_QWORD *)(v28 + 8);
  v27(v6, (uint64_t)v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  swift_retain(v29);
  swift_setAtWritableKeyPath(v28, v29, v6);
  swift_release(v29);
  sub_100006DF4(&qword_1002953F8);
  PassthroughSubject.send(_:)(v11);
  v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v11, v7);
  swift_endAccess(&v43);
  result = ((uint64_t (*)(char *, uint64_t))v30)(v13, v7);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_isSuspended) = 1;
  return result;
}

uint64_t sub_1001A2C58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  uint8_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  char v61[24];
  uint64_t v62;
  id v63;
  unint64_t v64;
  char v65[32];

  v2 = v1;
  v4 = sub_100006DF4(&qword_1002948B0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (id *)((char *)&v50 - v8);
  v10 = sub_100006DF4(&qword_1002953F8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v19 = __chkstk_darwin(v18);
  result = __chkstk_darwin(v19);
  v24 = (char *)&v50 - v23;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_isSuspended) == 1)
  {
    v53 = a1;
    v54 = OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_isSuspended;
    v56 = v22;
    v57 = v21;
    v58 = v7;
    v59 = v10;
    v25 = v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__sessionSuspension;
    swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__sessionSuspension, v65, 0, 0);
    v55 = v25;
    sub_10000B074(v25, (uint64_t)v15, &qword_1002953F8);
    v26 = *((_QWORD *)v15 + 1);
    v63 = *(id *)v15;
    v27 = v63;
    swift_getAtKeyPath(v9, &v63, v26);

    sub_10000B074((uint64_t)v15, (uint64_t)v13, &qword_1002953F8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v16) == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v24, &v13[*(int *)(v59 + 32)], v16);
      sub_10000A020((uint64_t)v13, &qword_1002953F8);
      sub_10000A020((uint64_t)v9, &qword_1002948B0);
    }
    else
    {
      sub_10000A020((uint64_t)v13, &qword_1002953F8);
      (*(void (**)(char *, _QWORD *, uint64_t))(v17 + 32))(v24, v9, v16);
    }
    sub_10000A020((uint64_t)v15, &qword_1002953F8);
    v28 = Date.timeIntervalSince(_:)(v24);
    v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v24, v16);
    if (*(double *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_sessionTimeout) < v28)
      sub_1001A3214();
    if (qword_10028A410 != -1)
      swift_once(&qword_10028A410, sub_100120F20);
    v30 = type metadata accessor for Logger(0);
    sub_10000F66C(v30, (uint64_t)qword_1002AA338);
    v31 = swift_retain_n(v2, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter(v32);
    if (os_log_type_enabled(v32, (os_log_type_t)v33))
    {
      v51 = v29;
      LODWORD(v53) = v33;
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v62 = v52;
      *(_DWORD *)v34 = 136446210;
      v35 = v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID;
      swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID, v61, 0, 0);
      v36 = *(void **)v35;
      v37 = *(_QWORD *)(v35 + 8);
      v38 = *(_QWORD *)(v35 + 16);
      v39 = *(_QWORD *)(v35 + 24);
      v40 = *(_QWORD *)(v35 + 32);
      v60 = v36;
      v50 = v36;
      swift_retain(v37);
      swift_bridgeObjectRetain(v39);
      swift_retain(v40);
      swift_getAtKeyPath(&v63, &v60, v37);
      v41 = v64;
      if (v64)
      {
        v38 = (uint64_t)v63;
        swift_release(v37);

      }
      else
      {
        swift_bridgeObjectRetain(v39);
        swift_release(v37);

        v41 = v39;
      }
      swift_release(v40);
      swift_bridgeObjectRelease();
      v63 = (id)sub_1001A7FE4(v38, v41, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v34 + 4);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v53, "Resumed conversation session with ID: %{public}s", v34, 0xCu);
      v43 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      v29 = v51;
    }
    else
    {

      v42 = swift_release_n(v2, 2);
    }
    *(_BYTE *)(v2 + v54) = 0;
    v44 = v57;
    Date.init()(v42);
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
    v46 = v56;
    v45((uint64_t)v56, v44, v16);
    v47 = v55;
    swift_beginAccess(v55, &v63, 33, 0);
    v48 = *(_QWORD *)(v47 + 8);
    v49 = v58;
    v45((uint64_t)v58, (uint64_t)v46, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v49, 0, 1, v16);
    swift_retain(v48);
    swift_setAtWritableKeyPath(v47, v48, v49);
    swift_release(v48);
    PassthroughSubject.send(_:)(v46);
    v29(v46, v16);
    swift_endAccess(&v63);
    return ((uint64_t (*)(uint64_t, uint64_t))v29)(v44, v16);
  }
  return result;
}

void sub_1001A3214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37[2];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = UUID.init()(v4);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID, &v32, 33, 0);
  v37[0] = v8;
  v37[1] = v10;
  v12 = *(_QWORD *)(v11 + 8);
  v36[0] = v8;
  v36[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  swift_setAtWritableKeyPath(v11, v12, v36);
  swift_release(v12);
  PassthroughSubject.send(_:)(v37);
  swift_bridgeObjectRelease();
  swift_endAccess(&v32);
  sub_100023AB0(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)&v32);
  v13 = v34;
  v14 = v35;
  sub_100023AF4(&v32, v34);
  dispatch thunk of TranslationStore.clearHistory(completion:)(nullsub_1, 0, v13, v14);
  sub_100009C08(&v32);
  KeyPath = swift_getKeyPath(&unk_1001F66B8);
  v16 = swift_getKeyPath(&unk_1001F66E0);
  v32 = _swiftEmptyArrayStorage;
  swift_retain(v1);
  static Published.subscript.setter(&v32, v1, KeyPath, v16);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_lidDisambiguationCounter) = 0;
  v17 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation) = 0;

  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v18 = type metadata accessor for Logger(0);
  sub_10000F66C(v18, (uint64_t)qword_1002AA338);
  v19 = swift_retain_n(v1, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v37[0] = v31;
    *(_DWORD *)v22 = 136446210;
    v23 = *(void **)v11;
    v24 = *(_QWORD *)(v11 + 8);
    v25 = *(_QWORD *)(v11 + 16);
    v26 = *(_QWORD *)(v11 + 24);
    v27 = *(_QWORD *)(v11 + 32);
    v36[0] = v23;
    v28 = v23;
    swift_retain(v24);
    swift_bridgeObjectRetain(v26);
    swift_retain(v27);
    swift_getAtKeyPath(&v32, v36, v24);
    v29 = v33;
    if (v33)
    {
      v25 = (uint64_t)v32;
      swift_release(v24);

    }
    else
    {
      swift_bridgeObjectRetain(v26);
      swift_release(v24);

      v29 = v26;
    }
    swift_release(v27);
    swift_bridgeObjectRelease();
    v32 = (_QWORD *)sub_1001A7FE4(v25, v29, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v22 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Started new conversation session with ID: %{public}s", v22, 0xCu);
    v30 = v31;
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
}

void sub_1001A35B0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  void (*v21)(_QWORD *, _QWORD);
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v8);
  v10 = (char *)&v41[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, "favoriteDate");
  if (v11)
  {
    v12 = v11;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
    {
      sub_10000A020((uint64_t)v10, &qword_1002948B0);
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(a1, "setSessionID:", v13);

      sub_100023AB0(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v41);
      v14 = v42;
      v15 = v43;
      sub_100023AF4(v41, v42);
      dispatch thunk of TranslationStore.save()(v14, v15);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  sub_10000A020((uint64_t)v10, &qword_1002948B0);
  sub_100023AB0(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)v41);
  v16 = v42;
  v17 = v43;
  sub_100023AF4(v41, v42);
  dispatch thunk of TranslationStore.deleteBackground(_:completion:)(a1, nullsub_1, 0, v16, v17);
LABEL_6:
  sub_100009C08(v41);
  KeyPath = swift_getKeyPath(&unk_1001F66B8);
  v19 = swift_getKeyPath(&unk_1001F66E0);
  v20 = a1;
  v21 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v41, v2, KeyPath, v19);
  v23 = v22;
  v24 = sub_1001A4584(v22, v20);

  v25 = *v23;
  if (!((unint64_t)*v23 >> 62))
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v26 >= v24)
      goto LABEL_8;
LABEL_23:
    __break(1u);
    return;
  }
  if (v25 < 0)
    v39 = *v23;
  else
    v39 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v23);
  v26 = _CocoaArrayWrapper.endIndex.getter(v39);
  swift_bridgeObjectRelease(v25);
  if (v26 < v24)
    goto LABEL_23;
LABEL_8:
  sub_1001CC90C(v24, v26);
  v21(v41, 0);
  swift_release(KeyPath);
  swift_release(v19);
  v27 = OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation;
  v28 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation);
  if (v28)
  {
    v29 = objc_msgSend(v28, "identifier");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v33 = objc_msgSend(v20, "identifier");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  if (!v32)
  {
    swift_bridgeObjectRelease(v36);
    return;
  }
  if (v30 == v34 && v32 == v36)
  {
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v36, 0);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v36);
    if ((v37 & 1) == 0)
      return;
  }
  v38 = *(void **)(v2 + v27);
  *(_QWORD *)(v2 + v27) = 0;

}

void sub_1001A3970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _BYTE v34[24];
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  sub_100023AB0(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store, (uint64_t)&v35);
  v2 = v37;
  v29 = v38;
  sub_100023AF4(&v35, v37);
  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID, v34, 0, 0);
  v4 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  v33 = *(id *)v3;
  v8 = v33;
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  swift_getAtKeyPath(&v31, &v33, v4);
  v9 = v32;
  if (v32)
  {
    v6 = v31;
    swift_release(v4);

  }
  else
  {
    swift_bridgeObjectRetain(v5);
    swift_release(v4);

    v9 = v5;
  }
  swift_release(v7);
  swift_bridgeObjectRelease();
  v10 = dispatch thunk of TranslationStore.translations(with:)(v6, v9, v2, v29);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_1001F66B8);
  v12 = swift_getKeyPath(&unk_1001F66E0);
  v31 = v10;
  swift_retain(v1);
  static Published.subscript.setter(&v31, v1, KeyPath, v12);
  sub_100009C08(&v35);
  if (qword_10028A410 != -1)
    swift_once(&qword_10028A410, sub_100120F20);
  v13 = type metadata accessor for Logger(0);
  sub_10000F66C(v13, (uint64_t)qword_1002AA338);
  v14 = swift_retain_n(v1, 4);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(32, -1);
    v31 = v30;
    *(_DWORD *)v17 = 134349314;
    v18 = swift_getKeyPath(&unk_1001F66B8);
    v19 = swift_getKeyPath(&unk_1001F66E0);
    static Published.subscript.getter(&v35, v1, v18);
    swift_release(v18);
    swift_release(v19);
    if ((unint64_t)v35 >> 62)
    {
      if (v35 < 0)
        v28 = v35;
      else
        v28 = v35 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v35);
      v20 = _CocoaArrayWrapper.endIndex.getter(v28);
      swift_release(v1);
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_release(v1);
    }
    swift_bridgeObjectRelease();
    v35 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v17 + 4);
    swift_release(v1);
    *(_WORD *)(v17 + 12) = 2082;
    v21 = *(id *)v3;
    v22 = *(_QWORD *)(v3 + 8);
    v23 = *(_QWORD *)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 24);
    v25 = *(_QWORD *)(v3 + 32);
    v33 = v21;
    v26 = v21;
    swift_retain(v22);
    swift_bridgeObjectRetain(v24);
    swift_retain(v25);
    swift_getAtKeyPath(&v35, &v33, v22);
    v27 = v36[0];
    if (v36[0])
    {
      v23 = v35;
      swift_release(v22);

    }
    else
    {
      swift_bridgeObjectRetain(v24);
      swift_release(v22);

      v27 = v24;
    }
    swift_release(v25);
    swift_bridgeObjectRelease();
    v35 = sub_1001A7FE4(v23, v27, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v17 + 14);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Loaded %{public}ld translations for conversation session with ID: %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v1, 4);
  }
}

uint64_t sub_1001A3D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__translations;
  v2 = sub_100006DF4((uint64_t *)&unk_100295410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  sub_10000A020(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__sessionSuspension, &qword_1002953F8);
  sub_100009C08((_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store));
  v4 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID + 8);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID + 32));
  swift_bridgeObjectRelease();
  swift_release(v3);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A3E4C()
{
  return type metadata accessor for TranslationAppSession(0);
}

uint64_t type metadata accessor for TranslationAppSession(uint64_t a1)
{
  uint64_t result;

  result = qword_100297E08;
  if (!qword_100297E08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslationAppSession);
  return result;
}

void sub_1001A3E90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  sub_1001A3F44(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    sub_1001A3F9C(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1001F6650;
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[5] = &unk_1001F6650;
      v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[7] = &unk_1001F6668;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

void sub_1001A3F44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100297E18)
  {
    v2 = sub_1000070BC(&qword_100298790);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100297E18);
  }
}

void sub_1001A3F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100297E20)
  {
    v2 = type metadata accessor for Date(255);
    v5 = type metadata accessor for UserDefault(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100297E20);
  }
}

uint64_t sub_1001A3FF0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for TranslationAppSession(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

void sub_1001A4034(char *a1, void (*a2)(uint64_t *, _QWORD), int a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  uint64_t *v36;
  char *v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  id v46;
  char v47[24];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];
  _QWORD v53[6];

  v44 = a4;
  v45 = a3;
  KeyPath = a9;
  v16 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v16);
  v43 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(char **)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (uint64_t)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53[3] = a6;
  v53[4] = a8;
  v22 = sub_1000122F8(v53);
  (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(v22, a1, a6);
  v52[3] = a7;
  v52[4] = a9;
  v23 = sub_1000122F8(v52);
  (*(void (**)(_QWORD *, void (*)(uint64_t *, _QWORD), uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v23, a2, a7);
  v24 = sub_10001D948();
  *(_QWORD *)v21 = static OS_dispatch_queue.main.getter(v24);
  (*((void (**)(uint64_t, _QWORD, uint64_t))v19 + 13))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  LOBYTE(a7) = _dispatchPreconditionTest(_:)(v21);
  (*((void (**)(uint64_t, uint64_t))v19 + 1))(v21, v18);
  if ((a7 & 1) != 0)
  {
    v19 = a5;
    sub_100023AB0((uint64_t)&a5[OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_store], (uint64_t)&v48);
    v25 = v50;
    v26 = v51;
    sub_100023AF4(&v48, v50);
    a5 = (char *)dispatch thunk of TranslationStore.insert(speech:translationResult:isFavorite:)(v53, v52, v45 & 1, v25, v26);
    if (!a5)
    {
      sub_100009C08(&v48);
LABEL_9:
      sub_100009C08(v53);
      sub_100009C08(v52);
      return;
    }
    sub_100009C08(&v48);
    v27 = &v19[OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID];
    swift_beginAccess(&v19[OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession__currentID], v47, 0, 0);
    v28 = *((_QWORD *)v27 + 1);
    v29 = *((_QWORD *)v27 + 3);
    v30 = *((_QWORD *)v27 + 4);
    v46 = *(id *)v27;
    v31 = v46;
    swift_retain(v28);
    swift_bridgeObjectRetain(v29);
    swift_retain(v30);
    swift_getAtKeyPath(&v48, &v46, v28);
    v32 = v49;
    if (v49)
    {
      swift_release(v28);

    }
    else
    {
      swift_bridgeObjectRetain(v29);
      swift_release(v28);

      v32 = v29;
    }
    v33 = v44;
    v34 = (uint64_t)v43;
    swift_release(v30);
    swift_bridgeObjectRelease(v29);
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(a5, "setSessionID:", v35, swift_bridgeObjectRelease(v32).n128_f64[0]);

    sub_10000B074(v33, v34, (uint64_t *)&unk_10028F1B0);
    dispatch thunk of PersistedTranslation.selfLoggingInvocationId.setter(v34);
    KeyPath = swift_getKeyPath(&unk_1001F66B8);
    v18 = swift_getKeyPath(&unk_1001F66E0);
    a1 = a5;
    a2 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify(&v48, v19, KeyPath, v18);
    v21 = *v36;
    if (!((unint64_t)*v36 >> 62))
    {
LABEL_8:
      sub_1001CBF04(0, 0, (uint64_t)a1);
      a2(&v48, 0);
      swift_release(KeyPath);
      swift_release(v18);
      v37 = v19;
      v38 = *(void **)&v19[OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation];
      *(_QWORD *)&v37[OBJC_IVAR____TtC17SequoiaTranslator21TranslationAppSession_selectedTranslation] = a5;
      v39 = a1;

      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  if (v21 < 0)
    v40 = v21;
  else
    v40 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v41 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease(v21);
  if ((v41 & 0x8000000000000000) == 0)
    goto LABEL_8;
  __break(1u);
}

uint64_t sub_1001A43E4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = 0;
    v21 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "identifier", v21);
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = objc_msgSend(a2, "identifier");
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v15 = v14;

      if (v10 == v3 && v12 == v15)
      {

        swift_bridgeObjectRelease_n(v12, 2);
        return v6;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v3, v15, 0);

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v15);
      if ((v17 & 1) != 0)
        return v6;
      v18 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      ++v6;
      if (v18 == v5)
        return 0;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_1001A4584(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  id v9;
  unint64_t i;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  id v24;
  id v25;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unint64_t v45;

  v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  v44 = a2;
  v45 = sub_1001A43E4(v6, a2);
  v8 = v7;
  swift_bridgeObjectRelease(v5);
  v43 = v2;
  if (v2)
    return v45;
  if ((v8 & 1) == 0)
  {
    v9 = (id)(v45 + 1);
    if (__OFADD__(v45, 1))
      goto LABEL_63;
    v5 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_64:
      if ((v5 & 0x8000000000000000) != 0)
        v39 = v5;
      else
        v39 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v40 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(v5);
      if (v9 != (id)v40)
        goto LABEL_6;
    }
    else if (v9 != *(id *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v45 + 5; ; ++i)
      {
        v5 = i - 4;
        v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v11);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          if (v5 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v12 = *(id *)(v11 + 8 * i);
        }
        v13 = v12;
        v14 = objc_msgSend(v12, "identifier", v43);
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v17 = v16;

        v9 = objc_msgSend(v44, "identifier");
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v20 = v19;

        if (v15 == v18 && v17 == v20)
        {

          swift_bridgeObjectRelease_n(v17, 2);
          goto LABEL_38;
        }
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v20, 0);

        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v20);
        if ((v22 & 1) != 0)
          goto LABEL_38;
        if (v5 != v45)
          break;
LABEL_35:
        if (__OFADD__(v45, 1))
          goto LABEL_56;
        ++v45;
LABEL_38:
        v9 = (id)(i - 3);
        if (__OFADD__(v5, 1))
          goto LABEL_55;
        v34 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v34 < 0)
            v36 = *a1;
          else
            v36 = v34 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v35 = _CocoaArrayWrapper.endIndex.getter(v36);
          swift_bridgeObjectRelease(v34);
        }
        else
        {
          v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == (id)v35)
          return v45;
      }
      v23 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, *a1);
        v23 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_21:
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_59;
          if (v5 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_60;
          v25 = *(id *)(v23 + 8 * i);
          goto LABEL_24;
        }
      }
      else
      {
        if ((v45 & 0x8000000000000000) != 0)
          goto LABEL_57;
        if (v45 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_58;
        v24 = *(id *)(v23 + 8 * v45 + 32);
        if ((v23 & 0xC000000000000001) == 0)
          goto LABEL_21;
      }
      v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v23);
      v23 = *a1;
LABEL_24:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v23);
      *a1 = v23;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v23 < 0 || (v23 & 0x4000000000000000) != 0)
      {
        v23 = sub_1000808EC(v23);
        *a1 = v23;
      }
      v27 = *(void **)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v45 + 0x20);
      *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v45 + 0x20) = v25;

      specialized Array._endMutation()(v28);
      v29 = *a1;
      v30 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v29;
      if (!v30 || v29 < 0 || (v29 & 0x4000000000000000) != 0)
      {
        v29 = sub_1000808EC(v29);
        *a1 = v29;
      }
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_61;
      v31 = v29 & 0xFFFFFFFFFFFFFF8;
      if (v5 >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_62;
      v32 = *(void **)(v31 + 8 * i);
      *(_QWORD *)(v31 + 8 * i) = v24;

      specialized Array._endMutation()(v33);
      goto LABEL_35;
    }
    return v45;
  }
  v37 = *a1;
  if (!((unint64_t)v37 >> 62))
    return *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v37 < 0)
    v41 = v37;
  else
    v41 = v37 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v37);
  v42 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease(v37);
  return v42;
}

unint64_t sub_1001A4954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4(qword_100294908);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000B074(v7, (uint64_t)&v16, &qword_1002980F0);
    v8 = v16;
    v9 = v17;
    result = sub_1001A869C(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10003EA2C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A4A88(uint64_t a1)
{
  return sub_1001A5180(a1, &qword_100298090, (uint64_t *)&unk_1002980A0, (uint64_t (*)(uint64_t))sub_1001A876C);
}

unint64_t sub_1001A4AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4(&qword_100298138);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000B074(v7, (uint64_t)v16, &qword_100298140);
    result = sub_1001A87EC((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10003EA2C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A4BE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4((uint64_t *)&unk_100298160);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v18 = v1;
  v6 = (_BYTE *)(v1 + 56);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 3);
    v8 = *((_QWORD *)v6 - 2);
    v9 = *((_QWORD *)v6 - 1);
    v10 = *v6;
    v11 = swift_retain(v7);
    result = sub_1001A884C(v11);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v7;
    v14 = v4[7] + 24 * result;
    *(_QWORD *)v14 = v8;
    *(_QWORD *)(v14 + 8) = v9;
    *(_BYTE *)(v14 + 16) = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v4[2] = v17;
    v6 += 32;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v18;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A4D08(uint64_t a1)
{
  return sub_1001A4E30(a1, (uint64_t *)&unk_1002948C0);
}

unint64_t sub_1001A4D14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4(&qword_100298198);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1001A869C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A4E24(uint64_t a1)
{
  return sub_1001A4E30(a1, &qword_100298158);
}

unint64_t sub_1001A4E30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_1001A869C(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A4F44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4((uint64_t *)&unk_1002980C0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    result = sub_1001A88A4(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A5044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4(&qword_1002980F8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1001A869C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A5164(uint64_t a1)
{
  return sub_1001A5180(a1, &qword_100298100, (uint64_t *)&unk_100298108, (uint64_t (*)(uint64_t))sub_1001A876C);
}

unint64_t sub_1001A5180(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006DF4(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_10000B074(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_10003EA2C(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1001A52A8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  NSString v34;
  unint64_t v35;
  ValueMetadata *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  NSString v55;
  id v56;
  char v57;
  objc_class *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t KeyPath;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  id v72;
  NSString v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  ValueMetadata *v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  void *v89;
  Swift::Bool v90;
  uint64_t v91;
  id v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  id v99;
  id v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  Swift::Bool v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  double v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t);
  char *v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  _QWORD v143[3];
  uint64_t v144;
  uint64_t v145;
  _QWORD v146[3];
  ValueMetadata *v147;
  unint64_t v148;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v139 = (char *)&v135 - v9;
  v10 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of PersistedTranslation.sourceLocale.getter(v11);
  v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v14(v13, 0, 1, v4);
  v15 = v1 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_sourceLocale;
  swift_beginAccess(v15, v146, 33, 0);
  sub_1001A6BD4((uint64_t)v13, v15);
  v16 = swift_endAccess(v146);
  dispatch thunk of PersistedTranslation.targetLocale.getter(v16);
  v140 = v4;
  v14(v13, 0, 1, v4);
  v17 = v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_targetLocale;
  swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_targetLocale, v146, 33, 0);
  sub_1001A6BD4((uint64_t)v13, v17);
  swift_endAccess(v146);
  v147 = &type metadata for TranslateFeatures;
  v148 = sub_100009BC4();
  LOBYTE(v146[0]) = 5;
  LOBYTE(v17) = isFeatureEnabled(_:)(v146);
  sub_100009C08(v146);
  if ((v17 & 1) != 0)
  {
    v18 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedTranslation);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedTranslation) = a1;
    v19 = a1;

    v21 = dispatch thunk of PersistedTranslation.disambiguableResult.getter(v20);
    v22 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult;
    v23 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult) = v21;

    v24 = *(void **)(v2 + v22);
    if (v24)
      objc_msgSend(v24, "setDelegate:", v2);
    v25 = sub_1001AD668();
    objc_msgSend(v25, "setDelegate:", v2);

    v26 = sub_1001ADBD4();
    objc_msgSend(v26, "setDelegate:", v2);

  }
  v27 = sub_1001AD220();
  v28 = v139;
  v29 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v27);
  static Locale.current.getter(v29);
  Locale.sqDisplayName(context:in:)(4, v8);
  v31 = v30;
  v32 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v33 = v140;
  v32(v8, v140);
  v138 = v32;
  v32((uint64_t)v28, v33);
  if (v31)
  {
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v34 = 0;
  }
  objc_msgSend(v27, "setText:", v34);

  dispatch thunk of PersistedTranslation.speechResult.getter(v146);
  v36 = v147;
  v35 = v148;
  sub_100023AF4(v146, (uint64_t)v147);
  dispatch thunk of SanitizedResult.sanitizedFormattedString.getter(v36, *(_QWORD *)(*(_QWORD *)(v35 + 16) + 16));
  if (v37)
  {
    v38 = v37;
    sub_100009C08(v146);
    v39 = sub_1001AD668();
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v38);
    objc_msgSend(v39, "setText:", v40);

LABEL_10:
    goto LABEL_15;
  }
  sub_100009C08(v146);
  dispatch thunk of PersistedTranslation.speechResult.getter(v143);
  v41 = v144;
  v42 = v145;
  sub_100023AF4(v143, v144);
  dispatch thunk of SpeechResult.alternatives.getter(&v141, v41, v42);
  if (v142)
  {
    sub_10003E994(&v141, (uint64_t)v146);
    sub_100009C08(v143);
    v43 = sub_1001AD668();
    sub_1001AC590(v43, v146);

    sub_100009C08(v146);
  }
  else
  {
    sub_10000A020((uint64_t)&v141, &qword_100298060);
    sub_100009C08(v143);
    v44 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult);
    if (!v44)
    {
      v106 = sub_1001AD668();
      dispatch thunk of PersistedTranslation.displaySourceText.getter(v106);
      v108 = v107;
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v108);
      objc_msgSend(v106, "setText:", v40);

      goto LABEL_10;
    }
    v45 = v44;
    v46 = sub_1001A6C1C(0);

    v47 = sub_1001AD668();
    objc_msgSend(v47, "setAttributedText:", v46);

  }
LABEL_15:
  sub_1001B039C();
  v48 = sub_1001AD9C4();
  v49 = v139;
  v50 = dispatch thunk of PersistedTranslation.targetLocale.getter(v48);
  static Locale.current.getter(v50);
  Locale.sqDisplayName(context:in:)(4, v8);
  v52 = v51;
  v53 = v140;
  v54 = (void (*)(char *, uint64_t))v138;
  v138(v8, v140);
  v54(v49, v53);
  if (v52)
  {
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v52);
  }
  else
  {
    v55 = 0;
  }
  objc_msgSend(v48, "setText:", v55);

  v56 = sub_1001ADF84();
  v57 = 1;
  objc_msgSend(v56, "setHidden:", 1);

  v135 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions);
  v58 = sub_1000216BC();
  -[objc_class setSelected:](v58, "setSelected:", dispatch thunk of PersistedTranslation.isFavorite.getter() & 1);

  v59 = sub_1001AE4F0();
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded) & 1) == 0)
    v57 = dispatch thunk of PersistedTranslation.isFavorite.getter() ^ 1;
  objc_msgSend(v59, "setHidden:", v57 & 1);

  v60 = objc_msgSend(a1, "targetResult");
  if (!v60)
  {
    v71 = (uint64_t)v139;
    dispatch thunk of PersistedTranslation.sourceLocale.getter(v61);
    sub_1001AF608((uint64_t)_swiftEmptyArrayStorage, v71);
    v138(v71, v140);
    v72 = sub_1001ADBD4();
    v73 = String._bridgeToObjectiveC()();
    objc_msgSend(v72, "setText:", v73);

    if (qword_10028A410 == -1)
      goto LABEL_24;
    goto LABEL_64;
  }
  v62 = dispatch thunk of PersistedTranslation.hasAlternatives.getter();
  if ((v62 & 1) != 0)
  {
    v63 = PersistedTranslation.selectedAlternativeIndex.getter(v62);
    v64 = v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex;
    *(_QWORD *)v64 = v63;
    *(_BYTE *)(v64 + 8) = 0;
    v65 = dispatch thunk of PersistedTranslation.alternatives.getter();
    v66 = (uint64_t)v139;
    dispatch thunk of PersistedTranslation.sourceLocale.getter(v65);
    sub_1001AF608(v65, v66);
    swift_bridgeObjectRelease(v65);
    v138(v66, v140);
    sub_1001AFB98();
    v146[0] = a1;
    KeyPath = swift_getKeyPath(&unk_1001F6798);
    v68 = swift_allocObject(&unk_100270580, 24, 7);
    swift_unknownObjectWeakInit(v68 + 16, v2);
    v69 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_1001A75BC, v68, &protocol witness table for NSObject);
    swift_release(KeyPath);
    swift_release(v68);
    v70 = *(NSObject **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeObservation);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeObservation) = v69;
  }
  else
  {
    v78 = (uint64_t)v139;
    dispatch thunk of PersistedTranslation.sourceLocale.getter(v62);
    sub_1001AF608((uint64_t)_swiftEmptyArrayStorage, v78);
    v138(v78, v140);
    v79 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult);
    if (v79)
    {
      v80 = v79;
      v81 = sub_1001A6C1C(1);

      v82 = sub_1001ADBD4();
      objc_msgSend(v82, "setAttributedText:", v81);
    }
    else
    {
      v81 = sub_1001ADBD4();
      dispatch thunk of PersistedTranslation.displayText.getter(v81);
      v84 = v83;
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v84);
      objc_msgSend(v81, "setText:", v82);
    }

    dispatch thunk of PersistedTranslation.translationResult.getter(v146);
    v85 = v147;
    v86 = v148;
    sub_100023AF4(v146, (uint64_t)v147);
    LOBYTE(v85) = TranslationResult.isLowConfidence.getter(v85, v86);
    v87 = sub_100009C08(v146);
    if ((v85 & 1) == 0)
      goto LABEL_32;
    v70 = sub_1001ADF84();
    -[NSObject setHidden:](v70, "setHidden:", 0);
  }
  while (1)
  {

LABEL_32:
    v136 = v8;
    v88 = v139;
    v89 = a1;
    dispatch thunk of PersistedTranslation.sourceLocale.getter(v87);
    v90 = Locale.isRTL()();
    v138((uint64_t)v88, v140);
    v91 = v90 ? 2 : 0;
    v92 = sub_1001AD668();
    objc_msgSend(v92, "setTextAlignment:", v91);

    v93 = (uint64_t *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows);
    swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows, v146, 0, 0);
    v8 = *v93;
    v94 = (unint64_t)*v93 >> 62;
    v137 = v2;
    if (v94)
    {
      if (v8 < 0)
        v109 = v8;
      else
        v109 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v8, 2);
      v95 = _CocoaArrayWrapper.endIndex.getter(v109);
      if (!v95)
        goto LABEL_51;
    }
    else
    {
      v95 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v8, 2);
      if (!v95)
        goto LABEL_51;
    }
    if (v95 >= 1)
      break;
    __break(1u);
LABEL_64:
    swift_once(&qword_10028A410, sub_100120F20);
LABEL_24:
    v74 = type metadata accessor for Logger(0);
    v75 = sub_10000F66C(v74, (uint64_t)qword_1002AA338);
    v70 = Logger.logObject.getter(v75);
    v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v76, "No target translation, setting to empty string", v77, 2u);
      swift_slowDealloc(v77, -1, -1);
    }
  }
  v96 = 0;
  do
  {
    if ((v8 & 0xC000000000000001) != 0)
      v97 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v96, v8);
    else
      v97 = *(id *)(v8 + 8 * v96 + 32);
    v98 = v97;
    v99 = sub_10015C8DC();
    objc_msgSend(v99, "setTextAlignment:", v91);

    v100 = sub_10015CA58();
    objc_msgSend(v100, "setTextAlignment:", v91);

    v101 = v139;
    dispatch thunk of PersistedTranslation.sourceLocale.getter(v102);
    LOBYTE(v100) = Locale.isRTL()();
    v138((uint64_t)v101, v140);
    if ((v100 & 1) != 0)
      v103 = 4;
    else
      v103 = 3;
    ++v96;
    objc_msgSend(v98, "setSemanticContentAttribute:", v103);
    v104 = sub_10015CEF8();
    objc_msgSend(v104, "setSemanticContentAttribute:", v103);

    v105 = sub_10015CC08();
    objc_msgSend(v105, "setSemanticContentAttribute:", v103);

  }
  while (v95 != v96);
LABEL_51:
  v110 = swift_bridgeObjectRelease_n(v8, 2);
  v111 = v139;
  dispatch thunk of PersistedTranslation.targetLocale.getter(v110);
  v112 = Locale.isRTL()();
  v113 = v140;
  v114 = v138;
  v138((uint64_t)v111, v140);
  if (v112)
    v115 = 2;
  else
    v115 = 0;
  v116 = v137;
  v117 = sub_1001ADBD4();
  objc_msgSend(v117, "setTextAlignment:", v115);

  v119 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v118);
  v120 = v136;
  dispatch thunk of PersistedTranslation.targetLocale.getter(v119);
  LOBYTE(v117) = static Locale.== infix(_:_:)(v111, v120);
  v114(v120, v113);
  v114((uint64_t)v111, v113);
  v121 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_isIdentity;
  *(_BYTE *)(v116 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_isIdentity) = v117 & 1;
  v122 = sub_1001AD418();
  objc_msgSend(v122, "setHidden:", *(unsigned __int8 *)(v116 + v121));

  v123 = sub_1001AD9C4();
  objc_msgSend(v123, "setHidden:", *(unsigned __int8 *)(v116 + v121));

  v124 = sub_1001ADBD4();
  objc_msgSend(v124, "setHidden:", *(unsigned __int8 *)(v116 + v121));

  sub_1001B0890();
  v143[0] = v89;
  v125 = swift_getKeyPath(&unk_1001F6710);
  v126 = swift_allocObject(&unk_100270580, 24, 7);
  swift_unknownObjectWeakInit(v126 + 16, v116);
  v127 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v125, 0, sub_1001A7548, v126, &protocol witness table for NSObject);
  swift_release(v125);
  swift_release(v126);
  v128 = *(void **)(v116 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_favoriteObservation);
  *(_QWORD *)(v116 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_favoriteObservation) = v127;

  objc_msgSend(v89, "ttsPlaybackRateDouble");
  if (v129 == 0.5)
  {
    v130 = 0;
  }
  else if (v129 == 0.75)
  {
    v130 = 1;
  }
  else if (v129 == 1.0 || v129 != 1.25)
  {
    v130 = 2;
  }
  else
  {
    v130 = 3;
  }
  sub_100023320(v130);
  v143[0] = v89;
  v131 = swift_getKeyPath(&unk_1001F6758);
  v132 = swift_allocObject(&unk_100270580, 24, 7);
  swift_unknownObjectWeakInit(v132 + 16, v116);
  v133 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v131, 0, sub_1001A75A0, v132, &protocol witness table for NSObject);
  swift_release(v131);
  swift_release(v132);
  v134 = *(void **)(v116 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_ttsPlaybackRateObservation);
  *(_QWORD *)(v116 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_ttsPlaybackRateObservation) = v133;

}

uint64_t sub_1001A602C()
{
  void *v0;
  double v1;

  objc_msgSend(v0, "ttsPlaybackRateDouble");
  if (v1 == 0.5)
    return 0;
  if (v1 == 0.75)
    return 1;
  if (v1 == 1.0)
    return 2;
  if (v1 == 1.25)
    return 3;
  return 4;
}

unint64_t sub_1001A60A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t result;

  v6 = dispatch thunk of SpeechTokenBin.tokenAlternatives.getter();
  result = dispatch thunk of SpeechTokenBin.bestAlternative.getter(a1, a2);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v6 + 16))
  {
    sub_100023AB0(v6 + 40 * result + 32, a3);
    return swift_bridgeObjectRelease(v6);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A6120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = dispatch thunk of SpeechTokenBin.tokenAlternatives.getter(a2, a3);
  v4 = sub_1001AC3F4(v3, (uint64_t (*)(unint64_t, _BYTE *))sub_1001AC7C0);
  swift_bridgeObjectRelease(v3);
  return v4;
}

id sub_1001A619C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  Class isa;
  id v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v5 = sub_1001A6120(a1, a2, a3);
  v6 = sub_1001A6120(0, a2, a3);
  sub_1001A60A8(a2, a3, (uint64_t)v20);
  v7 = v21;
  v8 = v22;
  sub_100023AF4(v20, v21);
  v9 = dispatch thunk of SpeechTokenAlternatives.isLowConfidence.getter(v7, v8);
  sub_100009C08(v20);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
LABEL_6:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v10 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease(v6);
  if (!v10 || !*(_QWORD *)(v5 + 16))
    goto LABEL_6;
  sub_1001A60A8(a2, a3, (uint64_t)v20);
  v11 = v21;
  v12 = v22;
  sub_100023AF4(v20, v21);
  dispatch thunk of SpeechTokenAlternatives.text.getter(v11, v12);
  v14 = v13;
  v15 = objc_allocWithZone((Class)NSTextAlternatives);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  v18 = objc_msgSend(v15, "initWithPrimaryString:alternativeStrings:isLowConfidence:", v16, isa, 1);

  sub_100009C08(v20);
  return v18;
}

uint64_t sub_1001A6320(uint64_t a1, uint64_t a2)
{
  return sub_1001A6420(a1, a2, (unint64_t *)&unk_10028FE60, UIView_ptr);
}

unint64_t sub_1001A6334(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v9 = 4 * v4;
  v10 = 15;
  while (1)
  {
    v11 = String.subscript.getter(v10, a3, a4);
    v13 = v12;
    if (v11 == a1 && v12 == a2)
      break;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) != 0)
      return v10;
    v10 = String.index(after:)(v10, a3, a4);
    if (v9 == v10 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease(a2);
  return v10;
}

uint64_t sub_1001A6420(uint64_t result, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  char v11;
  uint64_t i;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;

  v7 = result;
  if ((unint64_t)a2 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v9 = *(id *)(a2 + 32);
    }
    v10 = v9;
    a4 = (_QWORD *)sub_10000A05C(0, a3, a4);
    v11 = static NSObject.== infix(_:_:)(v10, v7);

    if ((v11 & 1) != 0)
      return 0;
    for (i = 0; ; ++i)
    {
      a3 = (unint64_t *)(i + 1);
      if (__OFADD__(i, 1))
        break;
      if (a3 == (unint64_t *)v8)
        return 0;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }
      else
      {
        if (((unint64_t)a3 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if ((unint64_t)a3 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v13 = *(id *)(a2 + 32 + 8 * (_QWORD)a3);
      }
      v14 = v13;
      v15 = static NSObject.== infix(_:_:)(v13, v7);

      if ((v15 & 1) != 0)
        return (uint64_t)a3;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0)
      v16 = a2;
    else
      v16 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v16);
    result = swift_bridgeObjectRelease(a2);
  }
  return 0;
}

uint64_t sub_1001A65B8(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;

  if (dispatch thunk of SpeechTokenBin.bestAlternative.getter(a5, a6) == a1 && (a4 & 1) == 0)
    return 0;
  v9 = a2[3];
  v10 = a2[4];
  sub_100023AF4(a2, v9);
  return dispatch thunk of SpeechTokenAlternatives.text.getter(v9, v10);
}

void sub_1001A662C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, "interactedIndices");
  if (v3)
  {
    v4 = v3;
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for Int);

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void sub_1001A6690(_QWORD *a1, void **a2)
{
  void *v2;
  NSArray v3;
  Class isa;

  v2 = *a2;
  if (*a1)
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v3.super.isa = 0;
  isa = v3.super.isa;
  objc_msgSend(v2, "setInteractedIndices:");

}

void sub_1001A66EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v10[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = Strong + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex;
    v7 = *(_QWORD *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex);
    v8 = *(_BYTE *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex + 8);
    v9 = ((uint64_t (*)(void))PersistedTranslation.selectedAlternativeIndex.getter)();
    if ((v8 & 1) != 0 || v7 != v9)
    {
      *(_QWORD *)v6 = PersistedTranslation.selectedAlternativeIndex.getter(v9);
      *(_BYTE *)(v6 + 8) = 0;
      sub_1001AFB98();
    }

  }
}

uint64_t sub_1001A6788@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "favoriteDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1001A680C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B074(a1, (uint64_t)v6, &qword_1002948B0);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setFavoriteDate:", isa);

}

void sub_1001A68F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  _BYTE *v5;
  id v6;
  objc_class *v7;
  id v8;
  int v9;
  _BYTE v10[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (_BYTE *)Strong;
    v6 = *(id *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions);
    v7 = sub_1000216BC();

    -[objc_class setSelected:](v7, "setSelected:", dispatch thunk of PersistedTranslation.isFavorite.getter() & 1);
    v8 = sub_1001AE4F0();
    if ((v5[OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded] & 1) != 0)
      LOBYTE(v9) = 1;
    else
      v9 = dispatch thunk of PersistedTranslation.isFavorite.getter() ^ 1;
    objc_msgSend(v8, "setHidden:", v9 & 1);

    sub_1001B0890();
  }
}

void sub_1001A69E0(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  id v7;
  double v8;
  char v9;
  _BYTE v10[24];

  v3 = *a1;
  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = *(id *)(Strong + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions);
    objc_msgSend(v3, "ttsPlaybackRateDouble");
    if (v8 == 0.5)
    {
      v9 = 0;
    }
    else if (v8 == 0.75)
    {
      v9 = 1;
    }
    else if (v8 == 1.0 || v8 != 1.25)
    {
      v9 = 2;
    }
    else
    {
      v9 = 3;
    }
    sub_100023320(v9);

  }
}

uint64_t sub_1001A6BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_1001A6C1C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  NSString *v7;
  uint64_t v8;
  unint64_t v9;
  Class isa;
  void *v11;
  id v12;
  _QWORD aBlock[5];
  uint64_t v15;
  _BYTE v16[72];

  v2 = v1;
  v4 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v4, v16);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  v6 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  v7 = NSForegroundColorAttributeName;
  if (a1)
    v8 = static UIColor.targetTextColor.getter(v7);
  else
    v8 = static UIColor.sourceTextColor.getter(v7);
  *(_QWORD *)(inited + 64) = v6;
  *(_QWORD *)(inited + 40) = v8;
  v9 = sub_1001A5180(inited, &qword_100298090, (uint64_t *)&unk_1002980A0, (uint64_t (*)(uint64_t))sub_1001A876C);
  type metadata accessor for Key(0);
  sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  aBlock[4] = sub_1001A6DB8;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001A7408;
  aBlock[3] = &unk_100270598;
  v11 = _Block_copy(aBlock);
  swift_release(v15);
  v12 = objc_msgSend(v2, "generateAttributedStringForLocation:withGlobalAttributes:attributeProvider:", a1, isa, v11);
  _Block_release(v11);

  return v12;
}

uint64_t sub_1001A6DB8(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  NSString *v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSString *v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  _OWORD v69[2];
  __int128 v70;
  _QWORD *v71;
  char v72[80];

  v66 = a2;
  v8 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DisambiguationLinkInfo(0);
  v67 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v65 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v64 - v17;
  v19 = sub_100006DF4(&qword_100298070);
  inited = swift_initStackObject(v19, v72);
  *(_OWORD *)(inited + 16) = xmmword_1001E64F0;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  v21 = sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
  v22 = NSForegroundColorAttributeName;
  if (a5)
    v23 = static UIColor.targetLinkColor.getter(v22);
  else
    v23 = static UIColor.sourceLinkColor.getter(v22);
  *(_QWORD *)(inited + 64) = v21;
  *(_QWORD *)(inited + 40) = v23;
  v24 = sub_1001A5180(inited, &qword_100298090, (uint64_t *)&unk_1002980A0, (uint64_t (*)(uint64_t))sub_1001A876C);
  v25 = objc_msgSend(a3, "links");
  v26 = sub_10000A05C(0, &qword_100298078, _LTDisambiguationLinkConfiguration_ptr);
  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

  v28 = sub_1001A6420(a4, v27, &qword_100298078, _LTDisambiguationLinkConfiguration_ptr);
  v30 = v29;
  swift_bridgeObjectRelease(v27);
  if ((v30 & 1) != 0)
  {
    swift_bridgeObjectRelease(v24);
    if (qword_10028A428 != -1)
      swift_once(&qword_10028A428, sub_100120F9C);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10000F66C(v49, (uint64_t)qword_1002AA380);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.fault.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "LinkAttributeProvider gave invalid arguments; can't find linkConfiguration inside node",
        v53,
        2u);
      swift_slowDealloc(v53, -1, -1);
    }

    return 0;
  }
  v31 = objc_msgSend(v66, "UUID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v28 & 0x8000000000000000) == 0)
  {
    DisambiguationLinkInfo.init(sentenceUUID:linkIndex:)(v13, v28);
    v32 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v33 = JSONEncoder.init()();
    v34 = sub_100007D5C((unint64_t *)&unk_100298080, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
    v35 = dispatch thunk of JSONEncoder.encode<A>(_:)(v18, v14, v34);
    v36 = v67;
    v56 = v35;
    v58 = v57;
    v59 = swift_release(v33);
    static String.Encoding.utf8.getter(v59);
    v60 = String.init(data:encoding:)(v56, v58, v10);
    if (v61)
    {
      v71 = &type metadata for String;
      *(_QWORD *)&v70 = v60;
      *((_QWORD *)&v70 + 1) = v61;
      sub_10003EA2C(&v70, v69);
      v62 = UITextItemTagAttributeName;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
      v68 = v24;
      sub_1001AAB5C(v69, v62, isUniquelyReferenced_nonNull_native);
      v54 = v68;

      swift_bridgeObjectRelease(0x8000000000000000);
      sub_1000D6A40(v56, v58);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v14);
      return v54;
    }
    swift_bridgeObjectRelease(v24);
    sub_1000D6A40(v56, v58);
    v37 = v65;
    if (qword_10028A428 != -1)
      swift_once(&qword_10028A428, sub_100120F9C);
    v38 = type metadata accessor for Logger(0);
    sub_10000F66C(v38, (uint64_t)qword_1002AA380);
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 16))(v37, v18, v14);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v70 = v43;
      *(_DWORD *)v42 = 136446210;
      v44 = sub_100007D5C(&qword_100292AF8, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v14, v44);
      v47 = v46;
      *(_QWORD *)&v69[0] = sub_1001A7FE4(v45, v46, (uint64_t *)&v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, (char *)v69 + 8, v42 + 4);
      swift_bridgeObjectRelease(v47);
      v48 = *(void (**)(char *, uint64_t))(v67 + 8);
      v48(v37, v14);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to encode link information; won't show link in string for link: %{public}s",
        v42,
        0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      v48 = *(void (**)(char *, uint64_t))(v36 + 8);
      v48(v37, v14);
    }
    v48(v18, v14);
    return 0;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

Class sub_1001A7408(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t (*v12)(id, id, id, id, uint64_t);
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSDictionary v18;

  v12 = *(uint64_t (**)(id, id, id, id, uint64_t))(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  swift_retain(v11);
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = v12(v13, v14, v15, v16, a6);
  swift_release(v11);

  if (v17)
  {
    type metadata accessor for Key(0);
    sub_100007D5C((unint64_t *)&qword_10028A960, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001E6244);
    v18.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v18.super.isa = 0;
  }
  return v18.super.isa;
}

const char *sub_1001A7510()
{
  return "favoriteDate";
}

uint64_t sub_1001A7524()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001A7548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001A68F0(a1, a2, v2);
}

const char *sub_1001A7550()
{
  return "ttsPlaybackRateDouble";
}

id sub_1001A755C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "ttsPlaybackRateDouble");
  *a2 = v4;
  return result;
}

id sub_1001A758C(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setTtsPlaybackRateDouble:", *a1);
}

void sub_1001A75A0(void **a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001A69E0(a1, a2, v2);
}

const char *sub_1001A75A8()
{
  return "interactedIndices";
}

void sub_1001A75BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001A66EC(a1, a2, v2);
}

_QWORD *sub_1001A75C4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006DF4(&qword_100298760);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001AC12C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001A76D0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006DF4(&qword_100298178);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001AC21C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001A77DC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006DF4(&qword_10028A6C0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001AC304(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A78E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001A7D9C(a1, a2, a3, a4, &qword_10028DFC8, type metadata accessor for TranslateTip);
}

_QWORD *sub_1001A78FC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001A7924(a1, a2, a3, a4, &qword_100298128, &qword_100298130);
}

_QWORD *sub_1001A7910(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001A7924(a1, a2, a3, a4, &qword_100298118, &qword_100298120);
}

_QWORD *sub_1001A7924(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100006DF4(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size_0(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001ACA34(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001A7A50(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006DF4(&qword_100298170);
      v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size_0(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4])
          memmove(v13, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001AC828(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A7B78(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100006DF4(&qword_1002981A8);
  v11 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_1002981B0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size_0(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100006DF4((uint64_t *)&unk_1002981B0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001AC918(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_1001A7D88(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001A7D9C(a1, a2, a3, a4, &qword_1002981A0, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_1001A7D9C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100006DF4(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size_0(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001ACBB4(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_1001A7FA8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001A7924(a1, a2, a3, a4, &qword_100298148, &qword_100298150);
}

uint64_t sub_1001A7FBC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001A7D9C(a1, a2, a3, a4, &qword_1002980B0, type metadata accessor for SELFLoggingInvocationDescription);
}

uint64_t sub_1001A7FD0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001A7D9C(a1, a2, a3, a4, (uint64_t *)&unk_1002980E0, type metadata accessor for StreamingRequestInfo);
}

uint64_t sub_1001A7FE4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1001A80B4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000A0EC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000A0EC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100009C08(v12);
  return v7;
}

uint64_t sub_1001A80B4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1001A826C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001A826C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1001A8300(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1001A8550(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1001A8550(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1001A8300(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1001A8474(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1001A8474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100006DF4(&qword_100298098);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size_0(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001A84D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_1001A8550(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298098);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_1001A869C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1001A8960(a1, a2, v5);
}

unint64_t sub_1001A8700(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for IndexPath(0);
  v6 = sub_100007D5C((unint64_t *)&unk_100298180, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1001A8A40(a1, v7);
}

unint64_t sub_1001A876C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1001A8B80(a1, v7);
}

unint64_t sub_1001A87EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001A8CF4(a1, v4);
}

unint64_t sub_1001A881C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1001A8DB8(a1, v3);
}

unint64_t sub_1001A884C(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  sub_1000FC538((uint64_t)v5);
  v3 = Hasher._finalize()();
  return sub_1001A8E54(a1, v3);
}

unint64_t sub_1001A88A4(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x616E6F6974636964;
    else
      v3 = 0x6F68706F7263696DLL;
    if (a1 == 1)
      v4 = 0xEA00000000007972;
    else
      v4 = 0xEA0000000000656ELL;
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x6472616F6279656BLL;
  }
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()();
  return sub_1001A8F54(a1, v5);
}

unint64_t sub_1001A8960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1001A8A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100007D5C((unint64_t *)&qword_100291CD0, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1001A8B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1001A8CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1001AC7EC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10005DEC0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1001A8DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1001A8E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  _QWORD v12[9];

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v7 = ~v4;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v5);
      Hasher.init(_seed:)(v12, 0);
      swift_retain(v8);
      sub_1000FC538((uint64_t)v12);
      v9 = Hasher._finalize()();
      Hasher.init(_seed:)(v12, 0);
      sub_1000FC538((uint64_t)v12);
      v10 = Hasher._finalize()();
      swift_release(v8);
      if (v9 == v10)
        break;
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_1001A8F54(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0x616E6F6974636964;
          v8 = 31090;
        }
        else
        {
          v7 = 0x6F68706F7263696DLL;
          v8 = 25966;
        }
        v9 = v8 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000;
        v10 = a1;
        if (!a1)
        {
LABEL_7:
          v11 = 0xE800000000000000;
          v12 = 0x6472616F6279656BLL;
          if (v7 != 0x6472616F6279656BLL)
            goto LABEL_19;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0xE800000000000000;
        v7 = 0x6472616F6279656BLL;
        v10 = a1;
        if (!a1)
          goto LABEL_7;
      }
      if (v10 == 1)
        v12 = 0x616E6F6974636964;
      else
        v12 = 0x6F68706F7263696DLL;
      if (v10 == 1)
        v11 = 0xEA00000000007972;
      else
        v11 = 0xEA0000000000656ELL;
      if (v7 != v12)
        goto LABEL_19;
LABEL_18:
      if (v9 == v11)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        return v4;
      }
LABEL_19:
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v12, v11, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_1001A90F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100006DF4(&qword_100298190);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100007D5C((unint64_t *)&unk_100298180, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

_OWORD *sub_1001A948C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];
  _OWORD v42[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006DF4(&qword_100298090);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = (_OWORD *)swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v18 >= v38)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v38)
        goto LABEL_37;
      v20 = *(_QWORD *)(v39 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release(v5);
          if ((v40 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v38)
              goto LABEL_37;
            v20 = *(_QWORD *)(v39 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      sub_10003EA2C(v23, v42);
    }
    else
    {
      sub_10000A0EC((uint64_t)v23, (uint64_t)v42);
      v24 = v22;
    }
    v25 = *(_QWORD *)(v8 + 40);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    v29 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v28);
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v12 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    result = sub_10003EA2C(v42, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v19 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = (_OWORD *)swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1001A97C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BYTE v34[16];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006DF4(&qword_1002980B8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v19 >= v14)
          goto LABEL_37;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_37;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v33;
                goto LABEL_44;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_46;
                if (v9 >= v14)
                  goto LABEL_37;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_QWORD *)(v5 + 56) + 16 * v18;
      if ((a2 & 1) != 0)
        sub_1001ACB78(v23, (uint64_t)v34);
      else
        sub_1001ACB3C(v23, (uint64_t)v34);
      v24 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      sub_1001ACB78((uint64_t)v34, *(_QWORD *)(v8 + 56) + 16 * v16);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_44:
  *v3 = v8;
}

void sub_1001A9A84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  _QWORD v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006DF4((uint64_t *)&unk_1002980C0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return;
        }
        if (v19 >= v13)
          goto LABEL_39;
        v20 = v10[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_39;
          v20 = v10[v15];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_39:
              swift_release(v5);
              if ((v35 & 1) == 0)
              {
                swift_release(v5);
                v3 = v36;
                goto LABEL_46;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v15 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_48;
                if (v15 >= v13)
                  goto LABEL_39;
                v20 = v10[v15];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v15 = v21;
          }
        }
LABEL_24:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      if (v22)
      {
        if (v22 == 1)
        {
          v24 = 0xEA00000000007972;
          v25 = 0x616E6F6974636964;
        }
        else
        {
          v24 = 0xEA0000000000656ELL;
          v25 = 0x6F68706F7263696DLL;
        }
      }
      else
      {
        v24 = 0xE800000000000000;
        v25 = 0x6472616F6279656BLL;
      }
      String.hash(into:)(v37, v25, v24);
      swift_bridgeObjectRelease();
      v26 = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v14 + 8 * v29);
        }
        while (v33 == -1);
        v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v22;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_46:
  *v3 = v8;
}

void sub_1001A9DBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006DF4((uint64_t *)&unk_100298160);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v34 = v3;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_QWORD *)(v5 + 56) + 24 * v21;
    v38 = *(_OWORD *)v31;
    v32 = *(_BYTE *)(v31 + 16);
    if ((v37 & 1) == 0)
      swift_retain(v30);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    sub_1000FC538((uint64_t)v39);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v30;
    v19 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_OWORD *)v19 = v38;
    *(_BYTE *)(v19 + 16) = v32;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

Swift::Int sub_1001AA0D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100006DF4(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

void sub_1001AA3DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006DF4(&qword_100298138);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10003EA2C((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_1001AC7EC(v25, (uint64_t)&v39);
      sub_10000A0EC(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10003EA2C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_1001AA6F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006DF4(&qword_1002980F8);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1001AAA14(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001AAC88(a1, a2, a3, a4, (uint64_t *)&unk_1002948C0);
}

void sub_1001AAA20(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_1001A884C(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_9;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001ABA30();
    goto LABEL_9;
  }
  sub_1001A9DBC(v17, a5 & 1);
  v20 = sub_1001A884C(a4);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_13:
    v25 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache.Condition();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
    __break(1u);
    return;
  }
  v14 = v20;
LABEL_9:
  v22 = a3 & 1;
  v23 = *v6;
  if ((v18 & 1) != 0)
  {
    v24 = v23[7] + 24 * v14;
    *(_QWORD *)v24 = a1;
    *(_QWORD *)(v24 + 8) = a2;
    *(_BYTE *)(v24 + 16) = v22 != 0;
  }
  else
  {
    sub_1001AB164(v14, a4, a1, a2, v22, v23);
    swift_retain(a4);
  }
}

_OWORD *sub_1001AAB5C(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1001A876C((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_100009C08(v16);
        return sub_10003EA2C(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1001AB520();
      goto LABEL_7;
    }
    sub_1001A948C(v12, a3 & 1);
    v18 = sub_1001A876C((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001AB1B8(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

void sub_1001AAC7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1001AAC88(a1, a2, a3, a4, &qword_100298158);
}

void sub_1001AAC88(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_1001A869C(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001ABBE8(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1001AA0D4(v17, a4 & 1, a5);
  v22 = sub_1001A869C(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1001AADFC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1001A881C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_1001AD1E4(a1, v16[7] + 16 * v10);
      return sub_1001AB21C(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001AB6E4();
      goto LABEL_7;
    }
    sub_1001A97C4(v13, a3 & 1);
    v18 = sub_1001A881C(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_1001AD1E4(a1, v16[7] + 16 * v10);
      return sub_1001AB21C(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
  __break(1u);
  return result;
}

_OWORD *sub_1001AAF08(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1001A87EC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100009C08(v17);
        return sub_10003EA2C(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001ABD90();
      goto LABEL_7;
    }
    sub_1001AA3DC(v13, a3 & 1);
    v19 = sub_1001A87EC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001AC7EC(a2, (uint64_t)v21);
      return sub_1001AB280(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_1001AB040(unsigned __int8 a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1001A88A4(a1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a2 & 1) == 0)
  {
    sub_1001AB8A4();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a1;
    *(double *)(v16[7] + 8 * v10) = a3;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return;
    }
    goto LABEL_14;
  }
  sub_1001A9A84(v13, a2 & 1);
  v17 = sub_1001A88A4(a1);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = v17;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for TranslationListController.BottomInsetReason);
  __break(1u);
}

unint64_t sub_1001AB164(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = a6[7] + 24 * result;
  *(_QWORD *)v6 = a3;
  *(_QWORD *)(v6 + 8) = a4;
  *(_BYTE *)(v6 + 16) = a5 & 1;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

_OWORD *sub_1001AB1B8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_10003EA2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_1001AB21C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1001ACB78(a3, a4[7] + 16 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *sub_1001AB280(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10003EA2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

id sub_1001AB2F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006DF4(&qword_100298190);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001AB520()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_100006DF4(&qword_100298090);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_10000A0EC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10003EA2C(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001AB6E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[16];

  v1 = v0;
  sub_100006DF4(&qword_1002980B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    sub_1001ACB3C(*(_QWORD *)(v2 + 56) + 16 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1001ACB78((uint64_t)v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001AB8A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_100006DF4((uint64_t *)&unk_1002980C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001ABA30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100006DF4((uint64_t *)&unk_100298160);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_BYTE *)(v22 + 16) = v20;
    swift_retain(v17);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1001ABBE8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100006DF4(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001ABD90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100006DF4(&qword_100298138);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1001AC7EC(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10000A0EC(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    sub_10003EA2C(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001ABF74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100006DF4(&qword_1002980F8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1001AC12C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1001AC21C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001AC304(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001AC3F4(uint64_t a1, uint64_t (*a2)(unint64_t, _BYTE *))
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19[2];
  unint64_t v20;
  _BYTE v21[40];
  uint64_t (*v22)(unint64_t, _BYTE *);

  v22 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain(a1);
  v4 = 0;
  v17 = result;
  v5 = result + 32;
  v18 = _swiftEmptyArrayStorage;
  v16 = result + 32;
LABEL_2:
  if (v4 <= v2)
    v6 = v2;
  else
    v6 = v4;
  v7 = v5 + 40 * v4;
  v8 = v4;
  while (1)
  {
    if (v2 == v8)
    {
      swift_bridgeObjectRelease(v17);
      return (uint64_t)v18;
    }
    if (v6 == v8)
      break;
    v4 = v8 + 1;
    sub_100023AB0(v7, (uint64_t)v19);
    v20 = v8;
    sub_10003E994(v19, (uint64_t)v21);
    v9 = v22(v8, v21);
    v11 = v10;
    result = sub_10000A020((uint64_t)&v20, &qword_100298068);
    v7 += 40;
    ++v8;
    if (v11)
    {
      v12 = v18;
      result = swift_isUniquelyReferenced_nonNull_native(v18);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1001A77DC(0, v18[2] + 1, 1, v18);
        v12 = (_QWORD *)result;
      }
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
      {
        result = (uint64_t)sub_1001A77DC((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
        v12 = (_QWORD *)result;
      }
      v5 = v16;
      v12[2] = v14 + 1;
      v18 = v12;
      v15 = &v12[2 * v14];
      v15[4] = v9;
      v15[5] = v11;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001AC590(void *a1, _QWORD *a2)
{
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setText:", v4);

  v5 = a2[3];
  v6 = a2[4];
  sub_100023AF4(a2, v5);
  v7 = dispatch thunk of SpeechSausage.tokenBins.getter(v5, v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return swift_bridgeObjectRelease(v7);
  v27 = v7;
  v9 = v7 + 32;
  do
  {
    sub_100023AB0(v9, (uint64_t)v31);
    v10 = v32;
    v11 = v33;
    sub_100023AF4(v31, v32);
    sub_1001A60A8(v10, v11, (uint64_t)v28);
    v12 = v32;
    v13 = v33;
    sub_100023AF4(v31, v32);
    v14 = sub_1001A6120(0, v12, v13);
    v15 = v29;
    v16 = v30;
    sub_100023AF4(v28, v29);
    dispatch thunk of SpeechTokenAlternatives.text.getter(v15, v16);
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    v21 = v29;
    v22 = v30;
    sub_100023AF4(v28, v29);
    objc_msgSend(a1, "insertText:alternatives:style:", v19, isa, dispatch thunk of SpeechTokenAlternatives.isLowConfidence.getter(v21, v22) & 1);

    v23 = v29;
    v24 = v30;
    sub_100023AF4(v28, v29);
    if ((dispatch thunk of SpeechTokenAlternatives.hasSpaceAfter.getter(v23, v24) & 1) != 0)
    {
      v25 = String._bridgeToObjectiveC()();
      objc_msgSend(a1, "insertText:", v25);

    }
    sub_100009C08(v28);
    sub_100009C08(v31);
    v9 += 40;
    --v8;
  }
  while (v8);
  return swift_bridgeObjectRelease(v27);
}

uint64_t sub_1001AC7C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1001A65B8(a1, a2, *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1001AC7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001AC7E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001AC7EC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1001AC828(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001AC918(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_1002981B0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001ACA34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100006DF4(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001ACB3C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TranslationSession_RD.Observation(a2, a1);
  return a2;
}

uint64_t sub_1001ACB78(uint64_t a1, uint64_t a2)
{
  initializeWithTake for TranslationSession_RD.Observation(a2, a1);
  return a2;
}

uint64_t sub_1001ACBB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001ACCCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v35;
  uint64_t v36;
  char *v37;
  void *v38;
  id v39;
  char *v40;
  __n128 v41;
  Class isa;
  id v43;
  uint64_t v44;
  Swift::UInt v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[5];

  v62 = a1;
  v1 = sub_100006DF4(&qword_100292AF0);
  __chkstk_darwin(v1);
  v55 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  __chkstk_darwin(v3);
  v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_10028CD90);
  __chkstk_darwin(v5);
  v61 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DisambiguationLinkInfo(0);
  v7 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.Encoding(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UITextItem.Content(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63[3] = &type metadata for TranslateFeatures;
  v63[4] = sub_100009BC4();
  LOBYTE(v63[0]) = 5;
  v18 = isFeatureEnabled(_:)(v63);
  v19 = sub_100009C08(v63);
  v20 = 0;
  if ((v18 & 1) != 0)
  {
    v21 = v11;
    v53 = v9;
    v54 = v7;
    UITextItem.content.getter(v19);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v15 + 88))(v17, v14) == enum case for UITextItem.Content.tag(_:))
    {
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 96))(v17, v14);
      v23 = *v17;
      v24 = v17[1];
      static String.Encoding.utf8.getter(v22);
      v25 = String.data(using:allowLossyConversion:)(v13, 0, v23, v24);
      v27 = v26;
      v28 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v21 + 8))(v13, v10, v28);
      if (v27 >> 60 != 15)
      {
        v29 = type metadata accessor for JSONDecoder(0);
        swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
        v30 = JSONDecoder.init()();
        v31 = sub_100007D5C((unint64_t *)&unk_1002980D0, (uint64_t (*)(uint64_t))&type metadata accessor for DisambiguationLinkInfo, (uint64_t)&protocol conformance descriptor for DisambiguationLinkInfo);
        v33 = v60;
        v32 = v61;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(v60, v25, v27, v60, v31);
        v35 = swift_release(v30);
        v36 = v54;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v54 + 56))(v32, 0, 1, v33, v35);
        v37 = v53;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v53, v32, v33);
        v38 = *(void **)(v59 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult);
        if (v38)
        {
          v62 = v25;
          v39 = v38;
          v40 = v56;
          DisambiguationLinkInfo.sentenceUUID.getter(v41);
          isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v58);
          v43 = objc_msgSend(v39, "sentenceWithUUID:", isa);

          if (v43)
          {
            v45 = DisambiguationLinkInfo.linkIndex.getter(v44);
            v46 = (unint64_t)_LTDisambiguableSentence.menu(forLinkIndex:)(v45);
            if (v46)
            {
              v47 = v46;
              v61 = (char *)sub_10000A05C(0, &qword_100292B00, UITextItemMenuConfiguration_ptr);
              v48 = enum case for UITextItemMenuConfiguration.Preview.default(_:);
              v49 = type metadata accessor for UITextItemMenuConfiguration.Preview(0);
              v50 = v27;
              v51 = *(_QWORD *)(v49 - 8);
              v52 = v55;
              (*(void (**)(char *, uint64_t, uint64_t))(v51 + 104))(v55, v48, v49);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v49);
              v20 = UITextItemMenuConfiguration.init(preview:menu:)(v52, v47);
              sub_1000D6A2C(v62, v50);

              (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v33);
              return v20;
            }
            (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v33);
            sub_1000D6A2C(v62, v27);

          }
          else
          {
            (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v33);
            sub_1000D6A2C(v62, v27);

          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v33);
          sub_1000D6A2C(v25, v27);
        }
      }
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v14);
    }
    return 0;
  }
  return v20;
}

uint64_t sub_1001AD1E4(uint64_t a1, uint64_t a2)
{
  assignWithTake for TranslationSession_RD.Observation(a2, a1);
  return a2;
}

id sub_1001AD220()
{
  return sub_1001AD42C(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___languageOneLabel, (uint64_t (*)(void))sub_1001AD234);
}

id sub_1001AD234()
{
  id v0;
  NSString v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  objc_msgSend(v0, "setTextColor:", v2);

  v3 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleFootnote, 0);
  v4 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v3, "pointSize");
  v5 = objc_msgSend(v4, "systemFontOfSize:weight:");
  v6 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleFootnote);
  v7 = objc_msgSend(v6, "scaledFontForFont:maximumPointSize:", v5, 1.79769313e308);

  objc_msgSend(v0, "setFont:", v7);
  return v0;
}

id sub_1001AD418()
{
  return sub_1001AD42C(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separator, (uint64_t (*)(void))sub_1001AD484);
}

id sub_1001AD42C(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1001AD484()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = objc_msgSend(v0, "heightAnchor");
  v2 = objc_msgSend(v1, "constraintEqualToConstant:", 0.5);

  objc_msgSend(v2, "setActive:", 1);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.2);

  objc_msgSend(v0, "setBackgroundColor:", v4);
  return v0;
}

id sub_1001AD598()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separatorWidthConstraint;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separatorWidthConstraint);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separatorWidthConstraint);
  }
  else
  {
    v4 = sub_1001AD418();
    v5 = objc_msgSend(v4, "widthAnchor");

    v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                               + OBJC_IVAR____TtC17SequoiaTranslator8CardView_container), "widthAnchor"));
    v7 = objc_msgSend(v5, "constraintEqualToAnchor:", v6);

    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1001AD668()
{
  return sub_100025664(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___sourceView, (uint64_t (*)(uint64_t))sub_1001AD67C);
}

id sub_1001AD67C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSString v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v19[5];

  v2 = type metadata accessor for HighlightTextView();
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v5);

  v6 = (void *)objc_opt_self(UIColor);
  v7 = v4;
  v8 = objc_msgSend(v6, "labelColor");
  objc_msgSend(v7, "setTextColor:", v8);

  objc_msgSend(v7, "setScrollEnabled:", 0);
  objc_msgSend(v7, "setEditable:", 0);
  objc_msgSend(v7, "setContentInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  objc_msgSend(v7, "setTextContainerInset:", 3.0, 0.0, 3.0, 0.0);
  v9 = objc_msgSend(v7, "textContainer");
  objc_msgSend(v9, "setLineFragmentPadding:", 0.0);

  objc_msgSend(v7, "setClipsToBounds:", 0);
  v10 = (void *)objc_opt_self(UIFontDescriptor);
  v11 = v7;
  v12 = objc_msgSend(v10, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
  v13 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v12, "pointSize");
  v14 = objc_msgSend(v13, "systemFontOfSize:weight:");
  v15 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
  v16 = objc_msgSend(v15, "scaledFontForFont:maximumPointSize:", v14, 1.79769313e308);

  objc_msgSend(v11, "setFont:", v16);
  v19[3] = &type metadata for TranslateFeatures;
  v19[4] = sub_100009BC4();
  LOBYTE(v19[0]) = 5;
  LOBYTE(v15) = isFeatureEnabled(_:)(v19);
  sub_100009C08(v19);
  if ((v15 & 1) == 0)
  {
    v17 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", a1, "sourceTapped:");
    objc_msgSend(v17, "setNumberOfTapsRequired:", 1);
    objc_msgSend(v11, "addGestureRecognizer:", v17);

  }
  return v11;
}

id sub_1001AD9C4()
{
  return sub_1001AD42C(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___languageTwoLabel, (uint64_t (*)(void))sub_1001AD9D8);
}

id sub_1001AD9D8()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v2);

  objc_msgSend(v0, "setTextColor:", v3);
  v4 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleFootnote, 0);
  v5 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v4, "pointSize");
  v6 = objc_msgSend(v5, "systemFontOfSize:weight:");
  v7 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleFootnote);
  v8 = objc_msgSend(v7, "scaledFontForFont:maximumPointSize:", v6, 1.79769313e308);

  objc_msgSend(v0, "setFont:", v8);
  return v0;
}

id sub_1001ADBD4()
{
  return sub_100025664(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___targetView, (uint64_t (*)(uint64_t))sub_1001ADBE8);
}

id sub_1001ADBE8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  id v8;
  NSString v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD v20[5];

  v2 = type metadata accessor for HighlightTextView();
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v5);

  objc_msgSend(v4, "setTextColor:", v6);
  objc_msgSend(v4, "setScrollEnabled:", 0);
  objc_msgSend(v4, "setEditable:", 0);
  objc_msgSend(v4, "setContentInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  objc_msgSend(v4, "setTextContainerInset:", 3.0, 0.0, 3.0, 0.0);
  v7 = objc_msgSend(v4, "textContainer");
  objc_msgSend(v7, "setLineFragmentPadding:", 0.0);

  v8 = v4;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setText:", v9);

  objc_msgSend(v8, "setClipsToBounds:", 0);
  v10 = (void *)objc_opt_self(UIFontDescriptor);
  v11 = v8;
  v12 = objc_msgSend(v10, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
  v13 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v12, "pointSize");
  v14 = objc_msgSend(v13, "systemFontOfSize:weight:");
  v15 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
  v16 = objc_msgSend(v15, "scaledFontForFont:maximumPointSize:", v14, 1.79769313e308);

  objc_msgSend(v11, "setFont:", v16);
  v17 = objc_msgSend(v11, "textContainer");
  objc_msgSend(v17, "setLineBreakMode:", 0);

  v20[3] = &type metadata for TranslateFeatures;
  v20[4] = sub_100009BC4();
  LOBYTE(v20[0]) = 5;
  LOBYTE(v17) = isFeatureEnabled(_:)(v20);
  sub_100009C08(v20);
  if ((v17 & 1) == 0)
  {
    v18 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", a1, "targetTapped:");
    objc_msgSend(v18, "setNumberOfTapsRequired:", 1);
    objc_msgSend(v11, "addGestureRecognizer:", v18);

  }
  return v11;
}

id sub_1001ADF84()
{
  return sub_1001AD42C(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___hintView, (uint64_t (*)(void))sub_1001ADF98);
}

id sub_1001ADF98()
{
  id v0;
  id v1;
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  NSString v7;
  Swift::String v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 11.0);
  objc_msgSend(v0, "setFont:", v2);

  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._countAndFlagsBits = 0xD00000000000001FLL;
  v9._object = (void *)0x8000000100201B10;
  v4._object = (void *)0x8000000100201AF0;
  v4._countAndFlagsBits = 0xD00000000000001ALL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v9)._object;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "setText:", v7);

  objc_msgSend(v0, "setHidden:", 1);
  return v0;
}

id sub_1001AE158()
{
  return sub_1001AD42C(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___senseHeader, (uint64_t (*)(void))sub_1001AE16C);
}

id sub_1001AE16C()
{
  id v0;
  id v1;
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  NSString v7;
  Swift::String v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setNumberOfLines:", 0);
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 12.0);
  objc_msgSend(v0, "setFont:", v2);

  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000052;
  v9._object = (void *)0x8000000100202330;
  v4._object = (void *)0x8000000100202310;
  v4._countAndFlagsBits = 0xD000000000000018;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v9)._object;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "setText:", v7);

  objc_msgSend(v0, "setHidden:", 1);
  return v0;
}

id sub_1001AE328()
{
  return sub_1001AD42C(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___senseRowsStack, (uint64_t (*)(void))sub_1001AE33C);
}

id sub_1001AE33C()
{
  id v0;
  id v1;
  id v2;
  id v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setAxis:", 1);
  objc_msgSend(v0, "setDistribution:", 0);
  objc_msgSend(v0, "setAlignment:", 0);
  objc_msgSend(v0, "setSpacing:", 0.0);
  objc_msgSend(v0, "setLayoutMarginsRelativeArrangement:", 1);
  objc_msgSend(v0, "setInsetsLayoutMarginsFromSafeArea:", 0);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemGroupedBackgroundColor");
  objc_msgSend(v1, "setBackgroundColor:", v2);

  v3 = objc_msgSend(v1, "layer");
  objc_msgSend(v3, "setCornerRadius:", 10.0);

  objc_msgSend(v0, "insertSubview:atIndex:", v1, 0);
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  sub_1001DB5F8(v1);
  objc_msgSend(v0, "setHidden:", 1);

  return v0;
}

id sub_1001AE4F0()
{
  return sub_1001AD42C(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___favoritedImageView, (uint64_t (*)(void))sub_1001AE504);
}

id sub_1001AE504()
{
  id v0;
  NSString v1;
  id v2;
  id v3;
  id v4;
  NSString v5;
  id v6;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v1);

  v3 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleTitle1);
  v4 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v3);

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setImage:", v2);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v5);

  objc_msgSend(v0, "setTintColor:", v6);
  return v0;
}

id sub_1001AE6B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___spacer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___spacer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___spacer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v5 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v4, "setBackgroundColor:", v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

char *sub_1001AE778(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, uint64_t, uint64_t, uint64_t);
  objc_class *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  objc_super v39;

  v9 = type metadata accessor for Locale(0);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  __chkstk_darwin(v9);
  v38 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___languageOneLabel] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separator] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separatorWidthConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___sourceView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___languageTwoLabel] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___targetView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___hintView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___senseHeader] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___senseRowsStack] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___favoritedImageView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___spacer] = 0;
  v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_isIdentity] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_favoriteObservation] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeObservation] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_ttsPlaybackRateObservation] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedTranslation] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_padding] = 0x4034000000000000;
  v11 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternativesBehaviour;
  v12 = objc_allocWithZone((Class)type metadata accessor for ASRAlternativesBehaviour());
  v13 = v4;
  *(_QWORD *)&v4[v11] = objc_msgSend(v12, "init");
  v13[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_enableSelectable] = 1;
  v14 = &v13[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v13[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows] = _swiftEmptyArrayStorage;
  v15 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont;
  v16 = (void *)objc_opt_self(UIFontDescriptor);
  v17 = objc_msgSend(v16, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
  v18 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v17, "pointSize");
  v19 = objc_msgSend(v18, "systemFontOfSize:weight:");
  v20 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
  v21 = objc_msgSend(v20, "scaledFontForFont:maximumPointSize:", v19, 1.79769313e308);

  *(_QWORD *)&v13[v15] = v21;
  v22 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_collapsedFontBold;
  v23 = objc_msgSend(v16, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, 0);
  objc_msgSend(v23, "pointSize");
  v24 = objc_msgSend(v18, "systemFontOfSize:weight:");
  v25 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  v26 = objc_msgSend(v25, "scaledFontForFont:maximumPointSize:", v24, 1.79769313e308);

  *(_QWORD *)&v13[v22] = v26;
  v28 = v36;
  v27 = v37;
  v29 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v36 + 56);
  v29(&v13[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_sourceLocale], 1, 1, v37);
  v29(&v13[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_targetLocale], 1, 1, v27);

  v30 = (objc_class *)type metadata accessor for TranslationCard(0);
  v39.receiver = v13;
  v39.super_class = v30;
  v31 = (char *)objc_msgSendSuper2(&v39, "initWithFrame:", a1, a2, a3, a4);
  sub_1001AED48();
  v32 = *(_QWORD *)&v31[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternativesBehaviour]
      + OBJC_IVAR____TtC17SequoiaTranslator24ASRAlternativesBehaviour_delegate;
  *(_QWORD *)(v32 + 8) = &off_1002705C0;
  swift_unknownObjectWeakAssign(v32, v31);
  v33 = (uint64_t)v38;
  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  sub_1001AF608((uint64_t)_swiftEmptyArrayStorage, v33);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v33, v27);
  sub_1001AF1A0();

  return v31;
}

id sub_1001AEC18()
{
  char *v0;
  char *v1;
  double MinY;
  double MaxY;
  BOOL v4;
  double v5;
  objc_super v7;
  CGRect v8;
  CGRect v9;
  CGRect v10;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for TranslationCard(0);
  objc_msgSendSuper2(&v7, "layoutSubviews");
  sub_1001B0890();
  v1 = *(char **)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions];
  objc_msgSend(v1, "frame");
  MinY = CGRectGetMinY(v8);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator8CardView_container], "frame");
  MaxY = CGRectGetMaxY(v9);
  objc_msgSend(v1, "frame");
  v4 = MinY < MaxY - CGRectGetHeight(v10);
  v5 = 0.0;
  if (v4)
    v5 = 1.0;
  return objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC17SequoiaTranslator11CardActions_background], "setAlpha:", v5);
}

void sub_1001AED48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  Class isa;
  id v42;

  v1 = v0;
  v2 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_container;
  v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_container);
  v4 = sub_1001AD220();
  objc_msgSend(v3, "addArrangedSubview:", v4);

  v5 = *(id *)(v1 + v2);
  v6 = sub_1001AD668();
  objc_msgSend(v5, "addArrangedSubview:", v6);

  v7 = *(id *)(v1 + v2);
  v8 = sub_1001AE158();
  objc_msgSend(v7, "addArrangedSubview:", v8);

  v9 = *(id *)(v1 + v2);
  v10 = sub_1001AE328();
  objc_msgSend(v9, "addArrangedSubview:", v10);

  v11 = *(id *)(v1 + v2);
  v12 = sub_1001AD418();
  objc_msgSend(v11, "addArrangedSubview:", v12);

  v13 = *(id *)(v1 + v2);
  v14 = sub_1001AD9C4();
  objc_msgSend(v13, "addArrangedSubview:", v14);

  v15 = *(id *)(v1 + v2);
  v16 = sub_1001ADBD4();
  objc_msgSend(v15, "addArrangedSubview:", v16);

  v17 = *(id *)(v1 + v2);
  v18 = sub_1001ADF84();
  objc_msgSend(v17, "addArrangedSubview:", v18);

  v19 = *(id *)(v1 + v2);
  v20 = sub_1001AE6B8();
  objc_msgSend(v19, "addArrangedSubview:", v20);

  v21 = *(id *)(v1 + v2);
  v22 = sub_1001AE4F0();
  objc_msgSend(v21, "addSubview:", v22);

  v23 = (void *)objc_opt_self(NSLayoutConstraint);
  v24 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v25 = swift_allocObject(v24, 56, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1001EC4B0;
  v26 = sub_1001AE4F0();
  v27 = objc_msgSend(v26, "bottomAnchor");

  v28 = sub_1001ADBD4();
  v29 = objc_msgSend(v28, "bottomAnchor");

  v30 = objc_msgSend(v27, "constraintEqualToAnchor:constant:", v29, -8.0);
  *(_QWORD *)(v25 + 32) = v30;
  v31 = sub_1001AE4F0();
  v32 = objc_msgSend(v31, "trailingAnchor");

  v33 = sub_1001ADBD4();
  v34 = objc_msgSend(v33, "trailingAnchor");

  v35 = objc_msgSend(v32, "constraintEqualToAnchor:", v34);
  *(_QWORD *)(v25 + 40) = v35;
  v36 = sub_1001AE6B8();
  v37 = objc_msgSend(v36, "heightAnchor");

  v38 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions), "heightAnchor");
  v39 = objc_msgSend(v37, "constraintEqualToAnchor:", v38);

  *(_QWORD *)(v25 + 48) = v39;
  specialized Array._endMutation()(v40);
  sub_10000A05C(0, (unint64_t *)&qword_1002930C0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v23, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v42 = sub_1001AE4F0();
  objc_msgSend(v42, "setHidden:", 1);

}

uint64_t sub_1001AF18C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded);
}

id sub_1001AF1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  _BOOL8 v30;
  id v31;
  void *v32;
  _BOOL8 v33;
  id v34;
  uint64_t v35;
  objc_class *v36;
  unsigned int v37;
  id v38;
  id v39;
  id v40;
  id v42;

  v1 = v0;
  sub_1001B039C();
  v2 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_container;
  v3 = *(id *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_container);
  v4 = sub_1001AD668();
  objc_msgSend(v3, "setCustomSpacing:afterView:", v4, 16.0);

  v5 = *(id *)(v1 + v2);
  v6 = sub_1001AE158();
  objc_msgSend(v5, "setCustomSpacing:afterView:", v6, 12.0);

  v7 = *(id *)(v1 + v2);
  v8 = sub_1001AE328();
  objc_msgSend(v7, "setCustomSpacing:afterView:", v8, 12.0);

  v9 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_actions), "setHidden:", (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded) & 1) == 0);
  if (*(_BYTE *)(v1 + v9) == 1 && *(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_isIdentity) != 1)
  {
    v14 = sub_1001AD418();
    objc_msgSend(v14, "setHidden:", 0);

    v42 = *(id *)(v1 + v2);
    v15 = sub_1001AD418();
    v16 = objc_msgSend(*(id *)(v1 + v2), "arrangedSubviews");
    v17 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    v19 = sub_1001AE328();
    v20 = sub_1001A6320((uint64_t)v19, v18);
    v22 = v21;
    swift_bridgeObjectRelease(v18);

    if ((v22 & 1) != 0)
      v23 = 0;
    else
      v23 = v20;
    objc_msgSend(v42, "insertArrangedSubview:atIndex:", v15, v23);

    v24 = *(id *)(v1 + v2);
    v25 = sub_1001AD418();
    objc_msgSend(v24, "setCustomSpacing:afterView:", v25, 18.0);

    v13 = sub_1001AD598();
    objc_msgSend(v13, "setActive:", 1);
  }
  else
  {
    v10 = sub_1001AD418();
    objc_msgSend(v10, "setHidden:", 1);

    v11 = *(id *)(v1 + v2);
    v12 = sub_1001AD418();
    objc_msgSend(v11, "removeArrangedSubview:", v12);

    v13 = sub_1001AD598();
    objc_msgSend(v13, "setActive:", 0);
  }

  v26 = sub_1001AD668();
  objc_msgSend(v26, "setUserInteractionEnabled:", *(unsigned __int8 *)(v1 + v9));

  v27 = sub_1001ADBD4();
  objc_msgSend(v27, "setUserInteractionEnabled:", *(unsigned __int8 *)(v1 + v9));

  v28 = sub_1001AE158();
  v29 = v28;
  v30 = *(_BYTE *)(v1 + v9) != 1
     || *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives) + 16) < 2uLL;
  objc_msgSend(v28, "setHidden:", v30);

  v31 = sub_1001AE328();
  v32 = v31;
  v33 = *(_BYTE *)(v1 + v9) != 1
     || *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives) + 16) < 2uLL;
  objc_msgSend(v31, "setHidden:", v33);

  v34 = sub_1001AE4F0();
  if ((*(_BYTE *)(v1 + v9) & 1) != 0)
  {
    v35 = 1;
  }
  else
  {
    v36 = sub_1000216BC();
    v37 = -[objc_class isSelected](v36, "isSelected");

    v35 = v37 ^ 1;
  }
  objc_msgSend(v34, "setHidden:", v35);

  if ((*(_BYTE *)(v1 + v9) & 1) == 0)
  {
    v38 = sub_1001AD668();
    objc_msgSend(v38, "setSelectedTextRange:", 0);

    v39 = sub_1001ADBD4();
    objc_msgSend(v39, "setSelectedTextRange:", 0);

  }
  v40 = sub_1001AE6B8();
  objc_msgSend(v40, "setHidden:", (*(_BYTE *)(v1 + v9) & 1) == 0);

  return sub_10002DFE4();
}

void sub_1001AF608(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  int v31;
  id v32;
  void *v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[6];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;

  v60 = a2;
  v4 = type metadata accessor for IndexSet(0);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = a1;
  v7 = swift_bridgeObjectRetain(a1);
  v57 = v6;
  IndexSet.init()(v7);
  v52 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v8 + 16);
  v58 = v2;
  v59 = a1 + 32;
  v56 = v8 + 32;
  v11 = v8;
  swift_bridgeObjectRetain_n(v8, 2);
  v55 = a1;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  v13 = 0;
  v61 = v9;
  v14 = v9 == 0;
  if (!v9)
    goto LABEL_8;
LABEL_2:
  if (v14)
    goto LABEL_41;
  sub_100023AB0(v59 + 40 * v13++, (uint64_t)&v69);
  if (v12 != v10)
  {
LABEL_4:
    if (v12 < *(_QWORD *)(v11 + 16))
    {
      sub_100023AB0(v56 + 40 * v12++, (uint64_t)v68);
      goto LABEL_10;
    }
    goto LABEL_42;
  }
  while (1)
  {
    v12 = v10;
    memset(v68, 0, 40);
LABEL_10:
    sub_1000110A4((uint64_t)&v69, (uint64_t)&v72, &qword_100296440);
    sub_1000110A4((uint64_t)v68, (uint64_t)&v75, &qword_100296440);
    if (!v73)
    {
      swift_bridgeObjectRelease(v11);
      v26 = v58;
      if (v76)
      {
        sub_10000A020((uint64_t)&v75, &qword_100296440);
        swift_bridgeObjectRelease(v55);
        swift_bridgeObjectRelease(v11);
        goto LABEL_19;
      }
      swift_bridgeObjectRelease(v55);
      v45 = v11;
LABEL_38:
      swift_bridgeObjectRelease(v45);
      v27 = v54;
LABEL_39:
      v46 = sub_100006DF4(&qword_1002982C8);
      v47 = sub_1001B1A78(&qword_1002982D0, (uint64_t)&protocol conformance descriptor for [A]);
      v48 = sub_1001B1A78(&qword_1002982D8, (uint64_t)&protocol conformance descriptor for [A]);
      v49 = v57;
      RangeReplaceableCollection<>.remove(atOffsets:)(v57, v46, v47, v48);
      v50 = v77;
      v51 = *(_QWORD *)(v26 + v52);
      *(_QWORD *)(v26 + v52) = v77;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v51);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v27);
      swift_bridgeObjectRelease(v77);
      return;
    }
    if (!v76)
      break;
    sub_10003E994(&v72, (uint64_t)v65);
    sub_10003E994(&v75, (uint64_t)v62);
    v16 = v66;
    v15 = v67;
    sub_100023AF4(v65, v66);
    v17 = dispatch thunk of FormattedString.formattedString.getter(v16, *(_QWORD *)(v15 + 16));
    v19 = v18;
    v21 = v63;
    v20 = v64;
    sub_100023AF4(v62, v63);
    v23 = dispatch thunk of FormattedString.formattedString.getter(v21, *(_QWORD *)(v20 + 16));
    v24 = v22;
    if (v17 == v23 && v19 == v22)
    {
      swift_bridgeObjectRelease_n(v19, 2);
      sub_100009C08(v62);
      sub_100009C08(v65);
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v23, v22, 0);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v24);
      sub_100009C08(v62);
      sub_100009C08(v65);
      if ((v25 & 1) == 0)
      {
        swift_bridgeObjectRelease(v55);
        swift_bridgeObjectRelease_n(v11, 2);
        v26 = v58;
        v9 = v61;
        goto LABEL_19;
      }
    }
    v9 = v61;
    v14 = v13 >= v61;
    if (v13 != v61)
      goto LABEL_2;
LABEL_8:
    *(_QWORD *)&v71 = 0;
    v13 = v9;
    v69 = 0u;
    v70 = 0u;
    if (v12 != v10)
      goto LABEL_4;
  }
  swift_bridgeObjectRelease(v11);
  sub_100009C08(&v72);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v11);
  v26 = v58;
LABEL_19:
  v27 = v54;
  sub_1001B01E0();
  v28 = sub_1001AE158();
  v29 = v28;
  v30 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded;
  v31 = *(unsigned __int8 *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded);
  if (v9 <= 1)
    v31 = 0;
  objc_msgSend(v28, "setHidden:", v31 ^ 1u);

  v32 = sub_1001AE328();
  v33 = v32;
  v34 = *(unsigned __int8 *)(v26 + v30);
  if (v9 <= 1)
    v34 = 0;
  objc_msgSend(v32, "setHidden:", v34 ^ 1u);

  if (!v9)
    goto LABEL_39;
  v35 = (_QWORD *)(v26 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows);
  swift_bridgeObjectRetain(v55);
  v36 = 0;
  v37 = v9 == 0;
LABEL_25:
  if (!v37)
  {
    sub_100023AB0(v59 + 40 * v36, (uint64_t)&v68[1]);
    *(_QWORD *)&v69 = v36;
    sub_10003E994((__int128 *)&v68[1], (uint64_t)&v69 + 8);
    ++v36;
    while (1)
    {
      sub_1000110A4((uint64_t)&v69, (uint64_t)&v72, &qword_1002982E0);
      if (!v74)
        break;
      v38 = v72;
      sub_10003E994((__int128 *)((char *)&v72 + 8), (uint64_t)&v69);
      v39 = sub_1001AFE5C(&v69, v38, v60);
      if (v39)
      {
        v40 = v39;
        swift_beginAccess(v35, v68, 33, 0);
        v41 = v40;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v43 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v42 = *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v43 >= v42 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
        specialized Array._endMutation()(v44);
        swift_endAccess(v68);

        sub_100009C08(&v69);
        v26 = v58;
      }
      else
      {
        IndexSet.insert(_:)(v38);
        sub_100009C08(&v69);
      }
      v37 = v36 >= v61;
      if (v36 != v61)
        goto LABEL_25;
      v70 = 0u;
      v71 = 0u;
      v36 = v61;
      v69 = 0u;
    }
    v45 = v55;
    goto LABEL_38;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

void sub_1001AFB98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex + 8) & 1) == 0)
  {
    v1 = v0;
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex);
    v3 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives;
    if (v2 < *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives) + 16))
    {
      v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows);
      swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows, v30, 0, 0);
      v5 = *v4;
      if (!((unint64_t)*v4 >> 62))
      {
        if (v2 >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          return;
LABEL_5:
        v6 = *v4;
        v26 = v3;
        if ((unint64_t)*v4 >> 62)
        {
          if (v6 < 0)
            v14 = *v4;
          else
            v14 = v6 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v6, 2);
          v7 = _CocoaArrayWrapper.endIndex.getter(v14);
          if (!v7)
            goto LABEL_22;
        }
        else
        {
          v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n(v6, 2);
          if (!v7)
            goto LABEL_22;
        }
        if (v7 < 1)
        {
LABEL_35:
          __break(1u);
          return;
        }
        v8 = 0;
        do
        {
          if ((v6 & 0xC000000000000001) != 0)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
          else
            v9 = *(id *)(v6 + 8 * v8 + 32);
          v10 = v9;
          ++v8;
          v11 = sub_10015CC08();
          objc_msgSend(v11, "setAlpha:", 0.0);

        }
        while (v7 != v8);
LABEL_22:
        swift_bridgeObjectRelease_n(v6, 2);
        v15 = *v4;
        if ((v15 & 0xC000000000000001) == 0)
        {
          if (v2 < 0)
          {
            __break(1u);
          }
          else if ((unint64_t)v2 < *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v16 = *(id *)(v15 + 8 * v2 + 32);
            goto LABEL_26;
          }
          __break(1u);
          goto LABEL_33;
        }
        swift_bridgeObjectRetain(v15);
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v15);
        swift_bridgeObjectRelease(v15);
LABEL_26:
        v17 = sub_10015CC08();

        objc_msgSend(v17, "setAlpha:", 1.0);
        v18 = sub_1001ADBD4();
        if ((v2 & 0x8000000000000000) == 0)
        {
          v19 = *(_QWORD *)(v1 + v26);
          if ((unint64_t)v2 < *(_QWORD *)(v19 + 16))
          {
            v20 = v18;
            sub_100023AB0(v19 + 40 * v2 + 32, (uint64_t)v27);
            v21 = v28;
            v22 = v29;
            sub_100023AF4(v27, v28);
            TranslationAlternative.displayString.getter(v21, v22);
            v24 = v23;
            v25 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v24);
            sub_100009C08(v27);
            objc_msgSend(v20, "setText:", v25);

            return;
          }
          goto LABEL_34;
        }
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      if (v5 < 0)
        v12 = *v4;
      else
        v12 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v4);
      v13 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v5);
      if (v2 < v13)
        goto LABEL_5;
    }
  }
}

id sub_1001AFE5C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[5];

  v4 = v3;
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100023AF4(a1, v12);
  v14 = dispatch thunk of TranslationAlternative.sensesMeta.getter(v12, v13);
  v15 = v14;
  if (!*(_QWORD *)(v14 + 16))
  {
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    swift_bridgeObjectRelease(v14);
    goto LABEL_9;
  }
  sub_100023AB0(v14 + 32, (uint64_t)&v38);
  swift_bridgeObjectRelease(v15);
  if (!*((_QWORD *)&v39 + 1))
  {
LABEL_9:
    sub_10000A020((uint64_t)&v38, &qword_1002982C0);
    return 0;
  }
  sub_10003E994(&v38, (uint64_t)v41);
  v16 = sub_1001AE328();
  v17 = objc_msgSend(v16, "arrangedSubviews");

  v18 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v37 = v19;
    else
      v37 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v19);
  v21 = &selRef_scribbleInteractionDidFinishWriting_;
  if (v20 >= 1)
  {
    v22 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v22, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v23 = objc_msgSend(v22, "heightAnchor");
    v24 = objc_msgSend(v23, "constraintEqualToConstant:", 0.5);

    objc_msgSend(v24, "setActive:", 1);
    v21 = &selRef_scribbleInteractionDidFinishWriting_;
    v25 = objc_msgSend((id)objc_opt_self(UIColor), "separatorColor");
    objc_msgSend(v22, "setBackgroundColor:", v25);

    v26 = sub_1001AE328();
    objc_msgSend(v26, "addArrangedSubview:", v22);

  }
  v27 = a1[3];
  v28 = a1[4];
  sub_100023AF4(a1, v27);
  v29 = TranslationAlternative.displayString.getter(v27, v28);
  v31 = v30;
  sub_100023AB0((uint64_t)v41, (uint64_t)&v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  v32 = objc_allocWithZone((Class)type metadata accessor for SenseRow());
  v33 = sub_10015D0D8(v29, v31, &v38, a2, (uint64_t)v11);
  v34 = sub_1001AE328();
  objc_msgSend(v34, v21[339], v33);

  v35 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v4, "senseTapped:");
  objc_msgSend(v33, "addGestureRecognizer:", v35);

  sub_100009C08(v41);
  return v33;
}

void sub_1001B01E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  _BYTE v15[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows, v15, 1, 0);
  v2 = *v1;
  *v1 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v2);
  v3 = sub_1001AE328();
  v4 = objc_msgSend(v3, "arrangedSubviews");

  v5 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (v7)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease_n(v6, 2);
    v13 = sub_1001AE158();
    objc_msgSend(v13, "setHidden:", 1);

    v14 = sub_1001AE328();
    objc_msgSend(v14, "setHidden:", 1);

    return;
  }
  if (v6 < 0)
    v12 = v6;
  else
    v12 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v7)
    goto LABEL_13;
LABEL_3:
  if (v7 >= 1)
  {
    v8 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      else
        v9 = *(id *)(v6 + 8 * v8 + 32);
      v10 = v9;
      ++v8;
      v11 = sub_1001AE328();
      objc_msgSend(v11, "removeArrangedSubview:", v10);

      objc_msgSend(v10, "removeFromSuperview");
    }
    while (v7 != v8);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_1001B039C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  id v6;
  void *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_1001AD668();
  v3 = v2;
  v4 = OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_expanded))
    v5 = &OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont;
  else
    v5 = &OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_collapsedFontBold;
  objc_msgSend(v2, "setFont:", *(_QWORD *)(v1 + *v5));

  v6 = sub_1001ADBD4();
  v7 = v6;
  if (*(_BYTE *)(v1 + v4))
    v8 = &OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont;
  else
    v8 = &OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_collapsedFontBold;
  objc_msgSend(v6, "setFont:", *(_QWORD *)(v1 + *v8));

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex + 8) & 1) == 0)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex);
    v10 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives;
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives);
    if ((int64_t)v9 < *(_QWORD *)(v11 + 16))
    {
      if ((v9 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_17;
      }
      sub_100023AB0(v11 + 40 * v9 + 32, (uint64_t)v34);
      v12 = v35;
      v13 = v36;
      sub_100023AF4(v34, v35);
      v14 = dispatch thunk of TranslationAlternative.sensesMeta.getter(v12, v13);
      v15 = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease(v14);
      sub_100009C08(v34);
      if (v15 && *(_BYTE *)(v1 + v4) == 1)
      {
        v16 = *(_QWORD *)(v1 + v10);
        if (v9 < *(_QWORD *)(v16 + 16))
        {
          sub_100023AB0(v16 + 40 * v9 + 32, (uint64_t)v31);
          v17 = v32;
          v18 = v33;
          sub_100023AF4(v31, v32);
          v19 = dispatch thunk of TranslationAlternative.sensesMeta.getter(v17, v18);
          if (*(_QWORD *)(v19 + 16))
          {
            v20 = v19;
            sub_100023AB0(v19 + 32, (uint64_t)v34);
            swift_bridgeObjectRelease(v20);
            sub_100009C08(v31);
            v21 = v35;
            v22 = v36;
            sub_100023AF4(v34, v35);
            LODWORD(v21) = dispatch thunk of TranslationSense.sourceMatch.getter(v21, v22);
            v24 = v23;
            v25 = sub_1001AD668();
            sub_1001B05F4(v21, v24, v25);
            swift_bridgeObjectRelease(v24);

            v26 = v35;
            v27 = v36;
            sub_100023AF4(v34, v35);
            LODWORD(v26) = dispatch thunk of TranslationSense.targetMatch.getter(v26, v27);
            v29 = v28;
            v30 = sub_1001ADBD4();
            sub_1001B05F4(v26, v29, v30);
            swift_bridgeObjectRelease(v29);

            sub_100009C08(v34);
            return;
          }
LABEL_18:
          __break(1u);
          return;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
  }
}

void sub_1001B05F4(int a1, int a2, id a3)
{
  uint64_t v3;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  id v18;
  id v19;
  void *v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v5 = objc_msgSend(a3, "attributedText");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v5);

    v8 = objc_msgSend(v7, "string");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = String.count.getter(v9, v11);
    swift_bridgeObjectRelease(v11);
    v13 = (void *)objc_opt_self(UIFont);
    v14 = objc_msgSend(a3, "font");
    if (!v14)
      v14 = objc_msgSend(v13, "preferredFontForTextStyle:", UIFontTextStyleTitle1);
    v15 = v14;
    objc_msgSend(v14, "pointSize");
    v17 = v16;

    v25 = objc_msgSend(v13, "systemFontOfSize:", v17);
    objc_msgSend(v7, "addAttribute:value:range:", NSFontAttributeName);
    v18 = objc_msgSend(a3, "textColor");
    if (!v18)
      v18 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    objc_msgSend(v7, "addAttribute:value:range:", NSForegroundColorAttributeName, v18, 0, v12);

    v19 = objc_msgSend(v7, "string");
    if (v19)
    {
      v20 = v19;
      v21 = String._bridgeToObjectiveC()();
      v22 = objc_msgSend(v20, "rangeOfString:", v21);
      v24 = v23;

      objc_msgSend(v7, "addAttribute:value:range:", NSFontAttributeName, *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont), v22, v24);
      objc_msgSend(a3, "setAttributedText:", v7);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1001B0890()
{
  id v0;
  id v1;
  uint64_t v2;
  Class isa;
  id v4;
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double Width;
  id v15;
  double v16;
  double v17;
  CGFloat v18;
  id v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double Height;
  id v29;
  double v30;
  double v31;
  CGFloat v32;
  id v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  double x;
  double y;
  double v41;
  double v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Class v51;
  id v52;
  uint64_t v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;

  v0 = sub_1001ADBD4();
  v1 = objc_msgSend(v0, "textContainer");

  v2 = sub_10000A05C(0, (unint64_t *)&qword_100294DD8, UIBezierPath_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setExclusionPaths:", isa);

  v4 = sub_1001AE4F0();
  LOBYTE(v1) = objc_msgSend(v4, "isHidden");

  if ((v1 & 1) == 0)
  {
    v5 = sub_1001ADBD4();
    objc_msgSend(v5, "bounds");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;

    v54.origin.x = v7;
    v54.origin.y = v9;
    v54.size.width = v11;
    v54.size.height = v13;
    Width = CGRectGetWidth(v54);
    v15 = sub_1001AE4F0();
    objc_msgSend(v15, "bounds");
    v17 = v16;

    v18 = Width - v17 * 1.25;
    v19 = sub_1001ADBD4();
    objc_msgSend(v19, "bounds");
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;

    v55.origin.x = v21;
    v55.origin.y = v23;
    v55.size.width = v25;
    v55.size.height = v27;
    Height = CGRectGetHeight(v55);
    v29 = sub_1001AE4F0();
    objc_msgSend(v29, "bounds");
    v31 = v30;

    v32 = Height - v31 * 1.25 + -8.0;
    v33 = sub_1001AE4F0();
    objc_msgSend(v33, "bounds");
    v35 = v34;

    v36 = sub_1001AE4F0();
    objc_msgSend(v36, "bounds");
    v38 = v37;

    v56.size.height = v38 * 1.25;
    v56.origin.x = v18;
    v56.origin.y = v32;
    v56.size.width = v35 * 1.25;
    v57 = CGRectStandardize(v56);
    x = v57.origin.x;
    y = v57.origin.y;
    v41 = v57.size.width;
    v42 = v57.size.height;
    v43 = sub_1001ADBD4();
    v44 = objc_msgSend(v43, "textContainer");

    v45 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRect:", x, y, v41, v42);
    v46 = objc_msgSend(v44, "exclusionPaths");
    v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v2);

    v53 = v47;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v49 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v48 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v49 >= v48 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
    v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v45);
    specialized Array._endMutation()(v50);
    v51 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v53);
    objc_msgSend(v44, "setExclusionPaths:", v51);

    v52 = sub_1001ADBD4();
    objc_msgSend(v52, "layoutIfNeeded");

  }
}

uint64_t sub_1001B0C18(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];
  uint64_t v13;

  v2 = v1;
  result = sub_1000105E8(a1);
  if ((result & 1) == 0)
  {
    v5 = v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate;
    swift_beginAccess(v2 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate, v11, 0, 0);
    sub_10000B074(v5, (uint64_t)v12, (uint64_t *)&unk_10028BEB0);
    if (v13)
    {
      sub_100023AB0((uint64_t)v12, (uint64_t)v8);
      sub_10000A020((uint64_t)v12, (uint64_t *)&unk_10028BEB0);
      v6 = v9;
      v7 = v10;
      sub_100023AF4(v8, v9);
      (*(void (**)(void *, uint64_t, uint64_t))(v7 + 24))(a1, v6, v7);
      return sub_100009C08(v8);
    }
    else
    {
      return sub_10000A020((uint64_t)v12, (uint64_t *)&unk_10028BEB0);
    }
  }
  return result;
}

uint64_t sub_1001B0D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];
  uint64_t v12;

  v3 = v1 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate;
  swift_beginAccess(v3, v10, 0, 0);
  sub_10000B074(v3, (uint64_t)v11, (uint64_t *)&unk_10028BEB0);
  if (!v12)
    return sub_10000A020((uint64_t)v11, (uint64_t *)&unk_10028BEB0);
  sub_100023AB0((uint64_t)v11, (uint64_t)v7);
  sub_10000A020((uint64_t)v11, (uint64_t *)&unk_10028BEB0);
  v4 = v8;
  v5 = v9;
  sub_100023AF4(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, v4, v5);
  return sub_100009C08(v7);
}

void sub_1001B0E70(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  char v18[24];
  _BYTE v19[24];
  uint64_t v20;

  v2 = v1;
  v3 = objc_msgSend(a1, "view");
  if (v3)
  {
    v13 = v3;
    v4 = type metadata accessor for SenseRow();
    v5 = swift_dynamicCastClass(v13, v4);
    if (v5
      && ((v6 = v5,
           v7 = &v1[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex],
           v8 = OBJC_IVAR____TtC17SequoiaTranslator8SenseRow_index,
           v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC17SequoiaTranslator8SenseRow_index),
           (v1[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex + 8] & 1) != 0)
       || *(_QWORD *)v7 != v9))
    {
      *(_QWORD *)v7 = v9;
      v7[8] = 0;
      sub_1001AFB98();
      v10 = (uint64_t)&v1[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate];
      swift_beginAccess(&v2[OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate], v18, 0, 0);
      sub_10000B074(v10, (uint64_t)v19, (uint64_t *)&unk_10028BEB0);
      if (v20)
      {
        sub_100023AB0((uint64_t)v19, (uint64_t)v15);
        sub_10000A020((uint64_t)v19, (uint64_t *)&unk_10028BEB0);
        v11 = v16;
        v12 = v17;
        sub_100023AF4(v15, v16);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v12 + 16))(*(_QWORD *)(v6 + v8), v11, v12);
        sub_100009C08(v15);
      }
      else
      {
        sub_10000A020((uint64_t)v19, (uint64_t *)&unk_10028BEB0);
      }
      objc_msgSend(v2, "setNeedsLayout", v13);

    }
    else
    {

    }
  }
}

uint64_t sub_1001B1044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];
  uint64_t v18;

  v9 = v4 + OBJC_IVAR____TtC17SequoiaTranslator8CardView_delegate;
  swift_beginAccess(v9, v16, 0, 0);
  sub_10000B074(v9, (uint64_t)v17, (uint64_t *)&unk_10028BEB0);
  if (!v18)
    return sub_10000A020((uint64_t)v17, (uint64_t *)&unk_10028BEB0);
  sub_100023AB0((uint64_t)v17, (uint64_t)v13);
  sub_10000A020((uint64_t)v17, (uint64_t *)&unk_10028BEB0);
  v10 = v14;
  v11 = v15;
  sub_100023AF4(v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a3, a4, v10, v11);
  return sub_100009C08(v13);
}

id sub_1001B1150(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  NSString v9;

  v4 = a1;
  v5 = (void *)a3();
  v6 = objc_msgSend(v5, "text");

  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v8 = v7;

  }
  else
  {

    v8 = 0xE000000000000000;
  }
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  return v9;
}

void sub_1001B1200(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;

  v4 = a1;
  v5 = (void *)a3();
  v6 = objc_msgSend(v5, "text");

  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v8 = v7;

    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v10 = v9;
  }
  else
  {
    __break(1u);
  }
}

void sub_1001B1368(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  id v5;

  v4 = a1;
  v5 = (id)a3();
  objc_msgSend(v5, "sendActionsForControlEvents:", 64);

}

uint64_t sub_1001B13FC()
{
  return sub_1001B1420(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_sourceLocale);
}

uint64_t sub_1001B1414()
{
  return sub_1001B1420(&OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_targetLocale);
}

uint64_t sub_1001B1420(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = v1 + *a1;
  swift_beginAccess(v10, v15, 0, 0);
  sub_10000B074(v10, (uint64_t)v9, (uint64_t *)&unk_10028FE50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3))
  {
    sub_10000A020((uint64_t)v9, (uint64_t *)&unk_10028FE50);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    v12 = sub_10000A020((uint64_t)v9, (uint64_t *)&unk_10028FE50);
    v11 = Locale.identifier.getter(v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v11;
}

id sub_1001B1588(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

uint64_t sub_1001B15F0()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separatorWidthConstraint));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_10000A020(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_sourceLocale, (uint64_t *)&unk_10028FE50);
  return sub_10000A020(v0 + OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_targetLocale, (uint64_t *)&unk_10028FE50);
}

id sub_1001B1788()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranslationCard(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001B1958()
{
  return type metadata accessor for TranslationCard(0);
}

uint64_t type metadata accessor for TranslationCard(uint64_t a1)
{
  uint64_t result;

  result = qword_1002982B0;
  if (!qword_1002982B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslationCard);
  return result;
}

void sub_1001B199C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[25];
  uint64_t v5;
  uint64_t v6;

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = "\b";
  v4[3] = "\b";
  v4[4] = "\b";
  v4[5] = "\b";
  v4[6] = "\b";
  v4[7] = "\b";
  v4[8] = "\b";
  v4[9] = "\b";
  v4[10] = "\b";
  v4[11] = &unk_1001F67F0;
  v4[12] = "\b";
  v4[13] = "\b";
  v4[14] = "\b";
  v4[15] = "\b";
  v4[16] = "\b";
  v4[17] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[19] = &unk_1001F67F0;
  v4[20] = &unk_1001F6808;
  v4[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[22] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[23] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[24] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000A8A38(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_updateClassMetadata2(a1, 256, 27, v4, a1 + 488);
  }
}

uint64_t sub_1001B1A78(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000070BC(&qword_1002982C8);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1001B1ABC()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___languageOneLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separator] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___separatorWidthConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___sourceView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___languageTwoLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___targetView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___hintView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___senseHeader] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___senseRowsStack] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___favoritedImageView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard____lazy_storage___spacer] = 0;
  v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_isIdentity] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_favoriteObservation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeObservation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_ttsPlaybackRateObservation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedDisambiguableResult] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_cachedTranslation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_padding] = 0x4034000000000000;
  v1 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternativesBehaviour;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASRAlternativesBehaviour()), "init");
  v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_enableSelectable] = 1;
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_selectedAlternativeIndex];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_alternatives] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_senseRows] = _swiftEmptyArrayStorage;
  v3 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_expandedFont;
  v4 = (void *)objc_opt_self(UIFontDescriptor);
  v5 = objc_msgSend(v4, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
  v6 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v5, "pointSize");
  v7 = objc_msgSend(v6, "systemFontOfSize:weight:");
  v8 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
  v9 = objc_msgSend(v8, "scaledFontForFont:maximumPointSize:", v7, 1.79769313e308);

  *(_QWORD *)&v0[v3] = v9;
  v10 = OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_collapsedFontBold;
  v11 = objc_msgSend(v4, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, 0);
  objc_msgSend(v11, "pointSize");
  v12 = objc_msgSend(v6, "systemFontOfSize:weight:");
  v13 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  v14 = objc_msgSend(v13, "scaledFontForFont:maximumPointSize:", v12, 1.79769313e308);

  *(_QWORD *)&v0[v10] = v14;
  v15 = &v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_sourceLocale];
  v16 = type metadata accessor for Locale(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  v17(&v0[OBJC_IVAR____TtC17SequoiaTranslator15TranslationCard_targetLocale], 1, 1, v16);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/TranslationCard.swift", 39, 2, 212, 0);
  __break(1u);
}

uint64_t sub_1001B1E58(uint64_t (*a1)(uint64_t))
{
  void *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint8_t *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v30 - v10;
  v12 = a1(v9);
  static Locale.current.getter(v12);
  v13 = Locale.sqDisplayName(context:in:)(0, v8);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v11, v4);
  if (!v15)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v13 = 0x45474155474E414CLL;
    v17 = type metadata accessor for Logger(0);
    sub_10000F66C(v17, (uint64_t)qword_1002AA470);
    v18 = v3;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v33 = v22;
      v35 = v22;
      *(_DWORD *)v21 = 136315138;
      v31 = v21 + 4;
      v32 = v21;
      v23 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v22);
      v24 = Locale.identifier.getter(v23);
      v26 = v25;
      v16(v11, v4);
      v34 = sub_1001A7FE4(v24, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v31);

      swift_bridgeObjectRelease();
      v27 = v32;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to get sqDisplayName for locale %s", v32, 0xCu);
      v28 = v33;
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
  }
  return v13;
}

id sub_1001B20E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  id v20;
  id *v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v30;

  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v30);
  v0 = v30;
  KeyPath = swift_getKeyPath(&unk_1001F69D8);
  v30 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(id *)(v0 + 72);
  swift_release(v0);
  dispatch thunk of PersistedTranslation.displaySourceText.getter(v4);
  v6 = v5;

  v7 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(v6);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithString:", v8, swift_bridgeObjectRelease().n128_f64[0]);
  swift_bridgeObjectRelease();

  v10 = objc_msgSend(v9, "length");
  Bindable.wrappedValue.getter(&v30);
  v11 = v30;
  v12 = swift_getKeyPath(&unk_1001F69D8);
  v30 = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, v12, v2);
  swift_release(v12);
  v13 = *(id *)(v11 + 72);
  swift_release(v11);
  dispatch thunk of PersistedTranslation.displayText.getter(v14);
  v16 = v15;

  v17 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(v16);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "initWithString:", v18, swift_bridgeObjectRelease().n128_f64[0]);
  swift_bridgeObjectRelease();

  v20 = objc_msgSend(v19, "length");
  v21 = (id *)&UIFontTextStyleTitle1;
  if ((uint64_t)v20 <= (uint64_t)v10)
    v22 = (uint64_t)v10;
  else
    v22 = (uint64_t)v20;
  if (v22 >= 50)
    v21 = (id *)&UIFontTextStyleTitle3;
  v23 = *v21;
  v24 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", v23, 0);
  v25 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v24, "pointSize");
  v26 = objc_msgSend(v25, "systemFontOfSize:weight:");
  v27 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", v23);
  v28 = objc_msgSend(v27, "scaledFontForFont:maximumPointSize:", v26, 1.79769313e308);

  return v28;
}

uint64_t sub_1001B2408@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  int v65;
  id v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (**v104)();
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t OpaqueTypeConformance2;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __n128 v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  void *v162;
  char v163;
  uint64_t v164;

  v156 = a1;
  v158 = type metadata accessor for TranslationCardView(0);
  v149 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v150 = v2;
  v155 = (uint64_t)&v132 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100006DF4(&qword_1002983A8);
  __chkstk_darwin(v144);
  v145 = (uint64_t)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v133);
  v135 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100006DF4(&qword_1002983B0);
  __chkstk_darwin(v132);
  v134 = (uint64_t)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100006DF4(&qword_1002983B8);
  __chkstk_darwin(v138);
  v136 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_1002983C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_1002983C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_1002983D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006DF4(&qword_1002983D8);
  __chkstk_darwin(v16);
  v18 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006DF4(&qword_1002983E0);
  v20 = __chkstk_darwin(v19);
  v137 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v141 = (uint64_t)&v132 - v22;
  v140 = sub_100006DF4(&qword_1002983E8);
  __chkstk_darwin(v140);
  v142 = (uint64_t)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100006DF4(&qword_1002983F0);
  __chkstk_darwin(v146);
  v143 = (uint64_t)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006DF4(&qword_1002983F8);
  v153 = *(_QWORD *)(v25 - 8);
  v154 = v25;
  __chkstk_darwin(v25);
  v152 = (char *)&v132 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100006DF4(&qword_100298400);
  v148 = *(_QWORD *)(v151 - 8);
  v27 = __chkstk_darwin(v151);
  v147 = (char *)&v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v27);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v29 = (uint64_t *)&v9[*(int *)(sub_100006DF4(&qword_100298408) + 44)];
  *v29 = sub_1001B3044();
  v30 = (uint64_t)v29 + *(int *)(sub_100006DF4(&qword_100298410) + 44);
  v31 = v1;
  v32 = sub_1001B339C(v1, v30);
  v33 = static Edge.Set.horizontal.getter(v32);
  v34 = EdgeInsets.init(_all:)(24.0);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_10000B074((uint64_t)v9, (uint64_t)v12, &qword_1002983C0);
  v41 = &v12[*(int *)(v10 + 36)];
  *v41 = v33;
  *((double *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  v42 = sub_10000A020((uint64_t)v9, &qword_1002983C0);
  v43 = static Edge.Set.top.getter(v42);
  v44 = EdgeInsets.init(_all:)(22.0);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  sub_10000B074((uint64_t)v12, (uint64_t)v15, &qword_1002983C8);
  v51 = &v15[*(int *)(v13 + 36)];
  *v51 = v43;
  *((double *)v51 + 1) = v44;
  *((_QWORD *)v51 + 2) = v46;
  *((_QWORD *)v51 + 3) = v48;
  *((_QWORD *)v51 + 4) = v50;
  v51[40] = 0;
  v52 = sub_10000A020((uint64_t)v12, &qword_1002983C8);
  v53 = static Edge.Set.bottom.getter(v52);
  v54 = EdgeInsets.init(_all:)(24.0);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  sub_10000B074((uint64_t)v15, (uint64_t)v18, &qword_1002983D0);
  v139 = v16;
  v61 = &v18[*(int *)(v16 + 36)];
  *v61 = v53;
  *((double *)v61 + 1) = v54;
  *((_QWORD *)v61 + 2) = v56;
  *((_QWORD *)v61 + 3) = v58;
  *((_QWORD *)v61 + 4) = v60;
  v61[40] = 0;
  sub_10000A020((uint64_t)v15, &qword_1002983D0);
  v157 = v31;
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v159);
  v62 = v159;
  KeyPath = swift_getKeyPath(&unk_1001F68E8);
  v159 = v62;
  v64 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, KeyPath, v64);
  swift_release(KeyPath);
  v65 = *(unsigned __int8 *)(v62 + 227);
  swift_release(v62);
  if (v65 == 1)
  {
    v66 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemGroupedBackgroundColor");
    v67 = Color.init(uiColor:)(v66);
    v68 = static Edge.Set.all.getter(v67);
    v69 = v134;
    sub_10000B074((uint64_t)v18, v134, &qword_1002983D8);
    v70 = v69 + *(int *)(v132 + 36);
    *(_QWORD *)v70 = v67;
    *(_BYTE *)(v70 + 8) = v68;
    v71 = v135;
    v72 = &v135[*(int *)(v133 + 20)];
    v73 = enum case for RoundedCornerStyle.continuous(_:);
    v74 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 104))(v72, v73, v74);
    __asm { FMOV            V0.2D, #10.0 }
    *v71 = _Q0;
    v80 = v138;
    v81 = (uint64_t)v136;
    v82 = (uint64_t)&v136[*(int *)(v138 + 36)];
    sub_100032D68((uint64_t)v71, v82, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v82 + *(int *)(sub_100006DF4(&qword_10028CFC8) + 36)) = 256;
    sub_10000B074(v69, v81, &qword_1002983B0);
    sub_100032DAC((uint64_t)v71, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    sub_10000A020(v69, &qword_1002983B0);
    v83 = v145;
    sub_10000B074(v81, v145, &qword_1002983B8);
    swift_storeEnumTagMultiPayload(v83, v144, 0);
    v84 = sub_1001B9A70();
    v85 = sub_10001B6DC(&qword_100298428, &qword_1002983D8, (void (*)(void))sub_1001B9B98);
    v86 = (uint64_t)v137;
    _ConditionalContent<>.init(storage:)(v83, v80, v139, v84, v85);
    sub_10000A020(v81, &qword_1002983B8);
  }
  else
  {
    v87 = v145;
    sub_10000B074((uint64_t)v18, v145, &qword_1002983D8);
    swift_storeEnumTagMultiPayload(v87, v144, 1);
    v88 = sub_1001B9A70();
    v89 = sub_10001B6DC(&qword_100298428, &qword_1002983D8, (void (*)(void))sub_1001B9B98);
    v86 = (uint64_t)v137;
    _ConditionalContent<>.init(storage:)(v87, v138, v139, v88, v89);
  }
  v90 = v141;
  sub_1000110A4(v86, v141, &qword_1002983E0);
  sub_10000A020((uint64_t)v18, &qword_1002983D8);
  Bindable.wrappedValue.getter(&v159);
  v91 = v159;
  v92 = swift_getKeyPath(&unk_1001F6910);
  v159 = v91;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v92, v64);
  swift_release(v92);
  v93 = *(_BYTE *)(v91 + 225);
  swift_release(v91);
  v94 = v142;
  sub_10000B074(v90, v142, &qword_1002983E0);
  *(_BYTE *)(v94 + *(int *)(v140 + 36)) = v93;
  sub_10000A020(v90, &qword_1002983E0);
  v95 = v157;
  v96 = v155;
  sub_100032D68(v157, v155, type metadata accessor for TranslationCardView);
  v97 = *(unsigned __int8 *)(v149 + 80);
  v98 = (v97 + 16) & ~v97;
  v99 = v98 + v150;
  v100 = v97 | 7;
  v101 = swift_allocObject(&unk_100270610, v98 + v150, v97 | 7);
  sub_1001B9C4C(v96, v101 + v98);
  v102 = v143;
  sub_10000B074(v94, v143, &qword_1002983E8);
  v103 = v146;
  v104 = (void (**)())(v102 + *(int *)(v146 + 36));
  *v104 = sub_1001B9C90;
  v104[1] = (void (*)())v101;
  v104[2] = 0;
  v104[3] = 0;
  sub_10000A020(v94, &qword_1002983E8);
  v105 = v158;
  v106 = v95 + *(int *)(v158 + 32);
  v107 = *(void **)v106;
  if (*(_QWORD *)v106)
  {
    v108 = swift_getKeyPath(&unk_1001F6938);
    v109 = swift_getKeyPath(&unk_1001F6960);
    v110 = v107;
    static Published.subscript.getter(&v159, v110, v108);

    swift_release(v108);
    swift_release(v109);
    v111 = v157;
    sub_100032D68(v157, v96, type metadata accessor for TranslationCardView);
    v112 = swift_allocObject(&unk_100270638, v99, v100);
    sub_1001B9C4C(v96, v112 + v98);
    v113 = sub_10001B6DC(&qword_100298448, &qword_1002983F0, (void (*)(void))sub_1001B9D00);
    v114 = v152;
    View.onChange<A>(of:initial:_:)(&v159, 1, sub_1001B9CC8, v112, v103, &type metadata for Bool, v113, &protocol witness table for Bool);
    swift_release(v112);
    sub_10000A020(v102, &qword_1002983F0);
    v115 = v111 + *(int *)(v105 + 44);
    v116 = *(_BYTE *)v115;
    v117 = *(_QWORD *)(v115 + 8);
    v163 = v116;
    v164 = v117;
    v118 = sub_100006DF4(&qword_10028CF50);
    State.projectedValue.getter(&v159, v118);
    v119 = v159;
    v120 = v160;
    v121 = v161;
    v122 = type metadata accessor for GenderDisambiguationLearnMoreView(0);
    v159 = v103;
    v160 = &type metadata for Bool;
    v161 = v113;
    v162 = &protocol witness table for Bool;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v159, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v124 = sub_100007D5C(&qword_10028CF70, (uint64_t (*)(uint64_t))&type metadata accessor for GenderDisambiguationLearnMoreView, (uint64_t)&protocol conformance descriptor for GenderDisambiguationLearnMoreView);
    v125 = v147;
    v126 = v154;
    View.formSheet<A>(isPresented:content:)(v119, v120, v121, &j___s13TranslationUI33GenderDisambiguationLearnMoreViewVACycfC_0, 0, v154, v122, OpaqueTypeConformance2, v124);
    swift_release(v120);
    v127 = swift_release(v119);
    (*(void (**)(char *, uint64_t, __n128))(v153 + 8))(v114, v126, v127);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v148 + 32))(v156, v125, v151);
  }
  else
  {
    v129 = *(_QWORD *)(v106 + 8);
    v130 = type metadata accessor for SharedTranslationOptions(0);
    v131 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
    result = EnvironmentObject.error()(0, v129, v130, v131);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B3044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006DF4(&qword_10028CFE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028CE40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v25 - v14);
  type metadata accessor for TranslationCardView(0);
  sub_1000D58EC(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_10000B074((uint64_t)v15, (uint64_t)v6, &qword_10028CE40);
  sub_10000B074((uint64_t)v13, v16, &qword_10028CE40);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) != 1)
  {
    sub_10000B074((uint64_t)v6, (uint64_t)v10, &qword_10028CE40);
    if (v17(v16, 1, v0) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      v19 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v19);
      v21 = *(void (**)(char *, uint64_t))(v1 + 8);
      v21(v3, v0);
      sub_10000A020((uint64_t)v13, &qword_10028CE40);
      sub_10000A020((uint64_t)v15, &qword_10028CE40);
      v21(v10, v0);
      v18 = sub_10000A020((uint64_t)v6, &qword_10028CE40);
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v26 = static HorizontalAlignment.leading.getter(v18);
      v27 = 0;
      v28 = 1;
      v22 = sub_10004965C();
      v23 = &type metadata for VStackLayout;
      return AnyLayout.init<A>(_:)(&v26, v23, v22);
    }
    sub_10000A020((uint64_t)v13, &qword_10028CE40);
    sub_10000A020((uint64_t)v15, &qword_10028CE40);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_6:
    v18 = sub_10000A020((uint64_t)v6, &qword_10028CFE8);
    goto LABEL_9;
  }
  sub_10000A020((uint64_t)v13, &qword_10028CE40);
  sub_10000A020((uint64_t)v15, &qword_10028CE40);
  if (v17(v16, 1, v0) != 1)
    goto LABEL_6;
  v18 = sub_10000A020((uint64_t)v6, &qword_10028CE40);
LABEL_8:
  v26 = static VerticalAlignment.top.getter(v18);
  v27 = 0;
  v28 = 1;
  v22 = sub_1000496A0();
  v23 = &type metadata for HStackLayout;
  return AnyLayout.init<A>(_:)(&v26, v23, v22);
}

uint64_t sub_1001B339C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_QWORD);
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  int v58;
  _QWORD *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  void (*v67)(_BYTE *, uint64_t);
  _BYTE *v68;
  _BYTE *v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _BYTE *v82;
  uint64_t v83;
  double v84;
  _BYTE *v85;
  _QWORD *v86;
  _BYTE *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  void (*v91)(_BYTE *, uint64_t);
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  double *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t KeyPath;
  _BYTE *v109;
  uint64_t *v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v118[4];
  int v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  int v124;
  void (*v125)(_BYTE *, _QWORD, uint64_t, uint64_t);
  void (*v126)(_BYTE *, _QWORD, uint64_t);
  unsigned int v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  _QWORD *v136;
  _BYTE *v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  _BYTE *v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;

  v147 = a2;
  v3 = sub_100006DF4(&qword_100298460);
  __chkstk_darwin(v3);
  v144 = (uint64_t *)&v118[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v142 = sub_100006DF4(&qword_100298468);
  v5 = __chkstk_darwin(v142);
  v146 = &v118[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v145 = &v118[-v7];
  v8 = type metadata accessor for UserInterfaceSizeClass(0);
  v9 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v123 = &v118[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v148 = sub_100006DF4(&qword_10028CFE8);
  v11 = __chkstk_darwin(v148);
  v137 = &v118[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v14 = &v118[-v13];
  v15 = sub_100006DF4(&qword_10028CE40);
  v16 = __chkstk_darwin(v15);
  v122 = &v118[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v149 = &v118[-v19];
  v20 = __chkstk_darwin(v18);
  v132 = &v118[-v21];
  v22 = __chkstk_darwin(v20);
  v128 = &v118[-v23];
  v24 = __chkstk_darwin(v22);
  v26 = &v118[-v25];
  __chkstk_darwin(v24);
  v28 = &v118[-v27];
  v131 = type metadata accessor for Divider(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v30 = &v118[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v129 = sub_100006DF4(&qword_100298470);
  __chkstk_darwin(v129);
  v135 = &v118[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v134 = sub_100006DF4(&qword_100298478);
  v32 = __chkstk_darwin(v134);
  v141 = &v118[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = __chkstk_darwin(v32);
  v133 = &v118[-v35];
  __chkstk_darwin(v34);
  v139 = &v118[-v36];
  v37 = sub_100006DF4(&qword_100298480);
  v38 = __chkstk_darwin(v37);
  v140 = &v118[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = __chkstk_darwin(v38);
  v42 = &v118[-v41];
  v43 = __chkstk_darwin(v40);
  v45 = &v118[-v44];
  *(_QWORD *)v42 = static HorizontalAlignment.leading.getter(v43);
  *((_QWORD *)v42 + 1) = 0x4010000000000000;
  v42[16] = 0;
  v46 = sub_100006DF4(&qword_100298488);
  sub_1001B3EDC(a1, (uint64_t)&v42[*(int *)(v46 + 44)]);
  v47 = (uint64_t)v42;
  v48 = v148;
  v138 = v45;
  v49 = (uint64_t)v45;
  v50 = v30;
  v51 = sub_1000110A4(v47, v49, &qword_100298480);
  v52 = Divider.init()(v51);
  v124 = static Edge.Set.vertical.getter(v52);
  v53 = *(int *)(type metadata accessor for TranslationCardView(0) + 36);
  v143 = a1;
  v54 = a1 + v53;
  sub_1000D58EC(v28);
  v55 = (void (*)(_QWORD))v9[13];
  v127 = enum case for UserInterfaceSizeClass.compact(_:);
  v126 = (void (*)(_BYTE *, _QWORD, uint64_t))v55;
  v55(v26);
  v125 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v9[7];
  v125(v26, 0, 1, v8);
  v56 = (uint64_t)&v14[*(int *)(v48 + 48)];
  sub_10000B074((uint64_t)v28, (uint64_t)v14, &qword_10028CE40);
  sub_10000B074((uint64_t)v26, v56, &qword_10028CE40);
  v136 = v9;
  v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v9[6];
  if (v57((uint64_t)v14, 1, v8) == 1)
  {
    sub_10000A020((uint64_t)v26, &qword_10028CE40);
    sub_10000A020((uint64_t)v28, &qword_10028CE40);
    v58 = v57(v56, 1, v8);
    v59 = v132;
    if (v58 == 1)
    {
      sub_10000A020((uint64_t)v14, &qword_10028CE40);
      v60 = 8.0;
      v61 = (uint64_t)v137;
      v62 = (uint64_t)v135;
      goto LABEL_9;
    }
  }
  else
  {
    sub_10000B074((uint64_t)v14, (uint64_t)v128, &qword_10028CE40);
    if (v57(v56, 1, v8) != 1)
    {
      v63 = v136;
      v64 = v123;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v136[4])(v123, v56, v8);
      v65 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v121 = v54;
      v120 = v50;
      v66 = v128;
      v119 = dispatch thunk of static Equatable.== infix(_:_:)(v128, v64, v8, v65);
      v67 = (void (*)(_BYTE *, uint64_t))v63[1];
      v68 = v64;
      v48 = v148;
      v67(v68, v8);
      sub_10000A020((uint64_t)v26, &qword_10028CE40);
      sub_10000A020((uint64_t)v28, &qword_10028CE40);
      v69 = v66;
      v50 = v120;
      v67(v69, v8);
      sub_10000A020((uint64_t)v14, &qword_10028CE40);
      v60 = 8.0;
      v61 = (uint64_t)v137;
      v62 = (uint64_t)v135;
      v59 = v132;
      if ((v119 & 1) != 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    sub_10000A020((uint64_t)v26, &qword_10028CE40);
    sub_10000A020((uint64_t)v28, &qword_10028CE40);
    ((void (*)(_BYTE *, uint64_t))v136[1])(v128, v8);
    v59 = v132;
  }
  sub_10000A020((uint64_t)v14, &qword_10028CFE8);
  v61 = (uint64_t)v137;
  v62 = (uint64_t)v135;
LABEL_8:
  v60 = 0.0;
LABEL_9:
  v70 = EdgeInsets.init(_all:)(v60);
  v72 = v71;
  v74 = v73;
  v76 = v75;
  v77 = v130;
  v78 = v131;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v130 + 16))(v62, v50, v131);
  v79 = v62 + *(int *)(v129 + 36);
  *(_BYTE *)v79 = v124;
  *(double *)(v79 + 8) = v70;
  *(_QWORD *)(v79 + 16) = v72;
  *(_QWORD *)(v79 + 24) = v74;
  *(_QWORD *)(v79 + 32) = v76;
  *(_BYTE *)(v79 + 40) = 0;
  v80 = (*(uint64_t (**)(_BYTE *, uint64_t))(v77 + 8))(v50, v78);
  v81 = static Edge.Set.horizontal.getter(v80);
  sub_1000D58EC(v59);
  v82 = v149;
  v126(v149, v127, v8);
  v125(v82, 0, 1, v8);
  v83 = v61 + *(int *)(v48 + 48);
  sub_10000B074((uint64_t)v59, v61, &qword_10028CE40);
  sub_10000B074((uint64_t)v82, v83, &qword_10028CE40);
  if (v57(v61, 1, v8) != 1)
  {
    v85 = v122;
    sub_10000B074(v61, (uint64_t)v122, &qword_10028CE40);
    if (v57(v83, 1, v8) != 1)
    {
      v86 = v136;
      v87 = v123;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v136[4])(v123, v83, v8);
      v88 = sub_100007D5C((unint64_t *)&qword_10028D028, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v89 = dispatch thunk of static Equatable.== infix(_:_:)(v85, v87, v8, v88);
      v90 = (uint64_t)v59;
      v91 = (void (*)(_BYTE *, uint64_t))v86[1];
      v91(v87, v8);
      sub_10000A020((uint64_t)v149, &qword_10028CE40);
      sub_10000A020(v90, &qword_10028CE40);
      v91(v85, v8);
      sub_10000A020(v61, &qword_10028CE40);
      v84 = 0.0;
      if ((v89 & 1) != 0)
        goto LABEL_17;
LABEL_16:
      v84 = 36.0;
      goto LABEL_17;
    }
    sub_10000A020((uint64_t)v149, &qword_10028CE40);
    sub_10000A020((uint64_t)v59, &qword_10028CE40);
    ((void (*)(_BYTE *, uint64_t))v136[1])(v85, v8);
LABEL_14:
    sub_10000A020(v61, &qword_10028CFE8);
    goto LABEL_16;
  }
  sub_10000A020((uint64_t)v82, &qword_10028CE40);
  sub_10000A020((uint64_t)v59, &qword_10028CE40);
  if (v57(v83, 1, v8) != 1)
    goto LABEL_14;
  sub_10000A020(v61, &qword_10028CE40);
  v84 = 0.0;
LABEL_17:
  v92 = EdgeInsets.init(_all:)(v84);
  v94 = v93;
  v96 = v95;
  v98 = v97;
  v99 = v133;
  sub_10000B074(v62, (uint64_t)v133, &qword_100298470);
  v100 = (double *)&v99[*(int *)(v134 + 36)];
  *(_BYTE *)v100 = v81;
  v100[1] = v92;
  *((_QWORD *)v100 + 2) = v94;
  *((_QWORD *)v100 + 3) = v96;
  *((_QWORD *)v100 + 4) = v98;
  *((_BYTE *)v100 + 40) = 0;
  sub_10000A020(v62, &qword_100298470);
  v101 = v139;
  v102 = sub_1000110A4((uint64_t)v99, (uint64_t)v139, &qword_100298478);
  v103 = static HorizontalAlignment.leading.getter(v102);
  v104 = (uint64_t)v144;
  *v144 = v103;
  *(_QWORD *)(v104 + 8) = 0;
  *(_BYTE *)(v104 + 16) = 0;
  v105 = sub_100006DF4(&qword_100298490);
  v106 = sub_1001B51BC(v143, v104 + *(int *)(v105 + 44));
  v107 = static Color.translateAccentColor.getter(v106);
  KeyPath = swift_getKeyPath(&unk_1001F69A8);
  v109 = v146;
  sub_10000B074(v104, (uint64_t)v146, &qword_100298460);
  v110 = (uint64_t *)&v109[*(int *)(v142 + 36)];
  *v110 = KeyPath;
  v110[1] = v107;
  sub_10000A020(v104, &qword_100298460);
  v111 = v145;
  sub_1000110A4((uint64_t)v109, (uint64_t)v145, &qword_100298468);
  v112 = (uint64_t)v138;
  v113 = v140;
  sub_10000B074((uint64_t)v138, (uint64_t)v140, &qword_100298480);
  v114 = v141;
  sub_10000B074((uint64_t)v101, (uint64_t)v141, &qword_100298478);
  sub_10000B074((uint64_t)v111, (uint64_t)v109, &qword_100298468);
  v115 = v147;
  sub_10000B074((uint64_t)v113, v147, &qword_100298480);
  v116 = sub_100006DF4(&qword_100298498);
  sub_10000B074((uint64_t)v114, v115 + *(int *)(v116 + 48), &qword_100298478);
  sub_10000B074((uint64_t)v109, v115 + *(int *)(v116 + 64), &qword_100298468);
  sub_10000A020((uint64_t)v111, &qword_100298468);
  sub_10000A020((uint64_t)v101, &qword_100298478);
  sub_10000A020(v112, &qword_100298480);
  sub_10000A020((uint64_t)v109, &qword_100298468);
  sub_10000A020((uint64_t)v114, &qword_100298478);
  return sub_10000A020((uint64_t)v113, &qword_100298480);
}

uint64_t sub_1001B3EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];

  v66 = a2;
  v3 = type metadata accessor for TranslationCardView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v4;
  __chkstk_darwin(v3);
  v59 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100298540);
  __chkstk_darwin(v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100006DF4(&qword_100298548);
  v9 = __chkstk_darwin(v64);
  v65 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v57 - v12;
  __chkstk_darwin(v11);
  v63 = (uint64_t)&v57 - v14;
  v15 = sub_100006DF4(&qword_100298550);
  v16 = __chkstk_darwin(v15);
  v62 = (uint64_t)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v57 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v57 - v22;
  v58 = (uint64_t)&v57 - v22;
  *(_QWORD *)v20 = static VerticalAlignment.center.getter(v21);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v24 = sub_100006DF4(&qword_100298558);
  sub_1001B70E0((uint64_t (*)(uint64_t))&dispatch thunk of PersistedTranslation.sourceLocale.getter, 0x8000000100202460, (uint64_t)&v20[*(int *)(v24 + 44)]);
  v25 = sub_1000110A4((uint64_t)v20, (uint64_t)v23, &qword_100298550);
  *(_QWORD *)v8 = static VerticalAlignment.bottom.getter(v25);
  *((_QWORD *)v8 + 1) = 0x4024000000000000;
  v8[16] = 0;
  v26 = sub_100006DF4(&qword_100298560);
  sub_1001B43E8(a1, (uint64_t)&v8[*(int *)(v26 + 44)]);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(v68);
  v27 = v68[0];
  KeyPath = swift_getKeyPath(&unk_1001F6BF0);
  v68[0] = v27;
  v29 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v68, KeyPath, v29);
  swift_release(KeyPath);
  v30 = *(_BYTE *)(v27 + 144);
  swift_release(v27);
  Bindable.wrappedValue.getter(v68);
  v31 = v68[0];
  v32 = swift_getKeyPath(&unk_1001F69D8);
  v68[0] = v31;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v68, v32, v29);
  swift_release(v32);
  v33 = *(id *)(v31 + 72);
  swift_release(v31);
  v34 = sub_1001A602C();

  if (v34 == 4)
    v35 = 2;
  else
    v35 = v34;
  v36 = a1;
  v37 = v59;
  sub_100032D68(v36, v59, type metadata accessor for TranslationCardView);
  v38 = *(unsigned __int8 *)(v60 + 80);
  v39 = (v38 + 16) & ~v38;
  v40 = swift_allocObject(&unk_100270728, v39 + v61, v38 | 7);
  v41 = sub_1001B9C4C(v37, v40 + v39);
  v42 = static Color.sourceTextColor.getter(v41);
  swift_retain(v40);
  v44 = static VerticalAlignment.bottom.getter(v43);
  v67 = 0;
  swift_retain(v42);
  static Binding.constant(_:)(v68, &v67, &type metadata for CGFloat);
  v45 = v68[0];
  v46 = v68[1];
  v47 = v68[2];
  sub_10000B074((uint64_t)v8, (uint64_t)v13, &qword_100298540);
  swift_release(v40);
  swift_release(v42);
  v48 = &v13[*(int *)(v64 + 36)];
  *v48 = 0;
  v48[1] = v30;
  v48[2] = v35;
  *((_QWORD *)v48 + 1) = sub_1001BA320;
  *((_QWORD *)v48 + 2) = v40;
  v48[24] = 0;
  *((_QWORD *)v48 + 4) = v44;
  *((_QWORD *)v48 + 5) = v42;
  *((_QWORD *)v48 + 6) = v45;
  *((_QWORD *)v48 + 7) = v46;
  *((_QWORD *)v48 + 8) = v47;
  *((_QWORD *)v48 + 9) = 0x4020000000000000;
  sub_10000A020((uint64_t)v8, &qword_100298540);
  v49 = v63;
  sub_1000110A4((uint64_t)v13, v63, &qword_100298548);
  v50 = v58;
  v51 = v62;
  sub_10000B074(v58, v62, &qword_100298550);
  v52 = v65;
  sub_10000B074(v49, v65, &qword_100298548);
  v53 = v66;
  sub_10000B074(v51, v66, &qword_100298550);
  v54 = sub_100006DF4(&qword_1002985C8);
  sub_10000B074(v52, v53 + *(int *)(v54 + 48), &qword_100298548);
  v55 = v53 + *(int *)(v54 + 64);
  *(_QWORD *)v55 = 0;
  *(_BYTE *)(v55 + 8) = 0;
  sub_10000A020(v49, &qword_100298548);
  sub_10000A020(v50, &qword_100298550);
  sub_10000A020(v52, &qword_100298548);
  return sub_10000A020(v51, &qword_100298550);
}

uint64_t sub_1001B43E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  void *v39;
  id v40;
  __n128 v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (**v76)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v77;
  uint64_t (**v78)(char, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  char *v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v141 = a2;
  v3 = type metadata accessor for Locale(0);
  v144 = *(_QWORD *)(v3 - 8);
  v145 = v3;
  __chkstk_darwin(v3);
  v137 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LayoutDirection(0);
  v139 = *(_QWORD *)(v5 - 8);
  v140 = v5;
  __chkstk_darwin(v5);
  v138 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TranslationCardView(0);
  v113 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v125 = (uint64_t)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v115 = (char *)&v110 - v11;
  v114 = v12;
  __chkstk_darwin(v10);
  v112 = (uint64_t)&v110 - v13;
  v14 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v14);
  v16 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v17);
  v126 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for LanguageAwareText(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100006DF4(&qword_100298598);
  __chkstk_darwin(v130);
  v129 = (uint64_t)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100006DF4(&qword_1002985A0);
  __chkstk_darwin(v23);
  v128 = (char *)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100006DF4(&qword_10028B2D0);
  __chkstk_darwin(v127);
  v131 = (uint64_t)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006DF4(&qword_10028B2D8);
  __chkstk_darwin(v26);
  v134 = (uint64_t)&v110 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100006DF4(&qword_1002985A8);
  v28 = __chkstk_darwin(v132);
  v136 = (uint64_t)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v133 = (char *)&v110 - v31;
  __chkstk_darwin(v30);
  v135 = (uint64_t)&v110 - v32;
  v143 = v7;
  v33 = *(int *)(v7 + 20);
  v124 = a1;
  v34 = a1 + v33;
  v35 = sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v146);
  v36 = v146;
  KeyPath = swift_getKeyPath(&unk_1001F6C18);
  v146 = v36;
  v38 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v146, KeyPath, v38);
  swift_release(KeyPath);
  v39 = *(void **)(v36 + 152);
  v40 = v39;
  v41 = swift_release(v36);
  if (!v39)
  {
    sub_10000A05C(0, &qword_10028CD78, NSAttributedString_ptr);
    v42 = (uint64_t)v126;
    AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
    v39 = (void *)NSAttributedString.init(_:)(v42);
  }
  v123 = v39;
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v144 + 56);
  v126 = v16;
  v43(v16, 1, 1, v145, v41);
  v44 = v124;
  v122 = sub_1001B20E0();
  Bindable.wrappedValue.getter(&v146);
  v45 = v146;
  v46 = swift_getKeyPath(&unk_1001F6C40);
  v146 = v45;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v146, v46, v38);
  swift_release(v46);
  v120 = *(_QWORD *)(v45 + 184);
  v119 = *(_QWORD *)(v45 + 192);
  v118 = *(unsigned __int8 *)(v45 + 200);
  swift_release(v45);
  v47 = (uint64_t *)(v44 + *(int *)(v143 + 24));
  v48 = *v47;
  v116 = v47[1];
  v117 = v48;
  swift_unknownObjectRetain(v48);
  v49 = v35;
  Bindable.wrappedValue.getter(&v146);
  v50 = v146;
  v51 = swift_getKeyPath(&unk_1001F6A50);
  v146 = v50;
  v143 = v38;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v146, v51, v38);
  swift_release(v51);
  v52 = *(_BYTE *)(v50 + 178);
  swift_release(v50);
  v142 = v34;
  if ((v52 & 1) != 0)
    v111 = 0;
  else
    v111 = objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
  v53 = (uint64_t)v115;
  v54 = v114;
  v55 = v113;
  v56 = v112;
  v121 = v49;
  sub_100032D68(v44, v112, type metadata accessor for TranslationCardView);
  v57 = *(unsigned __int8 *)(v55 + 80);
  v58 = (v57 + 16) & ~v57;
  v59 = &v54[v58];
  v60 = v57 | 7;
  v115 = (char *)swift_allocObject(&unk_100270750, v59, v57 | 7);
  sub_1001B9C4C(v56, (uint64_t)&v115[v58]);
  sub_100032D68(v44, v53, type metadata accessor for TranslationCardView);
  v61 = swift_allocObject(&unk_100270778, v59, v60);
  sub_1001B9C4C(v53, v61 + v58);
  v114 = (char *)sub_1001B4F60();
  Bindable.wrappedValue.getter(&v146);
  v62 = v44;
  v63 = v146;
  v64 = swift_getKeyPath(&unk_1001F6A50);
  v146 = v63;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v146, v64, v143);
  swift_release(v64);
  LOBYTE(v64) = *(_BYTE *)(v63 + 178);
  swift_release(v63);
  v65 = v125;
  sub_100032D68(v62, v125, type metadata accessor for TranslationCardView);
  v66 = swift_allocObject(&unk_1002707A0, v59, v60);
  sub_1001B9C4C(v65, v66 + v58);
  v67 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache();
  v68 = (_QWORD *)swift_allocObject(v67, 40, 7);
  v68[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
  v68[3] = _swiftEmptyArrayStorage;
  v68[4] = 100;
  *(_QWORD *)v21 = v123;
  *(_OWORD *)(v21 + 8) = xmmword_1001EA330;
  v69 = sub_1000110A4((uint64_t)v126, (uint64_t)&v21[v19[6]], (uint64_t *)&unk_10028FE50);
  *(_QWORD *)&v21[v19[7]] = v122;
  v21[v19[8]] = 0;
  *(_QWORD *)&v21[v19[9]] = 0;
  *(_QWORD *)&v21[v19[10]] = 0;
  v21[v19[11]] = 0;
  v70 = &v21[v19[12]];
  v71 = v119;
  *(_QWORD *)v70 = v120;
  *((_QWORD *)v70 + 1) = v71;
  v70[16] = v118;
  v72 = &v21[v19[13]];
  v73 = v116;
  *(_QWORD *)v72 = v117;
  *((_QWORD *)v72 + 1) = v73;
  *(_QWORD *)&v21[v19[14]] = v111;
  v21[v19[15]] = 0;
  v74 = &v21[v19[16]];
  v75 = v115;
  *(_QWORD *)v74 = sub_1001BA24C;
  *((_QWORD *)v74 + 1) = v75;
  v76 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v21[v19[17]];
  *v76 = sub_1001BA3F0;
  v76[1] = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v61;
  v77 = &v21[v19[18]];
  *(_QWORD *)v77 = 0;
  *((_QWORD *)v77 + 1) = 0;
  *(_QWORD *)&v21[v19[19]] = v114;
  v21[v19[20]] = (v64 & 1) == 0;
  v78 = (uint64_t (**)(char, uint64_t))&v21[v19[21]];
  *v78 = sub_1001BA608;
  v78[1] = (uint64_t (*)(char, uint64_t))v66;
  *(_QWORD *)&v21[v19[22]] = v68;
  v79 = static Font.title.getter(v69);
  v80 = Font.bold()();
  swift_release(v79);
  v81 = swift_getKeyPath(&unk_1001F6B18);
  v82 = v129;
  sub_100032D68((uint64_t)v21, v129, type metadata accessor for LanguageAwareText);
  v83 = v130;
  v84 = (uint64_t *)(v82 + *(int *)(v130 + 36));
  *v84 = v81;
  v84[1] = v80;
  sub_100032DAC((uint64_t)v21, type metadata accessor for LanguageAwareText);
  v85 = sub_1001BA270();
  v86 = (uint64_t)v128;
  View.accessibilityIdentifier(_:)(0x6554656372756F73, 0xEA00000000007478, v83, v85);
  sub_10000A020(v82, &qword_100298598);
  v87 = v131;
  sub_10000B074(v86, v131, &qword_1002985A0);
  *(_QWORD *)(v87 + *(int *)(v127 + 36)) = 0x3FF199999999999ALL;
  v88 = sub_10000A020(v86, &qword_1002985A0);
  v89 = static Alignment.leading.getter(v88);
  v90 = v134;
  sub_1000197A8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v134, 0.0, 1, 0.0, 1, v89, v91);
  sub_10000A020(v87, &qword_10028B2D0);
  v92 = swift_getKeyPath(&unk_1001F6B48);
  Bindable.wrappedValue.getter(&v146);
  v93 = v146;
  v94 = swift_getKeyPath(&unk_1001F69D8);
  v146 = v93;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v146, v94, v143);
  swift_release(v94);
  v95 = *(id *)(v93 + 72);
  swift_release(v93);
  v96 = v137;
  dispatch thunk of PersistedTranslation.sourceLocale.getter(v97);

  LOBYTE(v95) = Locale.isRTL()();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v96, v145);
  v98 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v100 = v138;
  v99 = v139;
  if ((v95 & 1) == 0)
    v98 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v101 = v140;
  (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v138, *v98, v140);
  v102 = (uint64_t)v133;
  v103 = (uint64_t *)&v133[*(int *)(v132 + 36)];
  v104 = sub_100006DF4(&qword_10028B258);
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))((char *)v103 + *(int *)(v104 + 28), v100, v101);
  *v103 = v92;
  sub_10000B074(v90, v102, &qword_10028B2D8);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v101);
  sub_10000A020(v90, &qword_10028B2D8);
  v105 = v135;
  sub_1000110A4(v102, v135, &qword_1002985A8);
  v106 = v136;
  sub_10000B074(v105, v136, &qword_1002985A8);
  v107 = v141;
  sub_10000B074(v106, v141, &qword_1002985A8);
  v108 = v107 + *(int *)(sub_100006DF4(&qword_1002985B8) + 48);
  *(_QWORD *)v108 = 0;
  *(_BYTE *)(v108 + 8) = 0;
  sub_10000A020(v105, &qword_1002985A8);
  return sub_10000A020(v106, &qword_1002985A8);
}

void *sub_1001B4F60()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v8);
  v0 = v8;
  KeyPath = swift_getKeyPath(&unk_1001F6A50);
  v8 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v2);
  swift_release(KeyPath);
  LOBYTE(KeyPath) = *(_BYTE *)(v0 + 178);
  swift_release(v0);
  v3 = 0;
  if ((KeyPath & 1) == 0)
  {
    Bindable.wrappedValue.getter(&v8);
    v4 = v8;
    v5 = swift_getKeyPath(&unk_1001F6C68);
    v8 = v4;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, v5, v2);
    swift_release(v5);
    v3 = *(void **)(v4 + 168);
    v6 = v3;
    swift_release(v4);
  }
  return v3;
}

double sub_1001B5090(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA4A0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "TTS play button action invoked", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v11);
  v9 = v11;
  sub_100038CBC(a1, a2 & 1, 1);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_1001B51BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  __int128 v68;
  __int128 v69;
  _OWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  char *v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  __n128 v142;
  uint64_t OpaqueTypeConformance2;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  double v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int16 v203;
  _QWORD v204[2];
  char v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  char v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v195 = a2;
  v3 = sub_100006DF4(&qword_1002982E8);
  v191 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v190 = (char *)&v171 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TranslationCardView(0);
  v172 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v173 = v6;
  v174 = (unint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100006DF4(&qword_10028D030);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v175 = (char *)&v171 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100006DF4(&qword_10028D038);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v178 = (char *)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100006DF4(&qword_10028D040);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v182 = (char *)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100006DF4(&qword_10028D048);
  v10 = __chkstk_darwin(v188);
  v181 = (char *)&v171 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v185 = (uint64_t)&v171 - v12;
  v186 = sub_100006DF4(&qword_1002984A0);
  __chkstk_darwin(v186);
  v187 = (_OWORD *)((char *)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100006DF4(&qword_1002984A8);
  v15 = __chkstk_darwin(v14);
  v196 = (uint64_t)&v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v193 = (char *)&v171 - v17;
  v18 = sub_100006DF4(&qword_1002984B0);
  __chkstk_darwin(v18);
  v20 = (char *)&v171 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100006DF4(&qword_1002984B8);
  v22 = __chkstk_darwin(v21);
  v192 = (uint64_t)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v171 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v171 - v28;
  *(_QWORD *)v20 = static VerticalAlignment.lastTextBaseline.getter(v27);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v30 = sub_100006DF4(&qword_1002984C0);
  v31 = &v20[*(int *)(v30 + 44)];
  *(_QWORD *)v31 = static HorizontalAlignment.leading.getter(v30);
  *((_QWORD *)v31 + 1) = 0x4010000000000000;
  v31[16] = 0;
  v32 = sub_100006DF4(&qword_1002984C8);
  v33 = sub_1001B6254(a1, (uint64_t)&v31[*(int *)(v32 + 44)]);
  LOBYTE(v31) = static Edge.Set.bottom.getter(v33);
  v34 = EdgeInsets.init(_all:)(16.0);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_10000B074((uint64_t)v20, (uint64_t)v26, &qword_1002984B0);
  v41 = &v26[*(int *)(v21 + 36)];
  *v41 = (char)v31;
  *((double *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  sub_10000A020((uint64_t)v20, &qword_1002984B0);
  v189 = v29;
  v42 = v3;
  sub_1000110A4((uint64_t)v26, (uint64_t)v29, &qword_1002984B8);
  v194 = v5;
  v197 = a1;
  Bindable.wrappedValue.getter(&v206);
  v43 = v206;
  KeyPath = swift_getKeyPath(&unk_1001F69D8);
  *(_QWORD *)&v206 = v43;
  v45 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v206, KeyPath, v45);
  swift_release(KeyPath);
  v46 = *(id *)(v43 + 72);
  dispatch thunk of PersistedTranslation.translationResult.getter(&v206);

  v47 = *((_QWORD *)&v207 + 1);
  v48 = v208;
  sub_100023AF4(&v206, *((uint64_t *)&v207 + 1));
  LOBYTE(v47) = TranslationResult.isLowConfidence.getter(v47, v48);
  sub_100009C08(&v206);
  swift_release(v43);
  if ((v47 & 1) != 0)
  {
    v49 = sub_100006DF4(&qword_10028DFC8);
    v50 = type metadata accessor for TranslateTip(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(_QWORD *)(v51 + 72);
    v53 = *(unsigned __int8 *)(v51 + 80);
    v54 = (v53 + 32) & ~v53;
    v55 = swift_allocObject(v49, v54 + v52, v53 | 7);
    *(_OWORD *)(v55 + 16) = xmmword_1001E64F0;
    v56 = v55 + v54;
    if (qword_10028A528 != -1)
      swift_once(&qword_10028A528, sub_1001A1010);
    v57 = sub_10000F66C(v50, (uint64_t)qword_1002AA690);
    v58 = sub_100032D68(v57, v56, type metadata accessor for TranslateTip);
    v59 = static Edge.Set.bottom.getter(v58);
    v60 = EdgeInsets.init(_all:)(16.0);
    *(_QWORD *)&v198 = v55;
    *((_QWORD *)&v198 + 1) = v59;
    v199 = v60;
    v200 = v61;
    v201 = v62;
    v202 = v63;
    v203 = 0;
    v64 = sub_100006DF4(&qword_1002984F8);
    v65 = sub_10001B6DC(&qword_1002984F0, &qword_1002984F8, (void (*)(void))sub_1001B9F30);
    _ConditionalContent<>.init(storage:)(&v198, v64, v64, v65, v65);
    v66 = v209;
    v67 = v210;
    v68 = v207;
    v69 = v208;
    v70 = v187;
    *v187 = v206;
    v70[1] = v68;
    v70[2] = v69;
    *((_BYTE *)v70 + 48) = v66;
    *((_BYTE *)v70 + 49) = v67;
    swift_storeEnumTagMultiPayload(v70, v186, 0);
    v71 = sub_100006DF4(&qword_1002984E0);
    v72 = sub_1001B9EAC();
    v73 = sub_1001B9F74();
    v74 = v193;
LABEL_9:
    _ConditionalContent<>.init(storage:)(v70, v71, v188, v72, v73);
    v99 = sub_100006DF4(&qword_1002984D0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v74, 0, 1, v99);
    goto LABEL_10;
  }
  Bindable.wrappedValue.getter(&v206);
  v75 = v206;
  v76 = swift_getKeyPath(&unk_1001F6A00);
  *(_QWORD *)&v206 = v75;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v206, v76, v45);
  swift_release(v76);
  v77 = *(unsigned __int8 *)(v75 + 226);
  swift_release(v75);
  if (v77 == 1)
  {
    v78 = sub_100006DF4(&qword_10028DFC8);
    v79 = type metadata accessor for TranslateTip(0);
    v80 = *(_QWORD *)(v79 - 8);
    v81 = *(_QWORD *)(v80 + 72);
    v82 = *(unsigned __int8 *)(v80 + 80);
    v83 = (v82 + 32) & ~v82;
    v84 = swift_allocObject(v78, v83 + v81, v82 | 7);
    *(_OWORD *)(v84 + 16) = xmmword_1001E64F0;
    v85 = v84 + v83;
    v74 = v193;
    if (qword_10028A530 != -1)
      swift_once(&qword_10028A530, sub_1001A1170);
    v86 = sub_10000F66C(v79, (uint64_t)qword_1002AA6A8);
    v87 = sub_100032D68(v86, v85, type metadata accessor for TranslateTip);
    v88 = static Edge.Set.bottom.getter(v87);
    v89 = EdgeInsets.init(_all:)(16.0);
    *(_QWORD *)&v198 = v84;
    *((_QWORD *)&v198 + 1) = v88;
    v199 = v89;
    v200 = v90;
    v201 = v91;
    v202 = v92;
    v203 = 256;
    v93 = sub_100006DF4(&qword_1002984F8);
    v94 = sub_10001B6DC(&qword_1002984F0, &qword_1002984F8, (void (*)(void))sub_1001B9F30);
    _ConditionalContent<>.init(storage:)(&v198, v93, v93, v94, v94);
    v95 = v209;
    v96 = v210;
    v97 = v207;
    v98 = v208;
    v70 = v187;
    *v187 = v206;
    v70[1] = v97;
    v70[2] = v98;
    *((_BYTE *)v70 + 48) = v95;
    *((_BYTE *)v70 + 49) = v96;
    swift_storeEnumTagMultiPayload(v70, v186, 0);
    v71 = sub_100006DF4(&qword_1002984E0);
    v72 = sub_1001B9EAC();
    v73 = sub_1001B9F74();
    goto LABEL_9;
  }
  Bindable.wrappedValue.getter(&v206);
  v127 = v206;
  v128 = swift_getKeyPath(&unk_1001F6A28);
  *(_QWORD *)&v206 = v127;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v206, v128, v45);
  swift_release(v128);
  v129 = *(unsigned __int8 *)(v127 + 176);
  swift_release(v127);
  if (v129 == 1)
  {
    Bindable.wrappedValue.getter(&v206);
    v130 = v206;
    v131 = swift_getKeyPath(&unk_1001F6AA0);
    *(_QWORD *)&v206 = v130;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v206, v131, v45);
    swift_release(v131);
    swift_release(v130);
    v132 = v174;
    sub_100032D68(v197, v174, type metadata accessor for TranslationCardView);
    v133 = *(unsigned __int8 *)(v172 + 80);
    v134 = (v133 + 16) & ~v133;
    v135 = swift_allocObject(&unk_100270660, v134 + v173, v133 | 7);
    sub_1001B9C4C(v132, v135 + v134);
    v174 = sub_100048860();
    v136 = v175;
    TipView.init(_:arrowEdge:action:)(v174, 4, sub_1001B9E70, v135, &type metadata for TipsHelper.GenderDisambiguationTip, v174);
    v137 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
    v138 = Color.init(_:)(v137);
    *(_QWORD *)&v206 = v138;
    v139 = sub_100012334(&qword_10028D088, &qword_10028D030, (uint64_t)&protocol conformance descriptor for TipView<A>);
    v140 = v178;
    v141 = v177;
    View.tipBackground<A>(_:)(&v206, v177, &type metadata for Color, v139, &protocol witness table for Color);
    v142 = swift_release(v138);
    (*(void (**)(char *, uint64_t, __n128))(v176 + 8))(v136, v141, v142);
    *(_QWORD *)&v206 = v141;
    *((_QWORD *)&v206 + 1) = &type metadata for Color;
    *(_QWORD *)&v207 = v139;
    *((_QWORD *)&v207 + 1) = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.tipBackground<A>(_:)>>, 1);
    v144 = v182;
    v145 = v180;
    View.tipCornerRadius(_:antialiased:)(1, v180, OpaqueTypeConformance2, 8.0);
    v146 = (*(uint64_t (**)(char *, uint64_t))(v179 + 8))(v140, v145);
    LODWORD(v180) = static Edge.Set.bottom.getter(v146);
    Bindable.wrappedValue.getter(&v206);
    v147 = v206;
    v148 = swift_getKeyPath(&unk_1001F6AA0);
    *(_QWORD *)&v206 = v147;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v206, v148, v45);
    swift_release(v148);
    swift_release(v147);
    v149 = Tip.shouldDisplay.getter(&type metadata for TipsHelper.GenderDisambiguationTip, v174);
    v150 = 0.0;
    if ((v149 & 1) != 0)
      v150 = 16.0;
    v151 = EdgeInsets.init(_all:)(v150);
    v153 = v152;
    v155 = v154;
    v157 = v156;
    v158 = v183;
    v159 = (uint64_t)v181;
    v160 = v184;
    (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v181, v144, v184);
    v161 = v188;
    v162 = v159 + *(int *)(v188 + 36);
    *(_BYTE *)v162 = v180;
    *(double *)(v162 + 8) = v151;
    *(_QWORD *)(v162 + 16) = v153;
    *(_QWORD *)(v162 + 24) = v155;
    *(_QWORD *)(v162 + 32) = v157;
    *(_BYTE *)(v162 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v158 + 8))(v144, v160);
    v163 = v185;
    sub_1000110A4(v159, v185, &qword_10028D048);
    v164 = v187;
    sub_10000B074(v163, (uint64_t)v187, &qword_10028D048);
    swift_storeEnumTagMultiPayload(v164, v186, 1);
    v165 = sub_100006DF4(&qword_1002984E0);
    v166 = sub_1001B9EAC();
    v167 = sub_1001B9F74();
    v168 = v196;
    _ConditionalContent<>.init(storage:)(v164, v165, v161, v166, v167);
    sub_10000A020(v163, &qword_10028D048);
    v169 = sub_100006DF4(&qword_1002984D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 56))(v168, 0, 1, v169);
    v74 = v193;
    sub_1000110A4(v168, (uint64_t)v193, &qword_1002984A8);
  }
  else
  {
    v170 = sub_100006DF4(&qword_1002984D0);
    v74 = v193;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v170 - 8) + 56))(v193, 1, 1, v170);
  }
LABEL_10:
  Bindable.wrappedValue.getter(&v206);
  v100 = v206;
  v101 = swift_getKeyPath(&unk_1001F69D8);
  *(_QWORD *)&v206 = v100;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v206, v101, v45);
  swift_release(v101);
  v193 = (char *)*(id *)(v100 + 72);
  swift_release(v100);
  Bindable.wrappedValue.getter(&v206);
  v102 = v206;
  sub_100023AB0(v206 + 24, (uint64_t)&v198);
  v103 = swift_release(v102);
  v104 = v190;
  Bindable.projectedValue.getter(v42, v103);
  v105 = swift_getKeyPath(&unk_1001F6A50);
  Bindable<A>.subscript.getter(v204, v105, v42);
  v106 = swift_release(v105);
  (*(void (**)(char *, uint64_t, __n128))(v191 + 8))(v104, v42, v106);
  v107 = v204[0];
  v108 = v204[1];
  LOBYTE(v101) = v205;
  Bindable.wrappedValue.getter(&v206);
  v109 = v206;
  v110 = swift_getKeyPath(&unk_1001F6A78);
  *(_QWORD *)&v206 = v109;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v206, v110, v45);
  swift_release(v110);
  LOBYTE(v110) = *(_BYTE *)(v109 + 177);
  swift_release(v109);
  v111 = (uint64_t *)(v197 + *(int *)(v194 + 28));
  v112 = *v111;
  v113 = v111[1];
  sub_100016244(*v111, v113);
  v114 = type metadata accessor for SceneContext(0);
  v115 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v217 = EnvironmentObject.init()(v114, v115);
  v218 = v116;
  v117 = type metadata accessor for PersistedTranslation(0);
  v118 = sub_100007D5C(&qword_10028EC08, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&protocol conformance descriptor for NSManagedObject);
  *(_QWORD *)&v206 = ObservedObject.init(wrappedValue:)(v193, v117, v118);
  *((_QWORD *)&v206 + 1) = v119;
  sub_10003E994(&v198, (uint64_t)&v207);
  v211 = v107;
  v212 = v108;
  v213 = v101;
  v214 = v110;
  v215 = v112;
  v216 = v113;
  v120 = (uint64_t)v189;
  v121 = v192;
  sub_10000B074((uint64_t)v189, v192, &qword_1002984B8);
  v122 = v196;
  sub_10000B074((uint64_t)v74, v196, &qword_1002984A8);
  sub_100198844((uint64_t)&v206, (uint64_t)&v198);
  v123 = v195;
  sub_10000B074(v121, v195, &qword_1002984B8);
  v124 = (int *)sub_100006DF4(&qword_1002984D8);
  v125 = v123 + v124[12];
  *(_QWORD *)v125 = 0x4020000000000000;
  *(_BYTE *)(v125 + 8) = 0;
  sub_10000B074(v122, v123 + v124[16], &qword_1002984A8);
  sub_100198844((uint64_t)&v198, v123 + v124[20]);
  sub_1001B9E30((uint64_t)&v206);
  sub_10000A020((uint64_t)v74, &qword_1002984A8);
  sub_10000A020(v120, &qword_1002984B8);
  sub_1001B9E30((uint64_t)&v198);
  sub_10000A020(v122, &qword_1002984A8);
  return sub_10000A020(v121, &qword_1002984B8);
}

uint64_t sub_1001B6254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  ValueMetadata *v87;
  unint64_t v88;
  void *v89;
  void *v90;
  unsigned __int8 v91;
  __n128 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  char *v121;
  uint64_t v122;
  unsigned int *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  ValueMetadata *v181;
  unint64_t v182;
  uint64_t v183;

  v170 = a2;
  v159 = type metadata accessor for Locale(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v156 = (char *)&v139 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for LayoutDirection(0);
  v160 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v139 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v5);
  v146 = (char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_1002982E8);
  v142 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v141 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for SimpleExpandingText(0);
  v157 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v145 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100006DF4(&qword_100298510);
  __chkstk_darwin(v143);
  v147 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100006DF4(&qword_100298518);
  __chkstk_darwin(v144);
  v153 = (uint64_t)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100006DF4(&qword_100298520);
  __chkstk_darwin(v149);
  v152 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100006DF4(&qword_100298528);
  __chkstk_darwin(v155);
  v154 = (uint64_t)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4(&qword_100298530);
  v175 = *(_QWORD *)(v14 - 8);
  v176 = v14;
  v15 = __chkstk_darwin(v14);
  v151 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v150 = (uint64_t)&v139 - v17;
  v18 = sub_100006DF4(&qword_100298538);
  v19 = __chkstk_darwin(v18);
  v177 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v173 = (uint64_t)&v139 - v21;
  v22 = type metadata accessor for TranslationCardView(0);
  v23 = *(_QWORD *)(v22 - 8);
  v165 = *(_QWORD *)(v23 + 64);
  v166 = v23;
  __chkstk_darwin(v22);
  v164 = (uint64_t)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006DF4(&qword_100298540);
  __chkstk_darwin(v25);
  v27 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100006DF4(&qword_100298548);
  v28 = __chkstk_darwin(v167);
  v174 = (char *)&v139 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v139 - v31;
  __chkstk_darwin(v30);
  v172 = (char *)&v139 - v33;
  v34 = sub_100006DF4(&qword_100298550);
  v35 = __chkstk_darwin(v34);
  v169 = (uint64_t)&v139 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v139 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (char *)&v139 - v41;
  *(_QWORD *)v39 = static VerticalAlignment.center.getter(v40);
  *((_QWORD *)v39 + 1) = 0;
  v39[16] = 1;
  v43 = sub_100006DF4(&qword_100298558);
  sub_1001B70E0((uint64_t (*)(uint64_t))&dispatch thunk of PersistedTranslation.targetLocale.getter, 0x8000000100202440, (uint64_t)&v39[*(int *)(v43 + 44)]);
  v168 = v42;
  v44 = sub_1000110A4((uint64_t)v39, (uint64_t)v42, &qword_100298550);
  *(_QWORD *)v27 = static VerticalAlignment.bottom.getter(v44);
  *((_QWORD *)v27 + 1) = 0x4024000000000000;
  v27[16] = 0;
  v45 = sub_100006DF4(&qword_100298560);
  sub_1001B7374(a1, (uint64_t)&v27[*(int *)(v45 + 44)]);
  v46 = a1 + *(int *)(v22 + 20);
  Bindable.wrappedValue.getter(&v178);
  v47 = v178;
  KeyPath = swift_getKeyPath(&unk_1001F6AC8);
  v178 = v47;
  v49 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v178, KeyPath, v49);
  swift_release(KeyPath);
  v163 = *(unsigned __int8 *)(v47 + 145);
  swift_release(v47);
  v171 = v7;
  v162 = v46;
  Bindable.wrappedValue.getter(&v178);
  v50 = v178;
  v51 = swift_getKeyPath(&unk_1001F69D8);
  v178 = v50;
  v161 = v49;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v178, v51, v49);
  swift_release(v51);
  v52 = *(id *)(v50 + 72);
  swift_release(v50);
  v53 = sub_1001A602C();

  if (v53 == 4)
    v54 = 2;
  else
    v54 = v53;
  v55 = v164;
  sub_100032D68(a1, v164, type metadata accessor for TranslationCardView);
  v56 = *(unsigned __int8 *)(v166 + 80);
  v57 = (v56 + 16) & ~v56;
  v58 = swift_allocObject(&unk_100270688, v57 + v165, v56 | 7);
  v59 = sub_1001B9C4C(v55, v58 + v57);
  v60 = static Color.translateAccentColor.getter(v59);
  swift_retain(v58);
  v62 = static VerticalAlignment.bottom.getter(v61);
  v183 = 0;
  swift_retain(v60);
  static Binding.constant(_:)(&v178, &v183, &type metadata for CGFloat);
  v63 = v178;
  v64 = v179;
  v65 = v180;
  sub_10000B074((uint64_t)v27, (uint64_t)v32, &qword_100298540);
  swift_release(v58);
  swift_release(v60);
  v66 = &v32[*(int *)(v167 + 36)];
  *v66 = 0;
  v66[1] = v163;
  v66[2] = v54;
  v68 = v173;
  v67 = (uint64_t)v174;
  *((_QWORD *)v66 + 1) = sub_1001BA070;
  *((_QWORD *)v66 + 2) = v58;
  v66[24] = 0;
  *((_QWORD *)v66 + 4) = v62;
  *((_QWORD *)v66 + 5) = v60;
  *((_QWORD *)v66 + 6) = v63;
  *((_QWORD *)v66 + 7) = v64;
  v69 = (uint64_t)v172;
  *((_QWORD *)v66 + 8) = v65;
  *((_QWORD *)v66 + 9) = 0x4020000000000000;
  sub_10000A020((uint64_t)v27, &qword_100298540);
  v70 = (uint64_t)v32;
  v71 = (uint64_t)v177;
  sub_1000110A4(v70, v69, &qword_100298548);
  v181 = &type metadata for TranslateFeatures;
  v182 = sub_100009BC4();
  LOBYTE(v178) = 6;
  LOBYTE(v58) = isFeatureEnabled(_:)(&v178);
  sub_100009C08(&v178);
  v72 = 1;
  v74 = v175;
  v73 = v176;
  if ((v58 & 1) != 0)
  {
    v75 = v69;
    v76 = v160;
    Bindable.wrappedValue.getter(&v178);
    v77 = v178;
    v78 = swift_getKeyPath(&unk_1001F69D8);
    v178 = v77;
    v79 = v161;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v178, v78, v161);
    swift_release(v78);
    v80 = *(id *)(v77 + 72);
    swift_release(v77);
    v81 = sub_1000AC0BC();
    v83 = v82;

    if (v83)
    {
      v167 = v81;
      Bindable.wrappedValue.getter(&v178);
      v84 = v178;
      v85 = swift_getKeyPath(&unk_1001F69D8);
      v178 = v84;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v178, v85, v79);
      swift_release(v85);
      v86 = *(id *)(v84 + 72);
      dispatch thunk of PersistedTranslation.translationResult.getter(&v178);

      v87 = v181;
      v88 = v182;
      sub_100023AF4(&v178, (uint64_t)v181);
      v89 = (void *)dispatch thunk of TranslationResult.disambiguableResult.getter(v87, v88);
      if (v89)
      {
        v90 = v89;
        v91 = objc_msgSend(v89, "hasDisambiguationsOfType:", 1);

        sub_100009C08(&v178);
        v92 = swift_release(v84);
        v93 = v157;
        if ((v91 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v72 = 1;
          v71 = (uint64_t)v177;
          v68 = v173;
LABEL_14:
          v74 = v175;
          v73 = v176;
          v67 = (uint64_t)v174;
          v69 = (uint64_t)v172;
          goto LABEL_15;
        }
      }
      else
      {
        sub_100009C08(&v178);
        v92 = swift_release(v84);
        v93 = v157;
      }
      v94 = v141;
      v95 = v171;
      Bindable.projectedValue.getter(v171, v92);
      v96 = swift_getKeyPath(&unk_1001F6AF0);
      Bindable<A>.subscript.getter(&v178, v96, v95);
      v97 = swift_release(v96);
      (*(void (**)(char *, uint64_t, __n128))(v142 + 8))(v94, v95, v97);
      v98 = v178;
      v99 = v179;
      v100 = v180;
      v101 = v76;
      v102 = v146;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v158 + 56))(v146, 1, 1, v159);
      v103 = v145;
      v104 = SimpleExpandingText.init(_:isExpanded:_:buttonAction:)(v167, v83, v98, v99, v100, v102, 0, 0);
      v105 = static Font.headline.getter(v104);
      v106 = swift_getKeyPath(&unk_1001F6B18);
      v107 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
      v108 = v93;
      v109 = (uint64_t)v147;
      v110 = v148;
      v107(v147, v103, v148);
      v111 = (uint64_t *)(v109 + *(int *)(v143 + 36));
      *v111 = v106;
      v111[1] = v105;
      v112 = (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v103, v110);
      v113 = static Color.tertiaryTranslateAccentColor.getter(v112);
      v114 = swift_getKeyPath(&unk_1001F69A8);
      v115 = v153;
      sub_10000B074(v109, v153, &qword_100298510);
      v116 = (uint64_t *)(v115 + *(int *)(v144 + 36));
      *v116 = v114;
      v116[1] = v113;
      sub_10000A020(v109, &qword_100298510);
      v117 = swift_getKeyPath(&unk_1001F6B48);
      Bindable.wrappedValue.getter(&v178);
      v118 = v178;
      v119 = swift_getKeyPath(&unk_1001F69D8);
      v178 = v118;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v178, v119, v161);
      swift_release(v119);
      v120 = *(id *)(v118 + 72);
      swift_release(v118);
      v121 = v156;
      dispatch thunk of PersistedTranslation.targetLocale.getter(v122);

      LOBYTE(v118) = Locale.isRTL()();
      (*(void (**)(char *, uint64_t))(v158 + 8))(v121, v159);
      v123 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
      if ((v118 & 1) == 0)
        v123 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
      v124 = v139;
      v125 = v140;
      (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v139, *v123, v140);
      v126 = (uint64_t)v152;
      v127 = (uint64_t *)&v152[*(int *)(v149 + 36)];
      v128 = sub_100006DF4(&qword_10028B258);
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))((char *)v127 + *(int *)(v128 + 28), v124, v125);
      *v127 = v117;
      sub_10000B074(v115, v126, &qword_100298518);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v124, v125);
      sub_10000A020(v115, &qword_100298518);
      v129 = v154;
      sub_10000B074(v126, v154, &qword_100298520);
      v130 = v155;
      *(_WORD *)(v129 + *(int *)(v155 + 36)) = 256;
      sub_10000A020(v126, &qword_100298520);
      v131 = sub_10001B6DC(&qword_100298570, &qword_100298528, (void (*)(void))sub_1001BA094);
      v132 = (uint64_t)v151;
      View.accessibilityIdentifier(_:)(0xD000000000000012, 0x8000000100202420, v130, v131);
      sub_10000A020(v129, &qword_100298528);
      v133 = v150;
      sub_1000110A4(v132, v150, &qword_100298530);
      v68 = v173;
      sub_1000110A4(v133, v173, &qword_100298530);
      v72 = 0;
      v71 = (uint64_t)v177;
      goto LABEL_14;
    }
    v72 = 1;
    v73 = v176;
    v71 = (uint64_t)v177;
    v67 = (uint64_t)v174;
    v74 = v175;
    v69 = v75;
  }
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v68, v72, 1, v73);
  v134 = (uint64_t)v168;
  v135 = v169;
  sub_10000B074((uint64_t)v168, v169, &qword_100298550);
  sub_10000B074(v69, v67, &qword_100298548);
  sub_10000B074(v68, v71, &qword_100298538);
  v136 = v170;
  sub_10000B074(v135, v170, &qword_100298550);
  v137 = sub_100006DF4(&qword_100298568);
  sub_10000B074(v67, v136 + *(int *)(v137 + 48), &qword_100298548);
  sub_10000B074(v71, v136 + *(int *)(v137 + 64), &qword_100298538);
  sub_10000A020(v68, &qword_100298538);
  sub_10000A020(v69, &qword_100298548);
  sub_10000A020(v134, &qword_100298550);
  sub_10000A020(v71, &qword_100298538);
  sub_10000A020(v67, &qword_100298548);
  return sub_10000A020(v135, &qword_100298550);
}

uint64_t sub_1001B70E0@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v39 = a2;
  v40 = a3;
  v4 = sub_100006DF4(&qword_10028F7E0);
  v5 = __chkstk_darwin(v4);
  v38 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - v7;
  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v41);
  v9 = v41;
  KeyPath = swift_getKeyPath(&unk_1001F69D8);
  v41 = v9;
  v11 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v41, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(id *)(v9 + 72);
  swift_release(v9);
  v13 = sub_1001B1E58(a1);
  v15 = v14;

  v41 = v13;
  v42 = v15;
  v16 = sub_10000B030();
  v17 = Text.init<A>(_:)(&v41, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.footnote.getter(v17);
  static Font.Weight.semibold.getter(v24);
  v25 = Font.weight(_:)(v24);
  v26 = swift_release(v24);
  v27 = Text.font(_:)(v25, v17, v19, v23, v21, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_release(v25);
  v31 &= 1u;
  sub_10001B9E8(v17, v19, v23);
  swift_bridgeObjectRelease();
  v41 = v27;
  v42 = v29;
  v43 = v31;
  v44 = v33;
  View.accessibilityIdentifier(_:)(0xD00000000000001ELL, v39, &type metadata for Text, &protocol witness table for Text);
  sub_10001B9E8(v27, v29, v31);
  swift_bridgeObjectRelease();
  v34 = v38;
  sub_10000B074((uint64_t)v8, v38, &qword_10028F7E0);
  v35 = v40;
  sub_10000B074(v34, v40, &qword_10028F7E0);
  v36 = v35 + *(int *)(sub_100006DF4(&qword_1002985C0) + 48);
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = 1;
  sub_10000A020((uint64_t)v8, &qword_10028F7E0);
  return sub_10000A020(v34, &qword_10028F7E0);
}

uint64_t sub_1001B7374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  void *v39;
  id v40;
  __n128 v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (**v76)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t (**v79)(char, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  char *v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  id v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v142 = a2;
  v3 = type metadata accessor for Locale(0);
  v144 = *(_QWORD *)(v3 - 8);
  v145 = v3;
  __chkstk_darwin(v3);
  v138 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LayoutDirection(0);
  v140 = *(_QWORD *)(v5 - 8);
  v141 = v5;
  __chkstk_darwin(v5);
  v139 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TranslationCardView(0);
  v123 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v126 = (uint64_t)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v125 = (uint64_t)&v111 - v11;
  v124 = v12;
  __chkstk_darwin(v10);
  v122 = (uint64_t)&v111 - v13;
  v14 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v14);
  v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v17);
  v127 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for LanguageAwareText(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100006DF4(&qword_100298598);
  __chkstk_darwin(v131);
  v130 = (uint64_t)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100006DF4(&qword_1002985A0);
  __chkstk_darwin(v23);
  v129 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100006DF4(&qword_10028B2D0);
  __chkstk_darwin(v128);
  v132 = (uint64_t)&v111 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006DF4(&qword_10028B2D8);
  __chkstk_darwin(v26);
  v135 = (uint64_t)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100006DF4(&qword_1002985A8);
  v28 = __chkstk_darwin(v133);
  v137 = (uint64_t)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v134 = (char *)&v111 - v31;
  __chkstk_darwin(v30);
  v136 = (uint64_t)&v111 - v32;
  v120 = v7;
  v33 = a1;
  v34 = a1 + *(int *)(v7 + 20);
  v35 = sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v147);
  v36 = v147;
  KeyPath = swift_getKeyPath(&unk_1001F6B78);
  v147 = v36;
  v38 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v147, KeyPath, v38);
  swift_release(KeyPath);
  v39 = *(void **)(v36 + 160);
  v40 = v39;
  v41 = swift_release(v36);
  if (!v39)
  {
    sub_10000A05C(0, &qword_10028CD78, NSAttributedString_ptr);
    v42 = (uint64_t)v127;
    AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
    v39 = (void *)NSAttributedString.init(_:)(v42);
  }
  v121 = v39;
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v144 + 56);
  v127 = v16;
  v43(v16, 1, 1, v145, v41);
  v44 = v33;
  v119 = sub_1001B20E0();
  Bindable.wrappedValue.getter(&v147);
  v45 = v147;
  v46 = swift_getKeyPath(&unk_1001F6BA0);
  v147 = v45;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v147, v46, v38);
  swift_release(v46);
  v118 = *(_QWORD *)(v45 + 208);
  v117 = *(_QWORD *)(v45 + 216);
  v116 = *(unsigned __int8 *)(v45 + 224);
  swift_release(v45);
  v47 = (uint64_t *)(v44 + *(int *)(v120 + 24));
  v48 = *v47;
  v115 = v47[1];
  v120 = v48;
  swift_unknownObjectRetain(v48);
  v143 = v35;
  Bindable.wrappedValue.getter(&v147);
  v49 = v147;
  v50 = swift_getKeyPath(&unk_1001F6A50);
  v146 = v38;
  v147 = v49;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v147, v50, v38);
  swift_release(v50);
  v51 = *(_BYTE *)(v49 + 178);
  swift_release(v49);
  if ((v51 & 1) != 0)
  {
    v112 = 0;
  }
  else
  {
    sub_10000A05C(0, (unint64_t *)&qword_10028D0C8, UIColor_ptr);
    v52 = (void *)static UIColor.translateAccentColor.getter();
    v112 = objc_msgSend(v52, "colorWithAlphaComponent:", 0.2);

  }
  v53 = v146;
  Bindable.wrappedValue.getter(&v147);
  v54 = v147;
  v55 = swift_getKeyPath(&unk_1001F6A50);
  v147 = v54;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v147, v55, v53);
  swift_release(v55);
  v113 = *(unsigned __int8 *)(v54 + 178);
  swift_release(v54);
  v56 = v122;
  sub_100032D68(v44, v122, type metadata accessor for TranslationCardView);
  v57 = *(unsigned __int8 *)(v123 + 80);
  v114 = v34;
  v58 = (v57 + 16) & ~v57;
  v59 = v44;
  v60 = v58 + v124;
  v61 = v57 | 7;
  v124 = swift_allocObject(&unk_1002706B0, v58 + v124, v57 | 7);
  sub_1001B9C4C(v56, v124 + v58);
  v62 = v125;
  sub_100032D68(v59, v125, type metadata accessor for TranslationCardView);
  v123 = swift_allocObject(&unk_1002706D8, v60, v61);
  sub_1001B9C4C(v62, v123 + v58);
  Bindable.wrappedValue.getter(&v147);
  v63 = v147;
  v64 = swift_getKeyPath(&unk_1001F6A50);
  v147 = v63;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v147, v64, v146);
  swift_release(v64);
  LOBYTE(v64) = *(_BYTE *)(v63 + 178);
  swift_release(v63);
  v65 = v126;
  sub_100032D68(v59, v126, type metadata accessor for TranslationCardView);
  v66 = swift_allocObject(&unk_100270700, v60, v61);
  sub_1001B9C4C(v65, v66 + v58);
  v67 = type metadata accessor for LanguageAwareTextViewSizeThatFitsCache();
  v68 = (_QWORD *)swift_allocObject(v67, 40, 7);
  v68[2] = sub_1001A4BE4((uint64_t)_swiftEmptyArrayStorage);
  v68[3] = _swiftEmptyArrayStorage;
  v68[4] = 100;
  *(_QWORD *)v21 = v121;
  *(_OWORD *)(v21 + 8) = xmmword_1001EA330;
  v69 = sub_1000110A4((uint64_t)v127, (uint64_t)&v21[v19[6]], (uint64_t *)&unk_10028FE50);
  *(_QWORD *)&v21[v19[7]] = v119;
  v21[v19[8]] = 0;
  *(_QWORD *)&v21[v19[9]] = 0;
  *(_QWORD *)&v21[v19[10]] = 0;
  v21[v19[11]] = 0;
  v70 = &v21[v19[12]];
  v71 = v117;
  *(_QWORD *)v70 = v118;
  *((_QWORD *)v70 + 1) = v71;
  v70[16] = v116;
  v72 = &v21[v19[13]];
  v73 = v115;
  *(_QWORD *)v72 = v120;
  *((_QWORD *)v72 + 1) = v73;
  *(_QWORD *)&v21[v19[14]] = v112;
  v21[v19[15]] = (v113 & 1) == 0;
  v74 = &v21[v19[16]];
  v75 = v124;
  *(_QWORD *)v74 = sub_1001BA24C;
  *((_QWORD *)v74 + 1) = v75;
  v76 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v21[v19[17]];
  v77 = v123;
  *v76 = sub_1001BA254;
  v76[1] = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v77;
  v78 = &v21[v19[18]];
  *(_QWORD *)v78 = 0;
  *((_QWORD *)v78 + 1) = 0;
  *(_QWORD *)&v21[v19[19]] = 0;
  v21[v19[20]] = (v64 & 1) == 0;
  v79 = (uint64_t (**)(char, uint64_t))&v21[v19[21]];
  *v79 = sub_1001BA264;
  v79[1] = (uint64_t (*)(char, uint64_t))v66;
  *(_QWORD *)&v21[v19[22]] = v68;
  v80 = static Font.title.getter(v69);
  v81 = Font.bold()();
  swift_release(v80);
  v82 = swift_getKeyPath(&unk_1001F6B18);
  v83 = v130;
  sub_100032D68((uint64_t)v21, v130, type metadata accessor for LanguageAwareText);
  v84 = v131;
  v85 = (uint64_t *)(v83 + *(int *)(v131 + 36));
  *v85 = v82;
  v85[1] = v81;
  sub_100032DAC((uint64_t)v21, type metadata accessor for LanguageAwareText);
  v86 = sub_1001BA270();
  v87 = (uint64_t)v129;
  View.accessibilityIdentifier(_:)(0x74616C736E617274, 0xEF747865546E6F69, v84, v86);
  sub_10000A020(v83, &qword_100298598);
  v88 = v132;
  sub_10000B074(v87, v132, &qword_1002985A0);
  *(_QWORD *)(v88 + *(int *)(v128 + 36)) = 0x3FF199999999999ALL;
  v89 = sub_10000A020(v87, &qword_1002985A0);
  v90 = static Alignment.leading.getter(v89);
  v91 = v135;
  sub_1000197A8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v135, 0.0, 1, 0.0, 1, v90, v92);
  sub_10000A020(v88, &qword_10028B2D0);
  v93 = swift_getKeyPath(&unk_1001F6B48);
  Bindable.wrappedValue.getter(&v147);
  v94 = v147;
  v95 = swift_getKeyPath(&unk_1001F69D8);
  v147 = v94;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v147, v95, v146);
  swift_release(v95);
  v96 = *(id *)(v94 + 72);
  swift_release(v94);
  v97 = v138;
  dispatch thunk of PersistedTranslation.targetLocale.getter(v98);

  LOBYTE(v96) = Locale.isRTL()();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v97, v145);
  v99 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v101 = v139;
  v100 = v140;
  if ((v96 & 1) == 0)
    v99 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v102 = v141;
  (*(void (**)(char *, _QWORD, uint64_t))(v140 + 104))(v139, *v99, v141);
  v103 = (uint64_t)v134;
  v104 = (uint64_t *)&v134[*(int *)(v133 + 36)];
  v105 = sub_100006DF4(&qword_10028B258);
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))((char *)v104 + *(int *)(v105 + 28), v101, v102);
  *v104 = v93;
  sub_10000B074(v91, v103, &qword_10028B2D8);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v102);
  sub_10000A020(v91, &qword_10028B2D8);
  v106 = v136;
  sub_1000110A4(v103, v136, &qword_1002985A8);
  v107 = v137;
  sub_10000B074(v106, v137, &qword_1002985A8);
  v108 = v142;
  sub_10000B074(v107, v142, &qword_1002985A8);
  v109 = v108 + *(int *)(sub_100006DF4(&qword_1002985B8) + 48);
  *(_QWORD *)v109 = 0;
  *(_BYTE *)(v109 + 8) = 0;
  sub_10000A020(v106, &qword_1002985A8);
  return sub_10000A020(v107, &qword_1002985A8);
}

uint64_t sub_1001B7F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(id, uint64_t, uint64_t, __n128);
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(uint64_t (**)(id, uint64_t, uint64_t, __n128))(a3
                                                              + *(int *)(type metadata accessor for TranslationCardView(0)
                                                                       + 48));
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v13);
  v6 = v13;
  KeyPath = swift_getKeyPath(&unk_1001F69D8);
  v13 = v6;
  v8 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(id *)(v6 + 72);
  v10 = swift_release(v6);
  v11 = v5(v9, a1, a2, v10);

  return v11;
}

void sub_1001B8080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  void (*v15)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a4;
  v22 = a5;
  v19 = a2;
  v20 = a3;
  v18 = a1;
  v8 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v23);
  v12 = v23;
  KeyPath = swift_getKeyPath(&unk_1001F6BC8);
  v23 = v12;
  v14 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v14);
  swift_release(KeyPath);
  v15 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 96);
  v16 = *(_QWORD *)(v12 + 104);
  sub_100016244((uint64_t)v15, v16);
  swift_release(v12);
  if (v15)
  {
    Bindable.wrappedValue.getter(&v23);
    v17 = v23;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *a7, v8);
    v15(v17, v11, v18, v19, v20, v21, v22);
    swift_release(v17);
    sub_10002BA44((uint64_t)v15, v16);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_1001B8214(char a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v15);
  v11 = v15;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *a4, v7);
  sub_1000399D4(a1, (uint64_t)v10, a2);
  v12 = swift_release(v11);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v12);
}

double sub_1001B82F8(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = a2 & 1;
  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v6);
  v4 = v6;
  sub_100038CBC(a1, v3, 0);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_1001B836C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[9];
  uint64_t v18;

  v3 = type metadata accessor for TranslationCardView(0);
  v4 = (uint64_t *)(a2 + *(int *)(v3 + 40));
  v5 = *v4;
  if (*v4)
  {
    v6 = v3;
    v7 = (void *)objc_opt_self(UIApplication);
    v8 = objc_msgSend(v7, "sharedApplication", swift_retain(v5).n128_f64[0]);
    objc_msgSend(v8, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);
    swift_release(v5);

    v9 = (char *)(a2 + *(int *)(v6 + 44));
    v10 = *v9;
    v11 = *((_QWORD *)v9 + 1);
    v17[1] = v10;
    v18 = v11;
    v17[0] = 1;
    v12 = sub_100006DF4(&qword_10028CF50);
    return State.wrappedValue.setter(v17, v12);
  }
  else
  {
    v14 = v4[1];
    v15 = type metadata accessor for SceneContext(0);
    v16 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
    result = EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
  return result;
}

void sub_1001B8494()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  __n128 v5;
  uint64_t v6;

  sub_1001B8560();
  type metadata accessor for TranslationCardView(0);
  sub_100006DF4(&qword_1002982E8);
  Bindable.wrappedValue.getter(&v6);
  v0 = v6;
  KeyPath = swift_getKeyPath(&unk_1001F6980);
  v6 = v0;
  v2 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 88);
  v4 = v3;
  v5 = swift_release(v0);
  if (v3)
  {
    dispatch thunk of DisambiguationResultModel.didAppear()(v5);

  }
}

void sub_1001B8560()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0 + *(int *)(type metadata accessor for TranslationCardView(0) + 32);
  v2 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    KeyPath = swift_getKeyPath(&unk_1001F6938);
    v4 = swift_getKeyPath(&unk_1001F6960);
    v5 = v2;
    static Published.subscript.getter(&v17, v5, KeyPath);

    swift_release(KeyPath);
    swift_release(v4);
    if ((v17 & 1) != 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v6 = sub_1001A76D0(0, 1, 1, _swiftEmptyArrayStorage);
      v8 = v6[2];
      v7 = v6[3];
      if (v8 >= v7 >> 1)
        v6 = sub_1001A76D0((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
      v6[2] = v8 + 1;
      v6[v8 + 4] = 1;
    }
    sub_100006DF4(&qword_1002982E8);
    Bindable.wrappedValue.getter(&v17);
    v9 = v17;
    v10 = swift_getKeyPath(&unk_1001F6980);
    v17 = v9;
    v11 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v10, v11);
    swift_release(v10);
    v12 = *(void **)(v9 + 88);
    v13 = v12;
    swift_release(v9);
    if (v12)
    {
      dispatch thunk of DisambiguationResultModel.excludedTypes.setter(v6);

    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 8);
    v15 = type metadata accessor for SharedTranslationOptions(0);
    v16 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
    EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
}

unint64_t sub_1001B8750(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  id v26;
  _QWORD *v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  os_log_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[5];

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[3] = (uint64_t)&type metadata for TranslateFeatures;
  v37[4] = sub_100009BC4();
  LOBYTE(v37[0]) = 5;
  v9 = isFeatureEnabled(_:)(v37);
  v10 = sub_100009C08(v37);
  v11 = 0;
  if ((v9 & 1) != 0)
  {
    v12 = dispatch thunk of PersistedTranslation.disambiguableResult.getter(v10);
    if (v12)
    {
      v13 = (void *)v12;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v15 = objc_msgSend(v13, "sentenceWithUUID:", isa);

      if (v15)
      {
        v11 = (unint64_t)_LTDisambiguableSentence.menu(forLinkIndex:)(a3);

        return v11;
      }
      if (qword_10028A428 != -1)
        swift_once(&qword_10028A428, sub_100120F9C);
      v16 = type metadata accessor for Logger(0);
      sub_10000F66C(v16, (uint64_t)qword_1002AA380);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
      v17 = v13;
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc(22, -1);
        v34 = (_QWORD *)swift_slowAlloc(8, -1);
        v35 = swift_slowAlloc(32, -1);
        v37[0] = v35;
        *(_DWORD *)v20 = 136446466;
        v21 = sub_100007D5C(&qword_10028CE38, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v33 = v18;
        v22 = dispatch thunk of CustomStringConvertible.description.getter(v5, v21);
        v24 = v23;
        v36 = sub_1001A7FE4(v22, v23, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v20 + 4);
        v25 = swift_bridgeObjectRelease(v24);
        (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v25);
        *(_WORD *)(v20 + 12) = 2114;
        v36 = (uint64_t)v17;
        v26 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v20 + 14);
        v27 = v34;
        *v34 = v13;

        v28 = v33;
        _os_log_impl((void *)&_mh_execute_header, v33, v19, "Unable to find sentence UUID %{public}s in result %{public}@", (uint8_t *)v20, 0x16u);
        v29 = sub_100006DF4((uint64_t *)&unk_100291430);
        swift_arrayDestroy(v27, 1, v29);
        swift_slowDealloc(v27, -1, -1);
        v30 = v35;
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
    return 0;
  }
  return v11;
}

uint64_t *sub_1001B8AA4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_100006DF4(&qword_1002982E8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = *(_OWORD *)((char *)a2 + v12);
    *(_OWORD *)((char *)v4 + v12) = v14;
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (char *)a2 + v13;
    v17 = *(uint64_t *)((char *)a2 + v13);
    swift_unknownObjectRetain(v14);
    if (v17)
    {
      v18 = *((_QWORD *)v16 + 1);
      *v15 = v17;
      v15[1] = v18;
      swift_retain(v18);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    v20 = a3[8];
    v21 = a3[9];
    v22 = (uint64_t *)((char *)v4 + v20);
    v23 = (char *)a2 + v20;
    v25 = *(void **)v23;
    v24 = *((_QWORD *)v23 + 1);
    *v22 = v25;
    v22[1] = v24;
    v26 = (uint64_t *)((char *)v4 + v21);
    v27 = (uint64_t *)((char *)a2 + v21);
    v28 = v25;
    v29 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v27, v29) == 1)
    {
      v30 = type metadata accessor for UserInterfaceSizeClass(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v27, 1, v30))
      {
        v32 = sub_100006DF4(&qword_10028CE40);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        v33 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v31 + 16))(v26, v27, v30);
        v33 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v26, 0, 1, v30);
      }
    }
    else
    {
      v34 = *v27;
      *v26 = *v27;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v29, v33);
    v35 = a3[10];
    v36 = a3[11];
    v37 = (uint64_t *)((char *)v4 + v35);
    v38 = (uint64_t *)((char *)a2 + v35);
    v39 = *v38;
    v40 = v38[1];
    *v37 = v39;
    v37[1] = v40;
    v41 = (char *)v4 + v36;
    v42 = (char *)a2 + v36;
    *v41 = *v42;
    v43 = *((_QWORD *)v42 + 1);
    *((_QWORD *)v41 + 1) = v43;
    v44 = a3[12];
    v45 = a3[13];
    v46 = (uint64_t *)((char *)v4 + v44);
    v47 = (uint64_t *)((char *)a2 + v44);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    v19 = *(uint64_t *)((char *)a2 + v45);
    *(uint64_t *)((char *)v4 + v45) = v19;
    swift_retain(v39);
    swift_retain(v43);
    swift_retain(v48);
  }
  swift_retain(v19);
  return v4;
}

double sub_1001B8CE4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_100006DF4(&qword_1002982E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v7 = (_QWORD *)(a1 + a2[7]);
  if (*v7)
    swift_release(v7[1]);

  v8 = (_QWORD *)(a1 + a2[9]);
  v9 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  swift_release(*(_QWORD *)(a1 + a2[10]));
  swift_release(*(_QWORD *)(a1 + a2[11] + 8));
  swift_release(*(_QWORD *)(a1 + a2[12] + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[13])).n128_u64[0];
  return result;
}

uint64_t sub_1001B8E28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100006DF4(&qword_1002982E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(a1 + v11) = v13;
  v14 = (_QWORD *)(a1 + v12);
  v15 = a2 + v12;
  v16 = *(_QWORD *)(a2 + v12);
  swift_unknownObjectRetain(v13);
  if (v16)
  {
    v17 = *(_QWORD *)(v15 + 8);
    *v14 = v16;
    v14[1] = v17;
    swift_retain(v17);
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  v18 = a3[8];
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v18);
  v21 = a2 + v18;
  v23 = *(void **)v21;
  v22 = *(_QWORD *)(v21 + 8);
  *v20 = v23;
  v20[1] = v22;
  v24 = (uint64_t *)(a1 + v19);
  v25 = (uint64_t *)(a2 + v19);
  v26 = v23;
  v27 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v25, v27) == 1)
  {
    v28 = type metadata accessor for UserInterfaceSizeClass(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v25, 1, v28))
    {
      v30 = sub_100006DF4(&qword_10028CE40);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      v31 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v29 + 16))(v24, v25, v28);
      v31 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v24, 0, 1, v28);
    }
  }
  else
  {
    v32 = *v25;
    *v24 = *v25;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v27, v31);
  v33 = a3[10];
  v34 = a3[11];
  v35 = (_QWORD *)(a1 + v33);
  v36 = (uint64_t *)(a2 + v33);
  v37 = *v36;
  v38 = v36[1];
  *v35 = v37;
  v35[1] = v38;
  v39 = a1 + v34;
  v40 = a2 + v34;
  *(_BYTE *)v39 = *(_BYTE *)v40;
  v41 = *(_QWORD *)(v40 + 8);
  *(_QWORD *)(v39 + 8) = v41;
  v42 = a3[12];
  v43 = a3[13];
  v44 = (_QWORD *)(a1 + v42);
  v45 = (_QWORD *)(a2 + v42);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  v47 = *(_QWORD *)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v47;
  swift_retain(v37);
  swift_retain(v41);
  swift_retain(v46);
  swift_retain(v47);
  return a1;
}

uint64_t sub_1001B9040(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100006DF4(&qword_1002982E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  v16 = *v12;
  *v12 = *v13;
  swift_unknownObjectRetain(v14);
  swift_unknownObjectRelease(v16);
  v12[1] = v15;
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  if (v20)
  {
    if (v21)
    {
      v22 = *(_QWORD *)(v19 + 8);
      v23 = v18[1];
      *v18 = v21;
      v18[1] = v22;
      swift_retain(v22);
      swift_release(v23);
      goto LABEL_8;
    }
    swift_release(v18[1]);
  }
  else if (v21)
  {
    v24 = *(_QWORD *)(v19 + 8);
    *v18 = v21;
    v18[1] = v24;
    swift_retain(v24);
    goto LABEL_8;
  }
  *(_OWORD *)v18 = *(_OWORD *)v19;
LABEL_8:
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = a2 + v25;
  v28 = *(void **)(a1 + v25);
  v29 = *(void **)(a2 + v25);
  *v26 = v29;
  v30 = v29;

  v26[1] = *(_QWORD *)(v27 + 8);
  if (a1 != a2)
  {
    v31 = a3[9];
    v32 = (uint64_t *)(a1 + v31);
    v33 = (uint64_t *)(a2 + v31);
    sub_10000A020(a1 + v31, (uint64_t *)&unk_100291470);
    v34 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for UserInterfaceSizeClass(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35))
      {
        v37 = sub_100006DF4(&qword_10028CE40);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        v38 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v36 + 16))(v32, v33, v35);
        v38 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v32, 0, 1, v35);
      }
    }
    else
    {
      v39 = *v33;
      *v32 = *v33;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v34, v38);
  }
  v40 = a3[10];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = *(_QWORD *)(a1 + v40);
  v44 = *(_QWORD *)(a2 + v40);
  *(_QWORD *)(a1 + v40) = v44;
  swift_retain(v44);
  swift_release(v43);
  *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 8);
  v45 = a3[11];
  v46 = a1 + v45;
  v47 = a2 + v45;
  *(_BYTE *)v46 = *(_BYTE *)v47;
  v48 = *(_QWORD *)(v46 + 8);
  v49 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)(v46 + 8) = v49;
  swift_retain(v49);
  swift_release(v48);
  v50 = a3[12];
  v51 = (_QWORD *)(a1 + v50);
  v52 = (_QWORD *)(a2 + v50);
  v53 = v52[1];
  v54 = v51[1];
  *v51 = *v52;
  v51[1] = v53;
  swift_retain(v53);
  swift_release(v54);
  v55 = a3[13];
  v56 = *(_QWORD *)(a2 + v55);
  v57 = *(_QWORD *)(a1 + v55);
  *(_QWORD *)(a1 + v55) = v56;
  swift_retain(v56);
  swift_release(v57);
  return a1;
}

uint64_t sub_1001B9300(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100006DF4(&qword_1002982E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  if (*v13)
  {
    v15 = v13[1];
    *v12 = v14;
    v12[1] = v15;
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  v16 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for UserInterfaceSizeClass(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
    {
      v22 = sub_100006DF4(&qword_10028CE40);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v17, v18, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v23 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  v24 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  return a1;
}

uint64_t sub_1001B94C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100006DF4(&qword_1002982E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = v13[1];
  v15 = *v12;
  *v12 = *v13;
  swift_unknownObjectRelease(v15);
  v12[1] = v14;
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a1 + v16);
  v20 = *(_QWORD *)(a2 + v16);
  if (v19)
  {
    if (v20)
    {
      v21 = *(_QWORD *)(v18 + 8);
      v22 = v17[1];
      *v17 = v20;
      v17[1] = v21;
      swift_release(v22);
      goto LABEL_8;
    }
    swift_release(v17[1]);
  }
  else if (v20)
  {
    v23 = *(_QWORD *)(v18 + 8);
    *v17 = v20;
    v17[1] = v23;
    goto LABEL_8;
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
LABEL_8:
  v24 = a3[8];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  v27 = *(void **)(a1 + v24);
  *v25 = *v26;

  v25[1] = v26[1];
  if (a1 != a2)
  {
    v28 = a3[9];
    v29 = (void *)(a1 + v28);
    v30 = (const void *)(a2 + v28);
    sub_10000A020(a1 + v28, (uint64_t *)&unk_100291470);
    v31 = sub_100006DF4((uint64_t *)&unk_100291470);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for UserInterfaceSizeClass(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32))
      {
        v34 = sub_100006DF4(&qword_10028CE40);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v29, v30, v32);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      }
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
  }
  v35 = a3[10];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_QWORD *)(a1 + v35);
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  swift_release(v38);
  *(_QWORD *)(v36 + 8) = *(_QWORD *)(v37 + 8);
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  *(_BYTE *)v40 = *(_BYTE *)v41;
  v42 = *(_QWORD *)(v40 + 8);
  *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + 8);
  swift_release(v42);
  v43 = a3[12];
  v44 = *(_QWORD *)(a1 + v43 + 8);
  *(_OWORD *)(a1 + v43) = *(_OWORD *)(a2 + v43);
  swift_release(v44);
  v45 = a3[13];
  v46 = *(_QWORD *)(a1 + v45);
  *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
  swift_release(v46);
  return a1;
}

uint64_t sub_1001B9740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B974C);
}

uint64_t sub_1001B974C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006DF4(&qword_1002982E8);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100006DF4(&qword_10028CE50);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[9];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[12]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_1001B9820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B982C);
}

uint64_t sub_1001B982C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006DF4(&qword_1002982E8);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100006DF4(&qword_10028CE50);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[9];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[12]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TranslationCardView(uint64_t a1)
{
  uint64_t result;

  result = qword_100298348;
  if (!qword_100298348)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslationCardView);
  return result;
}

void sub_1001B9938(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001B9A04(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_1001F6848;
      v8[3] = &unk_1001F6848;
      v8[4] = &unk_1001F6848;
      sub_100048160(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = &unk_1001F6848;
        v8[7] = &unk_1001F6848;
        v8[8] = (char *)&value witness table for () + 64;
        v8[9] = (char *)&value witness table for Builtin.NativeObject + 64;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

void sub_1001B9A04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100298358)
  {
    v2 = type metadata accessor for CommittedTranslationViewModel(255);
    v3 = type metadata accessor for Bindable(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100298358);
  }
}

uint64_t sub_1001B9A58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10021876C, 1);
}

unint64_t sub_1001B9A70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298418;
  if (!qword_100298418)
  {
    v1 = sub_1000070BC(&qword_1002983B8);
    sub_1001B9AF4();
    sub_100012334(&qword_100291A80, &qword_10028CFC8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298418);
  }
  return result;
}

unint64_t sub_1001B9AF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298420;
  if (!qword_100298420)
  {
    v1 = sub_1000070BC(&qword_1002983B0);
    sub_10001B6DC(&qword_100298428, &qword_1002983D8, (void (*)(void))sub_1001B9B98);
    sub_100012334(&qword_10028E158, &qword_10028E160, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298420);
  }
  return result;
}

uint64_t sub_1001B9B98()
{
  return sub_10001B6DC(&qword_100298430, &qword_1002983D0, (void (*)(void))sub_1001B9BBC);
}

unint64_t sub_1001B9BBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298438;
  if (!qword_100298438)
  {
    v1 = sub_1000070BC(&qword_1002983C8);
    sub_100012334(&qword_100298440, &qword_1002983C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298438);
  }
  return result;
}

uint64_t sub_1001B9C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranslationCardView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001B9C90()
{
  type metadata accessor for TranslationCardView(0);
  sub_1001B8494();
}

void sub_1001B9CC8()
{
  type metadata accessor for TranslationCardView(0);
  sub_1001B8560();
}

unint64_t sub_1001B9D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298450;
  if (!qword_100298450)
  {
    v1 = sub_1000070BC(&qword_1002983E8);
    sub_1001B9D6C();
    sub_1000482F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298450);
  }
  return result;
}

unint64_t sub_1001B9D6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298458;
  if (!qword_100298458)
  {
    v1 = sub_1000070BC(&qword_1002983E0);
    sub_1001B9A70();
    sub_10001B6DC(&qword_100298428, &qword_1002983D8, (void (*)(void))sub_1001B9B98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298458);
  }
  return result;
}

uint64_t sub_1001B9E30(uint64_t a1)
{
  destroy for TranslateCardActionButtons(a1);
  return a1;
}

uint64_t sub_1001B9E70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslationCardView(0) - 8) + 80);
  return sub_1001B836C(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_1001B9EAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002984E8;
  if (!qword_1002984E8)
  {
    v1 = sub_1000070BC(&qword_1002984E0);
    sub_10001B6DC(&qword_1002984F0, &qword_1002984F8, (void (*)(void))sub_1001B9F30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002984E8);
  }
  return result;
}

unint64_t sub_1001B9F30()
{
  unint64_t result;

  result = qword_100298500;
  if (!qword_100298500)
  {
    result = swift_getWitnessTable(&unk_1001F64A4, &type metadata for TranslateTipsView);
    atomic_store(result, (unint64_t *)&qword_100298500);
  }
  return result;
}

unint64_t sub_1001B9F74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  result = qword_100298508;
  if (!qword_100298508)
  {
    v1 = sub_1000070BC(&qword_10028D048);
    v2 = sub_1000070BC(&qword_10028D038);
    v4 = sub_1000070BC(&qword_10028D030);
    v5 = &type metadata for Color;
    v6 = sub_100012334(&qword_10028D088, &qword_10028D030, (uint64_t)&protocol conformance descriptor for TipView<A>);
    v7 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.tipBackground<A>(_:)>>, 1);
    v4 = v2;
    v5 = (void *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.tipCornerRadius(_:antialiased:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298508);
  }
  return result;
}

uint64_t sub_1001BA070(uint64_t a1, char a2)
{
  return sub_1001BA32C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001B82F8);
}

unint64_t sub_1001BA094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298578;
  if (!qword_100298578)
  {
    v1 = sub_1000070BC(&qword_100298520);
    sub_1001BA118();
    sub_100012334(&qword_10028B250, &qword_10028B258, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298578);
  }
  return result;
}

unint64_t sub_1001BA118()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298580;
  if (!qword_100298580)
  {
    v1 = sub_1000070BC(&qword_100298518);
    sub_1001BA19C();
    sub_100012334(&qword_10028B190, &qword_10028B198, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298580);
  }
  return result;
}

unint64_t sub_1001BA19C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298588;
  if (!qword_100298588)
  {
    v1 = sub_1000070BC(&qword_100298510);
    sub_100007D5C(&qword_100298590, (uint64_t (*)(uint64_t))&type metadata accessor for SimpleExpandingText, (uint64_t)&protocol conformance descriptor for SimpleExpandingText);
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100298588);
  }
  return result;
}

void sub_1001BA254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1001BA3FC(a1, a2, a3, a4, a5, (unsigned int *)&enum case for DisambiguationResultModel.TextLocation.target(_:));
}

uint64_t sub_1001BA264(char a1, uint64_t a2)
{
  return sub_1001BA614(a1, a2, (unsigned int *)&enum case for DisambiguationResultModel.TextLocation.target(_:));
}

unint64_t sub_1001BA270()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002985B0;
  if (!qword_1002985B0)
  {
    v1 = sub_1000070BC(&qword_100298598);
    sub_100007D5C(&qword_10028D0F0, type metadata accessor for LanguageAwareText, (uint64_t)&unk_1001EF768);
    sub_100012334(&qword_10028AED8, &qword_10028AEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002985B0);
  }
  return result;
}

uint64_t sub_1001BA320(uint64_t a1, char a2)
{
  return sub_1001BA32C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001B5090);
}

uint64_t sub_1001BA32C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a2 & 1;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslationCardView(0) - 8) + 80);
  return a3(a1, v5, v3 + ((v6 + 16) & ~v6));
}

uint64_t sub_1001BA39C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslationCardView(0) - 8) + 80);
  return sub_1001B7F80(a1, a2, v2 + ((v5 + 16) & ~v5));
}

void sub_1001BA3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1001BA3FC(a1, a2, a3, a4, a5, (unsigned int *)&enum case for DisambiguationResultModel.TextLocation.source(_:));
}

void sub_1001BA3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslationCardView(0) - 8) + 80);
  sub_1001B8080(a1, a2, a3, a4, a5, v6 + ((v13 + 16) & ~v13), a6);
}

uint64_t sub_1001BA480()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for TranslationCardView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  v8 = v0 + v4 + v1[5];
  v9 = sub_100006DF4(&qword_1002982E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v4 + v1[6]));
  v10 = (_QWORD *)(v0 + v4 + v1[7]);
  if (*v10)
    swift_release(v10[1]);

  v11 = (_QWORD *)(v6 + v1[9]);
  v12 = sub_100006DF4((uint64_t *)&unk_100291470);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for UserInterfaceSizeClass(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  swift_release(*(_QWORD *)(v6 + v1[10]));
  swift_release(*(_QWORD *)(v6 + v1[11] + 8));
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v6 + v1[13]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001BA608(char a1, uint64_t a2)
{
  return sub_1001BA614(a1, a2, (unsigned int *)&enum case for DisambiguationResultModel.TextLocation.source(_:));
}

uint64_t sub_1001BA614(char a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TranslationCardView(0) - 8) + 80);
  return sub_1001B8214(a1, a2, v3 + ((v7 + 16) & ~v7), a3);
}

ValueMetadata *type metadata accessor for TranslationCardView.Icons()
{
  return &type metadata for TranslationCardView.Icons;
}

uint64_t sub_1001BA684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v0 = sub_1000070BC(&qword_1002983F8);
  v1 = type metadata accessor for GenderDisambiguationLearnMoreView(255);
  v5 = sub_1000070BC(&qword_1002983F0);
  v6 = &type metadata for Bool;
  v7 = sub_10001B6DC(&qword_100298448, &qword_1002983F0, (void (*)(void))sub_1001B9D00);
  v8 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v3 = sub_100007D5C(&qword_10028CF70, (uint64_t (*)(uint64_t))&type metadata accessor for GenderDisambiguationLearnMoreView, (uint64_t)&protocol conformance descriptor for GenderDisambiguationLearnMoreView);
  v5 = v0;
  v6 = (void *)v1;
  v7 = OpaqueTypeConformance2;
  v8 = (void *)v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.formSheet<A>(isPresented:content:)>>, 1);
}

void sub_1001BA770(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  BOOL v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v3 = v2;
  if (*a1)
    v5 = 0;
  else
    v5 = a1[1] == 1;
  if (v5)
  {
    sub_10000A020((uint64_t)a1, &qword_100298810);
    v7 = sub_1001A881C(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001AB6E4();
        v11 = v13;
      }
      sub_1001ACB78(*(_QWORD *)(v11 + 56) + 16 * v9, (uint64_t)&v14);
      sub_1001CB944(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = xmmword_1001ED9D0;
    }
    sub_10000A020((uint64_t)&v14, &qword_100298810);
  }
  else
  {
    sub_1001ACB78((uint64_t)a1, (uint64_t)&v14);
    v6 = swift_isUniquelyReferenced_nonNull_native(*v2);
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_1001AADFC((uint64_t)&v14, a2, v6);
    *v2 = v12;
    swift_bridgeObjectRelease();
  }
}

void sub_1001BA88C(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6;
  void (*v7)(id, id, uint64_t (*)(char), uint64_t);
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v7 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  v9 = swift_allocObject(&unk_100270BA0, 24, 7);
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain(v6);
  v11 = a2;
  v10 = a3;
  v7(v11, v10, sub_1001C9904, v9);
  swift_release(v6);
  swift_release(v9);

}

id sub_1001BA93C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F6F98);
  v8 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 72);
  *a2 = v6;
  return v6;
}

void sub_1001BA9C8(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F6F98);
  v6 = v3;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_1001C8C30);
  swift_release(KeyPath);

}

void sub_1001BAA7C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F6EE0);
  v6 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 178);
}

double sub_1001BAB08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F6EE0);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_1001C9EAC);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_1001BABB0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F6EB8);
  v6 = v3;
  v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 225);
}

double sub_1001BAC3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F6EB8);
  v5 = v2;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_1001C9EC0);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1001BACE4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F6F08, (uint64_t)&unk_1001F6F30, a2);
}

void sub_1001BACF8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F6F08);
  v5 = swift_getKeyPath(&unk_1001F6F30);
  v6 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v6, v3, KeyPath, v5);
  sub_100051DD0();
}

double sub_1001BAD6C@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F7008);
  v7 = v3;
  v5 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 16);
  *a2 = result;
  return result;
}

void sub_1001BADF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F7008);
  v4 = v2;
  sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v4, KeyPath, sub_1001C9ED4);
  swift_release(KeyPath);
}

uint64_t sub_1001BAEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

id sub_1001BAEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a3);
  v7 = (void *)v6(a2, a3);
  swift_release(v5);
  swift_unknownObjectRelease(a3);
  return v7;
}

void sub_1001BAF54(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;

  if (a2)
  {
    KeyPath = swift_getKeyPath(&unk_1001F6F98);
    v7 = a2;
    v5 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    swift_retain(a2);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
    v6 = objc_msgSend(*(id *)(a2 + 72), "objectID", swift_release(KeyPath).n128_f64[0]);
    NSObject.hash(into:)(a1);
    swift_release(a2);

  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
}

Swift::Int sub_1001BB030(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  double v4;
  id v5;
  uint64_t v7;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, 0);
  if (a1)
  {
    KeyPath = swift_getKeyPath(&unk_1001F6F98);
    v7 = a1;
    v3 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    swift_retain(a1);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v3);
    *(_QWORD *)&v4 = swift_release(KeyPath).n128_u64[0];
    v5 = objc_msgSend(*(id *)(a1 + 72), "objectID", v4, v7);
    NSObject.hash(into:)(v8);
    swift_release(a1);

  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001BB114()
{
  uint64_t *v0;

  return sub_1001BB030(*v0);
}

void sub_1001BB11C(uint64_t a1)
{
  uint64_t *v1;

  sub_1001BAF54(a1, *v1);
}

Swift::Int sub_1001BB124(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double v5;
  id v6;
  uint64_t v8;
  _QWORD v9[9];

  v2 = *v1;
  Hasher.init(_seed:)(v9, a1);
  if (v2)
  {
    KeyPath = swift_getKeyPath(&unk_1001F6F98);
    v8 = v2;
    v4 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    swift_retain(v2);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
    *(_QWORD *)&v5 = swift_release(KeyPath).n128_u64[0];
    v6 = objc_msgSend(*(id *)(v2 + 72), "objectID", v5, v8);
    NSObject.hash(into:)(v9);
    swift_release(v2);

  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  return Hasher._finalize()();
}

unint64_t sub_1001BB204(uint64_t *a1, uint64_t *a2)
{
  return sub_1001C9074(*a1, *a2);
}

uint64_t sub_1001BB210()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t aBlock[5];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                    + 8];
  v58 = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
  v59 = v3;
  v63 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
  if (!v3)
  {
    v10 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryHighlightRect];
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    v10[32] = 1;
    v11 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryTextView];
    *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryTextView] = 0;

    v12 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController];
    if (!v12)
    {
      v19 = objc_msgSend(v0, "presentedViewController");
      if (!v19)
      {
        if (qword_10028A420 != -1)
          swift_once(&qword_10028A420, sub_100120F74);
        v28 = type metadata accessor for Logger(0);
        v29 = sub_10000F66C(v28, (uint64_t)qword_1002AA368);
        v13 = Logger.logObject.getter(v29);
        v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, v30, "Unable to find any dictionary view controller to dismiss", v31, 2u);
          swift_slowDealloc(v31, -1, -1);
        }
        goto LABEL_18;
      }
      v20 = (uint64_t)v19;
      if (qword_10028A420 != -1)
        goto LABEL_48;
      goto LABEL_11;
    }
    v13 = v12;
    v14 = -[NSObject presentingViewController](v13, "presentingViewController");
    if (!v14)
      v14 = v13;
    v15 = swift_allocObject(&unk_1002709C0, 24, 7);
    swift_unknownObjectWeakInit(v15 + 16, v1);
    v16 = swift_allocObject(&unk_1002709E8, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16, v13);
    v17 = swift_allocObject(&unk_100270A10, 32, 7);
    *(_QWORD *)(v17 + 16) = v15;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = (uint64_t)sub_1001C8C08;
    v65 = v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100075908;
    aBlock[3] = (uint64_t)&unk_100270A28;
    v18 = _Block_copy(aBlock);
    -[NSObject dismissViewControllerAnimated:completion:](v14, "dismissViewControllerAnimated:completion:", 1, v18, swift_release(v65).n128_f64[0]);
    _Block_release(v18);
    goto LABEL_8;
  }
  v4 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel;
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel];
  KeyPath = swift_getKeyPath(&unk_1001F6FC0);
  v7 = swift_getKeyPath(&unk_1001F6FE8);
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  static Published.subscript.getter(aBlock, v8, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  swift_release(v7);
  if ((aBlock[0] & 1) != 0)
  {
    v9 = *(_QWORD *)&v1[v4];
    swift_retain(v9);
    sub_100050128(0);
    swift_release(v9);
  }
  while (1)
  {
    v32 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore];
    v60 = v1;
    if ((unint64_t)v32 >> 62)
      break;
    v20 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v32, 2);
    if (!v20)
      goto LABEL_39;
LABEL_22:
    if (v20 >= 1)
    {
      v33 = 0;
      v61 = v32 & 0xC000000000000001;
      v62 = v32;
      while (1)
      {
        if (v61)
        {
          v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v32);
          v37 = *((_QWORD *)v2 + 1);
          if (v37)
            goto LABEL_29;
        }
        else
        {
          v36 = *(_QWORD *)(v32 + 8 * v33 + 32);
          swift_retain(v36);
          v37 = *((_QWORD *)v2 + 1);
          if (v37)
          {
LABEL_29:
            v38 = *(_QWORD *)v2;
            v39 = swift_getKeyPath(&unk_1001F6F98);
            aBlock[0] = v36;
            v40 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
            swift_bridgeObjectRetain_n(v37, 2);
            ObservationRegistrar.access<A, B>(_:keyPath:)(aBlock, v39, v40);
            v41 = objc_msgSend(*(id *)(v36 + 72), "identifier", swift_release(v39).n128_f64[0]);
            v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v44 = v43;

            if (v38 != v42 || v37 != v44)
              _stringCompareWithSmolCheck(_:_:expecting:)(v38, v37, v42, v44, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n(v37, 2);
          }
        }
        ++v33;
        v34 = swift_getKeyPath(&unk_1001F6EB8);
        __chkstk_darwin(v34);
        aBlock[0] = v36;
        sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(aBlock, v34, sub_1001C8B48);
        swift_release(v34);
        v35 = swift_getKeyPath(&unk_1001F6EE0);
        __chkstk_darwin(v35);
        aBlock[0] = v36;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(aBlock, v35, sub_1001C8B6C);
        swift_release(v36);
        swift_release(v35);
        v32 = v62;
        v2 = v63;
        if (v20 == v33)
          goto LABEL_39;
      }
    }
    __break(1u);
LABEL_48:
    swift_once(&qword_10028A420, sub_100120F74);
LABEL_11:
    v21 = type metadata accessor for Logger(0);
    sub_10000F66C(v21, (uint64_t)qword_1002AA368);
    v13 = (id)v20;
    v14 = Logger.logObject.getter(v13);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      aBlock[0] = v24;
      *(_DWORD *)v23 = 136446210;
      ObjectType = swift_getObjectType(v13);
      v26 = _typeName(_:qualified:)(ObjectType, 0);
      v66 = sub_1001A7FE4(v26, v27, aBlock);
      v2 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v23 + 4);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v22, "Couldn't find dictionaryController to dismiss but have presented view controller: %{public}s; not attempting to "
        "dismiss it though since it might not be a dictionaryController",
        v23,
        0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
LABEL_8:

    }
    else
    {

LABEL_18:
    }
    sub_1001C41D8(1u, 1);
  }
  if (v32 < 0)
    v46 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore];
  else
    v46 = v32 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v32, 2);
  v20 = _CocoaArrayWrapper.endIndex.getter(v46);
  if (v20)
    goto LABEL_22;
LABEL_39:
  swift_bridgeObjectRelease_n(v32, 2);
  if (v59)
  {
    v47 = v60;
    if (v58 == 0xD000000000000025 && v59 == 0x8000000100202630)
      v48 = 1;
    else
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, 0xD000000000000025, 0x8000000100202630, 0);
    swift_bridgeObjectRelease();
    v49 = v48;
  }
  else
  {
    v48 = 0;
    v49 = 1;
    v47 = v60;
  }
  v50 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel;
  v51 = *(_QWORD *)&v47[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel];
  v52 = swift_getKeyPath(&unk_1001F6F08);
  v53 = swift_getKeyPath(&unk_1001F6F30);
  LOBYTE(aBlock[0]) = v48 & 1;
  swift_retain_n(v51, 2);
  static Published.subscript.setter(aBlock, v51, v52, v53);
  sub_100051DD0();
  swift_release(v51);
  v54 = *(_QWORD *)&v47[v50];
  v55 = swift_getKeyPath(&unk_1001F6F50);
  v56 = swift_getKeyPath(&unk_1001F6F78);
  LOBYTE(aBlock[0]) = v49 & 1;
  swift_retain(v54);
  static Published.subscript.setter(aBlock, v54, v55, v56);
  return sub_1001BF784(0);
}

uint64_t sub_1001BBA80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D5854(*a1, *a2);
}

Swift::Int sub_1001BBA8C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEA00000000007972;
  v3 = 0x616E6F6974636964;
  if (v1 != 1)
  {
    v3 = 0x6F68706F7263696DLL;
    v2 = 0xEA0000000000656ELL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6472616F6279656BLL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001BBB34(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEA00000000007972;
  v3 = 0x616E6F6974636964;
  if (*v1 != 1)
  {
    v3 = 0x6F68706F7263696DLL;
    v2 = 0xEA0000000000656ELL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6472616F6279656BLL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001BBBB8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEA00000000007972;
  v4 = 0x616E6F6974636964;
  if (v2 != 1)
  {
    v4 = 0x6F68706F7263696DLL;
    v3 = 0xEA0000000000656ELL;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6472616F6279656BLL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1001BBC5C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001C951C(*a1);
  *a2 = result;
  return result;
}

void sub_1001BBC88(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xEA00000000007972;
  v5 = 0x616E6F6974636964;
  if (v2 != 1)
  {
    v5 = 0x6F68706F7263696DLL;
    v4 = 0xEA0000000000656ELL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6472616F6279656BLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

char *sub_1001BBCF0(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  objc_class *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD v98[2];
  id aBlock[5];
  uint64_t v100;
  objc_super v101;

  v91 = sub_100006DF4(&qword_10028DEF8);
  v89 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100006DF4(&qword_1002987B0);
  v90 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v88 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006DF4(&qword_1002987B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v93 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4(&qword_10028EF80);
  v81 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100006DF4(&qword_1002987C0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100006DF4(&qword_1002987C8);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource] = 0;
  v18 = v1;
  v94 = v6;
  v95 = v5;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v19 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v19 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_observers] = v19;
  *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore] = _swiftEmptyArrayStorage;
  v20 = &v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController] = 0;
  v21 = &v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryHighlightRect];
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  v21[32] = 1;
  *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryTextView] = 0;
  v22 = &v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pendingDictionaryModeIdentifier];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v23 = &v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_entryCardStaticIdentifier];
  *(_QWORD *)v23 = 0xD000000000000018;
  *((_QWORD *)v23 + 1) = 0x8000000100202700;
  v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pinComposeCardToKeyboard] = 0;
  v24 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap;
  *(_QWORD *)&v18[v24] = sub_1001A4F44((uint64_t)_swiftEmptyArrayStorage);
  v25 = &v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_lastKnownKeyboardFrame];
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *(_QWORD *)&v18[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel] = a1;
  swift_retain(a1);

  v26 = (objc_class *)type metadata accessor for TranslationListController();
  v101.receiver = v18;
  v101.super_class = v26;
  v96 = (char *)objc_msgSendSuper2(&v101, "initWithNibName:bundle:", 0, 0);
  v97 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel;
  v27 = v96;
  v28 = *(_QWORD *)(*(_QWORD *)&v96[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel]
                  + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
  swift_beginAccess(v28 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__translations, aBlock, 33, 0);
  v29 = v27;
  swift_retain(v28);
  v30 = sub_100006DF4((uint64_t *)&unk_100295410);
  Published.projectedValue.getter(v30);
  swift_endAccess(aBlock);
  swift_release(v28);
  v31 = a1;
  v32 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  aBlock[0] = (id)static OS_dispatch_queue.main.getter(v32);
  v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v80 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v80(v10, 1, 1, v33);
  v34 = sub_100012334((unint64_t *)&unk_1002987D0, &qword_10028EF80, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v79 = sub_10001D984();
  Publisher.receive<A>(on:options:)(aBlock, v10, v11, v32, v34, v79);
  sub_10000A020((uint64_t)v10, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v81 + 8))(v13, v11);
  v35 = swift_allocObject(&unk_100270E38, 24, 7);
  *(_QWORD *)(v35 + 16) = v29;
  v36 = v29;
  v37 = sub_100006DF4(&qword_1002986C8);
  v38 = sub_100012334(&qword_1002987E0, &qword_1002987C0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v39 = v83;
  Publisher.map<A>(_:)(sub_1001C9DD0, v35, v83, v37, v38);
  v40 = swift_release(v35);
  (*(void (**)(char *, uint64_t, __n128))(v82 + 8))(v15, v39, v40);
  v41 = swift_allocObject(&unk_100270E60, 32, 7);
  *(_QWORD *)(v41 + 16) = v36;
  *(_QWORD *)(v41 + 24) = v31;
  v86 = v31;
  v42 = sub_100012334(&qword_1002987E8, &qword_1002987C8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  swift_retain(v31);
  v43 = (char *)v36;
  v44 = v85;
  v45 = Publisher<>.sink(receiveValue:)(sub_1001C9E04, v41, v85, v42);
  v46 = swift_release(v41);
  (*(void (**)(char *, uint64_t, __n128))(v84 + 8))(v17, v44, v46);
  v47 = &v43[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_observers];
  swift_beginAccess(&v43[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_observers], aBlock, 33, 0);
  AnyCancellable.store(in:)(v47);
  swift_endAccess(aBlock);
  swift_release(v45);
  v48 = *(_QWORD *)&v96[v97];
  swift_beginAccess(v48 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel__isListening, aBlock, 33, 0);
  swift_retain(v48);
  v49 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v50 = v87;
  Published.projectedValue.getter(v49);
  swift_endAccess(aBlock);
  swift_release(v48);
  aBlock[0] = (id)static OS_dispatch_queue.main.getter(v51);
  v80(v10, 1, 1, v33);
  v52 = sub_100012334(&qword_10028DF40, &qword_10028DEF8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v53 = v88;
  v54 = v91;
  Publisher.receive<A>(on:options:)(aBlock, v10, v91, v32, v52, v79);
  sub_10000A020((uint64_t)v10, &qword_100296BE0);

  (*(void (**)(char *, uint64_t))(v89 + 8))(v50, v54);
  v55 = sub_100012334(&qword_100298800, &qword_1002987B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v56 = v92;
  v57 = v93;
  Publisher<>.removeDuplicates()(v92, v55, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v53, v56);
  v58 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v58 + 16, v43);
  v59 = sub_100012334(&qword_100298808, &qword_1002987B8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v60 = v95;
  v61 = Publisher<>.sink(receiveValue:)(sub_1001C9E0C, v58, v95, v59);
  v62 = swift_release(v58);
  (*(void (**)(char *, uint64_t, __n128))(v94 + 8))(v57, v60, v62);
  swift_beginAccess(v47, aBlock, 33, 0);
  AnyCancellable.store(in:)(v47);
  swift_endAccess(aBlock);
  swift_release(v61);
  v63 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v64 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v65 = swift_allocObject(&unk_100270E88, 24, 7);
  *(_QWORD *)(v65 + 16) = v43;
  aBlock[4] = sub_1001C9E14;
  v100 = v65;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10014BC70;
  aBlock[3] = &unk_100270EA0;
  v66 = _Block_copy(aBlock);
  v67 = v100;
  v68 = v43;
  v69 = objc_msgSend(v63, "addObserverForName:object:queue:usingBlock:", UIKeyboardWillChangeFrameNotification, 0, v64, v66, swift_release(v67).n128_f64[0]);
  _Block_release(v66);
  swift_unknownObjectRelease(v69);

  v70 = *(_QWORD *)(*(_QWORD *)&v96[v97] + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
  v98[1] = &off_100270978;
  swift_unknownObjectWeakInit(v98, v68);
  swift_beginAccess(v70 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_observations, aBlock, 33, 0);
  v71 = v68;
  swift_retain(v70);
  sub_1001BA770(v98, (uint64_t)v71);
  swift_endAccess(aBlock);
  swift_release(v70);

  v72 = sub_100006DF4(&qword_10028FE40);
  v73 = swift_allocObject(v72, 48, 7);
  *(_OWORD *)(v73 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v73 + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
  *(_QWORD *)(v73 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
  v74 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v74 + 16, v71);
  v75 = v71;
  v76 = sub_100006DF4(&qword_10028FE48);
  v77 = UIViewController.registerForTraitChanges<A>(_:handler:)(v73, sub_1001C9E34, v74, v76);
  swift_unknownObjectRelease(v77);
  swift_bridgeObjectRelease();
  swift_release(v74);

  swift_release(v86);
  return v75;
}

void sub_1001BC758(unint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  id v5;
  _QWORD *v6;

  v4 = *a1;
  v5 = a2;
  v6 = sub_1001C91A0(v4, (uint64_t)v5);

  *a3 = v6;
}

uint64_t sub_1001BC7B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v5 = *a1;
  v6 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore;
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore);
    else
      v13 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(a2
                                       + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore));
    v8 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
    if (!((unint64_t)v5 >> 62))
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!((unint64_t)v5 >> 62))
    {
LABEL_3:
      v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v5 < 0)
    v14 = v5;
  else
    v14 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v9 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease();
LABEL_4:
  *(_QWORD *)(a2 + v6) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v10 = OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_newTranslationFromPunchOut;
  if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_newTranslationFromPunchOut) & 1) != 0)
    v11 = 2;
  else
    v11 = sub_1001C3A44() & (v8 < v9);
  result = sub_1001BF784(v11);
  *(_BYTE *)(a3 + v10) = 0;
  return result;
}

void sub_1001BC8C0(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t Strong;
  double v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD v18[4];
  char v19;
  _QWORD v20[3];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, (char *)v20 + 1, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v6 = (void *)Strong;
    if (v2)
    {
      v7 = (_QWORD *)(Strong
                    + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode);
      v8 = *(_QWORD *)(Strong
                     + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                     + 8);
      *v7 = 0;
      v7[1] = 0;
      if (v8)
      {
        sub_1001BB210();
        *(_QWORD *)&v5 = swift_bridgeObjectRelease().n128_u64[0];
      }
    }
    v9 = objc_msgSend(v6, "traitCollection", v5);
    v10 = sub_1000AEB88();
    UITraitCollection.subscript.getter(v20, &type metadata for SequoiaAppLayoutTrait, &type metadata for SequoiaAppLayoutTrait, v10);

    if ((v20[0] & 1) == 0)
    {
      v11 = objc_msgSend(v6, "parentViewController");
      if (v11)
      {
        v12 = v11;
        v13 = objc_msgSend(v11, "navigationItem");

        objc_msgSend(v13, "setLargeTitleDisplayMode:", 0);
      }
    }
    v14 = 0;
    if (v2)
    {
      if (qword_10028A4D0 != -1)
        swift_once(&qword_10028A4D0, sub_10016B514);
      v14 = qword_1002AA520;
    }
    v15 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
    __chkstk_darwin(v15);
    v18[2] = v6;
    v18[3] = v14;
    v19 = v2;
    v16 = v6;
    v17 = static Animation.default.getter(v16);
    static UIView.animate(with:changes:completion:)(v17, sub_1001C9E3C, v18, 0, 0);

    swift_release(v17);
  }
}

void sub_1001BCAD4(char *a1, char a2, double a3)
{
  uint64_t v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  double MaxY;
  void *v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  id v18;
  unint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  char v24;
  double v25;
  double v26;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  CGRect v37;

  sub_1001C3BA8(2u, 0, a3);
  if ((a2 & 1) != 0)
  {
    v5 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView;
    v6 = *(void **)&a1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView];
    if (v6)
    {
      objc_msgSend(v6, "contentSize");
      v8 = *(void **)&a1[v5];
      if (!v8)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v9 = v7;
      objc_msgSend(v8, "frame");
      MaxY = CGRectGetMaxY(v37);
      v11 = *(void **)&a1[v5];
      if (!v11)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v12 = MaxY;
      objc_msgSend(v11, "adjustedContentInset");
      v14 = *(void **)&a1[v5];
      if (!v14)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        return;
      }
      v15 = v13;
      objc_msgSend(v14, "adjustedContentInset");
      v17 = v16;
      v18 = objc_msgSend(a1, "traitCollection");
      v19 = sub_1000AEB88();
      UITraitCollection.subscript.getter(&v36, &type metadata for SequoiaAppLayoutTrait, &type metadata for SequoiaAppLayoutTrait, v19);

      if ((v36 & 1) != 0)
        goto LABEL_18;
      v20 = objc_msgSend(a1, "parentViewController");
      if (!v20)
        goto LABEL_18;
      v21 = v20;
      v22 = objc_msgSend(v20, "navigationController");

      if (!v22)
        goto LABEL_18;
      v23 = objc_msgSend(v22, "navigationBar");

      if (!v23)
        goto LABEL_18;
      sub_1001D9138();
      if ((v24 & 1) == 0)
      {
LABEL_17:

LABEL_18:
        sub_1001BD86C(0);
        return;
      }
      sub_1001D9338();
      if (v25 >= 0.0)
      {
        v26 = v9 - (v12 - v15 - v17);
        if (v26 >= 0.0 && v26 <= v25)
        {
          v28 = objc_msgSend(a1, "parentViewController");
          if (v28)
          {
            v29 = v28;
            v30 = objc_msgSend(v28, "navigationItem");

            objc_msgSend(v30, "setLargeTitleDisplayMode:", 2);
          }
          v31 = *(void **)&a1[v5];
          if (v31)
          {
            v32 = v31;
            objc_msgSend(v32, "contentOffset");
            v34 = v33;
            sub_1001D9338();
            objc_msgSend(v32, "setContentOffset:animated:", 0, 0.0, v34 + v35 + 5.0);

            return;
          }
          goto LABEL_29;
        }
        goto LABEL_17;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
}

void sub_1001BCD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *Strong;
  void *v5;
  char *v6;
  uint64_t v7;
  char v8[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = &Strong[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
    v7 = *(_QWORD *)&Strong[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                          + 8];
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    if (v7)
    {
      sub_1001BB210();

      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

void sub_1001BCE04()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v1 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v0, "setView:", v1);

  v2 = objc_msgSend(v0, "view");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "setAutoresizingMask:", 18);

    v4 = objc_msgSend(v0, "view");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
      objc_msgSend(v5, "setBackgroundColor:", v6);

      sub_1001BE474();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

double sub_1001BCF84(char a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  _BYTE v14[24];
  objc_super v15;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = (objc_class *)type metadata accessor for TranslationListController();
  v15.receiver = v1;
  v15.super_class = v7;
  objc_msgSendSuper2(&v15, "viewDidAppear:", a1 & 1);
  sub_1001BF784(0);
  v8 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel];
  v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_currentSelfLoggingInvocation);
  swift_retain(v8);
  swift_retain(v9);
  UUID.init()(v10);
  v11 = v9 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabSessionId;
  swift_beginAccess(v9 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_tabSessionId, v14, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 40))(v11, v6, v3);
  swift_endAccess(v14);
  *(_BYTE *)(v9 + OBJC_IVAR____TtC17SequoiaTranslator28SELFLoggingInvocationWrapper_hasLoggedGenderCoreAnalytics) = 0;
  swift_release(v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

void sub_1001BD0DC(uint64_t a1, double a2, double a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  char *v13;
  uint64_t v14;
  objc_super v15;

  v4 = v3;
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for TranslationListController();
  objc_msgSendSuper2(&v15, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  if ((sub_1001BD250() & 1) == 0)
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10000F66C(v8, (uint64_t)qword_1002AA368);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Dismissing Dictionary Mode due to rotation/size change in a configuration we can't properly move the highlight", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = &v4[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
    v14 = *(_QWORD *)&v4[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                       + 8];
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    if (v14)
    {
      sub_1001BB210();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1001BD250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class isa;
  Class v30;
  id v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v1);
  v3 = __chkstk_darwin(v2);
  v7 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                 + 8);
  if (!v7)
    goto LABEL_21;
  v40 = v6;
  v41 = v5;
  v42 = (char *)&v40 - v4;
  v43 = v3;
  v45 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode);
  v46 = v7;
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore);
  if (!((unint64_t)v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore), 2);
    swift_bridgeObjectRetain(v46);
    if (v9)
      goto LABEL_4;
    goto LABEL_16;
  }
LABEL_25:
  if (v8 < 0)
    v39 = v8;
  else
    v39 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v8, 2);
  swift_bridgeObjectRetain(v46);
  v9 = _CocoaArrayWrapper.endIndex.getter(v39);
  if (!v9)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v46);
LABEL_21:
    v36 = 0;
    return v36 & 1;
  }
LABEL_4:
  v44 = v8 & 0xC000000000000001;
  v10 = 4;
  while (1)
  {
    v11 = v10 - 4;
    if (v44)
    {
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v8);
      v13 = v10 - 3;
      if (__OFADD__(v11, 1))
        goto LABEL_24;
    }
    else
    {
      v12 = *(_QWORD *)(v8 + 8 * v10);
      swift_retain(v12);
      v13 = v10 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    KeyPath = swift_getKeyPath(&unk_1001F6F98);
    v47 = v12;
    v15 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v47, KeyPath, v15);
    swift_release(KeyPath);
    v16 = objc_msgSend(*(id *)(v12 + 72), "identifier");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20 = v46;
    if (v17 == v45 && v46 == v19)
    {
      swift_bridgeObjectRelease(v8);
      goto LABEL_19;
    }
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v45, v46, 0);
    swift_bridgeObjectRelease(v19);
    if ((v22 & 1) != 0)
      break;
    swift_release(v12);
    ++v10;
    if (v13 == v9)
      goto LABEL_16;
  }
  v19 = v8;
  v20 = v46;
LABEL_19:
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  v23 = swift_getKeyPath(&unk_1001F6F98);
  v47 = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v47, v23, v15);
  swift_release(v23);
  v24 = *(id *)(v12 + 72);
  v25 = v42;
  v26 = dispatch thunk of PersistedTranslation.sourceLocale.getter(v24);
  v27 = v40;
  dispatch thunk of PersistedTranslation.targetLocale.getter(v26);
  v28 = objc_allocWithZone((Class)_LTLocalePair);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v30 = Locale._bridgeToObjectiveC()().super.isa;
  v31 = objc_msgSend(v28, "initWithSourceLocale:targetLocale:", isa, v30);

  v32 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v33 = v27;
  v34 = v43;
  v32(v33, v43);
  v32((uint64_t)v25, v34);

  v35 = objc_msgSend(v31, "sourceLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v35);

  LOBYTE(v35) = Locale.isRTL()();
  v32((uint64_t)v25, v34);
  if ((v35 & 1) != 0)
  {
    swift_release(v12);

    goto LABEL_21;
  }
  v38 = objc_msgSend(v31, "targetLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)(v38);

  LOBYTE(v38) = Locale.isRTL()();
  swift_release(v12);

  v32((uint64_t)v25, v34);
  v36 = v38 ^ 1;
  return v36 & 1;
}

void sub_1001BD700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pinComposeCardToKeyboard) == 1)
  {
    sub_1001BD86C(0);
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore);
    if ((unint64_t)v1 >> 62)
    {
      if (v1 < 0)
        v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore);
      else
        v16 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0
                                         + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore));
      v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_4:
        v2 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView;
        v3 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
        if (v3)
        {
          objc_msgSend(v3, "layoutIfNeeded");
          v4 = *(void **)(v0 + v2);
          if (v4)
          {
            objc_msgSend(v4, "contentOffset");
            v7 = *(void **)(v0 + v2);
            if (v7)
            {
              v8 = v5;
              v9 = v6;
              v10 = v7;
              v11 = objc_msgSend(v10, "traitCollection");
              objc_msgSend(v11, "displayScale");
              v13 = v12;

              v14 = 16.0;
              if (v13 != 0.0)
                v14 = sub_1000C0DF4(v13 * 16.0) / v13;
              v15 = *(void **)(v0 + v2);
              if (v15)
              {
                objc_msgSend(v15, "setContentOffset:animated:", 0, v8, v9 + v14);
                return;
              }
              goto LABEL_19;
            }
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_18;
      }
    }
    else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_4;
    }
  }
}

uint64_t sub_1001BD86C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  uint64_t result;
  void *v16;
  id v17;
  Class isa;
  _QWORD v19[2];

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource);
  if (v11)
  {
    v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_entryCardStaticIdentifier + 8);
    v19[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_entryCardStaticIdentifier);
    v19[1] = v12;
    v13 = v11;
    v14 = swift_bridgeObjectRetain(v12);
    dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(v19, v14);
    swift_bridgeObjectRelease();

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  IndexPath.init(row:section:)(0, 1);
  result = sub_10000A020((uint64_t)v6, (uint64_t *)&unk_100290880);
LABEL_6:
  v16 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
  if (v16)
  {
    v17 = v16;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "scrollToItemAtIndexPath:atScrollPosition:animated:", isa, 4, a1 & 1);

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001BDA30(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  NSObject *v28;

  v2 = v1;
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource);
  if (v8)
  {
    v9 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView;
    v10 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
    if (!v10)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    v11 = v8;
    v12 = v10;
    v13 = dispatch thunk of UICollectionViewDiffableDataSource.numberOfSections(in:)();

    if (v13 >= 1)
    {
      v14 = *(void **)(v2 + v9);
      if (!v14)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      v15 = v14;
      v16 = dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:numberOfItemsInSection:)();

      if (v16 >= 1)
      {
        v17 = *(void **)(v2 + v9);
        if (!v17)
        {
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          return;
        }
        v18 = v17;
        v19 = dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:numberOfItemsInSection:)();

        if (!__OFSUB__(v19, 1))
        {
          IndexPath.init(item:section:)(v19 - 1, 0);
          v20 = *(void **)(v2 + v9);
          if (v20)
          {
            v21 = v20;
            isa = IndexPath._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v21, "scrollToItemAtIndexPath:atScrollPosition:animated:", isa, 4, a1 & 1);

            (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
            return;
          }
          goto LABEL_20;
        }
        __break(1u);
        goto LABEL_17;
      }
    }

  }
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10000F66C(v23, (uint64_t)qword_1002AA470);
  v28 = Logger.logObject.getter(v24);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v25, "Couldn't scroll to the last translation card", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

}

void *sub_1001BDC94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *result;
  void *v21;
  void *v22;
  id v23;
  id v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  id v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v3 = v2;
  v6 = sub_100006DF4(&qword_100298740);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_1002986B8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v43 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v44 = *(_QWORD *)(v16 - 8);
  v45 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v12);
  UICollectionLayoutListConfiguration.init(appearance:)(v15);
  UICollectionLayoutListConfiguration.headerTopPadding.setter(0, 0);
  v19 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v3);
  UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter(sub_1001C9C44, v19);
  sub_10000A05C(0, &qword_1002908C0, NSCollectionLayoutSection_ptr);
  result = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v18, a2);
  v21 = result;
  if (a1 == 1)
  {
    objc_msgSend(result, "contentInsets");
    objc_msgSend(v21, "setContentInsets:", 0.0);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v45);
    return v21;
  }
  if (a1)
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA470);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.fault.getter(v37);
    v39 = os_log_type_enabled(v37, v38);
    v40 = v45;
    if (v39)
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v41 = 134349056;
      v47 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v41 + 4);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to get section for index %{public}ld; data might be malformed",
        v41,
        0xCu);
      swift_slowDealloc(v41, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v40);
    return v21;
  }
  v22 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
  if (v22)
  {
    v23 = v22;
    v24 = objc_msgSend(v23, "traitCollection");
    objc_msgSend(v24, "displayScale");
    v26 = v25;

    v27 = 16.0;
    if (v26 != 0.0)
      v27 = sub_1000C0DF4(v26 * 16.0) / v26;
    objc_msgSend(v21, "setInterGroupSpacing:", v27);
    v28 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource);
    if (v28)
    {
      v29 = v28;
      dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
      v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
      v31 = v45;
      if (v30 != 1)
      {
        v32 = v43;
        (*(void (**)(void))(v10 + 32))();
        v46 = 0;
        v33 = *(_QWORD *)(NSDiffableDataSourceSnapshot.itemIdentifiers(inSection:)(&v46, v9) + 16);
        v34 = swift_bridgeObjectRelease();
        if (!v33)
        {
          objc_msgSend(v21, "contentInsets", v34.n128_f64[0]);
          objc_msgSend(v21, "setContentInsets:", 0.0);
          objc_msgSend(v21, "contentInsets");
          objc_msgSend(v21, "setContentInsets:");
        }
        (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v32, v9, v34);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v31);
        return v21;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
      v31 = v45;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v31);
    sub_10000A020((uint64_t)v8, &qword_100298740);
    return v21;
  }
  __break(1u);
  return result;
}

char *sub_1001BE14C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  v5 = (char *)Strong;
  if (Strong)
  {
    v6 = *(void **)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource);
    if (v6
      && (v7 = v6,
          dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(&v27, a1),
          v7,
          (v8 = v28) != 0))
    {
      v9 = v27;
      v10 = *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore];
      v26 = v5;
      if ((unint64_t)v10 >> 62)
        goto LABEL_26;
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v10, 2);
      swift_bridgeObjectRetain(v8);
      while (v11)
      {
        v12 = 4;
        while (1)
        {
          v13 = v12 - 4;
          if ((v10 & 0xC000000000000001) == 0)
            break;
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
          v15 = v12 - 3;
          if (__OFADD__(v13, 1))
            goto LABEL_25;
LABEL_12:
          KeyPath = swift_getKeyPath(&unk_1001F6F98);
          v27 = v14;
          v17 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, KeyPath, v17);
          v18 = objc_msgSend(*(id *)(v14 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          v21 = v20;

          if (v19 == v9 && v8 == v21)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_24:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v5 = (char *)sub_1001C48B4(v14);

            swift_release(v14);
            return v5;
          }
          v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v9, v8, 0);
          swift_bridgeObjectRelease();
          if ((v23 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
          swift_release(v14);
          ++v12;
          if (v15 == v11)
            goto LABEL_18;
        }
        v14 = *(_QWORD *)(v10 + 8 * v12);
        swift_retain(v14);
        v15 = v12 - 3;
        if (!__OFADD__(v13, 1))
          goto LABEL_12;
LABEL_25:
        __break(1u);
LABEL_26:
        if (v10 < 0)
          v25 = v10;
        else
          v25 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v10, 2);
        swift_bridgeObjectRetain(v8);
        v11 = _CocoaArrayWrapper.endIndex.getter(v25);
      }
LABEL_18:

      swift_bridgeObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease_n(v10, 2);
    }
    else
    {

    }
    return 0;
  }
  return v5;
}

void *sub_1001BE3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  void *v8;
  _BYTE v10[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (!Strong)
    return 0;
  v7 = (void *)Strong;
  v8 = sub_1001BDC94(a1, a2);

  return v8;
}

void sub_1001BE474()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD v30[5];
  uint64_t v31;

  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = v1;
  objc_msgSend(v1, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v0);
  v12 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  v30[4] = sub_1001C9C3C;
  v31 = v11;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 1107296256;
  v30[2] = sub_1001BAEF0;
  v30[3] = &unk_100270D70;
  v13 = _Block_copy(v30);
  v14 = objc_msgSend(v12, "initWithSectionProvider:", v13);
  _Block_release(v13);
  swift_release(v31);
  v15 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v14, v4, v6, v8, v10);

  v16 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView;
  v17 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView] = v15;

  v18 = *(void **)&v0[v16];
  if (!v18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v18, "setAutoresizingMask:", 18);
  v19 = *(void **)&v0[v16];
  if (!v19)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v20 = (void *)objc_opt_self(UIColor);
  v21 = v19;
  v22 = objc_msgSend(v20, "systemGroupedBackgroundColor");
  objc_msgSend(v21, "setBackgroundColor:", v22);

  v23 = *(void **)&v0[v16];
  if (!v23)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v23, "setKeyboardDismissMode:", 2);
  v24 = *(void **)&v0[v16];
  if (!v24)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v24, "setAllowsSelection:", 0);
  v25 = objc_msgSend(v0, "view");
  if (!v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!*(_QWORD *)&v0[v16])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v26 = v25;
  objc_msgSend(v25, "addSubview:");

  v27 = *(void **)&v0[v16];
  if (!v27)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v27, "setTag:", 204);
  v28 = *(void **)&v0[v16];
  if (v28)
  {
    v29 = objc_msgSend(v28, "keyboardLayoutGuide");
    objc_msgSend(v29, "setUsesBottomSafeArea:", 0);

    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_1001BE720()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v32;
  void *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  id v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v1 = sub_100006DF4((uint64_t *)&unk_1002986E0);
  v40 = *(_QWORD *)(v1 - 8);
  v2 = *(_QWORD *)(v40 + 64);
  v3 = __chkstk_darwin(v1);
  v39 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v3);
  v38 = (char *)&v35 - v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v35 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v35 - v9;
  v11 = swift_allocObject(&unk_100270CE0, 24, 7);
  *(_QWORD *)(v11 + 16) = v0;
  v12 = sub_10000A05C(0, (unint64_t *)&qword_100290938, UICollectionViewListCell_ptr);
  v13 = v0;
  v14 = v10;
  UICollectionView.CellRegistration.init(handler:)(sub_1001C9AD8, v11, v12, &type metadata for TranslationListController.TranslationContent);
  v15 = swift_allocObject(&unk_100270D08, 24, 7);
  *(_QWORD *)(v15 + 16) = v13;
  v16 = (char *)v13;
  v17 = v8;
  result = UICollectionView.CellRegistration.init(handler:)(sub_1001C9AE0, v15, v12, &type metadata for TranslationListController.TranslationContent);
  v37 = *(id *)&v16[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView];
  if (v37)
  {
    v19 = v40;
    v20 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v21 = v38;
    v36 = v14;
    v20(v38, v14, v1);
    v22 = v39;
    v20(v39, v17, v1);
    v23 = *(unsigned __int8 *)(v19 + 80);
    v24 = (v23 + 24) & ~v23;
    v25 = (v2 + v23 + v24) & ~v23;
    v26 = swift_allocObject(&unk_100270D30, v25 + v2, v23 | 7);
    *(_QWORD *)(v26 + 16) = v16;
    v27 = v26 + v24;
    v28 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
    v28(v27, v21, v1);
    v28(v26 + v25, v22, v1);
    v29 = swift_allocObject(&unk_100270D58, 32, 7);
    *(_QWORD *)(v29 + 16) = sub_1001C9B80;
    *(_QWORD *)(v29 + 24) = v26;
    v30 = objc_allocWithZone((Class)sub_100006DF4(&qword_1002986F0));
    v31 = v16;
    v32 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v37, sub_1000754CC, v29);
    v33 = *(void **)&v31[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource];
    *(_QWORD *)&v31[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource] = v32;

    v34 = *(void (**)(char *, uint64_t))(v19 + 8);
    v34(v17, v1);
    return ((uint64_t (*)(char *, uint64_t))v34)(v36, v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001BE9D4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  _QWORD *v32;
  __n128 v33;
  _QWORD v34[3];
  uint64_t v35;
  _QWORD v36[4];

  v34[2] = a4;
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006DF4((uint64_t *)&unk_100298720);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)v34 - v17;
  v19 = *a3;
  if (IndexPath.section.getter(v16))
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v20 = type metadata accessor for Logger(0);
    sub_10000F66C(v20, (uint64_t)qword_1002AA470);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.fault.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v24 = 134349056;
      v25 = IndexPath.section.getter(v24);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v35 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v24 + 4);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Malformed data: we are asked to configure a cell for a section that cannot exist: %{public}ld", v24, 0xCu);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }

  }
  else
  {
    v34[1] = a1;
    if (v19)
    {
      __chkstk_darwin(0);
      v34[-2] = v19;
      v34[-1] = v26;
      v27 = type metadata accessor for TranslationCardView(0);
      v28 = sub_100007D5C(&qword_100290948, type metadata accessor for TranslationCardView, (uint64_t)&unk_1001F6898);
      swift_retain(v19);
      v29 = UIHostingConfiguration<>.init(content:)(sub_1001C9C34, &v34[-4], v27, v28);
      v30 = static Edge.Set.all.getter(v29);
      UIHostingConfiguration.margins(_:_:)(v30, v11, 0.0);
      v31 = *(void (**)(char *, uint64_t))(v12 + 8);
      v31(v15, v11);
      v36[2] = v11;
      v36[3] = sub_100012334((unint64_t *)&qword_100298730, (uint64_t *)&unk_100298720, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
      v32 = sub_1000122F8(&v35);
      (*(void (**)(_QWORD *, char *, uint64_t))(v12 + 16))(v32, v18, v11);
      UICollectionViewCell.contentConfiguration.setter(&v35);
      v33 = swift_release(v19);
      ((void (*)(char *, uint64_t, __n128))v31)(v18, v11, v33);
    }
  }
}

uint64_t sub_1001BECF0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t (**v31)(uint64_t, uint64_t, Swift::UInt);
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  char v35;
  _QWORD v36[2];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  UUID.init()(v10);
  v11 = type metadata accessor for SharedTranslationOptions(0);
  v12 = sub_100007D5C(&qword_10028F510, type metadata accessor for SharedTranslationOptions, (uint64_t)&unk_1001F3EAC);
  v34 = EnvironmentObject.init()(v11, v12);
  v14 = v13;
  KeyPath = swift_getKeyPath(&unk_1001F70F0);
  v16 = (int *)type metadata accessor for TranslationCardView(0);
  v17 = (uint64_t *)(a3 + v16[9]);
  *v17 = KeyPath;
  v18 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
  v19 = type metadata accessor for CommittedTranslationViewModel(0);
  v20 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v21 = a2;
  Bindable<A>.init(wrappedValue:)(a1, v19, v20);
  v22 = (_QWORD *)(a3 + v16[6]);
  *v22 = a2;
  v22[1] = &off_100270988;
  v23 = (_QWORD *)(a3 + v16[7]);
  *v23 = 0;
  v23[1] = 0;
  v24 = (uint64_t *)(a3 + v16[8]);
  *v24 = v34;
  v24[1] = v14;
  v25 = (_QWORD *)(a3 + v16[10]);
  v26 = type metadata accessor for SceneContext(0);
  v27 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  *v25 = EnvironmentObject.init()(v26, v27);
  v25[1] = v28;
  v29 = a3 + v16[11];
  v35 = 0;
  State.init(wrappedValue:)(v36, &v35, &type metadata for Bool);
  v30 = v36[1];
  *(_BYTE *)v29 = v36[0];
  *(_QWORD *)(v29 + 8) = v30;
  v31 = (unint64_t (**)(uint64_t, uint64_t, Swift::UInt))(a3 + v16[12]);
  *v31 = sub_1001B8750;
  v31[1] = 0;
  v32 = v16[13];
  result = Image.init(systemName:)(0xD000000000000010, 0x80000001001F8F60);
  *(_QWORD *)(a3 + v32) = result;
  return result;
}

void sub_1001BEF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];

  v33 = a1;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_1002986F8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v33 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v33 - v19;
  if (IndexPath.section.getter(v18) == 1)
  {
    __chkstk_darwin(1);
    *(&v33 - 2) = a4;
    v21 = type metadata accessor for ComposeTranslationCardView(0);
    v22 = sub_100007D5C(&qword_100298700, type metadata accessor for ComposeTranslationCardView, (uint64_t)&unk_1001E8478);
    v23 = UIHostingConfiguration<>.init(content:)(sub_1001C9C24, &v33 - 4, v21, v22);
    v24 = static Edge.Set.all.getter(v23);
    UIHostingConfiguration.margins(_:_:)(v24, v10, 0.0);
    v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    v25(v14, v10);
    UIHostingConfiguration.animatedSizeInvalidationDisabled()(v10);
    v25(v17, v10);
    v35[2] = v10;
    v35[3] = sub_100012334(&qword_100298708, &qword_1002986F8, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
    v26 = sub_1000122F8(&v34);
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 16))(v26, v20, v10);
    UICollectionViewCell.contentConfiguration.setter(&v34);
    v25(v20, v10);
  }
  else
  {
    if (qword_10028A478 != -1)
      swift_once(&qword_10028A478, sub_100121100);
    v27 = type metadata accessor for Logger(0);
    sub_10000F66C(v27, (uint64_t)qword_1002AA470);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.fault.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v31 = 134349056;
      v32 = IndexPath.section.getter(v31);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v34 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v31 + 4);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Malformed data: we are asked to configure a cell for a section that cannot exist: %{public}ld", v31, 0xCu);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

  }
}

uint64_t sub_1001BF26C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  unint64_t (**v34)(void *, uint64_t, Swift::UInt);
  char v35;
  _QWORD v36[2];

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel);
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_service);
  *a2 = swift_getKeyPath(&unk_1001F70F0);
  v5 = sub_100006DF4((uint64_t *)&unk_100291470);
  swift_storeEnumTagMultiPayload(a2, v5, 0);
  v6 = type metadata accessor for ConversationContext(0);
  v7 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
  swift_retain(v3);
  swift_retain(v4);
  v8 = EnvironmentObject.init()(v6, v7);
  v10 = v9;
  v11 = type metadata accessor for SceneContext(0);
  v12 = sub_100007D5C((unint64_t *)&unk_100295500, type metadata accessor for SceneContext, (uint64_t)&unk_1001F3580);
  v13 = EnvironmentObject.init()(v11, v12);
  v15 = v14;
  v16 = (int *)type metadata accessor for ComposeTranslationCardView(0);
  v17 = (_QWORD *)((char *)a2 + v16[5]);
  *v17 = v8;
  v17[1] = v10;
  v18 = (_QWORD *)((char *)a2 + v16[6]);
  *v18 = v13;
  v18[1] = v15;
  v19 = (_QWORD *)((char *)a2 + v16[7]);
  v20 = type metadata accessor for ComposeTranslationViewModel(0);
  v21 = sub_100007D5C(&qword_10028D010, type metadata accessor for ComposeTranslationViewModel, (uint64_t)&unk_1001E8E78);
  *v19 = ObservedObject.init(wrappedValue:)(v3, v20, v21);
  v19[1] = v22;
  v23 = (_QWORD *)((char *)a2 + v16[8]);
  v24 = type metadata accessor for LanguagesService(0);
  v25 = sub_100007D5C((unint64_t *)&unk_100298710, (uint64_t (*)(uint64_t))&type metadata accessor for LanguagesService, (uint64_t)&protocol conformance descriptor for LanguagesService);
  *v23 = ObservedObject.init(wrappedValue:)(v4, v24, v25);
  v23[1] = v26;
  v27 = (char *)a2 + v16[9];
  *v27 = FocusState.init<>()() & 1;
  *((_QWORD *)v27 + 1) = v28;
  v27[16] = v29 & 1;
  v30 = (char *)a2 + v16[10];
  v35 = 0;
  State.init(wrappedValue:)(v36, &v35, &type metadata for Bool);
  v31 = v36[1];
  *v30 = v36[0];
  *((_QWORD *)v30 + 1) = v31;
  v36[0] = 0x400C000000000000;
  v32 = sub_100048210();
  result = ScaledMetric.init(wrappedValue:)(v36, &type metadata for CGFloat, v32);
  v34 = (unint64_t (**)(void *, uint64_t, Swift::UInt))((char *)a2 + v16[12]);
  *v34 = sub_10004660C;
  v34[1] = 0;
  return result;
}

uint64_t sub_1001BF4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (IndexPath.section.getter(a1))
  {
    v33 = 0;
    v13 = sub_10000A05C(0, (unint64_t *)&qword_100290938, UICollectionViewListCell_ptr);
    return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(a7, a2, &v33, v13, &type metadata for TranslationListController.TranslationContent);
  }
  else
  {
    v15 = *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore);
    if ((unint64_t)v15 >> 62)
      goto LABEL_23;
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore), 2);
    swift_bridgeObjectRetain(a4);
LABEL_5:
    v30 = a6;
    v31 = a2;
    v32 = v15;
    if (v16)
    {
      v17 = v15 & 0xC000000000000001;
      v18 = 4;
      do
      {
        a2 = v18 - 4;
        if (v17)
        {
          v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v15);
          a6 = v18 - 3;
          if (__OFADD__(a2, 1))
            goto LABEL_22;
        }
        else
        {
          v15 = *(_QWORD *)(v15 + 8 * v18);
          swift_retain(v15);
          a6 = v18 - 3;
          if (__OFADD__(a2, 1))
          {
LABEL_22:
            __break(1u);
LABEL_23:
            if (v15 < 0)
              v29 = v15;
            else
              v29 = v15 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n(v15, 2);
            swift_bridgeObjectRetain(a4);
            v16 = _CocoaArrayWrapper.endIndex.getter(v29);
            goto LABEL_5;
          }
        }
        KeyPath = swift_getKeyPath(&unk_1001F6F98);
        v33 = v15;
        v20 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, KeyPath, v20);
        v21 = objc_msgSend(*(id *)(v15 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        if (v22 == a3 && v24 == a4)
          goto LABEL_19;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, a3, a4, 0);
        swift_bridgeObjectRelease();
        if ((v26 & 1) != 0)
          goto LABEL_20;
        swift_release(v15);
        ++v18;
        v15 = v32;
      }
      while (a6 != v16);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = v15;
    v27 = sub_10000A05C(0, (unint64_t *)&qword_100290938, UICollectionViewListCell_ptr);
    swift_retain(v15);
    v14 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(v30, v31, &v33, v27, &type metadata for TranslationListController.TranslationContent);
    swift_release_n(v15, 2);
  }
  return v14;
}

uint64_t sub_1001BF784(int a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  __n128 v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  __n128 v80;
  void (*v81)(char *, uint64_t, __n128);
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  int v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;

  v2 = v1;
  v4 = sub_100006DF4(&qword_1002986B8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v87 - v9;
  v11 = sub_1001C9A38();
  NSDiffableDataSourceSnapshot.init()(&type metadata for TranslationListController.TranslationSection, &type metadata for String, v11, &protocol witness table for String);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100262118);
  v12 = sub_100006DF4(&qword_10028A6C0);
  v13 = swift_allocObject(v12, 48, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1001E64F0;
  v14 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_entryCardStaticIdentifier + 8];
  *(_QWORD *)(v13 + 32) = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_entryCardStaticIdentifier];
  *(_QWORD *)(v13 + 40) = v14;
  LOBYTE(v96) = 1;
  swift_bridgeObjectRetain(v14);
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v13, &v96, v4);
  swift_bridgeObjectRelease();
  v94 = v2;
  v91 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore;
  v15 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore];
  if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(*(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore], 2);
    v16 = (uint64_t)sub_1001C67E4(v15, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001C84FC);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v15, 2);
  }
  v96 = v16;
  sub_1001C64F8(&v96);
  v88 = a1;
  v89 = v8;
  v90 = v5;
  v93 = v10;
  swift_bridgeObjectRelease();
  v17 = v96;
  v92 = v4;
  if (v96 < 0 || (v96 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v96);
    v18 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_release(v17);
    v19 = v94;
    if (v18)
      goto LABEL_7;
LABEL_20:
    swift_release(v17);
    v28 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(v96 + 16);
  v19 = v94;
  if (!v18)
    goto LABEL_20;
LABEL_7:
  v96 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1001DA1E8(0, v18 & ~(v18 >> 63), 0);
  if (v18 < 0)
  {
    __break(1u);
    goto LABEL_80;
  }
  v20 = 0;
  do
  {
    if ((v17 & 0xC000000000000001) != 0)
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v17);
    }
    else
    {
      v21 = *(_QWORD *)(v17 + 8 * v20 + 32);
      swift_retain(v21);
    }
    KeyPath = swift_getKeyPath(&unk_1001F6F98);
    v95[0] = v21;
    v23 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v95, KeyPath, v23);
    v24 = objc_msgSend(*(id *)(v21 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_release(v21);

    v28 = (_QWORD *)v96;
    if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
    {
      sub_1001DA1E8(0, v28[2] + 1, 1);
      v28 = (_QWORD *)v96;
    }
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= v29 >> 1)
    {
      sub_1001DA1E8(v29 > 1, v30 + 1, 1);
      v28 = (_QWORD *)v96;
    }
    ++v20;
    v28[2] = v30 + 1;
    v31 = &v28[2 * v30];
    v31[4] = v25;
    v31[5] = v27;
  }
  while (v18 != v20);
  swift_release(v17);
  v19 = v94;
LABEL_21:
  LOBYTE(v96) = 0;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v28, &v96, v92);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)((char *)v19 + v91);
  if ((unint64_t)v17 >> 62)
    goto LABEL_74;
  v33 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)((char *)v19 + v91), 2);
  v34 = v19;
  while (v33)
  {
    v19 = (_QWORD *)((char *)v19
                   + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pendingDictionaryModeIdentifier);
    v35 = 4;
    while (1)
    {
      v36 = v35 - 4;
      if ((v17 & 0xC000000000000001) == 0)
        break;
      v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(v35 - 4, v17);
      v38 = v35 - 3;
      if (__OFADD__(v36, 1))
        goto LABEL_72;
LABEL_31:
      v39 = swift_getKeyPath(&unk_1001F6F98);
      v96 = v37;
      v40 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v96, v39, v40);
      v41 = objc_msgSend(*(id *)(v37 + 72), "identifier", swift_release(v39).n128_f64[0]);
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      v45 = v19[1];
      if (v45)
      {
        if (v42 == *v19 && v45 == v44)
        {
          v19 = v94;

          swift_bridgeObjectRelease();
          swift_release(v37);
          v87 = 1;
          goto LABEL_40;
        }
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, *v19, v45, 0);
        swift_release(v37);
        swift_bridgeObjectRelease();
        if ((v47 & 1) != 0)
        {
          v19 = v94;

          v87 = 1;
          goto LABEL_40;
        }
      }
      else
      {
        swift_release(v37);
        swift_bridgeObjectRelease();
      }
      ++v35;
      if (v38 == v33)
      {
        v19 = v94;
        goto LABEL_39;
      }
    }
    v37 = *(_QWORD *)(v17 + 8 * v35);
    swift_retain(v37);
    v38 = v35 - 3;
    if (!__OFADD__(v36, 1))
      goto LABEL_31;
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    if (v17 < 0)
      v83 = v17;
    else
      v83 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v17, 2);
    v84 = v19;
    v33 = _CocoaArrayWrapper.endIndex.getter(v83);
  }
LABEL_39:

  v87 = 0;
LABEL_40:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = (uint64_t)v19
      + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode;
  v48 = v93;
  if (!*(_QWORD *)((char *)v19
                  + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                  + 8))
  {
    v64 = 0;
    goto LABEL_63;
  }
  v17 = *(_QWORD *)((char *)v19 + v91);
  if ((unint64_t)v17 >> 62)
  {
LABEL_80:
    if (v17 < 0)
      v85 = v17;
    else
      v85 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v17, 2);
    v86 = v19;
    v49 = _CocoaArrayWrapper.endIndex.getter(v85);
    if (v49)
      goto LABEL_43;
LABEL_61:

    v64 = 1;
    goto LABEL_62;
  }
  v49 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)((char *)v19 + v91), 2);
  v50 = v19;
  if (!v49)
    goto LABEL_61;
LABEL_43:
  v19 = (_QWORD *)(v17 & 0xC000000000000001);
  v51 = 4;
  while (1)
  {
    v52 = v51 - 4;
    if (v19)
    {
      v53 = specialized _ArrayBuffer._getElementSlowPath(_:)(v51 - 4, v17);
      v54 = v51 - 3;
      if (__OFADD__(v52, 1))
        goto LABEL_73;
    }
    else
    {
      v53 = *(_QWORD *)(v17 + 8 * v51);
      swift_retain(v53);
      v54 = v51 - 3;
      if (__OFADD__(v52, 1))
        goto LABEL_73;
    }
    v55 = swift_getKeyPath(&unk_1001F6F98);
    v96 = v53;
    v56 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v96, v55, v56);
    v57 = objc_msgSend(*(id *)(v53 + 72), "identifier", swift_release(v55).n128_f64[0]);
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    v61 = *(_QWORD *)(v15 + 8);
    if (v61)
      break;
    swift_release(v53);
    swift_bridgeObjectRelease();
LABEL_45:
    ++v51;
    if (v54 == v49)
    {
      v19 = v94;
      goto LABEL_61;
    }
  }
  if (v58 != *(_QWORD *)v15 || v61 != v60)
  {
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v60, *(_QWORD *)v15, v61, 0);
    swift_release(v53);
    swift_bridgeObjectRelease();
    if ((v63 & 1) != 0)
    {
      v19 = v94;

      v64 = 0;
      goto LABEL_62;
    }
    goto LABEL_45;
  }
  v19 = v94;

  swift_bridgeObjectRelease();
  swift_release(v53);
  v64 = 0;
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = v93;
LABEL_63:
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v65 = type metadata accessor for Logger(0);
  v66 = sub_10000F66C(v65, (uint64_t)qword_1002AA470);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v69 = 134217984;
    swift_beginAccess(v48, v95, 0, 0);
    v70 = *(_QWORD *)(NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v92) + 16);
    swift_bridgeObjectRelease();
    v96 = v70;
    v19 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v69 + 4);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Snapshot identifiers count: %ld", v69, 0xCu);
    swift_slowDealloc(v69, -1, -1);
  }

  v72 = *(void **)((char *)v19 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource);
  if (v72)
  {
    swift_beginAccess(v48, &v96, 0, 0);
    v73 = v19;
    v75 = v89;
    v74 = v90;
    v76 = v92;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v89, v48, v92);
    v77 = swift_allocObject(&unk_1002709C0, 24, 7);
    swift_unknownObjectWeakInit(v77 + 16, v73);
    v78 = swift_allocObject(&unk_100270CB8, 27, 7);
    *(_QWORD *)(v78 + 16) = v77;
    *(_BYTE *)(v78 + 24) = v88;
    *(_BYTE *)(v78 + 25) = v87;
    *(_BYTE *)(v78 + 26) = v64;
    v79 = v72;
    swift_retain(v77);
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v75, 1, sub_1001C9AA0, v78);

    v80 = swift_release(v78);
    v81 = *(void (**)(char *, uint64_t, __n128))(v74 + 8);
    v81(v75, v76, v80);
    v71 = swift_release(v77);
  }
  else
  {
    v81 = *(void (**)(char *, uint64_t, __n128))(v90 + 8);
    v76 = v92;
  }
  return ((uint64_t (*)(char *, uint64_t, __n128))v81)(v48, v76, v71);
}

uint64_t sub_1001C00F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v4 = sub_100006DF4(&qword_1002948B0);
  v5 = __chkstk_darwin(v4);
  v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v37 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v37 - v14;
  __chkstk_darwin(v13);
  v39 = (char *)&v37 - v16;
  v17 = *a1;
  v18 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F6F98);
  v40 = v17;
  v20 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v40, KeyPath, v20);
  v21 = objc_msgSend(*(id *)(v17 + 72), "creationDate", swift_release(KeyPath).n128_f64[0]);
  if (v21)
  {
    v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v23(v8, v15, v9);
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v24(v8, 0, 1, v9);
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if ((_DWORD)v25 != 1)
    {
      v23(v39, v8, v9);
      goto LABEL_6;
    }
  }
  else
  {
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v25 = v24(v8, 1, 1, v9);
  }
  static Date.now.getter(v25);
  sub_10000A020((uint64_t)v8, &qword_1002948B0);
LABEL_6:
  v26 = swift_getKeyPath(&unk_1001F6F98);
  v40 = v18;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v40, v26, v20);
  v27 = objc_msgSend(*(id *)(v18 + 72), "creationDate", swift_release(v26).n128_f64[0]);
  if (!v27)
  {
    v30 = (uint64_t)v38;
    v31 = v24(v38, 1, 1, v9);
    v32 = v37;
    goto LABEL_10;
  }
  v28 = v27;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v29 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v30 = (uint64_t)v38;
  v29(v38, v15, v9);
  v24((char *)v30, 0, 1, v9);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v30, 1, v9);
  v32 = v37;
  if ((_DWORD)v31 == 1)
  {
LABEL_10:
    static Date.now.getter(v31);
    sub_10000A020(v30, &qword_1002948B0);
    goto LABEL_11;
  }
  v29(v37, (char *)v30, v9);
LABEL_11:
  v33 = v39;
  v34 = static Date.< infix(_:_:)(v39, v32);
  v35 = *(void (**)(char *, uint64_t))(v10 + 8);
  v35(v32, v9);
  v35(v33, v9);
  return v34 & 1;
}

void sub_1001C045C(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v7;
  uint64_t Strong;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  char *v27;
  uint64_t v28;
  char v29[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (char *)Strong;
    if (a2)
    {
      if (a2 == 1)
        sub_1001BD86C(1);
      else
        sub_1001BDA30(1);
    }
    v10 = &v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pendingDictionaryModeIdentifier];
    v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pendingDictionaryModeIdentifier
                       + 8];
    if (v11 && (a3 & 1) != 0)
    {
      v12 = *(_QWORD *)v10;
      v13 = qword_10028A420;
      swift_bridgeObjectRetain(*(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pendingDictionaryModeIdentifier
                                            + 8]);
      if (v13 != -1)
        swift_once(&qword_10028A420, sub_100120F74);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10000F66C(v14, (uint64_t)qword_1002AA368);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Entering dictionary mode on new translation now that the list has updated", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      v19 = &v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
      v20 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
      v21 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                         + 8];
      *(_QWORD *)v19 = v12;
      *((_QWORD *)v19 + 1) = v11;
      if (!v21
        || (v12 != v20 || v11 != v21) && (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v20, v21, 0) & 1) == 0)
      {
        sub_1001BB210();
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;

      swift_bridgeObjectRelease();
    }
    else
    {
      if ((a4 & 1) == 0)
        goto LABEL_25;
      if (qword_10028A420 != -1)
        swift_once(&qword_10028A420, sub_100120F74);
      v22 = type metadata accessor for Logger(0);
      v23 = sub_10000F66C(v22, (uint64_t)qword_1002AA368);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Dismissing Dictionary Mode because the card in Dictionary Mode is no longer shown", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      v27 = &v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
      v28 = *(_QWORD *)&v9[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                         + 8];
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      if (v28)
      {
        sub_1001BB210();

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_25:

      }
    }
  }
}

uint64_t sub_1001C0738(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t *v55;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint8_t *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v2 = v1;
  v4 = type metadata accessor for GenderTipManager.Registration(0);
  __chkstk_darwin(v4);
  v69 = (uint64_t *)((char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = type metadata accessor for CommittedTranslationViewModel(0);
  v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel];
  v7 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel;
  v71 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel;
  v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
  sub_100023AB0(v8 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store, (uint64_t)&v73);
  v9 = *(_QWORD *)(v6 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_ttsManager);
  v67 = v9;
  v70 = a1;
  swift_retain(v8);
  v10 = objc_msgSend(v2, "traitCollection", swift_retain(v9).n128_f64[0]);
  v11 = sub_1000AEBCC();
  UITraitCollection.subscript.getter(&v72, &type metadata for GenderTipManagerTrait, &type metadata for GenderTipManagerTrait, v11);

  v12 = v72;
  v13 = *(void **)(*(_QWORD *)&v2[v7]
                 + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_dictionaryManager);
  v14 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v2);
  v15 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v2);
  v17 = v75;
  v16 = v76;
  v18 = sub_1000AEB60((uint64_t)&v73, v75);
  v19 = v13;
  swift_retain(v14);
  swift_retain(v15);
  v65 = v16;
  v20 = v2;
  *((_QWORD *)&v64 + 1) = v14;
  *(_QWORD *)&v64 = sub_1001C99AC;
  v21 = v18;
  v22 = v67;
  v23 = v13;
  v24 = v70;
  v25 = sub_10003E5E0(v70, v8, v21, v67, 0, 0, v12, v23, v64, (uint64_t)sub_1001C99B4, v15, v68, v17, v65);

  swift_release(v8);
  swift_release(v22);
  v26 = v12;
  v27 = v71;
  swift_release(v26);

  swift_release(v14);
  swift_release(v15);
  sub_100009C08(&v73);
  swift_release(v14);
  swift_release(v15);
  v28 = *(_QWORD *)&v2[v27];
  KeyPath = swift_getKeyPath(&unk_1001F7030);
  v30 = swift_getKeyPath(&unk_1001F7058);
  swift_retain(v28);
  static Published.subscript.getter(&v73, v31, KeyPath);
  swift_release(v28);
  swift_release(KeyPath);
  swift_release(v30);
  v33 = v74;
  if (v74)
  {
    v34 = v73;
    v36 = dispatch thunk of PersistedTranslation.displaySourceText.getter(v32);
    if (v34 == v36 && v33 == v35)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v33, v36, v35, 0);
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {
        if (qword_10028A420 != -1)
          swift_once(&qword_10028A420, sub_100120F74);
        v57 = type metadata accessor for Logger(0);
        sub_10000F66C(v57, (uint64_t)qword_1002AA368);
        swift_bridgeObjectRetain(v33);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.info.getter(v59);
        if (os_log_type_enabled(v59, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc(12, -1);
          v62 = swift_slowAlloc(32, -1);
          v73 = v62;
          *(_DWORD *)v61 = 136642819;
          swift_bridgeObjectRetain(v33);
          v72 = sub_1001A7FE4(v34, v33, &v73);
          v24 = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v61 + 4);
          swift_bridgeObjectRelease_n(v33, 3);
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Compose card pending dictionary item source text does not match new translation, clearing request to go into Dictionary Mode; pending source text: %{sensitive}s",
            v61,
            0xCu);
          swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v62, -1, -1);
          v63 = v61;
          v27 = v71;
          swift_slowDealloc(v63, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v33, 2);
        }
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10000F66C(v38, (uint64_t)qword_1002AA368);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.info.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Compose card pending dictionary item source text matches newly added translation source text; saving the identif"
        "ier to go into Dictionary Mode when it's on screen",
        v42,
        2u);
      swift_slowDealloc(v42, -1, -1);
    }

    v43 = swift_getKeyPath(&unk_1001F6F98);
    v73 = v25;
    v44 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v73, v43, v44);
    v45 = objc_msgSend(*(id *)(v25 + 72), "identifier", swift_release(v43).n128_f64[0]);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v49 = (uint64_t *)&v20[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pendingDictionaryModeIdentifier];
    *v49 = v46;
    v49[1] = v48;
    swift_bridgeObjectRelease();
LABEL_11:
    v50 = *(_QWORD *)&v20[v27];
    v51 = swift_getKeyPath(&unk_1001F7030);
    v52 = swift_getKeyPath(&unk_1001F7058);
    v73 = 0;
    v74 = 0;
    swift_retain(v50);
    static Published.subscript.setter(&v73, v50, v51, v52);
  }
  v53 = *(_QWORD *)(*(_QWORD *)&v20[v27]
                  + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_genderTipManager);
  v54 = v24;
  swift_retain(v53);
  v55 = v69;
  sub_1000CC8A4(v54, 0, v69);
  sub_1000CCD24(v55);
  sub_10003ED24((uint64_t)v55);
  swift_release(v53);
  if (*(_QWORD *)&v20[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                     + 8])
    sub_1001C2614(v25);
  return v25;
}

void sub_1001C0DC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t Strong;
  void *v17;
  _BYTE v18[24];

  v15 = a8 + 16;
  swift_beginAccess(a8 + 16, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v15);
  if (Strong)
  {
    v17 = (void *)Strong;
    sub_1001C0E68(a1, a2, a3, a4, a5, a6, a7);

  }
}

void sub_1001C0E68(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t KeyPath;
  uint64_t (*v19)();
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  NSString *v51;
  NSString *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  int v80;
  _BYTE v81[4];
  int v82;
  uint64_t v83;
  id v84;
  NSObject *v85;
  id v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSRect v92;

  v87 = a6;
  v13 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v81[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == enum case for DisambiguationResultModel.TextLocation.source(_:))
  {
    KeyPath = swift_getKeyPath(&unk_1001F70C8);
    __chkstk_darwin(KeyPath);
    *(_QWORD *)&v81[-32] = a1;
    *(_QWORD *)&v81[-24] = a4;
    v79 = a5;
    LOBYTE(v80) = 0;
    v91 = a1;
    sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    v19 = sub_1001C99F8;
    goto LABEL_5;
  }
  if (v17 == enum case for DisambiguationResultModel.TextLocation.target(_:))
  {
    KeyPath = swift_getKeyPath(&unk_1001F70A0);
    __chkstk_darwin(KeyPath);
    *(_QWORD *)&v81[-32] = a1;
    *(_QWORD *)&v81[-24] = a4;
    v79 = a5;
    LOBYTE(v80) = 0;
    v91 = a1;
    sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    v19 = sub_1001C99D4;
LABEL_5:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v91, KeyPath, v19);
    swift_release(KeyPath);
    v20 = v88;
    if (!a3)
    {
      if (qword_10028A420 != -1)
        swift_once(&qword_10028A420, sub_100120F74);
      v60 = type metadata accessor for Logger(0);
      v61 = sub_10000F66C(v60, (uint64_t)qword_1002AA368);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.info.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Not moving popover after setting new word because there's no UITextView to get the location from", v64, 2u);
        swift_slowDealloc(v64, -1, -1);
      }

      goto LABEL_50;
    }
    v21 = a3;
    v22 = objc_msgSend(v20, "presentedViewController");
    if (v22)
    {
      v23 = v22;
      v24 = objc_msgSend(v22, "popoverPresentationController");

      if (v24)
      {
        objc_msgSend(v24, "setSourceView:", 0);

      }
    }
    v25 = objc_msgSend(v20, "presentedViewController");
    if (v25)
    {
      v26 = v25;
      v27 = objc_msgSend(v25, "popoverPresentationController");

      if (v27)
      {
        objc_msgSend(v27, "setSourceView:", v21);

      }
    }
    v28 = objc_msgSend(v20, "presentedViewController");
    if (v28)
    {
      v29 = v28;
      v30 = objc_msgSend(v28, "popoverPresentationController");

      if (v30)
      {
        objc_msgSend(v30, "setPermittedArrowDirections:", 3);

      }
    }
    v31 = objc_msgSend(v21, "beginningOfDocument");
    v32 = objc_msgSend(v21, "positionFromPosition:offset:", v31, a4);
    if (v32)
    {
      v33 = v32;
      v34 = objc_msgSend(v21, "positionFromPosition:offset:", v32, a5);
      if (v34)
      {
        v35 = v34;
        v36 = objc_msgSend(v21, "textRangeFromPosition:toPosition:", v33, v34);
        if (v36)
        {
          v84 = v36;
          objc_msgSend(v21, "firstRectForRange:", v36);
          v38 = v37;
          v40 = v39;
          v42 = v41;
          v44 = v43;
          if (qword_10028A420 != -1)
            swift_once(&qword_10028A420, sub_100120F74);
          v86 = v31;
          v45 = type metadata accessor for Logger(0);
          sub_10000F66C(v45, (uint64_t)qword_1002AA368);
          v46 = swift_bridgeObjectRetain_n(a7, 2);
          v47 = Logger.logObject.getter(v46);
          v48 = static os_log_type_t.info.getter(v47);
          v49 = v48;
          v85 = v47;
          if (os_log_type_enabled(v47, v48))
          {
            v50 = swift_slowAlloc(22, -1);
            v83 = swift_slowAlloc(64, -1);
            v91 = v83;
            *(_DWORD *)v50 = 136446467;
            v92.origin.x = v38;
            v92.origin.y = v40;
            v92.size.width = v42;
            v92.size.height = v44;
            v51 = NSStringFromRect(v92);
            v82 = v49;
            v52 = v51;
            v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
            v55 = v54;

            v89 = sub_1001A7FE4(v53, v55, &v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v50 + 4);
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 12) = 2085;
            if (a7)
              v56 = v87;
            else
              v56 = 0x3E6C696E3CLL;
            if (a7)
              v57 = a7;
            else
              v57 = 0xE500000000000000;
            swift_bridgeObjectRetain(a7);
            v89 = sub_1001A7FE4(v56, v57, &v91);
            v20 = v88;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v50 + 14);
            swift_bridgeObjectRelease_n(a7, 2);
            swift_bridgeObjectRelease();
            v58 = v85;
            _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v82, "Setting popover rect to %{public}s for word %{sensitive}s", (uint8_t *)v50, 0x16u);
            v59 = v83;
            swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v59, -1, -1);
            swift_slowDealloc(v50, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(a7, 2);
          }
          v77 = objc_msgSend(v20, "presentedViewController");
          v78 = objc_msgSend(v77, "popoverPresentationController");

          objc_msgSend(v78, "setSourceRect:", v38, v40, v42, v44);
          goto LABEL_49;
        }

      }
      else
      {
        v35 = v33;
      }

    }
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v65 = type metadata accessor for Logger(0);
    sub_10000F66C(v65, (uint64_t)qword_1002AA368);
    v66 = swift_bridgeObjectRetain_n(a7, 2);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = swift_slowAlloc(22, -1);
      v86 = v31;
      v70 = v69;
      v71 = swift_slowAlloc(64, -1);
      v91 = v71;
      *(_DWORD *)v70 = 136446467;
      v72 = _NSRange.description.getter(a4, a5);
      v89 = sub_1001A7FE4(v72, v73, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v70 + 4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v70 + 12) = 2085;
      if (a7)
        v74 = v87;
      else
        v74 = 0x3E6C696E3CLL;
      if (a7)
        v75 = a7;
      else
        v75 = 0xE500000000000000;
      swift_bridgeObjectRetain(a7);
      v76 = v74;
      v20 = v88;
      v89 = sub_1001A7FE4(v76, v75, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v70 + 14);
      swift_bridgeObjectRelease_n(a7, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed to lookup range %{public}s in text view; word: %{sensitive}s",
        (uint8_t *)v70,
        0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      goto LABEL_50;
    }

    swift_bridgeObjectRelease_n(a7, 2);
LABEL_49:

LABEL_50:
    sub_1001C5170(v87, a7, (uint64_t)v20);
    return;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001002026A0, "SequoiaTranslator/TranslationListController.swift", 49, 2, 678, 0);
  __break(1u);
}

void sub_1001C17BC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    sub_1001C1828(a1, a2 & 1);

  }
}

void sub_1001C1828(uint64_t a1, char a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BYTE *v40;
  uint8_t *v41;
  uint8_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BYTE *v49;
  uint8_t *v50;
  uint8_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD, uint64_t, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  __n128 v78;
  id v79;
  id v80;
  id v81;
  void *v82;
  uint64_t v83;
  void *v84;
  double *v85;
  void *v86;
  double v87;
  double v88;
  double v89;
  double v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  id v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint8_t *v102;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MaxY;
  double v109;
  id v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  id v119;
  Class isa;
  id v121;
  void *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  id v128;
  Class v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  id v139;
  id v140;
  uint64_t v141;
  char *v142;
  _BYTE *v143;
  _QWORD v144[3];
  CGRect v145;
  CGRect v146;

  v3 = v2;
  v6 = type metadata accessor for DisambiguationResultModel.TextLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v10);
  v12 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v34 = &v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
    v35 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                       + 8];
    *v34 = 0;
    v34[1] = 0;
    if (v35)
    {
      sub_1001BB210();
      swift_bridgeObjectRelease();
    }
    return;
  }
  v141 = v7;
  KeyPath = swift_getKeyPath(&unk_1001F7078);
  v144[0] = a1;
  v14 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v144, KeyPath, v14);
  swift_release(KeyPath);
  v15 = *(void **)(a1 + 88);
  if (!v15)
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_10000F66C(v36, (uint64_t)qword_1002AA368);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = v3;
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Can't find resultModel so unable to present dictionary", v41, 2u);
      v42 = v41;
      v3 = v40;
      swift_slowDealloc(v42, -1, -1);
    }

    v43 = &v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
    v44 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                       + 8];
    *v43 = 0;
    v43[1] = 0;
    if (!v44)
      return;
    sub_1001BB210();
LABEL_60:
    swift_bridgeObjectRelease();
    return;
  }
  v16 = type metadata accessor for DictionaryViewController(0);
  v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v16));
  v18 = v15;
  v19 = objc_msgSend(v17, "init");
  v20 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController;
  v21 = *(void **)&v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController];
  *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController] = v19;

  v22 = *(void **)&v3[v20];
  if (!v22)
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_10000F66C(v45, (uint64_t)qword_1002AA368);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = v3;
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to create DictionaryViewController; exiting dictionary mode",
        v50,
        2u);
      v51 = v50;
      v3 = v49;
      swift_slowDealloc(v51, -1, -1);
    }

    v52 = &v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
    v53 = *(_QWORD *)&v3[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                       + 8];
    *v52 = 0;
    v52[1] = 0;
    if (!v53)
    {

      return;
    }
    sub_1001BB210();

    goto LABEL_60;
  }
  v140 = v18;
  v23 = (void *)objc_opt_self(UIApplication);
  v142 = v22;
  v24 = objc_msgSend(v23, "sharedApplication");
  objc_msgSend(v24, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, v3, 0);

  v25 = swift_getKeyPath(&unk_1001F6F98);
  v144[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v144, v25, v14);
  v26 = objc_msgSend(*(id *)(a1 + 72), "identifier", swift_release(v25).n128_f64[0]);
  v27 = v3;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v30 = v29;

  v143 = v27;
  v31 = (uint64_t *)&v27[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
  v32 = *(_QWORD *)&v27[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
  v33 = *(_QWORD *)&v27[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                      + 8];
  *v31 = v28;
  v31[1] = v30;
  v138 = v31;
  if (v30)
  {
    if (v33
      && (v28 == v32 && v33 == v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v33, 0) & 1) != 0))
    {
      goto LABEL_25;
    }
  }
  else if (!v33)
  {
    goto LABEL_26;
  }
  sub_1001BB210();
LABEL_25:
  swift_bridgeObjectRelease();
LABEL_26:
  v54 = swift_getKeyPath(&unk_1001F6F98);
  v144[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v144, v54, v14);
  swift_release(v54);
  v55 = *(id *)(a1 + 72);
  dispatch thunk of PersistedTranslation.sourceLocale.getter(v55);
  v56 = type metadata accessor for Locale(0);
  v57 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
  v57(v12, 0, 1, v56);
  v58 = &v142[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale];
  v59 = v142;
  swift_beginAccess(&v142[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_sourceLocale], v144, 33, 0);
  sub_1001A6BD4((uint64_t)v12, (uint64_t)v58);
  v60 = swift_endAccess(v144);
  v139 = v55;
  dispatch thunk of PersistedTranslation.targetLocale.getter(v60);
  v57(v12, 0, 1, v56);
  v61 = (uint64_t)&v59[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale];
  swift_beginAccess(&v59[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_targetLocale], v144, 33, 0);
  sub_1001A6BD4((uint64_t)v12, v61);
  swift_endAccess(v144);
  v62 = &v59[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_delegate];
  *((_QWORD *)v62 + 1) = &off_1002709A0;
  swift_unknownObjectWeakAssign(v62, v143);
  v63 = enum case for DisambiguationResultModel.TextLocation.target(_:);
  v64 = v141;
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v141 + 104);
  v65(v9, enum case for DisambiguationResultModel.TextLocation.target(_:), v6);
  v66 = dispatch thunk of DisambiguationResultModel.rangeOfFirstWordForDictionary(inLocation:)(v9);
  v68 = v67;
  v141 = *(_QWORD *)(v64 + 8);
  v69 = ((uint64_t (*)(char *, uint64_t))v141)(v9, v6);
  v70 = (void *)dispatch thunk of DisambiguationResultModel.targetAttributedText.getter(v69);
  v71 = objc_msgSend(v70, "attributedSubstringFromRange:", v66, v68);

  v72 = objc_msgSend(v71, "string");
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
  v75 = v74;

  v65(v9, v63, v6);
  v76 = v73;
  v77 = v143;
  sub_1001C0E68(a1, (uint64_t)v9, 0, v66, v68, v76, v75);
  v78 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, __n128))v141)(v9, v6, v78);
  v79 = objc_allocWithZone((Class)UINavigationController);
  v80 = objc_msgSend(v79, "initWithRootViewController:", v142);
  objc_msgSend(v80, "setModalPresentationStyle:", 7);
  v81 = objc_msgSend(v80, "presentationController");
  if (v81)
  {
    v82 = v81;
    objc_msgSend(v81, "setDelegate:", v77);

  }
  v83 = sub_1001C5290(a1);
  if (!v83)
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v130 = type metadata accessor for Logger(0);
    v131 = sub_10000F66C(v130, (uint64_t)qword_1002AA368);
    v132 = Logger.logObject.getter(v131);
    v133 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v132, v133))
    {
      v134 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v134 = 0;
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "Failed to find cell for viewModel that will get Dictionary Mode, so can't display popover", v134, 2u);
      swift_slowDealloc(v134, -1, -1);
    }

    v135 = v138;
    v136 = v138[1];
    *v138 = 0;
    v135[1] = 0;
    if (v136)
    {
      sub_1001BB210();

      swift_bridgeObjectRelease();
    }
    else
    {

    }
    return;
  }
  v84 = (void *)v83;
  v85 = (double *)&v77[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryHighlightRect];
  if ((v77[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryHighlightRect + 32] & 1) != 0
    || (v86 = *(void **)&v77[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryTextView]) == 0)
  {
    if (qword_10028A420 != -1)
      swift_once(&qword_10028A420, sub_100120F74);
    v97 = type metadata accessor for Logger(0);
    v98 = sub_10000F66C(v97, (uint64_t)qword_1002AA368);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.info.getter(v99);
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v101 = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Presenting dictionary but don't yet have source rect or text view; presenting from the bottom middle of the card"
        ", and it should reposition soon when the source rect comes in",
        v101,
        2u);
      v102 = v101;
      v77 = v143;
      swift_slowDealloc(v102, -1, -1);
    }

    v91 = objc_msgSend(v84, "contentView");
    objc_msgSend(v91, "frame");
    x = v145.origin.x;
    y = v145.origin.y;
    width = v145.size.width;
    height = v145.size.height;
    MidX = CGRectGetMidX(v145);
    v146.origin.x = x;
    v146.origin.y = y;
    v146.size.width = width;
    v146.size.height = height;
    MaxY = CGRectGetMaxY(v146);
    v109 = CGSizeZero.height;
    v110 = objc_msgSend(v80, "popoverPresentationController");
    if (v110)
    {
      v111 = v110;
      objc_msgSend(v110, "setSourceView:", v91);

    }
    v112 = objc_msgSend(v80, "popoverPresentationController");
    objc_msgSend(v112, "setSourceRect:", MidX, MaxY, CGSizeZero.width, v109);

    v113 = objc_msgSend(v80, "popoverPresentationController");
    if (!v113)
      goto LABEL_44;
    v96 = v113;
    objc_msgSend(v113, "setPermittedArrowDirections:", 1);
  }
  else
  {
    v88 = v85[2];
    v87 = v85[3];
    v90 = *v85;
    v89 = v85[1];
    v91 = v86;
    v92 = objc_msgSend(v80, "popoverPresentationController");
    if (v92)
    {
      v93 = v92;
      objc_msgSend(v92, "setSourceView:", v91);

    }
    v94 = objc_msgSend(v80, "popoverPresentationController");
    objc_msgSend(v94, "setSourceRect:", v90, v89, v88, v87);

    v95 = objc_msgSend(v80, "popoverPresentationController");
    if (!v95)
      goto LABEL_44;
    v96 = v95;
    objc_msgSend(v95, "setPermittedArrowDirections:", 3);
  }

LABEL_44:
  v114 = objc_msgSend(v80, "popoverPresentationController");
  if (v114)
  {
    v115 = v114;
    v116 = sub_100006DF4((uint64_t *)&unk_10028C060);
    v117 = swift_allocObject(v116, 40, 7);
    *(_OWORD *)(v117 + 16) = xmmword_1001EA980;
    v118 = *(void **)&v77[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView];
    if (!v118)
    {
      __break(1u);
      return;
    }
    *(_QWORD *)(v117 + 32) = v118;
    v144[0] = v117;
    specialized Array._endMutation()(v117);
    sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
    v119 = v118;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v115, "setPassthroughViews:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
  v121 = objc_msgSend(v80, "popoverPresentationController");
  if (v121)
  {
    v122 = v121;
    v123 = objc_msgSend(v121, "adaptiveSheetPresentationController");

    if (v123)
    {
      objc_msgSend(v123, "setDelegate:", v77);
      objc_msgSend(v123, "_setShouldDismissWhenTappedOutside:", 0);
      v124 = sub_100006DF4((uint64_t *)&unk_10028C060);
      v125 = swift_allocObject(v124, 48, 7);
      *(_OWORD *)(v125 + 16) = xmmword_1001E76E0;
      v126 = (void *)objc_opt_self(UISheetPresentationControllerDetent);
      *(_QWORD *)(v125 + 32) = objc_msgSend(v126, "mediumDetent");
      v127 = v126;
      v77 = v143;
      v128 = objc_msgSend(v127, "largeDetent");
      *(_QWORD *)(v125 + 40) = v128;
      v144[0] = v125;
      specialized Array._endMutation()(v128);
      sub_10000A05C(0, &qword_1002986B0, UISheetPresentationControllerDetent_ptr);
      v129 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v123, "setDetents:", v129, swift_bridgeObjectRelease().n128_f64[0]);

      objc_msgSend(v123, "setLargestUndimmedDetentIdentifier:", UISheetPresentationControllerDetentIdentifierMedium);
      objc_msgSend(v123, "setPrefersGrabberVisible:", 1);

    }
  }
  objc_msgSend(v77, "presentViewController:animated:completion:", v80, 1, 0);

}

double sub_1001C2614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v1
                   + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode);
    KeyPath = swift_getKeyPath(&unk_1001F6F98);
    v15 = a1;
    v6 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    swift_bridgeObjectRetain_n(v3, 2);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v6);
    v7 = objc_msgSend(*(id *)(a1 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    if (v4 != v8 || v3 != v10)
      _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v8, v10, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v3, 2);
  }
  v12 = swift_getKeyPath(&unk_1001F6EB8);
  __chkstk_darwin(v12);
  v15 = a1;
  sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, v12, sub_1001C9EC0);
  swift_release(v12);
  v13 = swift_getKeyPath(&unk_1001F6EE0);
  __chkstk_darwin(v13);
  v15 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, v13, sub_1001C9EAC);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

void sub_1001C2850()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t *p_aBlock;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  void *v26;
  id v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  CGFloat *v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  double v60;
  double v61;
  double v62;
  double v63;
  void *v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat x;
  CGFloat height;
  id v71;
  void *v72;
  id v73;
  id v74;
  char v75;
  char v76;
  id v77;
  double v78;
  void *v79;
  id v80;
  id v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  double v89;
  CGFloat v90;
  double v91;
  double v92;
  id v93;
  void *v94;
  double v95;
  CGFloat v96;
  double v97;
  CGFloat v98;
  double v99;
  CGFloat v100;
  double v101;
  CGFloat v102;
  double v103;
  id v104;
  void *v105;
  double v106;
  double v107;
  id v108;
  void *v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  id v127;
  void *v128;
  id v129;
  uint64_t v130;
  double v131;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  double *v135;
  uint64_t KeyPath;
  uint64_t v137;
  double v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  void *v157;
  void *v158;
  uint64_t v159;
  double v160;
  BOOL IsEmpty;
  CGFloat width;
  CGFloat y;
  char v164[24];
  char v165[24];
  uint64_t aBlock;
  uint64_t v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  double v174;
  double v175;
  double v176;
  __int128 v177;
  __int128 v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;

  v1 = v0;
  v2 = objc_msgSend(v0, "viewIfLoaded");
  v3 = objc_msgSend(v2, "window");

  if (!v3)
    return;
  Notification.object.getter(&aBlock, v4);
  if (!v169)
  {
    p_aBlock = &aBlock;
LABEL_8:
    sub_10000A020((uint64_t)p_aBlock, (uint64_t *)&unk_10028C0B0);
    return;
  }
  v5 = sub_10000A05C(0, &qword_100298688, UIScreen_ptr);
  if ((swift_dynamicCast(&v177, &aBlock, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return;
  v6 = (void *)v177;
  v7 = objc_msgSend(v1, "view");
  if (!v7)
  {
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "window");

  if (v9)
  {
    v10 = objc_msgSend(v9, "screen");

    aBlock = (uint64_t)v10;
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(&aBlock, v5);

  }
  else
  {
    v11 = 0;
  }
  v13 = objc_msgSend(v6, "isEqual:", v11);
  v14 = swift_unknownObjectRelease(v11);
  if (!v13)
    goto LABEL_20;
  v15 = Notification.userInfo.getter(v14);
  if (!v15)
    goto LABEL_20;
  v16 = v15;
  *(double *)&v173 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey));
  v174 = v17;
  AnyHashable.init<A>(_:)(&aBlock, &v173, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v16 + 16) && (v18 = sub_1001A87EC((uint64_t)&aBlock), (v19 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v16 + 56) + 32 * v18, (uint64_t)&v177);
  }
  else
  {
    v177 = 0u;
    v178 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v178 + 1))
  {

    p_aBlock = (uint64_t *)&v177;
    goto LABEL_8;
  }
  type metadata accessor for CGRect(0);
  if ((swift_dynamicCast(&v173, &v177, (char *)&type metadata for Any + 8, v20, 6) & 1) == 0)
  {
LABEL_20:

    return;
  }
  v21 = *(double *)&v173;
  v22 = v174;
  v23 = v175;
  v24 = v176;
  v25 = objc_msgSend(v1, "view");
  if (!v25)
    goto LABEL_98;
  v26 = v25;
  v27 = objc_msgSend(v25, "keyboardLayoutGuide");

  objc_msgSend(v27, "layoutFrame");
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;

  v36 = (CGFloat *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_lastKnownKeyboardFrame];
  v184.origin.x = v29;
  v184.origin.y = v31;
  v184.size.width = v33;
  v184.size.height = v35;
  v37 = CGRectEqualToRect(*(CGRect *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_lastKnownKeyboardFrame], v184);
  if (v37)
    goto LABEL_20;
  *v36 = v29;
  v36[1] = v31;
  v36[2] = v33;
  v36[3] = v35;
  v38 = Notification.userInfo.getter(v37);
  if (!v38)
  {
    v177 = 0u;
    v178 = 0u;
LABEL_32:
    v44 = sub_10000A020((uint64_t)&v177, (uint64_t *)&unk_10028C0B0);
    goto LABEL_33;
  }
  v39 = v38;
  *(double *)&v173 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationDurationUserInfoKey));
  v174 = v40;
  AnyHashable.init<A>(_:)(&aBlock, &v173, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v39 + 16) && (v41 = sub_1001A87EC((uint64_t)&aBlock), (v42 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v39 + 56) + 32 * v41, (uint64_t)&v177);
  }
  else
  {
    v177 = 0u;
    v178 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v178 + 1))
    goto LABEL_32;
  v43 = sub_10000A05C(0, (unint64_t *)&qword_10028F200, NSNumber_ptr);
  v44 = swift_dynamicCast(&aBlock, &v177, (char *)&type metadata for Any + 8, v43, 6);
  if ((v44 & 1) != 0)
  {
    v45 = (id)aBlock;
    objc_msgSend((id)aBlock, "doubleValue");
    v160 = v46;

    goto LABEL_34;
  }
LABEL_33:
  v160 = 0.0;
LABEL_34:
  v47 = Notification.userInfo.getter(v44);
  if (!v47)
  {
    v177 = 0u;
    v178 = 0u;
LABEL_43:
    sub_10000A020((uint64_t)&v177, (uint64_t *)&unk_10028C0B0);
    goto LABEL_44;
  }
  v48 = v47;
  *(double *)&v173 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationCurveUserInfoKey));
  v174 = v49;
  AnyHashable.init<A>(_:)(&aBlock, &v173, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v48 + 16) && (v50 = sub_1001A87EC((uint64_t)&aBlock), (v51 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v48 + 56) + 32 * v50, (uint64_t)&v177);
  }
  else
  {
    v177 = 0u;
    v178 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v178 + 1))
    goto LABEL_43;
  v52 = sub_10000A05C(0, (unint64_t *)&qword_10028F200, NSNumber_ptr);
  if ((swift_dynamicCast(&aBlock, &v177, (char *)&type metadata for Any + 8, v52, 6) & 1) != 0)
  {
    v53 = (id)aBlock;
    v54 = objc_msgSend((id)aBlock, "unsignedIntegerValue");

    goto LABEL_45;
  }
LABEL_44:
  v54 = 0;
LABEL_45:
  v55 = objc_msgSend(v6, "coordinateSpace");
  v56 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView;
  v57 = *(void **)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView];
  if (!v57)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  v58 = v55;
  v59 = v57;
  objc_msgSend(v58, "convertRect:toCoordinateSpace:", v59, v21, v22, v23, v24);
  v64 = *(void **)&v1[v56];
  if (!v64)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v65 = v60;
  v66 = v61;
  v67 = v62;
  v68 = v63;
  objc_msgSend(v64, "bounds");
  v185.origin.x = v65;
  v185.origin.y = v66;
  v185.size.width = v67;
  v185.size.height = v68;
  v180 = CGRectIntersection(v179, v185);
  x = v180.origin.x;
  height = v180.size.height;
  y = v180.origin.y;
  width = v180.size.width;
  IsEmpty = CGRectIsEmpty(v180);
  v71 = objc_msgSend(v1, "parentViewController");
  v158 = v58;
  v156 = v59;
  if (v71
    && (v72 = v71,
        v73 = objc_msgSend(v71, "navigationController", v59, v58),
        v72,
        v73))
  {
    v74 = objc_msgSend(v73, "navigationBar");

    sub_1001D9138();
    v76 = v75;

  }
  else
  {
    v76 = 0;
  }
  v77 = objc_msgSend(v1, "parentViewController", v156);
  v78 = 0.0;
  if (v77)
  {
    v79 = v77;
    v80 = objc_msgSend(v77, "navigationController");

    if (v80)
    {
      v81 = objc_msgSend(v80, "navigationBar");

      sub_1001D9338();
      v78 = v82;

    }
  }
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v83 = type metadata accessor for Logger(0);
  v84 = sub_10000F66C(v83, (uint64_t)qword_1002AA470);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v85, v86))
  {
    v87 = swift_slowAlloc(18, -1);
    *(_DWORD *)v87 = 67109376;
    LODWORD(aBlock) = v76 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v87 + 4);
    *(_WORD *)(v87 + 8) = 2048;
    aBlock = *(_QWORD *)&v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v167, v87 + 10);
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Nav title is large? : %{BOOL}d with height: %f", (uint8_t *)v87, 0x12u);
    swift_slowDealloc(v87, -1, -1);
  }

  v88 = sub_1001C3A44();
  v181.origin.x = v29;
  v181.origin.y = v31;
  v181.size.width = v33;
  v181.size.height = v35;
  v89 = CGRectGetHeight(v181);
  v90 = x;
  v182.origin.x = x;
  v182.origin.y = y;
  v182.size.width = width;
  v182.size.height = height;
  v91 = CGRectGetHeight(v182);
  if (v89 > v91)
    v92 = v89;
  else
    v92 = v91;
  v93 = objc_msgSend(v1, "view");
  if (!v93)
    goto LABEL_101;
  v94 = v93;
  objc_msgSend(v93, "bounds");
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v102 = v101;

  v183.origin.x = v96;
  v183.origin.y = v98;
  v183.size.width = v100;
  v183.size.height = v102;
  v103 = CGRectGetHeight(v183);
  v104 = objc_msgSend(v1, "view");
  if (!v104)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  v105 = v104;
  objc_msgSend(v104, "safeAreaInsets");
  v107 = v106;

  v108 = objc_msgSend(v1, "view");
  if (!v108)
  {
LABEL_103:
    __break(1u);
    return;
  }
  v109 = v108;
  v110 = v103 - v107;
  objc_msgSend(v108, "safeAreaInsets");
  v112 = v111;

  v172 = v110 - v112 - v92;
  v114 = Logger.logObject.getter(v113);
  v115 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v114, v115))
  {
    v116 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v116 = 134217984;
    swift_beginAccess(&v172, v164, 0, 0);
    aBlock = *(_QWORD *)&v172;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v167, v116 + 4);
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "Initial available height: %f", v116, 0xCu);
    swift_slowDealloc(v116, -1, -1);
  }

  if ((v76 & 1) != 0)
  {
    v117 = swift_beginAccess(&v172, v165, 1, 0);
    v172 = v78 + v172;
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v118, v119))
    {
      v120 = swift_slowAlloc(22, -1);
      *(_DWORD *)v120 = 134218240;
      aBlock = *(_QWORD *)&v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v167, v120 + 4);
      *(_WORD *)(v120 + 12) = 2048;
      aBlock = *(_QWORD *)&v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v167, v120 + 14);
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Accounting for large title (+%f): %f", (uint8_t *)v120, 0x16u);
      swift_slowDealloc(v120, -1, -1);
    }

  }
  v121 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore];
  if ((unint64_t)v121 >> 62)
  {
    if (v121 < 0)
      v154 = *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore];
    else
      v154 = v121 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore]);
    v155 = _CocoaArrayWrapper.endIndex.getter(v154);
    swift_bridgeObjectRelease();
    if (v155)
      goto LABEL_72;
  }
  else if (*(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_72:
    v122 = swift_beginAccess(&v172, &v177, 1, 0);
    v123 = v172 + -36.0;
    v172 = v172 + -36.0;
    v124 = Logger.logObject.getter(v122);
    v125 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v124, v125))
    {
      v126 = swift_slowAlloc(22, -1);
      *(_DWORD *)v126 = 134218240;
      aBlock = 0x4042000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v167, v126 + 4);
      *(_WORD *)(v126 + 12) = 2048;
      aBlock = *(_QWORD *)&v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v167, v126 + 14);
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "Subtracting to show hint of prior cards (-%f): %f", (uint8_t *)v126, 0x16u);
      swift_slowDealloc(v126, -1, -1);
    }

  }
  v127 = objc_msgSend(v1, "parentViewController");
  if (v127)
  {
    v128 = v127;
    v129 = objc_msgSend(v127, "navigationItem");

    if ((v88 & 1) != 0)
      v130 = 2;
    else
      v130 = 0;
    objc_msgSend(v129, "setLargeTitleDisplayMode:", v130);

  }
  if ((v88 & 1) != 0)
  {
    swift_beginAccess(&v172, &v173, 0, 0);
    v131 = v172 + 8.0;
    v132 = IsEmpty;
  }
  else
  {
    v132 = IsEmpty;
    if (qword_10028A3C0 != -1)
      swift_once(&qword_10028A3C0, sub_100055838);
    v131 = *(double *)&qword_1002AA0C0;
  }
  v159 = ((_QWORD)v54 << 16) | 2;
  v133 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel;
  v134 = !v132;
  v135 = *(double **)(*(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel]
                    + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
  KeyPath = swift_getKeyPath(&unk_1001F7008);
  aBlock = (uint64_t)v135;
  v137 = sub_100007D5C((unint64_t *)&unk_100298690, type metadata accessor for CardMetrics, (uint64_t)&unk_1001E8E2C);
  swift_retain(v135);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, KeyPath, v137);
  swift_release(KeyPath);
  v138 = v135[2];
  swift_release(v135);
  if (v138 != v131)
  {
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v140, v141))
    {
      v142 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v142 = 134217984;
      aBlock = *(_QWORD *)&v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v167, v142 + 4);
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "Setting height: %f", v142, 0xCu);
      swift_slowDealloc(v142, -1, -1);
    }

    v143 = *(_QWORD *)(*(_QWORD *)&v1[v133]
                     + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_cardMetrics);
    v144 = swift_getKeyPath(&unk_1001F7008);
    __chkstk_darwin(v144);
    aBlock = v143;
    swift_retain(v143);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&aBlock, v144, sub_1001C9950);
    swift_release(v143);
    swift_release(v144);
    v132 = IsEmpty;
  }
  if (!v132)
    v1[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pinComposeCardToKeyboard] = 1;
  v145 = (void *)objc_opt_self(UIView);
  v146 = swift_allocObject(&unk_100270C18, 64, 7);
  *(_QWORD *)(v146 + 16) = v1;
  *(_BYTE *)(v146 + 24) = v134;
  *(CGFloat *)(v146 + 32) = v90;
  *(CGFloat *)(v146 + 40) = y;
  *(CGFloat *)(v146 + 48) = width;
  *(CGFloat *)(v146 + 56) = height;
  v170 = sub_1001C9990;
  v171 = v146;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v167 = 1107296256;
  v168 = sub_100075908;
  v169 = &unk_100270C30;
  v147 = _Block_copy(&aBlock);
  v148 = v171;
  v149 = v1;
  swift_release(v148);
  v150 = swift_allocObject(&unk_100270C68, 24, 7);
  *(_QWORD *)(v150 + 16) = v149;
  v170 = sub_1001C99A4;
  v171 = v150;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v167 = 1107296256;
  v168 = sub_1000A4E10;
  v169 = &unk_100270C80;
  v151 = _Block_copy(&aBlock);
  v152 = v171;
  v153 = v149;
  swift_release(v152);
  objc_msgSend(v145, "animateWithDuration:delay:options:animations:completion:", v159, v147, v151, v160, 0.0);
  _Block_release(v151);
  _Block_release(v147);

  swift_unknownObjectRelease(v158);
}

void *sub_1001C3894(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7;
  void *result;
  double v11;

  v7 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView;
  result = *(void **)(a1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
  if (result)
  {
    objc_msgSend(result, "safeAreaInsets");
    if ((a2 & 1) == 0)
    {
      sub_1001C41D8(0, 0);
      return (void *)sub_1001BD86C(0);
    }
    result = *(void **)(a1 + v7);
    if (result)
    {
      objc_msgSend(result, "safeAreaInsets");
      sub_1001C3BA8(0, 0, a6 - v11);
      return (void *)sub_1001BD86C(0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001C3928(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;

  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000F66C(v4, (uint64_t)qword_1002AA470);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v9 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "<<<<< End animation with %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  *(_BYTE *)(a2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pinComposeCardToKeyboard) = 0;
}

id sub_1001C3A44()
{
  void *v0;
  void *v1;
  id result;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  void *v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  _QWORD v20[5];
  _QWORD v21[4];
  char v22;
  CGRect v23;
  CGRect v24;

  v1 = v0;
  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = result;
  v4 = objc_msgSend(result, "keyboardLayoutGuide");

  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = result;
  v6 = sub_10000A05C(0, &qword_100298680, UIKeyboardLayoutGuide_ptr);
  UIPopoverPresentationControllerSourceItem.frame(in:)(v20, v5, v6);

  sub_1000ABA4C((uint64_t)v20, (uint64_t)v21);
  if ((v22 & 1) != 0)
    return 0;
  v7 = *(double *)v21;
  v8 = *(double *)&v21[1];
  v9 = *(double *)&v21[2];
  v10 = *(double *)&v21[3];
  result = objc_msgSend(v1, "view");
  if (result)
  {
    v11 = result;
    objc_msgSend(result, "bounds");
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;

    v23.origin.x = v13;
    v23.origin.y = v15;
    v23.size.width = v17;
    v23.size.height = v19;
    v24.origin.x = v7;
    v24.origin.y = v8;
    v24.size.width = v9;
    v24.size.height = v10;
    return (id)CGRectIntersectsRect(v23, v24);
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_1001C3BA8(unsigned __int8 a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  double v31;
  char v32;
  char v33;
  uint64_t v34;
  double v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char v48[24];

  v4 = v3;
  v5 = a2;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    sub_1001C41D8(a1, a2 & 1);
    return;
  }
  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap, v48, 0, 0);
  v9 = *v8;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain(*v8);
    v10 = sub_1001A88A4(a1);
    if ((v11 & 1) != 0)
    {
      v12 = *(double *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease();
      if (v12 == a3)
      {
        if (qword_10028A478 != -1)
          swift_once(&qword_10028A478, sub_100121100);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_10000F66C(v13, (uint64_t)qword_1002AA470);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = swift_slowAlloc(22, -1);
          v18 = swift_slowAlloc(32, -1);
          v46 = *(double *)&v18;
          *(_DWORD *)v17 = 136446466;
          if (a1)
          {
            if (a1 == 1)
              v19 = 0x616E6F6974636964;
            else
              v19 = 0x6F68706F7263696DLL;
            if (a1 == 1)
              v20 = 0xEA00000000007972;
            else
              v20 = 0xEA0000000000656ELL;
          }
          else
          {
            v19 = 0x6472616F6279656BLL;
            v20 = 0xE800000000000000;
          }
          v45 = sub_1001A7FE4(v19, v20, (uint64_t *)&v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v17 + 4);
          swift_bridgeObjectRelease();
          *(_WORD *)(v17 + 12) = 2050;
          v45 = *(_QWORD *)&a3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v17 + 14);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Not changing bottom inset for reason %{public}s because the height %{public}f is already being used", (uint8_t *)v17, 0x16u);
          swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v18, -1, -1);
          swift_slowDealloc(v17, -1, -1);
        }

        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10000F66C(v21, (uint64_t)qword_1002AA470);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v43 = v4;
    v44 = v5;
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(32, -1);
    v46 = *(double *)&v26;
    *(_DWORD *)v25 = 136446466;
    if (a1)
    {
      if (a1 == 1)
        v27 = 0x616E6F6974636964;
      else
        v27 = 0x6F68706F7263696DLL;
      if (a1 == 1)
        v28 = 0xEA00000000007972;
      else
        v28 = 0xEA0000000000656ELL;
    }
    else
    {
      v27 = 0x6472616F6279656BLL;
      v28 = 0xE800000000000000;
    }
    v45 = sub_1001A7FE4(v27, v28, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2050;
    v45 = *(_QWORD *)&a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 14);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Adding bottom inset reason to %{public}s with height %{public}f", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v5 = v44;
    v4 = v43;
  }
  else
  {

  }
  swift_beginAccess(v8, &v46, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v45 = *v8;
  *v8 = 0x8000000000000000;
  sub_1001AB040(a1, isUniquelyReferenced_nonNull_native, a3);
  *v8 = v45;
  swift_bridgeObjectRelease();
  swift_endAccess(&v46);
  swift_bridgeObjectRetain(*v8);
  v31 = COERCE_DOUBLE(sub_1001C45A4(v30));
  v33 = v32;
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
    v35 = 0.0;
  else
    v35 = v31;
  v36 = Logger.logObject.getter(v34);
  v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v38 = 134349056;
    v46 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v38 + 4);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Setting bottom inset to %{public}f", v38, 0xCu);
    swift_slowDealloc(v38, -1, -1);
  }

  v39 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v39 + 16, v4);
  v40 = swift_allocObject(&unk_100270BF0, 32, 7);
  *(_QWORD *)(v40 + 16) = v39;
  *(double *)(v40 + 24) = v35;
  if ((v5 & 1) != 0)
  {
    sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
    static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)(0, sub_1001C9E4C, v40, 0, 0, 0.5, 0.0, 0.0, 0.0);
    v41 = v40;
  }
  else
  {
    swift_retain(v39);
    sub_1001C47A0(v42);
    swift_release(v40);
    v41 = v39;
  }
  swift_release(v41);
}

void sub_1001C41D8(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  uint64_t v17;
  double v18;
  char v19;
  char v20;
  uint64_t v21;
  double v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32[3];

  v3 = v2;
  if (qword_10028A478 != -1)
    swift_once(&qword_10028A478, sub_100121100);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA470);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v32[0] = v11;
    *(_DWORD *)v10 = 136446210;
    if (a1)
    {
      if (a1 == 1)
        v12 = 0x616E6F6974636964;
      else
        v12 = 0x6F68706F7263696DLL;
      if (a1 == 1)
        v13 = 0xEA00000000007972;
      else
        v13 = 0xEA0000000000656ELL;
    }
    else
    {
      v13 = 0xE800000000000000;
      v12 = 0x6472616F6279656BLL;
    }
    v30 = sub_1001A7FE4(v12, v13, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v10 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Removing bottom inset reason %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v14 = (_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap);
  swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap, v32, 0, 0);
  if (*(_QWORD *)(*v14 + 16))
  {
    swift_bridgeObjectRetain(*v14);
    sub_1001A88A4(a1);
    v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      swift_beginAccess(v14, &v30, 33, 0);
      sub_1001C7F24(a1);
      swift_endAccess(&v30);
      swift_bridgeObjectRetain(*v14);
      v18 = COERCE_DOUBLE(sub_1001C45A4(v17));
      v20 = v19;
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        v22 = 0.0;
      else
        v22 = v18;
      v23 = Logger.logObject.getter(v21);
      v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v25 = 134349056;
        v30 = *(_QWORD *)&v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v25 + 4);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Setting bottom inset to %{public}f", v25, 0xCu);
        swift_slowDealloc(v25, -1, -1);
      }

      v26 = swift_allocObject(&unk_1002709C0, 24, 7);
      swift_unknownObjectWeakInit(v26 + 16, v3);
      v27 = swift_allocObject(&unk_100270BC8, 32, 7);
      *(_QWORD *)(v27 + 16) = v26;
      *(double *)(v27 + 24) = v22;
      if ((a2 & 1) != 0)
      {
        sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
        static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)(0, sub_1001C993C, v27, 0, 0, 0.5, 0.0, 0.0, 0.0);
        v28 = v27;
      }
      else
      {
        swift_retain(v26);
        sub_1001C47A0(v29);
        swift_release(v27);
        v28 = v26;
      }
      swift_release(v28);
    }
  }
}

uint64_t sub_1001C45A4(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = a1 + 64;
  v2 = *(_BYTE *)(a1 + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v18 = *(_QWORD *)(a1 + 72);
    if (v18)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v18 = *(_QWORD *)(a1 + 80);
      if (v18)
      {
        v6 = 2;
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 88);
        if (v18)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v18 = *(_QWORD *)(a1 + 96);
          if (v18)
          {
            v6 = 4;
          }
          else
          {
            v18 = *(_QWORD *)(a1 + 104);
            if (!v18)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v18 - 1) & v18;
    v7 = __clz(__rbit64(v18)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(double *)(v10 + 8 * v7);
  while (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v6 << 6);
LABEL_7:
    if (v11 < *(double *)(v10 + 8 * v13))
      v11 = *(double *)(v10 + 8 * v13);
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
    return *(_QWORD *)&v11;
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      return *(_QWORD *)&v11;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v19 = 0;
  v20 = 6;
  if (v9 > 6)
    v20 = v9;
  v21 = v20 - 6;
  while (v21 != v19)
  {
    v18 = *(_QWORD *)(a1 + 112 + 8 * v19++);
    if (v18)
    {
      v6 = v19 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

void sub_1001C47A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(void **)(Strong + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
    v5 = v4;

    if (!v4)
    {
      __break(1u);
      goto LABEL_9;
    }
    objc_msgSend(v5, "contentInset");
    objc_msgSend(v5, "setContentInset:");

  }
  swift_beginAccess(v1, &v10, 0, 0);
  v6 = swift_unknownObjectWeakLoadStrong(v1);
  if (!v6)
    return;
  v7 = (void *)v6;
  v8 = *(void **)(v6 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
  v9 = v8;

  if (!v8)
  {
LABEL_9:
    __break(1u);
    return;
  }
  objc_msgSend(v9, "verticalScrollIndicatorInsets");
  objc_msgSend(v9, "setVerticalScrollIndicatorInsets:");

}

id sub_1001C48B4(uint64_t a1)
{
  uint64_t v1;
  id v2;
  unint64_t v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  _QWORD aBlock[5];
  uint64_t v22;
  Swift::String v23;

  if (*(_QWORD *)(v1
                 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                 + 8))
    return 0;
  v4 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v23._object = (void *)0x80000001001FC200;
  v6._countAndFlagsBits = 0x4554454C4544;
  v6._object = (void *)0xE600000000000000;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0xD000000000000013;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)v4, (NSBundle)v5, v7, v23);

  v8 = swift_allocObject(&unk_1002709C0, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v1);
  v9 = swift_allocObject(&unk_100270B50, 32, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = a1;
  swift_retain(v8);
  swift_retain(a1);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_1001C98D8;
  v22 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BA88C;
  aBlock[3] = &unk_100270B68;
  v11 = _Block_copy(aBlock);
  v12 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", 1, v10, v11);

  _Block_release(v11);
  v13 = v22;
  swift_release(v8);
  swift_release(v13);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v14);

  objc_msgSend(v12, "setImage:", v15);
  v16 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1001EA980;
  *(_QWORD *)(v17 + 32) = v12;
  aBlock[0] = v17;
  specialized Array._endMutation()(v17);
  sub_10000A05C(0, &qword_100290890, UIContextualAction_ptr);
  v18 = v12;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = objc_msgSend((id)objc_opt_self(UISwipeActionsConfiguration), "configurationWithActions:", isa);

  objc_msgSend(v2, "_setSwipeActionsStyle:", 3);
  return v2;
}

void sub_1001C4B98(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void (*v30)(void);
  id v31;
  uint64_t v32;
  Swift::OpaquePointer v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint8_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  uint64_t v53;
  uint64_t v54;
  char v55[24];

  v10 = sub_100006DF4(&qword_100298678);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5 += 16;
  swift_beginAccess(a5, v55, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a5);
  if (Strong)
  {
    v15 = (char *)Strong;
    v51 = a4;
    v52 = a3;
    if (qword_10028A418 != -1)
      swift_once(&qword_10028A418, sub_100120F48);
    v16 = type metadata accessor for Logger(0);
    sub_10000F66C(v16, (uint64_t)qword_1002AA350);
    v17 = swift_retain_n(a6, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    v20 = os_log_type_enabled(v18, v19);
    v49 = v11;
    v50 = v10;
    if (v20)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v54 = v22;
      v48 = v15;
      *(_DWORD *)v21 = 136446210;
      v47 = v21 + 4;
      KeyPath = swift_getKeyPath(&unk_1001F6F98);
      v53 = a6;
      v24 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v53, KeyPath, v24);
      v25 = objc_msgSend(*(id *)(a6 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v53 = sub_1001A7FE4(v26, v28, &v54);
      v15 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v47);
      swift_release_n(a6, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "User deleted card item %{public}s via swipe action", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_release_n(a6, 2);
    }
    v29 = *(void **)&v15[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource];
    v30 = v52;
    if (v29)
    {
      LOBYTE(v54) = 0;
      v31 = v29;
      UICollectionViewDiffableDataSource.snapshot(for:)(&v54);
      v32 = sub_100006DF4(&qword_10028A6C0);
      v33._rawValue = (void *)swift_allocObject(v32, 48, 7);
      *((_OWORD *)v33._rawValue + 1) = xmmword_1001E64F0;
      v34 = swift_getKeyPath(&unk_1001F6F98);
      v54 = a6;
      v35 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v34, v35);
      v36 = objc_msgSend(*(id *)(a6 + 72), "identifier", swift_release(v34).n128_f64[0]);
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      *((_QWORD *)v33._rawValue + 4) = v37;
      *((_QWORD *)v33._rawValue + 5) = v39;
      v40 = v50;
      NSDiffableDataSourceSectionSnapshot.delete(_:)(v33);
      v41 = swift_bridgeObjectRelease();
      LOBYTE(v54) = 0;
      UICollectionViewDiffableDataSource.apply(_:to:animatingDifferences:completion:)(v13, &v54, 1, 0, 0, v41);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v40);
    }
    ((void (*)(uint64_t))v30)(1);
    v42 = *(_QWORD *)(*(_QWORD *)&v15[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_translationViewModel]
                    + OBJC_IVAR____TtC17SequoiaTranslator27ComposeTranslationViewModel_session);
    v43 = swift_getKeyPath(&unk_1001F6F98);
    v54 = a6;
    v44 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    swift_retain(v42);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v43, v44);
    swift_release(v43);
    v45 = *(id *)(a6 + 72);
    sub_1001C9FE8(v45);

    swift_release(v42);
  }
  else
  {
    a3();
  }
}

id sub_1001C504C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranslationListController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TranslationListController()
{
  return objc_opt_self(_TtC17SequoiaTranslator25TranslationListController);
}

void sub_1001C5170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  if (a2)
  {
    v3 = *(char **)(a3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController);
    if (v3)
    {
      v4 = &v3[OBJC_IVAR____TtC17SequoiaTranslator24DictionaryViewController_text];
      *(_QWORD *)v4 = a1;
      *((_QWORD *)v4 + 1) = a2;
      swift_bridgeObjectRetain(a2);
      oslog = v3;
      swift_bridgeObjectRelease();
      sub_1000A7A90();
    }
    else
    {
      if (qword_10028A420 != -1)
        swift_once(&qword_10028A420, sub_100120F74);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA368);
      oslog = Logger.logObject.getter(v6);
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Got new word to define but don't have a dictionaryController to update the definition", v8, 2u);
        swift_slowDealloc(v8, -1, -1);
      }
    }

  }
}

uint64_t sub_1001C5290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t KeyPath;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t result;
  void *v21;
  id v22;
  Class isa;
  id v24;
  _QWORD v25[2];

  v2 = v1;
  v4 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource);
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_6;
  }
  KeyPath = swift_getKeyPath(&unk_1001F6F98);
  v25[0] = a1;
  v13 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
  v14 = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v25, KeyPath, v13);
  v15 = objc_msgSend(*(id *)(a1 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v25[0] = v16;
  v25[1] = v18;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(v25, v19);
  swift_bridgeObjectRelease();

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_6:
    sub_10000A020((uint64_t)v6, (uint64_t *)&unk_100290880);
    return 0;
  }
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v21 = *(void **)(v2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
  if (v21)
  {
    v22 = v21;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v24 = objc_msgSend(v22, "cellForItemAtIndexPath:", isa);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (uint64_t)v24;
  }
  __break(1u);
  return result;
}

void sub_1001C54C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v24, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    v6 = a2 + 16;
    swift_beginAccess(v6, &v23, 0, 0);
    v7 = swift_unknownObjectWeakLoadStrong(v6);
    if (v7)
    {
      v8 = (void *)v7;
      v9 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController;
      v10 = *(void **)&v5[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController];
      if (v10)
      {
        type metadata accessor for DictionaryViewController(0);
        v11 = v8;
        v12 = v10;
        v13 = static NSObject.== infix(_:_:)(v11, v12);

        if ((v13 & 1) != 0)
        {
          v14 = *(char **)&v5[v9];
          *(_QWORD *)&v5[v9] = 0;

          v5 = v14;
LABEL_18:

          return;
        }
      }

    }
    if (*(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController])
    {
      if (qword_10028A420 != -1)
        swift_once(&qword_10028A420, sub_100120F74);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10000F66C(v15, (uint64_t)qword_1002AA368);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_17;
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
            "a different instance now";
    }
    else
    {
      if (qword_10028A420 != -1)
        swift_once(&qword_10028A420, sub_100120F74);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_10000F66C(v21, (uint64_t)qword_1002AA368);
      v17 = Logger.logObject.getter(v22);
      v18 = static os_log_type_t.info.getter(v17);
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_17;
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
    }
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v20, v19, 2u);
    swift_slowDealloc(v19, -1, -1);
LABEL_17:

    goto LABEL_18;
  }
}

double sub_1001C56F0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  __n128 v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void **aBlock;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  void *v72;
  void (*v73)(uint64_t);
  uint64_t v74;

  v7 = sub_100006DF4((uint64_t *)&unk_100290880);
  __chkstk_darwin(v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IndexPath(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v13 = __chkstk_darwin(v12);
  if (a2 == 2)
  {
    v18 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                    + 8);
    if (v18)
    {
      v57 = v16;
      v58 = v15;
      v59 = a1;
      v60 = (char *)&v57 - v14;
      v62 = v9;
      v63 = v13;
      v67 = *(_QWORD *)(v3
                      + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode);
      v68 = v18;
      v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore);
      v61 = a3;
      if ((unint64_t)v19 >> 62)
        goto LABEL_28;
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v19, 2);
      swift_bridgeObjectRetain(v68);
      v64 = v11;
      v65 = (char *)v3;
      if (!v20)
      {
LABEL_17:
        swift_bridgeObjectRelease_n(v19, 2);
        *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
        return result;
      }
LABEL_5:
      v66 = v19 & 0xC000000000000001;
      v11 = 4;
      while (1)
      {
        v3 = v11 - 4;
        if (v66)
        {
          v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v19);
          v22 = v11 - 3;
          if (__OFADD__(v3, 1))
            goto LABEL_27;
        }
        else
        {
          v21 = *(_QWORD *)(v19 + 8 * v11);
          swift_retain(v21);
          v22 = v11 - 3;
          if (__OFADD__(v3, 1))
          {
LABEL_27:
            __break(1u);
LABEL_28:
            if (v19 < 0)
              v56 = v19;
            else
              v56 = v19 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n(v19, 2);
            swift_bridgeObjectRetain(v68);
            v20 = _CocoaArrayWrapper.endIndex.getter(v56);
            v64 = v11;
            v65 = (char *)v3;
            if (!v20)
              goto LABEL_17;
            goto LABEL_5;
          }
        }
        KeyPath = swift_getKeyPath(&unk_1001F6F98);
        aBlock = (void **)v21;
        v24 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, KeyPath, v24);
        v25 = objc_msgSend(*(id *)(v21 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

        if (v26 == v67 && v68 == v28)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 = swift_bridgeObjectRelease();
          v33 = v64;
          v32 = v65;
          v34 = *(void **)&v65[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource];
          if (v34)
          {
            v35 = swift_getKeyPath(&unk_1001F6F98);
            aBlock = (void **)v21;
            v36 = v34;
            ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, v35, v24);
            v37 = objc_msgSend(*(id *)(v21 + 72), "identifier", swift_release(v35).n128_f64[0]);
            v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
            v40 = v39;

            aBlock = (void **)v38;
            v70 = v40;
            v41 = (uint64_t)v62;
            dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&aBlock, v42);
            swift_bridgeObjectRelease();

            v43 = v63;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v41, 1, v63) != 1)
            {
              v44 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
              v45 = v60;
              v44(v60, v41, v43);
              if (v61)
              {
                v46 = v58;
                (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v58, v45, v43);
                v47 = *(unsigned __int8 *)(v33 + 80);
                v48 = (v47 + 32) & ~v47;
                v49 = swift_allocObject(&unk_100270B00, v48 + v57, v47 | 7);
                v50 = v59;
                *(_QWORD *)(v49 + 16) = v59;
                *(_QWORD *)(v49 + 24) = v32;
                v44((char *)(v49 + v48), v46, v43);
                v73 = sub_1001C9868;
                v74 = v49;
                aBlock = _NSConcreteStackBlock;
                v70 = 1107296256;
                v71 = sub_1001BAEA8;
                v72 = &unk_100270B18;
                v51 = _Block_copy(&aBlock);
                v52 = v74;
                v53 = v50;
                v54 = v32;
                *(_QWORD *)&v55 = swift_release(v52).n128_u64[0];
                objc_msgSend(v61, "animateAlongsideTransition:completion:", v51, 0, v55);
                swift_release(v21);
                _Block_release(v51);
                (*(void (**)(char *, uint64_t))(v33 + 8))(v45, v43);
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v33 + 8))(v45, v43);
                *(_QWORD *)&result = swift_release(v21).n128_u64[0];
              }
              return result;
            }
          }
          else
          {
            v41 = (uint64_t)v62;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v64 + 56))(v62, 1, 1, v63, v31);
          }
          swift_release(v21);
          sub_10000A020(v41, (uint64_t *)&unk_100290880);
          return result;
        }
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v67, v68, 0);
        swift_bridgeObjectRelease();
        if ((v30 & 1) != 0)
          goto LABEL_19;
        swift_release(v21);
        ++v11;
        if (v22 == v20)
          goto LABEL_17;
      }
    }
  }
  return result;
}

void sub_1001C5BCC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  double Height;
  void *v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  id v16;
  Class isa;
  CGRect v18;

  v5 = objc_opt_self(UIPopoverPresentationController);
  v6 = swift_dynamicCastObjCClass(a2, v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = a2;
    v9 = objc_msgSend(v7, "adaptiveSheetPresentationController");
    objc_msgSend(v9, "frameOfPresentedViewInContainerView");
    Height = CGRectGetHeight(v18);
    v11 = *(void **)(a3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
    if (!v11)
      goto LABEL_9;
    v12 = Height;
    objc_msgSend(v11, "safeAreaInsets");
    v14 = v12 - v13;
    if (v12 - v13 <= 0.0)
      v14 = 0.0;
    sub_1001C3BA8(1u, 0, v14);

  }
  v15 = *(void **)(a3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView);
  if (v15)
  {
    v16 = v15;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, "scrollToItemAtIndexPath:atScrollPosition:animated:", isa, 1, 0);

    return;
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

id sub_1001C5D68(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode);
  v4 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                 + 8);
  *v3 = 0;
  v3[1] = 0;
  if (v4)
  {
    sub_1001BB210();
    swift_bridgeObjectRelease();
  }
  if (qword_10028A420 != -1)
    swift_once(&qword_10028A420, sub_100120F74);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000F66C(v5, (uint64_t)qword_1002AA368);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Force dismissing dictionary controller due to user pressing close button", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);
}

void sub_1001C5EF0(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  void **aBlock;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void *v22;
  void *v23;
  uint64_t v24;
  char v25[24];

  v2 = v1;
  v3 = objc_msgSend(a1, "presentingViewController");
  v4 = objc_msgSend(v3, "transitionCoordinator");

  if (v4)
  {
    v5 = &v2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap];
    swift_beginAccess(&v2[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap], v25, 0, 0);
    v6 = *(_QWORD *)v5;
    if (*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRetain(v6);
      v7 = sub_1001A88A4(1u);
      if ((v8 & 1) != 0)
        v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      else
        v9 = 0;
      v10 = v8 ^ 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = swift_allocObject(&unk_100270A60, 24, 7);
    *(_QWORD *)(v11 + 16) = v2;
    v23 = sub_1001C9564;
    v24 = v11;
    aBlock = _NSConcreteStackBlock;
    v20 = 1107296256;
    v21 = sub_1001BAEA8;
    v22 = &unk_100270A78;
    v12 = _Block_copy(&aBlock);
    v13 = v24;
    v14 = v2;
    swift_release(v13);
    v15 = swift_allocObject(&unk_100270AB0, 40, 7);
    *(_QWORD *)(v15 + 16) = v9;
    *(_BYTE *)(v15 + 24) = v10 & 1;
    *(_QWORD *)(v15 + 32) = v14;
    v23 = sub_1001C95B0;
    v24 = v15;
    aBlock = _NSConcreteStackBlock;
    v20 = 1107296256;
    v21 = sub_1001BAEA8;
    v22 = &unk_100270AC8;
    v16 = _Block_copy(&aBlock);
    v17 = v24;
    v18 = v14;
    objc_msgSend(v4, "animateAlongsideTransition:completion:", v12, v16, swift_release(v17).n128_f64[0]);
    _Block_release(v16);
    _Block_release(v12);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    sub_1001C41D8(1u, 1);
  }
}

uint64_t storeEnumTagSinglePayload for TranslationListController.BottomInsetReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001C619C + 4 * byte_1001F6CB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001C61D0 + 4 * byte_1001F6CB0[v4]))();
}

uint64_t sub_1001C61D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C61D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C61E0);
  return result;
}

uint64_t sub_1001C61EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C61F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001C61F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C6200(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranslationListController.BottomInsetReason()
{
  return &type metadata for TranslationListController.BottomInsetReason;
}

uint64_t storeEnumTagSinglePayload for TranslationListController.TranslationSection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001C6268 + 4 * byte_1001F6CBF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001C629C + 4 * byte_1001F6CBA[v4]))();
}

uint64_t sub_1001C629C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C62A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C62ACLL);
  return result;
}

uint64_t sub_1001C62B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C62C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001C62C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C62CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranslationListController.TranslationSection()
{
  return &type metadata for TranslationListController.TranslationSection;
}

unint64_t sub_1001C62EC()
{
  unint64_t result;

  result = qword_100298668;
  if (!qword_100298668)
  {
    result = swift_getWitnessTable(&unk_1001F6DBC, &type metadata for TranslationListController.TranslationSection);
    atomic_store(result, (unint64_t *)&qword_100298668);
  }
  return result;
}

unint64_t sub_1001C6334()
{
  unint64_t result;

  result = qword_100298670;
  if (!qword_100298670)
  {
    result = swift_getWitnessTable(&unk_1001F6E5C, &type metadata for TranslationListController.BottomInsetReason);
    atomic_store(result, (unint64_t *)&qword_100298670);
  }
  return result;
}

double sub_1001C6378@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F7030);
  v5 = swift_getKeyPath(&unk_1001F7058);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1001C63F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F7030);
  v6 = swift_getKeyPath(&unk_1001F7058);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_1001C6474@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F6F50, (uint64_t)&unk_1001F6F78, a2);
}

uint64_t sub_1001C6488(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F6F50);
  v5 = swift_getKeyPath(&unk_1001F6F78);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001C64F8(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1001DB5B8(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1001C69C4(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

_QWORD *sub_1001C6570(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_100006DF4(&qword_100298760);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size_0(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 3);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 8 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1001C66E0(uint64_t a1)
{
  return sub_1001C67E4(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001C80D4);
}

_QWORD *sub_1001C66EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100006DF4(&qword_100298170);
  v4 = (_QWORD *)swift_allocObject(v3, 88 * v1 + 32, 7);
  v5 = j__malloc_size_0(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 88);
  v6 = sub_1001C8C48(&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10000F7C4(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001C67E4(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v5 = sub_100006DF4((uint64_t *)&unk_10028C060);
      v6 = (_QWORD *)swift_allocObject(v5, 8 * v4 + 32, 7);
      v7 = j__malloc_size_0(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v4;
      v6[3] = (2 * (v8 >> 3)) | 1;
    }
    v9 = swift_bridgeObjectRetain(a1);
    v10 = a2(v6 + 4, v4, a1, v9);
    a2 = v11;
    swift_bridgeObjectRelease(v10);
    if (a2 == (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))v4)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
    if (!v4)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

_QWORD *sub_1001C68E4(uint64_t a1)
{
  return sub_1001C67E4(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))sub_1001C8708);
}

_QWORD *sub_1001C68F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100006DF4(&qword_100298758);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size_0((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_1001C8EE0(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10000F7C4(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

void sub_1001C69C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  id v44;
  void *v45;
  char *v46;
  _QWORD *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  char *v55;
  _QWORD *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  int v62;
  char *v63;
  int v64;
  void (*v65)(char *, uint64_t);
  Swift::Int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  Swift::Int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  char *v81;
  _QWORD *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  char *v91;
  _QWORD *v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  char v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  Swift::Int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  char v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  Swift::Int v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  Swift::Int v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  Swift::Int v184;
  char *v185;
  char *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190[2];
  uint64_t v191;

  v2 = sub_100006DF4(&qword_1002948B0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v164 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v182 = (char *)&v164 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v164 - v9;
  __chkstk_darwin(v8);
  v173 = (char *)&v164 - v11;
  v12 = type metadata accessor for Date(0);
  v187 = *(_QWORD **)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v164 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v186 = (char *)&v164 - v17;
  v18 = __chkstk_darwin(v16);
  v172 = (char *)&v164 - v19;
  v20 = __chkstk_darwin(v18);
  v185 = (char *)&v164 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v164 - v22;
  v24 = a1[1];
  v25 = _minimumMergeRunLength(_:)(v24);
  if (v25 < v24)
  {
    if (v24 >= 0)
      v26 = v24;
    else
      v26 = v24 + 1;
    if (v24 < -1)
      goto LABEL_168;
    v170 = v23;
    v171 = v10;
    v175 = v24;
    v169 = v25;
    v165 = a1;
    if (v24 < 2)
    {
      v30 = (char *)_swiftEmptyArrayStorage;
      v191 = (uint64_t)_swiftEmptyArrayStorage;
      v178 = (uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
      if (v24 != 1)
      {
        v104 = _swiftEmptyArrayStorage[2];
        goto LABEL_122;
      }
    }
    else
    {
      v27 = v26 >> 1;
      v28 = type metadata accessor for CommittedTranslationViewModel(0);
      v29 = static Array._allocateBufferUninitialized(minimumCapacity:)(v27, v28);
      *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) = v27;
      v178 = (uint64_t *)((v29 & 0xFFFFFFFFFFFFFF8) + 32);
      v191 = v29;
    }
    v31 = 0;
    v32 = *a1;
    v166 = *a1 + 16;
    v167 = v32 - 8;
    v30 = (char *)_swiftEmptyArrayStorage;
    v180 = v15;
    v181 = v5;
    v188 = v12;
    v33 = v175;
    v183 = v32;
LABEL_13:
    v34 = v31 + 1;
    v176 = v31;
    if (v31 + 1 >= v33)
    {
      v66 = v169;
      goto LABEL_43;
    }
    v35 = *(_QWORD *)(v32 + 8 * v34);
    v190[0] = v35;
    v189 = *(_QWORD *)(v32 + 8 * v31);
    v36 = v189;
    swift_retain(v35);
    swift_retain(v36);
    v37 = v179;
    LODWORD(v177) = sub_1001C00F8(v190, &v189);
    if (v37)
    {
      swift_bridgeObjectRelease();
      swift_release(v35);
      swift_release(v36);
LABEL_135:
      *(_QWORD *)((v191 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v162);
      swift_bridgeObjectRelease();
      return;
    }
    v179 = 0;
    swift_release(v35);
    swift_release(v36);
    v34 = v31 + 2;
    if (v31 + 2 >= v33)
      goto LABEL_34;
    v184 = v31 + 2;
    v168 = v30;
    v38 = (uint64_t *)(v166 + 8 * v31);
    v39 = v170;
    while (1)
    {
      v41 = *(v38 - 1);
      v40 = *v38;
      KeyPath = swift_getKeyPath(&unk_1001F6F98);
      v190[0] = v40;
      v43 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
      swift_retain(v40);
      swift_retain(v41);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v190, KeyPath, v43);
      v44 = objc_msgSend(*(id *)(v40 + 72), "creationDate", swift_release(KeyPath).n128_f64[0]);
      if (!v44)
        break;
      v45 = v44;
      v174 = v43;
      v46 = v185;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v47 = v187;
      v48 = (void (*)(char *, char *, uint64_t))v187[4];
      v49 = (uint64_t)v173;
      v48(v173, v46, v12);
      v50 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v47[7];
      v50((char *)v49, 0, 1, v12);
      v51 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v47[6])(v49, 1, v12);
      if ((_DWORD)v51 == 1)
      {
        v43 = v174;
LABEL_21:
        static Date.now.getter(v51);
        sub_10000A020(v49, &qword_1002948B0);
        goto LABEL_23;
      }
      v48(v39, (char *)v49, v12);
      v43 = v174;
LABEL_23:
      v52 = swift_getKeyPath(&unk_1001F6F98);
      v190[0] = v41;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v190, v52, v43);
      v53 = objc_msgSend(*(id *)(v41 + 72), "creationDate", swift_release(v52).n128_f64[0]);
      if (v53)
      {
        v54 = v53;
        v55 = v185;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v56 = v187;
        v57 = (void (*)(char *, char *, uint64_t))v187[4];
        v58 = (uint64_t)v171;
        v59 = v55;
        v39 = v170;
        v57(v171, v59, v12);
        v50((char *)v58, 0, 1, v12);
        v60 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v56[6])(v58, 1, v12);
        if ((_DWORD)v60 != 1)
        {
          v61 = v172;
          v57(v172, (char *)v58, v12);
          goto LABEL_28;
        }
      }
      else
      {
        v58 = (uint64_t)v171;
        v60 = v50(v171, 1, 1, v12);
      }
      v61 = v172;
      static Date.now.getter(v60);
      sub_10000A020(v58, &qword_1002948B0);
LABEL_28:
      v62 = static Date.< infix(_:_:)(v39, v61);
      v63 = v61;
      v64 = v62;
      v65 = (void (*)(char *, uint64_t))v187[1];
      v65(v63, v12);
      v65(v39, v12);
      swift_release(v40);
      swift_release(v41);
      if (((v177 ^ v64) & 1) != 0)
      {
        v30 = v168;
        v33 = v175;
        v34 = v184;
LABEL_33:
        v31 = v176;
LABEL_34:
        v66 = v169;
        v32 = v183;
        if ((v177 & 1) != 0)
        {
          if (v34 >= v31)
          {
            if (v31 < v34)
            {
              v67 = (uint64_t *)(v167 + 8 * v34);
              v68 = v34;
              v69 = v31;
              v70 = (uint64_t *)(v183 + 8 * v31);
              while (1)
              {
                if (v69 != --v68)
                {
                  if (!v32)
                    goto LABEL_166;
                  v71 = *v70;
                  *v70 = *v67;
                  *v67 = v71;
                }
                ++v69;
                --v67;
                ++v70;
                if (v69 >= v68)
                  goto LABEL_43;
              }
            }
            goto LABEL_43;
          }
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
          __break(1u);
          return;
        }
LABEL_43:
        if (v34 >= v33)
          goto LABEL_71;
        if (__OFSUB__(v34, v31))
          goto LABEL_159;
        if (v34 - v31 >= v66)
          goto LABEL_71;
        if (__OFADD__(v31, v66))
          goto LABEL_161;
        if (v31 + v66 >= v33)
          v72 = v33;
        else
          v72 = v31 + v66;
        if (v72 < v31)
        {
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        if (v34 == v72)
          goto LABEL_71;
        v168 = v30;
        v73 = (uint64_t *)(v167 + 8 * v34);
        v174 = v72;
LABEL_55:
        v75 = *(_QWORD *)(v32 + 8 * v34);
        v177 = v73;
        v184 = v34;
        while (1)
        {
          v76 = *v73;
          v77 = swift_getKeyPath(&unk_1001F6F98);
          v190[0] = v75;
          v78 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
          swift_retain(v75);
          swift_retain(v76);
          ObservationRegistrar.access<A, B>(_:keyPath:)(v190, v77, v78);
          v79 = objc_msgSend(*(id *)(v75 + 72), "creationDate", swift_release(v77).n128_f64[0]);
          if (v79)
          {
            v80 = v79;
            v81 = v185;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v82 = v187;
            v83 = (void (*)(char *, char *, uint64_t))v187[4];
            v84 = (uint64_t)v182;
            v83(v182, v81, v188);
            v85 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v82[7];
            v85((char *)v84, 0, 1, v188);
            v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v82[6];
            v12 = v188;
            v87 = v86(v84, 1, v188);
            if ((_DWORD)v87 != 1)
            {
              v83(v186, (char *)v84, v12);
              goto LABEL_61;
            }
          }
          else
          {
            v85 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v187[7];
            v84 = (uint64_t)v182;
            v87 = v85(v182, 1, 1, v12);
          }
          static Date.now.getter(v87);
          sub_10000A020(v84, &qword_1002948B0);
LABEL_61:
          v88 = swift_getKeyPath(&unk_1001F6F98);
          v190[0] = v76;
          ObservationRegistrar.access<A, B>(_:keyPath:)(v190, v88, v78);
          v89 = objc_msgSend(*(id *)(v76 + 72), "creationDate", swift_release(v88).n128_f64[0]);
          if (v89)
          {
            v90 = v89;
            v91 = v185;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v92 = v187;
            v93 = (void (*)(char *, char *, uint64_t))v187[4];
            v94 = (uint64_t)v181;
            v93(v181, v91, v188);
            v85((char *)v94, 0, 1, v188);
            v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92[6];
            v12 = v188;
            v96 = v95(v94, 1, v188);
            v97 = v180;
            if ((_DWORD)v96 != 1)
            {
              v93(v180, (char *)v94, v12);
              goto LABEL_66;
            }
          }
          else
          {
            v94 = (uint64_t)v181;
            v96 = v85(v181, 1, 1, v12);
            v97 = v180;
          }
          static Date.now.getter(v96);
          sub_10000A020(v94, &qword_1002948B0);
LABEL_66:
          v98 = v186;
          v99 = static Date.< infix(_:_:)(v186, v97);
          v100 = (void (*)(char *, uint64_t))v187[1];
          v100(v97, v12);
          v100(v98, v12);
          swift_release(v75);
          swift_release(v76);
          if ((v99 & 1) == 0)
          {
            v32 = v183;
            v74 = v184;
LABEL_54:
            v34 = v74 + 1;
            v31 = v176;
            v73 = v177 + 1;
            if (v34 != v174)
              goto LABEL_55;
            v34 = v174;
            v30 = v168;
LABEL_71:
            if (v34 < v31)
              goto LABEL_155;
            if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
              v30 = sub_1001D9E38(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
            v103 = *((_QWORD *)v30 + 2);
            v102 = *((_QWORD *)v30 + 3);
            v104 = v103 + 1;
            v32 = v183;
            v184 = v34;
            if (v103 >= v102 >> 1)
            {
              v154 = sub_1001D9E38((char *)(v102 > 1), v103 + 1, 1, v30);
              v32 = v183;
              v30 = v154;
            }
            *((_QWORD *)v30 + 2) = v104;
            v105 = v30 + 32;
            v106 = &v30[16 * v103 + 32];
            v107 = v184;
            *(_QWORD *)v106 = v176;
            *((_QWORD *)v106 + 1) = v107;
            if (v103)
            {
              while (2)
              {
                v108 = v104 - 1;
                if (v104 >= 4)
                {
                  v113 = &v105[16 * v104];
                  v114 = *((_QWORD *)v113 - 8);
                  v115 = *((_QWORD *)v113 - 7);
                  v119 = __OFSUB__(v115, v114);
                  v116 = v115 - v114;
                  if (v119)
                    goto LABEL_143;
                  v118 = *((_QWORD *)v113 - 6);
                  v117 = *((_QWORD *)v113 - 5);
                  v119 = __OFSUB__(v117, v118);
                  v111 = v117 - v118;
                  v112 = v119;
                  if (v119)
                    goto LABEL_144;
                  v120 = v104 - 2;
                  v121 = &v105[16 * v104 - 32];
                  v123 = *(_QWORD *)v121;
                  v122 = *((_QWORD *)v121 + 1);
                  v119 = __OFSUB__(v122, v123);
                  v124 = v122 - v123;
                  if (v119)
                    goto LABEL_146;
                  v119 = __OFADD__(v111, v124);
                  v125 = v111 + v124;
                  if (v119)
                    goto LABEL_149;
                  if (v125 >= v116)
                  {
                    v143 = &v105[16 * v108];
                    v145 = *(_QWORD *)v143;
                    v144 = *((_QWORD *)v143 + 1);
                    v119 = __OFSUB__(v144, v145);
                    v146 = v144 - v145;
                    if (v119)
                      goto LABEL_153;
                    v136 = v111 < v146;
                  }
                  else
                  {
LABEL_90:
                    if ((v112 & 1) != 0)
                      goto LABEL_145;
                    v120 = v104 - 2;
                    v126 = &v105[16 * v104 - 32];
                    v128 = *(_QWORD *)v126;
                    v127 = *((_QWORD *)v126 + 1);
                    v129 = __OFSUB__(v127, v128);
                    v130 = v127 - v128;
                    v131 = v129;
                    if (v129)
                      goto LABEL_148;
                    v132 = &v105[16 * v108];
                    v134 = *(_QWORD *)v132;
                    v133 = *((_QWORD *)v132 + 1);
                    v119 = __OFSUB__(v133, v134);
                    v135 = v133 - v134;
                    if (v119)
                      goto LABEL_151;
                    if (__OFADD__(v130, v135))
                      goto LABEL_152;
                    if (v130 + v135 < v111)
                      goto LABEL_102;
                    v136 = v111 < v135;
                  }
                  if (v136)
                    v108 = v120;
                }
                else
                {
                  if (v104 == 3)
                  {
                    v110 = *((_QWORD *)v30 + 4);
                    v109 = *((_QWORD *)v30 + 5);
                    v119 = __OFSUB__(v109, v110);
                    v111 = v109 - v110;
                    v112 = v119;
                    goto LABEL_90;
                  }
                  v137 = *((_QWORD *)v30 + 4);
                  v138 = *((_QWORD *)v30 + 5);
                  v119 = __OFSUB__(v138, v137);
                  v130 = v138 - v137;
                  v131 = v119;
LABEL_102:
                  if ((v131 & 1) != 0)
                    goto LABEL_147;
                  v139 = &v105[16 * v108];
                  v141 = *(_QWORD *)v139;
                  v140 = *((_QWORD *)v139 + 1);
                  v119 = __OFSUB__(v140, v141);
                  v142 = v140 - v141;
                  if (v119)
                    goto LABEL_150;
                  if (v142 < v130)
                    goto LABEL_119;
                }
                v147 = v108 - 1;
                if (v108 - 1 >= v104)
                {
                  __break(1u);
LABEL_140:
                  __break(1u);
LABEL_141:
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
                  goto LABEL_162;
                }
                if (!v32)
                  goto LABEL_165;
                v148 = &v105[16 * v147];
                v149 = *(_QWORD *)v148;
                v150 = &v105[16 * v108];
                v151 = *((_QWORD *)v150 + 1);
                v152 = v179;
                sub_1001C7BCC((uint64_t *)(v32 + 8 * *(_QWORD *)v148), (uint64_t *)(v32 + 8 * *(_QWORD *)v150), v32 + 8 * v151, v178);
                v179 = v152;
                if (v152)
                {
LABEL_134:
                  swift_bridgeObjectRelease();
                  goto LABEL_135;
                }
                if (v151 < v149)
                  goto LABEL_140;
                if (v108 > *((_QWORD *)v30 + 2))
                  goto LABEL_141;
                *(_QWORD *)v148 = v149;
                *(_QWORD *)&v105[16 * v147 + 8] = v151;
                v153 = *((_QWORD *)v30 + 2);
                if (v108 >= v153)
                  goto LABEL_142;
                v104 = v153 - 1;
                memmove(&v105[16 * v108], v150 + 16, 16 * (v153 - 1 - v108));
                *((_QWORD *)v30 + 2) = v153 - 1;
                v32 = v183;
                if (v153 <= 2)
                  goto LABEL_119;
                continue;
              }
            }
            v104 = 1;
LABEL_119:
            v33 = v175;
            v31 = v184;
            if (v184 >= v175)
            {
LABEL_122:
              if (v104 >= 2)
              {
                v155 = *v165;
                do
                {
                  v156 = v104 - 2;
                  if (v104 < 2)
                    goto LABEL_154;
                  if (!v155)
                    goto LABEL_167;
                  v157 = *(_QWORD *)&v30[16 * v156 + 32];
                  v158 = *(_QWORD *)&v30[16 * v104 + 24];
                  v159 = v179;
                  sub_1001C7BCC((uint64_t *)(v155 + 8 * v157), (uint64_t *)(v155 + 8 * *(_QWORD *)&v30[16 * v104 + 16]), v155 + 8 * v158, v178);
                  v179 = v159;
                  if (v159)
                    goto LABEL_134;
                  if (v158 < v157)
                    goto LABEL_156;
                  if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
                    v30 = sub_1001DA1D4((uint64_t)v30);
                  if (v156 >= *((_QWORD *)v30 + 2))
                    goto LABEL_157;
                  v160 = &v30[16 * v156 + 32];
                  *(_QWORD *)v160 = v157;
                  *((_QWORD *)v160 + 1) = v158;
                  v161 = *((_QWORD *)v30 + 2);
                  if (v104 > v161)
                    goto LABEL_158;
                  memmove(&v30[16 * v104 + 16], &v30[16 * v104 + 32], 16 * (v161 - v104));
                  *((_QWORD *)v30 + 2) = v161 - 1;
                  v104 = v161 - 1;
                }
                while (v161 > 2);
              }
              swift_bridgeObjectRelease();
              *(_QWORD *)((v191 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
              specialized Array._endMutation()(v163);
              swift_bridgeObjectRelease();
              return;
            }
            goto LABEL_13;
          }
          v32 = v183;
          v74 = v184;
          if (!v183)
            goto LABEL_164;
          v101 = *v73;
          v75 = v73[1];
          *v73 = v75;
          v73[1] = v101;
          --v73;
          if (v74 == ++v31)
            goto LABEL_54;
        }
      }
      ++v38;
      v33 = v175;
      if (v175 == ++v184)
      {
        v34 = v175;
        v30 = v168;
        goto LABEL_33;
      }
    }
    v50 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v187[7];
    v49 = (uint64_t)v173;
    v51 = v50(v173, 1, 1, v12);
    goto LABEL_21;
  }
  if (v24 < 0)
    goto LABEL_160;
  if (v24)
    sub_1001C7790(0, v24, 1, a1);
}

void sub_1001C7790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  id v24;
  void *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  id v35;
  void *v36;
  char *v37;
  _QWORD *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;

  v54 = a1;
  v7 = sub_100006DF4(&qword_1002948B0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v57 = (char *)&v52 - v11;
  v12 = type metadata accessor for Date(0);
  v65 = *(_QWORD **)(v12 - 8);
  v66 = v12;
  v13 = __chkstk_darwin(v12);
  v64 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v62 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  v63 = (char *)&v52 - v17;
  v53 = a2;
  if (a3 != a2)
  {
    v58 = *a4;
    v18 = (_QWORD *)(v58 + 8 * a3 - 8);
    v56 = v10;
LABEL_5:
    v19 = *(_QWORD *)(v58 + 8 * a3);
    v20 = v54;
    v55 = v18;
    v59 = a3;
    while (1)
    {
      v21 = *v18;
      KeyPath = swift_getKeyPath(&unk_1001F6F98);
      v67 = v19;
      v23 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
      swift_retain(v19);
      swift_retain(v21);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, KeyPath, v23);
      v24 = objc_msgSend(*(id *)(v19 + 72), "creationDate", swift_release(KeyPath).n128_f64[0]);
      if (!v24)
        break;
      v25 = v24;
      v60 = v21;
      v61 = v23;
      v26 = v62;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v28 = v65;
      v27 = v66;
      v29 = (void (*)(char *, char *, uint64_t))v65[4];
      v30 = (uint64_t)v57;
      v29(v57, v26, v66);
      v31 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
      v31((char *)v30, 0, 1, v27);
      v32 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v28[6])(v30, 1, v27);
      if ((_DWORD)v32 == 1)
      {
        v33 = v31;
        v21 = v60;
        v23 = v61;
LABEL_10:
        static Date.now.getter(v32);
        sub_10000A020(v30, &qword_1002948B0);
        goto LABEL_12;
      }
      v29(v63, (char *)v30, v66);
      v33 = v31;
      v21 = v60;
      v23 = v61;
LABEL_12:
      v34 = swift_getKeyPath(&unk_1001F6F98);
      v67 = v21;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, v34, v23);
      v35 = objc_msgSend(*(id *)(v21 + 72), "creationDate", swift_release(v34).n128_f64[0]);
      if (v35)
      {
        v36 = v35;
        v37 = v62;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v38 = v65;
        v39 = (void (*)(char *, char *, uint64_t))v65[4];
        v40 = (uint64_t)v56;
        v41 = v37;
        v42 = v66;
        v39(v56, v41, v66);
        v33((char *)v40, 0, 1, v42);
        v43 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38[6])(v40, 1, v42);
        if ((_DWORD)v43 != 1)
        {
          v39(v64, (char *)v40, v66);
          goto LABEL_17;
        }
      }
      else
      {
        v40 = (uint64_t)v56;
        v43 = v33(v56, 1, 1, v66);
      }
      static Date.now.getter(v43);
      sub_10000A020(v40, &qword_1002948B0);
LABEL_17:
      v45 = v63;
      v44 = v64;
      v46 = static Date.< infix(_:_:)(v63, v64);
      v47 = (void (*)(char *, uint64_t))v65[1];
      v48 = v44;
      v49 = v66;
      v47(v48, v66);
      v47(v45, v49);
      swift_release(v19);
      swift_release(v21);
      v50 = v59;
      if ((v46 & 1) == 0)
        goto LABEL_4;
      if (!v58)
      {
        __break(1u);
        return;
      }
      v51 = *v18;
      v19 = v18[1];
      *v18 = v19;
      v18[1] = v51;
      --v18;
      if (v50 == ++v20)
      {
LABEL_4:
        a3 = v50 + 1;
        v18 = v55 + 1;
        if (a3 == v53)
          return;
        goto LABEL_5;
      }
    }
    v33 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v65[7];
    v30 = (uint64_t)v57;
    v32 = v33(v57, 1, 1, v66);
    goto LABEL_10;
  }
}

uint64_t sub_1001C7BCC(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v41 = __src;
  v40 = __dst;
  v36 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      v21 = v4;
      if (__dst != a2 || &a2[v13] <= __dst)
      {
        memmove(__dst, a2, 8 * v13);
        __dst = v36;
      }
      v22 = &__dst[v13];
      v39 = v22;
      v41 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v23 = (uint64_t *)(a3 - 8);
        v24 = v6;
        v35 = v7;
        while (1)
        {
          v25 = v22;
          v27 = *--v22;
          v26 = v27;
          v38 = v27;
          v29 = *--v24;
          v28 = v29;
          v37 = v29;
          swift_retain(v38);
          swift_retain(v29);
          v30 = sub_1001C00F8(&v38, &v37);
          if (v21)
            break;
          v31 = v30;
          v32 = v23 + 1;
          swift_release(v26);
          swift_release(v28);
          if ((v31 & 1) != 0)
          {
            v33 = v36;
            if (v32 != v6 || v23 >= v6)
              *v23 = *v24;
            v41 = v24;
            v21 = 0;
            v22 = v25;
          }
          else
          {
            v39 = v22;
            v33 = v36;
            if (v32 < v25 || v23 >= v25 || v32 != v25)
              *v23 = *v22;
            v24 = v6;
            v21 = 0;
          }
          if (v24 > v35)
          {
            --v23;
            v6 = v24;
            if (v22 > v33)
              continue;
          }
          goto LABEL_49;
        }
        swift_release(v26);
        swift_release(v28);
      }
      goto LABEL_49;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
    {
      memmove(__dst, __src, 8 * v10);
      __dst = v36;
    }
    v14 = &__dst[v10];
    v39 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      while (1)
      {
        v15 = *v6;
        v38 = v15;
        v16 = __dst;
        v37 = *__dst;
        v17 = v37;
        swift_retain(v15);
        swift_retain(v17);
        v18 = sub_1001C00F8(&v38, &v37);
        if (v4)
          break;
        v19 = v18;
        swift_release(v15);
        swift_release(v17);
        if ((v19 & 1) != 0)
        {
          v20 = v6 + 1;
          if (v7 < v6 || v7 >= v20 || v7 != v6)
            *v7 = *v6;
          __dst = v16;
        }
        else
        {
          if (v7 != v16)
            *v7 = *v16;
          __dst = v16 + 1;
          v40 = v16 + 1;
          v20 = v6;
        }
        v41 = ++v7;
        if (__dst < v14)
        {
          v6 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        goto LABEL_49;
      }
      swift_release(v15);
      swift_release(v17);
    }
LABEL_49:
    sub_1001DA098(&v41, &v40, &v39);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C7F24(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  swift_bridgeObjectRetain(*v1);
  v4 = sub_1001A88A4(a1);
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v8 = *v1;
  v11 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001AB8A4();
    v8 = v11;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v4);
  sub_1001CBB00(v4, v8);
  *v2 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1001C7FE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(v4);
  v5 = sub_1001A884C(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001ABA30();
    v8 = v12;
  }
  swift_release(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v5));
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v5);
  sub_1001CBD18(v5, v8);
  v10 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

uint64_t sub_1001C80D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100012334(&qword_100298798, &qword_100298790, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006DF4(&qword_100298790);
          v13 = sub_100080990(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for PersistedTranslation(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C82E0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100012334(&qword_100298788, &qword_100298780, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006DF4(&qword_100298780);
          v13 = sub_100080A3C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000A05C(0, (unint64_t *)&unk_10028F220, AVAudioSessionPortDescription_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C84FC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100012334((unint64_t *)&unk_1002986D0, &qword_1002986C8, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006DF4(&qword_1002986C8);
          v13 = sub_1000809E8(v19, i, a3);
          v15 = *v14;
          v16 = swift_retain(*v14);
          ((void (*)(uint64_t **, _QWORD, __n128))v13)(v19, 0, v16);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CommittedTranslationViewModel(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C8708(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100012334(&qword_100298778, &qword_100298770, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006DF4(&qword_100298770);
          v13 = sub_100080A3C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000A05C(0, &qword_100298768, UIWindow_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C8924(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100012334(&qword_100298750, &qword_100298748, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006DF4(&qword_100298748);
          v13 = sub_100080A3C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000A05C(0, &qword_100296CB0, VNObservation_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C8B48()
{
  uint64_t v0;

  return sub_100035B98(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_1001C8B6C()
{
  uint64_t v0;

  sub_10003544C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1001C8B88@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F6F08, (uint64_t)&unk_1001F6F30, a2);
}

uint64_t sub_1001C8BB0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100065F10(a1, (uint64_t)&unk_1001F6F50, (uint64_t)&unk_1001F6F78, a2);
}

uint64_t sub_1001C8BE0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001C8C08()
{
  uint64_t v0;

  sub_1001C54C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001C8C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C8C20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001C8C30()
{
  uint64_t v0;

  sub_10003343C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

_QWORD *sub_1001C8C48(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  void *v25;
  __int128 v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;

  v33 = a4 + 56;
  v5 = -1 << *(_BYTE *)(a4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v10 = 0;
    v8 = 0;
LABEL_39:
    *result = a4;
    result[1] = v33;
    result[2] = ~v5;
    result[3] = v10;
    result[4] = v7;
    return (_QWORD *)v8;
  }
  v8 = a3;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v9 = a2;
  v30 = -1 << *(_BYTE *)(a4 + 32);
  v31 = result;
  v10 = 0;
  v11 = 0;
  v32 = (unint64_t)(63 - v5) >> 6;
  if (!v7)
    goto LABEL_9;
LABEL_8:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v10 << 6);
  while (1)
  {
    ++v11;
    v17 = *(_QWORD *)(a4 + 48) + 88 * v13;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 40);
    v23 = *(_BYTE *)(v17 + 64);
    v24 = *(void **)(v17 + 72);
    v25 = *(void **)(v17 + 80);
    v26 = *(_OWORD *)(v17 + 48);
    *(_QWORD *)v9 = *(_QWORD *)v17;
    *(_QWORD *)(v9 + 8) = v18;
    *(_QWORD *)(v9 + 16) = v19;
    *(_QWORD *)(v9 + 24) = v20;
    *(_QWORD *)(v9 + 32) = v21;
    *(_QWORD *)(v9 + 40) = v22;
    *(_OWORD *)(v9 + 48) = v26;
    *(_BYTE *)(v9 + 64) = v23;
    *(_QWORD *)(v9 + 72) = v24;
    *(_QWORD *)(v9 + 80) = v25;
    if (v11 == v8)
    {
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v22);
      v28 = v24;
      v29 = v25;
      goto LABEL_38;
    }
    v9 += 88;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    v27 = v24;
    result = v25;
    if (v7)
      goto LABEL_8;
LABEL_9:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v14 >= v32)
      goto LABEL_33;
    v15 = *(_QWORD *)(v33 + 8 * v14);
    if (!v15)
    {
      v10 += 2;
      if (v14 + 1 >= v32)
      {
        v7 = 0;
        v10 = v14;
      }
      else
      {
        v15 = *(_QWORD *)(v33 + 8 * v10);
        if (v15)
          goto LABEL_14;
        v16 = v14 + 2;
        if (v14 + 2 >= v32)
          goto LABEL_33;
        v15 = *(_QWORD *)(v33 + 8 * v16);
        if (v15)
        {
LABEL_17:
          v14 = v16;
          goto LABEL_18;
        }
        v10 = v14 + 3;
        if (v14 + 3 < v32)
        {
          v15 = *(_QWORD *)(v33 + 8 * v10);
          if (v15)
          {
LABEL_14:
            v14 = v10;
            goto LABEL_18;
          }
          v16 = v14 + 4;
          if (v14 + 4 >= v32)
          {
LABEL_33:
            v7 = 0;
            goto LABEL_37;
          }
          v15 = *(_QWORD *)(v33 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              v14 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_42;
              if (v14 >= v32)
              {
                v7 = 0;
                v10 = v32 - 1;
                goto LABEL_37;
              }
              v15 = *(_QWORD *)(v33 + 8 * v14);
              ++v16;
              if (v15)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v7 = 0;
        v10 = v14 + 2;
      }
LABEL_37:
      v8 = v11;
LABEL_38:
      v5 = v30;
      result = v31;
      goto LABEL_39;
    }
LABEL_18:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v10 = v14;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1001C8EE0(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_1001C9074(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v11;

  v2 = (a1 | a2) == 0;
  if (a1 && a2)
  {
    KeyPath = swift_getKeyPath(&unk_1001F6F98);
    v11 = a1;
    v6 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
    swift_retain(a1);
    swift_retain(a2);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v6);
    swift_release(KeyPath);
    v7 = *(void **)(a1 + 72);
    v8 = swift_getKeyPath(&unk_1001F6F98);
    v11 = a2;
    v9 = v7;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v8, v6);
    v2 = (unint64_t)objc_msgSend(v9, "isEqual:", *(_QWORD *)(a2 + 72), swift_release(v8).n128_f64[0]);
    swift_release(a1);
    swift_release(a2);

  }
  return v2;
}

_QWORD *sub_1001C91A0(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_37;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    v44 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v3);
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      v5 = 0;
      v36 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore;
      v37 = v2 & 0xC000000000000001;
      v33 = v2 + 32;
      v34 = v3;
      v35 = v2;
      do
      {
        if (v5 == v3)
          goto LABEL_36;
        if (v37)
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
        else
          v11 = *(id *)(v33 + 8 * v5);
        v12 = v11;
        v13 = *(_QWORD *)(a2 + v36);
        v39 = v5;
        if ((unint64_t)v13 >> 62)
        {
          if (v13 < 0)
            v30 = *(_QWORD *)(a2 + v36);
          else
            v30 = v13 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v13, 2);
          v31 = v12;
          v14 = _CocoaArrayWrapper.endIndex.getter(v30);
          if (v14)
          {
LABEL_14:
            v41 = v13;
            v42 = v13 & 0xC000000000000001;
            v16 = 4;
            v40 = v14;
            do
            {
              v17 = v16 - 4;
              if (v42)
              {
                v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v13);
                v18 = v16 - 3;
                if (__OFADD__(v17, 1))
                  goto LABEL_35;
              }
              else
              {
                v6 = *(_QWORD *)(v13 + 8 * v16);
                swift_retain(v6);
                v18 = v16 - 3;
                if (__OFADD__(v17, 1))
                {
LABEL_35:
                  __break(1u);
LABEL_36:
                  __break(1u);
LABEL_37:
                  if (v2 < 0)
                    v32 = v2;
                  else
                    v32 = v2 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(v2);
                  v3 = _CocoaArrayWrapper.endIndex.getter(v32);
                  swift_bridgeObjectRelease();
                  goto LABEL_3;
                }
              }
              KeyPath = swift_getKeyPath(&unk_1001F6F98);
              v43 = v6;
              v20 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
              ObservationRegistrar.access<A, B>(_:keyPath:)(&v43, KeyPath, v20);
              v21 = objc_msgSend(*(id *)(v6 + 72), "identifier", swift_release(KeyPath).n128_f64[0]);
              v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
              v24 = v23;

              v2 = (uint64_t)v12;
              v25 = objc_msgSend(v12, "identifier");
              v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
              v28 = v27;

              if (v22 == v26 && v24 == v28)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_27:
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                goto LABEL_7;
              }
              v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v28, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v13 = v41;
              if ((v29 & 1) != 0)
              {

                goto LABEL_27;
              }
              swift_release(v6);
              ++v16;
              v12 = (void *)v2;
            }
            while (v18 != v40);
          }
        }
        else
        {
          v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n(v13, 2);
          v15 = v12;
          if (v14)
            goto LABEL_14;
        }

        swift_bridgeObjectRelease_n(v13, 2);
        v6 = sub_1001C0738(v12);

LABEL_7:
        v3 = v34;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        v8 = v44[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        v9 = v8;
        v5 = v39 + 1;
        v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v6);
        specialized ContiguousArray._endMutation()(v10);
        v2 = v35;
      }
      while (v39 + 1 != v34);
      return v44;
    }
  }
  return result;
}

unint64_t sub_1001C951C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002628C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void sub_1001C9564()
{
  sub_1001C41D8(1u, 0);
}

uint64_t sub_1001C958C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1001C95B0(void *a1)
{
  uint64_t v1;
  double v2;

  if ((*(_BYTE *)(v1 + 24) & 1) == 0)
  {
    v2 = *(double *)(v1 + 16);
    if (objc_msgSend(a1, "isCancelled"))
      sub_1001C3BA8(1u, 1, v2);
  }
}

void sub_1001C9600()
{
  _BYTE *v0;
  void *v1;
  _QWORD *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_collectionView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dataSource] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v1 = (void *)sub_1000E2770((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v1 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_observers] = v1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore] = _swiftEmptyArrayStorage;
  v2 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode];
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryController] = 0;
  v3 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryHighlightRect];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v3[32] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_dictionaryTextView] = 0;
  v4 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pendingDictionaryModeIdentifier];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_entryCardStaticIdentifier];
  *v5 = 0xD000000000000018;
  v5[1] = 0x8000000100202700;
  v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_pinComposeCardToKeyboard] = 0;
  v6 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_bottomInsetReasonToHeightMap;
  *(_QWORD *)&v0[v6] = sub_1001A4F44((uint64_t)_swiftEmptyArrayStorage);
  v7 = &v0[OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_lastKnownKeyboardFrame];
  *v7 = 0u;
  v7[1] = 0u;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001001F88D0, "SequoiaTranslator/TranslationListController.swift", 49, 2, 172, 0);
  __break(1u);
}

double sub_1001C9778()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  double result;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode);
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_viewModelIdentifierInDictionaryMode
                 + 8);
  *v1 = 0;
  v1[1] = 0;
  if (v2)
  {
    sub_1001BB210();
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

uint64_t sub_1001C97EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001C9868(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for IndexPath(0);
  sub_1001C5BCC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001C98AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001C98D8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;

  sub_1001C4B98(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1001C98E0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C9904(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_1001C9918()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001C993C()
{
  uint64_t v0;

  sub_1001C47A0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001C9950()
{
  uint64_t v0;

  return sub_1000558D0(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1001C996C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

void *sub_1001C9990()
{
  uint64_t v0;

  return sub_1001C3894(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

void sub_1001C99A4(char a1)
{
  uint64_t v1;

  sub_1001C3928(a1, *(_QWORD *)(v1 + 16));
}

void sub_1001C99AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  sub_1001C0DC4(a1, a2, a3, a4, a5, a6, a7, v7);
}

void sub_1001C99B4(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1001C17BC(a1, a2, v2);
}

uint64_t sub_1001C99D4()
{
  return sub_1001C9A14((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100035AE0);
}

uint64_t sub_1001C99F8()
{
  return sub_1001C9A14((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100035794);
}

uint64_t sub_1001C9A14(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

unint64_t sub_1001C9A38()
{
  unint64_t result;

  result = qword_1002986C0;
  if (!qword_1002986C0)
  {
    result = swift_getWitnessTable(&unk_1001F6D44, &type metadata for TranslationListController.TranslationSection);
    atomic_store(result, (unint64_t *)&qword_1002986C0);
  }
  return result;
}

uint64_t sub_1001C9A7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 27, 7);
}

void sub_1001C9AA0()
{
  uint64_t v0;

  sub_1001C045C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25), *(_BYTE *)(v0 + 26));
}

uint64_t sub_1001C9AB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001C9AD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_1001BE9D4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_1001C9AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1001BEF3C(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1001C9AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = sub_100006DF4((uint64_t *)&unk_1002986E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1001C9B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(sub_100006DF4((uint64_t *)&unk_1002986E0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  return sub_1001BF4B8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), v4 + ((v10 + 24) & ~v10), v4 + ((*(_QWORD *)(v9 + 64) + v10 + ((v10 + 24) & ~v10)) & ~v10));
}

uint64_t sub_1001C9C00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C9C24@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1001BF26C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1001C9C34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001BECF0(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void *sub_1001C9C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001BE3F8(a1, a2, v2);
}

char *sub_1001C9C44(uint64_t a1)
{
  uint64_t v1;

  return sub_1001BE14C(a1, v1);
}

uint64_t *assignWithCopy for TranslationListController.TranslationContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t *assignWithTake for TranslationListController.TranslationContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranslationListController.TranslationContent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TranslationListController.TranslationContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_1001C9D58(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TranslationListController.TranslationContent()
{
  return &type metadata for TranslationListController.TranslationContent;
}

unint64_t sub_1001C9D8C()
{
  unint64_t result;

  result = qword_1002987A0;
  if (!qword_1002987A0)
  {
    result = swift_getWitnessTable("ѝ\a", &type metadata for TranslationListController.TranslationContent);
    atomic_store(result, (unint64_t *)&qword_1002987A0);
  }
  return result;
}

void sub_1001C9DD0(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1001BC758(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1001C9DD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C9E04(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001BC7B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1001C9E0C(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1001BC8C0(a1, v1);
}

void sub_1001C9E14()
{
  sub_1001C2850();
}

void sub_1001C9E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001BCD38(a1, a2, v2);
}

void sub_1001C9E3C()
{
  uint64_t v0;

  sub_1001BCAD4(*(char **)(v0 + 16), *(_BYTE *)(v0 + 32), *(double *)(v0 + 24));
}

void sub_1001C9EAC()
{
  sub_1001C8B6C();
}

uint64_t sub_1001C9EC0()
{
  return sub_1001C8B48();
}

uint64_t sub_1001C9ED4()
{
  return sub_1001C9950();
}

uint64_t sub_1001C9EE8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F72A0);
  v2 = swift_getKeyPath(&unk_1001F72C8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1001C9F58()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F7258);
  v2 = swift_getKeyPath(&unk_1001F7280);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1001C9FC8()
{
  return sub_1001CAC74();
}

void sub_1001C9FE8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  void *v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  _BYTE v29[32];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v8);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = objc_msgSend(a1, "favoriteDate");
  if (v11)
  {
    v12 = v11;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v10, v7, v4);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
    {
      sub_10000A020((uint64_t)v10, &qword_1002948B0);
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(a1, "setSessionID:", v13);

      v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
      v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
      sub_100023AF4((_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v14);
      dispatch thunk of TranslationStore.save()(v14, v15);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  sub_10000A020((uint64_t)v10, &qword_1002948B0);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  sub_100023AF4((_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v16);
  dispatch thunk of TranslationStore.deleteBackground(_:completion:)(a1, nullsub_1, 0, v16, v17);
LABEL_6:
  KeyPath = swift_getKeyPath(&unk_1001F72A0);
  v19 = swift_getKeyPath(&unk_1001F72C8);
  v20 = a1;
  v21 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v29, v2, KeyPath, v19);
  v23 = v22;
  v24 = sub_1001A4584(v22, v20);

  v25 = *v23;
  if ((unint64_t)*v23 >> 62)
  {
    if (v25 < 0)
      v27 = *v23;
    else
      v27 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v23);
    v26 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v25);
    if (v26 >= v24)
      goto LABEL_8;
  }
  else
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v26 >= v24)
    {
LABEL_8:
      sub_1001CCB50(v24, v26, (uint64_t (*)(_QWORD))&type metadata accessor for PersistedTranslation);
      v21(v29, 0);
      swift_release(v19);
      swift_release(KeyPath);
      return;
    }
  }
  __break(1u);
}

void sub_1001CA2AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t Strong;
  unint64_t v68;
  id v69;
  uint64_t v70;
  __int128 v71;
  _BYTE v72[16];
  unint64_t v73;
  _QWORD v74[2];
  uint64_t v75;
  _QWORD v76[2];
  char v77[32];

  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_observations);
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_observations, v77, 0, 0);
  v53 = *v2 + 64;
  v3 = 1 << *(_BYTE *)(*v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v59 = v4 & *(_QWORD *)(*v2 + 64);
  v5 = (unint64_t)(v3 + 63) >> 6;
  v50 = v5 - 1;
  v6 = swift_bridgeObjectRetain(*v2);
  v7 = 0;
  v54 = v5;
  v57 = v6;
  v51 = v5 - 5;
  v52 = v6 + 104;
  v62 = v2;
  while (1)
  {
    if (v59)
    {
      v8 = __clz(__rbit64(v59));
      v58 = v7;
      v59 &= v59 - 1;
      v9 = v8 | (v7 << 6);
LABEL_8:
      v10 = *(_QWORD *)(v57 + 56);
      v73 = *(_QWORD *)(*(_QWORD *)(v57 + 48) + 8 * v9);
      sub_1001ACB3C(v10 + 16 * v9, (uint64_t)v74);
      goto LABEL_15;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_81;
    if (v11 >= v54)
    {
      v58 = v7;
    }
    else
    {
      v12 = *(_QWORD *)(v53 + 8 * v11);
      if (v12)
        goto LABEL_12;
      if ((uint64_t)(v7 + 2) >= v54)
      {
        v58 = v7 + 1;
      }
      else
      {
        v12 = *(_QWORD *)(v53 + 8 * (v7 + 2));
        if (v12)
        {
          v11 = v7 + 2;
LABEL_12:
          v58 = v11;
          v59 = (v12 - 1) & v12;
          v9 = __clz(__rbit64(v12)) + (v11 << 6);
          goto LABEL_8;
        }
        if ((uint64_t)(v7 + 3) >= v54)
        {
          v58 = v7 + 2;
        }
        else
        {
          v12 = *(_QWORD *)(v53 + 8 * (v7 + 3));
          if (v12)
          {
            v11 = v7 + 3;
            goto LABEL_12;
          }
          v11 = v7 + 4;
          if ((uint64_t)(v7 + 4) >= v54)
          {
            v58 = v7 + 3;
          }
          else
          {
            v12 = *(_QWORD *)(v53 + 8 * v11);
            if (v12)
              goto LABEL_12;
            while (v51 != v7)
            {
              v12 = *(_QWORD *)(v52 + 8 * v7++);
              if (v12)
              {
                v11 = v7 + 4;
                goto LABEL_12;
              }
            }
            v58 = v50;
          }
        }
      }
    }
    v59 = 0;
    v73 = 0;
    v74[0] = 0;
    v74[1] = 1;
LABEL_15:
    sub_1001CC8C4((uint64_t)&v73, (uint64_t)&v75);
    if (v76[0])
      v13 = 0;
    else
      v13 = v76[1] == 1;
    if (v13)
    {
LABEL_78:
      swift_release(v57);
      return;
    }
    v14 = v75;
    sub_1001ACB78((uint64_t)v76, (uint64_t)v72);
    Strong = swift_unknownObjectWeakLoadStrong(v72);
    if (Strong)
      break;
    swift_beginAccess(v2, &v73, 33, 0);
    v43 = sub_1001A881C(v14);
    if ((v44 & 1) != 0)
    {
      v45 = v43;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v47 = *v2;
      v70 = *v2;
      *v2 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001AB6E4();
        v47 = v70;
      }
      sub_1001ACB78(*(_QWORD *)(v47 + 56) + 16 * v45, (uint64_t)&v71);
      sub_1001CB944(v45, v47);
      v48 = *v2;
      *v2 = v47;
      swift_bridgeObjectRelease(v48);
    }
    else
    {
      v71 = xmmword_1001ED9D0;
    }
    sub_10000A020((uint64_t)&v71, &qword_100298810);
    swift_endAccess(&v73);
LABEL_5:
    sub_100011194((uint64_t)v72);
    v7 = v58;
  }
  KeyPath = swift_getKeyPath(&unk_1001F72A0);
  v16 = swift_getKeyPath(&unk_1001F72C8);
  static Published.subscript.getter(&v73, v56, KeyPath);
  swift_release(v16);
  swift_release(KeyPath);
  v17 = v73;
  swift_bridgeObjectRetain(a1);
  v18 = (uint64_t)sub_1001CC918(v17, a1);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v17);
  if (!((unint64_t)v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19)
      goto LABEL_22;
    goto LABEL_4;
  }
  if (v18 < 0)
    v49 = v18;
  else
    v49 = v18 & 0xFFFFFFFFFFFFFF8;
  v19 = _CocoaArrayWrapper.endIndex.getter(v49);
  if (!v19)
  {
LABEL_4:
    swift_bridgeObjectRelease(v18);
    swift_unknownObjectRelease(Strong);
    goto LABEL_5;
  }
LABEL_22:
  v20 = 0;
  v65 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationListController_localDataStore;
  v66 = v18 & 0xC000000000000001;
  v60 = v18 + 32;
  v61 = v18 & 0xFFFFFFFFFFFFFF8;
  v63 = v19;
  v64 = v18;
  while (1)
  {
    if (v66)
    {
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
    }
    else
    {
      if (v20 >= *(_QWORD *)(v61 + 16))
        goto LABEL_80;
      v22 = *(id *)(v60 + 8 * v20);
    }
    v69 = v22;
    v23 = __OFADD__(v20, 1);
    v24 = v20 + 1;
    if (v23)
      break;
    v68 = v24;
    v25 = *(_QWORD *)(Strong + v65);
    if ((unint64_t)v25 >> 62)
    {
      if (v25 < 0)
        v42 = *(_QWORD *)(Strong + v65);
      else
        v42 = v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(Strong + v65), 2);
      v26 = _CocoaArrayWrapper.endIndex.getter(v42);
      if (v26)
      {
LABEL_32:
        v27 = 4;
        do
        {
          v28 = v27 - 4;
          if ((v25 & 0xC000000000000001) != 0)
          {
            v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v25);
            v30 = v27 - 3;
            if (__OFADD__(v28, 1))
              goto LABEL_77;
          }
          else
          {
            v29 = *(_QWORD *)(v25 + 8 * v27);
            swift_retain(v29);
            v30 = v27 - 3;
            if (__OFADD__(v28, 1))
            {
LABEL_77:
              __break(1u);
              goto LABEL_78;
            }
          }
          v31 = swift_getKeyPath(&unk_1001F72E8);
          v73 = v29;
          v32 = sub_100007D5C(&qword_1002908B0, type metadata accessor for CommittedTranslationViewModel, (uint64_t)&unk_1001E7EE0);
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v73, v31, v32);
          swift_release(v31);
          v33 = objc_msgSend(*(id *)(v29 + 72), "identifier");
          v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          v36 = v35;

          v37 = objc_msgSend(v69, "identifier");
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

          if (v34 == v38 && v36 == v40)
          {
            swift_bridgeObjectRelease_n(v25, 2);
LABEL_45:
            v2 = v62;
            v21 = v63;
            v18 = v64;
            v20 = v68;
            swift_bridgeObjectRelease_n(v36, 2);
            sub_100036650(v69, 0);
            swift_release(v29);

            goto LABEL_24;
          }
          v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v38, v40, 0);
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v36);
          if ((v41 & 1) != 0)
          {
            v36 = v25;
            goto LABEL_45;
          }
          swift_release(v29);
          ++v27;
        }
        while (v30 != v26);
      }
    }
    else
    {
      v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(*(_QWORD *)(Strong + v65), 2);
      if (v26)
        goto LABEL_32;
    }

    swift_bridgeObjectRelease_n(v25, 2);
    v2 = v62;
    v21 = v63;
    v18 = v64;
    v20 = v68;
LABEL_24:
    if (v20 == v21)
      goto LABEL_4;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
}

void sub_1001CA91C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  sub_100023AF4((_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v2);
  KeyPath = swift_getKeyPath(&unk_1001F7258);
  v5 = swift_getKeyPath(&unk_1001F7280);
  static Published.subscript.getter(&v25, v0, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = v26;
  v7 = dispatch thunk of TranslationStore.translations(with:)(v25, v26, v2, v3);
  swift_bridgeObjectRelease(v6);
  v8 = swift_getKeyPath(&unk_1001F72A0);
  v9 = swift_getKeyPath(&unk_1001F72C8);
  v25 = v7;
  swift_retain(v1);
  static Published.subscript.setter(&v25, v1, v8, v9);
  if (qword_10028A460 != -1)
    swift_once(&qword_10028A460, sub_100121094);
  v10 = type metadata accessor for Logger(0);
  sub_10000F66C(v10, (uint64_t)qword_1002AA428);
  v11 = swift_retain_n(v1, 4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 134349314;
    v16 = swift_getKeyPath(&unk_1001F72A0);
    v17 = swift_getKeyPath(&unk_1001F72C8);
    static Published.subscript.getter(&v25, v1, v16);
    swift_release(v17);
    swift_release(v16);
    v18 = v25;
    if (v25 >> 62)
    {
      if ((v25 & 0x8000000000000000) != 0)
        v23 = v25;
      else
        v23 = v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
      v19 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v19 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_release(v1);
    swift_bridgeObjectRelease(v18);
    v25 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4);
    swift_release(v1);
    *(_WORD *)(v14 + 12) = 2082;
    v20 = swift_getKeyPath(&unk_1001F7258);
    v21 = swift_getKeyPath(&unk_1001F7280);
    static Published.subscript.getter(&v25, v1, v20);
    swift_release(v21);
    swift_release(v20);
    v22 = v26;
    v25 = sub_1001A7FE4(v25, v26, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 14);
    swift_bridgeObjectRelease(v22);
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Loaded %{public}ld translations to session with ID: %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_release_n(v1, 4);
  }

}

uint64_t sub_1001CAC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  _QWORD v87[6];

  v1 = v0;
  result = Notification.userInfo.getter();
  if (result)
  {
    v3 = result;
    *(_QWORD *)&v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSRefreshedObjectsKey);
    *((_QWORD *)&v84 + 1) = v4;
    AnyHashable.init<A>(_:)(v87, &v84, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v3 + 16) && (v5 = sub_1001A87EC((uint64_t)v87), (v6 & 1) != 0))
    {
      sub_10000A0EC(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v84);
    }
    else
    {
      v84 = 0u;
      v85 = 0u;
    }
    swift_bridgeObjectRelease(v3);
    sub_10005DEC0((uint64_t)v87);
    if (!*((_QWORD *)&v85 + 1))
      return sub_10000A020((uint64_t)&v84, (uint64_t *)&unk_10028C0B0);
    sub_10003EA2C(&v84, v86);
    sub_10000A0EC((uint64_t)v86, (uint64_t)v87);
    v7 = sub_100006DF4(&qword_1002989F0);
    if (!swift_dynamicCast(&v84, v87, (char *)&type metadata for Any + 8, v7, 6))
    {
      if (qword_10028A418 != -1)
LABEL_90:
        swift_once(&qword_10028A418, sub_100120F48);
      v21 = type metadata accessor for Logger(0);
      sub_10000F66C(v21, (uint64_t)qword_1002AA350);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
          v24,
          2u);
        swift_slowDealloc(v24, -1, -1);
      }

      return sub_100009C08(v86);
    }
    v8 = v84;
    v9 = v84 & 0xC000000000000001;
    if ((v84 & 0xC000000000000001) != 0)
    {
      if ((uint64_t)v84 < 0)
        v10 = v84;
      else
        v10 = v84 & 0xFFFFFFFFFFFFFF8;
      if (__CocoaSet.count.getter(v10))
      {
LABEL_13:
        KeyPath = swift_getKeyPath(&unk_1001F72A0);
        v12 = swift_getKeyPath(&unk_1001F72C8);
        static Published.subscript.getter(v87, v1, KeyPath);
        swift_release(v12);
        v13 = (_QWORD *)swift_release(KeyPath);
        *(_QWORD *)&v84 = v87[0];
        if (v9)
        {
          if (v8 < 0)
            v14 = v8;
          else
            v14 = v8 & 0xFFFFFFFFFFFFFF8;
          v15 = __CocoaSet.makeIterator()(v14);
          v16 = type metadata accessor for PersistedTranslation(0);
          v17 = sub_100007D5C(&qword_10028FED0, (uint64_t (*)(uint64_t))&type metadata accessor for PersistedTranslation, (uint64_t)&protocol conformance descriptor for NSObject);
          v13 = Set.Iterator.init(_cocoa:)(v87, v15, v16, v17);
          v8 = v87[0];
          v76 = v87[1];
          v18 = v87[2];
          v19 = v87[3];
          v20 = v87[4];
        }
        else
        {
          v19 = 0;
          v25 = -1 << *(_BYTE *)(v8 + 32);
          v76 = v8 + 56;
          v18 = ~v25;
          v26 = -v25;
          if (v26 < 64)
            v27 = ~(-1 << v26);
          else
            v27 = -1;
          v20 = v27 & *(_QWORD *)(v8 + 56);
        }
        v73 = v18;
        v74 = v1;
        v75 = (unint64_t)(v18 + 64) >> 6;
        v77 = _swiftEmptyArrayStorage;
        v78 = v8;
        if ((v8 & 0x8000000000000000) == 0)
          goto LABEL_32;
LABEL_50:
        v35 = __CocoaSet.Iterator.next()(v13);
        if (v35)
        {
          v36 = v35;
          v82 = v35;
          v37 = type metadata accessor for PersistedTranslation(0);
          swift_unknownObjectRetain(v36);
          swift_dynamicCast(&v83, &v82, (char *)&type metadata for Swift.AnyObject + 8, v37, 7);
          v34 = v83;
          swift_unknownObjectRelease(v36);
          v30 = v19;
          v28 = v20;
          while (v34)
          {
            v79 = v28;
            v80 = v30;
            v38 = v84;
            if ((unint64_t)v84 >> 62)
            {
              if ((uint64_t)v84 < 0)
                v69 = v84;
              else
                v69 = v84 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v84);
              v39 = _CocoaArrayWrapper.endIndex.getter(v69);
              if (!v39)
              {
LABEL_31:
                swift_bridgeObjectRelease(v38);

                v20 = v79;
                v19 = v80;
                v8 = v78;
                if (v78 < 0)
                  goto LABEL_50;
                goto LABEL_32;
              }
            }
            else
            {
              v39 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v84);
              if (!v39)
                goto LABEL_31;
            }
            v81 = v39;
            v40 = 4;
            while (1)
            {
              v41 = v40 - 4;
              if ((v38 & 0xC000000000000001) != 0)
                v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40 - 4, v38);
              else
                v42 = *(id *)(v38 + 8 * v40);
              v43 = v42;
              v44 = objc_msgSend(v42, "identifier", v73);
              v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
              v47 = v46;

              v48 = v34;
              v49 = objc_msgSend(v34, "identifier");
              v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
              v52 = v51;

              if (v45 == v50 && v47 == v52)
              {
                swift_bridgeObjectRelease(v47);

                swift_bridgeObjectRelease(v38);
                goto LABEL_68;
              }
              v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v50, v52, 0);
              swift_bridgeObjectRelease(v52);
              swift_bridgeObjectRelease(v47);

              if ((v54 & 1) != 0)
                break;
              v55 = v40 - 3;
              if (__OFADD__(v41, 1))
              {
                __break(1u);
LABEL_88:
                __break(1u);
                goto LABEL_89;
              }
              v34 = v48;
              ++v40;
              if (v55 == v81)
                goto LABEL_31;
            }
            v47 = v38;
LABEL_68:
            swift_bridgeObjectRelease(v47);
            v56 = v84;
            v57 = v48;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v56)
              || v56 < 0
              || (v56 & 0x4000000000000000) != 0)
            {
              v56 = sub_1000808EC(v56);
              *(_QWORD *)&v84 = v56;
            }
            v58 = v56 & 0xFFFFFFFFFFFFFF8;
            if (v41 >= *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_88;
            v59 = *(void **)(v58 + 8 * v40);
            *(_QWORD *)(v58 + 8 * v40) = v57;

            specialized Array._endMutation()(v60);
            v61 = objc_msgSend(v57, "identifier");
            v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v64 = v63;

            v65 = v77;
            if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) == 0)
              v65 = sub_1001A77DC(0, v77[2] + 1, 1, v77);
            v67 = v65[2];
            v66 = v65[3];
            if (v67 >= v66 >> 1)
              v65 = sub_1001A77DC((_QWORD *)(v66 > 1), v67 + 1, 1, v65);
            v65[2] = v67 + 1;
            v77 = v65;
            v68 = &v65[2 * v67];
            v68[4] = v62;
            v68[5] = v64;

            v8 = v78;
            v20 = v79;
            v19 = v80;
            if (v78 < 0)
              goto LABEL_50;
LABEL_32:
            if (v20)
            {
              v28 = (v20 - 1) & v20;
              v29 = __clz(__rbit64(v20)) | (v19 << 6);
              v30 = v19;
            }
            else
            {
              v31 = v19 + 1;
              if (__OFADD__(v19, 1))
              {
LABEL_89:
                __break(1u);
                goto LABEL_90;
              }
              if (v31 >= v75)
                break;
              v32 = *(_QWORD *)(v76 + 8 * v31);
              v30 = v19 + 1;
              if (!v32)
              {
                v30 = v19 + 2;
                if (v19 + 2 >= v75)
                  break;
                v32 = *(_QWORD *)(v76 + 8 * v30);
                if (!v32)
                {
                  v30 = v19 + 3;
                  if (v19 + 3 >= v75)
                    break;
                  v32 = *(_QWORD *)(v76 + 8 * v30);
                  if (!v32)
                  {
                    v30 = v19 + 4;
                    if (v19 + 4 >= v75)
                      break;
                    v32 = *(_QWORD *)(v76 + 8 * v30);
                    if (!v32)
                    {
                      v33 = v19 + 5;
                      while (v75 != v33)
                      {
                        v32 = *(_QWORD *)(v76 + 8 * v33++);
                        if (v32)
                        {
                          v30 = v33 - 1;
                          goto LABEL_47;
                        }
                      }
                      break;
                    }
                  }
                }
              }
LABEL_47:
              v28 = (v32 - 1) & v32;
              v29 = __clz(__rbit64(v32)) + (v30 << 6);
            }
            v34 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v29);
          }
        }
        sub_10000F7C4(v8);
        v70 = (void *)v84;
        v71 = swift_getKeyPath(&unk_1001F72A0);
        v72 = swift_getKeyPath(&unk_1001F72C8);
        v83 = v70;
        swift_retain(v74);
        static Published.subscript.setter(&v83, v74, v71, v72);
        sub_1001CA2AC(v77);
        swift_bridgeObjectRelease(v77);
        return sub_100009C08(v86);
      }
    }
    else if (*(_QWORD *)(v84 + 16))
    {
      goto LABEL_13;
    }
    sub_100009C08(v86);
    return swift_bridgeObjectRelease(v8);
  }
  return result;
}

uint64_t sub_1001CB3F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__translations;
  v2 = sub_100006DF4((uint64_t *)&unk_100295410);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100009C08((_QWORD *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store));
  v3 = v0 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD__currentID;
  v4 = sub_100006DF4(&qword_10028B5A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001CB494()
{
  return type metadata accessor for TranslationSession_RD(0);
}

uint64_t type metadata accessor for TranslationSession_RD(uint64_t a1)
{
  uint64_t result;

  result = qword_100298858;
  if (!qword_100298858)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslationSession_RD);
  return result;
}

void sub_1001CB4D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_1001A3F44(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "(";
    sub_1001CB584();
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

void sub_1001CB584()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10028B3E8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10028B3E8);
  }
}

uint64_t initializeWithCopy for TranslationSession_RD.Observation(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for TranslationSession_RD.Observation(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for TranslationSession_RD.Observation(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for TranslationSession_RD.Observation(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for TranslationSession_RD.Observation(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TranslationSession_RD.Observation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranslationSession_RD.Observation()
{
  return &type metadata for TranslationSession_RD.Observation;
}

uint64_t sub_1001CB718@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for TranslationSession_RD(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001CB754@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F7258);
  v5 = swift_getKeyPath(&unk_1001F7280);
  static Published.subscript.getter(v8, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  v7 = v8[1];
  *a2 = v8[0];
  a2[1] = v7;
  return result;
}

uint64_t sub_1001CB7D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F7258);
  v6 = swift_getKeyPath(&unk_1001F7280);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_1001CB850@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F72A0);
  v5 = swift_getKeyPath(&unk_1001F72C8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1001CB8CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F72A0);
  v5 = swift_getKeyPath(&unk_1001F72C8);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

unint64_t sub_1001CB944(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        result = v15 + 16 * v3;
        if (v3 < (uint64_t)v6 || result >= v15 + 16 * v6 + 16)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v16 = v3 == v6;
          v3 = v6;
          if (v16)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001CBB00(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v25, *(_QWORD *)(a2 + 40));
        if (v9)
        {
          if (v9 == 1)
          {
            v10 = 0xEA00000000007972;
            v11 = 0x616E6F6974636964;
          }
          else
          {
            v10 = 0xEA0000000000656ELL;
            v11 = 0x6F68706F7263696DLL;
          }
        }
        else
        {
          v10 = 0xE800000000000000;
          v11 = 0x6472616F6279656BLL;
        }
        String.hash(into:)(v25, v11, v10);
        swift_bridgeObjectRelease(v10);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_16;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_16:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_BYTE *)(v13 + v3);
          v15 = (_BYTE *)(v13 + v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_QWORD *)(v16 + 8 * v3);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1001CBD18(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_retain(v11);
        sub_1000FC538((uint64_t)v27);
        v12 = Hasher._finalize()();
        swift_release(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9)
            goto LABEL_5;
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = v17 + 24 * v3;
          v19 = (__int128 *)(v17 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v18 >= (unint64_t)v19 + 24 || (v20 = v3 == v6, v3 = v6, !v20))
          {
            v10 = *v19;
            *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v23 = *v21;
    v22 = (-1 << a1) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_1001CBF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for PersistedTranslation(0);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    v17 = (char *)swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1001CC1DC(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1001A7A50(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[11 * a1 + 4];
  result = (char *)swift_arrayDestroy(v14, v8, &type metadata for AudioDevice);
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 88);
    v19 = (char *)&v5[11 * a2 + 4];
    if ((char *)(v14 + 88) != v19 || result >= &v19[88 * v18])
      result = (char *)memmove(result, v19, 88 * v18);
    v20 = v5[2];
    v17 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      v22 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 48) = v22;
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(a3 + 64);
      *(_QWORD *)(v14 + 80) = *(_QWORD *)(a3 + 80);
      v23 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v23;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001CC380(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1001A7FD0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = type metadata accessor for StreamingRequestInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v28 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    sub_10009761C(a3, v18);
  return sub_10000A020(a3, &qword_1002973E8);
}

void sub_1001CC54C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD v40[4];
  _QWORD v41[5];
  _QWORD v42[5];

  v39 = a5;
  v37 = a4;
  v38 = a3;
  v14 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42[3] = a6;
  v42[4] = a8;
  v21 = sub_1000122F8(v42);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(v21, a1, a6);
  v41[3] = a7;
  v41[4] = a9;
  v22 = sub_1000122F8(v41);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v22, a2, a7);
  v23 = sub_10001D948();
  *v20 = static OS_dispatch_queue.main.getter(v23);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v24 = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v24 & 1) != 0)
  {
    v25 = v39;
    v26 = *(_QWORD *)(v39 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
    v27 = *(_QWORD *)(v39 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
    sub_100023AF4((_QWORD *)(v39 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v26);
    v28 = (void *)dispatch thunk of TranslationStore.insert(speech:translationResult:isFavorite:)(v42, v41, v38 & 1, v26, v27);
    if (!v28)
    {
LABEL_5:
      sub_100009C08(v42);
      sub_100009C08(v41);
      return;
    }
    KeyPath = swift_getKeyPath(&unk_1001F7258);
    v30 = swift_getKeyPath(&unk_1001F7280);
    static Published.subscript.getter(v40, v25, KeyPath);
    swift_release(KeyPath);
    swift_release(v30);
    v31 = v40[1];
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setSessionID:", v32, swift_bridgeObjectRelease(v31).n128_f64[0]);

    sub_10001D3C8(v37, (uint64_t)v16);
    dispatch thunk of PersistedTranslation.selfLoggingInvocationId.setter(v16);
    a1 = swift_getKeyPath(&unk_1001F72A0);
    v16 = (char *)swift_getKeyPath(&unk_1001F72C8);
    v24 = v28;
    v18 = static Published.subscript.modify(v40, v25, a1, v16);
    a2 = *v33;
    if (!((unint64_t)*v33 >> 62))
    {
LABEL_4:
      sub_1001CBF04(0, 0, v24);
      ((void (*)(_QWORD *, _QWORD))v18)(v40, 0);
      swift_release(a1);
      swift_release(v16);
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  if (a2 < 0)
    v34 = a2;
  else
    v34 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(a2);
  if ((v35 & 0x8000000000000000) == 0)
    goto LABEL_4;
  __break(1u);
}

uint64_t sub_1001CC848(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_1001CC54C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = v10;
  if (v10)
  {
    v12 = (_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store);
    v13 = *(_QWORD *)(a5 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
    v14 = v12[4];
    sub_100023AF4(v12, v13);
    dispatch thunk of TranslationStore.save()(v13, v14);
  }
  return v11;
}

uint64_t sub_1001CC8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_1002989F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CC90C(uint64_t a1, uint64_t a2)
{
  return sub_1001CCB50(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for PersistedTranslation);
}

_QWORD *sub_1001CC918(unint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;

  v3 = a1;
  v33 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_33;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v27 = v3;
      v5 = 0;
      v31 = v3 & 0xFFFFFFFFFFFFFF8;
      v32 = v3 & 0xC000000000000001;
      v29 = v4;
      v30 = v3 + 32;
      v28 = a2 + 7;
      while (1)
      {
        if (v32)
        {
          v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v27);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v31 + 16))
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          v6 = *(id *)(v30 + 8 * v5);
        }
        v7 = v6;
        if (__OFADD__(v5++, 1))
          goto LABEL_31;
        v9 = objc_msgSend(v6, "identifier");
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v3 = v11;

        v12 = (_QWORD *)a2[2];
        if (v12)
          break;

        swift_bridgeObjectRelease(v3);
LABEL_5:
        if (v5 == v4)
          return v33;
      }
      v13 = a2[4];
      v14 = a2[5];
      v15 = a2;
      v16 = v13 == v10 && v14 == v3;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v10, v3, 0) & 1) != 0)
        break;
      if (v12 == (_QWORD *)1)
      {
LABEL_27:

        swift_bridgeObjectRelease(v3);
        goto LABEL_17;
      }
      v20 = v28;
      v21 = 1;
      while (1)
      {
        a2 = (_QWORD *)(v21 + 1);
        if (__OFADD__(v21, 1))
          break;
        v22 = *(v20 - 1);
        v23 = *v20;
        v24 = v22 == v10 && v23 == v3;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v10, v3, 0) & 1) != 0)
          goto LABEL_16;
        v20 += 2;
        ++v21;
        if (a2 == v12)
          goto LABEL_27;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      if (v3 < 0)
        v26 = v3;
      else
        v26 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v26);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
LABEL_16:
    v17 = swift_bridgeObjectRelease(v3);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
    v18 = v33[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
    v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v7);
    v3 = (uint64_t)&v33;
    specialized ContiguousArray._endMutation()(v19);
LABEL_17:
    v4 = v29;
    a2 = v15;
    goto LABEL_5;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001CCB44(uint64_t a1, uint64_t a2)
{
  return sub_1001CCB50(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for LanguageAwareTextViewSizeThatFitsCache.Condition);
}

uint64_t sub_1001CCB50(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v9;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v6(0);
  v16 = (void *)swift_arrayDestroy(v13 + 32 + 8 * v5, v9, v15);
  if (!v8)
    return specialized Array._endMutation()(v16);
  if (!((unint64_t)v7 >> 62))
  {
    v17 = *(_QWORD *)(v13 + 16);
    v18 = v17 - v3;
    if (!__OFSUB__(v17, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v13;
  swift_bridgeObjectRetain(v7);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  v16 = (void *)swift_bridgeObjectRelease(v7);
  v18 = v27 - v3;
  if (__OFSUB__(v27, v3))
    goto LABEL_52;
LABEL_21:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v19 + 8 * v18)
      v16 = memmove((void *)(v13 + 32 + 8 * v5), v19, 8 * v18);
    if (!((unint64_t)v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        return specialized Array._endMutation()(v16);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v13;
    swift_bridgeObjectRetain(v7);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    v16 = (void *)swift_bridgeObjectRelease(v7);
    v21 = v29 + v8;
    if (!__OFADD__(v29, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001CCE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *, _QWORD);
  char *v36;
  unint64_t v37;
  _UNKNOWN **v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void (*v49)(_QWORD *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSString v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t *v103;
  void (*v104)(uint64_t *, _QWORD);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t result;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(_QWORD *, char *, uint64_t);
  void (*v125)(uint64_t *, _QWORD, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  char *v132;
  uint64_t *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v1 = v0;
  v134 = type metadata accessor for DispatchPredicate(0);
  v119 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v133 = (uint64_t *)((char *)&v112 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  v4 = __chkstk_darwin(v3);
  v128 = (uint64_t)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v129 = (uint64_t)&v112 - v7;
  __chkstk_darwin(v6);
  v114 = (char *)&v112 - v8;
  v139 = type metadata accessor for StoredTranslationResult(0);
  v121 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v140 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SpeechResultOrigin(0);
  v137 = *(_QWORD *)(v10 - 8);
  v138 = v10;
  __chkstk_darwin(v10);
  v132 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for StoredSpeechResult(0);
  v120 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  v130 = (_QWORD *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store);
  sub_100023AF4((_QWORD *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v18);
  KeyPath = swift_getKeyPath(&unk_1001F73C8);
  v21 = swift_getKeyPath(&unk_1001F73F0);
  static Published.subscript.getter(&v146, v17, KeyPath);
  swift_release(KeyPath);
  swift_release(v21);
  v22 = v147;
  dispatch thunk of TranslationStore.clearHistory(sessionID:completion:)(v146, v147, nullsub_1, 0, v18, v19);
  swift_bridgeObjectRelease(v22);
  v23 = swift_getKeyPath(&unk_1001F7410);
  v24 = swift_getKeyPath(&unk_1001F7438);
  v146 = _swiftEmptyArrayStorage;
  swift_retain(v17);
  static Published.subscript.setter(&v146, v17, v23, v24);
  v118 = v17;
  *(_QWORD *)(v17 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  v25 = *(_QWORD *)(v1 + 72);
  v26 = *(_QWORD *)(v25 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v27 = *(_QWORD *)(v25 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  v127 = (_QWORD *)(v25 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store);
  sub_100023AF4((_QWORD *)(v25 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v26);
  v28 = swift_getKeyPath(&unk_1001F73C8);
  v29 = swift_getKeyPath(&unk_1001F73F0);
  static Published.subscript.getter(&v146, v25, v28);
  swift_release(v28);
  v30 = v29;
  v31 = (uint64_t *)&unk_10028F1B0;
  swift_release(v30);
  v32 = v147;
  dispatch thunk of TranslationStore.clearHistory(sessionID:completion:)(v146, v147, nullsub_1, 0, v26, v27);
  swift_bridgeObjectRelease(v32);
  v33 = swift_getKeyPath(&unk_1001F7410);
  v34 = swift_getKeyPath(&unk_1001F7438);
  v146 = _swiftEmptyArrayStorage;
  v35 = (void (*)(uint64_t *, _QWORD))v114;
  swift_retain(v25);
  static Published.subscript.setter(&v146, v25, v33, v34);
  v117 = v25;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  v36 = v132;
  (*(void (**)(char *, _QWORD, uint64_t))(v137 + 104))(v132, enum case for SpeechResultOrigin.text(_:), v138);
  v135 = v16;
  v115 = v14;
  StoredSpeechResult.init(text:sanitizedText:locale:origin:)(0x7265776F6C66, 0xE600000000000000, 0, 0, v14, v36);
  v132 = (char *)sub_10001D948();
  v37 = 0;
  v131 = enum case for DispatchPredicate.onQueue(_:);
LABEL_3:
  if (v37 < 3)
  {
    v116 = v37 + 1;
    v38 = &off_100261C50 + 4 * v37;
    v40 = v38[6];
    v39 = v38[7];
    v42 = v38[4];
    v41 = v38[5];
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v39);
    v43 = v115;
    Locale.init(identifier:)(v42, v41);
    StoredTranslationResult.init(text:locale:isOffline:romanization:)(v40, v39, v43, 1, 0, 0);
    v44 = type metadata accessor for UUID(0);
    v137 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 56);
    v138 = v44;
    v45 = 3;
    while (1)
    {
      ((void (*)(void (*)(uint64_t *, _QWORD), uint64_t, uint64_t, uint64_t))v137)(v35, 1, 1, v138);
      v46 = v136;
      v148 = v136;
      v47 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
      v149 = v47;
      v48 = sub_1000122F8(&v146);
      v49 = *(void (**)(_QWORD *, char *, uint64_t))(v120 + 16);
      v49(v48, v135, v46);
      v50 = v139;
      v144 = v139;
      v51 = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
      v145 = v51;
      v52 = sub_1000122F8(&v143);
      v126 = *(_QWORD *)(v121 + 16);
      v53 = ((uint64_t (*)(_QWORD *, char *, uint64_t))v126)(v52, v140, v50);
      v54 = static OS_dispatch_queue.main.getter(v53);
      v55 = v133;
      *v133 = v54;
      v56 = v119;
      v57 = v134;
      v125 = *(void (**)(uint64_t *, _QWORD, uint64_t))(v119 + 104);
      v125(v55, v131, v134);
      LOBYTE(v50) = _dispatchPreconditionTest(_:)(v55);
      v58 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
      v58(v55, v57);
      if ((v50 & 1) == 0)
        break;
      v59 = v130[3];
      v60 = v130[4];
      sub_100023AF4(v130, v59);
      v61 = dispatch thunk of TranslationStore.insert(speech:translationResult:isFavorite:)(&v146, &v143, 0, v59, v60);
      if (!v61)
        goto LABEL_26;
      v62 = (void *)v61;
      v123 = v47;
      v124 = v49;
      v122 = v45;
      v63 = swift_getKeyPath(&unk_1001F73C8);
      v64 = swift_getKeyPath(&unk_1001F73F0);
      v65 = v118;
      static Published.subscript.getter(&v141, v118, v63);
      swift_release(v63);
      swift_release(v64);
      v66 = v142;
      v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v66);
      objc_msgSend(v62, "setSessionID:", v67);

      v68 = v129;
      sub_10000B074((uint64_t)v35, v129, v31);
      dispatch thunk of PersistedTranslation.selfLoggingInvocationId.setter(v68);
      v69 = swift_getKeyPath(&unk_1001F7410);
      v70 = v31;
      v71 = swift_getKeyPath(&unk_1001F7438);
      v72 = v62;
      v73 = static Published.subscript.modify(&v141, v65, v69, v71);
      v75 = (uint64_t)v35;
      v35 = (void (*)(uint64_t *, _QWORD))v73;
      v76 = *v74;
      if ((unint64_t)*v74 >> 62)
      {
        v108 = v76 & 0xFFFFFFFFFFFFFF8;
        if (v76 < 0)
          v108 = *v74;
        v113 = v108;
        swift_bridgeObjectRetain(v76);
        v113 = _CocoaArrayWrapper.endIndex.getter(v113);
        swift_bridgeObjectRelease(v76);
        if (v113 < 0)
          goto LABEL_23;
      }
      sub_1001CBF04(0, 0, (uint64_t)v72);
      v35(&v141, 0);
      swift_release(v69);
      swift_release(v71);
      sub_100009C08(&v146);
      sub_100009C08(&v143);
      sub_10000A020(v75, v70);
      v77 = v130[3];
      v78 = v130[4];
      sub_100023AF4(v130, v77);
      dispatch thunk of TranslationStore.toggleFavorite(_:)(v72, v77, v78);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v137)(v128, 1, 1, v138);
      v79 = v136;
      v148 = v136;
      v149 = v123;
      v80 = sub_1000122F8(&v146);
      v124(v80, v135, v79);
      v81 = v139;
      v144 = v139;
      v145 = v51;
      v82 = sub_1000122F8(&v143);
      v83 = ((uint64_t (*)(_QWORD *, char *, uint64_t))v126)(v82, v140, v81);
      v84 = static OS_dispatch_queue.main.getter(v83);
      v85 = v133;
      *v133 = v84;
      v86 = v134;
      v125(v85, v131, v134);
      v87 = _dispatchPreconditionTest(_:)(v85);
      v58(v85, v86);
      if ((v87 & 1) == 0)
        goto LABEL_24;
      v88 = v127[3];
      v89 = v127[4];
      sub_100023AF4(v127, v88);
      v90 = dispatch thunk of TranslationStore.insert(speech:translationResult:isFavorite:)(&v146, &v143, 0, v88, v89);
      if (!v90)
        goto LABEL_27;
      v91 = (void *)v90;
      v92 = v72;
      v93 = swift_getKeyPath(&unk_1001F73C8);
      v94 = swift_getKeyPath(&unk_1001F73F0);
      v95 = v117;
      static Published.subscript.getter(&v141, v117, v93);
      swift_release(v93);
      swift_release(v94);
      v96 = v142;
      v97 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v96);
      objc_msgSend(v91, "setSessionID:", v97);

      v98 = v128;
      v99 = v129;
      sub_10000B074(v128, v129, v70);
      dispatch thunk of PersistedTranslation.selfLoggingInvocationId.setter(v99);
      v100 = swift_getKeyPath(&unk_1001F7410);
      v101 = swift_getKeyPath(&unk_1001F7438);
      v102 = v91;
      v104 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify(&v141, v95, v100, v101);
      v105 = *v103;
      if ((unint64_t)*v103 >> 62)
      {
        v109 = v105 & 0xFFFFFFFFFFFFFF8;
        if (v105 < 0)
          v109 = *v103;
        v126 = v109;
        swift_bridgeObjectRetain(v105);
        v126 = _CocoaArrayWrapper.endIndex.getter(v126);
        swift_bridgeObjectRelease(v105);
        if (v126 < 0)
        {
          __break(1u);
LABEL_21:
          v110 = sub_100006DF4(&qword_100298C00);
          swift_arrayDestroy(&qword_100261C70, 3, v110);
          return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v135, v136);
        }
      }
      sub_1001CBF04(0, 0, (uint64_t)v102);
      v104(&v141, 0);
      swift_release(v100);
      swift_release(v101);
      sub_100009C08(&v146);
      sub_100009C08(&v143);
      sub_10000A020(v98, v70);
      v106 = v127[3];
      v107 = v127[4];
      sub_100023AF4(v127, v106);
      dispatch thunk of TranslationStore.toggleFavorite(_:)(v102, v106, v107);

      v45 = v122 - 1;
      v31 = v70;
      v35 = (void (*)(uint64_t *, _QWORD))v75;
      if (v122 == 1)
      {
        (*(void (**)(char *, uint64_t))(v121 + 8))(v140, v139);
        v37 = v116;
        if (v116 != 3)
          goto LABEL_3;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  __break(1u);
LABEL_26:
  sub_100009C08(&v146);
  sub_100009C08(&v143);
  sub_10000A020((uint64_t)v35, (uint64_t *)&unk_10028F1B0);
  __break(1u);
LABEL_27:
  sub_100009C08(&v146);
  sub_100009C08(&v143);
  result = sub_10000A020(v128, (uint64_t *)&unk_10028F1B0);
  __break(1u);
  return result;
}

uint64_t sub_1001CD9F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t *v52;
  void (*v53)(_QWORD *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  void (*v61)(char *, uint64_t, uint64_t, char *);
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD v73[4];
  _QWORD v74[5];
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v66 = type metadata accessor for DispatchPredicate(0);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v4 = (uint64_t *)((char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006DF4((uint64_t *)&unk_10028F1B0);
  v6 = __chkstk_darwin(v5);
  v59 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v56 - v8;
  v10 = type metadata accessor for StoredTranslationResult(0);
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  __chkstk_darwin(v10);
  v72 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for SpeechResultOrigin(0);
  v63 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v62 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for StoredSpeechResult(0);
  v68 = *(_QWORD *)(v16 - 8);
  v69 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v1 + 64);
  v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v61 = *(void (**)(char *, uint64_t, uint64_t, char *))(v19
                                                                + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store
                                                                + 32);
  v64 = (_QWORD *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store);
  sub_100023AF4((_QWORD *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v20);
  KeyPath = swift_getKeyPath(&unk_1001F73C8);
  v22 = swift_getKeyPath(&unk_1001F73F0);
  static Published.subscript.getter(&v75, v19, KeyPath);
  swift_release(KeyPath);
  swift_release(v22);
  v23 = v76;
  dispatch thunk of TranslationStore.clearHistory(sessionID:completion:)(v75, v76, nullsub_1, 0, v20, v61);
  swift_bridgeObjectRelease(v23);
  v24 = swift_getKeyPath(&unk_1001F7410);
  v25 = swift_getKeyPath(&unk_1001F7438);
  v75 = _swiftEmptyArrayStorage;
  swift_retain(v19);
  static Published.subscript.setter(&v75, v19, v24, v25);
  v58 = v19;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  v26 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, enum case for SpeechResultOrigin.text(_:), v67);
  v67 = (uint64_t)v18;
  StoredSpeechResult.init(text:sanitizedText:locale:origin:)(0x7265776F6C66, 0xE600000000000000, 0, 0, v15, v26);
  Locale.init(identifier:)(0x53455F7365, 0xE500000000000000);
  result = StoredTranslationResult.init(text:locale:isOffline:romanization:)(1919904870, 0xE400000000000000, v15, 1, 0, 0);
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (!a1)
    {
LABEL_15:
      (*(void (**)(char *, uint64_t))(v70 + 8))(v72, v71);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v63 = sub_10001D948();
    v62 = (char *)type metadata accessor for UUID(0);
    v61 = *(void (**)(char *, uint64_t, uint64_t, char *))(*((_QWORD *)v62 - 1) + 56);
    v28 = (uint64_t *)&unk_10028F1B0;
    v60 = enum case for DispatchPredicate.onQueue(_:);
    v61(v9, 1, 1, v62);
    while (1)
    {
      v29 = v69;
      v77 = v69;
      v78 = sub_100007D5C(&qword_10028CD60, (uint64_t (*)(uint64_t))&type metadata accessor for StoredSpeechResult, (uint64_t)&protocol conformance descriptor for StoredSpeechResult);
      v30 = sub_1000122F8(&v75);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v68 + 16))(v30, v67, v29);
      v31 = v71;
      v74[3] = v71;
      v74[4] = sub_100007D5C((unint64_t *)&unk_1002953E0, (uint64_t (*)(uint64_t))&type metadata accessor for StoredTranslationResult, (uint64_t)&protocol conformance descriptor for StoredTranslationResult);
      v32 = sub_1000122F8(v74);
      v33 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v70 + 16))(v32, v72, v31);
      *v4 = static OS_dispatch_queue.main.getter(v33);
      v34 = v65;
      v35 = v66;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v65 + 104))(v4, v60, v66);
      LOBYTE(v31) = _dispatchPreconditionTest(_:)(v4);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(v34 + 8))(v4, v35);
      if ((v31 & 1) == 0)
        break;
      v36 = v64[3];
      v37 = v64[4];
      sub_100023AF4(v64, v36);
      v38 = dispatch thunk of TranslationStore.insert(speech:translationResult:isFavorite:)(&v75, v74, 0, v36, v37);
      if (v38)
      {
        v39 = (void *)v38;
        v40 = swift_getKeyPath(&unk_1001F73C8);
        v41 = swift_getKeyPath(&unk_1001F73F0);
        v42 = v58;
        static Published.subscript.getter(v73, v58, v40);
        swift_release(v40);
        swift_release(v41);
        v43 = v73[1];
        v44 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v43);
        objc_msgSend(v39, "setSessionID:", v44);

        v45 = v9;
        v46 = (uint64_t)v9;
        v47 = v59;
        v48 = v28;
        sub_10000B074(v46, v59, v28);
        dispatch thunk of PersistedTranslation.selfLoggingInvocationId.setter(v47);
        v49 = swift_getKeyPath(&unk_1001F7410);
        v50 = swift_getKeyPath(&unk_1001F7438);
        v51 = v39;
        v53 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v73, v42, v49, v50);
        v54 = *v52;
        if ((unint64_t)*v52 >> 62)
        {
          v55 = v54 & 0xFFFFFFFFFFFFFF8;
          if (v54 < 0)
            v55 = *v52;
          v57 = v55;
          swift_bridgeObjectRetain(v54);
          v57 = _CocoaArrayWrapper.endIndex.getter(v57);
          swift_bridgeObjectRelease(v54);
          if (v57 < 0)
          {
            __break(1u);
            goto LABEL_15;
          }
        }
        sub_1001CBF04(0, 0, (uint64_t)v51);
        v53(v73, 0);
        swift_release(v49);
        swift_release(v50);
        sub_100009C08(&v75);
        sub_100009C08(v74);

        v28 = v48;
        v9 = v45;
      }
      else
      {
        sub_100009C08(&v75);
        sub_100009C08(v74);
      }
      sub_10000A020((uint64_t)v9, v28);
      if (!--a1)
        goto LABEL_15;
      v61(v9, 1, 1, v62);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001CE0D0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t result;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  os_log_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD v70[3];
  char v71[24];
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[4];

  v2 = v1;
  v65 = a1;
  v3 = sub_100006DF4(&qword_100298BF8);
  __chkstk_darwin(v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for SELFLoggingInvocationDescription(0);
  v6 = *(_QWORD *)(v69 - 8);
  v7 = __chkstk_darwin(v69);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v57 - v10;
  v12 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v12);
  v62 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v66 = *(_QWORD *)(v14 - 8);
  v67 = v14;
  v15 = __chkstk_darwin(v14);
  v63 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v64 = (char *)&v57 - v17;
  if (qword_10028A460 != -1)
    swift_once(&qword_10028A460, sub_100121094);
  v18 = type metadata accessor for Logger(0);
  sub_10000F66C(v18, (uint64_t)qword_1002AA428);
  v19 = swift_retain_n(v1, 4);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    v60 = v21;
    v61 = v20;
    v22 = swift_slowAlloc(22, -1);
    v59 = swift_slowAlloc(64, -1);
    v78[0] = v59;
    *(_DWORD *)v22 = 136446466;
    swift_beginAccess(v2 + 10, v71, 0, 0);
    v23 = (void *)v2[10];
    v24 = v2[11];
    v25 = v2[13];
    v68 = (_QWORD *)v2[12];
    v26 = v2[14];
    v70[0] = v23;
    v58 = v23;
    swift_retain(v24);
    swift_bridgeObjectRetain(v25);
    swift_retain(v26);
    swift_getAtKeyPath(&v74, v70, v24);
    v27 = v75[0];
    if (v75[0])
    {
      v68 = (_QWORD *)v74;
      swift_release(v24);

    }
    else
    {
      swift_bridgeObjectRetain(v25);
      swift_release(v24);

      v27 = v25;
    }
    swift_release(v26);
    swift_bridgeObjectRelease();
    v74 = sub_1001A7FE4((uint64_t)v68, v27, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v22 + 4);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    swift_beginAccess(v2 + 15, v70, 0, 0);
    v28 = (_QWORD *)v2[15];
    v29 = v2[16];
    v30 = v2[18];
    v68 = (_QWORD *)v2[17];
    v31 = v2[19];
    v73 = v28;
    v58 = v28;
    swift_retain(v29);
    swift_bridgeObjectRetain(v30);
    swift_retain(v31);
    swift_getAtKeyPath(&v74, &v73, v29);
    v32 = v75[0];
    if (v75[0])
    {
      v68 = (_QWORD *)v74;
      swift_release(v29);

    }
    else
    {
      swift_bridgeObjectRetain(v30);
      swift_release(v29);

      v32 = v30;
    }
    swift_release(v31);
    swift_bridgeObjectRelease();
    v74 = sub_1001A7FE4((uint64_t)v68, v32, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v22 + 14);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    v33 = v61;
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v60, "Suspending sessions with IDs; TranslateTab: %{public}s, ConversationTab: %{public}s",
      (uint8_t *)v22,
      0x16u);
    v34 = v59;
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_release_n(v2, 4);
  }
  v68 = v2;
  v35 = (char *)v2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders;
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders, v78, 0, 0);
  v36 = *(_QWORD *)v35;
  v37 = *(_QWORD *)(*(_QWORD *)v35 + 16);
  if (v37)
  {
    v38 = v36 + 32;
    v61 = *(os_log_t *)v35;
    swift_bridgeObjectRetain(v36);
    v39 = _swiftEmptyArrayStorage;
    do
    {
      sub_100023AB0(v38, (uint64_t)&v74);
      v40 = v76;
      v41 = v77;
      sub_100023AF4(&v74, v76);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
      sub_100009C08(&v74);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v69) == 1)
      {
        sub_10000A020((uint64_t)v5, &qword_100298BF8);
      }
      else
      {
        sub_1001CFEC4((uint64_t)v5, (uint64_t)v11);
        sub_1001CFEC4((uint64_t)v11, (uint64_t)v9);
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
          v39 = (_QWORD *)sub_1001A7FBC(0, v39[2] + 1, 1, (unint64_t)v39);
        v43 = v39[2];
        v42 = v39[3];
        if (v43 >= v42 >> 1)
          v39 = (_QWORD *)sub_1001A7FBC(v42 > 1, v43 + 1, 1, (unint64_t)v39);
        v39[2] = v43 + 1;
        sub_1001CFEC4((uint64_t)v9, (uint64_t)v39+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v43);
      }
      v38 += 40;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = _swiftEmptyArrayStorage;
  }
  v44 = (uint64_t)v68;
  v45 = (char *)v68 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations;
  swift_beginAccess((char *)v68 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations, &v74, 33, 0);
  v72 = v39;
  v73 = v39;
  v46 = *((_QWORD *)v45 + 1);
  swift_bridgeObjectRetain(v39);
  swift_retain(v46);
  swift_setAtWritableKeyPath(v45, v46, &v72);
  swift_release(v46);
  PassthroughSubject.send(_:)(&v73);
  swift_bridgeObjectRelease();
  swift_endAccess(&v74);
  v47 = v66;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v49 = v64;
  v50 = v67;
  v48(v64, v65, v67);
  v51 = v63;
  v48(v63, (uint64_t)v49, v50);
  v52 = v44 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__sessionSuspension_RD;
  swift_beginAccess(v44 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__sessionSuspension_RD, &v74, 33, 0);
  v53 = *(_QWORD *)(v52 + 8);
  v54 = v62;
  v48(v62, (uint64_t)v51, v50);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v54, 0, 1, v50);
  swift_retain(v53);
  swift_setAtWritableKeyPath(v52, v53, v54);
  swift_release(v53);
  sub_100006DF4(&qword_1002953F8);
  PassthroughSubject.send(_:)(v51);
  v55 = *(void (**)(char *, uint64_t))(v47 + 8);
  v55(v51, v50);
  swift_endAccess(&v74);
  result = ((uint64_t (*)(char *, uint64_t))v55)(v49, v50);
  *(_BYTE *)(v44 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_isSuspended) = 1;
  return result;
}

void sub_1001CE85C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  double v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  os_log_t v63;
  _QWORD *v64;
  void (*v65)(NSObject *, uint64_t, uint64_t);
  NSObject *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  os_log_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  id v84[3];
  char v85[24];
  _QWORD *v86;
  _QWORD *v87;
  id v88;
  _QWORD v89[2];
  char v90[32];

  v3 = v2;
  LODWORD(v80) = a2;
  v5 = sub_100006DF4(&qword_1002948B0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (_QWORD **)((char *)&v73 - v9);
  v11 = sub_100006DF4(&qword_1002953F8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v73 - v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v20 = __chkstk_darwin(v19);
  v83 = ((char *)&v73 - v21);
  __chkstk_darwin(v20);
  v24 = (char *)&v73 - v23;
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_isSuspended) == 1)
  {
    v76 = OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_isSuspended;
    v78 = v22;
    v81 = a1;
    v82 = v11;
    v79 = v8;
    v25 = v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__sessionSuspension_RD;
    swift_beginAccess(v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__sessionSuspension_RD, v90, 0, 0);
    v77 = v25;
    sub_10000B074(v25, (uint64_t)v16, &qword_1002953F8);
    v26 = *((_QWORD *)v16 + 1);
    v88 = *(id *)v16;
    v27 = v88;
    swift_getAtKeyPath(v10, &v88, v26);

    sub_10000B074((uint64_t)v16, (uint64_t)v14, &qword_1002953F8);
    v28 = v18;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v17) == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v24, &v14[*(int *)(v82 + 32)], v17);
      sub_10000A020((uint64_t)v14, &qword_1002953F8);
      sub_10000A020((uint64_t)v10, &qword_1002948B0);
    }
    else
    {
      sub_10000A020((uint64_t)v14, &qword_1002953F8);
      (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(v24, v10, v17);
    }
    v33 = v81;
    sub_10000A020((uint64_t)v16, &qword_1002953F8);
    v34 = Date.timeIntervalSince(_:)(v24);
    v35 = *(void (**)(char *, uint64_t))(v18 + 8);
    v35(v24, v17);
    if (*(double *)(v3 + 16) >= v34)
    {
      if ((v80 & 1) != 0)
      {
        if (qword_10028A460 != -1)
          swift_once(&qword_10028A460, sub_100121094);
        v41 = type metadata accessor for Logger(0);
        v42 = sub_10000F66C(v41, (uint64_t)qword_1002AA428);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Session is resuming within the time limit on first launch", v45, 2u);
          swift_slowDealloc(v45, -1, -1);
        }

        sub_1001CF76C();
      }
    }
    else
    {
      if (qword_10028A460 != -1)
        swift_once(&qword_10028A460, sub_100121094);
      v36 = type metadata accessor for Logger(0);
      v37 = sub_10000F66C(v36, (uint64_t)qword_1002AA428);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Session was timed-out when resuming", v40, 2u);
        swift_slowDealloc(v40, -1, -1);
      }

      sub_1001CFA18();
      sub_1001CF1C0();
    }
    if (qword_10028A460 != -1)
      swift_once(&qword_10028A460, sub_100121094);
    v46 = type metadata accessor for Logger(0);
    sub_10000F66C(v46, (uint64_t)qword_1002AA428);
    v47 = swift_retain_n(v3, 4);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      v74 = v49;
      v75 = v48;
      v80 = v18;
      v50 = swift_slowAlloc(22, -1);
      v73 = (_QWORD *)swift_slowAlloc(64, -1);
      v87 = v73;
      *(_DWORD *)v50 = 136446466;
      swift_beginAccess(v3 + 80, v85, 0, 0);
      v51 = *(_QWORD *)(v3 + 88);
      v52 = *(_QWORD *)(v3 + 96);
      v53 = *(_QWORD *)(v3 + 104);
      v54 = *(_QWORD *)(v3 + 112);
      v84[0] = *(id *)(v3 + 80);
      v55 = v84[0];
      swift_retain(v51);
      swift_bridgeObjectRetain(v53);
      swift_retain(v54);
      swift_getAtKeyPath(&v88, v84, v51);
      v56 = v89[0];
      if (v89[0])
      {
        v52 = (uint64_t)v88;
        swift_release(v51);

      }
      else
      {
        swift_bridgeObjectRetain(v53);
        swift_release(v51);

        v56 = v53;
      }
      swift_release(v54);
      swift_bridgeObjectRelease(v53);
      v88 = (id)sub_1001A7FE4(v52, v56, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v50 + 4);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v50 + 12) = 2082;
      swift_beginAccess(v3 + 120, v84, 0, 0);
      v57 = *(_QWORD *)(v3 + 128);
      v58 = *(_QWORD *)(v3 + 136);
      v59 = *(_QWORD *)(v3 + 144);
      v60 = *(_QWORD *)(v3 + 152);
      v86 = *(_QWORD **)(v3 + 120);
      v61 = v86;
      swift_retain(v57);
      swift_bridgeObjectRetain(v59);
      swift_retain(v60);
      swift_getAtKeyPath(&v88, &v86, v57);
      v62 = v89[0];
      if (v89[0])
      {
        v58 = (uint64_t)v88;
        swift_release(v57);

      }
      else
      {
        swift_bridgeObjectRetain(v59);
        swift_release(v57);

        v62 = v59;
      }
      swift_release(v60);
      swift_bridgeObjectRelease(v59);
      v88 = (id)sub_1001A7FE4(v58, v62, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v50 + 14);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v62);
      v63 = v75;
      _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v74, "Resuming sessions with IDs; TranslateTab: %{public}s, ConversationTab: %{public}s",
        (uint8_t *)v50,
        0x16u);
      v64 = v73;
      swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      v28 = v80;
      v33 = v81;
    }
    else
    {

      swift_release_n(v3, 4);
    }
    *(_BYTE *)(v3 + v76) = 0;
    v65 = *(void (**)(NSObject *, uint64_t, uint64_t))(v28 + 16);
    v66 = v83;
    v65(v83, v33, v17);
    v67 = (char *)v78;
    v65(v78, (uint64_t)v66, v17);
    v68 = v77;
    swift_beginAccess(v77, &v88, 33, 0);
    v69 = *(_QWORD *)(v68 + 8);
    v70 = v79;
    v65(v79, (uint64_t)v67, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v70, 0, 1, v17);
    swift_retain(v69);
    swift_setAtWritableKeyPath(v68, v69, v70);
    swift_release(v69);
    PassthroughSubject.send(_:)(v67);
    v35(v67, v17);
    swift_endAccess(&v88);
    v35((char *)v66, v17);
    v71 = v3 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations;
    swift_beginAccess(v71, &v88, 33, 0);
    v86 = _swiftEmptyArrayStorage;
    v87 = _swiftEmptyArrayStorage;
    v72 = *(_QWORD *)(v71 + 8);
    swift_retain(v72);
    swift_setAtWritableKeyPath(v71, v72, &v86);
    swift_release(v72);
    PassthroughSubject.send(_:)(&v87);
    swift_endAccess(&v88);
  }
  else
  {
    if (qword_10028A460 != -1)
      swift_once(&qword_10028A460, sub_100121094);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10000F66C(v29, (uint64_t)qword_1002AA428);
    v83 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v83, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v31, "Trying to resume but not suspended", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

  }
}

uint64_t sub_1001CF1C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028A460 != -1)
    swift_once(&qword_10028A460, sub_100121094);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA428);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Preparing new sessions", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = UUID.init()(v11);
  v13 = (void *)UUID.uuidString.getter(v12);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v5, v2);
  swift_beginAccess(v1 + 10, &v65, 33, 0);
  v63 = v13;
  v64 = v15;
  v17 = v1[11];
  v61 = v13;
  v62 = v15;
  swift_bridgeObjectRetain(v15);
  swift_retain(v17);
  swift_setAtWritableKeyPath(v1 + 10, v17, &v61);
  swift_release(v17);
  PassthroughSubject.send(_:)(&v63);
  swift_bridgeObjectRelease(v15);
  v18 = swift_endAccess(&v65);
  v19 = UUID.init()(v18);
  v20 = (void *)UUID.uuidString.getter(v19);
  v22 = v21;
  v16(v5, v2);
  swift_beginAccess(v1 + 15, &v65, 33, 0);
  v63 = v20;
  v64 = v22;
  v23 = v1[16];
  v61 = v20;
  v62 = v22;
  swift_bridgeObjectRetain(v22);
  swift_retain(v23);
  swift_setAtWritableKeyPath(v1 + 15, v23, &v61);
  swift_release(v23);
  PassthroughSubject.send(_:)(&v63);
  swift_bridgeObjectRelease(v22);
  swift_endAccess(&v65);
  v24 = v1[8];
  v25 = v1[11];
  v27 = (_QWORD *)v1[12];
  v26 = v1[13];
  v28 = v1[14];
  v63 = (id)v1[10];
  v29 = v63;
  swift_retain(v25);
  swift_bridgeObjectRetain(v26);
  swift_retain(v28);
  swift_getAtKeyPath(&v65, &v63, v25);
  v30 = v66;
  if (v66)
  {
    v27 = v65;
    swift_release(v25);

  }
  else
  {
    swift_bridgeObjectRetain(v26);
    swift_release(v25);

    v30 = v26;
  }
  swift_release(v28);
  swift_bridgeObjectRelease(v26);
  KeyPath = swift_getKeyPath(&unk_1001F73C8);
  v32 = swift_getKeyPath(&unk_1001F73F0);
  v65 = v27;
  v66 = v30;
  swift_retain(v24);
  static Published.subscript.setter(&v65, v24, KeyPath, v32);
  v33 = v1[9];
  v34 = v1[16];
  v36 = (_QWORD *)v1[17];
  v35 = v1[18];
  v37 = v1[19];
  v63 = (id)v1[15];
  v38 = v63;
  swift_retain(v34);
  swift_bridgeObjectRetain(v35);
  swift_retain(v37);
  swift_getAtKeyPath(&v65, &v63, v34);
  v39 = v66;
  if (v66)
  {
    v36 = v65;
    swift_release(v34);

  }
  else
  {
    swift_bridgeObjectRetain(v35);
    swift_release(v34);

    v39 = v35;
  }
  swift_release(v37);
  swift_bridgeObjectRelease(v35);
  v40 = swift_getKeyPath(&unk_1001F73C8);
  v41 = swift_getKeyPath(&unk_1001F73F0);
  v65 = v36;
  v66 = v39;
  swift_retain(v33);
  static Published.subscript.setter(&v65, v33, v40, v41);
  v42 = v1 + 3;
  v44 = v1[6];
  v43 = v1[7];
  sub_100023AF4(v42, v44);
  dispatch thunk of TranslationStore.clearHistory(completion:)(nullsub_1, 0, v44, v43);
  v45 = *(_QWORD *)(v24 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v46 = *(_QWORD *)(v24 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  sub_100023AF4((_QWORD *)(v24 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v45);
  v47 = swift_getKeyPath(&unk_1001F73C8);
  v48 = swift_getKeyPath(&unk_1001F73F0);
  static Published.subscript.getter(&v65, v24, v47);
  swift_release(v47);
  swift_release(v48);
  v49 = v66;
  dispatch thunk of TranslationStore.clearHistory(sessionID:completion:)(v65, v66, nullsub_1, 0, v45, v46);
  swift_bridgeObjectRelease(v49);
  v50 = swift_getKeyPath(&unk_1001F7410);
  v51 = swift_getKeyPath(&unk_1001F7438);
  v65 = _swiftEmptyArrayStorage;
  swift_retain(v24);
  static Published.subscript.setter(&v65, v24, v50, v51);
  *(_QWORD *)(v24 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  v52 = *(_QWORD *)(v33 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 24);
  v53 = *(_QWORD *)(v33 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store + 32);
  sub_100023AF4((_QWORD *)(v33 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_store), v52);
  v54 = swift_getKeyPath(&unk_1001F73C8);
  v55 = swift_getKeyPath(&unk_1001F73F0);
  static Published.subscript.getter(&v65, v33, v54);
  swift_release(v54);
  swift_release(v55);
  v56 = v66;
  dispatch thunk of TranslationStore.clearHistory(sessionID:completion:)(v65, v66, nullsub_1, 0, v52, v53);
  swift_bridgeObjectRelease(v56);
  v57 = swift_getKeyPath(&unk_1001F7410);
  v58 = swift_getKeyPath(&unk_1001F7438);
  v65 = _swiftEmptyArrayStorage;
  swift_retain(v33);
  result = static Published.subscript.setter(&v65, v33, v57, v58);
  *(_QWORD *)(v33 + OBJC_IVAR____TtC17SequoiaTranslator21TranslationSession_RD_lidDisambiguationCounter) = 0;
  return result;
}

void sub_1001CF76C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v1 = v0;
  if (qword_10028A460 != -1)
    swift_once(&qword_10028A460, sub_100121094);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000F66C(v2, (uint64_t)qword_1002AA428);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Loading sessions with translations", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = v1[8];
  swift_beginAccess(v1 + 10, v31, 0, 0);
  v8 = v1[11];
  v10 = v1[12];
  v9 = v1[13];
  v11 = v1[14];
  v26 = (id)v1[10];
  v12 = v26;
  swift_retain(v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v11);
  swift_getAtKeyPath(&v29, &v26, v8);
  v13 = v30;
  if (v30)
  {
    v10 = v29;
    swift_release(v8);

  }
  else
  {
    swift_bridgeObjectRetain(v9);
    swift_release(v8);

    v13 = v9;
  }
  swift_release(v11);
  swift_bridgeObjectRelease(v9);
  KeyPath = swift_getKeyPath(&unk_1001F73C8);
  v15 = swift_getKeyPath(&unk_1001F73F0);
  v29 = v10;
  v30 = v13;
  swift_retain(v7);
  static Published.subscript.setter(&v29, v7, KeyPath, v15);
  v16 = v1[9];
  swift_beginAccess(v1 + 15, &v29, 0, 0);
  v17 = (void *)v1[15];
  v18 = v1[16];
  v20 = (id)v1[17];
  v19 = v1[18];
  v21 = v1[19];
  v28 = v17;
  v22 = v17;
  swift_retain(v18);
  swift_bridgeObjectRetain(v19);
  swift_retain(v21);
  swift_getAtKeyPath(&v26, &v28, v18);
  v23 = v27;
  if (v27)
  {
    v20 = v26;
    swift_release(v18);

  }
  else
  {
    swift_bridgeObjectRetain(v19);
    swift_release(v18);

    v23 = v19;
  }
  swift_release(v21);
  swift_bridgeObjectRelease(v19);
  v24 = swift_getKeyPath(&unk_1001F73C8);
  v25 = swift_getKeyPath(&unk_1001F73F0);
  v26 = v20;
  v27 = v23;
  swift_retain(v16);
  static Published.subscript.setter(&v26, v16, v24, v25);
  sub_1001CA91C();
  sub_1001CA91C();
}

uint64_t sub_1001CFA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Class isa;
  Class v17;
  id v18;
  Class v19;
  NSString v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31[3];
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[24];

  v1 = type metadata accessor for SELFLoggingInvocationDescription(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations, v35, 0, 0);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v31[0] = *(id *)v5;
  v9 = v31[0];
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_getAtKeyPath(v34, v31, v6);
  v10 = v34[0];
  if (v34[0])
  {
    swift_release(v6);

  }
  else
  {
    swift_bridgeObjectRetain(v7);
    swift_release(v6);

    v10 = v7;
  }
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v30 = v0;
    v12 = (void *)objc_opt_self(_LTSELFLoggingInvocation);
    v13 = v10 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v14 = *(_QWORD *)(v2 + 72);
    v29 = v10;
    swift_bridgeObjectRetain(v10);
    do
    {
      sub_10015A80C(v13, (uint64_t)v4);
      v15 = objc_allocWithZone((Class)_LTLocalePair);
      isa = Locale._bridgeToObjectiveC()().super.isa;
      v17 = Locale._bridgeToObjectiveC()().super.isa;
      v18 = objc_msgSend(v15, "initWithSourceLocale:targetLocale:", isa, v17);

      v19 = UUID._bridgeToObjectiveC()().super.isa;
      v20 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "userEndedTypingWithInvocationId:payload:localePair:reason:", v19, v20, v18, 2);

      sub_10015A850((uint64_t)v4);
      v13 += v14;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease_n(v29, 2);
    v0 = v30;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
  }
  v21 = (uint64_t *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders);
  result = swift_beginAccess(v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager_selfLoggingInvocationsHolders, v34, 0, 0);
  v23 = *v21;
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = v23 + 32;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_100023AB0(v25, (uint64_t)v31);
      v26 = v32;
      v27 = v33;
      sub_100023AF4(v31, v32);
      (*(void (**)(uint64_t, uint64_t))(v27 + 16))(v26, v27);
      sub_100009C08(v31);
      v25 += 40;
      --v24;
    }
    while (v24);
    return swift_bridgeObjectRelease(v23);
  }
  return result;
}

_QWORD *sub_1001CFCC4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  sub_100009C08(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[9]);
  v2 = (void *)v0[10];
  v1 = v0[11];
  swift_release(v0[14]);
  swift_bridgeObjectRelease();
  swift_release(v1);

  v4 = (void *)v0[15];
  v3 = v0[16];
  swift_release(v0[19]);
  swift_bridgeObjectRelease();
  swift_release(v3);

  sub_10000A020((uint64_t)v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__sessionSuspension_RD, &qword_1002953F8);
  v6 = *(void **)((char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations);
  v5 = *(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations
                 + 8);
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC17SequoiaTranslator25TranslationSessionManager__lastSELFLoggingInvocations
                          + 24));
  swift_bridgeObjectRelease();
  swift_release(v5);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001CFD94()
{
  uint64_t v0;

  sub_1001CFCC4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001CFDB8()
{
  return type metadata accessor for TranslationSessionManager(0);
}

uint64_t type metadata accessor for TranslationSessionManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100298A48;
  if (!qword_100298A48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranslationSessionManager);
  return result;
}

void sub_1001CFDFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = "(";
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = "(";
  v4[5] = "(";
  sub_1001A3F9C(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = &unk_1001F7398;
    v4[8] = &unk_1001F73B0;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

uint64_t sub_1001CFEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SELFLoggingInvocationDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CFF08()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F74C8);
  v2 = swift_getKeyPath(&unk_1001F74F0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1001CFF78(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39[3];

  v2 = v1;
  v4 = sub_100006DF4(&qword_100296BE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006DF4(&qword_10028B5A8);
  v36 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(&qword_10028B5B0);
  v11 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  v38 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v2 + OBJC_IVAR____TtC17SequoiaTranslator20TTSPlaybackViewModel__isPlaying;
  LOBYTE(v39[0]) = 0;
  Published.init(initialValue:)(v39, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  v19 = OBJC_IVAR____TtC17SequoiaTranslator20TTSPlaybackViewModel_conversationManager;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator20TTSPlaybackViewModel_conversationManager) = 0;
  v20 = v2 + OBJC_IVAR____TtC17SequoiaTranslator20TTSPlaybackViewModel_subscriptions;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17SequoiaTranslator20TTSPlaybackViewModel_subscriptions) = _swiftEmptyArrayStorage;
  v21 = *(void **)(v2 + v19);
  *(_QWORD *)(v2 + v19) = a1;
  v22 = a1;
  v35 = v22;

  swift_beginAccess(&v22[OBJC_IVAR____TtC17SequoiaTranslator19ConversationManager__currentlyPlayingTTS], v39, 33, 0);
  v23 = sub_100006DF4(&qword_10028B5B8);
  Published.projectedValue.getter(v23);
  swift_endAccess(v39);
  v24 = sub_10001D948();
  v39[0] = (id)static OS_dispatch_queue.main.getter(v24);
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
  v26 = sub_100012334(&qword_10028B5C0, &qword_10028B5A8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v27 = sub_100007D5C((unint64_t *)&qword_100295550, (uint64_t (*)(uint64_t))sub_10001D948, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v39, v6, v7, v24, v26, v27);
  sub_100075660((uint64_t)v6);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v7);
  v28 = sub_100012334(&qword_10028B5C8, &qword_10028B5B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v2);
  v29 = v37;
  v30 = Publisher<>.sink(receiveValue:)(sub_1001D0A20, v2, v37, v28);
  swift_release(v2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v29);
  swift_beginAccess(v20, v39, 33, 0);
  v31 = sub_100006DF4((uint64_t *)&unk_100295560);
  v32 = sub_100012334(&qword_10028EA28, (uint64_t *)&unk_100295560, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v20, v31, v32);
  swift_endAccess(v39);
  swift_release(v30);

  return v2;
}

uint64_t sub_1001D02F4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t KeyPath;
  uint64_t v5;
  BOOL v7;

  v3 = *(_QWORD *)(a1 + 8) != 0;
  KeyPath = swift_getKeyPath(&unk_1001F74C8);
  v5 = swift_getKeyPath(&unk_1001F74F0);
  v7 = v3;
  swift_retain(a2);
  return static Published.subscript.setter(&v7, a2, KeyPath, v5);
}

void sub_1001D036C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v3 = v2;
  v6 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(v6 - 1);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v21 = *(void **)(v3 + OBJC_IVAR____TtC17SequoiaTranslator20TTSPlaybackViewModel_conversationManager);
  if (v21)
  {
    v49 = v21;
    sub_100075934(a1, a2);

  }
  else
  {
    v41 = v20;
    v42 = (char *)&v40 - v19;
    v43 = v18;
    v44 = v13;
    v45 = v11;
    v46 = v9;
    v47 = v10;
    v48 = v7;
    v49 = v6;
    KeyPath = swift_getKeyPath(&unk_1001F74C8);
    v23 = swift_getKeyPath(&unk_1001F74F0);
    static Published.subscript.getter(aBlock, v3, KeyPath);
    swift_release(KeyPath);
    swift_release(v23);
    LODWORD(v23) = LOBYTE(aBlock[0]);
    v24 = swift_getKeyPath(&unk_1001F74C8);
    v25 = swift_getKeyPath(&unk_1001F74F0);
    if ((_DWORD)v23 == 1)
    {
      LOBYTE(aBlock[0]) = 0;
      swift_retain(v3);
      static Published.subscript.setter(aBlock, v3, v24, v25);
    }
    else
    {
      LOBYTE(aBlock[0]) = 1;
      swift_retain(v3);
      static Published.subscript.setter(aBlock, v3, v24, v25);
      v26 = sub_10001D948();
      v27 = (void *)static OS_dispatch_queue.main.getter(v26);
      static DispatchTime.now()();
      v28 = v42;
      + infix(_:_:)(v17, 2.4);
      v41 = *(_QWORD *)(v41 + 8);
      v29 = v43;
      ((void (*)(char *, uint64_t))v41)(v17, v43);
      aBlock[4] = sub_1001D0A00;
      v51 = v3;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100075908;
      aBlock[3] = &unk_100271010;
      v30 = _Block_copy(aBlock);
      v31 = v51;
      swift_retain(v3);
      v32 = swift_release(v31);
      v33 = v44;
      static DispatchQoS.unspecified.getter(v32);
      aBlock[0] = _swiftEmptyArrayStorage;
      v34 = sub_100007D5C((unint64_t *)&qword_100291BF0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v35 = sub_100006DF4(&qword_10028AC30);
      v36 = sub_100012334((unint64_t *)&qword_100291C00, &qword_10028AC30, (uint64_t)&protocol conformance descriptor for [A]);
      v37 = v46;
      v38 = v35;
      v39 = v49;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v36, v49, v34);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v28, v33, v37, v30);
      _Block_release(v30);

      (*(void (**)(char *, id))(v48 + 8))(v37, v39);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v47);
      ((void (*)(char *, uint64_t))v41)(v28, v29);
    }
  }
}

uint64_t sub_1001D0728(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  char v5;

  KeyPath = swift_getKeyPath(&unk_1001F74C8);
  v3 = swift_getKeyPath(&unk_1001F74F0);
  v5 = 0;
  swift_retain(a1);
  return static Published.subscript.setter(&v5, a1, KeyPath, v3);
}

uint64_t sub_1001D0794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17SequoiaTranslator20TTSPlaybackViewModel__isPlaying;
  v2 = sub_100006DF4((uint64_t *)&unk_1002987F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001D0808()
{
  return type metadata accessor for TTSPlaybackViewModel(0);
}

uint64_t type metadata accessor for TTSPlaybackViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100298C48;
  if (!qword_100298C48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTSPlaybackViewModel);
  return result;
}

void sub_1001D084C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000936A0();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t sub_1001D08D0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for TTSPlaybackViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001D090C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F74C8);
  v5 = swift_getKeyPath(&unk_1001F74F0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001D098C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F74C8);
  v5 = swift_getKeyPath(&unk_1001F74F0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001D0A00()
{
  uint64_t v0;

  return sub_1001D0728(v0);
}

uint64_t sub_1001D0A08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001D0A18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001D0A20(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D02F4(a1, v1);
}

uint64_t sub_1001D0A28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F75F0);
  v2 = swift_getKeyPath(&unk_1001F7618);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1001D0A98()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F7638);
  v2 = swift_getKeyPath(&unk_1001F7660);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1001D0B08()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001F7680);
  v2 = swift_getKeyPath(&unk_1001F76A8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

double sub_1001D0B78()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_1001F76C8);
  v2 = swift_getKeyPath(&unk_1001F76F0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1001D0BE8(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _QWORD v38[2];

  v36 = a1;
  v37 = a2;
  v3 = sub_100006DF4(&qword_100298F80);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006DF4(&qword_100298F78);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006DF4(&qword_10028CE08);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006DF4(&qword_10028B5B8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v2 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentlyPlayingTranslationID;
  v38[0] = 0;
  v38[1] = 0;
  v18 = sub_100006DF4(&qword_10028D160);
  Published.init(initialValue:)(v38, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v17, v16, v13);
  v19 = v2 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentSide;
  LOBYTE(v38[0]) = 1;
  Published.init(initialValue:)(v38, &type metadata for TTSManager.PlaybackSide);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19, v12, v9);
  v20 = v2 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__wordTimingInfo;
  v38[0] = 0;
  v21 = sub_100006DF4(&qword_100298DC0);
  Published.init(initialValue:)(v38, v21);
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v20, v8, v33);
  v22 = v2 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__totalDuration;
  v38[0] = 0;
  Published.init(initialValue:)(v38, &type metadata for Double);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v22, v5, v35);
  v24 = v36;
  v23 = v37;
  *(_QWORD *)(v2 + 16) = v36;
  *(_QWORD *)(v2 + 24) = v23;
  v25 = (void *)objc_opt_self(NSNotificationCenter);
  v26 = v24;
  v27 = v23;
  v28 = objc_msgSend(v25, "defaultCenter");
  v29 = (void *)objc_opt_self(AVAudioSession);
  v30 = objc_msgSend(v29, "sharedInstance", swift_retain(v2).n128_f64[0]);
  objc_msgSend(v28, "addObserver:selector:name:object:", v2, "handleAudioInterruptionWithNotification:", AVAudioSessionInterruptionNotification, v30);

  swift_release(v2);
  return v2;
}

uint64_t sub_1001D0ED8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v9 + 112) = a5;
  *(_QWORD *)(v9 + 120) = v8;
  *(_BYTE *)(v9 + 187) = a8;
  *(_BYTE *)(v9 + 186) = a7;
  *(_BYTE *)(v9 + 185) = a6;
  *(_QWORD *)(v9 + 96) = a2;
  *(_QWORD *)(v9 + 104) = a4;
  *(_BYTE *)(v9 + 184) = a3;
  *(_QWORD *)(v9 + 88) = a1;
  v10 = type metadata accessor for Locale(0);
  *(_QWORD *)(v9 + 128) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 136) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 144) = swift_task_alloc(v12);
  *(_QWORD *)(v9 + 152) = swift_task_alloc(v12);
  return swift_task_switch(sub_1001D0F60, 0, 0);
}

uint64_t sub_1001D0F60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;

  v1 = v0[15];
  v2 = v0[12];
  ObjectType = swift_getObjectType(v0[11]);
  v0[20] = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(ObjectType, v2);
  v0[21] = v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
  swift_weakInit(v0 + 10, v1);
  return swift_task_switch(sub_1001D100C, 0, 0);
}

uint64_t sub_1001D100C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 144);
  v2 = *(_BYTE *)(v0 + 187);
  v3 = *(_BYTE *)(v0 + 186);
  v4 = *(_BYTE *)(v0 + 185);
  v10 = *(_OWORD *)(v0 + 104);
  v5 = *(unsigned __int8 *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1001D10E0;
  v8 = swift_continuation_init(v0 + 16, 1);
  sub_1001D1250(v8, v0 + 80, v1, v12, v5 ^ 1, v11, v5, v13, v10, *((uint64_t *)&v10 + 1), v6, v7, v4, v3, v2);
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_1001D10E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 176) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 168);
    swift_willThrow();
    swift_bridgeObjectRelease(v3);
    v4 = sub_1001D11D4;
  }
  else
  {
    v5 = v1 + 80;
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 168));
    swift_weakDestroy(v5);
    v4 = sub_1001D116C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001D116C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 8);
  v4(v1, v3);
  v4(v2, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D11D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 8);
  v4(v2, v3);
  v4(v1, v3);
  swift_weakDestroy(v0 + 80);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D1250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Strong;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD aBlock[5];
  uint64_t v83;
  char v84[32];

  v68 = a7;
  v65 = a4;
  v64 = a3;
  v63 = a1;
  v74 = a14;
  v75 = a15;
  v73 = a13;
  v71 = a12;
  v69 = a11;
  v62 = a5 & 1;
  v67 = a10;
  v66 = a9;
  v77 = type metadata accessor for DispatchWorkItemFlags(0);
  v80 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v76 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v78 = *(_QWORD *)(v19 - 8);
  v79 = v19;
  __chkstk_darwin(v19);
  v72 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Locale(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  v24 = __chkstk_darwin(v21);
  v60 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v59 - v25;
  v27 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v70 = static OS_dispatch_queue.main.getter(v27);
  v28 = swift_allocObject(&unk_1002710F8, 24, 7);
  v29 = v28 + 16;
  v30 = v28;
  v61 = v28;
  swift_beginAccess(a2, v84, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  swift_weakInit(v29, Strong);
  swift_release(Strong);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v32(v26, a6, v21);
  v32((char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), a8, v21);
  v33 = *(unsigned __int8 *)(v22 + 80);
  v34 = (v33 + 49) & ~v33;
  v35 = v34 + v23;
  v36 = (v33 + v34 + v23 + 1) & ~v33;
  v37 = (v23 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  v39 = swift_allocObject(&unk_100271120, v38 + 19, v33 | 7);
  v40 = v63;
  *(_QWORD *)(v39 + 16) = v30;
  *(_QWORD *)(v39 + 24) = v40;
  v41 = v65;
  *(_QWORD *)(v39 + 32) = v64;
  *(_QWORD *)(v39 + 40) = v41;
  *(_BYTE *)(v39 + 48) = v62;
  v42 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
  v42(v39 + v34, v26, v21);
  *(_BYTE *)(v39 + v35) = v68;
  v42(v39 + v36, v60, v21);
  v43 = (_QWORD *)(v39 + v37);
  v44 = v67;
  *v43 = v66;
  v43[1] = v44;
  v45 = v39 + v38;
  v46 = v69;
  v47 = v71;
  *(_QWORD *)v45 = v69;
  *(_QWORD *)(v45 + 8) = v47;
  *(_BYTE *)(v45 + 16) = v73;
  *(_BYTE *)(v45 + 17) = v74;
  *(_BYTE *)(v45 + 18) = v75;
  aBlock[4] = sub_1001D42EC;
  v83 = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075908;
  aBlock[3] = &unk_100271138;
  v48 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v44);
  swift_unknownObjectRetain(v46);
  v49 = v61;
  swift_retain(v61);
  swift_bridgeObjectRetain(v41);
  v50 = v72;
  static DispatchQoS.unspecified.getter(v51);
  v81 = _swiftEmptyArrayStorage;
  v52 = sub_10000F730();
  v53 = sub_100006DF4(&qword_10028AC30);
  v54 = sub_10000F778();
  v56 = v76;
  v55 = v77;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v53, v54, v77, v52);
  v57 = (void *)v70;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v50, v56, v48);
  _Block_release(v48);

  (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v55);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v50, v79);
  swift_release(v83);
  return swift_release(v49);
}

uint64_t sub_1001D1680(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, char a14, char a15)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  int v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  id v82;
  Class isa;
  Class v84;
  id v85;
  void (*v86)(char *, uint64_t);
  id v87;
  NSString v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSString v94;
  uint64_t ObjectType;
  char v96;
  uint64_t v97;
  void *v98;
  id v99;
  void *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char *v122;
  char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t aBlock;
  uint64_t v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  char v139[32];

  v125 = a6;
  v126 = a8;
  v130 = a2;
  v131 = a4;
  v19 = sub_100006DF4(&qword_10028F190);
  __chkstk_darwin(v19);
  v21 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Locale(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v127 = (char *)&v117 - v27;
  a1 += 16;
  swift_beginAccess(a1, v139, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong)
    return swift_continuation_throwingResume(v130);
  v29 = Strong;
  v123 = v26;
  v124 = a7;
  v30 = a5 & 1;
  KeyPath = swift_getKeyPath(&unk_1001F75F0);
  v32 = swift_getKeyPath(&unk_1001F7618);
  static Published.subscript.getter(&aBlock, v29, KeyPath);
  swift_release(v32);
  swift_release(KeyPath);
  v33 = v134;
  v34 = v131;
  if (v134)
  {
    if (aBlock == a3 && v134 == v131)
    {
      swift_bridgeObjectRelease(v134);
    }
    else
    {
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(aBlock, v134, a3, v131, 0);
      swift_bridgeObjectRelease(v33);
      if ((v36 & 1) == 0)
        goto LABEL_14;
    }
    v37 = swift_getKeyPath(&unk_1001F7638);
    v38 = swift_getKeyPath(&unk_1001F7660);
    static Published.subscript.getter(&aBlock, v29, v37);
    swift_release(v38);
    swift_release(v37);
    if ((v30 == 0) != aBlock)
    {
      if (qword_10028A488 != -1)
        swift_once(&qword_10028A488, sub_100121150);
      v39 = type metadata accessor for Logger(0);
      v40 = sub_10000F66C(v39, (uint64_t)qword_1002AA4A0);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.info.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "User paused in-progress TTS, cancelling the current playback", v43, 2u);
        swift_slowDealloc(v43, -1, -1);
      }

      sub_1001D3410();
      swift_continuation_throwingResume(v130);
      return swift_release(v29);
    }
  }
LABEL_14:
  v44 = swift_getKeyPath(&unk_1001F75F0);
  v45 = swift_getKeyPath(&unk_1001F7618);
  static Published.subscript.getter(&aBlock, v29, v44);
  swift_release(v45);
  swift_release(v44);
  v46 = v134;
  swift_bridgeObjectRelease(v134);
  v128 = a3;
  if (v46)
  {
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v47 = type metadata accessor for Logger(0);
    sub_10000F66C(v47, (uint64_t)qword_1002AA4A0);
    swift_bridgeObjectRetain_n(v34, 2);
    v48 = swift_retain_n(v29, 2);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.info.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(22, -1);
      v129 = swift_slowAlloc(64, -1);
      v132 = v129;
      *(_DWORD *)v51 = 136446466;
      v117 = v23;
      v52 = v22;
      swift_bridgeObjectRetain(v34);
      aBlock = sub_1001A7FE4(a3, v34, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v134, v51 + 4);
      swift_bridgeObjectRelease_n(v34, 3);
      *(_WORD *)(v51 + 12) = 2082;
      v53 = swift_getKeyPath(&unk_1001F75F0);
      v54 = swift_getKeyPath(&unk_1001F7618);
      static Published.subscript.getter(&aBlock, v29, v53);
      swift_release(v54);
      swift_release(v53);
      if (v134)
        v55 = aBlock;
      else
        v55 = 0;
      if (v134)
        v56 = v134;
      else
        v56 = 0xE000000000000000;
      aBlock = sub_1001A7FE4(v55, v56, &v132);
      v22 = v52;
      v23 = v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v134, v51 + 14);
      v57 = v56;
      a3 = v128;
      swift_bridgeObjectRelease(v57);
      swift_release_n(v29, 2);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "New translation TTS will start before the currently playing one ends. New translation: %{public}s. Currently playing translation: %{public}s", (uint8_t *)v51, 0x16u);
      v58 = v129;
      swift_arrayDestroy(v129, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v34, 2);
      swift_release_n(v29, 2);
    }

    sub_1001D3410();
  }
  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v121 = a13;
  v120 = a12;
  v119 = a11;
  v118 = a10;
  v59 = type metadata accessor for Logger(0);
  sub_10000F66C(v59, (uint64_t)qword_1002AA4A0);
  v60 = swift_bridgeObjectRetain_n(v34, 2);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.debug.getter();
  v63 = os_log_type_enabled(v61, v62);
  LODWORD(v129) = v30;
  v122 = v21;
  if (v63)
  {
    v64 = swift_slowAlloc(18, -1);
    v65 = swift_slowAlloc(32, -1);
    v117 = v23;
    v66 = v22;
    v67 = v65;
    aBlock = v65;
    *(_DWORD *)v64 = 136446466;
    swift_bridgeObjectRetain(v131);
    v132 = sub_1001A7FE4(v128, v131, &aBlock);
    a3 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &aBlock, v64 + 4);
    swift_bridgeObjectRelease_n(v131, 3);
    *(_WORD *)(v64 + 12) = 1026;
    LODWORD(v132) = v30 == 0;
    LOBYTE(v30) = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, (char *)&v132 + 4, v64 + 14);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Setting UI state for TTS with identifier %{public}s; source: %{BOOL,public}d",
      (uint8_t *)v64,
      0x12u);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    v68 = v67;
    v22 = v66;
    v23 = v117;
    swift_slowDealloc(v68, -1, -1);
    v69 = v64;
    v34 = v131;
    swift_slowDealloc(v69, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }

  v70 = swift_getKeyPath(&unk_1001F75F0);
  v71 = swift_getKeyPath(&unk_1001F7618);
  aBlock = a3;
  v134 = v34;
  swift_bridgeObjectRetain(v34);
  swift_retain(v29);
  static Published.subscript.setter(&aBlock, v29, v70, v71);
  v72 = swift_getKeyPath(&unk_1001F7638);
  v73 = swift_getKeyPath(&unk_1001F7660);
  LOBYTE(aBlock) = v30;
  swift_retain(v29);
  static Published.subscript.setter(&aBlock, v29, v72, v73);
  v74 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v75 = v127;
  v76 = v125;
  v74(v127, v125, v22);
  v77 = v124;
  if ((v124 & 1) != 0)
    v78 = v76;
  else
    v78 = v126;
  v79 = v123;
  v74(v123, v78, v22);
  v80 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  v81 = (void *)static OS_dispatch_queue.main.getter(v80);
  v82 = objc_allocWithZone((Class)_LTSpeakRequest);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v84 = Locale._bridgeToObjectiveC()().super.isa;
  v85 = objc_msgSend(v82, "initWithSourceLocale:targetLocale:handlerQueue:", isa, v84, v81);

  v86 = *(void (**)(char *, uint64_t))(v23 + 8);
  v86(v79, v22);
  v86(v75, v22);
  if (v118)
  {
    v87 = v85;
    v88 = String._bridgeToObjectiveC()();
  }
  else
  {
    v89 = v85;
    v88 = 0;
  }
  objc_msgSend(v85, "setSessionID:", v88);

  v90 = v119;
  v91 = v120;
  sub_1001D43A8(v119, v120, v77 & 1);
  v93 = v92;
  v94 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v93);
  objc_msgSend(v85, "setText:", v94);

  ObjectType = swift_getObjectType(v90);
  (*(void (**)(uint64_t, uint64_t))(v91 + 96))(ObjectType, v91);
  objc_msgSend(v85, "setTtsPlaybackRate:");
  v96 = v121;
  objc_msgSend(v85, "setMuteTTSBasedOnRingerSwitchIfPossible:", v121 & 1);
  v97 = swift_allocObject(&unk_1002710F8, 24, 7);
  swift_weakInit(v97 + 16, v29);
  v137 = sub_1001D4560;
  v138 = v97;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v134 = 1107296256;
  v135 = sub_1001D257C;
  v136 = &unk_100271160;
  v98 = _Block_copy(&aBlock);
  swift_release(v138);
  objc_msgSend(v85, "setAudioStartHandler:", v98);
  _Block_release(v98);
  sub_10000A05C(0, (unint64_t *)&qword_10028F160, NSUserDefaults_ptr);
  v99 = v85;
  v100 = (void *)static NSUserDefaults.translationGroupDefaults.getter(v99);
  v101 = NSUserDefaults.onDeviceOnly.getter();

  objc_msgSend(v99, "setForcedOfflineTranslation:", v101 & 1);
  v102 = swift_allocObject(&unk_1002710F8, 24, 7);
  swift_weakInit(v102 + 16, v29);
  v103 = swift_allocObject(&unk_100271198, 56, 7);
  v104 = v128;
  *(_QWORD *)(v103 + 16) = v102;
  *(_QWORD *)(v103 + 24) = v104;
  v105 = v131;
  *(_QWORD *)(v103 + 32) = v131;
  *(_BYTE *)(v103 + 40) = v129;
  *(_QWORD *)(v103 + 48) = v130;
  v137 = sub_1001D4594;
  v138 = v103;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v134 = 1107296256;
  v135 = sub_100095424;
  v136 = &unk_1002711B0;
  v106 = _Block_copy(&aBlock);
  v107 = v138;
  swift_bridgeObjectRetain(v105);
  swift_release(v107);
  objc_msgSend(v99, "setCompletionHandler:", v106);
  _Block_release(v106);
  if ((v96 & 1) != 0)
  {
    if ((a14 & 1) != 0)
    {
      v108 = 112;
      goto LABEL_43;
    }
    v108 = 16;
  }
  else
  {
    if ((a14 & 1) != 0)
    {
      v108 = 96;
LABEL_43:
      v109 = v129;
      v110 = (uint64_t)v122;
      if ((a15 & 1) == 0)
        goto LABEL_49;
      goto LABEL_48;
    }
    v108 = 0;
  }
  v110 = (uint64_t)v122;
  v109 = v129;
  if ((a15 & 1) != 0)
LABEL_48:
    v108 |= 1uLL;
LABEL_49:
  v111 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v110, 1, 1, v111);
  type metadata accessor for MainActor(0);
  v112 = v131;
  swift_bridgeObjectRetain(v131);
  swift_retain(v29);
  v113 = v99;
  v114 = static MainActor.shared.getter(v113);
  v115 = swift_allocObject(&unk_1002711E8, 88, 7);
  *(_QWORD *)(v115 + 16) = v114;
  *(_QWORD *)(v115 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v115 + 32) = v29;
  *(_QWORD *)(v115 + 40) = v108;
  *(_QWORD *)(v115 + 48) = v104;
  *(_QWORD *)(v115 + 56) = v112;
  *(_BYTE *)(v115 + 64) = v109;
  *(_QWORD *)(v115 + 72) = v130;
  *(_QWORD *)(v115 + 80) = v113;
  v116 = sub_100049DC0(v110, (uint64_t)&unk_100298F68, v115);

  swift_release(v116);
  return swift_release(v29);
}

uint64_t sub_1001D2290(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  _BYTE v25[24];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)&v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *v9 = static OS_dispatch_queue.main.getter(v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_10028A488, sub_100121150);
    goto LABEL_4;
  }
  swift_beginAccess(a2 + 16, v25, 0, 0);
  result = swift_weakLoadStrong(a2 + 16);
  if (!result)
    return result;
  a2 = result;
  if (qword_10028A488 != -1)
    goto LABEL_15;
LABEL_4:
  v13 = type metadata accessor for Logger(0);
  sub_10000F66C(v13, (uint64_t)qword_1002AA4A0);
  v14 = swift_bridgeObjectRetain_n(a1, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    *(_DWORD *)v17 = 134349312;
    if (a1)
    {
      if ((unint64_t)a1 >> 62)
      {
        if (a1 >= 0)
          v23 = a1 & 0xFFFFFFFFFFFFFF8;
        else
          v23 = a1;
        swift_bridgeObjectRetain(a1);
        v18 = _CocoaArrayWrapper.endIndex.getter(v23);
        swift_bridgeObjectRelease(a1);
      }
      else
      {
        v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v18 = 0;
    }
    v24 = *(double *)&v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v17 + 4);
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v17 + 12) = 2050;
    v24 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v17 + 14);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Audio started. wordTimingInfo.count: %{public}ld. totalDuration: %{public}f", (uint8_t *)v17, 0x16u);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
  }

  KeyPath = swift_getKeyPath(&unk_1001F76C8);
  v20 = swift_getKeyPath(&unk_1001F76F0);
  v24 = a3;
  swift_retain(a2);
  static Published.subscript.setter(&v24, a2, KeyPath, v20);
  v21 = swift_getKeyPath(&unk_1001F7680);
  v22 = swift_getKeyPath(&unk_1001F76A8);
  v24 = *(double *)&a1;
  swift_bridgeObjectRetain(a1);
  return static Published.subscript.setter(&v24, a2, v21, v22);
}

uint64_t sub_1001D257C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, double);
  uint64_t v7;

  v4 = a2;
  v6 = *(void (**)(uint64_t, double))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_10000A05C(0, &qword_100298F70, _LTWordTimingInfo_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v6(v4, a3);
  swift_release(v5);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1001D25FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61[24];

  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_10000A05C(0, (unint64_t *)&qword_10028AC20, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v17 & 1) != 0)
  {
    swift_beginAccess(a2 + 16, v61, 0, 0);
    result = swift_weakLoadStrong(a2 + 16);
    if (!result)
      return result;
    a2 = result;
    KeyPath = swift_getKeyPath(&unk_1001F75F0);
    v20 = swift_getKeyPath(&unk_1001F7618);
    static Published.subscript.getter(&v59, a2, KeyPath);
    swift_release(v20);
    swift_release(KeyPath);
    v21 = v60;
    if (!v60)
    {
      LODWORD(v13) = 0;
      goto LABEL_10;
    }
    if (v59 == a3 && v60 == a4)
    {
      swift_bridgeObjectRelease(v60);
    }
    else
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, a3, a4, 0);
      swift_bridgeObjectRelease(v21);
      LODWORD(v13) = 0;
      if ((v22 & 1) == 0)
        goto LABEL_10;
    }
    v23 = swift_getKeyPath(&unk_1001F7638);
    v24 = swift_getKeyPath(&unk_1001F7660);
    static Published.subscript.getter(&v59, a2, v23);
    swift_release(v24);
    swift_release(v23);
    LODWORD(v13) = ((a5 & 1) == 0) ^ v59;
LABEL_10:
    if (a1)
    {
      swift_errorRetain(a1);
      if (qword_10028A488 == -1)
        goto LABEL_12;
      goto LABEL_38;
    }
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v36 = type metadata accessor for Logger(0);
    sub_10000F66C(v36, (uint64_t)qword_1002AA4A0);
    v37 = swift_bridgeObjectRetain_n(a4, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v57 = a6;
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      LODWORD(v56) = v13;
      v42 = v41;
      v59 = v41;
      *(_DWORD *)v40 = 136446210;
      swift_bridgeObjectRetain(a4);
      v58 = sub_1001A7FE4(a3, a4, &v59);
      a6 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v40 + 4);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "TTS speak request complete for translation: %{public}s", v40, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      v43 = v42;
      LOBYTE(v42) = v56;
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      if ((v42 & 1) == 0)
      {
LABEL_19:
        swift_bridgeObjectRetain_n(a4, 2);
        v44 = swift_retain_n(a2, 2);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.info.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc(22, -1);
          v48 = swift_slowAlloc(64, -1);
          v58 = v48;
          *(_DWORD *)v47 = 136446466;
          swift_bridgeObjectRetain(a4);
          v59 = sub_1001A7FE4(a3, a4, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v47 + 4);
          swift_bridgeObjectRelease_n(a4, 3);
          *(_WORD *)(v47 + 12) = 2082;
          v49 = swift_getKeyPath(&unk_1001F75F0);
          v50 = swift_getKeyPath(&unk_1001F7618);
          static Published.subscript.getter(&v59, a2, v49);
          swift_release(v50);
          swift_release(v49);
          if (v60)
            v51 = v59;
          else
            v51 = 7104878;
          if (v60)
            v52 = v60;
          else
            v52 = 0xE300000000000000;
          v59 = sub_1001A7FE4(v51, v52, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v47 + 14);
          swift_bridgeObjectRelease(v52);
          swift_release_n(a2, 2);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Currently playing translation was changed before it completed. Completed translation: %{public}s. Currently playing translation: %{public}s", (uint8_t *)v47, 0x16u);
          swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v47, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(a4, 2);
          swift_release_n(a2, 2);
        }

        goto LABEL_34;
      }
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);

      if ((v13 & 1) == 0)
        goto LABEL_19;
    }
    sub_1001D3618();
LABEL_34:
    swift_continuation_throwingResume(a6);
    return swift_release(a2);
  }
  __break(1u);
LABEL_38:
  swift_once(&qword_10028A488, sub_100121150);
LABEL_12:
  v25 = type metadata accessor for Logger(0);
  sub_10000F66C(v25, (uint64_t)qword_1002AA4A0);
  swift_bridgeObjectRetain(a4);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a4);
  v26 = swift_errorRetain(a1);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(8, -1);
    v57 = a6;
    v31 = (_QWORD *)v30;
    v32 = swift_slowAlloc(32, -1);
    v59 = v32;
    *(_DWORD *)v29 = 136446466;
    v56 = a2;
    swift_bridgeObjectRetain(a4);
    v58 = sub_1001A7FE4(a3, a4, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v29 + 4);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v29 + 12) = 2112;
    v33 = _convertErrorToNSError(_:)(a1);
    v58 = v33;
    a2 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v29 + 14);
    *v31 = v33;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "TTS speak request failed for translation: %{public}s. Error: %@", (uint8_t *)v29, 0x16u);
    v34 = sub_100006DF4((uint64_t *)&unk_100291430);
    swift_arrayDestroy(v31, 1, v34);
    v35 = v31;
    a6 = v57;
    swift_slowDealloc(v35, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    if ((v13 & 1) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease_n(a4, 2);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if ((v13 & 1) != 0)
LABEL_28:
    sub_1001D3618();
LABEL_29:
  v53 = sub_100006DF4((uint64_t *)&unk_100296430);
  v54 = swift_allocError(v53, &protocol self-conformance witness table for Error, 0, 0);
  *v55 = a1;
  swift_continuation_throwingResumeWithError(a6, v54);
  return swift_release(a2);
}

uint64_t sub_1001D2DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 80) = v13;
  *(_QWORD *)(v8 + 88) = v14;
  *(_BYTE *)(v8 + 153) = a8;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 56) = a5;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 96) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 104) = v10;
  *(_QWORD *)(v8 + 112) = v11;
  return swift_task_switch(sub_1001D2E4C, v10, v11);
}

uint64_t sub_1001D2E4C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 24);
  return swift_task_switch(sub_1001D2E6C, 0, 0);
}

uint64_t sub_1001D2E6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[15];
  v2 = v0[7];
  v3 = swift_task_alloc(32);
  v0[16] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[17] = v4;
  v5 = sub_100006DF4(&qword_10028F1A8);
  *v4 = v0;
  v4[1] = sub_1001D2F20;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 4, 0, 0, 0xD000000000000022, 0x80000001001FAA80, sub_100082194, v3, v5);
}

uint64_t sub_1001D2F20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001D2F7C, 0, 0);
}

uint64_t sub_1001D2F7C()
{
  _QWORD *v0;

  v0[18] = v0[4];
  return swift_task_switch(sub_1001D2F94, v0[13], v0[14]);
}

uint64_t sub_1001D2F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  char v41;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  KeyPath = swift_getKeyPath(&unk_1001F75F0);
  v3 = swift_getKeyPath(&unk_1001F7618);
  static Published.subscript.getter((_QWORD *)(v0 + 16), v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 24);
  if (!v4)
  {
    v10 = 0;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  if (v5 == v6 && v4 == v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, *(_QWORD *)(v0 + 24), v6, v7, 0);
  swift_bridgeObjectRelease();
  v10 = 0;
  if ((v9 & 1) == 0)
  {
LABEL_9:
    v11 = *(_QWORD *)(v0 + 144);
    if (!v11)
      goto LABEL_17;
LABEL_10:
    swift_errorRetain(v11);
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v12 = type metadata accessor for Logger(0);
    sub_10000F66C(v12, (uint64_t)qword_1002AA4A0);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v41 = v10;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = _convertErrorToNSError(_:)(v11);
      *(_QWORD *)(v0 + 40) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v16 + 4);
      *v17 = v18;
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "TTS audio session config failed. Error: %@", v16, 0xCu);
      v19 = sub_100006DF4((uint64_t *)&unk_100291430);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      if ((v41 & 1) == 0)
        goto LABEL_25;
    }
    else
    {
      swift_errorRelease(v11);

      if ((v10 & 1) == 0)
      {
LABEL_25:
        v31 = *(_QWORD *)(v0 + 80);
        v32 = sub_100006DF4((uint64_t *)&unk_100296430);
        v33 = swift_allocError(v32, &protocol self-conformance witness table for Error, 0, 0);
        *v34 = v11;
        swift_continuation_throwingResumeWithError(v31, v33);
        swift_errorRelease(v11);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
    sub_1001D3618();
    goto LABEL_25;
  }
LABEL_16:
  v20 = *(_BYTE *)(v0 + 153);
  v21 = *(_QWORD *)(v0 + 48);
  v22 = swift_getKeyPath(&unk_1001F7638);
  v23 = swift_getKeyPath(&unk_1001F7660);
  static Published.subscript.getter((_QWORD *)(v0 + 152), v21, v22);
  swift_release(v22);
  swift_release(v23);
  v10 = ((v20 & 1) == 0) ^ *(_BYTE *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 144);
  if (v11)
    goto LABEL_10;
LABEL_17:
  if ((v10 & 1) != 0)
  {
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10000F66C(v24, (uint64_t)qword_1002AA4A0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "TTS speak request starting", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    v29 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 48);

    objc_msgSend(*(id *)(v30 + 16), "translate:", v29);
  }
  else
  {
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10000F66C(v35, (uint64_t)qword_1002AA4A0);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Not starting TTS request since it's been cancelled while doing prep work", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D3410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = v0;
  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v2 = type metadata accessor for Logger(0);
  sub_10000F66C(v2, (uint64_t)qword_1002AA4A0);
  v3 = swift_retain_n(v0, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    KeyPath = swift_getKeyPath(&unk_1001F75F0);
    v9 = swift_getKeyPath(&unk_1001F7618);
    static Published.subscript.getter(&v13, v1, KeyPath);
    swift_release(v9);
    swift_release(KeyPath);
    if (v14)
      v10 = v13;
    else
      v10 = 0;
    if (v14)
      v11 = v14;
    else
      v11 = 0xE000000000000000;
    v13 = sub_1001A7FE4(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cleaning up translator to cancel currently playing translation: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release_n(v1, 2);
  }

  objc_msgSend(*(id *)(v1 + 16), "cleanup");
  return sub_1001D3618();
}

uint64_t sub_1001D3618()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  KeyPath = swift_getKeyPath(&unk_1001F75F0);
  v2 = swift_getKeyPath(&unk_1001F7618);
  v8[0] = 0;
  v8[1] = 0;
  swift_retain(v0);
  static Published.subscript.setter(v8, v0, KeyPath, v2);
  v3 = swift_getKeyPath(&unk_1001F7638);
  v4 = swift_getKeyPath(&unk_1001F7660);
  LOBYTE(v8[0]) = 1;
  swift_retain(v0);
  static Published.subscript.setter(v8, v0, v3, v4);
  v5 = swift_getKeyPath(&unk_1001F7680);
  v6 = swift_getKeyPath(&unk_1001F76A8);
  v8[0] = 0;
  swift_retain(v0);
  return static Published.subscript.setter(v8, v0, v5, v6);
}

void sub_1001D3704(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[5];
  __int128 v21;
  __int128 v22;

  v1 = Notification.userInfo.getter(a1);
  if (!v1)
    return;
  v2 = v1;
  v19[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionInterruptionTypeKey);
  v19[1] = v3;
  AnyHashable.init<A>(_:)(v20, v19, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v4 = sub_1001A87EC((uint64_t)v20), (v5 & 1) != 0))
  {
    sub_10000A0EC(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v21);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10005DEC0((uint64_t)v20);
  if (!*((_QWORD *)&v22 + 1))
  {
    sub_1000110E8((uint64_t)&v21);
    return;
  }
  if ((swift_dynamicCast(v19, &v21, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) == 0)
    return;
  if (!v19[0])
  {
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10000F66C(v11, (uint64_t)qword_1002AA4A0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v14))
      goto LABEL_25;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "Audio interruption ended";
    goto LABEL_24;
  }
  if (v19[0] != 1)
  {
    if (qword_10028A488 != -1)
      swift_once(&qword_10028A488, sub_100121150);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10000F66C(v17, (uint64_t)qword_1002AA4A0);
    v13 = Logger.logObject.getter(v18);
    v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v14))
      goto LABEL_25;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "Audio interruption with unhandled type";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 2u);
    swift_slowDealloc(v15, -1, -1);
LABEL_25:

    return;
  }
  if (qword_10028A488 != -1)
    swift_once(&qword_10028A488, sub_100121150);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000F66C(v6, (uint64_t)qword_1002AA4A0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Audio interruption began", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_1001D3410();
}

uint64_t sub_1001D3A88()
{
  id *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentlyPlayingTranslationID;
  v2 = sub_100006DF4(&qword_10028B5B8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__currentSide;
  v4 = sub_100006DF4(&qword_10028CE08);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__wordTimingInfo;
  v6 = sub_100006DF4(&qword_100298F78);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)v0 + OBJC_IVAR____TtC17SequoiaTranslator10TTSManager__totalDuration;
  v8 = sub_100006DF4(&qword_100298F80);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1001D3B70()
{
  return type metadata accessor for TTSManager(0);
}

uint64_t type metadata accessor for TTSManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100298D98;
  if (!qword_100298D98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TTSManager);
  return result;
}

void sub_1001D3BB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  v10[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v10[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10001DFF8(319, (unint64_t *)&qword_10028F0C0, &qword_10028D160);
  if (v3 <= 0x3F)
  {
    v10[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001D248(319, &qword_100298DB0, (uint64_t)&type metadata for TTSManager.PlaybackSide);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001DFF8(319, &qword_100298DB8, &qword_100298DC0);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        sub_10001D248(319, (unint64_t *)&unk_100298DC8, (uint64_t)&type metadata for Double);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 6, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for TTSManager.PlaybackSide(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001D3D0C + 4 * byte_1001F7515[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001D3D40 + 4 * byte_1001F7510[v4]))();
}

uint64_t sub_1001D3D40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D3D48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D3D50);
  return result;
}

uint64_t sub_1001D3D5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D3D64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001D3D68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D3D70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSManager.PlaybackSide()
{
  return &type metadata for TTSManager.PlaybackSide;
}

unint64_t sub_1001D3D90()
{
  unint64_t result;

  result = qword_100298F58;
  if (!qword_100298F58)
  {
    result = swift_getWitnessTable(&unk_1001F758C, &type metadata for TTSManager.PlaybackSide);
    atomic_store(result, &qword_100298F58);
  }
  return result;
}

uint64_t sub_1001D3DD4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for TTSManager(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

double sub_1001D3E10@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F75F0);
  v5 = swift_getKeyPath(&unk_1001F7618);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1001D3E8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F75F0);
  v6 = swift_getKeyPath(&unk_1001F7618);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_1001D3F0C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F7638);
  v5 = swift_getKeyPath(&unk_1001F7660);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1001D3F88(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F7638);
  v5 = swift_getKeyPath(&unk_1001F7660);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001D3FF8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F7680);
  v5 = swift_getKeyPath(&unk_1001F76A8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1001D4074(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F7680);
  v5 = swift_getKeyPath(&unk_1001F76A8);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

double sub_1001D40EC@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  double v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001F76C8);
  v5 = swift_getKeyPath(&unk_1001F76F0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  result = v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1001D4168(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001F76C8);
  v5 = swift_getKeyPath(&unk_1001F76F0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1001D41F8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D421C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 49) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4 + 1) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  v10(v0 + v7, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, v9 + 19, v6);
}

uint64_t sub_1001D42EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for Locale(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 49) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v3 + v4;
  v6 = (v2 + v3 + v4 + 1) & ~v2;
  v7 = (v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001D1680(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48), v0 + v3, *(unsigned __int8 *)(v0 + v5), v0 + v6, *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), *(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8), *(_BYTE *)(v0 + v8 + 16), *(_BYTE *)(v0 + v8 + 17), *(_BYTE *)(v0 + v8 + 18));
}

uint64_t sub_1001D4390(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001D43A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001D43A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t ObjectType;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSString v21;
  id v22;
  uint64_t v24;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  ObjectType = swift_getObjectType(a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(ObjectType, a2);
  v14 = static Locale.== infix(_:_:)(v12, v10);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  v15(v12, v6);
  if ((v14 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(ObjectType, a2);
  v17 = 72;
  if ((a3 & 1) != 0)
    v17 = 64;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + v17))(ObjectType, a2);
  v19 = v18;
  if (byte_1002AA518 == 1)
  {
    v20 = (void *)objc_opt_self(_LTTextToSpeechSanitizer);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v22 = objc_msgSend(v20, "stringReplacingRedactionsWithBeepMarker:", v21);

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  }
  return v16;
}

uint64_t sub_1001D4560(uint64_t a1, double a2)
{
  uint64_t v2;

  return sub_1001D2290(a1, v2, a2);
}

uint64_t sub_1001D4568()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D4594(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D25FC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1001D45A8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1001D45E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = *(_QWORD *)(v1 + 24);
  v12 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 64);
  v10 = (_QWORD *)swift_task_alloc(dword_100298F64);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001D380;
  return sub_1001D2DCC(a1, v12, v4, v5, v6, v7, v8, v9);
}

void sub_1001D46A4(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  BOOL v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  _QWORD v33[5];

  v2 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC17SequoiaTranslator16ConversationTurn_request), "censorSpeech");
  v31 = v1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_censorSpeech) = v2;
  sub_10008416C((uint64_t)v33);
  if (!v33[3])
  {
    sub_1001D4A48((uint64_t)v33);
    return;
  }
  v3 = sub_100006DF4(&qword_100298120);
  v4 = sub_10000A05C(0, &qword_10028F180, _LTTranslationResult_ptr);
  if ((swift_dynamicCast(&v32, v33, v3, v4, 6) & 1) != 0)
  {
    v5 = v32;
    v6 = objc_msgSend(v32, "route") == (id)1;
    *(_BYTE *)(v31 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_offline) = v6;
    v33[0] = v5;
    v7 = sub_10008612C();
    *(_BYTE *)(v31 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_lowQualityMT) = TranslationResult.isLowConfidence.getter(v4, v7) & 1;
    v8 = objc_msgSend(v5, "translations");
    v9 = sub_10000A05C(0, (unint64_t *)&unk_10028F1E0, _LTTranslationCandidate_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v27 = v10;
      else
        v27 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v28 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease();
      if (v28)
      {
LABEL_5:
        if ((v10 & 0xC000000000000001) != 0)
        {
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
        }
        else
        {
          if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_29;
          }
          v11 = *(id *)(v10 + 32);
        }
        v12 = v11;
        v13 = objc_msgSend(v11, "statistics", swift_bridgeObjectRelease().n128_f64[0]);
        if (v13)
        {
          v14 = v13;
          v15 = objc_msgSend(v13, "inputTokenCount");
          *(_QWORD *)(v31 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_inputTokenCount) = v15;
          v16 = objc_msgSend(v14, "inputSubtokenCount");

          *(_QWORD *)(v31 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_inputSubtokenCount) = v16;
        }
        v17 = objc_msgSend(v12, "senses");
        v18 = sub_10000A05C(0, &qword_10028F360, _LTTranslationSense_ptr);
        v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

        v30 = v12;
        if (!((unint64_t)v10 >> 62))
        {
          v19 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v19)
          {
LABEL_12:
            if (v19 < 1)
            {
              __break(1u);
              return;
            }
            v20 = 0;
            v21 = OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_senseDisambiguation;
            v22 = OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_nBestDisplay;
            do
            {
              if ((v10 & 0xC000000000000001) != 0)
                v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v10);
              else
                v23 = *(id *)(v10 + 8 * v20 + 32);
              v24 = v23;
              ++v20;
              v25 = objc_msgSend(v23, "isPhrasebookMatch");

              if (v25)
                v26 = v22;
              else
                v26 = v21;
              *(_BYTE *)(v31 + v26) = 1;
            }
            while (v19 != v20);
          }
LABEL_33:

          swift_bridgeObjectRelease();
          return;
        }
LABEL_29:
        if (v10 < 0)
          v29 = v10;
        else
          v29 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v10);
        v19 = _CocoaArrayWrapper.endIndex.getter(v29);
        swift_bridgeObjectRelease();
        if (v19)
          goto LABEL_12;
        goto LABEL_33;
      }
    }
    else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_5;
    }

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001D4A48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006DF4((uint64_t *)&unk_10028F1C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D4A88(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEF65636E65646966;
  v3 = 0x6E6F43776F4C7369;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6563617053736168;
    else
      v5 = 1954047348;
    if (v4 == 1)
      v6 = 0xED00007265746641;
    else
      v6 = 0xE400000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6E6F43776F4C7369;
  v6 = 0xEF65636E65646966;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x6563617053736168;
    else
      v3 = 1954047348;
    if (v7 == 1)
      v2 = 0xED00007265746641;
    else
      v2 = 0xE400000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_1001D4BB8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D4C08(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D4CD0 + 4 * byte_1001F7717[a2]))(0xD000000000000012);
}

uint64_t sub_1001D4CD0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001001F7E30;
  if (a1 == 0xD000000000000012 && v1 == 0x80000001001F7E30)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000012, 0x80000001001F7E30, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1001D4DF0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D4E5C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D4EF0 + 4 * byte_1001F7723[a2]))(0x657474616D726F66);
}

uint64_t sub_1001D4EF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x657474616D726F66 && v1 == 0xEF676E6972745364)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x657474616D726F66, 0xEF676E6972745364, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF676E6972745364);
  return v2 & 1;
}

uint64_t sub_1001D4FD0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x65746C4174736562;
  if (v2)
    v4 = 0xEF65766974616E72;
  else
    v4 = 0x80000001001F7E00;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x65746C4174736562;
  if ((a2 & 1) != 0)
    v6 = 0x80000001001F7E00;
  else
    v6 = 0xEF65766974616E72;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1001D5084(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x74616E7265746C61;
  else
    v3 = 0x656C61636F6CLL;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEC00000073657669;
  if ((a2 & 1) != 0)
    v5 = 0x74616E7265746C61;
  else
    v5 = 0x656C61636F6CLL;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000073657669;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1001D512C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D517C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D5214 + 4 * byte_1001F772E[a2]))(0x6974696E69666564);
}

uint64_t sub_1001D5214(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6974696E69666564 && v1 == 0xEA00000000006E6FLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6974696E69666564, 0xEA00000000006E6FLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006E6FLL);
  return v2 & 1;
}

void sub_1001D52F4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1001D5340(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D53A8 + 4 * byte_1001F7738[a2]))(0x697461636F766E69);
}

uint64_t sub_1001D53A8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x697461636F766E69 && v1 == 0xEC00000064496E6FLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x697461636F766E69, 0xEC00000064496E6FLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000064496E6FLL);
  return v2 & 1;
}

uint64_t sub_1001D5444(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 1701602409;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x74616C736E617274;
    else
      v4 = 0x726F727265;
    if (v3 == 1)
      v5 = 0xEB00000000676E69;
    else
      v5 = 0xE500000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x74616C736E617274;
      else
        v2 = 0x726F727265;
      if (v6 == 1)
        v7 = 0xEB00000000676E69;
      else
        v7 = 0xE500000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = 1701602409;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v4 != 1701602409)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_1001D5554(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D5594(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D5638 + 4 * byte_1001F7742[a2]))(0x6554746567726174);
}

uint64_t sub_1001D5638(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6554746567726174 && v1 == 0xEA00000000007478)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6554746567726174, 0xEA00000000007478, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000007478);
  return v2 & 1;
}

uint64_t sub_1001D5724(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000079;
  v3 = 0x72746E4572657375;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65676175676E616CLL;
    else
      v5 = 0x4C52556E65706FLL;
    if (v4 == 1)
      v6 = 0xEE0065676E616843;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x72746E4572657375;
  v6 = 0xE900000000000079;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x65676175676E616CLL;
    else
      v3 = 0x4C52556E65706FLL;
    if (v7 == 1)
      v2 = 0xEE0065676E616843;
    else
      v2 = 0xE700000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_1001D5854(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6472616F6279656BLL;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x616E6F6974636964;
    else
      v4 = 0x6F68706F7263696DLL;
    if (v3 == 1)
      v5 = 0xEA00000000007972;
    else
      v5 = 0xEA0000000000656ELL;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x616E6F6974636964;
      else
        v2 = 0x6F68706F7263696DLL;
      if (v6 == 1)
        v7 = 0xEA00000000007972;
      else
        v7 = 0xEA0000000000656ELL;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x6472616F6279656BLL;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x6472616F6279656BLL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_1001D597C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D59CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D5A60 + 4 * byte_1001F774D[a2]))(0x6465766965636572);
}

uint64_t sub_1001D5A60(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6465766965636572 && v1 == 0xED0000726F727245)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6465766965636572, 0xED0000726F727245, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xED0000726F727245);
  return v2 & 1;
}

void sub_1001D5B30(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D5B78(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D5BE8 + 4 * byte_1001F7756[a2]))(0x7469617274726F70);
}

uint64_t sub_1001D5BE8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7469617274726F70 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7469617274726F70, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

uint64_t sub_1001D5C9C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000013;
  v3 = 0x80000001001F7D20;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x726F7774654E6F6ELL;
    else
      v5 = 0xD000000000000014;
    if (v4 == 1)
      v6 = 0xE90000000000006BLL;
    else
      v6 = 0x80000001001F7D40;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000013;
  v6 = 0x80000001001F7D20;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x726F7774654E6F6ELL;
    else
      v2 = 0xD000000000000014;
    if (v7 == 1)
      v3 = 0xE90000000000006BLL;
    else
      v3 = 0x80000001001F7D40;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_1001D5DA0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1886352499;
  else
    v3 = 0x7472617473;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1886352499;
  else
    v5 = 0x7472617473;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1001D5E38(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1001D5E90(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D5F04 + 4 * byte_1001F775F[a2]))(0x74786554646E6966);
}

uint64_t sub_1001D5F04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x74786554646E6966 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x74786554646E6966, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1001D5FAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D5724(*a1, *a2);
}

Swift::Int sub_1001D5FB8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEE0065676E616843;
  v3 = 0x65676175676E616CLL;
  if (v1 != 1)
  {
    v3 = 0x4C52556E65706FLL;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x72746E4572657375;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE900000000000079;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001D6068(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEE0065676E616843;
  v3 = 0x65676175676E616CLL;
  if (*v1 != 1)
  {
    v3 = 0x4C52556E65706FLL;
    v2 = 0xE700000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x72746E4572657375;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE900000000000079;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001D60F4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEE0065676E616843;
  v4 = 0x65676175676E616CLL;
  if (v2 != 1)
  {
    v4 = 0x4C52556E65706FLL;
    v3 = 0xE700000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x72746E4572657375;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE900000000000079;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1001D61A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001D6FFC(*a1);
  *a2 = result;
  return result;
}

void sub_1001D61CC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000079;
  v4 = 0xEE0065676E616843;
  v5 = 0x65676175676E616CLL;
  if (v2 != 1)
  {
    v5 = 0x4C52556E65706FLL;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x72746E4572657375;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

_BYTE *sub_1001D623C(char a1)
{
  _BYTE *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *result;
  objc_super v9;

  v3 = &v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_sourceLocale];
  v4 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair] = 0;
  v5 = &v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start];
  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(&v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_end], 1, 1, v6);
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_eventType] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_characterCount] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_pastedCharacterCount] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_inputTokenCount] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_inputSubtokenCount] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_airplaneModeEnabled] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_onDeviceModeEnabled] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_offline] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_censorSpeech] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_lowQualityMT] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_nBestDisplay] = 0;
  v1[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_senseDisambiguation] = 0;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for TypedInputInstrumentation(0);
  result = objc_msgSendSuper2(&v9, "init");
  result[OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_eventType] = a1;
  return result;
}

id sub_1001D63DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TypedInputInstrumentation(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001D6484()
{
  return type metadata accessor for TypedInputInstrumentation(0);
}

uint64_t type metadata accessor for TypedInputInstrumentation(uint64_t a1)
{
  uint64_t result;

  result = qword_100298FB0;
  if (!qword_100298FB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TypedInputInstrumentation);
  return result;
}

void sub_1001D64C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  sub_10015C304(319, (unint64_t *)&qword_100292A50, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    sub_10015C304(319, (unint64_t *)&qword_10028E960, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1001F77A8;
      v10 = (char *)&value witness table for Builtin.Int64 + 64;
      v11 = (char *)&value witness table for Builtin.Int64 + 64;
      v12 = (char *)&value witness table for Builtin.Int64 + 64;
      v13 = (char *)&value witness table for Builtin.Int64 + 64;
      v14 = &unk_1001F77C0;
      v15 = &unk_1001F77C0;
      v16 = &unk_1001F77C0;
      v17 = &unk_1001F77C0;
      v18 = &unk_1001F77C0;
      v19 = &unk_1001F77C0;
      v20 = &unk_1001F77C0;
      swift_updateClassMetadata2(a1, 256, 16, v6, a1 + 80);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TypedInputInstrumentation.EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001D65F4 + 4 * byte_1001F7769[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001D6628 + 4 * byte_1001F7764[v4]))();
}

uint64_t sub_1001D6628(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6630(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D6638);
  return result;
}

uint64_t sub_1001D6644(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D664CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001D6650(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6658(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TypedInputInstrumentation.EventType()
{
  return &type metadata for TypedInputInstrumentation.EventType;
}

unint64_t sub_1001D6678()
{
  unint64_t result;

  result = qword_100298FC0;
  if (!qword_100298FC0)
  {
    result = swift_getWitnessTable(&unk_1001F785C, &type metadata for TypedInputInstrumentation.EventType);
    atomic_store(result, (unint64_t *)&qword_100298FC0);
  }
  return result;
}

void *sub_1001D66BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  char isUniquelyReferenced_nonNull_native;
  __n128 v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  char v32;
  Class isa;
  char v34;
  void *v35;
  uint64_t v36;
  Class v37;
  char v38;
  void *v39;
  Class v40;
  char v41;
  void *v42;
  Class v43;
  char v44;
  void *v45;
  Class v46;
  char v47;
  void *v48;
  Class v49;
  char v50;
  unint64_t v51;
  void *v52;
  Class v53;
  char v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  char v60;
  void *v61;
  Class v62;
  char v63;
  void *v64;
  Class v65;
  char v66;
  void *v67;
  Class v68;
  char v69;
  void *v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  Swift::Double v75;
  Class v76;
  char v77;
  __n128 v78;
  void (*v79)(char *, uint64_t, __n128);
  Class v80;
  char v81;
  void *v82;
  Class v83;
  char v84;
  void *v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void *v92;
  void *v93;
  char v94[24];

  v1 = v0;
  v2 = sub_100006DF4(&qword_1002948B0);
  v3 = __chkstk_darwin(v2);
  v90 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v87 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v88 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v91 = (char *)&v87 - v11;
  v12 = sub_100006DF4((uint64_t *)&unk_10028FE50);
  __chkstk_darwin(v12);
  v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_sourceLocale;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_sourceLocale, v94, 0, 0);
  sub_10000B074(v19, (uint64_t)v14, (uint64_t *)&unk_10028FE50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10000A020((uint64_t)v14, (uint64_t *)&unk_10028FE50);
    v20 = &_swiftEmptyDictionarySingleton;
  }
  else
  {
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    Locale.ltIdentifier.getter(v21);
    v23 = v22;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v93 = &_swiftEmptyDictionarySingleton;
    sub_1001AAA14((uint64_t)v24, 0x6F4C656372756F73, 0xEC000000656C6163, isUniquelyReferenced_nonNull_native);
    v20 = v93;
    v26 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v16 + 8))(v18, v15, v26);
  }
  v27 = *(void **)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_localePair);
  v89 = v8;
  if (v27)
  {
    v28 = v27;
    sub_100005EC8();
    v30 = v29;
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    v32 = swift_isUniquelyReferenced_nonNull_native(v20);
    v93 = v20;
    sub_1001AAA14((uint64_t)v31, 0x6150656C61636F6CLL, 0xEA00000000007269, v32);
    v20 = v93;

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_10008BA78();
  isa = NSNumber.init(integerLiteral:)(*(_QWORD *)(v1
                                                 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_characterCount)).super.super.isa;
  v34 = swift_isUniquelyReferenced_nonNull_native(v20);
  v93 = v20;
  sub_1001AAA14((uint64_t)isa, 0x6574636172616863, 0xEE00746E756F4372, v34);
  v35 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v36 = OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_pastedCharacterCount;
  v37 = NSNumber.init(BOOLeanLiteral:)(*(_QWORD *)(v1
                                                 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_pastedCharacterCount) > 0).super.super.isa;
  v38 = swift_isUniquelyReferenced_nonNull_native(v35);
  v93 = v35;
  sub_1001AAA14((uint64_t)v37, 0x6576456574736170, 0xEA0000000000746ELL, v38);
  v39 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v40 = NSNumber.init(integerLiteral:)(*(_QWORD *)(v1 + v36)).super.super.isa;
  v41 = swift_isUniquelyReferenced_nonNull_native(v39);
  v93 = v39;
  sub_1001AAA14((uint64_t)v40, 0xD000000000000014, 0x80000001002029A0, v41);
  v42 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v43 = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v1
                                                + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_airplaneModeEnabled)).super.super.isa;
  v44 = swift_isUniquelyReferenced_nonNull_native(v42);
  v93 = v42;
  sub_1001AAA14((uint64_t)v43, 0x656E616C70726961, 0xEC00000065646F4DLL, v44);
  v45 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v46 = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v1
                                                + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_onDeviceModeEnabled)).super.super.isa;
  v47 = swift_isUniquelyReferenced_nonNull_native(v45);
  v93 = v45;
  sub_1001AAA14((uint64_t)v46, 0x6563697665446E6FLL, 0xEC00000065646F4DLL, v47);
  v48 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v49 = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v1
                                                + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_offline)).super.super.isa;
  v50 = swift_isUniquelyReferenced_nonNull_native(v48);
  v93 = v48;
  v51 = 0xE700000000000000;
  sub_1001AAA14((uint64_t)v49, 0x656E696C66666FLL, 0xE700000000000000, v50);
  v52 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v53 = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v1
                                                + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_censorSpeech)).super.super.isa;
  v54 = swift_isUniquelyReferenced_nonNull_native(v52);
  v93 = v52;
  sub_1001AAA14((uint64_t)v53, 0x7053726F736E6563, 0xEC00000068636565, v54);
  v55 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_eventType))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_eventType) == 1)
      v51 = 0xEE0065676E616843;
  }
  else
  {
    v51 = 0xE900000000000079;
  }
  v57 = (uint64_t)v90;
  v56 = v91;
  v58 = v89;
  v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  v60 = swift_isUniquelyReferenced_nonNull_native(v55);
  v93 = v55;
  sub_1001AAA14((uint64_t)v59, 0x707954746E657665, 0xE900000000000065, v60);
  v61 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v62 = Bool._bridgeToObjectiveC()().super.super.isa;
  v63 = swift_isUniquelyReferenced_nonNull_native(v61);
  v93 = v61;
  sub_1001AAA14((uint64_t)v62, 0xD000000000000013, 0x8000000100200BF0, v63);
  v64 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v65 = Bool._bridgeToObjectiveC()().super.super.isa;
  v66 = swift_isUniquelyReferenced_nonNull_native(v64);
  v93 = v64;
  sub_1001AAA14((uint64_t)v65, 0x696C617551776F6CLL, 0xEC000000544D7974, v66);
  v67 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v68 = Bool._bridgeToObjectiveC()().super.super.isa;
  v69 = swift_isUniquelyReferenced_nonNull_native(v67);
  v93 = v67;
  sub_1001AAA14((uint64_t)v68, 0x736944747365426ELL, 0xEC00000079616C70, v69);
  v70 = v93;
  swift_bridgeObjectRelease(0x8000000000000000);
  v71 = v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start;
  swift_beginAccess(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_start, &v93, 0, 0);
  sub_10000B074(v71, (uint64_t)v6, &qword_1002948B0);
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  if (v72((uint64_t)v6, 1, v7) == 1)
  {
    sub_10000A020((uint64_t)v6, &qword_1002948B0);
  }
  else
  {
    v73 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v73(v56, v6, v7);
    sub_10000B074(v1 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_end, v57, &qword_1002948B0);
    if (v72(v57, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v7);
      sub_10000A020(v57, &qword_1002948B0);
    }
    else
    {
      v74 = v88;
      v73(v88, (char *)v57, v7);
      v75 = Date.timeIntervalSince(_:)(v56);
      v76 = NSNumber.init(floatLiteral:)(v75).super.super.isa;
      v77 = swift_isUniquelyReferenced_nonNull_native(v70);
      v92 = v70;
      sub_1001AAA14((uint64_t)v76, 0x6E6F697461727564, 0xE800000000000000, v77);
      v70 = v92;
      v78 = swift_bridgeObjectRelease(0x8000000000000000);
      v79 = *(void (**)(char *, uint64_t, __n128))(v58 + 8);
      v79(v74, v7, v78);
      ((void (*)(char *, uint64_t))v79)(v56, v7);
    }
  }
  v80 = NSNumber.init(integerLiteral:)(*(_QWORD *)(v1
                                                 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_inputSubtokenCount)).super.super.isa;
  v81 = swift_isUniquelyReferenced_nonNull_native(v70);
  v92 = v70;
  sub_1001AAA14((uint64_t)v80, 0x64726F77627573, 0xE700000000000000, v81);
  v82 = v92;
  swift_bridgeObjectRelease(0x8000000000000000);
  v83 = NSNumber.init(integerLiteral:)(*(_QWORD *)(v1
                                                 + OBJC_IVAR____TtC17SequoiaTranslator25TypedInputInstrumentation_inputTokenCount)).super.super.isa;
  v84 = swift_isUniquelyReferenced_nonNull_native(v82);
  v92 = v82;
  sub_1001AAA14((uint64_t)v83, 0xD000000000000011, 0x80000001002029F0, v84);
  v85 = v92;
  swift_bridgeObjectRelease(0x8000000000000000);
  return v85;
}

unint64_t sub_1001D6FFC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262930, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void sub_1001D7044(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[5];
  unint64_t v35;

  v1 = a1;
  v35 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
    v5 = sub_10000F684();
    v6 = Set.Iterator.init(_cocoa:)(v34, v3, v4, v5);
    v1 = v34[0];
    v31 = v34[1];
    v8 = v34[2];
    v7 = v34[3];
    v9 = v34[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v8 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v7 = 0;
  }
  v13 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_44;
    v18 = v17;
    v32 = v17;
    v19 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v33;
    swift_unknownObjectRelease(v18);
    v16 = v7;
    v14 = v9;
    if (!v20)
      goto LABEL_44;
LABEL_36:
    v24 = objc_opt_self(UIWindowScene);
    v25 = swift_dynamicCastObjCClass(v20, v24);
    if (!v25)
      goto LABEL_11;
    v26 = (void *)v25;
    v20 = v20;
    if (objc_msgSend(v26, "activationState"))
    {
      v27 = objc_msgSend(v26, "activationState");

      if (v27 != (id)1)
      {
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {

    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v29 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v28 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v29 >= v28 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
    v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
    v6 = (_QWORD *)specialized Array._endMutation()(v30);
LABEL_12:
    v7 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v7 << 6);
    v16 = v7;
LABEL_35:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_44;
    goto LABEL_36;
  }
  v21 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v21 >= v13)
      goto LABEL_44;
    v22 = *(_QWORD *)(v31 + 8 * v21);
    v16 = v7 + 1;
    if (!v22)
    {
      v16 = v7 + 2;
      if (v7 + 2 >= v13)
        goto LABEL_44;
      v22 = *(_QWORD *)(v31 + 8 * v16);
      if (!v22)
      {
        v16 = v7 + 3;
        if (v7 + 3 >= v13)
          goto LABEL_44;
        v22 = *(_QWORD *)(v31 + 8 * v16);
        if (!v22)
        {
          v16 = v7 + 4;
          if (v7 + 4 >= v13)
            goto LABEL_44;
          v22 = *(_QWORD *)(v31 + 8 * v16);
          if (!v22)
          {
            v16 = v7 + 5;
            if (v7 + 5 >= v13)
              goto LABEL_44;
            v22 = *(_QWORD *)(v31 + 8 * v16);
            if (!v22)
            {
              v23 = v7 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v31 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_34;
                }
              }
LABEL_44:
              sub_10000F7C4(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

void *sub_1001D73A0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_1001D749C();
  if (v0)
  {
    v1 = v0;
    v2 = v0 & 0xFFFFFFFFFFFFFF8;
    if (v0 >> 62)
      goto LABEL_16;
    v3 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v0);
    for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v9))
    {
      v4 = 4;
      while (1)
      {
        v5 = (v1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v1)
           : *(id *)(v1 + 8 * v4);
        v6 = v5;
        v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        if (objc_msgSend(v5, "isKeyWindow"))
        {
          swift_bridgeObjectRelease_n(v1, 2);
          return v6;
        }

        ++v4;
        if (v7 == v3)
          goto LABEL_11;
      }
      __break(1u);
LABEL_16:
      if (v1 >= 0)
        v9 = v2;
      else
        v9 = v1;
      swift_bridgeObjectRetain(v1);
    }
LABEL_11:
    swift_bridgeObjectRelease_n(v1, 2);
  }
  return 0;
}

uint64_t sub_1001D749C()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v1 = objc_msgSend(v0, "connectedScenes");
  v2 = sub_10000A05C(0, (unint64_t *)&qword_10028AC10, UIScene_ptr);
  v3 = sub_10000F684();
  v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  sub_1001D7044(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4);
  v19 = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (v7)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease_n(v6, 2);
    v14 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v6 < 0)
    v15 = v6;
  else
    v15 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v15);
  if (!v7)
    goto LABEL_15;
LABEL_3:
  if (v7 >= 1)
  {
    v8 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      else
        v9 = *(id *)(v6 + 8 * v8 + 32);
      v10 = v9;
      ++v8;
      v11 = objc_msgSend(v9, "windows");
      v12 = sub_10000A05C(0, &qword_100298768, UIWindow_ptr);
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

      sub_1001827C4(v13);
    }
    while (v7 != v8);
    swift_bridgeObjectRelease_n(v6, 2);
    v14 = v19;
    if (v19 < 0)
      goto LABEL_20;
LABEL_16:
    if ((v14 & 0x4000000000000000) == 0)
    {
      v16 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      goto LABEL_18;
    }
LABEL_20:
    swift_bridgeObjectRetain(v14);
    v16 = (uint64_t)sub_1001C68E4(v18);
    swift_bridgeObjectRelease(v14);
LABEL_18:
    v19 = v16;
    sub_1001D76C0(&v19);
    swift_bridgeObjectRelease(v14);
    return v19;
  }
  __break(1u);
  result = swift_release(v19);
  __break(1u);
  return result;
}

uint64_t sub_1001D76C0(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1001DB5F4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1001D7738(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1001D7738(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  _BOOL4 v24;
  Swift::Int v25;
  Swift::Int v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  int v36;
  uint64_t *v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  Swift::Int v120;
  Swift::Int v121;
  _BOOL4 v122;
  uint64_t v123;
  Swift::Int v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_153;
    if (v3)
      sub_1001D7FD4(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_161;
  v120 = v4;
  v124 = v3;
  v118 = a1;
  if (v3 < 2)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    v127 = (uint64_t)_swiftEmptyArrayStorage;
    v125 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v13 >= 2)
      {
        v108 = *v118;
        do
        {
          v109 = v13 - 2;
          if (v13 < 2)
            goto LABEL_148;
          if (!v108)
            goto LABEL_160;
          v101 = v9;
          v110 = v9 + 32;
          v111 = *(_QWORD *)&v9[16 * v109 + 32];
          v112 = *(_QWORD *)&v9[16 * v13 + 24];
          sub_1001D814C((id *)(v108 + 8 * v111), (id *)(v108 + 8 * *(_QWORD *)&v110[16 * v13 - 16]), v108 + 8 * v112, v125);
          if (v1)
            goto LABEL_128;
          if (v112 < v111)
            goto LABEL_149;
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v101 = sub_1001DA1D4((uint64_t)v101);
          if (v109 >= *((_QWORD *)v101 + 2))
            goto LABEL_150;
          v113 = &v101[16 * v109 + 32];
          *(_QWORD *)v113 = v111;
          *((_QWORD *)v113 + 1) = v112;
          v114 = *((_QWORD *)v101 + 2);
          if (v13 > v114)
            goto LABEL_151;
          v9 = v101;
          memmove(&v101[16 * v13 + 16], &v101[16 * v13 + 32], 16 * (v114 - v13));
          *((_QWORD *)v101 + 2) = v114 - 1;
          v13 = v114 - 1;
        }
        while (v114 > 2);
      }
      v115 = v9;
LABEL_130:
      swift_bridgeObjectRelease(v115);
      *(_QWORD *)((v127 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v116);
      swift_bridgeObjectRelease(v127);
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_10000A05C(0, &qword_100298768, UIWindow_ptr);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v125 = (char *)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v127 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v119 = *a1 - 8;
  v9 = (char *)_swiftEmptyArrayStorage;
  v12 = v124;
  v126 = *a1;
  while (1)
  {
    v14 = v10++;
    if (v10 < v12)
    {
      v15 = *(void **)(v11 + 8 * v14);
      v16 = *(id *)(v11 + 8 * v10);
      v17 = v15;
      v18 = objc_msgSend(v16, "windowScene");
      if (v18)
      {
        v19 = v18;
        v20 = (uint64_t)objc_msgSend(v18, "activationState");

      }
      else
      {
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v21 = objc_msgSend(v17, "windowScene");
      if (v21)
      {
        v22 = v21;
        v23 = objc_msgSend(v21, "activationState");

        v89 = v20 < (uint64_t)v23;
        v11 = v126;
        v24 = v89;
      }
      else
      {

        v24 = v20 != 0x7FFFFFFFFFFFFFFFLL;
      }
      v122 = v24;
      v25 = v14 + 2;
      if (v14 + 2 < v124)
      {
        do
        {
          v27 = *(void **)(v11 + 8 * v10);
          v28 = *(id *)(v11 + 8 * v25);
          v29 = v27;
          v30 = objc_msgSend(v28, "windowScene");
          if (v30)
          {
            v31 = v30;
            v32 = (uint64_t)objc_msgSend(v30, "activationState");

          }
          else
          {
            v32 = 0x7FFFFFFFFFFFFFFFLL;
          }
          v33 = objc_msgSend(v29, "windowScene");
          if (v33)
          {
            v34 = v33;
            v35 = objc_msgSend(v33, "activationState");

            v89 = v32 < (uint64_t)v35;
            v11 = v126;
            v36 = !v89;
            if (((v122 ^ v36) & 1) == 0)
              goto LABEL_36;
          }
          else
          {

            if (v122 == (v32 == 0x7FFFFFFFFFFFFFFFLL))
              goto LABEL_36;
          }
          v26 = v25 + 1;
          v10 = v25;
          v25 = v26;
        }
        while (v26 < v124);
        v25 = v26;
        if (!v122)
          goto LABEL_45;
      }
      else
      {
LABEL_36:
        if (!v122)
        {
LABEL_45:
          v10 = v25;
          goto LABEL_46;
        }
      }
      if (v25 < v14)
        goto LABEL_154;
      if (v14 < v25)
      {
        v37 = (uint64_t *)(v119 + 8 * v25);
        v38 = v25;
        v39 = v14;
        v40 = (uint64_t *)(v11 + 8 * v14);
        while (1)
        {
          if (v39 != --v38)
          {
            if (!v11)
              goto LABEL_159;
            v41 = *v40;
            *v40 = *v37;
            *v37 = v41;
          }
          ++v39;
          --v37;
          ++v40;
          if (v39 >= v38)
            goto LABEL_45;
        }
      }
      goto LABEL_45;
    }
LABEL_46:
    v123 = v14;
    if (v10 >= v124)
      goto LABEL_68;
    if (__OFSUB__(v10, v14))
      goto LABEL_152;
    if (v10 - v14 >= v120)
      goto LABEL_68;
    if (__OFADD__(v14, v120))
      goto LABEL_155;
    v42 = v124;
    if (v14 + v120 < v124)
      v42 = v14 + v120;
    if (v42 < v14)
      break;
    if (v10 != v42)
    {
      v117 = v9;
      v43 = v119 + 8 * v10;
      v121 = v42;
      do
      {
        v44 = *(void **)(v11 + 8 * v10);
        v45 = v123;
        v46 = v43;
        do
        {
          v47 = *(void **)v46;
          v48 = v44;
          v49 = v47;
          v50 = objc_msgSend(v48, "windowScene");
          if (v50)
          {
            v51 = v50;
            v52 = (uint64_t)objc_msgSend(v50, "activationState");

          }
          else
          {
            v52 = 0x7FFFFFFFFFFFFFFFLL;
          }
          v53 = objc_msgSend(v49, "windowScene");
          if (v53)
          {
            v54 = v53;
            v55 = objc_msgSend(v53, "activationState");

            v89 = v52 < (uint64_t)v55;
            v11 = v126;
            if (!v89)
              break;
          }
          else
          {

            if (v52 == 0x7FFFFFFFFFFFFFFFLL)
              break;
          }
          if (!v11)
            goto LABEL_157;
          v56 = *(void **)v46;
          v44 = *(void **)(v46 + 8);
          *(_QWORD *)v46 = v44;
          *(_QWORD *)(v46 + 8) = v56;
          v46 -= 8;
          ++v45;
        }
        while (v10 != v45);
        ++v10;
        v43 += 8;
      }
      while (v10 != v121);
      v10 = v121;
      v9 = v117;
      v14 = v123;
    }
LABEL_68:
    if (v10 < v14)
      goto LABEL_147;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_1001D9E38(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v58 = *((_QWORD *)v9 + 2);
    v57 = *((_QWORD *)v9 + 3);
    v13 = v58 + 1;
    if (v58 >= v57 >> 1)
      v9 = sub_1001D9E38((char *)(v57 > 1), v58 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v13;
    v59 = v9 + 32;
    v60 = &v9[16 * v58 + 32];
    *(_QWORD *)v60 = v123;
    *((_QWORD *)v60 + 1) = v10;
    if (v58)
    {
      while (1)
      {
        v61 = v13 - 1;
        if (v13 >= 4)
        {
          v66 = &v59[16 * v13];
          v67 = *((_QWORD *)v66 - 8);
          v68 = *((_QWORD *)v66 - 7);
          v72 = __OFSUB__(v68, v67);
          v69 = v68 - v67;
          if (v72)
            goto LABEL_136;
          v71 = *((_QWORD *)v66 - 6);
          v70 = *((_QWORD *)v66 - 5);
          v72 = __OFSUB__(v70, v71);
          v64 = v70 - v71;
          v65 = v72;
          if (v72)
            goto LABEL_137;
          v73 = v13 - 2;
          v74 = &v59[16 * v13 - 32];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v72 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v72)
            goto LABEL_139;
          v72 = __OFADD__(v64, v77);
          v78 = v64 + v77;
          if (v72)
            goto LABEL_142;
          if (v78 >= v69)
          {
            v96 = &v59[16 * v61];
            v98 = *(_QWORD *)v96;
            v97 = *((_QWORD *)v96 + 1);
            v72 = __OFSUB__(v97, v98);
            v99 = v97 - v98;
            if (v72)
              goto LABEL_146;
            v89 = v64 < v99;
            goto LABEL_105;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v90 = *((_QWORD *)v9 + 4);
            v91 = *((_QWORD *)v9 + 5);
            v72 = __OFSUB__(v91, v90);
            v83 = v91 - v90;
            v84 = v72;
            goto LABEL_99;
          }
          v63 = *((_QWORD *)v9 + 4);
          v62 = *((_QWORD *)v9 + 5);
          v72 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          v65 = v72;
        }
        if ((v65 & 1) != 0)
          goto LABEL_138;
        v73 = v13 - 2;
        v79 = &v59[16 * v13 - 32];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v82 = __OFSUB__(v80, v81);
        v83 = v80 - v81;
        v84 = v82;
        if (v82)
          goto LABEL_141;
        v85 = &v59[16 * v61];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v72 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v72)
          goto LABEL_144;
        if (__OFADD__(v83, v88))
          goto LABEL_145;
        if (v83 + v88 >= v64)
        {
          v89 = v64 < v88;
LABEL_105:
          if (v89)
            v61 = v73;
          goto LABEL_107;
        }
LABEL_99:
        if ((v84 & 1) != 0)
          goto LABEL_140;
        v92 = &v59[16 * v61];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v72 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v72)
          goto LABEL_143;
        if (v95 < v83)
          goto LABEL_14;
LABEL_107:
        v100 = v61 - 1;
        if (v61 - 1 >= v13)
        {
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
          goto LABEL_156;
        }
        if (!v11)
          goto LABEL_158;
        v101 = v9;
        v102 = v11;
        v103 = &v59[16 * v100];
        v104 = *(_QWORD *)v103;
        v105 = &v59[16 * v61];
        v106 = *((_QWORD *)v105 + 1);
        sub_1001D814C((id *)(v102 + 8 * *(_QWORD *)v103), (id *)(v102 + 8 * *(_QWORD *)v105), v102 + 8 * v106, v125);
        if (v1)
        {
LABEL_128:
          v115 = v101;
          goto LABEL_130;
        }
        if (v106 < v104)
          goto LABEL_133;
        if (v61 > *((_QWORD *)v101 + 2))
          goto LABEL_134;
        *(_QWORD *)v103 = v104;
        *(_QWORD *)&v59[16 * v100 + 8] = v106;
        v107 = *((_QWORD *)v101 + 2);
        if (v61 >= v107)
          goto LABEL_135;
        v9 = v101;
        v13 = v107 - 1;
        memmove(&v59[16 * v61], v105 + 16, 16 * (v107 - 1 - v61));
        *((_QWORD *)v101 + 2) = v107 - 1;
        v11 = v126;
        if (v107 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v12 = v124;
    if (v10 >= v124)
      goto LABEL_116;
  }
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1001D7FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  char **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  char **v21;
  char **v22;
  uint64_t v23;
  BOOL v24;
  void *v25;
  uint64_t v28;
  uint64_t v29;

  if (a3 != a2)
  {
    v4 = a3;
    v29 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    v6 = &selRef_scribbleInteractionDidFinishWriting_;
    v7 = &selRef_initWithWindowScene_;
LABEL_5:
    v8 = *(void **)(v29 + 8 * v4);
    v9 = a1;
    v28 = v5;
    while (1)
    {
      v10 = *(void **)v5;
      v11 = v8;
      v12 = v10;
      v13 = objc_msgSend(v11, v6[509]);
      if (v13)
      {
        v14 = v13;
        v15 = (uint64_t)objc_msgSend(v13, v7[289]);

      }
      else
      {
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v16 = objc_msgSend(v12, v6[509]);
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend(v16, v7[289]);
        v19 = v11;
        v20 = v4;
        v21 = v7;
        v22 = v6;
        v23 = (uint64_t)v18;

        v24 = v15 < v23;
        v6 = v22;
        v7 = v21;
        v4 = v20;
        if (!v24)
          goto LABEL_4;
      }
      else
      {

        if (v15 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_4;
      }
      if (!v29)
        break;
      v25 = *(void **)v5;
      v8 = *(void **)(v5 + 8);
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(v5 + 8) = v25;
      v5 -= 8;
      if (v4 == ++v9)
      {
LABEL_4:
        ++v4;
        v5 = v28 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1001D814C(id *a1, id *__src, unint64_t a3, char *a4)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void **v12;
  void **v13;
  id *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id *v24;
  char *v25;
  id *v26;
  id *v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  id *v35;
  id v36;
  void *v37;
  id v38;
  uint64_t result;
  unint64_t v42;
  id *v44;
  char *v45;
  void **v46;
  id *v47;

  v4 = __src;
  v5 = (char *)__src - (char *)a1;
  v6 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v6 = (char *)__src - (char *)a1;
  v7 = v6 >> 3;
  v8 = a3 - (_QWORD)__src;
  v9 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v9 = a3 - (_QWORD)__src;
  v10 = v9 >> 3;
  v47 = a1;
  v46 = (void **)a4;
  if (v7 >= v9 >> 3)
  {
    if (v8 < -7)
      goto LABEL_54;
    if (a4 != (char *)__src || &__src[v10] <= (id *)a4)
      memmove(a4, __src, 8 * v10);
    v25 = &a4[8 * v10];
    v45 = v25;
    v47 = v4;
    if (a1 >= v4 || v8 < 8)
    {
LABEL_53:
      sub_1001DA098(&v47, &v46, &v45);
      return 1;
    }
    v26 = (id *)(a3 - 8);
    v27 = v4;
    while (1)
    {
      v42 = (unint64_t)v25;
      v44 = v4;
      v28 = v25 - 8;
      v29 = *--v27;
      v30 = *((id *)v25 - 1);
      v31 = v29;
      v32 = objc_msgSend(v30, "windowScene");
      if (v32)
      {
        v33 = v32;
        v34 = (uint64_t)objc_msgSend(v32, "activationState");

      }
      else
      {
        v34 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v35 = v26 + 1;
      v36 = objc_msgSend(v31, "windowScene");
      if (v36)
      {
        v37 = v36;
        v38 = objc_msgSend(v36, "activationState");

        if (v34 >= (uint64_t)v38)
          goto LABEL_46;
      }
      else
      {

        if (v34 == 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_46:
          v45 = v28;
          v27 = v44;
          if ((unint64_t)v35 < v42 || (unint64_t)v26 >= v42 || v35 != (id *)v42)
            *v26 = *(id *)v28;
          v25 = v28;
          goto LABEL_51;
        }
      }
      v25 = (char *)v42;
      if (v35 != v44 || v26 >= v44)
        *v26 = *v27;
      v47 = v27;
LABEL_51:
      if (v27 > a1)
      {
        --v26;
        v4 = v27;
        if (v25 > a4)
          continue;
      }
      goto LABEL_53;
    }
  }
  if (v5 >= -7)
  {
    if (a4 != (char *)a1 || &a1[v7] <= (id *)a4)
      memmove(a4, a1, 8 * v7);
    v11 = &a4[8 * v7];
    v45 = v11;
    if ((unint64_t)v4 < a3 && v5 >= 8)
    {
      v12 = (void **)a4;
      v13 = a1;
      while (1)
      {
        v14 = v4;
        v15 = *v12;
        v16 = *v4;
        v17 = v15;
        v18 = objc_msgSend(v16, "windowScene");
        if (v18)
        {
          v19 = v18;
          v20 = (uint64_t)objc_msgSend(v18, "activationState");

        }
        else
        {
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v21 = objc_msgSend(v17, "windowScene");
        if (v21)
        {
          v22 = v21;
          v23 = objc_msgSend(v21, "activationState");

          if (v20 >= (uint64_t)v23)
            goto LABEL_23;
        }
        else
        {

          if (v20 == 0x7FFFFFFFFFFFFFFFLL)
          {
LABEL_23:
            if (v13 != v12)
              *v13 = *v12;
            v46 = ++v12;
            v24 = v14;
            goto LABEL_26;
          }
        }
        v24 = v14 + 1;
        if (v13 < v14 || v13 >= v24 || v13 != v14)
          *v13 = *v14;
LABEL_26:
        ++v13;
        if (v12 < (void **)v11)
        {
          v4 = v24;
          if ((unint64_t)v24 < a3)
            continue;
        }
        v47 = v13;
        goto LABEL_53;
      }
    }
    goto LABEL_53;
  }
LABEL_54:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_1001D851C(double a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  unint64_t inited;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  char **v29;
  id v30;
  id v31;
  id v32;
  double v33;
  double v34;
  id v35;
  id v36;
  id v37;
  NSString v38;
  id v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  Class isa;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double Height;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  id v63;
  NSString v64;
  id v65;
  uint64_t v66;
  NSString *v67;
  id v68;
  unint64_t v69;
  Class v70;
  unint64_t v71;
  double v72;
  CGFloat v73;
  double v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  double v78;
  CGFloat v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  id v89;
  NSString v90;
  id v91;
  uint64_t v92;
  NSString *v93;
  unint64_t v94;
  Class v95;
  unint64_t v96;
  double v97;
  CGFloat v98;
  double v99;
  CGFloat v100;
  double v101;
  CGFloat v102;
  double v103;
  CGFloat v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t result;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  NSString *v115;
  unint64_t v116;
  uint64_t v118;
  unint64_t v119;
  _BYTE v121[72];
  _BYTE v122[72];
  _BYTE v123[72];
  unint64_t v124;
  _BYTE v125[72];
  CGRect v126;
  CGRect v127;
  CGRect v128;

  v7 = sub_100006DF4((uint64_t *)&unk_10028C060);
  inited = swift_initStackObject(v7, v125);
  *(_OWORD *)(inited + 16) = xmmword_1001E7590;
  v9 = (void *)objc_opt_self(UIFontDescriptor);
  v10 = objc_msgSend(v9, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
  v11 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v10, "pointSize");
  v12 = objc_msgSend(v11, "systemFontOfSize:weight:");
  v13 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
  v14 = objc_msgSend(v13, "scaledFontForFont:maximumPointSize:", v12, 1.79769313e308);

  *(_QWORD *)(inited + 32) = v14;
  v15 = objc_msgSend(v9, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle2, 0);
  objc_msgSend(v15, "pointSize");
  v16 = objc_msgSend(v11, "systemFontOfSize:weight:");
  v17 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle2);
  v18 = objc_msgSend(v17, "scaledFontForFont:maximumPointSize:", v16, 1.79769313e308);

  *(_QWORD *)(inited + 40) = v18;
  v19 = objc_msgSend(v9, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle3, 0);
  objc_msgSend(v19, "pointSize");
  v20 = objc_msgSend(v11, "systemFontOfSize:weight:");
  v21 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle3);
  v22 = objc_msgSend(v21, "scaledFontForFont:maximumPointSize:", v20, 1.79769313e308);

  *(_QWORD *)(inited + 48) = v22;
  v23 = objc_msgSend(v9, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleBody, 0);
  objc_msgSend(v23, "pointSize");
  v24 = objc_msgSend(v11, "systemFontOfSize:weight:");
  v25 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  v26 = objc_msgSend(v25, "scaledFontForFont:maximumPointSize:", v24, 1.79769313e308);

  *(_QWORD *)(inited + 56) = v26;
  v124 = inited;
  specialized Array._endMutation()(v27);
  v119 = inited;
  if (a5)
  {
    v28 = a5;
    v29 = &selRef_scribbleInteractionDidFinishWriting_;
  }
  else
  {
    v30 = objc_msgSend(v9, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleTitle1, 0);
    v29 = &selRef_scribbleInteractionDidFinishWriting_;
    objc_msgSend(v30, "pointSize");
    v31 = objc_msgSend(v11, "systemFontOfSize:weight:");
    v32 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle1);
    v28 = objc_msgSend(v32, "scaledFontForFont:maximumPointSize:", v31, 1.79769313e308);

  }
  v33 = floor(a1);
  v34 = floor(a2);
  v35 = objc_allocWithZone((Class)NSString);
  v36 = a5;
  v37 = v28;
  swift_bridgeObjectRetain(a4);
  v38 = String._bridgeToObjectiveC()();
  v39 = objc_msgSend(v35, "initWithString:", v38, swift_bridgeObjectRelease(a4).n128_f64[0]);

  v118 = sub_100006DF4(&qword_100298070);
  v40 = swift_initStackObject(v118, v123);
  *(_OWORD *)(v40 + 16) = xmmword_1001E64F0;
  *(_QWORD *)(v40 + 32) = NSFontAttributeName;
  v116 = sub_10015E770();
  *(_QWORD *)(v40 + 64) = v116;
  *(_QWORD *)(v40 + 40) = v37;
  v41 = v37;
  v115 = NSFontAttributeName;
  v42 = sub_1001A4A88(v40);
  type metadata accessor for Key(0);
  sub_100101CA4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v42);
  objc_msgSend(v39, "boundingRectWithSize:options:attributes:context:", 1, isa, 0, v33, 1.79769313e308);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v51 = v50;

  v126.origin.x = v45;
  v126.origin.y = v47;
  v126.size.width = v49;
  v126.size.height = v51;
  Height = CGRectGetHeight(v126);

  if (v34 >= ceil(Height))
  {
    v53 = inited;
    if (inited >> 62)
    {
      if ((inited & 0x8000000000000000) != 0)
        v112 = inited;
      else
        v112 = inited & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(inited);
      v113 = v112;
      v53 = inited;
      v80 = _CocoaArrayWrapper.endIndex.getter(v113);
      if (v80)
      {
LABEL_18:
        v81 = v53 & 0xC000000000000001;
        v82 = 4;
        while (1)
        {
          if (v81)
            v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v82 - 4, v53);
          else
            v83 = *(id *)(v53 + 8 * v82);
          v84 = v83;
          v85 = v82 - 3;
          if (__OFADD__(v82 - 4, 1))
            goto LABEL_28;
          objc_msgSend(v83, v29[185]);
          v87 = v86;
          objc_msgSend(v41, v29[185]);
          if (v88 < v87)
          {
            v89 = objc_allocWithZone((Class)NSString);
            swift_bridgeObjectRetain(a4);
            v90 = String._bridgeToObjectiveC()();
            v91 = objc_msgSend(v89, "initWithString:", v90, swift_bridgeObjectRelease(a4).n128_f64[0]);

            v92 = swift_initStackObject(v118, v122);
            *(_OWORD *)(v92 + 16) = xmmword_1001E64F0;
            *(_QWORD *)(v92 + 64) = v116;
            *(_QWORD *)(v92 + 32) = v115;
            *(_QWORD *)(v92 + 40) = v84;
            v93 = v115;
            v68 = v84;
            v94 = sub_1001A4A88(v92);
            v95 = Dictionary._bridgeToObjectiveC()().super.isa;
            v96 = v94;
            v29 = &selRef_scribbleInteractionDidFinishWriting_;
            swift_bridgeObjectRelease(v96);
            objc_msgSend(v91, "boundingRectWithSize:options:attributes:context:", 1, v95, 0, v33, 1.79769313e308);
            v98 = v97;
            v100 = v99;
            v102 = v101;
            v104 = v103;

            v53 = v119;
            v128.origin.x = v98;
            v128.origin.y = v100;
            v128.size.width = v102;
            v128.size.height = v104;
            if (ceil(CGRectGetHeight(v128)) < v34)
              break;
          }

          ++v82;
          if (v85 == v80)
            goto LABEL_50;
        }
LABEL_26:

        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(v53);
        v41 = v68;
        goto LABEL_51;
      }
    }
    else
    {
      v80 = *(_QWORD *)((inited & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(inited);
      if (v80)
        goto LABEL_18;
    }
LABEL_50:
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v53);
    goto LABEL_51;
  }
  v53 = inited;
  v114 = inited >> 62;
  if (inited >> 62)
    goto LABEL_29;
  v54 = *(_QWORD *)((inited & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(inited);
  for (; v54; v54 = _CocoaArrayWrapper.endIndex.getter(v106))
  {
    v55 = v53 & 0xC000000000000001;
    v56 = 4;
    while (1)
    {
      v57 = v55
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56 - 4, v53)
          : *(id *)(v53 + 8 * v56);
      v58 = v57;
      v59 = v56 - 3;
      if (__OFADD__(v56 - 4, 1))
        break;
      objc_msgSend(v57, v29[185]);
      v61 = v60;
      objc_msgSend(v41, v29[185]);
      if (v61 < v62)
      {
        v63 = objc_allocWithZone((Class)NSString);
        swift_bridgeObjectRetain(a4);
        v64 = String._bridgeToObjectiveC()();
        v65 = objc_msgSend(v63, "initWithString:", v64, swift_bridgeObjectRelease(a4).n128_f64[0]);

        v66 = swift_initStackObject(v118, v121);
        *(_OWORD *)(v66 + 16) = xmmword_1001E64F0;
        *(_QWORD *)(v66 + 64) = v116;
        *(_QWORD *)(v66 + 32) = v115;
        *(_QWORD *)(v66 + 40) = v58;
        v67 = v115;
        v68 = v58;
        v69 = sub_1001A4A88(v66);
        v70 = Dictionary._bridgeToObjectiveC()().super.isa;
        v71 = v69;
        v29 = &selRef_scribbleInteractionDidFinishWriting_;
        swift_bridgeObjectRelease(v71);
        objc_msgSend(v65, "boundingRectWithSize:options:attributes:context:", 1, v70, 0, v33, 1.79769313e308);
        v73 = v72;
        v75 = v74;
        v77 = v76;
        v79 = v78;

        v53 = v119;
        v127.origin.x = v73;
        v127.origin.y = v75;
        v127.size.width = v77;
        v127.size.height = v79;
        if (ceil(CGRectGetHeight(v127)) < v34)
          goto LABEL_26;
      }

      ++v56;
      if (v59 == v54)
        goto LABEL_33;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    if (v53 < 0)
      v105 = v119;
    else
      v105 = v53 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v119);
    v106 = v105;
    v53 = v119;
  }
LABEL_33:
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(v53);
  if (v114)
  {
    if (v53 < 0)
      v108 = v53;
    else
      v108 = v53 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v53);
    v107 = _CocoaArrayWrapper.endIndex.getter(v108);
    swift_bridgeObjectRelease(v53);
    if (!v107)
      goto LABEL_51;
  }
  else
  {
    v107 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v107)
      goto LABEL_51;
  }
  result = v107 - 1;
  if (__OFSUB__(v107, 1))
  {
    __break(1u);
    goto LABEL_53;
  }
  if ((v53 & 0xC000000000000001) != 0)
  {
LABEL_53:
    v110 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v53);
    goto LABEL_45;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v110 = *(id *)(v53 + 8 * result + 32);
LABEL_45:
    v111 = v110;

    v41 = v111;
LABEL_51:
    swift_bridgeObjectRelease(v53);
    return (unint64_t)v41;
  }
  __break(1u);
  return result;
}

id sub_1001D8F64(uint64_t a1, id a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v16;

  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for UserInterfaceSizeClass.compact(_:), v4);
  LOBYTE(a1) = static UserInterfaceSizeClass.== infix(_:_:)(a1, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v8 = (id *)&UIFontTextStyleTitle2;
  if ((a1 & 1) == 0)
    v8 = (id *)&UIFontTextStyleTitle1;
  v9 = *v8;
  if (a2)
    a2 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", a2);
  v10 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", v9, a2);
  v11 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v10, "pointSize");
  v12 = objc_msgSend(v11, "systemFontOfSize:weight:");
  v13 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", v9);
  v14 = objc_msgSend(v13, "scaledFontForFont:maximumPointSize:", v12, 1.79769313e308);

  return v14;
}

void sub_1001D9138()
{
  void *v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  objc_msgSend(v0, "frame");
  v1 = objc_msgSend(v0, "_restingHeights");
  if (!v1)
    goto LABEL_20;
  v2 = v1;
  v3 = sub_10008BA78();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v13 = v4;
    else
      v13 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
LABEL_18:
    v14 = v7;
    swift_bridgeObjectRetain(v7);
    sub_1001D94D4((uint64_t *)&v14);
    swift_bridgeObjectRelease();
    swift_release(v14);
    return;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    goto LABEL_17;
LABEL_4:
  v14 = _swiftEmptyArrayStorage;
  sub_1001DA3B4(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    v7 = v14;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      else
        v8 = *(id *)(v4 + 8 * v6 + 32);
      v9 = v8;
      v10 = CGFloat.init(truncating:)();

      v14 = v7;
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_1001DA3B4(v11 > 1, v12 + 1, 1);
        v7 = v14;
      }
      ++v6;
      v7[2] = v12 + 1;
      *(double *)&v7[v12 + 4] = v10;
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  swift_release(v14);
  __break(1u);
}

void sub_1001D9338()
{
  void *v0;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  __n128 v8;
  unint64_t v9;
  id v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;

  v1 = objc_msgSend(v0, "_restingHeights");
  if (v1)
  {
    v2 = v1;
    v3 = sub_10008BA78();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v13 = v4;
      else
        v13 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v14 = _CocoaArrayWrapper.endIndex.getter(v13);
      swift_bridgeObjectRelease();
      if (v14 == 2)
      {
        swift_bridgeObjectRetain(v4);
        v5 = _CocoaArrayWrapper.endIndex.getter(v13);
        if (v5)
        {
LABEL_5:
          if ((v4 & 0xC000000000000001) != 0)
          {
            v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
          }
          else
          {
            if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_25;
            v6 = *(id *)(v4 + 32);
          }
          v7 = v6;
          v8 = swift_bridgeObjectRelease();
          CGFloat.init(truncating:)(v7, v8);

          v9 = v5 - 1;
          if (!__OFSUB__(v5, 1))
          {
            if ((v4 & 0xC000000000000001) != 0)
            {
              v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v4);
LABEL_14:
              v11 = v10;
              v12 = swift_bridgeObjectRelease();
              CGFloat.init(truncating:)(v11, v12);

              return;
            }
            if ((v9 & 0x8000000000000000) == 0)
            {
              if (v9 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v10 = *(id *)(v4 + 8 * v9 + 32);
                goto LABEL_14;
              }
              goto LABEL_27;
            }
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            return;
          }
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        swift_bridgeObjectRelease();
        __break(1u);
      }
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) == 2)
    {
      swift_bridgeObjectRetain(v4);
      v5 = 2;
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
  }
}

void sub_1001D94D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001DB5E0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1001D953C(v4);
  *a1 = v2;
}

void sub_1001D953C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t *v21;
  uint64_t v22;
  Swift::Int v23;
  double *v24;
  double v25;
  Swift::Int v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = v4;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1001D9BCC((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) == 0)
            v88 = sub_1001DA1D4((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      v96[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v96 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for CGFloat);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = (_QWORD *)v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1001D9E38(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_1001D9E38((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_1001D9BCC((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_1001D9BCC(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1001DA09C((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1001D9E38(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298FC8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1001D9F30(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1001D9FD8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -88)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 88;
    if (result != v3 || result >= &v3[88 * v6])
      return (char *)memmove(result, v3, 88 * v6);
  }
  return result;
}

char *sub_1001DA09C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1001DA144(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  int64_t v4;
  char *result;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

char *sub_1001DA1D4(uint64_t a1)
{
  return sub_1001D9E38(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001DA1E8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001DA3D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001DA204(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001DA538(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001DA220(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001DA80C(a1, a2, a3, (_QWORD *)*v3, &qword_100298FF0, &qword_100298FF8);
  *v3 = result;
  return result;
}

uint64_t sub_1001DA24C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001DA80C(a1, a2, a3, (_QWORD *)*v3, &qword_100299000, &qword_100299008);
  *v3 = result;
  return result;
}

uint64_t sub_1001DA278(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001DA80C(a1, a2, a3, (_QWORD *)*v3, &qword_100299010, &qword_100299018);
  *v3 = result;
  return result;
}

uint64_t sub_1001DA2A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001DA6A0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001DA2C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001DA80C(a1, a2, a3, (_QWORD *)*v3, &qword_100294018, &qword_100294080);
  *v3 = result;
  return result;
}

uint64_t sub_1001DA2EC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001DA9B0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001DA308(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001DAB38(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001DA324(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001DAF70(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001DA340(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001DB0CC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001DA35C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001DB254(a1, a2, a3, (_QWORD *)*v3, &qword_100299020, (uint64_t (*)(_QWORD))&type metadata accessor for StoredTranslationAlternative);
  *v3 = result;
  return result;
}

uint64_t sub_1001DA388(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001DB254(a1, a2, a3, (_QWORD *)*v3, &qword_1002981A0, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
  *v3 = result;
  return result;
}

uint64_t sub_1001DA3B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001DB434(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001DA3D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_10028A6C0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DA538(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298760);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DA6A0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298FD8);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DA80C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100006DF4(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size_0(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_100006DF4(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DA9B0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298FE0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100006DF4(&qword_100298FE8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DAB38(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_10028EF18);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DACA0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298170);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[88 * v8] || v13 >= &v14[88 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DAE24(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298758);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DAF70(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100299028);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DB0CC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100293328);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8])
      memmove(v13, v14, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[56 * v8] || v13 >= &v14[56 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DB254(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100006DF4(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size_0(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DB434(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006DF4(&qword_100298FD0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001DB590(uint64_t a1)
{
  return sub_1001DA3D0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001DB5A4(uint64_t a1)
{
  return sub_1001DACA0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001DB5B8(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001DB5CC(uint64_t a1)
{
  return sub_1001DAE24(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001DB5E0(uint64_t a1)
{
  return sub_1001DB434(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_1001DB5F8(void *a1)
{
  void *v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  Class isa;

  v2 = v1;
  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = sub_100006DF4((uint64_t *)&unk_10028C060);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001E7590;
  v7 = objc_msgSend(a1, "topAnchor");
  v8 = objc_msgSend(v2, "topAnchor");
  v9 = objc_msgSend(v7, "constraintEqualToAnchor:", v8);

  *(_QWORD *)(v6 + 32) = v9;
  v10 = objc_msgSend(a1, "leadingAnchor");
  v11 = objc_msgSend(v2, "leadingAnchor");
  v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

  *(_QWORD *)(v6 + 40) = v12;
  v13 = objc_msgSend(v2, "trailingAnchor");
  v14 = objc_msgSend(a1, "trailingAnchor");
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

  *(_QWORD *)(v6 + 48) = v15;
  v16 = objc_msgSend(v2, "bottomAnchor");
  v17 = objc_msgSend(a1, "bottomAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

  *(_QWORD *)(v6 + 56) = v18;
  specialized Array._endMutation()(v19);
  sub_100025254();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v4, "activateConstraints:", isa);

}

double sub_1001DB82C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Class isa;
  id v8;
  void *v9;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = objc_msgSend(v0, "subviews");
  v2 = sub_10000A05C(0, (unint64_t *)&unk_10028FE60, UIView_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
    goto LABEL_32;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v25 = v3 + 32;
    v26 = v3 & 0xFFFFFFFFFFFFFF8;
    v28 = v4;
    v29 = v3;
    v27 = v3 & 0xC000000000000001;
    while (1)
    {
      if (v6)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v26 + 16))
          goto LABEL_31;
        v8 = *(id *)(v25 + 8 * v5);
      }
      v9 = v8;
      if (__OFADD__(v5++, 1))
        break;
      v11 = objc_msgSend(v8, "gestureRecognizers");
      if (!v11)
        goto LABEL_6;
      v12 = v11;
      v13 = sub_10000A05C(0, qword_100299030, UIGestureRecognizer_ptr);
      v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

      if ((unint64_t)v14 >> 62)
      {
        if (v14 < 0)
          v22 = v14;
        else
          v22 = v14 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v14);
        v15 = _CocoaArrayWrapper.endIndex.getter(v22);
        swift_bridgeObjectRelease(v14);
        if (v15)
        {
LABEL_15:
          if (v15 < 1)
            goto LABEL_30;
          for (i = 0; i != v15; ++i)
          {
            if ((v14 & 0xC000000000000001) != 0)
              v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v14);
            else
              v17 = *(id *)(v14 + 8 * i + 32);
            v18 = v17;
            v19 = objc_opt_self(UILongPressGestureRecognizer);
            if (swift_dynamicCastObjCClass(v18, v19))
            {

            }
            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(0);
              v20 = _swiftEmptyArrayStorage[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
              v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
              specialized ContiguousArray._endMutation()(v21);
            }
          }
          swift_bridgeObjectRelease(v14);
          v4 = v28;
          v3 = v29;
          v6 = v27;
          goto LABEL_5;
        }
      }
      else
      {
        v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v15)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease(v14);
LABEL_5:
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(_swiftEmptyArrayStorage);
      objc_msgSend(v9, "setGestureRecognizers:", isa);

LABEL_6:
      sub_1001DB82C();

      if (v5 == v4)
        goto LABEL_36;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if (v3 < 0)
      v23 = v3;
    else
      v23 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v3);
  }
LABEL_36:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

id sub_1001DBB08()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, "nextResponder");
  if (v1)
  {
    v2 = v1;
    v3 = objc_opt_self(UIViewController);
    result = (id)swift_dynamicCastObjCClass(v2, v3);
    if (result)
      return result;

  }
  result = objc_msgSend(v0, "nextResponder");
  if (result)
  {
    v5 = result;
    v6 = objc_opt_self(UIView);
    if (swift_dynamicCastObjCClass(v5, v6))
    {
      v7 = sub_1001DBB08();

      return (id)v7;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

void sub_1001DBBC0(void *a1)
{
  void *v1;
  id v3;
  double v4;
  double v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGRect v19;

  v3 = objc_msgSend(a1, "container");
  objc_msgSend(v3, "effectiveContentSize");
  v5 = v4;
  swift_unknownObjectRelease(v3);
  v6 = objc_msgSend(a1, "traitCollection");
  v7 = objc_msgSend(v6, "horizontalSizeClass");

  if (v7 != (id)1)
  {
    v8 = objc_msgSend(v1, "view", v5);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v8, "readableContentGuide");

      objc_msgSend(v10, "layoutFrame");
      v12 = v11;
      v14 = v13;
      v16 = v15;
      v18 = v17;

      v19.origin.x = v12;
      v19.origin.y = v14;
      v19.size.width = v16;
      v19.size.height = v18;
      CGRectGetWidth(v19);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1001DBCF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 24);
    return 0;
  }
  return result;
}

void **sub_1001DBD80(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  char *v18;
  void **v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    *v12 = *v13;
    v15 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v16 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v18 = v9;
    swift_retain(v14);
    v17(v15, v16, v4);
    v19 = (void **)((v7 + v16) & 0xFFFFFFFFFFFFF8);
    v9 = (char *)*v19;
    *(_QWORD *)((v7 + v15) & 0xFFFFFFFFFFFFF8) = *v19;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_1001DBE84(id *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (unint64_t)a1 + 15;

  v3 &= 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)v3);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  return swift_release(*(_QWORD *)((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
}

void **sub_1001DBEF8(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = *a2;
  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = *v6;
  *v5 = *v6;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14 = v4;
  swift_retain(v7);
  v13(v11, v12, v8);
  v15 = *(_QWORD *)(v9 + 64) + 7;
  v16 = (_QWORD *)((v15 + v11) & 0xFFFFFFFFFFFFF8);
  v17 = (uint64_t *)((v15 + v12) & 0xFFFFFFFFFFFFF8);
  v18 = *v17;
  *v16 = *v17;
  swift_retain(v18);
  return a1;
}

void **sub_1001DBFB0(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  id v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (unint64_t)a2 + 15;
  v5 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = (unint64_t)a1 + 15;
  v9 = v5;

  v10 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v11 = v6 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v13 = *v10;
  *v10 = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v10 + v15 + 8) & ~v15;
  v17 = (v15 + 8 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v16, v17);
  v18 = *(_QWORD *)(v14 + 64) + 7;
  v19 = (uint64_t *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = (uint64_t *)((v18 + v17) & 0xFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = *v19;
  *v19 = *v20;
  swift_retain(v21);
  swift_release(v22);
  return a1;
}

_QWORD *sub_1001DC080(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v6 + 64) + 7 + v9) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void **sub_1001DC114(void **a1, void **a2, uint64_t a3)
{
  unint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v5 = (unint64_t)a2 + 15;
  v6 = *a1;
  *a1 = *a2;
  v7 = (unint64_t)a1 + 15;

  v7 &= 0xFFFFFFFFFFFFFFF8;
  v5 &= 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)v7;
  *(_QWORD *)v7 = *(_QWORD *)v5;
  swift_release(v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 8 + v7) & ~v10;
  v12 = (v10 + 8 + v5) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = (uint64_t *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  *v14 = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  swift_release(v15);
  return a1;
}

uint64_t sub_1001DC1D0(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1001DC25C + 4 * byte_1001F78A0[v10]))();
  }
}

void sub_1001DC2E4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1001DC3EC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1001DC45CLL);
}

void sub_1001DC3F4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1001DC3FCLL);
  JUMPOUT(0x1001DC45CLL);
}

void sub_1001DC40C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1001DC45CLL);
}

void sub_1001DC414()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1001DC45CLL);
}

void sub_1001DC41C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1001DC458);
      JUMPOUT(0x1001DC454);
    }
    JUMPOUT(0x1001DC428);
  }
  JUMPOUT(0x1001DC45CLL);
}

uint64_t type metadata accessor for UserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault);
}

uint64_t sub_1001DC480()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(kLTDebugUseQuickSessionTimeoutKey);
  qword_1002990B8 = result;
  unk_1002990C0 = v1;
  return result;
}

id sub_1001DC4AC()
{
  return sub_1001DC520();
}

id sub_1001DC4C8()
{
  return sub_1001DC520();
}

id sub_1001DC4E4()
{
  return sub_1001DC520();
}

id sub_1001DC504()
{
  return sub_1001DC520();
}

id sub_1001DC520()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

uint64_t sub_1001DC560@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DC5B4(a1);
}

uint64_t sub_1001DC57C(uint64_t a1)
{
  return sub_1001DC6DC(a1);
}

uint64_t sub_1001DC598@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DC5B4(a1);
}

uint64_t sub_1001DC5B4@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1001DCC74((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10000A020((uint64_t)v10, (uint64_t *)&unk_10028C0B0);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_1001DC6C0(uint64_t a1)
{
  return sub_1001DC6DC(a1);
}

uint64_t sub_1001DC6DC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  NSString v10;
  uint64_t v12;

  v2 = v1;
  v4 = sub_100006DF4(&qword_1002948B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100065FD0(a1, (uint64_t)v6);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", isa, v10);
  swift_unknownObjectRelease(isa);

  return sub_10000A020(a1, &qword_1002948B0);
}

uint64_t sub_1001DC7F0()
{
  return sub_1001DC84C();
}

uint64_t sub_1001DC814()
{
  return sub_1001DC84C();
}

uint64_t sub_1001DC830()
{
  return sub_1001DC84C();
}

uint64_t sub_1001DC84C()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "stringForKey:", v1);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1001DC8C4()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dataForKey:", v1);

  if (!v2)
    return 0;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONDecoder.init()();
  v8 = sub_100006DF4(&qword_1002990E0);
  v9 = sub_1001DCBB8(&qword_1002990F0, &qword_1002990F8, (uint64_t)&unk_1001F3C18, (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v8, v3, v5, v8, v9);
  swift_release(v7);
  sub_1000D6A40(v3, v5);
  return v11;
}

double sub_1001DC9FC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class isa;
  NSString v12;
  double result;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONEncoder.init()();
  v14 = a1;
  v6 = sub_100006DF4(&qword_1002990C8);
  v7 = sub_1001DCB34();
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v14, v6, v7);
  v10 = v9;
  swift_bridgeObjectRelease();
  sub_1000D69D4(v8, v10);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000D6A40(v8, v10);
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", isa, v12);
  swift_unknownObjectRelease(isa);

  sub_1000D6A2C(v8, v10);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

unint64_t sub_1001DCB34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002990D0;
  if (!qword_1002990D0)
  {
    v1 = sub_1000070BC(&qword_1002990C8);
    sub_1001DCBB8(&qword_1002990D8, &qword_1002990E8, (uint64_t)&unk_1001F3BF0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002990D0);
  }
  return result;
}

uint64_t sub_1001DCBB8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000070BC(&qword_1002990E0);
    sub_1001DCC34(a2, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001DCC34(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for SELFLoggingInvocationDescription(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001DCC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4((uint64_t *)&unk_10028C0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001DCCBC()
{
  id v0;
  uint64_t v1;
  uint64_t inited;
  unint64_t v3;
  Class isa;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = sub_100006DF4(&qword_100295B88);
  inited = swift_initStackObject(v1, &v5);
  *(_OWORD *)(inited + 16) = xmmword_1001E4D60;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000001001FA670;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = 0x79616C706F747541;
  *(_QWORD *)(inited + 88) = 0xEB00000000535454;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = 0;
  v3 = sub_1001A4954(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v0, "registerDefaults:", isa);

}

uint64_t *sub_1001DCDD0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v52 = a2;
  v7 = sub_100006DF4(&qword_100295E30);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006DF4(qword_100299100);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SidebarButton(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = sub_100006DF4(&qword_100295E20);
  __chkstk_darwin(v54);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006DF4(&qword_100295E00);
  __chkstk_darwin(v18);
  v53 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v20 = a3[4];
    v21 = a3[5];
    v22 = type metadata accessor for ConversationContext(0);
    v50 = v10;
    v23 = v22;
    v24 = sub_100007D5C(&qword_10028B090, type metadata accessor for ConversationContext, (uint64_t)&unk_1001E9C74);
    v51 = v7;
    v25 = a4;
    v26 = a3;
    v27 = v24;
    v28 = EnvironmentObject.projectedValue.getter(v20, v21, v23, v24);
    KeyPath = swift_getKeyPath(&unk_1001F78D0);
    v30 = v27;
    a3 = v26;
    a4 = v25;
    EnvironmentObject.Wrapper.subscript.getter(v15, KeyPath, v28, v30);
    swift_release(v28);
    swift_release(KeyPath);
    v31 = (_QWORD *)((char *)v15 + *(int *)(v13 + 20));
    v55 = 0;
    State.init(wrappedValue:)(&v56, &v55, &type metadata for Double);
    v32 = v57;
    *v31 = v56;
    v31[1] = v32;
    v33 = (char *)v15 + *(int *)(v13 + 24);
    LOBYTE(v55) = 1;
    v34 = State.init(wrappedValue:)(&v56, &v55, &type metadata for Bool);
    v35 = v57;
    *v33 = v56;
    *((_QWORD *)v33 + 1) = v35;
    v36 = static Alignment.topLeading.getter(v34);
    v38 = v37;
    v39 = v54;
    v40 = (uint64_t)&v17[*(int *)(v54 + 36)];
    sub_100161128((uint64_t)v15, v40);
    v41 = (uint64_t *)(v40 + *(int *)(sub_100006DF4(&qword_100295F08) + 36));
    *v41 = v36;
    v41[1] = v38;
    sub_10000B074(v52, (uint64_t)v17, &qword_100295E30);
    sub_1001DD2A0((uint64_t)v15);
    sub_10000B074((uint64_t)v17, (uint64_t)v12, &qword_100295E20);
    swift_storeEnumTagMultiPayload(v12, v50, 0);
    v42 = sub_10016402C();
    v43 = sub_100032BC0(&qword_100295E28, &qword_100295E30, (void (*)(void))sub_1001640D4, (void (*)(void))sub_1001641DC);
    v44 = (uint64_t)v53;
    _ConditionalContent<>.init(storage:)(v12, v39, v51, v42, v43);
    v45 = (uint64_t)v17;
    v46 = &qword_100295E20;
  }
  else
  {
    sub_10000B074(v52, (uint64_t)v9, &qword_100295E30);
    sub_10000B074((uint64_t)v9, (uint64_t)v12, &qword_100295E30);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v47 = sub_10016402C();
    v48 = sub_100032BC0(&qword_100295E28, &qword_100295E30, (void (*)(void))sub_1001640D4, (void (*)(void))sub_1001641DC);
    v44 = (uint64_t)v53;
    _ConditionalContent<>.init(storage:)(v12, v54, v7, v47, v48);
    v45 = (uint64_t)v9;
    v46 = &qword_100295E30;
  }
  sub_10000A020(v45, v46);
  sub_1001DD1B4(v44, a4);
  return sub_1001DD1FC(a3);
}

uint64_t sub_1001DD1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006DF4(&qword_100295E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1001DD1FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = (void *)a1[9];
  swift_release(a1[1]);
  swift_release(v2);
  sub_1000484FC(v3, v4);
  swift_bridgeObjectRelease();

  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  return a1;
}

uint64_t sub_1001DD2A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SidebarButton(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001DD2DC(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for () + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t type metadata accessor for AnyStateObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10009AABC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyStateObserver);
}

uint64_t sub_1001DD32C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

id sub_1001DD334()
{
  uint64_t v0;
  id v1;

  v0 = type metadata accessor for WaveformUIKitView();
  v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)), "init");
  sub_1001DD704();
  return v1;
}

void sub_1001DD370(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  int v5;
  double v6;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_DWORD *)(v1 + 12);
  sub_10001F410(*(_QWORD *)v1, v4);
  v6 = sub_1000D64C4(v3, v4);
  sub_10001F470(v3, v4);
  *(double *)&a1[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_scale] = 1.0 / v6;
  objc_msgSend(a1, "setNeedsLayout");
  *(_DWORD *)&a1[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_volumeLevel] = v5;
  sub_1001DDF7C();
}

uint64_t sub_1001DD408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE70C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001DD458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE70C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001DD4A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DE70C();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

void sub_1001DD520()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double MidX;
  id v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  CATransform3D v24;
  objc_super v25;
  CGRect v26;
  CGRect v27;

  v1 = v0;
  v25.receiver = v0;
  v25.super_class = (Class)type metadata accessor for WaveformUIKitView();
  objc_msgSendSuper2(&v25, "layoutSubviews");
  v2 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageLayer];
  if (v2)
  {
    v3 = *(void **)&v0[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageContainerLayer];
    v4 = v2;
    objc_msgSend(v4, "bounds");
    objc_msgSend(v3, "setBounds:");
    CATransform3DMakeScale(&v24, *(CGFloat *)&v1[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_scale], *(CGFloat *)&v1[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_scale], 1.0);
    objc_msgSend(v3, "setTransform:", &v24);
    v5 = objc_msgSend(v1, "layer");
    objc_msgSend(v5, "bounds");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;

    v26.origin.x = v7;
    v26.origin.y = v9;
    v26.size.width = v11;
    v26.size.height = v13;
    MidX = CGRectGetMidX(v26);
    v15 = objc_msgSend(v1, "layer");
    objc_msgSend(v15, "bounds");
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;

    v27.origin.x = v17;
    v27.origin.y = v19;
    v27.size.width = v21;
    v27.size.height = v23;
    objc_msgSend(v3, "setPosition:", MidX, CGRectGetMinY(v27));

  }
}

void sub_1001DD704()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  _QWORD v46[5];

  v1 = sub_100006DF4(&qword_10028BB80);
  __chkstk_darwin(v1);
  v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v41 - v9;
  __chkstk_darwin(v8);
  v13 = OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_package;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_package])
    return;
  v42 = (char *)&v41 - v11;
  v43 = v12;
  v41 = v0;
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v14, "URLForResource:withExtension:", v15, v16);

  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v3, 1, 1, v4);
    goto LABEL_6;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v18 = v43;
  v19 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v19(v3, v10, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v3, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v3, 1, v4) == 1)
  {
LABEL_6:
    sub_10000A020((uint64_t)v3, &qword_10028BB80);
    return;
  }
  v20 = v42;
  v19(v42, v3, v4);
  sub_10000A05C(0, &qword_100299210, CAPackage_ptr);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v7, v20, v4);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAPackageTypeCAMLBundle);
  v23 = sub_1001DDC88((uint64_t)v7, v21, v22, 0);
  v24 = objc_msgSend(v23, "rootLayer");
  if (v24)
  {
    v25 = v24;
    v26 = v41;
    v27 = *(void **)&v41[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageContainerLayer];
    v28 = objc_msgSend(v27, "superlayer");

    if (!v28)
    {
      objc_msgSend(v27, "setAnchorPoint:", 0.5, 0.0);
      v29 = objc_msgSend(v26, "layer");
      objc_msgSend(v29, "addSublayer:", v27);

    }
    objc_msgSend(v27, "setGeometryFlipped:", objc_msgSend(v23, "isGeometryFlipped"));
    objc_msgSend(v27, "addSublayer:", v25);
    v30 = *(void **)&v26[v13];
    *(_QWORD *)&v26[v13] = v23;
    v31 = v23;

    v32 = *(void **)&v26[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageLayer];
    *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageLayer] = v25;
    v33 = v25;

    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v31, "publishedObjectWithName:", v34);

    if (v35)
    {
      _bridgeAnyObjectToAny(_:)(v45, v35);
      swift_unknownObjectRelease(v35);
    }
    else
    {
      memset(v45, 0, sizeof(v45));
    }
    v36 = v43;
    sub_1001DCC74((uint64_t)v45, (uint64_t)v46);
    if (v46[3])
    {
      v37 = sub_10000A05C(0, &qword_100299218, CAEmitterLayer_ptr);
      v38 = swift_dynamicCast(&v44, v46, (char *)&type metadata for Any + 8, v37, 6);
      v39 = v44;
      if (!v38)
        v39 = 0;
    }
    else
    {
      sub_10000A020((uint64_t)v46, (uint64_t *)&unk_10028C0B0);
      v39 = 0;
    }
    v40 = *(void **)&v26[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_particlesLayer];
    *(_QWORD *)&v26[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_particlesLayer] = v39;

    sub_1001DDE14();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v4);

  }
}

id sub_1001DDC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  void *v10;
  NSString v11;
  NSDictionary v12;
  id v13;
  id v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  id v17;
  id v18;
  uint64_t v19;
  id v21;

  v5 = v4;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  if (a4)
  {
    v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v12.super.isa = 0;
  }
  v21 = 0;
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "packageWithContentsOfURL:type:options:error:", v10, v11, v12.super.isa, &v21);

  v14 = v21;
  if (v13)
  {
    v15 = type metadata accessor for URL(0);
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
    v17 = v14;
    v16(a1, v15);
  }
  else
  {
    v18 = v21;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow();
    v19 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
  }
  return v13;
}

void sub_1001DDE14()
{
  char *v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;

  v1 = objc_msgSend(v0, "window");
  if (!v1)
    goto LABEL_4;
  v2 = OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_displayLink;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_displayLink])
  {

LABEL_4:
    v3 = objc_msgSend(v0, "window");

    if (!v3)
    {
      v4 = OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_displayLink;
      objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_displayLink], "invalidate");
      v5 = *(void **)&v0[v4];
      *(_QWORD *)&v0[v4] = 0;

    }
    return;
  }
  v13 = v1;
  v6 = objc_msgSend(v1, "screen");
  v7 = objc_msgSend(v6, "displayLinkWithTarget:selector:", v0, "_updateParticles");

  v8 = *(void **)&v0[v2];
  *(_QWORD *)&v0[v2] = v7;

  v9 = *(void **)&v0[v2];
  if (v9)
  {
    v10 = (void *)objc_opt_self(NSRunLoop);
    v11 = v9;
    v12 = objc_msgSend(v10, "currentRunLoop");
    objc_msgSend(v11, "addToRunLoop:forMode:", v12, NSDefaultRunLoopMode);

  }
}

void sub_1001DDF7C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  __n128 v9;
  Class isa;
  NSString v11;
  CFTimeInterval v12;
  Class v13;
  NSString v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_particlesLayer);
  if (!v1)
    return;
  v19 = v1;
  v2 = objc_msgSend(v19, "emitterCells");
  if (!v2)
  {
    v15 = v19;
    goto LABEL_11;
  }
  v3 = v2;
  v4 = sub_10000A05C(0, &qword_100299208, CAEmitterCell_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v16 = v5;
    else
      v16 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v17 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    v6 = v19;
    if (v17)
      goto LABEL_5;
LABEL_16:

    swift_bridgeObjectRelease();
    return;
  }
  v6 = v19;
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_16;
LABEL_5:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v5 + 32);
LABEL_8:
    v8 = v7;
    v9 = swift_bridgeObjectRelease();
    v9.n128_f32[0] = (float)(*(float *)(v0 + OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_volumeLevel) * 2000.0)
                   + 3000.0;
    objc_msgSend(v8, "setBirthRate:", v9.n128_f64[0]);
    isa = Float._bridgeToObjectiveC()().super.super.isa;
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "setValue:forKeyPath:", isa, v11);

    v12 = CACurrentMediaTime();
    sin(v12 + v12);
    v13 = Float._bridgeToObjectiveC()().super.super.isa;
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "setValue:forKeyPath:", v13, v14);

    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "reloadValueForKeyPath:", v18);

    v15 = v18;
LABEL_11:

    return;
  }
  __break(1u);
}

id sub_1001DE264(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  objc_super v13;

  v9 = OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageContainerLayer;
  v10 = objc_allocWithZone((Class)CALayer);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "init");
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_package] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageLayer] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_particlesLayer] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_displayLink] = 0;
  *(_DWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_volumeLevel] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_scale] = 0x3FF0000000000000;

  v13.receiver = v11;
  v13.super_class = (Class)type metadata accessor for WaveformUIKitView();
  return objc_msgSendSuper2(&v13, "initWithFrame:", a1, a2, a3, a4);
}

id sub_1001DE378(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  objc_super v8;

  v3 = OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageContainerLayer;
  v4 = objc_allocWithZone((Class)CALayer);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_package] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_packageLayer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_particlesLayer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_displayLink] = 0;
  *(_DWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_volumeLevel] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17SequoiaTranslator17WaveformUIKitView_scale] = 0x3FF0000000000000;

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for WaveformUIKitView();
  v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

id sub_1001DE47C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WaveformUIKitView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WaveformUIKitView()
{
  return objc_opt_self(_TtC17SequoiaTranslator17WaveformUIKitView);
}

uint64_t sub_1001DE538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for WaveformView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10001F410(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10001F470(v6, v7);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for WaveformView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10001F470(v6, v7);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  return a1;
}

uint64_t getEnumTagSinglePayload for WaveformView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WaveformView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WaveformView()
{
  return &type metadata for WaveformView;
}

unint64_t sub_1001DE6C8()
{
  unint64_t result;

  result = qword_100299220;
  if (!qword_100299220)
  {
    result = swift_getWitnessTable(&unk_1001F79D0, &type metadata for WaveformView);
    atomic_store(result, (unint64_t *)&qword_100299220);
  }
  return result;
}

unint64_t sub_1001DE70C()
{
  unint64_t result;

  result = qword_100299228;
  if (!qword_100299228)
  {
    result = swift_getWitnessTable(&unk_1001F7A20, &type metadata for WaveformView);
    atomic_store(result, (unint64_t *)&qword_100299228);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC17SequoiaTranslatorP33_005CD99F2C0B34A68FEE80E5DDCACBAB19ResourceBundleClass);
}
